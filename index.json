[{
    "title": "「翻译」Anthropic:为人工智能代理进行有效的上下文工程",
    "url": "/labs/rosetta/anthropic_context_engineering/",
    "section": "labs",
    "date": "2025-10-01",
    "summary": "Anthropic 工程团队\n在提示工程（prompt engineering）成为应用人工智能领域关注焦点几年后，一个新术语开始崭露头角：上下文工程（context engineering）。使用语言模型进行构建，正逐渐从为提示寻找合适的词语和短语，转变为回答一个更宏观的问题：“什么样的上下文配置最有可能产生我们模型的期望行为？”\n",
    "description": "",
    "tags": ["Anthropic","Context Engineering","上下文工程","智能代理"],
    "categories": ["工程实践","智能代理开发"],
    "content": "Anthropic 工程团队\n在提示工程（prompt engineering）成为应用人工智能领域关注焦点几年后，一个新术语开始崭露头角：上下文工程（context engineering）。使用语言模型进行构建，正逐渐从为提示寻找合适的词语和短语，转变为回答一个更宏观的问题：“什么样的上下文配置最有可能产生我们模型的期望行为？”\n上下文指的是在从大语言模型（LLM）采样时包含的令牌（token）集合。眼下的工程问题是，在 LLM 的固有约束下，优化这些令牌的效用，以持续实现期望的结果。要有效地驾驭 LLM，通常需要在上下文中思考——换句话说：考虑 LLM 在任何给定时间可用的整体状态，以及该状态可能产生的潜在行为。\n在这篇文章中，我们将探讨上下文工程这门新兴的艺术，并为构建可控、有效的代理提供一个更精炼的心智模型。\n上下文工程与提示工程 在 Anthropic，我们将上下文工程视为提示工程的自然演进。提示工程指的是为获得最佳结果而编写和组织 LLM 指令的方法（请参阅我们的文档以获取概述和有用的提示工程策略）。上下文工程则指的是在 LLM 推理过程中，为管理和维护最佳令牌（信息）集合而采取的一系列策略，包括可能出现在提示之外的所有其他信息。\n在早期使用 LLM 进行工程设计的阶段，提示是人工智能工程工作中最重要的部分，因为日常聊天互动之外的大多数用例都需要针对单次分类或文本生成任务进行优化的提示。顾名思义，提示工程的主要焦点是如何编写有效的提示，特别是系统提示。然而，随着我们朝着构建能够在多轮推理和更长时间范围内运行的、能力更强的代理迈进，我们需要策略来管理整个上下文状态（系统指令、工具、模型上下文协议（MCP）、外部数据、消息历史等）。\n一个循环运行的代理会产生越来越多可能与下一轮推理相关的数据，这些信息必须周期性地进行提炼。上下文工程正是在这个不断演变的信息宇宙中，精心挑选哪些内容将进入有限的上下文窗口的艺术与科学。\n与编写提示这项离散的任务相比，上下文工程是迭代的，并且每次我们决定向模型传递什么内容时，都会发生管理阶段。\n为什么上下文工程对构建强大的代理至关重要 我们观察到，尽管 LLM 速度快，能处理越来越大的数据量，但它们和人类一样，在某个点上会失去焦点或感到困惑。关于“大海捞针”式基准测试的研究揭示了上下文退化（context rot）的概念：随着上下文窗口中令牌数量的增加，模型准确回忆该上下文中信息的能力会下降。\n虽然某些模型的性能下降比其他模型更为平缓，但这一特性在所有模型中都会出现。因此，上下文必须被视为一种边际回报递减的有限资源。就像人类的工作记忆容量有限一样，LLM 在解析大量上下文时也有一个“注意力预算”。每引入一个新的令牌都会消耗这个预算的一部分，从而增加了仔细管理 LLM 可用令牌的必要性。\n这种注意力稀缺源于 LLM 的架构限制。LLM 基于 Transformer 架构，该架构使每个令牌都能关注到整个上下文中的其他所有令牌。这导致 n 个令牌之间存在 n² 个成对关系。\n随着上下文长度的增加，模型捕捉这些成对关系的能力被拉伸，从而在上下文大小和注意力焦点之间产生了一种天然的张力。此外，模型的注意力模式是在训练数据分布中形成的，其中短序列通常比长序列更常见。这意味着模型对于上下文范围内的依赖关系经验较少，专门化的参数也较少。\n像位置编码插值这样的技术，通过将长序列适应于最初训练的较小上下文，使得模型能够处理更长的序列，尽管在理解令牌位置方面会有一些性能下降。这些因素造成了性能的梯度下降而非悬崖式下跌：模型在较长上下文中仍然非常强大，但与在较短上下文中的表现相比，其信息检索和长程推理的精度可能会降低。\n这些现实情况意味着，深思熟虑的上下文工程对于构建强大的代理至关重要。\n有效上下文的剖析 鉴于 LLM 受到有限的注意力预算的限制，良好的上下文工程意味着找到尽可能小的高信噪比令牌集合，以最大化实现某种期望结果的可能性。实现这一实践远比说起来容易，但在下一节中，我们将概述这一指导原则在上下文的不同组成部分中的实际意义。\n系统提示应该极其清晰，使用简单、直接的语言，以恰当的高度向代理呈现思想。恰当的高度是介于两种常见失败模式之间的“金发姑娘”区域。一个极端是，我们看到工程师在提示中硬编码复杂、脆弱的逻辑，以引出精确的代理行为。这种方法会产生脆弱性，并随着时间的推移增加维护复杂性。另一个极端是，工程师有时会提供模糊、高层次的指导，这无法为 LLM 提供期望输出的具体信号，或者错误地假设了共享的上下文。最佳高度则在两者之间取得了平衡：既足够具体以有效引导行为，又足够灵活，能为模型提供强大的启发式方法来指导行为。\n我们建议将提示组织成不同的部分（ …"
  },{
    "title": "「翻译」Cognition: 为 Claude Sonnet 4.5 重构 Devin：经验与挑战",
    "url": "/labs/rosetta/cognition_report_claude-4-5/",
    "section": "labs",
    "date": "2025-09-30",
    "summary": " 原文见：Rebuilding Devin for Claude Sonnet 4.5: Lessons and Challenges\n我们为 Claude Sonnet 4.5 重构了 Devin。新版本在我们的初级开发人员评估 (Junior Developer Evals) 中速度提升了 2 倍，表现提高了 12%，现已在“智能代理预览”(Agent Preview) 中提供。对于喜欢旧版 Devin 的用户，该版本仍然可用。\n2025年9月29日 Cognition 团队\n",
    "description": "",
    "tags": ["Coding Agent","Claude Sonnet 4.5","Devin","Windsurf"],
    "categories": ["工程实践","智能代理开发"],
    "content": " 原文见：Rebuilding Devin for Claude Sonnet 4.5: Lessons and Challenges\n我们为 Claude Sonnet 4.5 重构了 Devin。新版本在我们的初级开发人员评估 (Junior Developer Evals) 中速度提升了 2 倍，表现提高了 12%，现已在“智能代理预览”(Agent Preview) 中提供。对于喜欢旧版 Devin 的用户，该版本仍然可用。\n2025年9月29日 Cognition 团队\n我们为 Claude Sonnet 4.5 重构了 Devin。\n新版本在我们的初级开发人员评估中速度提升了 2 倍，表现提高了 12%，现已在“智能代理预览”中提供。对于喜欢旧版 Devin 的用户，该版本仍然可用。\n为什么选择重构，而不是简单地替换成新的 Sonnet 模型就草草了事？因为这个模型的运作方式与众不同——它打破了我们对智能代理应如何构建的固有设想。以下是我们的心得：\n因为 Devin 是一个会规划、执行和迭代的智能代理，而不仅仅是自动补全代码（或充当一个“副驾驶”），所以我们得以用一个独特的窗口来观察模型的能力。每一次改进都会在我们的反馈循环中产生复合效应，让我们了解到真正发生了哪些变化。在 Sonnet 4.5 上，我们看到了自 Sonnet 3.6（Devin 正式版所使用的模型）以来最大的飞跃：规划性能提升了 18%，端到端评估得分提高了 12%，长达数小时的任务会话也变得更快、更可靠。\n为了实现这些改进，我们不仅需要围绕模型的一些新功能重构 Devin，还必须针对一些我们在前几代模型中从未注意到的新行为进行调整。我们将在下面分享一些我们的观察：\n模型能意识到自己的上下文窗口 Sonnet 4.5 是我们见过的第一个能意识到自身上下文窗口的模型，这一点塑造了它的行为方式。我们观察到，当接近上下文限制时，它会主动总结自己的进展，并更果断地实施修复以完成任务。\n这种“上下文焦虑”实际上可能会损害性能：我们发现，当模型认为自己接近窗口末尾时，即使还有足够的空间，它也会选择走捷径或将任务半途而废。\n为了克服这种行为，我们最终采用了相当激进的提示 (prompting) 方式。即便如此，我们发现仅在对话开始时给出提示是不够的——我们必须在提示的开头和结尾都加上提醒，以防止它过早地结束工作。\n在研究解决这个问题的方法时，我们发现了一个意想不到的技巧，效果很好：启用 100 万 token 的测试版，但将使用量上限设为 20 万。这让模型认为自己还有充足的余地，从而表现正常，避免了由焦虑驱动的捷径行为或性能下降。\n这种行为对我们如何围绕上下文管理进行架构设计具有实际意义。在规划 token 预算时，我们现在需要考虑模型自身的意识：了解它何时会自然而然地想要进行总结，以及何时我们需要通过上下文压缩进行干预。\n有趣的是，该模型总是低估自己剩余的 token 数量——而且这些错误的估计非常精确。\n模型会做大量笔记 Sonnet 4.5 最显著的变化之一是，它会通过查阅文档和进行实验，积极地尝试构建关于问题领域的知识。\n为自己写笔记\n无需提示，该模型就会将文件系统视为其内存。它会频繁地撰写（或想要撰写）摘要和笔记（例如 CHANGELOG.md, SUMMARY.md，但不会是 CLAUDE.md 或 AGENTS.md），既是为了方便用户，也是为了自己将来参考。这表明该模型经过训练，倾向于将状态外部化，而不是纯粹依赖上下文。当模型接近其上下文窗口末尾时，这种行为会更加明显。\n当我们看到这一点时，我们对是否有可能移除我们自己的一些内存管理机制、让模型来处理这个问题产生了兴趣。但在实践中，我们发现这些摘要不够全面。例如，它有时会转述任务，却遗漏了重要细节。当我们依赖模型自己的笔记而没有使用我们的压缩和摘要系统时，我们观察到性能下降和特定知识的缺失：模型不知道自己不知道什么（或者将来可能需要知道什么）。通过提示很可能会改善这些笔记的质量。只是不要指望能免费得到一个完美的系统。\n在某些情况下，有点滑稽的是，我们看到智能代理花在写摘要上的 token 比实际解决问题所用的还要多。我们还注意到，模型的努力程度并不均衡：上下文窗口越短，模型生成的摘要 token 往往越多。\n在我们的测试中，我们发现这种行为在某些情况下很有用，但当我们明确指示智能代理使用其先前生成的状态时，其效果不如我们现有的内存系统。\n这是一个有趣的范式，也是模型开发的一个新方向，特别是对于更简单的智能代理架构或围绕子代理委托构建的系统而言。这显然是 Anthropic 的一个新方向：很可能指向一个未来，即模型更具上下文感知能力，并且这将成为多个智能代理相互通信的方式。强化学习 (RL) 的 …"
  },{
    "title": "Git 历史回退自救手册：reflog 找回与分支指针恢复",
    "url": "/labs/git-recover_guide/",
    "section": "labs",
    "date": "2025-09-28",
    "summary": "该指南来自于一次自我感觉惊险的经历，\n一份精简但可操作的“掉历史”自救清单：当你在 GUI 或命令行误操作后，发现最近提交“消失”时，如何快速定位并安全恢复。\n",
    "description": "",
    "tags": ["Git","数据恢复","分支管理"],
    "categories": ["技术分享"],
    "content": "该指南来自于一次自我感觉惊险的经历，\n一份精简但可操作的“掉历史”自救清单：当你在 GUI 或命令行误操作后，发现最近提交“消失”时，如何快速定位并安全恢复。\n典型症状 近期提交不见了：git log 顶端不是你刚做的提交。 工作区回到旧版本：本地文件和远端网站内容明显“时光倒流”。 远端与本地不一致：git status -sb 显示 main...origin/main [ahead N|behind N]。 成因与诱因（简明） 直接成因：分支指针被移到旧提交，或进入分离 HEAD，导致近期提交不在当前分支历史中。 前几天可能埋下的雷： 直接 git checkout \u0026lt;commit\u0026gt; 查看旧版本后继续开发/提交； 用 GUI 的“Checkout/Reset/Restore”类功能回到旧提交但未建保护分支； 偶发 git reset --hard \u0026lt;old\u0026gt;； 未及时推送，远端与本地脱节，引发误判。 今天触发的动作：在 GUI 中对某个旧提交执行了“Checkout/Reset”，把当前分支（例如 main）指针回退了。 本次拯救（摘要） 用 reflog 找到目标提交 \u0026lt;sha\u0026gt;（历史未丢，只是指针偏了）。\n二选一恢复：\n# 安全合并法（推荐） git checkout -b restore-work \u0026lt;sha\u0026gt; git checkout main git merge restore-work # 或：直接重置法（快捷） git checkout main git reset --hard \u0026lt;sha\u0026gt; 如远端历史需以本地为准：git push -f origin main 恢复步骤 # 1) 快速浏览当前可达历史 git log --oneline -10 # 2) 关键：查看 HEAD 的移动“航迹记录” git reflog -20 在 reflog 输出中，找到你需要回到的那次正确提交的 SHA（记为 \u0026lt;sha\u0026gt;）。 两种恢复方式（择一） # 从目标提交创建保护分支 git checkout -b restore-work \u0026lt;sha\u0026gt; # 回到主分支并合并恢复 git checkout main git merge restore-work 说明：保留现场，历史连贯，最不容易出岔子。\ngit checkout main git reset --hard \u0026lt;sha\u0026gt; 说明：让当前分支指针“瞬移”到 \u0026lt;sha\u0026gt;；如远端不是你想要的历史，后续可能需要强推。\n同步远端（如有需要） # 仅当你确认“本地才是正确历史”时才执行强推！ git push -f origin main 预防与习惯（精简版） 查看旧版本用新分支：git checkout -b inspect-\u0026lt;date\u0026gt; \u0026lt;sha\u0026gt;。 小步提交，及时推送：远端即备份。 危险操作前打快照：git branch backup-\u0026lt;date\u0026gt; 或 git tag safety-\u0026lt;date\u0026gt;。 丢历史先看 reflog：优先 git reflog，再考虑其他。 "
  },{
    "title": "代码“劫后余生”:记一场Git灾难与抢救",
    "url": "/post/git-incident-2025-09-28/",
    "section": "post",
    "date": "2025-09-28",
    "summary": "经过一天的工作，我昨天配置的博客评论区离奇消失，查找记录时发现更惊悚的事：我近几天的Git提交记录全部失踪，并因一个误操作导致代码回滚到三天前的基础版本，所有后期工作成果瞬间清零。我向 GPT-5-Codex 求救，它立即启动高级Git命令进行抢救。最终，在GPT的指导下，我执行了几行恢复命令，代码起死回生，成功回到了误操作前的状态。这次劫后余生的经历，让我深切体会到Git的强大与学习它的必要性。\n",
    "description": "",
    "tags": ["数据恢复","分支管理","编程","网站开发"],
    "categories": ["工程实践"],
    "content": "经过一天的工作，我昨天配置的博客评论区离奇消失，查找记录时发现更惊悚的事：我近几天的Git提交记录全部失踪，并因一个误操作导致代码回滚到三天前的基础版本，所有后期工作成果瞬间清零。我向 GPT-5-Codex 求救，它立即启动高级Git命令进行抢救。最终，在GPT的指导下，我执行了几行恢复命令，代码起死回生，成功回到了误操作前的状态。这次劫后余生的经历，让我深切体会到Git的强大与学习它的必要性。\n如果你对类似的情况感到恐惧，或者对Git的使用还不够熟悉，可以参考我的自救手册。本文主要讲述这件事情的前后经过。\n故事的前后经过 今天我发现博客的评论区没了，我感到很奇怪，因为昨这是我昨天下午做的，当时也提交git了，可能是今天进行主题修改的时候，AI不小心把该部分代码删掉了。虽然有点小不爽，但想来也不是很复杂的事情，毕竟昨天配置评论区的时候也没费多大劲。\n然而，当我打开windsurf试图查找之前的记录，发现GPT-5-Codex一如既往地陷入了“内耗式”地查找，来来回回几圈之后，我忍不住叫停问它：到底找没找到？它的回答是，没有…\n我很震惊，因为这中情况不太可能发生：最近每一次都是完成一小波修改就git一下，已经养成了习惯。昨天的那个配置不可能丢失，我对那一部分工作印象很深刻，我坚信不是我出现幻觉，就是AI出现了幻觉。我打开了GitHub Desktop（我之前都是直接在IDE上随手提交的，功能相对简陋），试图依次查找与博客评论区相关的配置，我要跟AI对质！\n然而，真正惊悚的事情就此开始：我发现GitHub Desktop上记录的最新提交记录是3天前（25日）。我惊慌之余打开了GitHub网站，发现的确如此，我这几天的记录工作记录不存在。我很困惑，难道是创建了什么新的分支？于是就在GitHub Desktop上随便点点点，突然，当我切回Windsurf，发现该IDE上的文件夹目录已经回归到了25日… 话说，25日的时候，我这一系列工作才刚开始没多久啊！我傻了。\n之前曾经出现过对git的误操作导致一些记录找不到，不过那个时候的工作烂尾的较多，丢失也不心疼。这一次，我好不容易把网站搭好，在25日晚上线，颇有成就感。25日之后，我又对该网站进一步完善，增加了评论区、搜索页、GA4的网站流量监控、深色主题等配置。我对UI交互方面也进行了许多优化，自认为体验比最初的版本好了许多。而此时我能找到的版本仅仅是25日中午的版本，当时距离上线的基础款配置还有许多工作要做！\n此时的我感觉非常沮丧，因为在半个小时之前，我还沉浸在各种幻想中，想着未来如何更进一步地把网站功能与内容完善，然后以此为根据地做大做强… 瞬间，一切似乎都成了泡影，退回了解放前。如果真如此，恐怕我没有那个心气再搞一次解放战争了。\n慌乱之中，我强行镇定一下。我意识到，这件事情的发生大概率是自己对git的功能不够了解导致的，我常用的只有那几个命令，而且多数时候都是拿鼠标操作的。有很多高级命令，我或许见过，但根本不知道其背后的含义。当我使用GitHub Desktop的时候，对一些陌生操作背后发生的事情是无意识的。\nAI应该很懂这些！我更需要做的事情是减少自己的贸然操作，看能不能搬到救兵。于是我回到了windsurf，继续与GPT-5-Codex进行交流。把我刚才的所作所为、当前处境以及对过去几天已日渐模糊的记忆碎片一五一十地和盘托出。为了让它认真的拯救我，我甚至打出了感情牌，告诉它如果这几天的工作记录丢失，我将失去活下去的勇气…\n于是，GPT直接开始了各种工具调用，使用了很多我没听说过的 git命令，换着花样地审查各种git记录。我就像参加手术的患者家属一样在手术室门外焦急地等待着，而GPT在这个过程中，一句宽慰我的话都没说… 甚至除了思考，不被折叠的文字输出都很少。我一度想打断它，直接问：行不行啊？\n就在我耐心快用光之前，它告诉我那些记录还在，列出了我今天commit的几条记录。此时的我仿佛看到了曙光，开始反复问它能不能修复？它告诉我，记录还在，应该如何如何操作，给出了几行命令。但此时我并不理解这些命令的意义，只想它告诉我能不能恢复…它依然没有正面回应，只是从它的语气中感觉比较稳…\n于是，我在它的指导下执行了那几行陌生但寄托了我所有希望的命令，然后就是起死回生的时刻，我长舒了一口气。 此时，我的代码回到了我的”残之一手“点击GitHub Desktop的那一刻之前的状态，我博客配置中，评论区的内容依然找不到。但是我已经不再为此感到一丝一毫的不爽，全是劫后余生的庆幸。\n后面，借助Windsurf+GPT-5，我把评论区补上了，又将其它已经发现的小bug进行了修复，然后开始写了这篇博客。这件事情始于经验的缺乏带来的误操作，不过还好我用的是git，这款软件真是大慈大悲的发明。过去两年我一直 …"
  },{
    "title": "Liquid Glass 的设计挺讨我喜欢的",
    "url": "/post/updates-apple-tahoe/",
    "section": "post",
    "date": "2025-09-12",
    "summary": "更新了一下苹果的系统，先是手机，后是电脑，体验良好。\n不过接下来需要考虑的可能是更新一下设备，老旧的款式仿佛有点卡，只是别人不那么说，我也不太确信，也不希望如此。\n",
    "description": "",
    "tags": ["生活方式","测试","苹果"],
    "categories": ["","日常"],
    "content": "更新了一下苹果的系统，先是手机，后是电脑，体验良好。\n不过接下来需要考虑的可能是更新一下设备，老旧的款式仿佛有点卡，只是别人不那么说，我也不太确信，也不希望如此。\n我的好感来自于两点：\n上个版本的“黑金主题”，切换过来之后一直没搞清楚怎么恢复之前的模式，被恶心了一年； WWDC上呈现的效果过于拉胯。过了几个月之后，惊喜地发现它远比预期的漂亮。 顺便地，我也把MacOS系统界面进行了修改，设计很好看，但可能是适配性问题，在刷网页的时候有点卡。\n这一次，MacOS的系统代号为Tahoe，取名自著名的太浩湖。\n这是一个旅游胜地，在文化与科技史上都具有传奇色彩，比如《教父2》电影的取景，比如著名的“AlexNet拍卖会”。可参考太浩湖的传奇故事及其数据可视化版本。\n"
  },{
    "title": "SymPy 基础入门教程：符号计算核心功能解析",
    "url": "/labs/sympy_tutorials/",
    "section": "labs",
    "date": "2025-08-19",
    "summary": "欢迎来到 SymPy 的世界！SymPy 是一个强大的 Python 库，用于进行符号数学运算。与数值计算不同，符号计算处理的是数学表达式本身，而不是它们的具体数值。本教程将带您了解 SymPy 的基本功能，并通过与我们先前讨论的钢轨动力学案例相关联，展示这些功能在实际问题中的应用。\n",
    "description": "",
    "tags": ["符号计算"],
    "categories": ["数学"],
    "content": "欢迎来到 SymPy 的世界！SymPy 是一个强大的 Python 库，用于进行符号数学运算。与数值计算不同，符号计算处理的是数学表达式本身，而不是它们的具体数值。本教程将带您了解 SymPy 的基本功能，并通过与我们先前讨论的钢轨动力学案例相关联，展示这些功能在实际问题中的应用。\n1. SymPy 是什么？为什么要用它？ 想象一下，您在纸上推导复杂的数学公式，进行微分、积分、化简…… SymPy 就是您在计算机上的“草稿纸”和“数学助手”。它可以帮助您：\n精确地表示数学符号和表达式。 执行符号微分、积分、求和等运算。 化简和变换复杂的数学表达式。 求解方程。 进行矩阵运算。 对于像钢轨动力学这样涉及大量复杂公式推导的问题，手动计算不仅耗时，还容易出错。SymPy 可以自动化这个过程，提高效率和准确性。\n2. 安装与基本设置 如果您还没有安装 SymPy，可以通过 Python 的包管理器 pip 轻松安装：\npip install sympy 在您的 Python 脚本或 Jupyter Notebook 中使用 SymPy 前，首先需要导入它。为了让输出的数学公式更易读（尤其是在 Jupyter 环境中），可以启用 SymPy 的“美观打印” (pretty printing) 功能。\nimport sympy # 导入 SymPy 库 # 初始化美观打印功能 # use_unicode=True 允许使用 Unicode 字符来显示更美观的公式 # wrap_line=False 防止长公式在某些终端或 Notebook 中被不恰当地折行 sympy.init_printing(use_unicode=True, wrap_line=False) # 定义一个简单的辅助函数，用于在教程中打印章节标题 def print_header(title): print(\u0026#34;\\n\u0026#34; + \u0026#34;=\u0026#34;*50) print(f\u0026#34; {title} \u0026#34;) print(\u0026#34;=\u0026#34;*50) 3. 核心概念一：符号 (Symbols) 符号是 SymPy 进行运算的基本单元。它们代表了数学表达式中的变量或常数，但没有被赋予具体的数值。\n定义单个符号： 使用 sympy.Symbol('名字')。 定义多个符号： 使用 sympy.symbols('名字1 名字2 ...')。 为符号添加假设： 在定义符号时，可以指定其数学属性，如 real=True (实数), positive=True (正数), integer=True (整数)。这些假设有助于 SymPy 进行更精确的化简。 示例： print_header(\u0026#34;3. 核心概念一：符号 (Symbols)\u0026#34;) # 定义单个符号 x x = sympy.Symbol(\u0026#39;x\u0026#39;) print(f\u0026#34;符号 x: {x}\u0026#34;) # 定义时间符号 t，并假设它是实数 t = sympy.Symbol(\u0026#39;t\u0026#39;, real=True) print(f\u0026#34;符号 t: {t}, 是实数吗? {t.is_real}\u0026#34;) # 一次定义多个符号，并假设它们是正实数 l, E, I_y, m_r = sympy.symbols(\u0026#39;l E I_y m_r\u0026#39;, positive=True, real=True) print(f\u0026#34;符号 l: {l}, 是正数吗? {l.is_positive}\u0026#34;) print(f\u0026#34;符号 E: {E}, I_y: {I_y}, m_r: {m_r}\u0026#34;) # 定义整数符号，常用于索引或计数 NM = sympy.Symbol(\u0026#39;NM\u0026#39;, integer=True, positive=True) # 例如，模态数 k_idx = sympy.Symbol(\u0026#39;k\u0026#39;, integer=True, positive=True) # 例如，求和索引 print(f\u0026#34;符号 NM: {NM}, 是整数吗? {NM.is_integer}\u0026#34;) print(f\u0026#34;符号 k_idx: {k_idx}\u0026#34;) 与钢轨案例的联系： 在钢轨动力学推导中，我们首先定义了所有物理参数（如 l,E,Iy,mr）、独立变量（x,t）、以及用于求和和表示模态的索引（k,h,s,j,NM,Nstotal​）作为 SymPy 符号。\n4. 核心概念二：构建表达式 (Expressions) 一旦定义了符号，就可以像在普通数学中一样，使用它们和标准的 Python 运算符（+, -, *, /, **  …"
  },{
    "title": "构建压缩感知（Compressed Sensing, CS）算法代码",
    "url": "/labs/compressed_sensing_gemini_pro/",
    "section": "labs",
    "date": "2025-08-19",
    "summary": "构建压缩感知（Compressed Sensing, CS）算法代码通常涉及以下几个核心步骤。压缩感知理论指出，如果信号是稀疏的或可压缩的，那么就可以用远少于奈奎斯特采样定理所要求的采样点来精确地重建信号。\n",
    "description": "",
    "tags": ["压缩感知"],
    "categories": ["信号处理"],
    "content": "构建压缩感知（Compressed Sensing, CS）算法代码通常涉及以下几个核心步骤。压缩感知理论指出，如果信号是稀疏的或可压缩的，那么就可以用远少于奈奎斯特采样定理所要求的采样点来精确地重建信号。 以下是构建压缩感知算法代码的一般步骤和关键组成部分： 1. 定义稀疏信号 (Define the Sparse Signal): 生成或获取原始信号 (Generate or Acquire the Original Signal): 这可能是一个图像、音频信号、时间序列数据等。 稀疏表示 (Sparse Representation): 原始信号本身可能不是稀疏的，但可以在某个变换域中变得稀疏。常见的变换包括： 傅里叶变换 (Fourier Transform - FT): 适用于频域稀疏的信号。 离散余弦变换 (Discrete Cosine Transform - DCT): 常用于图像和视频压缩。 小波变换 (Wavelet Transform - WT): 适用于具有局部特征的信号。 自定义字典 (Custom Dictionary): 对于特定类型的信号，可能会有更合适的稀疏基。 在代码中，你需要实现或使用库函数来对原始信号进行这些变换，得到稀疏系数向量 $\\alpha$。通常，只有少数几个 $\\alpha_i$ 的值很大，而其余的接近于零。 2. 构建测量矩阵 (Construct the Measurement Matrix): 测量矩阵 $\\Phi$ 是一个 $M \\times N$ 的矩阵，其中 $N$ 是原始信号的维度（或稀疏表示的维度），$M$ 是测量次数 ($M \u003c N$)。 测量矩阵需要满足某些特性，如受限等距性质 (Restricted Isometry Property - RIP)，以保证能够从压缩测量中恢复稀疏信号。在实践中，通常使用随机矩阵，因为它们很大概率满足 RIP。常见的选择有： 高斯随机矩阵 (Gaussian Random Matrix): 矩阵的每个元素从高斯分布中独立采样。 伯努利随机矩阵 (Bernoulli Random Matrix): 矩阵的每个元素从 $\\{-1, +1\\}$ 中等概率随机选择。 部分傅里叶矩阵 (Partial Fourier Matrix): 随机选择傅里叶变换矩阵的 $M$ 行。 稀疏随机矩阵 (Sparse Random Matrix): 包含大量零元素的随机矩阵，可以加速计算。 在代码中，你需要生成这样一个矩阵。例如，在 Python 中，可以使用 numpy.random.randn 生成高斯矩阵。 3. 执行压缩感知测量 (Perform Compressed Sensing Measurement): 压缩测量是通过将原始信号（或其稀疏表示）与测量矩阵相乘来获得的。 如果直接对原始信号 $x$（维度为 $N$）进行测量，则测量结果 $y = \\Phi x$（维度为 $M$）。 如果信号 $x$ 在某个正交基 $\\Psi$ 下是稀疏的，即 $x = \\Psi \\alpha$（其中 $\\alpha$ 是稀疏系数），那么测量可以表示为 $y = \\Phi \\Psi \\alpha = \\Theta \\alpha$，其中 $\\Theta = \\Phi \\Psi$ 称为传感矩阵或恢复矩阵。 在代码中，这一步通常是一个简单的矩阵向量乘法。 4. 实现重建算法 (Implement a Reconstruction Algorithm): 这是压缩感知中最核心和最具挑战性的部分。目标是从压缩测量 $y$ 和已知的测量矩阵 $\\Phi$（或 $\\Theta$）中恢复稀疏信号 $\\alpha$（或 $x$）。 这是一个欠定方程组，因为 $M \u003c N$。重建算法利用信号的稀疏性来找到唯一的稀疏解。 常见的重建算法包括： L1 范数最小化 (L1-norm Minimization) / 基追踪 (Basis Pursuit - BP): $$\\min_{\\alpha} \\|\\alpha\\|_1 \\quad \\text{subject to} \\quad y = \\Theta \\alpha$$ 这通常可以转化为线性规划问题。 贪婪算法 (Greedy Algorithms): 匹配追踪 (Matching Pursuit - MP): 迭代地选择与当前残差最相关的原子（$\\Theta$ 的列）。 正交匹配追踪 (Orthogonal Matching Pursuit - OMP): MP 的改进版，在每一步都对已选原子进行正交化，以确保残差与已选原子正交。这是教学和基础实现中非常流行的一种算法。 压缩采样匹配追踪 (Compressive …"
  },{
    "title": "韩信评传：月光下的不世之功与宿命悲歌",
    "url": "/post/the-fate-of-general-han-xin/",
    "section": "post",
    "date": "2025-08-07",
    "summary": "在中国历史的长廊中，有些名字的陨落，比其升起更加令人扼腕。韩信，便是其中最耀眼的一位。他的一生，是一场关于天才、机遇与宿命的宏大戏剧，而贯穿始终的，是他那既能成就伟业、亦能招致杀身之祸的青春锋芒。\n",
    "description": "",
    "tags": ["韩信"],
    "categories": ["人物","历史评论"],
    "content": "在中国历史的长廊中，有些名字的陨落，比其升起更加令人扼腕。韩信，便是其中最耀眼的一位。他的一生，是一场关于天才、机遇与宿命的宏大戏剧，而贯穿始终的，是他那既能成就伟业、亦能招致杀身之祸的青春锋芒。\n韩信的传奇，始于一道清冷的月光。若无萧何月下决绝的追寻，韩信或许终其一生，也只是个在市井中忍受过胯下之辱的落魄青年。那一夜，注定了他此后的不凡，也为他未来的悲剧埋下了伏笔。他得到了年长近三十岁的刘邦的破格提拔与充分信任，这在当时是一场匪夷所思的豪赌。刘邦赌上了自己的天下，而韩信，则用他那属于年轻人的、无所畏惧的才华，回报了这份知遇之恩。\n在属于他的那短短数年高光时刻里，他几乎就是战争的化身。明修栈道，暗度陈仓；背水一战，置之死地而后生。这些军事史上的奇迹，无一不带着年轻人特有的傲慢、任性和敢于打破一切常规的锐气。可以说，正是这份不羁的性格，才让他立下了那样的不世之功。如果他是一个循规蹈矩、唯唯诺诺的人，他也绝不可能成为那个让项羽都束手无策的“兵仙”。\n然而，当天下大局已定，当开拓的时代让位于守成的时代，他性格中那些曾经的优点，便成了最致命的缺陷。最大的问题，在于他太年轻了。不到三十岁便功高盖主，这让他难以低下高傲的头颅，去对那位已经步入晚年、心思深沉的君主察言观色。\n对于刘邦而言，矛盾是显而易见的。在征讨英布中箭受伤后，他深知自己时日无多。此刻的他，需要的不再是一个能够改变战局的天才，而是一个能够确保政权平稳交接的“可控的听话的人”。韩信的危险，不在于他知道了什么秘密，而在于“听他的人太多了”。他的威望和能力，已经成了一个刘邦身后无人能镇住的巨大变数。\n这道横亘在君臣间的年龄鸿沟与权力逻辑，是无法跨越的。或许，如果刘邦能年轻三十岁，他会欣喜于与这样一位军事天才惺惺相惜，恨不得日日与他泡在一起。但现实是，衰老的帝王需要的是稳定，而如日中天的韩信代表的却是不可知的未来。\n因此，韩信的结局早已注定。他似乎也对此有所预感，明白自己踏入的是一场华丽却必将迎来清算的盛宴。他对刘邦的知遇之恩心怀感念，所以在死亡的罗网降临时，他没有做过多的反抗，带着几分认命的意味，走向了长乐宫的终点。吕后是行刑者，但其背后，无疑是刘邦的默许。那一句“且喜且怜之”，道尽了这位开国帝王最真实的心态：喜的是，一个足以动摇国本的隐患终于被铲除；怜的是，这样一位不世出的英才就此凋零。\n韩信的一生，是青春的赞歌，也是青春的挽歌。他用短暂的生命证明了，一个年轻人凭借天赋与胆识可以达到怎样的高度。但也用自己的鲜血警示后人，当这种无双的才华触碰到权力的红线时，会迎来何等冰冷的结局。他注定要在他生命中的伯乐之前死去，要么在精神上被磨去棱角，要么在肉体上被彻底消灭。而那个时代，终究没能给他第三条路。\n"
  },{
    "title": "R.I.P, Diogo!",
    "url": "/post/jota-passed-away/",
    "section": "post",
    "date": "2025-07-05",
    "summary": "利物浦前锋迪奥戈·若塔（Diogo Jota）不幸逝世，享年28岁。据传他因为做了气胸手术，无法乘坐飞机，于是驾驶自己的兰博基尼，在其兄弟安德烈的陪同下前往利物浦，但途径西班牙境内，路况糟糕，在试图超越一辆卡车时发生了爆胎事故，导致车辆失控，兄弟俩不幸遇难。\n",
    "description": "",
    "tags": ["利物浦"],
    "categories": ["足球"],
    "content": "利物浦前锋迪奥戈·若塔（Diogo Jota）不幸逝世，享年28岁。据传他因为做了气胸手术，无法乘坐飞机，于是驾驶自己的兰博基尼，在其兄弟安德烈的陪同下前往利物浦，但途径西班牙境内，路况糟糕，在试图超越一辆卡车时发生了爆胎事故，导致车辆失控，兄弟俩不幸遇难。\n在本博客中，我日常分享的第一篇就是类似于讣告的文章，这令人遗憾，但将其献给迪奥戈又是一种荣誉。\n作为利物浦球迷，对这件事情感到震惊，但又有些麻木。似乎霉运总是会在这只球队最欢快的时候找上门来。利物浦今年刚刚拿到了阔别数年的英超冠军，而28岁的迪奥戈·若塔正值生涯的黄金年龄，备受期待，但一切都戛然而止了。\n或许坚强地面对悲伤是利物浦球迷的必修课。我从2005年开始看球的时候就追随这家俱乐部，从“伊斯坦布尔之夜”开始，然后是近十年没有冠军进账的漫长等待，终于迎来了克洛普伟大的执教生涯以及克洛普与斯洛特堪称佳话的交接。在两天之前，我们经历了最开心最憧憬的一段时间，但现在需要重新开始。\n为什么热爱利物浦？因为这支队伍的命运与我们的艹蛋人生太押韵了。\n与这支球队共同经历过2005, 2019, 2020, 2025，两次欧冠，两次英超，次数没有那些豪门那么多，但每一次都是苦尽甘来。本以为40天之前的狂欢可以继续，但却传来永远不可挽回的噩耗。\n在球迷的意识星空中，1985、1989年的那些星星永远照亮着一个个黯淡的夜晚。2025，天上又多了一颗星星，照亮不屈的人们继续前行。感谢迪奥戈在过去的五个赛季里的兢兢业业，为球队带来了一个个进球和一座座冠军奖杯。\nYou will never walk alone！\n注：本文中的图片均来自于利物浦官网 "
  },{
    "title": "《暗淡蓝点》读后记",
    "url": "/post/book_comments/pale-blue-dot-review/",
    "section": "post",
    "date": "2025-07-01",
    "summary": "在浩瀚宇宙中，地球只是微不足道的一粒尘埃。然而，正是这颗“暗淡蓝点”，承载了人类全部的历史与情感。本文将从科学与人文的视角，分享我对卡尔·萨根《暗淡蓝点》一书的阅读体会，探讨我们在宇宙中的位置与意义。\n",
    "description": "",
    "tags": ["科学","卡尔·萨根","科普"],
    "categories": ["评论"],
    "content": "在浩瀚宇宙中，地球只是微不足道的一粒尘埃。然而，正是这颗“暗淡蓝点”，承载了人类全部的历史与情感。本文将从科学与人文的视角，分享我对卡尔·萨根《暗淡蓝点》一书的阅读体会，探讨我们在宇宙中的位置与意义。\n卡尔·萨根去世于1996年，那时我还很小。几年后，在一本少儿科普读物中看到缅怀他的文章，于是他也成了我小学时记住的为数不多的几位外国科学家之一。\n中学时读过《日本平家蟹》，当时阅读能力有限，没能理解文章背后的思想。不喜欢那种娓娓道来的叙述方式，更不喜欢那些虾啊蟹啊之类的事物。大学时，纪录片《宇宙》真正把我带进了科学殿堂，对“平家蟹”的疑惑也得以解开。\n“平家蟹”揭示了一种造型上类似于日本武士的蟹类，被当地渔民认为是随平家沉入海底的武士们的化身。但卡尔·萨根告诉我们，当地渔民捞到长相与武士神似的螃蟹后会将其放生，以表达对平家武士的缅怀。久而久之，这类螃蟹的种群就繁衍壮大——本质上，这是一种“人工选择”（也可以说是经人之手的“自然选择”）。平家蟹的故事让我开始掌握用科学视角理解自然现象的技巧。\n年轻时喜欢科学视角，却更沉迷于宏大叙事。毕竟，煌煌大国，数千年绵长文明，沧海横流与歌舞升平交织的历史，总让人热血澎湃。然而，后来发现，当宏大叙事照进日常生活时，总感觉有些不协调。这很正常，毕竟历史中最不起眼的人名，在当时恐怕都是显赫一时的人物，而我们在历史长河中不过是注定被遗忘的一颗水滴或一粒沙尘。\n后来，在一个播客节目中，听到主播朗读《暗淡蓝点》中的那段文字，那种蓦然回首的动人瞬间在脑海中再也挥之不去：\n“再看看那个光点，它就在这里。这是家园，这是我们。你所爱的每一个人，你认识的每一个人，你听说过的每一个人，曾经有过的每一个人，都在它的上面度过他们的一生。我们的欢乐与痛苦聚集在一起。数以千计的自以为是的宗教、意识形态和经济学说，每一个猎人与采集者，每一个英雄与懦夫，每一个文明的缔造者与毁灭者，每一个国王与农夫，每一对年轻爱侣，每一个母亲和父亲，每一个满怀希望的孩子，每一个发明家和探险家，每一个德高望重的教师，每一个腐败的政客，每一个‘超级明星’，每一个‘最高领导者’，人类历史上的每一个圣人与罪犯，都生活在这里——一粒悬浮在太阳光中的细小尘埃。”\n这是“旅行者一号”的视角，也是科学探索者的视角。这个世界上，总有不少野心家吹嘘自己滔天的权势与不朽的功绩，但在宇宙之中，他所在乎的一切不过是某一尘埃之上瞬息之间的“自我感觉良好的错觉”。\n我们绝大多数人，在这个充斥着拥堵与摩擦的人世间，也常感慨生活的乏味与人性的险恶。但在宇宙尺度下，这种体验既不见得比微生物的冲撞与摩擦更高级，也不见得比王侯将相的自我陶醉更卑微。在这个被假象与真实反复折叠的世界里，开心也好，压抑也罢，都不过是人在与自然互动中产生的生理反应。当我们代入“旅行者一号”的视角，这些纷繁复杂的情感体验与生理反应在空间上的局域性以及在时间上的有限性都不超过那个暗淡的蓝点。\n自从人类发现了科学的用处，就再也无法压抑对太空的向往。齐奥尔科夫斯基说：“地球是人类的摇篮，但人类不可能永远生活在摇篮里。”然而，当人类终于能够跳出自己的摇篮，回望浩瀚星海中的暗淡蓝点时，又茫然发现这广袤宇宙中再也找不到另一个家园。或许这一百多年对宇宙的探索，最有价值的结论就是：“人类不可能永远生活在摇篮里，但是地球——那个人类的摇篮，是唯一一个能够长期包容人类的家园。”\n就像每一个在悸动的青春时代勇敢离家出走的孩子，终究会发现故乡是唯一让自己牵肠挂肚的地方；就像每一个攒够了钱等到假期的城市居民，当他们终于抵达魂牵梦绕的旅游景点时，发现自己可能更想回家躺着。\n一个人对社会了解越多，越感觉自己的有限；对世界了解得越多，越对自然存敬畏之心。科学的价值大抵如此——它可能没办法帮人类打造一个天堂，但它可以让人类更充分地认识自己。\n当我们把视角从“旅行者一号”拉回到地球家园，会发现自己虽然渺小，但拥有丰富的感知能力。一草一木、一花一叶、一缕阳光、一口空气，都足以在某个微小瞬间滋养精神世界。地球虽不过是诸多星球中不算特别的一个，但却足以让数十亿人类倾其所有去感受其万千气象。\n我们无需纠结于自己是否会青史留名，因为有些东西不过是某些特权群体为了塑造对自己有利的“共同意识”选择性编排的故事合集。我们可以在有限的认知范围内质疑其准确性，但终究没有解释权。\n但我们每个人，在人类视角中伟大也好渺小也罢，都拥有一个更加鲜活、更有温度的小世界。我们经历的每个瞬间都是真实的，仔细品来也常能感受到其精彩。将这些真实与精彩进行抽象整理，或许就会发现科学蕴藏其中，或许生活中的真理远比宏大叙述中的要丰富得多。\n本文写于2024年11月30日\n"
  },{
    "title": "《牛顿传》读后记",
    "url": "/post/book_comments/newton_biography_review/",
    "section": "post",
    "date": "2025-07-01",
    "summary": "在阅读《牛顿传》之前，我对牛顿的印象还停留在课本和科普故事中。带着对这位科学巨匠的好奇，我试图通过这本传记，重新认识牛顿的真实人生与复杂性格。以下是我的一些思考与感受。\n",
    "description": "",
    "tags": ["传记","学者","牛顿"],
    "categories": ["评论"],
    "content": "在阅读《牛顿传》之前，我对牛顿的印象还停留在课本和科普故事中。带着对这位科学巨匠的好奇，我试图通过这本传记，重新认识牛顿的真实人生与复杂性格。以下是我的一些思考与感受。\n首先，毋庸置疑，牛顿是一个了不起的人物，很少有人能像他一样对我们每个人产生如此深刻的影响。他给世界带来的改变无需多言，但我们对他的认识和了解却非常肤浅。\n我小学时就开始借阅关于牛顿的书，但当时阅读能力太差，读不下去，只是对他的一些故事有所耳闻，比如知道他出生在克伦威尔时期，但那时我并不知道克伦威尔是谁。后来我对科学史有了一些初步的了解，但我一直有意避开牛顿这个人，因为他太过久远，是个难以理解的神秘人物，总有种敬而远之的心态。相对来说，我当时更愿意去了解其他人，包括爱因斯坦、居里夫人、费曼等科学家。\n这一次，我终于打开了牛顿的传记，阅读欲望很强烈，一气呵成地读完了全书。牛顿的生平非常丰富。首先，他寿命很长，活了 84 岁，这在当时属于非常难得的高寿。他的经历也很丰富。他出身不算差，后来在读书过程中一度并不出色，但突然奋发，从此之后就一直是最优秀的学生。后来他从事学术，接替了巴罗的位置，成为卢卡斯讲座的教授。他在20多岁的时候就做出了非常突出的成就，比如著名的万有引力，成了明星学者，并能够出入非常高级别的场所，在后来还成了政府重要的官员和国王的座上宾，成为全欧洲的话题人物。\n我们对他的了解更多的是他作为科学家的成就，比如提出了万有引力定律、牛顿三定律以及光学原理，当然还有微积分。除此之外，我们对他的了解相对较少，偶尔听说他对炼金术很感兴趣，并且他非常虔诚，是一个清教徒。此外，他还炒股，有着惊世骇俗的韭菜经历，他一度血赚，最终血亏，最终成为了南海金融泡沫的受难者。关于他作为皇家造币厂厂长的经历，我也有所了解，但了解得并不多。通过这些事情，我所了解的还是一个比较片面、比较干瘪的牛顿。而这次读他的传记，让我对他这个人生框架有了更加丰富、多维的感知。\n通过这部传记，可以感觉到牛顿脾气古怪。他性格孤僻，不喜欢教书，求胜欲很强，经常与一些人陷入难以言说的争斗。他非常小气、极端记仇，弱势的时候隐藏自己，强势的时候重拳出击，终身热爱玩弄权术。这些特质在他与莱布尼兹和胡克的争斗中有所体现。通过牛顿的视角，胡克可能是一个十恶不赦的小人，但由于对那些历史缺乏全面的了解，也难说清他俩之间的是非曲折。\n以上特质对一个人来说不够光彩，但对牛顿来说倒无所谓。因为他在科学上的贡献太突出了，整个现代社会都蒙受他的恩泽，相比之下性格上的缺点完全可以只被当作补充性的谈资。当然，牛顿也有很多朋友，如巴罗、惠更斯、哈雷和洛克等人，这些人给了他很多帮助，也在某种程度上弥补了他性格上的一些弱点。\n我们更应了解牛顿作为科研工作者的一些特质。他对科学的影响很深刻，一方面在于他提炼出的重要结论，这些结论奠定了未来数学和物理学的基础；另一方面在方法论层面，他对理论的简洁性和可理解性的追求非常执着。此外，他也是比较早追求理论可证伪性的学者。比如，他在《光学》这本书的出版上，除了列举他的研究工作之外，还增加了一些批判性的内容，以“质疑”的形式体现，并且每一次改版都会增加很多质疑内容。这些批判性内容出现在他自己书上是很有趣的，显得严谨、自信而强大。\n牛顿的动手能力极强，这些可能是被忽视的。他善于设计实验来对他的想法进行验证，也经常做一些发明创造，比如自己设计与研制三棱镜从而研究光学规律。他在担任皇家造币局的厂长期间，对硬币的设计与生产进行了革新，大大地打击了假币产业，很多发明甚至沿用至今。担任造币厂的经历体现了他出人意料的管理能力，但这并不是孤例。牛顿后来还拯救了声明濒临扫地的皇家科学院，只不过这段作为院长的履职经历也让该科学院打上了过深的牛顿烙印，很多人也承袭了牛顿性格上的缺点（或许这就是所谓的“顿感力”吧）。\n此外，牛顿非常勤奋。无论是做科研还是做皇家造币厂厂长，都能看出他是一个名副其实的“卷王”，工作态度认真，对细节一丝不苟。所以我们不能单纯地只认为他的伟大成就是建立在他天赋的基础之上，他的努力程度也是绝大多数人无法企及的。\n牛顿还有一个强大的地方就在于他的身体特别好。他几乎没有患上当时常见的一些疾病，而且去世时依然有两排健康的牙齿，这时他已经 84 岁了，这很令人惊叹（反观同时代同样长寿的路易十四\u0026hellip;）。另一个能体现他身体好的地方在于，在他的研究工作中，事实上花了很长时间进行炼金术的研究。在这个过程中，他做了大量实验，需要接触大量的重金属，这通常会对身体产生负面影响。但是，即便在牛顿体内检测出超标的重金属，他依然能够保持长寿和健康的状态。他也是到了八十岁左右身体才开始明显地被疾病困扰。更值得一提的是，他一生都保持着清醒的大脑，思维能力到了很晚的时候才开始有衰退迹象。\n牛顿职业生涯中，曾花费大量时间进行当 …"
  },{
    "title": "评论：《黑客与画家》",
    "url": "/post/book_comments/comment_hacker_painter/",
    "section": "post",
    "date": "2024-04-22",
    "summary": "本文将围绕Paul Graham的《黑客与画家》展开评论，探讨黑客与艺术家的共通之处，以及黑客在工程科学等领域中所面临的现实困境与生存之道。\n",
    "description": "",
    "tags": ["黑客","计算机科学","工程科学","生活方式"],
    "categories": ["评论"],
    "content": "本文将围绕Paul Graham的《黑客与画家》展开评论，探讨黑客与艺术家的共通之处，以及黑客在工程科学等领域中所面临的现实困境与生存之道。\n《黑客与画家》是Paul Graham（保罗·格雷厄姆）的一篇博客文章，该文章被收录至其同名的著作中，称得上是计算机领域里影响巨大的一篇文章。\n保罗·格雷厄姆是知名的硅谷投资人，他创立了投资机构Y-Combinator，该机构孵化出了包括airbnb在内的无数家成功的初创企业。此外，在经营Y-Combinator的过程中，保罗发现并提拔了日后名声大噪的Sam Altman。与其成功的投资人经历相比，保罗的早年经历也挺传奇。他在哈佛拿到了计算机科学的博士学位，但后来又去罗德岛设计学院学习绘画。他在90年代，创建了叫做ViaWeb的互联网应用，并卖给了雅虎，赚得了自己的第一桶金。由此可以看出，《黑客与画家》这样一个主题正是作者个人经历的一个总结提炼。\n何为黑客？ 当提起“黑客”，不少人会想到制造计算机病毒的或者破解某个网站密码的程序员。这多少是在互联网发展早期一些从事非法工作的程序员给“黑客”带来的坏名声。在更早的时候，黑客就是泛指那些技术精湛的程序员自身，而没有什么道德评判或工种划分。当然，在本篇评论之中，“黑客\u0026quot;的内涵会被进一步泛化，他们将不再局限于进行计算机的编程工作，在任何领域里掌握着精湛技艺的人都可以成为黑客——这一点与作者所描述的黑客或许更为契合。\n在文中，作者多角度地类比了黑客与画家着两类职业，并指出黑客的本质在于他们依托一些技术进行创作。\n这种创作不同于科研工作，因为从事科研工作需要对他的研究方向的诸多细节有着深入的理解，他们需要对既有工作进行大量的学习，包括去了解相关的理论体系的、完成某项研究细节的实现，他们需要进行很多公式推导、科学实验，并逐渐形成对研究方向的直觉，这一切可以帮助他们在一个已经有了很多成果的方向上更进一步，或者说“站在巨人的肩膀上往远处再多看一眼”。\n黑客需要掌握很多工具，但他们并不需要将某一艰深的理论咬穿嚼透，他们只需要能够利用某项技术即可，就像画家不需要把颜料的化学理论搞清楚，他们只需要掌握调制不同色彩和质地的颜料即可。某项技术之于黑客不同于“巨人的肩膀”之于科学家，而是更像画笔之于画家。科学家需要非常扎实的肩膀，并在很长的时间里就住在了这个“肩膀”之上，因此“肩膀”不宜太多（如果踩着两个肩膀的话，大概就是在从事交叉学科的研究吧，但如果两个肩膀相距太远或同时踩着若干肩膀，就有点容易扯到，这恐怕会比较危险，）；与其形成鲜明对比的是，画家却可以拥有很多画笔，黑客也可以掌握非常多的技术，他们只需要把这些东西组合起来构成自己的工具库，足以服务于创作即可。\n科学家需要在已经很扎实的基础之上通过艰苦的工作来获得做出原创性成果的能力，但黑客的工作一开始就是原创的，然后他们就像画家一样拿着画笔去勾勒自己的想法，这个想法最初可能是脆弱的，但通过一步步的完善，他们最终将做出较为扎实的成果。也就是说，科学家工作的出发点是可靠的东西，目标是原创的；而黑客工作的出发点是原创的，目标是可靠的东西。\n既然与科研工作有如此差异，这种创作是不是更像某些企业的研发工作呢？答案恐怕也是否定的。研发工作的目的在于生产出在市场上卖得出去的产品，这些产品的特性是由市场上的潜在买家决定的，而产品的设计与开发之前，通常需要一定的市场调研。因此，产品的研发并不是那种纯粹的技术性工作。在一些非常成熟的“夕阳产业”中，企业的研发更是不需要什么“创作”过程，与其对想法原型进行不断地完善，企业的老板更喜欢看到员工按部就班地把产品做出来。\n因此，黑客的创作既不同于科研工作，又不同于产品研发。黑客更像是艺术家，比如画家、建筑师、音乐家等等。不过现实之中，黑客这个群体并不会自发地集结于某个场合，而是不得不委身于现有的各行各业中。\n从事工程科学的黑客 还是继续从计算机领域说起，在文章中，作者指出了计算机科学的“大杂烩”特性，堪称”科学界的南斯拉夫“。这一点使得计算机与诸如物理学等经典的科学领域相差很大，甚至显得计算机科学不太像是一门科学。不过要把计算机科学从科学范畴中开除，我是反对的，除非可以把我所从事的种种“工程科学”一并从科学领域中开除。工程领域的学科体系是围绕着某一项工程或工具而打造的，服务于具体的生产活动。比如机械、土木等行业的科研工作。这些学科会汇集一些诸如工业设计、材料科学、力学、计算机模拟乃至管理学等相关的研究方向，各方向之间的差异甚至可能不亚于物理学与生命科学这种一级学科之间的差异。鉴于这些工程学科的历史之悠久以及跨度之广泛，如果计算机科学算是”科学界的南斯拉夫“，它们可以被称为”科学界的日不落帝国“了。\n计算机科学领域存在的问题，在其它的工程科学领域同样存在。在工程科学领域的研究工作中，有 …"
  },{
    "title": " pooled-risk 公司管理公司",
    "url": "/paul_graham/essays_zh/prcmc/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\npooled-risk 公司管理公司 2008年7月\n在今年创业学校的演讲中，David Heinemeier Hansson 建议创业创始人应该用老式的方式做事。不要期望通过建立有价值的公司然后在\u0026quot;流动性事件\u0026quot;中出售股票来致富，创始人应该创办能赚钱的公司并依靠收入生活。\n听起来是个好计划。让我们思考一下做到这一点的最佳方式。\n依靠公司收入生活的一个缺点是你必须持续经营它。任何经营自己业务的人都会告诉你，这需要你全神贯注。你不能只是在业务开始顺利后就撒手不管，否则它们会很快停止顺利发展。\n创业创始人的主要经济动机似乎是自由和安全。他们想要足够的钱，以便（a）不必担心钱用完，（b）可以按自己的意愿度过时间。经营自己的业务两者都不提供。你当然没有自由：没有老板如此苛刻。你也没有安全，因为如果你停止关注公司，收入就会消失，你的收入也会随之消失。\n对大多数人来说，最好的情况是，当公司发展到一定规模时，你能雇人替你管理。假设你能找到一个真正好的经理。那么你就能同时拥有自由和安全。你可以想对业务投入多少关注就投入多少，知道你的经理会让事情顺利运行。既然如此，收入会继续流入，所以你也会有安全感。\n当然会有一些创始人不喜欢这个想法：那些非常喜欢经营自己公司以至于没有其他更喜欢做的事情的人。但这个群体肯定很小。在大多数业务中成功的方法是狂热地关注客户需求。你自己的愿望与这个强大的外部力量的要求完全吻合的几率有多大？\n当然，经营自己的公司可能相当有趣。Viaweb比我以前做过的任何工作都更有趣。而且因为我从中赚了更多的钱，它提供了我做过的任何事情中收入与无聊感的最高比率，数量级差异很大。但这是我能想象的最有趣的工作吗？不是。\n处于相同位置的创始人数量是渐近的还是仅仅很大，肯定有很多这样的人。对他们来说，正确的方法是最终将公司交给职业经理人，如果他们能找到足够好的人的话。\n到目前为止一切顺利。但如果你的经理被公交车撞了怎么办？你真正想要的是一家管理公司来为你经营公司。这样你就不依赖任何一个人。\n如果你拥有租赁房产，你可以雇公司为你管理。有些公司会做所有事情，从寻找租户到修理漏水。当然，经营公司比管理租赁房产复杂得多，但让我们假设有管理公司可以为你做这件事。他们会收取很多费用，但这不是值得的吗？为了额外的安心，我愿意牺牲很大一部分收入。\n我意识到我描述的已经听起来好得令人难以置信，但我能想到一种方法让它更有吸引力。如果公司管理公司存在，它们可以为客户提供额外的服务：它们可以通过汇集风险来让客户确保回报。毕竟，即使完美的经理也无法在公司整个市场消亡时拯救公司，就像物业经理无法在大楼烧毁时拯救你一样。但管理足够多公司的公司可以向所有客户说：我们将合并你所有公司的收入，并支付你相应的份额。\n如果这样的管理公司存在，它们会提供最大程度的自由和安全。有人会为你经营公司，即使公司不幸倒闭，你也会受到保护。\n让我们思考这样的管理公司如何组织。最简单的方法是创造一种代表他们管理的公司总池的新股票。当你签约时，你会用你公司的股票换取这个池子的股份，比例基于双方同意的公司价值估计。然后你会自动获得整个池子回报的份额。\n问题在于这种交易很难撤销，你不能切换管理公司。但他们有一种解决方法：假设所有公司管理公司聚在一起并同意让他们的客户交换所有池子的股份。那么实际上，你可以同时选择所有管理公司以你想要的任何比例为你经营公司，并随心所欲地改变主意。\n如果这样的pooled-risk公司管理公司存在，对大多数遵循David建议路线的人来说，签约一个似乎是理想的计划。\n好消息：它们确实存在。我刚刚描述的是被上市公司收购。\n不幸的是，尽管收购者在结构上与pooled-risk公司管理公司相同，但他们并不这样看待自己。对于物业管理公司，你可以随时走进去说\u0026quot;为我管理我的租赁房产\u0026quot;，他们就会做。而收购者，在撰写本文时，极度善变。有时他们处于购买情绪，会大幅超额支付；有时他们不感兴趣。他们就像由疯子经营的物业管理公司。或者更准确地说，由本杰明·格雷厄姆的\u0026quot;市场先生\u0026quot;经营。\n所以虽然平均而言上市公司收购者表现得像pooled-risk公司经理，但你需要几年的时间窗口来获得平均情况表现。如果你等待足够长的时间（比如五年），你可能会遇到某个收购者热衷于购买你的上升周期。但你不能选择它何时发生。\n你不能假设投资者会支持你等待所需的时间。你的公司必须赚钱。关于多早开始关注这一点意见不一。Joe Kraus说你应该立即尝试向客户收费。然而，一些最成功的创业公司，包括谷歌，最初忽略收入，专门专注于开发。答案可能取决于你创办的公司类型。我可以想象在某些公司中，试图销售会是产品设计的好启发，而在其他公司中，这只会分散注意力。测试可能是它是否帮助你理解用户。\n你可以选择你认为最适合你创办的公司类型的收入策略，只要你是盈利的。盈利确保你至少获得收购市场的平均水平——在这种情况下，上市公司确实表现得像pooled-risk公司管理公司。\nDavid说应该创办公司依靠其收入生活并没有错。错误在于认为这在某种程度上与创办公司并出售它是对立的。事实上，对大多数人来说，后者只是前者的最佳情况。\n感谢 Trevor Blackwell、Jessica Livingston、Michael Mandel、Robert Morris 和 Fred Wilson 阅读本文草稿。\n俄文翻译\n",
    "description": "",
    "tags": ["商业","管理","收购","企业家精神"],
    "categories": [],
    "content": "→ English Version\npooled-risk 公司管理公司 2008年7月\n在今年创业学校的演讲中，David Heinemeier Hansson 建议创业创始人应该用老式的方式做事。不要期望通过建立有价值的公司然后在\u0026quot;流动性事件\u0026quot;中出售股票来致富，创始人应该创办能赚钱的公司并依靠收入生活。\n听起来是个好计划。让我们思考一下做到这一点的最佳方式。\n依靠公司收入生活的一个缺点是你必须持续经营它。任何经营自己业务的人都会告诉你，这需要你全神贯注。你不能只是在业务开始顺利后就撒手不管，否则它们会很快停止顺利发展。\n创业创始人的主要经济动机似乎是自由和安全。他们想要足够的钱，以便（a）不必担心钱用完，（b）可以按自己的意愿度过时间。经营自己的业务两者都不提供。你当然没有自由：没有老板如此苛刻。你也没有安全，因为如果你停止关注公司，收入就会消失，你的收入也会随之消失。\n对大多数人来说，最好的情况是，当公司发展到一定规模时，你能雇人替你管理。假设你能找到一个真正好的经理。那么你就能同时拥有自由和安全。你可以想对业务投入多少关注就投入多少，知道你的经理会让事情顺利运行。既然如此，收入会继续流入，所以你也会有安全感。\n当然会有一些创始人不喜欢这个想法：那些非常喜欢经营自己公司以至于没有其他更喜欢做的事情的人。但这个群体肯定很小。在大多数业务中成功的方法是狂热地关注客户需求。你自己的愿望与这个强大的外部力量的要求完全吻合的几率有多大？\n当然，经营自己的公司可能相当有趣。Viaweb比我以前做过的任何工作都更有趣。而且因为我从中赚了更多的钱，它提供了我做过的任何事情中收入与无聊感的最高比率，数量级差异很大。但这是我能想象的最有趣的工作吗？不是。\n处于相同位置的创始人数量是渐近的还是仅仅很大，肯定有很多这样的人。对他们来说，正确的方法是最终将公司交给职业经理人，如果他们能找到足够好的人的话。\n到目前为止一切顺利。但如果你的经理被公交车撞了怎么办？你真正想要的是一家管理公司来为你经营公司。这样你就不依赖任何一个人。\n如果你拥有租赁房产，你可以雇公司为你管理。有些公司会做所有事情，从寻找租户到修理漏水。当然，经营公司比管理租赁房产复杂得多，但让我们假设有管理公司可以为你做这件事。他们会收取很多费用，但这不是值得的吗？为了额外的安心，我愿意牺牲很大一部分收入。\n我意识到我描述的已经听起来好得令人难以置信，但我能想到一种方法让它更有吸引力。如果公司管理公司存在，它们可以为客户提供额外的服务：它们可以通过汇集风险来让客户确保回报。毕竟，即使完美的经理也无法在公司整个市场消亡时拯救公司，就像物业经理无法在大楼烧毁时拯救你一样。但管理足够多公司的公司可以向所有客户说：我们将合并你所有公司的收入，并支付你相应的份额。\n如果这样的管理公司存在，它们会提供最大程度的自由和安全。有人会为你经营公司，即使公司不幸倒闭，你也会受到保护。\n让我们思考这样的管理公司如何组织。最简单的方法是创造一种代表他们管理的公司总池的新股票。当你签约时，你会用你公司的股票换取这个池子的股份，比例基于双方同意的公司价值估计。然后你会自动获得整个池子回报的份额。\n问题在于这种交易很难撤销，你不能切换管理公司。但他们有一种解决方法：假设所有公司管理公司聚在一起并同意让他们的客户交换所有池子的股份。那么实际上，你可以同时选择所有管理公司以你想要的任何比例为你经营公司，并随心所欲地改变主意。\n如果这样的pooled-risk公司管理公司存在，对大多数遵循David建议路线的人来说，签约一个似乎是理想的计划。\n好消息：它们确实存在。我刚刚描述的是被上市公司收购。\n不幸的是，尽管收购者在结构上与pooled-risk公司管理公司相同，但他们并不这样看待自己。对于物业管理公司，你可以随时走进去说\u0026quot;为我管理我的租赁房产\u0026quot;，他们就会做。而收购者，在撰写本文时，极度善变。有时他们处于购买情绪，会大幅超额支付；有时他们不感兴趣。他们就像由疯子经营的物业管理公司。或者更准确地说，由本杰明·格雷厄姆的\u0026quot;市场先生\u0026quot;经营。\n所以虽然平均而言上市公司收购者表现得像pooled-risk公司经理，但你需要几年的时间窗口来获得平均情况表现。如果你等待足够长的时间（比如五年），你可能会遇到某个收购者热衷于购买你的上升周期。但你不能选择它何时发生。\n你不能假设投资者会支持你等待所需的时间。你的公司必须赚钱。关于多早开始关注这一点意见不一。Joe Kraus说你应该立即尝试向客户收费。然而，一些最成功的创业公司，包括谷歌，最初忽略收入，专门专注于开发。答案可能取决于你创办的公司类型。我可以想象在某些公司中，试图销售会是产品设计的好启发，而在其他公司中，这只会分 …"
  },{
    "title": "\"艺术家要发布\"的另一面",
    "url": "/paul_graham/essays_zh/artistsship/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n\u0026ldquo;艺术家要发布\u0026quot;的另一面 2008年11月\n大公司与创业公司之间的区别之一是，大公司往往已经制定了防止犯错的程序。创业公司走路就像幼儿，不断撞到东西，跌倒。大公司则更加谨慎。\n组织中审核的逐渐积累是一种学习，基于发生在自己或类似组织身上的灾难。例如，在与一个破产并无法交付的供应商签订合同后，公司可能会要求所有供应商在投标前证明自己有偿付能力。\n随着公司的发展，他们不可避免地会有更多这样的审核，要么是为了应对他们遭受的灾难，要么（可能更常见的是）通过从更大的公司雇佣带来新灾难防范习惯的人。\n组织从错误中学习是自然的。问题是，提出新审核的人几乎从不考虑审核本身有成本。\n每个审核都有成本。 例如，考虑让供应商验证其偿付能力的情况。这难道不是仅仅谨慎吗？但实际上它可能有巨大成本。显然，双方提供和检查供应商偿付能力证明的人有直接的时间成本。但真正的成本是你从未听说过的：本会是最佳供应商的公司，但因为无法腾出精力进行验证而没有投标。或者本会是最佳供应商的公司，但偿付能力却刚好低于门槛——当然这个门槛会被定得偏高，因为没有明显的提高成本。\n每当组织中有人提议添加新审核时，他们应该不仅解释收益，还要解释成本。无论他们分析得多么糟糕，这个元审核至少会提醒每个人必须存在成本，并让他们去寻找它。\n如果公司开始这样做，他们会发现一些意外。Joel Spolsky最近在Y Combinator谈到向企业客户销售软件。他说，在大多数公司中，成本高达约1000美元的软件可以由个人经理无需任何额外批准购买。超过这个门槛，软件购买通常必须由委员会批准。但是为软件供应商处理这个过程如此昂贵，以至于收费少于50000美元没有意义。这意味着如果你制造了一个本来可能收费5000美元的东西，你必须以50000美元的价格出售。\n委员会的目的是确保公司不浪费钱。然而结果是公司支付了10倍的价格。\n购买审核总是昂贵的，因为向你销售东西越困难，它就必须成本越高。而且不是线性的。如果你足够难以销售，最擅长制造东西的人根本不想费心。唯一会向你销售的是专门向你销售的公司。那么你已经陷入了全新的低效率水平。市场机制不再保护你，因为好的供应商已经不在市场上了。\n这样的事情不断发生在所有最大的组织中，政府。但政府实施的审核可能导致的问题不仅仅是多付钱。政府实施的审核可能破坏整个国家的经济。直到大约1400年，中国比欧洲更富有，技术更先进。欧洲超越的一个原因是中国政府限制了长途贸易航行。因此欧洲人开始探索并最终主导世界其他地区，包括中国。\n在更近的时代，《萨班斯-奥克斯利法案》实际上摧毁了美国IPO市场。这不是立法者的意图。他们只是想为上市公司添加更多审核。但他们忘记了考虑成本。他们忘记了即将上市的公司通常相当紧张，而对通用电气来说可能容易承受的几个额外审核的重量，足以阻止年轻公司上市。\n一旦你开始思考审核的成本，你就可以开始问其他有趣的问题。成本是在增加还是减少？在某些地区是否比其他地区高？哪里会不连续地增加？如果大型组织开始问这样的问题，他们会学到一些令人恐惧的事情。\n我认为审核的成本实际上可能在增加。 原因是软件在公司中扮演着越来越重要的角色，而编写软件的人特别受到审核的伤害。\n程序员与许多类型的工人不同，最好的程序员实际上更愿意努力工作。在大多数类型的工作中似乎并非如此。当我在快餐店工作时，我们并不喜欢繁忙时段。当我过去修剪草坪时，我绝对不喜欢一周下雨后草长得很长的时候。\n然而，程序员在写更多代码时更喜欢。或者更准确地说，在发布更多代码时更喜欢。程序员喜欢做出改变。好的程序员，无论如何。\n对于好的程序员来说，为创业公司工作的最大好处之一是发布的审核很少。在真正的创业公司中，根本没有外部审核。如果你早上有一个新功能的想法，你可以在午餐前编写它并将其推送到生产服务器。当你能做到这一点时，你会有更多想法。\n在大公司，软件必须经过各种批准才能发布。这样做的成本可能是巨大的——实际上是不连续的。最近我和三个程序员交谈，他们的创业公司几年前被一家大公司收购。当他们独立时，他们可以立即发布更改。现在，他们说，他们能在生产服务器上发布代码的最快速度是两周。\n这不仅让他们生产力降低。这让他们讨厌为收购者工作。\n这里是程序员多么喜欢能够努力工作的一个迹象：这些人会付钱来立即发布代码，像过去那样。我问他们是否愿意用收购价的10%来换取立即发布代码的能力，三个人立即说愿意。然后我问他们愿意用收购价的最大百分比来换取它。他们说他们不想思考，因为他们不想知道自己会多高，但我得到的印象可能高达一半。\n他们会牺牲数十万，也许是数百万美元，只是为了能够向用户交付更多软件。你知道吗？让他们这样做是完全安全的。事实上，收购者会更好；这些人不仅不会破坏任何东西，他们会完成更多工作。所以收购者实际上以更高的成本获得了更差的绩效。就像批准软件购买的委员会一样。\n正如难以销售的最大危险不是你多付钱，而是最好的供应商甚至不会向你销售，对程序员应用太多审核的最大危险不是你会让他们不高效，而是好的程序员甚至不想为你工作。\n史蒂夫·乔布斯著名的格言\u0026quot;艺术家要发布\u0026quot;有两个方面。艺术家不仅能够发布。他们坚持要发布。所以如果你不让人发布，你就不会有任何艺术家。\n",
    "description": "",
    "tags": ["创业","管理","官僚主义","编程","发布"],
    "categories": [],
    "content": "→ English Version\n\u0026ldquo;艺术家要发布\u0026quot;的另一面 2008年11月\n大公司与创业公司之间的区别之一是，大公司往往已经制定了防止犯错的程序。创业公司走路就像幼儿，不断撞到东西，跌倒。大公司则更加谨慎。\n组织中审核的逐渐积累是一种学习，基于发生在自己或类似组织身上的灾难。例如，在与一个破产并无法交付的供应商签订合同后，公司可能会要求所有供应商在投标前证明自己有偿付能力。\n随着公司的发展，他们不可避免地会有更多这样的审核，要么是为了应对他们遭受的灾难，要么（可能更常见的是）通过从更大的公司雇佣带来新灾难防范习惯的人。\n组织从错误中学习是自然的。问题是，提出新审核的人几乎从不考虑审核本身有成本。\n每个审核都有成本。 例如，考虑让供应商验证其偿付能力的情况。这难道不是仅仅谨慎吗？但实际上它可能有巨大成本。显然，双方提供和检查供应商偿付能力证明的人有直接的时间成本。但真正的成本是你从未听说过的：本会是最佳供应商的公司，但因为无法腾出精力进行验证而没有投标。或者本会是最佳供应商的公司，但偿付能力却刚好低于门槛——当然这个门槛会被定得偏高，因为没有明显的提高成本。\n每当组织中有人提议添加新审核时，他们应该不仅解释收益，还要解释成本。无论他们分析得多么糟糕，这个元审核至少会提醒每个人必须存在成本，并让他们去寻找它。\n如果公司开始这样做，他们会发现一些意外。Joel Spolsky最近在Y Combinator谈到向企业客户销售软件。他说，在大多数公司中，成本高达约1000美元的软件可以由个人经理无需任何额外批准购买。超过这个门槛，软件购买通常必须由委员会批准。但是为软件供应商处理这个过程如此昂贵，以至于收费少于50000美元没有意义。这意味着如果你制造了一个本来可能收费5000美元的东西，你必须以50000美元的价格出售。\n委员会的目的是确保公司不浪费钱。然而结果是公司支付了10倍的价格。\n购买审核总是昂贵的，因为向你销售东西越困难，它就必须成本越高。而且不是线性的。如果你足够难以销售，最擅长制造东西的人根本不想费心。唯一会向你销售的是专门向你销售的公司。那么你已经陷入了全新的低效率水平。市场机制不再保护你，因为好的供应商已经不在市场上了。\n这样的事情不断发生在所有最大的组织中，政府。但政府实施的审核可能导致的问题不仅仅是多付钱。政府实施的审核可能破坏整个国家的经济。直到大约1400年，中国比欧洲更富有，技术更先进。欧洲超越的一个原因是中国政府限制了长途贸易航行。因此欧洲人开始探索并最终主导世界其他地区，包括中国。\n在更近的时代，《萨班斯-奥克斯利法案》实际上摧毁了美国IPO市场。这不是立法者的意图。他们只是想为上市公司添加更多审核。但他们忘记了考虑成本。他们忘记了即将上市的公司通常相当紧张，而对通用电气来说可能容易承受的几个额外审核的重量，足以阻止年轻公司上市。\n一旦你开始思考审核的成本，你就可以开始问其他有趣的问题。成本是在增加还是减少？在某些地区是否比其他地区高？哪里会不连续地增加？如果大型组织开始问这样的问题，他们会学到一些令人恐惧的事情。\n我认为审核的成本实际上可能在增加。 原因是软件在公司中扮演着越来越重要的角色，而编写软件的人特别受到审核的伤害。\n程序员与许多类型的工人不同，最好的程序员实际上更愿意努力工作。在大多数类型的工作中似乎并非如此。当我在快餐店工作时，我们并不喜欢繁忙时段。当我过去修剪草坪时，我绝对不喜欢一周下雨后草长得很长的时候。\n然而，程序员在写更多代码时更喜欢。或者更准确地说，在发布更多代码时更喜欢。程序员喜欢做出改变。好的程序员，无论如何。\n对于好的程序员来说，为创业公司工作的最大好处之一是发布的审核很少。在真正的创业公司中，根本没有外部审核。如果你早上有一个新功能的想法，你可以在午餐前编写它并将其推送到生产服务器。当你能做到这一点时，你会有更多想法。\n在大公司，软件必须经过各种批准才能发布。这样做的成本可能是巨大的——实际上是不连续的。最近我和三个程序员交谈，他们的创业公司几年前被一家大公司收购。当他们独立时，他们可以立即发布更改。现在，他们说，他们能在生产服务器上发布代码的最快速度是两周。\n这不仅让他们生产力降低。这让他们讨厌为收购者工作。\n这里是程序员多么喜欢能够努力工作的一个迹象：这些人会付钱来立即发布代码，像过去那样。我问他们是否愿意用收购价的10%来换取立即发布代码的能力，三个人立即说愿意。然后我问他们愿意用收购价的最大百分比来换取它。他们说他们不想思考，因为他们不想知道自己会多高，但我得到的印象可能高达一半。\n他们会牺牲数十万，也许是数百万美元，只是为了能够向用户交付更多软件。你知道吗？让他们这样做是完全安全的。事实上，收购者会更好；这些人不仅不会破坏任何东西，他们 …"
  },{
    "title": "6,631,372",
    "url": "/paul_graham/essays_en/6631327/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\n6,631,372 6,631,372 March 2006, rev August 2009\nA couple days ago I found to my surprise that I\u0026rsquo;d been granted a patent. It issued in 2003, but no one told me. I wouldn\u0026rsquo;t know about it now except that a few months ago, while visiting Yahoo, I happened to run into a Big Cheese I knew from working there in the late nineties. He brought up something called Revenue Loop, which Viaweb had been working on when they bought us.\n",
    "description": "",
    "tags": ["patent","revenue loop","search","technology","viaweb","yahoo"],
    "categories": [],
    "content": "→ 中文版本\n6,631,372 6,631,372 March 2006, rev August 2009\nA couple days ago I found to my surprise that I\u0026rsquo;d been granted a patent. It issued in 2003, but no one told me. I wouldn\u0026rsquo;t know about it now except that a few months ago, while visiting Yahoo, I happened to run into a Big Cheese I knew from working there in the late nineties. He brought up something called Revenue Loop, which Viaweb had been working on when they bought us.\nThe idea is basically that you sort search results not in order of textual \u0026ldquo;relevance\u0026rdquo; (as search engines did then) nor in order of how much advertisers bid (as Overture did) but in order of the bid times the number of transactions. Ordinarily you\u0026rsquo;d do this for shopping searches, though in fact one of the features of our scheme is that it automatically detects which searches are shopping searches.\nIf you just order the results in order of bids, you can make the search results useless, because the first results could be dominated by lame sites that had bid the most. But if you order results by bid multiplied by transactions, far from selling out, you\u0026rsquo;re getting a better measure of relevance. What could be a better sign that someone was satisfied with a search result than going to the site and buying something?\nAnd, of course, this algorithm automatically maximizes the revenue of the search engine.\nEveryone is focused on this type of approach now, but few were in 1998. In 1998 it was all about selling banner ads. We didn\u0026rsquo;t know that, so we were pretty excited when we figured out what seemed to us the optimal way of doing shopping searches.\nWhen Yahoo was thinking of buying us, we had a meeting with Jerry Yang in New York. For him, I now realize, this was supposed to be one of those meetings when you check out a company you\u0026rsquo;ve pretty much decided to buy, just to make sure they\u0026rsquo;re ok guys. We weren\u0026rsquo;t expected to do more than chat and seem smart and reasonable. He must have been dismayed …"
  },{
    "title": "6,631,372",
    "url": "/paul_graham/essays_zh/6631327/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n6,631,372 6,631,372 2006年3月，修订于2009年8月\n几天前，我惊讶地发现我被授予了一项专利。它在2003年颁发，但没有人告诉我。如果不是几个月前访问雅虎时，我碰巧遇到了一个我在90年代末在那里工作时认识的大人物，我现在还不知道这件事。他提到了一个叫做收入循环（Revenue Loop）的东西，这是Viaweb在被他们收购时正在研发的东西。\n这个想法基本上是，你不按文本\u0026quot;相关性\u0026quot;（如搜索引擎当时那样）排序搜索结果，也不按广告商出价（如Overture那样）排序，而是按出价乘以交易数量来排序。通常你会对购物搜索这样做，但事实上，我们方案的一个特点是它会自动检测哪些搜索是购物搜索。\n如果你只按出价排序结果，你可能会使搜索结果变得无用，因为前面的结果可能被那些出价最高的蹩脚网站占据。但如果你按出价乘以交易数量排序，远不是出卖，你得到了一个更好的相关性衡量标准。还有什么比访问网站并购买某物更能表明某人对搜索结果满意呢？\n当然，这个算法自动最大化搜索引擎的收入。\n现在每个人都专注于这种方法，但在1998年很少有人这样做。1998年都是关于销售横幅广告。我们不知道这一点，所以当我们发现看起来是进行购物搜索的最佳方式时，我们非常兴奋。\n当雅虎考虑收购我们时，我们在纽约与杨致远见了面。我现在意识到，对他来说，这应该是那些会议之一，你去考察一个你已经基本决定收购的公司，只是确保他们是不错的人。我们被期望的不过是聊天，显得聪明和合理。当我跳到白板上开始展示我们令人兴奋的新技术时，他一定感到沮丧。\n当他看起来完全不在意时，我也同样沮丧。当时我想，\u0026ldquo;天哪，这家伙真是扑克脸。我们向他展示的必须是排序产品搜索结果的最佳方式，而他甚至不好奇。\u0026ldquo;直到很久以后我才明白他为什么不在意。1998年，广告商为网站广告支付的费用过高。1998年，如果广告商支付流量对他们的最大价值，雅虎的收入就会减少。\n当然，现在情况不同了。现在这种事情很流行。所以当几个月前在雅虎食堂遇到我从前的雅虎高管时，他记得的第一件事不是（幸运的是）我与他所有的争吵，而是收入循环。\n\u0026ldquo;嗯，\u0026ldquo;我说，\u0026ldquo;我想我们确实为此申请了专利。我不确定我离开后申请发生了什么。\u0026rdquo;\n\u0026ldquo;真的吗？那将是一个重要的专利。\u0026rdquo;\n所以有人调查了一下，果然，那项专利申请在之后的几年里继续进行，最终在2003年获得批准。\n实际上，阅读时让我感到震惊的主要是，律师在某个时候搞乱了我清晰明了的写作。某个聪明的拼写检查用户将其中一部分变成了禅宗般的不可理解：\n此外，常见的拼写错误将趋于修复。例如，如果搜索\u0026quot;compact disc player\u0026quot;的用户最终在提供compact disc players的网站上花费了大量金钱，那么这些页面对于该搜索短语将具有更高的相关性，即使短语\u0026quot;compact disc player\u0026quot;不存在于那些页面上。（那个\u0026quot;compat disc player\u0026quot;不是拼写错误，伙计们。）\n想要看到原始的优美散文，请参见1998年2月的临时申请，那时我们还是Viaweb，负担不起付钱给律师把每一个\u0026quot;a lot of\u0026quot;变成\u0026quot;considerable\u0026rdquo;。\n",
    "description": "",
    "tags": ["专利","收入循环","搜索","技术","viaweb","雅虎"],
    "categories": [],
    "content": "→ English Version\n6,631,372 6,631,372 2006年3月，修订于2009年8月\n几天前，我惊讶地发现我被授予了一项专利。它在2003年颁发，但没有人告诉我。如果不是几个月前访问雅虎时，我碰巧遇到了一个我在90年代末在那里工作时认识的大人物，我现在还不知道这件事。他提到了一个叫做收入循环（Revenue Loop）的东西，这是Viaweb在被他们收购时正在研发的东西。\n这个想法基本上是，你不按文本\u0026quot;相关性\u0026quot;（如搜索引擎当时那样）排序搜索结果，也不按广告商出价（如Overture那样）排序，而是按出价乘以交易数量来排序。通常你会对购物搜索这样做，但事实上，我们方案的一个特点是它会自动检测哪些搜索是购物搜索。\n如果你只按出价排序结果，你可能会使搜索结果变得无用，因为前面的结果可能被那些出价最高的蹩脚网站占据。但如果你按出价乘以交易数量排序，远不是出卖，你得到了一个更好的相关性衡量标准。还有什么比访问网站并购买某物更能表明某人对搜索结果满意呢？\n当然，这个算法自动最大化搜索引擎的收入。\n现在每个人都专注于这种方法，但在1998年很少有人这样做。1998年都是关于销售横幅广告。我们不知道这一点，所以当我们发现看起来是进行购物搜索的最佳方式时，我们非常兴奋。\n当雅虎考虑收购我们时，我们在纽约与杨致远见了面。我现在意识到，对他来说，这应该是那些会议之一，你去考察一个你已经基本决定收购的公司，只是确保他们是不错的人。我们被期望的不过是聊天，显得聪明和合理。当我跳到白板上开始展示我们令人兴奋的新技术时，他一定感到沮丧。\n当他看起来完全不在意时，我也同样沮丧。当时我想，\u0026ldquo;天哪，这家伙真是扑克脸。我们向他展示的必须是排序产品搜索结果的最佳方式，而他甚至不好奇。\u0026ldquo;直到很久以后我才明白他为什么不在意。1998年，广告商为网站广告支付的费用过高。1998年，如果广告商支付流量对他们的最大价值，雅虎的收入就会减少。\n当然，现在情况不同了。现在这种事情很流行。所以当几个月前在雅虎食堂遇到我从前的雅虎高管时，他记得的第一件事不是（幸运的是）我与他所有的争吵，而是收入循环。\n\u0026ldquo;嗯，\u0026ldquo;我说，\u0026ldquo;我想我们确实为此申请了专利。我不确定我离开后申请发生了什么。\u0026rdquo;\n\u0026ldquo;真的吗？那将是一个重要的专利。\u0026rdquo;\n所以有人调查了一下，果然，那项专利申请在之后的几年里继续进行，最终在2003年获得批准。\n实际上，阅读时让我感到震惊的主要是，律师在某个时候搞乱了我清晰明了的写作。某个聪明的拼写检查用户将其中一部分变成了禅宗般的不可理解：\n此外，常见的拼写错误将趋于修复。例如，如果搜索\u0026quot;compact disc player\u0026quot;的用户最终在提供compact disc players的网站上花费了大量金钱，那么这些页面对于该搜索短语将具有更高的相关性，即使短语\u0026quot;compact disc player\u0026quot;不存在于那些页面上。（那个\u0026quot;compat disc player\u0026quot;不是拼写错误，伙计们。）\n想要看到原始的优美散文，请参见1998年2月的临时申请，那时我们还是Viaweb，负担不起付钱给律师把每一个\u0026quot;a lot of\u0026quot;变成\u0026quot;considerable\u0026rdquo;。\n"
  },{
    "title": "A Fundraising Survival Guide",
    "url": "/paul_graham/essays_en/fundraising/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nA Fundraising Survival Guide August 2008\nRaising money is the second hardest part of starting a startup. The hardest part is making something people want: most startups that die, die because they didn\u0026rsquo;t do that. But the second biggest cause of death is probably the difficulty of raising money. Fundraising is brutal.\nOne reason it\u0026rsquo;s so brutal is simply the brutality of markets. People who\u0026rsquo;ve spent most of their lives in schools or big companies may not have been exposed to that. Professors and bosses usually feel some sense of responsibility toward you; if you make a valiant effort and fail, they\u0026rsquo;ll cut you a break. Markets are less forgiving. Customers don\u0026rsquo;t care how hard you worked, only whether you solved their problems.\n",
    "description": "",
    "tags": ["fundraising","startups","investors","survival","morale"],
    "categories": [],
    "content": "→ 中文版本\nA Fundraising Survival Guide August 2008\nRaising money is the second hardest part of starting a startup. The hardest part is making something people want: most startups that die, die because they didn\u0026rsquo;t do that. But the second biggest cause of death is probably the difficulty of raising money. Fundraising is brutal.\nOne reason it\u0026rsquo;s so brutal is simply the brutality of markets. People who\u0026rsquo;ve spent most of their lives in schools or big companies may not have been exposed to that. Professors and bosses usually feel some sense of responsibility toward you; if you make a valiant effort and fail, they\u0026rsquo;ll cut you a break. Markets are less forgiving. Customers don\u0026rsquo;t care how hard you worked, only whether you solved their problems.\nInvestors evaluate startups the way customers evaluate products, not the way bosses evaluate employees. If you\u0026rsquo;re making a valiant effort and failing, maybe they\u0026rsquo;ll invest in your next startup, but not this one.\nBut raising money from investors is harder than selling to customers, because there are so few of them. There\u0026rsquo;s nothing like an efficient market. You\u0026rsquo;re unlikely to have more than 10 who are interested; it\u0026rsquo;s difficult to talk to more. So the randomness of any one investor\u0026rsquo;s behavior can really affect you.\nProblem number 3: investors are very random. All investors, including us, are by ordinary standards incompetent. We constantly have to make decisions about things we don\u0026rsquo;t understand, and more often than not we\u0026rsquo;re wrong.\nAnd yet a lot is at stake. The amounts invested by different types of investors vary from five thousand dollars to fifty million, but the amount usually seems large for whatever type of investor it is. Investment decisions are big decisions.\nThat combination—making big decisions about things they don\u0026rsquo;t understand—tends to make investors very skittish. VCs are notorious for leading founders on. Some of the more unscrupulous do it …"
  },{
    "title": "A Local Revolution?",
    "url": "/paul_graham/essays_en/revolution/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nA Local Revolution? April 2009\nRecently I realized I\u0026rsquo;d been holding two ideas in my head that would explode if combined.\nThe first is that startups may represent a new economic phase, on the scale of the Industrial Revolution. I\u0026rsquo;m not sure of this, but there seems a decent chance it\u0026rsquo;s true. People are dramatically more productive as founders or early employees of startups—imagine how much less Larry and Sergey would have achieved if they\u0026rsquo;d gone to work for a big company—and that scale of improvement can change social customs.\n",
    "description": "",
    "tags": ["startup","Silicon Valley","revolution","technology","innovation","economics"],
    "categories": [],
    "content": "→ 中文版本\nA Local Revolution? April 2009\nRecently I realized I\u0026rsquo;d been holding two ideas in my head that would explode if combined.\nThe first is that startups may represent a new economic phase, on the scale of the Industrial Revolution. I\u0026rsquo;m not sure of this, but there seems a decent chance it\u0026rsquo;s true. People are dramatically more productive as founders or early employees of startups—imagine how much less Larry and Sergey would have achieved if they\u0026rsquo;d gone to work for a big company—and that scale of improvement can change social customs.\nThe second idea is that startups are a type of business that flourishes in certain places that specialize in it—that Silicon Valley specializes in startups in the same way Los Angeles specializes in movies, or New York in finance. [1]\nWhat if both are true? What if startups are both a new economic phase and also a type of business that only flourishes in certain centers?\nIf so, this revolution is going to be particularly revolutionary. All previous revolutions have spread. Agriculture, cities, and industrialization all spread widely. If startups end up being like the movie business, with just a handful of centers and one dominant one, that\u0026rsquo;s going to have novel consequences.\nThere are already signs that startups may not spread particularly well. The spread of startups seems to be proceeding slower than the spread of the Industrial Revolution, despite the fact that communication is so much faster now.\nWithin a few decades of the founding of Boulton \u0026amp; Watt there were steam engines scattered over northern Europe and North America. Industrialization didn\u0026rsquo;t spread much beyond those regions for a while. It only spread to places where there was a strong middle class—countries where a private citizen could make a fortune without having it confiscated. Otherwise it wasn\u0026rsquo;t worth investing in factories. But in a country with a strong middle class it was easy for industrial techniques to take root. An …"
  },{
    "title": "A New Venture Animal",
    "url": "/paul_graham/essays_en/ycombinator/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nA New Venture Animal March 2008, rev May 2013\n(This essay grew out of something I wrote for myself to figure out what we do. Even though Y Combinator is now 3 years old, we\u0026rsquo;re still trying to understand its implications.)\nI was annoyed recently to read a description of Y Combinator that said \u0026ldquo;Y Combinator does seed funding for startups.\u0026rdquo; What was especially annoying about it was that I wrote it. This doesn\u0026rsquo;t really convey what we do. And the reason it\u0026rsquo;s inaccurate is that, paradoxically, funding very early stage startups is not mainly about funding.\n",
    "description": "",
    "tags": ["Y Combinator","startups","venture capital","funding","hackers","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版\nA New Venture Animal March 2008, rev May 2013\n(This essay grew out of something I wrote for myself to figure out what we do. Even though Y Combinator is now 3 years old, we\u0026rsquo;re still trying to understand its implications.)\nI was annoyed recently to read a description of Y Combinator that said \u0026ldquo;Y Combinator does seed funding for startups.\u0026rdquo; What was especially annoying about it was that I wrote it. This doesn\u0026rsquo;t really convey what we do. And the reason it\u0026rsquo;s inaccurate is that, paradoxically, funding very early stage startups is not mainly about funding.\nSaying YC does seed funding for startups is a description in terms of earlier models. It\u0026rsquo;s like calling a car a horseless carriage.\nWhen you scale animals you can\u0026rsquo;t just keep everything in proportion. For example, volume grows as the cube of linear dimension, but surface area only as the square. So as animals get bigger they have trouble radiating heat. That\u0026rsquo;s why mice and rabbits are furry and elephants and hippos aren\u0026rsquo;t. You can\u0026rsquo;t make a mouse by scaling down an elephant.\nYC represents a new, smaller kind of animal—so much smaller that all the rules are different.\nBefore us, most companies in the startup funding business were venture capital funds. VCs generally fund later stage companies than we do. And they supply so much money that, even though the other things they do may be very valuable, it\u0026rsquo;s not that inaccurate to regard VCs as sources of money. Good VCs are \u0026ldquo;smart money,\u0026rdquo; but they\u0026rsquo;re still money.\nAll good investors supply a combination of money and help. But these scale differently, just as volume and surface area do. Late stage investors supply huge amounts of money and comparatively little help: when a company about to go public gets a mezzanine round of $50 million, the deal tends to be almost entirely about money. As you move earlier in the venture funding process, the ratio of help to money increases, because earlier …"
  },{
    "title": "A Plan for Spam",
    "url": "/paul_graham/essays_en/spam/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nA Plan for Spam August 2002\n(This article describes the spam-filtering techniques used in the spamproof web-based mail reader we built to exercise Arc. An improved algorithm is described in Better Bayesian Filtering.)\nI think it\u0026rsquo;s possible to stop spam, and that content-based filters are the way to do it. The Achilles heel of the spammers is their message. They can circumvent any other barrier you set up. They have so far, at least. But they have to deliver their message, whatever it is. If we can write software that recognizes their messages, there is no way they can get around that.\n",
    "description": "",
    "tags": ["spam","filtering","algorithms","bayesian","email","programming","security"],
    "categories": [],
    "content": "→ 中文版本\nA Plan for Spam August 2002\n(This article describes the spam-filtering techniques used in the spamproof web-based mail reader we built to exercise Arc. An improved algorithm is described in Better Bayesian Filtering.)\nI think it\u0026rsquo;s possible to stop spam, and that content-based filters are the way to do it. The Achilles heel of the spammers is their message. They can circumvent any other barrier you set up. They have so far, at least. But they have to deliver their message, whatever it is. If we can write software that recognizes their messages, there is no way they can get around that.\nTo the recipient, spam is easily recognizable. If you hired someone to read your mail and discard the spam, they would have little trouble doing it. How much do we have to do, short of AI, to automate this process?\nI think we will be able to solve the problem with fairly simple algorithms. In fact, I\u0026rsquo;ve found that you can filter present-day spam acceptably well using nothing more than a Bayesian combination of the spam probabilities of individual words. Using a slightly tweaked (as described below) Bayesian filter, we now miss less than 5 per 1000 spams, with 0 false positives.\nThe statistical approach is not usually the first one people try when they write spam filters. Most hackers\u0026rsquo; first instinct is to try to write software that recognizes individual properties of spam. You look at spams and you think, the gall of these guys to try sending me mail that begins \u0026ldquo;Dear Friend\u0026rdquo; or has a subject line that\u0026rsquo;s all uppercase and ends in eight exclamation points. I can filter out that stuff with about one line of code.\nAnd so you do, and in the beginning it works. A few simple rules will take a big bite out of your incoming spam. Merely looking for the word \u0026ldquo;click\u0026rdquo; will catch 79.7% of the emails in my spam corpus, with only 1.2% false positives.\nI spent about six months writing software that looked for individual spam features before I …"
  },{
    "title": "A Project of One's Own",
    "url": "/paul_graham/essays_en/own/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "A Project of One\u0026rsquo;s Own June 2021\nA few days ago, on the way home from school, my nine year old son told me he couldn\u0026rsquo;t wait to get home to write more of the story he was working on. This made me as happy as anything I\u0026rsquo;ve heard him say — not just because he was excited about his story, but because he\u0026rsquo;d discovered this way of working. Working on a project of your own is as different from ordinary work as skating is from walking. It\u0026rsquo;s more fun, but also much more productive.\n",
    "description": "",
    "tags": ["projects","creativity","motivation","work","passion","independence","education"],
    "categories": [],
    "content": "A Project of One\u0026rsquo;s Own June 2021\nA few days ago, on the way home from school, my nine year old son told me he couldn\u0026rsquo;t wait to get home to write more of the story he was working on. This made me as happy as anything I\u0026rsquo;ve heard him say — not just because he was excited about his story, but because he\u0026rsquo;d discovered this way of working. Working on a project of your own is as different from ordinary work as skating is from walking. It\u0026rsquo;s more fun, but also much more productive.\nWhat proportion of great work has been done by people who were skating in this sense? If not all of it, certainly a lot.\nThere is something special about working on a project of your own. I wouldn\u0026rsquo;t say exactly that you\u0026rsquo;re happier. A better word would be excited, or engaged. You\u0026rsquo;re happy when things are going well, but often they aren\u0026rsquo;t. When I\u0026rsquo;m writing an essay, most of the time I\u0026rsquo;m worried and puzzled: worried that the essay will turn out badly, and puzzled because I\u0026rsquo;m groping for some idea that I can\u0026rsquo;t see clearly enough. Will I be able to pin it down with words? In the end I usually can, if I take long enough, but I\u0026rsquo;m never sure; the first few attempts often fail.\nYou have moments of happiness when things work out, but they don\u0026rsquo;t last long, because then you\u0026rsquo;re on to the next problem. So why do it at all? Because to the kind of people who like working this way, nothing else feels as right. You feel as if you\u0026rsquo;re an animal in its natural habitat, doing what you were meant to do — not always happy, maybe, but awake and alive.\nMany kids experience the excitement of working on projects of their own. The hard part is making this converge with the work you do as an adult. And our customs make it harder. We treat \u0026ldquo;playing\u0026rdquo; and \u0026ldquo;hobbies\u0026rdquo; as qualitatively different from \u0026ldquo;work\u0026rdquo;. It\u0026rsquo;s not clear to a kid building a treehouse that there\u0026rsquo;s a direct (though long) …"
  },{
    "title": "A Student's Guide to Startups",
    "url": "/paul_graham/essays_en/mit/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nA Student\u0026rsquo;s Guide to Startups October 2006\n(This essay is derived from a talk at MIT.)\nTill recently graduating seniors had two choices: get a job or go to grad school. I think there will increasingly be a third option: to start your own startup. But how common will that be?\nI\u0026rsquo;m sure the default will always be to get a job, but starting a startup could well become as popular as grad school. In the late 90s my professor friends used to complain that they couldn\u0026rsquo;t get grad students, because all the undergrads were going to work for startups. I wouldn\u0026rsquo;t be surprised if that situation returns, but with one difference: this time they\u0026rsquo;ll be starting their own instead of going to work for other people\u0026rsquo;s.\n",
    "description": "",
    "tags": ["students","entrepreneurship","education","founders","colleges"],
    "categories": [],
    "content": "→ 中文版本\nA Student\u0026rsquo;s Guide to Startups October 2006\n(This essay is derived from a talk at MIT.)\nTill recently graduating seniors had two choices: get a job or go to grad school. I think there will increasingly be a third option: to start your own startup. But how common will that be?\nI\u0026rsquo;m sure the default will always be to get a job, but starting a startup could well become as popular as grad school. In the late 90s my professor friends used to complain that they couldn\u0026rsquo;t get grad students, because all the undergrads were going to work for startups. I wouldn\u0026rsquo;t be surprised if that situation returns, but with one difference: this time they\u0026rsquo;ll be starting their own instead of going to work for other people\u0026rsquo;s.\nThe most ambitious students will at this point be asking: Why wait till you graduate? Why not start a startup while you\u0026rsquo;re in college? In fact, why go to college at all? Why not start a startup instead?\nA year and a half ago I gave a talk where I said that the average age of the founders of Yahoo, Google, and Microsoft was 24, and that if grad students could start startups, why not undergrads? I\u0026rsquo;m glad I phrased that as a question, because now I can pretend it wasn\u0026rsquo;t merely a rhetorical one. At the time I couldn\u0026rsquo;t imagine why there should be any lower limit for the age of startup founders. Graduation is a bureaucratic change, not a biological one. And certainly there are undergrads as competent technically as most grad students. So why shouldn\u0026rsquo;t undergrads be able to start startups as well as grad students?\nI now realize that something does change at graduation: you lose a huge excuse for failing. Regardless of how complex your life is, you\u0026rsquo;ll find that everyone else, including your family and friends, will discard all the low bits and regard you as having a single occupation at any given time. If you\u0026rsquo;re in college and have a summer job writing software, you still read as a student. …"
  },{
    "title": "A Unified Theory of VC Suckage",
    "url": "/paul_graham/essays_en/venturecapital/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nA Unified Theory of VC Suckage March 2005\nA couple months ago I got an email from a recruiter asking if I was interested in being a \u0026ldquo;technologist in residence\u0026rdquo; at a new venture capital fund. I think the idea was to play Karl Rove to the VCs\u0026rsquo; George Bush.\\n\\nI considered it for about four seconds. Work for a VC fund? Ick.\\n\\nOne of my most vivid memories from our startup is going to visit Greylock, the famous Boston VCs. They were the most arrogant people I\u0026rsquo;ve met in my life. And I\u0026rsquo;ve met a lot of arrogant people. [1]I\u0026rsquo;m not alone in feeling this way, of course. Even a VC friend of mine dislikes VCs. \u0026ldquo;Assholes,\u0026rdquo; he says.But lately I\u0026rsquo;ve been learning more about how the VC world works, and a few days ago it hit me that there\u0026rsquo;s a reason VCs are the way they are. It\u0026rsquo;s not so much that the business attracts jerks, or even that the power they wield corrupts them. The real problem is the way they\u0026rsquo;re paid.The problem with VC funds is that they\u0026rsquo;re funds. Like the managers of mutual funds or hedge funds, VCs get paid a percentage of the money they manage: about 2% a year in management fees, plus a percentage of the gains. So they want the fund to be huge\u0026ndash; hundreds of millions of dollars, if possible. But that means each partner ends up being responsible for investing a lot of money. And since one person can only manage so many deals, each deal has to be for multiple millions of dollars.This turns out to explain nearly all the characteristics of VCs that founders hate.It explains why VCs take so agonizingly long to make up their minds, and why their due diligence feels like a body cavity search. [2] With so much at stake, they have to be paranoid.It explains why they steal your ideas. Every founder knows that VCs will tell your secrets to your competitors if they end up investing in them. It\u0026rsquo;s not unheard of for VCs to meet you when they have no intention of funding you, just to pick your brain for a competitor. This prospect makes naive founders clumsily secretive. Experienced founders treat it as a cost of doing business. Either way it sucks. But again, the only reason VCs are so sneaky is the giant deals they do. With so much at stake, they have to be devious.It explains why VCs tend to interfere in the companies they invest in. They want to be on your board not just so that they can advise you, but so that they can watch you. Often they even install a new CEO. Yes, he may have extensive business experience. But he\u0026rsquo;s also their man: these newly installed CEOs always play something of the role of a political commissar in a Red Army unit. With so much at stake, VCs can\u0026rsquo;t resist micromanaging you.The huge investments themselves are something founders would dislike, if they realized how damaging they can be. VCs don\u0026rsquo;t invest $x million because that's the amount you need, but because that's the amount the structure of their business requires them to invest. Like steroids, these sudden huge investments can do more harm than good. Google survived enormous VC funding because it could legitimately absorb large amounts of money. They had to buy a lot of servers and a lot of bandwidth to crawl the whole Web. Less fortunate startups just end up hiring armies of people to sit around having meetings.In principle you could take a huge VC investment, put it in treasury bills, and continue to operate frugally. You just try it.And of course giant investments mean giant valuations. They have to, or there's not enough stock left to keep the founders interested. You might think a high valuation is a great thing. Many founders do. But you can't eat paper. You can't benefit from a high valuation unless you can somehow achieve what those in the business call a \"liquidity event,\" and the higher your valuation, the narrower your options for doing that. Many a founder would be happy to sell his company for $15 million, but VCs who\u0026rsquo;ve just invested at a pre-money valuation of $8 million won't hear of that. You're rolling the dice again, whether you like it or not.Back in 1997, one of our competitors raised $20 million in a single round of VC funding. This was at the time more than the valuation of our entire company. Was I worried? Not at all: I was delighted. It was like watching a car you\u0026rsquo;re chasing turn down a street that you know has no outlet.Their smartest move at that point would have been to take every penny of the $20 million and use it to buy us. We would have sold. Their investors would have been furious of course. But I think the main reason they never considered this was that they never imagined we could be had so cheap. They probably assumed we were on the same VC gravy train they were.In fact we only spent about $2 million in our entire existence. And that gave us flexibility. We could sell ourselves to Yahoo for $50 million, and everyone was delighted. If our competitor had done that, the last round of investors would presumably have lost money. I assume they could have vetoed such a deal. But no one those days was paying a lot more than Yahoo. So unless their founders could pull off an IPO (which would be difficult with Yahoo as a competitor), they had no choice but to ride the thing down.The puffed-up companies that went public during the Bubble didn\u0026rsquo;t do it just because they were pulled into it by unscrupulous investment bankers. Most were pushed just as hard from the other side by VCs who\u0026rsquo;d invested at high valuations, leaving an IPO as the only way out. The only people dumber were retail investors. So it was literally IPO or bust. Or rather, IPO then bust, or just bust.Add up all the evidence of VCs\u0026rsquo; behavior, and the resulting personality is not attractive. In fact, it\u0026rsquo;s the classic villain: alternately cowardly, greedy, sneaky, and overbearing.I used to take it for granted that VCs were like this. Complaining that VCs were jerks used to seem as naive to me as complaining that users didn\u0026rsquo;t read the reference manual. Of course VCs were jerks. How could it be otherwise?But I realize now that they\u0026rsquo;re not intrinsically jerks. VCs are like car salesmen or bureaucrats: the nature of their work turns them into jerks.I\u0026rsquo;ve met a few VCs I like. Mike Moritz seems a good guy. He even has a sense of humor, which is almost unheard of among VCs. From what I\u0026rsquo;ve read about John Doerr, he sounds like a good guy too, almost a hacker. But they work for the very best VC funds. And my theory explains why they\u0026rsquo;d tend to be different: just as the very most popular kids don\u0026rsquo;t have to persecute nerds, the very best VCs don\u0026rsquo;t have to act like VCs. They get the pick of all the best deals. So they don\u0026rsquo;t have to be so paranoid and sneaky, and they can choose those rare companies, like Google, that will actually benefit from the giant sums they\u0026rsquo;re compelled to invest.VCs often complain that in their business there\u0026rsquo;s too much money chasing too few deals. Few realize that this also describes a flaw in the way funding works at the level of individual firms.Perhaps this was the sort of strategic insight I was supposed to come up with as a \u0026ldquo;technologist in residence.\u0026rdquo; If so, the good news is that they\u0026rsquo;re getting it for free. The bad news is it means that if you\u0026rsquo;re not one of the very top funds, you\u0026rsquo;re condemned to be the bad guys.Notes[1] After Greylock booted founder Philip Greenspun out of ArsDigita, he wrote a hilarious but also very informative essay about it. [2] Since most VCs aren\u0026rsquo;t tech guys, the technology side of their due diligence tends to be like a body cavity search by someone with a faulty knowledge of human anatomy. After a while we were quite sore from VCs attempting to probe our nonexistent database orifice.No, we don\u0026rsquo;t use Oracle. We just store the data in files. Our secret is to use an OS that doesn\u0026rsquo;t lose our data. Which OS? FreeBSD. Why do you use that instead of Windows NT? Because it\u0026rsquo;s better and it doesn\u0026rsquo;t cost anything. What, you\u0026rsquo;re using a freeware OS?How many times that conversation was repeated. Then when we got to Yahoo, we found they used FreeBSD and stored their data in files too.Chinese TranslationJapanese Translation\n",
    "description": "",
    "tags": ["venture capital","VCs","funding","startups","business","investment"],
    "categories": [],
    "content": "→ 中文版本\nA Unified Theory of VC Suckage March 2005\nA couple months ago I got an email from a recruiter asking if I was interested in being a \u0026ldquo;technologist in residence\u0026rdquo; at a new venture capital fund. I think the idea was to play Karl Rove to the VCs\u0026rsquo; George Bush.\\n\\nI considered it for about four seconds. Work for a VC fund? Ick.\\n\\nOne of my most vivid memories from our startup is going to visit Greylock, the famous Boston VCs. They were the most arrogant people I\u0026rsquo;ve met in my life. And I\u0026rsquo;ve met a lot of arrogant people. [1]I\u0026rsquo;m not alone in feeling this way, of course. Even a VC friend of mine dislikes VCs. \u0026ldquo;Assholes,\u0026rdquo; he says.But lately I\u0026rsquo;ve been learning more about how the VC world works, and a few days ago it hit me that there\u0026rsquo;s a reason VCs are the way they are. It\u0026rsquo;s not so much that the business attracts jerks, or even that the power they wield corrupts them. The real problem is the way they\u0026rsquo;re paid.The problem with VC funds is that they\u0026rsquo;re funds. Like the managers of mutual funds or hedge funds, VCs get paid a percentage of the money they manage: about 2% a year in management fees, plus a percentage of the gains. So they want the fund to be huge\u0026ndash; hundreds of millions of dollars, if possible. But that means each partner ends up being responsible for investing a lot of money. And since one person can only manage so many deals, each deal has to be for multiple millions of dollars.This turns out to explain nearly all the characteristics of VCs that founders hate.It explains why VCs take so agonizingly long to make up their minds, and why their due diligence feels like a body cavity search. [2] With so much at stake, they have to be paranoid.It explains why they steal your ideas. Every founder knows that VCs will tell your secrets to your competitors if they end up investing in them. It\u0026rsquo;s not unheard of for VCs to meet you when they have no intention of funding you, just to …"
  },{
    "title": "A Way to Detect Bias",
    "url": "/paul_graham/essays_en/bias/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nA Way to Detect Bias October 2015\nThis will come as a surprise to a lot of people, but in some cases it\u0026rsquo;s possible to detect bias in a selection process without knowing anything about the applicant pool. Which is exciting because among other things it means third parties can use this technique to detect bias whether those doing the selecting want them to or not.\nYou can use this technique whenever (a) you have at least a random sample of the applicants that were selected, (b) their subsequent performance is measured, and (c) the groups of applicants you\u0026rsquo;re comparing have roughly equal distribution of ability.\n",
    "description": "",
    "tags": ["bias","selection","performance","measurement","venture capital","discrimination"],
    "categories": [],
    "content": "→ 中文版本\nA Way to Detect Bias October 2015\nThis will come as a surprise to a lot of people, but in some cases it\u0026rsquo;s possible to detect bias in a selection process without knowing anything about the applicant pool. Which is exciting because among other things it means third parties can use this technique to detect bias whether those doing the selecting want them to or not.\nYou can use this technique whenever (a) you have at least a random sample of the applicants that were selected, (b) their subsequent performance is measured, and (c) the groups of applicants you\u0026rsquo;re comparing have roughly equal distribution of ability.\nHow does it work? Think about what it means to be biased. What it means for a selection process to be biased against applicants of type x is that it\u0026rsquo;s harder for them to make it through. Which means applicants of type x have to be better to get selected than applicants not of type x. [1] Which means applicants of type x who do make it through the selection process will outperform other successful applicants. And if the performance of all the successful applicants is measured, you\u0026rsquo;ll know if they do.\nOf course, the test you use to measure performance must be a valid one. And in particular it must not be invalidated by the bias you\u0026rsquo;re trying to measure. But there are some domains where performance can be measured, and in those detecting bias is straightforward. Want to know if the selection process was biased against some type of applicant? Check whether they outperform the others. This is not just a heuristic for detecting bias. It\u0026rsquo;s what bias means.\nFor example, many suspect that venture capital firms are biased against female founders. This would be easy to detect: among their portfolio companies, do startups with female founders outperform those without? A couple months ago, one VC firm (almost certainly unintentionally) published a study showing bias of this type. First Round Capital found that among its portfolio …"
  },{
    "title": "A Word to the Resourceful",
    "url": "/paul_graham/essays_en/word/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nA Word to the Resourceful January 2012\nA year ago I noticed a pattern in the least successful startups we\u0026rsquo;d funded: they all seemed hard to talk to. It felt as if there was some kind of wall between us. I could never quite tell if they understood what I was saying.\nThis caught my attention because earlier we\u0026rsquo;d noticed a pattern among the most successful startups, and it seemed to hinge on a different quality. We found the startups that did best were the ones with the sort of founders about whom we\u0026rsquo;d say \u0026ldquo;they can take care of themselves.\u0026rdquo; The startups that do best are fire-and-forget in the sense that all you have to do is give them a lead, and they\u0026rsquo;ll close it, whatever type of lead it is. When they\u0026rsquo;re raising money, for example, you can do the initial intros knowing that if you wanted to you could stop thinking about it at that point. You won\u0026rsquo;t have to babysit the round to make sure it happens. That type of founder is going to come back with the money; the only question is how much on what terms.\n",
    "description": "",
    "tags": ["startups","resourcefulness","conversation","advice","founders"],
    "categories": [],
    "content": "→ 中文版\nA Word to the Resourceful January 2012\nA year ago I noticed a pattern in the least successful startups we\u0026rsquo;d funded: they all seemed hard to talk to. It felt as if there was some kind of wall between us. I could never quite tell if they understood what I was saying.\nThis caught my attention because earlier we\u0026rsquo;d noticed a pattern among the most successful startups, and it seemed to hinge on a different quality. We found the startups that did best were the ones with the sort of founders about whom we\u0026rsquo;d say \u0026ldquo;they can take care of themselves.\u0026rdquo; The startups that do best are fire-and-forget in the sense that all you have to do is give them a lead, and they\u0026rsquo;ll close it, whatever type of lead it is. When they\u0026rsquo;re raising money, for example, you can do the initial intros knowing that if you wanted to you could stop thinking about it at that point. You won\u0026rsquo;t have to babysit the round to make sure it happens. That type of founder is going to come back with the money; the only question is how much on what terms.\nIt seemed odd that the outliers at the two ends of the spectrum could be detected by what appeared to be unrelated tests. You\u0026rsquo;d expect that if the founders at one end were distinguished by the presence of quality x, at the other end they\u0026rsquo;d be distinguished by lack of x. Was there some kind of inverse relation between resourcefulness and being hard to talk to?\nIt turns out there is, and the key to the mystery is the old adage \u0026ldquo;a word to the wise is sufficient.\u0026rdquo; Because this phrase is not only overused, but overused in an indirect way (by prepending the subject to some advice), most people who\u0026rsquo;ve heard it don\u0026rsquo;t know what it means. What it means is that if someone is wise, all you have to do is say one word to them, and they\u0026rsquo;ll understand immediately. You don\u0026rsquo;t have to explain in detail; they\u0026rsquo;ll chase down all the implications.\nIn much the same way that all you have to …"
  },{
    "title": "Ace",
    "url": "/paul_graham/essays_en/ace/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAce Ace December 2020\nAs I was deciding what to write about next, I was surprised to find that two separate essays I\u0026rsquo;d been planning to write were actually the same.\nThe first is about how to ace your Y Combinator interview. There has been so much nonsense written about this topic that I\u0026rsquo;ve been meaning for years to write something telling founders the truth.\nThe second is about something politicians sometimes say — that the only way to become a billionaire is by exploiting people — and why this is mistaken.\n",
    "description": "",
    "tags": ["startup","yc","interview","billionaires","founders","users"],
    "categories": [],
    "content": "→ 中文版本\nAce Ace December 2020\nAs I was deciding what to write about next, I was surprised to find that two separate essays I\u0026rsquo;d been planning to write were actually the same.\nThe first is about how to ace your Y Combinator interview. There has been so much nonsense written about this topic that I\u0026rsquo;ve been meaning for years to write something telling founders the truth.\nThe second is about something politicians sometimes say — that the only way to become a billionaire is by exploiting people — and why this is mistaken.\nKeep reading, and you\u0026rsquo;ll learn both simultaneously.\nI know the politicians are mistaken because it was my job to predict which people will become billionaires. I think I can truthfully say that I know as much about how to do this as anyone. If the key to becoming a billionaire — the defining feature of billionaires — was to exploit people, then I, as a professional billionaire scout, would surely realize this and look for people who would be good at it, just as an NFL scout looks for speed in wide receivers.\nBut aptitude for exploiting people is not what Y Combinator looks for at all. In fact, it\u0026rsquo;s the opposite of what they look for. I\u0026rsquo;ll tell you what they do look for, by explaining how to convince Y Combinator to fund you, and you can see for yourself.\nWhat YC looks for, above all, is founders who understand some group of users and can make what they want. This is so important that it\u0026rsquo;s YC\u0026rsquo;s motto: \u0026ldquo;Make something people want.\u0026rdquo;\nA big company can to some extent force unsuitable products on unwilling customers, but a startup doesn\u0026rsquo;t have the power to do that. A startup must sing for its supper, by making things that genuinely delight its customers. Otherwise it will never get off the ground.\nHere\u0026rsquo;s where things get difficult, both for you as a founder and for the YC partners trying to decide whether to fund you. In a market economy, it\u0026rsquo;s hard to make something people want that they …"
  },{
    "title": "Addiction",
    "url": "/paul_graham/essays_en/addiction/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAddiction The Acceleration of Addictiveness July 2010\nWhat hard liquor, cigarettes, heroin, and crack have in common is that they\u0026rsquo;re all more concentrated forms of less addictive predecessors. Most if not all the things we describe as addictive are. And the scary thing is, the process that created them is accelerating.\nWe wouldn\u0026rsquo;t want to stop it. It\u0026rsquo;s the same process that cures diseases: technological progress. Technological progress means making things do more of what we want. When the thing we want is something we want to want, we consider technological progress good. If some new technique makes solar cells x% more efficient, that seems strictly better. When progress concentrates something we don\u0026rsquo;t want to want — when it transforms opium into heroin — it seems bad. But it\u0026rsquo;s the same process at work.\n",
    "description": "",
    "tags": ["addiction","technology","society","internet","progress"],
    "categories": [],
    "content": "→ 中文版本\nAddiction The Acceleration of Addictiveness July 2010\nWhat hard liquor, cigarettes, heroin, and crack have in common is that they\u0026rsquo;re all more concentrated forms of less addictive predecessors. Most if not all the things we describe as addictive are. And the scary thing is, the process that created them is accelerating.\nWe wouldn\u0026rsquo;t want to stop it. It\u0026rsquo;s the same process that cures diseases: technological progress. Technological progress means making things do more of what we want. When the thing we want is something we want to want, we consider technological progress good. If some new technique makes solar cells x% more efficient, that seems strictly better. When progress concentrates something we don\u0026rsquo;t want to want — when it transforms opium into heroin — it seems bad. But it\u0026rsquo;s the same process at work.\nNo one doubts this process is accelerating, which means increasing numbers of things we like will be transformed into things we like too much.\nAs far as I know there\u0026rsquo;s no word for something we like too much. The closest is the colloquial sense of \u0026ldquo;addictive.\u0026rdquo; That usage has become increasingly common during my lifetime. And it\u0026rsquo;s clear why: there are an increasing number of things we need it for. At the extreme end of the spectrum are crack and meth. Food has been transformed by a combination of factory farming and innovations in food processing into something with way more immediate bang for the buck, and you can see the results in any town in America. Checkers and solitaire have been replaced by World of Warcraft and FarmVille. TV has become much more engaging, and even so it can\u0026rsquo;t compete with Facebook.\nThe world is more addictive than it was 40 years ago. And unless the forms of technological progress that produced these things are subject to different laws than technological progress in general, the world will get more addictive in the next 40 years than it did in the last 40.\nThe next 40 years …"
  },{
    "title": "After Credentials",
    "url": "/paul_graham/essays_en/credentials/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nAfter Credentials December 2008\nA few months ago I read a New York Times article on South Korean cram schools that said Admission to the right university can make or break an ambitious young South Korean. A parent added: \u0026ldquo;In our country, college entrance exams determine 70 to 80 percent of a person\u0026rsquo;s future.\u0026rdquo; It was striking how old fashioned this sounded. And yet when I was in high school it wouldn\u0026rsquo;t have seemed too far off as a description of the US. Which means things must have been changing here.\n",
    "description": "",
    "tags": ["credentials","education","performance","meritocracy","society","careers","startups","measurement"],
    "categories": [],
    "content": "→ Chinese Version\nAfter Credentials December 2008\nA few months ago I read a New York Times article on South Korean cram schools that said Admission to the right university can make or break an ambitious young South Korean. A parent added: \u0026ldquo;In our country, college entrance exams determine 70 to 80 percent of a person\u0026rsquo;s future.\u0026rdquo; It was striking how old fashioned this sounded. And yet when I was in high school it wouldn\u0026rsquo;t have seemed too far off as a description of the US. Which means things must have been changing here.\nThe course of people\u0026rsquo;s lives in the US now seems to be determined less by credentials and more by performance than it was 25 years ago. Where you go to college still matters, but not like it used to.\nWhat happened?\nJudging people by their academic credentials was in its time an advance. The practice seems to have begun in China, where starting in 587 candidates for the imperial civil service had to take an exam on classical literature. [1] It was also a test of wealth, because the knowledge it tested was so specialized that passing required years of expensive training. But though wealth was a necessary condition for passing, it was not a sufficient one. By the standards of the rest of the world in 587, the Chinese system was very enlightened. Europeans didn\u0026rsquo;t introduce formal civil service exams till the nineteenth century, and even then they seem to have been influenced by the Chinese example.\nBefore credentials, government positions were obtained mainly by family influence, if not outright bribery. It was a great step forward to judge people by their performance on a test. But by no means a perfect solution. When you judge people that way, you tend to get cram schools—which they did in Ming China and nineteenth century England just as much as in present day South Korea.\nWhat cram schools are, in effect, is leaks in a seal. The use of credentials was an attempt to seal off the direct transmission of power between …"
  },{
    "title": "After the Ladder",
    "url": "/paul_graham/essays_en/ladder/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAfter the Ladder August 2005\nThirty years ago, one was supposed to work one\u0026rsquo;s way up the corporate ladder. That\u0026rsquo;s less the rule now. Our generation wants to get paid up front. Instead of developing a product for some big company in the expectation of getting job security in return, we develop the product ourselves, in a startup, and sell it to the big company. At the very least we want options.\n",
    "description": "",
    "tags": ["corporate_ladder","careers","startups","economic_inequality","work_culture","risk","job_security"],
    "categories": [],
    "content": "→ 中文版本\nAfter the Ladder August 2005\nThirty years ago, one was supposed to work one\u0026rsquo;s way up the corporate ladder. That\u0026rsquo;s less the rule now. Our generation wants to get paid up front. Instead of developing a product for some big company in the expectation of getting job security in return, we develop the product ourselves, in a startup, and sell it to the big company. At the very least we want options.\nAmong other things, this shift has created the appearance of a rapid increase in economic inequality. But really the two cases are not as different as they look in economic statistics.\nEconomic statistics are misleading because they ignore the value of safe jobs. An easy job from which one can\u0026rsquo;t be fired is worth money; exchanging the two is one of the commonest forms of corruption. A sinecure is, in effect, an annuity. Except sinecures don\u0026rsquo;t appear in economic statistics. If they did, it would be clear that in practice socialist countries have nontrivial disparities of wealth, because they usually have a class of powerful bureaucrats who are paid mostly by seniority and can never be fired.\nWhile not a sinecure, a position on the corporate ladder was genuinely valuable, because big companies tried not to fire people, and promoted from within based largely on seniority. A position on the corporate ladder had a value analogous to the \u0026ldquo;goodwill\u0026rdquo; that is a very real element in the valuation of companies. It meant one could expect future high paying jobs.\nOne of main causes of the decay of the corporate ladder is the trend for takeovers that began in the 1980s. Why waste your time climbing a ladder that might disappear before you reach the top?\nAnd, by no coincidence, the corporate ladder was one of the reasons the early corporate raiders were so successful. It\u0026rsquo;s not only economic statistics that ignore the value of safe jobs. Corporate balance sheets do too. One reason it was profitable to carve up 1980s companies and sell them for …"
  },{
    "title": "Airbnb",
    "url": "/paul_graham/essays_en/airbnb/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAirbnb March 2011\nYesterday Fred Wilson published a remarkable post about missing Airbnb. VCs miss good startups all the time, but it\u0026rsquo;s extraordinarily rare for one to talk about it publicly till long afterward. So that post is further evidence what a rare bird Fred is. He\u0026rsquo;s probably the nicest VC I know.\nReading Fred\u0026rsquo;s post made me go back and look at the emails I exchanged with him at the time, trying to convince him to invest in Airbnb. It was quite interesting to read. You can see Fred\u0026rsquo;s mind at work as he circles the deal.\n",
    "description": "",
    "tags": ["airbnb","vc","startup","investing","yc"],
    "categories": [],
    "content": "→ 中文版本\nAirbnb March 2011\nYesterday Fred Wilson published a remarkable post about missing Airbnb. VCs miss good startups all the time, but it\u0026rsquo;s extraordinarily rare for one to talk about it publicly till long afterward. So that post is further evidence what a rare bird Fred is. He\u0026rsquo;s probably the nicest VC I know.\nReading Fred\u0026rsquo;s post made me go back and look at the emails I exchanged with him at the time, trying to convince him to invest in Airbnb. It was quite interesting to read. You can see Fred\u0026rsquo;s mind at work as he circles the deal.\nFred and the Airbnb founders have generously agreed to let me publish this email exchange (with one sentence redacted about something that\u0026rsquo;s strategically important to Airbnb and not an important part of the conversation). It\u0026rsquo;s an interesting illustration of an element of the startup ecosystem that few except the participants ever see: investors trying to convince one another to invest in their portfolio companies. Hundreds if not thousands of conversations of this type are happening now, but if one has ever been published, I haven\u0026rsquo;t seen it. The Airbnbs themselves never even saw these emails at the time.\nWe do a lot of this behind the scenes stuff at YC, because we invest in such a large number of companies, and we invest so early that investors sometimes need a lot of convincing to see their merits. I don\u0026rsquo;t always try as hard as this though. Fred must have found me quite annoying.\nfrom: Paul Graham to: Fred Wilson, AirBedAndBreakfast Founders date: Fri, Jan 23, 2009 at 11:42 AM subject: meet the airbeds\nOne of the startups from the batch that just started, AirbedAndBreakfast, is in NYC right now meeting their users. (NYC is their biggest market.) I\u0026rsquo;d recommend meeting them if your schedule allows.\nI\u0026rsquo;d been thinking to myself that though these guys were going to do really well, I should introduce them to angels, because VCs would never go for it. But then I thought maybe I …"
  },{
    "title": "Airbnb",
    "url": "/paul_graham/essays_zh/airbnb/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nAirbnb 主题：Airbnb 2011年3月\n昨天Fred Wilson发表了一篇关于错过Airbnb的引人注目的文章。风险投资家错过好的初创公司是很常见的事，但一个人在事后很长时间之前公开谈论这件事是极其罕见的。所以那篇文章进一步证明了Fred是多么难得的人物。他可能是我认识的最友好的风险投资家。\n阅读Fred的文章让我回顾了当时我与他的邮件交流，试图说服他投资Airbnb。阅读起来相当有趣。你可以看到Fred的思路在他围绕这笔交易盘旋时的工作方式。\nFred和Airbnb创始人们慷慨地同意让我发布这封邮件交流（关于对Airbnb具有战略重要性且不是对话重要部分的一句话被编辑删除）。这是一个很少除了参与者能看到的企业生态系统中一个元素的有趣说明：投资者试图说服彼此投资他们的投资组合公司。现在正在发生数百甚至数千次这种类型的对话，但如果曾经有被发布过，我还没有看到。Airbnb团队当时甚至没有看到这些邮件。\n我们在YC做了很多幕后工作，因为我们投资了如此大量的公司，而且我们投资得如此之早，以至于投资者有时需要大量的说服才能看到它们的价值。我并不总是像这样努力尝试。Fred肯定觉得我很烦人。\n发件人： Paul Graham 收件人： Fred Wilson, AirBedAndBreakfast Founders 日期： 2009年1月23日星期五上午11:42 主题： 认识airbed团队\n刚刚开始的一批初创公司中的一家，AirbedAndBreakfast，现在在纽约与他们的用户会面。（纽约是他们最大的市场。）如果你的日程安排允许，我建议见见他们。\n我一直在想，虽然这些人会做得很好，但我应该把他们介绍给天使投资人，因为风险投资家绝不会对它感兴趣。但后来我想也许我应该给你更多的信任。你肯定会喜欢见他们的。一定要问问他们是如何用早餐麦片为自己融资的。\n没有理由说这不能像Ebay那样大。而这个团队是做这件事的合适人选。\n\u0026ndash;pg\n发件人： Brian Chesky 收件人： Paul Graham 抄送： Nathan Blecharczyk, Joe Gebbia 日期： 2009年1月23日星期五上午11:40 主题： Re：认识airbed团队\nPG，\n谢谢介绍！\nBrian\n发件人： Paul Graham 收件人： Brian Chesky 抄送： Nathan Blecharczyk, Joe Gebbia 日期： 2009年1月23日星期五下午12:38 主题： Re：认识airbed团队\n在这个阶段，这是一个长线投资，但如果有一个风险投资家会理解你们，那就是Fred。他是我认识的最不喜欢郊区打高尔夫的风险投资家。\n他喜欢在行动之前观察初创公司一段时间，所以如果他显得犹豫不决，不要感到沮丧。\n\u0026ndash;pg\n发件人： Fred Wilson 收件人： Paul Graham 日期： 2009年1月25日星期日下午5:28 主题： Re：认识airbed团队\n",
    "description": "",
    "tags": ["airbnb","风投","创业","投资","yc"],
    "categories": [],
    "content": "→ English Version\nAirbnb 主题：Airbnb 2011年3月\n昨天Fred Wilson发表了一篇关于错过Airbnb的引人注目的文章。风险投资家错过好的初创公司是很常见的事，但一个人在事后很长时间之前公开谈论这件事是极其罕见的。所以那篇文章进一步证明了Fred是多么难得的人物。他可能是我认识的最友好的风险投资家。\n阅读Fred的文章让我回顾了当时我与他的邮件交流，试图说服他投资Airbnb。阅读起来相当有趣。你可以看到Fred的思路在他围绕这笔交易盘旋时的工作方式。\nFred和Airbnb创始人们慷慨地同意让我发布这封邮件交流（关于对Airbnb具有战略重要性且不是对话重要部分的一句话被编辑删除）。这是一个很少除了参与者能看到的企业生态系统中一个元素的有趣说明：投资者试图说服彼此投资他们的投资组合公司。现在正在发生数百甚至数千次这种类型的对话，但如果曾经有被发布过，我还没有看到。Airbnb团队当时甚至没有看到这些邮件。\n我们在YC做了很多幕后工作，因为我们投资了如此大量的公司，而且我们投资得如此之早，以至于投资者有时需要大量的说服才能看到它们的价值。我并不总是像这样努力尝试。Fred肯定觉得我很烦人。\n发件人： Paul Graham 收件人： Fred Wilson, AirBedAndBreakfast Founders 日期： 2009年1月23日星期五上午11:42 主题： 认识airbed团队\n刚刚开始的一批初创公司中的一家，AirbedAndBreakfast，现在在纽约与他们的用户会面。（纽约是他们最大的市场。）如果你的日程安排允许，我建议见见他们。\n我一直在想，虽然这些人会做得很好，但我应该把他们介绍给天使投资人，因为风险投资家绝不会对它感兴趣。但后来我想也许我应该给你更多的信任。你肯定会喜欢见他们的。一定要问问他们是如何用早餐麦片为自己融资的。\n没有理由说这不能像Ebay那样大。而这个团队是做这件事的合适人选。\n\u0026ndash;pg\n发件人： Brian Chesky 收件人： Paul Graham 抄送： Nathan Blecharczyk, Joe Gebbia 日期： 2009年1月23日星期五上午11:40 主题： Re：认识airbed团队\nPG，\n谢谢介绍！\nBrian\n发件人： Paul Graham 收件人： Brian Chesky 抄送： Nathan Blecharczyk, Joe Gebbia 日期： 2009年1月23日星期五下午12:38 主题： Re：认识airbed团队\n在这个阶段，这是一个长线投资，但如果有一个风险投资家会理解你们，那就是Fred。他是我认识的最不喜欢郊区打高尔夫的风险投资家。\n他喜欢在行动之前观察初创公司一段时间，所以如果他显得犹豫不决，不要感到沮丧。\n\u0026ndash;pg\n发件人： Fred Wilson 收件人： Paul Graham 日期： 2009年1月25日星期日下午5:28 主题： Re：认识airbed团队\n谢谢Paul\n我们团队内部正在就airbed概念进行一些辩论。我们将在明天的周会中完成这场辩论，并向你反馈我们的想法\n谢谢\nFred\n发件人： Paul Graham 收件人： Fred Wilson 日期： 2009年1月25日星期日晚上10:48 主题： Re：认识airbed团队\n我建议在见他们之后而不是之前进行辩论。我们对这个想法有很大的疑虑，但在见到这些人后疑虑消失了。\n发件人： Fred Wilson 收件人： Paul Graham 日期： 2009年1月26日星期一上午11:08 主题： RE：认识airbed团队\n我们仍然非常怀疑这个想法，但会按照你的建议安排会面\n谢谢\nfred\n发件人： Fred Wilson 收件人： Paul Graham, AirBedAndBreakfast Founders 日期： 2009年1月26日星期一上午11:09 主题： RE：认识airbed团队\nAirbed团队 -\n你们还在纽约吗？\n如果还在，我们想见见你们\n谢谢\nfred\n发件人： Paul Graham 收件人： Fred Wilson 日期： 2009年1月26日星期一下午1:42 主题： Re：认识airbed团队\n想法可以转变。实际上每个真正大的初创公司五年后都可以说，\u0026ldquo;信不信由你，我们开始时做的是___。\u0026rdquo; 对我来说，这些人实际上在纽约实地追踪（并理解）他们的用户似乎是一个非常好的迹象。除了之前几个好迹象之外。\n\u0026ndash;pg\n发件人： Fred Wilson 收件人： Paul Graham 日期： 2009年2月1日星期日上午7:15 主题： Re：认 …"
  },{
    "title": "Airbnb团队",
    "url": "/paul_graham/essays_zh/airbnbs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nAirbnb团队 2020年12月\n为了庆祝Airbnb的IPO并帮助未来的创始人，我认为解释一下Airbnb的特别之处可能会有用。\nAirbnb的特别之处在于他们有多么认真。他们做事从不半途而废，我们在面试中就能感觉到这一点。有时面试完一家初创公司后，我们会不确定该怎么做，需要商量一下。有时我们只会相视而笑。Airbnb的面试就是后者。我们甚至不太喜欢他们的想法。在那个阶段，用户也不喜欢；他们没有增长。但创始人们似乎充满能量，让人不可能不喜欢他们。\n第一印象并没有误导人。在那批项目中，我们给Brian Chesky起的绰号是塔斯马尼亚恶魔，因为就像卡通角色一样，他似乎是一场能量旋风。他们三个人都是这样。在YC期间，没有人比Airbnb团队更努力。当你和Airbnb团队谈话时，他们会做笔记。如果你在办公时间向他们提出一个想法，下次你和他们谈话时，他们不仅已经实现了它，还实现了在这个过程中想到的两个新想法。\u0026ldquo;他们可能拥有我们资助过的任何初创公司中最好的态度\u0026rdquo;，我在那批项目中写给Mike Arrington。\n他们现在仍然是这样。2018年夏天，Jessica和我和Brian一起吃了晚饭，就我们三个人。此时公司已经十岁了。他写了一页笔记，记录Airbnb可以做的新事物的想法。\n当我们第一次见到Brian、Joe和Nate时，我们没有意识到Airbnb已经奄奄一息了。在公司工作一年却没有增长后，他们同意给它最后一次机会。他们会试试这个Y Combinator的东西，如果公司仍然没有起飞，他们就放弃。\n任何正常人都会已经放弃了。他们一直用信用卡为公司提供资金。他们有一个装满了刷爆的信用卡的活页夹。投资者不太看好这个想法。他们在咖啡馆见到的一个投资者在会议中途走了出去。他们以为他是去洗手间，但他再也没有回来。\u0026ldquo;他甚至没有喝完他的冰沙，\u0026ldquo;Brian说。而现在，在2008年末，这是几十年来最严重的衰退。股市自由落体，还要四个月才会触底。\n他们为什么没有放弃？这是一个有用的问题。人，像物质一样，在极端条件下会显现本性。清楚的一点是，他们这样做不仅仅是为了钱。作为一个赚钱计划，这相当糟糕：一年的工作，他们能展示的只是一个装满了刷爆的信用卡的活页夹。那么他们为什么还在为这家初创公司工作？因为他们作为第一批房东的经历。\n当他们第一次在设计大会期间尝试在地板上出租气垫床时，他们所希望的只是赚足够的钱支付那个月的房租。但发生了一些令人惊讶的事情：他们喜欢让第一批三位客人住在他们那里。客人们也很喜欢。他们和客人们这样做都是在某种意义上被迫的，然而他们都有很棒的体验。显然这里有新的东西：对房东来说，是一种新的赚钱方式，就在他们眼皮底下；对客人来说，是一种新的旅行方式，在很多方面比酒店更好。\n这就是Airbnb团队没有放弃的原因。他们知道自己发现了什么。他们看到了未来的一瞥，他们无法放手。\n他们知道一旦人们尝试住在现在所谓的\u0026quot;airbnb\u0026quot;中，他们也会意识到这就是未来。但只有他们尝试了，而他们没有。这就是Y Combinator期间的问题：开始增长。\nAirbnb在YC期间的目标是达到我们称之为拉面盈利的状态，这意味着公司赚足够的钱来支付创始人的生活费用，如果他们靠拉面生活的话。拉面盈利显然不是任何初创公司的最终目标，但这是路上最重要的门槛，因为这是你起飞的点。这是你不再需要投资者许可才能继续存在的点。对Airbnb来说，拉面盈利是一个月4000美元：3500美元房租，500美元食物。他们把这个目标贴在公寓浴室的镜子上。\n在像Airbnb这样的东西中开始增长的方法是专注于市场中最热的子集。如果你能在那里开始增长，它会传播到其他地方。当我问Airbnb团队哪里需求最大时，他们从搜索中知道：纽约市。所以他们专注于纽约。他们亲自去那里拜访房东，帮助他们使他们的房源更有吸引力。一个重要部分是更好的照片。所以Joe和Brian租了一台专业相机，亲自为房东的地方拍照。\n这不仅使房源更好。它还教会了他们关于房东的事情。当他们从第一次纽约之行回来时，我问他们注意到的关于房东的让他们惊讶的事情是什么，他们说最大的惊喜是有多少房东和他们曾经处于同样的境地：他们需要这笔钱来支付房租。记住，这是几十年来最严重的衰退，而且纽约最先受到打击。感到人们需要他们 definitely 增加了Airbnb团队的使命感。\n2009年1月下旬，大约在Y Combinator开始三周后，他们的努力开始显示结果，他们的数字向上攀升。但很难确定这是增长还是只是随机波动。到了2月，很明显这是真正的增长。他们在2月第一周赚取了460美元费用，第二周897美元，第三周1428美元。就是这样：他们起飞了。Brian在2月22日给我发了一封邮件，宣布他们已经拉面盈利，并给出了过去三周的数字。\n\u0026ldquo;我假设你知道你现在为下周设定了什么，\u0026ldquo;我回应道。\nBrian的回复是七个字：\u0026ldquo;我们不会放慢脚步。\u0026rdquo;\n",
    "description": "",
    "tags": ["airbnb","创始人","创业","yc","企业家精神"],
    "categories": [],
    "content": "→ English Version\nAirbnb团队 2020年12月\n为了庆祝Airbnb的IPO并帮助未来的创始人，我认为解释一下Airbnb的特别之处可能会有用。\nAirbnb的特别之处在于他们有多么认真。他们做事从不半途而废，我们在面试中就能感觉到这一点。有时面试完一家初创公司后，我们会不确定该怎么做，需要商量一下。有时我们只会相视而笑。Airbnb的面试就是后者。我们甚至不太喜欢他们的想法。在那个阶段，用户也不喜欢；他们没有增长。但创始人们似乎充满能量，让人不可能不喜欢他们。\n第一印象并没有误导人。在那批项目中，我们给Brian Chesky起的绰号是塔斯马尼亚恶魔，因为就像卡通角色一样，他似乎是一场能量旋风。他们三个人都是这样。在YC期间，没有人比Airbnb团队更努力。当你和Airbnb团队谈话时，他们会做笔记。如果你在办公时间向他们提出一个想法，下次你和他们谈话时，他们不仅已经实现了它，还实现了在这个过程中想到的两个新想法。\u0026ldquo;他们可能拥有我们资助过的任何初创公司中最好的态度\u0026rdquo;，我在那批项目中写给Mike Arrington。\n他们现在仍然是这样。2018年夏天，Jessica和我和Brian一起吃了晚饭，就我们三个人。此时公司已经十岁了。他写了一页笔记，记录Airbnb可以做的新事物的想法。\n当我们第一次见到Brian、Joe和Nate时，我们没有意识到Airbnb已经奄奄一息了。在公司工作一年却没有增长后，他们同意给它最后一次机会。他们会试试这个Y Combinator的东西，如果公司仍然没有起飞，他们就放弃。\n任何正常人都会已经放弃了。他们一直用信用卡为公司提供资金。他们有一个装满了刷爆的信用卡的活页夹。投资者不太看好这个想法。他们在咖啡馆见到的一个投资者在会议中途走了出去。他们以为他是去洗手间，但他再也没有回来。\u0026ldquo;他甚至没有喝完他的冰沙，\u0026ldquo;Brian说。而现在，在2008年末，这是几十年来最严重的衰退。股市自由落体，还要四个月才会触底。\n他们为什么没有放弃？这是一个有用的问题。人，像物质一样，在极端条件下会显现本性。清楚的一点是，他们这样做不仅仅是为了钱。作为一个赚钱计划，这相当糟糕：一年的工作，他们能展示的只是一个装满了刷爆的信用卡的活页夹。那么他们为什么还在为这家初创公司工作？因为他们作为第一批房东的经历。\n当他们第一次在设计大会期间尝试在地板上出租气垫床时，他们所希望的只是赚足够的钱支付那个月的房租。但发生了一些令人惊讶的事情：他们喜欢让第一批三位客人住在他们那里。客人们也很喜欢。他们和客人们这样做都是在某种意义上被迫的，然而他们都有很棒的体验。显然这里有新的东西：对房东来说，是一种新的赚钱方式，就在他们眼皮底下；对客人来说，是一种新的旅行方式，在很多方面比酒店更好。\n这就是Airbnb团队没有放弃的原因。他们知道自己发现了什么。他们看到了未来的一瞥，他们无法放手。\n他们知道一旦人们尝试住在现在所谓的\u0026quot;airbnb\u0026quot;中，他们也会意识到这就是未来。但只有他们尝试了，而他们没有。这就是Y Combinator期间的问题：开始增长。\nAirbnb在YC期间的目标是达到我们称之为拉面盈利的状态，这意味着公司赚足够的钱来支付创始人的生活费用，如果他们靠拉面生活的话。拉面盈利显然不是任何初创公司的最终目标，但这是路上最重要的门槛，因为这是你起飞的点。这是你不再需要投资者许可才能继续存在的点。对Airbnb来说，拉面盈利是一个月4000美元：3500美元房租，500美元食物。他们把这个目标贴在公寓浴室的镜子上。\n在像Airbnb这样的东西中开始增长的方法是专注于市场中最热的子集。如果你能在那里开始增长，它会传播到其他地方。当我问Airbnb团队哪里需求最大时，他们从搜索中知道：纽约市。所以他们专注于纽约。他们亲自去那里拜访房东，帮助他们使他们的房源更有吸引力。一个重要部分是更好的照片。所以Joe和Brian租了一台专业相机，亲自为房东的地方拍照。\n这不仅使房源更好。它还教会了他们关于房东的事情。当他们从第一次纽约之行回来时，我问他们注意到的关于房东的让他们惊讶的事情是什么，他们说最大的惊喜是有多少房东和他们曾经处于同样的境地：他们需要这笔钱来支付房租。记住，这是几十年来最严重的衰退，而且纽约最先受到打击。感到人们需要他们 definitely 增加了Airbnb团队的使命感。\n2009年1月下旬，大约在Y Combinator开始三周后，他们的努力开始显示结果，他们的数字向上攀升。但很难确定这是增长还是只是随机波动。到了2月，很明显这是真正的增长。他们在2月第一周赚取了460美元费用，第二周897美元，第三周1428美元。就是这样：他们起飞 …"
  },{
    "title": "Alien Truth",
    "url": "/paul_graham/essays_en/alien/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAlien Truth October 2022\nIf there were intelligent beings elsewhere in the universe, they\u0026rsquo;d share certain truths in common with us. The truths of mathematics would be the same, because they\u0026rsquo;re true by definition. Ditto for the truths of physics; the mass of a carbon atom would be the same on their planet. But I think we\u0026rsquo;d share other truths with aliens besides the truths of math and physics, and that it would be worthwhile to think about what these might be.\n",
    "description": "",
    "tags": ["philosophy","truth","intelligence","aliens","ai"],
    "categories": [],
    "content": "→ 中文版本\nAlien Truth October 2022\nIf there were intelligent beings elsewhere in the universe, they\u0026rsquo;d share certain truths in common with us. The truths of mathematics would be the same, because they\u0026rsquo;re true by definition. Ditto for the truths of physics; the mass of a carbon atom would be the same on their planet. But I think we\u0026rsquo;d share other truths with aliens besides the truths of math and physics, and that it would be worthwhile to think about what these might be.\nFor example, I think we\u0026rsquo;d share the principle that a controlled experiment testing some hypothesis entitles us to have proportionally increased belief in it. It seems fairly likely, too, that it would be true for aliens that one can get better at something by practicing. We\u0026rsquo;d probably share Occam\u0026rsquo;s razor. There doesn\u0026rsquo;t seem anything specifically human about any of these ideas.\nWe can only guess, of course. We can\u0026rsquo;t say for sure what forms intelligent life might take. Nor is it my goal here to explore that question, interesting though it is. The point of the idea of alien truth is not that it gives us a way to speculate about what forms intelligent life might take, but that it gives us a threshold, or more precisely a target, for truth. If you\u0026rsquo;re trying to find the most general truths short of those of math or physics, then presumably they\u0026rsquo;ll be those we\u0026rsquo;d share in common with other forms of intelligent life.\nAlien truth will work best as a heuristic if we err on the side of generosity. If an idea might plausibly be relevant to aliens, that\u0026rsquo;s enough. Justice, for example. I wouldn\u0026rsquo;t want to bet that all intelligent beings would understand the concept of justice, but I wouldn\u0026rsquo;t want to bet against it either.\nThe idea of alien truth is related to Erdos\u0026rsquo;s idea of God\u0026rsquo;s book. He used to describe a particularly good proof as being in God\u0026rsquo;s book, the implication being (a) that a sufficiently good proof was more …"
  },{
    "title": "An Alternative Theory of Unions",
    "url": "/paul_graham/essays_en/unions/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAn Alternative Theory of Unions May 2007\nPeople who worry about the increasing gap between rich and poor generally look back on the mid twentieth century as a golden age. In those days we had a large number of high-paying union manufacturing jobs that boosted the median income. I wouldn\u0026rsquo;t quite call the high-paying union job a myth, but I think people who dwell on it are reading too much into it.\n",
    "description": "",
    "tags": ["unions","economics","labor","history","business","startup"],
    "categories": [],
    "content": "→ 中文版本\nAn Alternative Theory of Unions May 2007\nPeople who worry about the increasing gap between rich and poor generally look back on the mid twentieth century as a golden age. In those days we had a large number of high-paying union manufacturing jobs that boosted the median income. I wouldn\u0026rsquo;t quite call the high-paying union job a myth, but I think people who dwell on it are reading too much into it.\nOddly enough, it was working with startups that made me realize where the high-paying union job came from. In a rapidly growing market, you don\u0026rsquo;t worry too much about efficiency. It\u0026rsquo;s more important to grow fast. If there\u0026rsquo;s some mundane problem getting in your way, and there\u0026rsquo;s a simple solution that\u0026rsquo;s somewhat expensive, just take it and get on with more important things. EBay didn\u0026rsquo;t win by paying less for servers than their competitors.\nDifficult though it may be to imagine now, manufacturing was a growth industry in the mid twentieth century. This was an era when small firms making everything from cars to candy were getting consolidated into a new kind of corporation with national reach and huge economies of scale. You had to grow fast or die. Workers were for these companies what servers are for an Internet startup. A reliable supply was more important than low cost.\nIf you looked in the head of a 1950s auto executive, the attitude must have been: sure, give \u0026rsquo;em whatever they ask for, so long as the new model isn\u0026rsquo;t delayed.\nIn other words, those workers were not paid what their work was worth. Circumstances being what they were, companies would have been stupid to insist on paying them so little.\nIf you want a less controversial example of this phenomenon, ask anyone who worked as a consultant building web sites during the Internet Bubble. In the late nineties you could get paid huge sums of money for building the most trivial things. And yet does anyone who was there have any expectation those days will ever …"
  },{
    "title": "An NFT That Saves Lives",
    "url": "/paul_graham/essays_en/nft/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAn NFT That Saves Lives May 2021\nNoora Health, a nonprofit I\u0026rsquo;ve supported for years, just launched a new NFT. It has a dramatic name, Save Thousands of Lives, because that\u0026rsquo;s what the proceeds will do.\nNoora has been saving lives for 7 years. They run programs in hospitals in South Asia to teach new mothers how to take care of their babies once they get home. They\u0026rsquo;re in 165 hospitals now. And because they know the numbers before and after they start at a new hospital, they can measure the impact they have. It is massive. For every 1000 live births, they save 9 babies.\n",
    "description": "",
    "tags": ["NFT","nonprofit","charity","blockchain","social impact","healthcare"],
    "categories": [],
    "content": "→ 中文版本\nAn NFT That Saves Lives May 2021\nNoora Health, a nonprofit I\u0026rsquo;ve supported for years, just launched a new NFT. It has a dramatic name, Save Thousands of Lives, because that\u0026rsquo;s what the proceeds will do.\nNoora has been saving lives for 7 years. They run programs in hospitals in South Asia to teach new mothers how to take care of their babies once they get home. They\u0026rsquo;re in 165 hospitals now. And because they know the numbers before and after they start at a new hospital, they can measure the impact they have. It is massive. For every 1000 live births, they save 9 babies.\nThis number comes from a study of 133,733 families at 28 different hospitals that Noora conducted in collaboration with the Better Birth team at Ariadne Labs, a joint center for health systems innovation at Brigham and Women\u0026rsquo;s Hospital and Harvard T.H. Chan School of Public Health.\nNoora is so effective that even if you measure their costs in the most conservative way, by dividing their entire budget by the number of lives saved, the cost of saving a life is the lowest I\u0026rsquo;ve seen. $1,235.\nFor this NFT, they\u0026rsquo;re going to issue a public report tracking how this specific tranche of money is spent, and estimating the number of lives saved as a result.\nNFTs are a new territory, and this way of using them is especially new, but I\u0026rsquo;m excited about its potential. And I\u0026rsquo;m excited to see what happens with this particular auction, because unlike an NFT representing something that has already happened, this NFT gets better as the price gets higher.\nThe reserve price was about $2.5 million, because that\u0026rsquo;s what it takes for the name to be accurate: that\u0026rsquo;s what it costs to save 2000 lives. But the higher the price of this NFT goes, the more lives will be saved. What a sentence to be able to write.\n"
  },{
    "title": "ANSI Common Lisp 简介",
    "url": "/paul_graham/essays_zh/acl1txtt1748944359/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nANSI Common Lisp 简介 ANSI Common Lisp 简介\n（这是Paul Graham的《ANSI Common Lisp》一书的第一章。版权1995年，Prentice-Hall。）\n介绍 John McCarthy和他的学生于1958年开始在第一个Lisp实现上工作。除了Fortran之外，Lisp是仍在使用的最古老的语言。[1] 更值得注意的是，它仍然处于编程语言技术的前沿。了解Lisp的程序员会告诉你，这种语言有某种独特之处。\nLisp的独特之处部分在于它被设计为可进化的。你可以使用Lisp来定义新的Lisp操作符。当新的抽象变得流行时（例如面向对象编程），事实证明在Lisp中实现它们总是很容易的。像DNA这样的语言不会过时。\n新工具 为什么学习Lisp？因为它让你做其他语言做不到的事情。如果你只是想写一个返回小于n的数字之和的函数，在Lisp和C中看起来会非常相似：\n; Lisp (defun sum (n) (let ((s 0)) (dotimes (i n s) (incf s i)))) /* C */ int sum(int n){ int i, s = 0; for(i = 0; i \u0026lt; n; i++) s += i; return(s); } 如果你只需要做这样的简单事情，你使用哪种语言并不重要。假设相反，你想写一个函数，它接受一个数字n，并返回一个将n加到其参数上的函数：\n; Lisp (defun addn (n) #\u0026#39;(lambda (x) (+ x n))) addn在C中是什么样的？你根本写不出来。\n你可能会想知道，什么时候有人会想做这样的事情？编程语言教会你不要渴望它们不能提供的东西。你必须用一种语言思考才能用其编写程序，很难渴望你无法描述的东西。当我开始编写程序时——使用Basic——我不想念递归，因为我不知道有这样的东西。我用Basic思考。我只能构想迭代算法，为什么要想念递归？\n如果你不怀念词法闭包（这就是前面例子中制作的东西），暂时相信Lisp程序员一直使用它们。很难找到任何长度的Common Lisp程序不利用闭包。到第112页，你自己也会使用它们。而闭包只是我们在其他语言中找不到的抽象之一。\n",
    "description": "",
    "tags": ["lisp","编程","ansi common lisp","介绍","技术"],
    "categories": [],
    "content": "→ English Version\nANSI Common Lisp 简介 ANSI Common Lisp 简介\n（这是Paul Graham的《ANSI Common Lisp》一书的第一章。版权1995年，Prentice-Hall。）\n介绍 John McCarthy和他的学生于1958年开始在第一个Lisp实现上工作。除了Fortran之外，Lisp是仍在使用的最古老的语言。[1] 更值得注意的是，它仍然处于编程语言技术的前沿。了解Lisp的程序员会告诉你，这种语言有某种独特之处。\nLisp的独特之处部分在于它被设计为可进化的。你可以使用Lisp来定义新的Lisp操作符。当新的抽象变得流行时（例如面向对象编程），事实证明在Lisp中实现它们总是很容易的。像DNA这样的语言不会过时。\n新工具 为什么学习Lisp？因为它让你做其他语言做不到的事情。如果你只是想写一个返回小于n的数字之和的函数，在Lisp和C中看起来会非常相似：\n; Lisp (defun sum (n) (let ((s 0)) (dotimes (i n s) (incf s i)))) /* C */ int sum(int n){ int i, s = 0; for(i = 0; i \u0026lt; n; i++) s += i; return(s); } 如果你只需要做这样的简单事情，你使用哪种语言并不重要。假设相反，你想写一个函数，它接受一个数字n，并返回一个将n加到其参数上的函数：\n; Lisp (defun addn (n) #\u0026#39;(lambda (x) (+ x n))) addn在C中是什么样的？你根本写不出来。\n你可能会想知道，什么时候有人会想做这样的事情？编程语言教会你不要渴望它们不能提供的东西。你必须用一种语言思考才能用其编写程序，很难渴望你无法描述的东西。当我开始编写程序时——使用Basic——我不想念递归，因为我不知道有这样的东西。我用Basic思考。我只能构想迭代算法，为什么要想念递归？\n如果你不怀念词法闭包（这就是前面例子中制作的东西），暂时相信Lisp程序员一直使用它们。很难找到任何长度的Common Lisp程序不利用闭包。到第112页，你自己也会使用它们。而闭包只是我们在其他语言中找不到的抽象之一。\nLisp的另一个独特特征，可能更有价值，是Lisp程序被表达为Lisp数据结构。这意味着你可以编写编写程序的程序。人们真的想这样做吗？是的——它们被称为宏，再次，经验丰富的程序员一直使用它们。到第173页，你将能够编写自己的宏。\n有了宏、闭包和运行时类型，Lisp超越了面向对象编程。如果你理解了前面的句子，你可能不应该读这本书。你必须很好地了解Lisp才能明白为什么这是真的。但这不仅仅是文字。这是一个重要的一点，它的证明在第17章的代码中非常明确地展示出来。\n第2-13章将逐步介绍你理解第17章代码所需的所有概念。你努力的回报将是一个明确的回报：你会感觉在C++中编程就像经验丰富的C++程序员在Basic中编程一样令人窒息。\n如果我们考虑这种感觉来自哪里，可能会更令人鼓舞。对于习惯C++的人来说，Basic令人窒息，因为经验丰富的C++程序员知道不可能在Basic中表达的技术。同样，学习Lisp教给你的不仅仅是新语言——它教你新的、更强大的思考程序的方式。\n新技术 如前一节所解释的，Lisp给你提供了其他语言没有提供的工具。但故事远不止这些。分开来看，Lisp带来的新东西——自动内存管理、显式类型、闭包等等——每一个都使编程更加容易。结合起来，它们形成了一个临界质量，使新的编程方式成为可能。\nLisp被设计为可扩展的：它让你自己定义新的操作符。这是可能的，因为Lisp语言是由与你自己的程序相同的函数和宏组成的。所以扩展Lisp并不比在其中编写程序更困难。事实上，扩展语言如此容易（如此有用），以至于它成为标准实践。当你将程序向语言方向编写时，你将语言向程序方向构建。你既自底向上，又自顶向下地工作。\n几乎任何程序都可以从语言被定制以满足其需求中受益，但程序越复杂，自底向上编程变得越有价值。自底向上程序可以写成一系列层，每一层都作为上一层的一种编程语言。TeX是最早以这种方式编写的程序之一。\n你可以在任何语言中自底向上编写程序，但Lisp是这种风格最自然的载体。自底向上编程自然地导致可扩展软件。如果你将自底向上编程的原则贯彻到你程序的最上层，那么那一层就成为用户的编程语言。\n因为可扩展性的概念在Lisp中根深蒂固，它成为编写可扩展软件的理想语言。1980年代最成功的三个程序提供Lisp作为扩展语言：Gnu Emacs、Autocad和Interleaf。\n自底向上工作也是获得可重用软件的最佳方式。编写可重用软件的本质是将一般与 …"
  },{
    "title": "Apple's Mistake",
    "url": "/paul_graham/essays_en/apple/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nApple\u0026rsquo;s Mistake Want to start a startup? Get funded by Y Combinator. November 2009\nI don\u0026rsquo;t think Apple realizes how badly the App Store approval process is broken. Or rather, I don\u0026rsquo;t think they realize how much it matters that it\u0026rsquo;s broken.\nThe way Apple runs the App Store has harmed their reputation with programmers more than anything else they\u0026rsquo;ve ever done. Their reputation with programmers used to be great. It used to be the most common complaint you heard about Apple was that their fans admired them too uncritically. The App Store has changed that. Now a lot of programmers have started to see Apple as evil.\n",
    "description": "",
    "tags": ["apple","app store","developers","iphone","software"],
    "categories": [],
    "content": "→ 中文版本\nApple\u0026rsquo;s Mistake Want to start a startup? Get funded by Y Combinator. November 2009\nI don\u0026rsquo;t think Apple realizes how badly the App Store approval process is broken. Or rather, I don\u0026rsquo;t think they realize how much it matters that it\u0026rsquo;s broken.\nThe way Apple runs the App Store has harmed their reputation with programmers more than anything else they\u0026rsquo;ve ever done. Their reputation with programmers used to be great. It used to be the most common complaint you heard about Apple was that their fans admired them too uncritically. The App Store has changed that. Now a lot of programmers have started to see Apple as evil.\nHow much of the goodwill Apple once had with programmers have they lost over the App Store? A third? Half? And that\u0026rsquo;s just so far. The App Store is an ongoing karma leak.\nHow did Apple get into this mess? Their fundamental problem is that they don\u0026rsquo;t understand software.\nThey treat iPhone apps the way they treat the music they sell through iTunes. Apple is the channel; they own the user; if you want to reach users, you do it on their terms. The record labels agreed, reluctantly. But this model doesn\u0026rsquo;t work for software. It doesn\u0026rsquo;t work for an intermediary to own the user. The software business learned that in the early 1980s, when companies like VisiCorp showed that although the words \u0026ldquo;software\u0026rdquo; and \u0026ldquo;publisher\u0026rdquo; fit together, the underlying concepts don\u0026rsquo;t. Software isn\u0026rsquo;t like music or books. It\u0026rsquo;s too complicated for a third party to act as an intermediary between developer and user. And yet that\u0026rsquo;s what Apple is trying to be with the App Store: a software publisher. And a particularly overreaching one at that, with fussy tastes and a rigidly enforced house style.\nIf software publishing didn\u0026rsquo;t work in 1980, it works even less now that software development has evolved from a small number of big releases to a constant stream of small ones. But Apple …"
  },{
    "title": "Are Software Patents Evil?",
    "url": "/paul_graham/essays_en/softwarepatents/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nAre Software Patents Evil? March 2006\n(This essay is derived from a talk at Google.)\nA few weeks ago I found to my surprise that I\u0026rsquo;d been granted four patents. This was all the more surprising because I\u0026rsquo;d only applied for three. The patents aren\u0026rsquo;t mine, of course. They were assigned to Viaweb, and became Yahoo\u0026rsquo;s when they bought us. But the news set me thinking about the question of software patents generally.\n",
    "description": "",
    "tags": ["patents","software","innovation","intellectual_property","business","legal"],
    "categories": [],
    "content": "→ 中文版本\nAre Software Patents Evil? March 2006\n(This essay is derived from a talk at Google.)\nA few weeks ago I found to my surprise that I\u0026rsquo;d been granted four patents. This was all the more surprising because I\u0026rsquo;d only applied for three. The patents aren\u0026rsquo;t mine, of course. They were assigned to Viaweb, and became Yahoo\u0026rsquo;s when they bought us. But the news set me thinking about the question of software patents generally.\nPatents are a hard problem. I\u0026rsquo;ve had to advise most of the startups we\u0026rsquo;ve funded about them, and despite years of experience I\u0026rsquo;m still not always sure I\u0026rsquo;m giving the right advice.\nOne thing I do feel pretty certain of is that if you\u0026rsquo;re against software patents, you\u0026rsquo;re against patents in general. Gradually our machines consist more and more of software. Things that used to be done with levers and cams and gears are now done with loops and trees and closures. There\u0026rsquo;s nothing special about physical embodiments of control systems that should make them patentable, and the software equivalent not.\nUnfortunately, patent law is inconsistent on this point. Patent law in most countries says that algorithms aren\u0026rsquo;t patentable. This rule is left over from a time when \u0026ldquo;algorithm\u0026rdquo; meant something like the Sieve of Eratosthenes. In 1800, people could not see as readily as we can that a great many patents on mechanical objects were really patents on the algorithms they embodied.\nPatent lawyers still have to pretend that\u0026rsquo;s what they\u0026rsquo;re doing when they patent algorithms. You must not use the word \u0026ldquo;algorithm\u0026rdquo; in the title of a patent application, just as you must not use the word \u0026ldquo;essays\u0026rdquo; in the title of a book. If you want to patent an algorithm, you have to frame it as a computer system executing that algorithm. Then it\u0026rsquo;s mechanical; phew. The default euphemism for algorithm is \u0026ldquo;system and method.\u0026rdquo; Try a patent search for that phrase …"
  },{
    "title": "Be Good",
    "url": "/paul_graham/essays_en/good/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBe Good April 2008\n(This essay is derived from a talk at the 2008 Startup School.)\nAbout a month after we started Y Combinator we came up with the phrase that became our motto: Make something people want. We\u0026rsquo;ve learned a lot since then, but if I were choosing now that\u0026rsquo;s still the one I\u0026rsquo;d pick.\nAnother thing we tell founders is not to worry too much about the business model, at least at first. Not because making money is unimportant, but because it\u0026rsquo;s so much easier than building something great.\n",
    "description": "",
    "tags": ["benevolence","charity","morale","users","compass"],
    "categories": [],
    "content": "→ 中文版本\nBe Good April 2008\n(This essay is derived from a talk at the 2008 Startup School.)\nAbout a month after we started Y Combinator we came up with the phrase that became our motto: Make something people want. We\u0026rsquo;ve learned a lot since then, but if I were choosing now that\u0026rsquo;s still the one I\u0026rsquo;d pick.\nAnother thing we tell founders is not to worry too much about the business model, at least at first. Not because making money is unimportant, but because it\u0026rsquo;s so much easier than building something great.\nA couple weeks ago I realized that if you put those two ideas together, you get something surprising. Make something people want. Don\u0026rsquo;t worry too much about making money. What you\u0026rsquo;ve got is a description of a charity.\nWhen you get an unexpected result like this, it could either be a bug or a new discovery. Either businesses aren\u0026rsquo;t supposed to be like charities, and we\u0026rsquo;ve proven by reductio ad absurdum that one or both of the principles we began with is false. Or we have a new idea.\nI suspect it\u0026rsquo;s the latter, because as soon as this thought occurred to me, a whole bunch of other things fell into place.\nExamples For example, Craigslist. It\u0026rsquo;s not a charity, but they run it like one. And they\u0026rsquo;re astoundingly successful. When you scan down the list of most popular web sites, the number of employees at Craigslist looks like a misprint. Their revenues aren\u0026rsquo;t as high as they could be, but most startups would be happy to trade places with them.\nIn Patrick O\u0026rsquo;Brian\u0026rsquo;s novels, his captains always try to get upwind of their opponents. If you\u0026rsquo;re upwind, you decide when and if to engage the other ship. Craigslist is effectively upwind of enormous revenues. They\u0026rsquo;d face some challenges if they wanted to make more, but not the sort you face when you\u0026rsquo;re tacking upwind, trying to force a crappy product on ambivalent users by spending ten times as much on sales as on development. [1] …"
  },{
    "title": "Beating the Averages",
    "url": "/paul_graham/essays_en/avg/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBeating the Averages Want to start a startup? Get funded by Y Combinator. April 2001, rev. April 2003\n(This article is derived from a talk given at the 2001 Franz Developer Symposium.)\nIn the summer of 1995, my friend Robert Morris and I started a startup called Viaweb. Our plan was to write software that would let end users build online stores. What was novel about this software, at the time, was that it ran on our server, using ordinary Web pages as the interface.\n",
    "description": "",
    "tags": ["lisp","programming","startups","technology","software"],
    "categories": [],
    "content": "→ 中文版本\nBeating the Averages Want to start a startup? Get funded by Y Combinator. April 2001, rev. April 2003\n(This article is derived from a talk given at the 2001 Franz Developer Symposium.)\nIn the summer of 1995, my friend Robert Morris and I started a startup called Viaweb. Our plan was to write software that would let end users build online stores. What was novel about this software, at the time, was that it ran on our server, using ordinary Web pages as the interface.\nA lot of people could have been having this idea at the same time, of course, but as far as I know, Viaweb was the first Web-based application. It seemed such a novel idea to us that we named the company after it: Viaweb, because our software worked via the Web, instead of running on your desktop computer.\nAnother unusual thing about this software was that it was written primarily in a programming language called Lisp. It was one of the first big end-user applications to be written in Lisp, which up till then had been used mostly in universities and research labs.\nThe Secret Weapon Eric Raymond has written an essay called \u0026ldquo;How to Become a Hacker,\u0026rdquo; and in it, among other things, he tells would-be hackers what languages they should learn. He suggests starting with Python and Java, because they are easy to learn. The serious hacker will also want to learn C, in order to hack Unix, and Perl for system administration and cgi scripts. Finally, the truly serious hacker should consider learning Lisp:\nLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\nThis is the same argument you tend to hear for learning Latin. It won\u0026rsquo;t get you a job, except perhaps as a classics professor, but it will improve your mind, and make you a better writer in languages you do want to use, like English.\nBut wait a minute. This …"
  },{
    "title": "Before the Startup",
    "url": "/paul_graham/essays_en/before/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBefore the Startup Want to start a startup? Get funded by Y Combinator.\nOctober 2014\n(This essay is derived from a guest lecture in Sam Altman\u0026rsquo;s startup class at Stanford. It\u0026rsquo;s intended for college students, but much of it is applicable to potential founders at other ages.)\nOne of the advantages of having kids is that when you have to give advice, you can ask yourself \u0026ldquo;what would I tell my own kids?\u0026rdquo; My kids are little, but I can imagine what I\u0026rsquo;d tell them about startups if they were in college, and that\u0026rsquo;s what I\u0026rsquo;m going to tell you.\n",
    "description": "",
    "tags": ["startup","founders","college","advice","preparation","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版本\nBefore the Startup Want to start a startup? Get funded by Y Combinator.\nOctober 2014\n(This essay is derived from a guest lecture in Sam Altman\u0026rsquo;s startup class at Stanford. It\u0026rsquo;s intended for college students, but much of it is applicable to potential founders at other ages.)\nOne of the advantages of having kids is that when you have to give advice, you can ask yourself \u0026ldquo;what would I tell my own kids?\u0026rdquo; My kids are little, but I can imagine what I\u0026rsquo;d tell them about startups if they were in college, and that\u0026rsquo;s what I\u0026rsquo;m going to tell you.\nStartups are very counterintuitive. I\u0026rsquo;m not sure why. Maybe it\u0026rsquo;s just because knowledge about them hasn\u0026rsquo;t permeated our culture yet. But whatever the reason, starting a startup is a task where you can\u0026rsquo;t always trust your instincts.\nIt\u0026rsquo;s like skiing in that way. When you first try skiing and you want to slow down, your instinct is to lean back. But if you lean back on skis you fly down the hill out of control. So part of learning to ski is learning to suppress that impulse. Eventually you get new habits, but at first it takes a conscious effort. At first there\u0026rsquo;s a list of things you\u0026rsquo;re trying to remember as you start down the hill.\nStartups are as unnatural as skiing, so there\u0026rsquo;s a similar list for startups. Here I\u0026rsquo;m going to give you the first part of it — the things to remember if you want to prepare yourself to start a startup.\nCounterintuitive The first item on it is the fact I already mentioned: that startups are so weird that if you trust your instincts, you\u0026rsquo;ll make a lot of mistakes. If you know nothing more than this, you may at least pause before making them.\nWhen I was running Y Combinator I used to joke that our function was to tell founders things they would ignore. It\u0026rsquo;s really true. Batch after batch, the YC partners warn founders about mistakes they\u0026rsquo;re about to make, and the founders ignore them, and then …"
  },{
    "title": "Being a Noob",
    "url": "/paul_graham/essays_en/noob/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBeing a Noob January 2020\nWhen I was young, I thought old people had everything figured out. Now that I\u0026rsquo;m old, I know this isn\u0026rsquo;t true.\nI constantly feel like a noob. It seems like I\u0026rsquo;m always talking to some startup working in a new field I know nothing about, or reading a book about a topic I don\u0026rsquo;t understand well enough, or visiting some new country where I don\u0026rsquo;t know how things work.\n",
    "description": "",
    "tags": ["learning","growth","beginner","knowledge","humility","personal development"],
    "categories": [],
    "content": "→ 中文版本\nBeing a Noob January 2020\nWhen I was young, I thought old people had everything figured out. Now that I\u0026rsquo;m old, I know this isn\u0026rsquo;t true.\nI constantly feel like a noob. It seems like I\u0026rsquo;m always talking to some startup working in a new field I know nothing about, or reading a book about a topic I don\u0026rsquo;t understand well enough, or visiting some new country where I don\u0026rsquo;t know how things work.\nIt\u0026rsquo;s not pleasant to feel like a noob. And the word \u0026ldquo;noob\u0026rdquo; is certainly not a compliment. And yet today I realized something encouraging about being a noob: the more of a noob you are locally, the less of a noob you are globally.\nFor example, if you stay in your home country, you\u0026rsquo;ll feel less of a noob than if you move to Farawavia, where everything works differently. And yet you\u0026rsquo;ll know more if you move. So the feeling of being a noob is inversely correlated with actual ignorance.\nBut if the feeling of being a noob is good for us, why do we dislike it? What evolutionary purpose could such an aversion serve?\nI think the answer is that there are two sources of feeling like a noob: being stupid, and doing something novel. Our dislike of feeling like a noob is our brain telling us \u0026ldquo;Come on, come on, figure this out.\u0026rdquo; Which was the right thing to be thinking for most of human history. The life of hunter-gatherers was complex, but it didn\u0026rsquo;t change as much as life does now. They didn\u0026rsquo;t suddenly have to figure out what to do about cryptocurrency. So it made sense to be biased toward competence at existing problems over the discovery of new ones. It made sense for humans to dislike the feeling of being a noob, just as, in a world where food was scarce, it made sense for them to dislike the feeling of being hungry.\nNow that too much food is more of a problem than too little, our dislike of feeling hungry leads us astray. And I think our dislike of feeling like a noob does too.\nThough it feels unpleasant, …"
  },{
    "title": "Being Popular",
    "url": "/paul_graham/essays_en/popular/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nBeing Popular May 2001\n(This article was written as a kind of business plan for a new language. So it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.)\nA friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time, that programming languages don\u0026rsquo;t become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. At least, that was what had happened to the language he had designed.\n",
    "description": "",
    "tags": ["programming languages","popularity","hacker culture","language design","Lisp"],
    "categories": [],
    "content": "→ Chinese Version\nBeing Popular May 2001\n(This article was written as a kind of business plan for a new language. So it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.)\nA friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time, that programming languages don\u0026rsquo;t become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. At least, that was what had happened to the language he had designed.\nWhat does make a language popular? Do popular languages deserve their popularity? Is it worth trying to define a good programming language? How would you do it?\nI think the answers to these questions can be found by looking at hackers, and learning what they want. Programming languages are for hackers, and a programming language is good as a programming language (rather than, say, an exercise in denotational semantics or compiler design) if and only if hackers like it.\n1 The Mechanics of Popularity It\u0026rsquo;s true, certainly, that most people don\u0026rsquo;t choose programming languages simply based on their merits. Most programmers are told what language to use by someone else. And yet I think the effect of such external factors on the popularity of programming languages is not as great as it\u0026rsquo;s sometimes thought to be. I think a bigger problem is that a hacker\u0026rsquo;s idea of a good programming language is not the same as most language designers'.\nBetween the two, the hacker\u0026rsquo;s opinion is the one that matters. Programming languages are not theorems. They\u0026rsquo;re tools, designed for people, and they have to be designed to suit human strengths and weaknesses as much as shoes have to be designed for human feet. If a shoe pinches when you put it on, it\u0026rsquo;s a bad shoe, however elegant it may be as a piece of …"
  },{
    "title": "Better Bayesian Filtering",
    "url": "/paul_graham/essays_en/better/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBetter Bayesian Filtering January 2003\n(This article was given as a talk at the 2003 Spam Conference. It describes the work I\u0026rsquo;ve done to improve the performance of the algorithm described in A Plan for Spam, and what I plan to do in the future.)\nThe first discovery I\u0026rsquo;d like to present here is an algorithm for lazy evaluation of research papers. Just write whatever you want and don\u0026rsquo;t cite any previous work, and indignant readers will send you references to all the papers you should have cited. I discovered this algorithm after \u0026ldquo;A Plan for Spam\u0026rdquo; [1] was on Slashdot.\n",
    "description": "",
    "tags": ["spam","filtering","bayesian","algorithm","email","technology"],
    "categories": [],
    "content": "→ 中文版本\nBetter Bayesian Filtering January 2003\n(This article was given as a talk at the 2003 Spam Conference. It describes the work I\u0026rsquo;ve done to improve the performance of the algorithm described in A Plan for Spam, and what I plan to do in the future.)\nThe first discovery I\u0026rsquo;d like to present here is an algorithm for lazy evaluation of research papers. Just write whatever you want and don\u0026rsquo;t cite any previous work, and indignant readers will send you references to all the papers you should have cited. I discovered this algorithm after \u0026ldquo;A Plan for Spam\u0026rdquo; [1] was on Slashdot.\nSpam filtering is a subset of text classification, which is a well established field, but the first papers about Bayesian spam filtering per se seem to have been two given at the same conference in 1998, one by Pantel and Lin [2], and another by a group from Microsoft Research [3].\nWhen I heard about this work I was a bit surprised. If people had been onto Bayesian filtering four years ago, why wasn\u0026rsquo;t everyone using it? When I read the papers I found out why. Pantel and Lin\u0026rsquo;s filter was the more effective of the two, but it only caught 92% of spam, with 1.16% false positives.\nWhen I tried writing a Bayesian spam filter, it caught 99.5% of spam with less than .03% false positives [4]. It\u0026rsquo;s always alarming when two people trying the same experiment get widely divergent results. It\u0026rsquo;s especially alarming here because those two sets of numbers might yield opposite conclusions. Different users have different requirements, but I think for many people a filtering rate of 92% with 1.16% false positives means that filtering is not an acceptable solution, whereas 99.5% with less than .03% false positives means that it is.\nSo why did we get such different numbers? I haven\u0026rsquo;t tried to reproduce Pantel and Lin\u0026rsquo;s results, but from reading the paper I see five things that probably account for the difference.\nOne is simply that they trained their …"
  },{
    "title": "Beyond Smart",
    "url": "/paul_graham/essays_en/smart/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBeyond Smart October 2021\nIf you asked people what was special about Einstein, most would say that he was really smart. Even the ones who tried to give you a more sophisticated-sounding answer would probably think this first. Till a few years ago I would have given the same answer myself. But that wasn\u0026rsquo;t what was special about Einstein. What was special about him was that he had important new ideas. Being very smart was a necessary precondition for having those ideas, but the two are not identical.\n",
    "description": "",
    "tags": ["intelligence","new_ideas","creativity","independent_mindedness","writing","innovation"],
    "categories": [],
    "content": "→ 中文版本\nBeyond Smart October 2021\nIf you asked people what was special about Einstein, most would say that he was really smart. Even the ones who tried to give you a more sophisticated-sounding answer would probably think this first. Till a few years ago I would have given the same answer myself. But that wasn\u0026rsquo;t what was special about Einstein. What was special about him was that he had important new ideas. Being very smart was a necessary precondition for having those ideas, but the two are not identical.\nIt may seem a hair-splitting distinction to point out that intelligence and its consequences are not identical, but it isn\u0026rsquo;t. There\u0026rsquo;s a big gap between them. Anyone who\u0026rsquo;s spent time around universities and research labs knows how big. There are a lot of genuinely smart people who don\u0026rsquo;t achieve very much.\nI grew up thinking that being smart was the thing most to be desired. Perhaps you did too. But I bet it\u0026rsquo;s not what you really want. Imagine you had a choice between being really smart but discovering nothing new, and being less smart but discovering lots of new ideas. Surely you\u0026rsquo;d take the latter. I would. The choice makes me uncomfortable, but when you see the two options laid out explicitly like that, it\u0026rsquo;s obvious which is better.\nThe reason the choice makes me uncomfortable is that being smart still feels like the thing that matters, even though I know intellectually that it isn\u0026rsquo;t. I spent so many years thinking it was. The circumstances of childhood are a perfect storm for fostering this illusion. Intelligence is much easier to measure than the value of new ideas, and you\u0026rsquo;re constantly being judged by it. Whereas even the kids who will ultimately discover new things aren\u0026rsquo;t usually discovering them yet. For kids that way inclined, intelligence is the only game in town.\nThere are more subtle reasons too, which persist long into adulthood. Intelligence wins in conversation, and thus becomes the …"
  },{
    "title": "Black Swan Farming",
    "url": "/paul_graham/essays_en/swan/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBlack Swan Farming September 2012\nI\u0026rsquo;ve done several types of work over the years but I don\u0026rsquo;t know another as counterintuitive as startup investing.\nThe two most important things to understand about startup investing, as a business, are (1) that effectively all the returns are concentrated in a few big winners, and (2) that the best ideas look initially like bad ideas.\nThe first rule I knew intellectually, but didn\u0026rsquo;t really grasp till it happened to us. The total value of the companies we\u0026rsquo;ve funded is around 10 billion, give or take a few. But just two companies, Dropbox and Airbnb, account for about three quarters of it.\n",
    "description": "",
    "tags": ["startup investing","risk","returns","YC","black swan"],
    "categories": [],
    "content": "→ 中文版本\nBlack Swan Farming September 2012\nI\u0026rsquo;ve done several types of work over the years but I don\u0026rsquo;t know another as counterintuitive as startup investing.\nThe two most important things to understand about startup investing, as a business, are (1) that effectively all the returns are concentrated in a few big winners, and (2) that the best ideas look initially like bad ideas.\nThe first rule I knew intellectually, but didn\u0026rsquo;t really grasp till it happened to us. The total value of the companies we\u0026rsquo;ve funded is around 10 billion, give or take a few. But just two companies, Dropbox and Airbnb, account for about three quarters of it.\nIn startups, the big winners are big to a degree that violates our expectations about variation. I don\u0026rsquo;t know whether these expectations are innate or learned, but whatever the cause, we are just not prepared for the 1000x variation in outcomes that one finds in startup investing.\nThat yields all sorts of strange consequences. For example, in purely financial terms, there is probably at most one company in each YC batch that will have a significant effect on our returns, and the rest are just a cost of doing business. [1] I haven\u0026rsquo;t really assimilated that fact, partly because it\u0026rsquo;s so counterintuitive, and partly because we\u0026rsquo;re not doing this just for financial reasons; YC would be a pretty lonely place if we only had one company per batch. And yet it\u0026rsquo;s true.\nTo succeed in a domain that violates your intuitions, you need to be able to turn them off the way a pilot does when flying through clouds. [2] You need to do what you know intellectually to be right, even though it feels wrong.\nIt\u0026rsquo;s a constant battle for us. It\u0026rsquo;s hard to make ourselves take enough risks. When you interview a startup and think \u0026ldquo;they seem likely to succeed,\u0026rdquo; it\u0026rsquo;s hard not to fund them. And yet, financially at least, there is only one kind of success: they\u0026rsquo;re either going to be one of …"
  },{
    "title": "Bradley's Ghost",
    "url": "/paul_graham/essays_en/polls/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nBradley\u0026rsquo;s Ghost November 2004\nA lot of people are writing now about why Kerry lost. Here I want to examine a more specific question: why were the exit polls so wrong?\nIn Ohio, which Kerry ultimately lost 49-51, exit polls gave him a 52-48 victory. And this wasn\u0026rsquo;t just random error. In every swing state they overestimated the Kerry vote. In Florida, which Bush ultimately won 52-47, exit polls predicted a dead heat.\n",
    "description": "",
    "tags": ["politics","polls","society","psychology","behavior"],
    "categories": [],
    "content": "→ 中文版本\nBradley\u0026rsquo;s Ghost November 2004\nA lot of people are writing now about why Kerry lost. Here I want to examine a more specific question: why were the exit polls so wrong?\nIn Ohio, which Kerry ultimately lost 49-51, exit polls gave him a 52-48 victory. And this wasn\u0026rsquo;t just random error. In every swing state they overestimated the Kerry vote. In Florida, which Bush ultimately won 52-47, exit polls predicted a dead heat.\n(These are not early numbers. They\u0026rsquo;re from about midnight eastern time, long after polls closed in Ohio and Florida. And yet by the next afternoon the exit poll numbers online corresponded to the returns. The only way I can imagine this happening is if those in charge of the exit polls cooked the books after seeing the actual returns. But that\u0026rsquo;s another issue.)\nWhat happened? The source of the problem may be a variant of the Bradley Effect. This term was invented after Tom Bradley, the black mayor of Los Angeles, lost an election for governor of California despite a comfortable lead in the polls. Apparently voters were afraid to say they planned to vote against him, lest their motives be (perhaps correctly) suspected.It seems likely that something similar happened in exit polls this year. In theory, exit polls ought to be very accurate. You\u0026rsquo;re not asking people what they would do. You\u0026rsquo;re asking what they just did.\nHow can you get errors asking that? Because some people don\u0026rsquo;t respond. To get a truly random sample, pollsters ask, say, every 20th person leaving the polling place who they voted for. But not everyone wants to answer. And the pollsters can\u0026rsquo;t simply ignore those who won\u0026rsquo;t, or their sample isn\u0026rsquo;t random anymore. So what they do, apparently, is note down the age and race and sex of the person, and guess from that who they voted for.This works so long as there is no correlation between who people vote for and whether they\u0026rsquo;re willing to talk about it. But this year there may have …"
  },{
    "title": "Change Your Name",
    "url": "/paul_graham/essays_en/name/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nChange Your Name August 2015\nIf you have a US startup called X and you don\u0026rsquo;t have x.com, you should probably change your name.\nThe reason is not just that people can\u0026rsquo;t find you. For companies with mobile apps, especially, having the right domain name is not as critical as it used to be for getting users. The problem with not having the .com of your name is that it signals weakness. Unless you\u0026rsquo;re so big that your reputation precedes you, a marginal domain suggests you\u0026rsquo;re a marginal company. Whereas (as Stripe shows) having x.com signals strength even if it has no relation to what you do.\n",
    "description": "",
    "tags": ["naming","startup","domain","company","branding"],
    "categories": [],
    "content": "→ 中文版本\nChange Your Name August 2015\nIf you have a US startup called X and you don\u0026rsquo;t have x.com, you should probably change your name.\nThe reason is not just that people can\u0026rsquo;t find you. For companies with mobile apps, especially, having the right domain name is not as critical as it used to be for getting users. The problem with not having the .com of your name is that it signals weakness. Unless you\u0026rsquo;re so big that your reputation precedes you, a marginal domain suggests you\u0026rsquo;re a marginal company. Whereas (as Stripe shows) having x.com signals strength even if it has no relation to what you do.\nEven good founders can be in denial about this. Their denial derives from two very powerful forces: identity, and lack of imagination.\nX is what we are, founders think. There\u0026rsquo;s no other name as good. Both of which are false.\nYou can fix the first by stepping back from the problem. Imagine you\u0026rsquo;d called your company something else. If you had, surely you\u0026rsquo;d be just as attached to that name as you are to your current one. The idea of switching to your current name would seem repellent. [1]\nThere\u0026rsquo;s nothing intrinsically great about your current name. Nearly all your attachment to it comes from it being attached to you. [2]\nThe way to neutralize the second source of denial, your inability to think of other potential names, is to acknowledge that you\u0026rsquo;re bad at naming. Naming is a completely separate skill from those you need to be a good founder. You can be a great startup founder but hopeless at thinking of names for your company.\nOnce you acknowledge that, you stop believing there is nothing else you could be called. There are lots of other potential names that are as good or better; you just can\u0026rsquo;t think of them.\nHow do you find them? One answer is the default way to solve problems you\u0026rsquo;re bad at: find someone else who can think of names. But with company names there is another possible approach. It turns out almost …"
  },{
    "title": "Cities and Ambition",
    "url": "/paul_graham/essays_en/cities/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nCities and Ambition May 2008\nGreat cities attract ambitious people. You can sense it when you walk around one. In a hundred subtle ways, the city sends you a message: you could do more; you should try harder.\nThe surprising thing is how different these messages can be. New York tells you, above all: you should make more money. There are other messages too, of course. You should be hipper. You should be better looking. But the clearest message is that you should be richer.\n",
    "description": "",
    "tags": ["cities","ambition","environment","success","location","culture","analysis"],
    "categories": [],
    "content": "→ 中文版本\nCities and Ambition May 2008\nGreat cities attract ambitious people. You can sense it when you walk around one. In a hundred subtle ways, the city sends you a message: you could do more; you should try harder.\nThe surprising thing is how different these messages can be. New York tells you, above all: you should make more money. There are other messages too, of course. You should be hipper. You should be better looking. But the clearest message is that you should be richer.\nWhat I like about Boston (or rather Cambridge) is that the message there is: you should be smarter. You really should get around to reading all those books you\u0026rsquo;ve been meaning to.\nWhen you ask what message a city sends, you sometimes get surprising answers. As much as they respect brains in Silicon Valley, the message the Valley sends is: you should be more powerful.\nThat\u0026rsquo;s not quite the same message New York sends. Power matters in New York too of course, but New York is pretty impressed by a billion dollars even if you merely inherited it. In Silicon Valley no one would care except a few real estate agents. What matters in Silicon Valley is how much effect you have on the world. The reason people there care about Larry and Sergey is not their wealth but the fact that they control Google, which affects practically everyone.\n_____ How much does it matter what message a city sends? Empirically, the answer seems to be: a lot. You might think that if you had enough strength of mind to do great things, you\u0026rsquo;d be able to transcend your environment. Where you live should make at most a couple percent difference. But if you look at the historical evidence, it seems to matter more than that. Most people who did great things were clumped together in a few places where that sort of thing was done at the time.\nYou can see how powerful cities are from something I wrote about earlier: the case of the Milanese Leonardo. Practically every fifteenth century Italian painter you\u0026rsquo;ve …"
  },{
    "title": "Conformism",
    "url": "/paul_graham/essays_en/conformism/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nConformism The Four Quadrants of Conformism July 2020\nOne of the most revealing ways to classify people is by the degree and aggressiveness of their conformism. Imagine a Cartesian coordinate system whose horizontal axis runs from conventional-minded on the left to independent-minded on the right, and whose vertical axis runs from passive at the bottom to aggressive at the top. The resulting four quadrants define four types of people. Starting in the upper left and going counter-clockwise: aggressively conventional-minded, passively conventional-minded, passively independent-minded, and aggressively independent-minded.\n",
    "description": "",
    "tags": ["conformism","independence","personality","society","behavior","thinking","analysis"],
    "categories": [],
    "content": "→ 中文版本\nConformism The Four Quadrants of Conformism July 2020\nOne of the most revealing ways to classify people is by the degree and aggressiveness of their conformism. Imagine a Cartesian coordinate system whose horizontal axis runs from conventional-minded on the left to independent-minded on the right, and whose vertical axis runs from passive at the bottom to aggressive at the top. The resulting four quadrants define four types of people. Starting in the upper left and going counter-clockwise: aggressively conventional-minded, passively conventional-minded, passively independent-minded, and aggressively independent-minded.\nI think that you\u0026rsquo;ll find all four types in most societies, and that which quadrant people fall into depends more on their own personality than the beliefs prevalent in their society. [1]\nYoung children offer some of the best evidence for both points. Anyone who\u0026rsquo;s been to primary school has seen the four types, and the fact that school rules are so arbitrary is strong evidence that which quadrant people fall into depends more on them than the rules.\nThe kids in the upper left quadrant, the aggressively conventional-minded ones, are the tattletales. They believe not only that rules must be obeyed, but that those who disobey them must be punished.\nThe kids in the lower left quadrant, the passively conventional-minded, are the sheep. They\u0026rsquo;re careful to obey the rules, but when other kids break them, their impulse is to worry that those kids will be punished, not to ensure that they will.\nThe kids in the lower right quadrant, the passively independent-minded, are the dreamy ones. They don\u0026rsquo;t care much about rules and probably aren\u0026rsquo;t 100% sure what the rules even are.\nAnd the kids in the upper right quadrant, the aggressively independent-minded, are the naughty ones. When they see a rule, their first impulse is to question it. Merely being told what to do makes them inclined to do the opposite.\nWhen measuring conformism, …"
  },{
    "title": "Control",
    "url": "/paul_graham/essays_en/control/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nControl Founder Control December 2010\nSomeone we funded is talking to VCs now, and asked me how common it was for a startup\u0026rsquo;s founders to retain control of the board after a series A round. He said VCs told him this almost never happened.\nTen years ago that was true. In the past, founders rarely kept control of the board through a series A. The traditional series A board consisted of two founders, two VCs, and one independent member. More recently the recipe is often one founder, one VC, and one independent. In either case the founders lose their majority.\n",
    "description": "",
    "tags": ["control","founders","VC","board","funding","Y-Combinator","governance"],
    "categories": [],
    "content": "→ 中文版本\nControl Founder Control December 2010\nSomeone we funded is talking to VCs now, and asked me how common it was for a startup\u0026rsquo;s founders to retain control of the board after a series A round. He said VCs told him this almost never happened.\nTen years ago that was true. In the past, founders rarely kept control of the board through a series A. The traditional series A board consisted of two founders, two VCs, and one independent member. More recently the recipe is often one founder, one VC, and one independent. In either case the founders lose their majority.\nBut not always. Mark Zuckerberg kept control of Facebook\u0026rsquo;s board through the series A and still has it today. Mark Pincus has kept control of Zynga\u0026rsquo;s too. But are these just outliers? How common is it for founders to keep control after an A round? I\u0026rsquo;d heard of several cases among the companies we\u0026rsquo;ve funded, but I wasn\u0026rsquo;t sure how many there were, so I emailed the ycfounders list.\nThe replies surprised me. In a dozen companies we\u0026rsquo;ve funded, the founders still had a majority of the board seats after the series A round.\nI feel like we\u0026rsquo;re at a tipping point here. A lot of VCs still act as if founders retaining board control after a series A is unheard-of. A lot of them try to make you feel bad if you even ask—as if you\u0026rsquo;re a noob or a control freak for wanting such a thing. But the founders I heard from aren\u0026rsquo;t noobs or control freaks. Or if they are, they are, like Mark Zuckerberg, the kind of noobs and control freaks VCs should be trying to fund more of.\nFounders retaining control after a series A is clearly heard-of. And barring financial catastrophe, I think in the coming year it will become the norm.\nControl of a company is a more complicated matter than simply outvoting other parties in board meetings. Investors usually get vetos over certain big decisions, like selling the company, regardless of how many board seats they have. And board votes are …"
  },{
    "title": "Copy What You Like",
    "url": "/paul_graham/essays_en/copy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nCopy What You Like July 2006\nWhen I was in high school I spent a lot of time imitating bad writers. What we studied in English classes was mostly fiction, so I assumed that was the highest form of writing. Mistake number one.\nThe stories that seemed to be most admired were ones in which people suffered in complicated ways. Anything funny or gripping was ipso facto suspect, unless it was old enough to be hard to understand, like Shakespeare or Chaucer. Mistake number two.\n",
    "description": "",
    "tags": ["copy","imitation","learning","writing","art","philosophy","taste","originality"],
    "categories": [],
    "content": "→ 中文版本\nCopy What You Like July 2006\nWhen I was in high school I spent a lot of time imitating bad writers. What we studied in English classes was mostly fiction, so I assumed that was the highest form of writing. Mistake number one.\nThe stories that seemed to be most admired were ones in which people suffered in complicated ways. Anything funny or gripping was ipso facto suspect, unless it was old enough to be hard to understand, like Shakespeare or Chaucer. Mistake number two.\nThe ideal medium seemed the short story, which I\u0026rsquo;ve since learned had quite a brief life, roughly coincident with the peak of magazine publishing. But since their size made them perfect for use in high school classes, we read a lot of them, which gave us the impression the short story was flourishing. Mistake number three.\nAnd because they were so short, nothing really had to happen; you could just show a randomly truncated slice of life, and that was considered advanced. Mistake number four.\nThe result was that I wrote a lot of stories in which nothing happened except that someone was unhappy in a way that seemed deep.\nFor most of college I was a philosophy major. I was very impressed by the papers published in philosophy journals. They were so beautifully typeset, and their tone was just captivating—alternately casual and buffer-overflowingly technical. A fellow would be walking along a street and suddenly modality qua modality would spring upon him. I didn\u0026rsquo;t ever quite understand these papers, but I figured I\u0026rsquo;d get around to that later, when I had time to reread them more closely. In the meantime I tried my best to imitate them. This was, I can now see, a doomed undertaking, because they weren\u0026rsquo;t really saying anything. No philosopher ever refuted another, for example, because no one said anything definite enough to refute. Needless to say, my imitations didn\u0026rsquo;t say anything either.\nIn grad school I was still wasting time imitating the wrong things. There was …"
  },{
    "title": "Coronavirus and Credibility",
    "url": "/paul_graham/essays_en/cred/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nCoronavirus and Credibility April 2020\nI recently saw a video of TV journalists and politicians confidently saying that the coronavirus would be no worse than the flu. What struck me about it was not just how mistaken they seemed, but how daring. How could they feel safe saying such things?\nThe answer, I realized, is that they didn\u0026rsquo;t think they could get caught. They didn\u0026rsquo;t realize there was any danger in making false predictions. These people constantly make false predictions, and get away with it, because the things they make predictions about either have mushy enough outcomes that they can bluster their way out of trouble, or happen so far in the future that few remember what they said.\n",
    "description": "",
    "tags": ["credibility","coronavirus","predictions","media","politics","expertise","trust","analysis"],
    "categories": [],
    "content": "→ Chinese Version\nCoronavirus and Credibility April 2020\nI recently saw a video of TV journalists and politicians confidently saying that the coronavirus would be no worse than the flu. What struck me about it was not just how mistaken they seemed, but how daring. How could they feel safe saying such things?\nThe answer, I realized, is that they didn\u0026rsquo;t think they could get caught. They didn\u0026rsquo;t realize there was any danger in making false predictions. These people constantly make false predictions, and get away with it, because the things they make predictions about either have mushy enough outcomes that they can bluster their way out of trouble, or happen so far in the future that few remember what they said.\nAn epidemic is different. It falsifies your predictions rapidly and unequivocally.\nBut epidemics are rare enough that these people clearly didn\u0026rsquo;t realize this was even a possibility. Instead they just continued to use their ordinary m.o., which, as the epidemic has made clear, is to talk confidently about things they don\u0026rsquo;t understand.\nAn event like this is thus a uniquely powerful way of taking people\u0026rsquo;s measure. As Warren Buffett said, \u0026ldquo;It\u0026rsquo;s only when the tide goes out that you learn who\u0026rsquo;s been swimming naked.\u0026rdquo; And the tide has just gone out like never before.\nNow that we\u0026rsquo;ve seen the results, let\u0026rsquo;s remember what we saw, because this is the most accurate test of credibility we\u0026rsquo;re ever likely to have. I hope.\n"
  },{
    "title": "Corpdev",
    "url": "/paul_graham/essays_en/corpdev/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nCorpdev Don\u0026rsquo;t Talk to Corp Dev January 2015\nCorporate Development, aka corp dev, is the group within companies that buys other companies. If you\u0026rsquo;re talking to someone from corp dev, that\u0026rsquo;s why, whether you realize it yet or not.\nIt\u0026rsquo;s usually a mistake to talk to corp dev unless (a) you want to sell your company right now and (b) you\u0026rsquo;re sufficiently likely to get an offer at an acceptable price. In practice that means startups should only talk to corp dev when they\u0026rsquo;re either doing really well or really badly. If you\u0026rsquo;re doing really badly, meaning the company is about to die, you may as well talk to them, because you have nothing to lose. And if you\u0026rsquo;re doing really well, you can safely talk to them, because you both know the price will have to be high, and if they show the slightest sign of wasting your time, you\u0026rsquo;ll be confident enough to tell them to get lost.\n",
    "description": "",
    "tags": ["corpdev","M\u0026A","acquisition","startups","corporate","strategy","negotiation","warning"],
    "categories": [],
    "content": "→ Chinese Version\nCorpdev Don\u0026rsquo;t Talk to Corp Dev January 2015\nCorporate Development, aka corp dev, is the group within companies that buys other companies. If you\u0026rsquo;re talking to someone from corp dev, that\u0026rsquo;s why, whether you realize it yet or not.\nIt\u0026rsquo;s usually a mistake to talk to corp dev unless (a) you want to sell your company right now and (b) you\u0026rsquo;re sufficiently likely to get an offer at an acceptable price. In practice that means startups should only talk to corp dev when they\u0026rsquo;re either doing really well or really badly. If you\u0026rsquo;re doing really badly, meaning the company is about to die, you may as well talk to them, because you have nothing to lose. And if you\u0026rsquo;re doing really well, you can safely talk to them, because you both know the price will have to be high, and if they show the slightest sign of wasting your time, you\u0026rsquo;ll be confident enough to tell them to get lost.\nThe danger is to companies in the middle. Particularly to young companies that are growing fast, but haven\u0026rsquo;t been doing it for long enough to have grown big yet. It\u0026rsquo;s usually a mistake for a promising company less than a year old even to talk to corp dev.\nBut it\u0026rsquo;s a mistake founders constantly make. When someone from corp dev wants to meet, the founders tell themselves they should at least find out what they want. Besides, they don\u0026rsquo;t want to offend Big Company by refusing to meet.\nWell, I\u0026rsquo;ll tell you what they want. They want to talk about buying you. That\u0026rsquo;s what the title \u0026ldquo;corp dev\u0026rdquo; means. So before agreeing to meet with someone from corp dev, ask yourselves, \u0026ldquo;Do we want to sell the company right now?\u0026rdquo; And if the answer is no, tell them \u0026ldquo;Sorry, but we\u0026rsquo;re focusing on growing the company.\u0026rdquo; They won\u0026rsquo;t be offended. And certainly the founders of Big Company won\u0026rsquo;t be offended. If anything they\u0026rsquo;ll think more highly of you. You\u0026rsquo;ll remind them of …"
  },{
    "title": "Could VC be a Casualty of the Recession?",
    "url": "/paul_graham/essays_en/divergence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nCould VC be a Casualty of the Recession? December 2008\n(I originally wrote this at the request of a company producing a report about entrepreneurship. Unfortunately after reading it they decided it was too controversial to include.)\nVC funding will probably dry up somewhat during the present recession, like it usually does in bad times. But this time the result may be different. This time the number of new startups may not decrease. And that could be dangerous for VCs.\n",
    "description": "",
    "tags": ["startups","vc","venture capital","funding","entrepreneurship","economics","recession","y combinator"],
    "categories": [],
    "content": "→ Chinese Version\nCould VC be a Casualty of the Recession? December 2008\n(I originally wrote this at the request of a company producing a report about entrepreneurship. Unfortunately after reading it they decided it was too controversial to include.)\nVC funding will probably dry up somewhat during the present recession, like it usually does in bad times. But this time the result may be different. This time the number of new startups may not decrease. And that could be dangerous for VCs.\nWhen VC funding dried up after the Internet Bubble, startups dried up too. There were not a lot of new startups being founded in 2003. But startups aren\u0026rsquo;t tied to VC the way they were 10 years ago. It\u0026rsquo;s now possible for VCs and startups to diverge. And if they do, they may not reconverge once the economy gets better.\nThe reason startups no longer depend so much on VCs is one that everyone in the startup business knows by now: it has gotten much cheaper to start a startup. There are four main reasons: Moore\u0026rsquo;s law has made hardware cheap; open source has made software free; the web has made marketing and distribution free; and more powerful programming languages mean development teams can be smaller. These changes have pushed the cost of starting a startup down into the noise. In a lot of startups—probably most startups funded by Y Combinator—the biggest expense is simply the founders\u0026rsquo; living expenses. We\u0026rsquo;ve had startups that were profitable on revenues of $3000 a month.\n$3000 is insignificant as revenues go. Why should anyone care about a startup making $3000 a month? Because, although insignificant as revenue, this amount of money can change a startup\u0026rsquo;s funding situation completely.\nSomeone running a startup is always calculating in the back of their mind how much \u0026ldquo;runway\u0026rdquo; they have—how long they have till the money in the bank runs out and they either have to be profitable, raise more money, or go out of business. Once you cross the …"
  },{
    "title": "Crazy New Ideas",
    "url": "/paul_graham/essays_en/newideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nCrazy New Ideas May 2021\nThere\u0026rsquo;s one kind of opinion I\u0026rsquo;d be very afraid to express publicly. If someone I knew to be both a domain expert and a reasonable person proposed an idea that sounded preposterous, I\u0026rsquo;d be very reluctant to say \u0026ldquo;That will never work.\u0026rdquo;\nAnyone who has studied the history of ideas, and especially the history of science, knows that\u0026rsquo;s how big things start. Someone proposes an idea that sounds crazy, most people dismiss it, then it gradually takes over the world.\n",
    "description": "",
    "tags": ["ideas","innovation","paradigms","creativity","thinking","experts"],
    "categories": [],
    "content": "→ 中文版本\nCrazy New Ideas May 2021\nThere\u0026rsquo;s one kind of opinion I\u0026rsquo;d be very afraid to express publicly. If someone I knew to be both a domain expert and a reasonable person proposed an idea that sounded preposterous, I\u0026rsquo;d be very reluctant to say \u0026ldquo;That will never work.\u0026rdquo;\nAnyone who has studied the history of ideas, and especially the history of science, knows that\u0026rsquo;s how big things start. Someone proposes an idea that sounds crazy, most people dismiss it, then it gradually takes over the world.\nMost implausible-sounding ideas are in fact bad and could be safely dismissed. But not when they\u0026rsquo;re proposed by reasonable domain experts. If the person proposing the idea is reasonable, then they know how implausible it sounds. And yet they\u0026rsquo;re proposing it anyway. That suggests they know something you don\u0026rsquo;t. And if they have deep domain expertise, that\u0026rsquo;s probably the source of it. [1]\nSuch ideas are not merely unsafe to dismiss, but disproportionately likely to be interesting. When the average person proposes an implausible-sounding idea, its implausibility is evidence of their incompetence. But when a reasonable domain expert does it, the situation is reversed. There\u0026rsquo;s something like an efficient market here: on average the ideas that seem craziest will, if correct, have the biggest effect. So if you can eliminate the theory that the person proposing an implausible-sounding idea is incompetent, its implausibility switches from evidence that it\u0026rsquo;s boring to evidence that it\u0026rsquo;s exciting. [2]\nSuch ideas are not guaranteed to work. But they don\u0026rsquo;t have to be. They just have to be sufficiently good bets — to have sufficiently high expected value. And I think on average they do. I think if you bet on the entire set of implausible-sounding ideas proposed by reasonable domain experts, you\u0026rsquo;d end up net ahead.\nThe reason is that everyone is too conservative. The word \u0026ldquo;paradigm\u0026rdquo; is overused, …"
  },{
    "title": "Default Alive or Default Dead?",
    "url": "/paul_graham/essays_en/aord/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nDefault Alive or Default Dead? October 2015\nWhen I talk to a startup that\u0026rsquo;s been operating for more than 8 or 9 months, the first thing I want to know is almost always the same. Assuming their expenses remain constant and their revenue growth is what it has been over the last several months, do they make it to profitability on the money they have left? Or to put it more dramatically, by default do they live or die?\n",
    "description": "",
    "tags": ["startup","survival","growth","hiring","fundraising"],
    "categories": [],
    "content": "→ 中文版本\nDefault Alive or Default Dead? October 2015\nWhen I talk to a startup that\u0026rsquo;s been operating for more than 8 or 9 months, the first thing I want to know is almost always the same. Assuming their expenses remain constant and their revenue growth is what it has been over the last several months, do they make it to profitability on the money they have left? Or to put it more dramatically, by default do they live or die?\nThe startling thing is how often the founders themselves don\u0026rsquo;t know. Half the founders I talk to don\u0026rsquo;t know whether they\u0026rsquo;re default alive or default dead.\nIf you\u0026rsquo;re among that number, Trevor Blackwell has made a handy calculator you can use to find out.\nThe reason I want to know first whether a startup is default alive or default dead is that the rest of the conversation depends on the answer. If the company is default alive, we can talk about ambitious new things they could do. If it\u0026rsquo;s default dead, we probably need to talk about how to save it. We know the current trajectory ends badly. How can they get off that trajectory?\nWhy do so few founders know whether they\u0026rsquo;re default alive or default dead? Mainly, I think, because they\u0026rsquo;re not used to asking that. It\u0026rsquo;s not a question that makes sense to ask early on, any more than it makes sense to ask a 3 year old how he plans to support himself. But as the company grows older, the question switches from meaningless to critical. That kind of switch often takes people by surprise.\nI propose the following solution: instead of starting to ask too late whether you\u0026rsquo;re default alive or default dead, start asking too early. It\u0026rsquo;s hard to say precisely when the question switches polarity. But it\u0026rsquo;s probably not that dangerous to start worrying too early that you\u0026rsquo;re default dead, whereas it\u0026rsquo;s very dangerous to start worrying too late.\nThe reason is a phenomenon I wrote about earlier: the fatal pinch. The fatal pinch is default dead + …"
  },{
    "title": "Design and Research",
    "url": "/paul_graham/essays_en/desres/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nDesign and Research January 2003\n(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)\nVisitors to this country are often surprised to find that Americans like to begin a conversation by asking \u0026ldquo;what do you do?\u0026rdquo; I\u0026rsquo;ve never liked this question. I\u0026rsquo;ve rarely had a neat answer to it. But I think I have finally solved the problem. Now, when someone asks me what I do, I look them straight in the eye and say \u0026ldquo;I\u0026rsquo;m designing a new dialect of Lisp.\u0026rdquo; I recommend this answer to anyone who doesn\u0026rsquo;t like being asked what they do. The conversation will turn immediately to other topics.\n",
    "description": "",
    "tags": ["design","research","programming languages","lisp","user experience","software development","creativity"],
    "categories": [],
    "content": "→ Chinese Version\nDesign and Research January 2003\n(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)\nVisitors to this country are often surprised to find that Americans like to begin a conversation by asking \u0026ldquo;what do you do?\u0026rdquo; I\u0026rsquo;ve never liked this question. I\u0026rsquo;ve rarely had a neat answer to it. But I think I have finally solved the problem. Now, when someone asks me what I do, I look them straight in the eye and say \u0026ldquo;I\u0026rsquo;m designing a new dialect of Lisp.\u0026rdquo; I recommend this answer to anyone who doesn\u0026rsquo;t like being asked what they do. The conversation will turn immediately to other topics.\nI don\u0026rsquo;t consider myself to be doing research on programming languages. I\u0026rsquo;m just designing one, in the same way that someone might design a building or a chair or a new typeface. I\u0026rsquo;m not trying to discover anything new. I just want to make a language that will be good to program in. In some ways, this assumption makes life a lot easier.\nThe difference between design and research seems to be a question of new versus good. Design doesn\u0026rsquo;t have to be new, but it has to be good. Research doesn\u0026rsquo;t have to be good, but it has to be new. I think these two paths converge at the top: the best design surpasses its predecessors by using new ideas, and the best research solves problems that are not only new, but actually worth solving. So ultimately we\u0026rsquo;re aiming for the same destination, just approaching it from different directions.\nWhat I\u0026rsquo;m going to talk about today is what your target looks like from the back. What do you do differently when you treat programming languages as a design problem instead of a research topic?\nThe biggest difference is that you focus more on the user. Design begins by asking, who is this for and what do they need from it? A good architect, for example, does not begin by creating a design that he then imposes on the users, but by studying the intended …"
  },{
    "title": "Distraction",
    "url": "/paul_graham/essays_en/distraction/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nDistraction May 2008\nDisconnecting Distraction Note: The strategy described at the end of this essay didn\u0026rsquo;t work. It would work for a while, and then I\u0026rsquo;d gradually find myself using the Internet on my work computer. I\u0026rsquo;m trying other strategies now, but I think this time I\u0026rsquo;ll wait till I\u0026rsquo;m sure they work before writing about them.\nProcrastination feeds on distractions. Most people find it uncomfortable just to sit and do nothing; you avoid work by doing something else.\n",
    "description": "",
    "tags": ["distraction","procrastination","internet","productivity","focus","technology","psychology","essay"],
    "categories": [],
    "content": "→ Chinese Version\nDistraction May 2008\nDisconnecting Distraction Note: The strategy described at the end of this essay didn\u0026rsquo;t work. It would work for a while, and then I\u0026rsquo;d gradually find myself using the Internet on my work computer. I\u0026rsquo;m trying other strategies now, but I think this time I\u0026rsquo;ll wait till I\u0026rsquo;m sure they work before writing about them.\nProcrastination feeds on distractions. Most people find it uncomfortable just to sit and do nothing; you avoid work by doing something else.\nSo one way to beat procrastination is to starve it of distractions. But that\u0026rsquo;s not as straightforward as it sounds, because there are people working hard to distract you. Distraction is not a static obstacle that you avoid like you might avoid a rock in the road. Distraction seeks you out.\nChesterfield described dirt as matter out of place. Distracting is, similarly, desirable at the wrong time. And technology is continually being refined to produce more and more desirable things. Which means that as we learn to avoid one class of distractions, new ones constantly appear, like drug-resistant bacteria.\nTelevision, for example, has after 50 years of refinement reached the point where it\u0026rsquo;s like visual crack. I realized when I was 13 that TV was addictive, so I stopped watching it. But I read recently that the average American watches 4 hours of TV a day. A quarter of their life.\nTV is in decline now, but only because people have found even more addictive ways of wasting time. And what\u0026rsquo;s especially dangerous is that many happen at your computer. This is no accident. An ever larger percentage of office workers sit in front of computers connected to the Internet, and distractions always evolve toward the procrastinators.\nI remember when computers were, for me at least, exclusively for work. I might occasionally dial up a server to get mail or ftp files, but most of the time I was offline. All I could do was write and program. Now I feel as if …"
  },{
    "title": "Do Things that Don't Scale",
    "url": "/paul_graham/essays_en/ds/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nDo Things that Don\u0026rsquo;t Scale Do Things that Don\u0026rsquo;t Scale Want to start a startup? Get funded by Y Combinator.\nJuly 2013\nOne of the most common types of advice we give at Y Combinator is to do things that don\u0026rsquo;t scale. A lot of would-be founders believe that startups either take off or don\u0026rsquo;t. You build something, make it available, and if you\u0026rsquo;ve made a better mousetrap, people beat a path to your door as promised. Or they don\u0026rsquo;t, in which case the market must not exist. [1]\n",
    "description": "",
    "tags": ["startups","entrepreneurship","scaling","user acquisition","y combinator","growth","advice","strategy"],
    "categories": [],
    "content": "→ Chinese Version\nDo Things that Don\u0026rsquo;t Scale Do Things that Don\u0026rsquo;t Scale Want to start a startup? Get funded by Y Combinator.\nJuly 2013\nOne of the most common types of advice we give at Y Combinator is to do things that don\u0026rsquo;t scale. A lot of would-be founders believe that startups either take off or don\u0026rsquo;t. You build something, make it available, and if you\u0026rsquo;ve made a better mousetrap, people beat a path to your door as promised. Or they don\u0026rsquo;t, in which case the market must not exist. [1]\nActually startups take off because the founders make them take off. There may be a handful that just grew by themselves, but usually it takes some sort of push to get them going. A good metaphor would be the cranks that car engines had before they got electric starters. Once the engine was going, it would keep going, but there was a separate and laborious process to get it going.\nRecruit The most common unscalable thing founders have to do at the start is to recruit users manually. Nearly all startups have to. You can\u0026rsquo;t wait for users to come to you. You have to go out and get them.\nStripe is one of the most successful startups we\u0026rsquo;ve funded, and the problem they solved was an urgent one. If anyone could have sat back and waited for users, it was Stripe. But in fact they\u0026rsquo;re famous within YC for aggressive early user acquisition.\nStartups building things for other startups have a big pool of potential users in the other companies we\u0026rsquo;ve funded, and none took better advantage of it than Stripe. At YC we use the term \u0026ldquo;Collison installation\u0026rdquo; for the technique they invented. More diffident founders ask \u0026ldquo;Will you try our beta?\u0026rdquo; and if the answer is yes, they say \u0026ldquo;Great, we\u0026rsquo;ll send you a link.\u0026rdquo; But the Collison brothers weren\u0026rsquo;t going to wait. When anyone agreed to try Stripe they\u0026rsquo;d say \u0026ldquo;Right then, give me your laptop\u0026rdquo; and set them up on the spot.\nThere are two reasons …"
  },{
    "title": "Donate Unrestricted",
    "url": "/paul_graham/essays_en/donate/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nDonate Unrestricted March 2021\nThe secret curse of the nonprofit world is restricted donations. If you haven\u0026rsquo;t been involved with nonprofits, you may never have heard this phrase before. But if you have been, it probably made you wince.\nRestricted donations mean donations where the donor limits what can be done with the money. This is common with big donations, perhaps the default. And yet it\u0026rsquo;s usually a bad idea. Usually the way the donor wants the money spent is not the way the nonprofit would have chosen. Otherwise there would have been no need to restrict the donation. But who has a better understanding of where money needs to be spent, the nonprofit or the donor?\n",
    "description": "",
    "tags": ["donation","philanthropy","nonprofits","charity","giving","restricted donations","unrestricted donations"],
    "categories": [],
    "content": "→ Chinese Version\nDonate Unrestricted March 2021\nThe secret curse of the nonprofit world is restricted donations. If you haven\u0026rsquo;t been involved with nonprofits, you may never have heard this phrase before. But if you have been, it probably made you wince.\nRestricted donations mean donations where the donor limits what can be done with the money. This is common with big donations, perhaps the default. And yet it\u0026rsquo;s usually a bad idea. Usually the way the donor wants the money spent is not the way the nonprofit would have chosen. Otherwise there would have been no need to restrict the donation. But who has a better understanding of where money needs to be spent, the nonprofit or the donor?\nIf a nonprofit doesn\u0026rsquo;t understand better than its donors where money needs to be spent, then it\u0026rsquo;s incompetent and you shouldn\u0026rsquo;t be donating to it at all.\nWhich means a restricted donation is inherently suboptimal. It\u0026rsquo;s either a donation to a bad nonprofit, or a donation for the wrong things.\nThere are a couple exceptions to this principle. One is when the nonprofit is an umbrella organization. It\u0026rsquo;s reasonable to make a restricted donation to a university, for example, because a university is only nominally a single nonprofit. Another exception is when the donor actually does know as much as the nonprofit about where money needs to be spent. The Gates Foundation, for example, has specific goals and often makes restricted donations to individual nonprofits to accomplish them. But unless you\u0026rsquo;re a domain expert yourself or donating to an umbrella organization, your donation would do more good if it were unrestricted.\nIf restricted donations do less good than unrestricted ones, why do donors so often make them? Partly because doing good isn\u0026rsquo;t donors\u0026rsquo; only motive. They often have other motives as well — to make a mark, or to generate good publicity [1], or to comply with regulations or corporate policies. Many donors may simply …"
  },{
    "title": "Early",
    "url": "/paul_graham/essays_en/early/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nEarly October 2020\nOne of the biggest things holding people back from doing great work is the fear of making something lame. And this fear is not an irrational one. Many great projects go through a stage early on where they don\u0026rsquo;t seem very impressive, even to their creators. You have to push through this stage to reach the great work that lies beyond. But many people don\u0026rsquo;t. Most people don\u0026rsquo;t even reach the stage of making something they\u0026rsquo;re embarrassed by, let alone continue past it. They\u0026rsquo;re too frightened even to start.\n",
    "description": "",
    "tags": ["early work","creativity","judgment","skepticism","silicon valley"],
    "categories": [],
    "content": "→ 中文版本\nEarly October 2020\nOne of the biggest things holding people back from doing great work is the fear of making something lame. And this fear is not an irrational one. Many great projects go through a stage early on where they don\u0026rsquo;t seem very impressive, even to their creators. You have to push through this stage to reach the great work that lies beyond. But many people don\u0026rsquo;t. Most people don\u0026rsquo;t even reach the stage of making something they\u0026rsquo;re embarrassed by, let alone continue past it. They\u0026rsquo;re too frightened even to start.\nImagine if we could turn off the fear of making something lame. Imagine how much more we\u0026rsquo;d do.\nIs there any hope of turning it off? I think so. I think the habits at work here are not very deeply rooted.\nMaking new things is itself a new thing for us as a species. It has always happened, but till the last few centuries it happened so slowly as to be invisible to individual humans. And since we didn\u0026rsquo;t need customs for dealing with new ideas, we didn\u0026rsquo;t develop any.\nWe just don\u0026rsquo;t have enough experience with early versions of ambitious projects to know how to respond to them. We judge them as we would judge more finished work, or less ambitious projects. We don\u0026rsquo;t realize they\u0026rsquo;re a special case.\nOr at least, most of us don\u0026rsquo;t. One reason I\u0026rsquo;m confident we can do better is that it\u0026rsquo;s already starting to happen. There are already a few places that are living in the future in this respect. Silicon Valley is one of them: an unknown person working on a strange-sounding idea won\u0026rsquo;t automatically be dismissed the way they would back home. In Silicon Valley, people have learned how dangerous that is.\nThe right way to deal with new ideas is to treat them as a challenge to your imagination — not just to have lower standards, but to switch polarity entirely, from listing the reasons an idea won\u0026rsquo;t work to trying to think of ways it could. That\u0026rsquo;s what I do when I …"
  },{
    "title": "Earnest",
    "url": "/paul_graham/essays_en/earnest/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nEarnest December 2020\nJessica and I have certain words that have special significance when we\u0026rsquo;re talking about startups. The highest compliment we can pay to founders is to describe them as \u0026ldquo;earnest.\u0026rdquo; This is not by itself a guarantee of success. You could be earnest but incapable. But when founders are both formidable (another of our words) and earnest, they\u0026rsquo;re as close to unstoppable as you get.\nEarnestness sounds like a boring, even Victorian virtue. It seems a bit of an anachronism that people in Silicon Valley would care about it. Why does this matter so much?\n",
    "description": "",
    "tags": ["earnestness","motivation","founders","startups","silicon valley","nerds","character","success"],
    "categories": [],
    "content": "→ Chinese Version\nEarnest December 2020\nJessica and I have certain words that have special significance when we\u0026rsquo;re talking about startups. The highest compliment we can pay to founders is to describe them as \u0026ldquo;earnest.\u0026rdquo; This is not by itself a guarantee of success. You could be earnest but incapable. But when founders are both formidable (another of our words) and earnest, they\u0026rsquo;re as close to unstoppable as you get.\nEarnestness sounds like a boring, even Victorian virtue. It seems a bit of an anachronism that people in Silicon Valley would care about it. Why does this matter so much?\nWhen you call someone earnest, you\u0026rsquo;re making a statement about their motives. It means both that they\u0026rsquo;re doing something for the right reasons, and that they\u0026rsquo;re trying as hard as they can. If we imagine motives as vectors, it means both the direction and the magnitude are right. Though these are of course related: when people are doing something for the right reasons, they try harder. [1]\nThe reason motives matter so much in Silicon Valley is that so many people there have the wrong ones. Starting a successful startup makes you rich and famous. So a lot of the people trying to start them are doing it for those reasons. Instead of what? Instead of interest in the problem for its own sake. That is the root of earnestness. [2]\nIt\u0026rsquo;s also the hallmark of a nerd. Indeed, when people describe themselves as \u0026ldquo;x nerds,\u0026rdquo; what they mean is that they\u0026rsquo;re interested in x for its own sake, and not because it\u0026rsquo;s cool to be interested in x, or because of what they can get from it. They\u0026rsquo;re saying they care so much about x that they\u0026rsquo;re willing to sacrifice seeming cool for its sake.\nA genuine interest in something is a very powerful motivator — for some people, the most powerful motivator of all. [3] Which is why it\u0026rsquo;s what Jessica and I look for in founders. But as well as being a source of strength, it\u0026rsquo;s also a …"
  },{
    "title": "Economic Inequality",
    "url": "/paul_graham/essays_en/ineq/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nEconomic Inequality January 2016\nSince the 1970s, economic inequality in the US has increased dramatically. And in particular, the rich have gotten a lot richer. Nearly everyone who writes about the topic says that economic inequality should be decreased.\nI\u0026rsquo;m interested in this question because I was one of the founders of a company called Y Combinator that helps people start startups. Almost by definition, if a startup succeeds, its founders become rich. Which means by helping startup founders I\u0026rsquo;ve been helping to increase economic inequality. If economic inequality should be decreased, I shouldn\u0026rsquo;t be helping founders. No one should be.\n",
    "description": "",
    "tags": ["economic inequality","wealth","poverty","startups","economics","social mobility","technology"],
    "categories": [],
    "content": "→ Chinese Version\nEconomic Inequality January 2016\nSince the 1970s, economic inequality in the US has increased dramatically. And in particular, the rich have gotten a lot richer. Nearly everyone who writes about the topic says that economic inequality should be decreased.\nI\u0026rsquo;m interested in this question because I was one of the founders of a company called Y Combinator that helps people start startups. Almost by definition, if a startup succeeds, its founders become rich. Which means by helping startup founders I\u0026rsquo;ve been helping to increase economic inequality. If economic inequality should be decreased, I shouldn\u0026rsquo;t be helping founders. No one should be.\nBut that doesn\u0026rsquo;t sound right. What\u0026rsquo;s going on here? What\u0026rsquo;s going on is that while economic inequality is a single measure (or more precisely, two: variation in income, and variation in wealth), it has multiple causes. Many of these causes are bad, like tax loopholes and drug addiction. But some are good, like Larry Page and Sergey Brin starting the company you use to find things online.\nIf you want to understand economic inequality — and more importantly, if you actually want to fix the bad aspects of it — you have to tease apart the components. And yet the trend in nearly everything written about the subject is to do the opposite: to squash together all the aspects of economic inequality as if it were a single phenomenon.\nSometimes this is done for ideological reasons. Sometimes it\u0026rsquo;s because the writer only has very high-level data and so draws conclusions from that, like the proverbial drunk who looks for his keys under the lamppost, instead of where he dropped them, because the light is better there. Sometimes it\u0026rsquo;s because the writer doesn\u0026rsquo;t understand critical aspects of inequality, like the role of technology in wealth creation. Much of the time, perhaps most of the time, writing about economic inequality combines all three.\nThe Pie Fallacy The most common …"
  },{
    "title": "Fashionable Problems",
    "url": "/paul_graham/essays_en/fp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nFashionable Problems December 2019\nI\u0026rsquo;ve seen the same pattern in many different fields: even though lots of people have worked hard in the field, only a small fraction of the space of possibilities has been explored, because they\u0026rsquo;ve all worked on similar things.\nEven the smartest, most imaginative people are surprisingly conservative when deciding what to work on. People who would never dream of being fashionable in any other way get sucked into working on fashionable problems.\n",
    "description": "",
    "tags": ["fashionable","problems","innovation","thinking","work"],
    "categories": [],
    "content": "→ 中文版本\nFashionable Problems December 2019\nI\u0026rsquo;ve seen the same pattern in many different fields: even though lots of people have worked hard in the field, only a small fraction of the space of possibilities has been explored, because they\u0026rsquo;ve all worked on similar things.\nEven the smartest, most imaginative people are surprisingly conservative when deciding what to work on. People who would never dream of being fashionable in any other way get sucked into working on fashionable problems.\nIf you want to try working on unfashionable problems, one of the best places to look is in fields that people think have already been fully explored: essays, Lisp, venture funding — you may notice a pattern here. If you can find a new approach into a big but apparently played out field, the value of whatever you discover will be multiplied by its enormous surface area.\nThe best protection against getting drawn into working on the same things as everyone else may be to genuinely love what you\u0026rsquo;re doing. Then you\u0026rsquo;ll continue to work on it even if you make the same mistake as other people and think that it\u0026rsquo;s too marginal to matter.\nJapanese Translation\nArabic Translation\nFrench Translation\n"
  },{
    "title": "Fierce Nerds",
    "url": "/paul_graham/essays_en/fn/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nFierce Nerds May 2021\nMost people think of nerds as quiet, diffident people. In ordinary social situations they are — as quiet and diffident as the star quarterback would be if he found himself in the middle of a physics symposium. And for the same reason: they are fish out of water. But the apparent diffidence of nerds is an illusion due to the fact that when non-nerds observe them, it\u0026rsquo;s usually in ordinary social situations. In fact some nerds are quite fierce.\n",
    "description": "",
    "tags": ["nerds","success","personality","technology","competition"],
    "categories": [],
    "content": "→ 中文版本\nFierce Nerds May 2021\nMost people think of nerds as quiet, diffident people. In ordinary social situations they are — as quiet and diffident as the star quarterback would be if he found himself in the middle of a physics symposium. And for the same reason: they are fish out of water. But the apparent diffidence of nerds is an illusion due to the fact that when non-nerds observe them, it\u0026rsquo;s usually in ordinary social situations. In fact some nerds are quite fierce.\nThe fierce nerds are a small but interesting group. They are as a rule extremely competitive — more competitive, I\u0026rsquo;d say, than highly competitive non-nerds. Competition is more personal for them. Partly perhaps because they\u0026rsquo;re not emotionally mature enough to distance themselves from it, but also because there\u0026rsquo;s less randomness in the kinds of competition they engage in, and they are thus more justified in taking the results personally.\nFierce nerds also tend to be somewhat overconfident, especially when young. It might seem like it would be a disadvantage to be mistaken about one\u0026rsquo;s abilities, but empirically it isn\u0026rsquo;t. Up to a point, confidence is a self-fullfilling prophecy.\nAnother quality you find in most fierce nerds is intelligence. Not all nerds are smart, but the fierce ones are always at least moderately so. If they weren\u0026rsquo;t, they wouldn\u0026rsquo;t have the confidence to be fierce. [1]\nThere\u0026rsquo;s also a natural connection between nerdiness and independent-mindedness. It\u0026rsquo;s hard to be independent-minded without being somewhat socially awkward, because conventional beliefs are so often mistaken, or at least arbitrary. No one who was both independent-minded and ambitious would want to waste the effort it takes to fit in. And the independent-mindedness of the fierce nerds will obviously be of the aggressive rather than the passive type: they\u0026rsquo;ll be annoyed by rules, rather than dreamily unaware of them.\nI\u0026rsquo;m less sure why fierce nerds are …"
  },{
    "title": "Filters that Fight Back",
    "url": "/paul_graham/essays_en/ffb/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nFilters that Fight Back August 2003\nWe may be able to improve the accuracy of Bayesian spam filters by having them follow links to see what\u0026rsquo;s waiting at the other end. Richard Jowsey of death2spam now does this in borderline cases, and reports that it works well.\nWhy only do it in borderline cases? And why only do it once?\nAs I mentioned in Will Filters Kill Spam?, following all the urls in a spam would have an amusing side-effect. If popular email clients did this in order to filter spam, the spammer\u0026rsquo;s servers would take a serious pounding. The more I think about this, the better an idea it seems. This isn\u0026rsquo;t just amusing; it would be hard to imagine a more perfectly targeted counterattack on spammers.\n",
    "description": "",
    "tags": ["spam filters","email","technology","auto-retrieval","spammers","counterattack","bayesian","security"],
    "categories": [],
    "content": "→ Chinese Version\nFilters that Fight Back August 2003\nWe may be able to improve the accuracy of Bayesian spam filters by having them follow links to see what\u0026rsquo;s waiting at the other end. Richard Jowsey of death2spam now does this in borderline cases, and reports that it works well.\nWhy only do it in borderline cases? And why only do it once?\nAs I mentioned in Will Filters Kill Spam?, following all the urls in a spam would have an amusing side-effect. If popular email clients did this in order to filter spam, the spammer\u0026rsquo;s servers would take a serious pounding. The more I think about this, the better an idea it seems. This isn\u0026rsquo;t just amusing; it would be hard to imagine a more perfectly targeted counterattack on spammers.\nSo I\u0026rsquo;d like to suggest an additional feature to those working on spam filters: a \u0026ldquo;punish\u0026rdquo; mode which, if turned on, would spider every url in a suspected spam n times, where n could be set by the user. [1]\nAs many people have noted, one of the problems with the current email system is that it\u0026rsquo;s too passive. It does whatever you tell it. So far all the suggestions for fixing the problem seem to involve new protocols. This one wouldn\u0026rsquo;t.\nIf widely used, auto-retrieving spam filters would make the email system rebound. The huge volume of the spam, which has so far worked in the spammer\u0026rsquo;s favor, would now work against him, like a branch snapping back in his face. Auto-retrieving spam filters would drive the spammer\u0026rsquo;s costs up, and his sales down: his bandwidth usage would go through the roof, and his servers would grind to a halt under the load, which would make them unavailable to the people who would have responded to the spam.\nPump out a million emails an hour, get a million hits an hour on your servers. We would want to ensure that this is only done to suspected spams. As a rule, any url sent to millions of people is likely to be a spam url, so submitting every http request in every email …"
  },{
    "title": "Five Founders",
    "url": "/paul_graham/essays_en/5founders/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nFive Founders Five Founders April 2009\nInc recently asked me who I thought were the 5 most interesting startup founders of the last 30 years. How do you decide who\u0026rsquo;s the most interesting? The best test seemed to be influence: who are the 5 who\u0026rsquo;ve influenced me most? Who do I use as examples when I\u0026rsquo;m talking to companies we fund? Who do I find myself quoting?\nSteve Jobs I\u0026rsquo;d guess Steve is the most influential founder not just for me but for most people you could ask. A lot of startup culture is Apple culture. He was the original young founder. And while the concept of \u0026ldquo;insanely great\u0026rdquo; already existed in the arts, it was a novel idea to introduce into a company in the 1980s.\n",
    "description": "",
    "tags": ["startup","founders","steve jobs","google","paul buchheit","sam altman"],
    "categories": [],
    "content": "→ 中文版本\nFive Founders Five Founders April 2009\nInc recently asked me who I thought were the 5 most interesting startup founders of the last 30 years. How do you decide who\u0026rsquo;s the most interesting? The best test seemed to be influence: who are the 5 who\u0026rsquo;ve influenced me most? Who do I use as examples when I\u0026rsquo;m talking to companies we fund? Who do I find myself quoting?\nSteve Jobs I\u0026rsquo;d guess Steve is the most influential founder not just for me but for most people you could ask. A lot of startup culture is Apple culture. He was the original young founder. And while the concept of \u0026ldquo;insanely great\u0026rdquo; already existed in the arts, it was a novel idea to introduce into a company in the 1980s.\nMore remarkable still, he\u0026rsquo;s stayed interesting for 30 years. People await new Apple products the way they\u0026rsquo;d await new books by a popular novelist. Steve may not literally design them, but they wouldn\u0026rsquo;t happen if he weren\u0026rsquo;t CEO.\nSteve is clever and driven, but so are a lot of people in the Valley. What makes him unique is his sense of design. Before him, most companies treated design as a frivolous extra. Apple\u0026rsquo;s competitors now know better.\nTJ Rodgers TJ Rodgers isn\u0026rsquo;t as famous as Steve Jobs, but he may be the best writer among Silicon Valley CEOs. I\u0026rsquo;ve probably learned more from him about the startup way of thinking than from anyone else. Not so much from specific things he\u0026rsquo;s written as by reconstructing the mind that produced them: brutally candid; aggressively garbage-collecting outdated ideas; and yet driven by pragmatism rather than ideology.\nThe first essay of his that I read was so electrifying that I remember exactly where I was at the time. It was High Technology Innovation: Free Markets or Government Subsidies? and I was downstairs in the Harvard Square T Station. It felt as if someone had flipped on a light switch inside my head.\nLarry \u0026amp; Sergey I\u0026rsquo;m sorry to treat Larry and Sergey as one …"
  },{
    "title": "Five Questions about Language Design",
    "url": "/paul_graham/essays_en/langdes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nFive Questions about Language Design May 2001\n(These are some notes I made for a panel discussion on programming language design at MIT on May 10, 2001.)\n1. Programming Languages Are for People. Programming languages are how people talk to computers. The computer would be just as happy speaking any language that was unambiguous. The reason we have high level languages is because people can\u0026rsquo;t deal with machine language. The point of programming languages is to prevent our poor frail human brains from being overwhelmed by a mass of detail.\n",
    "description": "",
    "tags": ["programming_languages","language_design","hacking","lisp","software_development","computer_science","technology"],
    "categories": [],
    "content": "→ 中文版本\nFive Questions about Language Design May 2001\n(These are some notes I made for a panel discussion on programming language design at MIT on May 10, 2001.)\n1. Programming Languages Are for People. Programming languages are how people talk to computers. The computer would be just as happy speaking any language that was unambiguous. The reason we have high level languages is because people can\u0026rsquo;t deal with machine language. The point of programming languages is to prevent our poor frail human brains from being overwhelmed by a mass of detail.\nArchitects know that some kinds of design problems are more personal than others. One of the cleanest, most abstract design problems is designing bridges. There your job is largely a matter of spanning a given distance with the least material. The other end of the spectrum is designing chairs. Chair designers have to spend their time thinking about human butts.\nSoftware varies in the same way. Designing algorithms for routing data through a network is a nice, abstract problem, like designing bridges. Whereas designing programming languages is like designing chairs: it\u0026rsquo;s all about dealing with human weaknesses.\nMost of us hate to acknowledge this. Designing systems of great mathematical elegance sounds a lot more appealing to most of us than pandering to human weaknesses. And there is a role for mathematical elegance: some kinds of elegance make programs easier to understand. But elegance is not an end in itself.\nAnd when I say languages have to be designed to suit human weaknesses, I don\u0026rsquo;t mean that languages have to be designed for bad programmers. In fact I think you ought to design for the best programmers, but even the best programmers have limitations. I don\u0026rsquo;t think anyone would like programming in a language where all the variables were the letter x with integer subscripts.\n2. Design for Yourself and Your Friends. If you look at the history of programming languages, a lot of the best ones were …"
  },{
    "title": "Founder Mode",
    "url": "/paul_graham/essays_en/foundermode/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nFounder Mode September 2024\nAt a YC event last week Brian Chesky gave a talk that everyone who was there will remember. Most founders I talked to afterward said it was the best they\u0026rsquo;d ever heard. Ron Conway, for the first time in his life, forgot to take notes. I\u0026rsquo;m not going to try to reproduce it here. Instead I want to talk about a question it raised.\nThe theme of Brian\u0026rsquo;s talk was that the conventional wisdom about how to run larger companies is mistaken. As Airbnb grew, well-meaning people advised him that he had to run the company in a certain way for it to scale. Their advice could be optimistically summarized as \u0026ldquo;hire good people and give them room to do their jobs.\u0026rdquo; He followed this advice and the results were disastrous. So he had to figure out a better way on his own, which he did partly by studying how Steve Jobs ran Apple. So far it seems to be working. Airbnb\u0026rsquo;s free cash flow margin is now among the best in Silicon Valley.\n",
    "description": "",
    "tags": ["founders","management","startups","leadership","YC"],
    "categories": [],
    "content": "→ 中文版本\nFounder Mode September 2024\nAt a YC event last week Brian Chesky gave a talk that everyone who was there will remember. Most founders I talked to afterward said it was the best they\u0026rsquo;d ever heard. Ron Conway, for the first time in his life, forgot to take notes. I\u0026rsquo;m not going to try to reproduce it here. Instead I want to talk about a question it raised.\nThe theme of Brian\u0026rsquo;s talk was that the conventional wisdom about how to run larger companies is mistaken. As Airbnb grew, well-meaning people advised him that he had to run the company in a certain way for it to scale. Their advice could be optimistically summarized as \u0026ldquo;hire good people and give them room to do their jobs.\u0026rdquo; He followed this advice and the results were disastrous. So he had to figure out a better way on his own, which he did partly by studying how Steve Jobs ran Apple. So far it seems to be working. Airbnb\u0026rsquo;s free cash flow margin is now among the best in Silicon Valley.\nThe audience at this event included a lot of the most successful founders we\u0026rsquo;ve funded, and one after another said that the same thing had happened to them. They\u0026rsquo;d been given the same advice about how to run their companies as they grew, but instead of helping their companies, it had damaged them.\nWhy was everyone telling these founders the wrong thing? That was the big mystery to me. And after mulling it over for a bit I figured out the answer: what they were being told was how to run a company you hadn\u0026rsquo;t founded — how to run a company if you\u0026rsquo;re merely a professional manager. But this m.o. is so much less effective that to founders it feels broken. There are things founders can do that managers can\u0026rsquo;t, and not doing them feels wrong to founders, because it is.\nIn effect there are two different ways to run a company: founder mode and manager mode. Till now most people even in Silicon Valley have implicitly assumed that scaling a startup meant switching to manager …"
  },{
    "title": "Frighteningly Ambitious Startup Ideas",
    "url": "/paul_graham/essays_en/ambitious/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nFrighteningly Ambitious Startup Ideas March 2012\nWant to start a startup? Get funded by Y Combinator.\nOne of the more surprising things I\u0026rsquo;ve noticed while working on Y Combinator is how frightening the most ambitious startup ideas are. In this essay I\u0026rsquo;m going to demonstrate this phenomenon by describing some. Any one of them could make you a billionaire. That might sound like an attractive prospect, and yet when I describe these ideas you may notice you find yourself shrinking away from them.\n",
    "description": "",
    "tags": ["startup","ambition","ideas","yc","vision"],
    "categories": [],
    "content": "→ 中文版本\nFrighteningly Ambitious Startup Ideas March 2012\nWant to start a startup? Get funded by Y Combinator.\nOne of the more surprising things I\u0026rsquo;ve noticed while working on Y Combinator is how frightening the most ambitious startup ideas are. In this essay I\u0026rsquo;m going to demonstrate this phenomenon by describing some. Any one of them could make you a billionaire. That might sound like an attractive prospect, and yet when I describe these ideas you may notice you find yourself shrinking away from them.\nDon\u0026rsquo;t worry, it\u0026rsquo;s not a sign of weakness. Arguably it\u0026rsquo;s a sign of sanity. The biggest startup ideas are terrifying. And not just because they\u0026rsquo;d be a lot of work. The biggest ideas seem to threaten your identity: you wonder if you\u0026rsquo;d have enough ambition to carry them through.\nThere\u0026rsquo;s a scene in Being John Malkovich where the nerdy hero encounters a very attractive, sophisticated woman. She says to him: Here\u0026rsquo;s the thing: If you ever got me, you wouldn\u0026rsquo;t have a clue what to do with me. That\u0026rsquo;s what these ideas say to us.\nThis phenomenon is one of the most important things you can understand about startups. You\u0026rsquo;d expect big startup ideas to be attractive, but actually they tend to repel you. And that has a bunch of consequences. It means these ideas are invisible to most people who try to think of startup ideas, because their subconscious filters them out. Even the most ambitious people are probably best off approaching them obliquely.\n1. A New Search Engine The best ideas are just on the right side of impossible. I don\u0026rsquo;t know if this one is possible, but there are signs it might be. Making a new search engine means competing with Google, and recently I\u0026rsquo;ve noticed some cracks in their fortress.\nThe point when it became clear to me that Microsoft had lost their way was when they decided to get into the search business. That was not a natural move for Microsoft. They did it because they were …"
  },{
    "title": "General and Surprising",
    "url": "/paul_graham/essays_en/sun/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nGeneral and Surprising September 2017\nThe most valuable insights are both general and surprising. F = ma for example. But general and surprising is a hard combination to achieve. That territory tends to be picked clean, precisely because those insights are so valuable.\nOrdinarily, the best that people can do is one without the other: either surprising without being general (e.g. gossip), or general without being surprising (e.g. platitudes).\n",
    "description": "",
    "tags": ["ideas","insights","creativity","novelty","writing","thinking"],
    "categories": [],
    "content": "→ 中文版本\nGeneral and Surprising September 2017\nThe most valuable insights are both general and surprising. F = ma for example. But general and surprising is a hard combination to achieve. That territory tends to be picked clean, precisely because those insights are so valuable.\nOrdinarily, the best that people can do is one without the other: either surprising without being general (e.g. gossip), or general without being surprising (e.g. platitudes).\nWhere things get interesting is the moderately valuable insights. You get those from small additions of whichever quality was missing. The more common case is a small addition of generality: a piece of gossip that\u0026rsquo;s more than just gossip, because it teaches something interesting about the world. But another less common approach is to focus on the most general ideas and see if you can find something new to say about them. Because these start out so general, you only need a small delta of novelty to produce a useful insight.\nA small delta of novelty is all you\u0026rsquo;ll be able to get most of the time. Which means if you take this route, your ideas will seem a lot like ones that already exist. Sometimes you\u0026rsquo;ll find you\u0026rsquo;ve merely rediscovered an idea that did already exist. But don\u0026rsquo;t be discouraged. Remember the huge multiplier that kicks in when you do manage to think of something even a little new.\nCorollary: the more general the ideas you\u0026rsquo;re talking about, the less you should worry about repeating yourself. If you write enough, it\u0026rsquo;s inevitable you will. Your brain is much the same from year to year and so are the stimuli that hit it. I feel slightly bad when I find I\u0026rsquo;ve said something close to what I\u0026rsquo;ve said before, as if I were plagiarizing myself. But rationally one shouldn\u0026rsquo;t. You won\u0026rsquo;t say something exactly the same way the second time, and that variation increases the chance you\u0026rsquo;ll get that tiny but critical delta of novelty.\nAnd of course, ideas beget …"
  },{
    "title": "Good and Bad Procrastination",
    "url": "/paul_graham/essays_en/procrastination/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nGood and Bad Procrastination December 2005\nThe most impressive people I know are all terrible procrastinators. So could it be that procrastination isn\u0026rsquo;t always bad?\nMost people who write about procrastination write about how to cure it. But this is, strictly speaking, impossible. There are an infinite number of things you could be doing. No matter what you work on, you\u0026rsquo;re not working on everything else. So the question is not how to avoid procrastination, but how to procrastinate well.\n",
    "description": "",
    "tags": ["procrastination","productivity","work","time_management"],
    "categories": [],
    "content": "→ 中文版本\nGood and Bad Procrastination December 2005\nThe most impressive people I know are all terrible procrastinators. So could it be that procrastination isn\u0026rsquo;t always bad?\nMost people who write about procrastination write about how to cure it. But this is, strictly speaking, impossible. There are an infinite number of things you could be doing. No matter what you work on, you\u0026rsquo;re not working on everything else. So the question is not how to avoid procrastination, but how to procrastinate well.\nThere are three variants of procrastination, depending on what you do instead of working on something: you could work on (a) nothing, (b) something less important, or (c) something more important. That last type, I\u0026rsquo;d argue, is good procrastination.\nThat\u0026rsquo;s the \u0026ldquo;absent-minded professor,\u0026rdquo; who forgets to shave, or eat, or even perhaps look where he\u0026rsquo;s going while he\u0026rsquo;s thinking about some interesting question. His mind is absent from the everyday world because it\u0026rsquo;s hard at work in another.\nThat\u0026rsquo;s the sense in which the most impressive people I know are all procrastinators. They\u0026rsquo;re type-C procrastinators: they put off working on small stuff to work on big stuff.\nWhat\u0026rsquo;s \u0026ldquo;small stuff?\u0026rdquo; Roughly, work that has zero chance of being mentioned in your obituary. It\u0026rsquo;s hard to say at the time what will turn out to be your best work (will it be your magnum opus on Sumerian temple architecture, or the detective thriller you wrote under a pseudonym?), but there\u0026rsquo;s a whole class of tasks you can safely rule out: shaving, doing your laundry, cleaning the house, writing thank-you notes—anything that might be called an errand.\nGood procrastination is avoiding errands to do real work.\nGood in a sense, at least. The people who want you to do the errands won\u0026rsquo;t think it\u0026rsquo;s good. But you probably have to annoy them if you want to get anything done. The mildest seeming people, if they want to do real …"
  },{
    "title": "Good Writing",
    "url": "/paul_graham/essays_en/goodwriting/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nGood Writing May 2025\nThere are two senses in which writing can be good: it can sound good, and the ideas can be right. It can have nice, flowing sentences, and it can draw correct conclusions about important things. It might seem as if these two kinds of good would be unrelated, like the speed of a car and the color it\u0026rsquo;s painted. And yet I don\u0026rsquo;t think they are. I think writing that sounds good is more likely to be right.\n",
    "description": "",
    "tags": ["writing","style","ideas","rhythm","clarity"],
    "categories": [],
    "content": "→ 中文版本\nGood Writing May 2025\nThere are two senses in which writing can be good: it can sound good, and the ideas can be right. It can have nice, flowing sentences, and it can draw correct conclusions about important things. It might seem as if these two kinds of good would be unrelated, like the speed of a car and the color it\u0026rsquo;s painted. And yet I don\u0026rsquo;t think they are. I think writing that sounds good is more likely to be right.\nSo here we have the most exciting kind of idea: one that seems both preposterous and true. Let\u0026rsquo;s examine it. How can this possibly be true?\nI know it\u0026rsquo;s true from writing. You can\u0026rsquo;t simultaneously optimize two unrelated things; when you push one far enough, you always end up sacrificing the other. And yet no matter how hard I push, I never find myself having to choose between the sentence that sounds best and the one that expresses an idea best. If I did, it would be frivolous to care how sentences sound. But in practice it feels the opposite of frivolous. Fixing sentences that sound bad seems to help get the ideas right. [1]\nBy right I mean more than just true. Getting the ideas right means developing them well — drawing the conclusions that matter most, and exploring each one to the right level of detail. So getting the ideas right is not just a matter of saying true things, but saying the right true things.\nHow could trying to make sentences sound good help you do that? The clue to the answer is something I noticed 30 years ago when I was doing the layout for my first book. Sometimes when you\u0026rsquo;re laying out text you have bad luck. For example, you get a section that runs one line longer than the page. I don\u0026rsquo;t know what ordinary typesetters do in this situation, but what I did was rewrite the section to make it a line shorter. You\u0026rsquo;d expect such an arbitrary constraint to make the writing worse. But I found, to my surprise, that it never did. I always ended up with something I liked better.\nI …"
  },{
    "title": "Great Hackers",
    "url": "/paul_graham/essays_en/gh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nGreat Hackers July 2004\n(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new book, and in reviews I keep noticing words like \u0026ldquo;provocative\u0026rsquo;\u0026rsquo; and \u0026ldquo;controversial.\u0026rsquo;\u0026rsquo; To say nothing of \u0026ldquo;idiotic.''\nI didn\u0026rsquo;t mean to make the book controversial. I was trying to make it efficient. I didn\u0026rsquo;t want to waste people\u0026rsquo;s time telling them things they already knew. It\u0026rsquo;s more efficient just to give them the diffs. But I suppose that\u0026rsquo;s bound to yield an alarming book.\n",
    "description": "",
    "tags": ["hackers","programming","productivity","software","technology","work"],
    "categories": [],
    "content": "→ 中文版本\nGreat Hackers July 2004\n(This essay is derived from a talk at Oscon 2004.)\nA few months ago I finished a new book, and in reviews I keep noticing words like \u0026ldquo;provocative\u0026rsquo;\u0026rsquo; and \u0026ldquo;controversial.\u0026rsquo;\u0026rsquo; To say nothing of \u0026ldquo;idiotic.''\nI didn\u0026rsquo;t mean to make the book controversial. I was trying to make it efficient. I didn\u0026rsquo;t want to waste people\u0026rsquo;s time telling them things they already knew. It\u0026rsquo;s more efficient just to give them the diffs. But I suppose that\u0026rsquo;s bound to yield an alarming book.\nEdisons There\u0026rsquo;s no controversy about which idea is most controversial: the suggestion that variation in wealth might not be as big a problem as we think.\nI didn\u0026rsquo;t say in the book that variation in wealth was in itself a good thing. I said in some situations it might be a sign of good things. A throbbing headache is not a good thing, but it can be a sign of a good thing\u0026ndash; for example, that you\u0026rsquo;re recovering consciousness after being hit on the head.\nVariation in wealth can be a sign of variation in productivity. (In a society of one, they\u0026rsquo;re identical.) And that is almost certainly a good thing: if your society has no variation in productivity, it\u0026rsquo;s probably not because everyone is Thomas Edison. It\u0026rsquo;s probably because you have no Thomas Edisons.\nIn a low-tech society you don\u0026rsquo;t see much variation in productivity. If you have a tribe of nomads collecting sticks for a fire, how much more productive is the best stick gatherer going to be than the worst? A factor of two? Whereas when you hand people a complex tool like a computer, the variation in what they can do with it is enormous.\nThat\u0026rsquo;s not a new idea. Fred Brooks wrote about it in 1974, and the study he quoted was published in 1968. But I think he underestimated the variation between programmers. He wrote about productivity in lines of code: the best programmers can solve a given problem in a tenth the time. But …"
  },{
    "title": "Hackers and Painters",
    "url": "/paul_graham/essays_en/hp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHackers and Painters May 2003\n(This essay is derived from a guest lecture at Harvard, which incorporated an earlier talk at Northeastern.)\nWhen I finished grad school in computer science I went to art school to study painting. A lot of people seemed surprised that someone interested in computers would also be interested in painting. They seemed to think that hacking and painting were very different kinds of work\u0026ndash; that hacking was cold, precise, and methodical, and that painting was the frenzied expression of some primal urge.\n",
    "description": "",
    "tags": ["hackers","painting","programming","software design","computer science","creativity","art"],
    "categories": [],
    "content": "→ 中文版本\nHackers and Painters May 2003\n(This essay is derived from a guest lecture at Harvard, which incorporated an earlier talk at Northeastern.)\nWhen I finished grad school in computer science I went to art school to study painting. A lot of people seemed surprised that someone interested in computers would also be interested in painting. They seemed to think that hacking and painting were very different kinds of work\u0026ndash; that hacking was cold, precise, and methodical, and that painting was the frenzied expression of some primal urge.\nBoth of these images are wrong. Hacking and painting have a lot in common. In fact, of all the different types of people I\u0026rsquo;ve known, hackers and painters are among the most alike.\nWhat hackers and painters have in common is that they\u0026rsquo;re both makers. Along with composers, architects, and writers, what hackers and painters are trying to do is make good things. They\u0026rsquo;re not doing research per se, though if in the course of trying to make good things they discover some new technique, so much the better.\nI\u0026rsquo;ve never liked the term \u0026ldquo;computer science.\u0026rdquo; The main reason I don\u0026rsquo;t like it is that there\u0026rsquo;s no such thing. Computer science is a grab bag of tenuously related areas thrown together by an accident of history, like Yugoslavia. At one end you have people who are really mathematicians, but call what they\u0026rsquo;re doing computer science so they can get DARPA grants. In the middle you have people working on something like the natural history of computers\u0026ndash; studying the behavior of algorithms for routing data through networks, for example. And then at the other extreme you have the hackers, who are trying to write interesting software, and for whom computers are just a medium of expression, as concrete is for architects or paint for painters. It\u0026rsquo;s as if mathematicians, physicists, and architects all had to be in the same department.\nSometimes what the hackers do is called …"
  },{
    "title": "Haters",
    "url": "/paul_graham/essays_en/fh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHaters January 2020\n(I originally intended this for startup founders, who are often surprised by the attention they get as their companies grow, but it applies equally to anyone who becomes famous.)\nIf you become sufficiently famous, you\u0026rsquo;ll acquire some fans who like you too much. These people are sometimes called \u0026ldquo;fanboys,\u0026rdquo; and though I dislike that term, I\u0026rsquo;m going to have to use it here. We need some word for them, because this is a distinct phenomenon from someone simply liking your work.\n",
    "description": "",
    "tags": ["fame","psychology","criticism","success","mindset"],
    "categories": [],
    "content": "→ 中文版本\nHaters January 2020\n(I originally intended this for startup founders, who are often surprised by the attention they get as their companies grow, but it applies equally to anyone who becomes famous.)\nIf you become sufficiently famous, you\u0026rsquo;ll acquire some fans who like you too much. These people are sometimes called \u0026ldquo;fanboys,\u0026rdquo; and though I dislike that term, I\u0026rsquo;m going to have to use it here. We need some word for them, because this is a distinct phenomenon from someone simply liking your work.\nA fanboy is obsessive and uncritical. Liking you becomes part of their identity, and they create an image of you in their own head that is much better than reality. Everything you do is good, because you do it. If you do something bad, they find a way to see it as good. And their love for you is not, usually, a quiet, private one. They want everyone to know how great you are.\nWell, you may be thinking, I could do without this kind of obsessive fan, but I know there are all kinds of people in the world, and if this is the worst consequence of fame, that\u0026rsquo;s not so bad.\nUnfortunately this is not the worst consequence of fame. As well as fanboys, you\u0026rsquo;ll have haters.\nA hater is obsessive and uncritical. Disliking you becomes part of their identity, and they create an image of you in their own head that is much worse than reality. Everything you do is bad, because you do it. If you do something good, they find a way to see it as bad. And their dislike for you is not, usually, a quiet, private one. They want everyone to know how awful you are.\nIf you\u0026rsquo;re thinking of checking, I\u0026rsquo;ll save you the trouble. The second and fifth paragraphs are identical except for \u0026ldquo;good\u0026rdquo; being switched to \u0026ldquo;bad\u0026rdquo; and so on.\nI spent years puzzling about haters. What are they, and where do they come from? Then one day it dawned on me. Haters are just fanboys with the sign switched.\nNote that by haters, I don\u0026rsquo;t simply mean trolls. …"
  },{
    "title": "Having Kids",
    "url": "/paul_graham/essays_en/kids/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHaving Kids December 2019\nBefore I had kids, I was afraid of having kids. Up to that point I felt about kids the way the young Augustine felt about living virtuously. I\u0026rsquo;d have been sad to think I\u0026rsquo;d never have children. But did I want them now? No.\nIf I had kids, I\u0026rsquo;d become a parent, and parents, as I\u0026rsquo;d known since I was a kid, were uncool. They were dull and responsible and had no fun. And while it\u0026rsquo;s not surprising that kids would believe that, to be honest I hadn\u0026rsquo;t seen much as an adult to change my mind. Whenever I\u0026rsquo;d noticed parents with kids, the kids seemed to be terrors, and the parents pathetic harried creatures, even when they prevailed.\n",
    "description": "",
    "tags": ["parenting","children","family","personal_growth","happiness","work_life_balance","ambition"],
    "categories": [],
    "content": "→ 中文版本\nHaving Kids December 2019\nBefore I had kids, I was afraid of having kids. Up to that point I felt about kids the way the young Augustine felt about living virtuously. I\u0026rsquo;d have been sad to think I\u0026rsquo;d never have children. But did I want them now? No.\nIf I had kids, I\u0026rsquo;d become a parent, and parents, as I\u0026rsquo;d known since I was a kid, were uncool. They were dull and responsible and had no fun. And while it\u0026rsquo;s not surprising that kids would believe that, to be honest I hadn\u0026rsquo;t seen much as an adult to change my mind. Whenever I\u0026rsquo;d noticed parents with kids, the kids seemed to be terrors, and the parents pathetic harried creatures, even when they prevailed.\nWhen people had babies, I congratulated them enthusiastically, because that seemed to be what one did. But I didn\u0026rsquo;t feel it at all. \u0026ldquo;Better you than me,\u0026rdquo; I was thinking.\nNow when people have babies I congratulate them enthusiastically and I mean it. Especially the first one. I feel like they just got the best gift in the world.\nWhat changed, of course, is that I had kids. Something I dreaded turned out to be wonderful.\nPartly, and I won\u0026rsquo;t deny it, this is because of serious chemical changes that happened almost instantly when our first child was born. It was like someone flipped a switch. I suddenly felt protective not just toward our child, but toward all children. As I was driving my wife and new son home from the hospital, I approached a crosswalk full of pedestrians, and I found myself thinking \u0026ldquo;I have to be really careful of all these people. Every one of them is someone\u0026rsquo;s child!\u0026rdquo;\nSo to some extent you can\u0026rsquo;t trust me when I say having kids is great. To some extent I\u0026rsquo;m like a religious cultist telling you that you\u0026rsquo;ll be happy if you join the cult too — but only because joining the cult will alter your mind in a way that will make you happy to be a cult member.\nBut not entirely. There were some things about having …"
  },{
    "title": "Heresy",
    "url": "/paul_graham/essays_en/heresy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHeresy April 2022\nOne of the most surprising things I\u0026rsquo;ve witnessed in my lifetime is the rebirth of the concept of heresy.\nIn his excellent biography of Newton, Richard Westfall writes about the moment when he was elected a fellow of Trinity College: \u0026ldquo;Supported comfortably, Newton was free to devote himself wholly to whatever he chose. To remain on, he had only to avoid the three unforgivable sins: crime, heresy, and marriage.\u0026rdquo; [1] The first time I read that, in the 1990s, it sounded amusingly medieval. How strange, to have to avoid committing heresy. But when I reread it 20 years later it sounded like a description of contemporary employment.\n",
    "description": "",
    "tags": ["heresy","free speech","tolerance","censorship","social dynamics"],
    "categories": [],
    "content": "→ 中文版本\nHeresy April 2022\nOne of the most surprising things I\u0026rsquo;ve witnessed in my lifetime is the rebirth of the concept of heresy.\nIn his excellent biography of Newton, Richard Westfall writes about the moment when he was elected a fellow of Trinity College: \u0026ldquo;Supported comfortably, Newton was free to devote himself wholly to whatever he chose. To remain on, he had only to avoid the three unforgivable sins: crime, heresy, and marriage.\u0026rdquo; [1] The first time I read that, in the 1990s, it sounded amusingly medieval. How strange, to have to avoid committing heresy. But when I reread it 20 years later it sounded like a description of contemporary employment.\nThere are an ever-increasing number of opinions you can be fired for. Those doing the firing don\u0026rsquo;t use the word \u0026ldquo;heresy\u0026rdquo; to describe them, but structurally they\u0026rsquo;re equivalent. Structurally there are two distinctive things about heresy: (1) that it takes priority over the question of truth or falsity, and (2) that it outweighs everything else the speaker has done.\nFor example, when someone calls a statement \u0026ldquo;x-ist,\u0026rdquo; they\u0026rsquo;re also implicitly saying that this is the end of the discussion. They do not, having said this, go on to consider whether the statement is true or not. Using such labels is the conversational equivalent of signalling an exception. That\u0026rsquo;s one of the reasons they\u0026rsquo;re used: to end a discussion.\nIf you find yourself talking to someone who uses these labels a lot, it might be worthwhile to ask them explicitly if they believe any babies are being thrown out with the bathwater. Can a statement be x-ist, for whatever value of x, and also true? If the answer is yes, then they\u0026rsquo;re admitting to banning the truth. That\u0026rsquo;s obvious enough that I\u0026rsquo;d guess most would answer no. But if they answer no, it\u0026rsquo;s easy to show that they\u0026rsquo;re mistaken, and that in practice such labels are applied to statements regardless of their …"
  },{
    "title": "High Resolution Fundraising",
    "url": "/paul_graham/essays_en/hiresfund/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHigh Resolution Fundraising September 2010\nThe reason startups have been using more convertible notes in angel rounds is that they make deals close faster. By making it easier for startups to give different prices to different investors, they help them break the sort of deadlock that happens when investors all wait to see who else is going to invest.\nBy far the biggest influence on investors\u0026rsquo; opinions of a startup is the opinion of other investors. There are very, very few who simply decide for themselves. Any startup founder can tell you the most common question they hear from investors is not about the founders or the product, but \u0026ldquo;who else is investing?\u0026rdquo;\n",
    "description": "",
    "tags": ["fundraising","angel investors","convertible notes","startups","venture capital","valuation"],
    "categories": [],
    "content": "→ 中文版本\nHigh Resolution Fundraising September 2010\nThe reason startups have been using more convertible notes in angel rounds is that they make deals close faster. By making it easier for startups to give different prices to different investors, they help them break the sort of deadlock that happens when investors all wait to see who else is going to invest.\nBy far the biggest influence on investors\u0026rsquo; opinions of a startup is the opinion of other investors. There are very, very few who simply decide for themselves. Any startup founder can tell you the most common question they hear from investors is not about the founders or the product, but \u0026ldquo;who else is investing?\u0026rdquo;\nThat tends to produce deadlocks. Raising an old-fashioned fixed-size equity round can take weeks, because all the angels sit around waiting for the others to commit, like competitors in a bicycle sprint who deliberately ride slowly at the start so they can follow whoever breaks first.\nConvertible notes let startups beat such deadlocks by rewarding investors willing to move first with lower (effective) valuations. Which they deserve because they\u0026rsquo;re taking more risk. It\u0026rsquo;s much safer to invest in a startup Ron Conway has already invested in; someone who comes after him should pay a higher price.\nThe reason convertible notes allow more flexibility in price is that valuation caps aren\u0026rsquo;t actual valuations, and notes are cheap and easy to do. So you can do high-resolution fundraising: if you wanted you could have a separate note with a different cap for each investor.\nThat cap need not simply rise monotonically. A startup could also give better deals to investors they expected to help them most. The point is simply that different investors, whether because of the help they offer or their willingness to commit, have different values for startups, and their terms should reflect that.\nDifferent terms for different investors is clearly the way of the future. Markets always evolve …"
  },{
    "title": "Hiring is Obsolete",
    "url": "/paul_graham/essays_en/hiring/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHiring is Obsolete May 2005\n(This essay is derived from a talk at the Berkeley CSUA.)\nThe three big powers on the Internet now are Yahoo, Google, and Microsoft. Average age of their founders: 24. So it is pretty well established now that grad students can start successful companies. And if grad students can do it, why not undergrads?\nLike everything else in technology, the cost of starting a startup has decreased dramatically. Now it\u0026rsquo;s so low that it has disappeared into the noise. The main cost of starting a Web-based startup is food and rent. Which means it doesn\u0026rsquo;t cost much more to start a company than to be a total slacker. You can probably start a startup on ten thousand dollars of seed funding, if you\u0026rsquo;re prepared to live on ramen.\n",
    "description": "",
    "tags": ["startups","hiring","investors","founders","undergraduates","risk","product development"],
    "categories": [],
    "content": "→ 中文版本\nHiring is Obsolete May 2005\n(This essay is derived from a talk at the Berkeley CSUA.)\nThe three big powers on the Internet now are Yahoo, Google, and Microsoft. Average age of their founders: 24. So it is pretty well established now that grad students can start successful companies. And if grad students can do it, why not undergrads?\nLike everything else in technology, the cost of starting a startup has decreased dramatically. Now it\u0026rsquo;s so low that it has disappeared into the noise. The main cost of starting a Web-based startup is food and rent. Which means it doesn\u0026rsquo;t cost much more to start a company than to be a total slacker. You can probably start a startup on ten thousand dollars of seed funding, if you\u0026rsquo;re prepared to live on ramen.\nThe less it costs to start a company, the less you need the permission of investors to do it. So a lot of people will be able to start companies now who never could have before.\nThe most interesting subset may be those in their early twenties. I\u0026rsquo;m not so excited about founders who have everything investors want except intelligence, or everything except energy. The most promising group to be liberated by the new, lower threshold are those who have everything investors want except experience.\nMarket Rate I once claimed that nerds were unpopular in secondary school mainly because they had better things to do than work full-time at being popular. Some said I was just telling people what they wanted to hear. Well, I\u0026rsquo;m now about to do that in a spectacular way: I think undergraduates are undervalued.\nOr more precisely, I think few realize the huge spread in the value of 20 year olds. Some, it\u0026rsquo;s true, are not very capable. But others are more capable than all but a handful of 30 year olds. [1]\nTill now the problem has always been that it\u0026rsquo;s difficult to pick them out. Every VC in the world, if they could go back in time, would try to invest in Microsoft. But which would have then? How many …"
  },{
    "title": "Holding a Program in One's Head",
    "url": "/paul_graham/essays_en/head/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHolding a Program in One\u0026rsquo;s Head August 2007\nA good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he\u0026rsquo;s working on. Mathematicians don\u0026rsquo;t answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head, and you can manipulate it at will.\n",
    "description": "",
    "tags": ["programming","productivity","software development","coding","focus"],
    "categories": [],
    "content": "→ 中文版本\nHolding a Program in One\u0026rsquo;s Head August 2007\nA good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he\u0026rsquo;s working on. Mathematicians don\u0026rsquo;t answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head, and you can manipulate it at will.\nThat\u0026rsquo;s particularly valuable at the start of a project, because initially the most important thing is to be able to change what you\u0026rsquo;re doing. Not just to solve the problem in a different way, but to change the problem you\u0026rsquo;re solving.\nYour code is your understanding of the problem you\u0026rsquo;re exploring. So it\u0026rsquo;s only when you have your code in your head that you really understand the problem.\nIt\u0026rsquo;s not easy to get a program into your head. If you leave a project for a few months, it can take days to really understand it again when you return to it. Even when you\u0026rsquo;re actively working on a program it can take half an hour to load into your head when you start work each day. And that\u0026rsquo;s in the best case. Ordinary programmers working in typical office conditions never enter this mode. Or to put it more dramatically, ordinary programmers working in typical office conditions never really understand the problems they\u0026rsquo;re solving.\nEven the best programmers don\u0026rsquo;t always have the whole program they\u0026rsquo;re working on loaded into their heads. But there are things you can do to help:\nAvoid distractions. Distractions are bad for many types of work, but especially bad for programming, because programmers tend to operate at the limit of the detail they can handle.\nThe danger of a distraction depends not on how long it is, but on how much it …"
  },{
    "title": "How Art Can Be Good",
    "url": "/paul_graham/essays_en/goodart/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow Art Can Be Good December 2006\nI grew up believing that taste is just a matter of personal preference. Each person has things they like, but no one\u0026rsquo;s preferences are any better than anyone else\u0026rsquo;s. There is no such thing as good taste.\nLike a lot of things I grew up believing, this turns out to be false, and I\u0026rsquo;m going to try to explain why.\nOne problem with saying there\u0026rsquo;s no such thing as good taste is that it also means there\u0026rsquo;s no such thing as good art. If there were good art, then people who liked it would have better taste than people who didn\u0026rsquo;t. So if you discard taste, you also have to discard the idea of art being good, and artists being good at making it.\n",
    "description": "",
    "tags": ["taste","art","subjectivity","audience","standards"],
    "categories": [],
    "content": "→ 中文版本\nHow Art Can Be Good December 2006\nI grew up believing that taste is just a matter of personal preference. Each person has things they like, but no one\u0026rsquo;s preferences are any better than anyone else\u0026rsquo;s. There is no such thing as good taste.\nLike a lot of things I grew up believing, this turns out to be false, and I\u0026rsquo;m going to try to explain why.\nOne problem with saying there\u0026rsquo;s no such thing as good taste is that it also means there\u0026rsquo;s no such thing as good art. If there were good art, then people who liked it would have better taste than people who didn\u0026rsquo;t. So if you discard taste, you also have to discard the idea of art being good, and artists being good at making it.\nIt was pulling on that thread that unravelled my childhood faith in relativism. When you\u0026rsquo;re trying to make things, taste becomes a practical matter. You have to decide what to do next. Would it make the painting better if I changed that part? If there\u0026rsquo;s no such thing as better, it doesn\u0026rsquo;t matter what you do. In fact, it doesn\u0026rsquo;t matter if you paint at all. You could just go out and buy a ready-made blank canvas. If there\u0026rsquo;s no such thing as good, that would be just as great an achievement as the ceiling of the Sistine Chapel. Less laborious, certainly, but if you can achieve the same level of performance with less effort, surely that\u0026rsquo;s more impressive, not less.\nYet that doesn\u0026rsquo;t seem quite right, does it?\nAudience I think the key to this puzzle is to remember that art has an audience. Art has a purpose, which is to interest its audience. Good art (like good anything) is art that achieves its purpose particularly well. The meaning of \u0026ldquo;interest\u0026rdquo; can vary. Some works of art are meant to shock, and others to please; some are meant to jump out at you, and others to sit quietly in the background. But all art has to work on an audience, and—here\u0026rsquo;s the critical point—members of the audience share things in common. …"
  },{
    "title": "How Not to Die",
    "url": "/paul_graham/essays_en/die/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nHow Not to Die August 2007\n(This is a talk I gave at the last Y Combinator dinner of the summer. Usually we don\u0026rsquo;t have a speaker at the last dinner; it\u0026rsquo;s more of a party. But it seemed worth spoiling the atmosphere if I could save some of the startups from preventable deaths. So at the last minute I cooked up this rather grim talk. I didn\u0026rsquo;t mean this as an essay; I wrote it down because I only had two hours before dinner and think fastest while writing.)\n",
    "description": "",
    "tags": ["startups","survival","persistence","entrepreneurship","motivation","failure","success","advice"],
    "categories": [],
    "content": "→ Chinese Version\nHow Not to Die August 2007\n(This is a talk I gave at the last Y Combinator dinner of the summer. Usually we don\u0026rsquo;t have a speaker at the last dinner; it\u0026rsquo;s more of a party. But it seemed worth spoiling the atmosphere if I could save some of the startups from preventable deaths. So at the last minute I cooked up this rather grim talk. I didn\u0026rsquo;t mean this as an essay; I wrote it down because I only had two hours before dinner and think fastest while writing.)\nA couple days ago I told a reporter that we expected about a third of the companies we funded to succeed. Actually I was being conservative. I\u0026rsquo;m hoping it might be as much as a half. Wouldn\u0026rsquo;t it be amazing if we could achieve a 50% success rate?\nAnother way of saying that is that half of you are going to die. Phrased that way, it doesn\u0026rsquo;t sound good at all. In fact, it\u0026rsquo;s kind of weird when you think about it, because our definition of success is that the founders get rich. If half the startups we fund succeed, then half of you are going to get rich and the other half are going to get nothing.\nIf you can just avoid dying, you get rich. That sounds like a joke, but it\u0026rsquo;s actually a pretty good description of what happens in a typical startup. It certainly describes what happened in Viaweb. We avoided dying till we got rich.\nIt was really close, too. When we were visiting Yahoo to talk about being acquired, we had to interrupt everything and borrow one of their conference rooms to talk down an investor who was about to back out of a new funding round we needed to stay alive. So even in the middle of getting rich we were fighting off the grim reaper.\nYou may have heard that quote about luck consisting of opportunity meeting preparation. You\u0026rsquo;ve now done the preparation. The work you\u0026rsquo;ve done so far has, in effect, put you in a position to get lucky: you can now get rich by not letting your company die. That\u0026rsquo;s more than most people have. So …"
  },{
    "title": "How People Get Rich Now",
    "url": "/paul_graham/essays_en/richnow/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow People Get Rich Now April 2021\nEvery year since 1982, Forbes magazine has published a list of the richest Americans. If we compare the 100 richest people in 1982 to the 100 richest in 2020, we notice some big differences.\nIn 1982 the most common source of wealth was inheritance. Of the 100 richest people, 60 inherited from an ancestor. There were 10 du Pont heirs alone. By 2020 the number of heirs had been cut in half, accounting for only 27 of the biggest 100 fortunes.\n",
    "description": "",
    "tags": ["wealth","entrepreneurship","technology","economics","inequality","startup"],
    "categories": [],
    "content": "→ 中文版本\nHow People Get Rich Now April 2021\nEvery year since 1982, Forbes magazine has published a list of the richest Americans. If we compare the 100 richest people in 1982 to the 100 richest in 2020, we notice some big differences.\nIn 1982 the most common source of wealth was inheritance. Of the 100 richest people, 60 inherited from an ancestor. There were 10 du Pont heirs alone. By 2020 the number of heirs had been cut in half, accounting for only 27 of the biggest 100 fortunes.\nWhy would the percentage of heirs decrease? Not because inheritance taxes increased. In fact, they decreased significantly during this period. The reason the percentage of heirs has decreased is not that fewer people are inheriting great fortunes, but that more people are making them.\nHow are people making these new fortunes? Roughly 3/4 by starting companies and 1/4 by investing. Of the 73 new fortunes in 2020, 56 derive from founders\u0026rsquo; or early employees\u0026rsquo; equity (52 founders, 2 early employees, and 2 wives of founders), and 17 from managing investment funds.\nThere were no fund managers among the 100 richest Americans in 1982. Hedge funds and private equity firms existed in 1982, but none of their founders were rich enough yet to make it into the top 100. Two things changed: fund managers discovered new ways to generate high returns, and more investors were willing to trust them with their money. [1]\nBut the main source of new fortunes now is starting companies, and when you look at the data, you see big changes there too. People get richer from starting companies now than they did in 1982, because the companies do different things.\nIn 1982, there were two dominant sources of new wealth: oil and real estate. Of the 40 new fortunes in 1982, at least 24 were due primarily to oil or real estate. Now only a small number are: of the 73 new fortunes in 2020, 4 were due to real estate and only 2 to oil.\nBy 2020 the biggest source of new wealth was what are sometimes called …"
  },{
    "title": "How to Be an Angel Investor",
    "url": "/paul_graham/essays_en/angelinvesting/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Be an Angel Investor March 2009\n(This essay is derived from a talk at AngelConf.)\nWhen we sold our startup in 1998 I thought one day I\u0026rsquo;d do some angel investing. Seven years later I still hadn\u0026rsquo;t started. I put it off because it seemed mysterious and complicated. It turns out to be easier than I expected, and also more interesting.\nThe part I thought was hard, the mechanics of investing, really isn\u0026rsquo;t. You give a startup money and they give you stock. You\u0026rsquo;ll probably get either preferred stock, which means stock with extra rights like getting your money back first in a sale, or convertible debt, which means (on paper) you\u0026rsquo;re lending the company money, and the debt converts to stock at the next sufficiently big funding round. [1]\n",
    "description": "",
    "tags": ["angel","investing","startup","funding","advice"],
    "categories": [],
    "content": "→ 中文版本\nHow to Be an Angel Investor March 2009\n(This essay is derived from a talk at AngelConf.)\nWhen we sold our startup in 1998 I thought one day I\u0026rsquo;d do some angel investing. Seven years later I still hadn\u0026rsquo;t started. I put it off because it seemed mysterious and complicated. It turns out to be easier than I expected, and also more interesting.\nThe part I thought was hard, the mechanics of investing, really isn\u0026rsquo;t. You give a startup money and they give you stock. You\u0026rsquo;ll probably get either preferred stock, which means stock with extra rights like getting your money back first in a sale, or convertible debt, which means (on paper) you\u0026rsquo;re lending the company money, and the debt converts to stock at the next sufficiently big funding round. [1]\nThere are sometimes minor tactical advantages to using one or the other. The paperwork for convertible debt is simpler. But really it doesn\u0026rsquo;t matter much which you use. Don\u0026rsquo;t spend much time worrying about the details of deal terms, especially when you first start angel investing. That\u0026rsquo;s not how you win at this game. When you hear people talking about a successful angel investor, they\u0026rsquo;re not saying \u0026ldquo;He got a 4x liquidation preference.\u0026rdquo; They\u0026rsquo;re saying \u0026ldquo;He invested in Google.\u0026rdquo;\nThat\u0026rsquo;s how you win: by investing in the right startups. That is so much more important than anything else that I worry I\u0026rsquo;m misleading you by even talking about other things.\nMechanics Angel investors often syndicate deals, which means they join together to invest on the same terms. In a syndicate there is usually a \u0026ldquo;lead\u0026rdquo; investor who negotiates the terms with the startup. But not always: sometimes the startup cobbles together a syndicate of investors who approach them independently, and the startup\u0026rsquo;s lawyer supplies the paperwork.\nThe easiest way to get started in angel investing is to find a friend who already does it, and try to get included in …"
  },{
    "title": "How to Be an Expert in a Changing World",
    "url": "/paul_graham/essays_en/ecw/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nHow to Be an Expert in a Changing World December 2014\nIf the world were static, we could have monotonically increasing confidence in our beliefs. The more (and more varied) experience a belief survived, the less likely it would be false. Most people implicitly believe something like this about their opinions. And they\u0026rsquo;re justified in doing so with opinions about things that don\u0026rsquo;t change much, like human nature. But you can\u0026rsquo;t trust your opinions in the same way about things that change, which could include practically everything else.\n",
    "description": "",
    "tags": ["expertise","change","beliefs","startups","investing","adaptation","ideas","future"],
    "categories": [],
    "content": "→ Chinese Version\nHow to Be an Expert in a Changing World December 2014\nIf the world were static, we could have monotonically increasing confidence in our beliefs. The more (and more varied) experience a belief survived, the less likely it would be false. Most people implicitly believe something like this about their opinions. And they\u0026rsquo;re justified in doing so with opinions about things that don\u0026rsquo;t change much, like human nature. But you can\u0026rsquo;t trust your opinions in the same way about things that change, which could include practically everything else.\nWhen experts are wrong, it\u0026rsquo;s often because they\u0026rsquo;re experts on an earlier version of the world.\nIs it possible to avoid that? Can you protect yourself against obsolete beliefs? To some extent, yes. I spent almost a decade investing in early stage startups, and curiously enough protecting yourself against obsolete beliefs is exactly what you have to do to succeed as a startup investor. Most really good startup ideas look like bad ideas at first, and many of those look bad specifically because some change in the world just switched them from bad to good. I spent a lot of time learning to recognize such ideas, and the techniques I used may be applicable to ideas in general.\nThe first step is to have an explicit belief in change. People who fall victim to a monotonically increasing confidence in their opinions are implicitly concluding the world is static. If you consciously remind yourself it isn\u0026rsquo;t, you start to look for change.\nWhere should one look for it? Beyond the moderately useful generalization that human nature doesn\u0026rsquo;t change much, the unfortunate fact is that change is hard to predict. This is largely a tautology but worth remembering all the same: change that matters usually comes from an unforeseen quarter.\nSo I don\u0026rsquo;t even try to predict it. When I get asked in interviews to predict the future, I always have to struggle to come up with something plausible-sounding …"
  },{
    "title": "How to Be Silicon Valley",
    "url": "/paul_graham/essays_en/siliconvalley/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Be Silicon Valley May 2006\n(This essay is derived from a keynote at Xtech.)\nCould you reproduce Silicon Valley elsewhere, or is there something unique about it?\nIt wouldn\u0026rsquo;t be surprising if it were hard to reproduce in other countries, because you couldn\u0026rsquo;t reproduce it in most of the US either. What does it take to make a silicon valley even here?\nWhat it takes is the right people. If you could get the right ten thousand people to move from Silicon Valley to Buffalo, Buffalo would become Silicon Valley. [1]\n",
    "description": "",
    "tags": ["silicon_valley","technology_hubs","nerds","investors","universities","innovation"],
    "categories": [],
    "content": "→ 中文版本\nHow to Be Silicon Valley May 2006\n(This essay is derived from a keynote at Xtech.)\nCould you reproduce Silicon Valley elsewhere, or is there something unique about it?\nIt wouldn\u0026rsquo;t be surprising if it were hard to reproduce in other countries, because you couldn\u0026rsquo;t reproduce it in most of the US either. What does it take to make a silicon valley even here?\nWhat it takes is the right people. If you could get the right ten thousand people to move from Silicon Valley to Buffalo, Buffalo would become Silicon Valley. [1]\nThat\u0026rsquo;s a striking departure from the past. Up till a couple decades ago, geography was destiny for cities. All great cities were located on waterways, because cities made money by trade, and water was the only economical way to ship.\nNow you could make a great city anywhere, if you could get the right people to move there. So the question of how to make a silicon valley becomes: who are the right people, and how do you get them to move?\nTwo Types I think you only need two kinds of people to create a technology hub: rich people and nerds. They\u0026rsquo;re the limiting reagents in the reaction that produces startups, because they\u0026rsquo;re the only ones present when startups get started. Everyone else will move.\nObservation bears this out: within the US, towns have become startup hubs if and only if they have both rich people and nerds. Few startups happen in Miami, for example, because although it\u0026rsquo;s full of rich people, it has few nerds. It\u0026rsquo;s not the kind of place nerds like.\nWhereas Pittsburgh has the opposite problem: plenty of nerds, but no rich people. The top US Computer Science departments are said to be MIT, Stanford, Berkeley, and Carnegie-Mellon. MIT yielded Route 128. Stanford and Berkeley yielded Silicon Valley. But Carnegie-Mellon? The record skips at that point. Lower down the list, the University of Washington yielded a high-tech community in Seattle, and the University of Texas at Austin yielded one in Austin. …"
  },{
    "title": "How to Convince Investors",
    "url": "/paul_graham/essays_en/convince/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Convince Investors August 2013\nWhen people hurt themselves lifting heavy things, it\u0026rsquo;s usually because they try to lift with their back. The right way to lift heavy things is to let your legs do the work. Inexperienced founders make the same mistake when trying to convince investors. They try to convince with their pitch. Most would be better off if they let their startup do the work—if they started by understanding why their startup is worth investing in, then simply explained this well to investors.\n",
    "description": "",
    "tags": ["investors","fundraising","pitch","startup","Y-Combinator","confidence","truth"],
    "categories": [],
    "content": "→ 中文版本\nHow to Convince Investors August 2013\nWhen people hurt themselves lifting heavy things, it\u0026rsquo;s usually because they try to lift with their back. The right way to lift heavy things is to let your legs do the work. Inexperienced founders make the same mistake when trying to convince investors. They try to convince with their pitch. Most would be better off if they let their startup do the work—if they started by understanding why their startup is worth investing in, then simply explained this well to investors.\nInvestors are looking for startups that will be very successful. But that test is not as simple as it sounds. In startups, as in a lot of other domains, the distribution of outcomes follows a power law, but in startups the curve is startlingly steep. The big successes are so big they dwarf the rest. And since there are only a handful each year (the conventional wisdom is 15), investors treat \u0026ldquo;big success\u0026rdquo; as if it were binary. Most are interested in you if you seem like you have a chance, however small, of being one of the 15 big successes, and otherwise not. [1]\n(There are a handful of angels who\u0026rsquo;d be interested in a company with a high probability of being moderately successful. But angel investors like big successes too.)\nHow do you seem like you\u0026rsquo;ll be one of the big successes? You need three things: formidable founders, a promising market, and (usually) some evidence of success so far.\nFormidable The most important ingredient is formidable founders. Most investors decide in the first few minutes whether you seem like a winner or a loser, and once their opinion is set it\u0026rsquo;s hard to change. [2] Every startup has reasons both to invest and not to invest. If investors think you\u0026rsquo;re a winner they focus on the former, and if not they focus on the latter. For example, it might be a rich market, but with a slow sales cycle. If investors are impressed with you as founders, they say they want to invest because it\u0026rsquo;s a …"
  },{
    "title": "How to Disagree",
    "url": "/paul_graham/essays_en/disagree/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nHow to Disagree March 2008\nThe web is turning writing into a conversation. Twenty years ago, writers wrote and readers read. The web lets readers respond, and increasingly they do—in comment threads, on forums, and in their own blog posts.\nMany who respond to something disagree with it. That\u0026rsquo;s to be expected. Agreeing tends to motivate people less than disagreeing. And when you agree there\u0026rsquo;s less to say. You could expand on something the author said, but he has probably already explored the most interesting implications. When you disagree you\u0026rsquo;re entering territory he may not have explored.\n",
    "description": "",
    "tags": ["disagreement","argument","communication","writing","critical thinking","logic","philosophy","debate"],
    "categories": [],
    "content": "→ Chinese Version\nHow to Disagree March 2008\nThe web is turning writing into a conversation. Twenty years ago, writers wrote and readers read. The web lets readers respond, and increasingly they do—in comment threads, on forums, and in their own blog posts.\nMany who respond to something disagree with it. That\u0026rsquo;s to be expected. Agreeing tends to motivate people less than disagreeing. And when you agree there\u0026rsquo;s less to say. You could expand on something the author said, but he has probably already explored the most interesting implications. When you disagree you\u0026rsquo;re entering territory he may not have explored.\nThe result is there\u0026rsquo;s a lot more disagreeing going on, especially measured by the word. That doesn\u0026rsquo;t mean people are getting angrier. The structural change in the way we communicate is enough to account for it. But though it\u0026rsquo;s not anger that\u0026rsquo;s driving the increase in disagreement, there\u0026rsquo;s a danger that the increase in disagreement will make people angrier. Particularly online, where it\u0026rsquo;s easy to say things you\u0026rsquo;d never say face to face.\nIf we\u0026rsquo;re all going to be disagreeing more, we should be careful to do it well. What does it mean to disagree well? Most readers can tell the difference between mere name-calling and a carefully reasoned refutation, but I think it would help to put names on the intermediate stages. So here\u0026rsquo;s an attempt at a disagreement hierarchy:\nDH0. Name-calling. This is the lowest form of disagreement, and probably also the most common. We\u0026rsquo;ve all seen comments like this: u r a fag!!!!!!!!!! But it\u0026rsquo;s important to realize that more articulate name-calling has just as little weight. A comment like The author is a self-important dilettante. is really nothing more than a pretentious version of \u0026ldquo;u r a fag.\u0026rdquo;\nDH1. Ad Hominem. An ad hominem attack is not quite as weak as mere name-calling. It might actually carry some weight. For example, if a senator wrote an …"
  },{
    "title": "How to Do Great Work",
    "url": "/paul_graham/essays_en/greatwork/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Do Great Work July 2023\nIf you collected lists of techniques for doing great work in a lot of different fields, what would the intersection look like? I decided to find out by making it.\nPartly my goal was to create a guide that could be used by someone working in any field. But I was also curious about the shape of the intersection. And one thing this exercise shows is that it does have a definite shape; it\u0026rsquo;s not just a point labelled \u0026ldquo;work hard.\u0026rdquo;\n",
    "description": "",
    "tags": ["great work","creativity","curiosity","originality","expertise"],
    "categories": [],
    "content": "→ 中文版本\nHow to Do Great Work July 2023\nIf you collected lists of techniques for doing great work in a lot of different fields, what would the intersection look like? I decided to find out by making it.\nPartly my goal was to create a guide that could be used by someone working in any field. But I was also curious about the shape of the intersection. And one thing this exercise shows is that it does have a definite shape; it\u0026rsquo;s not just a point labelled \u0026ldquo;work hard.\u0026rdquo;\nThe following recipe assumes you\u0026rsquo;re very ambitious.\nThe first step is to decide what to work on. The work you choose needs to have three qualities: it has to be something you have a natural aptitude for, that you have a deep interest in, and that offers scope to do great work.\nIn practice you don\u0026rsquo;t have to worry much about the third criterion. Ambitious people are if anything already too conservative about it. So all you need to do is find something you have an aptitude for and great interest in. [1]\nThat sounds straightforward, but it\u0026rsquo;s often quite difficult. When you\u0026rsquo;re young you don\u0026rsquo;t know what you\u0026rsquo;re good at or what different kinds of work are like. Some kinds of work you end up doing may not even exist yet. So while some people know what they want to do at 14, most have to figure it out.\nThe way to figure out what to work on is by working. If you\u0026rsquo;re not sure what to work on, guess. But pick something and get going. You\u0026rsquo;ll probably guess wrong some of the time, but that\u0026rsquo;s fine. It\u0026rsquo;s good to know about multiple things; some of the biggest discoveries come from noticing connections between different fields.\nDevelop a habit of working on your own projects. Don\u0026rsquo;t let \u0026ldquo;work\u0026rdquo; mean something other people tell you to do. If you do manage to do great work one day, it will probably be on a project of your own. It may be within some bigger project, but you\u0026rsquo;ll be driving your part of it.\nWhat should your projects …"
  },{
    "title": "How to Do Philosophy",
    "url": "/paul_graham/essays_en/philosophy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Do Philosophy September 2007\nIn high school I decided I was going to study philosophy in college. I had several motives, some more honorable than others. One of the less honorable was to shock people. College was regarded as job training where I grew up, so studying philosophy seemed an impressively impractical thing to do. Sort of like slashing holes in your clothes or putting a safety pin through your ear, which were other forms of impressive impracticality then just coming into fashion.\n",
    "description": "",
    "tags": ["philosophy","wisdom","thinking","language","logic","reasoning","education"],
    "categories": [],
    "content": "→ 中文版本\nHow to Do Philosophy September 2007\nIn high school I decided I was going to study philosophy in college. I had several motives, some more honorable than others. One of the less honorable was to shock people. College was regarded as job training where I grew up, so studying philosophy seemed an impressively impractical thing to do. Sort of like slashing holes in your clothes or putting a safety pin through your ear, which were other forms of impressive impracticality then just coming into fashion.\nBut I had some more honest motives as well. I thought studying philosophy would be a shortcut straight to wisdom. All the people majoring in other things would just end up with a bunch of domain knowledge. I would be learning what was really what.\nI\u0026rsquo;d tried to read a few philosophy books. Not recent ones; you wouldn\u0026rsquo;t find those in our high school library. But I tried to read Plato and Aristotle. I doubt I believed I understood them, but they sounded like they were talking about something important. I assumed I\u0026rsquo;d learn what in college.\nThe summer before senior year I took some college classes. I learned a lot in the calculus class, but I didn\u0026rsquo;t learn much in Philosophy 101. And yet my plan to study philosophy remained intact. It was my fault I hadn\u0026rsquo;t learned anything. I hadn\u0026rsquo;t read the books we were assigned carefully enough. I\u0026rsquo;d give Berkeley\u0026rsquo;s Principles of Human Knowledge another shot in college. Anything so admired and so difficult to read must have something in it, if one could only figure out what.\nTwenty-six years later, I still don\u0026rsquo;t understand Berkeley. I have a nice edition of his collected works. Will I ever read it? Seems unlikely.\nThe difference between then and now is that now I understand why Berkeley is probably not worth trying to understand. I think I see now what went wrong with philosophy, and how we might fix it.\nWords\nI did end up being a philosophy major for most of college. It didn\u0026rsquo;t …"
  },{
    "title": "How to Do What You Love",
    "url": "/paul_graham/essays_en/love/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Do What You Love January 2006\nTo do something well you have to like it. That idea is not exactly novel. We\u0026rsquo;ve got it down to four words: \u0026ldquo;Do what you love.\u0026rdquo; But it\u0026rsquo;s not enough just to tell people that. Doing what you love is complicated.\nThe very idea is foreign to what most of us learn as kids. When I was a kid, it seemed as if work and fun were opposites by definition. Life had two states: some of the time adults were making you do things, and that was called work; the rest of the time you could do what you wanted, and that was called playing. Occasionally the things adults made you do were fun, just as, occasionally, playing wasn\u0026rsquo;t — for example, if you fell and hurt yourself. But except for these few anomalous cases, work was pretty much defined as not-fun.\n",
    "description": "",
    "tags": ["career","work","passion","love","fulfillment","prestige","money","happiness","success","life_advice"],
    "categories": [],
    "content": "→ 中文版本\nHow to Do What You Love January 2006\nTo do something well you have to like it. That idea is not exactly novel. We\u0026rsquo;ve got it down to four words: \u0026ldquo;Do what you love.\u0026rdquo; But it\u0026rsquo;s not enough just to tell people that. Doing what you love is complicated.\nThe very idea is foreign to what most of us learn as kids. When I was a kid, it seemed as if work and fun were opposites by definition. Life had two states: some of the time adults were making you do things, and that was called work; the rest of the time you could do what you wanted, and that was called playing. Occasionally the things adults made you do were fun, just as, occasionally, playing wasn\u0026rsquo;t — for example, if you fell and hurt yourself. But except for these few anomalous cases, work was pretty much defined as not-fun.\nAnd it did not seem to be an accident. School, it was implied, was tedious because it was preparation for grownup work.\nThe world then was divided into two groups, grownups and kids. Grownups, like some kind of cursed race, had to work. Kids didn\u0026rsquo;t, but they did have to go to school, which was a dilute version of work meant to prepare us for the real thing. Much as we disliked school, the grownups all agreed that grownup work was worse, and that we had it easy.\nTeachers in particular all seemed to believe implicitly that work was not fun. Which is not surprising: work wasn\u0026rsquo;t fun for most of them. Why did we have to memorize state capitals instead of playing dodgeball? For the same reason they had to watch over a bunch of kids instead of lying on a beach. You couldn\u0026rsquo;t just do what you wanted.\nI\u0026rsquo;m not saying we should let little kids do whatever they want. They may have to be made to work on certain things. But if we make kids work on dull stuff, it might be wise to tell them that tediousness is not the defining quality of work, and indeed that the reason they have to work on dull stuff now is so they can work on more interesting stuff later. …"
  },{
    "title": "How to Fund a Startup",
    "url": "/paul_graham/essays_en/startupfunding/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nHow to Fund a Startup November 2005\nWant to start a startup? Get funded by Y Combinator.\nVenture funding works like gears. A typical startup goes through several rounds of funding, and at each round you want to take just enough money to reach the speed where you can shift into the next gear.\nFew startups get it quite right. Many are underfunded. A few are overfunded, which is like trying to start driving in third gear.\n",
    "description": "",
    "tags": ["venture capital","angel investors","funding","startups","entrepreneurship"],
    "categories": [],
    "content": "→ Chinese Version\nHow to Fund a Startup November 2005\nWant to start a startup? Get funded by Y Combinator.\nVenture funding works like gears. A typical startup goes through several rounds of funding, and at each round you want to take just enough money to reach the speed where you can shift into the next gear.\nFew startups get it quite right. Many are underfunded. A few are overfunded, which is like trying to start driving in third gear.\nI think it would help founders to understand funding better—not just the mechanics of it, but what investors are thinking. I was surprised recently when I realized that all the worst problems we faced in our startup were due not to competitors, but investors. Dealing with competitors was easy by comparison.\nI don\u0026rsquo;t mean to suggest that our investors were nothing but a drag on us. They were helpful in negotiating deals, for example. I mean more that conflicts with investors are particularly nasty. Competitors punch you in the jaw, but investors have you by the balls.\nApparently our situation was not unusual. And if trouble with investors is one of the biggest threats to a startup, managing them is one of the most important skills founders need to learn.Let\u0026rsquo;s start by talking about the five sources of startup funding. Then we\u0026rsquo;ll trace the life of a hypothetical (very fortunate) startup as it shifts gears through successive rounds.Friends and FamilyA lot of startups get their first funding from friends and family. Excite did, for example: after the founders graduated from college, they borrowed $15,000 from their parents to start a company. With the help of some part-time jobs they made it last 18 months.If your friends or family happen to be rich, the line blurs between them and angel investors. At Viaweb we got our first $10,000 of seed money from our friend Julian, but he was sufficiently rich that it\u0026rsquo;s hard to say whether he should be classified as a friend or angel. He was also a lawyer, which was great, …"
  },{
    "title": "How to Get New Ideas",
    "url": "/paul_graham/essays_en/getideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Get New Ideas January 2023\n(Someone fed my essays into GPT to make something that could answer questions based on them, then asked it where good ideas come from. The answer was ok, but not what I would have said. This is what I would have said.)\nThe way to get new ideas is to notice anomalies: what seems strange, or missing, or broken? You can see anomalies in everyday life (much of standup comedy is based on this), but the best place to look for them is at the frontiers of knowledge.\n",
    "description": "",
    "tags": ["ideas","creativity","innovation","knowledge","learning"],
    "categories": [],
    "content": "→ 中文版本\nHow to Get New Ideas January 2023\n(Someone fed my essays into GPT to make something that could answer questions based on them, then asked it where good ideas come from. The answer was ok, but not what I would have said. This is what I would have said.)\nThe way to get new ideas is to notice anomalies: what seems strange, or missing, or broken? You can see anomalies in everyday life (much of standup comedy is based on this), but the best place to look for them is at the frontiers of knowledge.\nKnowledge grows fractally. From a distance its edges look smooth, but when you learn enough to get close to one, you\u0026rsquo;ll notice it\u0026rsquo;s full of gaps. These gaps will seem obvious; it will seem inexplicable that no one has tried x or wondered about y. In the best case, exploring such gaps yields whole new fractal buds.\n"
  },{
    "title": "How to Get Startup Ideas",
    "url": "/paul_graham/essays_en/startupideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nHow to Get Startup Ideas November 2012\nThe way to get startup ideas is not to try to think of startup ideas. It\u0026rsquo;s to look for problems, preferably problems you have yourself.\nThe very best startup ideas tend to have three things in common: they\u0026rsquo;re something the founders themselves want, that they themselves can build, and that few others realize are worth doing. Microsoft, Apple, Yahoo, Google, and Facebook all began this way.\n",
    "description": "",
    "tags": ["startup ideas","innovation","entrepreneurship","problem solving","creativity"],
    "categories": [],
    "content": "→ Chinese Version\nHow to Get Startup Ideas November 2012\nThe way to get startup ideas is not to try to think of startup ideas. It\u0026rsquo;s to look for problems, preferably problems you have yourself.\nThe very best startup ideas tend to have three things in common: they\u0026rsquo;re something the founders themselves want, that they themselves can build, and that few others realize are worth doing. Microsoft, Apple, Yahoo, Google, and Facebook all began this way.\nProblems Why is it so important to work on a problem you have? Among other things, it ensures the problem really exists. It sounds obvious to say you should only work on problems that exist. And yet by far the most common mistake startups make is to solve problems no one has.\nI made it myself. In 1995 I started a company to put art galleries online. But galleries didn\u0026rsquo;t want to be online. It\u0026rsquo;s not how the art business works. So why did I spend 6 months working on this stupid idea? Because I didn\u0026rsquo;t pay attention to users. I invented a model of the world that didn\u0026rsquo;t correspond to reality, and worked from that. I didn\u0026rsquo;t notice my model was wrong until I tried to convince users to pay for what we\u0026rsquo;d built. Even then I took embarrassingly long to catch on. I was attached to my model of the world, and I\u0026rsquo;d spent a lot of time on the software. They had to want it!\nWhy do so many founders build things no one wants? Because they begin by trying to think of startup ideas. That m.o. is doubly dangerous: it doesn\u0026rsquo;t merely yield few good ideas; it yields bad ideas that sound plausible enough to fool you into working on them.\nAt YC we call these \u0026ldquo;made-up\u0026rdquo; or \u0026ldquo;sitcom\u0026rdquo; startup ideas. Imagine one of the characters on a TV show was starting a startup. The writers would have to invent something for it to do. But coming up with good startup ideas is hard. It\u0026rsquo;s not something you can do for the asking. So (unless they got amazingly lucky) the writers would come …"
  },{
    "title": "How to Lose Time and Money",
    "url": "/paul_graham/essays_en/selfindulgence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Lose Time and Money July 2010\nWhen we sold our startup in 1998 I suddenly got a lot of money. I now had to think about something I hadn\u0026rsquo;t had to think about before: how not to lose it. I knew it was possible to go from rich to poor, just as it was possible to go from poor to rich. But while I\u0026rsquo;d spent a lot of the past several years studying the paths from poor to rich, I knew practically nothing about the paths from rich to poor. Now, in order to avoid them, I had to learn where they were.\n",
    "description": "",
    "tags": ["time_management","money","investing","self_indulgence","productivity"],
    "categories": [],
    "content": "→ 中文版本\nHow to Lose Time and Money July 2010\nWhen we sold our startup in 1998 I suddenly got a lot of money. I now had to think about something I hadn\u0026rsquo;t had to think about before: how not to lose it. I knew it was possible to go from rich to poor, just as it was possible to go from poor to rich. But while I\u0026rsquo;d spent a lot of the past several years studying the paths from poor to rich, I knew practically nothing about the paths from rich to poor. Now, in order to avoid them, I had to learn where they were.\nSo I started to pay attention to how fortunes are lost. If you\u0026rsquo;d asked me as a kid how rich people became poor, I\u0026rsquo;d have said by spending all their money. That\u0026rsquo;s how it happens in books and movies, because that\u0026rsquo;s the colorful way to do it. But in fact the way most fortunes are lost is not through excessive expenditure, but through bad investments.\nIt\u0026rsquo;s hard to spend a fortune without noticing. Someone with ordinary tastes would find it hard to blow through more than a few tens of thousands of dollars without thinking \u0026ldquo;wow, I\u0026rsquo;m spending a lot of money.\u0026rdquo; Whereas if you start trading derivatives, you can lose a million dollars (as much as you want, really) in the blink of an eye.\nIn most people\u0026rsquo;s minds, spending money on luxuries sets off alarms that making investments doesn\u0026rsquo;t. Luxuries seem self-indulgent. And unless you got the money by inheriting it or winning a lottery, you\u0026rsquo;ve already been thoroughly trained that self-indulgence leads to trouble. Investing bypasses those alarms. You\u0026rsquo;re not spending the money; you\u0026rsquo;re just moving it from one asset to another. Which is why people trying to sell you expensive things say \u0026ldquo;it\u0026rsquo;s an investment.\u0026rdquo;\nThe solution is to develop new alarms. This can be a tricky business, because while the alarms that prevent you from overspending are so basic that they may even be in our DNA, the ones that prevent you from making bad …"
  },{
    "title": "How to Make Pittsburgh a Startup Hub",
    "url": "/paul_graham/essays_en/pgh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Make Pittsburgh a Startup Hub April 2016\n(This is a talk I gave at an event called Opt412 in Pittsburgh. Much of it will apply to other towns. But not all, because as I say in the talk, Pittsburgh has some important advantages over most would-be startup hubs.)\nWhat would it take to make Pittsburgh into a startup hub, like Silicon Valley? I understand Pittsburgh pretty well, because I grew up here, in Monroeville. And I understand Silicon Valley pretty well because that\u0026rsquo;s where I live now. Could you get that kind of startup ecosystem going here?\n",
    "description": "",
    "tags": ["startup hubs","pittsburgh","cities","entrepreneurship","innovation","universities","investors"],
    "categories": [],
    "content": "→ 中文版本\nHow to Make Pittsburgh a Startup Hub April 2016\n(This is a talk I gave at an event called Opt412 in Pittsburgh. Much of it will apply to other towns. But not all, because as I say in the talk, Pittsburgh has some important advantages over most would-be startup hubs.)\nWhat would it take to make Pittsburgh into a startup hub, like Silicon Valley? I understand Pittsburgh pretty well, because I grew up here, in Monroeville. And I understand Silicon Valley pretty well because that\u0026rsquo;s where I live now. Could you get that kind of startup ecosystem going here?\nWhen I agreed to speak here, I didn\u0026rsquo;t think I\u0026rsquo;d be able to give a very optimistic talk. I thought I\u0026rsquo;d be talking about what Pittsburgh could do to become a startup hub, very much in the subjunctive. Instead I\u0026rsquo;m going to talk about what Pittsburgh can do.\nWhat changed my mind was an article I read in, of all places, the New York Times food section. The title was \u0026ldquo;Pittsburgh\u0026rsquo;s Youth-Driven Food Boom.\u0026rdquo; To most people that might not even sound interesting, let alone something related to startups. But it was electrifying to me to read that title. I don\u0026rsquo;t think I could pick a more promising one if I tried. And when I read the article I got even more excited. It said \u0026ldquo;people ages 25 to 29 now make up 7.6 percent of all residents, up from 7 percent about a decade ago.\u0026rdquo; Wow, I thought, Pittsburgh could be the next Portland. It could become the cool place all the people in their twenties want to go live.\nWhen I got here a couple days ago, I could feel the difference. I lived here from 1968 to 1984. I didn\u0026rsquo;t realize it at the time, but during that whole period the city was in free fall. On top of the flight to the suburbs that happened everywhere, the steel and nuclear businesses were both dying. Boy are things different now. It\u0026rsquo;s not just that downtown seems a lot more prosperous. There is an energy here that was not here when I was a kid.\nWhen …"
  },{
    "title": "How to Make Wealth",
    "url": "/paul_graham/essays_en/wealth/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Make Wealth May 2004\n(This essay was originally published in Hackers \u0026amp; Painters.)\nWant to start a startup? Get funded by Y Combinator.\nIf you wanted to get rich, how would you do it? I think your best bet would be to start or join a startup. That\u0026rsquo;s been a reliable way to get rich for hundreds of years. The word \u0026ldquo;startup\u0026rdquo; dates from the 1960s, but what happens in one is very similar to the venture-backed trading voyages of the Middle Ages.\n",
    "description": "",
    "tags": ["wealth creation","startups","technology","economics","business","innovation"],
    "categories": [],
    "content": "→ 中文版本\nHow to Make Wealth May 2004\n(This essay was originally published in Hackers \u0026amp; Painters.)\nWant to start a startup? Get funded by Y Combinator.\nIf you wanted to get rich, how would you do it? I think your best bet would be to start or join a startup. That\u0026rsquo;s been a reliable way to get rich for hundreds of years. The word \u0026ldquo;startup\u0026rdquo; dates from the 1960s, but what happens in one is very similar to the venture-backed trading voyages of the Middle Ages.\nStartups usually involve technology, so much so that the phrase \u0026ldquo;high-tech startup\u0026rdquo; is almost redundant. A startup is a small company that takes on a hard technical problem.\nLots of people get rich knowing nothing more than that. You don\u0026rsquo;t have to know physics to be a good pitcher. But I think it could give you an edge to understand the underlying principles. Why do startups have to be small? Will a startup inevitably stop being a startup as it grows larger? And why do they so often work on developing new technology? Why are there so many startups selling new drugs or computer software, and none selling corn oil or laundry detergent?\nThe Proposition Economically, you can think of a startup as a way to compress your whole working life into a few years. Instead of working at a low intensity for forty years, you work as hard as you possibly can for four. This pays especially well in technology, where you earn a premium for working fast.\nHere is a brief sketch of the economic proposition. If you\u0026rsquo;re a good hacker in your mid twenties, you can get a job paying about $80,000 per year. So on average such a hacker must be able to do at least $80,000 worth of work per year for the company just to break even. You could probably work twice as many hours as a corporate employee, and if you focus you can probably get three times as much done in an hour. [1] You should get another multiple of two, at least, by eliminating the drag of the pointy-haired middle manager who would be your …"
  },{
    "title": "How to Present to Investors",
    "url": "/paul_graham/essays_en/investors/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Present to Investors August 2006\nWant to start a startup? Get funded by Y Combinator.\nIn a few days it will be Demo Day, when the startups we funded this summer present to investors. Y Combinator funds startups twice a year, in January and June. Ten weeks later we invite all the investors we know to hear them present what they\u0026rsquo;ve built so far.\nTen weeks is not much time. The average startup probably doesn\u0026rsquo;t have much to show for itself after ten weeks. But the average startup fails. When you look at the ones that went on to do great things, you find a lot that began with someone pounding out a prototype in a week or two of nonstop work. Startups are a counterexample to the rule that haste makes waste.\n",
    "description": "",
    "tags": ["investors","presentation","startups","funding","pitch","advice"],
    "categories": [],
    "content": "→ 中文版本\nHow to Present to Investors August 2006\nWant to start a startup? Get funded by Y Combinator.\nIn a few days it will be Demo Day, when the startups we funded this summer present to investors. Y Combinator funds startups twice a year, in January and June. Ten weeks later we invite all the investors we know to hear them present what they\u0026rsquo;ve built so far.\nTen weeks is not much time. The average startup probably doesn\u0026rsquo;t have much to show for itself after ten weeks. But the average startup fails. When you look at the ones that went on to do great things, you find a lot that began with someone pounding out a prototype in a week or two of nonstop work. Startups are a counterexample to the rule that haste makes waste.\n(Too much money seems to be as bad for startups as too much time, so we don\u0026rsquo;t give them much money either.)\nA week before Demo Day, we have a dress rehearsal called Rehearsal Day. At other Y Combinator events we allow outside guests, but not at Rehearsal Day. No one except the other founders gets to see the rehearsals.\nThe presentations on Rehearsal Day are often pretty rough. But this is to be expected. We try to pick founders who are good at building things, not ones who are slick presenters. Some of the founders are just out of college, or even still in it, and have never spoken to a group of people they didn\u0026rsquo;t already know.\nSo we concentrate on the basics. On Demo Day each startup will only get ten minutes, so we encourage them to focus on just two goals: (a) explain what you\u0026rsquo;re doing, and (b) explain why users will want it.\nThat might sound easy, but it\u0026rsquo;s not when the speakers have no experience presenting, and they\u0026rsquo;re explaining technical matters to an audience that\u0026rsquo;s mostly non-technical.\nThis situation is constantly repeated when startups present to investors: people who are bad at explaining, talking to people who are bad at understanding. Practically every successful startup, including stars like …"
  },{
    "title": "How to Raise Money",
    "url": "/paul_graham/essays_en/fr/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Raise Money Want to start a startup? Get funded by Y Combinator.\nSeptember 2013\nMost startups that raise money do it more than once. A typical trajectory might be (1) to get started with a few tens of thousands from something like Y Combinator or individual angels, then (2) raise a few hundred thousand to a few million to build the company, and then (3) once the company is clearly succeeding, raise one or more later rounds to accelerate growth.\n",
    "description": "",
    "tags": ["fundraising","investors","startups","money","YC"],
    "categories": [],
    "content": "→ 中文版本\nHow to Raise Money Want to start a startup? Get funded by Y Combinator.\nSeptember 2013\nMost startups that raise money do it more than once. A typical trajectory might be (1) to get started with a few tens of thousands from something like Y Combinator or individual angels, then (2) raise a few hundred thousand to a few million to build the company, and then (3) once the company is clearly succeeding, raise one or more later rounds to accelerate growth.\nReality can be messier. Some companies raise money twice in phase 2. Others skip phase 1 and go straight to phase 2. And at Y Combinator we get an increasing number of companies that have already raised amounts in the hundreds of thousands. But the three phase path is at least the one about which individual startups\u0026rsquo; paths oscillate.\nThis essay focuses on phase 2 fundraising. That\u0026rsquo;s the type the startups we fund are doing on Demo Day, and this essay is the advice we give them.\nForces Fundraising is hard in both senses: hard like lifting a heavy weight, and hard like solving a puzzle. It\u0026rsquo;s hard like lifting a weight because it\u0026rsquo;s intrinsically hard to convince people to part with large sums of money. That problem is irreducible; it should be hard. But much of the other kind of difficulty can be eliminated. Fundraising only seems a puzzle because it\u0026rsquo;s an alien world to most founders, and I hope to fix that by supplying a map through it.\nTo founders, the behavior of investors is often opaque — partly because their motivations are obscure, but partly because they deliberately mislead you. And the misleading ways of investors combine horribly with the wishful thinking of inexperienced founders. At YC we\u0026rsquo;re always warning founders about this danger, and investors are probably more circumspect with YC startups than with other companies they talk to, and even so we witness a constant series of explosions as these two volatile components combine. [1]\nIf you\u0026rsquo;re an inexperienced …"
  },{
    "title": "How to Start a Startup",
    "url": "/paul_graham/essays_en/start/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Start a Startup Want to start a startup? Get funded by Y Combinator.\nMarch 2005\n(This essay is derived from a talk at the Harvard Computer Society.)\nYou need three things to create a successful startup: to start with good people, to make something customers actually want, and to spend as little money as possible. Most startups that fail do it because they fail at one of these. A startup that does all three will probably succeed.\n",
    "description": "",
    "tags": ["startups","entrepreneurship","business","funding","innovation","technology"],
    "categories": [],
    "content": "→ 中文版本\nHow to Start a Startup Want to start a startup? Get funded by Y Combinator.\nMarch 2005\n(This essay is derived from a talk at the Harvard Computer Society.)\nYou need three things to create a successful startup: to start with good people, to make something customers actually want, and to spend as little money as possible. Most startups that fail do it because they fail at one of these. A startup that does all three will probably succeed.\nAnd that\u0026rsquo;s kind of exciting, when you think about it, because all three are doable. Hard, but doable. And since a startup that succeeds ordinarily makes its founders rich, that implies getting rich is doable too. Hard, but doable.\nIf there is one message I\u0026rsquo;d like to get across about startups, that\u0026rsquo;s it. There is no magically difficult step that requires brilliance to solve.\nThe Idea In particular, you don\u0026rsquo;t need a brilliant idea to start a startup around. The way a startup makes money is to offer people better technology than they have now. But what people have now is often so bad that it doesn\u0026rsquo;t take brilliance to do better.\nGoogle\u0026rsquo;s plan, for example, was simply to create a search site that didn\u0026rsquo;t suck. They had three new ideas: index more of the Web, use links to rank search results, and have clean, simple web pages with unintrusive keyword-based ads. Above all, they were determined to make a site that was good to use. No doubt there are great technical tricks within Google, but the overall plan was straightforward. And while they probably have bigger ambitions now, this alone brings them a billion dollars a year. [1]\nThere are plenty of other areas that are just as backward as search was before Google. I can think of several heuristics for generating ideas for startups, but most reduce to this: look at something people are trying to do, and figure out how to do it in a way that doesn\u0026rsquo;t suck.\nFor example, dating sites currently suck far worse than search did before Google. They …"
  },{
    "title": "How to Start Google",
    "url": "/paul_graham/essays_en/google/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Start Google March 2024\n(This is a talk I gave to 14 and 15 year olds about what to do now if they might want to start a startup later. Lots of schools think they should tell students something about startups. This is what I think they should tell them.)\nMost of you probably think that when you\u0026rsquo;re released into the so-called real world you\u0026rsquo;ll eventually have to get some kind of job. That\u0026rsquo;s not true, and today I\u0026rsquo;m going to talk about a trick you can use to avoid ever having to get a job.\n",
    "description": "",
    "tags": ["startups","google","projects","cofounders","education"],
    "categories": [],
    "content": "→ 中文版本\nHow to Start Google March 2024\n(This is a talk I gave to 14 and 15 year olds about what to do now if they might want to start a startup later. Lots of schools think they should tell students something about startups. This is what I think they should tell them.)\nMost of you probably think that when you\u0026rsquo;re released into the so-called real world you\u0026rsquo;ll eventually have to get some kind of job. That\u0026rsquo;s not true, and today I\u0026rsquo;m going to talk about a trick you can use to avoid ever having to get a job.\nThe trick is to start your own company. So it\u0026rsquo;s not a trick for avoiding work, because if you start your own company you\u0026rsquo;ll work harder than you would if you had an ordinary job. But you will avoid many of the annoying things that come with a job, including a boss telling you what to do.\nIt\u0026rsquo;s more exciting to work on your own project than someone else\u0026rsquo;s. And you can also get a lot richer. In fact, this is the standard way to get really rich. If you look at the lists of the richest people that occasionally get published in the press, nearly all of them did it by starting their own companies.\nStarting your own company can mean anything from starting a barber shop to starting Google. I\u0026rsquo;m here to talk about one extreme end of that continuum. I\u0026rsquo;m going to tell you how to start Google.\nThe companies at the Google end of the continuum are called startups when they\u0026rsquo;re young. The reason I know about them is that my wife Jessica and I started something called Y Combinator that is basically a startup factory. Since 2005, Y Combinator has funded over 4000 startups. So we know exactly what you need to start a startup, because we\u0026rsquo;ve helped people do it for the last 19 years.\nYou might have thought I was joking when I said I was going to tell you how to start Google. You might be thinking \u0026ldquo;How could we start Google?\u0026rdquo; But that\u0026rsquo;s effectively what the people who did start Google were thinking before …"
  },{
    "title": "How to Think for Yourself",
    "url": "/paul_graham/essays_en/think/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Think for Yourself November 2020\nThere are some kinds of work that you can\u0026rsquo;t do well without thinking differently from your peers. To be a successful scientist, for example, it\u0026rsquo;s not enough just to be correct. Your ideas have to be both correct and novel. You can\u0026rsquo;t publish papers saying things other people already know. You need to say things no one else has realized yet.\nThe same is true for investors. It\u0026rsquo;s not enough for a public market investor to predict correctly how a company will do. If a lot of other people make the same prediction, the stock price will already reflect it, and there\u0026rsquo;s no room to make money. The only valuable insights are the ones most other investors don\u0026rsquo;t share.\n",
    "description": "",
    "tags": ["independent thinking","curiosity","originality","conformity","innovation","ideas"],
    "categories": [],
    "content": "→ 中文版本\nHow to Think for Yourself November 2020\nThere are some kinds of work that you can\u0026rsquo;t do well without thinking differently from your peers. To be a successful scientist, for example, it\u0026rsquo;s not enough just to be correct. Your ideas have to be both correct and novel. You can\u0026rsquo;t publish papers saying things other people already know. You need to say things no one else has realized yet.\nThe same is true for investors. It\u0026rsquo;s not enough for a public market investor to predict correctly how a company will do. If a lot of other people make the same prediction, the stock price will already reflect it, and there\u0026rsquo;s no room to make money. The only valuable insights are the ones most other investors don\u0026rsquo;t share.\nYou see this pattern with startup founders too. You don\u0026rsquo;t want to start a startup to do something that everyone agrees is a good idea, or there will already be other companies doing it. You have to do something that sounds to most other people like a bad idea, but that you know isn\u0026rsquo;t — like writing software for a tiny computer used by a few thousand hobbyists, or starting a site to let people rent airbeds on strangers\u0026rsquo; floors.\nDitto for essayists. An essay that told people things they already knew would be boring. You have to tell them something new.\nBut this pattern isn\u0026rsquo;t universal. In fact, it doesn\u0026rsquo;t hold for most kinds of work. In most kinds of work — to be an administrator, for example — all you need is the first half. All you need is to be right. It\u0026rsquo;s not essential that everyone else be wrong.\nThere\u0026rsquo;s room for a little novelty in most kinds of work, but in practice there\u0026rsquo;s a fairly sharp distinction between the kinds of work where it\u0026rsquo;s essential to be independent-minded, and the kinds where it\u0026rsquo;s not.\nI wish someone had told me about this distinction when I was a kid, because it\u0026rsquo;s one of the most important things to think about when you\u0026rsquo;re deciding what kind …"
  },{
    "title": "How to Work Hard",
    "url": "/paul_graham/essays_en/hwh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow to Work Hard June 2021\nIt might not seem there\u0026rsquo;s much to learn about how to work hard. Anyone who\u0026rsquo;s been to school knows what it entails, even if they chose not to do it. There are 12 year olds who work amazingly hard. And yet when I ask if I know more about working hard now than when I was in school, the answer is definitely yes.\n",
    "description": "",
    "tags": ["hard work","productivity","success","work ethic","motivation","discipline","personal development"],
    "categories": [],
    "content": "→ 中文版本\nHow to Work Hard June 2021\nIt might not seem there\u0026rsquo;s much to learn about how to work hard. Anyone who\u0026rsquo;s been to school knows what it entails, even if they chose not to do it. There are 12 year olds who work amazingly hard. And yet when I ask if I know more about working hard now than when I was in school, the answer is definitely yes.\nOne thing I know is that if you want to do great things, you\u0026rsquo;ll have to work very hard. I wasn\u0026rsquo;t sure of that as a kid. Schoolwork varied in difficulty; one didn\u0026rsquo;t always have to work super hard to do well. And some of the things famous adults did, they seemed to do almost effortlessly. Was there, perhaps, some way to evade hard work through sheer brilliance? Now I know the answer to that question. There isn\u0026rsquo;t.\nThe reason some subjects seemed easy was that my school had low standards. And the reason famous adults seemed to do things effortlessly was years of practice; they made it look easy.\nOf course, those famous adults usually had a lot of natural ability too. There are three ingredients in great work: natural ability, practice, and effort. You can do pretty well with just two, but to do the best work you need all three: you need great natural ability and to have practiced a lot and to be trying very hard. [1]\nBill Gates, for example, was among the smartest people in business in his era, but he was also among the hardest working. \u0026ldquo;I never took a day off in my twenties,\u0026rdquo; he said. \u0026ldquo;Not one.\u0026rdquo; It was similar with Lionel Messi. He had great natural ability, but when his youth coaches talk about him, what they remember is not his talent but his dedication and his desire to win. P. G. Wodehouse would probably get my vote for best English writer of the 20th century, if I had to choose. Certainly no one ever made it look easier. But no one ever worked harder. At 74, he wrote\nwith each new book of mine I have, as I say, the feeling that this time I have picked a lemon in the …"
  },{
    "title": "How Y Combinator Started",
    "url": "/paul_graham/essays_en/ycstart/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nHow Y Combinator Started March 2012\nY Combinator\u0026rsquo;s 7th birthday was March 11. As usual we were so busy we didn\u0026rsquo;t notice till a few days after. I don\u0026rsquo;t think we\u0026rsquo;ve ever managed to remember our birthday on our birthday.\nOn March 11 2005, Jessica and I were walking home from dinner in Harvard Square. Jessica was working at an investment bank at the time, but she didn\u0026rsquo;t like it much, so she had interviewed for a job as director of marketing at a Boston VC fund. The VC fund was doing what now seems a comically familiar thing for a VC fund to do: taking a long time to make up their mind.\n",
    "description": "",
    "tags": ["Y Combinator","startups","founding","history","angel investing","Silicon Valley"],
    "categories": [],
    "content": "→ 中文版\nHow Y Combinator Started March 2012\nY Combinator\u0026rsquo;s 7th birthday was March 11. As usual we were so busy we didn\u0026rsquo;t notice till a few days after. I don\u0026rsquo;t think we\u0026rsquo;ve ever managed to remember our birthday on our birthday.\nOn March 11 2005, Jessica and I were walking home from dinner in Harvard Square. Jessica was working at an investment bank at the time, but she didn\u0026rsquo;t like it much, so she had interviewed for a job as director of marketing at a Boston VC fund. The VC fund was doing what now seems a comically familiar thing for a VC fund to do: taking a long time to make up their mind.\nMeanwhile I had been telling Jessica all the things they should change about the VC business — essentially the ideas now underlying Y Combinator: investors should be making more, smaller investments, they should be funding hackers instead of suits, they should be willing to fund younger founders, etc.\nAt the time I had been thinking about doing some angel investing. I had just given a talk to the undergraduate computer club at Harvard about how to start a startup, and it hit me afterward that although I had always meant to do angel investing, 7 years had now passed since I got enough money to do it, and I still hadn\u0026rsquo;t started. I had also been thinking about ways to work with Robert Morris and Trevor Blackwell again. A few hours before I had sent them an email trying to figure out what we could do together.\nBetween Harvard Square and my house the idea gelled. We\u0026rsquo;d start our own investment firm and Jessica could work for that instead. As we turned onto Walker Street we decided to do it. I agreed to put $100k into the new fund and Jessica agreed to quit her job to work for it. Over the next couple days I recruited Robert and Trevor, who put in another $50k each. So YC started with $200k.\nJessica was so happy to be able to quit her job and start her own company that I took her picture when we got home.\nThe company wasn\u0026rsquo;t called Y …"
  },{
    "title": "How You Know",
    "url": "/paul_graham/essays_en/know/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nHow You Know December 2014\nI\u0026rsquo;ve read Villehardouin\u0026rsquo;s chronicle of the Fourth Crusade at least two times, maybe three. And yet if I had to write down everything I remember from it, I doubt it would amount to much more than a page. Multiply this times several hundred, and I get an uneasy feeling when I look at my bookshelves. What use is it to read all these books if I remember so little from them?\n",
    "description": "",
    "tags": ["knowledge","learning","memory","reading","experience","mental_models","education"],
    "categories": [],
    "content": "→ 中文版本\nHow You Know December 2014\nI\u0026rsquo;ve read Villehardouin\u0026rsquo;s chronicle of the Fourth Crusade at least two times, maybe three. And yet if I had to write down everything I remember from it, I doubt it would amount to much more than a page. Multiply this times several hundred, and I get an uneasy feeling when I look at my bookshelves. What use is it to read all these books if I remember so little from them?\nA few months ago, as I was reading Constance Reid\u0026rsquo;s excellent biography of Hilbert, I figured out if not the answer to this question, at least something that made me feel better about it. She writes:\nHilbert had no patience with mathematical lectures which filled the students with facts but did not teach them how to frame a problem and solve it. He often used to tell them that \u0026ldquo;a perfect formulation of a problem is already half its solution.\u0026rdquo;\nThat has always seemed to me an important point, and I was even more convinced of it after hearing it confirmed by Hilbert. But how had I come to believe in this idea in the first place? A combination of my own experience and other things I\u0026rsquo;d read. None of which I could at that moment remember! And eventually I\u0026rsquo;d forget that Hilbert had confirmed it too. But my increased belief in the importance of this idea would remain something I\u0026rsquo;d learned from this book, even after I\u0026rsquo;d forgotten I\u0026rsquo;d learned it.\nReading and experience train your model of the world. And even if you forget the experience or what you read, its effect on your model of the world persists. Your mind is like a compiled program you\u0026rsquo;ve lost the source of. It works, but you don\u0026rsquo;t know why.\nThe place to look for what I learned from Villehardouin\u0026rsquo;s chronicle is not what I remember from it, but my mental models of the crusades, Venice, medieval culture, siege warfare, and so on. Which doesn\u0026rsquo;t mean I couldn\u0026rsquo;t have read more attentively, but at least the harvest of reading is not so …"
  },{
    "title": "Ideas for Startups",
    "url": "/paul_graham/essays_en/ideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nIdeas for Startups Want to start a startup? Get funded by Y Combinator.\nOctober 2005\n(This essay is derived from a talk at the 2005 Startup School.)\nHow do you get good ideas for startups? That\u0026rsquo;s probably the number one question people ask me.\nI\u0026rsquo;d like to reply with another question: why do people think it\u0026rsquo;s hard to come up with ideas for startups?\nThat might seem a stupid thing to ask. Why do they think it\u0026rsquo;s hard? If people can\u0026rsquo;t do it, then it is hard, at least for them. Right?\n",
    "description": "",
    "tags": ["startups","ideas","entrepreneurship","innovation","business strategy","Y Combinator","problem solving"],
    "categories": [],
    "content": "→ 中文版本\nIdeas for Startups Want to start a startup? Get funded by Y Combinator.\nOctober 2005\n(This essay is derived from a talk at the 2005 Startup School.)\nHow do you get good ideas for startups? That\u0026rsquo;s probably the number one question people ask me.\nI\u0026rsquo;d like to reply with another question: why do people think it\u0026rsquo;s hard to come up with ideas for startups?\nThat might seem a stupid thing to ask. Why do they think it\u0026rsquo;s hard? If people can\u0026rsquo;t do it, then it is hard, at least for them. Right?\nWell, maybe not. What people usually say is not that they can\u0026rsquo;t think of ideas, but that they don\u0026rsquo;t have any. That\u0026rsquo;s not quite the same thing. It could be the reason they don\u0026rsquo;t have any is that they haven\u0026rsquo;t tried to generate them.\nI think this is often the case. I think people believe that coming up with ideas for startups is very hard\u0026ndash; that it must be very hard\u0026ndash; and so they don\u0026rsquo;t try do to it. They assume ideas are like miracles: they either pop into your head or they don\u0026rsquo;t.\nI also have a theory about why people think this. They overvalue ideas. They think creating a startup is just a matter of implementing some fabulous initial idea. And since a successful startup is worth millions of dollars, a good idea is therefore a million dollar idea.\nIf coming up with an idea for a startup equals coming up with a million dollar idea, then of course it\u0026rsquo;s going to seem hard. Too hard to bother trying. Our instincts tell us something so valuable would not be just lying around for anyone to discover.\nActually, startup ideas are not million dollar ideas, and here\u0026rsquo;s an experiment you can try to prove it: just try to sell one. Nothing evolves faster than markets. The fact that there\u0026rsquo;s no market for startup ideas suggests there\u0026rsquo;s no demand. Which means, in the narrow sense of the word, that startup ideas are worthless.\nQuestions The fact is, most startups end up nothing like the initial idea. …"
  },{
    "title": "If Lisp is So Great",
    "url": "/paul_graham/essays_en/iflisp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nIf Lisp is So Great May 2003\nIf Lisp is so great, why don\u0026rsquo;t more people use it? I was asked this question by a student in the audience at a talk I gave recently. Not for the first time, either.\nIn languages, as in so many things, there\u0026rsquo;s not much correlation between popularity and quality. Why does John Grisham (King of Torts sales rank, 44) outsell Jane Austen (Pride and Prejudice sales rank, 6191)? Would even Grisham claim that it\u0026rsquo;s because he\u0026rsquo;s a better writer?\n",
    "description": "",
    "tags": ["Lisp","programming languages","software development","technology","innovation","popularity"],
    "categories": [],
    "content": "→ Chinese Version\nIf Lisp is So Great May 2003\nIf Lisp is so great, why don\u0026rsquo;t more people use it? I was asked this question by a student in the audience at a talk I gave recently. Not for the first time, either.\nIn languages, as in so many things, there\u0026rsquo;s not much correlation between popularity and quality. Why does John Grisham (King of Torts sales rank, 44) outsell Jane Austen (Pride and Prejudice sales rank, 6191)? Would even Grisham claim that it\u0026rsquo;s because he\u0026rsquo;s a better writer?\nHere\u0026rsquo;s the first sentence of Pride and Prejudice: \u0026ldquo;It is a truth universally acknowledged, that a single man in possession of a good fortune must be in want of a wife.\u0026rdquo;\n\u0026ldquo;It is a truth universally acknowledged?\u0026rdquo; Long words for the first sentence of a love story.\nLike Jane Austen, Lisp looks hard. Its syntax, or lack of syntax, makes it look completely unlike the languages most people are used to. Before I learned Lisp, I was afraid of it too. I recently came across a notebook from 1983 in which I\u0026rsquo;d written: \u0026ldquo;I suppose I should learn Lisp, but it seems so foreign.\u0026rdquo; Fortunately, I was 19 at the time and not too resistant to learning new things. I was so ignorant that learning almost anything meant learning new things.\nPeople frightened by Lisp make up other reasons for not using it. The standard excuse, back when C was the default language, was that Lisp was too slow. Now that Lisp dialects are among the faster languages available, that excuse has gone away. Now the standard excuse is openly circular: that other languages are more popular.\n(Beware of such reasoning. It gets you Windows.)\nPopularity is always self-perpetuating, but it\u0026rsquo;s especially so in programming languages. More libraries get written for popular languages, which makes them still more popular. Programs often have to work with existing programs, and this is easier if they\u0026rsquo;re written in the same language, so languages spread from program to …"
  },{
    "title": "Inequality",
    "url": "/paul_graham/essays_en/inequality/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nInequality August 2005\n(This essay is derived from a talk at Defcon 2005.)\nSuppose you wanted to get rid of economic inequality. There are two ways to do it: give money to the poor, or take it away from the rich. But they amount to the same thing, because if you want to give money to the poor, you have to get it from somewhere. You can\u0026rsquo;t get it from the poor, or they just end up where they started. You have to get it from the rich.\n",
    "description": "",
    "tags": ["inequality","risk","startups","economics","wealth","growth"],
    "categories": [],
    "content": "→ 中文版本\nInequality August 2005\n(This essay is derived from a talk at Defcon 2005.)\nSuppose you wanted to get rid of economic inequality. There are two ways to do it: give money to the poor, or take it away from the rich. But they amount to the same thing, because if you want to give money to the poor, you have to get it from somewhere. You can\u0026rsquo;t get it from the poor, or they just end up where they started. You have to get it from the rich.\nThere is of course a way to make the poor richer without simply shifting money from the rich. You could help the poor become more productive — for example, by improving access to education. Instead of taking money from engineers and giving it to checkout clerks, you could enable people who would have become checkout clerks to become engineers.\nThis is an excellent strategy for making the poor richer. But the evidence of the last 200 years shows that it doesn\u0026rsquo;t reduce economic inequality, because it makes the rich richer too. If there are more engineers, then there are more opportunities to hire them and to sell them things. Henry Ford couldn\u0026rsquo;t have made a fortune building cars in a society in which most people were still subsistence farmers; he would have had neither workers nor customers.\nIf you want to reduce economic inequality instead of just improving the overall standard of living, it\u0026rsquo;s not enough just to raise up the poor. What if one of your newly minted engineers gets ambitious and goes on to become another Bill Gates? Economic inequality will be as bad as ever. If you actually want to compress the gap between rich and poor, you have to push down on the top as well as pushing up on the bottom.\nHow do you push down on the top? You could try to decrease the productivity of the people who make the most money: make the best surgeons operate with their left hands, force popular actors to overeat, and so on. But this approach is hard to implement. The only practical solution is to let people do the best …"
  },{
    "title": "Introduction to ANSI Common Lisp",
    "url": "/paul_graham/essays_en/acl1txtt1748944359/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nIntroduction to ANSI Common Lisp Introduction to ANSI Common Lisp\n(This is the first chapter of ANSI Common Lisp, by Paul Graham. Copyright 1995, Prentice-Hall.)\nIntroduction John McCarthy and his students began work on the first Lisp implementation in 1958. After Fortran, Lisp is the oldest language still in use. [1] What\u0026rsquo;s more remarkable is that it is still in the forefront of programming language technology. Programmers who know Lisp will tell you, there is something about this language that sets it apart.\n",
    "description": "",
    "tags": ["lisp","programming","ansi common lisp","introduction","technology"],
    "categories": [],
    "content": "→ 中文版本\nIntroduction to ANSI Common Lisp Introduction to ANSI Common Lisp\n(This is the first chapter of ANSI Common Lisp, by Paul Graham. Copyright 1995, Prentice-Hall.)\nIntroduction John McCarthy and his students began work on the first Lisp implementation in 1958. After Fortran, Lisp is the oldest language still in use. [1] What\u0026rsquo;s more remarkable is that it is still in the forefront of programming language technology. Programmers who know Lisp will tell you, there is something about this language that sets it apart.\nPart of what makes Lisp distinctive is that it is designed to evolve. You can use Lisp to define new Lisp operators. As new abstractions become popular (object-oriented programming, for example), it always turns out to be easy to implement them in Lisp. Like DNA, such a language does not go out of style.\nNew Tools Why learn Lisp? Because it lets you do things that you can\u0026rsquo;t do in other languages. If you just wanted to write a function to return the sum of the numbers less than n, say, it would look much the same in Lisp and C:\n; Lisp (defun sum (n) (let ((s 0)) (dotimes (i n s) (incf s i)))) /* C */ int sum(int n){ int i, s = 0; for(i = 0; i \u0026lt; n; i++) s += i; return(s); } If you only need to do such simple things, it doesn\u0026rsquo;t really matter which language you use. Suppose instead you want to write a function that takes a number n, and returns a function that adds n to its argument:\n; Lisp (defun addn (n) #\u0026#39;(lambda (x) (+ x n))) What does addn look like in C? You just can\u0026rsquo;t write it.\nYou might be wondering, when does one ever want to do things like this? Programming languages teach you not to want what they cannot provide. You have to think in a language to write programs in it, and it\u0026rsquo;s hard to want something you can\u0026rsquo;t describe. When I first started writing programs\u0026ndash; in Basic\u0026ndash; I didn\u0026rsquo;t miss recursion, because I didn\u0026rsquo;t know there was such a thing. I thought in Basic. I could only conceive …"
  },{
    "title": "Investor Herd Dynamics",
    "url": "/paul_graham/essays_en/herd/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nInvestor Herd Dynamics August 2013\nThe biggest component in most investors\u0026rsquo; opinion of you is the opinion of other investors. Which is of course a recipe for exponential growth. When one investor wants to invest in you, that makes other investors want to, which makes others want to, and so on.\nSometimes inexperienced founders mistakenly conclude that manipulating these forces is the essence of fundraising. They hear stories about stampedes to invest in successful startups, and think it\u0026rsquo;s therefore the mark of a successful startup to have this happen. But actually the two are not that highly correlated. Lots of startups that cause stampedes end up flaming out (in extreme cases, partly as a result of the stampede), and lots of very successful startups were only moderately popular with investors the first time they raised money.\n",
    "description": "",
    "tags": ["investors","herd behavior","fundraising","venture capital","psychology"],
    "categories": [],
    "content": "→ 中文版本\nInvestor Herd Dynamics August 2013\nThe biggest component in most investors\u0026rsquo; opinion of you is the opinion of other investors. Which is of course a recipe for exponential growth. When one investor wants to invest in you, that makes other investors want to, which makes others want to, and so on.\nSometimes inexperienced founders mistakenly conclude that manipulating these forces is the essence of fundraising. They hear stories about stampedes to invest in successful startups, and think it\u0026rsquo;s therefore the mark of a successful startup to have this happen. But actually the two are not that highly correlated. Lots of startups that cause stampedes end up flaming out (in extreme cases, partly as a result of the stampede), and lots of very successful startups were only moderately popular with investors the first time they raised money.\nSo the point of this essay is not to explain how to create a stampede, but merely to explain the forces that generate them. These forces are always at work to some degree in fundraising, and they can cause surprising situations. If you understand them, you can at least avoid being surprised.\nOne reason investors like you more when other investors like you is that you actually become a better investment. Raising money decreases the risk of failure. Indeed, although investors hate it, you are for this reason justified in raising your valuation for later investors. The investors who invested when you had no money were taking more risk, and are entitled to higher returns. Plus a company that has raised money is literally more valuable. After you raise the first million dollars, the company is at least a million dollars more valuable, because it\u0026rsquo;s the same company as before, plus it has a million dollars in the bank. [1]\nBeware, though, because later investors so hate to have the price raised on them that they resist even this self-evident reasoning. Only raise the price on an investor you\u0026rsquo;re comfortable with losing, …"
  },{
    "title": "Is It Worth Being Wise?",
    "url": "/paul_graham/essays_en/wisdom/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nIs It Worth Being Wise? February 2007\nA few days ago I finally figured out something I\u0026rsquo;ve wondered about for 25 years: the relationship between wisdom and intelligence. Anyone can see they\u0026rsquo;re not the same by the number of people who are smart, but not very wise. And yet intelligence and wisdom do seem related. How?\nWhat is wisdom? I\u0026rsquo;d say it\u0026rsquo;s knowing what to do in a lot of situations. I\u0026rsquo;m not trying to make a deep point here about the true nature of wisdom, just to figure out how we use the word. A wise person is someone who usually knows the right thing to do.\n",
    "description": "",
    "tags": ["wisdom","intelligence","philosophy","education","psychology"],
    "categories": [],
    "content": "→ 中文版\nIs It Worth Being Wise? February 2007\nA few days ago I finally figured out something I\u0026rsquo;ve wondered about for 25 years: the relationship between wisdom and intelligence. Anyone can see they\u0026rsquo;re not the same by the number of people who are smart, but not very wise. And yet intelligence and wisdom do seem related. How?\nWhat is wisdom? I\u0026rsquo;d say it\u0026rsquo;s knowing what to do in a lot of situations. I\u0026rsquo;m not trying to make a deep point here about the true nature of wisdom, just to figure out how we use the word. A wise person is someone who usually knows the right thing to do.\nAnd yet isn\u0026rsquo;t being smart also knowing what to do in certain situations? For example, knowing what to do when the teacher tells your elementary school class to add all the numbers from 1 to 100? [1]\nSome say wisdom and intelligence apply to different types of problems—wisdom to human problems and intelligence to abstract ones. But that isn\u0026rsquo;t true. Some wisdom has nothing to do with people: for example, the wisdom of the engineer who knows certain structures are less prone to failure than others. And certainly smart people can find clever solutions to human problems as well as abstract ones. [2]\nAnother popular explanation is that wisdom comes from experience while intelligence is innate. But people are not simply wise in proportion to how much experience they have. Other things must contribute to wisdom besides experience, and some may be innate: a reflective disposition, for example.\nNeither of the conventional explanations of the difference between wisdom and intelligence stands up to scrutiny. So what is the difference? If we look at how people use the words \u0026ldquo;wise\u0026rdquo; and \u0026ldquo;smart,\u0026rdquo; what they seem to mean is different shapes of performance.\nCurve \u0026ldquo;Wise\u0026rdquo; and \u0026ldquo;smart\u0026rdquo; are both ways of saying someone knows what to do. The difference is that \u0026ldquo;wise\u0026rdquo; means one has a high average outcome across all situations, …"
  },{
    "title": "Is There Such a Thing as Good Taste?",
    "url": "/paul_graham/essays_en/goodtaste/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nIs There Such a Thing as Good Taste? November 2021\n(This essay is derived from a talk at the Cambridge Union.)\nWhen I was a kid, I\u0026rsquo;d have said there wasn\u0026rsquo;t. My father told me so. Some people like some things, and other people like other things, and who\u0026rsquo;s to say who\u0026rsquo;s right?\nIt seemed so obvious that there was no such thing as good taste that it was only through indirect evidence that I realized my father was wrong. And that\u0026rsquo;s what I\u0026rsquo;m going to give you here: a proof by reductio ad absurdum. If we start from the premise that there\u0026rsquo;s no such thing as good taste, we end up with conclusions that are obviously false, and therefore the premise must be wrong.\n",
    "description": "",
    "tags": ["taste","art","subjectivity","objectivity","aesthetics"],
    "categories": [],
    "content": "→ 中文版本\nIs There Such a Thing as Good Taste? November 2021\n(This essay is derived from a talk at the Cambridge Union.)\nWhen I was a kid, I\u0026rsquo;d have said there wasn\u0026rsquo;t. My father told me so. Some people like some things, and other people like other things, and who\u0026rsquo;s to say who\u0026rsquo;s right?\nIt seemed so obvious that there was no such thing as good taste that it was only through indirect evidence that I realized my father was wrong. And that\u0026rsquo;s what I\u0026rsquo;m going to give you here: a proof by reductio ad absurdum. If we start from the premise that there\u0026rsquo;s no such thing as good taste, we end up with conclusions that are obviously false, and therefore the premise must be wrong.\nWe\u0026rsquo;d better start by saying what good taste is. There\u0026rsquo;s a narrow sense in which it refers to aesthetic judgements and a broader one in which it refers to preferences of any kind. The strongest proof would be to show that taste exists in the narrowest sense, so I\u0026rsquo;m going to talk about taste in art. You have better taste than me if the art you like is better than the art I like.\nIf there\u0026rsquo;s no such thing as good taste, then there\u0026rsquo;s no such thing as good art. Because if there is such a thing as good art, it\u0026rsquo;s easy to tell which of two people has better taste. Show them a lot of works by artists they\u0026rsquo;ve never seen before and ask them to choose the best, and whoever chooses the better art has better taste.\nSo if you want to discard the concept of good taste, you also have to discard the concept of good art. And that means you have to discard the possibility of people being good at making it. Which means there\u0026rsquo;s no way for artists to be good at their jobs. And not just visual artists, but anyone who is in any sense an artist. You can\u0026rsquo;t have good actors, or novelists, or composers, or dancers either. You can have popular novelists, but not good ones.\nWe don\u0026rsquo;t realize how far we\u0026rsquo;d have to go if we discarded the …"
  },{
    "title": "It's Charisma, Stupid",
    "url": "/paul_graham/essays_en/charisma/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nIt\u0026rsquo;s Charisma, Stupid November 2004, corrected June 2006\nOccam\u0026rsquo;s razor says we should prefer the simpler of two explanations. I begin by reminding readers of this principle because I\u0026rsquo;m about to propose a theory that will offend both liberals and conservatives. But Occam\u0026rsquo;s razor means, in effect, that if you want to disagree with it, you have a hell of a coincidence to explain.\nTheory: In US presidential elections, the more charismatic candidate wins.\n",
    "description": "",
    "tags": ["charisma","politics","elections","voting","presidents","analysis"],
    "categories": [],
    "content": "→ 中文版本\nIt\u0026rsquo;s Charisma, Stupid November 2004, corrected June 2006\nOccam\u0026rsquo;s razor says we should prefer the simpler of two explanations. I begin by reminding readers of this principle because I\u0026rsquo;m about to propose a theory that will offend both liberals and conservatives. But Occam\u0026rsquo;s razor means, in effect, that if you want to disagree with it, you have a hell of a coincidence to explain.\nTheory: In US presidential elections, the more charismatic candidate wins.\nPeople who write about politics, whether on the left or the right, have a consistent bias: they take politics seriously. When one candidate beats another they look for political explanations. The country is shifting to the left, or the right. And that sort of shift can certainly be the result of a presidential election, which makes it easy to believe it was the cause.\nBut when I think about why I voted for Clinton over the first George Bush, it wasn\u0026rsquo;t because I was shifting to the left. Clinton just seemed more dynamic. He seemed to want the job more. Bush seemed old and tired. I suspect it was the same for a lot of voters.\nClinton didn\u0026rsquo;t represent any national shift leftward. [1] He was just more charismatic than George Bush or (God help us) Bob Dole. In 2000 we practically got a controlled experiment to prove it: Gore had Clinton\u0026rsquo;s policies, but not his charisma, and he suffered proportionally. [2] Same story in 2004. Kerry was smarter and more articulate than Bush, but rather a stiff. And Kerry lost.\nAs I looked further back, I kept finding the same pattern. Pundits said Carter beat Ford because the country distrusted the Republicans after Watergate. And yet it also happened that Carter was famous for his big grin and folksy ways, and Ford for being a boring klutz. Four years later, pundits said the country had lurched to the right. But Reagan, a former actor, also happened to be even more charismatic than Carter (whose grin was somewhat less cheery after four …"
  },{
    "title": "Java's Cover",
    "url": "/paul_graham/essays_en/javacover/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nJava\u0026rsquo;s Cover April 2001\nThis essay developed out of conversations I\u0026rsquo;ve had with several other programmers about why Java smelled suspicious. It\u0026rsquo;s not a critique of Java! It is a case study of hacker\u0026rsquo;s radar.\nOver time, hackers develop a nose for good (and bad) technology. I thought it might be interesting to try and write down what made Java seem suspect to me.\nSome people who\u0026rsquo;ve read this think it\u0026rsquo;s an interesting attempt to write about something that hasn\u0026rsquo;t been written about before. Others say I will get in trouble for appearing to be writing about things I don\u0026rsquo;t understand. So, just in case it does any good, let me clarify that I\u0026rsquo;m not writing here about Java (which I have never used) but about hacker\u0026rsquo;s radar (which I have thought about a lot).\n",
    "description": "",
    "tags": ["java","programming","technology","programming_languages","hacker_culture","design"],
    "categories": [],
    "content": "→ 中文版本\nJava\u0026rsquo;s Cover April 2001\nThis essay developed out of conversations I\u0026rsquo;ve had with several other programmers about why Java smelled suspicious. It\u0026rsquo;s not a critique of Java! It is a case study of hacker\u0026rsquo;s radar.\nOver time, hackers develop a nose for good (and bad) technology. I thought it might be interesting to try and write down what made Java seem suspect to me.\nSome people who\u0026rsquo;ve read this think it\u0026rsquo;s an interesting attempt to write about something that hasn\u0026rsquo;t been written about before. Others say I will get in trouble for appearing to be writing about things I don\u0026rsquo;t understand. So, just in case it does any good, let me clarify that I\u0026rsquo;m not writing here about Java (which I have never used) but about hacker\u0026rsquo;s radar (which I have thought about a lot).\nThe aphorism \u0026ldquo;you can\u0026rsquo;t tell a book by its cover\u0026rdquo; originated in the times when books were sold in plain cardboard covers, to be bound by each purchaser according to his own taste. In those days, you couldn\u0026rsquo;t tell a book by its cover. But publishing has advanced since then: present-day publishers work hard to make the cover something you can tell a book by.\nI spend a lot of time in bookshops and I feel as if I have by now learned to understand everything publishers mean to tell me about a book, and perhaps a bit more. The time I haven\u0026rsquo;t spent in bookshops I\u0026rsquo;ve spent mostly in front of computers, and I feel as if I\u0026rsquo;ve learned, to some degree, to judge technology by its cover as well. It may be just luck, but I\u0026rsquo;ve saved myself from a few technologies that turned out to be real stinkers.\nSo far, Java seems like a stinker to me. I\u0026rsquo;ve never written a Java program, never more than glanced over reference books about it, but I have a hunch that it won\u0026rsquo;t be a very successful language. I may turn out to be mistaken; making predictions about technology is a dangerous business. But for what it\u0026rsquo;s worth, …"
  },{
    "title": "Java的外衣",
    "url": "/paul_graham/essays_zh/javacover/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nJava的外衣 2001年4月\n这篇文章源于我与几位程序员关于Java为何气味可疑的对话。这不是对Java的批判！这是黑客雷达的一个案例研究。\n随着时间的推移，黑客对好（和坏）技术培养出了一种嗅觉。我想试着写下是什么让Java对我来说似乎可疑，这可能会很有趣。\n一些读过这篇文章的人认为这是试图以前所未有的方式写一些有趣的事情。其他人说我将因为看起来写我不理解的东西而陷入麻烦。所以，以防万一有任何好处，让我澄清我在这里不是在写Java（我从未使用过），而是在写黑客雷达（我对此思考很多）。\n\u0026ldquo;不能凭封面判断一本书\u0026quot;这句格言起源于书籍用普通纸板封面出售的时代，由每个购买者根据自己的品味装订。在那个时代，你不能凭封面判断一本书。但出版业从那时起进步了：现在的出版商努力使封面成为你可以判断一本书的依据。\n我花了很多时间在书店，我觉得我现在已经学会理解出版商想要告诉我关于一本书的一切，可能还有更多。我没有在书店度过的时间主要花在电脑前，我觉得我在某种程度上已经学会了通过封面来判断技术。这可能只是运气，但我已经让自己避免了一些最终被证明是真正糟糕的技术。\n到目前为止，Java对我来说似乎很糟糕。我从未写过Java程序，从未看过关于它的参考书，但我有一个预感，它不会是一种非常成功的语言。我可能被证明是错的；对技术做出预测是危险的事情。但作为某种时间胶囊，就其价值而言，这就是为什么我不喜欢Java的外观：\n它被如此热情地炒作。真正的标准不需要被推广。没有人需要推广C、Unix或HTML。真正的标准在大多数人听到它之前就已经建立了。在黑客雷达屏幕上，Perl和Java一样大，或者更大，仅仅是凭借自身的优点。\n它的目标很低。在最初的Java白皮书中，Gosling明确表示Java的设计对习惯C的程序员来说不会太困难。它被设计成另一个C++：C加上一些从更高级语言中借来的想法。就像情景喜剧、垃圾食品或包价旅游的创造者一样，Java的设计者有意识地为不如他们聪明的人设计产品。历史上，为他人使用而设计的语言都很糟糕：Cobol、PL/I、Pascal、Ada、C++。好的语言是那些为自己的设计者设计的：C、Perl、Smalltalk、Lisp。\n它有不可告人的动机。有人说过，如果人们只在有话要说时才写书，而不是因为想写书，世界会变得更美好。同样，我们一直听到Java的原因不是因为它对编程语言有什么要说的。我们听到Java作为Sun公司削弱微软计划的一部分。\n没有人喜欢它。C、Perl、Python、Smalltalk和Lisp程序员都喜欢他们的语言。我从未听任何人说过他们喜欢Java。\n人们被迫使用它。我认识的许多使用Java的人使用它是因为他们觉得必须这样做。要么是他们觉得为了获得资助必须这样做，要么是他们认为客户会想要，要么是管理层告诉他们要这样做。这些都是聪明人；如果技术好，他们会自愿使用它。\n它有太多的厨师。最好的编程语言是由小团体开发的。Java似乎是由一个委员会管理的。如果它最终成为一种好语言，这将是历史上委员会第一次设计出好语言。\n它是官僚主义的。据我对Java的一点点了解，似乎有很多做事的协议。真正的好语言不是那样的。它们让你做你想做的事，然后让路。\n它是伪时髦的。Sun现在假装Java是一种像Perl或Python那样的草根、开源语言努力。这个恰好由一家大公司控制。所以这种语言很可能具有与大公司生产的任何东西相同的单调笨重。\n它是为大型组织设计的。大型组织的目标与黑客不同。他们想要适合大型平庸程序员团队使用的语言——具有像U-Haul卡车中的限速器那样的功能，防止傻瓜造成太大损害。黑客不喜欢对他们居高临下的语言。黑客只想要力量。历史上，为大型组织设计的语言（PL/I、Ada）都失败了，而黑客语言（C、Perl）获胜了。原因：今天的青少年黑客是明天的CTO。\n错误的人喜欢它。我最钦佩的程序员整体上没有被Java迷住。谁喜欢Java？西装革履的人，不知道一种语言与另一种的区别，但知道他们在媒体上不断听到Java；大公司的程序员，惊讶地发现还有比C++更好的东西；以及即插即用的本科生，准备好喜欢任何可能让他们找到工作的东西（这会考试吗？）。这些人的意见随风而变。\n它的爸爸陷入困境。Sun的商业模式正受到两方面的侵蚀。与台式机相同类型的廉价Intel处理器现在对服务器来说已经足够快了。而且FreeBSD似乎至少与Solaris一样适合作为服务器操作系统。Sun的广告暗示你需要Sun服务器用于工业级应用程序。如果这是真的，Yahoo会第一个排队购买Sun；但当我在那里工作时，服务器都是运行FreeBSD的Intel盒子。这对Sun的未来是个坏兆头。如果Sun遇到麻烦，他们可能会把Java拖下水。\n国防部喜欢它。国防部鼓励开发者使用Java。这在我看来是最 damning 的迹象。国防部的国防工作做得很好（虽然昂贵），但他们喜欢计划、程序和协议。他们的文化与黑客文化相反；在软件问题上他们往往会下错注。国防部最后一次真正喜欢一种编程语言是Ada。\n请记住，这不是对Java的批判，而是对其外衣的批判。我对Java的了解还不足以喜欢或不喜欢它。这只是为什么我不觉得急于学习它的解释。\n在尝试用一种语言编写程序之前就将其 dismissed 可能看起来 cavalier。但这是所有程序员都必须做的事情。外面的技术太多了，无法全部学习。你必须学会通过外部迹象来判断哪些值得你花时间。我同样 cavalier 地 dismissed 了Cobol、Ada、Visual Basic、IBM AS400、VRML、ISO 9000、SET协议、VMS、Novell Netware和CORBA等。它们只是气味不对。\n在Java的情况下我可能错了。可能一种由一家大公司推广以削弱另一家大公司、由委员会为\u0026quot;主流\u0026quot;受众设计、被炒作到天际、国防部喜欢的语言，碰巧是一种我会喜欢编程的干净、美丽、强大的语言。可能，但这似乎非常不可能。\nTrevor Re: Java\u0026rsquo;s Cover | Berners-Lee Re: Java | Being Popular | Sun Internal Memo | 2005: BusinessWeek Agrees\n日语翻译\n",
    "description": "",
    "tags": ["java","编程","技术","编程语言","黑客文化","设计"],
    "categories": [],
    "content": "→ English Version\nJava的外衣 2001年4月\n这篇文章源于我与几位程序员关于Java为何气味可疑的对话。这不是对Java的批判！这是黑客雷达的一个案例研究。\n随着时间的推移，黑客对好（和坏）技术培养出了一种嗅觉。我想试着写下是什么让Java对我来说似乎可疑，这可能会很有趣。\n一些读过这篇文章的人认为这是试图以前所未有的方式写一些有趣的事情。其他人说我将因为看起来写我不理解的东西而陷入麻烦。所以，以防万一有任何好处，让我澄清我在这里不是在写Java（我从未使用过），而是在写黑客雷达（我对此思考很多）。\n\u0026ldquo;不能凭封面判断一本书\u0026quot;这句格言起源于书籍用普通纸板封面出售的时代，由每个购买者根据自己的品味装订。在那个时代，你不能凭封面判断一本书。但出版业从那时起进步了：现在的出版商努力使封面成为你可以判断一本书的依据。\n我花了很多时间在书店，我觉得我现在已经学会理解出版商想要告诉我关于一本书的一切，可能还有更多。我没有在书店度过的时间主要花在电脑前，我觉得我在某种程度上已经学会了通过封面来判断技术。这可能只是运气，但我已经让自己避免了一些最终被证明是真正糟糕的技术。\n到目前为止，Java对我来说似乎很糟糕。我从未写过Java程序，从未看过关于它的参考书，但我有一个预感，它不会是一种非常成功的语言。我可能被证明是错的；对技术做出预测是危险的事情。但作为某种时间胶囊，就其价值而言，这就是为什么我不喜欢Java的外观：\n它被如此热情地炒作。真正的标准不需要被推广。没有人需要推广C、Unix或HTML。真正的标准在大多数人听到它之前就已经建立了。在黑客雷达屏幕上，Perl和Java一样大，或者更大，仅仅是凭借自身的优点。\n它的目标很低。在最初的Java白皮书中，Gosling明确表示Java的设计对习惯C的程序员来说不会太困难。它被设计成另一个C++：C加上一些从更高级语言中借来的想法。就像情景喜剧、垃圾食品或包价旅游的创造者一样，Java的设计者有意识地为不如他们聪明的人设计产品。历史上，为他人使用而设计的语言都很糟糕：Cobol、PL/I、Pascal、Ada、C++。好的语言是那些为自己的设计者设计的：C、Perl、Smalltalk、Lisp。\n它有不可告人的动机。有人说过，如果人们只在有话要说时才写书，而不是因为想写书，世界会变得更美好。同样，我们一直听到Java的原因不是因为它对编程语言有什么要说的。我们听到Java作为Sun公司削弱微软计划的一部分。\n没有人喜欢它。C、Perl、Python、Smalltalk和Lisp程序员都喜欢他们的语言。我从未听任何人说过他们喜欢Java。\n人们被迫使用它。我认识的许多使用Java的人使用它是因为他们觉得必须这样做。要么是他们觉得为了获得资助必须这样做，要么是他们认为客户会想要，要么是管理层告诉他们要这样做。这些都是聪明人；如果技术好，他们会自愿使用它。\n它有太多的厨师。最好的编程语言是由小团体开发的。Java似乎是由一个委员会管理的。如果它最终成为一种好语言，这将是历史上委员会第一次设计出好语言。\n它是官僚主义的。据我对Java的一点点了解，似乎有很多做事的协议。真正的好语言不是那样的。它们让你做你想做的事，然后让路。\n它是伪时髦的。Sun现在假装Java是一种像Perl或Python那样的草根、开源语言努力。这个恰好由一家大公司控制。所以这种语言很可能具有与大公司生产的任何东西相同的单调笨重。\n它是为大型组织设计的。大型组织的目标与黑客不同。他们想要适合大型平庸程序员团队使用的语言——具有像U-Haul卡车中的限速器那样的功能，防止傻瓜造成太大损害。黑客不喜欢对他们居高临下的语言。黑客只想要力量。历史上，为大型组织设计的语言（PL/I、Ada）都失败了，而黑客语言（C、Perl）获胜了。原因：今天的青少年黑客是明天的CTO。\n错误的人喜欢它。我最钦佩的程序员整体上没有被Java迷住。谁喜欢Java？西装革履的人，不知道一种语言与另一种的区别，但知道他们在媒体上不断听到Java；大公司的程序员，惊讶地发现还有比C++更好的东西；以及即插即用的本科生，准备好喜欢任何可能让他们找到工作的东西（这会考试吗？）。这些人的意见随风而变。\n它的爸爸陷入困境。Sun的商业模式正受到两方面的侵蚀。与台式机相同类型的廉价Intel处理器现在对服务器来说已经足够快了。而且FreeBSD似乎至少与Solaris一样适合作为服务器操作系统。Sun的广告暗示你需要Sun服务器用于工业级应用程序。如果这是真的，Yahoo会第一个排队购买Sun；但当我在那里工作时，服务器都是运行FreeBSD的Intel盒子。这对Sun的未来是个坏兆头。如果Sun遇到麻烦，他们可能会把Java …"
  },{
    "title": "Jessica Livingston",
    "url": "/paul_graham/essays_en/jessica/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nJessica Livingston November 2015\nA few months ago an article about Y Combinator said that early on it had been a \u0026ldquo;one-man show.\u0026rdquo; It\u0026rsquo;s sadly common to read that sort of thing. But the problem with that description is not just that it\u0026rsquo;s unfair. It\u0026rsquo;s also misleading. Much of what\u0026rsquo;s most novel about YC is due to Jessica Livingston. If you don\u0026rsquo;t understand her, you don\u0026rsquo;t understand YC. So let me tell you a little about Jessica.\n",
    "description": "",
    "tags": ["jessica_livingston","y_combinator","startups","founders","women_in_tech","leadership","culture"],
    "categories": [],
    "content": "→ 中文版本\nJessica Livingston November 2015\nA few months ago an article about Y Combinator said that early on it had been a \u0026ldquo;one-man show.\u0026rdquo; It\u0026rsquo;s sadly common to read that sort of thing. But the problem with that description is not just that it\u0026rsquo;s unfair. It\u0026rsquo;s also misleading. Much of what\u0026rsquo;s most novel about YC is due to Jessica Livingston. If you don\u0026rsquo;t understand her, you don\u0026rsquo;t understand YC. So let me tell you a little about Jessica.\nYC had 4 founders. Jessica and I decided one night to start it, and the next day we recruited my friends Robert Morris and Trevor Blackwell. Jessica and I ran YC day to day, and Robert and Trevor read applications and did interviews with us.\nJessica and I were already dating when we started YC. At first we tried to act \u0026ldquo;professional\u0026rdquo; about this, meaning we tried to conceal it. In retrospect that seems ridiculous, and we soon dropped the pretense. And the fact that Jessica and I were a couple is a big part of what made YC what it was. YC felt like a family. The founders early on were mostly young. We all had dinner together once a week, cooked for the first couple years by me. Our first building had been a private home. The overall atmosphere was shockingly different from a VC\u0026rsquo;s office on Sand Hill Road, in a way that was entirely for the better. There was an authenticity that everyone who walked in could sense. And that didn\u0026rsquo;t just mean that people trusted us. It was the perfect quality to instill in startups. Authenticity is one of the most important things YC looks for in founders, not just because fakers and opportunists are annoying, but because authenticity is one of the main things that separates the most successful startups from the rest.\nEarly YC was a family, and Jessica was its mom. And the culture she defined was one of YC\u0026rsquo;s most important innovations. Culture is important in any organization, but at YC culture wasn\u0026rsquo;t just how we behaved when we …"
  },{
    "title": "Keep Your Identity Small",
    "url": "/paul_graham/essays_en/identity/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nKeep Your Identity Small February 2009\nI finally realized today why politics and religion yield such uniquely useless discussions.\nAs a rule, any mention of religion on an online forum degenerates into a religious argument. Why? Why does this happen with religion and not with Javascript or baking or other topics people talk about on forums?\nWhat\u0026rsquo;s different about religion is that people don\u0026rsquo;t feel they need to have any particular expertise to have opinions about it. All they need is strongly held beliefs, and anyone can have those. No thread about Javascript will grow as fast as one about religion, because people feel they have to be over some threshold of expertise to post comments about that. But on religion everyone\u0026rsquo;s an expert.\n",
    "description": "",
    "tags": ["identity","politics","religion","philosophy","psychology","critical thinking","self-improvement"],
    "categories": [],
    "content": "→ Chinese Version\nKeep Your Identity Small February 2009\nI finally realized today why politics and religion yield such uniquely useless discussions.\nAs a rule, any mention of religion on an online forum degenerates into a religious argument. Why? Why does this happen with religion and not with Javascript or baking or other topics people talk about on forums?\nWhat\u0026rsquo;s different about religion is that people don\u0026rsquo;t feel they need to have any particular expertise to have opinions about it. All they need is strongly held beliefs, and anyone can have those. No thread about Javascript will grow as fast as one about religion, because people feel they have to be over some threshold of expertise to post comments about that. But on religion everyone\u0026rsquo;s an expert.\nThen it struck me: this is the problem with politics too. Politics, like religion, is a topic where there\u0026rsquo;s no threshold of expertise for expressing an opinion. All you need is strong convictions.\nDo religion and politics have something in common that explains this similarity? One possible explanation is that they deal with questions that have no definite answers, so there\u0026rsquo;s no back pressure on people\u0026rsquo;s opinions. Since no one can be proven wrong, every opinion is equally valid, and sensing this, everyone lets fly with theirs.\nBut this isn\u0026rsquo;t true. There are certainly some political questions that have definite answers, like how much a new government policy will cost. But the more precise political questions suffer the same fate as the vaguer ones.\nI think what religion and politics have in common is that they become part of people\u0026rsquo;s identity, and people can never have a fruitful argument about something that\u0026rsquo;s part of their identity. By definition they\u0026rsquo;re partisan.\nWhich topics engage people\u0026rsquo;s identity depends on the people, not the topic. For example, a discussion about a battle that included citizens of one or more of the countries involved would probably …"
  },{
    "title": "Laundry",
    "url": "/paul_graham/essays_en/laundry/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nLaundry A Version 1.0\nOctober 2004\nAs E. B. White said, \u0026ldquo;good writing is rewriting.\u0026rdquo; I didn\u0026rsquo;t realize this when I was in school. In writing, as in math and science, they only show you the finished product. You don\u0026rsquo;t see all the false starts. This gives students a misleading view of how things get made.\nPart of the reason it happens is that writers don\u0026rsquo;t want people to see their mistakes. But I\u0026rsquo;m willing to let people see an early draft if it will show how much you have to rewrite to beat an essay into shape.\n",
    "description": "",
    "tags": ["writing","essays","education","montaigne","rewriting","creativity","learning"],
    "categories": [],
    "content": "→ 中文版本\nLaundry A Version 1.0\nOctober 2004\nAs E. B. White said, \u0026ldquo;good writing is rewriting.\u0026rdquo; I didn\u0026rsquo;t realize this when I was in school. In writing, as in math and science, they only show you the finished product. You don\u0026rsquo;t see all the false starts. This gives students a misleading view of how things get made.\nPart of the reason it happens is that writers don\u0026rsquo;t want people to see their mistakes. But I\u0026rsquo;m willing to let people see an early draft if it will show how much you have to rewrite to beat an essay into shape.\nBelow is the oldest version I can find of The Age of the Essay (probably the second or third day), with text that ultimately survived in red and text that later got deleted in gray. There seem to be several categories of cuts: things I got wrong, things that seem like bragging, flames, digressions, stretches of awkward prose, and unnecessary words.\nI discarded more from the beginning. That\u0026rsquo;s not surprising; it takes a while to hit your stride. There are more digressions at the start, because I\u0026rsquo;m not sure where I\u0026rsquo;m heading.\nThe amount of cutting is about average. I probably write three to four words for every one that appears in the final version of an essay.\n(Before anyone gets mad at me for opinions expressed here, remember that anything you see here that\u0026rsquo;s not in the final version is obviously something I chose not to publish, often because I disagree with it.)\nRecently a friend said that what he liked about my essays was that they weren\u0026rsquo;t written the way we\u0026rsquo;d been taught to write essays in school. You remember: topic sentence, introductory paragraph, supporting paragraphs, conclusion. It hadn\u0026rsquo;t occurred to me till then that those horrible things we had to write in school were even connected to what I was doing now. But sure enough, I thought, they did call them \u0026ldquo;essays,\u0026rdquo; didn\u0026rsquo;t they?\nWell, they\u0026rsquo;re not. Those things you have to write in school are not …"
  },{
    "title": "Learning from Founders",
    "url": "/paul_graham/essays_en/foundersatwork/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nLearning from Founders January 2007\n(Foreword to Jessica Livingston\u0026rsquo;s Founders at Work.)\nApparently sprinters reach their highest speed right out of the blocks, and spend the rest of the race slowing down. The winners slow down the least. It\u0026rsquo;s that way with most startups too. The earliest phase is usually the most productive. That\u0026rsquo;s when they have the really big ideas. Imagine what Apple was like when 100% of its employees were either Steve Jobs or Steve Wozniak.\n",
    "description": "",
    "tags": ["founders","productivity","startups","professionalism","Jessica Livingston"],
    "categories": [],
    "content": "→ 中文版本\nLearning from Founders January 2007\n(Foreword to Jessica Livingston\u0026rsquo;s Founders at Work.)\nApparently sprinters reach their highest speed right out of the blocks, and spend the rest of the race slowing down. The winners slow down the least. It\u0026rsquo;s that way with most startups too. The earliest phase is usually the most productive. That\u0026rsquo;s when they have the really big ideas. Imagine what Apple was like when 100% of its employees were either Steve Jobs or Steve Wozniak.\nThe striking thing about this phase is that it\u0026rsquo;s completely different from most people\u0026rsquo;s idea of what business is like. If you looked in people\u0026rsquo;s heads (or stock photo collections) for images representing \u0026ldquo;business,\u0026rdquo; you\u0026rsquo;d get images of people dressed up in suits, groups sitting around conference tables looking serious, Powerpoint presentations, people producing thick reports for one another to read. Early stage startups are the exact opposite of this. And yet they\u0026rsquo;re probably the most productive part of the whole economy.\nWhy the disconnect? I think there\u0026rsquo;s a general principle at work here: the less energy people expend on performance, the more they expend on appearances to compensate. More often than not the energy they expend on seeming impressive makes their actual performance worse. A few years ago I read an article in which a car magazine modified the \u0026ldquo;sports\u0026rdquo; model of some production car to get the fastest possible standing quarter mile. You know how they did it? They cut off all the crap the manufacturer had bolted onto the car to make it look fast.\nBusiness is broken the same way that car was. The effort that goes into looking productive is not merely wasted, but actually makes organizations less productive. Suits, for example. Suits do not help people to think better. I bet most executives at big companies do their best thinking when they wake up on Sunday morning and go downstairs in their bathrobe to make a cup …"
  },{
    "title": "Let the Other 95% of Great Programmers In",
    "url": "/paul_graham/essays_en/95/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nLet the Other 95% of Great Programmers In Let the Other 95% of Great Programmers In December 2014\nAmerican technology companies want the government to make immigration easier because they say they can\u0026rsquo;t find enough programmers in the US. Anti-immigration people say that instead of letting foreigners take these jobs, we should train more Americans to be programmers. Who\u0026rsquo;s right?\nThe technology companies are right. What the anti-immigration people don\u0026rsquo;t understand is that there is a huge variation in ability between competent programmers and exceptional ones, and while you can train people to be competent, you can\u0026rsquo;t train them to be exceptional. Exceptional programmers have an aptitude for and interest in programming that is not merely the product of training. [1]\n",
    "description": "",
    "tags": ["programming","immigration","technology","talent","silicon valley"],
    "categories": [],
    "content": "→ 中文版本\nLet the Other 95% of Great Programmers In Let the Other 95% of Great Programmers In December 2014\nAmerican technology companies want the government to make immigration easier because they say they can\u0026rsquo;t find enough programmers in the US. Anti-immigration people say that instead of letting foreigners take these jobs, we should train more Americans to be programmers. Who\u0026rsquo;s right?\nThe technology companies are right. What the anti-immigration people don\u0026rsquo;t understand is that there is a huge variation in ability between competent programmers and exceptional ones, and while you can train people to be competent, you can\u0026rsquo;t train them to be exceptional. Exceptional programmers have an aptitude for and interest in programming that is not merely the product of training. [1]\nThe US has less than 5% of the world\u0026rsquo;s population. Which means if the qualities that make someone a great programmer are evenly distributed, 95% of great programmers are born outside the US.\nThe anti-immigration people have to invent some explanation to account for all the effort technology companies have expended trying to make immigration easier. So they claim it\u0026rsquo;s because they want to drive down salaries. But if you talk to startups, you find practically every one over a certain size has gone through legal contortions to get programmers into the US, where they then paid them the same as they\u0026rsquo;d have paid an American. Why would they go to extra trouble to get programmers for the same price? The only explanation is that they\u0026rsquo;re telling the truth: there are just not enough great programmers to go around. [2]\nI asked the CEO of a startup with about 70 programmers how many more he\u0026rsquo;d hire if he could get all the great programmers he wanted. He said \u0026ldquo;We\u0026rsquo;d hire 30 tomorrow morning.\u0026rdquo; And this is one of the hot startups that always win recruiting battles. It\u0026rsquo;s the same all over Silicon Valley. Startups are that constrained for …"
  },{
    "title": "Lies We Tell Kids",
    "url": "/paul_graham/essays_en/lies/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nLies We Tell Kids May 2008\nAdults lie constantly to kids. I\u0026rsquo;m not saying we should stop, but I think we should at least examine which lies we tell and why.\nThere may also be a benefit to us. We were all lied to as kids, and some of the lies we were told still affect us. So by studying the ways adults lie to kids, we may be able to clear our heads of lies we were told.\n",
    "description": "",
    "tags": ["parenting","children","lying","education","truth","childhood","society","psychology","growing_up"],
    "categories": [],
    "content": "→ 中文版本\nLies We Tell Kids May 2008\nAdults lie constantly to kids. I\u0026rsquo;m not saying we should stop, but I think we should at least examine which lies we tell and why.\nThere may also be a benefit to us. We were all lied to as kids, and some of the lies we were told still affect us. So by studying the ways adults lie to kids, we may be able to clear our heads of lies we were told.\nI\u0026rsquo;m using the word \u0026ldquo;lie\u0026rdquo; in a very general sense: not just overt falsehoods, but also all the more subtle ways we mislead kids. Though \u0026ldquo;lie\u0026rdquo; has negative connotations, I don\u0026rsquo;t mean to suggest we should never do this—just that we should pay attention when we do. [1]\nOne of the most remarkable things about the way we lie to kids is how broad the conspiracy is. All adults know what their culture lies to kids about: they\u0026rsquo;re the questions you answer \u0026ldquo;Ask your parents.\u0026rdquo; If a kid asked who won the World Series in 1982 or what the atomic weight of carbon was, you could just tell him. But if a kid asks you \u0026ldquo;Is there a God?\u0026rdquo; or \u0026ldquo;What\u0026rsquo;s a prostitute?\u0026rdquo; you\u0026rsquo;ll probably say \u0026ldquo;Ask your parents.\u0026rdquo;\nSince we all agree, kids see few cracks in the view of the world presented to them. The biggest disagreements are between parents and schools, but even those are small. Schools are careful what they say about controversial topics, and if they do contradict what parents want their kids to believe, parents either pressure the school into keeping quiet or move their kids to a new school.\nThe conspiracy is so thorough that most kids who discover it do so only by discovering internal contradictions in what they\u0026rsquo;re told. It can be traumatic for the ones who wake up during the operation. Here\u0026rsquo;s what happened to Einstein:\nThrough the reading of popular scientific books I soon reached the conviction that much in the stories of the Bible could not be true. The consequence was a positively fanatic freethinking …"
  },{
    "title": "Life is Short",
    "url": "/paul_graham/essays_en/vb/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nLife is Short January 2016\nLife is short, as everyone knows. When I was a kid I used to wonder about this. Is life actually short, or are we really complaining about its finiteness? Would we be just as likely to feel life was short if we lived 10 times as long?\nSince there didn\u0026rsquo;t seem any way to answer this question, I stopped wondering about it. Then I had kids. That gave me a way to answer the question, and the answer is that life actually is short.\n",
    "description": "",
    "tags": ["time","priorities","bullshit","meaningful life","regret","parenting"],
    "categories": [],
    "content": "→ 中文版本\nLife is Short January 2016\nLife is short, as everyone knows. When I was a kid I used to wonder about this. Is life actually short, or are we really complaining about its finiteness? Would we be just as likely to feel life was short if we lived 10 times as long?\nSince there didn\u0026rsquo;t seem any way to answer this question, I stopped wondering about it. Then I had kids. That gave me a way to answer the question, and the answer is that life actually is short.\nHaving kids showed me how to convert a continuous quantity, time, into discrete quantities. You only get 52 weekends with your 2 year old. If Christmas-as-magic lasts from say ages 3 to 10, you only get to watch your child experience it 8 times. And while it\u0026rsquo;s impossible to say what is a lot or a little of a continuous quantity like time, 8 is not a lot of something. If you had a handful of 8 peanuts, or a shelf of 8 books to choose from, the quantity would definitely seem limited, no matter what your lifespan was.\nOk, so life actually is short. Does it make any difference to know that?\nIt has for me. It means arguments of the form \u0026ldquo;Life is too short for x\u0026rdquo; have great force. It\u0026rsquo;s not just a figure of speech to say that life is too short for something. It\u0026rsquo;s not just a synonym for annoying. If you find yourself thinking that life is too short for something, you should try to eliminate it if you can.\nWhen I ask myself what I\u0026rsquo;ve found life is too short for, the word that pops into my head is \u0026ldquo;bullshit.\u0026rdquo; I realize that answer is somewhat tautological. It\u0026rsquo;s almost the definition of bullshit that it\u0026rsquo;s the stuff that life is too short for. And yet bullshit does have a distinctive character. There\u0026rsquo;s something fake about it. It\u0026rsquo;s the junk food of experience. [1]\nIf you ask yourself what you spend your time on that\u0026rsquo;s bullshit, you probably already know the answer. Unnecessary meetings, pointless disputes, bureaucracy, posturing, dealing …"
  },{
    "title": "Lisp for Web-Based Applications",
    "url": "/paul_graham/essays_en/lwba/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Lisp for Web-Based Applications After a link to Beating the Averages was posted on slashdot, some readers wanted to hear in more detail about the specific technical advantages we got from using Lisp in Viaweb. For those who are interested, here are some excerpts from a talk I gave in April 2001 at BBN Labs in Cambridge, MA.\nBBN Talk Excerpts (ASCII)\n",
    "description": "",
    "tags": ["lisp","web","programming","software","technology","viaweb","startups"],
    "categories": [],
    "content": "Lisp for Web-Based Applications After a link to Beating the Averages was posted on slashdot, some readers wanted to hear in more detail about the specific technical advantages we got from using Lisp in Viaweb. For those who are interested, here are some excerpts from a talk I gave in April 2001 at BBN Labs in Cambridge, MA.\nBBN Talk Excerpts (ASCII)\n"
  },{
    "title": "Lisp的不同之处",
    "url": "/paul_graham/essays_zh/diff/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nLisp的不同之处 2001年12月（修订于2002年5月）\n（本文是回应LL1邮件列表上一些问题而产生的。现在已收录在《书呆子的复仇》中。）\n当McCarthy在1950年代末设计Lisp时，它是对现有语言的彻底突破，其中最重要的是Fortran。\nLisp体现了九个新思想：\n条件语句。 条件语句是if-then-else结构。现在我们认为这是理所当然的。它们是McCarthy在开发Lisp过程中发明的。（当时的Fortran只有条件goto，紧密基于底层硬件的分支指令。）McCarthy是Algol委员会的成员，他将条件语句引入Algol，随后传播到大多数其他语言。\n函数类型。 在Lisp中，函数是一等对象——它们是一种数据类型，就像整数、字符串等，并且有字面表示，可以存储在变量中，可以作为参数传递，等等。\n递归。 递归当然在Lisp之前作为数学概念存在，但Lisp是第一个支持递归的编程语言。（可以说这在使函数成为一等对象中是隐含的。）\n变量的新概念。 在Lisp中，所有变量实际上都是指针。具有类型的是值，而不是变量，赋值或绑定变量意味着复制指针，而不是它们指向的内容。\n垃圾回收。\n由表达式组成的程序。 Lisp程序是表达式的树，每个表达式都返回一个值。（在某些Lisp中，表达式可以返回多个值。）这与Fortran和大多数后续语言形成对比，后者区分表达式和语句。\n在Fortran中有这种区别是很自然的，因为（在输入格式为打孔卡的语言中不足为奇）该语言是面向行的。你不能嵌套语句。因此，虽然你需要表达式来进行数学运算，但让其他任何东西返回值都没有意义，因为不可能有任何东西在等待它。\n随着块结构语言的出现，这个限制消失了，但那时已经太晚了。表达式和语句的区别已经根深蒂固。它从Fortran传播到Algol，然后传播到它们的后代。\n当一种语言完全由表达式构成时，你可以任意组合表达式。你可以说（使用Arc语法）\n(if foo (= x 1) (= x 2)) 或者\n(= x (if foo 1 2)) 符号类型。 符号与字符串的不同在于你可以通过比较指针来测试相等性。\n使用符号树表示代码的记号。\n整个语言始终可用。 读取时间、编译时间和运行时间之间没有真正的区别。你可以在读取时编译或运行代码，在编译时读取或运行代码，在运行时读取或编译代码。\n在读取时运行代码允许用户重新编程Lisp的语法；在编译时运行代码是宏的基础；在运行时编译是Lisp用作扩展语言的基础，如在Emacs等程序中；在运行时读取使程序能够使用s表达式进行通信，这个想法最近被重新发明为XML。\n当Lisp首次发明时，所有这些想法都与当时的普通编程实践相去甚远，后者主要由1950年代末可用的硬件决定。\n随着时间的推移，体现在一系列流行语言中的默认语言逐渐向Lisp演变。1-5现在已经广泛传播。6开始出现在主流中。Python具有7的一种形式，尽管似乎没有任何语法支持它。8（与9一起）是使Lisp宏成为可能的特性，到目前为止仍然是Lisp独有的，也许是因为（a）它需要那些括号，或者同样糟糕的东西，（b）如果你添加这最后的力量增量，你不能再声称发明了一种新语言，而只是设计了一种新的Lisp方言 ;-)\n虽然对当今的程序员有用，但通过描述Lisp与其他语言采用的随机权宜之计的差异来描述它是很奇怪的。这可能不是McCarthy对它的看法。Lisp不是设计来修复Fortran中的错误；它更像是试图将计算公理化的副产品。\n相关链接：\n日语翻译 ",
    "description": "",
    "tags": ["lisp","编程语言","历史","技术","创新","计算机科学"],
    "categories": [],
    "content": "→ English Version\nLisp的不同之处 2001年12月（修订于2002年5月）\n（本文是回应LL1邮件列表上一些问题而产生的。现在已收录在《书呆子的复仇》中。）\n当McCarthy在1950年代末设计Lisp时，它是对现有语言的彻底突破，其中最重要的是Fortran。\nLisp体现了九个新思想：\n条件语句。 条件语句是if-then-else结构。现在我们认为这是理所当然的。它们是McCarthy在开发Lisp过程中发明的。（当时的Fortran只有条件goto，紧密基于底层硬件的分支指令。）McCarthy是Algol委员会的成员，他将条件语句引入Algol，随后传播到大多数其他语言。\n函数类型。 在Lisp中，函数是一等对象——它们是一种数据类型，就像整数、字符串等，并且有字面表示，可以存储在变量中，可以作为参数传递，等等。\n递归。 递归当然在Lisp之前作为数学概念存在，但Lisp是第一个支持递归的编程语言。（可以说这在使函数成为一等对象中是隐含的。）\n变量的新概念。 在Lisp中，所有变量实际上都是指针。具有类型的是值，而不是变量，赋值或绑定变量意味着复制指针，而不是它们指向的内容。\n垃圾回收。\n由表达式组成的程序。 Lisp程序是表达式的树，每个表达式都返回一个值。（在某些Lisp中，表达式可以返回多个值。）这与Fortran和大多数后续语言形成对比，后者区分表达式和语句。\n在Fortran中有这种区别是很自然的，因为（在输入格式为打孔卡的语言中不足为奇）该语言是面向行的。你不能嵌套语句。因此，虽然你需要表达式来进行数学运算，但让其他任何东西返回值都没有意义，因为不可能有任何东西在等待它。\n随着块结构语言的出现，这个限制消失了，但那时已经太晚了。表达式和语句的区别已经根深蒂固。它从Fortran传播到Algol，然后传播到它们的后代。\n当一种语言完全由表达式构成时，你可以任意组合表达式。你可以说（使用Arc语法）\n(if foo (= x 1) (= x 2)) 或者\n(= x (if foo 1 2)) 符号类型。 符号与字符串的不同在于你可以通过比较指针来测试相等性。\n使用符号树表示代码的记号。\n整个语言始终可用。 读取时间、编译时间和运行时间之间没有真正的区别。你可以在读取时编译或运行代码，在编译时读取或运行代码，在运行时读取或编译代码。\n在读取时运行代码允许用户重新编程Lisp的语法；在编译时运行代码是宏的基础；在运行时编译是Lisp用作扩展语言的基础，如在Emacs等程序中；在运行时读取使程序能够使用s表达式进行通信，这个想法最近被重新发明为XML。\n当Lisp首次发明时，所有这些想法都与当时的普通编程实践相去甚远，后者主要由1950年代末可用的硬件决定。\n随着时间的推移，体现在一系列流行语言中的默认语言逐渐向Lisp演变。1-5现在已经广泛传播。6开始出现在主流中。Python具有7的一种形式，尽管似乎没有任何语法支持它。8（与9一起）是使Lisp宏成为可能的特性，到目前为止仍然是Lisp独有的，也许是因为（a）它需要那些括号，或者同样糟糕的东西，（b）如果你添加这最后的力量增量，你不能再声称发明了一种新语言，而只是设计了一种新的Lisp方言 ;-)\n虽然对当今的程序员有用，但通过描述Lisp与其他语言采用的随机权宜之计的差异来描述它是很奇怪的。这可能不是McCarthy对它的看法。Lisp不是设计来修复Fortran中的错误；它更像是试图将计算公理化的副产品。\n相关链接：\n日语翻译 "
  },{
    "title": "Lisp的根源",
    "url": "/paul_graham/essays_zh/rootsoflisp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nLisp的根源 2001年5月\n（我写这篇文章是为了帮助自己准确理解McCarthy的发现。你不需要知道这些东西来用Lisp编程，但对于想要理解Lisp本质的人来说——无论是从起源还是语义核心的角度——这应该是有帮助的。Lisp拥有这样一个核心是其区别于其他语言的特征之一，也是为什么与其他语言不同，Lisp有方言的原因。）\n1960年，John McCarthy发表了一篇非凡的论文，他在编程领域做了类似于欧几里得对几何学所做的事情。他展示了，给定一些简单的操作符和函数表示法，如何构建一个完整的编程语言。他称这种语言为Lisp，即\u0026quot;列表处理\u0026quot;，因为他的一个关键想法是使用一种称为列表的简单数据结构来同时表示代码和数据。\n值得理解McCarthy的发现，不仅作为计算机史上的里程碑，而且作为我们时代编程发展方向的模型。在我看来，迄今为止有两个真正干净、一致的编程模型：C模型和Lisp模型。这两个模型似乎像是高地，之间是沼泽般的低地。随着计算机变得越来越强大，正在开发的新语言一直在稳步向Lisp模型移动。过去20年来，新编程语言的一个流行配方是采用C计算模型，然后零散地添加从Lisp模型中提取的部分，如运行时类型和垃圾收集。\n在这篇文章中，我将尝试用最简单的术语解释McCarthy的发现。重点不仅仅是了解某人40年前想出的一个有趣的理论结果，而是展示语言的发展方向。Lisp的不寻常之处——事实上，Lisp的定义性特征——是它可以用自身来编写。要理解McCarthy的意思，我们将追溯他的步骤，将他的数学表示法转换为运行的Common Lisp代码。\n注意：这似乎是一篇较长文章的介绍或摘要。全文可能作为PostScript文件提供，在原始来源中链接为\u0026quot;Complete Article (Postscript)\u0026quot;。\n相关链接：\nWhat Made Lisp Different The Code 中文翻译 日语翻译 葡萄牙语翻译 韩语翻译 ",
    "description": "",
    "tags": ["lisp","编程语言","计算机科学","历史","john mccarthy"],
    "categories": [],
    "content": "→ English Version\nLisp的根源 2001年5月\n（我写这篇文章是为了帮助自己准确理解McCarthy的发现。你不需要知道这些东西来用Lisp编程，但对于想要理解Lisp本质的人来说——无论是从起源还是语义核心的角度——这应该是有帮助的。Lisp拥有这样一个核心是其区别于其他语言的特征之一，也是为什么与其他语言不同，Lisp有方言的原因。）\n1960年，John McCarthy发表了一篇非凡的论文，他在编程领域做了类似于欧几里得对几何学所做的事情。他展示了，给定一些简单的操作符和函数表示法，如何构建一个完整的编程语言。他称这种语言为Lisp，即\u0026quot;列表处理\u0026quot;，因为他的一个关键想法是使用一种称为列表的简单数据结构来同时表示代码和数据。\n值得理解McCarthy的发现，不仅作为计算机史上的里程碑，而且作为我们时代编程发展方向的模型。在我看来，迄今为止有两个真正干净、一致的编程模型：C模型和Lisp模型。这两个模型似乎像是高地，之间是沼泽般的低地。随着计算机变得越来越强大，正在开发的新语言一直在稳步向Lisp模型移动。过去20年来，新编程语言的一个流行配方是采用C计算模型，然后零散地添加从Lisp模型中提取的部分，如运行时类型和垃圾收集。\n在这篇文章中，我将尝试用最简单的术语解释McCarthy的发现。重点不仅仅是了解某人40年前想出的一个有趣的理论结果，而是展示语言的发展方向。Lisp的不寻常之处——事实上，Lisp的定义性特征——是它可以用自身来编写。要理解McCarthy的意思，我们将追溯他的步骤，将他的数学表示法转换为运行的Common Lisp代码。\n注意：这似乎是一篇较长文章的介绍或摘要。全文可能作为PostScript文件提供，在原始来源中链接为\u0026quot;Complete Article (Postscript)\u0026quot;。\n相关链接：\nWhat Made Lisp Different The Code 中文翻译 日语翻译 葡萄牙语翻译 韩语翻译 "
  },{
    "title": "Mac的回归",
    "url": "/paul_graham/essays_zh/mac/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nMac的回归 2005年3月\n我认识的所有最好的黑客都在逐渐转向Mac。我的朋友Robert说，他在MIT的整个研究小组最近都给自己买了Powerbook。这些人不是90年代中期苹果低谷时期购买Mac的图形设计师和祖母们。他们是你能找到的最核心的OS黑客。\n原因当然是OS X。Powerbook设计精美，运行FreeBSD。你还需要知道什么？\n我在去年年底买了一台Powerbook。当我的IBM Thinkpad的硬盘很快损坏后，它成了我唯一的笔记本电脑。当我的朋友Trevor最近出现在我家时，他拿着一台与我相同的Powerbook。\n对我们大多数人来说，这不是转向苹果，而是回归。尽管在90年代中期很难相信，但Mac在其时代是典型的黑客计算机。\n1983年秋天，我大学的一门CS课教授站起来，像先知一样宣布，很快将有一种计算机具有半MIPS的处理能力，可以放在飞机座位下，价格如此便宜，我们可以从暑假工作中节省足够的钱来买一台。整个房间都倒吸了一口气。当Mac出现时，它甚至比我们希望的还要好。它如承诺的那样小、强大和便宜。但它也是我们从未想过计算机能成为的东西：设计精美。\n我必须拥有一台。我不是一个人。在80年代中后期，我认识的所有黑客都在为Mac编写软件，或者想要这样做。剑桥的每个沙发床垫上似乎都躺着一本相同的胖白皮书。如果你把它翻过来，上面写着\u0026quot;Inside Macintosh\u0026quot;。\n然后是Linux和FreeBSD，黑客们跟随最强大的OS wherever it leads，发现自己转向了Intel盒子。如果你关心设计，你可以买一台Thinkpad，如果你能把Intel和Microsoft的标签从前面撕掉，它至少不会 actively 令人反感。[1]\n随着OS X的出现，黑客们回来了。当我走进剑桥的苹果商店时，就像回家一样。很多东西都变了，但空气中仍然有那种苹果的酷炫感，感觉表演是由真正关心的人运营的，而不是随机的公司交易者。\n那又怎样，商界可能会说。谁在乎黑客是否再次喜欢苹果？毕竟，黑客市场有多大？\n相当小，但相对于其规模来说很重要。当涉及计算机时，黑客现在正在做的事情，十年后每个人都会做。几乎所有的技术，从Unix到位图显示到Web，都是在CS部门和研究实验室中首先流行的，然后逐渐传播到世界其他地方。\n我记得1986年告诉我父亲，有一种叫做Sun的新型计算机，它是一台严肃的Unix机器，但如此小和便宜，你可以拥有一个自己坐在前面，而不是坐在连接到单个中央Vax的VT100前面。我建议，也许他应该买一些这家公司的股票。我想他真的希望他听了。\n1994年，我的朋友Koling想和他在台湾的女朋友交谈，为了节省长途账单，他写了一些软件，将声音转换为可以通过互联网发送的数据包。当时我们不确定这是否是互联网的适当用途，互联网当时仍然是一个准政府实体。他现在做的事情被称为VoIP，它是一个巨大且快速增长的业务。\n如果你想知道十年后普通人会用计算机做什么，只需在一个好大学的CS部门走一圈。无论他们在做什么，你都会做。\n在\u0026quot;平台\u0026quot;问题上，这种趋势更加明显，因为新颖的软件源自伟大的黑客，他们倾向于首先为他们个人使用的任何计算机编写它。软件销售硬件。Apple II的初始销售中，如果不是大多数的话，很多来自购买它来运行VisiCalc的人。为什么Bricklin和Frankston为Apple II编写VisiCalc？因为他们个人喜欢它。他们可以选择任何机器使其成为明星。\n如果你想吸引黑客编写销售你的硬件的软件，你必须使它成为他们自己使用的东西。仅仅使其\u0026quot;开放\u0026quot;是不够的。它必须开放且好。\n而开放且好正是Macs再次成为的。中间的几年创造了一种据我所知前所未有的情况：苹果在低端和高端都很受欢迎，但在中间不。我七十岁的母亲有一台Mac笔记本电脑。我拥有计算机科学博士学位的朋友都有Mac笔记本电脑。[2] 然而苹果的整体市场份额仍然很小。\n尽管前所未有，但我预测这种情况也是暂时的。\n所以爸爸，有家叫苹果的公司。他们制造一种新型计算机，设计得像Bang \u0026amp; Olufsen音响系统一样好，下面是你能买到的最好的Unix机器。是的，市盈率有点高，但我想很多人会想要这些。\n注释 [1] 这些可怕的标签很像前Google搜索引擎上流行的侵入性广告。它们对客户说：你不重要。我们关心Intel和Microsoft，而不是你。\n[2] Y Combinator（我们希望）主要被黑客访问。操作系统的比例是：Windows 66.4%，Macintosh 18.8%，Linux 11.4%，FreeBSD 1.5%。Mac数字与五年前相比是一个很大的变化。\n意大利语翻译 俄语翻译 中文翻译",
    "description": "",
    "tags": ["mac","苹果","编程","黑客","技术","操作系统","计算机","软件"],
    "categories": [],
    "content": "→ English Version\nMac的回归 2005年3月\n我认识的所有最好的黑客都在逐渐转向Mac。我的朋友Robert说，他在MIT的整个研究小组最近都给自己买了Powerbook。这些人不是90年代中期苹果低谷时期购买Mac的图形设计师和祖母们。他们是你能找到的最核心的OS黑客。\n原因当然是OS X。Powerbook设计精美，运行FreeBSD。你还需要知道什么？\n我在去年年底买了一台Powerbook。当我的IBM Thinkpad的硬盘很快损坏后，它成了我唯一的笔记本电脑。当我的朋友Trevor最近出现在我家时，他拿着一台与我相同的Powerbook。\n对我们大多数人来说，这不是转向苹果，而是回归。尽管在90年代中期很难相信，但Mac在其时代是典型的黑客计算机。\n1983年秋天，我大学的一门CS课教授站起来，像先知一样宣布，很快将有一种计算机具有半MIPS的处理能力，可以放在飞机座位下，价格如此便宜，我们可以从暑假工作中节省足够的钱来买一台。整个房间都倒吸了一口气。当Mac出现时，它甚至比我们希望的还要好。它如承诺的那样小、强大和便宜。但它也是我们从未想过计算机能成为的东西：设计精美。\n我必须拥有一台。我不是一个人。在80年代中后期，我认识的所有黑客都在为Mac编写软件，或者想要这样做。剑桥的每个沙发床垫上似乎都躺着一本相同的胖白皮书。如果你把它翻过来，上面写着\u0026quot;Inside Macintosh\u0026quot;。\n然后是Linux和FreeBSD，黑客们跟随最强大的OS wherever it leads，发现自己转向了Intel盒子。如果你关心设计，你可以买一台Thinkpad，如果你能把Intel和Microsoft的标签从前面撕掉，它至少不会 actively 令人反感。[1]\n随着OS X的出现，黑客们回来了。当我走进剑桥的苹果商店时，就像回家一样。很多东西都变了，但空气中仍然有那种苹果的酷炫感，感觉表演是由真正关心的人运营的，而不是随机的公司交易者。\n那又怎样，商界可能会说。谁在乎黑客是否再次喜欢苹果？毕竟，黑客市场有多大？\n相当小，但相对于其规模来说很重要。当涉及计算机时，黑客现在正在做的事情，十年后每个人都会做。几乎所有的技术，从Unix到位图显示到Web，都是在CS部门和研究实验室中首先流行的，然后逐渐传播到世界其他地方。\n我记得1986年告诉我父亲，有一种叫做Sun的新型计算机，它是一台严肃的Unix机器，但如此小和便宜，你可以拥有一个自己坐在前面，而不是坐在连接到单个中央Vax的VT100前面。我建议，也许他应该买一些这家公司的股票。我想他真的希望他听了。\n1994年，我的朋友Koling想和他在台湾的女朋友交谈，为了节省长途账单，他写了一些软件，将声音转换为可以通过互联网发送的数据包。当时我们不确定这是否是互联网的适当用途，互联网当时仍然是一个准政府实体。他现在做的事情被称为VoIP，它是一个巨大且快速增长的业务。\n如果你想知道十年后普通人会用计算机做什么，只需在一个好大学的CS部门走一圈。无论他们在做什么，你都会做。\n在\u0026quot;平台\u0026quot;问题上，这种趋势更加明显，因为新颖的软件源自伟大的黑客，他们倾向于首先为他们个人使用的任何计算机编写它。软件销售硬件。Apple II的初始销售中，如果不是大多数的话，很多来自购买它来运行VisiCalc的人。为什么Bricklin和Frankston为Apple II编写VisiCalc？因为他们个人喜欢它。他们可以选择任何机器使其成为明星。\n如果你想吸引黑客编写销售你的硬件的软件，你必须使它成为他们自己使用的东西。仅仅使其\u0026quot;开放\u0026quot;是不够的。它必须开放且好。\n而开放且好正是Macs再次成为的。中间的几年创造了一种据我所知前所未有的情况：苹果在低端和高端都很受欢迎，但在中间不。我七十岁的母亲有一台Mac笔记本电脑。我拥有计算机科学博士学位的朋友都有Mac笔记本电脑。[2] 然而苹果的整体市场份额仍然很小。\n尽管前所未有，但我预测这种情况也是暂时的。\n所以爸爸，有家叫苹果的公司。他们制造一种新型计算机，设计得像Bang \u0026amp; Olufsen音响系统一样好，下面是你能买到的最好的Unix机器。是的，市盈率有点高，但我想很多人会想要这些。\n注释 [1] 这些可怕的标签很像前Google搜索引擎上流行的侵入性广告。它们对客户说：你不重要。我们关心Intel和Microsoft，而不是你。\n[2] Y Combinator（我们希望）主要被黑客访问。操作系统的比例是：Windows 66.4%，Macintosh 18.8%，Linux 11.4%，FreeBSD 1.5%。Mac数字与五年前相比是一个很大的变化。\n意大 …"
  },{
    "title": "Made in USA",
    "url": "/paul_graham/essays_en/usa/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nMade in USA November 2004\n(This is a new essay for the Japanese edition of Hackers \u0026amp; Painters. It tries to explain why Americans make some things well and others badly.)\nA few years ago an Italian friend of mine travelled by train from Boston to Providence. She had only been in America for a couple weeks and hadn\u0026rsquo;t seen much of the country yet. She arrived looking astonished. \u0026ldquo;It\u0026rsquo;s so ugly!\u0026rdquo;\n",
    "description": "",
    "tags": ["american_culture","design","manufacturing","innovation","business","comparison"],
    "categories": [],
    "content": "→ 中文版本\nMade in USA November 2004\n(This is a new essay for the Japanese edition of Hackers \u0026amp; Painters. It tries to explain why Americans make some things well and others badly.)\nA few years ago an Italian friend of mine travelled by train from Boston to Providence. She had only been in America for a couple weeks and hadn\u0026rsquo;t seen much of the country yet. She arrived looking astonished. \u0026ldquo;It\u0026rsquo;s so ugly!\u0026rdquo;\nPeople from other rich countries can scarcely imagine the squalor of the man-made bits of America. In travel books they show you mostly natural environments: the Grand Canyon, whitewater rafting, horses in a field. If you see pictures with man-made things in them, it will be either a view of the New York skyline shot from a discreet distance, or a carefully cropped image of a seacoast town in Maine.\nHow can it be, visitors must wonder. How can the richest country in the world look like this?\nOddly enough, it may not be a coincidence. Americans are good at some things and bad at others. We\u0026rsquo;re good at making movies and software, and bad at making cars and cities. And I think we may be good at what we\u0026rsquo;re good at for the same reason we\u0026rsquo;re bad at what we\u0026rsquo;re bad at. We\u0026rsquo;re impatient. In America, if you want to do something, you don\u0026rsquo;t worry that it might come out badly, or upset delicate social balances, or that people might think you\u0026rsquo;re getting above yourself. If you want to do something, as Nike says, just do it.\nThis works well in some fields and badly in others. I suspect it works in movies and software because they\u0026rsquo;re both messy processes. \u0026ldquo;Systematic\u0026rdquo; is the last word I\u0026rsquo;d use to describe the way good programmers write software. Code is not something they assemble painstakingly after careful planning, like the pyramids. It\u0026rsquo;s something they plunge into, working fast and constantly changing their minds, like a charcoal sketch.\nIn software, paradoxical as it sounds, good …"
  },{
    "title": "Maker's Schedule, Manager's Schedule",
    "url": "/paul_graham/essays_en/makersschedule/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Maker\u0026rsquo;s Schedule, Manager\u0026rsquo;s Schedule July 2009\n\u0026ldquo;\u0026hellip;the mere consciousness of an engagement will sometimes worry a whole day.\u0026rdquo; – Charles Dickens\nOne reason programmers dislike meetings so much is that they\u0026rsquo;re on a different type of schedule from other people. Meetings cost them more.\nThere are two types of schedule, which I\u0026rsquo;ll call the manager\u0026rsquo;s schedule and the maker\u0026rsquo;s schedule. The manager\u0026rsquo;s schedule is for bosses. It\u0026rsquo;s embodied in the traditional appointment book, with each day cut into one hour intervals. You can block off several hours for a single task if you need to, but by default you change what you\u0026rsquo;re doing every hour.\n",
    "description": "",
    "tags": ["time","management","productivity","programming","schedule","work","meetings","startup","ycombinator"],
    "categories": [],
    "content": "Maker\u0026rsquo;s Schedule, Manager\u0026rsquo;s Schedule July 2009\n\u0026ldquo;\u0026hellip;the mere consciousness of an engagement will sometimes worry a whole day.\u0026rdquo; – Charles Dickens\nOne reason programmers dislike meetings so much is that they\u0026rsquo;re on a different type of schedule from other people. Meetings cost them more.\nThere are two types of schedule, which I\u0026rsquo;ll call the manager\u0026rsquo;s schedule and the maker\u0026rsquo;s schedule. The manager\u0026rsquo;s schedule is for bosses. It\u0026rsquo;s embodied in the traditional appointment book, with each day cut into one hour intervals. You can block off several hours for a single task if you need to, but by default you change what you\u0026rsquo;re doing every hour.\nWhen you use time that way, it\u0026rsquo;s merely a practical problem to meet with someone. Find an open slot in your schedule, book them, and you\u0026rsquo;re done.\nMost powerful people are on the manager\u0026rsquo;s schedule. It\u0026rsquo;s the schedule of command. But there\u0026rsquo;s another way of using time that\u0026rsquo;s common among people who make things, like programmers and writers. They generally prefer to use time in units of half a day at least. You can\u0026rsquo;t write or program well in units of an hour. That\u0026rsquo;s barely enough time to get started.\nWhen you\u0026rsquo;re operating on the maker\u0026rsquo;s schedule, meetings are a disaster. A single meeting can blow a whole afternoon, by breaking it into two pieces each too small to do anything hard in. Plus you have to remember to go to the meeting. That\u0026rsquo;s no problem for someone on the manager\u0026rsquo;s schedule. There\u0026rsquo;s always something coming on the next hour; the only question is what. But when someone on the maker\u0026rsquo;s schedule has a meeting, they have to think about it.\nFor someone on the maker\u0026rsquo;s schedule, having a meeting is like throwing an exception. It doesn\u0026rsquo;t merely cause you to switch from one task to another; it changes the mode in which you work.\nI find one meeting can sometimes affect a whole day. …"
  },{
    "title": "Maybe",
    "url": "/paul_graham/essays_en/maybe/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nMaybe February 2009\nA lot of cities look at Silicon Valley and ask \u0026ldquo;How could we make something like that happen here?\u0026rdquo; The organic way to do it is to establish a first-rate university in a place where rich people want to live. That\u0026rsquo;s how Silicon Valley happened. But could you shortcut the process by funding startups?\nPossibly. Let\u0026rsquo;s consider what it would take.\nThe first thing to understand is that encouraging startups is a different problem from encouraging startups in a particular city. The latter is much more expensive.\n",
    "description": "",
    "tags": ["silicon valley","startups","funding","cities","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版本\nMaybe February 2009\nA lot of cities look at Silicon Valley and ask \u0026ldquo;How could we make something like that happen here?\u0026rdquo; The organic way to do it is to establish a first-rate university in a place where rich people want to live. That\u0026rsquo;s how Silicon Valley happened. But could you shortcut the process by funding startups?\nPossibly. Let\u0026rsquo;s consider what it would take.\nThe first thing to understand is that encouraging startups is a different problem from encouraging startups in a particular city. The latter is much more expensive.\nPeople sometimes think they could improve the startup scene in their town by starting something like Y Combinator there, but in fact it will have near zero effect. I know because Y Combinator itself had near zero effect on Boston when we were based there half the year. The people we funded came from all over the country (indeed, the world) and afterward they went wherever they could get more funding—which generally meant Silicon Valley.\nThe seed funding business is not a regional business, because at that stage startups are mobile. They\u0026rsquo;re just a couple founders with laptops. [1]\nIf you want to encourage startups in a particular city, you have to fund startups that won\u0026rsquo;t leave. There are two ways to do that: have rules preventing them from leaving, or fund them at the point in their life when they naturally take root. The first approach is a mistake, because it becomes a filter for selecting bad startups. If your terms force startups to do things they don\u0026rsquo;t want to, only the desperate ones will take your money.\nGood startups will move to another city as a condition of funding. What they won\u0026rsquo;t do is agree not to move the next time they need funding. So the only way to get them to stay is to give them enough that they never need to leave.\nHow much would that take? If you want to keep startups from leaving your town, you have to give them enough that they\u0026rsquo;re not tempted by an offer from …"
  },{
    "title": "Mean",
    "url": "/paul_graham/essays_en/mean/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nMean November 2014\nIt struck me recently how few of the most successful people I know are mean. There are exceptions, but remarkably few.\nMeanness isn\u0026rsquo;t rare. In fact, one of the things the internet has shown us is how mean people can be. A few decades ago, only famous people and professional writers got to publish their opinions. Now everyone can, and we can all see the long tail of meanness that had previously been hidden.\n",
    "description": "",
    "tags": ["character","success","kindness","entrepreneurship","leadership"],
    "categories": [],
    "content": "→ 中文版本\nMean November 2014\nIt struck me recently how few of the most successful people I know are mean. There are exceptions, but remarkably few.\nMeanness isn\u0026rsquo;t rare. In fact, one of the things the internet has shown us is how mean people can be. A few decades ago, only famous people and professional writers got to publish their opinions. Now everyone can, and we can all see the long tail of meanness that had previously been hidden.\nAnd yet while there are clearly a lot of mean people out there, there are next to none among the most successful people I know. What\u0026rsquo;s going on here? Are meanness and success inversely correlated?\nPart of what\u0026rsquo;s going on, of course, is selection bias. I only know people who work in certain fields: startup founders, programmers, professors. I\u0026rsquo;m willing to believe that successful people in other fields are mean. Maybe successful hedge fund managers are mean; I don\u0026rsquo;t know enough to say. It seems quite likely that most successful drug lords are mean. But there are at least big chunks of the world that mean people don\u0026rsquo;t rule, and that territory seems to be growing.\nMy wife and Y Combinator cofounder Jessica is one of those rare people who have x-ray vision for character. Being married to her is like standing next to an airport baggage scanner. She came to the startup world from investment banking, and she has always been struck both by how consistently successful startup founders turn out to be good people, and how consistently bad people fail as startup founders.\nWhy? I think there are several reasons. One is that being mean makes you stupid. That\u0026rsquo;s why I hate fights. You never do your best work in a fight, because fights are not sufficiently general. Winning is always a function of the situation and the people involved. You don\u0026rsquo;t win fights by thinking of big ideas but by thinking of tricks that work in one particular case. And yet fighting is just as much work as thinking about real problems. …"
  },{
    "title": "Microsoft is Dead",
    "url": "/paul_graham/essays_en/microsoft/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nMicrosoft is Dead April 2007\nA few days ago I suddenly realized Microsoft was dead. I was talking to a young startup founder about how Google was different from Yahoo. I said that Yahoo had been warped from the start by their fear of Microsoft. That was why they\u0026rsquo;d positioned themselves as a \u0026ldquo;media company\u0026rdquo; instead of a technology company. Then I looked at his face and realized he didn\u0026rsquo;t understand. It was as if I\u0026rsquo;d told him how much girls liked Barry Manilow in the mid 80s. Barry who? Microsoft? He didn\u0026rsquo;t say anything, but I could tell he didn\u0026rsquo;t quite believe anyone would be frightened of them.\n",
    "description": "",
    "tags": ["microsoft","google","apple","web","software","technology"],
    "categories": [],
    "content": "→ 中文版本\nMicrosoft is Dead April 2007\nA few days ago I suddenly realized Microsoft was dead. I was talking to a young startup founder about how Google was different from Yahoo. I said that Yahoo had been warped from the start by their fear of Microsoft. That was why they\u0026rsquo;d positioned themselves as a \u0026ldquo;media company\u0026rdquo; instead of a technology company. Then I looked at his face and realized he didn\u0026rsquo;t understand. It was as if I\u0026rsquo;d told him how much girls liked Barry Manilow in the mid 80s. Barry who? Microsoft? He didn\u0026rsquo;t say anything, but I could tell he didn\u0026rsquo;t quite believe anyone would be frightened of them.\nMicrosoft cast a shadow over the software world for almost 20 years starting in the late 80s. I can remember when it was IBM before them. I mostly ignored this shadow. I never used Microsoft software, so it only affected me indirectly—for example, in the spam I got from botnets. And because I wasn\u0026rsquo;t paying attention, I didn\u0026rsquo;t notice when the shadow disappeared.\nBut it\u0026rsquo;s gone now. I can sense that. No one is even afraid of Microsoft anymore. They still make a lot of money—so does IBM, for that matter. But they\u0026rsquo;re not dangerous.\nWhen did Microsoft die, and of what? I know they seemed dangerous as late as 2001, because I wrote an essay then about how they were less dangerous than they seemed. I\u0026rsquo;d guess they were dead by 2005. I know when we started Y Combinator we didn\u0026rsquo;t worry about Microsoft as competition for the startups we funded. In fact, we\u0026rsquo;ve never even invited them to the demo days we organize for startups to present to investors. We invite Yahoo and Google and some other Internet companies, but we\u0026rsquo;ve never bothered to invite Microsoft. Nor has anyone there ever even sent us an email. They\u0026rsquo;re in a different world.\nWhat killed them? Four things, I think, all of them occurring simultaneously in the mid 2000s.\nThe most obvious is Google. There can only be one big man in …"
  },{
    "title": "Mind the Gap",
    "url": "/paul_graham/essays_en/gap/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nMind the Gap May 2004\nWhen people care enough about something to do it well, those who do it best tend to be far better than everyone else. There\u0026rsquo;s a huge gap between Leonardo and second-rate contemporaries like Borgognone. You see the same gap between Raymond Chandler and the average writer of detective novels. A top-ranked professional chess player could play ten thousand games against an ordinary club player without losing once.\n",
    "description": "",
    "tags": ["wealth","income","inequality","technology","society","economics"],
    "categories": [],
    "content": "→ 中文版本\nMind the Gap May 2004\nWhen people care enough about something to do it well, those who do it best tend to be far better than everyone else. There\u0026rsquo;s a huge gap between Leonardo and second-rate contemporaries like Borgognone. You see the same gap between Raymond Chandler and the average writer of detective novels. A top-ranked professional chess player could play ten thousand games against an ordinary club player without losing once.\nLike chess or painting or writing novels, making money is a very specialized skill. But for some reason we treat this skill differently. No one complains when a few people surpass all the rest at playing chess or writing novels, but when a few people make more money than the rest, we get editorials saying this is wrong.\nWhy? The pattern of variation seems no different than for any other skill. What causes people to react so strongly when the skill is making money?\nI think there are three reasons we treat making money as different: the misleading model of wealth we learn as children; the disreputable way in which, till recently, most fortunes were accumulated; and the worry that great variations in income are somehow bad for society. As far as I can tell, the first is mistaken, the second outdated, and the third empirically false. Could it be that, in a modern democracy, variation in income is actually a sign of health?\nThe Daddy Model of Wealth When I was five I thought electricity was created by electric sockets. I didn\u0026rsquo;t realize there were power plants out there generating it. Likewise, it doesn\u0026rsquo;t occur to most kids that wealth is something that has to be generated. It seems to be something that flows from parents.\nBecause of the circumstances in which they encounter it, children tend to misunderstand wealth. They confuse it with money. They think that there is a fixed amount of it. And they think of it as something that\u0026rsquo;s distributed by authorities (and so should be distributed equally), rather than …"
  },{
    "title": "Mod",
    "url": "/paul_graham/essays_en/mod/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Mod The Two Kinds of Moderate December 2019\nThere are two distinct ways to be politically moderate: on purpose and by accident. Intentional moderates are trimmers, deliberately choosing a position mid-way between the extremes of right and left. Accidental moderates end up in the middle, on average, because they make up their own minds about each question, and the far right and far left are roughly equally wrong.\nYou can distinguish intentional from accidental moderates by the distribution of their opinions. If the far left opinion on some matter is 0 and the far right opinion 100, an intentional moderate\u0026rsquo;s opinion on every question will be near 50. Whereas an accidental moderate\u0026rsquo;s opinions will be scattered over a broad range, but will, like those of the intentional moderate, average to about 50.\n",
    "description": "",
    "tags": ["politics","moderation","independent thinking","ideology","courage"],
    "categories": [],
    "content": "Mod The Two Kinds of Moderate December 2019\nThere are two distinct ways to be politically moderate: on purpose and by accident. Intentional moderates are trimmers, deliberately choosing a position mid-way between the extremes of right and left. Accidental moderates end up in the middle, on average, because they make up their own minds about each question, and the far right and far left are roughly equally wrong.\nYou can distinguish intentional from accidental moderates by the distribution of their opinions. If the far left opinion on some matter is 0 and the far right opinion 100, an intentional moderate\u0026rsquo;s opinion on every question will be near 50. Whereas an accidental moderate\u0026rsquo;s opinions will be scattered over a broad range, but will, like those of the intentional moderate, average to about 50.\nIntentional moderates are similar to those on the far left and the far right in that their opinions are, in a sense, not their own. The defining quality of an ideologue, whether on the left or the right, is to acquire one\u0026rsquo;s opinions in bulk. You don\u0026rsquo;t get to pick and choose. Your opinions about taxation can be predicted from your opinions about sex. And although intentional moderates might seem to be the opposite of ideologues, their beliefs (though in their case the word \u0026ldquo;positions\u0026rdquo; might be more accurate) are also acquired in bulk. If the median opinion shifts to the right or left, the intentional moderate must shift with it. Otherwise they stop being moderate.\nAccidental moderates, on the other hand, not only choose their own answers, but choose their own questions. They may not care at all about questions that the left and right both think are terribly important. So you can only even measure the politics of an accidental moderate from the intersection of the questions they care about and those the left and right care about, and this can sometimes be vanishingly small.\nIt is not merely a manipulative rhetorical trick to say \u0026ldquo;if …"
  },{
    "title": "Modeling a Wealth Tax",
    "url": "/paul_graham/essays_en/wtax/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nModeling a Wealth Tax August 2020\nSome politicians are proposing to introduce wealth taxes in addition to income and capital gains taxes. Let\u0026rsquo;s try modeling the effects of various levels of wealth tax to see what they would mean in practice for a startup founder.\nSuppose you start a successful startup in your twenties, and then live for another 60 years. How much of your stock will a wealth tax consume?\n",
    "description": "",
    "tags": ["wealth tax","economics","startups","taxation","policy"],
    "categories": [],
    "content": "→ 中文版\nModeling a Wealth Tax August 2020\nSome politicians are proposing to introduce wealth taxes in addition to income and capital gains taxes. Let\u0026rsquo;s try modeling the effects of various levels of wealth tax to see what they would mean in practice for a startup founder.\nSuppose you start a successful startup in your twenties, and then live for another 60 years. How much of your stock will a wealth tax consume?\nIf the wealth tax applies to all your assets, it\u0026rsquo;s easy to calculate its effect. A wealth tax of 1% means you get to keep 99% of your stock each year. After 60 years the proportion of stock you\u0026rsquo;ll have left will be .99^60, or .547. So a straight 1% wealth tax means the government will over the course of your life take 45% of your stock.\n(Losing shares does not, obviously, mean becoming net poorer unless the value per share is increasing by less than the wealth tax rate.)\nHere\u0026rsquo;s how much stock the government would take over 60 years at various levels of wealth tax:\nwealth tax government takes 0.1% 6% 0.5% 26% 1.0% 45% 2.0% 70% 3.0% 84% 4.0% 91% 5.0% 95% A wealth tax will usually have a threshold at which it starts. How much difference would a high threshold make? To model that, we need to make some assumptions about the initial value of your stock and the growth rate.\nSuppose your stock is initially worth $2 million, and the company's trajectory is as follows: the value of your stock grows 3x for 2 years, then 2x for 2 years, then 50% for 2 years, after which you just get a typical public company growth rate, which we'll call 8%. [1] Suppose the wealth tax threshold is $50 million. How much stock does the government take now?\nwealth tax government takes 0.1% 5% 0.5% 23% 1.0% 41% 2.0% 65% 3.0% 79% 4.0% 88% 5.0% 93% It may at first seem surprising that such apparently small tax rates produce such dramatic effects. A 2% wealth tax with a $50 million threshold takes about two thirds of a successful founder\u0026rsquo;s stock.\nThe reason wealth …"
  },{
    "title": "N 件事的清单",
    "url": "/paul_graham/essays_zh/nthings/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nN 件事的清单 2009年9月\n我敢打赌，当前《Cosmopolitan》杂志上有一篇文章的标题以数字开头。\u0026ldquo;关于性他不会告诉你的7件事\u0026rdquo;，或者类似的内容。一些流行杂志每期封面上都有这类文章。这不可能是偶然发生的。编辑们一定知道它们吸引读者。\n为什么读者这么喜欢n件事的清单？主要是因为它比普通文章更容易阅读。[1] 从结构上讲，n件事的清单是散文的退化情况。散文可以随心所欲地到作者想去的地方。在n件事的清单中，作者同意约束自己，提出一系列大致同等重要的观点，并且他明确告诉读者这些观点是什么。\n阅读文章的部分工作是理解其结构——弄清我们在高中时可能会称之为\u0026quot;大纲\u0026quot;的东西。当然不是明确的，但真正理解文章的人之后脑子里可能会有一些对应于这样大纲的东西。在n件事的清单中，这项工作为你完成。它的结构是一个外骨骼。\n除了明确之外，结构保证是最简单的类型：几个主要点，几乎没有次要点，它们之间没有特别的联系。\n因为主要点是不相关的，n件事的清单是随机访问的。没有你必须遵循的推理线索。你可以以任何顺序阅读这个清单。因为这些要点彼此独立，它们就像一艘不沉船中的防水隔舱。如果你对一个要点感到厌烦，或者无法理解，或者不同意，你不必放弃这篇文章。你可以放弃那个观点，跳到下一个。n件事的清单是并行的，因此是容错的。\n有时候这种格式正是作家想要的。一个很明显的情况是，当你不得不说的话实际上就是n件事的清单。我曾经写过一篇关于导致初创公司犯错误的散文，一些人嘲笑我写了一篇标题以数字开头的文章。但在那种情况下，我真的试图制作一个独立事物的完整目录。事实上，我试图回答的问题之一是有多少。\n使用这种格式还有其他不太合理的原因。例如，当我接近截止日期时使用它。如果我必须做一个演讲而前几天还没有开始，我有时会保守行事，让演讲成为一个n件事的清单。\nn件事的清单对作家和读者都更容易。当你在写真正的散文时，总是有可能遇到死胡同。真正的散文是一列思路火车，有些思路火车就是这样消失的。当你几天后必须做演讲时，这是一个令人担忧的可能性。如果你没有想法怎么办？n件事的清单的分区结构保护作家免受自己愚蠢的影响，就像它保护读者一样。如果你在一个点上没有想法，没问题：它不会毁掉散文。如果需要，你可以删除整个要点，散文仍然会存活。\n写n件事的清单很放松。你在前5分钟就想到了其中的n/2个。砰，这就是结构，你只需要填充它。当你想到更多要点时，只需将它们添加到末尾。也许你会删除或重新排列或组合一些，但在每个阶段你都有一个有效的（虽然最初是低分辨率的）n件事的清单。这就像那种你非常快速地编写版本1然后逐渐修改它的编程，或者那种你用一小时完成一个完整但非常模糊的草图，然后花一周时间提高分辨率的绘画风格。\n因为n件事的清单对作家也更容易，读者更喜欢它并不总是一个不祥的征兆。这并不一定证明读者懒惰；也可能意味着他们对作家没有太大信心。在这方面，n件事的清单是散文形式的芝士汉堡。如果你在一家你怀疑不好的餐厅吃饭，你最好的选择是点芝士汉堡。即使是糟糕的厨师也能做出像样的芝士汉堡。而且对于芝士汉堡应该是什么样子有相当严格的约定。你可以假设厨师不会尝试奇怪和艺术性的东西。n件事的清单同样限制了糟糕作家可能造成的损害。你知道它将是关于标题所说的内容，格式阻止作家沉溺于任何奇思妙想。\n因为n件事的清单是最简单的散文形式，它应该是初学写作者的一个好形式。事实上，这是大多数初学写作者被教导的内容。经典的5段式散文实际上是n=3的n件事的清单。但写它们的学生没有意识到他们使用的是与他们在《Cosmopolitan》中阅读的文章相同的结构。他们不允许包含数字，并且期望他们用多余的过渡词（\u0026ldquo;此外\u0026hellip;\u0026hellip;\u0026quot;）填补空白，并在两端用介绍性和结论段落覆盖它，使其表面上看起来像真正的散文。[2]\n让学生从n件事的清单开始似乎是个好计划。这是最简单的形式。但如果我们打算这样做，为什么不公开做呢？让他们像专业人士一样写n件事的清单，有数字，没有过渡词或\u0026quot;结论\u0026rdquo;。\n有一种情况，n件事的清单是一个不诚实的格式：当你通过虚假声称清单是详尽的来吸引注意力时。即，如果你写一篇声称是关于7个成功秘诀的文章。那种标题类似于侦探小说的反射性挑战。你至少需要看一下文章，检查它们是否是你列出的同样的7个。你是否忽略了成功的秘诀之一？最好检查一下。\n如果你真的相信你已经制作了一个详尽的清单，可以在数字前加上\u0026quot;The\u0026quot;。但有证据表明，大多数这种标题的东西都是链接诱饵。\nn件事的清单最大的弱点是新思想的空间太小。散文写作的主要要点，当做得正确时，是你在写作过程中产生的新思想。真正的散文，顾名思义，是动态的：你开始时不知道你要写什么。它将是关于你在写作过程中发现的任何东西。\n这只能在n件事的清单中以非常有限的方式发生。你先制作标题，这就是它将要关于的内容。你在写作中不能有更多的新思想，只能适应你最初设置的防水隔舱。你的大脑似乎知道这一点：因为你没有新思想的空间，你就不会有新思想。\n向初学写作者承认5段式散文实际上是n件事的清单的另一个好处是，我们可以警告他们这一点。它只让你在一两句思想的规模上体验散文写作的定义特征：而5段式散文将n件事的清单隐藏在看起来像更复杂类型散文的东西中，这尤其危险。如果你不知道你在使用这种形式，你就不知道你需要逃离它。\n注释\n[1] 这种类型的文章在Delicious上也惊人地受欢迎，但我认为这是因为delicious/popular是由书签驱动的，而不是因为Delicious用户愚蠢。Delicious用户是收藏家，而n件事的清单似乎特别值得收藏，因为它本身就是一个集合。\n[2] 学校数学教科书中的大多数\u0026quot;文字题\u0026quot;也具有误导性。它们表面上看起来像是将数学应用于真实问题，但事实并非如此。因此，如果有什么的话，它们强化了数学仅仅是需要记忆的复杂但无意义的东西的印象。\n",
    "description": "",
    "tags": ["写作","散文","结构","传播","媒体","内容创作"],
    "categories": [],
    "content": "→ English Version\nN 件事的清单 2009年9月\n我敢打赌，当前《Cosmopolitan》杂志上有一篇文章的标题以数字开头。\u0026ldquo;关于性他不会告诉你的7件事\u0026rdquo;，或者类似的内容。一些流行杂志每期封面上都有这类文章。这不可能是偶然发生的。编辑们一定知道它们吸引读者。\n为什么读者这么喜欢n件事的清单？主要是因为它比普通文章更容易阅读。[1] 从结构上讲，n件事的清单是散文的退化情况。散文可以随心所欲地到作者想去的地方。在n件事的清单中，作者同意约束自己，提出一系列大致同等重要的观点，并且他明确告诉读者这些观点是什么。\n阅读文章的部分工作是理解其结构——弄清我们在高中时可能会称之为\u0026quot;大纲\u0026quot;的东西。当然不是明确的，但真正理解文章的人之后脑子里可能会有一些对应于这样大纲的东西。在n件事的清单中，这项工作为你完成。它的结构是一个外骨骼。\n除了明确之外，结构保证是最简单的类型：几个主要点，几乎没有次要点，它们之间没有特别的联系。\n因为主要点是不相关的，n件事的清单是随机访问的。没有你必须遵循的推理线索。你可以以任何顺序阅读这个清单。因为这些要点彼此独立，它们就像一艘不沉船中的防水隔舱。如果你对一个要点感到厌烦，或者无法理解，或者不同意，你不必放弃这篇文章。你可以放弃那个观点，跳到下一个。n件事的清单是并行的，因此是容错的。\n有时候这种格式正是作家想要的。一个很明显的情况是，当你不得不说的话实际上就是n件事的清单。我曾经写过一篇关于导致初创公司犯错误的散文，一些人嘲笑我写了一篇标题以数字开头的文章。但在那种情况下，我真的试图制作一个独立事物的完整目录。事实上，我试图回答的问题之一是有多少。\n使用这种格式还有其他不太合理的原因。例如，当我接近截止日期时使用它。如果我必须做一个演讲而前几天还没有开始，我有时会保守行事，让演讲成为一个n件事的清单。\nn件事的清单对作家和读者都更容易。当你在写真正的散文时，总是有可能遇到死胡同。真正的散文是一列思路火车，有些思路火车就是这样消失的。当你几天后必须做演讲时，这是一个令人担忧的可能性。如果你没有想法怎么办？n件事的清单的分区结构保护作家免受自己愚蠢的影响，就像它保护读者一样。如果你在一个点上没有想法，没问题：它不会毁掉散文。如果需要，你可以删除整个要点，散文仍然会存活。\n写n件事的清单很放松。你在前5分钟就想到了其中的n/2个。砰，这就是结构，你只需要填充它。当你想到更多要点时，只需将它们添加到末尾。也许你会删除或重新排列或组合一些，但在每个阶段你都有一个有效的（虽然最初是低分辨率的）n件事的清单。这就像那种你非常快速地编写版本1然后逐渐修改它的编程，或者那种你用一小时完成一个完整但非常模糊的草图，然后花一周时间提高分辨率的绘画风格。\n因为n件事的清单对作家也更容易，读者更喜欢它并不总是一个不祥的征兆。这并不一定证明读者懒惰；也可能意味着他们对作家没有太大信心。在这方面，n件事的清单是散文形式的芝士汉堡。如果你在一家你怀疑不好的餐厅吃饭，你最好的选择是点芝士汉堡。即使是糟糕的厨师也能做出像样的芝士汉堡。而且对于芝士汉堡应该是什么样子有相当严格的约定。你可以假设厨师不会尝试奇怪和艺术性的东西。n件事的清单同样限制了糟糕作家可能造成的损害。你知道它将是关于标题所说的内容，格式阻止作家沉溺于任何奇思妙想。\n因为n件事的清单是最简单的散文形式，它应该是初学写作者的一个好形式。事实上，这是大多数初学写作者被教导的内容。经典的5段式散文实际上是n=3的n件事的清单。但写它们的学生没有意识到他们使用的是与他们在《Cosmopolitan》中阅读的文章相同的结构。他们不允许包含数字，并且期望他们用多余的过渡词（\u0026ldquo;此外\u0026hellip;\u0026hellip;\u0026quot;）填补空白，并在两端用介绍性和结论段落覆盖它，使其表面上看起来像真正的散文。[2]\n让学生从n件事的清单开始似乎是个好计划。这是最简单的形式。但如果我们打算这样做，为什么不公开做呢？让他们像专业人士一样写n件事的清单，有数字，没有过渡词或\u0026quot;结论\u0026rdquo;。\n有一种情况，n件事的清单是一个不诚实的格式：当你通过虚假声称清单是详尽的来吸引注意力时。即，如果你写一篇声称是关于7个成功秘诀的文章。那种标题类似于侦探小说的反射性挑战。你至少需要看一下文章，检查它们是否是你列出的同样的7个。你是否忽略了成功的秘诀之一？最好检查一下。\n如果你真的相信你已经制作了一个详尽的清单，可以在数字前加上\u0026quot;The\u0026quot;。但有证据表明，大多数这种标题的东西都是链接诱饵。\nn件事的清单最大的弱点是新思想的空间太小。散文写作的主要要点，当做得正确时，是你在写作过程中产生的新思想。真正的散文，顾名思 …"
  },{
    "title": "News from the Front",
    "url": "/paul_graham/essays_en/colleges/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nNews from the Front September 2007\nA few weeks ago I had a thought so heretical that it really surprised me. It may not matter all that much where you go to college.\nFor me, as for a lot of middle class kids, getting into a good college was more or less the meaning of life when I was growing up. What was I? A student. To do that well meant to get good grades. Why did one have to get good grades? To get into a good college. And why did one want to do that? There seemed to be several reasons: you\u0026rsquo;d learn more, get better jobs, make more money. But it didn\u0026rsquo;t matter exactly what the benefits would be. College was a bottleneck through which all your future prospects passed; everything would be better if you went to a better college.\n",
    "description": "",
    "tags": ["college","university","success","education","Y-Combinator","admissions"],
    "categories": [],
    "content": "→ 中文版本\nNews from the Front September 2007\nA few weeks ago I had a thought so heretical that it really surprised me. It may not matter all that much where you go to college.\nFor me, as for a lot of middle class kids, getting into a good college was more or less the meaning of life when I was growing up. What was I? A student. To do that well meant to get good grades. Why did one have to get good grades? To get into a good college. And why did one want to do that? There seemed to be several reasons: you\u0026rsquo;d learn more, get better jobs, make more money. But it didn\u0026rsquo;t matter exactly what the benefits would be. College was a bottleneck through which all your future prospects passed; everything would be better if you went to a better college.\nA few weeks ago I realized that somewhere along the line I had stopped believing that.\nWhat first set me thinking about this was the new trend of worrying obsessively about what kindergarten your kids go to. It seemed to me this couldn\u0026rsquo;t possibly matter. Either it won\u0026rsquo;t help your kid get into Harvard, or if it does, getting into Harvard won\u0026rsquo;t mean much anymore. And then I thought: how much does it mean even now?\nIt turns out I have a lot of data about that. My three partners and I run a seed stage investment firm called Y Combinator. We invest when the company is just a couple guys and an idea. The idea doesn\u0026rsquo;t matter much; it will change anyway. Most of our decision is based on the founders. The average founder is three years out of college. Many have just graduated; a few are still in school. So we\u0026rsquo;re in much the same position as a graduate program, or a company hiring people right out of college. Except our choices are immediately and visibly tested. There are two possible outcomes for a startup: success or failure—and usually you know within a year which it will be.\nThe test applied to a startup is among the purest of real world tests. A startup succeeds or fails depending almost entirely …"
  },{
    "title": "Not Not",
    "url": "/paul_graham/essays_en/notnot/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nNot Not March 2007\n(This essay is derived from talks at the 2007 Startup School and the Berkeley CSUA.)\nWe\u0026rsquo;ve now been doing Y Combinator long enough to have some data about success rates. Our first batch, in the summer of 2005, had eight startups in it. Of those eight, it now looks as if at least four succeeded. Three have been acquired: Reddit was a merger of two, Reddit and Infogami, and a third was acquired that we can\u0026rsquo;t talk about yet. Another from that batch was Loopt, which is doing so well they could probably be acquired in about ten minutes if they wanted to.\n",
    "description": "",
    "tags": ["entrepreneurship","startup advice","y combinator","founders","risk taking"],
    "categories": [],
    "content": "→ 中文版本\nNot Not March 2007\n(This essay is derived from talks at the 2007 Startup School and the Berkeley CSUA.)\nWe\u0026rsquo;ve now been doing Y Combinator long enough to have some data about success rates. Our first batch, in the summer of 2005, had eight startups in it. Of those eight, it now looks as if at least four succeeded. Three have been acquired: Reddit was a merger of two, Reddit and Infogami, and a third was acquired that we can\u0026rsquo;t talk about yet. Another from that batch was Loopt, which is doing so well they could probably be acquired in about ten minutes if they wanted to.\nSo about half the founders from that first summer, less than two years ago, are now rich, at least by their standards. (One thing you learn when you get rich is that there are many degrees of it.)\nI\u0026rsquo;m not ready to predict our success rate will stay as high as 50%. That first batch could have been an anomaly. But we should be able to do better than the oft-quoted (and probably made up) standard figure of 10%. I\u0026rsquo;d feel safe aiming at 25%.\nEven the founders who fail don\u0026rsquo;t seem to have such a bad time. Of those first eight startups, three are now probably dead. In two cases the founders just went on to do other things at the end of the summer. I don\u0026rsquo;t think they were traumatized by the experience. The closest to a traumatic failure was Kiko, whose founders kept working on their startup for a whole year before being squashed by Google Calendar. But they ended up happy. They sold their software on eBay for a quarter of a million dollars. After they paid back their angel investors, they had about a year\u0026rsquo;s salary each. [1] Then they immediately went on to start a new and much more exciting startup, Justin.TV.\nSo here is an even more striking statistic: 0% of that first batch had a terrible experience. They had ups and downs, like every startup, but I don\u0026rsquo;t think any would have traded it for a job in a cubicle. And that statistic is probably not an anomaly. …"
  },{
    "title": "Novelty and Heresy",
    "url": "/paul_graham/essays_en/nov/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nNovelty and Heresy November 2019\nIf you discover something new, there\u0026rsquo;s a significant chance you\u0026rsquo;ll be accused of some form of heresy.\nTo discover new things, you have to work on ideas that are good but non-obvious; if an idea is obviously good, other people are probably already working on it. One common way for a good idea to be non-obvious is for it to be hidden in the shadow of some mistaken assumption that people are very attached to. But anything you discover from working on such an idea will tend to contradict the mistaken assumption that was concealing it. And you will thus get a lot of heat from people attached to the mistaken assumption. Galileo and Darwin are famous examples of this phenomenon, but it\u0026rsquo;s probably always an ingredient in the resistance to new ideas.\n",
    "description": "",
    "tags": ["innovation","heresy","new ideas","thinking","discovery","paradigms"],
    "categories": [],
    "content": "→ 中文版本\nNovelty and Heresy November 2019\nIf you discover something new, there\u0026rsquo;s a significant chance you\u0026rsquo;ll be accused of some form of heresy.\nTo discover new things, you have to work on ideas that are good but non-obvious; if an idea is obviously good, other people are probably already working on it. One common way for a good idea to be non-obvious is for it to be hidden in the shadow of some mistaken assumption that people are very attached to. But anything you discover from working on such an idea will tend to contradict the mistaken assumption that was concealing it. And you will thus get a lot of heat from people attached to the mistaken assumption. Galileo and Darwin are famous examples of this phenomenon, but it\u0026rsquo;s probably always an ingredient in the resistance to new ideas.\nSo it\u0026rsquo;s particularly dangerous for an organization or society to have a culture of pouncing on heresy. When you suppress heresies, you don\u0026rsquo;t just prevent people from contradicting the mistaken assumption you\u0026rsquo;re trying to protect. You also suppress any idea that implies indirectly that it\u0026rsquo;s false. Every cherished mistaken assumption has a dead zone of unexplored ideas around it. And the more preposterous the assumption, the bigger the dead zone it creates.\nThere is a positive side to this phenomenon though. If you\u0026rsquo;re looking for new ideas, one way to find them is by looking for heresies. When you look at the question this way, the depressingly large dead zones around mistaken assumptions become excitingly large mines of new ideas.\n"
  },{
    "title": "Organic Startup Ideas",
    "url": "/paul_graham/essays_en/organic/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Organic Startup Ideas April 2010\nWant to start a startup? Get funded by Y Combinator.\nThe best way to come up with startup ideas is to ask yourself the question: what do you wish someone would make for you?\nThere are two types of startup ideas: those that grow organically out of your own life, and those that you decide, from afar, are going to be necessary to some class of users other than you. Apple was the first type. Apple happened because Steve Wozniak wanted a computer. Unlike most people who wanted computers, he could design one, so he did. And since lots of other people wanted the same thing, Apple was able to sell enough of them to get the company rolling. They still rely on this principle today, incidentally. The iPhone is the phone Steve Jobs wants. [1]\n",
    "description": "",
    "tags": ["startups","ideas","entrepreneurship","innovation","Y Combinator","product development"],
    "categories": [],
    "content": "Organic Startup Ideas April 2010\nWant to start a startup? Get funded by Y Combinator.\nThe best way to come up with startup ideas is to ask yourself the question: what do you wish someone would make for you?\nThere are two types of startup ideas: those that grow organically out of your own life, and those that you decide, from afar, are going to be necessary to some class of users other than you. Apple was the first type. Apple happened because Steve Wozniak wanted a computer. Unlike most people who wanted computers, he could design one, so he did. And since lots of other people wanted the same thing, Apple was able to sell enough of them to get the company rolling. They still rely on this principle today, incidentally. The iPhone is the phone Steve Jobs wants. [1]\nOur own startup, Viaweb, was of the second type. We made software for building online stores. We didn\u0026rsquo;t need this software ourselves. We weren\u0026rsquo;t direct marketers. We didn\u0026rsquo;t even know when we started that our users were called \u0026ldquo;direct marketers.\u0026rdquo; But we were comparatively old when we started the company (I was 30 and Robert Morris was 29), so we\u0026rsquo;d seen enough to know users would need this type of software. [2]\nThere is no sharp line between the two types of ideas, but the most successful startups seem to be closer to the Apple type than the Viaweb type. When he was writing that first Basic interpreter for the Altair, Bill Gates was writing something he would use, as were Larry and Sergey when they wrote the first versions of Google.\nOrganic ideas are generally preferable to the made up kind, but particularly so when the founders are young. It takes experience to predict what other people will want. The worst ideas we see at Y Combinator are from young founders making things they think other people will want.\nSo if you want to start a startup and don\u0026rsquo;t know yet what you\u0026rsquo;re going to do, I\u0026rsquo;d encourage you to focus initially on organic ideas. What\u0026rsquo;s …"
  },{
    "title": "Orthodox Privilege",
    "url": "/paul_graham/essays_en/orth/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Orthodox Privilege July 2020\n\u0026ldquo;Few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. Most people are even incapable of forming such opinions.\u0026quot;— Einstein\nThere has been a lot of talk about privilege lately. Although the concept is overused, there is something to it, and in particular to the idea that privilege makes you blind — that you can\u0026rsquo;t see things that are visible to someone whose life is very different from yours.\n",
    "description": "",
    "tags": ["privilege","conformity","independent thinking","social norms","controversy","freedom of speech"],
    "categories": [],
    "content": "Orthodox Privilege July 2020\n\u0026ldquo;Few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. Most people are even incapable of forming such opinions.\u0026quot;— Einstein\nThere has been a lot of talk about privilege lately. Although the concept is overused, there is something to it, and in particular to the idea that privilege makes you blind — that you can\u0026rsquo;t see things that are visible to someone whose life is very different from yours.\nBut one of the most pervasive examples of this kind of blindness is one that I haven\u0026rsquo;t seen mentioned explicitly. I\u0026rsquo;m going to call it orthodox privilege: The more conventional-minded someone is, the more it seems to them that it\u0026rsquo;s safe for everyone to express their opinions.\nIt\u0026rsquo;s safe for them to express their opinions, because the source of their opinions is whatever it\u0026rsquo;s currently acceptable to believe. So it seems to them that it must be safe for everyone. They literally can\u0026rsquo;t imagine a true statement that would get you in trouble.\nAnd yet at every point in history, there were true things that would get you in trouble to say. Is ours the first where this isn\u0026rsquo;t so? What an amazing coincidence that would be.\nSurely it should at least be the default assumption that our time is not unique, and that there are true things you can\u0026rsquo;t say now, just as there have always been. You would think. But even in the face of such overwhelming historical evidence, most people will go with their gut on this one.\nIn the most extreme cases, people suffering from orthodox privilege will not only deny that there\u0026rsquo;s anything true that you can\u0026rsquo;t say, but will accuse you of heresy merely for saying there is. Though if there\u0026rsquo;s more than one heresy current in your time, these accusations will be weirdly non-deterministic: you must either be an xist or a yist.\nFrustrating as it is to deal with these people, it\u0026rsquo;s important …"
  },{
    "title": "Persuade xor Discover",
    "url": "/paul_graham/essays_en/discover/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nPersuade xor Discover September 2009\nWhen meeting people you don\u0026rsquo;t know very well, the convention is to seem extra friendly. You smile and say \u0026ldquo;pleased to meet you,\u0026rdquo; whether you are or not. There\u0026rsquo;s nothing dishonest about this. Everyone knows that these little social lies aren\u0026rsquo;t meant to be taken literally, just as everyone knows that \u0026ldquo;Can you pass the salt?\u0026rdquo; is only grammatically a question.\nI\u0026rsquo;m perfectly willing to smile and say \u0026ldquo;pleased to meet you\u0026rdquo; when meeting new people. But there is another set of customs for being ingratiating in print that are not so harmless.\n",
    "description": "",
    "tags": ["writing","persuasion","discovery","truth","essay","honesty","ideas","philosophy"],
    "categories": [],
    "content": "→ Chinese Version\nPersuade xor Discover September 2009\nWhen meeting people you don\u0026rsquo;t know very well, the convention is to seem extra friendly. You smile and say \u0026ldquo;pleased to meet you,\u0026rdquo; whether you are or not. There\u0026rsquo;s nothing dishonest about this. Everyone knows that these little social lies aren\u0026rsquo;t meant to be taken literally, just as everyone knows that \u0026ldquo;Can you pass the salt?\u0026rdquo; is only grammatically a question.\nI\u0026rsquo;m perfectly willing to smile and say \u0026ldquo;pleased to meet you\u0026rdquo; when meeting new people. But there is another set of customs for being ingratiating in print that are not so harmless.\nThe reason there\u0026rsquo;s a convention of being ingratiating in print is that most essays are written to persuade. And as any politician could tell you, the way to persuade people is not just to baldly state the facts. You have to add a spoonful of sugar to make the medicine go down.\nFor example, a politician announcing the cancellation of a government program will not merely say \u0026ldquo;The program is canceled.\u0026rdquo; That would seem offensively curt. Instead he\u0026rsquo;ll spend most of his time talking about the noble effort made by the people who worked on it.\nThe reason these conventions are more dangerous is that they interact with the ideas. Saying \u0026ldquo;pleased to meet you\u0026rdquo; is just something you prepend to a conversation, but the sort of spin added by politicians is woven through it. We\u0026rsquo;re starting to move from social lies to real lies.\nHere\u0026rsquo;s an example of a paragraph from an essay I wrote about labor unions. As written, it tends to offend people who like unions. People who think the labor movement was the creation of heroic union organizers have a problem to explain: why are unions shrinking now? The best they can do is fall back on the default explanation of people living in fallen civilizations. Our ancestors were giants. The workers of the early twentieth century must have had a moral courage …"
  },{
    "title": "Post-Medium Publishing",
    "url": "/paul_graham/essays_en/publishing/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Post-Medium Publishing September 2009\nPublishers of all types, from news to music, are unhappy that consumers won\u0026rsquo;t pay for content anymore. At least, that\u0026rsquo;s how they see it.\nIn fact consumers never really were paying for content, and publishers weren\u0026rsquo;t really selling it either. If the content was what they were selling, why has the price of books or music or movies always depended mostly on the format? Why didn\u0026rsquo;t better content cost more? [1]\n",
    "description": "",
    "tags": ["publishing","media","content","digital","business models"],
    "categories": [],
    "content": "Post-Medium Publishing September 2009\nPublishers of all types, from news to music, are unhappy that consumers won\u0026rsquo;t pay for content anymore. At least, that\u0026rsquo;s how they see it.\nIn fact consumers never really were paying for content, and publishers weren\u0026rsquo;t really selling it either. If the content was what they were selling, why has the price of books or music or movies always depended mostly on the format? Why didn\u0026rsquo;t better content cost more? [1]\nA copy of Time costs $5 for 58 pages, or 8.6 cents a page. The Economist costs $7 for 86 pages, or 8.1 cents a page. Better journalism is actually slightly cheaper.\nAlmost every form of publishing has been organized as if the medium was what they were selling, and the content was irrelevant. Book publishers, for example, set prices based on the cost of producing and distributing books. They treat the words printed in the book the same way a textile manufacturer treats the patterns printed on its fabrics.\nEconomically, the print media are in the business of marking up paper. We can all imagine an old-style editor getting a scoop and saying \u0026ldquo;this will sell a lot of papers!\u0026rdquo; Cross out that final S and you\u0026rsquo;re describing their business model. The reason they make less money now is that people don\u0026rsquo;t need as much paper.\nA few months ago I ran into a friend in a cafe. I had a copy of the New York Times, which I still occasionally buy on weekends. As I was leaving I offered it to him, as I\u0026rsquo;ve done countless times before in the same situation. But this time something new happened. I felt that sheepish feeling you get when you offer someone something worthless. \u0026ldquo;Do you, er, want a printout of yesterday\u0026rsquo;s news?\u0026rdquo; I asked. (He didn\u0026rsquo;t.)\nNow that the medium is evaporating, publishers have nothing left to sell. Some seem to think they\u0026rsquo;re going to sell content—that they were always in the content business, really. But they weren\u0026rsquo;t, and it\u0026rsquo;s unclear …"
  },{
    "title": "Pow",
    "url": "/paul_graham/essays_en/pow/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nPow January 2017\nPeople who are powerful but uncharismatic will tend to be disliked. Their power makes them a target for criticism that they don\u0026rsquo;t have the charisma to disarm. That was Hillary Clinton\u0026rsquo;s problem. It also tends to be a problem for any CEO who is more of a builder than a schmoozer. And yet the builder-type CEO is (like Hillary) probably the best person for the job.\n",
    "description": "",
    "tags": ["power","charisma","leadership","human_nature"],
    "categories": [],
    "content": "→ 中文版本\nPow January 2017\nPeople who are powerful but uncharismatic will tend to be disliked. Their power makes them a target for criticism that they don\u0026rsquo;t have the charisma to disarm. That was Hillary Clinton\u0026rsquo;s problem. It also tends to be a problem for any CEO who is more of a builder than a schmoozer. And yet the builder-type CEO is (like Hillary) probably the best person for the job.\nI don\u0026rsquo;t think there is any solution to this problem. It\u0026rsquo;s human nature. The best we can do is to recognize that it\u0026rsquo;s happening, and to understand that being a magnet for criticism is sometimes a sign not that someone is the wrong person for a job, but that they\u0026rsquo;re the right one.\n"
  },{
    "title": "Progbot",
    "url": "/paul_graham/essays_en/progbot/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nProgbot January 1993 (This essay is from the introduction to On Lisp.)\nIt\u0026rsquo;s a long-standing principle of programming style that the functional elements of a program should not be too large. If some component of a program grows beyond the stage where it\u0026rsquo;s readily comprehensible, it becomes a mass of complexity which conceals errors as easily as a big city conceals fugitives. Such software will be hard to read, hard to test, and hard to debug.\n",
    "description": "",
    "tags": ["lisp","programming","bottom_up_design","software_engineering"],
    "categories": [],
    "content": "→ 中文版本\nProgbot January 1993 (This essay is from the introduction to On Lisp.)\nIt\u0026rsquo;s a long-standing principle of programming style that the functional elements of a program should not be too large. If some component of a program grows beyond the stage where it\u0026rsquo;s readily comprehensible, it becomes a mass of complexity which conceals errors as easily as a big city conceals fugitives. Such software will be hard to read, hard to test, and hard to debug.\nIn accordance with this principle, a large program must be divided into pieces, and the larger the program, the more it must be divided. How do you divide a program? The traditional approach is called top-down design: you say \u0026ldquo;the purpose of the program is to do these seven things, so I divide it into seven major subroutines. The first subroutine has to do these four things, so it in turn will have four of its own subroutines,\u0026rdquo; and so on. This process continues until the whole program has the right level of granularity\u0026ndash; each part large enough to do something substantial, but small enough to be understood as a single unit.\nExperienced Lisp programmers divide up their programs differently. As well as top-down design, they follow a principle which could be called bottom-up design\u0026ndash; changing the language to suit the problem. In Lisp, you don\u0026rsquo;t just write your program down toward the language, you also build the language up toward your program. As you\u0026rsquo;re writing a program you may think \u0026ldquo;I wish Lisp had such-and-such an operator.\u0026rdquo; So you go and write it. Afterward you realize that using the new operator would simplify the design of another part of the program, and so on. Language and program evolve together. Like the border between two warring states, the boundary between language and program is drawn and redrawn, until eventually it comes to rest along the mountains and rivers, the natural frontiers of your problem. In the end your program will look as if the language …"
  },{
    "title": "Progbot",
    "url": "/paul_graham/essays_zh/progbot/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nProgbot 1993年1月（本文选自《On Lisp》的引言）\n编程风格的一个悠久原则是，程序的功能组件不应过大。如果程序的某个组件增长到难以理解的程度，它就会变成一团复杂性，如同大城市隐藏逃犯一样轻易地隐藏错误。这样的软件将难以阅读、难以测试、难以调试。\n根据这一原则，大程序必须被分割成片段，程序越大，分割得越多。如何分割程序？传统的方法称为自顶向下设计：你说\u0026quot;程序的目的是做这七件事，所以我把它分成七个主要子程序。第一个子程序要做这四件事，所以它又有四个自己的子程序\u0026quot;，依此类推。这个过程持续到整个程序达到适当的粒度级别——每个部分足够大以完成实质性工作，又足够小以作为单个单元被理解。\n有经验的Lisp程序员以不同的方式分割他们的程序。除了自顶向下设计，他们遵循一个可以称为自底向上设计的原则——改变语言以适应问题。在Lisp中，你不仅向语言的方向编写程序，还向程序的方向构建语言。当你编写程序时，你可能会想\u0026quot;我希望Lisp有这样那样的运算符\u0026quot;。于是你就去写它。之后你意识到使用新的运算符会简化程序另一部分的设计，如此类推。语言和程序共同进化。如同两个交战国家之间的边界，语言和程序之间的边界被绘制和重绘，直到最终沿着山脉和河流——你问题的自然边界——安定下来。最终，你的程序看起来就像语言是为它而设计的。当语言和程序相互适应时，你最终得到的代码是清晰、小型和高效的。\n值得强调的是，自底向上设计不仅仅意味着以不同的顺序编写相同的程序。当你自底向上工作时，你通常最终会得到不同的程序。你得到的不是单一的、整体的程序，而是一个具有更多抽象运算符的更大语言，以及在其中编写的更小程序。你得到的不是门楣，而是拱门。在典型的代码中，一旦抽象出仅仅是簿记的部分，剩下的内容就短得多；你构建的语言层次越高，从上到下需要走的距离就越短。这带来了几个好处：\n通过让语言做更多的工作，自底向上设计产生的程序更小、更灵活。较短的程序不必被分成那么多组件，更少的组件意味着更容易阅读或修改的程序。更少的组件也意味着组件之间的连接更少，因此出错的机会更少。正如工业设计师努力减少机器中的运动部件数量一样，有经验的Lisp程序员使用自底向上设计来减少程序的大小和复杂性。\n自底向上设计促进代码重用。当你编写两个或更多程序时，你为第一个程序编写的许多实用程序在后续程序中也会很有用。一旦你获得了大量的实用程序基础，编写新程序可能只需要从头开始使用原始Lisp所需工作的一小部分。\n自底向上设计使程序更容易阅读。这种类型的抽象实例要求读者理解通用运算符；功能抽象的实例要求读者理解专用子程序。\n[1] 因为它使你总是在寻找代码中的模式，自底向上工作有助于澄清你对程序设计的想法。如果程序的两个相距较远的组件在形式上相似，你会注意到这种相似性，并可能以更简单的方式重新设计程序。\n自底向上设计在Lisp以外的语言中在一定程度上也是可能的。每当看到库函数时，就在进行自底向上设计。然而，Lisp在这方面给你更广泛的能力，增强语言在Lisp风格中起着更大的作用——如此之大，以至于Lisp不仅是一种不同的语言，而是一种完全不同的编程方式。\n确实，这种开发风格更适合可以由小组编写的程序。然而，同时，它扩展了小组可以做的事情的极限。在《人月神话》中，Frederick Brooks提出程序员小组的生产力不会随着其规模线性增长。随着小组规模的增加，单个程序员的生产力会下降。Lisp编程的经验提出了一种更令人振奋的方式来表述这个定律：随着小组规模的减小，单个程序员的生产力会提高。相对而言，小组获胜只是因为它更小。当小组也利用Lisp使之成为可能的技术时，它可以完全获胜。\n新：免费下载《On Lisp》。\n[1] \u0026ldquo;但是如果不理解你所有的新实用程序，没有人能读懂这个程序。\u0026ldquo;要了解为什么这样的陈述通常是错误的，请参见第4.8节。\n",
    "description": "",
    "tags": ["lisp","编程","自底向上设计","软件工程"],
    "categories": [],
    "content": "→ English Version\nProgbot 1993年1月（本文选自《On Lisp》的引言）\n编程风格的一个悠久原则是，程序的功能组件不应过大。如果程序的某个组件增长到难以理解的程度，它就会变成一团复杂性，如同大城市隐藏逃犯一样轻易地隐藏错误。这样的软件将难以阅读、难以测试、难以调试。\n根据这一原则，大程序必须被分割成片段，程序越大，分割得越多。如何分割程序？传统的方法称为自顶向下设计：你说\u0026quot;程序的目的是做这七件事，所以我把它分成七个主要子程序。第一个子程序要做这四件事，所以它又有四个自己的子程序\u0026quot;，依此类推。这个过程持续到整个程序达到适当的粒度级别——每个部分足够大以完成实质性工作，又足够小以作为单个单元被理解。\n有经验的Lisp程序员以不同的方式分割他们的程序。除了自顶向下设计，他们遵循一个可以称为自底向上设计的原则——改变语言以适应问题。在Lisp中，你不仅向语言的方向编写程序，还向程序的方向构建语言。当你编写程序时，你可能会想\u0026quot;我希望Lisp有这样那样的运算符\u0026quot;。于是你就去写它。之后你意识到使用新的运算符会简化程序另一部分的设计，如此类推。语言和程序共同进化。如同两个交战国家之间的边界，语言和程序之间的边界被绘制和重绘，直到最终沿着山脉和河流——你问题的自然边界——安定下来。最终，你的程序看起来就像语言是为它而设计的。当语言和程序相互适应时，你最终得到的代码是清晰、小型和高效的。\n值得强调的是，自底向上设计不仅仅意味着以不同的顺序编写相同的程序。当你自底向上工作时，你通常最终会得到不同的程序。你得到的不是单一的、整体的程序，而是一个具有更多抽象运算符的更大语言，以及在其中编写的更小程序。你得到的不是门楣，而是拱门。在典型的代码中，一旦抽象出仅仅是簿记的部分，剩下的内容就短得多；你构建的语言层次越高，从上到下需要走的距离就越短。这带来了几个好处：\n通过让语言做更多的工作，自底向上设计产生的程序更小、更灵活。较短的程序不必被分成那么多组件，更少的组件意味着更容易阅读或修改的程序。更少的组件也意味着组件之间的连接更少，因此出错的机会更少。正如工业设计师努力减少机器中的运动部件数量一样，有经验的Lisp程序员使用自底向上设计来减少程序的大小和复杂性。\n自底向上设计促进代码重用。当你编写两个或更多程序时，你为第一个程序编写的许多实用程序在后续程序中也会很有用。一旦你获得了大量的实用程序基础，编写新程序可能只需要从头开始使用原始Lisp所需工作的一小部分。\n自底向上设计使程序更容易阅读。这种类型的抽象实例要求读者理解通用运算符；功能抽象的实例要求读者理解专用子程序。\n[1] 因为它使你总是在寻找代码中的模式，自底向上工作有助于澄清你对程序设计的想法。如果程序的两个相距较远的组件在形式上相似，你会注意到这种相似性，并可能以更简单的方式重新设计程序。\n自底向上设计在Lisp以外的语言中在一定程度上也是可能的。每当看到库函数时，就在进行自底向上设计。然而，Lisp在这方面给你更广泛的能力，增强语言在Lisp风格中起着更大的作用——如此之大，以至于Lisp不仅是一种不同的语言，而是一种完全不同的编程方式。\n确实，这种开发风格更适合可以由小组编写的程序。然而，同时，它扩展了小组可以做的事情的极限。在《人月神话》中，Frederick Brooks提出程序员小组的生产力不会随着其规模线性增长。随着小组规模的增加，单个程序员的生产力会下降。Lisp编程的经验提出了一种更令人振奋的方式来表述这个定律：随着小组规模的减小，单个程序员的生产力会提高。相对而言，小组获胜只是因为它更小。当小组也利用Lisp使之成为可能的技术时，它可以完全获胜。\n新：免费下载《On Lisp》。\n[1] \u0026ldquo;但是如果不理解你所有的新实用程序，没有人能读懂这个程序。\u0026ldquo;要了解为什么这样的陈述通常是错误的，请参见第4.8节。\n"
  },{
    "title": "Prop62",
    "url": "/paul_graham/essays_en/prop62/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nProp62 November 2016\nIf you\u0026rsquo;re a California voter, there is an important proposition on your ballot this year: Proposition 62, which bans the death penalty.\nWhen I was younger I used to think the debate about the death penalty was about when it\u0026rsquo;s ok to take a human life. Is it ok to kill a killer?\nBut that is not the issue here.\nThe real world does not work like the version I was shown on TV growing up. The police often arrest the wrong person. Defendants\u0026rsquo; lawyers are often incompetent. And prosecutors are often motivated more by publicity than justice.\n",
    "description": "",
    "tags": ["death_penalty","california","justice","voting","social_issues"],
    "categories": [],
    "content": "→ 中文版本\nProp62 November 2016\nIf you\u0026rsquo;re a California voter, there is an important proposition on your ballot this year: Proposition 62, which bans the death penalty.\nWhen I was younger I used to think the debate about the death penalty was about when it\u0026rsquo;s ok to take a human life. Is it ok to kill a killer?\nBut that is not the issue here.\nThe real world does not work like the version I was shown on TV growing up. The police often arrest the wrong person. Defendants\u0026rsquo; lawyers are often incompetent. And prosecutors are often motivated more by publicity than justice.\nIn the real world, about 4% of people sentenced to death are innocent. So this is not about whether it\u0026rsquo;s ok to kill killers. This is about whether it\u0026rsquo;s ok to kill innocent people.\nA child could answer that one for you.\nThis year, in California, you have a chance to end this, by voting yes on Proposition 62. But beware, because there is another proposition, Proposition 66, whose goal is to make it easier to execute people. So yes on 62, no on 66.\nIt\u0026rsquo;s time.\n"
  },{
    "title": "Prop62",
    "url": "/paul_graham/essays_zh/prop62/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nProp62 2016年11月\n如果你是加利福尼亚州的选民，今年的选票上有一项重要的提案：第62号提案，该提案禁止死刑。\n我年轻的时候常常认为死刑辩论的焦点是什么时候可以剥夺人的生命。杀死一个杀人犯是否可以？\n但这里的问题不是这个。\n现实世界并不像我在电视上看到的那样。警察经常抓错人。被告的律师往往无能。检察官往往更多地追求名气而不是正义。\n在现实世界中，大约4%被判死刑的人是无辜的。所以这不是关于杀死杀人犯是否可以的问题。这是关于杀死无辜的人是否可以的问题。\n连小孩子都能为你回答这个问题。\n今年，在加利福尼亚，你有机会结束这种情况，就是对第62号提案投赞成票。但要小心，因为还有另一个提案，第66号提案，其目标是更容易执行死刑。所以62号提案投赞成票，66号提案投反对票。\n是时候了。\n",
    "description": "",
    "tags": ["死刑","加利福尼亚","正义","投票","社会问题"],
    "categories": [],
    "content": "→ English Version\nProp62 2016年11月\n如果你是加利福尼亚州的选民，今年的选票上有一项重要的提案：第62号提案，该提案禁止死刑。\n我年轻的时候常常认为死刑辩论的焦点是什么时候可以剥夺人的生命。杀死一个杀人犯是否可以？\n但这里的问题不是这个。\n现实世界并不像我在电视上看到的那样。警察经常抓错人。被告的律师往往无能。检察官往往更多地追求名气而不是正义。\n在现实世界中，大约4%被判死刑的人是无辜的。所以这不是关于杀死杀人犯是否可以的问题。这是关于杀死无辜的人是否可以的问题。\n连小孩子都能为你回答这个问题。\n今年，在加利福尼亚，你有机会结束这种情况，就是对第62号提案投赞成票。但要小心，因为还有另一个提案，第66号提案，其目标是更容易执行死刑。所以62号提案投赞成票，66号提案投反对票。\n是时候了。\n"
  },{
    "title": "Property",
    "url": "/paul_graham/essays_en/property/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nProperty March 2012\nAs a child I read a book of stories about a famous judge in eighteenth century Japan called Ooka Tadasuke. One of the cases he decided was brought by the owner of a food shop. A poor student who could afford only rice was eating his rice while enjoying the delicious cooking smells coming from the food shop. The owner wanted the student to pay for the smells he was enjoying.\n",
    "description": "",
    "tags": ["property","copyright","intellectual_property","technology","law"],
    "categories": [],
    "content": "→ 中文版本\nProperty March 2012\nAs a child I read a book of stories about a famous judge in eighteenth century Japan called Ooka Tadasuke. One of the cases he decided was brought by the owner of a food shop. A poor student who could afford only rice was eating his rice while enjoying the delicious cooking smells coming from the food shop. The owner wanted the student to pay for the smells he was enjoying.\nThe student was stealing his smells!\nThis story often comes to mind when I hear the RIAA and MPAA accusing people of stealing music and movies.\nIt sounds ridiculous to us to treat smells as property. But I can imagine scenarios in which one could charge for smells. Imagine we were living on a moon base where we had to buy air by the liter. I could imagine air suppliers adding scents at an extra charge.\nThe reason it seems ridiculous to us to treat smells as property is that it wouldn\u0026rsquo;t work to. It would work on a moon base, though.\nWhat counts as property depends on what works to treat as property. And that not only can change, but has changed. Humans may always (for some definition of human and always) have treated small items carried on one\u0026rsquo;s person as property. But hunter gatherers didn\u0026rsquo;t treat land, for example, as property in the way we do.\n[1] The reason so many people think of property as having a single unchanging definition is that its definition changes very slowly.\n[2] But we are in the midst of such a change now. The record labels and movie studios used to distribute what they made like air shipped through tubes on a moon base. But with the arrival of networks, it\u0026rsquo;s as if we\u0026rsquo;ve moved to a planet with a breathable atmosphere. Data moves like smells now. And through a combination of wishful thinking and short-term greed, the labels and studios have put themselves in the position of the food shop owner, accusing us all of stealing their smells.\n(The reason I say short-term greed is that the underlying problem with the labels and …"
  },{
    "title": "Property",
    "url": "/paul_graham/essays_zh/property/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nProperty 2012年3月\n小时候我读过一本关于十八世纪日本著名法官大冈忠相的故事书。他审理的一个案件是由一家食品店老板提起的。一个只能负担得起米饭的穷学生一边吃着米饭，一边享受着从食品店飘来的美味烹饪气味。店主想要学生为他享受的气味付费。\n这个学生在偷他的气味！\n每当我听到美国唱片工业协会和美国电影协会指控人们偷窃音乐和电影时，这个故事常常浮现在我的脑海中。\n对我们来说，将气味视为财产听起来很荒谬。但我可以想象一些可以收费的气味场景。想象我们生活在一个月球基地上，我们必须按升购买空气。我可以想象空气供应商额外收费添加香味。\n对我们来说，将气味视为财产之所以荒谬，是因为这样做行不通。但在月球基地上，这倒是可行的。\n什么被视为财产取决于什么可以有效地被视为财产。这不仅可以改变，而且已经改变了。人类可能总是（对于人类和总是的某种定义）将个人携带的小物品视为财产。但是狩猎采集者并没有像我们那样将土地视为财产。\n[1] 许多人认为财产具有单一不变定义的原因是，它的定义变化非常缓慢。\n[2] 但我们现在正处于这样的变化之中。唱片公司和电影工作室过去用来分发他们的作品就像月球基地上通过管道输送的空气一样。但随着网络的出现，我们仿佛搬到了一个有可呼吸大气层的行星上。现在数据像气味一样流动。通过一厢情愿和短期贪婪的结合，唱片公司和电影工作室使自己处于食品店老板的位置，指控我们都偷了他们的气味。\n（我说短期贪婪的原因是，唱片公司和电影工作室的根本问题是，经营它们的人是由奖金而不是股权驱动的。如果他们是由股权驱动的，他们会寻找利用技术变化的方法，而不是与之抗争。但是构建新事物需要太长时间。他们的奖金取决于今年的收入，而增加收入的最好方法是从他们已经做的事情中榨取更多钱。）\n那么这意味着什么？人们不应该能够为内容收费吗？这个问题没有一个单一的肯定或否定答案。人们应该能够在为内容收费有效时为内容收费。\n但我说\u0026quot;有效\u0026quot;时，指的是比\u0026quot;当他们能够逃脱时\u0026quot;更微妙的东西。我的意思是，人们能够为内容收费而不扭曲社会来实现这一点。毕竟，在月球基地销售香气的公司可以继续在地球上销售它们，如果他们成功游说要求我们所有人都继续通过管道呼吸的法律，即使我们不再需要这样做。\n唱片公司和电影工作室一直在采取的疯狂法律措施有很多这种味道。报纸和杂志同样处境艰难，但至少它们在优雅地衰落。如果可以的话，美国唱片工业协会和美国电影协会会让我们通过管道呼吸。\n最终这归结为常识。当你试图通过对随机选择的人使用大规模诉讼作为一种惩戒性惩罚来滥用法律系统，或者游说通过后会使互联网崩溃的法律时，这本身就证明你正在使用一个不起作用的财产定义。\n这就是拥有有效的民主制度和多个主权国家的有益之处。如果世界有一个单一的专制政府，唱片公司和电影工作室可以购买法律，使财产的定义成为他们想要的任何东西。但幸运的是，仍然有一些国家不是美国的版权殖民地，即使在美国，政治家们似乎仍然害怕足够数量的实际选民。\n[3] 管理美国的人可能不喜欢选民或其他国家拒绝屈从于他们的意愿，但最终，这对我们所有人都有利，因为试图扭曲法律以服务自己目的的人没有单一的攻击点。私有财产是一个极其有用的概念——可以说是我们最伟大的发明之一。迄今为止，它的每一个新定义都给我们带来了日益增长的物质财富。\n[4] 有理由假设最新的定义也会如此。如果我们都不得不因为一些有权势的人太懒于升级而继续运行过时的版本，那将是一场灾难。\n注释 [1] 如果你想更多地了解狩猎采集者，我强烈推荐伊丽莎白·马歇尔·托马斯的《无害的人们》和《旧的方式》。\n[2] 然而，财产定义的变化主要是由技术进步驱动的，由于技术进步正在加速，财产定义的变化率可能也会加速。这意味着社会能够优雅地应对这些变化变得更加重要，因为它们将以越来越快的速度到来。\n[3] 据我所知，\u0026ldquo;版权殖民地\u0026quot;一词最早由迈尔斯·彼得森使用。\n[4] 技术状态不仅仅是财产定义的函数。它们相互制约。但既然如此，你不能干扰财产的定义而不影响（可能损害）技术状态。苏联的历史生动地说明了这一点。\n感谢萨姆·奥特曼和杰夫·拉尔斯通阅读本文草稿。\n日文翻译\n",
    "description": "",
    "tags": ["财产","版权","知识产权","技术","法律"],
    "categories": [],
    "content": "→ English Version\nProperty 2012年3月\n小时候我读过一本关于十八世纪日本著名法官大冈忠相的故事书。他审理的一个案件是由一家食品店老板提起的。一个只能负担得起米饭的穷学生一边吃着米饭，一边享受着从食品店飘来的美味烹饪气味。店主想要学生为他享受的气味付费。\n这个学生在偷他的气味！\n每当我听到美国唱片工业协会和美国电影协会指控人们偷窃音乐和电影时，这个故事常常浮现在我的脑海中。\n对我们来说，将气味视为财产听起来很荒谬。但我可以想象一些可以收费的气味场景。想象我们生活在一个月球基地上，我们必须按升购买空气。我可以想象空气供应商额外收费添加香味。\n对我们来说，将气味视为财产之所以荒谬，是因为这样做行不通。但在月球基地上，这倒是可行的。\n什么被视为财产取决于什么可以有效地被视为财产。这不仅可以改变，而且已经改变了。人类可能总是（对于人类和总是的某种定义）将个人携带的小物品视为财产。但是狩猎采集者并没有像我们那样将土地视为财产。\n[1] 许多人认为财产具有单一不变定义的原因是，它的定义变化非常缓慢。\n[2] 但我们现在正处于这样的变化之中。唱片公司和电影工作室过去用来分发他们的作品就像月球基地上通过管道输送的空气一样。但随着网络的出现，我们仿佛搬到了一个有可呼吸大气层的行星上。现在数据像气味一样流动。通过一厢情愿和短期贪婪的结合，唱片公司和电影工作室使自己处于食品店老板的位置，指控我们都偷了他们的气味。\n（我说短期贪婪的原因是，唱片公司和电影工作室的根本问题是，经营它们的人是由奖金而不是股权驱动的。如果他们是由股权驱动的，他们会寻找利用技术变化的方法，而不是与之抗争。但是构建新事物需要太长时间。他们的奖金取决于今年的收入，而增加收入的最好方法是从他们已经做的事情中榨取更多钱。）\n那么这意味着什么？人们不应该能够为内容收费吗？这个问题没有一个单一的肯定或否定答案。人们应该能够在为内容收费有效时为内容收费。\n但我说\u0026quot;有效\u0026quot;时，指的是比\u0026quot;当他们能够逃脱时\u0026quot;更微妙的东西。我的意思是，人们能够为内容收费而不扭曲社会来实现这一点。毕竟，在月球基地销售香气的公司可以继续在地球上销售它们，如果他们成功游说要求我们所有人都继续通过管道呼吸的法律，即使我们不再需要这样做。\n唱片公司和电影工作室一直在采取的疯狂法律措施有很多这种味道。报纸和杂志同样处境艰难，但至少它们在优雅地衰落。如果可以的话，美国唱片工业协会和美国电影协会会让我们通过管道呼吸。\n最终这归结为常识。当你试图通过对随机选择的人使用大规模诉讼作为一种惩戒性惩罚来滥用法律系统，或者游说通过后会使互联网崩溃的法律时，这本身就证明你正在使用一个不起作用的财产定义。\n这就是拥有有效的民主制度和多个主权国家的有益之处。如果世界有一个单一的专制政府，唱片公司和电影工作室可以购买法律，使财产的定义成为他们想要的任何东西。但幸运的是，仍然有一些国家不是美国的版权殖民地，即使在美国，政治家们似乎仍然害怕足够数量的实际选民。\n[3] 管理美国的人可能不喜欢选民或其他国家拒绝屈从于他们的意愿，但最终，这对我们所有人都有利，因为试图扭曲法律以服务自己目的的人没有单一的攻击点。私有财产是一个极其有用的概念——可以说是我们最伟大的发明之一。迄今为止，它的每一个新定义都给我们带来了日益增长的物质财富。\n[4] 有理由假设最新的定义也会如此。如果我们都不得不因为一些有权势的人太懒于升级而继续运行过时的版本，那将是一场灾难。\n注释 [1] 如果你想更多地了解狩猎采集者，我强烈推荐伊丽莎白·马歇尔·托马斯的《无害的人们》和《旧的方式》。\n[2] 然而，财产定义的变化主要是由技术进步驱动的，由于技术进步正在加速，财产定义的变化率可能也会加速。这意味着社会能够优雅地应对这些变化变得更加重要，因为它们将以越来越快的速度到来。\n[3] 据我所知，\u0026ldquo;版权殖民地\u0026quot;一词最早由迈尔斯·彼得森使用。\n[4] 技术状态不仅仅是财产定义的函数。它们相互制约。但既然如此，你不能干扰财产的定义而不影响（可能损害）技术状态。苏联的历史生动地说明了这一点。\n感谢萨姆·奥特曼和杰夫·拉尔斯通阅读本文草稿。\n日文翻译\n"
  },{
    "title": "Putting Ideas into Words",
    "url": "/paul_graham/essays_en/words/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nPutting Ideas into Words February 2022\nWriting about something, even something you know well, usually shows you that you didn\u0026rsquo;t know it as well as you thought. Putting ideas into words is a severe test. The first words you choose are usually wrong; you have to rewrite sentences over and over to get them exactly right. And your ideas won\u0026rsquo;t just be imprecise, but incomplete too. Half the ideas that end up in an essay will be ones you thought of while you were writing it. Indeed, that\u0026rsquo;s why I write them.\n",
    "description": "",
    "tags": ["writing","ideas","language","thinking","communication"],
    "categories": [],
    "content": "→ 中文版\nPutting Ideas into Words February 2022\nWriting about something, even something you know well, usually shows you that you didn\u0026rsquo;t know it as well as you thought. Putting ideas into words is a severe test. The first words you choose are usually wrong; you have to rewrite sentences over and over to get them exactly right. And your ideas won\u0026rsquo;t just be imprecise, but incomplete too. Half the ideas that end up in an essay will be ones you thought of while you were writing it. Indeed, that\u0026rsquo;s why I write them.\nOnce you publish something, the convention is that whatever you wrote was what you thought before you wrote it. These were your ideas, and now you\u0026rsquo;ve expressed them. But you know this isn\u0026rsquo;t true. You know that putting your ideas into words changed them. And not just the ideas you published. Presumably there were others that turned out to be too broken to fix, and those you discarded instead.\nIt\u0026rsquo;s not just having to commit your ideas to specific words that makes writing so exacting. The real test is reading what you\u0026rsquo;ve written. You have to pretend to be a neutral reader who knows nothing of what\u0026rsquo;s in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger. But the stranger is rational, so you always can, if you ask him what he needs. If he\u0026rsquo;s not satisfied because you failed to mention x or didn\u0026rsquo;t qualify some sentence sufficiently, then you mention x or add more qualifications. Happy now? It may cost you some nice sentences, but you have to resign yourself to that. You just have to make them as good as you can and still satisfy the stranger.\nThis much, I assume, won\u0026rsquo;t be that controversial. I think it will accord with the experience of anyone who has tried to …"
  },{
    "title": "Python悖论",
    "url": "/paul_graham/essays_zh/pypar/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Python悖论 2004年8月\n在最近的一次演讲中，我说了一些让很多人不高兴的话：你可以让更聪明的程序员在Python项目上工作，而不是在Java项目上工作。\n我这样说并不是指Java程序员很笨。我的意思是Python程序员很聪明。学习一门新的编程语言需要很多工作。人们学习Python并不是因为它能给他们带来工作；他们学习它是因为他们真正喜欢编程，并且对已经知道的语言不满意。\n这使他们成为公司应该想要雇佣的那种程序员。因此，由于缺乏更好的名称，我称之为Python悖论：如果一个公司选择用相对冷门的语言编写其软件，他们将能够雇佣到更好的程序员，因为他们只会吸引那些足够关心它而去学习它的人。而对于程序员来说，这个悖论更加明显：如果你想找到一份好工作，应该学习的语言是那些人们不仅仅是为了找工作而学习的语言。\n到目前为止，只有少数公司足够聪明地意识到了这一点。但这里也有一种选择在进行：它们正是程序员最想为之工作的公司。例如，Google。当他们发布Java编程工作时，他们也希望有Python经验。\n我的一位朋友几乎知道所有广泛使用的语言，他在大多数项目中都使用Python。他说主要的原因是他喜欢源代码的外观。这可能是选择一种语言而不是另一种语言的轻率理由。但并没有听起来那么轻率：当你编程时，你花在阅读代码上的时间比写代码的时间多。你推着源代码团，就像雕塑家推着粘土团一样。因此，一种让源代码看起来丑陋的语言对于要求精确的程序员来说是令人发疯的，就像充满疙瘩的粘土对于雕塑家一样。\n提到丑陋的源代码，人们当然会想到Perl。但Perl表面的丑陋并不是我指的那种。真正的丑陋不是看起来刺耳的语法，而是不得不用错误的概念来构建程序。Perl可能看起来像一个骂人的卡通人物，但在某些情况下，它在概念上超越了Python。\n到目前为止，无论如何。当然，这两种语言都是不断发展的目标。但它们与Ruby（以及Icon、Joy、J、Lisp和Smalltalk）共享一个事实：它们都是由真正关心编程的人创建和使用的。而那些往往是做得好的人。\n如果你喜欢这篇文章，你可能也会喜欢黑客与画家。\n",
    "description": "",
    "tags": ["python","编程","软件开发","招聘","技术"],
    "categories": [],
    "content": "Python悖论 2004年8月\n在最近的一次演讲中，我说了一些让很多人不高兴的话：你可以让更聪明的程序员在Python项目上工作，而不是在Java项目上工作。\n我这样说并不是指Java程序员很笨。我的意思是Python程序员很聪明。学习一门新的编程语言需要很多工作。人们学习Python并不是因为它能给他们带来工作；他们学习它是因为他们真正喜欢编程，并且对已经知道的语言不满意。\n这使他们成为公司应该想要雇佣的那种程序员。因此，由于缺乏更好的名称，我称之为Python悖论：如果一个公司选择用相对冷门的语言编写其软件，他们将能够雇佣到更好的程序员，因为他们只会吸引那些足够关心它而去学习它的人。而对于程序员来说，这个悖论更加明显：如果你想找到一份好工作，应该学习的语言是那些人们不仅仅是为了找工作而学习的语言。\n到目前为止，只有少数公司足够聪明地意识到了这一点。但这里也有一种选择在进行：它们正是程序员最想为之工作的公司。例如，Google。当他们发布Java编程工作时，他们也希望有Python经验。\n我的一位朋友几乎知道所有广泛使用的语言，他在大多数项目中都使用Python。他说主要的原因是他喜欢源代码的外观。这可能是选择一种语言而不是另一种语言的轻率理由。但并没有听起来那么轻率：当你编程时，你花在阅读代码上的时间比写代码的时间多。你推着源代码团，就像雕塑家推着粘土团一样。因此，一种让源代码看起来丑陋的语言对于要求精确的程序员来说是令人发疯的，就像充满疙瘩的粘土对于雕塑家一样。\n提到丑陋的源代码，人们当然会想到Perl。但Perl表面的丑陋并不是我指的那种。真正的丑陋不是看起来刺耳的语法，而是不得不用错误的概念来构建程序。Perl可能看起来像一个骂人的卡通人物，但在某些情况下，它在概念上超越了Python。\n到目前为止，无论如何。当然，这两种语言都是不断发展的目标。但它们与Ruby（以及Icon、Joy、J、Lisp和Smalltalk）共享一个事实：它们都是由真正关心编程的人创建和使用的。而那些往往是做得好的人。\n如果你喜欢这篇文章，你可能也会喜欢黑客与画家。\n"
  },{
    "title": "Ramen Profitable",
    "url": "/paul_graham/essays_en/ramenprofitable/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nRamen Profitable July 2009\nNow that the term \u0026ldquo;ramen profitable\u0026rdquo; has become widespread, I ought to explain precisely what the idea entails.\nRamen profitable means a startup makes just enough to pay the founders\u0026rsquo; living expenses. This is a different form of profitability than startups have traditionally aimed for. Traditional profitability means a big bet is finally paying off, whereas the main importance of ramen profitability is that it buys you time. [1]\n",
    "description": "",
    "tags": ["startup","founder","entrepreneur","profitability","funding","yc","ramen_profitable"],
    "categories": [],
    "content": "→ 中文版本\nRamen Profitable July 2009\nNow that the term \u0026ldquo;ramen profitable\u0026rdquo; has become widespread, I ought to explain precisely what the idea entails.\nRamen profitable means a startup makes just enough to pay the founders\u0026rsquo; living expenses. This is a different form of profitability than startups have traditionally aimed for. Traditional profitability means a big bet is finally paying off, whereas the main importance of ramen profitability is that it buys you time. [1]\nIn the past, a startup would usually become profitable only after raising and spending quite a lot of money. A company making computer hardware might not become profitable for 5 years, during which they spent $50 million. But when they did they might have revenues of $50 million a year. This kind of profitability means the startup has succeeded.\nRamen profitability is the other extreme: a startup that becomes profitable after 2 months, even though its revenues are only $3000 a month, because the only employees are a couple 25 year old founders who can live on practically nothing. Revenues of $3000 a month do not mean the company has succeeded. But it does share something with the one that\u0026rsquo;s profitable in the traditional way: they don\u0026rsquo;t need to raise money to survive.\nRamen profitability is an unfamiliar idea to most people because it only recently became feasible. It\u0026rsquo;s still not feasible for a lot of startups; it would not be for most biotech startups, for example; but it is for many software startups because they\u0026rsquo;re now so cheap. For many, the only real cost is the founders\u0026rsquo; living expenses.\nThe main significance of this type of profitability is that you\u0026rsquo;re no longer at the mercy of investors. If you\u0026rsquo;re still losing money, then eventually you\u0026rsquo;ll either have to raise more or shut down. Once you\u0026rsquo;re ramen profitable this painful choice goes away. You can still raise money, but you don\u0026rsquo;t have to do it now.\nThe most obvious advantage …"
  },{
    "title": "Reddit创始人",
    "url": "/paul_graham/essays_zh/reddits/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nReddit创始人 2024年3月\n我在我们甚至开始Y Combinator之前就认识了Reddit创始人。事实上，他们是我们开始创办它的原因之一。\nYC源于我在哈佛计算机协会（本科生计算机俱乐部）的一次关于如何创办创业公司的演讲。观众中的其他人可能都是本地人，但史蒂夫和亚历克西斯是从弗吉尼亚大学乘火车来的，他们是那里的高年级学生。既然他们来了这么远，我同意和他们见面喝咖啡。他们告诉我一个后来我们资助他们放弃的创业想法：一种在手机上订购快餐的方式。\n这是在智能手机之前的时代。他们必须与手机运营商和快餐连锁店达成协议才能推出。所以这是不可能实现的。即使在19年后的今天，这仍然不存在。但我对他们的智慧和能量印象深刻。事实上，我对他们以及我在那次演讲中遇到的其他一些人是如此印象深刻，以至于我决定创办一些东西来资助他们。几天后，我告诉史蒂夫和亚历克西斯我们正在创办Y Combinator，并鼓励他们申请。\n第一批我们没有任何方式来识别申请人，所以我们给他们起了绰号。Reddit创始人是\u0026quot;手机食物松饼\u0026quot;。\u0026ldquo;松饼\u0026quot;是杰西卡用来形容小狗和两岁小孩等事物的亲昵称呼。所以这让你对史蒂夫和亚历克西斯当时给人的印象有所了解。他们有着小鸟那种略带凌乱的惊讶表情。\n不过他们的想法很糟糕。而且由于那时我们认为我们是在资助想法而不是创始人，所以我们拒绝了他们。但我们对此感到不好。杰西卡因为我们拒绝了松饼而难过。对我来说，拒绝那些激励我们创办YC来资助的人似乎是错误的。\n我认为创业公司意义上的\u0026quot;转型\u0026quot;这个词还没有被发明出来，但我们想要资助史蒂夫和亚历克西斯，所以如果他们的想法不好，他们就必须研究其他东西。而且我知道是什么。那时候有一个叫Delicious的网站，你可以在那里保存链接。它有一个叫del.icio.us/popular的页面，列出了最多保存的链接，人们正在使用这个页面作为事实上的Reddit。我知道这一点是因为我网站的很多流量都来自它。需要有一个类似del.icio.us/popular的东西，但设计用于分享链接而不是作为保存链接的副产品。\n所以我打电话给史蒂夫和亚历克西斯，说我们喜欢他们，只是不喜欢他们的想法，所以如果他们研究其他东西，我们会资助他们。那时他们正在乘火车回弗吉尼亚的家。他们在下一站下车，登上了北上的下一班火车，到那天结束时，他们承诺致力于现在被称为Reddit的东西。\n他们本想叫它Snoo，就像\u0026quot;What snoo？\u0026ldquo;一样。但snoo.com太贵了，所以他们决定把吉祥物叫Snoo，并为网站选择一个未被注册的名字。早期Reddit只是一个临时名称，或者至少他们是这样告诉我的，但现在可能改不掉了。\n就像所有真正伟大的创业公司一样，公司和创始人之间有一种不寻常的紧密匹配。特别是史蒂夫。Reddit有一种特定的性格——好奇、怀疑、准备被娱乐——这种性格就是史蒂夫的性格。\n史蒂夫会对这个翻白眼，但他是一个知识分子；他对为了其自身而感兴趣的想法感兴趣。这就是他为什么会出现在剑桥的那个观众席上。他认识我是因为他对一种我写过的叫做Lisp的编程语言感兴趣，而Lisp是那种很少有人学习的语言之一，除非是出于智力好奇心。史蒂夫那种真空吸尘器式的好奇心正是你想要的那种，当你创办一个网站，它是一个包含任何有趣内容的链接列表。\n史蒂夫不是权威的粉丝，所以他也喜欢一个没有编辑的网站的想法。那时程序员的主要论坛是一个叫Slashdot的网站。它很像Reddit，只是首页上的故事是由人工版主选择的。虽然他们做得很好，但这一微小的差异被证明是一个巨大的差异。由用户提交驱动意味着Reddit比Slashdot更新。那里的新闻更新，用户总是会去最新的新闻所在的地方。\n我推动Reddit创始人快速发布。第一版不需要超过几百行代码。怎么需要一周多的时间来构建？他们确实发布得相对较快，大约在第一批YC批次开始后三周。第一批用户是史蒂夫、亚历克西斯、我，以及他们的一些YC同班同学和大学朋友。事实证明，你不需要那么多用户来收集一个像样的有趣链接列表，特别是如果你每个用户有多个账户。\nReddit从他们的YC批次又得到了两个人：克里斯·斯洛和亚伦·斯沃茨，他们也异常聪明。克里斯刚刚完成他在哈佛的物理学博士学业。亚伦更年轻，一个大学新生，甚至比史蒂夫更反权威。将他描述为后来权威对他所做的事情的殉道者并不夸张。\nReddit的流量缓慢但不可阻挡地增长。起初数字太小，很难与背景噪音区分开来。但在几周内，很明显有一个真正的用户核心定期返回网站。尽管Reddit公司在后来的年份里经历了各种各样的事情，但Reddit网站从未回头。\nReddit网站（现在的应用程序）是一个如此根本有用的东西，几乎是不可摧毁的。这就是为什么，尽管在史蒂夫离开后很长一段时间里，管理策略从良性忽视到惊人的错误都有，但流量一直在增长。你不能对大多数公司这样做。大多数公司你把眼睛从球上移开六个月，你就会陷入深深的麻烦。但Reddit是特别的，当史蒂夫在2015年回来时，我知道世界将会感到惊讶。\n人们认为他们看透了Reddit：硅谷的参与者之一，但不是重要的参与者。但那些知道幕后发生的事情的人知道故事不止于此。如果Reddit能够在最多无害的管理下增长到它所达到的规模，如果史蒂夫回来，它能做什么？我们现在知道这个问题的答案。或者至少是答案的下限。史蒂夫还没有没有想法。\n",
    "description": "",
    "tags": ["Reddit","Y Combinator","史蒂夫·霍夫曼","亚历克西斯·瓦尼安","创业","技术"],
    "categories": [],
    "content": "→ English Version\nReddit创始人 2024年3月\n我在我们甚至开始Y Combinator之前就认识了Reddit创始人。事实上，他们是我们开始创办它的原因之一。\nYC源于我在哈佛计算机协会（本科生计算机俱乐部）的一次关于如何创办创业公司的演讲。观众中的其他人可能都是本地人，但史蒂夫和亚历克西斯是从弗吉尼亚大学乘火车来的，他们是那里的高年级学生。既然他们来了这么远，我同意和他们见面喝咖啡。他们告诉我一个后来我们资助他们放弃的创业想法：一种在手机上订购快餐的方式。\n这是在智能手机之前的时代。他们必须与手机运营商和快餐连锁店达成协议才能推出。所以这是不可能实现的。即使在19年后的今天，这仍然不存在。但我对他们的智慧和能量印象深刻。事实上，我对他们以及我在那次演讲中遇到的其他一些人是如此印象深刻，以至于我决定创办一些东西来资助他们。几天后，我告诉史蒂夫和亚历克西斯我们正在创办Y Combinator，并鼓励他们申请。\n第一批我们没有任何方式来识别申请人，所以我们给他们起了绰号。Reddit创始人是\u0026quot;手机食物松饼\u0026quot;。\u0026ldquo;松饼\u0026quot;是杰西卡用来形容小狗和两岁小孩等事物的亲昵称呼。所以这让你对史蒂夫和亚历克西斯当时给人的印象有所了解。他们有着小鸟那种略带凌乱的惊讶表情。\n不过他们的想法很糟糕。而且由于那时我们认为我们是在资助想法而不是创始人，所以我们拒绝了他们。但我们对此感到不好。杰西卡因为我们拒绝了松饼而难过。对我来说，拒绝那些激励我们创办YC来资助的人似乎是错误的。\n我认为创业公司意义上的\u0026quot;转型\u0026quot;这个词还没有被发明出来，但我们想要资助史蒂夫和亚历克西斯，所以如果他们的想法不好，他们就必须研究其他东西。而且我知道是什么。那时候有一个叫Delicious的网站，你可以在那里保存链接。它有一个叫del.icio.us/popular的页面，列出了最多保存的链接，人们正在使用这个页面作为事实上的Reddit。我知道这一点是因为我网站的很多流量都来自它。需要有一个类似del.icio.us/popular的东西，但设计用于分享链接而不是作为保存链接的副产品。\n所以我打电话给史蒂夫和亚历克西斯，说我们喜欢他们，只是不喜欢他们的想法，所以如果他们研究其他东西，我们会资助他们。那时他们正在乘火车回弗吉尼亚的家。他们在下一站下车，登上了北上的下一班火车，到那天结束时，他们承诺致力于现在被称为Reddit的东西。\n他们本想叫它Snoo，就像\u0026quot;What snoo？\u0026ldquo;一样。但snoo.com太贵了，所以他们决定把吉祥物叫Snoo，并为网站选择一个未被注册的名字。早期Reddit只是一个临时名称，或者至少他们是这样告诉我的，但现在可能改不掉了。\n就像所有真正伟大的创业公司一样，公司和创始人之间有一种不寻常的紧密匹配。特别是史蒂夫。Reddit有一种特定的性格——好奇、怀疑、准备被娱乐——这种性格就是史蒂夫的性格。\n史蒂夫会对这个翻白眼，但他是一个知识分子；他对为了其自身而感兴趣的想法感兴趣。这就是他为什么会出现在剑桥的那个观众席上。他认识我是因为他对一种我写过的叫做Lisp的编程语言感兴趣，而Lisp是那种很少有人学习的语言之一，除非是出于智力好奇心。史蒂夫那种真空吸尘器式的好奇心正是你想要的那种，当你创办一个网站，它是一个包含任何有趣内容的链接列表。\n史蒂夫不是权威的粉丝，所以他也喜欢一个没有编辑的网站的想法。那时程序员的主要论坛是一个叫Slashdot的网站。它很像Reddit，只是首页上的故事是由人工版主选择的。虽然他们做得很好，但这一微小的差异被证明是一个巨大的差异。由用户提交驱动意味着Reddit比Slashdot更新。那里的新闻更新，用户总是会去最新的新闻所在的地方。\n我推动Reddit创始人快速发布。第一版不需要超过几百行代码。怎么需要一周多的时间来构建？他们确实发布得相对较快，大约在第一批YC批次开始后三周。第一批用户是史蒂夫、亚历克西斯、我，以及他们的一些YC同班同学和大学朋友。事实证明，你不需要那么多用户来收集一个像样的有趣链接列表，特别是如果你每个用户有多个账户。\nReddit从他们的YC批次又得到了两个人：克里斯·斯洛和亚伦·斯沃茨，他们也异常聪明。克里斯刚刚完成他在哈佛的物理学博士学业。亚伦更年轻，一个大学新生，甚至比史蒂夫更反权威。将他描述为后来权威对他所做的事情的殉道者并不夸张。\nReddit的流量缓慢但不可阻挡地增长。起初数字太小，很难与背景噪音区分开来。但在几周内，很明显有一个真正的用户核心定期返回网站。尽管Reddit公司在后来的年份里经历了各种各样的事情，但Reddit网站从未回头。\nReddit网站（现在的应用程序）是一个 …"
  },{
    "title": "Relentlessly Resourceful",
    "url": "/paul_graham/essays_en/relres/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nRelentlessly Resourceful March 2009\nA couple days ago I finally got being a good startup founder down to two words: relentlessly resourceful.\nTill then the best I\u0026rsquo;d managed was to get the opposite quality down to one: hapless. Most dictionaries say hapless means unlucky. But the dictionaries are not doing a very good job. A team that outplays its opponents but loses because of a bad decision by the referee could be called unlucky, but not hapless. Hapless implies passivity. To be hapless is to be battered by circumstances — to let the world have its way with you, instead of having your way with the world. [1]\n",
    "description": "",
    "tags": ["startup","resourcefulness","founders","entrepreneurship","success","persistence"],
    "categories": [],
    "content": "→ 中文版本\nRelentlessly Resourceful March 2009\nA couple days ago I finally got being a good startup founder down to two words: relentlessly resourceful.\nTill then the best I\u0026rsquo;d managed was to get the opposite quality down to one: hapless. Most dictionaries say hapless means unlucky. But the dictionaries are not doing a very good job. A team that outplays its opponents but loses because of a bad decision by the referee could be called unlucky, but not hapless. Hapless implies passivity. To be hapless is to be battered by circumstances — to let the world have its way with you, instead of having your way with the world. [1]\nUnfortunately there\u0026rsquo;s no antonym of hapless, which makes it difficult to tell founders what to aim for. \u0026ldquo;Don\u0026rsquo;t be hapless\u0026rdquo; is not much of a rallying cry.\nIt\u0026rsquo;s not hard to express the quality we\u0026rsquo;re looking for in metaphors. The best is probably a running back. A good running back is not merely determined, but flexible as well. They want to get downfield, but they adapt their plans on the fly.\nUnfortunately this is just a metaphor, and not a useful one to most people outside the US. \u0026ldquo;Be like a running back\u0026rdquo; is no better than \u0026ldquo;Don\u0026rsquo;t be hapless.\u0026rdquo;\nBut finally I\u0026rsquo;ve figured out how to express this quality directly. I was writing a talk for investors, and I had to explain what to look for in founders. What would someone who was the opposite of hapless be like? They\u0026rsquo;d be relentlessly resourceful. Not merely relentless. That\u0026rsquo;s not enough to make things go your way except in a few mostly uninteresting domains. In any interesting domain, the difficulties will be novel. Which means you can\u0026rsquo;t simply plow through them, because you don\u0026rsquo;t know initially how hard they are; you don\u0026rsquo;t know whether you\u0026rsquo;re about to plow through a block of foam or granite. So you have to be resourceful. You have to keep trying new things.\nBe relentlessly resourceful.\nThat sounds …"
  },{
    "title": "Return of the Mac",
    "url": "/paul_graham/essays_en/mac/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "Return of the Mac March 2005\nAll the best hackers I know are gradually switching to Macs. My friend Robert said his whole research group at MIT recently bought themselves Powerbooks. These guys are not the graphic designers and grandmas who were buying Macs at Apple\u0026rsquo;s low point in the mid 1990s. They\u0026rsquo;re about as hardcore OS hackers as you can get.\nThe reason, of course, is OS X. Powerbooks are beautifully designed and run FreeBSD. What more do you need to know?\n",
    "description": "",
    "tags": ["mac","apple","programming","hackers","technology","os","computers","software"],
    "categories": [],
    "content": "Return of the Mac March 2005\nAll the best hackers I know are gradually switching to Macs. My friend Robert said his whole research group at MIT recently bought themselves Powerbooks. These guys are not the graphic designers and grandmas who were buying Macs at Apple\u0026rsquo;s low point in the mid 1990s. They\u0026rsquo;re about as hardcore OS hackers as you can get.\nThe reason, of course, is OS X. Powerbooks are beautifully designed and run FreeBSD. What more do you need to know?\nI got a Powerbook at the end of last year. When my IBM Thinkpad\u0026rsquo;s hard disk died soon after, it became my only laptop. And when my friend Trevor showed up at my house recently, he was carrying a Powerbook identical to mine.\nFor most of us, it\u0026rsquo;s not a switch to Apple, but a return. Hard as this was to believe in the mid 90s, the Mac was in its time the canonical hacker\u0026rsquo;s computer.\nIn the fall of 1983, the professor in one of my college CS classes got up and announced, like a prophet, that there would soon be a computer with half a MIPS of processing power that would fit under an airline seat and cost so little that we could save enough to buy one from a summer job. The whole room gasped. And when the Mac appeared, it was even better than we\u0026rsquo;d hoped. It was small and powerful and cheap, as promised. But it was also something we\u0026rsquo;d never considered a computer could be: fabulously well designed.\nI had to have one. And I wasn\u0026rsquo;t alone. In the mid to late 1980s, all the hackers I knew were either writing software for the Mac, or wanted to. Every futon sofa in Cambridge seemed to have the same fat white book lying open on it. If you turned it over, it said \u0026ldquo;Inside Macintosh.\u0026rdquo;\nThen came Linux and FreeBSD, and hackers, who follow the most powerful OS wherever it leads, found themselves switching to Intel boxes. If you cared about design, you could buy a Thinkpad, which was at least not actively repellent, if you could get the Intel and Microsoft stickers off …"
  },{
    "title": "Revenge of the Nerds",
    "url": "/paul_graham/essays_en/icad/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nRevenge of the Nerds Want to start a startup? Get funded by Y Combinator.\nMay 2002\n\u0026ldquo;We were after the C++ programmers. We managed to drag a lot of them about halfway to Lisp.\u0026rdquo;\nGuy Steele, co-author of the Java spec In the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. Everyone knows who the pointy-haired boss is, right? I think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon.\n",
    "description": "",
    "tags": ["Lisp","programming languages","software development","technology","innovation","startups"],
    "categories": [],
    "content": "→ 中文版本\nRevenge of the Nerds Want to start a startup? Get funded by Y Combinator.\nMay 2002\n\u0026ldquo;We were after the C++ programmers. We managed to drag a lot of them about halfway to Lisp.\u0026rdquo;\nGuy Steele, co-author of the Java spec In the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. Everyone knows who the pointy-haired boss is, right? I think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon.\nThe pointy-haired boss miraculously combines two qualities that are common by themselves, but rarely seen together: (a) he knows nothing whatsoever about technology, and (b) he has very strong opinions about it.\nSuppose, for example, you need to write a piece of software. The pointy-haired boss has no idea how this software has to work, and can\u0026rsquo;t tell one programming language from another, and yet he knows what language you should write it in. Exactly. He thinks you should write it in Java.\nWhy does he think this? Let\u0026rsquo;s take a look inside the brain of the pointy-haired boss. What he\u0026rsquo;s thinking is something like this. Java is a standard. I know it must be, because I read about it in the press all the time. Since it is a standard, I won\u0026rsquo;t get in trouble for using it. And that also means there will always be lots of Java programmers, so if the programmers working for me now quit, as programmers working for me mysteriously always do, I can easily replace them.\nWell, this doesn\u0026rsquo;t sound that unreasonable. But it\u0026rsquo;s all based on one unspoken assumption, and that assumption turns out to be false. The pointy-haired boss believes that all programming languages are pretty much equivalent. If that were true, he would be right on target. If languages are all equivalent, sure, use whatever language everyone else is using.\nBut all languages are not …"
  },{
    "title": "Ronco原则",
    "url": "/paul_graham/essays_zh/ronco/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nRonco原则 2015年1月\n无论是风险投资还是天使投资，没有人比Ron Conway投资了更多的顶级创业公司。他知道硅谷每笔交易的内情，其中一半的交易都是他安排的。\n然而他是一个超级好的人。事实上，\u0026ldquo;好\u0026quot;这个词还不足以形容他。Ronco是善良的。我不知道有任何他表现不好的例子。甚至很难想象这样的事情。\n当我第一次来到硅谷时，我想：\u0026ldquo;多么幸运，一个如此有权势的人如此仁慈。\u0026ldquo;但渐渐地我意识到这不是运气。正是因为仁慈，Ronco才变得如此有权势。所有他投资的机会都是通过推荐来的。Google是。Facebook是。Twitter是Evan Williams亲自推荐的。这么多人向他推荐交易的原因是他已经证明自己是一个好人。\n善良并不意味着好欺负。我不想面对一个愤怒的Ronco。但如果Ron对你生气，那是因为你做错了什么。Ron是如此老派，他就像旧约中的人物。他会在正义的愤怒中击打你，但其中没有恶意。\n在几乎所有领域，看似善良都有优势。它让人们信任你。但实际上善良是看似善良的一种昂贵方式。对一个不道德的人来说，这可能看起来有点过分。\n在某些领域可能是这样，但在创业世界显然不是。虽然很多投资者都是混蛋，但他们之间有一个明显的趋势：最成功的投资者也是最正直的。[1]\n过去并不总是这样。我不敢说二十年前的投资者也是如此。\n什么改变了？创业世界变得更加透明和更加不可预测。这两者都让不实际善良而看似善良变得更加困难。\n透明度产生这种效果的原因是显而易见的。现在当一个投资者虐待创始人时，事情会传出去。可能不会完全传到媒体那里，但其他创始人会听说，那个投资者就开始失去交易。[2]\n不可预测性的影响更加微妙。它增加了行为不一致的工作量。如果你要两面派，你必须知道你应该对谁好，可以对谁坏而不受惩罚。在创业世界，事情变化如此之快，你无法判断。今天和你谈话的随机大学生可能在几年后成为硅谷最热门创业公司的CEO。如果你无法判断应该对谁好，你必须对每个人都好。而唯一能够做到这一点的人可能是那些真正善良的人。\n在一个足够连接和不可预测的世界里，你不能不善良而看似善良。\n像经常发生的那样，Ron偶然发现了如何成为未来的投资者。他没有预见创业投资的未来，意识到正直会有回报，并强迫自己以那种方式行事。对他来说，以任何其他方式行事都会感觉不自然。他已经生活在未来。\n幸运的是，那个未来并不限于创业世界。创业世界比大多数领域更透明和不可预测，但几乎到处都是这个趋势。\n注释 [1] 我不是说如果你按仁慈程度对投资者进行排序，你也按回报率对他们进行了排序，而是说如果你做一个散点图，x轴是仁慈程度，y轴是回报率，你会看到一个明显的上升趋势。\n[2] Y Combinator特别是因为它聚合了如此多创业公司的数据，对投资者行为有相当全面的看法。\n感谢Sam Altman和Jessica Livingston阅读本文草稿。\n",
    "description": "",
    "tags": ["投资者","道德","硅谷","ron conway","创业生态"],
    "categories": [],
    "content": "→ English Version\nRonco原则 2015年1月\n无论是风险投资还是天使投资，没有人比Ron Conway投资了更多的顶级创业公司。他知道硅谷每笔交易的内情，其中一半的交易都是他安排的。\n然而他是一个超级好的人。事实上，\u0026ldquo;好\u0026quot;这个词还不足以形容他。Ronco是善良的。我不知道有任何他表现不好的例子。甚至很难想象这样的事情。\n当我第一次来到硅谷时，我想：\u0026ldquo;多么幸运，一个如此有权势的人如此仁慈。\u0026ldquo;但渐渐地我意识到这不是运气。正是因为仁慈，Ronco才变得如此有权势。所有他投资的机会都是通过推荐来的。Google是。Facebook是。Twitter是Evan Williams亲自推荐的。这么多人向他推荐交易的原因是他已经证明自己是一个好人。\n善良并不意味着好欺负。我不想面对一个愤怒的Ronco。但如果Ron对你生气，那是因为你做错了什么。Ron是如此老派，他就像旧约中的人物。他会在正义的愤怒中击打你，但其中没有恶意。\n在几乎所有领域，看似善良都有优势。它让人们信任你。但实际上善良是看似善良的一种昂贵方式。对一个不道德的人来说，这可能看起来有点过分。\n在某些领域可能是这样，但在创业世界显然不是。虽然很多投资者都是混蛋，但他们之间有一个明显的趋势：最成功的投资者也是最正直的。[1]\n过去并不总是这样。我不敢说二十年前的投资者也是如此。\n什么改变了？创业世界变得更加透明和更加不可预测。这两者都让不实际善良而看似善良变得更加困难。\n透明度产生这种效果的原因是显而易见的。现在当一个投资者虐待创始人时，事情会传出去。可能不会完全传到媒体那里，但其他创始人会听说，那个投资者就开始失去交易。[2]\n不可预测性的影响更加微妙。它增加了行为不一致的工作量。如果你要两面派，你必须知道你应该对谁好，可以对谁坏而不受惩罚。在创业世界，事情变化如此之快，你无法判断。今天和你谈话的随机大学生可能在几年后成为硅谷最热门创业公司的CEO。如果你无法判断应该对谁好，你必须对每个人都好。而唯一能够做到这一点的人可能是那些真正善良的人。\n在一个足够连接和不可预测的世界里，你不能不善良而看似善良。\n像经常发生的那样，Ron偶然发现了如何成为未来的投资者。他没有预见创业投资的未来，意识到正直会有回报，并强迫自己以那种方式行事。对他来说，以任何其他方式行事都会感觉不自然。他已经生活在未来。\n幸运的是，那个未来并不限于创业世界。创业世界比大多数领域更透明和不可预测，但几乎到处都是这个趋势。\n注释 [1] 我不是说如果你按仁慈程度对投资者进行排序，你也按回报率对他们进行了排序，而是说如果你做一个散点图，x轴是仁慈程度，y轴是回报率，你会看到一个明显的上升趋势。\n[2] Y Combinator特别是因为它聚合了如此多创业公司的数据，对投资者行为有相当全面的看法。\n感谢Sam Altman和Jessica Livingston阅读本文草稿。\n"
  },{
    "title": "RSS",
    "url": "/paul_graham/essays_en/rss/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nRSS Aaron Swartz created a scraped feed of the essays page.\nNote: This appears to be a very brief note about RSS feed creation for Paul Graham\u0026rsquo;s essays page, created by Aaron Swartz.\n",
    "description": "",
    "tags": ["rss","aaron swartz","web feeds","syndication"],
    "categories": [],
    "content": "→ 中文版本\nRSS Aaron Swartz created a scraped feed of the essays page.\nNote: This appears to be a very brief note about RSS feed creation for Paul Graham\u0026rsquo;s essays page, created by Aaron Swartz.\n"
  },{
    "title": "RSS",
    "url": "/paul_graham/essays_zh/rss/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nRSS Aaron Swartz 创建了论文页面的抓取订阅源。\n注意：这似乎是一个非常简短的说明，关于Aaron Swartz为Paul Graham的论文页面创建RSS订阅源。\n",
    "description": "",
    "tags": ["rss","aaron swartz","网络订阅","联合发布"],
    "categories": [],
    "content": "→ English Version\nRSS Aaron Swartz 创建了论文页面的抓取订阅源。\n注意：这似乎是一个非常简短的说明，关于Aaron Swartz为Paul Graham的论文页面创建RSS订阅源。\n"
  },{
    "title": "Schlep Blindness",
    "url": "/paul_graham/essays_en/schlep/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nSchlep Blindness January 2012\nThere are great startup ideas lying around unexploited right under our noses. One reason we don\u0026rsquo;t see them is a phenomenon I call schlep blindness. Schlep was originally a Yiddish word but has passed into general use in the US. It means a tedious, unpleasant task.\nNo one likes schleps, but hackers especially dislike them. Most hackers who start startups wish they could do it by just writing some clever software, putting it on a server somewhere, and watching the money roll in—without ever having to talk to users, or negotiate with other companies, or deal with other people\u0026rsquo;s broken code. Maybe that\u0026rsquo;s possible, but I haven\u0026rsquo;t seen it.\n",
    "description": "",
    "tags": ["schlep","startup","programming","entrepreneurship","y_combinator","hard_problems"],
    "categories": [],
    "content": "→ 中文版本\nSchlep Blindness January 2012\nThere are great startup ideas lying around unexploited right under our noses. One reason we don\u0026rsquo;t see them is a phenomenon I call schlep blindness. Schlep was originally a Yiddish word but has passed into general use in the US. It means a tedious, unpleasant task.\nNo one likes schleps, but hackers especially dislike them. Most hackers who start startups wish they could do it by just writing some clever software, putting it on a server somewhere, and watching the money roll in—without ever having to talk to users, or negotiate with other companies, or deal with other people\u0026rsquo;s broken code. Maybe that\u0026rsquo;s possible, but I haven\u0026rsquo;t seen it.\nOne of the many things we do at Y Combinator is teach hackers about the inevitability of schleps. No, you can\u0026rsquo;t start a startup by just writing code. I remember going through this realization myself. There was a point in 1995 when I was still trying to convince myself I could start a company by just writing code. But I soon learned from experience that schleps are not merely inevitable, but pretty much what business consists of.\nA company is defined by the schleps it will undertake. And schleps should be dealt with the same way you\u0026rsquo;d deal with a cold swimming pool: just jump in. Which is not to say you should seek out unpleasant work per se, but that you should never shrink from it if it\u0026rsquo;s on the path to something great.\nThe most dangerous thing about our dislike of schleps is that much of it is unconscious. Your unconscious won\u0026rsquo;t even let you see ideas that involve painful schleps. That\u0026rsquo;s schlep blindness.\nThe phenomenon isn\u0026rsquo;t limited to startups. Most people don\u0026rsquo;t consciously decide not to be in as good physical shape as Olympic athletes, for example. Their unconscious mind decides for them, shrinking from the work involved.\nThe most striking example I know of schlep blindness is Stripe, or rather Stripe\u0026rsquo;s idea. For over a …"
  },{
    "title": "See Randomness",
    "url": "/paul_graham/essays_en/randomness/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nSee Randomness April 2006, rev August 2009\nPlato quotes Socrates as saying \u0026ldquo;the unexamined life is not worth living.\u0026rdquo; Part of what he meant was that the proper role of humans is to think, just as the proper role of anteaters is to poke their noses into anthills.\nA lot of ancient philosophy had the quality — and I don\u0026rsquo;t mean this in an insulting way — of the kind of conversations freshmen have late at night in common rooms: What is our purpose? Well, we humans are as conspicuously different from other animals as the anteater. In our case the distinguishing feature is the ability to reason. So obviously that is what we should be doing, and a human who doesn\u0026rsquo;t is doing a bad job of being human — is no better than an animal. Now we\u0026rsquo;d give a different answer. At least, someone Socrates\u0026rsquo;s age would. We\u0026rsquo;d ask why we even suppose we have a \u0026ldquo;purpose\u0026rdquo; in life. We may be better adapted for some things than others; we may be happier doing things we\u0026rsquo;re adapted for; but why assume purpose?\n",
    "description": "",
    "tags": ["philosophy","thinking","randomness","ideas","reason","evolution","dawkins"],
    "categories": [],
    "content": "→ 中文版本\nSee Randomness April 2006, rev August 2009\nPlato quotes Socrates as saying \u0026ldquo;the unexamined life is not worth living.\u0026rdquo; Part of what he meant was that the proper role of humans is to think, just as the proper role of anteaters is to poke their noses into anthills.\nA lot of ancient philosophy had the quality — and I don\u0026rsquo;t mean this in an insulting way — of the kind of conversations freshmen have late at night in common rooms: What is our purpose? Well, we humans are as conspicuously different from other animals as the anteater. In our case the distinguishing feature is the ability to reason. So obviously that is what we should be doing, and a human who doesn\u0026rsquo;t is doing a bad job of being human — is no better than an animal. Now we\u0026rsquo;d give a different answer. At least, someone Socrates\u0026rsquo;s age would. We\u0026rsquo;d ask why we even suppose we have a \u0026ldquo;purpose\u0026rdquo; in life. We may be better adapted for some things than others; we may be happier doing things we\u0026rsquo;re adapted for; but why assume purpose?\nThe history of ideas is a history of gradually discarding the assumption that it\u0026rsquo;s all about us. No, it turns out, the earth is not the center of the universe — not even the center of the solar system. No, it turns out, humans are not created by God in his own image; they\u0026rsquo;re just one species among many, descended not merely from apes, but from microorganisms. Even the concept of \u0026ldquo;me\u0026rdquo; turns out to be fuzzy around the edges if you examine it closely.\nThe idea that we\u0026rsquo;re the center of things is difficult to discard. So difficult that there\u0026rsquo;s probably room to discard more. Richard Dawkins made another step in that direction only in the last several decades, with the idea of the selfish gene. No, it turns out, we\u0026rsquo;re not even the protagonists: we\u0026rsquo;re just the latest model vehicle our genes have constructed to travel around in. And having kids is our genes heading for the lifeboats. …"
  },{
    "title": "Six Principles for Making New Things",
    "url": "/paul_graham/essays_en/newthings/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nSix Principles for Making New Things February 2008\nThe fiery reaction to the release of Arc had an unexpected consequence: it made me realize I had a design philosophy. The main complaint of the more articulate critics was that Arc seemed so flimsy. After years of working on it, all I had to show for myself were a few thousand lines of macros? Why hadn\u0026rsquo;t I worked on more substantial problems?\n",
    "description": "",
    "tags": ["innovation","design","simplicity","startups","creativity","problem-solving"],
    "categories": [],
    "content": "→ 中文版本\nSix Principles for Making New Things February 2008\nThe fiery reaction to the release of Arc had an unexpected consequence: it made me realize I had a design philosophy. The main complaint of the more articulate critics was that Arc seemed so flimsy. After years of working on it, all I had to show for myself were a few thousand lines of macros? Why hadn\u0026rsquo;t I worked on more substantial problems?\nAs I was mulling over these remarks it struck me how familiar they seemed. This was exactly the kind of thing people said at first about Viaweb, and Y Combinator, and most of my essays.\nWhen we launched Viaweb, it seemed laughable to VCs and e-commerce \u0026ldquo;experts.\u0026rdquo; We were just a couple guys in an apartment, which did not seem cool in 1995 the way it does now. And the thing we\u0026rsquo;d built, as far as they could tell, wasn\u0026rsquo;t even software. Software, to them, equalled big, honking Windows apps. Since Viaweb was the first web-based app they\u0026rsquo;d seen, it seemed to be nothing more than a website. They were even more contemptuous when they discovered that Viaweb didn\u0026rsquo;t process credit card transactions (we didn\u0026rsquo;t for the whole first year). Transaction processing seemed to them what e-commerce was all about. It sounded serious and difficult.\nAnd yet, mysteriously, Viaweb ended up crushing all its competitors.\nThe initial reaction to Y Combinator was almost identical. It seemed laughably lightweight. Startup funding meant series A rounds: millions of dollars given to a small number of startups founded by people with established credentials after months of serious, businesslike meetings, on terms described in a document a foot thick. Y Combinator seemed inconsequential. It\u0026rsquo;s too early to say yet whether Y Combinator will turn out like Viaweb, but judging from the number of imitations, a lot of people seem to think we\u0026rsquo;re on to something.\nI can\u0026rsquo;t measure whether my essays are successful, except in page views, but the reaction …"
  },{
    "title": "Snapshot: Viaweb, June 1998",
    "url": "/paul_graham/essays_en/vw/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nSnapshot: Viaweb, June 1998 January 2012\nA few hours before the Yahoo acquisition was announced in June 1998 I took a snapshot of Viaweb\u0026rsquo;s site. I thought it might be interesting to look at one day.The first thing one notices is is how tiny the pages are. Screens were a lot smaller in 1998. If I remember correctly, our frontpage used to just fit in the size window people typically used then.Browsers then (IE 6 was still 3 years in the future) had few fonts and they weren\u0026rsquo;t antialiased. If you wanted to make pages that looked good, you had to render display text as images.You may notice a certain similarity between the Viaweb and Y Combinator logos. We did that as an inside joke when we started YC. Considering how basic a red circle is, it seemed surprising to me when we started Viaweb how few other companies used one as their logo. A bit later I realized why.On the Company page you\u0026rsquo;ll notice a mysterious individual called John McArtyem. Robert Morris (aka Rtm) was so publicity averse after the Worm that he didn\u0026rsquo;t want his name on the site. I managed to get him to agree to a compromise: we could use his bio but not his name. He has since relaxed a bit on that point.Trevor graduated at about the same time the acquisition closed, so in the course of 4 days he went from impecunious grad student to millionaire PhD. The culmination of my career as a writer of press releases was one celebrating his graduation, illustrated with a drawing I did of him during a meeting.(Trevor also appears as Trevino Bagwell in our directory of web designers merchants could hire to build stores for them. We inserted him as a ringer in case some competitor tried to spam our web designers. We assumed his logo would deter any actual customers, but it did not.)Back in the 90s, to get users you had to get mentioned in magazines and newspapers. There were not the same ways to get found online that there are today. So we used to pay a PR firm $16,000 a month to get us mentioned in the press. Fortunately reporters liked us.In our advice about getting traffic from search engines (I don't think the term SEO had been coined yet), we say there are only 7 that matter: Yahoo, AltaVista, Excite, WebCrawler, InfoSeek, Lycos, and HotBot. Notice anything missing? Google was incorporated that September.We supported online transactions via a company called Cybercash, since if we lacked that feature we'd have gotten beaten up in product comparisons. But Cybercash was so bad and most stores' order volumes were so low that it was better if merchants processed orders like phone orders. We had a page in our site trying to talk merchants out of doing real time authorizations.The whole site was organized like a funnel, directing people to the test drive. It was a novel thing to be able to try out software online. We put cgi-bin in our dynamic urls to fool competitors about how our software worked.We had some well known users. Needless to say, Frederick's of Hollywood got the most traffic. We charged a flat fee of $300/month for big stores, so it was a little alarming to have users who got lots of traffic. I once calculated how much Frederick\u0026rsquo;s was costing us in bandwidth, and it was about $300/month.Since we hosted all the stores, which together were getting just over 10 million page views per month in June 1998, we consumed what at the time seemed a lot of bandwidth. We had 2 T1s (3 Mb/sec) coming into our offices. In those days there was no AWS. Even colocating servers seemed too risky, considering how often things went wrong with them. So we had our servers in our offices. Or more precisely, in Trevor\u0026rsquo;s office. In return for the unique privilege of sharing his office with no other humans, he had to share it with 6 shrieking tower servers. His office was nicknamed the Hot Tub on account of the heat they generated. Most days his stack of window air conditioners could keep up.For describing pages, we had a template language called RTML, which supposedly stood for something, but which in fact I named after Rtm. RTML was Common Lisp augmented by some macros and libraries, and concealed under a structure editor that made it look like it had syntax.Since we did continuous releases, our software didn\u0026rsquo;t actually have versions. But in those days the trade press expected versions, so we made them up. If we wanted to get lots of attention, we made the version number an integer. That \u0026ldquo;version 4.0\u0026rdquo; icon was generated by our own button generator, incidentally. The whole Viaweb site was made with our software, even though it wasn\u0026rsquo;t an online store, because we wanted to experience what our users did.At the end of 1997, we released a general purpose shopping search engine called Shopfind. It was pretty advanced for the time. It had a programmable crawler that could crawl most of the different stores online and pick out the products.\n",
    "description": "",
    "tags": ["Viaweb","Yahoo","acquisition","web development","history","technology"],
    "categories": [],
    "content": "→ 中文版本\nSnapshot: Viaweb, June 1998 January 2012\nA few hours before the Yahoo acquisition was announced in June 1998 I took a snapshot of Viaweb\u0026rsquo;s site. I thought it might be interesting to look at one day.The first thing one notices is is how tiny the pages are. Screens were a lot smaller in 1998. If I remember correctly, our frontpage used to just fit in the size window people typically used then.Browsers then (IE 6 was still 3 years in the future) had few fonts and they weren\u0026rsquo;t antialiased. If you wanted to make pages that looked good, you had to render display text as images.You may notice a certain similarity between the Viaweb and Y Combinator logos. We did that as an inside joke when we started YC. Considering how basic a red circle is, it seemed surprising to me when we started Viaweb how few other companies used one as their logo. A bit later I realized why.On the Company page you\u0026rsquo;ll notice a mysterious individual called John McArtyem. Robert Morris (aka Rtm) was so publicity averse after the Worm that he didn\u0026rsquo;t want his name on the site. I managed to get him to agree to a compromise: we could use his bio but not his name. He has since relaxed a bit on that point.Trevor graduated at about the same time the acquisition closed, so in the course of 4 days he went from impecunious grad student to millionaire PhD. The culmination of my career as a writer of press releases was one celebrating his graduation, illustrated with a drawing I did of him during a meeting.(Trevor also appears as Trevino Bagwell in our directory of web designers merchants could hire to build stores for them. We inserted him as a ringer in case some competitor tried to spam our web designers. We assumed his logo would deter any actual customers, but it did not.)Back in the 90s, to get users you had to get mentioned in magazines and newspapers. There were not the same ways to get found online that there are today. So we used to pay a PR firm $16,000 a month to get us …"
  },{
    "title": "Some Heroes",
    "url": "/paul_graham/essays_en/heroes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nSome Heroes April 2008\nThere are some topics I save up because they\u0026rsquo;ll be so much fun to write about. This is one of them: a list of my heroes.\nI\u0026rsquo;m not claiming this is a list of the n most admirable people. Who could make such a list, even if they wanted to? Einstein isn\u0026rsquo;t on the list, for example, even though he probably deserves to be on any shortlist of admirable people. I once asked a physicist friend if Einstein was really as smart as his fame implies, and she said that yes, he was. So why isn\u0026rsquo;t he on the list? Because I had to ask. This is a list of people who\u0026rsquo;ve influenced me, not people who would have if I understood their work.\n",
    "description": "",
    "tags": ["heroes","role models","excellence","honesty","dedication","influence"],
    "categories": [],
    "content": "→ 中文版本\nSome Heroes April 2008\nThere are some topics I save up because they\u0026rsquo;ll be so much fun to write about. This is one of them: a list of my heroes.\nI\u0026rsquo;m not claiming this is a list of the n most admirable people. Who could make such a list, even if they wanted to? Einstein isn\u0026rsquo;t on the list, for example, even though he probably deserves to be on any shortlist of admirable people. I once asked a physicist friend if Einstein was really as smart as his fame implies, and she said that yes, he was. So why isn\u0026rsquo;t he on the list? Because I had to ask. This is a list of people who\u0026rsquo;ve influenced me, not people who would have if I understood their work.\nMy test was to think of someone and ask \u0026ldquo;is this person my hero?\u0026rdquo; It often returned surprising answers. For example, it returned false for Montaigne, who was arguably the inventor of the essay. Why? When I thought about what it meant to call someone a hero, it meant I\u0026rsquo;d decide what to do by asking what they\u0026rsquo;d do in the same situation. That\u0026rsquo;s a stricter standard than admiration.\nAfter I made the list, I looked to see if there was a pattern, and there was, a very clear one. Everyone on the list had two qualities: they cared almost excessively about their work, and they were absolutely honest. By honest I don\u0026rsquo;t mean trustworthy so much as that they never pander: they never say or do something because that\u0026rsquo;s what the audience wants. They are all fundamentally subversive for this reason, though they conceal it to varying degrees.\nJack Lambert I grew up in Pittsburgh in the 1970s. Unless you were there it\u0026rsquo;s hard to imagine how that town felt about the Steelers. Locally, all the news was bad. The steel industry was dying. But the Steelers were the best team in football — and moreover, in a way that seemed to reflect the personality of the city. They didn\u0026rsquo;t do anything fancy. They just got the job done.\nOther players were more famous: Terry Bradshaw, …"
  },{
    "title": "Startup = Growth",
    "url": "/paul_graham/essays_en/growth/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nStartup = Growth Want to start a startup? Get funded by Y Combinator.\nSeptember 2012\nA startup is a company designed to grow fast. Being newly founded does not in itself make a company a startup. Nor is it necessary for a startup to work on technology, or take venture funding, or have some sort of \u0026ldquo;exit.\u0026rdquo; The only essential thing is growth. Everything else we associate with startups follows from growth.\n",
    "description": "",
    "tags": ["startups","growth","venture capital","funding","business"],
    "categories": [],
    "content": "→ 中文版本\nStartup = Growth Want to start a startup? Get funded by Y Combinator.\nSeptember 2012\nA startup is a company designed to grow fast. Being newly founded does not in itself make a company a startup. Nor is it necessary for a startup to work on technology, or take venture funding, or have some sort of \u0026ldquo;exit.\u0026rdquo; The only essential thing is growth. Everything else we associate with startups follows from growth.\nIf you want to start one it\u0026rsquo;s important to understand that. Startups are so hard that you can\u0026rsquo;t be pointed off to the side and hope to succeed. You have to know that growth is what you\u0026rsquo;re after. The good news is, if you get growth, everything else tends to fall into place. Which means you can use growth like a compass to make almost every decision you face.\nRedwoods Let\u0026rsquo;s start with a distinction that should be obvious but is often overlooked: not every newly founded company is a startup. Millions of companies are started every year in the US. Only a tiny fraction are startups. Most are service businesses — restaurants, barbershops, plumbers, and so on. These are not startups, except in a few unusual cases. A barbershop isn\u0026rsquo;t designed to grow fast. Whereas a search engine, for example, is.\nWhen I say startups are designed to grow fast, I mean it in two senses. Partly I mean designed in the sense of intended, because most startups fail. But I also mean startups are different by nature, in the same way a redwood seedling has a different destiny from a bean sprout.\nThat difference is why there\u0026rsquo;s a distinct word, \u0026ldquo;startup,\u0026rdquo; for companies designed to grow fast. If all companies were essentially similar, but some through luck or the efforts of their founders ended up growing very fast, we wouldn\u0026rsquo;t need a separate word. We could just talk about super-successful companies and less successful ones. But in fact startups do have a different sort of DNA from other businesses. Google is not just a barbershop …"
  },{
    "title": "Startup Investing Trends",
    "url": "/paul_graham/essays_en/invtrend/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nStartup Investing Trends June 2013\n(This talk was written for an audience of investors.)\nY Combinator has now funded 564 startups including the current batch, which has 53. The total valuation of the 287 that have valuations (either by raising an equity round, getting acquired, or dying) is about $11.7 billion, and the 511 prior to the current batch have collectively raised about $1.7 billion. [1]\nAs usual those numbers are dominated by a few big winners. The top 10 startups account for 8.6 of that 11.7 billion. But there is a peloton of younger startups behind them. There are about 40 more that have a shot at being really big.\n",
    "description": "",
    "tags": ["investing","startups","trends","venture_capital","angels","funding"],
    "categories": [],
    "content": "→ 中文版本\nStartup Investing Trends June 2013\n(This talk was written for an audience of investors.)\nY Combinator has now funded 564 startups including the current batch, which has 53. The total valuation of the 287 that have valuations (either by raising an equity round, getting acquired, or dying) is about $11.7 billion, and the 511 prior to the current batch have collectively raised about $1.7 billion. [1]\nAs usual those numbers are dominated by a few big winners. The top 10 startups account for 8.6 of that 11.7 billion. But there is a peloton of younger startups behind them. There are about 40 more that have a shot at being really big.\nThings got a little out of hand last summer when we had 84 companies in the batch, so we tightened up our filter to decrease the batch size. [2] Several journalists have tried to interpret that as evidence for some macro story they were telling, but the reason had nothing to do with any external trend. The reason was that we discovered we were using an n² algorithm, and we needed to buy time to fix it. Fortunately we\u0026rsquo;ve come up with several techniques for sharding YC, and the problem now seems to be fixed. With a new more scaleable model and only 53 companies, the current batch feels like a walk in the park. I\u0026rsquo;d guess we can grow another 2 or 3x before hitting the next bottleneck. [3]\nOne consequence of funding such a large number of startups is that we see trends early. And since fundraising is one of the main things we help startups with, we\u0026rsquo;re in a good position to notice trends in investing.\nI\u0026rsquo;m going to take a shot at describing where these trends are leading. Let\u0026rsquo;s start with the most basic question: will the future be better or worse than the past? Will investors, in the aggregate, make more money or less?\nI think more. There are multiple forces at work, some of which will decrease returns, and some of which will increase them. I can\u0026rsquo;t predict for sure which forces will prevail, but I\u0026rsquo;ll …"
  },{
    "title": "Startups in 13 Sentences",
    "url": "/paul_graham/essays_en/13sentences/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nStartups in 13 Sentences Want to start a startup? Get funded by Y Combinator. Watch how this essay was written. February 2009\nOne of the things I always tell startups is a principle I learned from Paul Buchheit: it\u0026rsquo;s better to make a few people really happy than to make a lot of people semi-happy. I was saying recently to a reporter that if I could only tell startups 10 things, this would be one of them. Then I thought: what would the other 9 be?\n",
    "description": "",
    "tags": ["startup","founders","users","launch","advice"],
    "categories": [],
    "content": "→ 中文版本\nStartups in 13 Sentences Want to start a startup? Get funded by Y Combinator. Watch how this essay was written. February 2009\nOne of the things I always tell startups is a principle I learned from Paul Buchheit: it\u0026rsquo;s better to make a few people really happy than to make a lot of people semi-happy. I was saying recently to a reporter that if I could only tell startups 10 things, this would be one of them. Then I thought: what would the other 9 be?\nWhen I made the list there turned out to be 13:\nPick good cofounders. Cofounders are for a startup what location is for real estate. You can change anything about a house except where it is. In a startup you can change your idea easily, but changing your cofounders is hard. [1] And the success of a startup is almost always a function of its founders.\nLaunch fast. The reason to launch fast is not so much that it\u0026rsquo;s critical to get your product to market early, but that you haven\u0026rsquo;t really started working on it till you\u0026rsquo;ve launched. Launching teaches you what you should have been building. Till you know that you\u0026rsquo;re wasting your time. So the main value of whatever you launch with is as a pretext for engaging users.\nLet your idea evolve. This is the second half of launching fast. Launch fast and iterate. It\u0026rsquo;s a big mistake to treat a startup as if it were merely a matter of implementing some brilliant initial idea. As in an essay, most of the ideas appear in the implementing.\nUnderstand your users. You can envision the wealth created by a startup as a rectangle, where one side is the number of users and the other is how much you improve their lives. [2] The second dimension is the one you have most control over. And indeed, the growth in the first will be driven by how well you do in the second. As in science, the hard part is not answering questions but asking them: the hard part is seeing something new that users lack. The better you understand them the better the odds of doing that. …"
  },{
    "title": "Stuff",
    "url": "/paul_graham/essays_en/stuff/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nStuff July 2007\nI have too much stuff. Most people in America do. In fact, the poorer people are, the more stuff they seem to have. Hardly anyone is so poor that they can\u0026rsquo;t afford a front yard full of old cars.\nIt wasn\u0026rsquo;t always this way. Stuff used to be rare and valuable. You can still see evidence of that if you look for it. For example, in my house in Cambridge, which was built in 1876, the bedrooms don\u0026rsquo;t have closets. In those days people\u0026rsquo;s stuff fit in a chest of drawers. Even as recently as a few decades ago there was a lot less stuff. When I look back at photos from the 1970s, I\u0026rsquo;m surprised how empty houses look. As a kid I had what I thought was a huge fleet of toy cars, but they\u0026rsquo;d be dwarfed by the number of toys my nephews have. All together my Matchboxes and Corgis took up about a third of the surface of my bed. In my nephews\u0026rsquo; rooms the bed is the only clear space.\n",
    "description": "",
    "tags": ["materialism","consumerism","minimalism","possessions","lifestyle"],
    "categories": [],
    "content": "→ 中文版本\nStuff July 2007\nI have too much stuff. Most people in America do. In fact, the poorer people are, the more stuff they seem to have. Hardly anyone is so poor that they can\u0026rsquo;t afford a front yard full of old cars.\nIt wasn\u0026rsquo;t always this way. Stuff used to be rare and valuable. You can still see evidence of that if you look for it. For example, in my house in Cambridge, which was built in 1876, the bedrooms don\u0026rsquo;t have closets. In those days people\u0026rsquo;s stuff fit in a chest of drawers. Even as recently as a few decades ago there was a lot less stuff. When I look back at photos from the 1970s, I\u0026rsquo;m surprised how empty houses look. As a kid I had what I thought was a huge fleet of toy cars, but they\u0026rsquo;d be dwarfed by the number of toys my nephews have. All together my Matchboxes and Corgis took up about a third of the surface of my bed. In my nephews\u0026rsquo; rooms the bed is the only clear space.\nStuff has gotten a lot cheaper, but our attitudes toward it haven\u0026rsquo;t changed correspondingly. We overvalue stuff.\nThat was a big problem for me when I had no money. I felt poor, and stuff seemed valuable, so almost instinctively I accumulated it. Friends would leave something behind when they moved, or I\u0026rsquo;d see something as I was walking down the street on trash night (beware of anything you find yourself describing as \u0026ldquo;perfectly good\u0026rdquo;), or I\u0026rsquo;d find something in almost new condition for a tenth its retail price at a garage sale. And pow, more stuff.\nIn fact these free or nearly free things weren\u0026rsquo;t bargains, because they were worth even less than they cost. Most of the stuff I accumulated was worthless, because I didn\u0026rsquo;t need it.\nWhat I didn\u0026rsquo;t understand was that the value of some new acquisition wasn\u0026rsquo;t the difference between its retail price and what I paid for it. It was the value I derived from it. Stuff is an extremely illiquid asset. Unless you have some plan for selling that valuable thing …"
  },{
    "title": "Succinctness is Power",
    "url": "/paul_graham/essays_en/power/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nSuccinctness is Power May 2002\n\u0026ldquo;The quantity of meaning compressed into a small space by algebraic signs, is another circumstance that facilitates the reasonings we are accustomed to carry on by their aid.\u0026rdquo; - Charles Babbage, quoted in Iverson\u0026rsquo;s Turing Award Lecture\nIn the discussion about issues raised by Revenge of the Nerds on the LL1 mailing list, Paul Prescod wrote something that stuck in my mind. Python\u0026rsquo;s goal is regularity and readability, not succinctness. On the face of it, this seems a rather damning thing to claim about a programming language. As far as I can tell, succinctness = power. If so, then substituting, we get Python\u0026rsquo;s goal is regularity and readability, not power. and this doesn\u0026rsquo;t seem a tradeoff (if it is a tradeoff) that you\u0026rsquo;d want to make. It\u0026rsquo;s not far from saying that Python\u0026rsquo;s goal is not to be effective as a programming language.\n",
    "description": "",
    "tags": ["programming","language_design","succinctness","software_development"],
    "categories": [],
    "content": "→ 中文版本\nSuccinctness is Power May 2002\n\u0026ldquo;The quantity of meaning compressed into a small space by algebraic signs, is another circumstance that facilitates the reasonings we are accustomed to carry on by their aid.\u0026rdquo; - Charles Babbage, quoted in Iverson\u0026rsquo;s Turing Award Lecture\nIn the discussion about issues raised by Revenge of the Nerds on the LL1 mailing list, Paul Prescod wrote something that stuck in my mind. Python\u0026rsquo;s goal is regularity and readability, not succinctness. On the face of it, this seems a rather damning thing to claim about a programming language. As far as I can tell, succinctness = power. If so, then substituting, we get Python\u0026rsquo;s goal is regularity and readability, not power. and this doesn\u0026rsquo;t seem a tradeoff (if it is a tradeoff) that you\u0026rsquo;d want to make. It\u0026rsquo;s not far from saying that Python\u0026rsquo;s goal is not to be effective as a programming language.\nDoes succinctness = power? This seems to me an important question, maybe the most important question for anyone interested in language design, and one that it would be useful to confront directly. I don\u0026rsquo;t feel sure yet that the answer is a simple yes, but it seems a good hypothesis to begin with.\nHypothesis My hypothesis is that succinctness is power, or is close enough that except in pathological examples you can treat them as identical.\nIt seems to me that succinctness is what programming languages are for. Computers would be just as happy to be told what to do directly in machine language. I think that the main reason we take the trouble to develop high-level languages is to get leverage, so that we can say (and more importantly, think) in 10 lines of a high-level language what would require 1000 lines of machine language. In other words, the main point of high-level languages is to make source code smaller.\nIf smaller source code is the purpose of high-level languages, and the power of something is how well it achieves its purpose, then the …"
  },{
    "title": "Superlinear Returns",
    "url": "/paul_graham/essays_en/superlinear/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nSuperlinear Returns October 2023\nOne of the most important things I didn\u0026rsquo;t understand about the world when I was a child is the degree to which the returns for performance are superlinear.\nTeachers and coaches implicitly told us the returns were linear. \u0026ldquo;You get out,\u0026rdquo; I heard a thousand times, \u0026ldquo;what you put in.\u0026rdquo; They meant well, but this is rarely true. If your product is only half as good as your competitor\u0026rsquo;s, you don\u0026rsquo;t get half as many customers. You get no customers, and you go out of business.\n",
    "description": "",
    "tags": ["superlinear","exponential","performance","work","success","ambition","learning"],
    "categories": [],
    "content": "→ 中文版本\nSuperlinear Returns October 2023\nOne of the most important things I didn\u0026rsquo;t understand about the world when I was a child is the degree to which the returns for performance are superlinear.\nTeachers and coaches implicitly told us the returns were linear. \u0026ldquo;You get out,\u0026rdquo; I heard a thousand times, \u0026ldquo;what you put in.\u0026rdquo; They meant well, but this is rarely true. If your product is only half as good as your competitor\u0026rsquo;s, you don\u0026rsquo;t get half as many customers. You get no customers, and you go out of business.\nIt\u0026rsquo;s obviously true that the returns for performance are superlinear in business. Some think this is a flaw of capitalism, and that if we changed the rules it would stop being true. But superlinear returns for performance are a feature of the world, not an artifact of rules we\u0026rsquo;ve invented. We see the same pattern in fame, power, military victories, knowledge, and even benefit to humanity. In all of these, the rich get richer. [1]\nYou can\u0026rsquo;t understand the world without understanding the concept of superlinear returns. And if you\u0026rsquo;re ambitious you definitely should, because this will be the wave you surf on.\nIt may seem as if there are a lot of different situations with superlinear returns, but as far as I can tell they reduce to two fundamental causes: exponential growth and thresholds.\nThe most obvious case of superlinear returns is when you\u0026rsquo;re working on something that grows exponentially. For example, growing bacterial cultures. When they grow at all, they grow exponentially. But they\u0026rsquo;re tricky to grow. Which means the difference in outcome between someone who\u0026rsquo;s adept at it and someone who\u0026rsquo;s not is very great.\nStartups can also grow exponentially, and we see the same pattern there. Some manage to achieve high growth rates. Most don\u0026rsquo;t. And as a result you get qualitatively different outcomes: the companies with high growth rates tend to become immensely valuable, while …"
  },{
    "title": "Tablets",
    "url": "/paul_graham/essays_en/tablets/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nTablets December 2010\nI was thinking recently how inconvenient it was not to have a general term for iPhones, iPads, and the corresponding things running Android. The closest to a general term seems to be \u0026ldquo;mobile devices,\u0026rdquo; but that (a) applies to any mobile phone, and (b) doesn\u0026rsquo;t really capture what\u0026rsquo;s distinctive about the iPad.\nAfter a few seconds it struck me that what we\u0026rsquo;ll end up calling these things is tablets. The only reason we even consider calling them \u0026ldquo;mobile devices\u0026rdquo; is that the iPhone preceded the iPad. If the iPad had come first, we wouldn\u0026rsquo;t think of the iPhone as a phone; we\u0026rsquo;d think of it as a tablet small enough to hold up to your ear.\n",
    "description": "",
    "tags": ["tablets","mobile devices","software","ephemeralization","Apple","iPhone","iPad"],
    "categories": [],
    "content": "→ 中文版本\nTablets December 2010\nI was thinking recently how inconvenient it was not to have a general term for iPhones, iPads, and the corresponding things running Android. The closest to a general term seems to be \u0026ldquo;mobile devices,\u0026rdquo; but that (a) applies to any mobile phone, and (b) doesn\u0026rsquo;t really capture what\u0026rsquo;s distinctive about the iPad.\nAfter a few seconds it struck me that what we\u0026rsquo;ll end up calling these things is tablets. The only reason we even consider calling them \u0026ldquo;mobile devices\u0026rdquo; is that the iPhone preceded the iPad. If the iPad had come first, we wouldn\u0026rsquo;t think of the iPhone as a phone; we\u0026rsquo;d think of it as a tablet small enough to hold up to your ear.\nThe iPhone isn\u0026rsquo;t so much a phone as a replacement for a phone. That\u0026rsquo;s an important distinction, because it\u0026rsquo;s an early instance of what will become a common pattern. Many if not most of the special-purpose objects around us are going to be replaced by apps running on tablets.\nThis is already clear in cases like GPSes, music players, and cameras. But I think it will surprise people how many things are going to get replaced. We funded one startup that\u0026rsquo;s replacing keys. The fact that you can change font sizes easily means the iPad effectively replaces reading glasses. I wouldn\u0026rsquo;t be surprised if by playing some clever tricks with the accelerometer you could even replace the bathroom scale.\nThe advantages of doing things in software on a single device are so great that everything that can get turned into software will. So for the next couple years, a good recipe for startups will be to look around you for things that people haven\u0026rsquo;t realized yet can be made unnecessary by a tablet app.\nIn 1938 Buckminster Fuller coined the term ephemeralization to describe the increasing tendency of physical machinery to be replaced by what we would now call software. The reason tablets are going to take over the world is not (just) that Steve Jobs …"
  },{
    "title": "Taste for Makers",
    "url": "/paul_graham/essays_en/taste/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nTaste for Makers February 2002\n\u0026ldquo;\u0026hellip;Copernicus\u0026rsquo; aesthetic objections to [equants] provided one essential motive for his rejection of the Ptolemaic system\u0026hellip;.\u0026rdquo;\nThomas Kuhn, The Copernican Revolution \u0026ldquo;All of us had been trained by Kelly Johnson and believed fanatically in his insistence that an airplane that looked beautiful would fly the same way.\u0026rdquo;\nBen Rich, Skunk Works \u0026ldquo;Beauty is the first test: there is no permanent place in this world for ugly mathematics.\u0026rdquo;\n",
    "description": "",
    "tags": ["taste","design","beauty","aesthetics","simplicity","creativity","art"],
    "categories": [],
    "content": "→ 中文版本\nTaste for Makers February 2002\n\u0026ldquo;\u0026hellip;Copernicus\u0026rsquo; aesthetic objections to [equants] provided one essential motive for his rejection of the Ptolemaic system\u0026hellip;.\u0026rdquo;\nThomas Kuhn, The Copernican Revolution \u0026ldquo;All of us had been trained by Kelly Johnson and believed fanatically in his insistence that an airplane that looked beautiful would fly the same way.\u0026rdquo;\nBen Rich, Skunk Works \u0026ldquo;Beauty is the first test: there is no permanent place in this world for ugly mathematics.\u0026rdquo;\nG. H. Hardy, A Mathematician\u0026rsquo;s Apology I was talking recently to a friend who teaches at MIT. His field is hot now and every year he is inundated by applications from would-be graduate students. \u0026ldquo;A lot of them seem smart,\u0026rdquo; he said. \u0026ldquo;What I can\u0026rsquo;t tell is whether they have any kind of taste.\u0026rdquo;\nTaste. You don\u0026rsquo;t hear that word much now. And yet we still need the underlying concept, whatever we call it. What my friend meant was that he wanted students who were not just good technicians, but who could use their technical knowledge to design beautiful things.\nMathematicians call good work \u0026ldquo;beautiful,\u0026rdquo; and so, either now or in the past, have scientists, engineers, musicians, architects, designers, writers, and painters. Is it just a coincidence that they used the same word, or is there some overlap in what they meant? If there is an overlap, can we use one field\u0026rsquo;s discoveries about beauty to help us in another?\nFor those of us who design things, these are not just theoretical questions. If there is such a thing as beauty, we need to be able to recognize it. We need good taste to make good things. Instead of treating beauty as an airy abstraction, to be either blathered about or avoided depending on how one feels about airy abstractions, let\u0026rsquo;s try considering it as a practical question: how do you make good stuff?\nIf you mention taste nowadays, a lot of people will tell you that \u0026ldquo;taste is …"
  },{
    "title": "The 18 Mistakes That Kill Startups",
    "url": "/paul_graham/essays_en/startupmistakes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nThe 18 Mistakes That Kill Startups October 2006\nIn the Q \u0026amp; A period after a recent talk, someone asked what made startups fail. After standing there gaping for a few seconds I realized this was kind of a trick question. It\u0026rsquo;s equivalent to asking how to make a startup succeed — if you avoid every cause of failure, you succeed — and that\u0026rsquo;s too big a question to answer on the fly.\n",
    "description": "",
    "tags": ["startups","mistakes","failure","entrepreneurship","business advice"],
    "categories": [],
    "content": "→ Chinese Version\nThe 18 Mistakes That Kill Startups October 2006\nIn the Q \u0026amp; A period after a recent talk, someone asked what made startups fail. After standing there gaping for a few seconds I realized this was kind of a trick question. It\u0026rsquo;s equivalent to asking how to make a startup succeed — if you avoid every cause of failure, you succeed — and that\u0026rsquo;s too big a question to answer on the fly.\nAfterwards I realized it could be helpful to look at the problem from this direction. If you have a list of all the things you shouldn\u0026rsquo;t do, you can turn that into a recipe for succeeding just by negating. And this form of list may be more useful in practice. It\u0026rsquo;s easier to catch yourself doing something you shouldn\u0026rsquo;t than always to remember to do something you should. [1]\nIn a sense there\u0026rsquo;s just one mistake that kills startups: not making something users want. If you make something users want, you\u0026rsquo;ll probably be fine, whatever else you do or don\u0026rsquo;t do. And if you don\u0026rsquo;t make something users want, then you\u0026rsquo;re dead, whatever else you do or don\u0026rsquo;t do. So really this is a list of 18 things that cause startups not to make something users want. Nearly all failure funnels through that.\n1. Single Founder Have you ever noticed how few successful startups were founded by just one person? Even companies you think of as having one founder, like Oracle, usually turn out to have more. It seems unlikely this is a coincidence.\nWhat\u0026rsquo;s wrong with having one founder? To start with, it\u0026rsquo;s a vote of no confidence. It probably means the founder couldn\u0026rsquo;t talk any of his friends into starting the company with him. That\u0026rsquo;s pretty alarming, because his friends are the ones who know him best.\nBut even if the founder\u0026rsquo;s friends were all wrong and the company is a good bet, he\u0026rsquo;s still at a disadvantage. Starting a startup is too hard for one person. Even if you could do all the work yourself, you need …"
  },{
    "title": "The Age of the Essay",
    "url": "/paul_graham/essays_en/essay/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nThe Age of the Essay September 2004\nRemember the essays you had to write in high school? Topic sentence, introductory paragraph, supporting paragraphs, conclusion. The conclusion being, say, that Ahab in Moby Dick was a Christ-like figure.\nOy. So I\u0026rsquo;m going to try to give the other side of the story: what an essay really is, and how you write one. Or at least, how I write one.\n",
    "description": "",
    "tags": ["essay","writing","education","montaigne","literature","history","creativity","observation"],
    "categories": [],
    "content": "→ Chinese Version\nThe Age of the Essay September 2004\nRemember the essays you had to write in high school? Topic sentence, introductory paragraph, supporting paragraphs, conclusion. The conclusion being, say, that Ahab in Moby Dick was a Christ-like figure.\nOy. So I\u0026rsquo;m going to try to give the other side of the story: what an essay really is, and how you write one. Or at least, how I write one.\nMods The most obvious difference between real essays and the things one has to write in school is that real essays are not exclusively about English literature. Certainly schools should teach students how to write. But due to a series of historical accidents the teaching of writing has gotten mixed together with the study of literature. And so all over the country students are writing not about how a baseball team with a small budget might compete with the Yankees, or the role of color in fashion, or what constitutes a good dessert, but about symbolism in Dickens.\nWith the result that writing is made to seem boring and pointless. Who cares about symbolism in Dickens? Dickens himself would be more interested in an essay about color or baseball.\nHow did things get this way? To answer that we have to go back almost a thousand years. Around 1100, Europe at last began to catch its breath after centuries of chaos, and once they had the luxury of curiosity they rediscovered what we call \u0026ldquo;the classics.\u0026rdquo; The effect was rather as if we were visited by beings from another solar system. These earlier civilizations were so much more sophisticated that for the next several centuries the main work of European scholars, in almost every field, was to assimilate what they knew.\nDuring this period the study of ancient texts acquired great prestige. It seemed the essence of what scholars did. As European scholarship gained momentum it became less and less important; by 1350 someone who wanted to learn about science could find better teachers than Aristotle in his own era. [1] …"
  },{
    "title": "The Airbnbs",
    "url": "/paul_graham/essays_en/airbnbs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Airbnbs December 2020\nTo celebrate Airbnb\u0026rsquo;s IPO and to help future founders, I thought it might be useful to explain what was special about Airbnb.\nWhat was special about the Airbnbs was how earnest they were. They did nothing half-way, and we could sense this even in the interview. Sometimes after we interviewed a startup we\u0026rsquo;d be uncertain what to do, and have to talk it over. Other times we\u0026rsquo;d just look at one another and smile. The Airbnbs\u0026rsquo; interview was that kind. We didn\u0026rsquo;t even like the idea that much. Nor did users, at that stage; they had no growth. But the founders seemed so full of energy that it was impossible not to like them.\n",
    "description": "",
    "tags": ["airbnb","founders","startup","yc","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版本\nThe Airbnbs December 2020\nTo celebrate Airbnb\u0026rsquo;s IPO and to help future founders, I thought it might be useful to explain what was special about Airbnb.\nWhat was special about the Airbnbs was how earnest they were. They did nothing half-way, and we could sense this even in the interview. Sometimes after we interviewed a startup we\u0026rsquo;d be uncertain what to do, and have to talk it over. Other times we\u0026rsquo;d just look at one another and smile. The Airbnbs\u0026rsquo; interview was that kind. We didn\u0026rsquo;t even like the idea that much. Nor did users, at that stage; they had no growth. But the founders seemed so full of energy that it was impossible not to like them.\nThat first impression was not misleading. During the batch our nickname for Brian Chesky was The Tasmanian Devil, because like the cartoon character he seemed a tornado of energy. All three of them were like that. No one ever worked harder during YC than the Airbnbs did. When you talked to the Airbnbs, they took notes. If you suggested an idea to them in office hours, the next time you talked to them they\u0026rsquo;d not only have implemented it, but also implemented two new ideas they had in the process. \u0026ldquo;They probably have the best attitude of any startup we\u0026rsquo;ve funded\u0026rdquo; I wrote to Mike Arrington during the batch.\nThey\u0026rsquo;re still like that. Jessica and I had dinner with Brian in the summer of 2018, just the three of us. By this point the company is ten years old. He took a page of notes about ideas for new things Airbnb could do.\nWhat we didn\u0026rsquo;t realize when we first met Brian and Joe and Nate was that Airbnb was on its last legs. After working on the company for a year and getting no growth, they\u0026rsquo;d agreed to give it one last shot. They\u0026rsquo;d try this Y Combinator thing, and if the company still didn\u0026rsquo;t take off, they\u0026rsquo;d give up.\nAny normal person would have given up already. They\u0026rsquo;d been funding the company with credit cards. They had a binder …"
  },{
    "title": "The Anatomy of Determination",
    "url": "/paul_graham/essays_en/determination/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nThe Anatomy of Determination September 2009\nLike all investors, we spend a lot of time trying to learn how to predict which startups will succeed. We probably spend more time thinking about it than most, because we invest the earliest. Prediction is usually all we have to rely on.\nWe learned quickly that the most important predictor of success is determination. At first we thought it might be intelligence. Everyone likes to believe that\u0026rsquo;s what makes startups succeed. It makes a better story that a company won because its founders were so smart. The PR people and reporters who spread such stories probably believe them themselves. But while it certainly helps to be smart, it\u0026rsquo;s not the deciding factor. There are plenty of people as smart as Bill Gates who achieve nothing.\n",
    "description": "",
    "tags": ["determination","willpower","discipline","ambition","startups","success","psychology","achievement"],
    "categories": [],
    "content": "→ Chinese Version\nThe Anatomy of Determination September 2009\nLike all investors, we spend a lot of time trying to learn how to predict which startups will succeed. We probably spend more time thinking about it than most, because we invest the earliest. Prediction is usually all we have to rely on.\nWe learned quickly that the most important predictor of success is determination. At first we thought it might be intelligence. Everyone likes to believe that\u0026rsquo;s what makes startups succeed. It makes a better story that a company won because its founders were so smart. The PR people and reporters who spread such stories probably believe them themselves. But while it certainly helps to be smart, it\u0026rsquo;s not the deciding factor. There are plenty of people as smart as Bill Gates who achieve nothing.\nIn most domains, talent is overrated compared to determination—partly because it makes a better story, partly because it gives onlookers an excuse for being lazy, and partly because after a while determination starts to look like talent.\nI can\u0026rsquo;t think of any field in which determination is overrated, but the relative importance of determination and talent probably do vary somewhat. Talent probably matters more in types of work that are purer, in the sense that one is solving mostly a single type of problem instead of many different types. I suspect determination would not take you as far in math as it would in, say, organized crime.\nI don\u0026rsquo;t mean to suggest by this comparison that types of work that depend more on talent are always more admirable. Most people would agree it\u0026rsquo;s more admirable to be good at math than memorizing long strings of digits, even though the latter depends more on natural ability.\nPerhaps one reason people believe startup founders win by being smarter is that intelligence does matter more in technology startups than it used to in earlier types of companies. You probably do need to be a bit smarter to dominate Internet search than …"
  },{
    "title": "The Best Essay",
    "url": "/paul_graham/essays_en/best/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Best Essay March 2024\nDespite its title this isn\u0026rsquo;t meant to be the best essay. My goal here is to figure out what the best essay would be like.\nIt would be well-written, but you can write well about any topic. What made it special would be what it was about.\nObviously some topics would be better than others. It probably wouldn\u0026rsquo;t be about this year\u0026rsquo;s lipstick colors. But it wouldn\u0026rsquo;t be vaporous talk about elevated themes either. A good essay has to be surprising. It has to tell people something they don\u0026rsquo;t already know.\n",
    "description": "",
    "tags": ["essay","writing","creativity","discovery","ideas","philosophy"],
    "categories": [],
    "content": "→ 中文版本\nThe Best Essay March 2024\nDespite its title this isn\u0026rsquo;t meant to be the best essay. My goal here is to figure out what the best essay would be like.\nIt would be well-written, but you can write well about any topic. What made it special would be what it was about.\nObviously some topics would be better than others. It probably wouldn\u0026rsquo;t be about this year\u0026rsquo;s lipstick colors. But it wouldn\u0026rsquo;t be vaporous talk about elevated themes either. A good essay has to be surprising. It has to tell people something they don\u0026rsquo;t already know.\nThe best essay would be on the most important topic you could tell people something surprising about.\nThat may sound obvious, but it has some unexpected consequences. One is that science enters the picture like an elephant stepping into a rowboat. For example, Darwin first described the idea of natural selection in an essay written in 1844. Talk about an important topic you could tell people something surprising about. If that\u0026rsquo;s the test of a great essay, this was surely the best one written in 1844. And indeed, the best possible essay at any given time would usually be one describing the most important scientific or technological discovery it was possible to make.\nAnother unexpected consequence: I imagined when I started writing this that the best essay would be fairly timeless — that the best essay you could write in 1844 would be much the same as the best one you could write now. But in fact the opposite seems to be true. It might be true that the best painting would be timeless in this sense. But it wouldn\u0026rsquo;t be impressive to write an essay introducing natural selection now. The best essay now would be one describing a great discovery we didn\u0026rsquo;t yet know about.\nIf the question of how to write the best possible essay reduces to the question of how to make great discoveries, then I started with the wrong question. Perhaps what this exercise shows is that we shouldn\u0026rsquo;t waste our time …"
  },{
    "title": "The Bus Ticket Theory of Genius",
    "url": "/paul_graham/essays_en/genius/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Bus Ticket Theory of Genius November 2019\nEveryone knows that to do great work you need both natural ability and determination. But there\u0026rsquo;s a third ingredient that\u0026rsquo;s not as well understood: an obsessive interest in a particular topic.\nTo explain this point I need to burn my reputation with some group of people, and I\u0026rsquo;m going to choose bus ticket collectors. There are people who collect old bus tickets. Like many collectors, they have an obsessive interest in the minutiae of what they collect. They can keep track of distinctions between different types of bus tickets that would be hard for the rest of us to remember. Because we don\u0026rsquo;t care enough. What\u0026rsquo;s the point of spending so much time thinking about old bus tickets?\n",
    "description": "",
    "tags": ["genius","creativity","obsession","interest","innovation","learning"],
    "categories": [],
    "content": "→ 中文版本\nThe Bus Ticket Theory of Genius November 2019\nEveryone knows that to do great work you need both natural ability and determination. But there\u0026rsquo;s a third ingredient that\u0026rsquo;s not as well understood: an obsessive interest in a particular topic.\nTo explain this point I need to burn my reputation with some group of people, and I\u0026rsquo;m going to choose bus ticket collectors. There are people who collect old bus tickets. Like many collectors, they have an obsessive interest in the minutiae of what they collect. They can keep track of distinctions between different types of bus tickets that would be hard for the rest of us to remember. Because we don\u0026rsquo;t care enough. What\u0026rsquo;s the point of spending so much time thinking about old bus tickets?\nWhich leads us to the second feature of this kind of obsession: there is no point. A bus ticket collector\u0026rsquo;s love is disinterested. They\u0026rsquo;re not doing it to impress us or to make themselves rich, but for its own sake.\nWhen you look at the lives of people who\u0026rsquo;ve done great work, you see a consistent pattern. They often begin with a bus ticket collector\u0026rsquo;s obsessive interest in something that would have seemed pointless to most of their contemporaries. One of the most striking features of Darwin\u0026rsquo;s book about his voyage on the Beagle is the sheer depth of his interest in natural history. His curiosity seems infinite. Ditto for Ramanujan, sitting by the hour working out on his slate what happens to series.\nIt\u0026rsquo;s a mistake to think they were \u0026ldquo;laying the groundwork\u0026rdquo; for the discoveries they made later. There\u0026rsquo;s too much intention in that metaphor. Like bus ticket collectors, they were doing it because they liked it.\nBut there is a difference between Ramanujan and a bus ticket collector. Series matter, and bus tickets don\u0026rsquo;t.\nIf I had to put the recipe for genius into one sentence, that might be it: to have a disinterested obsession with something that matters. …"
  },{
    "title": "The Equity Equation",
    "url": "/paul_graham/essays_en/equity/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nThe Equity Equation July 2007\nAn investor wants to give you money for a certain percentage of your startup. Should you take it? You\u0026rsquo;re about to hire your first employee. How much stock should you give him?\nThese are some of the hardest questions founders face. And yet both have the same answer:\n1/(1 - n)\nWhenever you\u0026rsquo;re trading stock in your company for anything, whether it\u0026rsquo;s money or an employee or a deal with another company, the test for whether to do it is the same. You should give up n% of your company if what you trade it for improves your average outcome enough that the (100 - n)% you have left is worth more than the whole company was before.\n",
    "description": "",
    "tags": ["equity","startups","fundraising","hiring","valuation","investors","employees","stock"],
    "categories": [],
    "content": "→ Chinese Version\nThe Equity Equation July 2007\nAn investor wants to give you money for a certain percentage of your startup. Should you take it? You\u0026rsquo;re about to hire your first employee. How much stock should you give him?\nThese are some of the hardest questions founders face. And yet both have the same answer:\n1/(1 - n)\nWhenever you\u0026rsquo;re trading stock in your company for anything, whether it\u0026rsquo;s money or an employee or a deal with another company, the test for whether to do it is the same. You should give up n% of your company if what you trade it for improves your average outcome enough that the (100 - n)% you have left is worth more than the whole company was before.\nFor example, if an investor wants to buy half your company, how much does that investment have to improve your average outcome for you to break even? Obviously it has to double: if you trade half your company for something that more than doubles the company\u0026rsquo;s average outcome, you\u0026rsquo;re net ahead. You have half as big a share of something worth more than twice as much.\nIn the general case, if n is the fraction of the company you\u0026rsquo;re giving up, the deal is a good one if it makes the company worth more than 1/(1 - n).\nFor example, suppose Y Combinator offers to fund you in return for 7% of your company. In this case, n is .07 and 1/(1 - n) is 1.075. So you should take the deal if you believe we can improve your average outcome by more than 7.5%. If we improve your outcome by 10%, you\u0026rsquo;re net ahead, because the remaining .93 you hold is worth .93 x 1.1 = 1.023. [1]\nOne of the things the equity equation shows us is that, financially at least, taking money from a top VC firm can be a really good deal. Greg Mcadoo from Sequoia recently said at a YC dinner that when Sequoia invests alone they like to take about 30% of a company. 1/.7 = 1.43, meaning that deal is worth taking if they can improve your outcome by more than 43%. For the average startup, that would be an …"
  },{
    "title": "The Fatal Pinch",
    "url": "/paul_graham/essays_en/pinch/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Fatal Pinch December 2014\nMany startups go through a point a few months before they die where although they have a significant amount of money in the bank, they\u0026rsquo;re also losing a lot each month, and revenue growth is either nonexistent or mediocre. The company has, say, 6 months of runway. Or to put it more brutally, 6 months before they\u0026rsquo;re out of business. They expect to avoid that by raising more from investors. [1]\n",
    "description": "",
    "tags": ["fundraising","startups","entrepreneurship","business","survival"],
    "categories": [],
    "content": "→ 中文版本\nThe Fatal Pinch December 2014\nMany startups go through a point a few months before they die where although they have a significant amount of money in the bank, they\u0026rsquo;re also losing a lot each month, and revenue growth is either nonexistent or mediocre. The company has, say, 6 months of runway. Or to put it more brutally, 6 months before they\u0026rsquo;re out of business. They expect to avoid that by raising more from investors. [1]\nThat last sentence is the fatal one.\nThere may be nothing founders are so prone to delude themselves about as how interested investors will be in giving them additional funding. It\u0026rsquo;s hard to convince investors the first time too, but founders expect that. What bites them the second time is a confluence of three forces: The company is spending more now than it did the first time it raised money. Investors have much higher standards for companies that have already raised money. The company is now starting to read as a failure. The first time it raised money, it was neither a success nor a failure; it was too early to ask. Now it\u0026rsquo;s possible to ask that question, and the default answer is failure, because at this point that is the default outcome. I\u0026rsquo;m going to call the situation I described in the first paragraph \u0026ldquo;the fatal pinch.\u0026rdquo; I try to resist coining phrases, but making up a name for this situation may snap founders into realizing when they\u0026rsquo;re in it.\nOne of the things that makes the fatal pinch so dangerous is that it\u0026rsquo;s self-reinforcing. Founders overestimate their chances of raising more money, and so are slack about reaching profitability, which further decreases their chances of raising money.\nNow that you know about the fatal pinch, how do you avoid it? Y Combinator tells founders who raise money to act as if it\u0026rsquo;s the last they\u0026rsquo;ll ever get. Because the self-reinforcing nature of this situation works the other way too: the less you need further investment, the easier it is …"
  },{
    "title": "The Founder Visa",
    "url": "/paul_graham/essays_en/foundervisa/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Founder Visa April 2009\nI usually avoid politics, but since we now seem to have an administration that\u0026rsquo;s open to suggestions, I\u0026rsquo;m going to risk making one. The single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders.\nThe biggest constraint on the number of new startups that get created in the US is not tax policy or employment law or even Sarbanes-Oxley. It\u0026rsquo;s that we won\u0026rsquo;t let the people who want to start them into the country.\n",
    "description": "",
    "tags": ["founders","visa","immigration","startups","policy","economy"],
    "categories": [],
    "content": "→ 中文版本\nThe Founder Visa April 2009\nI usually avoid politics, but since we now seem to have an administration that\u0026rsquo;s open to suggestions, I\u0026rsquo;m going to risk making one. The single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders.\nThe biggest constraint on the number of new startups that get created in the US is not tax policy or employment law or even Sarbanes-Oxley. It\u0026rsquo;s that we won\u0026rsquo;t let the people who want to start them into the country.\nLetting just 10,000 startup founders into the country each year could have a visible effect on the economy. If we assume 4 people per startup, which is probably an overestimate, that\u0026rsquo;s 2500 new companies. Each year. They wouldn\u0026rsquo;t all grow as big as Google, but out of 2500 some would come close.\nBy definition these 10,000 founders wouldn\u0026rsquo;t be taking jobs from Americans: it could be part of the terms of the visa that they couldn\u0026rsquo;t work for existing companies, only new ones they\u0026rsquo;d founded. In fact they\u0026rsquo;d cause there to be more jobs for Americans, because the companies they started would hire more employees as they grew.\nThe tricky part might seem to be how one defined a startup. But that could be solved quite easily: let the market decide. Startup investors work hard to find the best startups. The government could not do better than to piggyback on their expertise, and use investment by recognized startup investors as the test of whether a company was a real startup.\nHow would the government decide who\u0026rsquo;s a startup investor? The same way they decide what counts as a university for student visas. We\u0026rsquo;ll establish our own accreditation procedure. We know who one another are.\n10,000 people is a drop in the bucket by immigration standards, but would represent a huge increase in the pool of startup founders. I think this would have such a …"
  },{
    "title": "The Future of Startup Funding",
    "url": "/paul_graham/essays_en/future/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Future of Startup Funding Want to start a startup? Get funded by Y Combinator.\nAugust 2010\nTwo years ago I wrote about what I called \u0026ldquo;a huge, unexploited opportunity in startup funding:\u0026rdquo; the growing disconnect between VCs, whose current business model requires them to invest large amounts, and a large class of startups that need less than they used to. Increasingly, startups want a couple hundred thousand dollars, not a couple million. [1]\n",
    "description": "",
    "tags": ["future","startup funding","VCs","angels","super-angels","founders"],
    "categories": [],
    "content": "→ 中文版本\nThe Future of Startup Funding Want to start a startup? Get funded by Y Combinator.\nAugust 2010\nTwo years ago I wrote about what I called \u0026ldquo;a huge, unexploited opportunity in startup funding:\u0026rdquo; the growing disconnect between VCs, whose current business model requires them to invest large amounts, and a large class of startups that need less than they used to. Increasingly, startups want a couple hundred thousand dollars, not a couple million. [1]\nThe opportunity is a lot less unexploited now. Investors have poured into this territory from both directions. VCs are much more likely to make angel-sized investments than they were a year ago. And meanwhile the past year has seen a dramatic increase in a new type of investor: the super-angel, who operates like an angel, but using other people\u0026rsquo;s money, like a VC.\nThough a lot of investors are entering this territory, there is still room for more. The distribution of investors should mirror the distribution of startups, which has the usual power law dropoff. So there should be a lot more people investing tens or hundreds of thousands than millions. [2]\nIn fact, it may be good for angels that there are more people doing angel-sized deals, because if angel rounds become more legitimate, then startups may start to opt for angel rounds even when they could, if they wanted, raise series A rounds from VCs. One reason startups prefer series A rounds is that they\u0026rsquo;re more prestigious. But if angel investors become more active and better known, they\u0026rsquo;ll increasingly be able to compete with VCs in brand.\nOf course, prestige isn\u0026rsquo;t the main reason to prefer a series A round. A startup will probably get more attention from investors in a series A round than an angel round. So if a startup is choosing between an angel round and an A round from a good VC fund, I usually advise them to take the A round. [3]\nBut while series A rounds aren\u0026rsquo;t going away, I think VCs should be more worried about …"
  },{
    "title": "The Future of Web Startups",
    "url": "/paul_graham/essays_en/webstartups/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nThe Future of Web Startups October 2007\n(This essay is derived from a keynote at FOWA in October 2007.)\nThere\u0026rsquo;s something interesting happening right now. Startups are undergoing the same transformation that technology does when it becomes cheaper.\nIt\u0026rsquo;s a pattern we see over and over in technology. Initially there\u0026rsquo;s some device that\u0026rsquo;s very expensive and made in small quantities. Then someone discovers how to make them cheaply; many more get built; and as a result they can be used in new ways.\n",
    "description": "",
    "tags": ["web startups","future","technology","standardization","acquisition","risk"],
    "categories": [],
    "content": "→ 中文版\nThe Future of Web Startups October 2007\n(This essay is derived from a keynote at FOWA in October 2007.)\nThere\u0026rsquo;s something interesting happening right now. Startups are undergoing the same transformation that technology does when it becomes cheaper.\nIt\u0026rsquo;s a pattern we see over and over in technology. Initially there\u0026rsquo;s some device that\u0026rsquo;s very expensive and made in small quantities. Then someone discovers how to make them cheaply; many more get built; and as a result they can be used in new ways.\nComputers are a familiar example. When I was a kid, computers were big, expensive machines built one at a time. Now they\u0026rsquo;re a commodity. Now we can stick computers in everything.\nThis pattern is very old. Most of the turning points in economic history are instances of it. It happened to steel in the 1850s, and to power in the 1780s. It happened to cloth manufacture in the thirteenth century, generating the wealth that later brought about the Renaissance. Agriculture itself was an instance of this pattern.\nNow as well as being produced by startups, this pattern is happening to startups. It\u0026rsquo;s so cheap to start web startups that orders of magnitudes more will be started. If the pattern holds true, that should cause dramatic changes.\n1. Lots of Startups So my first prediction about the future of web startups is pretty straightforward: there will be a lot of them. When starting a startup was expensive, you had to get the permission of investors to do it. Now the only threshold is courage.\nEven that threshold is getting lower, as people watch others take the plunge and survive. In the last batch of startups we funded, we had several founders who said they\u0026rsquo;d thought of applying before, but weren\u0026rsquo;t sure and got jobs instead. It was only after hearing reports of friends who\u0026rsquo;d done it that they decided to try it themselves.\nStarting a startup is hard, but having a 9 to 5 job is hard too, and in some ways a worse kind of hard. In …"
  },{
    "title": "The Hacker's Guide to Investors",
    "url": "/paul_graham/essays_en/guidetoinvestors/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Hacker\u0026rsquo;s Guide to Investors April 2007\n(This essay is derived from a keynote talk at the 2007 ASES Summit at Stanford.)\nThe world of investors is a foreign one to most hackers—partly because investors are so unlike hackers, and partly because they tend to operate in secret. I\u0026rsquo;ve been dealing with this world for many years, both as a founder and an investor, and I still don\u0026rsquo;t fully understand it.\n",
    "description": "",
    "tags": ["investors","venture capital","angels","funding","startups"],
    "categories": [],
    "content": "→ 中文版本\nThe Hacker\u0026rsquo;s Guide to Investors April 2007\n(This essay is derived from a keynote talk at the 2007 ASES Summit at Stanford.)\nThe world of investors is a foreign one to most hackers—partly because investors are so unlike hackers, and partly because they tend to operate in secret. I\u0026rsquo;ve been dealing with this world for many years, both as a founder and an investor, and I still don\u0026rsquo;t fully understand it.\nIn this essay I\u0026rsquo;m going to list some of the more surprising things I\u0026rsquo;ve learned about investors. Some I only learned in the past year.\nTeaching hackers how to deal with investors is probably the second most important thing we do at Y Combinator. The most important thing for a startup is to make something good. But everyone knows that\u0026rsquo;s important. The dangerous thing about investors is that hackers don\u0026rsquo;t know how little they know about this strange world.\n1. The investors are what make a startup hub. About a year ago I tried to figure out what you\u0026rsquo;d need to reproduce Silicon Valley. I decided the critical ingredients were rich people and nerds—investors and founders. People are all you need to make technology, and all the other people will move.\nIf I had to narrow that down, I\u0026rsquo;d say investors are the limiting factor. Not because they contribute more to the startup, but simply because they\u0026rsquo;re least willing to move. They\u0026rsquo;re rich. They\u0026rsquo;re not going to move to Albuquerque just because there are some smart hackers there they could invest in. Whereas hackers will move to the Bay Area to find investors.\n2. Angel investors are the most critical. There are several types of investors. The two main categories are angels and VCs: VCs invest other people\u0026rsquo;s money, and angels invest their own.\nThough they\u0026rsquo;re less well known, the angel investors are probably the more critical ingredient in creating a silicon valley. Most companies that VCs invest in would never have made it that far if angels …"
  },{
    "title": "The Hardest Lessons for Startups to Learn",
    "url": "/paul_graham/essays_en/startuplessons/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nThe Hardest Lessons for Startups to Learn April 2006\n(This essay is derived from a talk at the 2006 Startup School.)\nThe startups we\u0026rsquo;ve funded so far are pretty quick, but they seem quicker to learn some lessons than others. I think it\u0026rsquo;s because some things about startups are kind of counterintuitive.\nWe\u0026rsquo;ve now invested in enough companies that I\u0026rsquo;ve learned a trick for determining which points are the counterintuitive ones: they\u0026rsquo;re the ones I have to keep repeating.\n",
    "description": "",
    "tags": ["startups","lessons","entrepreneurship","business","advice"],
    "categories": [],
    "content": "→ Chinese Version\nThe Hardest Lessons for Startups to Learn April 2006\n(This essay is derived from a talk at the 2006 Startup School.)\nThe startups we\u0026rsquo;ve funded so far are pretty quick, but they seem quicker to learn some lessons than others. I think it\u0026rsquo;s because some things about startups are kind of counterintuitive.\nWe\u0026rsquo;ve now invested in enough companies that I\u0026rsquo;ve learned a trick for determining which points are the counterintuitive ones: they\u0026rsquo;re the ones I have to keep repeating.\nSo I\u0026rsquo;m going to number these points, and maybe with future startups I\u0026rsquo;ll be able to pull off a form of Huffman coding. I\u0026rsquo;ll make them all read this, and then instead of nagging them in detail, I\u0026rsquo;ll just be able to say: number four!\n1. Release Early. The thing I probably repeat most is this recipe for a startup: get a version 1 out fast, then improve it based on users\u0026rsquo; reactions.\nBy \u0026ldquo;release early\u0026rdquo; I don\u0026rsquo;t mean you should release something full of bugs, but that you should release something minimal. Users hate bugs, but they don\u0026rsquo;t seem to mind a minimal version 1, if there\u0026rsquo;s more coming soon.\nThere are several reasons it pays to get version 1 done fast. One is that this is simply the right way to write software, whether for a startup or not. I\u0026rsquo;ve been repeating that since 1993, and I haven\u0026rsquo;t seen much since to contradict it. I\u0026rsquo;ve seen a lot of startups die because they were too slow to release stuff, and none because they were too quick. [1]\nOne of the things that will surprise you if you build something popular is that you won\u0026rsquo;t know your users. Reddit now has almost half a million unique visitors a month. Who are all those people? They have no idea. No web startup does. And since you don\u0026rsquo;t know your users, it\u0026rsquo;s dangerous to guess what they\u0026rsquo;ll like. Better to release something and let them tell you.\nWufoo took this to heart and released their form-builder …"
  },{
    "title": "The Hardware Renaissance",
    "url": "/paul_graham/essays_en/hw/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Hardware Renaissance Want to start a startup? Get funded by Y Combinator.\nOctober 2012\nOne advantage of Y Combinator\u0026rsquo;s early, broad focus is that we see trends before most other people. And one of the most conspicuous trends in the last batch was the large number of hardware startups. Out of 84 companies, 7 were making hardware. On the whole they\u0026rsquo;ve done better than the companies that weren\u0026rsquo;t.\n",
    "description": "",
    "tags": ["hardware","startups","Y Combinator","innovation","manufacturing","crowdfunding","technology trends"],
    "categories": [],
    "content": "→ 中文版本\nThe Hardware Renaissance Want to start a startup? Get funded by Y Combinator.\nOctober 2012\nOne advantage of Y Combinator\u0026rsquo;s early, broad focus is that we see trends before most other people. And one of the most conspicuous trends in the last batch was the large number of hardware startups. Out of 84 companies, 7 were making hardware. On the whole they\u0026rsquo;ve done better than the companies that weren\u0026rsquo;t.\nThey\u0026rsquo;ve faced resistance from investors of course. Investors have a deep-seated bias against hardware. But investors\u0026rsquo; opinions are a trailing indicator. The best founders are better at seeing the future than the best investors, because the best founders are making it.\nThere is no one single force driving this trend. Hardware does well on crowdfunding sites. The spread of tablets makes it possible to build new things controlled by and even incorporating them. Electric motors have improved. Wireless connectivity of various types can now be taken for granted. It\u0026rsquo;s getting more straightforward to get things manufactured. Arduinos, 3D printing, laser cutters, and more accessible CNC milling are making hardware easier to prototype. Retailers are less of a bottleneck as customers increasingly buy online.\nOne question I can answer is why hardware is suddenly cool. It always was cool. Physical things are great. They just haven\u0026rsquo;t been as great a way to start a rapidly growing business as software. But that rule may not be permanent. It\u0026rsquo;s not even that old; it only dates from about 1990. Maybe the advantage of software will turn out to have been temporary. Hackers love to build hardware, and customers love to buy it. So if the ease of shipping hardware even approached the ease of shipping software, we\u0026rsquo;d see a lot more hardware startups.\nIt wouldn\u0026rsquo;t be the first time something was a bad idea till it wasn\u0026rsquo;t. And it wouldn\u0026rsquo;t be the first time investors learned that lesson from founders.\nSo if you want to work …"
  },{
    "title": "The High-Res Society",
    "url": "/paul_graham/essays_en/highres/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe High-Res Society December 2008\nFor nearly all of history the success of a society was proportionate to its ability to assemble large and disciplined organizations. Those who bet on economies of scale generally won, which meant the largest organizations were the most successful ones.\nThings have already changed so much that this is hard for us to believe, but till just a few decades ago the largest organizations tended to be the most progressive. An ambitious kid graduating from college in 1960 wanted to work in the huge, gleaming offices of Ford, or General Electric, or NASA. Small meant small-time. Small in 1960 didn\u0026rsquo;t mean a cool little startup. It meant uncle Sid\u0026rsquo;s shoe store.\n",
    "description": "",
    "tags": ["startups","technology","society","future","innovation","economics"],
    "categories": [],
    "content": "→ 中文版本\nThe High-Res Society December 2008\nFor nearly all of history the success of a society was proportionate to its ability to assemble large and disciplined organizations. Those who bet on economies of scale generally won, which meant the largest organizations were the most successful ones.\nThings have already changed so much that this is hard for us to believe, but till just a few decades ago the largest organizations tended to be the most progressive. An ambitious kid graduating from college in 1960 wanted to work in the huge, gleaming offices of Ford, or General Electric, or NASA. Small meant small-time. Small in 1960 didn\u0026rsquo;t mean a cool little startup. It meant uncle Sid\u0026rsquo;s shoe store.\nWhen I grew up in the 1970s, the idea of the \u0026ldquo;corporate ladder\u0026rdquo; was still very much alive. The standard plan was to try to get into a good college, from which one would be drafted into some organization and then rise to positions of gradually increasing responsibility. The more ambitious merely hoped to climb the same ladder faster. [1]\nBut in the late twentieth century something changed. It turned out that economies of scale were not the only force at work. Particularly in technology, the increase in speed one could get from smaller groups started to trump the advantages of size.\nThe future turned out to be different from the one we were expecting in 1970. The domed cities and flying cars we expected have failed to materialize. But fortunately so have the jumpsuits with badges indicating our specialty and rank. Instead of being dominated by a few, giant tree-structured organizations, it\u0026rsquo;s now looking like the economy of the future will be a fluid network of smaller, independent units.\nIt\u0026rsquo;s not so much that large organizations stopped working. There\u0026rsquo;s no evidence that famously successful organizations like the Roman army or the British East India Company were any less afflicted by protocol and politics than organizations of the same size …"
  },{
    "title": "The Hundred-Year Language",
    "url": "/paul_graham/essays_en/hundred/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Hundred-Year Language April 2003\n(This essay is derived from a keynote talk at PyCon 2003.)\nIt\u0026rsquo;s hard to predict what life will be like in a hundred years. There are only a few things we can say with certainty. We know that everyone will drive flying cars, that zoning laws will be relaxed to allow buildings hundreds of stories tall, that it will be dark most of the time, and that women will all be trained in the martial arts. Here I want to zoom in on one detail of this picture. What kind of programming language will they use to write the software controlling those flying cars?\n",
    "description": "",
    "tags": ["programming languages","future","language design","evolution","Lisp","software development"],
    "categories": [],
    "content": "→ 中文版本\nThe Hundred-Year Language April 2003\n(This essay is derived from a keynote talk at PyCon 2003.)\nIt\u0026rsquo;s hard to predict what life will be like in a hundred years. There are only a few things we can say with certainty. We know that everyone will drive flying cars, that zoning laws will be relaxed to allow buildings hundreds of stories tall, that it will be dark most of the time, and that women will all be trained in the martial arts. Here I want to zoom in on one detail of this picture. What kind of programming language will they use to write the software controlling those flying cars?\nThis is worth thinking about not so much because we\u0026rsquo;ll actually get to use these languages as because, if we\u0026rsquo;re lucky, we\u0026rsquo;ll use languages on the path from this point to that.\nI think that, like species, languages will form evolutionary trees, with dead-ends branching off all over. We can see this happening already. Cobol, for all its sometime popularity, does not seem to have any intellectual descendants. It is an evolutionary dead-end\u0026ndash; a Neanderthal language.\nI predict a similar fate for Java. People sometimes send me mail saying, \u0026ldquo;How can you say that Java won\u0026rsquo;t turn out to be a successful language? It\u0026rsquo;s already a successful language.\u0026rdquo; And I admit that it is, if you measure success by shelf space taken up by books on it (particularly individual books on it), or by the number of undergrads who believe they have to learn it to get a job. When I say Java won\u0026rsquo;t turn out to be a successful language, I mean something more specific: that Java will turn out to be an evolutionary dead-end, like Cobol.\nThis is just a guess. I may be wrong. My point here is not to dis Java, but to raise the issue of evolutionary trees and get people asking, where on the tree is language X? The reason to ask this question isn\u0026rsquo;t just so that our ghosts can say, in a hundred years, I told you so. It\u0026rsquo;s because staying close to the main …"
  },{
    "title": "The Island Test",
    "url": "/paul_graham/essays_en/island/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Island Test July 2006\nI\u0026rsquo;ve discovered a handy test for figuring out what you\u0026rsquo;re addicted to. Imagine you were going to spend the weekend at a friend\u0026rsquo;s house on a little island off the coast of Maine. There are no shops on the island and you won\u0026rsquo;t be able to leave while you\u0026rsquo;re there. Also, you\u0026rsquo;ve never been to this house before, so you can\u0026rsquo;t assume it will have more than any house might.\n",
    "description": "",
    "tags": ["island_test","addiction","habits","minimalism","reading","writing","travel"],
    "categories": [],
    "content": "→ 中文版本\nThe Island Test July 2006\nI\u0026rsquo;ve discovered a handy test for figuring out what you\u0026rsquo;re addicted to. Imagine you were going to spend the weekend at a friend\u0026rsquo;s house on a little island off the coast of Maine. There are no shops on the island and you won\u0026rsquo;t be able to leave while you\u0026rsquo;re there. Also, you\u0026rsquo;ve never been to this house before, so you can\u0026rsquo;t assume it will have more than any house might.\nWhat, besides clothes and toiletries, do you make a point of packing? That\u0026rsquo;s what you\u0026rsquo;re addicted to. For example, if you find yourself packing a bottle of vodka (just in case), you may want to stop and think about that.\nFor me the list is four things: books, earplugs, a notebook, and a pen.\nThere are other things I might bring if I thought of it, like music, or tea, but I can live without them. I\u0026rsquo;m not so addicted to caffeine that I wouldn\u0026rsquo;t risk the house not having any tea, just for a weekend.\nQuiet is another matter. I realize it seems a bit eccentric to take earplugs on a trip to an island off the coast of Maine. If anywhere should be quiet, that should. But what if the person in the next room snored? What if there was a kid playing basketball? (Thump, thump, thump\u0026hellip; thump.) Why risk it? Earplugs are small.\nSometimes I can think with noise. If I already have momentum on some project, I can work in noisy places. I can edit an essay or debug code in an airport. But airports are not so bad: most of the noise is whitish. I couldn\u0026rsquo;t work with the sound of a sitcom coming through the wall, or a car in the street playing thump-thump music.\nAnd of course there\u0026rsquo;s another kind of thinking, when you\u0026rsquo;re starting something new, that requires complete quiet. You never know when this will strike. It\u0026rsquo;s just as well to carry plugs.\nThe notebook and pen are professional equipment, as it were. Though actually there is something druglike about them, in the sense that their main purpose is to …"
  },{
    "title": "The Lesson to Unlearn",
    "url": "/paul_graham/essays_en/lesson/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Lesson to Unlearn December 2019\nThe most damaging thing you learned in school wasn\u0026rsquo;t something you learned in any specific class. It was learning to get good grades.\nWhen I was in college, a particularly earnest philosophy grad student once told me that he never cared what grade he got in a class, only what he learned in it. This stuck in my mind because it was the only time I ever heard anyone say such a thing.\n",
    "description": "",
    "tags": ["education","learning","grades","school","teaching","students","testing","startup","philosophy"],
    "categories": [],
    "content": "→ 中文版本\nThe Lesson to Unlearn December 2019\nThe most damaging thing you learned in school wasn\u0026rsquo;t something you learned in any specific class. It was learning to get good grades.\nWhen I was in college, a particularly earnest philosophy grad student once told me that he never cared what grade he got in a class, only what he learned in it. This stuck in my mind because it was the only time I ever heard anyone say such a thing.\nFor me, as for most students, the measurement of what I was learning completely dominated actual learning in college. I was fairly earnest; I was genuinely interested in most of the classes I took, and I worked hard. And yet I worked by far the hardest when I was studying for a test.\nIn theory, tests are merely what their name implies: tests of what you\u0026rsquo;ve learned in the class. In theory you shouldn\u0026rsquo;t have to prepare for a test in a class any more than you have to prepare for a blood test. In theory you learn from taking the class, from going to the lectures and doing the reading and/or assignments, and the test that comes afterward merely measures how well you learned.\nIn practice, as almost everyone reading this will know, things are so different that hearing this explanation of how classes and tests are meant to work is like hearing the etymology of a word whose meaning has changed completely. In practice, the phrase \u0026ldquo;studying for a test\u0026rdquo; was almost redundant, because that was when one really studied. The difference between diligent and slack students was that the former studied hard for tests and the latter didn\u0026rsquo;t. No one was pulling all-nighters two weeks into the semester.\nEven though I was a diligent student, almost all the work I did in school was aimed at getting a good grade on something.\nTo many people, it would seem strange that the preceding sentence has a \u0026ldquo;though\u0026rdquo; in it. Aren\u0026rsquo;t I merely stating a tautology? Isn\u0026rsquo;t that what a diligent student is, a straight-A student? …"
  },{
    "title": "The List of N Things",
    "url": "/paul_graham/essays_en/nthings/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe List of N Things September 2009\nI bet you the current issue of Cosmopolitan has an article whose title begins with a number. \u0026ldquo;7 Things He Won\u0026rsquo;t Tell You about Sex,\u0026rdquo; or something like that. Some popular magazines feature articles of this type on the cover of every issue. That can\u0026rsquo;t be happening by accident. Editors must know they attract readers.\nWhy do readers like the list of n things so much? Mainly because it\u0026rsquo;s easier to read than a regular article. [1] Structurally, the list of n things is a degenerate case of essay. An essay can go anywhere the writer wants. In a list of n things the writer agrees to constrain himself to a collection of points of roughly equal importance, and he tells the reader explicitly what they are.\n",
    "description": "",
    "tags": ["writing","essays","structure","communication","media","content creation"],
    "categories": [],
    "content": "→ 中文版本\nThe List of N Things September 2009\nI bet you the current issue of Cosmopolitan has an article whose title begins with a number. \u0026ldquo;7 Things He Won\u0026rsquo;t Tell You about Sex,\u0026rdquo; or something like that. Some popular magazines feature articles of this type on the cover of every issue. That can\u0026rsquo;t be happening by accident. Editors must know they attract readers.\nWhy do readers like the list of n things so much? Mainly because it\u0026rsquo;s easier to read than a regular article. [1] Structurally, the list of n things is a degenerate case of essay. An essay can go anywhere the writer wants. In a list of n things the writer agrees to constrain himself to a collection of points of roughly equal importance, and he tells the reader explicitly what they are.\nSome of the work of reading an article is understanding its structure—figuring out what in high school we\u0026rsquo;d have called its \u0026ldquo;outline.\u0026rdquo; Not explicitly, of course, but someone who really understands an article probably has something in his brain afterward that corresponds to such an outline. In a list of n things, this work is done for you. Its structure is an exoskeleton.\nAs well as being explicit, the structure is guaranteed to be of the simplest possible type: a few main points with few to no subordinate ones, and no particular connection between them.\nBecause the main points are unconnected, the list of n things is random access. There\u0026rsquo;s no thread of reasoning you have to follow. You could read the list in any order. And because the points are independent of one another, they work like watertight compartments in an unsinkable ship. If you get bored with, or can\u0026rsquo;t understand, or don\u0026rsquo;t agree with one point, you don\u0026rsquo;t have to give up on the article. You can just abandon that one and skip to the next. A list of n things is parallel and therefore fault tolerant.\nThere are times when this format is what a writer wants. One, obviously, is when what you have to say …"
  },{
    "title": "The Need to Read",
    "url": "/paul_graham/essays_en/read/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Need to Read November 2022\nIn the science fiction books I read as a kid, reading had often been replaced by some more efficient way of acquiring knowledge. Mysterious \u0026ldquo;tapes\u0026rdquo; would load it into one\u0026rsquo;s brain like a program being loaded into a computer.\nThat sort of thing is unlikely to happen anytime soon. Not just because it would be hard to build a replacement for reading, but because even if one existed, it would be insufficient. Reading about x doesn\u0026rsquo;t just teach you about x; it also teaches you how to write. [1]\n",
    "description": "",
    "tags": ["reading","writing","thinking","learning","knowledge","ideas"],
    "categories": [],
    "content": "→ 中文版本\nThe Need to Read November 2022\nIn the science fiction books I read as a kid, reading had often been replaced by some more efficient way of acquiring knowledge. Mysterious \u0026ldquo;tapes\u0026rdquo; would load it into one\u0026rsquo;s brain like a program being loaded into a computer.\nThat sort of thing is unlikely to happen anytime soon. Not just because it would be hard to build a replacement for reading, but because even if one existed, it would be insufficient. Reading about x doesn\u0026rsquo;t just teach you about x; it also teaches you how to write. [1]\nWould that matter? If we replaced reading, would anyone need to be good at writing?\nThe reason it would matter is that writing is not just a way to convey ideas, but also a way to have them.\nA good writer doesn\u0026rsquo;t just think, and then write down what he thought, as a sort of transcript. A good writer will almost always discover new things in the process of writing. And there is, as far as I know, no substitute for this kind of discovery. Talking about your ideas with other people is a good way to develop them. But even after doing this, you\u0026rsquo;ll find you still discover new things when you sit down to write. There is a kind of thinking that can only be done by writing.\nThere are of course kinds of thinking that can be done without writing. If you don\u0026rsquo;t need to go too deeply into a problem, you can solve it without writing. If you\u0026rsquo;re thinking about how two pieces of machinery should fit together, writing about it probably won\u0026rsquo;t help much. And when a problem can be described formally, you can sometimes solve it in your head. But if you need to solve a complicated, ill-defined problem, it will almost always help to write about it. Which in turn means that someone who\u0026rsquo;s not good at writing will almost always be at a disadvantage in solving such problems.\nYou can\u0026rsquo;t think well without writing well, and you can\u0026rsquo;t write well without reading well. And I mean that last \u0026ldquo;well\u0026rdquo; …"
  },{
    "title": "The New Funding Landscape",
    "url": "/paul_graham/essays_en/superangels/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe New Funding Landscape Want to start a startup? Get funded by Y Combinator.\nOctober 2010\nAfter barely changing at all for decades, the startup funding business is now in what could, at least by comparison, be called turmoil. At Y Combinator we\u0026rsquo;ve seen dramatic changes in the funding environment for startups. Fortunately one of them is much higher valuations.\nThe trends we\u0026rsquo;ve been seeing are probably not YC-specific. I wish I could say they were, but the main cause is probably just that we see trends first—partly because the startups we fund are very plugged into the Valley and are quick to take advantage of anything new, and partly because we fund so many that we have enough data points to see patterns clearly.\n",
    "description": "",
    "tags": ["superangels","venture capital","funding","startups","investing","valuation"],
    "categories": [],
    "content": "→ 中文版本\nThe New Funding Landscape Want to start a startup? Get funded by Y Combinator.\nOctober 2010\nAfter barely changing at all for decades, the startup funding business is now in what could, at least by comparison, be called turmoil. At Y Combinator we\u0026rsquo;ve seen dramatic changes in the funding environment for startups. Fortunately one of them is much higher valuations.\nThe trends we\u0026rsquo;ve been seeing are probably not YC-specific. I wish I could say they were, but the main cause is probably just that we see trends first—partly because the startups we fund are very plugged into the Valley and are quick to take advantage of anything new, and partly because we fund so many that we have enough data points to see patterns clearly.\nWhat we\u0026rsquo;re seeing now, everyone\u0026rsquo;s probably going to be seeing in the next couple years. So I\u0026rsquo;m going to explain what we\u0026rsquo;re seeing, and what that will mean for you if you try to raise money.\nSuper-Angels Let me start by describing what the world of startup funding used to look like. There used to be two sharply differentiated types of investors: angels and venture capitalists. Angels are individual rich people who invest small amounts of their own money, while VCs are employees of funds that invest large amounts of other people\u0026rsquo;s.\nFor decades there were just those two types of investors, but now a third type has appeared halfway between them: the so-called super-angels. [1] And VCs have been provoked by their arrival into making a lot of angel-style investments themselves. So the previously sharp line between angels and VCs has become hopelessly blurred.\nThere used to be a no man\u0026rsquo;s land between angels and VCs. Angels would invest $20k to $50k apiece, and VCs usually a million or more. So an angel round meant a collection of angel investments that combined to maybe $200k, and a VC round meant a series A round in which a single VC fund (or occasionally two) invested $1-5 million.\nThe no man\u0026rsquo;s land …"
  },{
    "title": "The Origins of Wokeness",
    "url": "/paul_graham/essays_en/woke/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nThe Origins of Wokeness January 2025\nThe word \u0026ldquo;prig\u0026rdquo; isn\u0026rsquo;t very common now, but if you look up the definition, it will sound familiar. Google\u0026rsquo;s isn\u0026rsquo;t bad: A self-righteously moralistic person who behaves as if superior to others. This sense of the word originated in the 18th century, and its age is an important clue: it shows that although wokeness is a comparatively recent phenomenon, it\u0026rsquo;s an instance of a much older one.\n",
    "description": "",
    "tags": ["woke","political_correctness","social_justice","culture","society"],
    "categories": [],
    "content": "→ 中文版\nThe Origins of Wokeness January 2025\nThe word \u0026ldquo;prig\u0026rdquo; isn\u0026rsquo;t very common now, but if you look up the definition, it will sound familiar. Google\u0026rsquo;s isn\u0026rsquo;t bad: A self-righteously moralistic person who behaves as if superior to others. This sense of the word originated in the 18th century, and its age is an important clue: it shows that although wokeness is a comparatively recent phenomenon, it\u0026rsquo;s an instance of a much older one.\nThere\u0026rsquo;s a certain kind of person who\u0026rsquo;s attracted to a shallow, exacting kind of moral purity, and who demonstrates his purity by attacking anyone who breaks the rules. Every society has these people. All that changes is the rules they enforce. In Victorian England it was Christian virtue. In Stalin\u0026rsquo;s Russia it was orthodox Marxism-Leninism. For the woke, it\u0026rsquo;s social justice.\nSo if you want to understand wokeness, the question to ask is not why people behave this way. Every society has prigs. The question to ask is why our prigs are priggish about these ideas, at this moment. And to answer that we have to ask when and where wokeness began.\nThe answer to the first question is the 1980s. Wokeness is a second, more aggressive wave of political correctness, which started in the late 1980s, died down in the late 1990s, and then returned with a vengeance in the early 2010s, finally peaking after the riots of 2020.\nWhat was political correctness, exactly? I\u0026rsquo;m often asked to define both this term and wokeness by people who think they\u0026rsquo;re meaningless labels, so I will. They both have the same definition: An aggressively performative focus on social justice. In other words, it\u0026rsquo;s people being prigs about social justice. And that\u0026rsquo;s the real problem — the performativeness, not the social justice. [0]\nRacism, for example, is a genuine problem. Not a problem on the scale that the woke believe it to be, but a genuine one. I don\u0026rsquo;t think any reasonable person would deny …"
  },{
    "title": "The Other Half of 'Artists Ship'",
    "url": "/paul_graham/essays_en/artistsship/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Other Half of \u0026ldquo;Artists Ship\u0026rdquo; November 2008\nOne of the differences between big companies and startups is that big companies tend to have developed procedures to protect themselves against mistakes. A startup walks like a toddler, bashing into things and falling over all the time. A big company is more deliberate.\nThe gradual accumulation of checks in an organization is a kind of learning, based on disasters that have happened to it or others like it. After giving a contract to a supplier who goes bankrupt and fails to deliver, for example, a company might require all suppliers to prove they\u0026rsquo;re solvent before submitting bids.\n",
    "description": "",
    "tags": ["startup","management","bureaucracy","programming","shipping"],
    "categories": [],
    "content": "→ 中文版本\nThe Other Half of \u0026ldquo;Artists Ship\u0026rdquo; November 2008\nOne of the differences between big companies and startups is that big companies tend to have developed procedures to protect themselves against mistakes. A startup walks like a toddler, bashing into things and falling over all the time. A big company is more deliberate.\nThe gradual accumulation of checks in an organization is a kind of learning, based on disasters that have happened to it or others like it. After giving a contract to a supplier who goes bankrupt and fails to deliver, for example, a company might require all suppliers to prove they\u0026rsquo;re solvent before submitting bids.\nAs companies grow they invariably get more such checks, either in response to disasters they\u0026rsquo;ve suffered, or (probably more often) by hiring people from bigger companies who bring with them customs for protecting against new types of disasters.\nIt\u0026rsquo;s natural for organizations to learn from mistakes. The problem is, people who propose new checks almost never consider that the check itself has a cost.\nEvery check has a cost. For example, consider the case of making suppliers verify their solvency. Surely that\u0026rsquo;s mere prudence? But in fact it could have substantial costs. There\u0026rsquo;s obviously the direct cost in time of the people on both sides who supply and check proofs of the supplier\u0026rsquo;s solvency. But the real costs are the ones you never hear about: the company that would be the best supplier, but doesn\u0026rsquo;t bid because they can\u0026rsquo;t spare the effort to get verified. Or the company that would be the best supplier, but falls just short of the threshold for solvency—which will of course have been set on the high side, since there is no apparent cost of increasing it.\nWhenever someone in an organization proposes to add a new check, they should have to explain not just the benefit but the cost. No matter how bad a job they did of analyzing it, this meta-check would at least remind everyone …"
  },{
    "title": "The Other Road Ahead",
    "url": "/paul_graham/essays_en/road/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Other Road Ahead September 2001\n(This article explains why much of the next generation of software may be server-based, what that will mean for programmers, and why this new kind of software is a great opportunity for startups. It\u0026rsquo;s derived from a talk at BBN Labs.)\nIn the summer of 1995, my friend Robert Morris and I decided to start a startup. The PR campaign leading up to Netscape\u0026rsquo;s IPO was running full blast then, and there was a lot of talk in the press about online commerce. At the time there might have been thirty actual stores on the Web, all made by hand. If there were going to be a lot of online stores, there would need to be software for making them, so we decided to write some.\n",
    "description": "",
    "tags": ["web-based software","programming","startups","technology","software development","future"],
    "categories": [],
    "content": "→ 中文版本\nThe Other Road Ahead September 2001\n(This article explains why much of the next generation of software may be server-based, what that will mean for programmers, and why this new kind of software is a great opportunity for startups. It\u0026rsquo;s derived from a talk at BBN Labs.)\nIn the summer of 1995, my friend Robert Morris and I decided to start a startup. The PR campaign leading up to Netscape\u0026rsquo;s IPO was running full blast then, and there was a lot of talk in the press about online commerce. At the time there might have been thirty actual stores on the Web, all made by hand. If there were going to be a lot of online stores, there would need to be software for making them, so we decided to write some.\nFor the first week or so we intended to make this an ordinary desktop application. Then one day we had the idea of making the software run on our Web server, using the browser as an interface. We tried rewriting the software to work over the Web, and it was clear that this was the way to go. If we wrote our software to run on the server, it would be a lot easier for the users and for us as well.\nThis turned out to be a good plan. Now, as Yahoo Store, this software is the most popular online store builder, with about 14,000 users.\nWhen we started Viaweb, hardly anyone understood what we meant when we said that the software ran on the server. It was not until Hotmail was launched a year later that people started to get it. Now everyone knows that this is a valid approach. There is a name now for what we were: an Application Service Provider, or ASP.\nI think that a lot of the next generation of software will be written on this model. Even Microsoft, who have the most to lose, seem to see the inevitability of moving some things off the desktop. If software moves off the desktop and onto servers, it will mean a very different world for developers. This article describes the surprising things we saw, as some of the first visitors to this new world. To the extent …"
  },{
    "title": "The Patent Pledge",
    "url": "/paul_graham/essays_en/patentpledge/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Patent Pledge August 2011\nI realized recently that we may be able to solve part of the patent problem without waiting for the government.\nI\u0026rsquo;ve never been 100% sure whether patents help or hinder technological progress. When I was a kid I thought they helped. I thought they protected inventors from having their ideas stolen by big companies. Maybe that was truer in the past, when more things were physical. But regardless of whether patents are in general a good thing, there do seem to be bad ways of using them. And since bad uses of patents seem to be increasing, there is an increasing call for patent reform.\n",
    "description": "",
    "tags": ["patents","innovation","startups","legal reform","ethics"],
    "categories": [],
    "content": "→ 中文版本\nThe Patent Pledge August 2011\nI realized recently that we may be able to solve part of the patent problem without waiting for the government.\nI\u0026rsquo;ve never been 100% sure whether patents help or hinder technological progress. When I was a kid I thought they helped. I thought they protected inventors from having their ideas stolen by big companies. Maybe that was truer in the past, when more things were physical. But regardless of whether patents are in general a good thing, there do seem to be bad ways of using them. And since bad uses of patents seem to be increasing, there is an increasing call for patent reform.\nThe problem with patent reform is that it has to go through the government. That tends to be slow. But recently I realized we can also attack the problem downstream. As well as pinching off the stream of patents at the point where they\u0026rsquo;re issued, we may in some cases be able to pinch it off at the point where they\u0026rsquo;re used.\nOne way of using patents that clearly does not encourage innovation is when established companies with bad products use patents to suppress small competitors with good products. This is the type of abuse we may be able to decrease without having to go through the government.\nThe way to do it is to get the companies that are above pulling this sort of trick to pledge publicly not to. Then the ones that won\u0026rsquo;t make such a pledge will be very conspicuous. Potential employees won\u0026rsquo;t want to work for them. And investors, too, will be able to see that they\u0026rsquo;re the sort of company that competes by litigation rather than by making good products.\nHere\u0026rsquo;s the pledge: No first use of software patents against companies with less than 25 people.\nI\u0026rsquo;ve deliberately traded precision for brevity. The patent pledge is not legally binding. It\u0026rsquo;s like Google\u0026rsquo;s \u0026ldquo;Don\u0026rsquo;t be evil.\u0026rdquo; They don\u0026rsquo;t define what evil is, but by publicly saying that, they\u0026rsquo;re saying they\u0026rsquo;re …"
  },{
    "title": "The Pooled-Risk Company Management Company",
    "url": "/paul_graham/essays_en/prcmc/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Pooled-Risk Company Management Company July 2008\nAt this year\u0026rsquo;s startup school, David Heinemeier Hansson gave a talk in which he suggested that startup founders should do things the old fashioned way. Instead of hoping to get rich by building a valuable company and then selling stock in a \u0026ldquo;liquidity event,\u0026rdquo; founders should start companies that make money and live off the revenues.\nSounds like a good plan. Let\u0026rsquo;s think about the optimal way to do this.\n",
    "description": "",
    "tags": ["business","management","acquisitions","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版本\nThe Pooled-Risk Company Management Company July 2008\nAt this year\u0026rsquo;s startup school, David Heinemeier Hansson gave a talk in which he suggested that startup founders should do things the old fashioned way. Instead of hoping to get rich by building a valuable company and then selling stock in a \u0026ldquo;liquidity event,\u0026rdquo; founders should start companies that make money and live off the revenues.\nSounds like a good plan. Let\u0026rsquo;s think about the optimal way to do this.\nOne disadvantage of living off the revenues of your company is that you have to keep running it. And as anyone who runs their own business can tell you, that requires your complete attention. You can\u0026rsquo;t just start a business and check out once things are going well, or they stop going well surprisingly fast.\nThe main economic motives of startup founders seem to be freedom and security. They want enough money that (a) they don\u0026rsquo;t have to worry about running out of money and (b) they can spend their time how they want. Running your own business offers neither. You certainly don\u0026rsquo;t have freedom: no boss is so demanding. Nor do you have security, because if you stop paying attention to the company, its revenues go away, and with them your income.\nThe best case, for most people, would be if you could hire someone to manage the company for you once you\u0026rsquo;d grown it to a certain size. Suppose you could find a really good manager. Then you would have both freedom and security. You could pay as little attention to the business as you wanted, knowing that your manager would keep things running smoothly. And that being so, revenues would continue to flow in, so you\u0026rsquo;d have security as well.\nThere will of course be some founders who wouldn\u0026rsquo;t like that idea: the ones who like running their company so much that there\u0026rsquo;s nothing else they\u0026rsquo;d rather do. But this group must be small. The way you succeed in most businesses is to be fanatically attentive to …"
  },{
    "title": "The Power of the Marginal",
    "url": "/paul_graham/essays_en/marginal/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "The Power of the Marginal June 2006\n(This essay is derived from talks at Usenix 2006 and Railsconf 2006.)\nA couple years ago my friend Trevor and I went to look at the Apple garage. As we stood there, he said that as a kid growing up in Saskatchewan he\u0026rsquo;d been amazed at the dedication Jobs and Wozniak must have had to work in a garage.\n\u0026ldquo;Those guys must have been freezing!\u0026rdquo;\n",
    "description": "",
    "tags": ["marginal","outsiders","innovation","creativity","startup","technology","success","work","ideas"],
    "categories": [],
    "content": "The Power of the Marginal June 2006\n(This essay is derived from talks at Usenix 2006 and Railsconf 2006.)\nA couple years ago my friend Trevor and I went to look at the Apple garage. As we stood there, he said that as a kid growing up in Saskatchewan he\u0026rsquo;d been amazed at the dedication Jobs and Wozniak must have had to work in a garage.\n\u0026ldquo;Those guys must have been freezing!\u0026rdquo;\nThat\u0026rsquo;s one of California\u0026rsquo;s hidden advantages: the mild climate means there\u0026rsquo;s lots of marginal space. In cold places that margin gets trimmed off. There\u0026rsquo;s a sharper line between outside and inside, and only projects that are officially sanctioned — by organizations, or parents, or wives, or at least by oneself — get proper indoor space. That raises the activation energy for new ideas. You can\u0026rsquo;t just tinker. You have to justify.\nSome of Silicon Valley\u0026rsquo;s most famous companies began in garages: Hewlett-Packard in 1938, Apple in 1976, Google in 1998. In Apple\u0026rsquo;s case the garage story is a bit of an urban legend. Woz says all they did there was assemble some computers, and that he did all the actual design of the Apple I and Apple II in his apartment or his cube at HP. [1] This was apparently too marginal even for Apple\u0026rsquo;s PR people.\nBy conventional standards, Jobs and Wozniak were marginal people too. Obviously they were smart, but they can\u0026rsquo;t have looked good on paper. They were at the time a pair of college dropouts with about three years of school between them, and hippies to boot. Their previous business experience consisted of making \u0026ldquo;blue boxes\u0026rdquo; to hack into the phone system, a business with the rare distinction of being both illegal and unprofitable.\nOutsiders Now a startup operating out of a garage in Silicon Valley would feel part of an exalted tradition, like the poet in his garret, or the painter who can\u0026rsquo;t afford to heat his studio and thus has to wear a beret indoors. But in 1976 it didn\u0026rsquo;t seem so …"
  },{
    "title": "The Python Paradox",
    "url": "/paul_graham/essays_en/pypar/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "The Python Paradox August 2004\nIn a recent talk I said something that upset a lot of people: that you could get smarter programmers to work on a Python project than you could to work on a Java project.\nI didn\u0026rsquo;t mean by this that Java programmers are dumb. I meant that Python programmers are smart. It\u0026rsquo;s a lot of work to learn a new programming language. And people don\u0026rsquo;t learn Python because it will get them a job; they learn it because they genuinely like to program and aren\u0026rsquo;t satisfied with the languages they already know.\n",
    "description": "",
    "tags": ["python","programming","software development","hiring","technology"],
    "categories": [],
    "content": "The Python Paradox August 2004\nIn a recent talk I said something that upset a lot of people: that you could get smarter programmers to work on a Python project than you could to work on a Java project.\nI didn\u0026rsquo;t mean by this that Java programmers are dumb. I meant that Python programmers are smart. It\u0026rsquo;s a lot of work to learn a new programming language. And people don\u0026rsquo;t learn Python because it will get them a job; they learn it because they genuinely like to program and aren\u0026rsquo;t satisfied with the languages they already know.\nWhich makes them exactly the kind of programmers companies should want to hire. Hence what, for lack of a better name, I\u0026rsquo;ll call the Python paradox: if a company chooses to write its software in a comparatively esoteric language, they\u0026rsquo;ll be able to hire better programmers, because they\u0026rsquo;ll attract only those who cared enough to learn it. And for programmers the paradox is even more pronounced: the language to learn, if you want to get a good job, is a language that people don\u0026rsquo;t learn merely to get a job.\nOnly a few companies have been smart enough to realize this so far. But there is a kind of selection going on here too: they\u0026rsquo;re exactly the companies programmers would most like to work for. Google, for example. When they advertise Java programming jobs, they also want Python experience.\nA friend of mine who knows nearly all the widely used languages uses Python for most of his projects. He says the main reason is that he likes the way source code looks. That may seem a frivolous reason to choose one language over another. But it is not so frivolous as it sounds: when you program, you spend more time reading code than writing it. You push blobs of source code around the way a sculptor does blobs of clay. So a language that makes source code ugly is maddening to an exacting programmer, as clay full of lumps would be to a sculptor.\nAt the mention of ugly source code, people will of course think of …"
  },{
    "title": "The Real Reason to End the Death Penalty",
    "url": "/paul_graham/essays_en/real/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Real Reason to End the Death Penalty April 2021\nWhen intellectuals talk about the death penalty, they talk about things like whether it\u0026rsquo;s permissible for the state to take someone\u0026rsquo;s life, whether the death penalty acts as a deterrent, and whether more death sentences are given to some groups than others. But in practice the debate about the death penalty is not about whether it\u0026rsquo;s ok to kill murderers. It\u0026rsquo;s about whether it\u0026rsquo;s ok to kill innocent people, because at least 4% of people on death row are innocent.\n",
    "description": "",
    "tags": ["death_penalty","justice","innocence","law","ethics","society"],
    "categories": [],
    "content": "→ 中文版本\nThe Real Reason to End the Death Penalty April 2021\nWhen intellectuals talk about the death penalty, they talk about things like whether it\u0026rsquo;s permissible for the state to take someone\u0026rsquo;s life, whether the death penalty acts as a deterrent, and whether more death sentences are given to some groups than others. But in practice the debate about the death penalty is not about whether it\u0026rsquo;s ok to kill murderers. It\u0026rsquo;s about whether it\u0026rsquo;s ok to kill innocent people, because at least 4% of people on death row are innocent.\nWhen I was a kid I imagined that it was unusual for people to be convicted of crimes they hadn\u0026rsquo;t committed, and that in murder cases especially this must be very rare. Far from it. Now, thanks to organizations like the Innocence Project, we see a constant stream of stories about murder convictions being overturned after new evidence emerges. Sometimes the police and prosecutors were just very sloppy. Sometimes they were crooked, and knew full well they were convicting an innocent person.\nKenneth Adams and three other men spent 18 years in prison on a murder conviction. They were exonerated after DNA testing implicated three different men, two of whom later confessed. The police had been told about the other men early in the investigation, but never followed up the lead.\nKeith Harward spent 33 years in prison on a murder conviction. He was convicted because \u0026ldquo;experts\u0026rdquo; said his teeth matched photos of bite marks on one victim. He was exonerated after DNA testing showed the murder had been committed by another man, Jerry Crotty.\nRicky Jackson and two other men spent 39 years in prison after being convicted of murder on the testimony of a 12 year old boy, who later recanted and said he\u0026rsquo;d been coerced by police. Multiple people have confirmed the boy was elsewhere at the time. The three men were exonerated after the county prosecutor dropped the charges, saying \u0026ldquo;The state is conceding the …"
  },{
    "title": "The Reddits",
    "url": "/paul_graham/essays_en/reddits/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Reddits March 2024\nI met the Reddits before we even started Y Combinator. In fact they were one of the reasons we started it.\nYC grew out of a talk I gave to the Harvard Computer Society (the undergrad computer club) about how to start a startup. Everyone else in the audience was probably local, but Steve and Alexis came up on the train from the University of Virginia, where they were seniors. Since they\u0026rsquo;d come so far I agreed to meet them for coffee. They told me about the startup idea we\u0026rsquo;d later fund them to drop: a way to order fast food on your cellphone.\n",
    "description": "",
    "tags": ["Reddit","Y Combinator","Steve Huffman","Alexis Ohanian","startup","technology"],
    "categories": [],
    "content": "→ 中文版本\nThe Reddits March 2024\nI met the Reddits before we even started Y Combinator. In fact they were one of the reasons we started it.\nYC grew out of a talk I gave to the Harvard Computer Society (the undergrad computer club) about how to start a startup. Everyone else in the audience was probably local, but Steve and Alexis came up on the train from the University of Virginia, where they were seniors. Since they\u0026rsquo;d come so far I agreed to meet them for coffee. They told me about the startup idea we\u0026rsquo;d later fund them to drop: a way to order fast food on your cellphone.\nThis was before smartphones. They\u0026rsquo;d have had to make deals with cell carriers and fast food chains just to get it launched. So it was not going to happen. It still doesn\u0026rsquo;t exist, 19 years later. But I was impressed with their brains and their energy. In fact I was so impressed with them and some of the other people I met at that talk that I decided to start something to fund them. A few days later I told Steve and Alexis that we were starting Y Combinator, and encouraged them to apply.\nThat first batch we didn\u0026rsquo;t have any way to identify applicants, so we made up nicknames for them. The Reddits were the \u0026ldquo;Cell food muffins.\u0026rdquo; \u0026ldquo;Muffin\u0026rdquo; is a term of endearment Jessica uses for things like small dogs and two year olds. So that gives you some idea what kind of impression Steve and Alexis made in those days. They had the look of slightly ruffled surprise that baby birds have.\nTheir idea was bad though. And since we thought then that we were funding ideas rather than founders, we initially rejected them. But we felt bad about it. Jessica was sad that we\u0026rsquo;d rejected the muffins. And it seemed wrong to me to turn down the people we\u0026rsquo;d been inspired to start YC to fund.\nI don\u0026rsquo;t think the startup sense of the word \u0026ldquo;pivot\u0026rdquo; had been invented yet, but we wanted to fund Steve and Alexis, so if their idea was bad, they\u0026rsquo;d have to …"
  },{
    "title": "The Refragmentation",
    "url": "/paul_graham/essays_en/re/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Refragmentation January 2016\nOne advantage of being old is that you can see change happen in your lifetime. A lot of the change I\u0026rsquo;ve seen is fragmentation. US politics is much more polarized than it used to be. Culturally we have ever less common ground. The creative class flocks to a handful of happy cities, abandoning the rest. And increasing economic inequality means the spread between rich and poor is growing too. I\u0026rsquo;d like to propose a hypothesis: that all these trends are instances of the same phenomenon. And moreover, that the cause is not some force that\u0026rsquo;s pulling us apart, but rather the erosion of forces that had been pushing us together.\n",
    "description": "",
    "tags": ["fragmentation","inequality","corporations","war","economy","society","change"],
    "categories": [],
    "content": "→ 中文版本\nThe Refragmentation January 2016\nOne advantage of being old is that you can see change happen in your lifetime. A lot of the change I\u0026rsquo;ve seen is fragmentation. US politics is much more polarized than it used to be. Culturally we have ever less common ground. The creative class flocks to a handful of happy cities, abandoning the rest. And increasing economic inequality means the spread between rich and poor is growing too. I\u0026rsquo;d like to propose a hypothesis: that all these trends are instances of the same phenomenon. And moreover, that the cause is not some force that\u0026rsquo;s pulling us apart, but rather the erosion of forces that had been pushing us together.\nWorse still, for those who worry about these trends, the forces that were pushing us together were an anomaly, a one-time combination of circumstances that\u0026rsquo;s unlikely to be repeated — and indeed, that we would not want to repeat.\nThe two forces were war (above all World War II), and the rise of large corporations.\nThe effects of World War II were both economic and social. Economically, it decreased variation in income. Like all modern armed forces, America\u0026rsquo;s were socialist economically. From each according to his ability, to each according to his need. More or less. Higher ranking members of the military got more (as higher ranking members of socialist societies always do), but what they got was fixed according to their rank. And the flattening effect wasn\u0026rsquo;t limited to those under arms, because the US economy was conscripted too. Between 1942 and 1945 all wages were set by the National War Labor Board. Like the military, they defaulted to flatness. And this national standardization of wages was so pervasive that its effects could still be seen years after the war ended. [1]\nBusiness owners weren\u0026rsquo;t supposed to be making money either. FDR said \u0026ldquo;not a single war millionaire\u0026rdquo; would be permitted. To ensure that, any increase in a company\u0026rsquo;s profits over …"
  },{
    "title": "The Right Kind of Stubborn",
    "url": "/paul_graham/essays_en/persistence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Right Kind of Stubborn July 2024\nSuccessful people tend to be persistent. New ideas often don\u0026rsquo;t work at first, but they\u0026rsquo;re not deterred. They keep trying and eventually find something that does.\nMere obstinacy, on the other hand, is a recipe for failure. Obstinate people are so annoying. They won\u0026rsquo;t listen. They beat their heads against a wall and get nowhere.\nBut is there any real difference between these two cases? Are persistent and obstinate people actually behaving differently? Or are they doing the same thing, and we just label them later as persistent or obstinate depending on whether they turned out to be right or not?\n",
    "description": "",
    "tags": ["persistence","determination","success","mindset","decision making"],
    "categories": [],
    "content": "→ 中文版本\nThe Right Kind of Stubborn July 2024\nSuccessful people tend to be persistent. New ideas often don\u0026rsquo;t work at first, but they\u0026rsquo;re not deterred. They keep trying and eventually find something that does.\nMere obstinacy, on the other hand, is a recipe for failure. Obstinate people are so annoying. They won\u0026rsquo;t listen. They beat their heads against a wall and get nowhere.\nBut is there any real difference between these two cases? Are persistent and obstinate people actually behaving differently? Or are they doing the same thing, and we just label them later as persistent or obstinate depending on whether they turned out to be right or not?\nIf that\u0026rsquo;s the only difference then there\u0026rsquo;s nothing to be learned from the distinction. Telling someone to be persistent rather than obstinate would just be telling them to be right rather than wrong, and they already know that. Whereas if persistence and obstinacy are actually different kinds of behavior, it would be worthwhile to tease them apart. [1]\nI\u0026rsquo;ve talked to a lot of determined people, and it seems to me that they\u0026rsquo;re different kinds of behavior. I\u0026rsquo;ve often walked away from a conversation thinking either \u0026ldquo;Wow, that guy is determined\u0026rdquo; or \u0026ldquo;Damn, that guy is stubborn,\u0026rdquo; and I don\u0026rsquo;t think I\u0026rsquo;m just talking about whether they seemed right or not. That\u0026rsquo;s part of it, but not all of it.\nThere\u0026rsquo;s something annoying about the obstinate that\u0026rsquo;s not simply due to being mistaken. They won\u0026rsquo;t listen. And that\u0026rsquo;s not true of all determined people. I can\u0026rsquo;t think of anyone more determined than the Collison brothers, and when you point out a problem to them, they not only listen, but listen with an almost predatory intensity. Is there a hole in the bottom of their boat? Probably not, but if there is, they want to know about it.\nIt\u0026rsquo;s the same with most successful people. They\u0026rsquo;re never more engaged than when you disagree …"
  },{
    "title": "The Risk of Discovery",
    "url": "/paul_graham/essays_en/disc/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nThe Risk of Discovery January 2017\nBecause biographies of famous scientists tend to edit out their mistakes, we underestimate the degree of risk they were willing to take. And because anything a famous scientist did that wasn\u0026rsquo;t a mistake has probably now become the conventional wisdom, those choices don\u0026rsquo;t seem risky either.\nBiographies of Newton, for example, understandably focus more on physics than alchemy or theology. The impression we get is that his unerring judgment led him straight to truths no one else had noticed. How to explain all the time he spent on alchemy and theology? Well, smart people are often kind of crazy.\n",
    "description": "",
    "tags": ["discovery","risk","science","history","newton","physics","alchemy","theology"],
    "categories": [],
    "content": "→ Chinese Version\nThe Risk of Discovery January 2017\nBecause biographies of famous scientists tend to edit out their mistakes, we underestimate the degree of risk they were willing to take. And because anything a famous scientist did that wasn\u0026rsquo;t a mistake has probably now become the conventional wisdom, those choices don\u0026rsquo;t seem risky either.\nBiographies of Newton, for example, understandably focus more on physics than alchemy or theology. The impression we get is that his unerring judgment led him straight to truths no one else had noticed. How to explain all the time he spent on alchemy and theology? Well, smart people are often kind of crazy.\nBut maybe there is a simpler explanation. Maybe the smartness and the craziness were not as separate as we think. Physics seems to us a promising thing to work on, and alchemy and theology obvious wastes of time. But that\u0026rsquo;s because we know how things turned out. In Newton\u0026rsquo;s day the three problems seemed roughly equally promising. No one knew yet what the payoff would be for inventing what we now call physics; if they had, more people would have been working on it. And alchemy and theology were still then in the category Marc Andreessen would describe as \u0026ldquo;huge, if true.\u0026rdquo;\nNewton made three bets. One of them worked. But they were all risky.\nRelated:\nJapanese Translation "
  },{
    "title": "The Ronco Principle",
    "url": "/paul_graham/essays_en/ronco/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Ronco Principle January 2015\nNo one, VC or angel, has invested in more of the top startups than Ron Conway. He knows what happened in every deal in the Valley, half the time because he arranged it.\nAnd yet he\u0026rsquo;s a super nice guy. In fact, nice is not the word. Ronco is good. I know of zero instances in which he has behaved badly. It\u0026rsquo;s hard even to imagine.\n",
    "description": "",
    "tags": ["investors","ethics","silicon valley","ron conway","startup ecosystem"],
    "categories": [],
    "content": "→ 中文版本\nThe Ronco Principle January 2015\nNo one, VC or angel, has invested in more of the top startups than Ron Conway. He knows what happened in every deal in the Valley, half the time because he arranged it.\nAnd yet he\u0026rsquo;s a super nice guy. In fact, nice is not the word. Ronco is good. I know of zero instances in which he has behaved badly. It\u0026rsquo;s hard even to imagine.\nWhen I first came to Silicon Valley I thought \u0026ldquo;How lucky that someone so powerful is so benevolent.\u0026rdquo; But gradually I realized it wasn\u0026rsquo;t luck. It was by being benevolent that Ronco became so powerful. All the deals he gets to invest in come to him through referrals. Google did. Facebook did. Twitter was a referral from Evan Williams himself. And the reason so many people refer deals to him is that he\u0026rsquo;s proven himself to be a good guy.\nGood does not mean being a pushover. I would not want to face an angry Ronco. But if Ron\u0026rsquo;s angry at you, it\u0026rsquo;s because you did something wrong. Ron is so old school he\u0026rsquo;s Old Testament. He will smite you in his just wrath, but there\u0026rsquo;s no malice in it.\nIn almost every domain there are advantages to seeming good. It makes people trust you. But actually being good is an expensive way to seem good. To an amoral person it might seem to be overkill.\nIn some fields it might be, but apparently not in the startup world. Though plenty of investors are jerks, there is a clear trend among them: the most successful investors are also the most upstanding. [1]\nIt was not always this way. I would not feel confident saying that about investors twenty years ago.\nWhat changed? The startup world became more transparent and more unpredictable. Both make it harder to seem good without actually being good.\nIt\u0026rsquo;s obvious why transparency has that effect. When an investor maltreats a founder now, it gets out. Maybe not all the way to the press, but other founders hear about it, and that investor starts to lose deals. [2]\nThe effect of …"
  },{
    "title": "The Roots of Lisp",
    "url": "/paul_graham/essays_en/rootsoflisp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Roots of Lisp May 2001\n(I wrote this article to help myself understand exactly what McCarthy discovered. You don\u0026rsquo;t need to know this stuff to program in Lisp, but it should be helpful to anyone who wants to understand the essence of Lisp — both in the sense of its origins and its semantic core. The fact that it has such a core is one of Lisp\u0026rsquo;s distinguishing features, and the reason why, unlike other languages, Lisp has dialects.)\n",
    "description": "",
    "tags": ["lisp","programming languages","computer science","history","john mccarthy"],
    "categories": [],
    "content": "→ 中文版本\nThe Roots of Lisp May 2001\n(I wrote this article to help myself understand exactly what McCarthy discovered. You don\u0026rsquo;t need to know this stuff to program in Lisp, but it should be helpful to anyone who wants to understand the essence of Lisp — both in the sense of its origins and its semantic core. The fact that it has such a core is one of Lisp\u0026rsquo;s distinguishing features, and the reason why, unlike other languages, Lisp has dialects.)\nIn 1960, John McCarthy published a remarkable paper in which he did for programming something like what Euclid did for geometry. He showed how, given a handful of simple operators and a notation for functions, you can build a whole programming language. He called this language Lisp, for \u0026ldquo;List Processing,\u0026rdquo; because one of his key ideas was to use a simple data structure called a list for both code and data.\nIt\u0026rsquo;s worth understanding what McCarthy discovered, not just as a landmark in the history of computers, but as a model for what programming is tending to become in our own time. It seems to me that there have been two really clean, consistent models of programming so far: the C model and the Lisp model. These two seem points of high ground, with swampy lowlands between them. As computers have grown more powerful, the new languages being developed have been moving steadily toward the Lisp model. A popular recipe for new programming languages in the past 20 years has been to take the C model of computing and add to it, piecemeal, parts taken from the Lisp model, like runtime typing and garbage collection.\nIn this article I\u0026rsquo;m going to try to explain in the simplest possible terms what McCarthy discovered. The point is not just to learn about an interesting theoretical result someone figured out forty years ago, but to show where languages are heading. The unusual thing about Lisp — in fact, the defining quality of Lisp — is that it can be written in itself. To understand what McCarthy meant by …"
  },{
    "title": "The Shape of the Essay Field",
    "url": "/paul_graham/essays_en/field/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Shape of the Essay Field June 2025\nAn essay has to tell people something they don\u0026rsquo;t already know. But there are three different reasons people might not know something, and they yield three very different kinds of essays.\nOne reason people won\u0026rsquo;t know something is if it\u0026rsquo;s not important to know. That doesn\u0026rsquo;t mean it will make a bad essay. For example, you might write a good essay about a particular model of car. Readers would learn something from it. It would add to their picture of the world. For a handful of readers it might even spur some kind of epiphany. But unless this is a very unusual car it\u0026rsquo;s not critical for everyone to know about it. [1]\n",
    "description": "",
    "tags": ["essay","writing","creativity","thinking","education"],
    "categories": [],
    "content": "→ 中文版本\nThe Shape of the Essay Field June 2025\nAn essay has to tell people something they don\u0026rsquo;t already know. But there are three different reasons people might not know something, and they yield three very different kinds of essays.\nOne reason people won\u0026rsquo;t know something is if it\u0026rsquo;s not important to know. That doesn\u0026rsquo;t mean it will make a bad essay. For example, you might write a good essay about a particular model of car. Readers would learn something from it. It would add to their picture of the world. For a handful of readers it might even spur some kind of epiphany. But unless this is a very unusual car it\u0026rsquo;s not critical for everyone to know about it. [1]\nIf something isn\u0026rsquo;t important to know, there\u0026rsquo;s no answer to the question of why people don\u0026rsquo;t know it. Not knowing random facts is the default. But if you\u0026rsquo;re going to write about things that are important to know, you have to ask why your readers don\u0026rsquo;t already know them. Is it because they\u0026rsquo;re smart but inexperienced, or because they\u0026rsquo;re obtuse?\nSo the three reasons readers might not already know what you tell them are (a) that it\u0026rsquo;s not important, (b) that they\u0026rsquo;re obtuse, or (c) that they\u0026rsquo;re inexperienced.\nThe reason I did this breakdown was to get at the following fact, which might have seemed controversial if I\u0026rsquo;d led with it, but should be obvious now. If you\u0026rsquo;re writing for smart people about important things, you\u0026rsquo;re writing for the young.\nOr more precisely, that\u0026rsquo;s where you\u0026rsquo;ll have the most effect. Whatever you say should also be at least somewhat novel to you, however old you are. It\u0026rsquo;s not an essay otherwise, because an essay is something you write to figure something out. But whatever you figure out will presumably be more of a surprise to younger readers than it is to you.\nThere\u0026rsquo;s a continuum of surprise. At one extreme, something you read can change your whole way of thinking. The …"
  },{
    "title": "The Submarine",
    "url": "/paul_graham/essays_en/submarine/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Submarine April 2005\n\u0026ldquo;Suits make a corporate comeback,\u0026rdquo; says the New York Times. Why does this sound familiar? Maybe because the suit was also back in February, September 2004, June 2004, March 2004, September 2003, November 2002, April 2002, and February 2002. Why do the media keep running stories saying suits are back? Because PR firms tell them to. One of the most surprising things I discovered during my brief business career was the existence of the PR industry, lurking like a huge, quiet submarine beneath the news. Of the stories you read in traditional media that aren\u0026rsquo;t about politics, crimes, or disasters, more than half probably come from PR firms.\n",
    "description": "",
    "tags": ["PR","media","journalism","blogs","truth","writing"],
    "categories": [],
    "content": "→ 中文版本\nThe Submarine April 2005\n\u0026ldquo;Suits make a corporate comeback,\u0026rdquo; says the New York Times. Why does this sound familiar? Maybe because the suit was also back in February, September 2004, June 2004, March 2004, September 2003, November 2002, April 2002, and February 2002. Why do the media keep running stories saying suits are back? Because PR firms tell them to. One of the most surprising things I discovered during my brief business career was the existence of the PR industry, lurking like a huge, quiet submarine beneath the news. Of the stories you read in traditional media that aren\u0026rsquo;t about politics, crimes, or disasters, more than half probably come from PR firms.\nI know because I spent years hunting such \u0026ldquo;press hits.\u0026rdquo; Our startup spent its entire marketing budget on PR: at a time when we were assembling our own computers to save money, we were paying a PR firm $16,000 a month. And they were worth it. PR is the news equivalent of search engine optimization; instead of buying ads, which readers ignore, you get yourself inserted directly into the stories. [1]\nOur PR firm was one of the best in the business. In 18 months, they got press hits in over 60 different publications. And we weren\u0026rsquo;t the only ones they did great things for. In 1997 I got a call from another startup founder considering hiring them to promote his company. I told him they were PR gods, worth every penny of their outrageous fees. But I remember thinking his company\u0026rsquo;s name was odd. Why call an auction site \u0026ldquo;eBay\u0026rdquo;?\nSymbiosis PR is not dishonest. Not quite. In fact, the reason the best PR firms are so effective is precisely that they aren\u0026rsquo;t dishonest. They give reporters genuinely valuable information. A good PR firm won\u0026rsquo;t bug reporters just because the client tells them to; they\u0026rsquo;ve worked hard to build their credibility with reporters, and they don\u0026rsquo;t want to destroy it by feeding them mere propaganda.\nIf anyone is …"
  },{
    "title": "The Top Idea in Your Mind",
    "url": "/paul_graham/essays_en/top/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Top Idea in Your Mind July 2010\nI realized recently that what one thinks about in the shower in the morning is more important than I\u0026rsquo;d thought. I knew it was a good time to have ideas. Now I\u0026rsquo;d go further: now I\u0026rsquo;d say it\u0026rsquo;s hard to do a really good job on anything you don\u0026rsquo;t think about in the shower.\nEveryone who\u0026rsquo;s worked on difficult problems is probably familiar with the phenomenon of working hard to figure something out, failing, and then suddenly seeing the answer a bit later while doing something else. There\u0026rsquo;s a kind of thinking you do without trying to. I\u0026rsquo;m increasingly convinced this type of thinking is not merely helpful in solving hard problems, but necessary. The tricky part is, you can only control it indirectly. [1]\n",
    "description": "",
    "tags": ["thinking","attention","focus","productivity","startup","ideas"],
    "categories": [],
    "content": "→ 中文版本\nThe Top Idea in Your Mind July 2010\nI realized recently that what one thinks about in the shower in the morning is more important than I\u0026rsquo;d thought. I knew it was a good time to have ideas. Now I\u0026rsquo;d go further: now I\u0026rsquo;d say it\u0026rsquo;s hard to do a really good job on anything you don\u0026rsquo;t think about in the shower.\nEveryone who\u0026rsquo;s worked on difficult problems is probably familiar with the phenomenon of working hard to figure something out, failing, and then suddenly seeing the answer a bit later while doing something else. There\u0026rsquo;s a kind of thinking you do without trying to. I\u0026rsquo;m increasingly convinced this type of thinking is not merely helpful in solving hard problems, but necessary. The tricky part is, you can only control it indirectly. [1]\nI think most people have one top idea in their mind at any given time. That\u0026rsquo;s the idea their thoughts will drift toward when they\u0026rsquo;re allowed to drift freely. And this idea will thus tend to get all the benefit of that type of thinking, while others are starved of it. Which means it\u0026rsquo;s a disaster to let the wrong idea become the top one in your mind.\nWhat made this clear to me was having an idea I didn\u0026rsquo;t want as the top one in my mind for two long stretches.\nI\u0026rsquo;d noticed startups got way less done when they started raising money, but it was not till we ourselves raised money that I understood why. The problem is not the actual time it takes to meet with investors. The problem is that once you start raising money, raising money becomes the top idea in your mind. That becomes what you think about when you take a shower in the morning. And that means other questions aren\u0026rsquo;t.\nI\u0026rsquo;d hated raising money when I was running Viaweb, but I\u0026rsquo;d forgotten why I hated it so much. When we raised money for Y Combinator, I remembered. Money matters are particularly likely to become the top idea in your mind. The reason is that they have to be. It\u0026rsquo;s hard to …"
  },{
    "title": "The Top of My Todo List",
    "url": "/paul_graham/essays_en/todo/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Top of My Todo List April 2012\nA palliative care nurse called Bronnie Ware made a list of the biggest regrets of the dying. Her list seems plausible. I could see myself — can see myself — making at least 4 of these 5 mistakes.\nIf you had to compress them into a single piece of advice, it might be: don\u0026rsquo;t be a cog. The 5 regrets paint a portrait of post-industrial man, who shrinks himself into a shape that fits his circumstances, then turns dutifully till he stops.\n",
    "description": "",
    "tags": ["regrets","life lessons","priorities","happiness","friendship","dreams"],
    "categories": [],
    "content": "→ 中文版本\nThe Top of My Todo List April 2012\nA palliative care nurse called Bronnie Ware made a list of the biggest regrets of the dying. Her list seems plausible. I could see myself — can see myself — making at least 4 of these 5 mistakes.\nIf you had to compress them into a single piece of advice, it might be: don\u0026rsquo;t be a cog. The 5 regrets paint a portrait of post-industrial man, who shrinks himself into a shape that fits his circumstances, then turns dutifully till he stops.\nThe alarming thing is, the mistakes that produce these regrets are all errors of omission. You forget your dreams, ignore your family, suppress your feelings, neglect your friends, and forget to be happy. Errors of omission are a particularly dangerous type of mistake, because you make them by default.\nI would like to avoid making these mistakes. But how do you avoid mistakes you make by default? Ideally you transform your life so it has other defaults. But it may not be possible to do that completely. As long as these mistakes happen by default, you probably have to be reminded not to make them. So I inverted the 5 regrets, yielding a list of 5 commands\nDon\u0026rsquo;t ignore your dreams; don\u0026rsquo;t work too much; say what you think; cultivate friendships; be happy.\nwhich I then put at the top of the file I use as a todo list.\nJapanese Translation\n"
  },{
    "title": "The Trouble with the Segway",
    "url": "/paul_graham/essays_en/segway/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Trouble with the Segway July 2009\nThe Segway hasn\u0026rsquo;t delivered on its initial promise, to put it mildly. There are several reasons why, but one is that people don\u0026rsquo;t want to be seen riding them. Someone riding a Segway looks like a dork.\nMy friend Trevor Blackwell built his own Segway, which we called the Segwell. He also built a one-wheeled version, the Eunicycle, which looks exactly like a regular unicycle till you realize the rider isn\u0026rsquo;t pedaling. He has ridden them both to downtown Mountain View to get coffee. When he rides the Eunicycle, people smile at him. But when he rides the Segwell, they shout abuse from their cars: \u0026ldquo;Too lazy to walk, ya fuckin homo?\u0026rdquo;\n",
    "description": "",
    "tags": ["segway","technology","design","human_behavior","innovation"],
    "categories": [],
    "content": "→ 中文版本\nThe Trouble with the Segway July 2009\nThe Segway hasn\u0026rsquo;t delivered on its initial promise, to put it mildly. There are several reasons why, but one is that people don\u0026rsquo;t want to be seen riding them. Someone riding a Segway looks like a dork.\nMy friend Trevor Blackwell built his own Segway, which we called the Segwell. He also built a one-wheeled version, the Eunicycle, which looks exactly like a regular unicycle till you realize the rider isn\u0026rsquo;t pedaling. He has ridden them both to downtown Mountain View to get coffee. When he rides the Eunicycle, people smile at him. But when he rides the Segwell, they shout abuse from their cars: \u0026ldquo;Too lazy to walk, ya fuckin homo?\u0026rdquo;\nWhy do Segways provoke this reaction? The reason you look like a dork riding a Segway is that you look smug. You don\u0026rsquo;t seem to be working hard enough.\nSomeone riding a motorcycle isn\u0026rsquo;t working any harder. But because he\u0026rsquo;s sitting astride it, he seems to be making an effort. When you\u0026rsquo;re riding a Segway you\u0026rsquo;re just standing there. And someone who\u0026rsquo;s being whisked along while seeming to do no work — someone in a sedan chair, for example — can\u0026rsquo;t help but look smug.\nTry this thought experiment and it becomes clear: imagine something that worked like the Segway, but that you rode with one foot in front of the other, like a skateboard. That wouldn\u0026rsquo;t seem nearly as uncool.\nSo there may be a way to capture more of the market Segway hoped to reach: make a version that doesn\u0026rsquo;t look so easy for the rider. It would also be helpful if the styling was in the tradition of skateboards or bicycles rather than medical devices.\nCuriously enough, what got Segway into this problem was that the company was itself a kind of Segway. It was too easy for them; they were too successful raising money. If they\u0026rsquo;d had to grow the company gradually, by iterating through several versions they sold to real users, they\u0026rsquo;d have learned pretty …"
  },{
    "title": "The Venture Capital Squeeze",
    "url": "/paul_graham/essays_en/vcsqueeze/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Venture Capital Squeeze November 2005\nIn the next few years, venture capital funds will find themselves squeezed from four directions. They\u0026rsquo;re already stuck with a seller\u0026rsquo;s market, because of the huge amounts they raised at the end of the Bubble and still haven\u0026rsquo;t invested. This by itself is not the end of the world. In fact, it\u0026rsquo;s just a more extreme version of the norm in the VC business: too much money chasing too few deals.\n",
    "description": "",
    "tags": ["venture capital","startups","funding","technology","business","innovation"],
    "categories": [],
    "content": "→ 中文版本\nThe Venture Capital Squeeze November 2005\nIn the next few years, venture capital funds will find themselves squeezed from four directions. They\u0026rsquo;re already stuck with a seller\u0026rsquo;s market, because of the huge amounts they raised at the end of the Bubble and still haven\u0026rsquo;t invested. This by itself is not the end of the world. In fact, it\u0026rsquo;s just a more extreme version of the norm in the VC business: too much money chasing too few deals.\nUnfortunately, those few deals now want less and less money, because it\u0026rsquo;s getting so cheap to start a startup. The four causes: open source, which makes software free; Moore\u0026rsquo;s law, which makes hardware geometrically closer to free; the Web, which makes promotion free if you\u0026rsquo;re good; and better languages, which make development a lot cheaper.\nWhen we started our startup in 1995, the first three were our biggest expenses. We had to pay $5000 for the Netscape Commerce Server, the only software that then supported secure http connections. We paid $3000 for a server with a 90 MHz processor and 32 meg of memory. And we paid a PR firm about $30,000 to promote our launch.Now you could get all three for nothing. You can get the software for free; people throw away computers more powerful than our first server; and if you make something good you can generate ten times as much traffic by word of mouth online than our first PR firm got through the print media.And of course another big change for the average startup is that programming languages have improved\u0026ndash; or rather, the median language has. At most startups ten years ago, software development meant ten programmers writing code in C++. Now the same work might be done by one or two using Python or Ruby.\nDuring the Bubble, a lot of people predicted that startups would outsource their development to India. I think a better model for the future is David Heinemeier Hansson, who outsourced his development to a more powerful language instead. A lot of …"
  },{
    "title": "The Word 'Hacker'",
    "url": "/paul_graham/essays_en/gba/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nThe Word \u0026ldquo;Hacker\u0026rdquo; April 2004\nTo the popular press, \u0026ldquo;hacker\u0026rdquo; means someone who breaks into computers. Among programmers it means a good programmer. But the two meanings are connected. To programmers, \u0026ldquo;hacker\u0026rdquo; connotes mastery in the most literal sense: someone who can make a computer do what he wants—whether the computer wants to or not.\nTo add to the confusion, the noun \u0026ldquo;hack\u0026rdquo; also has two senses. It can be either a compliment or an insult. It\u0026rsquo;s called a hack when you do something in an ugly way. But when you do something so clever that you somehow beat the system, that\u0026rsquo;s also called a hack. The word is used more often in the former than the latter sense, probably because ugly solutions are more common than brilliant ones.\n",
    "description": "",
    "tags": ["hacker","programming","intellectual_freedom","innovation","civil_liberties","technology"],
    "categories": [],
    "content": "→ 中文版本\nThe Word \u0026ldquo;Hacker\u0026rdquo; April 2004\nTo the popular press, \u0026ldquo;hacker\u0026rdquo; means someone who breaks into computers. Among programmers it means a good programmer. But the two meanings are connected. To programmers, \u0026ldquo;hacker\u0026rdquo; connotes mastery in the most literal sense: someone who can make a computer do what he wants—whether the computer wants to or not.\nTo add to the confusion, the noun \u0026ldquo;hack\u0026rdquo; also has two senses. It can be either a compliment or an insult. It\u0026rsquo;s called a hack when you do something in an ugly way. But when you do something so clever that you somehow beat the system, that\u0026rsquo;s also called a hack. The word is used more often in the former than the latter sense, probably because ugly solutions are more common than brilliant ones.\nBelieve it or not, the two senses of \u0026ldquo;hack\u0026rdquo; are also connected. Ugly and imaginative solutions have something in common: they both break the rules. And there is a gradual continuum between rule breaking that\u0026rsquo;s merely ugly (using duct tape to attach something to your bike) and rule breaking that is brilliantly imaginative (discarding Euclidean space).\nHacking predates computers. When he was working on the Manhattan Project, Richard Feynman used to amuse himself by breaking into safes containing secret documents. This tradition continues today. When we were in grad school, a hacker friend of mine who spent too much time around MIT had his own lock picking kit. (He now runs a hedge fund, a not unrelated enterprise.)\nIt is sometimes hard to explain to authorities why one would want to do such things. Another friend of mine once got in trouble with the government for breaking into computers. This had only recently been declared a crime, and the FBI found that their usual investigative technique didn\u0026rsquo;t work. Police investigation apparently begins with a motive. The usual motives are few: drugs, money, sex, revenge. Intellectual curiosity was not one of the motives …"
  },{
    "title": "Trolls",
    "url": "/paul_graham/essays_en/trolls/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nTrolls February 2008\nA user on Hacker News recently posted a comment that set me thinking: Something about hacker culture that never really set well with me was this — the nastiness. \u0026hellip; I just don\u0026rsquo;t understand why people troll like they do. I\u0026rsquo;ve thought a lot over the last couple years about the problem of trolls. It\u0026rsquo;s an old one, as old as forums, but we\u0026rsquo;re still just learning what the causes are and how to address them.\n",
    "description": "",
    "tags": ["trolls","online_communities","hacker_culture","behavior","psychology","forums"],
    "categories": [],
    "content": "→ 中文版本\nTrolls February 2008\nA user on Hacker News recently posted a comment that set me thinking: Something about hacker culture that never really set well with me was this — the nastiness. \u0026hellip; I just don\u0026rsquo;t understand why people troll like they do. I\u0026rsquo;ve thought a lot over the last couple years about the problem of trolls. It\u0026rsquo;s an old one, as old as forums, but we\u0026rsquo;re still just learning what the causes are and how to address them.\nThere are two senses of the word \u0026ldquo;troll.\u0026rdquo; In the original sense it meant someone, usually an outsider, who deliberately stirred up fights in a forum by saying controversial things. [1] For example, someone who didn\u0026rsquo;t use a certain programming language might go to a forum for users of that language and make disparaging remarks about it, then sit back and watch as people rose to the bait. This sort of trolling was in the nature of a practical joke, like letting a bat loose in a room full of people.\nThe definition then spread to people who behaved like assholes in forums, whether intentionally or not. Now when people talk about trolls they usually mean this broader sense of the word. Though in a sense this is historically inaccurate, it is in other ways more accurate, because when someone is being an asshole it\u0026rsquo;s usually uncertain even in their own mind how much is deliberate. That is arguably one of the defining qualities of an asshole.\nI think trolling in the broader sense has four causes. The most important is distance. People will say things in anonymous forums that they\u0026rsquo;d never dare say to someone\u0026rsquo;s face, just as they\u0026rsquo;ll do things in cars that they\u0026rsquo;d never do as pedestrians — like tailgate people, or honk at them, or cut them off.\nTrolling tends to be particularly bad in forums related to computers, and I think that\u0026rsquo;s due to the kind of people you find there. Most of them (myself included) are more comfortable dealing with abstract ideas than with people. …"
  },{
    "title": "Two Kinds of Judgement",
    "url": "/paul_graham/essays_en/judgement/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nTwo Kinds of Judgement April 2007\nThere are two different ways people judge you. Sometimes judging you correctly is the end goal. But there\u0026rsquo;s a second much more common type of judgement where it isn\u0026rsquo;t. We tend to regard all judgements of us as the first type. We\u0026rsquo;d probably be happier if we realized which are and which aren\u0026rsquo;t.\nThe first type of judgement, the type where judging you is the end goal, include court cases, grades in classes, and most competitions. Such judgements can of course be mistaken, but because the goal is to judge you correctly, there\u0026rsquo;s usually some kind of appeals process. If you feel you\u0026rsquo;ve been misjudged, you can protest that you\u0026rsquo;ve been treated unfairly.\n",
    "description": "",
    "tags": ["judgement","psychology","success","rejection","college_admissions","hiring","decision_making"],
    "categories": [],
    "content": "→ 中文版本\nTwo Kinds of Judgement April 2007\nThere are two different ways people judge you. Sometimes judging you correctly is the end goal. But there\u0026rsquo;s a second much more common type of judgement where it isn\u0026rsquo;t. We tend to regard all judgements of us as the first type. We\u0026rsquo;d probably be happier if we realized which are and which aren\u0026rsquo;t.\nThe first type of judgement, the type where judging you is the end goal, include court cases, grades in classes, and most competitions. Such judgements can of course be mistaken, but because the goal is to judge you correctly, there\u0026rsquo;s usually some kind of appeals process. If you feel you\u0026rsquo;ve been misjudged, you can protest that you\u0026rsquo;ve been treated unfairly.\nNearly all the judgements made on children are of this type, so we get into the habit early in life of thinking that all judgements are.\nBut in fact there is a second much larger class of judgements where judging you is only a means to something else. These include college admissions, hiring and investment decisions, and of course the judgements made in dating. This kind of judgement is not really about you.\nPut yourself in the position of someone selecting players for a national team. Suppose for the sake of simplicity that this is a game with no positions, and that you have to select 20 players. There will be a few stars who clearly should make the team, and many players who clearly shouldn\u0026rsquo;t. The only place your judgement makes a difference is in the borderline cases. Suppose you screw up and underestimate the 20th best player, causing him not to make the team, and his place to be taken by the 21st best. You\u0026rsquo;ve still picked a good team. If the players have the usual distribution of ability, the 21st best player will be only slightly worse than the 20th best. Probably the difference between them will be less than the measurement error.\nThe 20th best player may feel he has been misjudged. But your goal here wasn\u0026rsquo;t to provide …"
  },{
    "title": "Undergraduation",
    "url": "/paul_graham/essays_en/college/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nUndergraduation Want to start a startup? Get funded by Y Combinator.\nMarch 2005\n(Parts of this essay began as replies to students who wrote to me with questions.)\nRecently I\u0026rsquo;ve had several emails from computer science undergrads asking what to do in college. I might not be the best source of advice, because I was a philosophy major in college. But I took so many CS classes that most CS majors thought I was one. I was certainly a hacker, at least.\n",
    "description": "",
    "tags": ["college","education","programming","hacking","math","graduate-school","career-advice"],
    "categories": [],
    "content": "→ 中文版本\nUndergraduation Want to start a startup? Get funded by Y Combinator.\nMarch 2005\n(Parts of this essay began as replies to students who wrote to me with questions.)\nRecently I\u0026rsquo;ve had several emails from computer science undergrads asking what to do in college. I might not be the best source of advice, because I was a philosophy major in college. But I took so many CS classes that most CS majors thought I was one. I was certainly a hacker, at least.\nHacking What should you do in college to become a good hacker? There are two main things you can do: become very good at programming, and learn a lot about specific, cool problems. These turn out to be equivalent, because each drives you to do the other.\nThe way to be good at programming is to work (a) a lot (b) on hard problems. And the way to make yourself work on hard problems is to work on some very engaging project. Odds are this project won\u0026rsquo;t be a class assignment. My friend Robert learned a lot by writing network software when he was an undergrad. One of his projects was to connect Harvard to the Arpanet; it had been one of the original nodes, but by 1984 the connection had died. Not only was this work not for a class, but because he spent all his time on it and neglected his studies, he was kicked out of school for a year. It all evened out in the end, and now he\u0026rsquo;s a professor at MIT. But you\u0026rsquo;ll probably be happier if you don\u0026rsquo;t go to that extreme; it caused him a lot of worry at the time.\nAnother way to be good at programming is to find other people who are good at it, and learn what they know. Programmers tend to sort themselves into tribes according to the type of work they do and the tools they use, and some tribes are smarter than others. Look around you and see what the smart people seem to be working on; there\u0026rsquo;s usually a reason.\nSome of the smartest people around you are professors. So one way to find interesting work is to volunteer as a research assistant. …"
  },{
    "title": "Useful",
    "url": "/paul_graham/essays_en/useful/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nUseful How to Write Usefully\nFebruary 2020\nWhat should an essay be? Many people would say persuasive. That\u0026rsquo;s what a lot of us were taught essays should be. But I think we can aim for something more ambitious: that an essay should be useful.\nTo start with, that means it should be correct. But it\u0026rsquo;s not enough merely to be correct. It\u0026rsquo;s easy to make a statement correct by making it vague. That\u0026rsquo;s a common flaw in academic writing, for example. If you know nothing at all about an issue, you can\u0026rsquo;t go wrong by saying that the issue is a complex one, that there are many factors to be considered, that it\u0026rsquo;s a mistake to take too simplistic a view of it, and so on.\n",
    "description": "",
    "tags": ["writing","essay","creativity","advice","communication"],
    "categories": [],
    "content": "→ 中文版本\nUseful How to Write Usefully\nFebruary 2020\nWhat should an essay be? Many people would say persuasive. That\u0026rsquo;s what a lot of us were taught essays should be. But I think we can aim for something more ambitious: that an essay should be useful.\nTo start with, that means it should be correct. But it\u0026rsquo;s not enough merely to be correct. It\u0026rsquo;s easy to make a statement correct by making it vague. That\u0026rsquo;s a common flaw in academic writing, for example. If you know nothing at all about an issue, you can\u0026rsquo;t go wrong by saying that the issue is a complex one, that there are many factors to be considered, that it\u0026rsquo;s a mistake to take too simplistic a view of it, and so on.\nThough no doubt correct, such statements tell the reader nothing. Useful writing makes claims that are as strong as they can be made without becoming false.\nFor example, it\u0026rsquo;s more useful to say that Pike\u0026rsquo;s Peak is near the middle of Colorado than merely somewhere in Colorado. But if I say it\u0026rsquo;s in the exact middle of Colorado, I\u0026rsquo;ve now gone too far, because it\u0026rsquo;s a bit east of the middle.\nPrecision and correctness are like opposing forces. It\u0026rsquo;s easy to satisfy one if you ignore the other. The converse of vaporous academic writing is the bold, but false, rhetoric of demagogues. Useful writing is bold, but true.\nIt\u0026rsquo;s also two other things: it tells people something important, and that at least some of them didn\u0026rsquo;t already know.\nTelling people something they didn\u0026rsquo;t know doesn\u0026rsquo;t always mean surprising them. Sometimes it means telling them something they knew unconsciously but had never put into words. In fact those may be the more valuable insights, because they tend to be more fundamental.\nLet\u0026rsquo;s put them all together. Useful writing tells people something true and important that they didn\u0026rsquo;t already know, and tells them as unequivocally as possible.\nNotice these are all a matter of degree. For example, you …"
  },{
    "title": "Web 2.0",
    "url": "/paul_graham/essays_en/web20/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWeb 2.0 November 2005\nDoes \u0026ldquo;Web 2.0\u0026rdquo; mean anything? Till recently I thought it didn\u0026rsquo;t, but the truth turns out to be more complicated. Originally, yes, it was meaningless. Now it seems to have acquired a meaning. And yet those who dislike the term are probably right, because if it means what I think it does, we don\u0026rsquo;t need it.\nI first heard the phrase \u0026ldquo;Web 2.0\u0026rdquo; in the name of the Web 2.0 conference in 2004. At the time it was supposed to mean using \u0026ldquo;the web as a platform,\u0026rdquo; which I took to refer to web-based applications. [1]\n",
    "description": "",
    "tags": ["Web 2.0","Ajax","democracy","user experience","technology","startup"],
    "categories": [],
    "content": "→ 中文版\nWeb 2.0 November 2005\nDoes \u0026ldquo;Web 2.0\u0026rdquo; mean anything? Till recently I thought it didn\u0026rsquo;t, but the truth turns out to be more complicated. Originally, yes, it was meaningless. Now it seems to have acquired a meaning. And yet those who dislike the term are probably right, because if it means what I think it does, we don\u0026rsquo;t need it.\nI first heard the phrase \u0026ldquo;Web 2.0\u0026rdquo; in the name of the Web 2.0 conference in 2004. At the time it was supposed to mean using \u0026ldquo;the web as a platform,\u0026rdquo; which I took to refer to web-based applications. [1]\nSo I was surprised at a conference this summer when Tim O\u0026rsquo;Reilly led a session intended to figure out a definition of \u0026ldquo;Web 2.0.\u0026rdquo; Didn\u0026rsquo;t it already mean using the web as a platform? And if it didn\u0026rsquo;t already mean something, why did we need the phrase at all?\nOrigins Tim says the phrase \u0026ldquo;Web 2.0\u0026rdquo; first arose in \u0026ldquo;a brainstorming session between O\u0026rsquo;Reilly and Medialive International.\u0026rdquo; What is Medialive International? \u0026ldquo;Producers of technology tradeshows and conferences,\u0026rdquo; according to their site. So presumably that\u0026rsquo;s what this brainstorming session was about. O\u0026rsquo;Reilly wanted to organize a conference about the web, and they were wondering what to call it.\nI don\u0026rsquo;t think there was any deliberate plan to suggest there was a new version of the web. They just wanted to make the point that the web mattered again. It was a kind of semantic deficit spending: they knew new things were coming, and the \u0026ldquo;2.0\u0026rdquo; referred to whatever those might turn out to be.\nAnd they were right. New things were coming. But the new version number led to some awkwardness in the short term. In the process of developing the pitch for the first conference, someone must have decided they\u0026rsquo;d better take a stab at explaining what that \u0026ldquo;2.0\u0026rdquo; referred to. Whatever it meant, \u0026ldquo;the web as a platform\u0026rdquo; was at least …"
  },{
    "title": "Web 2.0",
    "url": "/paul_graham/essays_zh/web20/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nWeb 2.0 2005年11月\n\u0026ldquo;Web 2.0\u0026quot;意味着什么吗？直到最近我还认为它不意味着什么，但事实证明情况更复杂。最初，是的，它是没有意义的。现在它似乎已经获得了一个含义。然而，那些不喜欢这个词的人可能是对的，因为如果它的意思是我认为的那个意思，我们就不需要它。\n我第一次听到\u0026quot;Web 2.0\u0026quot;这个词是在2004年Web 2.0会议的名称中。当时它本意是使用\u0026quot;网络作为平台\u0026rdquo;，我将其理解为基于网络的应用程序。[1]\n所以今年夏天当一个会议上Tim O\u0026rsquo;Reilly主持一个旨在找出\u0026quot;Web 2.0\u0026quot;定义的会议时，我感到惊讶。它不是已经意味着使用网络作为平台吗？如果它还没有意味着什么，我们为什么根本需要这个词？\n起源 Tim说\u0026quot;Web 2.0\u0026quot;这个词首次出现在\u0026quot;O\u0026rsquo;Reilly和Medialive International之间的头脑风暴会议\u0026quot;中。Medialive International是什么？根据他们的网站，他们是\u0026quot;技术贸易展览和会议的组织者\u0026quot;。所以大概这就是这次头脑风暴会议的内容。O\u0026rsquo;Reilly想要组织一个关于网络的会议，他们在考虑如何命名它。\n我认为没有任何故意的计划暗示网络有新版本。他们只是想要强调网络再次重要的观点。这是一种语义赤字支出：他们知道新事物即将到来，而\u0026quot;2.0\u0026quot;指的是那些可能最终会变成的东西。\n他们是对的。新事物即将到来。但新的版本号在短期内带来了一些尴尬。在开发第一个会议的宣传材料的过程中，有人必须决定他们最好试着解释那个\u0026quot;2.0\u0026quot;指的是什么。无论它意味着什么，\u0026ldquo;网络作为平台\u0026quot;至少不是太限制性。\n关于\u0026quot;Web 2.0\u0026quot;意味着网络作为平台的故事在第一个会议后并没有持续多久。到第二个会议时，\u0026ldquo;Web 2.0\u0026quot;似乎意味着的是关于民主的东西。至少，当人们在网上写它时是这样。会议本身看起来并不很草根。它花费2800美元，所以只有能够负担得起的风险投资家和大公司的人才能参加。\n然而，奇怪的是，Ryan Singel在《连线新闻》上关于这次会议的文章谈到了\u0026quot;一群极客\u0026rdquo;。当我的一个朋友向Ryan询问这件事时，这对他来说是新闻。他说他最初写的是类似\u0026quot;一群风险投资家和业务发展人员\u0026quot;的东西，但后来将其缩短为\u0026quot;一群\u0026rdquo;，而这一定又被编辑们扩展为\u0026quot;一群极客\u0026quot;。毕竟，Web 2.0会议应该充满极客，对吧？\n嗯，不对。大约有7个。甚至连Tim O\u0026rsquo;Reilly都穿着西装，这是一个如此陌生的景象，我一开始都无法理解。我看到他走过，对一个O\u0026rsquo;Reilly的人说\u0026quot;那个人看起来很像Tim。\u0026quot;\n\u0026ldquo;哦，那是Tim。他买了一套西装。\u0026ldquo;我追上他，果然是他。他解释说他刚刚在泰国买的。\n2005年Web 2.0会议让我想起了泡沫时期的互联网贸易展览，充满了游荡的风险投资家寻找下一个热门创业公司。有那种由大量决心不错过任何机会的人创造的奇怪氛围。不错过什么？他们不知道。无论即将发生什么——无论Web 2.0最终变成什么。\n我不会仅仅因为风险投资家渴望再次投资就称之为\u0026quot;泡沫2.0\u0026rdquo;。互联网是真正的大事。崩溃和繁荣一样都是过度反应。可以预期，一旦我们开始走出崩溃，这个领域将会有大量增长，就像在大萧条前飙升最严重的行业一样。\n这不会变成第二次泡沫的原因是IPO市场已经消失。风险投资者是由退出策略驱动的。他们在90年代末后期资助所有那些可笑的创业公司的原因是他们希望能够将它们卖给轻率的零售投资者；他们希望能够一路笑着去银行。现在这条路已经关闭了。现在默认的退出策略是被收购，而收购者不像IPO投资者那样容易产生非理性繁荣。你最接近泡沫估值的是Rupert Murdoch为Myspace支付5.8亿美元。这只不过偏离了10倍左右。\n1. Ajax \u0026ldquo;Web 2.0\u0026quot;现在是否意味着除了会议名称之外的更多东西？我不喜欢承认这一点，但它确实开始意味着什么了。当人们现在说\u0026quot;Web 2.0\u0026quot;时，我大致知道他们的意思。我既鄙视这个词又理解它的事实是它已经开始意味着什么的最可靠证明。\n其含义的一个组成部分当然是Ajax，我现在仍然只能勉强不带引号地使用它。基本上，\u0026ldquo;Ajax\u0026quot;的意思是\u0026quot;JavaScript现在能工作了\u0026rdquo;。这反过来意味着基于网络的应用程序现在可以做得更像桌面应用程序。\n当你读这篇文章时，整个新一代软件正在被编写以利用Ajax。自从微型计算机首次出现以来，还没有出现过这样的新应用浪潮。即使是微软也看到了这一点，但对它们来说太晚了，除了泄露\u0026quot;内部\u0026quot;文件以给人留下他们正掌握这一新趋势的印象外，它们做不了什么更多。\n事实上，新一代软件的编写速度太快了，微软甚至无法引导它，更不用说在内部编写自己的软件了。它们现在唯一的希望是在谷歌之前收购所有最好的Ajax创业公司。即使这将很困难，因为谷歌在收购微型创业公司方面拥有像几年前在搜索领域一样巨大的领先优势。毕竟，谷歌地图，典型的Ajax应用程序，是他们收购的一家创业公司的结果。\n所以讽刺的是，Web 2.0会议的原始描述被证明是部分正确的：基于网络的应用程序是Web 2.0的重要组成部分。但我相信他们是偶然做对的。Ajax热潮直到2005年初才开始，当时谷歌地图出现，\u0026ldquo;Ajax\u0026quot;这个词被创造出来。\n2. 民主 Web 2.0的第二个重要组成部分是民主。我们现在有几个例子证明，当业余爱好者有正确的系统来引导他们的努力时，他们可以超越专业人士。维基百科可能是最著名的。专家们对维基百科的评价平平，但他们错过了关键点：它已经足够好了。而且它是免费的，这意味着人们确实阅读它。在网上，你必须付费的文章几乎等于不存在。即使你愿意自己付费阅读它们，你也不能链接到它们。它们不是对话的一部分。\n民主似乎获胜的另一个地方是决定什么算作新闻。我现在只看Reddit新闻网站。[2] 我知道如果发生重大事件，或者有人写了一篇特别有趣的文章，它会在那里出现。为什么要费心查看任何特定报纸或杂志的首页？Reddit就像整个网络的RSS订阅源，带有质量过滤器。类似的网站包括Digg，一个技术新闻网站，其 popularity正在迅速接近Slashdot，以及del.icio.us，引发了\u0026quot;标签\u0026quot;运动的协作书签网络。而虽然维基百科的主要吸引力是它足够好且免费，但这些网站表明投票者在做的工作明显比人类编辑好。\nWeb 2.0民主的最戏剧性例子不是在选择思想，而是在生产它们。我注意到有一段时间了，我在个人网站上读到的东西与我在报纸和杂志上读到的一样好或更好。现在我有独立的证据：Reddit上的热门链接通常是指向个人网站的链接，而不是杂志文章或新闻故事。\n我为杂志写作的经验提供了一个解释。编辑。他们控制你可以写的话题，他们通常可以重写你产生的任何内容。结果是压制极端情况。编辑产生的是95百分位的写作——95%的文章通过编辑得到改善，但5%被拖累了。5%的时间你会得到\u0026quot;一群极客\u0026rdquo;。\n在网上，人们可以发布任何他们想要的东西。几乎所有这些都不及印刷出版物中经过编辑压制的写作。但是作者池非常非常大。如果它足够大，缺乏压制意味着网上最好的写作应该超过印刷品中最好的。[3] 既然网络已经进化出选择好东西的机制，网络整体胜出。选择胜过压制，原因与市场经济胜过中央计划相同。\n即使是创业公司这次也不同。它们之于泡沫时期的创业公司，就像博客之于印刷媒体。在泡沫时期，创业公司意味着一家由MBA领导的公司，正在花费数百万美元的风险投资资金以最字面的意义\u0026quot;快速做大\u0026rdquo;。现在它意味着一个更小、更年轻、更技术化的团体，只是决定创造一些伟大的东西。他们稍后会决定是否要筹集风险投资规模的资金，如果他们接受，他们会按照自己的条件接受。\n3. 不要虐待用户 我认为每个人都会同意民主和Ajax是\u0026quot;Web 2.0\u0026quot;的组成部分。我也看到了第三个：不要虐待用户。在泡沫时期，许多流行的网站对用户相当专横。不仅仅是在明显的方式上，比如让他们注册，或者让他们忍受烦人的广告。90年代末普通网站的设计本身就是一种滥用。许多最受欢迎的网站充斥着侵扰性的品牌，使它们加载缓慢，并向用户传递信息：这是我们的网站，不是你的。（在一些笔记本电脑上附带的英特尔和微软贴纸有物理上的类似之处。）\n我认为问题的根源在于网站觉得他们在免费赠送东西，直到最近，任何免费赠送东西的公司都可能对此相当专横。有时它达到了经济虐待的程度：网站所有者假设他们对用户造成的痛苦越多，对他们来说的好处就一定越多。这种模式最引人注目的残余可能是在salon.com，在那里你可以阅读故事的开头，但要获得其余部分，你必须坐着看完一部电影。\n在Y Combinator，我们建议我们资助的所有创业公司永远不要对用户发号施令。永远不要让用户注册，除非你需要为他们存储一些东西。如果你确实让用户注册，永远不要让他们等待电子邮件中的确认链接；事实上，除非你出于某种原因需要他们的电子邮件地址，否则甚至不要问他们。不要问他们任何不必要的问题。除非他们明确要求，否则永远不要给他们发送电子邮件。永远不要将你链接到的页面框架化，或者在新窗口中打开它们。如果你有免费版本和付费版本，不要让免费版本太受限制。如果你发现自己问\u0026quot;我们应该允许用户做x吗？\u0026ldquo;只要在你不确定的时候回答\u0026quot;是\u0026rdquo;。倾向于慷慨。\n在《如何创业》中，我建议创业公司永远不要让任何人从他们下面飞过，意思永远不要让任何其他公司提供更便宜、更简单的解决方案。低飞的另一种方式是给用户更多权力。让用户做他们想做的事。如果你不这样做而竞争对手做了，你就会陷入麻烦。\niTunes在这个意义上是Web 2.0式的。终于你可以购买单曲而不必购买整张专辑。唱片行业讨厌这个想法，并尽可能长时间地抵制它。但用户想要什么很明显，所以苹果从唱片公司下面飞过。[4] 虽然实际上将iTunes描述为Web 1.5可能更好。应用于音乐的Web 2.0可能意味着个人乐队免费提供无DRM的歌曲。\n",
    "description": "",
    "tags": ["Web 2.0","Ajax","民主","用户体验","技术","创业"],
    "categories": [],
    "content": "→ English Version\nWeb 2.0 2005年11月\n\u0026ldquo;Web 2.0\u0026quot;意味着什么吗？直到最近我还认为它不意味着什么，但事实证明情况更复杂。最初，是的，它是没有意义的。现在它似乎已经获得了一个含义。然而，那些不喜欢这个词的人可能是对的，因为如果它的意思是我认为的那个意思，我们就不需要它。\n我第一次听到\u0026quot;Web 2.0\u0026quot;这个词是在2004年Web 2.0会议的名称中。当时它本意是使用\u0026quot;网络作为平台\u0026rdquo;，我将其理解为基于网络的应用程序。[1]\n所以今年夏天当一个会议上Tim O\u0026rsquo;Reilly主持一个旨在找出\u0026quot;Web 2.0\u0026quot;定义的会议时，我感到惊讶。它不是已经意味着使用网络作为平台吗？如果它还没有意味着什么，我们为什么根本需要这个词？\n起源 Tim说\u0026quot;Web 2.0\u0026quot;这个词首次出现在\u0026quot;O\u0026rsquo;Reilly和Medialive International之间的头脑风暴会议\u0026quot;中。Medialive International是什么？根据他们的网站，他们是\u0026quot;技术贸易展览和会议的组织者\u0026quot;。所以大概这就是这次头脑风暴会议的内容。O\u0026rsquo;Reilly想要组织一个关于网络的会议，他们在考虑如何命名它。\n我认为没有任何故意的计划暗示网络有新版本。他们只是想要强调网络再次重要的观点。这是一种语义赤字支出：他们知道新事物即将到来，而\u0026quot;2.0\u0026quot;指的是那些可能最终会变成的东西。\n他们是对的。新事物即将到来。但新的版本号在短期内带来了一些尴尬。在开发第一个会议的宣传材料的过程中，有人必须决定他们最好试着解释那个\u0026quot;2.0\u0026quot;指的是什么。无论它意味着什么，\u0026ldquo;网络作为平台\u0026quot;至少不是太限制性。\n关于\u0026quot;Web 2.0\u0026quot;意味着网络作为平台的故事在第一个会议后并没有持续多久。到第二个会议时，\u0026ldquo;Web 2.0\u0026quot;似乎意味着的是关于民主的东西。至少，当人们在网上写它时是这样。会议本身看起来并不很草根。它花费2800美元，所以只有能够负担得起的风险投资家和大公司的人才能参加。\n然而，奇怪的是，Ryan Singel在《连线新闻》上关于这次会议的文章谈到了\u0026quot;一群极客\u0026rdquo;。当我的一个朋友向Ryan询问这件事时，这对他来说是新闻。他说他最初写的是类似\u0026quot;一群风险投资家和业务发展人员\u0026quot;的东西，但后来将其缩短为\u0026quot;一群\u0026rdquo;，而这一定又被编辑们扩展为\u0026quot;一群极客\u0026quot;。毕竟，Web 2.0会议应该充满极客，对吧？\n嗯，不对。大约有7个。甚至连Tim O\u0026rsquo;Reilly都穿着西装，这是一个如此陌生的景象，我一开始都无法理解。我看到他走过，对一个O\u0026rsquo;Reilly的人说\u0026quot;那个人看起来很像Tim。\u0026quot;\n\u0026ldquo;哦，那是Tim。他买了一套西装。\u0026ldquo;我追上他，果然是他。他解释说他刚刚在泰国买的。\n2005年Web 2.0会议让我想起了泡沫时期的互联网贸易展览，充满了游荡的风险投资家寻找下一个热门创业公司。有那种由大量决心不错过任何机会的人创造的奇怪氛围。不错过什么？他们不知道。无论即将发生什么——无论Web 2.0最终变成什么。\n我不会仅仅因为风险投资家渴望再次投资就称之为\u0026quot;泡沫2.0\u0026rdquo;。互联网是真正的大事。崩溃和繁荣一样都是过度反应。可以预期，一旦我们开始走出崩溃，这个领域将会有大量增长，就像在大萧条前飙升最严重的行业一样。\n这不会变成第二次泡沫的原因是IPO市场已经消失。风险投资者是由退出策略驱动的。他们在90年代末后期资助所有那些可笑的创业公司的原因是他们希望能够将它们卖给轻率的零售投资者；他们希望能够一路笑着去银行。现在这条路已经关闭了。现在默认的退出策略是被收购，而收购者不像IPO投资者那样容易产生非理性繁荣。你最接近泡沫估值的是Rupert Murdoch为Myspace支付5.8亿美元。这只不过偏离了10倍左右。\n1. Ajax \u0026ldquo;Web 2.0\u0026quot;现在是否意味着除了会议名称之外的更多东西？我不喜欢承认这一点，但它确实开始意味着什么了。当人们现在说\u0026quot;Web 2.0\u0026quot;时，我大致知道他们的意思。我既鄙视这个词又理解它的事实是它已经开始意味着什么的最可靠证明。\n其含义的一个组成部分当然是Ajax，我现在仍然只能勉强不带引号地使用它。基本上，\u0026ldquo;Ajax\u0026quot;的意思是\u0026quot;JavaScript现在能工作 …"
  },{
    "title": "Weird Languages",
    "url": "/paul_graham/essays_en/weird/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWeird Languages August 2021\nWhen people say that in their experience all programming languages are basically equivalent, they\u0026rsquo;re making a statement not about languages but about the kind of programming they\u0026rsquo;ve done.\n99.5% of programming consists of gluing together calls to library functions. All popular languages are equally good at this. So one can easily spend one\u0026rsquo;s whole career operating in the intersection of popular programming languages.\nBut the other .5% of programming is disproportionately interesting. If you want to learn what it consists of, the weirdness of weird languages is a good clue to follow.\n",
    "description": "",
    "tags": ["programming languages","Lisp","macros","technology","software development"],
    "categories": [],
    "content": "→ 中文版\nWeird Languages August 2021\nWhen people say that in their experience all programming languages are basically equivalent, they\u0026rsquo;re making a statement not about languages but about the kind of programming they\u0026rsquo;ve done.\n99.5% of programming consists of gluing together calls to library functions. All popular languages are equally good at this. So one can easily spend one\u0026rsquo;s whole career operating in the intersection of popular programming languages.\nBut the other .5% of programming is disproportionately interesting. If you want to learn what it consists of, the weirdness of weird languages is a good clue to follow.\nWeird languages aren\u0026rsquo;t weird by accident. Not the good ones, at least. The weirdness of the good ones usually implies the existence of some form of programming that\u0026rsquo;s not just the usual gluing together of library calls.\nA concrete example: Lisp macros. Lisp macros seem weird even to many Lisp programmers. They\u0026rsquo;re not only not in the intersection of popular languages, but by their nature would be hard to implement properly in a language without turning it into a dialect of Lisp. And macros are definitely evidence of techniques that go beyond glue programming. For example, solving problems by first writing a language for problems of that type, and then writing your specific application in it. Nor is this all you can do with macros; it\u0026rsquo;s just one region in a space of program-manipulating techniques that even now is far from fully explored.\nSo if you want to expand your concept of what programming can be, one way to do it is by learning weird languages. Pick a language that most programmers consider weird but whose median user is smart, and then focus on the differences between this language and the intersection of popular languages. What can you say in this language that would be impossibly inconvenient to say in others? In the process of learning how to say things you couldn\u0026rsquo;t previously say, you\u0026rsquo;ll …"
  },{
    "title": "Welcome to Lisp",
    "url": "/paul_graham/essays_en/acl2txtt1748944359/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWelcome to Lisp This chapter aims to get you programming as soon as possible. By the end of it you will know enough Common Lisp to begin writing programs.\n2.1 Form It is particularly true of Lisp that you learn it by using it, because Lisp is an interactive language. Any Lisp system will include an interactive front-end called the toplevel. You type Lisp expressions into the toplevel, and the system displays their values. Lisp usually displays a prompt to tell you that it\u0026rsquo;s waiting for you to type something. Many implementations of Common Lisp use \u0026gt; as the toplevel prompt. That\u0026rsquo;s what we\u0026rsquo;ll use here.\n",
    "description": "",
    "tags": ["lisp","programming","tutorial","learning","technology"],
    "categories": [],
    "content": "→ 中文版本\nWelcome to Lisp This chapter aims to get you programming as soon as possible. By the end of it you will know enough Common Lisp to begin writing programs.\n2.1 Form It is particularly true of Lisp that you learn it by using it, because Lisp is an interactive language. Any Lisp system will include an interactive front-end called the toplevel. You type Lisp expressions into the toplevel, and the system displays their values. Lisp usually displays a prompt to tell you that it\u0026rsquo;s waiting for you to type something. Many implementations of Common Lisp use \u0026gt; as the toplevel prompt. That\u0026rsquo;s what we\u0026rsquo;ll use here.\nOne of the simplest kinds of Lisp expression is an integer. If we enter 1 after the prompt,\n\u0026gt; 1 1 \u0026gt; the system will print its value, followed by another prompt, to say that it\u0026rsquo;s ready for more. In this case, the value displayed is the same as what we typed. A number like 1 is said to evaluate to itself.\nLife gets more interesting when we enter expressions that take some work to evaluate. For example, if we want to add two numbers together, we type something like:\n\u0026gt; (+ 2 3) 5 In the expression (+ 2 3), the + is called the operator, and the numbers 2 and 3 are called the arguments. In everyday life, we would write this expression as 2 + 3, but in Lisp we put the + operator first, followed by the arguments, with the whole expression enclosed in a pair of parentheses: (+ 2 3). This is called prefix notation, because the operator comes first.\nIt may at first seem a strange way to write expressions, but in fact this notation is one of the best things about Lisp. For example, if we want to add three numbers together, in ordinary notation we have to use + twice, 2 + 3 + 4 while in Lisp we just add another argument: (+ 2 3 4)\nThe way we ordinarily use +, it must have exactly two arguments: one on the left and one on the right. The flexibility of prefix notation means that, in Lisp, + can take any number of arguments, including none: …"
  },{
    "title": "What Business Can Learn from Open Source",
    "url": "/paul_graham/essays_en/opensource/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "What Business Can Learn from Open Source August 2005\n(This essay is derived from a talk at Oscon 2005.)\nLately companies have been paying more attention to open source. Ten years ago there seemed a real danger Microsoft would extend its monopoly to servers. It seems safe to say now that open source has prevented that. A recent survey found 52% of companies are replacing Windows servers with Linux servers. [1]\n",
    "description": "",
    "tags": ["open source","business","workplace","productivity","innovation","management","blogging"],
    "categories": [],
    "content": "What Business Can Learn from Open Source August 2005\n(This essay is derived from a talk at Oscon 2005.)\nLately companies have been paying more attention to open source. Ten years ago there seemed a real danger Microsoft would extend its monopoly to servers. It seems safe to say now that open source has prevented that. A recent survey found 52% of companies are replacing Windows servers with Linux servers. [1]\nMore significant, I think, is which 52% they are. At this point, anyone proposing to run Windows on servers should be prepared to explain what they know about servers that Google, Yahoo, and Amazon don\u0026rsquo;t.\nBut the biggest thing business has to learn from open source is not about Linux or Firefox, but about the forces that produced them. Ultimately these will affect a lot more than what software you use.\nWe may be able to get a fix on these underlying forces by triangulating from open source and blogging. As you\u0026rsquo;ve probably noticed, they have a lot in common.\nLike open source, blogging is something people do themselves, for free, because they enjoy it. Like open source hackers, bloggers compete with people working for money, and often win. The method of ensuring quality is also the same: Darwinian. Companies ensure quality through rules to prevent employees from screwing up. But you don\u0026rsquo;t need that when the audience can communicate with one another. People just produce whatever they want; the good stuff spreads, and the bad gets ignored. And in both cases, feedback from the audience improves the best work.\nAnother thing blogging and open source have in common is the Web. People have always been willing to do great work for free, but before the Web it was harder to reach an audience or collaborate on projects.\nAmateurs I think the most important of the new principles business has to learn is that people work a lot harder on stuff they like. Well, that\u0026rsquo;s news to no one. So how can I claim business has to learn it? When I say business …"
  },{
    "title": "What Doesn't Seem Like Work?",
    "url": "/paul_graham/essays_en/work/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWhat Doesn\u0026rsquo;t Seem Like Work? January 2015\nMy father is a mathematician. For most of my childhood he worked for Westinghouse, modelling nuclear reactors.\nHe was one of those lucky people who know early on what they want to do. When you talk to him about his childhood, there\u0026rsquo;s a clear watershed at about age 12, when he \u0026ldquo;got interested in maths.\u0026rdquo;\nHe grew up in the small Welsh seacoast town of Pwllheli. As we retraced his walk to school on Google Street View, he said that it had been nice growing up in the country.\n",
    "description": "",
    "tags": ["work","passion","career","happiness","success"],
    "categories": [],
    "content": "→ 中文版\nWhat Doesn\u0026rsquo;t Seem Like Work? January 2015\nMy father is a mathematician. For most of my childhood he worked for Westinghouse, modelling nuclear reactors.\nHe was one of those lucky people who know early on what they want to do. When you talk to him about his childhood, there\u0026rsquo;s a clear watershed at about age 12, when he \u0026ldquo;got interested in maths.\u0026rdquo;\nHe grew up in the small Welsh seacoast town of Pwllheli. As we retraced his walk to school on Google Street View, he said that it had been nice growing up in the country.\n\u0026ldquo;Didn\u0026rsquo;t it get boring when you got to be about 15?\u0026rdquo; I asked.\n\u0026ldquo;No,\u0026rdquo; he said, \u0026ldquo;by then I was interested in maths.\u0026rdquo;\nIn another conversation he told me that what he really liked was solving problems. To me the exercises at the end of each chapter in a math textbook represent work, or at best a way to reinforce what you learned in that chapter. To him the problems were the reward. The text of each chapter was just some advice about solving them. He said that as soon as he got a new textbook he\u0026rsquo;d immediately work out all the problems — to the slight annoyance of his teacher, since the class was supposed to work through the book gradually.\nFew people know so early or so certainly what they want to work on. But talking to my father reminded me of a heuristic the rest of us can use. If something that seems like work to other people doesn\u0026rsquo;t seem like work to you, that\u0026rsquo;s something you\u0026rsquo;re well suited for. For example, a lot of programmers I know, including me, actually like debugging. It\u0026rsquo;s not something people tend to volunteer; one likes it the way one likes popping zits. But you may have to like debugging to like programming, considering the degree to which programming consists of it.\nThe stranger your tastes seem to other people, the stronger evidence they probably are of what you should do. When I was in college I used to write papers for my friends. It was quite …"
  },{
    "title": "What Happened to Yahoo",
    "url": "/paul_graham/essays_en/yahoo/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWhat Happened to Yahoo August 2010When I went to work for Yahoo after they bought our startup in 1998, it felt like the center of the world. It was supposed to be the next big thing. It was supposed to be what Google turned out to be.\nWhat went wrong? The problems that hosed Yahoo go back a long time, practically to the beginning of the company. They were already very visible when I got there in 1998. Yahoo had two problems Google didn\u0026rsquo;t: easy money, and ambivalence about being a technology company.\n",
    "description": "",
    "tags": ["Yahoo","Google","startups","business","technology","hacker culture"],
    "categories": [],
    "content": "→ 中文版\nWhat Happened to Yahoo August 2010When I went to work for Yahoo after they bought our startup in 1998, it felt like the center of the world. It was supposed to be the next big thing. It was supposed to be what Google turned out to be.\nWhat went wrong? The problems that hosed Yahoo go back a long time, practically to the beginning of the company. They were already very visible when I got there in 1998. Yahoo had two problems Google didn\u0026rsquo;t: easy money, and ambivalence about being a technology company.\nMoney The first time I met Jerry Yang, we thought we were meeting for different reasons. He thought we were meeting so he could check us out in person before buying us. I thought we were meeting so we could show him our new technology, Revenue Loop. It was a way of sorting shopping search results. Merchants bid a percentage of sales for traffic, but the results were sorted not by the bid but by the bid times the average amount a user would buy. It was like the algorithm Google uses now to sort ads, but this was in the spring of 1998, before Google was founded.\nRevenue Loop was the optimal sort for shopping search, in the sense that it sorted in order of how much money Yahoo would make from each link. But it wasn\u0026rsquo;t just optimal in that sense. Ranking search results by user behavior also makes search better. Users train the search: you can start out finding matches based on mere textual similarity, and as users buy more stuff the search results get better and better.\nJerry didn\u0026rsquo;t seem to care. I was confused. I was showing him technology that extracted the maximum value from search traffic, and he didn\u0026rsquo;t care? I couldn\u0026rsquo;t tell whether I was explaining it badly, or he was just very poker faced.\nI didn\u0026rsquo;t realize the answer till later, after I went to work at Yahoo. It was neither of my guesses. The reason Yahoo didn\u0026rsquo;t care about a technique that extracted the full value of traffic was that advertisers were already overpaying for …"
  },{
    "title": "What I Did this Summer",
    "url": "/paul_graham/essays_en/sfp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat I Did this Summer October 2005\nThe first Summer Founders Program has just finished. We were surprised how well it went. Overall only about 10% of startups succeed, but if I had to guess now, I\u0026rsquo;d predict three or four of the eight startups we funded will make it.\nOf the startups that needed further funding, I believe all have either closed a round or are likely to soon. Two have already turned down (lowball) acquisition offers.\n",
    "description": "",
    "tags": ["y_combinator","summer_founders_program","startups","young_founders","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版本\nWhat I Did this Summer October 2005\nThe first Summer Founders Program has just finished. We were surprised how well it went. Overall only about 10% of startups succeed, but if I had to guess now, I\u0026rsquo;d predict three or four of the eight startups we funded will make it.\nOf the startups that needed further funding, I believe all have either closed a round or are likely to soon. Two have already turned down (lowball) acquisition offers.\nWe would have been happy if just one of the eight seemed promising by the end of the summer. What\u0026rsquo;s going on? Did some kind of anomaly make this summer\u0026rsquo;s applicants especially good? We worry about that, but we can\u0026rsquo;t think of one. We\u0026rsquo;ll find out this winter.\nThe whole summer was full of surprises. The best was that the hypothesis we were testing seems to be correct. Young hackers can start viable companies. This is good news for two reasons: (a) it\u0026rsquo;s an encouraging thought, and (b) it means that Y Combinator, which is predicated on the idea, is not hosed.\nAge More precisely, the hypothesis was that success in a startup depends mainly on how smart and energetic you are, and much less on how old you are or how much business experience you have. The results so far bear this out. The 2005 summer founders ranged in age from 18 to 28 (average 23), and there is no correlation between their ages and how well they\u0026rsquo;re doing.\nThis should not really be surprising. Bill Gates and Michael Dell were both 19 when they started the companies that made them famous. Young founders are not a new phenomenon: the trend began as soon as computers got cheap enough for college kids to afford them.\nAnother of our hypotheses was that you can start a startup on less money than most people think. Other investors were surprised to hear the most we gave any group was $20,000. But we knew it was possible to start on that little because we started Viaweb on $10,000.\nAnd so it proved this summer. Three months\u0026rsquo; funding …"
  },{
    "title": "What I Worked On",
    "url": "/paul_graham/essays_en/worked/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWhat I Worked On February 2021\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\u0026rsquo;t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \u0026ldquo;data processing.\u0026rdquo; This was in 9th grade, so I was 13 or 14. The school district\u0026rsquo;s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\u0026rsquo;s lair down there, with all these alien-looking machines  CPU, disk drives, printer, card reader  sitting up on a raised floor under bright fluorescent lights.The language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.I was puzzled by the 1401. I couldn\u0026rsquo;t figure out what to do with it. And in retrospect there\u0026rsquo;s not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn\u0026rsquo;t have any data stored on punched cards. The only other option was to do things that didn\u0026rsquo;t rely on any input, like calculate approximations of pi, but I didn\u0026rsquo;t know enough math to do anything interesting of that type. So I\u0026rsquo;m not surprised I can\u0026rsquo;t remember any programs I wrote, because they can\u0026rsquo;t have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn\u0026rsquo;t. On a machine without time-sharing, this was a social as well as a technical error, as the data center manager\u0026rsquo;s expression made clear.With microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]The first of my friends to get a microcomputer built it himself. It was sold as a kit by Heathkit. I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.Computers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980. The gold standard then was the Apple II, but a TRS-80 was good enough. This was when I really started programming. I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book. There was only room in memory for about 2 pages of text, so he\u0026rsquo;d write 2 pages at a time and then print them out, but it was a lot better than a typewriter.Though I liked programming, I didn\u0026rsquo;t plan to study it in college. In college I was going to study philosophy, which sounded much more powerful. It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge. What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn\u0026rsquo;t much left for these supposed ultimate truths. All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.I couldn\u0026rsquo;t have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.AI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven\u0026rsquo;t tried rereading The Moon is a Harsh Mistress, so I don\u0026rsquo;t know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we\u0026rsquo;d have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most. All you had to do was teach SHRDLU more words.There weren\u0026rsquo;t any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself. Which meant learning Lisp, since in those days Lisp was regarded as the language of AI. The commonly used programming languages then were pretty primitive, and programmers\u0026rsquo; ideas correspondingly so. The default language at Cornell was a Pascal-like language called PL/I, and the situation was similar elsewhere. Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were. This was more like it; this was what I had expected college to do. It wasn\u0026rsquo;t happening in a class, like it was supposed to, but that was ok. For the next couple years I was on a roll. I knew what I was going to do.For my undergraduate thesis, I reverse-engineered SHRDLU. My God did I love working on that program. It was a pleasing bit of code, but what made it even more exciting was my belief  hard to imagine now, but not unique in 1985  that it was already climbing the lower slopes of intelligence.I had gotten into a program at Cornell that didn\u0026rsquo;t make you choose a major. You could take whatever classes you liked, and choose whatever you liked to put on your degree. I of course chose \u0026ldquo;Artificial Intelligence.\u0026rdquo; When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes. At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.I applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I\u0026rsquo;d visited because Rich Draves went there, and was also home to Bill Woods, who\u0026rsquo;d invented the type of parser I used in my SHRDLU clone. Only Harvard accepted me, so that was where I went.I don\u0026rsquo;t remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax. By which I mean the sort of AI in which a program that\u0026rsquo;s told \u0026ldquo;the dog is sitting on the chair\u0026rdquo; translates this into some formal representation and adds it to the list of things it knows.What these programs really showed was that there\u0026rsquo;s a subset of natural language that\u0026rsquo;s a formal language. But a very proper subset. It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language. It was not, in fact, simply a matter of teaching SHRDLU more words. That whole way of doing AI, with explicit data structures representing concepts, was not going to work. Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.So I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It\u0026rsquo;s scary to think how little I knew about Lisp hacking when I started writing that book. But there\u0026rsquo;s nothing like writing a book about something to help you learn it. The book, On Lisp, wasn\u0026rsquo;t published till 1993, but I wrote much of it in grad school.Computer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things. I had plenty of respect for theory  indeed, a sneaking suspicion that it was the more admirable of the two halves  but building things seemed so much more exciting.The problem with systems work, though, was that it didn\u0026rsquo;t last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work. Only people with a sense of the history of the field would even realize that, in its time, it had been good.There were some surplus Xerox Dandelions floating around the computer lab at one point. Anyone who wanted one to play around with could have one. I was briefly tempted, but they were so slow by present standards; what was the point? No one else wanted one either, so off they went. That was what happened to systems work.I wanted not just to build things, but to build things that would last.In this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school. One day I went to visit the Carnegie Institute, where I\u0026rsquo;d spent a lot of time as a kid. While looking at a painting there I realized something that might seem obvious, but was a big surprise to me. There, right on the wall, was something you could make that would last. Paintings didn\u0026rsquo;t become obsolete. Some of the best ones were hundreds of years old.And moreover this was something you could make a living doing. Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive. And as an artist you could be truly independent. You wouldn\u0026rsquo;t have a boss, or even need to get research funding.I had always liked looking at paintings. Could I make them? I had no idea. I\u0026rsquo;d never imagined it was even possible. I knew intellectually that people made art  that it didn\u0026rsquo;t just appear spontaneously  but it was as if the people who made it were a different species. They either lived long ago or were mysterious geniuses doing strange things in profiles in Life magazine. The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.That fall I started taking art classes at Harvard. Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going. If he even knew about the strange classes I was taking, he never said anything.So now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at On Lisp. In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.I didn\u0026rsquo;t see a way out of this situation. I didn\u0026rsquo;t want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he\u0026rsquo;d found such a spectacular way to get out of grad school.Then one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn\u0026rsquo;t have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay \u0026ldquo;Yes, I think so. I\u0026rsquo;ll give you something to read in a few days.\u0026ldquo;I picked applications of continuations as the topic. In retrospect I should have written about macros and embedded languages. There\u0026rsquo;s a whole world there that\u0026rsquo;s barely been explored. But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.Meanwhile I was applying to art schools. I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good. RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.I\u0026rsquo;d applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer. The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.Toward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they\u0026rsquo;d sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall. This was now only weeks away. My nice landlady let me leave my stuff in her attic. I had some money saved from consulting work I\u0026rsquo;d done in grad school; there was probably enough to last a year if I lived cheaply. Now all I had to do was learn Italian.Only stranieri (foreigners) had to take this entrance exam. In retrospect it may well have been a way of excluding them, because there were so many stranieri attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered. I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don\u0026rsquo;t know how I managed to pass the written exam. I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary. [2]I\u0026rsquo;m only up to age 25 and already there are such conspicuous patterns. Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed. The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn\u0026rsquo;t require the faculty to teach anything, and in return the faculty wouldn\u0026rsquo;t require the students to learn anything. And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier. We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they\u0026rsquo;d seen in American art magazines.Our model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She\u0026rsquo;d copy an obscure old painting out of a book, and then he\u0026rsquo;d take the copy and maltreat it to make it look old. [3]While I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time. Painting still lives is different from painting people, because the subject, as its name suggests, can\u0026rsquo;t move. People can\u0026rsquo;t sit for more than about 15 minutes at a time, and when they do they don\u0026rsquo;t sit very still. So the traditional m.o. for painting people is to know how to paint a generic person, which you then modify to match the specific person you\u0026rsquo;re painting. Whereas a still life you can, if you want, copy pixel by pixel from what you\u0026rsquo;re seeing. You don\u0026rsquo;t want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it\u0026rsquo;s been through a head. You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it\u0026rsquo;s the edge of an object. By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense. [4]I liked painting still lives because I was curious about what I was seeing. In everyday life, we aren\u0026rsquo;t consciously aware of much we\u0026rsquo;re seeing. Most visual perception is handled by low-level processes that merely tell your brain \u0026ldquo;that\u0026rsquo;s a water droplet\u0026rdquo; without telling you details like where the lightest and darkest points are, or \u0026ldquo;that\u0026rsquo;s a bush\u0026rdquo; without telling you the shape and position of every leaf. This is a feature of brains, not a bug. In everyday life it would be distracting to notice every leaf on every bush. But when you have to paint something, you have to look more closely, and when you do there\u0026rsquo;s a lot to see. You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can after days of trying to write an essay about something people usually take for granted.This is not the only way to paint. I\u0026rsquo;m not 100% sure it\u0026rsquo;s even a good way to paint. But it seemed a good enough bet to be worth trying.Our teacher, professor Ulivi, was a nice guy. He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had. But the Accademia wasn\u0026rsquo;t teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.I wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall. I got one at a company called Interleaf, which made software for creating documents. You mean like Microsoft Word? Exactly. That was how I learned that low end software tends to eat high end software. But Interleaf still had a few years to live yet. [5]Interleaf had done something pretty bold. Inspired by Emacs, they\u0026rsquo;d added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I\u0026rsquo;ve had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn\u0026rsquo;t know C and didn\u0026rsquo;t want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction. Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.The good part was that I got paid huge amounts of money, especially by art student standards. In Florence, after paying my part of the rent, my budget for everything else had been $7 a day. Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting. By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.I learned some useful things at Interleaf, though they were mostly about what not to do. I learned that it's better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it's depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there's not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.But the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it's good to be the \"entry level\" option, even though that will be less prestigious, because if you're not, someone else will be, and will squash you against the ceiling. Which in turn means that prestige is a danger sign.When I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years. When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML. Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.In the fall of 1992 I moved back to Providence to continue at RISD. The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke. Now I was going to see what real art school was like. But alas it was more like the Accademia than not. Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine. At least not the painting department. The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous. No doubt illustration and architecture were too. But painting was post-rigorous. Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.A signature style is the visual equivalent of what in show business is known as a \"schtick\": something that immediately identifies the work as yours and no one else's. For example, when you see a painting that looks like a certain kind of cartoon, you know it's by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That's not always why artists have a signature style, but it's usually why buyers pay a lot for such work. [6]There were plenty of earnest students too: kids who \"could draw\" in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better. They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did. I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.I learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free. So in 1993 I dropped out. I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor. A rent-controlled apartment in a building her mother owned in New York was becoming vacant. Did I want it? It wasn't much more than my current place, and New York was supposed to be where the artists were. So yes, I wanted it! [7]Asterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans. You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there's a tiny corner that's not rich, or at least wasn't in 1993. It's called Yorkville, and that was my new home. Now I was a New York artist  in the strictly technical sense of making paintings and living in New York.I was nervous about money, because I could sense that Interleaf was on the way down. Freelance Lisp hacking work was very rare, and I didn't want to have to program in another language, which in those days would have meant C++ if I was lucky. So with my unerring nose for financial opportunity, I decided to write another book on Lisp. This would be a popular book, the sort of book that could be used as a textbook. I imagined myself living frugally off the royalties and spending all my time painting. (The painting on the cover of this book, ANSI Common Lisp, is one that I painted around this time.)The best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I'd taken her painting class at Harvard. I've never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.She liked to paint on big, square canvases, 4 to 5 feet on a side. One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager. He wasn't that much older than me, and was super rich. The thought suddenly occurred to me: why don't I become rich? Then I'll be able to work on whatever I want.Meanwhile I'd been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I'd seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.If I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can't honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn't want to be online, and still don't, not the fancy ones. That's not how they sell. I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages. Then we tried to sign up galleries. To call this a difficult sale would be an understatement. It was difficult to give away. A few galleries let us make sites for them for free, but none paid us.Then some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we'd been generating for galleries. This impressive-sounding thing called an \"internet storefront\" was something we already knew how to build.So in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores. At first this was going to be normal desktop software, which in those days meant Windows software. That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn. We lived in the Unix world. But we decided we'd at least try writing a prototype store builder on Unix. Robert wrote a shopping cart, and I wrote a new site generator for stores  in Lisp, of course.We were working out of Robert's apartment in Cambridge. His roommate was away for big chunks of time, during which I got to sleep in his room. For some reason there was no bed frame or sheets, just a mattress on the floor. One morning as I was lying on this mattress I had an idea that made me sit up like a capital L. What if we ran the software on the server, and let users control it by clicking on links? Then we'd never have to write anything to run on users' computers. We could generate the sites on the same server we'd serve them from. Users wouldn't need anything more than a browser.This kind of software, known as a web app, is common now, but at the time it wasn't clear that it was even possible. To find out, we decided to try making a version of our store builder that you could control through the browser. A couple days later, on August 12, we had one that worked. The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.Now we felt like we were really onto something. I had visions of a whole new generation of software working this way. You wouldn't need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.We started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle\u0026rsquo;s husband Julian. In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator\u0026rsquo;s. We knew founders needed something like this, because we\u0026rsquo;d needed it ourselves.At this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I\u0026rsquo;d made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.We originally hoped to launch in September, but we got more ambitious about the software as we worked on it. Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.It helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values. If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.(If you\u0026rsquo;re curious why my site looks so old-fashioned, it\u0026rsquo;s because it\u0026rsquo;s still made with this software. It may look clunky today, but in 1996 it was the last word in slick.)In September, Robert rebelled. \u0026ldquo;We\u0026rsquo;ve been working on this for a month,\u0026rdquo; he said, \u0026ldquo;and it\u0026rsquo;s still not done.\u0026rdquo; This is funny in retrospect, because he would still be working on it almost 3 years later. But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good. He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him. But Rtm was right, as usual. Trevor turned out to be a frighteningly effective hacker.It was a lot of fun working with Robert and Trevor. They\u0026rsquo;re the two most independent-minded people I know, and in completely different ways. If you could see inside Rtm\u0026rsquo;s brain it would look like a colonial New England church, and if you could see inside Trevor\u0026rsquo;s it would look like the worst excesses of Austrian Rococo.We opened for business, with 6 stores, in January 1996. It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early. There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores. [8]There were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote. In its time, the editor was one of the best general-purpose site builders. I kept the code tight and didn\u0026rsquo;t have to integrate with any other software except Robert\u0026rsquo;s and Trevor\u0026rsquo;s, so it was quite fun to work on. If all I\u0026rsquo;d had to do was work on this software, the next 3 years would have been the easiest of my life. Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.There were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn\u0026rsquo;t because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.We did a lot of things right by accident like that. For example, we did what's now called \"doing things that don't scale,\" although at the time we would have described it as \"being so lame that we're driven to the most desperate measures to get users.\" The most common of which was building stores for them. This seemed particularly humiliating, since the whole raison d'etre of our software was that people could use it to make their own stores. But anything to get users.We learned a lot more about retail than we wanted to know. For example, that if you could only have a small image of a man's shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt. The reason I remember learning this was that it meant I had to rescan about 30 images of men's shirts. My first set of scans were so beautiful too.Though this felt wrong, it was exactly the right thing to be doing. Building stores for users taught us about retail, and about how it felt to use our software. I was initially both mystified and repelled by \"business\" and thought we needed a \"business person\" to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids. Whatever users wanted, I was all theirs. Maybe one day we'd have so many users that I couldn't scan their images for them, but in the meantime there was nothing more important to do.Another thing I didn't get at the time is that growth rate is the ultimate test of a startup. Our growth rate was fine. We had about 70 stores at the end of 1996 and about 500 at the end of 1997. I mistakenly thought the thing that mattered was the absolute number of users. And that is the thing that matters in the sense that that's how much money you're making, and if you're not making enough, you might go out of business. But in the long term the growth rate takes care of the absolute number. If we'd been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you're doing fine. You're growing 7x a year. Just don't hire too many more people and you'll soon be profitable, and then you'll control your own destiny.Alas I hired lots more people, partly because our investors wanted me to, and partly because that's what startups did during the Internet Bubble. A company with just a handful of employees would have seemed amateurish. So we didn't reach breakeven until about when Yahoo bought us in the summer of 1998. Which in turn meant we were at the mercy of investors for the entire life of the company. And since both we and our investors were noobs at startups, the result was a mess even by startup standards.It was a huge relief when Yahoo bought us. In principle our Viaweb stock was valuable. It was a share in a business that was profitable and growing rapidly. But it didn't feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months. Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.The next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn't realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo's prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down. After a few months it felt disconcertingly like working at Interleaf.Yahoo had given us a lot of options when they bought us. At the time I thought Yahoo was so overvalued that they'd never be worth anything, but to my astonishment the stock went up 5x in the next year. I hung on till the first chunk of options vested, then in the summer of 1999 I left. It had been so long since I'd painted anything that I'd half forgotten why I was doing this. My brain had been entirely full of software and men's shirts for 4 years. But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.When I said I was leaving, my boss at Yahoo had a long conversation with me about my plans. I told him all about the kinds of pictures I wanted to paint. At the time I was touched that he took such an interest in me. Now I realize it was because he thought I was lying. My options at that point were worth about $2 million a month. If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me. This was the height of the Internet Bubble, and Yahoo was ground zero of it. My boss was at that moment a billionaire. Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.But I really was quitting to paint, and I started immediately. There was no time to lose. I\u0026rsquo;d already burned 4 years getting rich. Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation. That\u0026rsquo;s what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.So I tried to paint, but I just didn\u0026rsquo;t seem to have any energy or ambition. Part of the problem was that I didn\u0026rsquo;t know many people in California. I\u0026rsquo;d compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere. I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you\u0026rsquo;ll be surprised to hear I still had my apartment, sealed up like a tomb of my old life. Idelle was in New York at least, and there were other people trying to paint there, even though I didn\u0026rsquo;t know any of them.When I got back to New York I resumed my old life, except now I was rich. It was as weird as it sounds. I resumed all my old patterns, except now there were doors where there hadn\u0026rsquo;t been. Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up. Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I\u0026rsquo;d paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn\u0026rsquo;t rotted yet).Meanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn\u0026rsquo;t one. Huh.Around this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps? Why not let people edit code on our server through the browser, and then host the resulting applications for them? [9] You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.I got so excited about this idea that I couldn\u0026rsquo;t think about anything else. It seemed obvious that this was the future. I didn\u0026rsquo;t particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it. I hoped to lure Robert into working on it with me, but there I ran into a hitch. Robert was now a postdoc at MIT, and though he\u0026rsquo;d made a lot of money the last time I\u0026rsquo;d lured him into working on one of my schemes, it had also been a huge time sink. So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.Hmph. Well, I\u0026rsquo;d do it myself then. I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it\u0026rsquo;s now clear is about twenty companies and several open source projects worth of software. The language for defining applications would of course be a dialect of Lisp. But I wasn\u0026rsquo;t so naive as to assume I could spring an overt Lisp on a general audience; we\u0026rsquo;d hide the parentheses, like Dylan did.By then there was a name for the kind of company Viaweb was, an \u0026ldquo;application service provider,\u0026rdquo; or ASP. This name didn\u0026rsquo;t last long before it was replaced by \u0026ldquo;software as a service,\u0026rdquo; but it was current for long enough that I named this new company after it: it was going to be called Aspra.I started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls). But about halfway through the summer I realized I really didn\u0026rsquo;t want to run a company  especially not a big one, which it was looking like this would have to be. I\u0026rsquo;d only started Viaweb because I needed the money. Now that I didn\u0026rsquo;t need money anymore, why was I doing this? If this vision had to be realized as a company, then screw the vision. I\u0026rsquo;d build a subset that could be done as an open source project.Much to my surprise, the time I spent working on this stuff was not wasted after all. After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.The subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn\u0026rsquo;t even have to hide. A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.The following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we\u0026rsquo;d used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I\u0026rsquo;d created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. [10]Wow, I thought, there\u0026rsquo;s an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors. The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine. Now anyone could publish anything.This had been possible in principle since 1993, but not many people had realized it yet. I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it. Even then it took me several years to understand the implications. It meant there would be a whole new generation of essays. [11]In the print era, the channel for publishing essays had been vanishingly small. Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties. There were so many essays that had never been written, because there had been no way to publish them. Now they could be, and I was going to write them. [12]I\u0026rsquo;ve worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online. From then on I knew that whatever else I did, I\u0026rsquo;d always write essays too.I knew that online essays would be a marginal medium at first. Socially they\u0026rsquo;d seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker. But by this point I knew enough to find that encouraging instead of discouraging.One of the most conspicuous patterns I\u0026rsquo;ve noticed in my life is how well it has worked, for me at least, to work on things that weren\u0026rsquo;t prestigious. Still life has always been the least prestigious form of painting. Viaweb and Y Combinator both seemed lame when we started them. I still get the glassy eye from strangers when they ask what I\u0026rsquo;m writing, and I explain that it\u0026rsquo;s an essay I\u0026rsquo;m going to publish on my web site. Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.It\u0026rsquo;s not that unprestigious types of work are good per se. But when you find yourself drawn to some kind of work despite its current lack of prestige, it\u0026rsquo;s a sign both that there\u0026rsquo;s something real to be discovered there, and that you have the right kind of motives. Impure motives are a big danger for the ambitious. If anything is going to lead you astray, it will be the desire to impress people. So while working on things that aren\u0026rsquo;t prestigious doesn\u0026rsquo;t guarantee you\u0026rsquo;re on the right track, it at least guarantees you\u0026rsquo;re not on the most common type of wrong one.Over the next several years I wrote lots of essays about all kinds of different topics. O\u0026rsquo;Reilly reprinted a collection of them as a book, called Hackers \u0026amp; Painters after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.One night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party. So for every guest, two thirds of the other guests would be people they didn\u0026rsquo;t know but would probably like. One of the guests was someone I didn\u0026rsquo;t know but would turn out to like a lot: a woman called Jessica Livingston. A couple days later I asked her out.Jessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of interviews with startup founders.When the bank had financial problems and she had to fire half her staff, she started looking for a new job. In early 2005 she interviewed for a marketing job at a Boston VC firm. It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital. They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.One of my tricks for writing essays had always been to give talks. The prospect of having to stand up in front of a group of people and tell them something that won\u0026rsquo;t waste their time is a great spur to the imagination. When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup. Maybe they\u0026rsquo;d be able to avoid the worst of the mistakes we\u0026rsquo;d made.So I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they\u0026rsquo;d be sources of advice too. Whereupon it seemed they were all looking expectantly at me. Horrified at the prospect of having my inbox flooded by business plans (if I\u0026rsquo;d only known), I blurted out \u0026ldquo;But not me!\u0026rdquo; and went on with the talk. But afterward it occurred to me that I should really stop procrastinating about angel investing. I\u0026rsquo;d been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn\u0026rsquo;t done one angel investment.Meanwhile I had been scheming with Robert and Trevor about projects we could work on together. I missed working with them, and it seemed like there had to be something we could collaborate on.As Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged. Screw the VCs who were taking so long to make up their minds. We\u0026rsquo;d start our own investment firm and actually implement the ideas we\u0026rsquo;d been talking about. I\u0026rsquo;d fund it, and Jessica could quit her job and work for it, and we\u0026rsquo;d get Robert and Trevor as partners too. [13]Once again, ignorance worked in our favor. We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from. So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.There are multiple components to Y Combinator, and we didn\u0026rsquo;t figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn\u0026rsquo;t go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we\u0026rsquo;d been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company. We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that? Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.YC was not organized as a fund. It was cheap enough to run that we funded it with our own money. That went right by 99% of readers, but professional investors are thinking \u0026ldquo;Wow, that means they got all the returns.\u0026rdquo; But once again, this was not due to any particular insight on our part. We didn\u0026rsquo;t know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn\u0026rsquo;t have known where to start. [14]The most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them. That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing. We needed to get experience as investors. What better way, we thought, than to fund a whole bunch of startups at once? We knew undergrads got temporary jobs at tech companies during the summer. Why not organize a summer program where they\u0026rsquo;d start startups instead? We wouldn\u0026rsquo;t feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders. So while we probably wouldn\u0026rsquo;t make much money out of it, we\u0026rsquo;d at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.We\u0026rsquo;d use the building I owned in Cambridge as our headquarters. We\u0026rsquo;d all have dinner there once a week  on tuesdays, since I was already cooking for the thursday diners on thursdays  and after dinner we\u0026rsquo;d bring in experts on startups to give talks.We knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply. I had never imagined that writing essays would be a way to get \u0026ldquo;deal flow,\u0026rdquo; as investors call it, but it turned out to be the perfect source. [15] We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who\u0026rsquo;d already graduated, or were about to that spring. Already this SFP thing was starting to feel more serious than we\u0026rsquo;d intended.We invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund. They were an impressive group. That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC. I don\u0026rsquo;t think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.The deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. [16]Fairly quickly I realized that we had stumbled upon the way to scale startup funding. Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too. It solved one of the biggest problems faced by founders: the isolation. Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.As YC grew, we started to notice other advantages of scale. The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in. We also noticed that the startups were becoming one another\u0026rsquo;s customers. We used to refer jokingly to the \u0026ldquo;YC GDP,\u0026rdquo; but as YC grows this becomes less and less of a joke. Now lots of startups get their initial set of customers almost entirely from among their batchmates.I had not originally intended YC to be a full-time job. I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.In the summer of 2006, Robert and I started working on a new version of Arc. This one was reasonably fast, because it was compiled into Scheme. To test this new Arc, I wrote Hacker News in it. It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups. Plus it wasn\u0026rsquo;t startup founders we wanted to reach. It was future startup founders. So I changed the name to Hacker News and the topic to whatever engaged one\u0026rsquo;s intellectual curiosity.HN was no doubt good for YC, but it was also by far the biggest source of stress for me. If all I\u0026rsquo;d had to do was select and help founders, life would have been so easy. And that implies that HN was a mistake. Surely the biggest source of stress in one\u0026rsquo;s work should at least be something close to the core of the work. Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe. When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined. [17]As well as HN, I wrote all of YC\u0026rsquo;s internal software in Arc. But while I continued to work a good deal in Arc, I gradually stopped working on Arc, partly because I didn\u0026rsquo;t have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it. So now my three projects were reduced to two: writing essays and working on YC.YC was different from other kinds of work I\u0026rsquo;ve done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn\u0026rsquo;t have picked a better way to do it.There were parts of the job I didn\u0026rsquo;t like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn\u0026rsquo;t like. I was haunted by something Kevin Hale once said about companies: \u0026ldquo;No one works harder than the boss.\u0026rdquo; He meant it both descriptively and prescriptively, and it was the second part that scared me. I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I\u0026rsquo;d better work very hard.One day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice. I can only remember him doing that once before. One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital. That was what it took for Rtm to offer unsolicited advice. So I remember his exact words very clearly. \u0026ldquo;You know,\u0026rdquo; he said, \u0026ldquo;you should make sure Y Combinator isn\u0026rsquo;t the last cool thing you do.\u0026ldquo;At the time I didn\u0026rsquo;t understand what he meant, but gradually it dawned on me that he was saying I should quit. This seemed strange advice, because YC was doing great. But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong. So this set me thinking. It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention. It had already eaten Arc, and was in the process of eating essays too. Either YC was my life\u0026rsquo;s work or I\u0026rsquo;d have to leave eventually. And it wasn\u0026rsquo;t, so I would.In the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer. The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it. I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights. On one of them I realized I was ready to hand YC over to someone else.I asked Jessica if she wanted to be president, but she didn\u0026rsquo;t, so we decided we\u0026rsquo;d try to recruit Sam Altman. We talked to Robert and Trevor and we agreed to make it a complete changing of the guard. Up till that point YC had been controlled by the original LLC we four had started. But we wanted YC to last for a long time, and to do that it couldn\u0026rsquo;t be controlled by the founders. So if Sam said yes, we\u0026rsquo;d let him reorganize YC. Robert and I would retire, and Jessica and Trevor would become ordinary partners.When we asked Sam if he wanted to be president of YC, initially he said no. He wanted to start a startup to make nuclear reactors. But I kept at it, and in October 2013 he finally agreed. We decided he\u0026rsquo;d take over starting with the winter 2014 batch. For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.She died on January 15, 2014. We knew this was coming, but it was still hard when it did.I kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I\u0026rsquo;m interested in, but that only takes a few hours a week.)What should I do next? Rtm\u0026rsquo;s advice hadn\u0026rsquo;t included anything about that. I wanted to do something completely different, so I decided I\u0026rsquo;d paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting. I was rusty and it took a while to get back into shape, but it was at least completely engaging. [18]I spent most of the rest of 2014 painting. I\u0026rsquo;d never been able to work so uninterruptedly before, and I got to be better than I had been. Not good enough, but better. Then in November, right in the middle of a painting, I ran out of steam. Up till that point I\u0026rsquo;d always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore. So I stopped working on it and cleaned my brushes and haven\u0026rsquo;t painted since. So far anyway.I realize that sounds rather wimpy. But attention is a zero sum game. If you can choose what to work on, and you choose a project that\u0026rsquo;s not the best one (or at least a good one) for you, then it\u0026rsquo;s getting in the way of another project that is. And at 50 there was some opportunity cost to screwing around.I started writing essays again, and wrote a bunch of new ones over the next few months. I even wrote a couple that weren\u0026rsquo;t about startups. Then in March 2015 I started working on Lisp again.The distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself. It wasn\u0026rsquo;t originally intended as a programming language in the ordinary sense. It was meant to be a formal model of computation, an alternative to the Turing machine. If you want to write an interpreter for a language in itself, what\u0026rsquo;s the minimum set of predefined operators you need? The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. [19]McCarthy didn\u0026rsquo;t realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy\u0026rsquo;s interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn\u0026rsquo;t match. It was this that attracted me in college, though I didn\u0026rsquo;t understand why at the time.McCarthy\u0026rsquo;s 1960 Lisp did nothing more than interpret Lisp expressions. It was missing a lot of things you\u0026rsquo;d want in a programming language. So these had to be added, and when they were, they weren\u0026rsquo;t defined using McCarthy\u0026rsquo;s original axiomatic approach. That wouldn\u0026rsquo;t have been feasible at the time. McCarthy tested his interpreter by hand-simulating the execution of programs. But it was already getting close to the limit of interpreters you could test that way  indeed, there was a bug in it that McCarthy had overlooked. To test a more complicated interpreter, you\u0026rsquo;d have had to run it, and computers then weren\u0026rsquo;t powerful enough.Now they are, though. Now you could continue using McCarthy\u0026rsquo;s axiomatic approach till you\u0026rsquo;d defined a complete programming language. And as long as every change you made to McCarthy\u0026rsquo;s Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.I wrote this new Lisp, called Bel, in itself in Arc. That may sound like a contradiction, but it\u0026rsquo;s an indication of the sort of trickery I had to engage in to make this work. By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run. Not fast, but fast enough to test.I had to ban myself from writing essays during most of this time, or I\u0026rsquo;d never have finished. In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code. Not so much because it was badly written as because the problem is so convoluted. When you\u0026rsquo;re working on an interpreter written in itself, it\u0026rsquo;s hard to keep track of what\u0026rsquo;s happening at what level, and errors can be practically encrypted by the time you get them.So I said no more essays till Bel was done. But I told few people about Bel while I was working on it. So for years it must have seemed that I was doing nothing, when in fact I was working harder than I\u0026rsquo;d ever worked on anything. Occasionally after wrestling for hours with some gruesome bug I\u0026rsquo;d check Twitter or HN and see someone asking \u0026ldquo;Does Paul Graham still code?\u0026ldquo;Working on Bel was hard but satisfying. I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there. I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools. It felt like I was doing life right. I remember that because I was slightly dismayed at how novel it felt. The good news is that I had more moments like this over the next few years.In the summer of 2016 we moved to England. We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice. We only meant to stay for a year, but we liked it so much that we still live there. So most of Bel was written in England.In the fall of 2019, Bel was finally finished. Like McCarthy\u0026rsquo;s original Lisp, it\u0026rsquo;s a spec rather than an implementation, although like McCarthy\u0026rsquo;s Lisp it\u0026rsquo;s a spec expressed as code.Now that I could write essays again, I wrote a bunch about topics I\u0026rsquo;d had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past? I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be. If this surprised me, who\u0026rsquo;d lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives. So I wrote a more detailed version for others to read, and this is the last sentence of it. Notes[1] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.[2] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like polluzione). It\u0026rsquo;s the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.[3] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco. I saw Florence at street level in every possible condition, from empty dark winter evenings to sweltering summer days when the streets were packed with tourists.[4] You can of course paint people like still lives if you want to, and they\u0026rsquo;re willing. That sort of portrait is arguably the apex of still life painting, though the long sitting does tend to produce pained expressions in the sitters.[5] Interleaf was one of many companies that had smart people and built impressive technology, and yet got crushed by Moore\u0026rsquo;s Law. In the 1990s the exponential growth in the power of commodity (i.e. Intel) processors rolled up high-end, special-purpose hardware and software companies like a bulldozer.[6] The signature style seekers at RISD weren\u0026rsquo;t specifically mercenary. In the art world, money and coolness are tightly coupled. Anything expensive comes to be seen as cool, and anything seen as cool will soon become equally expensive.[7] Technically the apartment wasn\u0026rsquo;t rent-controlled but rent-stabilized, but this is a refinement only New Yorkers would know or care about. The point is that it was really cheap, less than half market price.[8] Most software you can launch as soon as it\u0026rsquo;s done. But when the software is an online store builder and you\u0026rsquo;re hosting the stores, if you don\u0026rsquo;t have any users yet, that fact will be painfully obvious. So before we could launch publicly we had to launch privately, in the sense of recruiting an initial set of users and making sure they had decent-looking stores.[9] We\u0026rsquo;d had a code editor in Viaweb for users to define their own page styles. They didn\u0026rsquo;t know it, but they were editing Lisp expressions underneath. But this wasn\u0026rsquo;t an app editor, because the code ran when the merchants\u0026rsquo; sites were generated, not when shoppers visited them.[10] This was the first instance of what is now a familiar experience, and so was what happened next, when I read the comments and found they were full of angry people. How could I claim that Lisp was better than other languages? Weren\u0026rsquo;t they all Turing complete? People who see the responses to essays I write sometimes tell me how sorry they feel for me, but I\u0026rsquo;m not exaggerating when I reply that it has always been like this, since the very beginning. It comes with the territory. An essay must tell readers things they don\u0026rsquo;t already know, and some people dislike being told such things.[11] People put plenty of stuff on the internet in the 90s of course, but putting something online is not the same as publishing it online. Publishing online means you treat the online version as the (or at least a) primary version.[12] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints. Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs\u0026rsquo; customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.Which in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).Here\u0026rsquo;s an interesting point, though: you can\u0026rsquo;t always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?[13] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn\u0026rsquo;t want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.I picked orange as our color partly because it\u0026rsquo;s the warmest, and partly because no VC used it. In 2005 all the VCs used staid colors like maroon, navy blue, and forest green, because they were trying to appeal to LPs, not founders. The YC logo itself is an inside joke: the Viaweb logo had been a white V on a red circle, so I made the YC logo a white Y on an orange square.[14] YC did become a fund for a couple years starting in 2009, because it was getting so big I could no longer afford to fund it personally. But after Heroku got bought we had enough money to go back to being self-funded.[15] I\u0026rsquo;ve never liked the term \u0026ldquo;deal flow,\u0026rdquo; because it implies that the number of new startups at any given time is fixed. This is not only false, but it\u0026rsquo;s the purpose of YC to falsify it, by causing startups to be founded that would not otherwise have existed.[16] She reports that they were all different shapes and sizes, because there was a run on air conditioners and she had to get whatever she could, but that they were all heavier than she could carry now.[17] Another problem with HN was a bizarre edge case that occurs when you both write essays and run a forum. When you run a forum, you\u0026rsquo;re assumed to see if not every conversation, at least every conversation involving you. And when you write essays, people post highly imaginative misinterpretations of them on forums. Individually these two phenomena are tedious but bearable, but the combination is disastrous. You actually have to respond to the misinterpretations, because the assumption that you\u0026rsquo;re present in the conversation means that not responding to any sufficiently upvoted misinterpretation reads as a tacit admission that it\u0026rsquo;s correct. But that in turn encourages more; anyone who wants to pick a fight with you senses that now is their chance.[18] The worst thing about leaving YC was not working with Jessica anymore. We\u0026rsquo;d been working on YC almost the whole time we\u0026rsquo;d known each other, and we\u0026rsquo;d neither tried nor wanted to separate it from our personal lives, so leaving was like pulling up a deeply rooted tree.[19] One way to get more precise about the concept of invented vs discovered is to talk about space aliens. Any sufficiently advanced alien civilization would certainly know about the Pythagorean theorem, for example. I believe, though with less certainty, that they would also know about the Lisp in McCarthy\u0026rsquo;s 1960 paper.But if so there\u0026rsquo;s no reason to suppose that this is the limit of the language that might be known to them. Presumably aliens need numbers and errors and I/O too. So it seems likely there exists at least one path out of McCarthy\u0026rsquo;s Lisp along which discoveredness is preserved.Thanks to Trevor Blackwell, John Collison, Patrick Collison, Daniel Gackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj Taggar for reading drafts of this.\n",
    "description": "",
    "tags": ["programming","art","startups","ycombinator","lisp","life","career"],
    "categories": [],
    "content": "→ 中文版\nWhat I Worked On February 2021\nBefore college the two main things I worked on, outside of school, were writing and programming. I didn\u0026rsquo;t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\nThe first programs I tried writing were on the IBM 1401 that our school district used for what was then called \u0026ldquo;data processing.\u0026rdquo; This was in 9th grade, so I was 13 or 14. The school district\u0026rsquo;s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain\u0026rsquo;s lair down there, with all these alien-looking machines  CPU, disk drives, printer, card reader  sitting up on a raised floor under bright fluorescent lights.The language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.I was puzzled by the 1401. I couldn\u0026rsquo;t figure out what to do with it. And in retrospect there\u0026rsquo;s not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn\u0026rsquo;t have any data stored on punched cards. The only other option was to do things that didn\u0026rsquo;t rely on any input, like calculate approximations of pi, but I didn\u0026rsquo;t know enough math to do anything interesting of that type. So I\u0026rsquo;m not surprised I can\u0026rsquo;t remember any programs I wrote, because they can\u0026rsquo;t have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn\u0026rsquo;t. On a machine without time-sharing, this was a social as well as a technical error, as the data center …"
  },{
    "title": "What I've Learned from Hacker News",
    "url": "/paul_graham/essays_en/hackernews/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat I\u0026rsquo;ve Learned from Hacker News February 2009\nHacker News was two years old last week. Initially it was supposed to be a side project—an application to sharpen Arc on, and a place for current and future Y Combinator founders to exchange news. It\u0026rsquo;s grown bigger and taken up more time than I expected, but I don\u0026rsquo;t regret that because I\u0026rsquo;ve learned so much from working on it.\nGrowth When we launched in February 2007, weekday traffic was around 1600 daily uniques. It\u0026rsquo;s since grown to around 22,000. This growth rate is a bit higher than I\u0026rsquo;d like. I\u0026rsquo;d like the site to grow, since a site that isn\u0026rsquo;t growing at least slowly is probably dead. But I wouldn\u0026rsquo;t want it to grow as large as Digg or Reddit—mainly because that would dilute the character of the site, but also because I don\u0026rsquo;t want to spend all my time dealing with scaling.\n",
    "description": "",
    "tags": ["hacker news","community","social media","platforms","online communities"],
    "categories": [],
    "content": "→ 中文版本\nWhat I\u0026rsquo;ve Learned from Hacker News February 2009\nHacker News was two years old last week. Initially it was supposed to be a side project—an application to sharpen Arc on, and a place for current and future Y Combinator founders to exchange news. It\u0026rsquo;s grown bigger and taken up more time than I expected, but I don\u0026rsquo;t regret that because I\u0026rsquo;ve learned so much from working on it.\nGrowth When we launched in February 2007, weekday traffic was around 1600 daily uniques. It\u0026rsquo;s since grown to around 22,000. This growth rate is a bit higher than I\u0026rsquo;d like. I\u0026rsquo;d like the site to grow, since a site that isn\u0026rsquo;t growing at least slowly is probably dead. But I wouldn\u0026rsquo;t want it to grow as large as Digg or Reddit—mainly because that would dilute the character of the site, but also because I don\u0026rsquo;t want to spend all my time dealing with scaling.\nI already have problems enough with that. Remember, the original motivation for HN was to test a new programming language, and moreover one that\u0026rsquo;s focused on experimenting with language design, not performance. Every time the site gets slow, I fortify myself by recalling McIlroy and Bentley\u0026rsquo;s famous quote \u0026ldquo;The key to performance is elegance, not battalions of special cases.\u0026rdquo; and look for the bottleneck I can remove with least code. So far I\u0026rsquo;ve been able to keep up, in the sense that performance has remained consistently mediocre despite 14x growth. I don\u0026rsquo;t know what I\u0026rsquo;ll do next, but I\u0026rsquo;ll probably think of something.\nThis is my attitude to the site generally. Hacker News is an experiment, and an experiment in a very young field. Sites of this type are only a few years old. Internet conversation generally is only a few decades old. So we\u0026rsquo;ve probably only discovered a fraction of what we eventually will.\nThat\u0026rsquo;s why I\u0026rsquo;m so optimistic about HN. When a technology is this young, the existing solutions are usually terrible; …"
  },{
    "title": "What I've Learned from Users",
    "url": "/paul_graham/essays_en/users/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat I\u0026rsquo;ve Learned from Users September 2022\nI recently told applicants to Y Combinator that the best advice I could give for getting in, per word, was \u0026ldquo;Explain what you\u0026rsquo;ve learned from users.\u0026rdquo; That tests a lot of things: whether you\u0026rsquo;re paying attention to users, how well you understand them, and even how much they need what you\u0026rsquo;re making.\nAfterward I asked myself the same question. What have I learned from YC\u0026rsquo;s users, the startups we\u0026rsquo;ve funded?\n",
    "description": "",
    "tags": ["startup","users","y_combinator","advice","learning","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版本\nWhat I\u0026rsquo;ve Learned from Users September 2022\nI recently told applicants to Y Combinator that the best advice I could give for getting in, per word, was \u0026ldquo;Explain what you\u0026rsquo;ve learned from users.\u0026rdquo; That tests a lot of things: whether you\u0026rsquo;re paying attention to users, how well you understand them, and even how much they need what you\u0026rsquo;re making.\nAfterward I asked myself the same question. What have I learned from YC\u0026rsquo;s users, the startups we\u0026rsquo;ve funded?\nThe first thing that came to mind was that most startups have the same problems. No two have exactly the same problems, but it\u0026rsquo;s surprising how much the problems remain the same, regardless of what they\u0026rsquo;re making. Once you\u0026rsquo;ve advised 100 startups all doing different things, you rarely encounter problems you haven\u0026rsquo;t seen before.\nThis fact is one of the things that makes YC work. But I didn\u0026rsquo;t know it when we started YC. I only had a few data points: our own startup, and those started by friends. It was a surprise to me how often the same problems recur in different forms. Many later stage investors might never realize this, because later stage investors might not advise 100 startups in their whole career, but a YC partner will get this much experience in the first year or two.\nThat\u0026rsquo;s one advantage of funding large numbers of early stage companies rather than smaller numbers of later-stage ones. You get a lot of data. Not just because you\u0026rsquo;re looking at more companies, but also because more goes wrong.\nBut knowing (nearly) all the problems startups can encounter doesn\u0026rsquo;t mean that advising them can be automated, or reduced to a formula. There\u0026rsquo;s no substitute for individual office hours with a YC partner. Each startup is unique, which means they have to be advised by specific partners who know them well. [1]\nWe learned that the hard way, in the notorious \u0026ldquo;batch that broke YC\u0026rdquo; in the summer of 2012. Up till that …"
  },{
    "title": "What Kate Saw in Silicon Valley",
    "url": "/paul_graham/essays_en/kate/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat Kate Saw in Silicon Valley August 2009\nKate Courteau is the architect who designed Y Combinator\u0026rsquo;s office. Recently we managed to recruit her to help us run YC when she\u0026rsquo;s not busy with architectural projects. Though she\u0026rsquo;d heard a lot about YC since the beginning, the last 9 months have been a total immersion.\nI\u0026rsquo;ve been around the startup world for so long that it seems normal to me, so I was curious to hear what had surprised her most about it. This was her list:\n",
    "description": "",
    "tags": ["silicon_valley","startup_culture","observation","y_combinator","founders","venture_capital","innovation"],
    "categories": [],
    "content": "→ 中文版本\nWhat Kate Saw in Silicon Valley August 2009\nKate Courteau is the architect who designed Y Combinator\u0026rsquo;s office. Recently we managed to recruit her to help us run YC when she\u0026rsquo;s not busy with architectural projects. Though she\u0026rsquo;d heard a lot about YC since the beginning, the last 9 months have been a total immersion.\nI\u0026rsquo;ve been around the startup world for so long that it seems normal to me, so I was curious to hear what had surprised her most about it. This was her list:\nHow many startups fail. Kate knew in principle that startups were very risky, but she was surprised to see how constant the threat of failure was — not just for the minnows, but even for the famous startups whose founders came to speak at YC dinners.\nHow much startups\u0026rsquo; ideas change. As usual, by Demo Day about half the startups were doing something significantly different than they started with. We encourage that. Starting a startup is like science in that you have to follow the truth wherever it leads. In the rest of the world, people don\u0026rsquo;t start things till they\u0026rsquo;re sure what they want to do, and once started they tend to continue on their initial path even if it\u0026rsquo;s mistaken.\nHow little money it can take to start a startup. In Kate\u0026rsquo;s world, everything is still physical and expensive. You can barely renovate a bathroom for the cost of starting a startup.\nHow scrappy founders are. That was her actual word. I agree with her, but till she mentioned this it never occurred to me how little this quality is appreciated in most of the rest of the world. It wouldn\u0026rsquo;t be a compliment in most organizations to call someone scrappy.\nWhat does it mean, exactly? It\u0026rsquo;s basically the diminutive form of belligerent. Someone who\u0026rsquo;s scrappy manages to be both threatening and undignified at the same time. Which seems to me exactly what one would want to be, in any kind of work. If you\u0026rsquo;re not threatening, you\u0026rsquo;re probably not doing anything …"
  },{
    "title": "What Languages Fix",
    "url": "/paul_graham/essays_en/fix/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat Languages Fix Kevin Kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. The surprising thing is how many, and how well, languages can be described this way.\nAlgol: Assembly language is too low-level.\nPascal: Algol doesn\u0026rsquo;t have enough data types.\nModula: Pascal is too wimpy for systems programming.\nSimula: Algol isn\u0026rsquo;t good enough at simulations.\nSmalltalk: Not everything in Simula is an object.\n",
    "description": "",
    "tags": ["programming","languages","software","technology","development"],
    "categories": [],
    "content": "→ 中文版本\nWhat Languages Fix Kevin Kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. The surprising thing is how many, and how well, languages can be described this way.\nAlgol: Assembly language is too low-level.\nPascal: Algol doesn\u0026rsquo;t have enough data types.\nModula: Pascal is too wimpy for systems programming.\nSimula: Algol isn\u0026rsquo;t good enough at simulations.\nSmalltalk: Not everything in Simula is an object.\nFortran: Assembly language is too low-level.\nCobol: Fortran is scary.\nPL/1: Fortran doesn\u0026rsquo;t have enough data types.\nAda: Every existing language is missing something.\nBasic: Fortran is scary.\nAPL: Fortran isn\u0026rsquo;t good enough at manipulating arrays.\nJ: APL requires its own character set.\nC: Assembly language is too low-level.\nC++: C is too low-level.\nJava: C++ is a kludge. And Microsoft is going to crush us.\nC#: Java is controlled by Sun.\nLisp: Turing Machines are an awkward way to describe computation.\nScheme: MacLisp is a kludge.\nT: Scheme has no libraries.\nCommon Lisp: There are too many dialects of Lisp.\nDylan: Scheme has no libraries, and Lisp syntax is scary.\nPerl: Shell scripts/awk/sed are not enough like programming languages.\nPython: Perl is a kludge.\nRuby: Perl is a kludge, and Lisp syntax is scary.\nProlog: Programming is not enough like logic.\n"
  },{
    "title": "What Made Lisp Different",
    "url": "/paul_graham/essays_en/diff/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nWhat Made Lisp Different December 2001 (rev. May 2002)\n(This article came about in response to some questions on the LL1 mailing list. It is now incorporated in Revenge of the Nerds.)\nWhen McCarthy designed Lisp in the late 1950s, it was a radical departure from existing languages, the most important of which was Fortran.\nLisp embodied nine new ideas:\nConditionals. A conditional is an if-then-else construct. We take these for granted now. They were invented by McCarthy in the course of developing Lisp. (Fortran at that time only had a conditional goto, closely based on the branch instruction in the underlying hardware.) McCarthy, who was on the Algol committee, got conditionals into Algol, whence they spread to most other languages.\n",
    "description": "",
    "tags": ["lisp","programming languages","history","technology","innovation","computer science"],
    "categories": [],
    "content": "→ Chinese Version\nWhat Made Lisp Different December 2001 (rev. May 2002)\n(This article came about in response to some questions on the LL1 mailing list. It is now incorporated in Revenge of the Nerds.)\nWhen McCarthy designed Lisp in the late 1950s, it was a radical departure from existing languages, the most important of which was Fortran.\nLisp embodied nine new ideas:\nConditionals. A conditional is an if-then-else construct. We take these for granted now. They were invented by McCarthy in the course of developing Lisp. (Fortran at that time only had a conditional goto, closely based on the branch instruction in the underlying hardware.) McCarthy, who was on the Algol committee, got conditionals into Algol, whence they spread to most other languages.\nA function type. In Lisp, functions are first class objects\u0026ndash; they\u0026rsquo;re a data type just like integers, strings, etc, and have a literal representation, can be stored in variables, can be passed as arguments, and so on.\nRecursion. Recursion existed as a mathematical concept before Lisp of course, but Lisp was the first programming language to support it. (It\u0026rsquo;s arguably implicit in making functions first class objects.)\nA new concept of variables. In Lisp, all variables are effectively pointers. Values are what have types, not variables, and assigning or binding variables means copying pointers, not what they point to.\nGarbage-collection.\nPrograms composed of expressions. Lisp programs are trees of expressions, each of which returns a value. (In some Lisps expressions can return multiple values.) This is in contrast to Fortran and most succeeding languages, which distinguish between expressions and statements.\nIt was natural to have this distinction in Fortran because (not surprisingly in a language where the input format was punched cards) the language was line-oriented. You could not nest statements. And so while you needed expressions for math to work, there was no point in making anything else return a …"
  },{
    "title": "What Microsoft Is this the Altair Basic of?",
    "url": "/paul_graham/essays_en/altair/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat Microsoft Is this the Altair Basic of? February 2015\nOne of the most valuable exercises you can try if you want to understand startups is to look at the most successful companies and explain why they were not as lame as they seemed when they first launched. Because they practically all seemed lame at first. Not just small, lame. Not just the first step up a big mountain. More like the first step into a swamp.\n",
    "description": "",
    "tags": ["startup","microsoft","ideas","innovation","vision"],
    "categories": [],
    "content": "→ 中文版本\nWhat Microsoft Is this the Altair Basic of? February 2015\nOne of the most valuable exercises you can try if you want to understand startups is to look at the most successful companies and explain why they were not as lame as they seemed when they first launched. Because they practically all seemed lame at first. Not just small, lame. Not just the first step up a big mountain. More like the first step into a swamp.\nA Basic interpreter for the Altair? How could that ever grow into a giant company? People sleeping on airbeds in strangers\u0026rsquo; apartments? A web site for college students to stalk one another? A wimpy little single-board computer for hobbyists that used a TV as a monitor? A new search engine, when there were already about 10, and they were all trying to de-emphasize search? These ideas didn\u0026rsquo;t just seem small. They seemed wrong. They were the kind of ideas you could not merely ignore, but ridicule.\nOften the founders themselves didn\u0026rsquo;t know why their ideas were promising. They were attracted to these ideas by instinct, because they were living in the future and they sensed that something was missing. But they could not have put into words exactly how their ugly ducklings were going to grow into big, beautiful swans.\nMost people\u0026rsquo;s first impulse when they hear about a lame-sounding new startup idea is to make fun of it. Even a lot of people who should know better.\nWhen I encounter a startup with a lame-sounding idea, I ask \u0026ldquo;What Microsoft is this the Altair Basic of?\u0026rdquo; Now it\u0026rsquo;s a puzzle, and the burden is on me to solve it. Sometimes I can\u0026rsquo;t think of an answer, especially when the idea is a made-up one. But it\u0026rsquo;s remarkable how often there does turn out to be an answer. Often it\u0026rsquo;s one the founders themselves hadn\u0026rsquo;t seen yet.\nIntriguingly, there are sometimes multiple answers. I talked to a startup a few days ago that could grow into 3 distinct Microsofts. They\u0026rsquo;d probably vary in size by …"
  },{
    "title": "What Startups Are Really Like",
    "url": "/paul_graham/essays_en/really/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat Startups Are Really Like October 2009\n(This essay is derived from a talk at the 2009 Startup School.)\nI wasn\u0026rsquo;t sure what to talk about at Startup School, so I decided to ask the founders of the startups we\u0026rsquo;d funded. What hadn\u0026rsquo;t I written about yet?\nI\u0026rsquo;m in the unusual position of being able to test the essays I write about startups. I hope the ones on other topics are right, but I have no way to test them. The ones on startups get tested by about 70 people every 6 months.\n",
    "description": "",
    "tags": ["startup","founder","entrepreneur","persistence","cofounders","emotional","experience"],
    "categories": [],
    "content": "→ 中文版本\nWhat Startups Are Really Like October 2009\n(This essay is derived from a talk at the 2009 Startup School.)\nI wasn\u0026rsquo;t sure what to talk about at Startup School, so I decided to ask the founders of the startups we\u0026rsquo;d funded. What hadn\u0026rsquo;t I written about yet?\nI\u0026rsquo;m in the unusual position of being able to test the essays I write about startups. I hope the ones on other topics are right, but I have no way to test them. The ones on startups get tested by about 70 people every 6 months.\nSo I sent all the founders an email asking what surprised them about starting a startup. This amounts to asking what I got wrong, because if I\u0026rsquo;d explained things well enough, nothing should have surprised them.\nI\u0026rsquo;m proud to report I got one response saying: What surprised me the most is that everything was actually fairly predictable! The bad news is that I got over 100 other responses listing the surprises they encountered.\nThere were very clear patterns in the responses; it was remarkable how often several people had been surprised by exactly the same thing. These were the biggest:\n1. Be Careful with Cofounders This was the surprise mentioned by the most founders. There were two types of responses: that you have to be careful who you pick as a cofounder, and that you have to work hard to maintain your relationship.\nWhat people wished they\u0026rsquo;d paid more attention to when choosing cofounders was character and commitment, not ability. This was particularly true with startups that failed. The lesson: don\u0026rsquo;t pick cofounders who will flake.\nHere\u0026rsquo;s a typical reponse: You haven\u0026rsquo;t seen someone\u0026rsquo;s true colors unless you\u0026rsquo;ve worked with them on a startup. The reason character is so important is that it\u0026rsquo;s tested more severely than in most other situations. One founder said explicitly that the relationship between founders was more important than ability: I would rather cofound a startup with a friend than a stranger with …"
  },{
    "title": "What the Bubble Got Right",
    "url": "/paul_graham/essays_en/bubble/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat the Bubble Got Right September 2004\n(This essay is derived from an invited talk at ICFP 2004.)\nI had a front row seat for the Internet Bubble, because I worked at Yahoo during 1998 and 1999. One day, when the stock was trading around $200, I sat down and calculated what I thought the price should be. The answer I got was $12. I went to the next cubicle and told my friend Trevor. \u0026ldquo;Twelve!\u0026rdquo; he said. He tried to sound indignant, but he didn\u0026rsquo;t quite manage it. He knew as well as I did that our valuation was crazy.\n",
    "description": "",
    "tags": ["bubble","internet","startups","technology","business","economy"],
    "categories": [],
    "content": "→ 中文版本\nWhat the Bubble Got Right September 2004\n(This essay is derived from an invited talk at ICFP 2004.)\nI had a front row seat for the Internet Bubble, because I worked at Yahoo during 1998 and 1999. One day, when the stock was trading around $200, I sat down and calculated what I thought the price should be. The answer I got was $12. I went to the next cubicle and told my friend Trevor. \u0026ldquo;Twelve!\u0026rdquo; he said. He tried to sound indignant, but he didn\u0026rsquo;t quite manage it. He knew as well as I did that our valuation was crazy.\nYahoo was a special case. It was not just our price to earnings ratio that was bogus. Half our earnings were too. Not in the Enron way, of course. The finance guys seemed scrupulous about reporting earnings. What made our earnings bogus was that Yahoo was, in effect, the center of a Ponzi scheme. Investors looked at Yahoo\u0026rsquo;s earnings and said to themselves, here is proof that Internet companies can make money. So they invested in new startups that promised to be the next Yahoo. And as soon as these startups got the money, what did they do with it? Buy millions of dollars worth of advertising on Yahoo to promote their brand. Result: a capital investment in a startup this quarter shows up as Yahoo earnings next quarter—stimulating another round of investments in startups.\nAs in a Ponzi scheme, what seemed to be the returns of this system were simply the latest round of investments in it. What made it not a Ponzi scheme was that it was unintentional. At least, I think it was. The venture capital business is pretty incestuous, and there were presumably people in a position, if not to create this situation, to realize what was happening and to milk it.\nA year later the game was up. Starting in January 2000, Yahoo\u0026rsquo;s stock price began to crash, ultimately losing 95% of its value.\nNotice, though, that even with all the fat trimmed off its market cap, Yahoo was still worth a lot. Even at the morning-after valuations of March and …"
  },{
    "title": "What to Do",
    "url": "/paul_graham/essays_en/do/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nWhat to Do March 2025\nWhat should one do? That may seem a strange question, but it\u0026rsquo;s not meaningless or unanswerable. It\u0026rsquo;s the sort of question kids ask before they learn not to ask big questions. I only came across it myself in the process of investigating something else. But once I did, I thought I should at least try to answer it.\nSo what should one do? One should help people, and take care of the world. Those two are obvious. But is there anything else? When I ask that, the answer that pops up is Make good new things.\n",
    "description": "",
    "tags": ["philosophy","ethics","creativity","purpose","meaning","life","principles","work"],
    "categories": [],
    "content": "→ Chinese Version\nWhat to Do March 2025\nWhat should one do? That may seem a strange question, but it\u0026rsquo;s not meaningless or unanswerable. It\u0026rsquo;s the sort of question kids ask before they learn not to ask big questions. I only came across it myself in the process of investigating something else. But once I did, I thought I should at least try to answer it.\nSo what should one do? One should help people, and take care of the world. Those two are obvious. But is there anything else? When I ask that, the answer that pops up is Make good new things.\nI can\u0026rsquo;t prove that one should do this, any more than I can prove that one should help people or take care of the world. We\u0026rsquo;re talking about first principles here. But I can explain why this principle makes sense. The most impressive thing humans can do is to think. It may be the most impressive thing that can be done. And the best kind of thinking, or more precisely the best proof that one has thought well, is to make good new things.\nI mean new things in a very general sense. Newton\u0026rsquo;s physics was a good new thing. Indeed, the first version of this principle was to have good new ideas. But that didn\u0026rsquo;t seem general enough: it didn\u0026rsquo;t include making art or music, for example, except insofar as they embody new ideas. And while they may embody new ideas, that\u0026rsquo;s not all they embody, unless you stretch the word \u0026ldquo;idea\u0026rdquo; so uselessly thin that it includes everything that goes through your nervous system.\nEven for ideas that one has consciously, though, I prefer the phrasing \u0026ldquo;make good new things.\u0026rdquo; There are other ways to describe the best kind of thinking. To make discoveries, for example, or to understand something more deeply than others have. But how well do you understand something if you can\u0026rsquo;t make a model of it, or write about it? Indeed, trying to express what you understand is not just a way to prove that you understand it, but a way to understand it …"
  },{
    "title": "What We Look for in Founders",
    "url": "/paul_graham/essays_en/founders/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat We Look for in Founders Want to start a startup? Get funded by Y Combinator.\nOctober 2010\n(I wrote this for Forbes, who asked me to write something about the qualities we look for in founders. In print they had to cut the last item because they didn\u0026rsquo;t have room.)\n1. Determination This has turned out to be the most important quality in startup founders. We thought when we started Y Combinator that the most important quality would be intelligence. That\u0026rsquo;s the myth in the Valley. And certainly you don\u0026rsquo;t want founders to be stupid. But as long as you\u0026rsquo;re over a certain threshold of intelligence, what matters most is determination. You\u0026rsquo;re going to hit a lot of obstacles. You can\u0026rsquo;t be the sort of person who gets demoralized easily.\n",
    "description": "",
    "tags": ["founders","qualities","determination","flexibility","imagination","naughtiness","friendship"],
    "categories": [],
    "content": "→ 中文版本\nWhat We Look for in Founders Want to start a startup? Get funded by Y Combinator.\nOctober 2010\n(I wrote this for Forbes, who asked me to write something about the qualities we look for in founders. In print they had to cut the last item because they didn\u0026rsquo;t have room.)\n1. Determination This has turned out to be the most important quality in startup founders. We thought when we started Y Combinator that the most important quality would be intelligence. That\u0026rsquo;s the myth in the Valley. And certainly you don\u0026rsquo;t want founders to be stupid. But as long as you\u0026rsquo;re over a certain threshold of intelligence, what matters most is determination. You\u0026rsquo;re going to hit a lot of obstacles. You can\u0026rsquo;t be the sort of person who gets demoralized easily.\nBill Clerico and Rich Aberman of WePay are a good example. They\u0026rsquo;re doing a finance startup, which means endless negotiations with big, bureaucratic companies. When you\u0026rsquo;re starting a startup that depends on deals with big companies to exist, it often feels like they\u0026rsquo;re trying to ignore you out of existence. But when Bill Clerico starts calling you, you may as well do what he asks, because he is not going away.\n2. Flexibility You do not however want the sort of determination implied by phrases like \u0026ldquo;don\u0026rsquo;t give up on your dreams.\u0026rdquo; The world of startups is so unpredictable that you need to be able to modify your dreams on the fly. The best metaphor I\u0026rsquo;ve found for the combination of determination and flexibility you need is a running back. He\u0026rsquo;s determined to get downfield, but at any given moment he may need to go sideways or even backwards to get there.\nThe current record holder for flexibility may be Daniel Gross of Greplin. He applied to YC with some bad ecommerce idea. We told him we\u0026rsquo;d fund him if he did something else. He thought for a second, and said ok. He then went through two more ideas before settling on Greplin. He\u0026rsquo;d only been …"
  },{
    "title": "What You (Want to)* Want",
    "url": "/paul_graham/essays_en/want/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat You (Want to)* Want November 2022\nSince I was about 9 I\u0026rsquo;ve been puzzled by the apparent contradiction between being made of matter that behaves in a predictable way, and the feeling that I could choose to do whatever I wanted. At the time I had a self-interested motive for exploring the question. At that age (like most succeeding ages) I was always in trouble with the authorities, and it seemed to me that there might possibly be some way to get out of trouble by arguing that I wasn\u0026rsquo;t responsible for my actions. I gradually lost hope of that, but the puzzle remained: How do you reconcile being a machine made of matter with the feeling that you\u0026rsquo;re free to choose what you do? [1]\n",
    "description": "",
    "tags": ["free will","desire","consciousness","decision making","philosophy","psychology"],
    "categories": [],
    "content": "→ 中文版本\nWhat You (Want to)* Want November 2022\nSince I was about 9 I\u0026rsquo;ve been puzzled by the apparent contradiction between being made of matter that behaves in a predictable way, and the feeling that I could choose to do whatever I wanted. At the time I had a self-interested motive for exploring the question. At that age (like most succeeding ages) I was always in trouble with the authorities, and it seemed to me that there might possibly be some way to get out of trouble by arguing that I wasn\u0026rsquo;t responsible for my actions. I gradually lost hope of that, but the puzzle remained: How do you reconcile being a machine made of matter with the feeling that you\u0026rsquo;re free to choose what you do? [1]\nThe best way to explain the answer may be to start with a slightly wrong version, and then fix it. The wrong version is: You can do what you want, but you can\u0026rsquo;t want what you want. Yes, you can control what you do, but you\u0026rsquo;ll do what you want, and you can\u0026rsquo;t control that.\nThe reason this is mistaken is that people do sometimes change what they want. People who don\u0026rsquo;t want to want something — drug addicts, for example — can sometimes make themselves stop wanting it. And people who want to want something — who want to like classical music, or broccoli — sometimes succeed.\nSo we modify our initial statement: You can do what you want, but you can\u0026rsquo;t want to want what you want.\nThat\u0026rsquo;s still not quite true. It\u0026rsquo;s possible to change what you want to want. I can imagine someone saying \u0026ldquo;I decided to stop wanting to like classical music.\u0026rdquo; But we\u0026rsquo;re getting closer to the truth. It\u0026rsquo;s rare for people to change what they want to want, and the more \u0026ldquo;want to\u0026quot;s we add, the rarer it gets.\nWe can get arbitrarily close to a true statement by adding more \u0026ldquo;want to\u0026quot;s in much the same way we can get arbitrarily close to 1 by adding more 9s to a string of 9s following a decimal point. In practice three or …"
  },{
    "title": "What You Can't Say",
    "url": "/paul_graham/essays_en/say/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat You Can\u0026rsquo;t Say January 2004\nHave you ever seen an old photo of yourself and been embarrassed at the way you looked? Did we actually dress like that? We did. And we had no idea how silly we looked. It\u0026rsquo;s the nature of fashion to be invisible, in the same way the movement of the earth is invisible to all of us riding on it.\nWhat scares me is that there are moral fashions too. They\u0026rsquo;re just as arbitrary, and just as invisible to most people. But they\u0026rsquo;re much more dangerous. Fashion is mistaken for good design; moral fashion is mistaken for good. Dressing oddly gets you laughed at. Violating moral fashions can get you fired, ostracized, imprisoned, or even killed.\n",
    "description": "",
    "tags": ["free_speech","moral_fashion","heresy","conformity","censorship","critical_thinking"],
    "categories": [],
    "content": "→ 中文版本\nWhat You Can\u0026rsquo;t Say January 2004\nHave you ever seen an old photo of yourself and been embarrassed at the way you looked? Did we actually dress like that? We did. And we had no idea how silly we looked. It\u0026rsquo;s the nature of fashion to be invisible, in the same way the movement of the earth is invisible to all of us riding on it.\nWhat scares me is that there are moral fashions too. They\u0026rsquo;re just as arbitrary, and just as invisible to most people. But they\u0026rsquo;re much more dangerous. Fashion is mistaken for good design; moral fashion is mistaken for good. Dressing oddly gets you laughed at. Violating moral fashions can get you fired, ostracized, imprisoned, or even killed.\nIf you could travel back in a time machine, one thing would be true no matter where you went: you\u0026rsquo;d have to watch what you said. Opinions we consider harmless could have gotten you in big trouble. I\u0026rsquo;ve already said at least one thing that would have gotten me in big trouble in most of Europe in the seventeenth century, and did get Galileo in big trouble when he said it — that the earth moves. [1] It seems to be a constant throughout history: In every period, people believed things that were just ridiculous, and believed them so strongly that you would have gotten in terrible trouble for saying otherwise.\nIs our time any different? To anyone who has read any amount of history, the answer is almost certainly no. It would be a remarkable coincidence if ours were the first era to get everything just right.\nIt\u0026rsquo;s tantalizing to think we believe things that people in the future will find ridiculous. What would someone coming back to visit us in a time machine have to be careful not to say? That\u0026rsquo;s what I want to study here. But I want to do more than just shock everyone with the heresy du jour. I want to find general recipes for discovering what you can\u0026rsquo;t say, in any era.\nThe Conformist Test Let\u0026rsquo;s start with a test: Do you have any opinions that you …"
  },{
    "title": "What You'll Wish You'd Known",
    "url": "/paul_graham/essays_en/hs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhat You\u0026rsquo;ll Wish You\u0026rsquo;d Known January 2005\n(I wrote this talk for a high school. I never actually gave it, because the school authorities vetoed the plan to invite me.)\nWhen I said I was speaking at a high school, my friends were curious. What will you say to high school students? So I asked them, what do you wish someone had told you in high school? Their answers were remarkably similar. So I\u0026rsquo;m going to tell you what we all wish someone had told us.\n",
    "description": "",
    "tags": ["high school","advice","education","curiosity","ambition","success","life lessons"],
    "categories": [],
    "content": "→ 中文版本\nWhat You\u0026rsquo;ll Wish You\u0026rsquo;d Known January 2005\n(I wrote this talk for a high school. I never actually gave it, because the school authorities vetoed the plan to invite me.)\nWhen I said I was speaking at a high school, my friends were curious. What will you say to high school students? So I asked them, what do you wish someone had told you in high school? Their answers were remarkably similar. So I\u0026rsquo;m going to tell you what we all wish someone had told us.\nI\u0026rsquo;ll start by telling you something you don\u0026rsquo;t have to know in high school: what you want to do with your life. People are always asking you this, so you think you\u0026rsquo;re supposed to have an answer. But adults ask this mainly as a conversation starter. They want to know what sort of person you are, and this question is just to get you talking. They ask it the way you might poke a hermit crab in a tide pool, to see what it does.\nIf I were back in high school and someone asked about my plans, I\u0026rsquo;d say that my first priority was to learn what the options were. You don\u0026rsquo;t need to be in a rush to choose your life\u0026rsquo;s work. What you need to do is discover what you like. You have to work on stuff you like if you want to be good at what you do.\nIt might seem that nothing would be easier than deciding what you like, but it turns out to be hard, partly because it\u0026rsquo;s hard to get an accurate picture of most jobs. Being a doctor is not the way it\u0026rsquo;s portrayed on TV. Fortunately you can also watch real doctors, by volunteering in hospitals. [1]\nBut there are other jobs you can\u0026rsquo;t learn about, because no one is doing them yet. Most of the work I\u0026rsquo;ve done in the last ten years didn\u0026rsquo;t exist when I was in high school. The world changes fast, and the rate at which it changes is itself speeding up. In such a world it\u0026rsquo;s not a good idea to have fixed plans.\nAnd yet every May, speakers all over the country fire up the Standard Graduation Speech, the theme of …"
  },{
    "title": "When To Do What You Love",
    "url": "/paul_graham/essays_en/when/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWhen To Do What You Love September 2024\nThere\u0026rsquo;s some debate about whether it\u0026rsquo;s a good idea to \u0026ldquo;follow your passion.\u0026rdquo; In fact the question is impossible to answer with a simple yes or no. Sometimes you should and sometimes you shouldn\u0026rsquo;t, but the border between should and shouldn\u0026rsquo;t is very complicated. The only way to give a general answer is to trace it.\nWhen people talk about this question, there\u0026rsquo;s always an implicit \u0026ldquo;instead of.\u0026rdquo; All other things being equal, why wouldn\u0026rsquo;t you work on what interests you the most? So even raising the question implies that all other things aren\u0026rsquo;t equal, and that you have to choose between working on what interests you the most and something else, like what pays the best.\n",
    "description": "",
    "tags": ["passion","career","money","startup","work"],
    "categories": [],
    "content": "→ 中文版\nWhen To Do What You Love September 2024\nThere\u0026rsquo;s some debate about whether it\u0026rsquo;s a good idea to \u0026ldquo;follow your passion.\u0026rdquo; In fact the question is impossible to answer with a simple yes or no. Sometimes you should and sometimes you shouldn\u0026rsquo;t, but the border between should and shouldn\u0026rsquo;t is very complicated. The only way to give a general answer is to trace it.\nWhen people talk about this question, there\u0026rsquo;s always an implicit \u0026ldquo;instead of.\u0026rdquo; All other things being equal, why wouldn\u0026rsquo;t you work on what interests you the most? So even raising the question implies that all other things aren\u0026rsquo;t equal, and that you have to choose between working on what interests you the most and something else, like what pays the best.\nAnd indeed if your main goal is to make money, you can\u0026rsquo;t usually afford to work on what interests you the most. People pay you for doing what they want, not what you want. But there\u0026rsquo;s an obvious exception: when you both want the same thing. For example, if you love football, and you\u0026rsquo;re good enough at it, you can get paid a lot to play it.\nOf course the odds are against you in a case like football, because so many other people like playing it too. This is not to say you shouldn\u0026rsquo;t try though. It depends how much ability you have and how hard you\u0026rsquo;re willing to work.\nThe odds are better when you have strange tastes: when you like something that pays well and that few other people like. For example, it\u0026rsquo;s clear that Bill Gates truly loved running a software company. He didn\u0026rsquo;t just love programming, which a lot of people do. He loved writing software for customers. That is a very strange taste indeed, but if you have it, you can make a lot by indulging it.\nThere are even some people who have a genuine intellectual interest in making money. This is distinct from mere greed. They just can\u0026rsquo;t help noticing when something is mispriced, and can\u0026rsquo;t help doing …"
  },{
    "title": "Where to See Silicon Valley",
    "url": "/paul_graham/essays_en/seesv/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhere to See Silicon Valley October 2010\nSilicon Valley proper is mostly suburban sprawl. At first glance it doesn\u0026rsquo;t seem there\u0026rsquo;s anything to see. It\u0026rsquo;s not the sort of place that has conspicuous monuments. But if you look, there are subtle signs you\u0026rsquo;re in a place that\u0026rsquo;s different from other places.\nStanford University Stanford is a strange place. Structurally it is to an ordinary university what suburbia is to a city. It\u0026rsquo;s enormously spread out, and feels surprisingly empty much of the time. But notice the weather. It\u0026rsquo;s probably perfect. And notice the beautiful mountains to the west. And though you can\u0026rsquo;t see it, cosmopolitan San Francisco is 40 minutes to the north. That combination is much of the reason Silicon Valley grew up around this university and not some other one.\n",
    "description": "",
    "tags": ["silicon_valley","startups","venture_capital","tech_culture","y_combinator","geography"],
    "categories": [],
    "content": "→ 中文版本\nWhere to See Silicon Valley October 2010\nSilicon Valley proper is mostly suburban sprawl. At first glance it doesn\u0026rsquo;t seem there\u0026rsquo;s anything to see. It\u0026rsquo;s not the sort of place that has conspicuous monuments. But if you look, there are subtle signs you\u0026rsquo;re in a place that\u0026rsquo;s different from other places.\nStanford University Stanford is a strange place. Structurally it is to an ordinary university what suburbia is to a city. It\u0026rsquo;s enormously spread out, and feels surprisingly empty much of the time. But notice the weather. It\u0026rsquo;s probably perfect. And notice the beautiful mountains to the west. And though you can\u0026rsquo;t see it, cosmopolitan San Francisco is 40 minutes to the north. That combination is much of the reason Silicon Valley grew up around this university and not some other one.\nUniversity Ave A surprising amount of the work of the Valley is done in the cafes on or just off University Ave in Palo Alto. If you visit on a weekday between 10 and 5, you\u0026rsquo;ll often see founders pitching investors. In case you can\u0026rsquo;t tell, the founders are the ones leaning forward eagerly, and the investors are the ones sitting back with slightly pained expressions.\nThe Lucky Office The office at 165 University Ave was Google\u0026rsquo;s first. Then it was Paypal\u0026rsquo;s. (Now it\u0026rsquo;s Wepay\u0026rsquo;s.) The interesting thing about it is the location. It\u0026rsquo;s a smart move to put a startup in a place with restaurants and people walking around instead of in an office park, because then the people who work there want to stay there, instead of fleeing as soon as conventional working hours end. They go out for dinner together, talk about ideas, and then come back and implement them.\nIt\u0026rsquo;s important to realize that Google\u0026rsquo;s current location in an office park is not where they started; it\u0026rsquo;s just where they were forced to move when they needed more space. Facebook was till recently across the street, till they too had to …"
  },{
    "title": "Why Arc Isn't Especially Object-Oriented",
    "url": "/paul_graham/essays_en/noop/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy Arc Isn\u0026rsquo;t Especially Object-Oriented There is a kind of mania for object-oriented programming at the moment, but some of the smartest programmers I know are some of the least excited about it.\nMy own feeling is that object-oriented programming is a useful technique in some cases, but it isn\u0026rsquo;t something that has to pervade every program you write. You should be able to define new types, but you shouldn\u0026rsquo;t have to express every program as the definition of new types.\n",
    "description": "",
    "tags": ["object-oriented programming","Arc","Lisp","software design","programming languages","code"],
    "categories": [],
    "content": "→ 中文版本\nWhy Arc Isn\u0026rsquo;t Especially Object-Oriented There is a kind of mania for object-oriented programming at the moment, but some of the smartest programmers I know are some of the least excited about it.\nMy own feeling is that object-oriented programming is a useful technique in some cases, but it isn\u0026rsquo;t something that has to pervade every program you write. You should be able to define new types, but you shouldn\u0026rsquo;t have to express every program as the definition of new types.\nI think there are five reasons people like object-oriented programming, and three and a half of them are bad:\nObject-oriented programming is exciting if you have a statically-typed language without lexical closures or macros. To some degree, it offers a way around these limitations. (See Greenspun\u0026rsquo;s Tenth Rule.)\nObject-oriented programming is popular in big companies, because it suits the way they write software. At big companies, software tends to be written by large (and frequently changing) teams of mediocre programmers. Object-oriented programming imposes a discipline on these programmers that prevents any one of them from doing too much damage. The price is that the resulting code is bloated with protocols and full of duplication. This is not too high a price for big companies, because their software is probably going to be bloated and full of duplication anyway.\nObject-oriented programming generates a lot of what looks like work. Back in the days of fanfold, there was a type of programmer who would only put five or ten lines of code on a page, preceded by twenty lines of elaborately formatted comments. Object-oriented programming is like crack for these people: it lets you incorporate all this scaffolding right into your source code. Something that a Lisp hacker might handle by pushing a symbol onto a list becomes a whole file of classes and methods. So it is a good tool if you want to convince yourself, or someone else, that you are doing a lot of work.\nIf a …"
  },{
    "title": "Why It's Safe for Founders to Be Nice",
    "url": "/paul_graham/essays_en/safe/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy It\u0026rsquo;s Safe for Founders to Be Nice August 2015\nI recently got an email from a founder that helped me understand something important: why it\u0026rsquo;s safe for startup founders to be nice people.\nI grew up with a cartoon idea of a very successful businessman (in the cartoon it was always a man): a rapacious, cigar-smoking, table-thumping guy in his fifties who wins by exercising power, and isn\u0026rsquo;t too fussy about how. As I\u0026rsquo;ve written before, one of the things that has surprised me most about startups is how few of the most successful founders are like that. Maybe successful people in other industries are; I don\u0026rsquo;t know; but not startup founders. [1]\n",
    "description": "",
    "tags": ["founders","kindness","growth","startups","business ethics","success"],
    "categories": [],
    "content": "→ 中文版本\nWhy It\u0026rsquo;s Safe for Founders to Be Nice August 2015\nI recently got an email from a founder that helped me understand something important: why it\u0026rsquo;s safe for startup founders to be nice people.\nI grew up with a cartoon idea of a very successful businessman (in the cartoon it was always a man): a rapacious, cigar-smoking, table-thumping guy in his fifties who wins by exercising power, and isn\u0026rsquo;t too fussy about how. As I\u0026rsquo;ve written before, one of the things that has surprised me most about startups is how few of the most successful founders are like that. Maybe successful people in other industries are; I don\u0026rsquo;t know; but not startup founders. [1]\nI knew this empirically, but I never saw the math of why till I got this founder\u0026rsquo;s email. In it he said he worried that he was fundamentally soft-hearted and tended to give away too much for free. He thought perhaps he needed \u0026ldquo;a little dose of sociopath-ness.\u0026rdquo;\nI told him not to worry about it, because so long as he built something good enough to spread by word of mouth, he\u0026rsquo;d have a superlinear growth curve. If he was bad at extracting money from people, at worst this curve would be some constant multiple less than 1 of what it might have been. But a constant multiple of any curve is exactly the same shape. The numbers on the Y axis are smaller, but the curve is just as steep, and when anything grows at the rate of a successful startup, the Y axis will take care of itself.\nSome examples will make this clear. Suppose your company is making $1000 a month now, and you've made something so great that it's growing at 5% a week. Two years from now, you'll be making about $160k a month.\nNow suppose you\u0026rsquo;re so un-rapacious that you only extract half as much from your users as you could. That means two years later you\u0026rsquo;ll be making $80k a month instead of $160k. How far behind are you? How long will it take to catch up with where you\u0026rsquo;d have been if you were …"
  },{
    "title": "Why Nerds are Unpopular",
    "url": "/paul_graham/essays_en/nerds/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy Nerds are Unpopular February 2003\nWhen we were in junior high school, my friend Rich and I made a map of the school lunch tables according to popularity. This was easy to do, because kids only ate lunch with others of about the same popularity. We graded them from A to E. A tables were full of football players and cheerleaders and so on. E tables contained the kids with mild cases of Down\u0026rsquo;s Syndrome, what in the language of the time we called \u0026ldquo;retards.\u0026rdquo;\n",
    "description": "",
    "tags": ["nerds","school","popularity","intelligence","teenagers","social","education"],
    "categories": [],
    "content": "→ 中文版本\nWhy Nerds are Unpopular February 2003\nWhen we were in junior high school, my friend Rich and I made a map of the school lunch tables according to popularity. This was easy to do, because kids only ate lunch with others of about the same popularity. We graded them from A to E. A tables were full of football players and cheerleaders and so on. E tables contained the kids with mild cases of Down\u0026rsquo;s Syndrome, what in the language of the time we called \u0026ldquo;retards.\u0026rdquo;\nWe sat at a D table, as low as you could get without looking physically different. We were not being especially candid to grade ourselves as D. It would have taken a deliberate lie to say otherwise. Everyone in the school knew exactly how popular everyone else was, including us.\nMy stock gradually rose during high school. Puberty finally arrived; I became a decent soccer player; I started a scandalous underground newspaper. So I\u0026rsquo;ve seen a good part of the popularity landscape.\nI know a lot of people who were nerds in school, and they all tell the same story: there is a strong correlation between being smart and being a nerd, and an even stronger inverse correlation between being a nerd and being popular. Being smart seems to make you unpopular.\nWhy? To someone in school now, that may seem an odd question to ask. The mere fact is so overwhelming that it may seem strange to imagine that it could be any other way. But it could. Being smart doesn\u0026rsquo;t make you an outcast in elementary school. Nor does it harm you in the real world. Nor, as far as I can tell, is the problem so bad in most other countries. But in a typical American secondary school, being smart is likely to make your life difficult. Why? The key to this mystery is to rephrase the question slightly. Why don\u0026rsquo;t smart kids make themselves popular? If they\u0026rsquo;re so smart, why don\u0026rsquo;t they figure out how popularity works and beat the system, just as they do for standardized tests?\nOne argument says that this …"
  },{
    "title": "Why Smart People Have Bad Ideas",
    "url": "/paul_graham/essays_en/bronze/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy Smart People Have Bad Ideas Want to start a startup? Get funded by Y Combinator.\nApril 2005\nThis summer, as an experiment, some friends and I are giving seed funding to a bunch of new startups. It\u0026rsquo;s an experiment because we\u0026rsquo;re prepared to fund younger founders than most investors would. That\u0026rsquo;s why we\u0026rsquo;re doing it during the summer—so even college students can participate.\nWe know from Google and Yahoo that grad students can start successful startups. And we know from experience that some undergrads are as capable as most grad students. The accepted age for startup founders has been creeping downward. We\u0026rsquo;re trying to find the lower bound.\n",
    "description": "",
    "tags": ["ideas","startups","learning","business","psychology"],
    "categories": [],
    "content": "→ 中文版本\nWhy Smart People Have Bad Ideas Want to start a startup? Get funded by Y Combinator.\nApril 2005\nThis summer, as an experiment, some friends and I are giving seed funding to a bunch of new startups. It\u0026rsquo;s an experiment because we\u0026rsquo;re prepared to fund younger founders than most investors would. That\u0026rsquo;s why we\u0026rsquo;re doing it during the summer—so even college students can participate.\nWe know from Google and Yahoo that grad students can start successful startups. And we know from experience that some undergrads are as capable as most grad students. The accepted age for startup founders has been creeping downward. We\u0026rsquo;re trying to find the lower bound.\nThe deadline has now passed, and we\u0026rsquo;re sifting through 227 applications. We expected to divide them into two categories, promising and unpromising. But we soon saw we needed a third: promising people with unpromising ideas. [1]\nThe Artix Phase We should have expected this. It\u0026rsquo;s very common for a group of founders to go through one lame idea before realizing that a startup has to make something people will pay for. In fact, we ourselves did.\nViaweb wasn\u0026rsquo;t the first startup Robert Morris and I started. In January 1995, we and a couple friends started a company called Artix. The plan was to put art galleries on the Web. In retrospect, I wonder how we could have wasted our time on anything so stupid. Galleries are not especially excited about being on the Web even now, ten years later. They don\u0026rsquo;t want to have their stock visible to any random visitor, like an antique store. [2]\nBesides which, art dealers are the most technophobic people on earth. They didn\u0026rsquo;t become art dealers after a difficult choice between that and a career in the hard sciences. Most of them had never seen the Web before we came to tell them why they should be on it. Some didn\u0026rsquo;t even have computers. It doesn\u0026rsquo;t do justice to the situation to describe it as a hard sell; we soon sank to …"
  },{
    "title": "Why Startup Hubs Work",
    "url": "/paul_graham/essays_en/hubs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy Startup Hubs Work Want to start a startup? Get funded by Y Combinator.\nOctober 2011\nIf you look at a list of US cities sorted by population, the number of successful startups per capita varies by orders of magnitude. Somehow it\u0026rsquo;s as if most places were sprayed with startupicide.\nI wondered about this for years. I could see the average town was like a roach motel for startup ambitions: smart, ambitious people went in, but no startups came out. But I was never able to figure out exactly what happened inside the motel—exactly what was killing all the potential startups. [1]\n",
    "description": "",
    "tags": ["startup hubs","Silicon Valley","entrepreneurship","ecosystem","innovation","Y Combinator","community"],
    "categories": [],
    "content": "→ 中文版本\nWhy Startup Hubs Work Want to start a startup? Get funded by Y Combinator.\nOctober 2011\nIf you look at a list of US cities sorted by population, the number of successful startups per capita varies by orders of magnitude. Somehow it\u0026rsquo;s as if most places were sprayed with startupicide.\nI wondered about this for years. I could see the average town was like a roach motel for startup ambitions: smart, ambitious people went in, but no startups came out. But I was never able to figure out exactly what happened inside the motel—exactly what was killing all the potential startups. [1]\nA couple weeks ago I finally figured it out. I was framing the question wrong. The problem is not that most towns kill startups. It\u0026rsquo;s that death is the default for startups, and most towns don\u0026rsquo;t save them. Instead of thinking of most places as being sprayed with startupicide, it\u0026rsquo;s more accurate to think of startups as all being poisoned, and a few places being sprayed with the antidote.\nStartups in other places are just doing what startups naturally do: fail. The real question is, what\u0026rsquo;s saving startups in places like Silicon Valley? [2]\nEnvironment I think there are two components to the antidote: being in a place where startups are the cool thing to do, and chance meetings with people who can help you. And what drives them both is the number of startup people around you.\nThe first component is particularly helpful in the first stage of a startup\u0026rsquo;s life, when you go from merely having an interest in starting a company to actually doing it. It\u0026rsquo;s quite a leap to start a startup. It\u0026rsquo;s an unusual thing to do. But in Silicon Valley it seems normal. [3]\nIn most places, if you start a startup, people treat you as if you\u0026rsquo;re unemployed. People in the Valley aren\u0026rsquo;t automatically impressed with you just because you\u0026rsquo;re starting a company, but they pay attention. Anyone who\u0026rsquo;s been here any amount of time knows not to default to …"
  },{
    "title": "Why Startups Condense in America",
    "url": "/paul_graham/essays_en/america/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy Startups Condense in America May 2006\n(This essay is derived from a keynote at Xtech.)\nStartups happen in clusters. There are a lot of them in Silicon Valley and Boston, and few in Chicago or Miami. A country that wants startups will probably also have to reproduce whatever makes these clusters form.\nI\u0026rsquo;ve claimed that the recipe is a great university near a town smart people like. If you set up those conditions within the US, startups will form as inevitably as water droplets condense on a cold piece of metal. But when I consider what it would take to reproduce Silicon Valley in another country, it\u0026rsquo;s clear the US is a particularly humid environment. Startups condense more easily here.\n",
    "description": "",
    "tags": ["startup","america","silicon valley","innovation","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版本\nWhy Startups Condense in America May 2006\n(This essay is derived from a keynote at Xtech.)\nStartups happen in clusters. There are a lot of them in Silicon Valley and Boston, and few in Chicago or Miami. A country that wants startups will probably also have to reproduce whatever makes these clusters form.\nI\u0026rsquo;ve claimed that the recipe is a great university near a town smart people like. If you set up those conditions within the US, startups will form as inevitably as water droplets condense on a cold piece of metal. But when I consider what it would take to reproduce Silicon Valley in another country, it\u0026rsquo;s clear the US is a particularly humid environment. Startups condense more easily here.\nIt is by no means a lost cause to try to create a silicon valley in another country. There\u0026rsquo;s room not merely to equal Silicon Valley, but to surpass it. But if you want to do that, you have to understand the advantages startups get from being in America.\n1. The US Allows Immigration. For example, I doubt it would be possible to reproduce Silicon Valley in Japan, because one of Silicon Valley\u0026rsquo;s most distinctive features is immigration. Half the people there speak with accents. And the Japanese don\u0026rsquo;t like immigration. When they think about how to make a Japanese silicon valley, I suspect they unconsciously frame it as how to make one consisting only of Japanese people. This way of framing the question probably guarantees failure.\nA silicon valley has to be a mecca for the smart and the ambitious, and you can\u0026rsquo;t have a mecca if you don\u0026rsquo;t let people into it.\nOf course, it\u0026rsquo;s not saying much that America is more open to immigration than Japan. Immigration policy is one area where a competitor could do better.\n2. The US Is a Rich Country. I could see India one day producing a rival to Silicon Valley. Obviously they have the right people: you can tell that by the number of Indians in the current Silicon Valley. The problem with India …"
  },{
    "title": "Why There Aren't More Googles",
    "url": "/paul_graham/essays_en/googles/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy There Aren\u0026rsquo;t More Googles April 2008\nUmair Haque wrote recently that the reason there aren\u0026rsquo;t more Googles is that most startups get bought before they can change the world. Google, despite serious interest from Microsoft and Yahoo—what must have seemed like lucrative interest at the time—didn\u0026rsquo;t sell out. Google might simply have been nothing but Yahoo\u0026rsquo;s or MSN\u0026rsquo;s search box.\nWhy isn\u0026rsquo;t it? Because Google had a deeply felt sense of purpose: a conviction to change the world for the better. This has a nice sound to it, but it isn\u0026rsquo;t true. Google\u0026rsquo;s founders were willing to sell early on. They just wanted more than acquirers were willing to pay.\n",
    "description": "",
    "tags": ["startups","google","vc","acquisition","innovation"],
    "categories": [],
    "content": "→ 中文版本\nWhy There Aren\u0026rsquo;t More Googles April 2008\nUmair Haque wrote recently that the reason there aren\u0026rsquo;t more Googles is that most startups get bought before they can change the world. Google, despite serious interest from Microsoft and Yahoo—what must have seemed like lucrative interest at the time—didn\u0026rsquo;t sell out. Google might simply have been nothing but Yahoo\u0026rsquo;s or MSN\u0026rsquo;s search box.\nWhy isn\u0026rsquo;t it? Because Google had a deeply felt sense of purpose: a conviction to change the world for the better. This has a nice sound to it, but it isn\u0026rsquo;t true. Google\u0026rsquo;s founders were willing to sell early on. They just wanted more than acquirers were willing to pay.\nIt was the same with Facebook. They would have sold, but Yahoo blew it by offering too little.\nTip for acquirers: when a startup turns you down, consider raising your offer, because there\u0026rsquo;s a good chance the outrageous price they want will later seem a bargain. [1]\nFrom the evidence I\u0026rsquo;ve seen so far, startups that turn down acquisition offers usually end up doing better. Not always, but usually there\u0026rsquo;s a bigger offer coming, or perhaps even an IPO.\nOf course, the reason startups do better when they turn down acquisition offers is not necessarily that all such offers undervalue startups. More likely the reason is that the kind of founders who have the balls to turn down a big offer also tend to be very successful. That spirit is exactly what you want in a startup.\nWhile I\u0026rsquo;m sure Larry and Sergey do want to change the world, at least now, the reason Google survived to become a big, independent company is the same reason Facebook has so far remained independent: acquirers underestimated them.\nCorporate M\u0026amp;A is a strange business in that respect. They consistently lose the best deals, because turning down reasonable offers is the most reliable test you could invent for whether a startup will make it big.\nVCs So what\u0026rsquo;s the real reason there …"
  },{
    "title": "Why to Move to a Startup Hub",
    "url": "/paul_graham/essays_en/startuphubs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ Chinese Version\nWhy to Move to a Startup Hub October 2007\nAfter the last talk I gave, one of the organizers got up on the stage to deliver an impromptu rebuttal. That never happened before. I only heard the first few sentences, but that was enough to tell what I said that upset him: that startups would do better if they moved to Silicon Valley.\nThis conference was in London, and most of the audience seemed to be from the UK. So saying startups should move to Silicon Valley seemed like a nationalistic remark: an obnoxious American telling them that if they wanted to do things right they should all just move to America.\n",
    "description": "",
    "tags": ["Silicon Valley","startup hubs","entrepreneurship","location","innovation"],
    "categories": [],
    "content": "→ Chinese Version\nWhy to Move to a Startup Hub October 2007\nAfter the last talk I gave, one of the organizers got up on the stage to deliver an impromptu rebuttal. That never happened before. I only heard the first few sentences, but that was enough to tell what I said that upset him: that startups would do better if they moved to Silicon Valley.\nThis conference was in London, and most of the audience seemed to be from the UK. So saying startups should move to Silicon Valley seemed like a nationalistic remark: an obnoxious American telling them that if they wanted to do things right they should all just move to America.\nActually I\u0026rsquo;m less American than I seem. I didn\u0026rsquo;t say so, but I\u0026rsquo;m British by birth. And just as Jews are ex officio allowed to tell Jewish jokes, I don\u0026rsquo;t feel like I have to bother being diplomatic with a British audience.\nThe idea that startups would do better to move to Silicon Valley is not even a nationalistic one. [1] It\u0026rsquo;s the same thing I say to startups in the US. Y Combinator alternates between coasts every 6 months. Every other funding cycle is in Boston. And even though Boston is the second biggest startup hub in the US (and the world), we tell the startups from those cycles that their best bet is to move to Silicon Valley. If that\u0026rsquo;s true of Boston, it\u0026rsquo;s even more true of every other city.\nThis is about cities, not countries.\nAnd I think I can prove I\u0026rsquo;m right. You can easily reduce the opposing argument ad absurdum—to what most people would agree was absurdum. Few would be willing to claim that it doesn\u0026rsquo;t matter at all where a startup is—that a startup operating out of a small agricultural town wouldn\u0026rsquo;t benefit from moving to a startup hub. Most people could see how it might be helpful to be in a place where there was infrastructure for startups, accumulated knowledge about how to make them work, and other people trying to do it. And yet whatever argument you use to prove that …"
  },{
    "title": "Why to Start a Startup in a Bad Economy",
    "url": "/paul_graham/essays_en/badeconomy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy to Start a Startup in a Bad Economy Want to start a startup? Get funded by Y Combinator.\nOctober 2008\nThe economic situation is apparently so grim that some experts fear we may be in for a stretch as bad as the mid seventies. When Microsoft and Apple were founded.\nAs those examples suggest, a recession may not be such a bad time to start a startup. I\u0026rsquo;m not claiming it\u0026rsquo;s a particularly good time either. The truth is more boring: the state of the economy doesn\u0026rsquo;t matter much either way.\n",
    "description": "",
    "tags": ["startup","economy","recession","founders","investing","technology"],
    "categories": [],
    "content": "→ 中文版本\nWhy to Start a Startup in a Bad Economy Want to start a startup? Get funded by Y Combinator.\nOctober 2008\nThe economic situation is apparently so grim that some experts fear we may be in for a stretch as bad as the mid seventies. When Microsoft and Apple were founded.\nAs those examples suggest, a recession may not be such a bad time to start a startup. I\u0026rsquo;m not claiming it\u0026rsquo;s a particularly good time either. The truth is more boring: the state of the economy doesn\u0026rsquo;t matter much either way.\nIf we\u0026rsquo;ve learned one thing from funding so many startups, it\u0026rsquo;s that they succeed or fail based on the qualities of the founders. The economy has some effect, certainly, but as a predictor of success it\u0026rsquo;s rounding error compared to the founders.\nWhich means that what matters is who you are, not when you do it. If you\u0026rsquo;re the right sort of person, you\u0026rsquo;ll win even in a bad economy. And if you\u0026rsquo;re not, a good economy won\u0026rsquo;t save you. Someone who thinks \u0026ldquo;I better not start a startup now, because the economy is so bad\u0026rdquo; is making the same mistake as the people who thought during the Bubble \u0026ldquo;all I have to do is start a startup, and I\u0026rsquo;ll be rich.\u0026rdquo;\nSo if you want to improve your chances, you should think far more about who you can recruit as a cofounder than the state of the economy. And if you\u0026rsquo;re worried about threats to the survival of your company, don\u0026rsquo;t look for them in the news. Look in the mirror.\nBut for any given team of founders, would it not pay to wait till the economy is better before taking the leap? If you\u0026rsquo;re starting a restaurant, maybe, but not if you\u0026rsquo;re working on technology. Technology progresses more or less independently of the stock market. So for any given idea, the payoff for acting fast in a bad economy will be higher than for waiting. Microsoft\u0026rsquo;s first product was a Basic interpreter for the Altair. That was exactly what the world needed in 1975, …"
  },{
    "title": "Why TV Lost",
    "url": "/paul_graham/essays_en/convergence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy TV Lost March 2009\nAbout twenty years ago people noticed computers and TV were on a collision course and started to speculate about what they\u0026rsquo;d produce when they converged. We now know the answer: computers. It\u0026rsquo;s clear now that even by using the word \u0026ldquo;convergence\u0026rdquo; we were giving TV too much credit. This won\u0026rsquo;t be convergence so much as replacement. People may still watch things they call \u0026ldquo;TV shows,\u0026rdquo; but they\u0026rsquo;ll watch them mostly on computers.\n",
    "description": "",
    "tags": ["TV","internet","convergence","media","technology","social","innovation"],
    "categories": [],
    "content": "→ 中文版本\nWhy TV Lost March 2009\nAbout twenty years ago people noticed computers and TV were on a collision course and started to speculate about what they\u0026rsquo;d produce when they converged. We now know the answer: computers. It\u0026rsquo;s clear now that even by using the word \u0026ldquo;convergence\u0026rdquo; we were giving TV too much credit. This won\u0026rsquo;t be convergence so much as replacement. People may still watch things they call \u0026ldquo;TV shows,\u0026rdquo; but they\u0026rsquo;ll watch them mostly on computers.\nWhat decided the contest for computers? Four forces, three of which one could have predicted, and one that would have been harder to.\nOne predictable cause of victory is that the Internet is an open platform. Anyone can build whatever they want on it, and the market picks the winners. So innovation happens at hacker speeds instead of big company speeds.\nThe second is Moore\u0026rsquo;s Law, which has worked its usual magic on Internet bandwidth. [1]\nThe third reason computers won is piracy. Users prefer it not just because it\u0026rsquo;s free, but because it\u0026rsquo;s more convenient. Bittorrent and YouTube have already trained a new generation of viewers that the place to watch shows is on a computer screen. [2]\nThe somewhat more surprising force was one specific type of innovation: social applications. The average teenage kid has a pretty much infinite capacity for talking to their friends. But they can\u0026rsquo;t physically be with them all the time. When I was in high school the solution was the telephone. Now it\u0026rsquo;s social networks, multiplayer games, and various messaging applications. The way you reach them all is through a computer. [3] Which means every teenage kid (a) wants a computer with an Internet connection, (b) has an incentive to figure out how to use it, and (c) spends countless hours in front of it.\nThis was the most powerful force of all. This was what made everyone want computers. Nerds got computers because they liked them. Then gamers got them to play games …"
  },{
    "title": "Why Twitter is a Big Deal",
    "url": "/paul_graham/essays_en/twitter/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWhy Twitter is a Big Deal April 2009\nOm Malik is the most recent of many people to ask why Twitter is such a big deal.\nThe reason is that it\u0026rsquo;s a new messaging protocol, where you don\u0026rsquo;t specify the recipients. New protocols are rare. Or more precisely, new protocols that take off are. There are only a handful of commonly used ones: TCP/IP (the Internet), SMTP (email), HTTP (the web), and so on. So any new protocol is a big deal. But Twitter is a protocol owned by a private company. That\u0026rsquo;s even rarer.\n",
    "description": "",
    "tags": ["twitter","protocols","messaging","social_media","innovation","internet"],
    "categories": [],
    "content": "→ 中文版本\nWhy Twitter is a Big Deal April 2009\nOm Malik is the most recent of many people to ask why Twitter is such a big deal.\nThe reason is that it\u0026rsquo;s a new messaging protocol, where you don\u0026rsquo;t specify the recipients. New protocols are rare. Or more precisely, new protocols that take off are. There are only a handful of commonly used ones: TCP/IP (the Internet), SMTP (email), HTTP (the web), and so on. So any new protocol is a big deal. But Twitter is a protocol owned by a private company. That\u0026rsquo;s even rarer.\nCuriously, the fact that the founders of Twitter have been slow to monetize it may in the long run prove to be an advantage. Because they haven\u0026rsquo;t tried to control it too much, Twitter feels to everyone like previous protocols. One forgets it\u0026rsquo;s owned by a private company. That must have made it easier for Twitter to spread.\n"
  },{
    "title": "Why YC",
    "url": "/paul_graham/essays_en/whyyc/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWhy YC March 2006, rev August 2009\nYesterday one of the founders we funded asked me why we started Y Combinator. Or more precisely, he asked if we\u0026rsquo;d started YC mainly for fun.\nKind of, but not quite. It is enormously fun to be able to work with Rtm and Trevor again. I missed that after we sold Viaweb, and for all the years after I always had a background process running, looking for something we could do together. There is definitely an aspect of a band reunion to Y Combinator. Every couple days I slip and call it \u0026ldquo;Viaweb.\u0026rdquo;\n",
    "description": "",
    "tags": ["Y Combinator","startup","investing","hacker","entrepreneurship"],
    "categories": [],
    "content": "→ 中文版\nWhy YC March 2006, rev August 2009\nYesterday one of the founders we funded asked me why we started Y Combinator. Or more precisely, he asked if we\u0026rsquo;d started YC mainly for fun.\nKind of, but not quite. It is enormously fun to be able to work with Rtm and Trevor again. I missed that after we sold Viaweb, and for all the years after I always had a background process running, looking for something we could do together. There is definitely an aspect of a band reunion to Y Combinator. Every couple days I slip and call it \u0026ldquo;Viaweb.\u0026rdquo;\nViaweb we started very explicitly to make money. I was sick of living from one freelance project to the next, and decided to just work as hard as I could till I\u0026rsquo;d made enough to solve the problem once and for all. Viaweb was sometimes fun, but it wasn\u0026rsquo;t designed for fun, and mostly it wasn\u0026rsquo;t. I\u0026rsquo;d be surprised if any startup is. All startups are mostly schleps.\nThe real reason we started Y Combinator is neither selfish nor virtuous. We didn\u0026rsquo;t start it mainly to make money; we have no idea what our average returns might be, and won\u0026rsquo;t know for years. Nor did we start YC mainly to help out young would-be founders, though we do like the idea, and comfort ourselves occasionally with the thought that if all our investments tank, we will thus have been doing something unselfish. (It\u0026rsquo;s oddly nondeterministic.)\nThe real reason we started Y Combinator is one probably only a hacker would understand. We did it because it seems such a great hack. There are thousands of smart people who could start companies and don\u0026rsquo;t, and with a relatively small amount of force applied at just the right place, we can spring on the world a stream of new startups that might otherwise not have existed.\nIn a way this is virtuous, because I think startups are a good thing. But really what motivates us is the completely amoral desire that would motivate any hacker who looked at some complex device and realized …"
  },{
    "title": "Write Like You Talk",
    "url": "/paul_graham/essays_en/talk/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWrite Like You Talk October 2015\nHere\u0026rsquo;s a simple trick for getting more people to read what you write: write in spoken language.\nSomething comes over most people when they start writing. They write in a different language than they\u0026rsquo;d use if they were talking to a friend. The sentence structure and even the words are different. No one uses \u0026ldquo;pen\u0026rdquo; as a verb in spoken English. You\u0026rsquo;d feel like an idiot using \u0026ldquo;pen\u0026rdquo; instead of \u0026ldquo;write\u0026rdquo; in a conversation with a friend.\n",
    "description": "",
    "tags": ["writing","spoken language","communication","style","prose"],
    "categories": [],
    "content": "→ 中文版本\nWrite Like You Talk October 2015\nHere\u0026rsquo;s a simple trick for getting more people to read what you write: write in spoken language.\nSomething comes over most people when they start writing. They write in a different language than they\u0026rsquo;d use if they were talking to a friend. The sentence structure and even the words are different. No one uses \u0026ldquo;pen\u0026rdquo; as a verb in spoken English. You\u0026rsquo;d feel like an idiot using \u0026ldquo;pen\u0026rdquo; instead of \u0026ldquo;write\u0026rdquo; in a conversation with a friend.\nThe last straw for me was a sentence I read a couple days ago: The mercurial Spaniard himself declared: \u0026ldquo;After Altamira, all is decadence.\u0026rdquo; It\u0026rsquo;s from Neil Oliver\u0026rsquo;s A History of Ancient Britain. I feel bad making an example of this book, because it\u0026rsquo;s no worse than lots of others. But just imagine calling Picasso \u0026ldquo;the mercurial Spaniard\u0026rdquo; when talking to a friend. Even one sentence of this would raise eyebrows in conversation. And yet people write whole books of it.\nOk, so written and spoken language are different. Does that make written language worse?\nIf you want people to read and understand what you write, yes. Written language is more complex, which makes it more work to read. It\u0026rsquo;s also more formal and distant, which gives the reader\u0026rsquo;s attention permission to drift. But perhaps worst of all, the complex sentences and fancy words give you, the writer, the false impression that you\u0026rsquo;re saying more than you actually are.\nYou don\u0026rsquo;t need complex sentences to express complex ideas. When specialists in some abstruse topic talk to one another about ideas in their field, they don\u0026rsquo;t use sentences any more complex than they do when talking about what to have for lunch. They use different words, certainly. But even those they use no more than necessary. And in my experience, the harder the subject, the more informally experts speak. Partly, I think, because they have less to prove, and …"
  },{
    "title": "Write Simply",
    "url": "/paul_graham/essays_en/simply/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWrite Simply March 2021\nI try to write using ordinary words and simple sentences.\nThat kind of writing is easier to read, and the easier something is to read, the more deeply readers will engage with it. The less energy they expend on your prose, the more they\u0026rsquo;ll have left for your ideas.\nAnd the further they\u0026rsquo;ll read. Most readers\u0026rsquo; energy tends to flag part way through an article or essay. If the friction of reading is low enough, more keep going till the end.\n",
    "description": "",
    "tags": ["writing","simplicity","clarity","communication","style"],
    "categories": [],
    "content": "→ 中文版本\nWrite Simply March 2021\nI try to write using ordinary words and simple sentences.\nThat kind of writing is easier to read, and the easier something is to read, the more deeply readers will engage with it. The less energy they expend on your prose, the more they\u0026rsquo;ll have left for your ideas.\nAnd the further they\u0026rsquo;ll read. Most readers\u0026rsquo; energy tends to flag part way through an article or essay. If the friction of reading is low enough, more keep going till the end.\nThere\u0026rsquo;s an Italian dish called saltimbocca, which means \u0026ldquo;leap into the mouth.\u0026rdquo; My goal when writing might be called saltintesta: the ideas leap into your head and you barely notice the words that got them there.\nIt\u0026rsquo;s too much to hope that writing could ever be pure ideas. You might not even want it to be. But for most writers, most of the time, that\u0026rsquo;s the goal to aim for. The gap between most writing and pure ideas is not filled with poetry.\nPlus it\u0026rsquo;s more considerate to write simply. When you write in a fancy way to impress people, you\u0026rsquo;re making them do extra work just so you can seem cool. It\u0026rsquo;s like trailing a long train behind you that readers have to carry.\nAnd remember, if you\u0026rsquo;re writing in English, that a lot of your readers won\u0026rsquo;t be native English speakers. Their understanding of ideas may be way ahead of their understanding of English. So you can\u0026rsquo;t assume that writing about a difficult topic means you can use difficult words.\nOf course, fancy writing doesn\u0026rsquo;t just conceal ideas. It can also conceal the lack of them. That\u0026rsquo;s why some people write that way, to conceal the fact that they have nothing to say. Whereas writing simply keeps you honest. If you say nothing simply, it will be obvious to everyone, including you.\nSimple writing also lasts better. People reading your stuff in the future will be in much the same position as people from other countries reading it today. The culture and the language …"
  },{
    "title": "Writes and Write-Nots",
    "url": "/paul_graham/essays_en/writes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWrites and Write-Nots October 2024\nI\u0026rsquo;m usually reluctant to make predictions about technology, but I feel fairly confident about this one: in a couple decades there won\u0026rsquo;t be many people who can write.\nOne of the strangest things you learn if you\u0026rsquo;re a writer is how many people have trouble writing. Doctors know how many people have a mole they\u0026rsquo;re worried about; people who are good at setting up computers know how many people aren\u0026rsquo;t; writers know how many people need help writing.\n",
    "description": "",
    "tags": ["writing","ai","thinking","future","technology"],
    "categories": [],
    "content": "→ 中文版\nWrites and Write-Nots October 2024\nI\u0026rsquo;m usually reluctant to make predictions about technology, but I feel fairly confident about this one: in a couple decades there won\u0026rsquo;t be many people who can write.\nOne of the strangest things you learn if you\u0026rsquo;re a writer is how many people have trouble writing. Doctors know how many people have a mole they\u0026rsquo;re worried about; people who are good at setting up computers know how many people aren\u0026rsquo;t; writers know how many people need help writing.\nThe reason so many people have trouble writing is that it\u0026rsquo;s fundamentally difficult. To write well you have to think clearly, and thinking clearly is hard.\nAnd yet writing pervades many jobs, and the more prestigious the job, the more writing it tends to require.\nThese two powerful opposing forces, the pervasive expectation of writing and the irreducible difficulty of doing it, create enormous pressure. This is why eminent professors often turn out to have resorted to plagiarism. The most striking thing to me about these cases is the pettiness of the thefts. The stuff they steal is usually the most mundane boilerplate — the sort of thing that anyone who was even halfway decent at writing could turn out with no effort at all. Which means they\u0026rsquo;re not even halfway decent at writing.\nTill recently there was no convenient escape valve for the pressure created by these opposing forces. You could pay someone to write for you, like JFK, or plagiarize, like MLK, but if you couldn\u0026rsquo;t buy or steal words, you had to write them yourself. And as a result nearly everyone who was expected to write had to learn how.\nNot anymore. AI has blown this world open. Almost all pressure to write has dissipated. You can have AI do it for you, both in school and at work.\nThe result will be a world divided into writes and write-nots. There will still be some people who can write. Some of us like it. But the middle ground between those who are good at writing and those …"
  },{
    "title": "Writing and Speaking",
    "url": "/paul_graham/essays_en/speak/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nWriting and Speaking March 2012\nI\u0026rsquo;m not a very good speaker. I say \u0026ldquo;um\u0026rdquo; a lot. Sometimes I have to pause when I lose my train of thought. I wish I were a better speaker. But I don\u0026rsquo;t wish I were a better speaker like I wish I were a better writer. What I really want is to have good ideas, and that\u0026rsquo;s a much bigger part of being a good writer than being a good speaker.\n",
    "description": "",
    "tags": ["speaking","writing","communication","ideas","public_speaking","rhetoric","education"],
    "categories": [],
    "content": "→ 中文版本\nWriting and Speaking March 2012\nI\u0026rsquo;m not a very good speaker. I say \u0026ldquo;um\u0026rdquo; a lot. Sometimes I have to pause when I lose my train of thought. I wish I were a better speaker. But I don\u0026rsquo;t wish I were a better speaker like I wish I were a better writer. What I really want is to have good ideas, and that\u0026rsquo;s a much bigger part of being a good writer than being a good speaker.\nHaving good ideas is most of writing well. If you know what you\u0026rsquo;re talking about, you can say it in the plainest words and you\u0026rsquo;ll be perceived as having a good style. With speaking it\u0026rsquo;s the opposite: having good ideas is an alarmingly small component of being a good speaker.\nI first noticed this at a conference several years ago. There was another speaker who was much better than me. He had all of us roaring with laughter. I seemed awkward and halting by comparison. Afterward I put my talk online like I usually do. As I was doing it I tried to imagine what a transcript of the other guy\u0026rsquo;s talk would be like, and it was only then I realized he hadn\u0026rsquo;t said very much.\nMaybe this would have been obvious to someone who knew more about speaking, but it was a revelation to me how much less ideas mattered in speaking than writing. [1]\nA few years later I heard a talk by someone who was not merely a better speaker than me, but a famous speaker. Boy was he good. So I decided I\u0026rsquo;d pay close attention to what he said, to learn how he did it. After about ten sentences I found myself thinking \u0026ldquo;I don\u0026rsquo;t want to be a good speaker.\u0026rdquo;\nBeing a really good speaker is not merely orthogonal to having good ideas, but in many ways pushes you in the opposite direction. For example, when I give a talk, I usually write it out beforehand. I know that\u0026rsquo;s a mistake; I know delivering a prewritten talk makes it harder to engage with an audience. The way to get the attention of an audience is to give them your full attention, and when …"
  },{
    "title": "Writing, Briefly",
    "url": "/paul_graham/essays_en/writing44/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版\nWriting, Briefly March 2005\n(In the process of answering an email, I accidentally wrote a tiny essay about writing. I usually spend weeks on an essay. This one took 67 minutes—23 of writing, and 44 of rewriting.)\nI think it\u0026rsquo;s far more important to write well than most people realize. Writing doesn\u0026rsquo;t just communicate ideas; it generates them. If you\u0026rsquo;re bad at writing and don\u0026rsquo;t like to do it, you\u0026rsquo;ll miss out on most of the ideas writing would have generated.\n",
    "description": "",
    "tags": ["writing","advice","tips","process","creativity"],
    "categories": [],
    "content": "→ 中文版\nWriting, Briefly March 2005\n(In the process of answering an email, I accidentally wrote a tiny essay about writing. I usually spend weeks on an essay. This one took 67 minutes—23 of writing, and 44 of rewriting.)\nI think it\u0026rsquo;s far more important to write well than most people realize. Writing doesn\u0026rsquo;t just communicate ideas; it generates them. If you\u0026rsquo;re bad at writing and don\u0026rsquo;t like to do it, you\u0026rsquo;ll miss out on most of the ideas writing would have generated.\nAs for how to write well, here\u0026rsquo;s the short version: Write a bad version 1 as fast as you can; rewrite it over and over; cut out everything unnecessary; write in a conversational tone; develop a nose for bad writing, so you can see and fix it in yours; imitate writers you like; if you can\u0026rsquo;t get started, tell someone what you plan to write about, then write down what you said; expect 80% of the ideas in an essay to happen after you start writing it, and 50% of those you start with to be wrong; be confident enough to cut; have friends you trust read your stuff and tell you which bits are confusing or drag; don\u0026rsquo;t (always) make detailed outlines; mull ideas over for a few days before writing; carry a small notebook or scrap paper with you; start writing when you think of the first sentence; if a deadline forces you to start before that, just say the most important sentence first; write about stuff you like; don\u0026rsquo;t try to sound impressive; don\u0026rsquo;t hesitate to change the topic on the fly; use footnotes to contain digressions; use anaphora to knit sentences together; read your essays out loud to see (a) where you stumble over awkward phrases and (b) which bits are boring (the paragraphs you dread reading); try to tell the reader something new and useful; work in fairly big quanta of time; when you restart, begin by rereading what you have so far; when you finish, leave yourself something easy to start with; accumulate notes for topics you plan to cover at the …"
  },{
    "title": "Y Combinator 的创立故事",
    "url": "/paul_graham/essays_zh/ycstart/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\nY Combinator 的创立故事 2012年3月\nY Combinator的7岁生日是3月11日。像往常一样，我们太忙了，直到几天后才注意到。我想我们从来没有能在生日当天记住我们的生日。\n2005年3月11日，杰西卡和我在哈佛广场吃完晚饭走回家。杰西卡当时在一家投资银行工作，但她不太喜欢，所以她面试了波士顿一家风险投资基金的市场总监职位。这家风险投资基金正在做现在看来对风险投资基金来说喜剧性地熟悉的事情：花很长时间做决定。\n与此同时，我一直在告诉杰西卡他们应该改变风险投资业务的所有方面——基本上是现在支撑Y Combinator的理念：投资者应该做更多、更小的投资，他们应该资助黑客而不是西装革履的人，他们应该愿意资助更年轻的创始人，等等。\n当时我一直在考虑做一些天使投资。我刚刚在哈佛大学的本科生计算机俱乐部做了一次关于如何创办创业公司的演讲，之后我突然意识到，尽管我一直打算做天使投资，但自从我有足够钱做这件事已经过去了7年，我还没有开始。我也一直在考虑再次与罗伯特·莫里斯和特雷弗·布莱克威尔合作的方法。几小时前我给他们发了一封电子邮件，试图弄清楚我们能一起做什么。\n在哈佛广场和我的家之间，这个想法成型了。我们将创办自己的投资公司，杰西卡可以为那家公司工作。当我们转到沃克街时，我们决定这样做。我同意向新基金投入10万美元，杰西卡同意辞职为它工作。在接下来的几天里，我招募了罗伯特和特雷弗，他们各投入了另外5万美元。所以YC以20万美元开始。\n杰西卡非常高兴能够辞职创办自己的公司，以至于到家时我给她拍了张照片。\n公司当时还不叫Y Combinator。起初我们称之为剑桥种子。但这个名字从未见光，因为几天后当我们宣布时，我们已经把名字改为Y Combinator。我们很早就意识到我们所做的工作可能具有全国范围的影响力，我们不想要一个将我们束缚在一个地方的名字。\n最初我们只有部分想法。我们要做标准化条款的种子资金。在YC之前，种子资金非常随意。你会从你朋友的富叔叔那里得到第一笔1万美元。交易条款往往是灾难性的；通常投资者、创始人和律师都不知道文件应该是什么样的。Facebook作为佛罗里达有限责任公司的早期历史显示了当时事情是多么随意。\n我们将成为前所未有的事物：标准的种子资金来源。\n我们根据我们自己创办Viaweb时获得的种子资金来设计YC。我们用从朋友朱利安·韦伯那里得到的1万美元开始了Viaweb，朱利安是伊德尔·韦伯的丈夫，我在哈佛读研究生时上了伊德尔的绘画课。朱利安了解商业，但你不会说他是个西装革履的人。除其他外，他还曾担任国家讽刺剧的主席。他也是一名律师，把我们所有的文书工作都正确设置。\n作为回报，朱利安获得Viaweb 10%的股份，以换取1万美元，帮我们成立公司，教我们商业知识，以及在危机时刻保持冷静。我记得曾经想过朱利安得到了多么好的交易。但一秒钟后我意识到，没有朱利安，Viaweb永远不会成功。所以即使这对他是好交易，对我们也是好交易。这就是为什么我知道像Y Combinator这样的东西有存在的空间。\n最初我们没有后来证明是最重要的想法：同步资助创业公司，而不是像以前那样异步资助。或者更确切地说，我们有这个想法，但我们没有意识到它的重要性。我们很早就决定，我们要做的第一件事是在即将到来的夏天资助一批创业公司。但我们最初没有意识到这将是我们进行所有投资的方式。\n我们一开始同时资助一批创业公司的原因不是我们认为这将是资助创业公司的更好方式，而仅仅是因为我们想学习如何成为天使投资者，而为本科生举办的夏季项目似乎是最快的方法。没有人那么认真地对待暑期工作。一群本科生花一个夏天在创业公司上工作的机会成本足够低，我们不会感到内疚鼓励他们这样做。\n我们知道学生已经在为夏天做计划了，所以我们做了我们经常告诉创业公司要做的事情：我们快速启动。这里是当时被称为夏季创始人计划的初始公告和描述。\n我们很幸运，夏季项目的长度和结构对我们做的事情来说证明是完美的。YC周期的结构仍然几乎与第一个夏天完全相同。\n我们在第一批创始人是谁方面也很幸运。我们从未期望从第一批中获得任何利润。我们认为我们投资的钱是教育费用和慈善捐赠的结合。但第一批的创始人证明出人意料地好。而且他们也是很棒的人。直到今天，我们还和他们中的很多人是朋友。\n现在人们很难意识到YC在当时看起来多么微不足道。我不能责怪那些没有认真对待我们的人，因为我们自己在一开始也没有非常认真地对待第一个夏季项目。但随着夏天的进展，我们对创业公司的表现越来越印象深刻。其他人也开始印象深刻。杰西卡和我发明了一个术语，\u0026ldquo;Y Combinator效应\u0026rdquo;，用来描述某人意识到YC并非完全糟糕的那一刻。当人们第一次夏天来到YC在晚宴上演讲时，他们的精神状态就像来向童子军部队发表讲话的人一样。当他们离开大楼时，他们都在说\u0026quot;哇，这些公司实际上可能会成功\u0026quot;的某种变体。\n现在YC足够知名，当我们资助的公司是合法的时人们不再感到惊讶，但声誉赶上现实需要一段时间。这就是我们特别喜欢资助可能被dismissed为\u0026quot;玩具\u0026quot;的想法的原因之一——因为YC本身最初也被dismissed为一个。\n当我们看到同步资助公司效果很好时，我们决定继续这样做。我们将每年资助两批创业公司。我们在硅谷资助了第二批。这是一个最后一刻的决定。回想起来，我认为让我下定决心的是那年秋天去Foo Camp。湾区的创业公司人口密度比波士顿大得多，天气也这么好。我从90年代住在那里时记得这一点。另外，我不想让别人复制我们并将其描述为硅谷的Y Combinator。我希望YC成为硅谷的Y Combinator。所以在加州做冬季批次似乎是那种自我放纵的选择和雄心勃勃的选择相同的罕见情况之一。\n如果我们有足够的时间做我们想做的事情，Y Combinator会在伯克利。那是我们最喜欢的湾区地区。但我们没有时间在伯克利找大楼。我们没有时间在任何地方找我们自己的大楼。及时获得足够空间的唯一方法是说服特雷弗让我们接管他在山景城（当时看来）巨大的建筑的一部分。\n我们又一次运气好，因为山景城证明是放置像YC这样的东西的理想地点。但即使如此，我们也勉强做到了。在加州的第一次晚宴上，我们不得不警告所有创始人不要碰墙壁，因为油漆还是湿的。\n",
    "description": "",
    "tags": ["Y Combinator","创业公司","创立","历史","天使投资","硅谷"],
    "categories": [],
    "content": "→ English Version\nY Combinator 的创立故事 2012年3月\nY Combinator的7岁生日是3月11日。像往常一样，我们太忙了，直到几天后才注意到。我想我们从来没有能在生日当天记住我们的生日。\n2005年3月11日，杰西卡和我在哈佛广场吃完晚饭走回家。杰西卡当时在一家投资银行工作，但她不太喜欢，所以她面试了波士顿一家风险投资基金的市场总监职位。这家风险投资基金正在做现在看来对风险投资基金来说喜剧性地熟悉的事情：花很长时间做决定。\n与此同时，我一直在告诉杰西卡他们应该改变风险投资业务的所有方面——基本上是现在支撑Y Combinator的理念：投资者应该做更多、更小的投资，他们应该资助黑客而不是西装革履的人，他们应该愿意资助更年轻的创始人，等等。\n当时我一直在考虑做一些天使投资。我刚刚在哈佛大学的本科生计算机俱乐部做了一次关于如何创办创业公司的演讲，之后我突然意识到，尽管我一直打算做天使投资，但自从我有足够钱做这件事已经过去了7年，我还没有开始。我也一直在考虑再次与罗伯特·莫里斯和特雷弗·布莱克威尔合作的方法。几小时前我给他们发了一封电子邮件，试图弄清楚我们能一起做什么。\n在哈佛广场和我的家之间，这个想法成型了。我们将创办自己的投资公司，杰西卡可以为那家公司工作。当我们转到沃克街时，我们决定这样做。我同意向新基金投入10万美元，杰西卡同意辞职为它工作。在接下来的几天里，我招募了罗伯特和特雷弗，他们各投入了另外5万美元。所以YC以20万美元开始。\n杰西卡非常高兴能够辞职创办自己的公司，以至于到家时我给她拍了张照片。\n公司当时还不叫Y Combinator。起初我们称之为剑桥种子。但这个名字从未见光，因为几天后当我们宣布时，我们已经把名字改为Y Combinator。我们很早就意识到我们所做的工作可能具有全国范围的影响力，我们不想要一个将我们束缚在一个地方的名字。\n最初我们只有部分想法。我们要做标准化条款的种子资金。在YC之前，种子资金非常随意。你会从你朋友的富叔叔那里得到第一笔1万美元。交易条款往往是灾难性的；通常投资者、创始人和律师都不知道文件应该是什么样的。Facebook作为佛罗里达有限责任公司的早期历史显示了当时事情是多么随意。\n我们将成为前所未有的事物：标准的种子资金来源。\n我们根据我们自己创办Viaweb时获得的种子资金来设计YC。我们用从朋友朱利安·韦伯那里得到的1万美元开始了Viaweb，朱利安是伊德尔·韦伯的丈夫，我在哈佛读研究生时上了伊德尔的绘画课。朱利安了解商业，但你不会说他是个西装革履的人。除其他外，他还曾担任国家讽刺剧的主席。他也是一名律师，把我们所有的文书工作都正确设置。\n作为回报，朱利安获得Viaweb 10%的股份，以换取1万美元，帮我们成立公司，教我们商业知识，以及在危机时刻保持冷静。我记得曾经想过朱利安得到了多么好的交易。但一秒钟后我意识到，没有朱利安，Viaweb永远不会成功。所以即使这对他是好交易，对我们也是好交易。这就是为什么我知道像Y Combinator这样的东西有存在的空间。\n最初我们没有后来证明是最重要的想法：同步资助创业公司，而不是像以前那样异步资助。或者更确切地说，我们有这个想法，但我们没有意识到它的重要性。我们很早就决定，我们要做的第一件事是在即将到来的夏天资助一批创业公司。但我们最初没有意识到这将是我们进行所有投资的方式。\n我们一开始同时资助一批创业公司的原因不是我们认为这将是资助创业公司的更好方式，而仅仅是因为我们想学习如何成为天使投资者，而为本科生举办的夏季项目似乎是最快的方法。没有人那么认真地对待暑期工作。一群本科生花一个夏天在创业公司上工作的机会成本足够低，我们不会感到内疚鼓励他们这样做。\n我们知道学生已经在为夏天做计划了，所以我们做了我们经常告诉创业公司要做的事情：我们快速启动。这里是当时被称为夏季创始人计划的初始公告和描述。\n我们很幸运，夏季项目的长度和结构对我们做的事情来说证明是完美的。YC周期的结构仍然几乎与第一个夏天完全相同。\n我们在第一批创始人是谁方面也很幸运。我们从未期望从第一批中获得任何利润。我们认为我们投资的钱是教育费用和慈善捐赠的结合。但第一批的创始人证明出人意料地好。而且他们也是很棒的人。直到今天，我们还和他们中的很多人是朋友。\n现在人们很难意识到YC在当时看起来多么微不足道。我不能责怪那些没有认真对待我们的人，因为我们自己在一开始也没有非常认真地对待第一个夏季项目。但随着夏天的进展，我们对创业公司的表现越来越印象深刻。其他人也开始印象深刻。杰西卡和我发明了一个术语，\u0026ldquo;Y Combinator效应\u0026rdquo;，用来描述某人意识到YC并非完全糟糕的那一刻。当人们第一次夏天来到YC在晚宴上演讲时，他们 …"
  },{
    "title": "You Weren't Meant to Have a Boss",
    "url": "/paul_graham/essays_en/boss/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ 中文版本\nYou Weren\u0026rsquo;t Meant to Have a Boss Want to start a startup? Get funded by Y Combinator.\nMarch 2008, rev. June 2008\nTechnology tends to separate normal from natural. Our bodies weren\u0026rsquo;t designed to eat the foods that people in rich countries eat, or to get so little exercise. There may be a similar problem with the way we work: a normal job may be as bad for us intellectually as white flour or sugar is for us physically.\n",
    "description": "",
    "tags": ["boss","work","startups","freedom","organizations","programming","management"],
    "categories": [],
    "content": "→ 中文版本\nYou Weren\u0026rsquo;t Meant to Have a Boss Want to start a startup? Get funded by Y Combinator.\nMarch 2008, rev. June 2008\nTechnology tends to separate normal from natural. Our bodies weren\u0026rsquo;t designed to eat the foods that people in rich countries eat, or to get so little exercise. There may be a similar problem with the way we work: a normal job may be as bad for us intellectually as white flour or sugar is for us physically.\nI began to suspect this after spending several years working with startup founders. I\u0026rsquo;ve now worked with over 200 of them, and I\u0026rsquo;ve noticed a definite difference between programmers working on their own startups and those working for large organizations. I wouldn\u0026rsquo;t say founders seem happier, necessarily; starting a startup can be very stressful. Maybe the best way to put it is to say that they\u0026rsquo;re happier in the sense that your body is happier during a long run than sitting on a sofa eating doughnuts.\nThough they\u0026rsquo;re statistically abnormal, startup founders seem to be working in a way that\u0026rsquo;s more natural for humans.\nI was in Africa last year and saw a lot of animals in the wild that I\u0026rsquo;d only seen in zoos before. It was remarkable how different they seemed. Particularly lions. Lions in the wild seem about ten times more alive. They\u0026rsquo;re like different animals. I suspect that working for oneself feels better to humans in much the same way that living in the wild must feel better to a wide-ranging predator like a lion. Life in a zoo is easier, but it isn\u0026rsquo;t the life they were designed for.\nTrees What\u0026rsquo;s so unnatural about working for a big company? The root of the problem is that humans weren\u0026rsquo;t meant to work in such large groups.\nAnother thing you notice when you see animals in the wild is that each species thrives in groups of a certain size. A herd of impalas might have 100 adults; baboons maybe 20; lions rarely 10. Humans also seem designed to work in groups, and what …"
  },{
    "title": "一些英雄",
    "url": "/paul_graham/essays_zh/heroes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n一些英雄 2008年4月\n我保存了一些话题，因为写它们会很有趣。这就是其中之一：我的英雄名单。\n我并不是说这是n个最令人敬佩的人的名单。谁能列出这样的名单，即使他们想这么做？例如，爱因斯坦不在名单上，尽管他可能应该出现在任何令人敬佩的人的简短名单上。我曾问一位物理学家朋友，爱因斯坦是否真的像他的名声所暗示的那样聪明，她说是的，他是。那为什么他不在名单上呢？因为我必须去问。这是一个影响过我的人的名单，而不是如果我能理解他们的工作就会影响我的人。\n我的检验标准是想到一个人然后问\u0026quot;这个人是我的英雄吗？\u0026ldquo;它经常返回令人惊讶的答案。例如，对于蒙田，他可以说是散文的发明者，它返回了假。为什么？当我思考称某人为英雄意味着什么时，这意味着我会通过问他们在同样情况下会做什么来决定我该做什么。这是一个比敬佩更严格的标准。\n在列出名单后，我看看是否有模式，确实有，一个非常清晰的模式。名单上的每个人都有两个品质：他们几乎过度地关心他们的工作，而且他们绝对诚实。我说的诚实不是指值得信赖，而是指他们从不迎合：他们从不因为观众想要而说或做某些事情。由于这个原因，他们基本上都是颠覆性的，尽管他们隐瞒的程度不同。\n杰克·兰伯特 我在1970年代的匹兹堡长大。除非你在那里，否则很难想象那个镇对钢人队的感觉。在当地，所有的消息都是坏的。钢铁工业正在消亡。但钢人队是美式足球中最棒的球队——而且，以一种似乎反映城市个性的方式。他们不做任何花哨的事情。他们只是把工作做好。\n其他球员更有名：特里·布拉德肖、佛朗哥·哈里斯、林恩·斯旺。但他们打进攻，你总是会因此获得更多关注。作为一个十二岁的足球专家，在我看来，他们中最好的是杰克·兰伯特。而使他如此出色的原因是他完全无情。他不仅仅在乎打得好；他几乎在乎得太多了。当对方的球员在他的争球线一侧持球时，他似乎把这视为个人侮辱。\n1970年代匹兹堡的郊区是个相当沉闷的地方。学校很无聊。周围的所有成年人都在为大公司工作而感到无聊。通过大众传媒传递给我们的一切都是（a）平淡无奇的，（b）在别处生产的。杰克·兰伯特是个例外。他像我见过的任何东西都不同。\n肯尼斯·克拉克 肯尼斯·克拉克是我所知道的最好的非小说作家，在任何主题上都是。大多数写艺术史的人并不真正喜欢艺术；你可以从一千个小迹象中看出来。但克拉克喜欢，不仅仅是智识上的，而是像期待美味晚餐那样的喜欢。\n然而，真正使他脱颖而出的是他想法的质量。他的风格看似随意，但他的书中的内容比一个艺术专著图书馆还要多。阅读《裸体》就像乘坐法拉利。就在你刚刚安顿下来时，加速把你猛地推回座位。在你调整之前，汽车尖叫着转入第一个弯道，你被甩向一边。他的大脑产生的想法几乎快到无法掌握。最后在章节结束时，你停下来，眼睛睁得大大的，脸上带着大大的笑容。\n肯尼斯·克拉克在他那个时代是个明星，这要归功于纪录片系列《文明》。如果你只读一本关于艺术史的书，我会推荐《文明》。它比大学生被迫购买用于艺术史101的乏味西尔斯商品目录要好得多。\n拉里·米哈尔科 很多孩子在童年时都有一位伟大的老师。拉里·米哈尔科就是我的。当我回想时，好像三年级和四年级之间划了一条线。在米哈尔科先生之后，一切都不同了。\n为什么？首先，他智力上很好奇。我有其他一些聪明的老师，但我不会用智力上好奇来形容他们。回想起来，他作为小学老师不合时宜，我想他知道这一点。这对他来说一定很难，但对我们他的学生来说，这太棒了。他的班级是一次不断的冒险。我过去每天都喜欢上学。\n使他不同的另一件事是他喜欢我们。孩子们很擅长分辨这一点。其他老师充其量是仁慈的漠不关心。但米哈尔科先生似乎真的想成为我们的朋友。在四年级的最后一天，他拿出一台沉重的学校唱片机，给我们播放詹姆斯·泰勒的\u0026quot;你有朋友\u0026rdquo;。只要叫我的名字，你知道无论我在哪里，我都会跑过去。\n他在59岁时死于肺癌。我从来没有像在他的葬礼上那样哭过。\n列奥纳多 我在制作东西的过程中学到的一件事是，我小时候没有意识到，最好的东西很多都不是为观众制作的，而是为自己制作的。你在博物馆里看到绘画和图画，想象它们是为你观看而制作的。实际上很多最好的作品是作为一种探索世界的方式制作的，而不是取悦他人的方式。这些探索中最好的有时比明确为取悦而制作的东西更令人愉悦。\n列奥纳多做了很多事情。他最令人敬佩的品质之一是他做了这么多不同且令人敬佩的事情。人们现在所知道的是他的绘画和他更引人注目的发明，比如飞行器。这使他看起来像某种梦想家，在旁边勾勒火箭飞船的艺术概念。事实上，他做了大量更实用的技术发现。他作为工程师和作为画家一样出色。\n对我来说，他最令人印象深刻的作品是他的绘画。它们明显地更多是作为研究世界的方式制作的，而不是生产美丽的东西。然而，它们可以与任何艺术作品相媲美。在他之前或之后，没有人在没有人观看时能做得那么好。\n罗伯特·莫里斯 罗伯特·莫里斯有一个非常不寻常的品质：他从不犯错。这似乎要求你全知全能，但实际上出人意料地容易。除非你相当确定，否则不要说任何话。如果你不是全知全能的，你最终不会说太多。\n更准确地说，诀窍是注意你如何限定你所说的话。通过使用这个诀窍，据我所知，罗伯特只犯过一次错误，那是他还是个本科生的时候。当Mac出现时，他说小型台式电脑永远不会适合真正的黑客工作。\n不过，在他的情况下称之为诀窍是错误的。如果这是一个有意识的诀窍，他会在兴奋的时刻滑倒。对罗伯特来说，这个品质是天生的。他具有几乎超人的正直。他不仅仅是一般正确，而且对他自己正确的程度也正确。\n你会认为永远不会犯错是如此美好的事情，每个人都会这样做。似乎不需要太多额外的工作来对想法的错误和对想法本身给予同样多的关注。然而几乎没有人这样做。我知道这有多难，因为自从遇见罗伯特以来，我尝试在软件中做他似乎在硬件中所做的事情。\nP.G.伍德豪斯 人们终于开始承认伍德豪斯是伟大的作家。如果你想在自己时代被认为是伟大的小说家，你必须听起来很智识。如果你写的东西是流行的、娱乐性的或有趣的，你就理所当然地令人怀疑。这使得伍德豪斯更加令人印象深刻，因为这意味着要按自己的意愿写作，他必须承诺在自己的一生中被鄙视。\n伊夫林·沃称他为伟大的作家，但在当时的大多数人看来，这会被读作一种骑士精神或故意反常的姿态。当时，任何随机的大学生自传小说都可以指望从文学界获得更尊重的对待。\n伍德豪斯可能从简单的原子开始，但他将它们组合成分子的方式几乎是完美无缺的。特别是他的节奏。写这个让我自我意识很强。我只能想到另外两个在风格上接近他的作家：伊夫林·沃和南希·米特福德。这三个人使用英语就像他们拥有它一样。\n但伍德豪斯有他们两个都没有的东西。他很自在。伊夫林·沃和南希·米特福在乎别人对他们的看法：他想看起来贵族化；她担心自己不够聪明。但伍德豪斯根本不在乎别人对他的看法。他写的就是他想写的。\n亚历山大·考尔德 考尔德在这份名单上是因为他让我快乐。他的作品能与列奥纳多的相比吗？可能不能。20世纪可能没有任何东西能与之相比。但现代主义好的方面，考尔德都有，而且是以一种看起来毫不费力的方式拥有的。\n现代主义好的方面是它的新鲜感。艺术在19世纪变得沉闷。当时流行的绘画大多是McMansion的艺术等价物——大、做作、虚假。现代主义意味着重新开始，用儿童可能有的同样真诚的动机制作东西。从中受益最多的艺术家是那些保留了儿童自信的人，比如克利和考尔德。\n克利令人印象深刻，因为他能以如此多不同的风格工作。但在两者之间，我更喜欢考尔德，因为他的作品看起来更快乐。归根结底，艺术的目的是吸引观众。很难预测什么会；有时最初看起来有趣的东西一个月后会让你感到厌烦。考尔德的雕塑从来不会变得无聊。它们只是静静地坐在那里散发着乐观主义，像永远不会耗尽的电池。从书籍和照片中我可以判断，考尔德作品的快乐是他自己的快乐表现出来的。\n简·奥斯汀 每个人都敬佩简·奥斯汀。把我的名字加到名单上。对我来说，她似乎是有史以来最伟大的小说家。\n我对事物如何运作感兴趣。当我读大多数小说时，我既关注故事，也关注作者的选择。但在她的小说中，我看不见运作的齿轮。尽管我真的很想知道她是怎么做到的，但我无法弄清楚，因为她太棒了，她的故事看起来不像是编造的。我感觉自己正在读对实际发生事情的描述。\n我年轻时读很多小说。我现在不能读了，因为它们中没有足够的信息。与历史和传记相比，小说显得如此贫乏。但读奥斯汀就像读非小说类作品。她写得如此之好，你甚至不会注意到她。\n约翰·麦卡锡 约翰·麦卡锡发明了Lisp，人工智能领域（或至少是术语），并且是两个顶级计算机科学系MIT和斯坦福的早期成员。没有人会否认他是伟人之一，但他对我来说特别是个英雄，因为Lisp。\n我们现在很难理解这在当时是一个多么大的概念飞跃。矛盾的是，他的成就难以欣赏的原因之一是它如此成功。过去20年发明的几乎所有编程语言都包含了Lisp的想法，而且每年中位数语言变得越来越像Lisp。\n在1958年，这些想法绝对不明显。在1958年，似乎有两种思考编程的方式。有些人认为它是数学，并证明图灵机的定理。其他人认为它是一种完成事情的方式，并设计过于受当时技术影响的语言。只有麦卡锡弥合了差距。他设计了一种是数学的语言。但设计这个词不太对；发现更合适。\n喷火战斗机 当我列出这份名单时，我发现自己在想道格拉斯·巴德、R.J.米切尔和杰弗里·奎尔这样的人，我意识到尽管他们一生中做了很多事情，但有一个最重要的因素连接着他们：喷火战斗机。\n这应该是一份英雄名单。一台机器怎么能出现在上面？因为那台机器不仅仅是一台机器。它是一个英雄的透镜。非凡的奉献投入其中，非凡的勇气从中产生。\n称第二次世界大战为善与恶的较量是陈词滥调，但在战斗机设计之间，确实如此。喷火战斗机的原始对手，ME 109，是一架残酷实用的飞机。它是一台杀戮机器。喷火战斗机是乐观主义的化身。不仅仅是在它美丽的线条上：它处于可制造能力的边缘。但走高端路线奏效了。在空中，美有优势，只是一点点。\n史蒂夫·乔布斯 肯尼迪被杀时还活着的人通常记得听到消息时他们确切在哪里。我清楚地记得当朋友问我是否听说史蒂夫·乔布斯得了癌症时我在哪里。就像地板塌陷了一样。几秒钟后她告诉我那是罕见的可手术类型，他会没事的。但那几秒钟似乎很长。\n我不确定是否要把乔布斯列入这份名单。苹果公司的很多人似乎都害怕他，这是个坏兆头。但他迫使人们敬佩。\n史蒂夫·乔布斯是什么没有名字，因为以前从来没有像他这样的人。他自己不设计苹果的产品。从历史上看，与他所做的最接近的类比是伟大的文艺复兴艺术赞助人。作为公司的CEO，这使他独一无二。\n大多数CEO将品味委托给下属。设计悖论意味着他们或多或少在随机选择。但史蒂夫·乔布斯自己就有品味——如此好的品味，他向世界展示了品味比他们意识到的更重要得多。\n艾萨克·牛顿 牛顿在我的英雄万神殿中扮演着奇怪的角色：他是那个我责备自己的人。他致力于大事，至少在他生命的一部分时间是如此。在做小事时很容易分心。你正在回答的问题愉快地熟悉。你获得立即的奖励——事实上，如果你从事暂时重要的事情，你在你的时代会获得更大的奖励。但我不安地意识到，这是通往应得的默默无闻的道路。\n要做真正伟大的事情，你必须寻找人们甚至没有意识到是问题的问题。可能还有其他人像牛顿一样做得那么好，对于他们的时代，但牛顿是我这种思想方式的典范。我只能开始理解这对他来说一定是种什么感觉。\n你只有一次生命。为什么不做大事？\u0026ldquo;范式转换\u0026quot;这个词现在被过度使用，但库恩抓住了什么。而且你知道还有更多在那里，被后来令人惊讶的懒惰和愚蠢的薄墙与我们分开。如果我们像牛顿那样工作。\n感谢特雷弗·布莱克韦尔、杰西卡·利文斯顿和杰基·麦克多诺阅读本文的草稿。\n",
    "description": "",
    "tags": ["英雄","榜样","卓越","诚实","奉献","影响力"],
    "categories": [],
    "content": "→ English Version\n一些英雄 2008年4月\n我保存了一些话题，因为写它们会很有趣。这就是其中之一：我的英雄名单。\n我并不是说这是n个最令人敬佩的人的名单。谁能列出这样的名单，即使他们想这么做？例如，爱因斯坦不在名单上，尽管他可能应该出现在任何令人敬佩的人的简短名单上。我曾问一位物理学家朋友，爱因斯坦是否真的像他的名声所暗示的那样聪明，她说是的，他是。那为什么他不在名单上呢？因为我必须去问。这是一个影响过我的人的名单，而不是如果我能理解他们的工作就会影响我的人。\n我的检验标准是想到一个人然后问\u0026quot;这个人是我的英雄吗？\u0026ldquo;它经常返回令人惊讶的答案。例如，对于蒙田，他可以说是散文的发明者，它返回了假。为什么？当我思考称某人为英雄意味着什么时，这意味着我会通过问他们在同样情况下会做什么来决定我该做什么。这是一个比敬佩更严格的标准。\n在列出名单后，我看看是否有模式，确实有，一个非常清晰的模式。名单上的每个人都有两个品质：他们几乎过度地关心他们的工作，而且他们绝对诚实。我说的诚实不是指值得信赖，而是指他们从不迎合：他们从不因为观众想要而说或做某些事情。由于这个原因，他们基本上都是颠覆性的，尽管他们隐瞒的程度不同。\n杰克·兰伯特 我在1970年代的匹兹堡长大。除非你在那里，否则很难想象那个镇对钢人队的感觉。在当地，所有的消息都是坏的。钢铁工业正在消亡。但钢人队是美式足球中最棒的球队——而且，以一种似乎反映城市个性的方式。他们不做任何花哨的事情。他们只是把工作做好。\n其他球员更有名：特里·布拉德肖、佛朗哥·哈里斯、林恩·斯旺。但他们打进攻，你总是会因此获得更多关注。作为一个十二岁的足球专家，在我看来，他们中最好的是杰克·兰伯特。而使他如此出色的原因是他完全无情。他不仅仅在乎打得好；他几乎在乎得太多了。当对方的球员在他的争球线一侧持球时，他似乎把这视为个人侮辱。\n1970年代匹兹堡的郊区是个相当沉闷的地方。学校很无聊。周围的所有成年人都在为大公司工作而感到无聊。通过大众传媒传递给我们的一切都是（a）平淡无奇的，（b）在别处生产的。杰克·兰伯特是个例外。他像我见过的任何东西都不同。\n肯尼斯·克拉克 肯尼斯·克拉克是我所知道的最好的非小说作家，在任何主题上都是。大多数写艺术史的人并不真正喜欢艺术；你可以从一千个小迹象中看出来。但克拉克喜欢，不仅仅是智识上的，而是像期待美味晚餐那样的喜欢。\n然而，真正使他脱颖而出的是他想法的质量。他的风格看似随意，但他的书中的内容比一个艺术专著图书馆还要多。阅读《裸体》就像乘坐法拉利。就在你刚刚安顿下来时，加速把你猛地推回座位。在你调整之前，汽车尖叫着转入第一个弯道，你被甩向一边。他的大脑产生的想法几乎快到无法掌握。最后在章节结束时，你停下来，眼睛睁得大大的，脸上带着大大的笑容。\n肯尼斯·克拉克在他那个时代是个明星，这要归功于纪录片系列《文明》。如果你只读一本关于艺术史的书，我会推荐《文明》。它比大学生被迫购买用于艺术史101的乏味西尔斯商品目录要好得多。\n拉里·米哈尔科 很多孩子在童年时都有一位伟大的老师。拉里·米哈尔科就是我的。当我回想时，好像三年级和四年级之间划了一条线。在米哈尔科先生之后，一切都不同了。\n为什么？首先，他智力上很好奇。我有其他一些聪明的老师，但我不会用智力上好奇来形容他们。回想起来，他作为小学老师不合时宜，我想他知道这一点。这对他来说一定很难，但对我们他的学生来说，这太棒了。他的班级是一次不断的冒险。我过去每天都喜欢上学。\n使他不同的另一件事是他喜欢我们。孩子们很擅长分辨这一点。其他老师充其量是仁慈的漠不关心。但米哈尔科先生似乎真的想成为我们的朋友。在四年级的最后一天，他拿出一台沉重的学校唱片机，给我们播放詹姆斯·泰勒的\u0026quot;你有朋友\u0026rdquo;。只要叫我的名字，你知道无论我在哪里，我都会跑过去。\n他在59岁时死于肺癌。我从来没有像在他的葬礼上那样哭过。\n列奥纳多 我在制作东西的过程中学到的一件事是，我小时候没有意识到，最好的东西很多都不是为观众制作的，而是为自己制作的。你在博物馆里看到绘画和图画，想象它们是为你观看而制作的。实际上很多最好的作品是作为一种探索世界的方式制作的，而不是取悦他人的方式。这些探索中最好的有时比明确为取悦而制作的东西更令人愉悦。\n列奥纳多做了很多事情。他最令人敬佩的品质之一是他做了这么多不同且令人敬佩的事情。人们现在所知道的是他的绘画和他更引人注目的发明，比如飞行器。这使他看起来像某种梦想家，在旁边勾勒火箭飞船的艺术概念。事实上，他做了大量更实用的技术发现。他作为工程师和作为画家一样出色。\n对我来说，他最令人印象深刻的作品是他的绘画。它们明显地更多是作为研究世界的方式制作的，而不是生产美丽的东西。然而，它们可以与任何艺术作品 …"
  },{
    "title": "一场本地革命？",
    "url": "/paul_graham/essays_zh/revolution/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n一场本地革命？ 2009年4月\n最近我意识到我脑中一直有两个想法，如果结合起来会爆炸。\n第一个是创业公司可能代表一个新的经济阶段，规模相当于工业革命。我不确定这一点，但似乎有相当大的可能性是真实的。作为创业公司的创始人或早期员工，人们的生产力要高得多——想象一下，如果拉里和谢尔盖去一家大公司工作，他们的成就会有多少减少——而那种规模的改进可以改变社会习俗。\n第二个想法是创业公司是一种在某些专门从事它的地方繁荣的企业类型——硅谷专门从事创业公司，就像洛杉矶专门从事电影，或纽约专门从事金融一样。[1]\n如果两个都是真的呢？如果创业公司既是一个新的经济阶段，又是一种只在某些中心繁荣的企业类型呢？\n如果是这样，这场革命将是特别革命性的。所有以前的革命都传播了。农业、城市和工业化都广泛传播。如果创业公司最终像电影业一样，只有少数几个中心和一个主导中心，那将产生新颖的后果。\n已经有迹象表明创业公司可能不会特别广泛传播。创业公司的传播似乎比工业革命的传播慢得多，尽管现在的通信速度快得多。\n在博尔顿与瓦特成立后的几十年内，蒸汽机散布在北欧和北美各地。工业化有一段时间没有传播到这些地区以外。它只传播到有强大中产阶级的地方——即私人公民可以发财而不被没收的国家。否则，投资工厂就不值得了。但在有强大中产阶级的国家，工业技术很容易扎根。单个矿山或工厂主可以决定安装蒸汽机，几年内他可能会找到当地的人来为他制造一个。所以蒸汽机传播很快。而且它们传播广泛，因为矿山和工厂的位置是由河流、港口和原材料来源等特征决定的。[2]\n创业公司似乎不那么容易传播，部分是因为它们更多是社会的而不是技术的现象，部分是因为它们不与地理相关。单个欧洲制造商可以进口工业技术，它们会工作得很好。但这似乎对创业公司不太有效：你需要一个专业知识的社区，就像你在电影业中一样。[3] 此外，没有相同的力量推动创业公司传播。一旦铁路或电网被发明，每个地区都必须拥有它们。没有铁路或电力的地区是一个丰富的潜在市场。但这对创业公司来说不是真的。不需要法国的微软或德国的谷歌。\n政府可能决定他们想在当地鼓励创业公司，但政府政策不能像真正的需求那样将它们召唤出来。\n这一切将如何发展？如果我现在必须预测，我会说创业公司会传播，但非常缓慢，因为它们的传播将不是由政府政策（不会起作用）或市场需求（不存在）驱动的，而是在它发生的程度上，由迄今为止导致创业文化传播的相同随机因素驱动。而这种随机因素将越来越被现有创业中心的吸引力所压倒。\n硅谷之所以在那里，是因为威廉·肖克利想搬回他长大的帕洛阿尔托，被他吸引到西部与他一起工作的专家们非常喜欢那里而留了下来。西雅图作为科技中心的地位很大程度上归功于同样的原因：盖茨和艾伦想回家。否则，阿尔伯克基可能会在排名中拥有西雅图的位置。波士顿是一个科技中心，因为它是美国乃至世界的知识之都。如果电池风险投资公司没有拒绝Facebook，波士顿现在在创业雷达屏幕上会大得多。\n但当然，Facebook在硅谷而不是波士顿获得资助并非巧合。硅谷比波士顿有更多更大胆的投资者，甚至本科生都知道这一点。\n波士顿的例子说明了在这个游戏的后期建立一个新的创业中心的困难。如果你想通过重现现有创业中心发生的方式来创建一个创业中心，方法是在一个如此美好的地方建立一流的研究大学，以至于富人想住在那里。那么这个城市将对两个你需要的群体都友好：创始人和投资者。这就是产生硅谷的组合。但硅谷没有硅谷与之竞争。如果你现在尝试在一个好地方建立一所伟大大学来创建创业中心，它会更难开始，因为它产生的许多最好的创业公司会被吸引到现有的创业中心。\n最近我提出了一个潜在的捷径：付钱让创业公司搬迁。一旦你有足够多的优秀创业公司在一个地方，它将创造一个自我维持的连锁反应。创始人会开始搬到那里而不需要付钱，因为那是他们的同行所在的地方，投资者也会出现，因为那是交易所在的地方。\n在实践中，我怀疑任何政府都有胆量尝试这个，或者有正确的头脑来做。我并不是作为一个实用的建议，而更多是对故意创建创业中心所需最低限度的探索。\n最可能的情况是（1）没有政府会成功建立创业中心，（2）创业文化的传播将因此由迄今为止驱动它的随机因素驱动，但是（3）这些因素将越来越被现有创业中心的吸引力所压倒。结果：这场革命，如果它是一场革命的话，将是异常本地化的。\n注释 [1] 有两种非常不同类型的创业公司：一种是自然演化的，另一种是为了\u0026quot;商业化\u0026quot;科学发现而被召唤出来的。大多数计算机/软件创业公司现在是第一种，大多数制药创业公司是第二种。当我在本文中谈论创业公司时，我指的是第一种创业公司。使第二种创业公司传播没有困难：你所要做的就是资助医学研究实验室；商业化专家们抛出的任何新发现就像建造一个新机场一样简单。第二种创业公司既不需要也不产生创业文化。但这意味着拥有第二种创业公司不会让你得到第一种创业公司。费城就是一个例子：很多第二种创业公司，但几乎没有第一种。\n顺便说一句，谷歌可能看起来像第二种创业公司的一个例子，但它不是。谷歌不是商业化的PageRank。他们可以使用另一种算法，一切都会是一样的。使谷歌成为谷歌的是他们在网络演化的关键时期关心做好搜索。\n[2] 瓦特没有发明蒸汽机。他的关键发明是一个使蒸汽机效率显著提高的改进：独立的冷凝器。但这简化了他的作用。他对问题有如此不同的态度，并以如此大的能量接近它，以至于他改变了这个领域。也许最准确的说法是瓦特重新发明了蒸汽机。\n[3] 这里最大的反例是Skype。如果你做的事情在美国会被关闭，那么位于别处就成为优势。这就是为什么Kazaa取代了Napster。创始人从运行Kazaa获得的专业知识和联系有助于确保Skype的成功。\n感谢帕特里克·科利森、杰西卡·利文斯顿和弗雷德·威尔逊阅读本文草稿。\n",
    "description": "",
    "tags": ["创业","硅谷","革命","技术","创新","经济"],
    "categories": [],
    "content": "→ English Version\n一场本地革命？ 2009年4月\n最近我意识到我脑中一直有两个想法，如果结合起来会爆炸。\n第一个是创业公司可能代表一个新的经济阶段，规模相当于工业革命。我不确定这一点，但似乎有相当大的可能性是真实的。作为创业公司的创始人或早期员工，人们的生产力要高得多——想象一下，如果拉里和谢尔盖去一家大公司工作，他们的成就会有多少减少——而那种规模的改进可以改变社会习俗。\n第二个想法是创业公司是一种在某些专门从事它的地方繁荣的企业类型——硅谷专门从事创业公司，就像洛杉矶专门从事电影，或纽约专门从事金融一样。[1]\n如果两个都是真的呢？如果创业公司既是一个新的经济阶段，又是一种只在某些中心繁荣的企业类型呢？\n如果是这样，这场革命将是特别革命性的。所有以前的革命都传播了。农业、城市和工业化都广泛传播。如果创业公司最终像电影业一样，只有少数几个中心和一个主导中心，那将产生新颖的后果。\n已经有迹象表明创业公司可能不会特别广泛传播。创业公司的传播似乎比工业革命的传播慢得多，尽管现在的通信速度快得多。\n在博尔顿与瓦特成立后的几十年内，蒸汽机散布在北欧和北美各地。工业化有一段时间没有传播到这些地区以外。它只传播到有强大中产阶级的地方——即私人公民可以发财而不被没收的国家。否则，投资工厂就不值得了。但在有强大中产阶级的国家，工业技术很容易扎根。单个矿山或工厂主可以决定安装蒸汽机，几年内他可能会找到当地的人来为他制造一个。所以蒸汽机传播很快。而且它们传播广泛，因为矿山和工厂的位置是由河流、港口和原材料来源等特征决定的。[2]\n创业公司似乎不那么容易传播，部分是因为它们更多是社会的而不是技术的现象，部分是因为它们不与地理相关。单个欧洲制造商可以进口工业技术，它们会工作得很好。但这似乎对创业公司不太有效：你需要一个专业知识的社区，就像你在电影业中一样。[3] 此外，没有相同的力量推动创业公司传播。一旦铁路或电网被发明，每个地区都必须拥有它们。没有铁路或电力的地区是一个丰富的潜在市场。但这对创业公司来说不是真的。不需要法国的微软或德国的谷歌。\n政府可能决定他们想在当地鼓励创业公司，但政府政策不能像真正的需求那样将它们召唤出来。\n这一切将如何发展？如果我现在必须预测，我会说创业公司会传播，但非常缓慢，因为它们的传播将不是由政府政策（不会起作用）或市场需求（不存在）驱动的，而是在它发生的程度上，由迄今为止导致创业文化传播的相同随机因素驱动。而这种随机因素将越来越被现有创业中心的吸引力所压倒。\n硅谷之所以在那里，是因为威廉·肖克利想搬回他长大的帕洛阿尔托，被他吸引到西部与他一起工作的专家们非常喜欢那里而留了下来。西雅图作为科技中心的地位很大程度上归功于同样的原因：盖茨和艾伦想回家。否则，阿尔伯克基可能会在排名中拥有西雅图的位置。波士顿是一个科技中心，因为它是美国乃至世界的知识之都。如果电池风险投资公司没有拒绝Facebook，波士顿现在在创业雷达屏幕上会大得多。\n但当然，Facebook在硅谷而不是波士顿获得资助并非巧合。硅谷比波士顿有更多更大胆的投资者，甚至本科生都知道这一点。\n波士顿的例子说明了在这个游戏的后期建立一个新的创业中心的困难。如果你想通过重现现有创业中心发生的方式来创建一个创业中心，方法是在一个如此美好的地方建立一流的研究大学，以至于富人想住在那里。那么这个城市将对两个你需要的群体都友好：创始人和投资者。这就是产生硅谷的组合。但硅谷没有硅谷与之竞争。如果你现在尝试在一个好地方建立一所伟大大学来创建创业中心，它会更难开始，因为它产生的许多最好的创业公司会被吸引到现有的创业中心。\n最近我提出了一个潜在的捷径：付钱让创业公司搬迁。一旦你有足够多的优秀创业公司在一个地方，它将创造一个自我维持的连锁反应。创始人会开始搬到那里而不需要付钱，因为那是他们的同行所在的地方，投资者也会出现，因为那是交易所在的地方。\n在实践中，我怀疑任何政府都有胆量尝试这个，或者有正确的头脑来做。我并不是作为一个实用的建议，而更多是对故意创建创业中心所需最低限度的探索。\n最可能的情况是（1）没有政府会成功建立创业中心，（2）创业文化的传播将因此由迄今为止驱动它的随机因素驱动，但是（3）这些因素将越来越被现有创业中心的吸引力所压倒。结果：这场革命，如果它是一场革命的话，将是异常本地化的。\n注释 [1] 有两种非常不同类型的创业公司：一种是自然演化的，另一种是为了\u0026quot;商业化\u0026quot;科学发现而被召唤出来的。大多数计算机/软件创业公司现在是第一种，大多数制药创业公司是第二种。当我在本文中谈论创业公司时，我指的是第一种创业公司。使第二种创业公司传播没有困难：你所要做的就是资助医学研究实验室；商业化专家们抛出的任何新发现就像建造一个新机场一样简单。第二种创 …"
  },{
    "title": "一种新的风险投资动物",
    "url": "/paul_graham/essays_zh/ycombinator/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n一种新的风险投资动物 2008年3月，2013年5月修订\n（这篇文章源自我为自己写的东西，以弄清楚我们在做什么。尽管Y Combinator现在已经有3年历史了，我们仍在努力理解其含义。）\n我最近很恼火地读到一篇关于Y Combinator的描述，说\u0026quot;Y Combinator为创业公司提供种子资金\u0026quot;。特别恼人的是我写的。这并没有真正传达我们所做的事情。而它不准确的原因是，矛盾的是，为非常早期的创业公司提供资金并不是主要关于资金。\n说YC为创业公司提供种子资金是用早期模型来描述。就像把汽车称为无马马车一样。\n当你按比例缩放动物时，你不能只是按比例保持一切。例如，体积随着线性尺寸的立方增长，但表面积只随着平方增长。因此，当动物变大时，它们散热有困难。这就是为什么老鼠和兔子有毛皮，而大象和河马没有。你不能通过缩小大象来制造老鼠。\nYC代表了一种新的、更小的动物——小到所有规则都不同。\n在我们之前，创业资金业务中的大多数公司都是风险投资基金。VC通常资助比我们更晚阶段的公司。他们提供如此多的资金，以至于即使他们做的其他事情可能很有价值，但将VC视为资金来源并不那么不准确。好的VC是\u0026quot;聪明的钱\u0026quot;，但它们仍然是钱。\n所有好的投资者都提供资金和帮助的组合。但这些以不同方式扩展，就像体积和表面积一样。后期投资者提供巨额资金和相对较少的帮助：当一家即将上市的公司获得5000万美元的夹层融资时，交易几乎完全是关于资金。当你在风险投资过程中提前时，帮助与资金的比例增加，因为早期阶段的公司有不同的需求。早期阶段的公司需要更少的钱，因为它们更小且运行成本更低，但它们需要更多的帮助，因为它们的生活非常不稳定。因此，当VC进行200万美元的A轮融资时，他们通常期望在资金之外提供大量的帮助。\nY Combinator占据了频谱的最早端。我们在VC融资之前至少有一步，通常有两步。（虽然一些创业公司直接从YC转到VC，但最常见的轨迹是先进行天使轮融资。）而在Y Combinator发生的事情与A轮融资中发生的事情的不同，就像A轮融资与夹层融资的不同一样。\n在我们这一端，资金几乎是一个微不足道的因素。创业公司通常只由创始人组成。他们的生活费用是公司的主要开支，而且由于大多数创始人不到30岁，他们的生活费用很低。但在这个早期阶段，公司需要很多帮助。实际上每个问题都还没有答案。我们资助的一些公司已经在他们的软件上工作了一年或更长时间，但其他公司还没有决定要做什么，甚至还没有决定创始人应该由谁组成。\n当公关人员和记者在创业公司变大后重述它们的历史时，他们总是低估最初的不确定性。他们不是故意误导。当你看像谷歌这样的公司时，很难想象它们曾经可能是渺小和无助的。当然，在某个时候它们只是车库里的几个人——但即使那时它们的伟大也是确定的，它们所要做的就是沿着命运的铁路轨道前进。\n远非如此。许多同样有希望开端的创业公司最终失败了。谷歌现在有如此大的势头，任何人要阻止它们都会很困难。但在开始时，只需要两名谷歌员工在六个月内专注于错误的事情，公司就可能死亡。\n我们知道，因为我们曾经经历过，创业公司在最早阶段是多么脆弱。奇怪的是，这就是创始人从它们中获得如此富有回报的原因。回报总是与风险成比例，而非常早期的创业公司风险极高。\n我们在Y Combinator真正做的是让创业公司直线启动。你可以为YC使用的许多比喻之一是航空母舰上的蒸汽弹射器。我们让创业公司升空。几乎刚刚升空，但足以让它们快速加速。\n当你发射飞机时，它们必须正确设置，否则你只是在发射抛射物。它们必须直指甲板；机翼必须正确调整；发动机必须全速运转；飞行员必须准备好。这些就是我们处理的问题。在我们资助创业公司后，我们与它们密切合作三个月——事实上如此密切以至于我们坚持它们搬到我们所在的地方。而我们在那三个月所做的是确保一切都为启动做好准备。如果联合创始人之间有紧张关系，我们帮助解决。我们将所有文件正确设置，以免以后出现 nasty 惊喜。如果创始人不确定首先关注什么，我们试图弄清楚。如果它们面前有障碍，我们要么试图移除它，要么将创业公司横向移动。目标是将所有干扰排除在外，以便创始人可以利用这段时间来构建（或完成构建）令人印象深刻的东西。然后在三个月即将结束时，我们按下蒸汽弹射器的按钮，以Demo Day的形式，当前一批创业公司向硅谷几乎每个投资者展示。\n启动公司与启动产品并不相同。虽然我们在产品启动策略上花了很多时间，但有些东西构建时间太长，创业公司无法在筹集下一轮融资之前启动它们。我们资助的一些最有前途的创业公司还没有启动它们的产品，但作为公司已经 definitely 启动了。\n在最早阶段，创业公司不仅有更多问题需要回答，而且它们往往是不同类型的问题。在后期创业公司中，问题涉及交易、招聘或组织。在最早期阶段，它们往往涉及技术和设计。你制造什么？这是要解决的第一个问题。这就是为什么我们的座右铭是\u0026quot;制造人们想要的东西\u0026quot;。这对公司来说总是一件好事，但在早期更重要，因为它为所有其他问题设定了界限。你雇佣谁，你筹集多少钱，你如何营销自己——它们都取决于你在制造什么。\n因为早期问题如此多地涉及技术和设计，你可能需要是黑客才能做我们所做的事情。虽然一些VC有技术背景，但我不知道还有谁仍在编写代码。他们的专业知识主要在商业方面——这是应该的，因为这是你在A轮和（如果你幸运的话）IPO之间阶段需要的专业知识类型。\n我们与VC如此不同，以至于我们真的是一种不同的动物。我们能否声称创始人因这种新型风险投资公司而处境更好？我很确定答案是肯定的，因为YC是我们创业公司所发生事情的改进版本，而我们的案例并不典型。我们用朋友朱利安提供的10,000美元种子资金开始了Viaweb。他是一名律师，安排了我们所有的文书工作，所以我们可以只是编码。我们花了三个月时间构建版本1，然后向投资者展示以筹集更多资金。听起来很熟悉，不是吗？但YC显著改善了这一点。朱利安对法律和商业了解很多，但他的建议仅止于此；他不是创业公司的人。所以我们早期犯了一些基本错误。当我们向投资者展示时，我们只向2个人展示，因为这是我们所认识的全部。如果我们有后来的自己来鼓励和建议我们，有Demo Day可以展示，我们的状况会好得多。我们可能能够以我们估值的3到5倍筹集资金。\n如果我们拿走我们资助公司7%的股份，创始人只需要在下一轮融资中做得好7.5%就能净收益领先。我们肯定能做到这一点。\n那么我们的7%来自谁？如果创始人最终净收益领先，那不是来自他们。那么是来自后期投资者吗？嗯，他们最终确实支付了更多。但我认为他们支付更多是因为公司实际上更有价值。而后期投资者对此没有问题。VC基金的回报取决于他们投资公司的质量，而不是他们能多便宜地购买股票。\n如果我们所做的事情有用，为什么以前没有人做？对此有两个答案。一个是人们以前做过，只是零散地小规模做。在我们之前，种子资金主要来自个人天使投资者。例如，拉里和谢尔盖从太阳公司创始人之一安迪·贝托尔斯海姆那里获得了他们的种子资金。因为他是个创业公司的人，他可能给了他们有用的建议。但从天使投资者那里筹集资金是碰运气的事情。对大多数天使来说，这是一个副业，所以他们一年只做少数几笔交易，他们不会在他们投资的创业公司上花很多时间。而且他们很难联系到，因为他们不希望随机的创业公司用商业计划书烦扰他们。谷歌的伙计们很幸运，因为他们认识认识贝托尔斯海姆的人。与天使通常需要个人介绍。\n没有人做我们所做的事情的另一个原因是，直到最近，创办创业公司的成本要高得多。你会注意到我们没有资助任何生物技术创业公司。那仍然很昂贵。但进步的技术使网络创业公司如此便宜，以至于你真的可以用15,000美元让一家公司升空。如果你理解如何操作蒸汽弹射器的话。\n因此，实际上发生的情况是，一个新的生态位已经开放，而Y Combinator是进入它的新动物。我们不是风险投资基金的替代品。我们占据一个新的、相邻的生态位。而我们生态位的条件确实相当不同。不仅仅是我们面临的问题不同；整个业务结构都不同。VC在玩零和游戏。他们都在竞争固定数量\u0026quot;交易流\u0026quot;的一块，这解释了他们很多行为。而我们的模式是通过鼓励那些会找到工作的黑客转而创办自己的创业公司来创造新的交易流。我们更多地与雇主竞争，而不是VC。\n发生这样的事情并不令人惊讶。大多数领域随着发展变得更加专业化——更加细化，而创业公司当然是过去几十年中有很多发展的领域。风险投资业务目前的形式只有大约四十年历史。它会进化是合乎道理的。\n新的生态位最初会被描述，甚至被其居民用旧的术语来描述，这是自然的。但实际上Y Combinator并不从事创业融资业务。实际上，我们更像是一个小的、毛茸茸的蒸汽弹射器。\n感谢特雷弗·布莱克威尔、杰西卡·利文斯顿和罗伯特·莫里斯阅读本文的草稿。\n评论这篇文章。\n",
    "description": "",
    "tags": ["Y Combinator","创业公司","风险投资","融资","黑客","企业家精神"],
    "categories": [],
    "content": "→ English Version\n一种新的风险投资动物 2008年3月，2013年5月修订\n（这篇文章源自我为自己写的东西，以弄清楚我们在做什么。尽管Y Combinator现在已经有3年历史了，我们仍在努力理解其含义。）\n我最近很恼火地读到一篇关于Y Combinator的描述，说\u0026quot;Y Combinator为创业公司提供种子资金\u0026quot;。特别恼人的是我写的。这并没有真正传达我们所做的事情。而它不准确的原因是，矛盾的是，为非常早期的创业公司提供资金并不是主要关于资金。\n说YC为创业公司提供种子资金是用早期模型来描述。就像把汽车称为无马马车一样。\n当你按比例缩放动物时，你不能只是按比例保持一切。例如，体积随着线性尺寸的立方增长，但表面积只随着平方增长。因此，当动物变大时，它们散热有困难。这就是为什么老鼠和兔子有毛皮，而大象和河马没有。你不能通过缩小大象来制造老鼠。\nYC代表了一种新的、更小的动物——小到所有规则都不同。\n在我们之前，创业资金业务中的大多数公司都是风险投资基金。VC通常资助比我们更晚阶段的公司。他们提供如此多的资金，以至于即使他们做的其他事情可能很有价值，但将VC视为资金来源并不那么不准确。好的VC是\u0026quot;聪明的钱\u0026quot;，但它们仍然是钱。\n所有好的投资者都提供资金和帮助的组合。但这些以不同方式扩展，就像体积和表面积一样。后期投资者提供巨额资金和相对较少的帮助：当一家即将上市的公司获得5000万美元的夹层融资时，交易几乎完全是关于资金。当你在风险投资过程中提前时，帮助与资金的比例增加，因为早期阶段的公司有不同的需求。早期阶段的公司需要更少的钱，因为它们更小且运行成本更低，但它们需要更多的帮助，因为它们的生活非常不稳定。因此，当VC进行200万美元的A轮融资时，他们通常期望在资金之外提供大量的帮助。\nY Combinator占据了频谱的最早端。我们在VC融资之前至少有一步，通常有两步。（虽然一些创业公司直接从YC转到VC，但最常见的轨迹是先进行天使轮融资。）而在Y Combinator发生的事情与A轮融资中发生的事情的不同，就像A轮融资与夹层融资的不同一样。\n在我们这一端，资金几乎是一个微不足道的因素。创业公司通常只由创始人组成。他们的生活费用是公司的主要开支，而且由于大多数创始人不到30岁，他们的生活费用很低。但在这个早期阶段，公司需要很多帮助。实际上每个问题都还没有答案。我们资助的一些公司已经在他们的软件上工作了一年或更长时间，但其他公司还没有决定要做什么，甚至还没有决定创始人应该由谁组成。\n当公关人员和记者在创业公司变大后重述它们的历史时，他们总是低估最初的不确定性。他们不是故意误导。当你看像谷歌这样的公司时，很难想象它们曾经可能是渺小和无助的。当然，在某个时候它们只是车库里的几个人——但即使那时它们的伟大也是确定的，它们所要做的就是沿着命运的铁路轨道前进。\n远非如此。许多同样有希望开端的创业公司最终失败了。谷歌现在有如此大的势头，任何人要阻止它们都会很困难。但在开始时，只需要两名谷歌员工在六个月内专注于错误的事情，公司就可能死亡。\n我们知道，因为我们曾经经历过，创业公司在最早阶段是多么脆弱。奇怪的是，这就是创始人从它们中获得如此富有回报的原因。回报总是与风险成比例，而非常早期的创业公司风险极高。\n我们在Y Combinator真正做的是让创业公司直线启动。你可以为YC使用的许多比喻之一是航空母舰上的蒸汽弹射器。我们让创业公司升空。几乎刚刚升空，但足以让它们快速加速。\n当你发射飞机时，它们必须正确设置，否则你只是在发射抛射物。它们必须直指甲板；机翼必须正确调整；发动机必须全速运转；飞行员必须准备好。这些就是我们处理的问题。在我们资助创业公司后，我们与它们密切合作三个月——事实上如此密切以至于我们坚持它们搬到我们所在的地方。而我们在那三个月所做的是确保一切都为启动做好准备。如果联合创始人之间有紧张关系，我们帮助解决。我们将所有文件正确设置，以免以后出现 nasty 惊喜。如果创始人不确定首先关注什么，我们试图弄清楚。如果它们面前有障碍，我们要么试图移除它，要么将创业公司横向移动。目标是将所有干扰排除在外，以便创始人可以利用这段时间来构建（或完成构建）令人印象深刻的东西。然后在三个月即将结束时，我们按下蒸汽弹射器的按钮，以Demo Day的形式，当前一批创业公司向硅谷几乎每个投资者展示。\n启动公司与启动产品并不相同。虽然我们在产品启动策略上花了很多时间，但有些东西构建时间太长，创业公司无法在筹集下一轮融资之前启动它们。我们资助的一些最有前途的创业公司还没有启动它们的产品，但作为公司已经 definitely 启动了。\n在最早阶段，创业公司不仅有更多问题需要回答，而且它们往往是不同类型的问 …"
  },{
    "title": "不屈不挠的足智多谋",
    "url": "/paul_graham/essays_zh/relres/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n不屈不挠的足智多谋 2009年3月\n几天前，我终于把成为一名优秀创业创始人的素质概括为两个词：不屈不挠的足智多谋。\n在此之前，我最多只能把相反的素质概括为一个词：不幸。大多数词典说不幸意味着运气不好。但词典做得并不好。一支在比赛中超越对手但因裁判的错误决定而输掉的队伍可能被称为运气不好，但不会是不幸。不幸意味着被动。所谓不幸就是被环境所击打——让世界随心所欲地对待你，而不是你随心所欲地对待世界。[1]\n不幸的是，不幸没有反义词，这使得很难告诉创始人应该追求什么。\u0026ldquo;不要不幸\u0026quot;不是一个很好的口号。\n用隐喻来表达我们寻找的素质并不困难。最好的可能是橄榄球跑卫。一个好的跑卫不仅仅是有决心，还有灵活性。他们想要向前推进，但他们会即时调整计划。\n不幸的是，这只是一个隐喻，对美国以外的大多数人来说并不是很有用。\u0026ldquo;像一个跑卫一样\u0026quot;并不比\u0026quot;不要不幸\u0026quot;好。\n但最终我找到了如何直接表达这种素质的方法。我正在为投资者写演讲，我必须解释要在创始人中寻找什么。与不幸相反的人会是什么样？他们会是不屈不挠的足智多谋。不仅仅是不屈不挠。除了在一些大多数情况下不那么有趣的领域之外，这不足以让事情按照你的方式发展。在任何有趣的领域，困难都会是新颖的。这意味着你不能简单地冲过它们，因为你最初不知道它们有多难；你不知道你即将冲过的是泡沫块还是花岗岩。所以你必须足智多谋。你必须不断尝试新事物。\n不屈不挠地足智多谋。\n听起来不错，但这仅仅是一般成功的描述吗？我不这么认为。例如，这不是写作或绘画成功的秘诀。在那种工作中，秘诀更多的是主动好奇。足智多谋意味着障碍是外部的，在创业中通常是这样。但在写作和绘画中，它们主要是内部的；障碍是你自己的迟钝。[2]\n可能还有其他领域，\u0026ldquo;不屈不挠的足智多谋\u0026quot;是成功的秘诀。但尽管其他领域可能共享它，我认为这是我们找到的关于什么使一个优秀的创业创始人的最佳简短描述。我怀疑它可以变得更精确。\n既然我们知道我们在寻找什么，这就引出了其他问题。例如，这种素质可以教吗？经过四年试图教给人们，我可以说，是的，令人惊讶的是，很多时候它可以。不是对所有人，而是对许多人。[3] 有些人天生被动，但其他人有潜在的不屈不挠的足智多谋能力，只需要被发掘出来。\n对于那些迄今为止一直处于某种权威控制下的年轻人来说尤其如此。不屈不挠的足智多谋绝对不是大公司或大多数学校成功的秘诀。我甚至不想想大公司的秘诀是什么，但它肯定更长、更混乱，涉及足智多谋、服从和建立联盟的某种组合。\n识别这种素质也使我们更接近回答人们经常好奇的问题：可能有多少创业公司。并不像某些人认为的那样，这个数字有任何经济上限。没有理由相信消费者可以吸收的新创造财富量有任何限制，就像可证明的定理数量没有限制一样。所以可能创业公司数量的限制因素是潜在创始人的池子。有些人会成为优秀的创始人，而其他人不会。既然我们可以说什么使一个优秀的创始人，我们就知道如何为池子的大小设置上限。\n这个测试对个人也很有用。如果你想知道你是否是适合创业的那种人，问问自己你是否不屈不挠地足智多谋。如果你想知道是否应该招募某人作为联合创始人，问问他们是否是。\n你甚至可以在战术上使用它。如果我经营一家创业公司，这是我会在镜子上贴上的短语。\u0026ldquo;做人们想要的东西\u0026quot;是目的地，但\u0026quot;不屈不挠地足智多谋\u0026quot;是你如何到达那里。\n注释 [1] 我认为词典错误的原因是词义已经改变。今天从头开始写词典的人不会说不幸意味着运气不好。但几百年前他们可能会。过去的人们更多地受制于环境，结果我们用于好结果和坏结果的很多词语都源于关于运气的词。\n当我在意大利生活时，我曾经试图告诉某人我在做某件事上没有取得多大成功，但我想不起意大利语中表示成功的词。我花了一些时间试图描述我想要的词。最后她说：\u0026ldquo;啊！Fortuna！\u0026quot;（运气）。\n[2] 创业公司有一些方面，秘诀是主动好奇。有时候你所做的几乎纯粹是发现。不幸的是，这些时间在整个过程中只占很小的比例。另一方面，在研究中也是如此。\n[3] 我几乎会对大多数人这么说，但我意识到（a）我不知道大多数人是怎样的，（b）我对人们改变的能力病理性地乐观。\n感谢特雷弗·布莱克威尔和杰西卡·利文斯顿阅读本文草稿。\n",
    "description": "",
    "tags": ["创业","足智多谋","创始人","企业家精神","成功","毅力"],
    "categories": [],
    "content": "→ English Version\n不屈不挠的足智多谋 2009年3月\n几天前，我终于把成为一名优秀创业创始人的素质概括为两个词：不屈不挠的足智多谋。\n在此之前，我最多只能把相反的素质概括为一个词：不幸。大多数词典说不幸意味着运气不好。但词典做得并不好。一支在比赛中超越对手但因裁判的错误决定而输掉的队伍可能被称为运气不好，但不会是不幸。不幸意味着被动。所谓不幸就是被环境所击打——让世界随心所欲地对待你，而不是你随心所欲地对待世界。[1]\n不幸的是，不幸没有反义词，这使得很难告诉创始人应该追求什么。\u0026ldquo;不要不幸\u0026quot;不是一个很好的口号。\n用隐喻来表达我们寻找的素质并不困难。最好的可能是橄榄球跑卫。一个好的跑卫不仅仅是有决心，还有灵活性。他们想要向前推进，但他们会即时调整计划。\n不幸的是，这只是一个隐喻，对美国以外的大多数人来说并不是很有用。\u0026ldquo;像一个跑卫一样\u0026quot;并不比\u0026quot;不要不幸\u0026quot;好。\n但最终我找到了如何直接表达这种素质的方法。我正在为投资者写演讲，我必须解释要在创始人中寻找什么。与不幸相反的人会是什么样？他们会是不屈不挠的足智多谋。不仅仅是不屈不挠。除了在一些大多数情况下不那么有趣的领域之外，这不足以让事情按照你的方式发展。在任何有趣的领域，困难都会是新颖的。这意味着你不能简单地冲过它们，因为你最初不知道它们有多难；你不知道你即将冲过的是泡沫块还是花岗岩。所以你必须足智多谋。你必须不断尝试新事物。\n不屈不挠地足智多谋。\n听起来不错，但这仅仅是一般成功的描述吗？我不这么认为。例如，这不是写作或绘画成功的秘诀。在那种工作中，秘诀更多的是主动好奇。足智多谋意味着障碍是外部的，在创业中通常是这样。但在写作和绘画中，它们主要是内部的；障碍是你自己的迟钝。[2]\n可能还有其他领域，\u0026ldquo;不屈不挠的足智多谋\u0026quot;是成功的秘诀。但尽管其他领域可能共享它，我认为这是我们找到的关于什么使一个优秀的创业创始人的最佳简短描述。我怀疑它可以变得更精确。\n既然我们知道我们在寻找什么，这就引出了其他问题。例如，这种素质可以教吗？经过四年试图教给人们，我可以说，是的，令人惊讶的是，很多时候它可以。不是对所有人，而是对许多人。[3] 有些人天生被动，但其他人有潜在的不屈不挠的足智多谋能力，只需要被发掘出来。\n对于那些迄今为止一直处于某种权威控制下的年轻人来说尤其如此。不屈不挠的足智多谋绝对不是大公司或大多数学校成功的秘诀。我甚至不想想大公司的秘诀是什么，但它肯定更长、更混乱，涉及足智多谋、服从和建立联盟的某种组合。\n识别这种素质也使我们更接近回答人们经常好奇的问题：可能有多少创业公司。并不像某些人认为的那样，这个数字有任何经济上限。没有理由相信消费者可以吸收的新创造财富量有任何限制，就像可证明的定理数量没有限制一样。所以可能创业公司数量的限制因素是潜在创始人的池子。有些人会成为优秀的创始人，而其他人不会。既然我们可以说什么使一个优秀的创始人，我们就知道如何为池子的大小设置上限。\n这个测试对个人也很有用。如果你想知道你是否是适合创业的那种人，问问自己你是否不屈不挠地足智多谋。如果你想知道是否应该招募某人作为联合创始人，问问他们是否是。\n你甚至可以在战术上使用它。如果我经营一家创业公司，这是我会在镜子上贴上的短语。\u0026ldquo;做人们想要的东西\u0026quot;是目的地，但\u0026quot;不屈不挠地足智多谋\u0026quot;是你如何到达那里。\n注释 [1] 我认为词典错误的原因是词义已经改变。今天从头开始写词典的人不会说不幸意味着运气不好。但几百年前他们可能会。过去的人们更多地受制于环境，结果我们用于好结果和坏结果的很多词语都源于关于运气的词。\n当我在意大利生活时，我曾经试图告诉某人我在做某件事上没有取得多大成功，但我想不起意大利语中表示成功的词。我花了一些时间试图描述我想要的词。最后她说：\u0026ldquo;啊！Fortuna！\u0026quot;（运气）。\n[2] 创业公司有一些方面，秘诀是主动好奇。有时候你所做的几乎纯粹是发现。不幸的是，这些时间在整个过程中只占很小的比例。另一方面，在研究中也是如此。\n[3] 我几乎会对大多数人这么说，但我意识到（a）我不知道大多数人是怎样的，（b）我对人们改变的能力病理性地乐观。\n感谢特雷弗·布莱克威尔和杰西卡·利文斯顿阅读本文草稿。\n"
  },{
    "title": "不平等",
    "url": "/paul_graham/essays_zh/inequality/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n不平等 2005年8月\n（本文源自2005年Defcon大会的演讲。）\n假设你想要消除经济不平等。有两种方法可以做到：给穷人钱，或者从富人那里拿走钱。但它们实际上是一回事，因为如果你想给穷人钱，你必须从某个地方得到它。你不能从穷人那里得到，否则他们最终会回到起点。你必须从富人那里得到。\n当然，有一种方法可以让穷人变得更富裕，而不仅仅是从富人那里转移资金。你可以帮助穷人提高生产力——例如，通过改善获得教育的机会。而不是从工程师那里拿钱给收银员，你可以让那些可能成为收银员的人成为工程师。\n这是让穷人变得更富裕的绝佳策略。但过去200年的证据表明，这并没有减少经济不平等，因为它也让富人变得更富裕。如果有更多的工程师，那么就有更多机会雇佣他们和向他们出售东西。亨利·福特不可能在一个大多数人仍然是自给农民的社会中通过制造汽车致富；他既没有工人也没有顾客。\n如果你想要减少经济不平等，而不仅仅是提高整体生活水平，仅仅提升穷人是不够的。如果你的新工程师之一有雄心壮志，并成为另一个比尔·盖茨怎么办？经济不平等将和以前一样糟糕。如果你真的想要压缩贫富差距，你必须向下压制顶部，同时向上提升底部。\n你如何向下压制顶部？你可以尝试减少那些赚钱最多的人的生产力：让最好的外科医生用左手操作，强迫受欢迎的演员暴饮暴食，等等。但这种方法很难实施。唯一的实际解决方案是让人们尽其所能做最好的工作，然后（通过税收或限制他们可以收取的费用）没收你认为任何盈余。\n所以让我们明确减少经济不平等意味着什么。它与从富人那里拿钱完全相同。\n当你将数学表达式转换为另一种形式时，你经常会注意到新事物。在这里也是如此。从富人那里拿钱结果会产生一些意想不到的后果，当你用\u0026quot;减少不平等\u0026quot;来表达同样的想法时。\n问题是，风险和回报必须成比例。一个只有10%获胜机会的赌注必须比有50%获胜机会的赌注支付更多，否则没有人会接受它。所以如果你削减可能回报的顶部，你从而减少了人们承担风险的意愿。\n转换为我们的原始表达式，我们得到：减少经济不平等意味着减少人们愿意承担的风险。\n如果最大回报减少，整个类别的风险就不再值得承担。高税率灾难性原因之一是，这类风险包括创办新公司。\n投资者 创业公司本质上是有风险的。创业公司就像公海上的小船。一个大波浪你就会沉没。竞争产品、经济低迷、获得资金或监管批准的延迟、专利诉讼、技术标准变化、关键员工的离职、大客户的损失——任何这些都可能在一夜之间摧毁你。似乎只有大约十分之一的创业公司成功。[1]\n我们的创业公司支付给第一轮外部投资者36倍的回报。这意味着，按照当前的美国税率，如果我们有超过二十四分之一的成功机会，投资我们是有意义的。听起来大约正确。当我们是几个没有商业经验、在公寓里运营的书呆子时，这可能大致是我们的样子。\n如果这种风险没有回报，我们所知的风险投资就不会发生。\n如果新公司有其他资本来源，这可能没问题。为什么不就让政府或一些类似房利美的大型准政府组织来做风险投资，而不是私人基金呢？\n我告诉你为什么那不会奏效。因为那时你在要求政府或准政府员工做他们最不擅长的事情：承担风险。\n任何为政府工作的人都知道，重要的不是做出正确的选择，而是做出如果失败可以在以后证明合理的选择。如果有一个安全的选择，那就是官僚会选择的选择。但这恰恰是做风险投资的错误方式。业务的性质意味着你想做出风险极高的选择，如果前景看起来足够好的话。\n风险投资家目前的薪酬方式使他们专注于前景：他们获得基金收益的百分比。这有助于克服他们对投资一家由看起来像（也许确实是）大学生的书呆子运营的公司的可以理解的恐惧。\n如果不允许风险投资家变富，他们会表现得像官僚。没有获利的希望，他们只会害怕损失。所以他们会做出错误的选择。他们会拒绝书呆子，而选择穿着西装的花言巧语的MBA，因为如果失败了，那项投资更容易在以后证明合理。\n创始人 但即使你能以某种方式重新设计风险投资，使其在不允许风险投资家变富的情况下工作，还有另一种投资者你根本无法替代：创业公司的创始人和早期员工。\n他们投资的是他们的时间和想法。但这些等同于金钱；证明是投资者愿意（如果被迫）将它们视为可互换的，给予\u0026quot; sweat equity\u0026quot;和他们用现金购买的股权相同的地位。\n你在投资时间这一事实并没有改变风险和回报之间的关系。如果你要把时间投资在成功机会很小的事情上，只有当有相应大的回报时你才会这样做。[2] 如果不允许大的回报，你不如稳妥行事。\n像许多创业创始人一样，我这样做是为了致富。但不是因为我想买昂贵的东西。我想要的是安全感。我想赚足够的钱，不必担心钱。如果我被禁止从创业公司赚足够的钱来做到这一点，我会通过其他方式寻求安全感：例如，去为一个大型的、稳定的组织工作，从那里很难被解雇。而不是在创业公司拼命工作，我会试图在一个大型研究实验室获得一个不错的、低压力的工作，或者在大学获得终身职位。\n这就是在不奖励风险的社会中每个人所做的。如果你不能确保自己的安全，下一个最好的事情是在某个大型组织中为自己筑巢，你的地位主要取决于资历。[3]\n即使我们能以某种方式替代投资者，我也不明白我们如何能替代创始人。投资者主要贡献金钱，原则上无论来源如何都是一样的。但创始人贡献想法。你无法替代那些。\n让我们复习一下到目前为止的论证链条。我正在得出一个许多读者可能会踢着尖叫地接受的结论，所以我试图使每个环节都牢不可破。减少经济不平等意味着从富人那里拿钱。由于风险和回报是等价的，减少潜在回报会自动减少人们对风险的偏好。创业公司本质上是有风险的。如果没有与风险成比例回报的前景，创始人不会将他们的时间投资在创业公司中。创始人是不可替代的。所以消除经济不平等意味着消除创业公司。\n经济不平等不仅仅是创业公司的结果。它是驱动它们的引擎，就像水的落差驱动水磨一样。人们创办创业公司是希望变得比以前富裕得多。如果你的社会试图阻止任何人比其他人富裕得多，它也会阻止一个人在t2比t1富裕得多。\n增长 这个论证相应适用。不仅仅是你消除经济不平等，你就没有创业公司。在你减少经济不平等的程度上，你减少了创业公司的数量。[4] 增加税收，承担风险的意愿相应减少。\n这似乎对每个人都不好。新技术和新工作都不成比例地来自新公司。事实上，如果你没有创业公司，很快你也不会有老牌公司，就像如果你停止生孩子，很快你也不会有任何成年人一样。\n说我们应该减少经济不平等听起来很仁慈。当你那样说的时候，谁能与你争论？不平等一定是坏的，对吧？说我们应该减少新公司成立率听起来就不那么仁慈了。然而一个意味着另一个。\n事实上，减少投资者对风险的偏好可能不仅仅扼杀初生的创业公司，而且特别扼杀最有前途的创业公司。与老牌公司相比，创业公司以更大的风险产生更快的增长。这种趋势在创业公司中也成立吗？也就是说，风险最高的创业公司是否是那些如果成功就产生最大增长的公司？我怀疑答案是肯定的。这是一个令人不寒而栗的想法，因为这意味着如果你削减投资者对风险的偏好，最有益的创业公司是第一批消失的。\n当然，并非所有富人都是通过创业公司致富的。如果我们让人们通过创办创业公司致富，但通过税收拿走所有其他盈余财富，那会怎样？那至少会减少不平等吗？\n比你想象的要少。如果你让人们只能通过创办创业公司致富，想要致富的人都会创办创业公司。这可能是一件伟大的事情。但我认为这不会对财富分配产生太大影响。想要致富的人会做他们必须做的一切。如果创业公司是唯一的方法，你只会得到更多的人创办创业公司。（也就是说，如果你非常仔细地制定法律。更可能的是，你会得到很多人做那些可以在纸上看起来像创业公司的事情。）\n如果我们决心消除经济不平等，仍然有一条出路：我们可以说我们愿意继续前进，不要创业公司。如果我们这样做了会发生什么？\n至少，我们不得不接受较低的技术增长率。如果你相信大型、老牌的公司可以某种程度地像创业公司一样快速开发新技术，那么球在你这边，解释如何。（如果你能提出一个看似合理的说法，你可以通过写商业书籍和为大公司咨询赚大钱。）[5]\n好的，所以我们增长变慢。有那么糟糕吗？嗯，实际中它糟糕的一个原因是其他国家可能不同意与我们一起放慢。如果你满足于以比世界其他地区慢的速度开发新技术，实际发生的是你根本不会发明任何东西。你可能发现的任何东西都已经在其他地方被发明了。你唯一能回报的就是原材料和廉价劳动力。一旦你沦落到那么低，其他国家可以对你做任何他们喜欢的事情：安装傀儡政府、抽走你最好的工人、让你的女人当妓女、在你的领土上倾倒他们的有毒废物——我们现在对穷国做的所有事情。唯一的防御是孤立自己，就像共产主义国家在二十世纪所做的那样。但那时的问题是，你必须成为警察国家来执行它。\n财富和权力 我意识到创业公司不是那些想要消除经济不平等的人的主要目标。他们真正厌恶的是通过与权力联盟而自我永续的那种财富。例如，为政治家竞选活动提供资金以换取政府合同的建筑公司，或者通过把孩子送到为此目的而设计的昂贵学校来让孩子进入好大学的富父母。但如果你试图通过经济政策攻击这种类型的财富，很难不摧毁创业公司作为附带损害。\n这里的问题不是财富，而是腐败。那么为什么不针对腐败呢？\n如果我们能防止财富转化为权力，我们就不需要防止人们变富。在这方面已经取得了进展。1925年康内留斯·范德比尔特的浪费孙子雷吉因饮酒过度去世之前，曾五次撞倒行人，其中两人死亡。到1969年泰德·肯尼迪在查帕奎迪克桥上开车坠桥时，这个限制似乎下降到一个。今天可能完全是零。但改变的不是财富的变化。改变的是财富转化为权力的能力。\n你如何打破财富和权力之间的联系？要求透明度。密切关注权力如何行使，并要求说明决策是如何做出的。为什么不是所有警察审问都被录像？为什么普林斯顿大学2007届36%的学生来自预科学校，而只有1.7%的美国孩子上这些学校？美国真正入侵伊拉克的原因是什么？为什么政府官员不披露更多关于他们财务的信息，而且为什么只在任期内？\n我的一位非常了解计算机安全的朋友说，最重要的步骤是记录一切。在他还是个孩子试图闯入计算机时，最担心他的是留下痕迹的想法。避免给他带来的不便比任何故意设置在他路径上的障碍都大。\n像所有非法联系一样，财富和权力之间的联系在秘密中繁荣。暴露所有交易，你将大大减少它。记录一切。那是一个似乎已经在起作用的策略，它没有让你的整个国家变穷的副作用。\n我不认为很多人意识到经济不平等和风险之间有联系。我直到最近才完全理解。我多年来当然知道，如果在创业公司中没有成功，另一个选择是获得一个舒适的、终身制的研究工作。但我不明白支配我行为的方程式。同样，经验上明显，一个不让人们致富的国家注定要灾难，无论是戴克里先的罗马还是哈罗德·威尔逊的英国。但直到最近我才理解风险所起的作用。\n如果你试图攻击财富，你最终也会钉住风险，以及增长。如果我们想要一个更公平的世界，我认为更好地攻击下游一步，财富转化为权力的地方。\n注释\n[1] 这里的成功是从初始投资者的角度定义的：要么是IPO，要么是以超过最后一轮融资估值的收购。传统的十分之一成功率看起来可疑地整齐，但与风险投资家的对话表明，对于整体创业公司来说这大致正确。顶级风险投资公司期望做得更好。\n[2] 我不是声称创始人坐下来计算创业公司的预期税后回报。他们受到其他做过这件事的人的例子激励。而这些例子确实反映了税后回报。\n[3] 推测：在一个（不腐败）国家或组织中的财富变化将与资历制度的普遍性成反比。所以如果你压制财富变化，资历将相应变得更加重要。到目前为止，我不知道有反例，虽然在非常腐败的国家你可能同时得到两者。（感谢Daniel Sobral指出这一点。）\n[4] 在一个真正封建经济的国家，你可能能够成功地重新分配财富，因为没有创业公司可杀。\n[5] 创业公司开发新技术的速度是他们支付如此之好的另一个原因。正如我在《如何创造财富》中所解释的，你在创业公司中所做的是将一生的价值的工作压缩到几年中。阻止那看起来和阻止承担风险一样愚蠢。\n感谢克里斯·安德森、特雷弗·布莱克威尔、丹·吉芬、杰西卡·利文斯顿和埃文·威廉姆斯阅读本文草稿，以及兰利·斯坦纳特、桑加姆·潘特和迈克·莫里茨提供关于风险投资的信息。\n罗马尼亚语翻译 | 荷兰语翻译 | 繁体中文翻译 | 日语翻译 | 希伯来语翻译\n",
    "description": "",
    "tags": ["不平等","风险","创业公司","经济学","财富","增长"],
    "categories": [],
    "content": "→ English Version\n不平等 2005年8月\n（本文源自2005年Defcon大会的演讲。）\n假设你想要消除经济不平等。有两种方法可以做到：给穷人钱，或者从富人那里拿走钱。但它们实际上是一回事，因为如果你想给穷人钱，你必须从某个地方得到它。你不能从穷人那里得到，否则他们最终会回到起点。你必须从富人那里得到。\n当然，有一种方法可以让穷人变得更富裕，而不仅仅是从富人那里转移资金。你可以帮助穷人提高生产力——例如，通过改善获得教育的机会。而不是从工程师那里拿钱给收银员，你可以让那些可能成为收银员的人成为工程师。\n这是让穷人变得更富裕的绝佳策略。但过去200年的证据表明，这并没有减少经济不平等，因为它也让富人变得更富裕。如果有更多的工程师，那么就有更多机会雇佣他们和向他们出售东西。亨利·福特不可能在一个大多数人仍然是自给农民的社会中通过制造汽车致富；他既没有工人也没有顾客。\n如果你想要减少经济不平等，而不仅仅是提高整体生活水平，仅仅提升穷人是不够的。如果你的新工程师之一有雄心壮志，并成为另一个比尔·盖茨怎么办？经济不平等将和以前一样糟糕。如果你真的想要压缩贫富差距，你必须向下压制顶部，同时向上提升底部。\n你如何向下压制顶部？你可以尝试减少那些赚钱最多的人的生产力：让最好的外科医生用左手操作，强迫受欢迎的演员暴饮暴食，等等。但这种方法很难实施。唯一的实际解决方案是让人们尽其所能做最好的工作，然后（通过税收或限制他们可以收取的费用）没收你认为任何盈余。\n所以让我们明确减少经济不平等意味着什么。它与从富人那里拿钱完全相同。\n当你将数学表达式转换为另一种形式时，你经常会注意到新事物。在这里也是如此。从富人那里拿钱结果会产生一些意想不到的后果，当你用\u0026quot;减少不平等\u0026quot;来表达同样的想法时。\n问题是，风险和回报必须成比例。一个只有10%获胜机会的赌注必须比有50%获胜机会的赌注支付更多，否则没有人会接受它。所以如果你削减可能回报的顶部，你从而减少了人们承担风险的意愿。\n转换为我们的原始表达式，我们得到：减少经济不平等意味着减少人们愿意承担的风险。\n如果最大回报减少，整个类别的风险就不再值得承担。高税率灾难性原因之一是，这类风险包括创办新公司。\n投资者 创业公司本质上是有风险的。创业公司就像公海上的小船。一个大波浪你就会沉没。竞争产品、经济低迷、获得资金或监管批准的延迟、专利诉讼、技术标准变化、关键员工的离职、大客户的损失——任何这些都可能在一夜之间摧毁你。似乎只有大约十分之一的创业公司成功。[1]\n我们的创业公司支付给第一轮外部投资者36倍的回报。这意味着，按照当前的美国税率，如果我们有超过二十四分之一的成功机会，投资我们是有意义的。听起来大约正确。当我们是几个没有商业经验、在公寓里运营的书呆子时，这可能大致是我们的样子。\n如果这种风险没有回报，我们所知的风险投资就不会发生。\n如果新公司有其他资本来源，这可能没问题。为什么不就让政府或一些类似房利美的大型准政府组织来做风险投资，而不是私人基金呢？\n我告诉你为什么那不会奏效。因为那时你在要求政府或准政府员工做他们最不擅长的事情：承担风险。\n任何为政府工作的人都知道，重要的不是做出正确的选择，而是做出如果失败可以在以后证明合理的选择。如果有一个安全的选择，那就是官僚会选择的选择。但这恰恰是做风险投资的错误方式。业务的性质意味着你想做出风险极高的选择，如果前景看起来足够好的话。\n风险投资家目前的薪酬方式使他们专注于前景：他们获得基金收益的百分比。这有助于克服他们对投资一家由看起来像（也许确实是）大学生的书呆子运营的公司的可以理解的恐惧。\n如果不允许风险投资家变富，他们会表现得像官僚。没有获利的希望，他们只会害怕损失。所以他们会做出错误的选择。他们会拒绝书呆子，而选择穿着西装的花言巧语的MBA，因为如果失败了，那项投资更容易在以后证明合理。\n创始人 但即使你能以某种方式重新设计风险投资，使其在不允许风险投资家变富的情况下工作，还有另一种投资者你根本无法替代：创业公司的创始人和早期员工。\n他们投资的是他们的时间和想法。但这些等同于金钱；证明是投资者愿意（如果被迫）将它们视为可互换的，给予\u0026quot; sweat equity\u0026quot;和他们用现金购买的股权相同的地位。\n你在投资时间这一事实并没有改变风险和回报之间的关系。如果你要把时间投资在成功机会很小的事情上，只有当有相应大的回报时你才会这样做。[2] 如果不允许大的回报，你不如稳妥行事。\n像许多创业创始人一样，我这样做是为了致富。但不是因为我想买昂贵的东西。我想要的是安全感。我想赚足够的钱，不必担心钱。如果我被禁止从创业公司赚足够的钱来做到这一点，我会通过其他方式寻求安全感：例如，去为一个大型的、稳定的组织工作，从那里很难被 …"
  },{
    "title": "不能说的话",
    "url": "/paul_graham/essays_zh/say/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n不能说的话 2004年1月\n你有没有看过自己的老照片，对自己的样子感到尴尬？我们真的那样穿衣服吗？是的。而且我们根本不知道自己看起来有多傻。时尚的本质就是看不见的，就像地球的运动对于我们 riding 在上面的人来说是看不见的一样。\n让我害怕的是，道德时尚也是如此。它们同样随意，对大多数人来说同样看不见。但它们要危险得多。时尚被误认为好设计；道德时尚被误认为好。穿着奇怪会被人嘲笑。违反道德时尚可能会让你被解雇、排斥、监禁，甚至被杀。\n如果你能乘坐时间机回到过去，无论你去哪里，有一件事是真的：你必须注意自己说的话。我们认为无害的意见可能会让你陷入大麻烦。我已经至少说过一句话，这句话在17世纪的欧洲大部分地区会给我带来大麻烦，而且确实让伽利略陷入了麻烦——那就是地球在运动。[1] 这似乎是一个贯穿历史的常数：在每个时代，人们相信一些荒谬的事情，并且如此强烈地相信，以至于如果你说不同的话，就会陷入可怕的麻烦。\n我们的时代有什么不同吗？对于任何读过一定数量历史的人来说，答案几乎肯定是否定的。如果说我们的时代是第一个把一切都做对的，那将是一个惊人的巧合。\n令人着迷的是，我们认为未来人们会觉得可笑的事情。一个从未来乘坐时间机来拜访我们的人必须小心不要说什么？这就是我在这里想要研究的。但我想要做的不仅仅是用当天的异端邪说震惊每个人。我想找到在任何时代发现你不能说什么的一般方法。\n从众测试 让我们从一个测试开始：你有什么意见不愿意在一群同龄人面前表达吗？\n如果答案是否定的，你可能想停下来想想这个问题。如果你相信的一切都是你应该相信的，这可能只是巧合吗？可能性很大。可能性很大的是，你只是被告知什么就相信什么。\n另一种选择是，你独立考虑了每个问题，得出了现在被认为可以接受的完全相同的答案。这似乎不太可能，因为你也不得不犯同样的错误。地图绘制者故意在地图上放置一些小错误，这样当他们发现有人复制了他们的地图时就能知道。如果另一张地图有同样的错误，那是非常有说服力的证据。\n像历史上的每个时代一样，我们的道德地图几乎肯定包含一些错误。任何犯同样错误的人可能都不是偶然的。这就像有人声称他们在1972年独立决定喇叭裤是个好主意。\n如果你现在相信你应该相信的一切，你怎么能确定如果你在内战前南方的种植园主中长大，或者在1930年代的德国长大——或者更不用说在1200年的蒙古人中长大——你也不会相信你应该相信的一切？可能性很大，你会的。\n在\u0026quot;适应良好\u0026quot;这类术语的时代，想法似乎是如果你不敢大声说出想法，那你有问题。这似乎是错误的。几乎可以肯定，如果你不敢大声说出想法，那你有问题。\n麻烦 我们不能说什么？找到这些想法的一个方法是看人们说的话，看看因此惹上麻烦的事情。[2]\n当然，我们不仅仅在寻找我们不能说的话。我们在寻找那些我们不能说但却是真实的事情，或者至少有足够可能是真实的事情，以至于问题应该保持开放。但人们因为说某些话而惹上麻烦的许多事情确实可能超过了这个更低的门槛。没有人会说2+2=5或匹兹堡的人有十英尺高而惹上麻烦。这种明显错误的陈述可能被视为笑话，或者最坏情况下被视为精神错乱的证据，但它们不太可能让任何人发疯。让人们发疯的陈述是那些他们担心可能被相信的陈述。我怀疑让人们最发疯的陈述是那些他们担心可能是真实的陈述。\n如果伽利略说过帕多瓦的人有十英尺高，他会被视为一个无害的怪人。说地球围绕太阳运转是另一回事。教会知道这会引发人们的思考。\n当然，回顾过去，这个经验法则很有效。很多人们因此惹上麻烦的陈述现在看起来无害。因此，未来的访问者很可能会同意至少一些今天会让人们惹上麻烦的陈述。我们没有伽利略吗？不太可能。\n要找到他们，记录那些让人们惹上麻烦的意见，然后开始问，这可能是真的吗？好吧，这可能是异端邪说（或任何现代等价物），但它也可能是真的吗？\n异端 但这不会给我们所有答案。如果没有人碰巧因为某个特定的想法而惹上麻烦怎么办？如果有些想法如此具有争议性，以至于没有人敢在公共场合表达怎么办？我们如何也能找到这些？\n另一种方法是遵循异端这个词。在历史上的每个时期，似乎都有一些标签被应用到陈述上，以便在任何人有机会询问它们是否真实之前就将它们击倒。\u0026ldquo;亵渎\u0026rdquo;、\u0026ldquo;渎神\u0026quot;和\u0026quot;异端\u0026quot;在西方历史的大部分时间里都是这样的标签，就像近代的\u0026quot;不雅\u0026rdquo;、\u0026ldquo;不当\u0026quot;和\u0026quot;非美国\u0026quot;一样。到如今，这些标签已经失去了它们的刺痛力。它们总是如此。到如今，它们大多被反讽地使用。但在它们的时代，它们具有真正的力量。\n例如，\u0026ldquo;失败主义者\u0026quot;这个词现在没有特别的政治含义。但在1917年的德国，它是一种武器，被鲁登道夫用来清洗那些赞成谈判和平的人。在第二次世界大战开始时，它被丘吉尔及其支持者广泛使用来压制反对者。在1940年，任何反对丘吉尔激进政策的论点都是\u0026quot;失败主义的\u0026rdquo;。是对是错？理想情况下，没有人会达到问这个问题的地步。我们今天当然有很多这样的标签，从万能的\u0026quot;不当\u0026quot;到可怕的\u0026quot;分裂\u0026rdquo;。在任何时代，应该很容易弄清楚这些标签是什么，只需看看人们除了虚假之外还称他们不同意的想法为什么。当政治家说他的对手错了，那是直接的批评，但当他攻击一个陈述是\u0026quot;分裂\u0026quot;或\u0026quot;种族敏感\u0026quot;而不是争论它是虚假的时，我们应该开始注意了。\n所以，弄清楚我们后代会嘲笑哪些禁忌的另一种方法是从标签开始。拿一个标签——比如\u0026quot;性别歧视者\u0026quot;——试着想一些会被这样称呼的想法。然后对每个想法问，这可能是真的吗？\n只是随机列出想法吗？是的，因为它们不会真的是随机的。首先想到的想法将是最合理的。它们是你已经注意到但没有让自己思考的事情。\n1989年，一些聪明的研究人员跟踪了放射科医生在扫描胸部图像寻找肺癌迹象时的眼球运动。[3] 他们发现，即使放射科医生漏掉了癌症病变，他们的眼睛通常会在病变部位停留。他们大脑的一部分知道那里有什么东西；只是没有完全渗透到有意识的认知中。我认为许多有趣的异端思想已经在我们的头脑中基本形成了。如果我们暂时关闭自我审查，这些将是首先出现的。\n时间和空间 如果我们能展望未来，哪些禁忌会被嘲笑将很明显。我们不能做到这一点，但我们可以做一些几乎同样好的事情：我们可以回顾过去。弄清楚我们做错了的另一种方法是看过去可以接受而现在不可想象的事情。\n过去和现在之间的变化有时确实代表进步。在物理学这样的领域，如果我们与前几代人意见不同，那是因为我们是对的，他们是错的。但当你远离硬科学的确定性时，这很快就变得不那么真实了。到了社会问题的时候，许多变化只是时尚。同意年龄的波动就像裙摆的长度一样。\n我们可能想象我们比过去几代人聪明得多，也更有道德，但你读的历史越多，这似乎越不可能。过去时代的人们很像我们。不是英雄，不是野蛮人。无论他们的想法是什么，它们都是合理的人可以相信的想法。\n所以这是另一个有趣的异端来源。将现在的想法与各种过去文化的想法进行比较，看看你得到了什么。[4] 一些按照现在的标准将是令人震惊的。好吧，很好；但哪些也可能是真的？\n你不必回顾过去也能找到很大的差异。在我们自己的时代，不同的社会对什么可以接受什么不可以接受有截然不同的想法。所以你也可以尝试将其他文化的想法与我们的想法进行比较（最好的方法是访问它们）。在任何被认为是无害的、在相当比例的时间和地点中的想法，而在我们这里是禁忌的，是我们搞错的候选者。\n例如，在1990年代初政治正确性的高潮时期，哈佛向其教职员工分发了小册子，除其他外，称赞同事或学生的衣服是不当的。不再有\u0026quot;好衬衫\u0026quot;。我认为这个原则在世界文化中，过去或现在都很罕见。可能更多的文化认为称赞某人的衣服特别礼貌，而不是认为它不当。可能性很大，这是一个温和的例子，是一个未来的访问者如果碰巧把时间机设定在1992年马萨诸塞州剑桥市必须小心避免的禁忌之一。[5]\n道学家 当然，如果未来有时间机，他们可能会有一个专门的参考手册给剑桥。这一直是一个挑剔的地方，一个爱吹毛求疵的城市，你可能会在同一次谈话中同时被纠正语法和想法。这提示了另一种寻找禁忌的方法。寻找道学家，看看他们脑子里有什么。\n孩子们的头脑是我们所有禁忌的储存库。孩子们的想法应该是明亮干净的，这似乎对我们很合适。我们给他们的世界图景不仅仅是简化，以适应他们发展中的头脑，而且还被净化了，以适应我们对孩子们应该思考什么的想法。[6]\n你可以在脏话问题上小规模地看到这一点。我的许多朋友现在开始有孩子了，他们都努力不在婴儿的听力范围内使用\u0026quot;操\u0026quot;和\u0026quot;屎\u0026quot;这样的词，以免婴儿也开始使用这些词。但这些词是语言的一部分，成年人一直在使用它们。所以父母通过不使用它们给孩子们一个不准确的语言观念。他们为什么要这样做？因为他们不认为孩子们应该使用整个语言是合适的。我们希望孩子们看起来天真无邪。[7]\n大多数成年人也故意给孩子们一个错误的世界观。最明显的例子之一是圣诞老人。我们认为小孩子们相信圣诞老人很可爱。我自己认为小孩子们相信圣诞老人很可爱。但人们想知道，我们告诉他们这些东西是为了他们，还是为了我们自己？\n我在这里不是为或反对这个想法。父母想给孩子们的头脑穿上可爱的小婴儿衣服可能是不可避免的。我自己可能会这样做。对我们的目的来说重要的是，因此，一个被良好抚养的青少年的大脑是或多或少我们所有禁忌的完整集合——而且是崭新的，因为它们没有被经验污染。无论我们认为后来会证明是可笑的东西，几乎肯定都在那个头脑里。\n我们如何得到这些想法？通过以下的思想实验。想象一个现代的康拉德式人物，他曾在非洲做过雇佣兵，曾在尼泊尔做过医生，曾在迈阿密做过夜总会经理。具体细节不重要——只是一个见多识广的人。现在想象比较这个人和一个来自郊区的行为良好的十六岁女孩脑子里有什么。他会想什么会让她震惊？他知道世界；她知道，或者至少体现，现在的禁忌。一个减去另一个，结果就是我们不能说的话。\n机制 我能想到的另一种方法来弄清楚我们不能说的话的方法是看禁忌是如何产生的。道德时尚是如何产生的，为什么它们被采纳？如果我们能理解这个机制，我们可能能够看到它在我们自己的时代中发挥作用。\n道德时尚似乎不是像普通时尚那样产生的。普通时尚似乎是当每个人都模仿某个有影响力的人的奇想时偶然产生的。十五世纪末欧洲宽头鞋的时尚开始是因为法国的查理八世一只脚有六个脚趾。加里这个名字的时尚开始时，演员弗兰克·库珀采用了印第安纳州一个艰苦的磨坊小镇的名字。道德时尚更经常似乎是故意创造的。当我们不能说什么时，通常是因为某个群体不希望我们这样做。\n当群体紧张时，禁令将是最强的。伽利略情况的讽刺在于，他因重复哥白尼的想法而惹上麻烦。哥白尼本人没有。事实上，哥白尼是一座大教堂的教规，并将他的书献给了教皇。但到了伽利略的时代，教会正处于反宗教改革的阵痛中，对非正统的想法更加担忧。\n要发起一个禁忌，一个群体必须处于弱小和强大之间的中间位置。一个自信的群体不需要禁忌来保护它。发表贬低美国人或英国人的言论被认为是不当的。然而，一个群体必须足够强大才能执行禁忌。恋粪癖者，在撰写本文时，似乎数量不多或精力不足，无法使其利益被提升为一种生活方式。\n我怀疑道德禁忌的最大来源将是一场力量斗争，其中一方 barely 拥有上风。在那里你会发现一个群体强大到足以执行禁忌，但弱到需要它们。\n大多数斗争，无论它们真正是关于什么的，都将被塑造成竞争思想之间的斗争。英国宗教改革在根本上是一场财富和权力的斗争，但最终被塑造成一场保护英国人灵魂免受罗马腐败影响的斗争。让人们为一个思想而战更容易。无论哪一方获胜，他们的思想也将被认为取得了胜利，仿佛上帝通过选择那一方作为胜利者来表明他的同意。\n我们经常喜欢将第二次世界大战视为自由战胜极权主义的胜利。我们很方便地忘记了苏联也是胜利者之一。\n我并不是说斗争从不关乎思想，只是说它们总是被塑造成关乎思想的，无论它们是否真的如此。就像没有什么比最近被丢弃的时尚更不时尚一样，也没有什么比最近被击败的对手的原则更错误的。具象艺术现在刚刚从希特勒和斯大林的认可中恢复过来。[8]\n虽然道德时尚往往与服装时尚来源于不同的来源，但它们被采纳的机制似乎大致相同。早期采用者将被野心驱动：自我意识到的酷人，想要将自己与普通人群区分开来。随着时尚的建立，他们将被第二个、大得多的群体加入，这个群体被恐惧驱动。[9] 第二个群体采用时尚不是因为他们想脱颖而出，而是因为他们害怕脱颖而出。\n所以如果你想弄清楚我们不能说什么，看看时尚的机制，并尝试预测它会使什么不可说。哪些群体强大但紧张，它们想压制什么想法？哪些想法在最近的斗争中因为最终处于失败的一方而受到玷污？如果一个自我意识到的酷人想要将自己与之前的时尚（例如，与他的父母）区分开来，他会倾向于拒绝他们的哪些想法？传统思维的人害怕说什么？\n这种技术不会找到所有我们不能说的事情。我能想到一些不是任何最近斗争的结果的事情。我们的许多禁忌深深植根于过去。但这种方法，结合前面的四种方法，会发现大量不可想象的想法。\n为什么 有些人会问，为什么要这样做？为什么要故意在令人不快、声名狼藉的想法中寻找？为什么要翻看石头？\n首先，我这样做是因为我小时候翻看石头的同样原因：纯粹的好奇心。而且我对任何被禁止的事情都特别好奇。让我自己看看并决定。\n其次，我这样做是因为我不喜欢犯错误的想法。如果像其他时代一样，我们相信后来会显得可笑的事情，我想知道它们是什么，这样我，至少，可以避免相信它们。\n第三，我这样做是因为这对大脑有好处。要做好工作，你需要一个可以去任何地方的大脑。你特别需要一个习惯于去不应该去的地方的大脑。\n伟大的工作往往源于被他人忽视的想法，没有一个想法像不可想象的想法那样被忽视。例如自然选择。它如此简单。为什么以前没有人想到它？嗯，这太明显了。达尔文本人小心翼翼地绕过他理论的含义。他想把时间花在思考生物学上，而不是与指责他无神论的人争论。\n在科学中，特别是，能够质疑假设是一个很大的优势。科学家的行动方式，或者至少是好科学家的行动方式，正是如此：寻找传统智慧被打破的地方，然后试图撬开裂缝，看看下面是什么。新理论就是这样来的。\n",
    "description": "",
    "tags": ["言论自由","道德时尚","异端","从众","审查","批判性思维"],
    "categories": [],
    "content": "→ English Version\n不能说的话 2004年1月\n你有没有看过自己的老照片，对自己的样子感到尴尬？我们真的那样穿衣服吗？是的。而且我们根本不知道自己看起来有多傻。时尚的本质就是看不见的，就像地球的运动对于我们 riding 在上面的人来说是看不见的一样。\n让我害怕的是，道德时尚也是如此。它们同样随意，对大多数人来说同样看不见。但它们要危险得多。时尚被误认为好设计；道德时尚被误认为好。穿着奇怪会被人嘲笑。违反道德时尚可能会让你被解雇、排斥、监禁，甚至被杀。\n如果你能乘坐时间机回到过去，无论你去哪里，有一件事是真的：你必须注意自己说的话。我们认为无害的意见可能会让你陷入大麻烦。我已经至少说过一句话，这句话在17世纪的欧洲大部分地区会给我带来大麻烦，而且确实让伽利略陷入了麻烦——那就是地球在运动。[1] 这似乎是一个贯穿历史的常数：在每个时代，人们相信一些荒谬的事情，并且如此强烈地相信，以至于如果你说不同的话，就会陷入可怕的麻烦。\n我们的时代有什么不同吗？对于任何读过一定数量历史的人来说，答案几乎肯定是否定的。如果说我们的时代是第一个把一切都做对的，那将是一个惊人的巧合。\n令人着迷的是，我们认为未来人们会觉得可笑的事情。一个从未来乘坐时间机来拜访我们的人必须小心不要说什么？这就是我在这里想要研究的。但我想要做的不仅仅是用当天的异端邪说震惊每个人。我想找到在任何时代发现你不能说什么的一般方法。\n从众测试 让我们从一个测试开始：你有什么意见不愿意在一群同龄人面前表达吗？\n如果答案是否定的，你可能想停下来想想这个问题。如果你相信的一切都是你应该相信的，这可能只是巧合吗？可能性很大。可能性很大的是，你只是被告知什么就相信什么。\n另一种选择是，你独立考虑了每个问题，得出了现在被认为可以接受的完全相同的答案。这似乎不太可能，因为你也不得不犯同样的错误。地图绘制者故意在地图上放置一些小错误，这样当他们发现有人复制了他们的地图时就能知道。如果另一张地图有同样的错误，那是非常有说服力的证据。\n像历史上的每个时代一样，我们的道德地图几乎肯定包含一些错误。任何犯同样错误的人可能都不是偶然的。这就像有人声称他们在1972年独立决定喇叭裤是个好主意。\n如果你现在相信你应该相信的一切，你怎么能确定如果你在内战前南方的种植园主中长大，或者在1930年代的德国长大——或者更不用说在1200年的蒙古人中长大——你也不会相信你应该相信的一切？可能性很大，你会的。\n在\u0026quot;适应良好\u0026quot;这类术语的时代，想法似乎是如果你不敢大声说出想法，那你有问题。这似乎是错误的。几乎可以肯定，如果你不敢大声说出想法，那你有问题。\n麻烦 我们不能说什么？找到这些想法的一个方法是看人们说的话，看看因此惹上麻烦的事情。[2]\n当然，我们不仅仅在寻找我们不能说的话。我们在寻找那些我们不能说但却是真实的事情，或者至少有足够可能是真实的事情，以至于问题应该保持开放。但人们因为说某些话而惹上麻烦的许多事情确实可能超过了这个更低的门槛。没有人会说2+2=5或匹兹堡的人有十英尺高而惹上麻烦。这种明显错误的陈述可能被视为笑话，或者最坏情况下被视为精神错乱的证据，但它们不太可能让任何人发疯。让人们发疯的陈述是那些他们担心可能被相信的陈述。我怀疑让人们最发疯的陈述是那些他们担心可能是真实的陈述。\n如果伽利略说过帕多瓦的人有十英尺高，他会被视为一个无害的怪人。说地球围绕太阳运转是另一回事。教会知道这会引发人们的思考。\n当然，回顾过去，这个经验法则很有效。很多人们因此惹上麻烦的陈述现在看起来无害。因此，未来的访问者很可能会同意至少一些今天会让人们惹上麻烦的陈述。我们没有伽利略吗？不太可能。\n要找到他们，记录那些让人们惹上麻烦的意见，然后开始问，这可能是真的吗？好吧，这可能是异端邪说（或任何现代等价物），但它也可能是真的吗？\n异端 但这不会给我们所有答案。如果没有人碰巧因为某个特定的想法而惹上麻烦怎么办？如果有些想法如此具有争议性，以至于没有人敢在公共场合表达怎么办？我们如何也能找到这些？\n另一种方法是遵循异端这个词。在历史上的每个时期，似乎都有一些标签被应用到陈述上，以便在任何人有机会询问它们是否真实之前就将它们击倒。\u0026ldquo;亵渎\u0026rdquo;、\u0026ldquo;渎神\u0026quot;和\u0026quot;异端\u0026quot;在西方历史的大部分时间里都是这样的标签，就像近代的\u0026quot;不雅\u0026rdquo;、\u0026ldquo;不当\u0026quot;和\u0026quot;非美国\u0026quot;一样。到如今，这些标签已经失去了它们的刺痛力。它们总是如此。到如今，它们大多被反讽地使用。但在它们的时代，它们具有真正的力量。\n例如，\u0026ldquo;失败主义者\u0026quot;这个词现在没有特别的政治含义。但在1917年的德国，它是一种武器，被鲁 …"
  },{
    "title": "不要不要创业",
    "url": "/paul_graham/essays_zh/notnot/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n不要不要创业 2007年3月\n（本文源自2007年创业学校和伯克利CSUA的演讲。）\n我们现在做Y Combinator已经足够长的时间，有了一些关于成功率的数据。我们的第一批，2005年夏天，有八家创业公司。在那八家中，现在看来至少有四家成功了。三家被收购：Reddit是两家公司合并的结果，Reddit和Infogami，还有一家我们不能谈论的被收购了。那批中的另一家是Loopt，做得非常好，如果他们愿意，大概十分钟内就可以被收购。\n所以大约两年前那个夏天的一半创始人，现在都富有了，至少按照他们的标准是这样。（当你变富时学到的一件事是，富有有很多层次。）\n我不准备预测我们的成功率会保持在50%那么高。第一批可能是个异常。但我们应该能够优于经常被引用的（可能是编造的）10%的标准数字。我觉得瞄准25%是安全的。\n即使是失败的创始人似乎也没有那么糟糕的经历。在最初的八家创业公司中，三家现在可能已经死了。在两种情况下，创始人在夏天结束后只是去做其他事情了。我不认为他们被这次经历创伤了。最接近创伤性失败的是Kiko，其创始人继续为他们的创业公司工作了一整年，然后被Google Calendar压垮了。但他们最终很快乐。他们在eBay上以25万美元的价格出售了他们的软件。在偿还了天使投资者后，他们每人约有大约一年的薪水。[1]然后他们立即开始了一家新的、更令人兴奋的创业公司，Justin.TV。\n所以这里有一个更引人注目的统计数据：那第一批中有0%的人有糟糕的经历。他们有起有落，像每家创业公司一样，但我不认为有人会用格子间的工作来交换。而且这个统计数据可能不是异常。无论我们的长期成功率最终如何，我认为希望得到常规工作的人的比例将保持在接近0%。\n对我来说最大的谜团是：为什么没有更多的人创业？如果几乎每个这样做的人都更喜欢它而不是常规工作，而且相当比例的人变得富有，为什么不是每个人都想做这件事？很多人认为我们在每个融资周期收到数千份申请。事实上，我们通常只收到几百份。为什么没有更多的人申请？虽然对于观察这个世界的人来说，创业公司似乎像疯狂一样涌现，但与拥有必要技能的人数相比，这个数字很小。绝大多数程序员仍然直接从大学到格子间，并留在那里。\n人们似乎没有为自己的利益行事。这是怎么回事？嗯，我可以回答这个问题。由于Y Combinator在风险投资过程的最开始的位置，我们可能是世界上关于不确定是否想创业的人的心理学的专家。\n不确定没有什么错。如果你是一个正在考虑创业并犹豫不决的黑客，你是一个伟大传统的一部分。拉里和谢尔盖在开始Google之前似乎也有同样的感觉，杰里和杨致远在开始雅虎之前也是如此。事实上，我猜最成功的创业公司是由不确定的黑客而不是热血沸腾的商业人士创办的。\n我们有一些证据支持这一点。几家我们资助的最成功的创业公司后来告诉我们，他们只是在最后一刻才决定申请。有些人在截止日期前几小时才决定。\n处理不确定性的方法是将其分析为组成部分。大多数不愿意做某件事的人头脑中有大约八个不同的原因混在一起，他们自己也不知道哪些最大。有些是合理的，有些是虚假的，但除非你知道每个的相对比例，否则你不知道你的整体不确定性是主要合理还是主要虚假。\n所以我将列出人们不愿创业的所有组成部分，并解释哪些是真实的。然后潜在的创始人可以用它作为检查清单来检查自己的感受。\n我承认我的目标是增强你的自信。但这里有两点与通常的信心建设练习不同。一是我有诚实的动机。在信心建设行业的大多数人，当你买书或付费参加他们告诉你有多棒的研讨会时，他们已经实现了他们的目标。而如果我鼓励不应该创业的人创业，我让自己的生活更糟。如果我鼓励太多人申请Y Combinator，这只是意味着我有更多工作，因为我必须阅读所有申请。\n另一件将要不同的事情是我的方法。而不是积极的，我将是消极的。而不是告诉你\u0026quot;来吧，你能做到\u0026quot;，我将考虑你不这样做的所有原因，并说明为什么大多数（但不是全部）应该被忽略。我们将从每个人都有的那个开始。\n太年轻 很多人认为他们太年轻，不能创业。很多是对的。世界各地的中位数年龄约为27岁，所以可能有三分之一的人口可以真实地说他们太年轻了。\n什么年龄太年轻？我们对Y Combinator的目标之一是发现创业公司创始人的年龄下限。在我们看来，投资者在这方面似乎过于保守——他们想资助教授，而实际上他们应该资助研究生甚至本科生。\n我们从推动这个边界中发现的主要事情不是边界在哪里，而是它有多模糊。外部界限可能低至16岁。我们不考虑18岁以下的人，因为比那更年轻的人不能合法签订合同。但我们迄今为止资助的最成功的创始人，Sam Altman，当时是19岁。\n然而，Sam Altman是一个离群的数据点。当他19岁时，他看起来好像有40岁的人在他里面。还有其他19岁的人内心是12岁。\n我们对超过特定年龄的人有一个独特的词\u0026quot;成年人\u0026quot;是有原因的。有一个你跨越的门槛。它通常固定在21岁，但不同的人在非常不同的年龄跨越它。如果你已经跨越了这个门槛，无论你的年龄如何，你都足够老，可以创业了。\n你怎么判断？成年人有几个测试。实际上，我在遇到Sam Altman后才意识到这些测试的存在。我注意到我感觉好像在和一个比我年长得多的人交谈。后来我想，我到底在衡量什么？是什么让他看起来更老？\n成年人使用的一个测试是你是否还有孩子般的逃避反应。当你还是个小孩子，被要求做困难的事情时，你可以哭并说\u0026quot;我做不到\u0026quot;，成年人可能会让你离开。作为一个孩子，你可以通过说\u0026quot;我只是个孩子\u0026quot;来按下一个神奇的按钮，让你摆脱大多数困难情况。而成年人，根据定义，不允许逃避。他们当然还会这样做，但当他们这样做时，会被无情地修剪。\n判断成年人的另一种方式是他们如何应对挑战。尚未成年的人往往以承认成年人优势的方式回应成年人的挑战。如果一个成年人的说\u0026quot;那是个愚蠢的想法\u0026quot;，孩子要么会夹着尾巴爬走，要么会反抗。但反抗和顺从一样都假定了 inferiority。对\u0026quot;那是个愚蠢的想法\u0026quot;的成年人回应只是看着对方的眼睛说\u0026quot;真的吗？你为什么这么想？\u0026quot;\n当然，有很多成年人仍然以孩子般的方式应对挑战。你不常发现的是像成年人一样应对挑战的孩子。当你找到时，你找到了一个成年人，无论他们的年龄。\n太缺乏经验 我曾经写过，创业公司创始人应该至少23岁，人们应该在创办自己的公司之前为另一家公司工作几年。我不再相信这一点，改变我想法的是我们资助的创业公司的例子。\n我仍然认为23岁比21岁好。但是如果你21岁，获得经验的最好方法是创业。所以，矛盾的是，如果你太缺乏经验而不能创业，你应该做什么？创业。这是治愈缺乏经验比正常工作更有效的方法。事实上，获得正常工作实际上可能让你更不能创业，把你变成一个温顺的动物，认为他需要办公室来工作，需要产品经理告诉他写什么软件。\n真正让我相信这一点的是Kikos。他们一毕业就开始创业。他们的缺乏经验导致他们犯了很多错误。但是当我们资助他们的第二家创业公司时，一年后，他们变得极其强大。他们当然不是温顺的动物。如果他们那年在微软，甚至谷歌工作，他们不可能有这么多成长。他们仍然会是腼腆的初级程序员。\n所以现在我建议人们一毕业就开始创业。没有比年轻时承担风险更好的时机了。当然，你可能会失败。但即使是失败也会让你比找工作更快达到最终目标。\n说这些让我有点担心，因为实际上我们是在建议人们通过在我们的费用上失败来教育自己，但这是事实。\n不够坚定 作为创业公司创始人，你需要很多决心才能成功。这可能是成功最好的单一预测因素。\n有些人可能不够坚定，无法成功。我很难确定地说，因为我如此坚定，无法想象那些不坚定的人头脑中在想什么。但我知道他们存在。\n大多数黑客可能低估了他们的决心。我看到很多人在习惯了经营创业公司后变得更加坚定。我能想到我们资助的几个人，起初如果被200万美元收购会很高兴，但现在他们着眼于世界统治。\n当拉里和谢尔盖自己对创业不确定时，你怎么判断你是否足够坚定？我在这里猜测，但我会说测试是你是否有足够的动力去从事自己的项目。虽然他们可能对是否想创业不确定，但拉里和谢尔盖似乎不是温顺的小研究助理，服从地做顾问们的吩咐。他们开始自己的项目。\n不够聪明 你可能需要中等聪明才能作为创业公司创始人取得成功。但如果你担心这个，你可能错了。如果你足够聪明，担心你可能不够聪明而不能创业，那你可能就是。\n无论如何，创业并不需要那么多的智力。有些创业公司需要。你必须擅长数学才能编写Mathematica。但大多数公司做的更平凡的事情，决定因素是努力，而不是智力。硅谷可能会扭曲你对此的看法，因为这里有一个聪明的崇拜。不聪明的人至少试图表现得那样。但如果你认为需要很多智力才能变富，试着在纽约或洛杉矶的一些高档地方待几天。\n如果你认为自己不够聪明，不能做技术上困难的事情创业，那就编写企业软件。企业软件公司不是技术公司，它们是销售公司，销售主要取决于努力。\n对商业一无所知 这是另一个系数应该为零的变量。创业不需要了解商业知识。最初的焦点应该是产品。在这个阶段，你只需要知道如何建造人们想要的东西。如果你成功了，你将不得不考虑如何从中赚钱。但这很容易，你可以在实践中学习。\n我告诉创始人只要做出伟大的东西，不要太担心赚钱，受到了相当多的批评。然而所有经验证据都指向那个方向：几乎所有制造出受欢迎东西的创业公司都能设法从中赚钱。收购者私下告诉我，他们收购创业公司不是为了收入，而是为了它们的战略价值。这意味着，因为他们制造了人们想要的东西。收购者知道这个规则对他们也适用：如果用户喜欢你，你总能从中赚钱，如果他们不喜欢，世界上最聪明的商业模式也无法拯救你。\n为什么这么多人与我争论？我认为一个原因是他们讨厌二十多岁的人可以通过制造一些不赚钱的酷东西而变富的想法。他们只是不希望那是可能的。但它有多可能并不取决于他们多么希望它是可能的。\n有一段时间，听到自己被描述为某种不负责任的吹笛人，引导易受影响的年轻黑客走向毁灭，让我很恼火。但现在我意识到这种争议是好主意的标志。\n最有价值的真理是大多数人不相信的真理。它们就像被低估的股票。如果你从它们开始，你将拥有整个领域。所以当你找到一个你知道是好的但大多数人不同意的主意时，你不应该仅仅忽略他们的反对，而应该积极地向那个方向推进。在这种情况下，这意味着你应该寻找那些会受欢迎但似乎很难从中赚钱的主意。\n我们赌一轮种子资金，你不能制造出我们无法弄清楚如何从中赚钱的受欢迎东西。\n没有联合创始人 没有联合创始人是一个真正的问题。创业公司对一个人来说太多了。虽然我们在很多问题上与其他投资者不同，但我们都同意这一点。所有投资者，无一例外，更可能资助有联合创始人的人而不是没有的。\n我们资助了两个单人创始人，但在这两种情况下，我们建议他们的第一要务应该是找到联合创始人。两人都做到了。但我们宁愿他们在申请前就有联合创始人。对于一个刚刚获得资助的项目来说，找到联合创始人并不太难，我们宁愿有足够承诺的联合创始人来签署非常困难的事情。\n如果你没有联合创始人，你应该做什么？找一个。这比什么都重要。如果你住的地方没有人想和你一起创业，就搬去有这样的人的地方。如果没有人想在你当前的想法上与你合作，就转向人们想合作的想法。\n如果你还在上学，你被潜在的联合创始人包围着。几年后，找到他们就变得更难了。你不仅可以从中选择的人更少，而且大多数人已经有工作，甚至可能有家庭要支持。所以如果你在大学时有朋友曾经与你一起策划创业，尽可能与他们保持联系。这可能有助于保持梦想的活力。\n你可能通过用户组或会议之类的地方遇到联合创始人。但我不会太乐观。你需要与某人一起工作才能知道你是否想要他们作为联合创始人。[2]\n从这里得出的真正教训不是如何找到联合创始人，而是你应该在年轻且有很多人在身边的时候创业。\n没有想法 在某种意义上，如果你没有好主意，这不是问题，因为大多数创业公司都会改变他们的想法。在平均的Y Combinator创业公司中，我猜在头三个月结束时，70%的想法是新的。有时是100%。\n事实上，我们如此确信创始人比初始想法更重要，我们将在这个融资周期尝试一些新的东西。我们将让人们根本没有想法就申请。如果你愿意，你可以用\u0026quot;我们不知道\u0026quot;来回答申请表上问你要做什么的问题。如果你看起来真的很好，我们无论如何都会接受你。我们有信心可以坐下来和你一起策划一些有希望的项目。\n",
    "description": "",
    "tags": ["企业家精神","创业建议","y combinator","创始人","承担风险"],
    "categories": [],
    "content": "→ English Version\n不要不要创业 2007年3月\n（本文源自2007年创业学校和伯克利CSUA的演讲。）\n我们现在做Y Combinator已经足够长的时间，有了一些关于成功率的数据。我们的第一批，2005年夏天，有八家创业公司。在那八家中，现在看来至少有四家成功了。三家被收购：Reddit是两家公司合并的结果，Reddit和Infogami，还有一家我们不能谈论的被收购了。那批中的另一家是Loopt，做得非常好，如果他们愿意，大概十分钟内就可以被收购。\n所以大约两年前那个夏天的一半创始人，现在都富有了，至少按照他们的标准是这样。（当你变富时学到的一件事是，富有有很多层次。）\n我不准备预测我们的成功率会保持在50%那么高。第一批可能是个异常。但我们应该能够优于经常被引用的（可能是编造的）10%的标准数字。我觉得瞄准25%是安全的。\n即使是失败的创始人似乎也没有那么糟糕的经历。在最初的八家创业公司中，三家现在可能已经死了。在两种情况下，创始人在夏天结束后只是去做其他事情了。我不认为他们被这次经历创伤了。最接近创伤性失败的是Kiko，其创始人继续为他们的创业公司工作了一整年，然后被Google Calendar压垮了。但他们最终很快乐。他们在eBay上以25万美元的价格出售了他们的软件。在偿还了天使投资者后，他们每人约有大约一年的薪水。[1]然后他们立即开始了一家新的、更令人兴奋的创业公司，Justin.TV。\n所以这里有一个更引人注目的统计数据：那第一批中有0%的人有糟糕的经历。他们有起有落，像每家创业公司一样，但我不认为有人会用格子间的工作来交换。而且这个统计数据可能不是异常。无论我们的长期成功率最终如何，我认为希望得到常规工作的人的比例将保持在接近0%。\n对我来说最大的谜团是：为什么没有更多的人创业？如果几乎每个这样做的人都更喜欢它而不是常规工作，而且相当比例的人变得富有，为什么不是每个人都想做这件事？很多人认为我们在每个融资周期收到数千份申请。事实上，我们通常只收到几百份。为什么没有更多的人申请？虽然对于观察这个世界的人来说，创业公司似乎像疯狂一样涌现，但与拥有必要技能的人数相比，这个数字很小。绝大多数程序员仍然直接从大学到格子间，并留在那里。\n人们似乎没有为自己的利益行事。这是怎么回事？嗯，我可以回答这个问题。由于Y Combinator在风险投资过程的最开始的位置，我们可能是世界上关于不确定是否想创业的人的心理学的专家。\n不确定没有什么错。如果你是一个正在考虑创业并犹豫不决的黑客，你是一个伟大传统的一部分。拉里和谢尔盖在开始Google之前似乎也有同样的感觉，杰里和杨致远在开始雅虎之前也是如此。事实上，我猜最成功的创业公司是由不确定的黑客而不是热血沸腾的商业人士创办的。\n我们有一些证据支持这一点。几家我们资助的最成功的创业公司后来告诉我们，他们只是在最后一刻才决定申请。有些人在截止日期前几小时才决定。\n处理不确定性的方法是将其分析为组成部分。大多数不愿意做某件事的人头脑中有大约八个不同的原因混在一起，他们自己也不知道哪些最大。有些是合理的，有些是虚假的，但除非你知道每个的相对比例，否则你不知道你的整体不确定性是主要合理还是主要虚假。\n所以我将列出人们不愿创业的所有组成部分，并解释哪些是真实的。然后潜在的创始人可以用它作为检查清单来检查自己的感受。\n我承认我的目标是增强你的自信。但这里有两点与通常的信心建设练习不同。一是我有诚实的动机。在信心建设行业的大多数人，当你买书或付费参加他们告诉你有多棒的研讨会时，他们已经实现了他们的目标。而如果我鼓励不应该创业的人创业，我让自己的生活更糟。如果我鼓励太多人申请Y Combinator，这只是意味着我有更多工作，因为我必须阅读所有申请。\n另一件将要不同的事情是我的方法。而不是积极的，我将是消极的。而不是告诉你\u0026quot;来吧，你能做到\u0026quot;，我将考虑你不这样做的所有原因，并说明为什么大多数（但不是全部）应该被忽略。我们将从每个人都有的那个开始。\n太年轻 很多人认为他们太年轻，不能创业。很多是对的。世界各地的中位数年龄约为27岁，所以可能有三分之一的人口可以真实地说他们太年轻了。\n什么年龄太年轻？我们对Y Combinator的目标之一是发现创业公司创始人的年龄下限。在我们看来，投资者在这方面似乎过于保守——他们想资助教授，而实际上他们应该资助研究生甚至本科生。\n我们从推动这个边界中发现的主要事情不是边界在哪里，而是它有多模糊。外部界限可能低至16岁。我们不考虑18岁以下的人，因为比那更年轻的人不能合法签订合同。但我们迄今为止资助的最成功的创始人，Sam Altman，当时是19岁。\n然而，Sam Altman是一个离群的数据点。当他19岁时，他看起来好像 …"
  },{
    "title": "专利承诺",
    "url": "/paul_graham/essays_zh/patentpledge/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n专利承诺 2011年8月\n我最近意识到，我们也许能够解决专利问题的一部分，而无需等待政府。\n我从来没有100%确定专利是帮助还是阻碍技术进步。当我还是个孩子的时候，我认为它们有帮助。我认为它们保护发明人免于被大公司窃取想法。也许在过去，当更多东西是物理的时候，这更真实。但无论专利总体上是否是好事，似乎确实有使用它们的坏方式。而且由于专利的坏用途似乎在增加，对专利改革的呼吁也在增加。\n专利改革的问题在于它必须通过政府。那往往很慢。但最近我意识到我们也可以在下游攻击问题。除了在专利发布时掐断专利流外，在某些情况下，我们也许能够在它们被使用时掐断它。\n使用专利的一种明显不鼓励创新的方式是，当拥有糟糕产品的老牌公司使用专利来压制拥有好产品的小竞争对手时。这种滥用类型我们也许能够减少，而无需通过政府。\n这样做的方法是让那些不屑于玩这种把戏的公司公开承诺不这样做。然后，那些不会做出这种承诺的公司将非常显眼。潜在员工不会想为他们工作。投资者也将能够看到他们是那种通过诉讼而不是通过制造好产品来竞争的公司。\n承诺如下：不首先使用软件专利针对少于25人的公司。\n我故意为了简洁而牺牲了精确性。专利承诺没有法律约束力。它就像谷歌的\u0026quot;不作恶\u0026quot;。他们没有定义什么是邪恶，但通过公开这样说，他们说自己愿意被一个标准约束，比如奥驰亚就不是。虽然有限制，但\u0026quot;不作恶\u0026quot;对谷歌有好处。技术公司通过吸引最有生产力的人来获胜，而最有生产力的人被那些对自己要求高于法律要求的雇主所吸引。[1]\n专利承诺实际上是一个更狭窄但开源的\u0026quot;不作恶\u0026quot;。我鼓励每家技术公司采用它。如果你想帮助修复专利问题，鼓励你的雇主采用。\n大多数技术公司已经不会降低到对创业公司使用专利。你没有看到谷歌或Facebook因专利侵权而起诉创业公司。他们不需要。所以对于更好的技术公司，专利承诺不需要改变行为。他们只是承诺做他们无论如何都会做的事情。当所有不会对创业公司使用专利的公司都这样说了，坚持者将非常显眼。\n专利承诺不能解决专利的每一个问题。例如，它不会阻止专利流氓；他们已经是被排斥者。但专利承诺确实解决的问题可能比专利流氓的问题更严重。专利流氓只是寄生虫。笨拙的寄生虫偶尔可能会杀死宿主，但这不是它的目标。而因专利侵权而起诉创业公司的公司通常这样做，明确的目标是让他们的产品远离市场。\n对创业公司使用专利的公司是在根本上攻击创新。现在任何人都可以对这个问题做一些事情，而无需等待政府：询问公司的立场。\n专利承诺网站\n注释：\n[1] 因为承诺故意含糊，我们在解释时需要常识。甚至反之亦然：承诺含糊是为了让人们在解释时使用常识。\n例如，我故意避免说25人是否必须是员工，或者承包商是否也算。如果一个公司必须在这种精细程度上吹毛求疵，说明诉讼是否会违反专利承诺，这可能仍然是一种卑鄙的行为。\n没有发生的投资\n",
    "description": "",
    "tags": ["专利","创新","创业公司","法律改革","道德"],
    "categories": [],
    "content": "→ English Version\n专利承诺 2011年8月\n我最近意识到，我们也许能够解决专利问题的一部分，而无需等待政府。\n我从来没有100%确定专利是帮助还是阻碍技术进步。当我还是个孩子的时候，我认为它们有帮助。我认为它们保护发明人免于被大公司窃取想法。也许在过去，当更多东西是物理的时候，这更真实。但无论专利总体上是否是好事，似乎确实有使用它们的坏方式。而且由于专利的坏用途似乎在增加，对专利改革的呼吁也在增加。\n专利改革的问题在于它必须通过政府。那往往很慢。但最近我意识到我们也可以在下游攻击问题。除了在专利发布时掐断专利流外，在某些情况下，我们也许能够在它们被使用时掐断它。\n使用专利的一种明显不鼓励创新的方式是，当拥有糟糕产品的老牌公司使用专利来压制拥有好产品的小竞争对手时。这种滥用类型我们也许能够减少，而无需通过政府。\n这样做的方法是让那些不屑于玩这种把戏的公司公开承诺不这样做。然后，那些不会做出这种承诺的公司将非常显眼。潜在员工不会想为他们工作。投资者也将能够看到他们是那种通过诉讼而不是通过制造好产品来竞争的公司。\n承诺如下：不首先使用软件专利针对少于25人的公司。\n我故意为了简洁而牺牲了精确性。专利承诺没有法律约束力。它就像谷歌的\u0026quot;不作恶\u0026quot;。他们没有定义什么是邪恶，但通过公开这样说，他们说自己愿意被一个标准约束，比如奥驰亚就不是。虽然有限制，但\u0026quot;不作恶\u0026quot;对谷歌有好处。技术公司通过吸引最有生产力的人来获胜，而最有生产力的人被那些对自己要求高于法律要求的雇主所吸引。[1]\n专利承诺实际上是一个更狭窄但开源的\u0026quot;不作恶\u0026quot;。我鼓励每家技术公司采用它。如果你想帮助修复专利问题，鼓励你的雇主采用。\n大多数技术公司已经不会降低到对创业公司使用专利。你没有看到谷歌或Facebook因专利侵权而起诉创业公司。他们不需要。所以对于更好的技术公司，专利承诺不需要改变行为。他们只是承诺做他们无论如何都会做的事情。当所有不会对创业公司使用专利的公司都这样说了，坚持者将非常显眼。\n专利承诺不能解决专利的每一个问题。例如，它不会阻止专利流氓；他们已经是被排斥者。但专利承诺确实解决的问题可能比专利流氓的问题更严重。专利流氓只是寄生虫。笨拙的寄生虫偶尔可能会杀死宿主，但这不是它的目标。而因专利侵权而起诉创业公司的公司通常这样做，明确的目标是让他们的产品远离市场。\n对创业公司使用专利的公司是在根本上攻击创新。现在任何人都可以对这个问题做一些事情，而无需等待政府：询问公司的立场。\n专利承诺网站\n注释：\n[1] 因为承诺故意含糊，我们在解释时需要常识。甚至反之亦然：承诺含糊是为了让人们在解释时使用常识。\n例如，我故意避免说25人是否必须是员工，或者承包商是否也算。如果一个公司必须在这种精细程度上吹毛求疵，说明诉讼是否会违反专利承诺，这可能仍然是一种卑鄙的行为。\n没有发生的投资\n"
  },{
    "title": "两种判断",
    "url": "/paul_graham/essays_zh/judgement/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n两种判断 2007年4月\n人们有两种不同的方式来判断你。有时正确判断你是最终目标。但还有第二种更常见的判断类型，其中正确判断你不是目标。我们倾向于将所有对我们的判断视为第一种类型。如果我们意识到哪些是哪些不是，我们可能会更快乐。\n第一种判断类型，即判断你是最终目标的类型，包括法庭案件、课程成绩和大多数比赛。这样的判断当然可能是错误的，但因为目标是正确判断你，通常有某种上诉过程。如果你觉得自己被错误判断，你可以抗议自己受到了不公正对待。\n几乎所有对儿童做出的判断都是这种类型，所以我们很早就养成了认为所有判断都是这样的习惯。\n但事实上还有第二个更大的判断类别，其中判断你只是达到其他目的的手段。这些包括大学录取、招聘和投资决策，当然还有约会中的判断。这种判断并不是真正关于你。\n把自己置于为国家队选拔球员的位置。假设为了简单起见，这是一个没有位置的比赛，你必须选择20名球员。会有一些明显应该入选的明星球员，许多明显不应该入选的球员。你的判断唯一有影响的地方是在边界案例中。假设你搞砸了，低估了第20好的球员，导致他没有入选，他的位置被第21好的球员取代。你仍然选择了一个好球队。如果球员的能力分布正常，第21好的球员只会比第20好的球员稍微差一点。他们之间的差异可能小于测量误差。\n第20好的球员可能觉得自己被错误判断了。但你的目标不是提供估计人们能力的服务。而是选择一个球队，如果第20和第21好的球员之间的差异小于测量误差，你仍然最优地做到了。\n甚至用\u0026quot;不公正\u0026quot;这个词来描述这种错误判断也是错误的类比。它的目标不是产生对任何给定个人的正确估计，而是选择一个合理的最优集合。\n导致我们在这里误入歧途的一件事是选择者似乎处于权力地位。这使他看起来像法官。如果你把判断你的人视为顾客而不是法官，对公平的期望就消失了。一本好小说的作者不会抱怨读者更喜欢有艳丽封面的低俗小说是不公平的。愚蠢，也许，但不公平。\n我们早期的训练和自我中心结合起来使我们相信每一次对我们的判断都是关于我们。事实上大多数不是。这是一个罕见的例子，减少自我中心会使人们更自信。一旦你意识到大多数判断你的人多么不关心正确判断你——一旦你意识到由于大多数申请人池的正常分布，在判断最有影响的情况下，准确判断最不重要——你就不会那么个人化地对待拒绝。\n奇怪的是，不那么个人化地对待拒绝可能帮助你更少地被拒绝。如果你认为判断你的人会努力正确判断你，你可以被动。但你越意识到大多数判断受到随机、无关因素的极大影响——大多数判断你的人更像善变的小说购买者而不是智慧有洞察力的地方官——你越意识到你可以做事情来影响结果。\n应用这个原则的一个好地方是大学申请。大多数申请大学的高中生以通常儿童的自卑和自我中心混合这样做：自卑在于他们假设招生委员会必须是全知的；自我中心在于他们假设招生委员会足够关心他们，深入挖掘他们的申请，弄清楚他们是否优秀。这些结合起来使申请人在申请时被动，在被拒绝时受伤。如果大学申请人意识到大多数选拔过程多么快速和非个人化，他们会更努力推销自己，不那么个人化地对待结果。\n西班牙语翻译 | 俄语翻译 | 阿拉伯语翻译\n",
    "description": "",
    "tags": ["判断","心理学","成功","拒绝","大学录取","招聘","决策"],
    "categories": [],
    "content": "→ English Version\n两种判断 2007年4月\n人们有两种不同的方式来判断你。有时正确判断你是最终目标。但还有第二种更常见的判断类型，其中正确判断你不是目标。我们倾向于将所有对我们的判断视为第一种类型。如果我们意识到哪些是哪些不是，我们可能会更快乐。\n第一种判断类型，即判断你是最终目标的类型，包括法庭案件、课程成绩和大多数比赛。这样的判断当然可能是错误的，但因为目标是正确判断你，通常有某种上诉过程。如果你觉得自己被错误判断，你可以抗议自己受到了不公正对待。\n几乎所有对儿童做出的判断都是这种类型，所以我们很早就养成了认为所有判断都是这样的习惯。\n但事实上还有第二个更大的判断类别，其中判断你只是达到其他目的的手段。这些包括大学录取、招聘和投资决策，当然还有约会中的判断。这种判断并不是真正关于你。\n把自己置于为国家队选拔球员的位置。假设为了简单起见，这是一个没有位置的比赛，你必须选择20名球员。会有一些明显应该入选的明星球员，许多明显不应该入选的球员。你的判断唯一有影响的地方是在边界案例中。假设你搞砸了，低估了第20好的球员，导致他没有入选，他的位置被第21好的球员取代。你仍然选择了一个好球队。如果球员的能力分布正常，第21好的球员只会比第20好的球员稍微差一点。他们之间的差异可能小于测量误差。\n第20好的球员可能觉得自己被错误判断了。但你的目标不是提供估计人们能力的服务。而是选择一个球队，如果第20和第21好的球员之间的差异小于测量误差，你仍然最优地做到了。\n甚至用\u0026quot;不公正\u0026quot;这个词来描述这种错误判断也是错误的类比。它的目标不是产生对任何给定个人的正确估计，而是选择一个合理的最优集合。\n导致我们在这里误入歧途的一件事是选择者似乎处于权力地位。这使他看起来像法官。如果你把判断你的人视为顾客而不是法官，对公平的期望就消失了。一本好小说的作者不会抱怨读者更喜欢有艳丽封面的低俗小说是不公平的。愚蠢，也许，但不公平。\n我们早期的训练和自我中心结合起来使我们相信每一次对我们的判断都是关于我们。事实上大多数不是。这是一个罕见的例子，减少自我中心会使人们更自信。一旦你意识到大多数判断你的人多么不关心正确判断你——一旦你意识到由于大多数申请人池的正常分布，在判断最有影响的情况下，准确判断最不重要——你就不会那么个人化地对待拒绝。\n奇怪的是，不那么个人化地对待拒绝可能帮助你更少地被拒绝。如果你认为判断你的人会努力正确判断你，你可以被动。但你越意识到大多数判断受到随机、无关因素的极大影响——大多数判断你的人更像善变的小说购买者而不是智慧有洞察力的地方官——你越意识到你可以做事情来影响结果。\n应用这个原则的一个好地方是大学申请。大多数申请大学的高中生以通常儿童的自卑和自我中心混合这样做：自卑在于他们假设招生委员会必须是全知的；自我中心在于他们假设招生委员会足够关心他们，深入挖掘他们的申请，弄清楚他们是否优秀。这些结合起来使申请人在申请时被动，在被拒绝时受伤。如果大学申请人意识到大多数选拔过程多么快速和非个人化，他们会更努力推销自己，不那么个人化地对待结果。\n西班牙语翻译 | 俄语翻译 | 阿拉伯语翻译\n"
  },{
    "title": "为什么 Arc 不是特别面向对象的",
    "url": "/paul_graham/essays_zh/noop/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么 Arc 不是特别面向对象的 目前有一种对面向对象编程的狂热，但我认识的一些最聪明的程序员是对此最不兴奋的人。\n我自己的感觉是，面向对象编程在某些情况下是一种有用的技术，但它不是必须渗透到你写的每个程序中的东西。你应该能够定义新类型，但不必将每个程序都表达为新类型的定义。\n我认为人们喜欢面向对象编程有五个原因，其中三个半是坏的：\n如果你有一个静态类型的语言，没有词法闭包或宏，面向对象编程是令人兴奋的。在某种程度上，它提供了一种绕过这些限制的方法。（见 Greenspun 第十规则。）\n面向对象编程在大公司很受欢迎，因为它适合他们编写软件的方式。在大公司，软件往往由大量（且经常变动的）平庸程序员团队编写。面向对象编程对这些程序员施加了一种纪律，防止任何一个人造成太大的损害。代价是产生的代码充满了协议和重复。这对大公司来说不是太高的价格，因为他们的软件无论如何都可能是臃肿和充满重复的。\n面向对象编程产生了很多看起来像工作的东西。在折叠纸的时代，有一种程序员只会在一页上放五到十行代码，前面是二十行精心格式化的注释。面向对象编程对这些来说就像可卡因：它让你将所有这些脚手架直接整合到源代码中。Lisp 黑客可能通过将符号推到列表上来处理的东西，变成了整个类的文件和方法。所以如果你想说服自己或其他人你正在做很多工作，这是一个好工具。\n如果语言本身是一个面向对象的程序，它可以被用户扩展。嗯，也许。或者也许你可以通过提供面向对象编程的子概念单点来做得更好。例如，重载本质上并不与类绑定。我们拭目以待。\n面向对象的抽象很好地映射到某些特定类型程序的领域，比如模拟和 CAD 系统。\n我个人从来不需要面向对象的抽象。Common Lisp 有一个极其强大的对象系统，我从未使用过一次。我做过很多事情（例如，制作充满闭包的哈希表），这些在较弱的语言中需要面向对象技术，但我从未不得不使用 CLOS。\n也许我只是很愚蠢，或者只在应用程序的有限子集上工作过。基于自己的编程经验设计语言是有危险的。但放入你从未需要的东西因为它被认为是个好主意似乎更危险。\n",
    "description": "",
    "tags": ["面向对象编程","Arc","Lisp","软件设计","编程语言","代码"],
    "categories": [],
    "content": "→ English Version\n为什么 Arc 不是特别面向对象的 目前有一种对面向对象编程的狂热，但我认识的一些最聪明的程序员是对此最不兴奋的人。\n我自己的感觉是，面向对象编程在某些情况下是一种有用的技术，但它不是必须渗透到你写的每个程序中的东西。你应该能够定义新类型，但不必将每个程序都表达为新类型的定义。\n我认为人们喜欢面向对象编程有五个原因，其中三个半是坏的：\n如果你有一个静态类型的语言，没有词法闭包或宏，面向对象编程是令人兴奋的。在某种程度上，它提供了一种绕过这些限制的方法。（见 Greenspun 第十规则。）\n面向对象编程在大公司很受欢迎，因为它适合他们编写软件的方式。在大公司，软件往往由大量（且经常变动的）平庸程序员团队编写。面向对象编程对这些程序员施加了一种纪律，防止任何一个人造成太大的损害。代价是产生的代码充满了协议和重复。这对大公司来说不是太高的价格，因为他们的软件无论如何都可能是臃肿和充满重复的。\n面向对象编程产生了很多看起来像工作的东西。在折叠纸的时代，有一种程序员只会在一页上放五到十行代码，前面是二十行精心格式化的注释。面向对象编程对这些来说就像可卡因：它让你将所有这些脚手架直接整合到源代码中。Lisp 黑客可能通过将符号推到列表上来处理的东西，变成了整个类的文件和方法。所以如果你想说服自己或其他人你正在做很多工作，这是一个好工具。\n如果语言本身是一个面向对象的程序，它可以被用户扩展。嗯，也许。或者也许你可以通过提供面向对象编程的子概念单点来做得更好。例如，重载本质上并不与类绑定。我们拭目以待。\n面向对象的抽象很好地映射到某些特定类型程序的领域，比如模拟和 CAD 系统。\n我个人从来不需要面向对象的抽象。Common Lisp 有一个极其强大的对象系统，我从未使用过一次。我做过很多事情（例如，制作充满闭包的哈希表），这些在较弱的语言中需要面向对象技术，但我从未不得不使用 CLOS。\n也许我只是很愚蠢，或者只在应用程序的有限子集上工作过。基于自己的编程经验设计语言是有危险的。但放入你从未需要的东西因为它被认为是个好主意似乎更危险。\n"
  },{
    "title": "为什么书呆子不受欢迎",
    "url": "/paul_graham/essays_zh/nerds/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么书呆子不受欢迎 2003年2月\n当我们还在初中的时候，我的朋友 Rich 和我根据受欢迎程度制作了一张学校午餐桌的地图。这很容易做到，因为孩子们只和受欢迎程度相当的人一起吃午饭。我们把它们从 A 到 E 分级。A 桌坐满了橄榄球运动员和啦啦队长等等。E 桌坐的是有轻度唐氏综合症的孩子，用当时的语言我们称之为\u0026quot;智障\u0026quot;。\n我们坐在 D 桌，这是在不显得身体有异常的情况下能达到的最低级别。我们把自己评为 D 并不是特别坦诚。要说别的就需要故意撒谎了。学校里的每个人都确切地知道其他每个人的受欢迎程度，包括我们。\n我在高中期间的人气逐渐上升。青春期终于到来；我成为一名不错的足球运动员；我创办了一份声名狼藉的地下报纸。所以我已经看到了受欢迎程度格局的大部分。\n我认识很多在学校时是书呆子的人，他们都讲述了同样的故事：聪明和成为书呆子之间有很强的相关性，而成为书呆子和受欢迎之间则有更强的负相关性。聪明似乎让你不受欢迎。\n为什么？对于现在还在学校的人来说，这似乎是个奇怪的问题。这个事实是如此压倒性的，以至于想象情况会有所不同似乎很奇怪。但确实可以。聪明不会让你在小学成为被排斥者。它在现实世界中也不会伤害你。据我所知，在大多数其他国家，这个问题也没有那么严重。但在典型的美国中学，聪明很可能让你的生活变得困难。为什么？这个谜题的关键是稍微重新表述一下问题。为什么聪明的孩子不让自己受欢迎？如果他们那么聪明，为什么他们不弄清楚受欢迎程度是如何运作的，然后击败这个系统，就像他们对待标准化考试一样？\n有一种论点说这是不可能的，聪明的孩子不受欢迎是因为其他孩子嫉妒他们的聪明，而他们做什么都无法让自己受欢迎。我希望如此。如果初中的其他孩子嫉妒我，他们很好地隐藏了这一点。无论如何，如果聪明真的是一种令人羡慕的品质，女孩们就会打破阵营。男孩子们嫉妒的人，女孩们喜欢。\n在我去的学校里，聪明根本不怎么重要。孩子们不崇拜它也不鄙视它。在其他条件相同的情况下，他们宁愿在平均水平的聪明一边而不是笨拙一边，但智力远不如，比如说，外表、魅力或运动能力重要。\n那么，如果智力本身不是受欢迎程度的因素，为什么聪明的孩子如此一贯地不受欢迎？答案，我认为，是他们真的不想受欢迎。\n如果当时有人告诉我这一点，我会嘲笑他。在学校不受欢迎让孩子们痛苦不堪，有些如此痛苦以至于他们自杀。告诉我说我不想受欢迎，就像告诉一个在沙漠中渴死的人说他不想要一杯水。我当然想受欢迎。\n但事实上我没有，不够想。有其他我更想要的东西：变得聪明。不仅仅是在学校表现好，虽然这算一些，而是设计漂亮的火箭，或者写得好，或者理解如何编程计算机。总的来说，是做伟大的事情。\n那时我从未试图分开我的欲望并相互权衡。如果我这样做了，我会看到变得更聪明更重要。如果有人给我机会成为学校最受欢迎的孩子，但只能以普通智力为代价（请原谅我），我不会接受的。\n尽管他们因不受欢迎而受苦，我认为很多书呆子不会。对他们来说，普通智力的想法是无法忍受的。但大多数孩子会接受这个交易。对他们中一半的人来说，这会是一个进步。即使是第80个百分位的人（假设，就像当时每个人似乎都认为的那样，智力是一个标量），谁不愿意下降30分来换取被每个人爱和钦佩呢？\n而这，我认为，就是问题的根源。书呆子侍奉两个主人。他们当然想受欢迎，但他们更想变得聪明。而受欢迎不是你可以在业余时间做的事情，尤其是在美国中学竞争激烈的环境中。阿尔贝蒂，可以说是文艺复兴时期人的原型，写道\u0026quot;没有一门艺术，无论多么微小，如果你想在其中出类拔萃，都需要全身心的投入。\u0026ldquo;我想知道世界上是否有人比美国学校孩子在受欢迎程度上更努力。海豹突击队和神经外科住院医师相比之下似乎是懒散的。他们偶尔休假；有些人甚至有爱好。美国青少年可能会在醒着的每一分钟都在努力受欢迎，一年365天。\n我并不是建议他们有意识地这样做。他们中的一些人真的是小马基雅维利主义者，但我在这里真正意思是青少年总是在职，作为顺从者。\n例如，青少年非常注重衣服。他们没有意识地为了受欢迎而穿衣。他们穿得好看。但是给谁看？给其他孩子。其他孩子的意见成为他们对正确的定义，不仅是对衣服，而且对他们所做的一切，一直到他们走路的方式。因此，他们为把事情做\u0026quot;对\u0026quot;所做的每一项努力，无论是有意识的还是无意识的，都是更受欢迎的努力。\n书呆子没有意识到这一点。他们没有意识到受欢迎需要努力。一般来说，某些非常苛刻领域之外的人没有意识到成功在多大程度上取决于持续（虽然通常是无意识的）努力。例如，大多数人似乎把绘画能力视为某种天生的品质，就像个子高一样。事实上，大多数\u0026quot;会画画\u0026quot;的人喜欢画画，并且花了很多时间这样做；这就是他们擅长它的原因。同样，受欢迎不仅仅是你是不是，而是你自己造就的东西。\n书呆子不受欢迎的主要原因是他们有其他事情要思考。他们的注意力被书籍或自然世界吸引，而不是时尚和派对。他们就像试图一边在头顶平衡一杯水一边踢足球的人。其他能够全神贯注于比赛的球员毫不费力地击败他们，并奇怪为什么他们似乎如此无能。\n即使书呆子和其他孩子一样关心受欢迎程度，对他们来说受欢迎也会是更多的工作。受欢迎的孩子学会了如何受欢迎，并且想要受欢迎，就像书呆子学会了如何聪明，并且想要变得聪明一样：从他们的父母那里。当书呆子被训练得到正确答案时，受欢迎的孩子被训练取悦他人。\n到目前为止，我一直在模糊处理聪明和书呆子之间的关系，把它们当作可以互换的。事实上，只是上下文使它们如此。书呆子是社交能力不够的人。但\u0026quot;足够\u0026quot;取决于你在哪里。在典型的美国学校，酷的标准如此之高（或者至少如此具体），以至于你不必特别笨拙就显得笨拙。\n很少有聪明孩子能腾出受欢迎程度所需的注意力。除非他们碰巧也是长相好看、天生的运动员，或者受欢迎孩子的兄弟姐妹，否则他们往往会成为书呆子。这就是为什么聪明人在大约十一到十七岁之间生活最糟糕。在这个年龄，生活比之前或之后更多地围绕受欢迎程度展开。\n在此之前，孩子的生活由父母主导，而不是由其他孩子。孩子在小学确实关心同龄人的想法，但这不是他们的全部生活，后来才变成这样。\n在大约十一岁的时候，孩子们似乎开始把他们的家庭当作一份白天的工作。他们在自己中间创造了一个新世界，在这个世界中的地位才是重要的，而不是在他们家庭中的地位。事实上，在家庭中惹上麻烦可以让他们在关心的世界中赢得分数。\n问题是，这些孩子为自己创造的世界最初是一个非常粗陋的世界。如果你让一群十一岁的孩子自生自灭，你得到的是《蝇王》。像很多美国孩子一样，我在学校读了这本书。想必这不是巧合。想必有人想向我们指出我们是野蛮人，我们为自己创造了一个残酷而愚蠢的世界。这对我来说太微妙了。虽然这本书似乎完全可信，但我没有得到额外的信息。我希望他们就直接告诉我们我们是野蛮人，我们的世界是愚蠢的。\n如果不受欢迎仅仅导致书呆子被忽视，他们会发现他们的不受受欢迎更容易忍受。不幸的是，在学校不受受欢迎就是被积极迫害。\n为什么？再一次，任何现在还在学校的人可能认为这是一个奇怪的问题。事情怎么可能不是这样？但确实可以。成年人通常不会迫害书呆子。为什么青少年会这样做？\n部分是因为青少年还是半孩子，而许多孩子天生就残忍。有些人折磨书呆子的原因和他们扯掉蜘蛛腿的原因一样。在你发展出良心之前，折磨是有趣的。\n孩子们迫害书呆子的另一个原因是让自己感觉更好。当你踩水时，你通过向下推水来把自己抬起来。同样，在任何社会等级中，对自己位置不确定的人会通过虐待他们认为地位低于自己的人来强调它。我读到过，这就是为什么美国穷人是黑人最敌对的群体。\n但我认为其他孩子迫害书呆子的主要原因是它是受欢迎程度机制的一部分。受欢迎程度只有部分与个人吸引力有关。更多的是关于联盟。要变得更受欢迎，你需要不断地做让你接近其他受欢迎的人的事情，没有什么比共同的敌人更能让人们亲近了。\n就像想要分散选民对国内困难时期注意力的政客一样，如果没有真正的敌人，你可以创造一个敌人。通过挑出并迫害一个书呆子，一群来自更高等级的孩子在他们之间创造联系。攻击一个外人让他们都成为内部人。这就是为什么最严重的欺凌案件发生在群体中。问任何书呆子：你从一群孩子那里受到的待遇比任何个体恶霸遭受的都要糟糕，无论多么虐待狂。\n如果这对书呆子有任何安慰的话，这不是个人的。聚集在一起欺负你的孩子们做同样的事情，出于同样的原因，就像一群聚在一起去打猎的人。他们实际上并不恨你。他们只是需要一些东西来追逐。\n因为他们在等级的底层，书呆子是整个学校的安全目标。如果我没记错的话，最受欢迎的孩子不会迫害书呆子；他们不需要屈就做这种事情。大多数迫害来自地位较低的孩子，紧张的中产阶级。\n问题是，他们有很多。受欢迎程度的分布不是金字塔，而是像梨一样在底部变细。最不受欢迎的群体相当小。（我相信我们是自助餐厅地图中唯一的 D 桌。）所以想欺负书呆子的人比书呆子还多。\n除了通过远离不受欢迎的孩子来获得分数外，靠近他们也会失去分数。我认识的一个女人说，她在高中时喜欢书呆子，但害怕被看到和他们说话，因为其他女孩会嘲笑她。不受欢迎是一种传染病；太善良而不欺负书呆子的孩子仍然会出于自我保护而孤立他们。\n那么，聪明孩子往往在初中和高中不快乐就不足为奇了。他们的其他兴趣让他们几乎没有注意力分给受欢迎程度，而且由于受欢迎程度类似于零和游戏，这反过来使他们成为整个学校的目标。奇怪的是，这种噩梦情景的发生没有任何故意的恶意，仅仅是由于情况的形状。对我来说最糟糕的时期是初中，当时孩子文化是新的和严酷的，后来会逐渐将更聪明的孩子分开的专业化几乎还没有开始。我交谈过的几乎每个人都同意：最低点在十一到十四岁之间。\n在我们学校是八年级，对我来说是十二岁和十三岁。那年有一次短暂轰动，我们的一位老师无意中听到一群女孩等校车时说的话，非常震惊，以至于第二天她把整堂课都用来雄辩地恳求不要如此残忍地对待彼此。\n这没有任何明显效果。当时让我吃惊的是她很惊讶。你的意思是她不知道他们彼此说的话的种类？你的意思是这不正常？\n重要的是要认识到，不，成年人不知道孩子们彼此在做什么。他们在抽象上知道孩子们彼此之间是兽性的残酷，就像我们在抽象上知道人们在较穷国家受到折磨一样。但是，像我们一样，他们不喜欢沉浸在这个压抑的事实上，除非他们去寻找，他们看不到具体虐待的证据。\n公立学校教师与监狱看守处境非常相似。看守主要关心的是把囚犯关在场所内。他们还需要让他们有饭吃，并尽可能防止他们互相残杀。除此之外，他们想尽可能少地与囚犯打交道，所以他们让他们创造任何他们想要的社会组织。从我读到的内容来看，囚犯创造的社会是扭曲的、野蛮的和普遍的，处于底层一点也不好玩。\n大致上，我去过的学校也是这样。最重要的是留在场所内。在那里，当局给你食物，防止公开暴力，并努力教你一些东西。但除此之外，他们不想与孩子有太多关系。像监狱看守一样，老师大多让我们自己管理自己。而像囚犯一样，我们创造的文化是野蛮的。\n为什么现实世界对书呆子更友好？似乎答案仅仅是它由成年人组成，他们太成熟了，不会彼此欺负。但我不认为这是真的。监狱里的成年人当然会彼此欺负。显然，社交名媛也会；在曼哈顿的一些地方，女性的生活听起来像是高中的延续，有着同样琐碎的阴谋。\n我认为现实世界的重要之处不是它由成年人组成，而是它非常大，你所做的事情有实际的影响。这就是学校、监狱和午餐女士所缺乏的。所有这些世界的居民都被困在小泡沫里，他们所做的一切不可能有超过局部的影响。自然这些社会退化为野蛮。他们的形式没有功能可遵循。\n当你做的事情有实际影响时，仅仅取悦就不再够了。开始重要的是得到正确答案，而这就是书呆子显示出优势的地方。比尔·盖茨当然会浮现在我脑海中。虽然众所周知缺乏社交技能，但他得到正确答案，至少按收入衡量是这样。\n现实世界的另一个不同之处是它大得多。在一个足够大的水池里，即使是最小的少数群体如果聚集在一起也能达到临界质量。在现实世界中，书呆子聚集在某些地方，形成自己的社会，在那里智力是最重要的。有时潮流甚至开始向相反方向流动：有时，特别是在大学数学和科学系，书呆子故意夸大他们的笨拙以显得更聪明。约翰·纳什如此钦佩诺伯特·维纳，以至于他采用了他在走廊里走时触摸墙壁的习惯。\n作为一个十三岁的孩子，我对世界的了解并不比我立即看到的周围多多少。我们生活的扭曲小世界，我认为，就是世界。世界似乎残酷和无聊，我不确定哪个更糟。\n因为我不适应这个世界，我认为一定是我有什么问题。我没有意识到我们书呆子不适应的原因是在某些方面我们领先了一步。我们已经在思考现实世界中重要的事情，而不是像其他人一样把所有时间花在玩一个精确但大多无意义的游戏上。\n我们有点像一个成年人如果被扔回中学会有的样子。他不知道该穿什么衣服，该喜欢什么音乐，该用什么俚语。他对孩子们来说会是个完全的外星人。问题是，他知道得足够多，不在乎他们怎么想。我们没有这样的自信。\n很多人似乎认为在这个生活阶段把聪明的孩子和\u0026quot;正常\u0026quot;孩子混在一起是好事。也许。但至少在某些情况下，书呆子不适应的真正原因是其他人都疯了。我记得坐在高中的一次\u0026quot;动员大会\u0026quot;观众席上，看着啦啦队员们把一个对手玩家的模拟像扔进观众席被撕成碎片。我感觉像一个探险家目睹某种奇怪的部落仪式。如果我能回去给我十三岁的自己一些建议，我要告诉他的主要事情是抬起头来环顾四周。我当时没有真正理解，但我们生活的整个世界像 Twinkie 一样虚假。不只是学校，而是整个城镇。为什么人们搬到郊区？为了生孩子！所以难怪它似乎无聊和无菌。整个地方是一个巨大的托儿所，一个人造城镇，明确为繁育孩子而创建。\n我长大的地方，感觉好像无处可去，也无事可做。这不是偶然的。郊区是特意设计用来排除外部世界的，因为它包含可能危及孩子的东西。\n至于学校，它们只是这个虚假世界中的围栏。学校的官方目的是教育孩子。实际上它们的主要目的是把孩子锁在一个地方一大段时间，以便成年人可以把事情做完。我对此没有异议：在专业化的工业社会，让孩子们四处乱跑将是灾难。\n让我烦恼的不是孩子被关在监狱里，而是（a）他们没有被告知这一点，（b）监狱大多由囚犯管理。孩子们被送去花六年时间在一个由一群追逐椭圆形棕色球的巨人统治的世界里记忆无意义的事实，好像这是世界上最自然的事情。如果他们对这种超现实的鸡尾酒有抵触，他们被称为不合群的人。在这个扭曲的世界里生活对孩子们来说是压力很大的。不仅对书呆子。像任何战争一样，它甚至对胜利者都是有害的。\n",
    "description": "",
    "tags": ["书呆子","学校","受欢迎程度","智力","青少年","社交","教育"],
    "categories": [],
    "content": "→ English Version\n为什么书呆子不受欢迎 2003年2月\n当我们还在初中的时候，我的朋友 Rich 和我根据受欢迎程度制作了一张学校午餐桌的地图。这很容易做到，因为孩子们只和受欢迎程度相当的人一起吃午饭。我们把它们从 A 到 E 分级。A 桌坐满了橄榄球运动员和啦啦队长等等。E 桌坐的是有轻度唐氏综合症的孩子，用当时的语言我们称之为\u0026quot;智障\u0026quot;。\n我们坐在 D 桌，这是在不显得身体有异常的情况下能达到的最低级别。我们把自己评为 D 并不是特别坦诚。要说别的就需要故意撒谎了。学校里的每个人都确切地知道其他每个人的受欢迎程度，包括我们。\n我在高中期间的人气逐渐上升。青春期终于到来；我成为一名不错的足球运动员；我创办了一份声名狼藉的地下报纸。所以我已经看到了受欢迎程度格局的大部分。\n我认识很多在学校时是书呆子的人，他们都讲述了同样的故事：聪明和成为书呆子之间有很强的相关性，而成为书呆子和受欢迎之间则有更强的负相关性。聪明似乎让你不受欢迎。\n为什么？对于现在还在学校的人来说，这似乎是个奇怪的问题。这个事实是如此压倒性的，以至于想象情况会有所不同似乎很奇怪。但确实可以。聪明不会让你在小学成为被排斥者。它在现实世界中也不会伤害你。据我所知，在大多数其他国家，这个问题也没有那么严重。但在典型的美国中学，聪明很可能让你的生活变得困难。为什么？这个谜题的关键是稍微重新表述一下问题。为什么聪明的孩子不让自己受欢迎？如果他们那么聪明，为什么他们不弄清楚受欢迎程度是如何运作的，然后击败这个系统，就像他们对待标准化考试一样？\n有一种论点说这是不可能的，聪明的孩子不受欢迎是因为其他孩子嫉妒他们的聪明，而他们做什么都无法让自己受欢迎。我希望如此。如果初中的其他孩子嫉妒我，他们很好地隐藏了这一点。无论如何，如果聪明真的是一种令人羡慕的品质，女孩们就会打破阵营。男孩子们嫉妒的人，女孩们喜欢。\n在我去的学校里，聪明根本不怎么重要。孩子们不崇拜它也不鄙视它。在其他条件相同的情况下，他们宁愿在平均水平的聪明一边而不是笨拙一边，但智力远不如，比如说，外表、魅力或运动能力重要。\n那么，如果智力本身不是受欢迎程度的因素，为什么聪明的孩子如此一贯地不受欢迎？答案，我认为，是他们真的不想受欢迎。\n如果当时有人告诉我这一点，我会嘲笑他。在学校不受欢迎让孩子们痛苦不堪，有些如此痛苦以至于他们自杀。告诉我说我不想受欢迎，就像告诉一个在沙漠中渴死的人说他不想要一杯水。我当然想受欢迎。\n但事实上我没有，不够想。有其他我更想要的东西：变得聪明。不仅仅是在学校表现好，虽然这算一些，而是设计漂亮的火箭，或者写得好，或者理解如何编程计算机。总的来说，是做伟大的事情。\n那时我从未试图分开我的欲望并相互权衡。如果我这样做了，我会看到变得更聪明更重要。如果有人给我机会成为学校最受欢迎的孩子，但只能以普通智力为代价（请原谅我），我不会接受的。\n尽管他们因不受欢迎而受苦，我认为很多书呆子不会。对他们来说，普通智力的想法是无法忍受的。但大多数孩子会接受这个交易。对他们中一半的人来说，这会是一个进步。即使是第80个百分位的人（假设，就像当时每个人似乎都认为的那样，智力是一个标量），谁不愿意下降30分来换取被每个人爱和钦佩呢？\n而这，我认为，就是问题的根源。书呆子侍奉两个主人。他们当然想受欢迎，但他们更想变得聪明。而受欢迎不是你可以在业余时间做的事情，尤其是在美国中学竞争激烈的环境中。阿尔贝蒂，可以说是文艺复兴时期人的原型，写道\u0026quot;没有一门艺术，无论多么微小，如果你想在其中出类拔萃，都需要全身心的投入。\u0026ldquo;我想知道世界上是否有人比美国学校孩子在受欢迎程度上更努力。海豹突击队和神经外科住院医师相比之下似乎是懒散的。他们偶尔休假；有些人甚至有爱好。美国青少年可能会在醒着的每一分钟都在努力受欢迎，一年365天。\n我并不是建议他们有意识地这样做。他们中的一些人真的是小马基雅维利主义者，但我在这里真正意思是青少年总是在职，作为顺从者。\n例如，青少年非常注重衣服。他们没有意识地为了受欢迎而穿衣。他们穿得好看。但是给谁看？给其他孩子。其他孩子的意见成为他们对正确的定义，不仅是对衣服，而且对他们所做的一切，一直到他们走路的方式。因此，他们为把事情做\u0026quot;对\u0026quot;所做的每一项努力，无论是有意识的还是无意识的，都是更受欢迎的努力。\n书呆子没有意识到这一点。他们没有意识到受欢迎需要努力。一般来说，某些非常苛刻领域之外的人没有意识到成功在多大程度上取决于持续（虽然通常是无意识的）努力。例如，大多数人似乎把绘画能力视为某种天生的品质，就像个子高一样。事实上，大多数\u0026quot;会画画\u0026quot;的人喜欢画画，并且花了很多时间这样做；这就是他们擅长它的原因。同样，受欢迎不仅仅是 …"
  },{
    "title": "为什么创业中心有效",
    "url": "/paul_graham/essays_zh/hubs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么创业中心有效 想要创业？获得Y Combinator的投资。\n2011年10月\n如果你按人口排序查看美国城市名单，每 capita 的成功创业公司数量相差几个数量级。不知何故，大多数地方似乎都被喷洒了创业杀虫剂。\n我对这个问题的思考有很多年。我可以看出，普通城镇就像创业野心的蟑螂旅馆：聪明、有雄心的人进去，但没有创业公司出来。但我从来没能弄清楚旅馆内部到底发生了什么——到底是什么在杀死所有潜在的创业公司。[1]\n几周前，我终于想通了。我把问题框错了。问题不是大多数城镇杀死创业公司。而是死亡是创业公司的默认状态，大多数城镇不会拯救它们。与其认为大多数地方被喷洒了创业杀虫剂，不如更准确地认为所有创业公司都被毒药毒害了，少数地方被喷洒了解药。\n其他地方的创业公司只是在做创业公司自然做的事情：失败。真正的问题是，像硅谷这样的地方是什么在拯救创业公司？[2]\n环境 我认为解药有两个组成部分：身处一个创业公司很酷的地方，以及与能帮助你的人偶然相遇。而驱动这两者的都是你周围的创业公司数量。\n第一个组成部分在创业公司生命的第一阶段特别有帮助，那时你从仅仅对创办公司感兴趣到真正去做。创办创业公司是一个相当大的飞跃。这是一件不寻常的事情。但在硅谷，这似乎很正常。[3]\n在大多数地方，如果你创办创业公司，人们会把你当作失业者对待。硅谷的人不会仅仅因为你创办公司就自动印象深刻，但他们会关注。任何在这里呆了足够时间的人都知道不要默认持怀疑态度，无论你看起来多么没有经验，或者你的想法听起来多么没有前途，因为他们都见过没有经验、想法听起来没有前途的创始人在几年后成为亿万富翁。\n周围有人关心你在做什么是一种非常强大的力量。即使是最有意志的人也会受其影响。在我们创办Y Combinator大约一年后，我对一家知名风险投资公司的合作伙伴说了一些话，这给了他（错误的）印象，认为我正在考虑创办另一家创业公司。他回应得如此热切，以至于大约半秒钟我发现自己正在考虑这样做。\n在大多数其他城市，创办创业公司的远景似乎不真实。在硅谷，这不仅是真实的，而且是时尚的。这无疑导致许多不应该创办创业公司的人去创办了。但我认为这没关系。很少有人适合经营创业公司，而且很难提前预测哪些是（我从试图预测的行业中深知这一点），所以很多不应该创办创业公司的人创办创业公司可能是最佳状态。只要你处于生命中的一个阶段，能够承受失败的风险，找出你是否适合经营创业公司的最好方法就是尝试。\n机遇 解药的第二个组成部分是与能帮助你的人偶然相遇。这种力量在两个阶段都起作用：既包括从想创办创业公司到实际创办的过渡，也包括从创办公司到成功的过渡。偶然相遇的力量比周围人关心创业公司变化更大，后者像一种影响每个人的背景辐射，但在其最强时，它要强大得多。\n偶然相遇产生奇迹来补偿创业公司特有的灾难。在硅谷，可怕的事情不断发生在创业公司身上，就像在其他地方的创业公司一样。硅谷的创业公司更有可能成功的原因是，伟大的事情也发生在它们身上。在硅谷，闪电有一个符号位。\n例如，你创办了一个针对大学生的网站，决定搬到帕洛阿尔托过一个夏天在那里工作。然后在帕洛阿尔托的一个随机的郊区街道上，你偶然遇到了肖恩·帕克，他非常了解这个领域，因为他自己创办了一家类似的创业公司，而且他也认识所有投资者。而且，他对2004年的创始人保留公司控制权有先进的看法。\n你无法确切地说奇迹会是什么，或者甚至肯定会有一个奇迹发生。最多只能说：如果你在创业中心，意想不到的好事情可能会发生在你身上，特别是如果你应得的话。\n我敢打赌，即使是我们资助的创业公司也是如此。即使我们努力为他们有目的地制造事情发生，硅谷有帮助的偶然相遇的频率如此之高，这仍然是我们能提供的显著增量。\n偶然相遇的作用类似于放松在产生想法中的作用。大多数人都有这样的经历：努力解决某个问题，无法解决，放弃去睡觉，然后在早上的淋浴中想到答案。让答案出现的是让你的思绪稍微漂移——从而从你前一晚一直在追求的错误路径漂移到旁边正确的路径上。\n偶然相遇让你的相识关系漂移，就像淋浴让你的思绪漂移一样。两种情况下的关键都是它们漂移的程度恰到好处。拉里·佩奇和谢尔盖·布林之间的会面是一个好例子。他们让他们的相识关系漂移，但只是稍微漂移；他们都在与有很多共同点的人会面。\n对于拉里·佩奇来说，解药最重要的组成部分是谢尔盖·布林，反之亦然。解药是人。使硅谷有效的不是它的物理基础设施，不是天气，也不是任何类似的东西。那些帮助它开始，但现在反应是自我维持的，驱动它的是人。\n许多观察家注意到，创业中心最显著的特点之一是人们互相帮助的程度，没有任何期望得到回报。我不确定为什么会这样。也许是因为创业公司不像大多数类型的企业那样是零和游戏；它们很少被竞争对手杀死。也许是因为这么多创业公司创始人有科学背景，在科学中鼓励合作。\nY C的大部分功能是加速这个过程。我们是硅谷中的一个硅谷，在那里，从事创业公司的人员密度和他们互相帮助的意愿都被人为地放大了。\n数量 解药的两个组成部分——鼓励创业公司的环境，以及与能帮助你的人偶然相遇——都是由同样的潜在原因驱动的：你周围的创业公司数量。要创建一个创业中心，你需要很多对创业感兴趣的人。\n有三个原因。第一个，很明显，是如果你没有足够的密度，偶然相遇就不会发生。[4] 第二个是不同的创业公司需要如此不同的东西，所以你需要很多人来为每个创业公司提供它们最需要的东西。2004年的肖恩·帕克正是Facebook所需要的。另一个创业公司可能需要一个数据库专家，或者一个在电影行业有人脉的人。\n顺便说一下，这就是我们资助这么多公司的原因之一。社区越大，其中包含拥有你最需要的那个人的人的机会就越大。\n你需要很多人来创建创业中心的第三个原因是，一旦你有足够多的人对同一个问题感兴趣，他们就开始设定社会规范。而当周围的气氛鼓励你做本来似乎过于雄心勃勃的事情时，这是一件特别有价值的事情。在大多数地方，气氛把你拉向平均值。\n几天前我飞进湾区。每次飞越硅谷时我都会注意到这一点：不知何故你能感觉到有什么事情正在发生。显然，你可以从地方看起来多么好看出繁荣。但繁荣有不同的种类。硅谷看起来不像波士顿，不像纽约，不像洛杉矶，不像华盛顿特区。我试图想用一个词来描述硅谷辐射的感觉，我想到的词是乐观主义。\n注释 [1] 我并不是说在创业公司很少的城市不可能成功，只是更难。如果你足够擅长产生自己的士气，你可以在没有外部鼓励的情况下生存。Wufoo基于坦帕，他们成功了。但Wufoo的人是异常自律的。\n[2] 顺便说一句，这种现象不仅限于创业公司。大多数不寻常的雄心都会失败，除非拥有它们的人设法找到正确类型的社区。\n[3] 创办公司很常见，但创办创业公司很少见。我在其他地方谈论过这两者之间的区别，但本质上创业公司是一种为规模而设计的新业务。大多数新业务是服务业务，除了罕见情况外，这些业务不会扩展。\n[4] 当我写这篇文章时，我见证了硅谷创业公司人员密度的证据。杰西卡和我骑自行车去帕洛阿尔托的大学大道，在极好的Oren\u0026rsquo;s Hummus吃午饭。当我们走进去时，我们遇到查理·齐弗坐在门附近。塞琳娜·托巴卡瓦拉在出去时停下来打招呼。然后乔什·威尔逊进来取外卖订单。午饭后我们去吃冷冻酸奶。在路上我们遇到了拉杰特·苏里。当我们到达酸奶店时，我们发现戴夫·沈在那里，当我们走出去时，我们遇到了尤里·萨加洛夫。我们和他走了一个街区左右，然后遇到了穆扎米尔·扎维里，然后又走了一个街区后我们遇到了艾丁·森库特。这是帕洛阿尔托的日常生活。我没有试图遇见人；我只是在吃午饭。而且我敢肯定，我看到的每个我认识的创业公司或投资者，还有5个我不认识的。如果罗恩·康威和我们在一起，他会遇到30个他认识的人。\n感谢山姆·奥特曼、保罗·布赫海特、杰西卡·利文斯顿和哈吉·塔加阅读本文草稿。\n",
    "description": "",
    "tags": ["创业中心","硅谷","企业家精神","生态系统","创新","Y Combinator","社区"],
    "categories": [],
    "content": "→ English Version\n为什么创业中心有效 想要创业？获得Y Combinator的投资。\n2011年10月\n如果你按人口排序查看美国城市名单，每 capita 的成功创业公司数量相差几个数量级。不知何故，大多数地方似乎都被喷洒了创业杀虫剂。\n我对这个问题的思考有很多年。我可以看出，普通城镇就像创业野心的蟑螂旅馆：聪明、有雄心的人进去，但没有创业公司出来。但我从来没能弄清楚旅馆内部到底发生了什么——到底是什么在杀死所有潜在的创业公司。[1]\n几周前，我终于想通了。我把问题框错了。问题不是大多数城镇杀死创业公司。而是死亡是创业公司的默认状态，大多数城镇不会拯救它们。与其认为大多数地方被喷洒了创业杀虫剂，不如更准确地认为所有创业公司都被毒药毒害了，少数地方被喷洒了解药。\n其他地方的创业公司只是在做创业公司自然做的事情：失败。真正的问题是，像硅谷这样的地方是什么在拯救创业公司？[2]\n环境 我认为解药有两个组成部分：身处一个创业公司很酷的地方，以及与能帮助你的人偶然相遇。而驱动这两者的都是你周围的创业公司数量。\n第一个组成部分在创业公司生命的第一阶段特别有帮助，那时你从仅仅对创办公司感兴趣到真正去做。创办创业公司是一个相当大的飞跃。这是一件不寻常的事情。但在硅谷，这似乎很正常。[3]\n在大多数地方，如果你创办创业公司，人们会把你当作失业者对待。硅谷的人不会仅仅因为你创办公司就自动印象深刻，但他们会关注。任何在这里呆了足够时间的人都知道不要默认持怀疑态度，无论你看起来多么没有经验，或者你的想法听起来多么没有前途，因为他们都见过没有经验、想法听起来没有前途的创始人在几年后成为亿万富翁。\n周围有人关心你在做什么是一种非常强大的力量。即使是最有意志的人也会受其影响。在我们创办Y Combinator大约一年后，我对一家知名风险投资公司的合作伙伴说了一些话，这给了他（错误的）印象，认为我正在考虑创办另一家创业公司。他回应得如此热切，以至于大约半秒钟我发现自己正在考虑这样做。\n在大多数其他城市，创办创业公司的远景似乎不真实。在硅谷，这不仅是真实的，而且是时尚的。这无疑导致许多不应该创办创业公司的人去创办了。但我认为这没关系。很少有人适合经营创业公司，而且很难提前预测哪些是（我从试图预测的行业中深知这一点），所以很多不应该创办创业公司的人创办创业公司可能是最佳状态。只要你处于生命中的一个阶段，能够承受失败的风险，找出你是否适合经营创业公司的最好方法就是尝试。\n机遇 解药的第二个组成部分是与能帮助你的人偶然相遇。这种力量在两个阶段都起作用：既包括从想创办创业公司到实际创办的过渡，也包括从创办公司到成功的过渡。偶然相遇的力量比周围人关心创业公司变化更大，后者像一种影响每个人的背景辐射，但在其最强时，它要强大得多。\n偶然相遇产生奇迹来补偿创业公司特有的灾难。在硅谷，可怕的事情不断发生在创业公司身上，就像在其他地方的创业公司一样。硅谷的创业公司更有可能成功的原因是，伟大的事情也发生在它们身上。在硅谷，闪电有一个符号位。\n例如，你创办了一个针对大学生的网站，决定搬到帕洛阿尔托过一个夏天在那里工作。然后在帕洛阿尔托的一个随机的郊区街道上，你偶然遇到了肖恩·帕克，他非常了解这个领域，因为他自己创办了一家类似的创业公司，而且他也认识所有投资者。而且，他对2004年的创始人保留公司控制权有先进的看法。\n你无法确切地说奇迹会是什么，或者甚至肯定会有一个奇迹发生。最多只能说：如果你在创业中心，意想不到的好事情可能会发生在你身上，特别是如果你应得的话。\n我敢打赌，即使是我们资助的创业公司也是如此。即使我们努力为他们有目的地制造事情发生，硅谷有帮助的偶然相遇的频率如此之高，这仍然是我们能提供的显著增量。\n偶然相遇的作用类似于放松在产生想法中的作用。大多数人都有这样的经历：努力解决某个问题，无法解决，放弃去睡觉，然后在早上的淋浴中想到答案。让答案出现的是让你的思绪稍微漂移——从而从你前一晚一直在追求的错误路径漂移到旁边正确的路径上。\n偶然相遇让你的相识关系漂移，就像淋浴让你的思绪漂移一样。两种情况下的关键都是它们漂移的程度恰到好处。拉里·佩奇和谢尔盖·布林之间的会面是一个好例子。他们让他们的相识关系漂移，但只是稍微漂移；他们都在与有很多共同点的人会面。\n对于拉里·佩奇来说，解药最重要的组成部分是谢尔盖·布林，反之亦然。解药是人。使硅谷有效的不是它的物理基础设施，不是天气，也不是任何类似的东西。那些帮助它开始，但现在反应是自我维持的，驱动它的是人。\n许多观察家注意到，创业中心最显著的特点之一是人们互相帮助的程度，没有任何期望得到回报。我不确定为什么会这样。也许是因为创业公司不像大多数类型的企业那样是零和游戏；它们很少被竞争对手杀死。也许是因为这么多创业公司创始人有 …"
  },{
    "title": "为什么创业公司在美国聚集",
    "url": "/paul_graham/essays_zh/america/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么创业公司在美国聚集 2006年5月\n（本文源自于Xtech会议的主题演讲。）\n创业公司会聚集在某些地方。硅谷和波士顿有很多，而芝加哥和迈阿密则很少。一个想要创业公司的国家可能也需要复制形成这些聚集地的任何条件。\n我曾声称秘诀是有一所优秀的大学靠近聪明人喜欢的城镇。如果你在美国建立起这些条件，创业公司将像水滴凝结在冰冷的金属上一样不可避免地形成。但当我考虑在另一个国家复制硅谷需要什么时，很明显美国是一个特别潮湿的环境。创业公司在这里更容易形成。\n在另一个国家尝试创建硅谷绝不是毫无希望的。不仅有与硅谷匹敌的空间，还有超越它的空间。但如果你想做到这一点，你必须理解创业公司在美国获得的优势。\n1. 美国允许移民。 例如，我怀疑是否可能在日本复制硅谷，因为硅谷最显著的特征之一就是移民。那里有一半的人说话带有口音。而日本人不喜欢移民。当考虑如何创建日本硅谷时，我怀疑他们无意识地将问题框定为如何创建一个只由日本人组成的硅谷。这种框定问题的方式几乎注定失败。\n硅谷必须成为聪明人和雄心勃勃的人的圣地，如果你不让人进入，你就不能拥有圣地。\n当然，说美国比日本更开放移民并没有什么了不起的。移民政策是一个竞争对手可能做得更好的领域。\n2. 美国是一个富裕的国家。 我可以看到有一天印度会产生硅谷的竞争对手。显然他们有合适的人才：你可以从当前硅谷中的印度人数量看出来。印度本身的问题在于它仍然太贫穷。\n在贫穷国家，我们认为理所当然的东西缺失了。我一个访问印度的朋友在火车站的台阶上扭伤了脚踝。当她转身看发生了什么事时，她发现台阶的高度都不同。在工业化国家，我们一辈子都在走台阶，却从未想过这个问题，因为有一种基础设施可以防止建造这样的楼梯。\n美国从未像现在某些国家那样贫穷。美国城市的街道上从未有过成群的乞丐。所以我们没有关于从成群乞丐阶段发展到硅谷阶段需要什么的数据。你能同时拥有两者，还是必须在拥有硅谷之前有某种基线繁荣？\n我怀疑经济发展存在某种速度限制。经济是由人组成的，而态度每代只能改变一定数量。[1]\n3. 美国还不是警察国家。 我可以看到另一个想要拥有硅谷的国家是中国。但我怀疑他们也还不能做到。中国似乎仍然是一个警察国家，尽管现在的统治者相比前任似乎开明，但即使是开明的专制也只能让你在经济强国道路上走一部分。\n它可以为你建立工厂来制造其他地方设计的东西。但是，它能为你带来设计师吗？想象力能在人们不能批评政府的地方蓬勃发展吗？想象力意味着拥有奇特的想法，而在技术上拥有奇特想法很难不在政治上也拥有奇特想法。而且，许多技术思想确实具有政治含义。所以，如果你压制异议，反压力将传播到技术领域。[2]\n新加坡将面临类似的问题。新加坡似乎非常意识到鼓励创业公司的重要性。但是，虽然积极的政府干预可能使港口高效运行，但它不能诱使创业公司出现。一个禁止嚼口香糖的国家距离创建旧金山还有很长的路要走。\n你需要旧金山吗？是否可能存在一条通过服从和合作而不是个人主义走向创新的替代路线？有可能，但我打赌不会。大多数富有想象力的人似乎都分享某种刺人的独立性，无论何时何地。你可以在第欧根尼告诉亚历山大离开他的光和两千年后费曼在洛斯阿拉莫斯撬保险箱中看到这一点。[3] 富有想象力的人不想追随或领导。当每个人都能做自己想做的事情时，他们最有生产力。\n具有讽刺意味的是，在所有富裕国家中，美国最近失去了最多的公民自由。但我还不太担心。我希望现任政府下台后，美国文化自然的开放性会重新确立。\n4. 美国大学更好。 你需要一所优秀的大学来孕育硅谷，到目前为止，美国以外还很少。我问了几个美国计算机科学教授，他们最钦佩欧洲的哪些大学，他们基本上都说\u0026quot;剑桥\u0026quot;，然后停顿了很久，试图想出其他的。似乎没有多少其他地方的大学能与美国最好的大学相比，至少在技术方面。\n在某些国家，这是 deliberate 政策的结果。德国和荷兰政府，也许是出于对精英主义的恐惧，试图确保所有大学在质量上大致相等。缺点是没有一个特别好的。最好的教授被分散了，而不是像在美国那样集中。这可能使他们效率较低，因为他们没有好同事来激励他们。这也意味着没有一所大学足够好到可以作为圣地，吸引外国人才并导致创业公司在其周围形成。\n德国的情况很奇怪。德国人发明了现代大学，直到1930年代，他们的大学是世界上最好的。现在他们没有一所突出的大学。当我思考这个问题时，我发现自己在想：\u0026ldquo;我能理解德国大学在1930年代排斥犹太人后是如何衰退的。但它们现在肯定应该恢复过来了。\u0026rdquo; 然后我意识到：也许不会。德国剩下的犹太人很少，我认识的大多数犹太人都不想搬到那里。如果你拿任何一所伟大的美国大学并移除犹太人，你会有一些相当大的空白。所以也许在德国尝试建立硅谷是毫无希望的，因为你无法建立你需要作为种子的大学水平。[4]\n美国大学自然竞争，因为许多是私立的。要复制美国大学的质量，你可能也必须复制这一点。如果大学由中央政府控制，互相拉扯会将它们都拉向平均水平：新的X研究所最终会落在一个有影响力政治家所在地区的大学，而不是它应该在的地方。\n5. 在美国你可以解雇员工。 我认为在欧洲创建创业公司的最大障碍之一是对就业的态度。众所周知，严格的劳动法伤害了每家公司，但对创业公司尤其如此，因为创业公司最少时间可以浪费在官僚麻烦上。\n解雇员工的困难对创业公司来说是一个特殊问题，因为他们没有冗余。每个人都必须做好自己的工作。\n但问题不仅仅是某个创业公司可能在解雇他们需要的人方面遇到问题。跨行业和国家，表现和就业保障之间存在强烈的负相关。演员和导演在每部电影结束时都会被解雇，所以他们每次都必须交付产品。初级教授在几年后默认被解雇，除非大学选择授予他们终身教职。职业运动员知道如果他们只是打了几场坏比赛就会被拉下场。在规模的另一端（至少在美国）是汽车工人、纽约市教师和公务员，他们都几乎不可能被解雇。趋势如此明显，你必须故意视而不见才能看不到。\n表现不是一切，你会说？那么，汽车工人、教师和公务员比演员、教授和职业运动员更快乐吗？\n欧洲公众舆论显然会容忍在他们真正关心表现的行业中被解雇的人。不幸的是，他们唯一足够关心的行业到目前为止是足球。但这至少是一个先例。\n6. 在美国，工作与就业的关联较少。 在欧洲和日本等更传统的地方，问题比就业法更深。更危险的是它们反映的态度：雇员是一种仆人，雇主有责任保护他们。在美国过去也是如此。在1970年，你仍然应该在大公司找到工作，理想情况下你会为它工作一辈子。作为回报，公司会照顾你：他们会努力不解雇你，支付你的医疗费用，并在你年老时支持你。\n就业逐渐摆脱了这种家长式的色彩，变成了一种简单的经济交换。但新模式的重要性不仅仅是它使创业公司更容易成长。更重要的是，我认为它使人们更容易创办创业公司。\n即使在美国，大多数大学毕业的孩子仍然认为他们应该找工作，好像你不能成为某人的雇员就无法富有成效一样。但你越少将工作与就业等同，创办创业公司就越容易。当你将职业视为一系列不同类型的工作，而不是对单个雇主的终身服务时，创办自己公司的风险就更小，因为你只替换一个部分，而不是丢弃整个事情。\n旧观念如此强大，即使最成功的创业创始人也不得不与之斗争。苹果公司成立一年后，史蒂夫·沃兹尼亚克仍然没有离开惠普。他仍然计划在那里工作一辈子。当乔布斯找到人为苹果提供严肃的风险投资，条件是沃兹辞职时，他最初拒绝了，辩称他在惠普工作时设计了Apple I和Apple II，没有理由他不能继续。\n7. 美国不太挑剔。 如果有任何监管企业的法律，你可以假设初创创业公司会违反大部分法律，因为他们不知道法律是什么，也没有时间找出答案。\n例如，美国的许多创业公司开始于实际上合法经营企业的地方。惠普、苹果和谷歌都是在车库里运营的。更多的创业公司，包括我们的，最初是在公寓里运营的。如果反对这些事情的法律被真正执行，大多数创业公司就不会发生。\n在更挑剔的国家，这可能是一个问题。如果休利特和帕卡德试图在瑞士的车库里经营一家电子公司，隔壁的老太太会向市政当局举报他们。\n但其他国家最糟糕的问题可能仅仅是启动公司所需的努力。我的一个朋友在90年代初在德国开了一家公司，震惊地发现，在许多其他规定中，你需要2万美元的资本才能注册。这就是为什么我没有在Apfel笔记本电脑上输入这个的原因。乔布斯和沃兹尼亚克在一家由出售大众巴士和惠普计算器资助的公司里无法拿出那么多钱。我们也不能启动Viaweb。[5]\n给那些想要鼓励创业公司的政府一个提示：阅读现有创业公司的故事，然后尝试模拟在你的国家会发生什么。当你遇到会杀死苹果公司的事情时，将其剪除。\n创业公司是边缘的。它们由穷人和 timid 的人启动；它们在边缘的空间和业余时间开始；它们由本应该做其他事情的人启动；虽然是企业，但它们的创始人通常对企业一无所知。年轻的创业公司是脆弱的。一个严重修剪边缘的社会会将它们全部杀死。\n8. 美国有庞大的国内市场。 在开始阶段支持创业公司的是推出他们初始产品的前景。成功的公司因此使第一个版本尽可能简单。在美国，他们通常开始时只为当地市场制造东西。\n这在美国有效，因为当地市场有3亿人。在瑞典就不会那么有效。在小国家，创业公司有更艰巨的任务：他们必须从一开始就进行国际销售。\n欧盟的部分目的是模拟单一的、庞大的国内市场。问题是居民仍然说许多不同的语言。所以瑞典的软件创业公司相对于美国的创业公司仍然处于不利地位，因为他们从一开始就必须处理国际化问题。值得注意的是，欧洲最近最著名的创业公司Skype，从事的是一个本质上国际化的领域。\n然而，无论好坏，看起来欧洲将在几十年内说一种单一的语言。当我在1990年在意大利学习时，很少有意大利人说英语。现在所有受过教育的人似乎都应该说英语——而欧洲人不喜欢显得没有受过教育。这大概是一个禁忌话题，但如果目前的趋势继续下去，法语和德语最终会走爱尔兰语和卢森堡语的路：它们会在家里和古怪的民族主义者中说。\n9. 美国有风险投资。 在美国创业公司更容易启动，因为资金更容易获得。现在美国以外有一些风险投资公司，但创业资金不仅来自风险投资公司。一个更重要的来源，因为它更个人化并且在过程中更早出现，是个人天使投资者的资金。如果谷歌没有首先从安迪·贝托尔斯海姆那里筹集十万美元，他们可能永远无法达到可以从风险投资基金筹集数百万美元的程度。而他可以帮助他们，因为他是太阳公司的创始人之一。这个模式在创业中心不断重复。正是这个模式使它们成为创业中心。\n",
    "description": "",
    "tags": ["创业","美国","硅谷","创新","企业家精神"],
    "categories": [],
    "content": "→ English Version\n为什么创业公司在美国聚集 2006年5月\n（本文源自于Xtech会议的主题演讲。）\n创业公司会聚集在某些地方。硅谷和波士顿有很多，而芝加哥和迈阿密则很少。一个想要创业公司的国家可能也需要复制形成这些聚集地的任何条件。\n我曾声称秘诀是有一所优秀的大学靠近聪明人喜欢的城镇。如果你在美国建立起这些条件，创业公司将像水滴凝结在冰冷的金属上一样不可避免地形成。但当我考虑在另一个国家复制硅谷需要什么时，很明显美国是一个特别潮湿的环境。创业公司在这里更容易形成。\n在另一个国家尝试创建硅谷绝不是毫无希望的。不仅有与硅谷匹敌的空间，还有超越它的空间。但如果你想做到这一点，你必须理解创业公司在美国获得的优势。\n1. 美国允许移民。 例如，我怀疑是否可能在日本复制硅谷，因为硅谷最显著的特征之一就是移民。那里有一半的人说话带有口音。而日本人不喜欢移民。当考虑如何创建日本硅谷时，我怀疑他们无意识地将问题框定为如何创建一个只由日本人组成的硅谷。这种框定问题的方式几乎注定失败。\n硅谷必须成为聪明人和雄心勃勃的人的圣地，如果你不让人进入，你就不能拥有圣地。\n当然，说美国比日本更开放移民并没有什么了不起的。移民政策是一个竞争对手可能做得更好的领域。\n2. 美国是一个富裕的国家。 我可以看到有一天印度会产生硅谷的竞争对手。显然他们有合适的人才：你可以从当前硅谷中的印度人数量看出来。印度本身的问题在于它仍然太贫穷。\n在贫穷国家，我们认为理所当然的东西缺失了。我一个访问印度的朋友在火车站的台阶上扭伤了脚踝。当她转身看发生了什么事时，她发现台阶的高度都不同。在工业化国家，我们一辈子都在走台阶，却从未想过这个问题，因为有一种基础设施可以防止建造这样的楼梯。\n美国从未像现在某些国家那样贫穷。美国城市的街道上从未有过成群的乞丐。所以我们没有关于从成群乞丐阶段发展到硅谷阶段需要什么的数据。你能同时拥有两者，还是必须在拥有硅谷之前有某种基线繁荣？\n我怀疑经济发展存在某种速度限制。经济是由人组成的，而态度每代只能改变一定数量。[1]\n3. 美国还不是警察国家。 我可以看到另一个想要拥有硅谷的国家是中国。但我怀疑他们也还不能做到。中国似乎仍然是一个警察国家，尽管现在的统治者相比前任似乎开明，但即使是开明的专制也只能让你在经济强国道路上走一部分。\n它可以为你建立工厂来制造其他地方设计的东西。但是，它能为你带来设计师吗？想象力能在人们不能批评政府的地方蓬勃发展吗？想象力意味着拥有奇特的想法，而在技术上拥有奇特想法很难不在政治上也拥有奇特想法。而且，许多技术思想确实具有政治含义。所以，如果你压制异议，反压力将传播到技术领域。[2]\n新加坡将面临类似的问题。新加坡似乎非常意识到鼓励创业公司的重要性。但是，虽然积极的政府干预可能使港口高效运行，但它不能诱使创业公司出现。一个禁止嚼口香糖的国家距离创建旧金山还有很长的路要走。\n你需要旧金山吗？是否可能存在一条通过服从和合作而不是个人主义走向创新的替代路线？有可能，但我打赌不会。大多数富有想象力的人似乎都分享某种刺人的独立性，无论何时何地。你可以在第欧根尼告诉亚历山大离开他的光和两千年后费曼在洛斯阿拉莫斯撬保险箱中看到这一点。[3] 富有想象力的人不想追随或领导。当每个人都能做自己想做的事情时，他们最有生产力。\n具有讽刺意味的是，在所有富裕国家中，美国最近失去了最多的公民自由。但我还不太担心。我希望现任政府下台后，美国文化自然的开放性会重新确立。\n4. 美国大学更好。 你需要一所优秀的大学来孕育硅谷，到目前为止，美国以外还很少。我问了几个美国计算机科学教授，他们最钦佩欧洲的哪些大学，他们基本上都说\u0026quot;剑桥\u0026quot;，然后停顿了很久，试图想出其他的。似乎没有多少其他地方的大学能与美国最好的大学相比，至少在技术方面。\n在某些国家，这是 deliberate 政策的结果。德国和荷兰政府，也许是出于对精英主义的恐惧，试图确保所有大学在质量上大致相等。缺点是没有一个特别好的。最好的教授被分散了，而不是像在美国那样集中。这可能使他们效率较低，因为他们没有好同事来激励他们。这也意味着没有一所大学足够好到可以作为圣地，吸引外国人才并导致创业公司在其周围形成。\n德国的情况很奇怪。德国人发明了现代大学，直到1930年代，他们的大学是世界上最好的。现在他们没有一所突出的大学。当我思考这个问题时，我发现自己在想：\u0026ldquo;我能理解德国大学在1930年代排斥犹太人后是如何衰退的。但它们现在肯定应该恢复过来了。\u0026rdquo; 然后我意识到：也许不会。德国剩下的犹太人很少，我认识的大多数犹太人都不想搬到那里。如果你拿任何一所伟大的美国大学并移除犹太人，你会有一些相当大的空白。所以也许在德国尝试建立硅谷是毫无希望的，因为你无法建 …"
  },{
    "title": "为什么创始人友善是安全的",
    "url": "/paul_graham/essays_zh/safe/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么创始人友善是安全的 2015年8月\n我最近收到一位创始人的电子邮件，帮助我理解了一件重要的事情：为什么创业公司创始人友善是安全的。\n我从小对非常成功的商人有一个漫画式的想法（在漫画中总是男性）：一个五十多岁、贪婪、抽雪茄、拍桌子的人，通过行使权力获胜，而且对方式不太挑剔。正如我以前写过的，创业公司最让我惊讶的事情之一是，最成功的创始人中很少有人是这样的。也许其他行业的成功人士是这样；我不知道；但创业公司创始人不是。[1]\n我从经验上知道这一点，但我从来没有看到其中的数学原理，直到收到这位创始人的邮件。在邮件中，他说他担心自己心地太软，倾向于免费给予太多。他认为他可能需要\u0026quot;一点反社会人格的剂量\u0026quot;。\n我告诉他不要担心，只要他构建的东西足够好，能够通过口碑传播，他就会有一个超线性增长曲线。如果他不擅长从人们那里赚钱，最坏的情况下，这条曲线将是他可能拥有的某个小于1的常数倍数。但任何曲线的常数倍数都是完全相同的形状。Y轴上的数字更小，但曲线同样陡峭，当任何东西以成功创业公司的速度增长时，Y轴会自己解决。\n一些例子会让这更清楚。假设你的公司现在每月赚1000美元，你构建的东西非常棒，每周增长5%。两年后，你每月将赚约16万美元。\n现在假设你如此不贪婪，只从用户那里提取你可能得到的一半。这意味着两年后你每月将赚8万美元，而不是16万美元。你落后多少？赶上你本可能达到的位置需要多长时间？仅仅15周。两年后，不贪婪的创始人只比贪婪的创始人落后3.5个月。[2]\n如果你要优化一个数字，选择的是你的增长率。假设像以前一样，你只从用户那里提取你可能得到的一半，但你能够每周增长6%而不是5%。现在两年后你与贪婪的创始人相比如何？你已经领先了——每月21.4万美元对16万美元——并且迅速拉开距离。再过一年，你每月将赚440万美元，而贪婪的创始人赚200万美元。\n显然，一个贪婪会有帮助的情况是增长依赖于此。创业公司与众不同的是通常不依赖于此。创业公司通常通过制作如此棒的东西来获胜，以至于人们向朋友推荐它。而贪婪不仅无助于你做到这一点，可能还有害。[3]\n创业公司创始人可以安全友善的原因是，制作伟大的东西是复合的，而贪婪不是。\n所以如果你是创始人，这里有一个你可以与自己达成的协议，既能让你快乐，又能让你的公司成功。告诉自己，你可以像你希望的那样友善，只要你在增长率上努力工作以补偿。大多数成功的创业公司无意识地做出了这种权衡。也许如果你有意识地这样做，你会做得更好。\n注释 [1] 许多人认为成功的创业公司创始人是由金钱驱动的。事实上，最成功的创始人的秘密武器是他们不是。如果是的话，他们早就接受了每个快速增长的创业公司在上升过程中收到的收购要约。驱动最成功创始人的东西与驱动大多数制造东西的人相同：公司是他们的项目。\n[2] 事实上，由于2 ≈ 1.05 ^ 15，不贪婪的创始人总是比贪婪的创始人落后15周。\n[3] 可能擅长从客户身上榨取钱的另一个原因是，创业公司通常一开始就亏损，每个客户赚更多钱使得在初始资金耗尽前更容易达到盈利。虽然创业公司因耗尽初始资金然后无法筹集更多资金而死亡非常常见，但根本原因通常是增长缓慢或支出过度，而不是不足以从现有客户身上提取金钱的努力。\n感谢Sam Altman、Harj Taggar、Jessica Livingston和Geoff Ralston阅读本文草稿，并感谢Randall Bennett是这么好的人。\n",
    "description": "",
    "tags": ["创始人","友善","增长","创业公司","商业道德","成功"],
    "categories": [],
    "content": "→ English Version\n为什么创始人友善是安全的 2015年8月\n我最近收到一位创始人的电子邮件，帮助我理解了一件重要的事情：为什么创业公司创始人友善是安全的。\n我从小对非常成功的商人有一个漫画式的想法（在漫画中总是男性）：一个五十多岁、贪婪、抽雪茄、拍桌子的人，通过行使权力获胜，而且对方式不太挑剔。正如我以前写过的，创业公司最让我惊讶的事情之一是，最成功的创始人中很少有人是这样的。也许其他行业的成功人士是这样；我不知道；但创业公司创始人不是。[1]\n我从经验上知道这一点，但我从来没有看到其中的数学原理，直到收到这位创始人的邮件。在邮件中，他说他担心自己心地太软，倾向于免费给予太多。他认为他可能需要\u0026quot;一点反社会人格的剂量\u0026quot;。\n我告诉他不要担心，只要他构建的东西足够好，能够通过口碑传播，他就会有一个超线性增长曲线。如果他不擅长从人们那里赚钱，最坏的情况下，这条曲线将是他可能拥有的某个小于1的常数倍数。但任何曲线的常数倍数都是完全相同的形状。Y轴上的数字更小，但曲线同样陡峭，当任何东西以成功创业公司的速度增长时，Y轴会自己解决。\n一些例子会让这更清楚。假设你的公司现在每月赚1000美元，你构建的东西非常棒，每周增长5%。两年后，你每月将赚约16万美元。\n现在假设你如此不贪婪，只从用户那里提取你可能得到的一半。这意味着两年后你每月将赚8万美元，而不是16万美元。你落后多少？赶上你本可能达到的位置需要多长时间？仅仅15周。两年后，不贪婪的创始人只比贪婪的创始人落后3.5个月。[2]\n如果你要优化一个数字，选择的是你的增长率。假设像以前一样，你只从用户那里提取你可能得到的一半，但你能够每周增长6%而不是5%。现在两年后你与贪婪的创始人相比如何？你已经领先了——每月21.4万美元对16万美元——并且迅速拉开距离。再过一年，你每月将赚440万美元，而贪婪的创始人赚200万美元。\n显然，一个贪婪会有帮助的情况是增长依赖于此。创业公司与众不同的是通常不依赖于此。创业公司通常通过制作如此棒的东西来获胜，以至于人们向朋友推荐它。而贪婪不仅无助于你做到这一点，可能还有害。[3]\n创业公司创始人可以安全友善的原因是，制作伟大的东西是复合的，而贪婪不是。\n所以如果你是创始人，这里有一个你可以与自己达成的协议，既能让你快乐，又能让你的公司成功。告诉自己，你可以像你希望的那样友善，只要你在增长率上努力工作以补偿。大多数成功的创业公司无意识地做出了这种权衡。也许如果你有意识地这样做，你会做得更好。\n注释 [1] 许多人认为成功的创业公司创始人是由金钱驱动的。事实上，最成功的创始人的秘密武器是他们不是。如果是的话，他们早就接受了每个快速增长的创业公司在上升过程中收到的收购要约。驱动最成功创始人的东西与驱动大多数制造东西的人相同：公司是他们的项目。\n[2] 事实上，由于2 ≈ 1.05 ^ 15，不贪婪的创始人总是比贪婪的创始人落后15周。\n[3] 可能擅长从客户身上榨取钱的另一个原因是，创业公司通常一开始就亏损，每个客户赚更多钱使得在初始资金耗尽前更容易达到盈利。虽然创业公司因耗尽初始资金然后无法筹集更多资金而死亡非常常见，但根本原因通常是增长缓慢或支出过度，而不是不足以从现有客户身上提取金钱的努力。\n感谢Sam Altman、Harj Taggar、Jessica Livingston和Geoff Ralston阅读本文草稿，并感谢Randall Bennett是这么好的人。\n"
  },{
    "title": "为什么在经济衰退时期创业",
    "url": "/paul_graham/essays_zh/badeconomy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么在经济衰退时期创业 想要创业吗？获得Y Combinator的资助。\n2008年10月\n经济形势显然如此严峻，一些专家担心我们可能会迎来一个像七十年代中期那样糟糕的时期。当时微软和苹果公司成立。\n正如这些例子所示，经济衰退时期可能不是创业的坏时机。我并不是说这特别好。真相更无聊：经济状况其实并不那么重要。\n如果我们从资助这么多创业公司中学到了一件事，那就是它们的成功或失败取决于创始人的素质。经济当然有影响，但作为成功的预测因素，与创始人相比，它只是四舍五入的误差。\n这意味着重要的是你是谁，而不是你什么时候做。如果你是合适的人，即使在经济不好的时候你也会成功。如果你不是，好的经济也无法拯救你。那些认为\u0026quot;我最好现在不要创业，因为经济如此糟糕\u0026quot;的人，与在泡沫时期认为\u0026quot;我只需要创业，就会变得富有\u0026quot;的人犯了同样的错误。\n所以如果你想提高机会，你应该更多地考虑你能招募谁作为联合创始人，而不是经济状况。如果你担心公司生存的威胁，不要在新闻中寻找它们。照照镜子。\n但对于任何给定的创始人团队，在经济好转之前等待跳跃不是更明智吗？如果你要开餐厅，也许吧，但如果你从事技术工作，就不是了。技术的发展或多或少独立于股票市场。所以对于任何给定的想法，在经济不好时快速行动的回报比等待更高。微软的第一个产品是Altair的Basic解释器。这正是1975年世界所需要的，但如果盖茨和艾伦决定等几年，那就太晚了。\n当然，你现在有的想法不会是你最后一个。总是有新的想法。但如果你有一个特定的想法想要付诸行动，现在就行动。\n这并不意味着你可以忽视经济。客户和投资者都会感到拮据。客户感到拮据不一定是问题：你甚至可能从中受益，通过制造省钱的东西。创业公司通常让东西更便宜，所以在这方面，它们比大公司更有条件在衰退中繁荣。\n投资者更多是个问题。创业公司通常需要筹集一定数量的外部资金，投资者往往在经济不好时不愿意投资。他们不应该这样。每个人都知道你应该在时机不好时买入，在时机好时卖出。但当然，投资如此违反直觉的原因是，在股权市场中，好时机被定义为每个人都认为是买入的时候。你必须是一个逆向投资者才能正确，根据定义，只有少数投资者可以。\n所以就像1999年的投资者们互相踩踏试图投资糟糕的创业公司一样，2009年的投资者们大概也会不愿意投资好的创业公司。\n你必须适应这一点。但这没什么新鲜的：创业公司总是必须适应投资者的反复无常。在任何经济条件下问任何创始人是否认为投资者善变，看看他们做的表情。去年你必须准备好解释你的创业公司如何病毒式传播。明年你必须解释它如何能够抵御衰退。\n（这两者都是很好的状态。投资者犯的错误不是他们使用的标准，而是他们总是倾向于关注一个而排除其他的。）\n幸运的是，让创业公司抵御衰退的方法就是做你无论如何都应该做的事情：尽可能便宜地运营它。多年来我一直告诉创始人，成功的最可靠途径成为企业界的蟑螂。创业公司死亡的直接原因总是资金耗尽。所以你的公司运营成本越低，就越难杀死它。幸运的是，运行创业公司的成本已经变得非常便宜。衰退会让它更便宜。\n如果真的来了核冬天，做蟑螂可能比保住工作更安全。如果客户不再负担得起你，他们可能会一个个离开，但你不会一下子失去他们；市场不会\u0026quot;减少人手\u0026quot;。\n如果你辞职创业失败了，找不到另一份工作怎么办？如果你从事销售或市场营销，这可能是个问题。在这些领域，在经济不好时找新工作可能需要几个月。但黑客似乎更具流动性。好的黑客总能找到某种工作。可能不是你梦想的工作，但你不会饿死。\n坏时机的另一个优势是竞争更少。技术列车定期离站。如果其他人都在角落里发抖，你可能会有一整节车厢给自己。\n你也是投资者。作为创始人，你用工作购买股票：拉里和谢尔盖如此富有，与其说是他们做了价值数百亿美元的工作，不如说他们是谷歌的第一批投资者。像任何投资者一样，你应该在时机不好时买入。\n几段前当我谈到投资者不愿意在坏市场向创业公司投资时，即使那时他们理性上应该最愿意购买，你是否点头同意，认为\u0026quot;愚蠢的投资者\u0026quot;？嗯，创始人也好不到哪里去。时机不好时，黑客去读研究生。毫无疑问这次也会发生。事实上，让前一段话成真的是大多数读者不会相信它——至少不会到付诸行动的程度。\n所以也许经济衰退是创业的好时机。很难说像缺乏竞争这样的优势是否胜过像不情愿的投资者这样的劣势。但无论如何这不重要。重要的是人。对于给定的人在给定的技术上工作的时候总是现在。\n",
    "description": "",
    "tags": ["创业","经济","衰退","创始人","投资","技术"],
    "categories": [],
    "content": "→ English Version\n为什么在经济衰退时期创业 想要创业吗？获得Y Combinator的资助。\n2008年10月\n经济形势显然如此严峻，一些专家担心我们可能会迎来一个像七十年代中期那样糟糕的时期。当时微软和苹果公司成立。\n正如这些例子所示，经济衰退时期可能不是创业的坏时机。我并不是说这特别好。真相更无聊：经济状况其实并不那么重要。\n如果我们从资助这么多创业公司中学到了一件事，那就是它们的成功或失败取决于创始人的素质。经济当然有影响，但作为成功的预测因素，与创始人相比，它只是四舍五入的误差。\n这意味着重要的是你是谁，而不是你什么时候做。如果你是合适的人，即使在经济不好的时候你也会成功。如果你不是，好的经济也无法拯救你。那些认为\u0026quot;我最好现在不要创业，因为经济如此糟糕\u0026quot;的人，与在泡沫时期认为\u0026quot;我只需要创业，就会变得富有\u0026quot;的人犯了同样的错误。\n所以如果你想提高机会，你应该更多地考虑你能招募谁作为联合创始人，而不是经济状况。如果你担心公司生存的威胁，不要在新闻中寻找它们。照照镜子。\n但对于任何给定的创始人团队，在经济好转之前等待跳跃不是更明智吗？如果你要开餐厅，也许吧，但如果你从事技术工作，就不是了。技术的发展或多或少独立于股票市场。所以对于任何给定的想法，在经济不好时快速行动的回报比等待更高。微软的第一个产品是Altair的Basic解释器。这正是1975年世界所需要的，但如果盖茨和艾伦决定等几年，那就太晚了。\n当然，你现在有的想法不会是你最后一个。总是有新的想法。但如果你有一个特定的想法想要付诸行动，现在就行动。\n这并不意味着你可以忽视经济。客户和投资者都会感到拮据。客户感到拮据不一定是问题：你甚至可能从中受益，通过制造省钱的东西。创业公司通常让东西更便宜，所以在这方面，它们比大公司更有条件在衰退中繁荣。\n投资者更多是个问题。创业公司通常需要筹集一定数量的外部资金，投资者往往在经济不好时不愿意投资。他们不应该这样。每个人都知道你应该在时机不好时买入，在时机好时卖出。但当然，投资如此违反直觉的原因是，在股权市场中，好时机被定义为每个人都认为是买入的时候。你必须是一个逆向投资者才能正确，根据定义，只有少数投资者可以。\n所以就像1999年的投资者们互相踩踏试图投资糟糕的创业公司一样，2009年的投资者们大概也会不愿意投资好的创业公司。\n你必须适应这一点。但这没什么新鲜的：创业公司总是必须适应投资者的反复无常。在任何经济条件下问任何创始人是否认为投资者善变，看看他们做的表情。去年你必须准备好解释你的创业公司如何病毒式传播。明年你必须解释它如何能够抵御衰退。\n（这两者都是很好的状态。投资者犯的错误不是他们使用的标准，而是他们总是倾向于关注一个而排除其他的。）\n幸运的是，让创业公司抵御衰退的方法就是做你无论如何都应该做的事情：尽可能便宜地运营它。多年来我一直告诉创始人，成功的最可靠途径成为企业界的蟑螂。创业公司死亡的直接原因总是资金耗尽。所以你的公司运营成本越低，就越难杀死它。幸运的是，运行创业公司的成本已经变得非常便宜。衰退会让它更便宜。\n如果真的来了核冬天，做蟑螂可能比保住工作更安全。如果客户不再负担得起你，他们可能会一个个离开，但你不会一下子失去他们；市场不会\u0026quot;减少人手\u0026quot;。\n如果你辞职创业失败了，找不到另一份工作怎么办？如果你从事销售或市场营销，这可能是个问题。在这些领域，在经济不好时找新工作可能需要几个月。但黑客似乎更具流动性。好的黑客总能找到某种工作。可能不是你梦想的工作，但你不会饿死。\n坏时机的另一个优势是竞争更少。技术列车定期离站。如果其他人都在角落里发抖，你可能会有一整节车厢给自己。\n你也是投资者。作为创始人，你用工作购买股票：拉里和谢尔盖如此富有，与其说是他们做了价值数百亿美元的工作，不如说他们是谷歌的第一批投资者。像任何投资者一样，你应该在时机不好时买入。\n几段前当我谈到投资者不愿意在坏市场向创业公司投资时，即使那时他们理性上应该最愿意购买，你是否点头同意，认为\u0026quot;愚蠢的投资者\u0026quot;？嗯，创始人也好不到哪里去。时机不好时，黑客去读研究生。毫无疑问这次也会发生。事实上，让前一段话成真的是大多数读者不会相信它——至少不会到付诸行动的程度。\n所以也许经济衰退是创业的好时机。很难说像缺乏竞争这样的优势是否胜过像不情愿的投资者这样的劣势。但无论如何这不重要。重要的是人。对于给定的人在给定的技术上工作的时候总是现在。\n"
  },{
    "title": "为什么推特很重要",
    "url": "/paul_graham/essays_zh/twitter/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么推特很重要 2009年4月\n奥姆·马利克是许多问为什么推特如此重要的人中最新的一个。\n原因是它是一种新的消息传递协议，你不指定接收者。新协议很少见。或者更准确地说，真正流行起来的新协议很少。常用的只有少数几个：TCP/IP（互联网）、SMTP（电子邮件）、HTTP（网络）等等。所以任何新协议都是大事。但推特是由私人公司拥有的协议。那就更罕见了。\n奇怪的是，推特创始人缓慢将其货币化的事实，从长远来看可能被证明是一个优势。因为他们没有试图过度控制它，推特对每个人来说都感觉像以前的协议。人们忘记了它是一家私人公司拥有的。这一定使推特更容易传播。\n",
    "description": "",
    "tags": ["推特","协议","消息传递","社交媒体","创新","互联网"],
    "categories": [],
    "content": "→ English Version\n为什么推特很重要 2009年4月\n奥姆·马利克是许多问为什么推特如此重要的人中最新的一个。\n原因是它是一种新的消息传递协议，你不指定接收者。新协议很少见。或者更准确地说，真正流行起来的新协议很少。常用的只有少数几个：TCP/IP（互联网）、SMTP（电子邮件）、HTTP（网络）等等。所以任何新协议都是大事。但推特是由私人公司拥有的协议。那就更罕见了。\n奇怪的是，推特创始人缓慢将其货币化的事实，从长远来看可能被证明是一个优势。因为他们没有试图过度控制它，推特对每个人来说都感觉像以前的协议。人们忘记了它是一家私人公司拥有的。这一定使推特更容易传播。\n"
  },{
    "title": "为什么搬到创业中心",
    "url": "/paul_graham/essays_zh/startuphubs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么搬到创业中心 2007年10月\n在我上次演讲后，其中一个组织者走上台进行即兴反驳。这从未发生过。我只听到了前几句话，但这足以告诉我说了什么让他不高兴的话：创业公司如果搬到硅谷会做得更好。\n这次会议在伦敦举行，大多数观众似乎来自英国。所以说创业公司应该搬到硅谷似乎像是一种民族主义的言论：一个讨厌的美国人告诉他们，如果他们想把事情做好，他们都应该搬到美国去。\n实际上我不像看起来那么美国化。我没有说，但我出生时是英国人。就像犹太人当然可以讲犹太笑话一样，我觉得我不必费心对英国观众保持外交辞令。\n创业公司搬到硅谷会做得更好的想法甚至不是民族主义的。[1] 我对美国创业公司也是这么说的。Y Combinator每6个月在东西海岸之间交替。每隔一轮融资在波士顿。尽管波士顿是美国（和世界）第二大创业中心，但我们告诉那些轮次的创业公司，他们最好的选择是搬到硅谷。如果这对波士顿来说是正确的，那么对其他每个城市来说更是如此。\n这是关于城市，而不是国家。\n我认为我可以证明我是对的。你可以轻易地将反对的 argument reduced ad absurdum，大多数人都会同意这是荒谬的。很少有人会愿意声称创业公司的位置根本不重要——在小型农业城镇运营的创业公司不会从搬到创业中心中受益。大多数人能看到在一个有创业基础设施、关于如何使创业公司运作的积累知识以及其他人在尝试做的地方可能会有所帮助。然而，无论你用什么论据来证明创业公司不需要从伦敦搬到硅谷，都可以同样用来证明创业公司不需要从小镇搬到伦敦。\n城市之间的差异是程度问题。而且，如果几乎所有知情的人都同意，创业公司在硅谷比在波士顿更好，那么他们在硅谷比在其他任何地方都更好。\n我意识到我可能在这个结论中有既得利益，因为搬到美国的创业公司可能通过Y Combinator进行。但我们资助的美国创业公司会证明我也对他们说了同样的话。\n我当然不是说每个创业公司都必须去硅谷才能成功。只是说在其他条件相同的情况下，一个地方越是创业中心，创业公司在那里就做得越好。但其他考虑可能超过搬迁的优势。我不是说有家庭的创始人应该连根拔起搬到世界的另一边；那可能太分散注意力了。\n移民困难可能是留在原地的另一个原因。处理移民问题就像筹集资金：出于某种原因，它似乎消耗你所有的注意力。创业公司负担不起太多这样的注意力。我们资助的一家加拿大创业公司花了大约6个月时间努力搬到美国。最终他们只是放弃了，因为他们负担不起花那么多时间离开他们的软件工作。\n（如果另一个国家想建立硅谷的竞争对手，他们能做的最好的事情可能是为创始人创建特殊签证。美国的移民政策是硅谷最大的弱点之一。）\n如果你的创业公司与特定行业相关，你可能最好在其中心之一。做与娱乐相关事情的创业公司可能想在纽约或洛杉矶。\n最后，如果一个好投资者承诺如果你留在原地就资助你，你可能应该留下。找到投资者很难。你通常不应该放弃确定的融资机会来搬迁。[2]\n事实上，投资者的质量可能是创业中心的主要优势。硅谷投资者明显比波士顿投资者更具侵略性。一次又一次，我看到我们资助的创业公司被西海岸投资者从波士顿投资者的鼻子底下抢走，波士顿投资者先看到他们但行动太慢。在今年的波士顿Demo Day上，我告诉观众这每年都会发生，所以如果他们看到他们喜欢的创业公司，他们应该向他们提供要约。然而不到一个月又发生了：一个激进的西海岸风险投资人在一周前见过YC资助的创业公司的创始人，击败了认识他多年的波士顿风险投资人。到波士顿风险投资人意识到发生了什么时，交易已经消失了。\n波士顿投资者会承认他们更保守。一些人想相信这来自城市审慎的扬基性格。但奥卡姆剃刀表明真相不太令人恭维。波士顿投资者可能比硅谷投资者更保守，原因与芝加哥投资者比波士顿投资者更保守相同。他们不太了解创业公司。\n西海岸投资者更大胆不是因为他们是不负责任的牛仔，也不是因为好天气让他们乐观。他们更大胆是因为他们知道自己在做什么。他们是在钻石斜坡上滑雪的滑雪者。大胆是风险投资的本质。你获得大回报的方式不是试图避免损失，而是试图确保你获得一些大成功。而大成功最初看起来往往有风险。\n就像Facebook。Facebook是在波士顿创办的。波士顿风险投资公司有第一个机会。但他们说不，所以Facebook搬到了硅谷并在那里筹集资金。拒绝他们的合伙人现在说\u0026quot;这可能被证明是一个错误。\u0026quot;\n从经验上看，大胆获胜。如果西海岸投资者的侵略性方式会反过来咬他们，那已经是很长时间了。自1970年代以来，硅谷一直领先于波士顿。如果西海岸投资者要受到惩罚，泡沫的破裂就是了。但自那时以来，西海岸只是进一步领先。\n西海岸投资者对自己的判断足够自信以大胆行动；东海岸投资者则不那么自信；但任何认为东海岸投资者出于谨慎而那样行事的人，应该看看东海岸风险投资人在输给西海岸的风险投资过程中的疯狂反应。\n除了专业化带来的集中化，创业中心也是市场。而市场通常是集中的。即使现在，当交易员可以在任何地方时，他们聚集在少数几个城市。很难说面对面接触究竟有什么让交易发生的魔力，但无论是什么，技术还没有复制它。\n在合适的时间沿着大学大道走，你可能会偷听到五个不同的人在电话上谈论交易。事实上，这是Y Combinator一半时间在波士顿的部分原因：全年都难以忍受。但尽管被只思考一件事的人包围有时可能很烦人，但如果那一件事正是你想要做的，那就是你应该在的地方。\n我最近和一个在谷歌从事搜索工作的人交谈。他在雅虎认识很多人，所以他处于比较两家公司的有利位置。我问他为什么谷歌在搜索方面更好。他说这不是谷歌做的任何特定事情，而是因为他们对搜索的理解要好得多。\n这就是为什么创业公司在硅谷这样的创业中心蓬勃发展。创业公司是非常专业的业务，像钻石切割一样专业。在创业中心，他们理解这一点。\n注意事项 [1] 民族主义想法是相反的：创业公司应该因为所在国家而留在某个城市。如果你真的有\u0026quot;一个世界\u0026quot;的观点，决定从伦敦搬到硅谷与决定从芝加哥搬到硅谷没有什么不同。\n[2] 然而，对于仅仅似乎会资助你的投资者，你可以忽略。似乎有一天会资助你是投资者说No的方式。\n感谢Sam Altman、Jessica Livingston、Harjeet Taggar和Kulveer Taggar阅读本文草稿。评论本文。\n日语翻译\n",
    "description": "",
    "tags": ["硅谷","创业中心","企业家精神","地点","创新"],
    "categories": [],
    "content": "→ English Version\n为什么搬到创业中心 2007年10月\n在我上次演讲后，其中一个组织者走上台进行即兴反驳。这从未发生过。我只听到了前几句话，但这足以告诉我说了什么让他不高兴的话：创业公司如果搬到硅谷会做得更好。\n这次会议在伦敦举行，大多数观众似乎来自英国。所以说创业公司应该搬到硅谷似乎像是一种民族主义的言论：一个讨厌的美国人告诉他们，如果他们想把事情做好，他们都应该搬到美国去。\n实际上我不像看起来那么美国化。我没有说，但我出生时是英国人。就像犹太人当然可以讲犹太笑话一样，我觉得我不必费心对英国观众保持外交辞令。\n创业公司搬到硅谷会做得更好的想法甚至不是民族主义的。[1] 我对美国创业公司也是这么说的。Y Combinator每6个月在东西海岸之间交替。每隔一轮融资在波士顿。尽管波士顿是美国（和世界）第二大创业中心，但我们告诉那些轮次的创业公司，他们最好的选择是搬到硅谷。如果这对波士顿来说是正确的，那么对其他每个城市来说更是如此。\n这是关于城市，而不是国家。\n我认为我可以证明我是对的。你可以轻易地将反对的 argument reduced ad absurdum，大多数人都会同意这是荒谬的。很少有人会愿意声称创业公司的位置根本不重要——在小型农业城镇运营的创业公司不会从搬到创业中心中受益。大多数人能看到在一个有创业基础设施、关于如何使创业公司运作的积累知识以及其他人在尝试做的地方可能会有所帮助。然而，无论你用什么论据来证明创业公司不需要从伦敦搬到硅谷，都可以同样用来证明创业公司不需要从小镇搬到伦敦。\n城市之间的差异是程度问题。而且，如果几乎所有知情的人都同意，创业公司在硅谷比在波士顿更好，那么他们在硅谷比在其他任何地方都更好。\n我意识到我可能在这个结论中有既得利益，因为搬到美国的创业公司可能通过Y Combinator进行。但我们资助的美国创业公司会证明我也对他们说了同样的话。\n我当然不是说每个创业公司都必须去硅谷才能成功。只是说在其他条件相同的情况下，一个地方越是创业中心，创业公司在那里就做得越好。但其他考虑可能超过搬迁的优势。我不是说有家庭的创始人应该连根拔起搬到世界的另一边；那可能太分散注意力了。\n移民困难可能是留在原地的另一个原因。处理移民问题就像筹集资金：出于某种原因，它似乎消耗你所有的注意力。创业公司负担不起太多这样的注意力。我们资助的一家加拿大创业公司花了大约6个月时间努力搬到美国。最终他们只是放弃了，因为他们负担不起花那么多时间离开他们的软件工作。\n（如果另一个国家想建立硅谷的竞争对手，他们能做的最好的事情可能是为创始人创建特殊签证。美国的移民政策是硅谷最大的弱点之一。）\n如果你的创业公司与特定行业相关，你可能最好在其中心之一。做与娱乐相关事情的创业公司可能想在纽约或洛杉矶。\n最后，如果一个好投资者承诺如果你留在原地就资助你，你可能应该留下。找到投资者很难。你通常不应该放弃确定的融资机会来搬迁。[2]\n事实上，投资者的质量可能是创业中心的主要优势。硅谷投资者明显比波士顿投资者更具侵略性。一次又一次，我看到我们资助的创业公司被西海岸投资者从波士顿投资者的鼻子底下抢走，波士顿投资者先看到他们但行动太慢。在今年的波士顿Demo Day上，我告诉观众这每年都会发生，所以如果他们看到他们喜欢的创业公司，他们应该向他们提供要约。然而不到一个月又发生了：一个激进的西海岸风险投资人在一周前见过YC资助的创业公司的创始人，击败了认识他多年的波士顿风险投资人。到波士顿风险投资人意识到发生了什么时，交易已经消失了。\n波士顿投资者会承认他们更保守。一些人想相信这来自城市审慎的扬基性格。但奥卡姆剃刀表明真相不太令人恭维。波士顿投资者可能比硅谷投资者更保守，原因与芝加哥投资者比波士顿投资者更保守相同。他们不太了解创业公司。\n西海岸投资者更大胆不是因为他们是不负责任的牛仔，也不是因为好天气让他们乐观。他们更大胆是因为他们知道自己在做什么。他们是在钻石斜坡上滑雪的滑雪者。大胆是风险投资的本质。你获得大回报的方式不是试图避免损失，而是试图确保你获得一些大成功。而大成功最初看起来往往有风险。\n就像Facebook。Facebook是在波士顿创办的。波士顿风险投资公司有第一个机会。但他们说不，所以Facebook搬到了硅谷并在那里筹集资金。拒绝他们的合伙人现在说\u0026quot;这可能被证明是一个错误。\u0026quot;\n从经验上看，大胆获胜。如果西海岸投资者的侵略性方式会反过来咬他们，那已经是很长时间了。自1970年代以来，硅谷一直领先于波士顿。如果西海岸投资者要受到惩罚，泡沫的破裂就是了。但自那时以来，西海岸只是进一步领先。\n西海岸投资者对自己的判断足够自信以大胆行动；东海岸投资者则不那么自信；但任何认为东海岸投资者出于谨慎而那样行事的人， …"
  },{
    "title": "为什么是YC",
    "url": "/paul_graham/essays_zh/whyyc/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么是YC 2006年3月，修订于2009年8月\n昨天，我们资助的一位创始人问我为什么创办了Y Combinator。或者更准确地说，他问我们是否主要是为了好玩而创办YC。\n有点，但不完全是。能够再次与Rtm和Trevor一起工作是非常有趣的。在卖掉Viaweb后我怀念这种感觉，之后所有年我都有一个后台进程在运行，寻找我们可以一起做的事情。Y Combinator肯定有乐队重聚的成分。每隔几天我都会不小心叫它\u0026quot;Viaweb\u0026quot;。\n我们创办Viaweb非常明确地是为了赚钱。我厌倦了从一个自由职业项目活到下一个项目，决定尽可能努力工作，直到我赚到足够的钱一劳永逸地解决这个问题。Viaweb有时很有趣，但它不是为了有趣而设计的，而且大多数时候并不有趣。如果有任何创业公司是有趣的，我会感到惊讶。所有创业公司大部分都是辛苦活。\n我们创办Y Combinator的真正原因既不是自私也不是高尚。我们创办它不是为了赚钱；我们不知道平均回报可能是什么，而且几年内都不会知道。我们创办YC也不是主要为了帮助年轻的准创始人，尽管我们确实喜欢这个想法，偶尔用这样的想法安慰自己：如果我们所有的投资都失败了，我们至少做了无私的事情。（这奇怪地是不确定的。）\n我们创办Y Combinator的真正原因可能只有黑客才能理解。我们这样做是因为它看起来是一个如此伟大的黑客手段。有成千上万聪明的人可以创办公司但没有创办，而在恰当的地方施加相对较小的力量，我们就可以为世界带来一股新的创业公司浪潮，而这些公司本可能不存在。\n在某种程度上这是高尚的，因为我认为创业公司是好事。但真正激励我们的是那种完全非道德的欲望，这种欲望会激励任何黑客，当他看着某个复杂的设备并意识到通过微小的调整他可以使它更高效地运行时。在这种情况下，这个设备是世界经济，而幸运的是它恰好是开源的。\n",
    "description": "",
    "tags": ["Y Combinator","创业","投资","黑客","企业家精神"],
    "categories": [],
    "content": "→ English Version\n为什么是YC 2006年3月，修订于2009年8月\n昨天，我们资助的一位创始人问我为什么创办了Y Combinator。或者更准确地说，他问我们是否主要是为了好玩而创办YC。\n有点，但不完全是。能够再次与Rtm和Trevor一起工作是非常有趣的。在卖掉Viaweb后我怀念这种感觉，之后所有年我都有一个后台进程在运行，寻找我们可以一起做的事情。Y Combinator肯定有乐队重聚的成分。每隔几天我都会不小心叫它\u0026quot;Viaweb\u0026quot;。\n我们创办Viaweb非常明确地是为了赚钱。我厌倦了从一个自由职业项目活到下一个项目，决定尽可能努力工作，直到我赚到足够的钱一劳永逸地解决这个问题。Viaweb有时很有趣，但它不是为了有趣而设计的，而且大多数时候并不有趣。如果有任何创业公司是有趣的，我会感到惊讶。所有创业公司大部分都是辛苦活。\n我们创办Y Combinator的真正原因既不是自私也不是高尚。我们创办它不是为了赚钱；我们不知道平均回报可能是什么，而且几年内都不会知道。我们创办YC也不是主要为了帮助年轻的准创始人，尽管我们确实喜欢这个想法，偶尔用这样的想法安慰自己：如果我们所有的投资都失败了，我们至少做了无私的事情。（这奇怪地是不确定的。）\n我们创办Y Combinator的真正原因可能只有黑客才能理解。我们这样做是因为它看起来是一个如此伟大的黑客手段。有成千上万聪明的人可以创办公司但没有创办，而在恰当的地方施加相对较小的力量，我们就可以为世界带来一股新的创业公司浪潮，而这些公司本可能不存在。\n在某种程度上这是高尚的，因为我认为创业公司是好事。但真正激励我们的是那种完全非道德的欲望，这种欲望会激励任何黑客，当他看着某个复杂的设备并意识到通过微小的调整他可以使它更高效地运行时。在这种情况下，这个设备是世界经济，而幸运的是它恰好是开源的。\n"
  },{
    "title": "为什么没有更多的Google",
    "url": "/paul_graham/essays_zh/googles/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么没有更多的Google 2008年4月\n乌迈尔·哈克最近写道，之所以没有更多的Google，是因为大多数初创公司在它们能够改变世界之前就被收购了。Google，尽管微软和雅虎对其表现出了严肃的兴趣——在当时那看起来似乎是有利可图的兴趣——却没有卖掉。Google可能只是雅虎或MSN的搜索框。\n为什么不是这样？因为Google有一种深刻的目标感：一个让世界变得更好的信念。这听起来很好，但不是真的。Google的创始人在早期是愿意出售的。他们只是想要比收购者愿意支付的更多的钱。\nFacebook也是如此。他们本来会卖掉的，但雅虎因为出价太少而搞砸了。\n给收购者的建议：当初创公司拒绝你时，考虑提高你的报价，因为他们想要的天价后来可能会显得很便宜。[1]\n从我到目前为止看到的证据来看，拒绝收购要约的初创公司通常最终会做得更好。不是总是如此，但通常会有更大的要约到来，甚至是IPO。\n当然，初创公司在拒绝收购要约时做得更好的原因不一定是所有这样的要约都低估了初创公司。更可能的原因是，那些有胆量拒绝大报价的创始人类型也往往非常成功。这种精神正是你在初创公司中想要的。\n虽然我确信拉里和谢尔盖现在确实想改变世界，但Google能够生存下来成为一家大型独立公司的原因与Facebook迄今为止保持独立的原因相同：收购者低估了它们。\n企业并购在这方面是一个奇怪的生意。他们总是错失最好的交易，因为拒绝合理的报价是你能发明的最可靠的测试，用来判断初创公司是否会做大。\n风险投资 那么为什么没有更多的Google呢？奇怪的是，这与Google和Facebook保持独立的原因相同：资金 guys 低估了最具创新性的初创公司。\n没有更多Google的原因不是投资者鼓励创新的初创公司卖掉，而是他们甚至不会资助它们。在我们做Y Combinator的3年里，我学到了很多关于风险投资的知识，因为我们经常不得不与他们密切合作。我学到的最令人惊讶的事情是他们有多么保守。风险投资公司展现了一个大胆鼓励创新的形象。实际上只有少数几家这样做，即使是它们，在现实中比从阅读它们的网站所能猜到的更保守。\n我过去常常把风险投资家想象成海盗式的：大胆但不择手段。更深入了解后，他们更像是官僚。他们比我过去认为的正直（至少好的那些是），但不太大胆。也许风险投资行业已经改变了。也许他们过去更大胆。但我怀疑是初创公司世界改变了，而不是他们。创办初创公司的低成本意味着平均的好赌注是风险更高的一个，但大多数现有的风险投资公司仍然像在1985年投资硬件初创公司那样运作。\n霍华德·艾肯说\u0026quot;不要担心人们偷你的想法。如果你的想法足够好，你将不得不把它们塞进人们的喉咙里。\u0026ldquo;当我试图说服风险投资家投资Y Combinator资助的初创公司时，我有类似的感觉。他们对真正新颖的想法感到恐惧，除非创始人足够好的销售员来弥补。\n但正是大胆的想法产生了最大的回报。任何真正好的新想法对大多数人来说似乎都很糟糕；否则早就有人已经在做了。然而大多数风险投资家是由共识驱动的，不仅在他们的公司内部，而且在风险投资社区内部。决定风险投资家对你初创公司感觉的最大因素是其他风险投资家对它的感觉。我怀疑他们是否意识到这一点，但这种算法保证了他们会错过所有最好的想法。越多的人必须喜欢一个新想法，你就失去越多的离群值。\n无论下一个Google是谁，他们现在可能正被告知风险投资家等他们有更多\u0026quot;牵引力\u0026quot;时再回来。\n为什么风险投资家如此保守？这可能是多种因素的结合。他们投资规模很大使他们保守。加上他们投资的是别人的钱，这使他们担心如果做有风险的事情并且失败了，他们会惹上麻烦。加上他们大多数是资金 guy 而不是技术 guy，所以他们不理解他们投资的初创公司做什么。\n接下来是什么 市场经济的令人兴奋之处在于愚蠢等于机会。在这种情况下也是如此。在初创公司投资中存在一个巨大的、未开发的机会。Y Combinator在最开始资助初创公司。风险投资家在它们已经开始成功时资助它们。但在这两者之间存在一个巨大的缺口。\n有些公司会给除了创始人之外什么都没有的初创公司2万美元，有些公司会给已经腾飞的初创公司2百万美元，但没有足够的投资者会给一个看起来非常有前途但仍然有一些事情要弄清楚的初创公司20万美元。这个领域主要由个人天使投资者占据——像安迪·贝托尔斯海姆这样的人，他在Google看起来有前途但仍然有一些事情要弄清楚时给了他们10万美元。我喜欢天使，但只是没有足够多的他们，投资对大多数人来说是兼职工作。\n然而，随着创办初创公司变得越来越便宜，这个稀少占据的领域变得越来越有价值。如今许多初创公司不想筹集数百万美元的A轮融资。他们不需要那么多钱，也不想要随之而来的麻烦。从Y Combinator出来的典型初创公司想要筹集25-50万美元。当他们去风险投资公司时，他们不得不要求更多，因为他们知道风险投资家对这样的小交易不感兴趣。\n风险投资家是资金经理。他们在寻找方法让大笔资金运作。但初创公司世界正在远离他们目前的模式。\n初创公司变得更便宜了。这意味着他们想要更少的钱，但也意味着有更多的他们。所以你仍然可以在大笔资金上获得大回报；你只需要更广泛地分散它。\n我曾试图向风险投资公司解释这一点。不要做一个200万美元的投资，做五个40万美元的投资。那意味着要坐太多的董事会吗？不要坐在他们的董事会。那意味着太多的尽职调查吗？做得更少。如果你在十分之一的估值投资，你只需要有十分之一的把握。\n这似乎很明显。但我向几家风险投资公司提议，他们拨出一些钱并指定一个合伙人做更多、更小的赌注，他们的反应就像我提议合伙人都戴鼻环一样。他们对他们标准的操作方式如此依赖是显著的。\n但这里有一个巨大的机会，不管怎样它都会被填补。要么风险投资公司会向下发展进入这个缺口，或者更可能的是，新的投资者会出现来填补它。当这种情况发生时将是好事，因为这些新投资者将被他们做出的投资结构迫使比现在的风险投资家大胆十倍。这将给我们带来更多的Google。至少，只要收购者仍然愚蠢。\n注释 [1] 另一个建议：如果你想要获得所有价值，不要在购买后破坏初创公司。给创始人足够的自主权，让他们能够把收购发展成它本来会成为的样子。\n感谢萨姆·奥特曼、保罗·布赫特、大卫·霍尼克、杰西卡·利文斯顿、罗伯特·莫里斯和弗雷德·威尔逊阅读本文的草稿。\n",
    "description": "",
    "tags": ["创业","google","风险投资","收购","创新"],
    "categories": [],
    "content": "→ English Version\n为什么没有更多的Google 2008年4月\n乌迈尔·哈克最近写道，之所以没有更多的Google，是因为大多数初创公司在它们能够改变世界之前就被收购了。Google，尽管微软和雅虎对其表现出了严肃的兴趣——在当时那看起来似乎是有利可图的兴趣——却没有卖掉。Google可能只是雅虎或MSN的搜索框。\n为什么不是这样？因为Google有一种深刻的目标感：一个让世界变得更好的信念。这听起来很好，但不是真的。Google的创始人在早期是愿意出售的。他们只是想要比收购者愿意支付的更多的钱。\nFacebook也是如此。他们本来会卖掉的，但雅虎因为出价太少而搞砸了。\n给收购者的建议：当初创公司拒绝你时，考虑提高你的报价，因为他们想要的天价后来可能会显得很便宜。[1]\n从我到目前为止看到的证据来看，拒绝收购要约的初创公司通常最终会做得更好。不是总是如此，但通常会有更大的要约到来，甚至是IPO。\n当然，初创公司在拒绝收购要约时做得更好的原因不一定是所有这样的要约都低估了初创公司。更可能的原因是，那些有胆量拒绝大报价的创始人类型也往往非常成功。这种精神正是你在初创公司中想要的。\n虽然我确信拉里和谢尔盖现在确实想改变世界，但Google能够生存下来成为一家大型独立公司的原因与Facebook迄今为止保持独立的原因相同：收购者低估了它们。\n企业并购在这方面是一个奇怪的生意。他们总是错失最好的交易，因为拒绝合理的报价是你能发明的最可靠的测试，用来判断初创公司是否会做大。\n风险投资 那么为什么没有更多的Google呢？奇怪的是，这与Google和Facebook保持独立的原因相同：资金 guys 低估了最具创新性的初创公司。\n没有更多Google的原因不是投资者鼓励创新的初创公司卖掉，而是他们甚至不会资助它们。在我们做Y Combinator的3年里，我学到了很多关于风险投资的知识，因为我们经常不得不与他们密切合作。我学到的最令人惊讶的事情是他们有多么保守。风险投资公司展现了一个大胆鼓励创新的形象。实际上只有少数几家这样做，即使是它们，在现实中比从阅读它们的网站所能猜到的更保守。\n我过去常常把风险投资家想象成海盗式的：大胆但不择手段。更深入了解后，他们更像是官僚。他们比我过去认为的正直（至少好的那些是），但不太大胆。也许风险投资行业已经改变了。也许他们过去更大胆。但我怀疑是初创公司世界改变了，而不是他们。创办初创公司的低成本意味着平均的好赌注是风险更高的一个，但大多数现有的风险投资公司仍然像在1985年投资硬件初创公司那样运作。\n霍华德·艾肯说\u0026quot;不要担心人们偷你的想法。如果你的想法足够好，你将不得不把它们塞进人们的喉咙里。\u0026ldquo;当我试图说服风险投资家投资Y Combinator资助的初创公司时，我有类似的感觉。他们对真正新颖的想法感到恐惧，除非创始人足够好的销售员来弥补。\n但正是大胆的想法产生了最大的回报。任何真正好的新想法对大多数人来说似乎都很糟糕；否则早就有人已经在做了。然而大多数风险投资家是由共识驱动的，不仅在他们的公司内部，而且在风险投资社区内部。决定风险投资家对你初创公司感觉的最大因素是其他风险投资家对它的感觉。我怀疑他们是否意识到这一点，但这种算法保证了他们会错过所有最好的想法。越多的人必须喜欢一个新想法，你就失去越多的离群值。\n无论下一个Google是谁，他们现在可能正被告知风险投资家等他们有更多\u0026quot;牵引力\u0026quot;时再回来。\n为什么风险投资家如此保守？这可能是多种因素的结合。他们投资规模很大使他们保守。加上他们投资的是别人的钱，这使他们担心如果做有风险的事情并且失败了，他们会惹上麻烦。加上他们大多数是资金 guy 而不是技术 guy，所以他们不理解他们投资的初创公司做什么。\n接下来是什么 市场经济的令人兴奋之处在于愚蠢等于机会。在这种情况下也是如此。在初创公司投资中存在一个巨大的、未开发的机会。Y Combinator在最开始资助初创公司。风险投资家在它们已经开始成功时资助它们。但在这两者之间存在一个巨大的缺口。\n有些公司会给除了创始人之外什么都没有的初创公司2万美元，有些公司会给已经腾飞的初创公司2百万美元，但没有足够的投资者会给一个看起来非常有前途但仍然有一些事情要弄清楚的初创公司20万美元。这个领域主要由个人天使投资者占据——像安迪·贝托尔斯海姆这样的人，他在Google看起来有前途但仍然有一些事情要弄清楚时给了他们10万美元。我喜欢天使，但只是没有足够多的他们，投资对大多数人来说是兼职工作。\n然而，随着创办初创公司变得越来越便宜，这个稀少占据的领域变得越来越有价值。如今许多初创公司不想筹集数百万美元的A轮融资。他们不需要那么多钱，也不想要随之而来的麻烦。从Y …"
  },{
    "title": "为什么电视输了",
    "url": "/paul_graham/essays_zh/convergence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么电视输了 2009年3月\n大约二十年前，人们注意到计算机和电视正在发生碰撞，并开始猜测它们融合时会产生什么。我们现在知道了答案：计算机。现在很清楚，即使使用\u0026quot;融合\u0026quot;这个词，我们也给了电视太多的信任。这与其说是融合，不如说是替代。人们可能仍然观看他们称之为\u0026quot;电视节目\u0026quot;的东西，但他们主要会在电脑上观看。\n是什么决定了计算机的胜利？四种力量，其中三种是可以预见的，一种则较难预见。\n一个可预见的胜利原因是互联网是一个开放平台。任何人都可以在上面构建任何他们想要的东西，市场选择胜者。因此，创新以黑客速度而非大公司速度发生。\n第二个是摩尔定律，它对互联网带宽发挥了通常的魔力。[1]\n计算机获胜的第三个原因是盗版。用户喜欢它不仅因为它是免费的，还因为它更方便。Bittorrent和YouTube已经训练了新一代观众，让他们知道观看节目的地方是在电脑屏幕上。[2]\n更令人惊讶的力量是一种特定类型的创新：社交应用。普通青少年孩子与朋友交谈的能力几乎是无限的。但他们不能一直与朋友在一起。我在高中的时候解决方案是电话。现在是社交网络、多人游戏和各种消息应用。接触它们所有的方式是通过计算机。[3]这意味着每个青少年孩子（a）想要一台连接互联网的计算机，（b）有动力学习如何使用它，（c）在它前面花费无数小时。\n这是最强大的力量。这就是让每个人都想要计算机的原因。技术迷们得到计算机是因为他们喜欢它们。然后游戏玩家们得到计算机来玩游戏。但让其他人都想要计算机的是与其他人联系：这就是让连奶奶和14岁女孩都想要计算机的原因。在几十年将静脉输液直接注入观众的过程中，娱乐行业的人们可以理解地将他们视为相当被动的。他们以为他们能够支配节目到达观众的方式。但他们低估了他们彼此联系的欲望的力量。\nFacebook杀死了电视。当然，这是极度简化的，但可能是你能用三个词得到的最接近真相的答案。\n电视网络似乎已经不情愿地看到事情的发展方向，并做出了回应，不情愿地将他们的内容放在网上。但他们仍在拖后腿。他们似乎仍然希望人们在电视上观看节目，就像把故事放在网上的报纸仍然似乎希望人们等到第二天早上阅读印刷在纸上的版本一样。他们都应该面对互联网是主要媒介的事实。\n如果他们早点这样做，他们会处于更有利的位置。当一个新的媒介出现，强大到足以让在位者感到紧张时，那么它可能强大到足以获胜，他们能做的最好的事情就是立即跳入。\n不管他们喜欢与否，重大的变化即将到来，因为互联网消解了广播媒体的两大基石：同步性和本地性。在互联网上，你不必向每个人发送相同的信号，也不必从本地源发送给他们。人们将在他们想要的时候观看他们想要的东西，并根据他们最强烈的共同兴趣进行分组。也许他们最强烈的共同兴趣将是他们的物理位置，但我猜不是。这意味着地方电视可能已经死了。它是旧技术施加的限制的产物。如果现在有人从头创建一个基于互联网的电视公司，他们可能有一些针对特定地区的节目的计划，但这不会是首要任务。\n同步性和本地性是联系在一起的。电视网络附属机构关心10点播放什么，因为这样可以给11点的本地新闻带来观众。然而，这种联系增加了更多的脆弱性而不是力量：人们不是在10点观看节目，因为他们想之后观看新闻。\n电视网络将对抗这些趋势，因为他们没有足够的灵活性来适应它们。他们受到地方附属机构的束缚，就像汽车公司受到经销商和工会的束缚一样。不可避免的是，运行网络的人将采取简单的路线，并试图让旧模式再运行几年，就像唱片公司所做的那样。\n《华尔街日报》最近的一篇文章描述了电视网络如何试图增加更多直播节目，部分原因是迫使观众同步观看电视，而不是在适合他们的时候观看录制的节目。他们不是提供观众想要的东西，而是试图强迫他们改变习惯以适应网络过时的商业模式。除非你有垄断或卡特尔来强制执行，否则这永远不会奏效，即使那样也只是暂时有效。\n网络喜欢直播节目的另一个原因是它们制作成本更低。在那里他们有正确的想法，但他们没有把它推到结论。直播内容可能比网络意识到的便宜得多，利用成本大幅下降的方法是增加数量。网络被看到这整个推理路线所阻止，因为他们仍然认为自己在广播业务中——向每个人发送一个信号。[4]\n现在是创办任何与电视网络竞争的公司的好时机。这就是很多互联网初创公司在做的事情，尽管他们可能没有把这个作为明确的目标。人们每天只有这么多的休闲时间，而电视是以长时段为前提的（不像谷歌，以快速发送用户为荣），所以占用他们时间的任何东西都在与它竞争。但除了这样的间接竞争对手，我认为电视公司将面临越来越多的直接竞争对手。\n即使在有线电视中，长尾也被启动新频道必须跨越的门槛过早地截断了。在互联网上它会更长，并且在其中会有更多的流动性。在这个新世界中，现有的参与者将只拥有任何大公司在其市场中的优势。\n这将改变网络和节目制作人之间的权力平衡。网络曾经是守门人。他们分发你的作品，并在上面销售广告。现在制作节目的人可以自己分发。网络现在提供的主要价值是广告销售。这将使他们处于服务提供商而非出版商的位置。\n节目将发生更大的变化。在互联网上，没有理由保持他们当前的格式，甚至没有理由保持他们拥有单一格式的事实。确实，即将到来的更有趣的融合是在节目和游戏之间。但对于20年互联网上分发什么样的娱乐，我不敢做出任何预测，除了事情会变化很大。我们将得到最有想象力的人能创造出的任何东西。这就是互联网获胜的原因。\n注释 [1] 感谢Trevor Blackwell提出这个观点。他补充说：\u0026ldquo;我记得在90年代初，电话公司高管在谈论融合时眼睛闪闪发光。他们认为大多数节目将按需提供，他们将实施它并赚很多钱。结果没有奏效。他们假设他们的本地网络基础设施对于视频点播至关重要，因为你不可能通过互联网从几个数据中心流式传输。当时（1992年）整个跨州互联网带宽都不足以支持一个视频流。但广域带宽比他们预期的增长更多，他们被iTunes和Hulu击败了。\u0026rdquo;\n[2] 版权所有者倾向于关注他们看到的盗版方面，即收入损失。因此他们认为推动用户这样做的是免费获得某些东西的愿望。但iTunes表明，如果你让事情变得容易，人们会为在线内容付费。盗版的一个重要因素只是它提供了更好的用户体验。\n[3] 或者实际上是一台计算机的手机。我没有对将取代电视的设备大小做出任何预测，只是它将有一个浏览器并通过互联网获取数据。\n[4] Emmett Shear写道：\u0026ldquo;我认为体育的长尾可能比其他类型内容的长尾更大。任何人都可以广播一场对约10,000人有趣的高中橄榄球比赛，即使制作质量不是很好。\u0026rdquo;\n感谢Sam Altman、Trevor Blackwell、Nancy Cook、Michael Seibel、Emmett Shear和Fred Wilson阅读本文的草稿。\n相关 日语翻译\n",
    "description": "",
    "tags": ["电视","互联网","融合","媒体","技术","社交","创新"],
    "categories": [],
    "content": "→ English Version\n为什么电视输了 2009年3月\n大约二十年前，人们注意到计算机和电视正在发生碰撞，并开始猜测它们融合时会产生什么。我们现在知道了答案：计算机。现在很清楚，即使使用\u0026quot;融合\u0026quot;这个词，我们也给了电视太多的信任。这与其说是融合，不如说是替代。人们可能仍然观看他们称之为\u0026quot;电视节目\u0026quot;的东西，但他们主要会在电脑上观看。\n是什么决定了计算机的胜利？四种力量，其中三种是可以预见的，一种则较难预见。\n一个可预见的胜利原因是互联网是一个开放平台。任何人都可以在上面构建任何他们想要的东西，市场选择胜者。因此，创新以黑客速度而非大公司速度发生。\n第二个是摩尔定律，它对互联网带宽发挥了通常的魔力。[1]\n计算机获胜的第三个原因是盗版。用户喜欢它不仅因为它是免费的，还因为它更方便。Bittorrent和YouTube已经训练了新一代观众，让他们知道观看节目的地方是在电脑屏幕上。[2]\n更令人惊讶的力量是一种特定类型的创新：社交应用。普通青少年孩子与朋友交谈的能力几乎是无限的。但他们不能一直与朋友在一起。我在高中的时候解决方案是电话。现在是社交网络、多人游戏和各种消息应用。接触它们所有的方式是通过计算机。[3]这意味着每个青少年孩子（a）想要一台连接互联网的计算机，（b）有动力学习如何使用它，（c）在它前面花费无数小时。\n这是最强大的力量。这就是让每个人都想要计算机的原因。技术迷们得到计算机是因为他们喜欢它们。然后游戏玩家们得到计算机来玩游戏。但让其他人都想要计算机的是与其他人联系：这就是让连奶奶和14岁女孩都想要计算机的原因。在几十年将静脉输液直接注入观众的过程中，娱乐行业的人们可以理解地将他们视为相当被动的。他们以为他们能够支配节目到达观众的方式。但他们低估了他们彼此联系的欲望的力量。\nFacebook杀死了电视。当然，这是极度简化的，但可能是你能用三个词得到的最接近真相的答案。\n电视网络似乎已经不情愿地看到事情的发展方向，并做出了回应，不情愿地将他们的内容放在网上。但他们仍在拖后腿。他们似乎仍然希望人们在电视上观看节目，就像把故事放在网上的报纸仍然似乎希望人们等到第二天早上阅读印刷在纸上的版本一样。他们都应该面对互联网是主要媒介的事实。\n如果他们早点这样做，他们会处于更有利的位置。当一个新的媒介出现，强大到足以让在位者感到紧张时，那么它可能强大到足以获胜，他们能做的最好的事情就是立即跳入。\n不管他们喜欢与否，重大的变化即将到来，因为互联网消解了广播媒体的两大基石：同步性和本地性。在互联网上，你不必向每个人发送相同的信号，也不必从本地源发送给他们。人们将在他们想要的时候观看他们想要的东西，并根据他们最强烈的共同兴趣进行分组。也许他们最强烈的共同兴趣将是他们的物理位置，但我猜不是。这意味着地方电视可能已经死了。它是旧技术施加的限制的产物。如果现在有人从头创建一个基于互联网的电视公司，他们可能有一些针对特定地区的节目的计划，但这不会是首要任务。\n同步性和本地性是联系在一起的。电视网络附属机构关心10点播放什么，因为这样可以给11点的本地新闻带来观众。然而，这种联系增加了更多的脆弱性而不是力量：人们不是在10点观看节目，因为他们想之后观看新闻。\n电视网络将对抗这些趋势，因为他们没有足够的灵活性来适应它们。他们受到地方附属机构的束缚，就像汽车公司受到经销商和工会的束缚一样。不可避免的是，运行网络的人将采取简单的路线，并试图让旧模式再运行几年，就像唱片公司所做的那样。\n《华尔街日报》最近的一篇文章描述了电视网络如何试图增加更多直播节目，部分原因是迫使观众同步观看电视，而不是在适合他们的时候观看录制的节目。他们不是提供观众想要的东西，而是试图强迫他们改变习惯以适应网络过时的商业模式。除非你有垄断或卡特尔来强制执行，否则这永远不会奏效，即使那样也只是暂时有效。\n网络喜欢直播节目的另一个原因是它们制作成本更低。在那里他们有正确的想法，但他们没有把它推到结论。直播内容可能比网络意识到的便宜得多，利用成本大幅下降的方法是增加数量。网络被看到这整个推理路线所阻止，因为他们仍然认为自己在广播业务中——向每个人发送一个信号。[4]\n现在是创办任何与电视网络竞争的公司的好时机。这就是很多互联网初创公司在做的事情，尽管他们可能没有把这个作为明确的目标。人们每天只有这么多的休闲时间，而电视是以长时段为前提的（不像谷歌，以快速发送用户为荣），所以占用他们时间的任何东西都在与它竞争。但除了这样的间接竞争对手，我认为电视公司将面临越来越多的直接竞争对手。\n即使在有线电视中，长尾也被启动新频道必须跨越的门槛过早地截断了。在互联网上它会更长，并且在其中会有更多的流动性。在这个新世界中，现有的参与者将只拥有任何大公司在其市 …"
  },{
    "title": "为什么聪明人有坏想法",
    "url": "/paul_graham/essays_zh/bronze/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n为什么聪明人有坏想法 想要创业吗？获得Y Combinator的资助。\n2005年4月\n今年夏天，作为一个实验，我和一些朋友正在为一群新的创业公司提供种子资金。这是一个实验，因为我们准备资助比大多数投资者愿意资助的更年轻的创始人。这就是为什么我们在夏天做这件事——这样即使是大学生也能参与。\n我们从谷歌和雅虎知道，研究生可以创办成功的创业公司。而且我们从经验中知道，一些本科生和大多数研究生一样有能力。创业创始人的接受年龄一直在下降。我们正在寻找下限。\n截止日期现在已经过去，我们正在筛选227份申请。我们期望将它们分为两类：有前途的和没有前途的。但我们很快就看到我们需要第三类：有前途的人但没有前途的想法。[1]\nArtix阶段 我们应该预料到这一点。一群创始人在意识到创业公司必须制造人们愿意付费购买的东西之前，经历一个蹩脚的想法是很常见的。事实上，我们自己就是这样做的。\nViaweb不是Robert Morris和我创办的第一家创业公司。1995年1月，我和几个朋友创办了一家名为Artix的公司。计划是将艺术画廊放到网上。回想起来，我不知道我们怎么能在如此愚蠢的事情上浪费时间。即使在十年后的今天，画廊对上网也不是特别兴奋。他们不想让他们的库存对任何随机访客可见，就像古董店一样。[2]\n此外，艺术经销商是地球上最害怕技术的人。他们成为艺术经销商并不是因为在那个和硬科学职业生涯之间做出了困难的选择。他们中的大多数人在我们来告诉他们为什么应该上网之前从未见过网络。有些人甚至没有电脑。把这种情况描述为艰难推销是不公正的；我们很快就降级为免费建网站，甚至很难说服画廊这样做。\n渐渐地我们意识到，与其试图为那些不想要网站的人建立网站，不如为那些想要网站的人建立网站。事实上，是让那些想要网站的人能够自己建立网站的软件。所以我们抛弃了Artix，创办了一家新公司Viaweb，来制造建立在线商店的软件。那家公司成功了。\n在这方面我们有很多好伙伴。微软也不是Paul Allen和Bill Gates创办的第一家公司。第一家叫做Traf-o-data。它似乎没有Micro-soft做得那么好。为Robert辩护，他对Artix持怀疑态度。是我把他拖进来的。[3] 但他有时也很乐观。如果我们这些当时29岁和30岁的人都能对这样一个彻头彻尾愚蠢的想法感到兴奋，那么对于21岁或22岁的黑客向我们推销几乎没有赚钱希望的想法，我们就不应该感到惊讶。\n静物效应 为什么会这样？为什么优秀的黑客会有糟糕的商业想法？\n让我们看看我们的情况。我们有这样一个蹩脚想法的一个原因是它是我们想到的第一件事。当时我在纽约试图成为一个饥饿的艺术家（饥饿的部分实际上很容易），所以我一直在逛画廊。当我了解到网络时，将两者混合似乎很自然。为画廊建网站——这就是办法！\n如果你要花几年时间做某件事，你可能认为明智的做法是至少花几天时间考虑不同的想法，而不是选择第一个进入你脑海的想法。你会这么想。但人们不会。事实上，这是画静物画时的一个常见问题。你把一堆东西放在桌子上，也许花五到十分钟重新排列使其看起来有趣。但是你急于开始绘画，十分钟的重新排列感觉很漫长。所以你开始画画。三天后，花了二十个小时盯着它，你踢自己设置了如此尴尬和无聊的构图，但那时已经太晚了。\n问题的一部分是大项目往往从小项目发展而来。你设置一个静物画以便在有空闲时间时快速素描，几天后你还在处理它。我曾经花了一个月时间画一个静物画的三个版本，这个静物画我大约用了四分钟设置。在每个时间点（一天、一周、一个月），我都觉得我已经投入了太多时间，改变已经太晚了。\n所以坏想法的最大原因是静物效应：你想出一个随机的想法，投入其中，然后在每个时间点（一天、一周、一个月）感觉你已经投入了这么多时间，这一定是这个想法。\n我们如何解决这个问题？我不认为我们应该放弃投入。投入想法是好事。解决方案在另一端：要意识到投入时间在某件事上并不能使它变好。\n这在名字的情况下最明显。Viaweb最初叫做Webgen，但我们发现有人已经有了一个叫这个名字的产品。我们非常喜欢我们的名字，以至于我们向他提供了公司5%的股份，如果他让我们使用这个名字。但他不愿意，所以我们不得不想另一个。[4] 我们能做的最好的是Viaweb，起初我们不喜欢它。这就像有了一个新母亲。但三天内我们就爱上了它，而Webgen听起来蹩脚而过时。\n如果改变像名字这样简单的东西都很困难，想象一下回收一个想法有多困难。名字在你头脑中只有一个附着点。一个公司的想法被编织到你的思想中。所以你必须有意识地为此打折扣。尽管投入，但记得以后在晨光中审视你的想法并问：这是人们愿意付费购买的东西吗？在我们可以制造的所有东西中，这是人们最愿意付费购买的东西吗？\n污秽 我们在Artix上犯的第二个错误也很常见。将画廊放到网上似乎很酷。\n我父亲教给我的最有价值的事情之一是一句古老的约克郡谚语：哪里有污秽，哪里就有黄铜。意思是令人不愉快的工作有报酬。而这里的重点是，反之亦然。人们喜欢的工作报酬不高，原因是供求关系。最极端的例子是开发编程语言，这根本没有报酬，因为人们非常喜欢它，以至于他们免费做。\n当我们开始Artix时，我对商业仍然矛盾。我想在艺术界保持一只脚。天大的错误。进入商业就像悬挂式滑翔机发射：你最好全心全意地做，或者根本不做。公司的目的，特别是创业公司的目的，是赚钱。你不能有分裂的忠诚。\n这并不是说你必须做最令人厌恶的工作，比如发送垃圾邮件，或者创办唯一目的是专利诉讼的公司。我的意思是，如果你要创办一家会做很酷事情的公司，目标最好是赚钱并且可能很酷，而不是很酷并且可能赚钱。\n赚钱已经够难了，你不可能偶然做到。除非它是你的首要任务，否则根本不可能发生。\n鬣狗 当我探索我们在Artix上的动机时，我看到了第三个错误：胆怯。如果你当时提议我们进入电子商务业务，我们会觉得这个想法很可怕。这样一个领域肯定会被每家有五百万美元风险投资资金的可怕创业公司主导。而我们相当确定我们可以在为艺术画廊建网站的竞争稍小的业务中保持自己的地位。\n我们在安全方面错得离谱。事实证明，风险投资支持的创业公司并不可怕。他们太忙于试图花完所有钱来编写软件。1995年，从新闻稿来看，电子商务业务竞争非常激烈，但从软件来看并非如此。而且实际上从来都不是。像Open Market（愿他们安息）这样的大鱼只是伪装成产品公司的咨询公司[5]，而我们市场的产品是几百行Perl脚本。或者可以用几百行Perl实现；事实上它们可能是成千上万行C++或Java。一旦我们真正投入电子商务，结果证明竞争出奇地容易。\n那么我们为什么害怕？我们觉得自己擅长编程，但我们对做一个神秘的、未分化的被称为\u0026quot;商业\u0026quot;的事情缺乏信心。事实上没有\u0026quot;商业\u0026quot;这种东西。有销售、促销、弄清楚人们想要什么、决定收费多少、客户支持、支付账单、让客户付款、注册公司、筹集资金等等。组合起来并不像看起来那么难，因为一些任务（如筹集资金和注册公司）无论大小都是O(1)的麻烦事，而其他任务（如销售和促销）更多地取决于精力和想象力，而不是任何特殊培训。\nArtix就像一只鬣狗，满足于靠腐肉生存，因为我们害怕狮子。除了狮子原来没有牙齿，而将画廊上线的工作几乎算不上腐肉。\n熟悉的问题 总结所有这些错误来源，我们公司有如此糟糕的想法也就不足为奇了。我们做了我们想到的第一件事；我们对进入商业界完全矛盾；我们故意选择了一个贫乏的市场以避免竞争。\n看看夏季创始人计划的申请，我看到所有三种迹象。但第一个是迄今为止最大的问题。大多数申请的团队都没有停下来问：在我们可以做的所有事情中，这是最有赚钱机会的吗？\n如果他们已经经历了他们的Artix阶段，他们就会学会问这个问题。在从艺术经销商那里得到接待后，我们准备好问了。这次，我们想，让我们制造人们想要的东西。\n阅读《华尔街日报》一周应该会给任何人带来两三个新创业公司的想法。文章充满了需要解决的问题的描述。但大多数申请人似乎没有广泛寻找想法。\n我们期望最常见的提案是多人游戏。我们没有相差太远：这是第二常见的。最常见的是博客、日历、交友网站和Friendster的某种组合。也许这里可以发现一个新的杀手级应用，但在有价值、未解决的问题公开摆在那里供任何人看到的情况下，在这种迷雾中探索似乎很荒谬。为什么没有人提出新的微支付方案？也许是一个雄心勃勃的项目，但我不敢相信我们已经考虑了所有替代方案。报纸和杂志（字面上）正在为解决方案而死亡。\n为什么很少有申请人真正考虑客户想要什么？我认为许多人的问题，与通常二十出头的人一样，是他们一生中被训练着跳过预定的圈套。他们花了15-20年时间解决别人为他们设定的问题。花了多少时间决定哪些问题是好的解决？两三个课程项目？他们擅长解决问题，但不擅长选择问题。\n但我确信，这只是培训的效果。或者更准确地说，是评分的效果。为了使评分高效，每个人都必须解决同样的问题，这意味着必须提前决定。如果学校教学生如何选择问题以及如何解决问题，那就太好了，但我不知道在实践中如何运行这样的课程。\n铜和锡 好消息是，选择问题是可以通过学习获得的。我从经验中知道这一点。黑客可以学会制造客户想要的东西。[6]\n这是一个有争议的观点。一位\u0026quot;创业\u0026quot;专家告诉我，任何创业公司都必须包括商业人士，因为只有他们才能专注于客户想要什么。通过引用他，我可能会永远疏远这个人，但我必须冒险，因为他的电子邮件是这种观点的完美例子：\n80%的麻省理工学院分校创业公司成功，前提是团队在开始时至少有一名管理人员。商业人士代表\u0026quot;客户的声音\u0026quot;，这就是让工程师和产品开发保持正轨的原因。\n在我看来，这是胡说。黑客完全能够在没有商业人士为他们放大信号的情况下听到客户的声音。Larry Page和Sergey Brin是计算机科学研究生，这大概使他们成为\u0026quot;工程师\u0026quot;。你认为谷歌之所以好只是因为有一些商业人在他们耳边低语客户想要什么吗？在我看来，对谷歌贡献最大的商业人是那些在谷歌刚开始时顺从地将Altavista撞向山坡的人。\n弄清楚客户想要什么的最困难的部分是弄清楚你需要弄清楚它。但这是可以快速学会的。就像看到模糊图片的另一种解释一样。一旦有人告诉你那里有一只兔子和一只鸭子，就很难看不到它。\n与黑客习惯解决的问题相比，给客户他们想要的东西很容易。任何能编写优化编译器的人，一旦选择专注于那个问题，都能设计出不让用户困惑的UI。一旦你将那种脑力应用于琐碎但有利可图的问题，你可以非常迅速地创造财富。\n这就是创业公司的本质：让聪明的人做配不上他们的工作。大公司试图为工作雇佣合适的人。创业公司获胜是因为他们不——因为他们把那些聪明到在大公司可能做\u0026quot;研究\u0026quot;的人，让他们转而处理最直接和最平凡的问题。想象爱因斯坦设计冰箱。[7]\n如果你想了解人们想要什么，请阅读Dale Carnegie的《如何赢得朋友和影响他人》。[8] 当一个朋友向我推荐这本书时，我无法相信他是认真的。但他坚持说这本书很好，所以我读了，他是对的。它处理了人类经验中最困难的问题：如何从别人的角度看待事物，而不是只考虑自己。\n大多数聪明人不太擅长这个。但是将这种能力添加到原始的脑力中就像在铜中添加锡。结果是青铜，它坚硬得多，看起来像是一种不同的金属。\n一个已经学会制造什么而不仅仅是如何制造的黑客是非常强大的。不仅仅在赚钱方面：看看一小群志愿者用Firefox取得了什么成就。\n做一个Artix教你制造人们想要的东西，就像不喝任何东西会教你你对水的依赖程度一样。但如果夏季创始人不在我们的钱上学习这个——如果他们能够跳过Artix阶段直接制造客户想要的东西，那对所有参与的人来说都会更方便。那，我认为，将是今年夏天的真正实验。他们需要多长时间才能掌握这个？\n我们决定应该为SFP制作T恤，我们一直在考虑背面印什么。直到现在我们一直计划使用\u0026quot;如果你能读到这个，我应该在工作\u0026quot;，但现在我们决定将是\u0026quot;制造人们想要的东西\u0026quot;。\n注释 [1] SFP申请人：请不要认为不被接受意味着我们认为你的想法不好。因为我们希望今年夏天保持创业公司数量少，我们将不得不拒绝一些好的提案。\n[2] 经销商试图给每个客户留下印象，他们向他展示的东西是只有少数人见过的特殊东西，而事实上它可能已经在他们的架子上坐了几年，而他们试图一个接一个地买家卸货。\n",
    "description": "",
    "tags": ["想法","创业","学习","商业","心理学"],
    "categories": [],
    "content": "→ English Version\n为什么聪明人有坏想法 想要创业吗？获得Y Combinator的资助。\n2005年4月\n今年夏天，作为一个实验，我和一些朋友正在为一群新的创业公司提供种子资金。这是一个实验，因为我们准备资助比大多数投资者愿意资助的更年轻的创始人。这就是为什么我们在夏天做这件事——这样即使是大学生也能参与。\n我们从谷歌和雅虎知道，研究生可以创办成功的创业公司。而且我们从经验中知道，一些本科生和大多数研究生一样有能力。创业创始人的接受年龄一直在下降。我们正在寻找下限。\n截止日期现在已经过去，我们正在筛选227份申请。我们期望将它们分为两类：有前途的和没有前途的。但我们很快就看到我们需要第三类：有前途的人但没有前途的想法。[1]\nArtix阶段 我们应该预料到这一点。一群创始人在意识到创业公司必须制造人们愿意付费购买的东西之前，经历一个蹩脚的想法是很常见的。事实上，我们自己就是这样做的。\nViaweb不是Robert Morris和我创办的第一家创业公司。1995年1月，我和几个朋友创办了一家名为Artix的公司。计划是将艺术画廊放到网上。回想起来，我不知道我们怎么能在如此愚蠢的事情上浪费时间。即使在十年后的今天，画廊对上网也不是特别兴奋。他们不想让他们的库存对任何随机访客可见，就像古董店一样。[2]\n此外，艺术经销商是地球上最害怕技术的人。他们成为艺术经销商并不是因为在那个和硬科学职业生涯之间做出了困难的选择。他们中的大多数人在我们来告诉他们为什么应该上网之前从未见过网络。有些人甚至没有电脑。把这种情况描述为艰难推销是不公正的；我们很快就降级为免费建网站，甚至很难说服画廊这样做。\n渐渐地我们意识到，与其试图为那些不想要网站的人建立网站，不如为那些想要网站的人建立网站。事实上，是让那些想要网站的人能够自己建立网站的软件。所以我们抛弃了Artix，创办了一家新公司Viaweb，来制造建立在线商店的软件。那家公司成功了。\n在这方面我们有很多好伙伴。微软也不是Paul Allen和Bill Gates创办的第一家公司。第一家叫做Traf-o-data。它似乎没有Micro-soft做得那么好。为Robert辩护，他对Artix持怀疑态度。是我把他拖进来的。[3] 但他有时也很乐观。如果我们这些当时29岁和30岁的人都能对这样一个彻头彻尾愚蠢的想法感到兴奋，那么对于21岁或22岁的黑客向我们推销几乎没有赚钱希望的想法，我们就不应该感到惊讶。\n静物效应 为什么会这样？为什么优秀的黑客会有糟糕的商业想法？\n让我们看看我们的情况。我们有这样一个蹩脚想法的一个原因是它是我们想到的第一件事。当时我在纽约试图成为一个饥饿的艺术家（饥饿的部分实际上很容易），所以我一直在逛画廊。当我了解到网络时，将两者混合似乎很自然。为画廊建网站——这就是办法！\n如果你要花几年时间做某件事，你可能认为明智的做法是至少花几天时间考虑不同的想法，而不是选择第一个进入你脑海的想法。你会这么想。但人们不会。事实上，这是画静物画时的一个常见问题。你把一堆东西放在桌子上，也许花五到十分钟重新排列使其看起来有趣。但是你急于开始绘画，十分钟的重新排列感觉很漫长。所以你开始画画。三天后，花了二十个小时盯着它，你踢自己设置了如此尴尬和无聊的构图，但那时已经太晚了。\n问题的一部分是大项目往往从小项目发展而来。你设置一个静物画以便在有空闲时间时快速素描，几天后你还在处理它。我曾经花了一个月时间画一个静物画的三个版本，这个静物画我大约用了四分钟设置。在每个时间点（一天、一周、一个月），我都觉得我已经投入了太多时间，改变已经太晚了。\n所以坏想法的最大原因是静物效应：你想出一个随机的想法，投入其中，然后在每个时间点（一天、一周、一个月）感觉你已经投入了这么多时间，这一定是这个想法。\n我们如何解决这个问题？我不认为我们应该放弃投入。投入想法是好事。解决方案在另一端：要意识到投入时间在某件事上并不能使它变好。\n这在名字的情况下最明显。Viaweb最初叫做Webgen，但我们发现有人已经有了一个叫这个名字的产品。我们非常喜欢我们的名字，以至于我们向他提供了公司5%的股份，如果他让我们使用这个名字。但他不愿意，所以我们不得不想另一个。[4] 我们能做的最好的是Viaweb，起初我们不喜欢它。这就像有了一个新母亲。但三天内我们就爱上了它，而Webgen听起来蹩脚而过时。\n如果改变像名字这样简单的东西都很困难，想象一下回收一个想法有多困难。名字在你头脑中只有一个附着点。一个公司的想法被编织到你的思想中。所以你必须有意识地为此打折扣。尽管投入，但记得以后在晨光中审视你的想法并问：这是人们愿意付费购买的东西吗？在我们可以制造的所有东西中，这是人们最愿意付费购买的东西吗？\n污秽 我们在Artix上犯 …"
  },{
    "title": "也许",
    "url": "/paul_graham/essays_zh/maybe/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n也许 2009年2月\n很多城市看着硅谷，问\u0026quot;我们如何能让这样的事情在这里发生？\u0026ldquo;做到这一点的自然方法是在富人想住的地方建立一流的大学。硅谷就是这样形成的。但是你能通过资助创业公司来缩短这个过程吗？\n有可能。让我们考虑一下需要什么。\n首先要理解的是，鼓励创业公司与鼓励特定城市的创业公司是两个不同的问题。后者要昂贵得多。\n人们有时认为他们可以通过在镇上创办类似Y Combinator的项目来改善当地的创业环境，但实际上这几乎没有任何效果。我知道是因为Y Combinator本身在波士顿呆了半年，对那里几乎没有影响。我们资助的人来自全国各地（实际上是世界各地），之后他们去了能获得更多资金的地方——通常意味着硅谷。\n种子投资业务不是区域性业务，因为在这个阶段，创业公司是流动的。他们只是几个带着笔记本电脑的创始人。[1]\n如果你想在特定城市鼓励创业公司，你必须资助那些不会离开的创业公司。有两种方法可以做到这一点：制定规则阻止他们离开，或者在它们自然扎根的时候资助它们。第一种方法是错误的，因为它成为了选择糟糕创业公司的过滤器。如果你的条款强迫创业公司做他们不想做的事情，只有绝望的人才会拿你的钱。\n好的创业公司会搬到另一个城市作为融资的条件。他们不会做的是同意在下次需要融资时不搬走。所以让他们留下的唯一方法是给他们足够的资金，让他们永远不需要离开。\n这需要多少钱？如果你想阻止创业公司离开你的城市，你必须给他们足够的资金，让他们不被那些要求他们搬到硅谷的风险投资公司的诱惑所动摇。如果一个创业公司已经成长到（a）在你的城市扎根和/或（b）如此成功以至于即使他们不搬，风险投资公司也会资助他们的程度，他们就能拒绝这样的提议。\n将一个创业公司发展到那个程度需要多少成本？至少几十万美元。Wufoo似乎用11.8万美元在坦帕扎根了，但他们是一个极端案例。平均来说，至少需要50万美元。\n所以，如果你认为通过像Y Combinator那样给每个创业公司1.5-2万美元就能在当地培育一个硅谷，那听起来太好了以至于不像真的，这是因为确实如此。要让他们留下来，你必须给他们至少20倍的资金。\n然而，即使如此，这也是一个有趣的前景。假设为了安全起见，每个创业公司需要100万美元。如果你能让每个创业公司用100万美元留在你的城市，那么用10亿美元你可以带来1000个创业公司。这可能不会让你超过硅谷本身，但可能会让你获得第二名。\n用一个足球场的价格，任何适合居住的城市都可以使自己成为世界上最大的创业中心之一。\n更重要的是，这不会花很长时间。你可能在五年内完成。在一个市长的任期内。而且随着时间的推移会变得更容易，因为你镇上的创业公司越多，让新创业公司搬来所需的条件就越少。当你的镇上有1000个创业公司时，风险投资公司就不会那么努力地试图让他们搬到硅谷；相反，他们会开设当地办事处。那时你真的就处于有利地位了。你已经开启了一个自我维持的连锁反应，就像驱动硅谷的那个一样。\n但现在困难的部分来了。你必须挑选创业公司。你怎么做到这一点？挑选创业公司是一种罕见而宝贵的技能，拥有这种技能的少数人并不容易雇佣。而且这种技能如此难以衡量，如果政府试图雇佣拥有这种技能的人，他们几乎肯定会选错人。\n例如，一个城市可以给风险投资基金钱来建立当地分支机构，让他们做出选择。但只有糟糕的风险投资基金才会接受这笔交易。他们在城市官员看来不会显得糟糕。他们会看起来非常令人印象深刻。但他们在挑选创业公司方面会很糟糕。这是风险投资公司的特征性失败模式。所有风险投资公司在有限合伙人看来都令人印象深刻。好的和坏的之间的区别只有在他们工作的另一半才会显现：选择和指导创业公司。[2]\n你真正想要的是一群当地的天使投资人——用自己创业赚来的钱投资的人。但不幸的是，你在这里遇到了鸡和蛋的问题。如果你的城市还不是创业中心，那里就不会有从创业公司致富的人。我想不出一个城市能如何吸引外来的天使投资人。根据定义，他们很富有。没有任何激励会让他们搬家。[3]\n然而，一个城市可以通过利用非本地投资者的专业知识来选择创业公司。列出最著名的硅谷天使投资人，然后从中生成他们投资过的所有创业公司的列表，这是相当直接的。如果一个城市向这些公司提供每人100万美元让他们搬来，很多早期阶段的创业公司可能会接受。\n尽管这个计划听起来很荒谬，但这可能是城市选择好的创业公司最有效的方式。\n与原来的投资者分离会对创业公司造成一些伤害。另一方面，额外的100万美元会给它们更多的跑道。\n移植的创业公司能生存下来吗？很有可能。找出答案的唯一方法是尝试。作为市政支出来说，这将是一个相当便宜的实验。选择30个著名天使投资人最近投资过的创业公司，如果他们愿意搬到你的城市，给他们每人100万美元，看看一年后会发生什么。如果他们似乎正在蓬勃发展，你可以尝试更大规模地引进创业公司。\n不要太法律化地对待他们被允许离开的条件。只需要有一个君子协议。\n不要试图在便宜的实验上只选择10个。如果你的规模太小，你只会保证失败。创业公司需要围绕其他创业公司。30个就足以感觉像一个社区。\n不要试图让他们都在你改成\u0026quot;孵化器\u0026quot;的翻新仓库里工作。真正的创业公司更喜欢在自己的空间里工作。\n实际上，不要对创业公司施加任何限制。创业公司创始人大多是黑客，黑客比法规更受君子协议的约束。如果他们就承诺与你握手，他们会遵守。但向他们展示一把锁，他们的第一个想法是如何撬开它。\n有趣的是，任何足够富有的私人公民都可以进行30个创业公司的实验。如果这成功了，会对城市造成什么压力。[4]\n城市应该拿股票作为回报吗？原则上他们有资格，但他们如何选择创业公司的估值？你不能给他们相同的估值：这对一些来说太低（他们会拒绝你），对另一些来说太高（因为这可能使他们的下一轮成为\u0026quot;低价轮\u0026rdquo;）。既然我们假设我们在没有能力挑选创业公司的情况下这样做，我们也必须假设我们无法评估它们，因为这几乎是同一件事。\n不在创业公司中持股的另一个原因是创业公司经常涉及不光彩的事情。成熟公司也是如此，但他们不会因此受到指责。如果有人被在Facebook上认识的人谋杀，媒体会把这个故事当作是关于Facebook的来报道。如果有人被在超市认识的人谋杀，媒体只会把它当作一个谋杀案来报道。所以要明白，如果你投资创业公司，他们可能会构建被用于色情、文件共享或表达不受欢迎观点的东西。你可能应该与你的政治对手共同赞助这个项目，这样他们就不能用创业公司所做的事情作为打击你的武器。\n然而，仅仅给创业公司钱也会带来太多的政治责任。所以最好的计划是让它成为可转换债券，但除非在非常大的一轮融资中，比如2000万美元，否则不转换。\n这个计划的效果如何取决于城市。有些城镇，如波特兰，很容易变成创业中心，而其他地方，如底特律，真的会是一场艰苦的战斗。所以在尝试之前，要诚实地面对自己城市的情况。\n这将与你的城市与旧金山的相似程度成正比。你们有好天气吗？人们住市中心吗，还是他们已经放弃了市中心去了郊区？这个城市会被描述为\u0026quot;时髦\u0026quot;和\u0026quot;宽容\u0026quot;，还是反映\u0026quot;传统价值观\u0026quot;？附近有好大学吗？有适合步行的社区吗？书呆子会觉得自在吗？如果你对所有这些问题的回答都是肯定的，你可能不仅能成功实施这个计划，而且每个创业公司的成本可能不到100万美元。\n我意识到任何城市都有政治意愿来执行这个计划的机会微乎其微。我只是想探索如果有城市这样做，需要什么。启动一个硅谷有多难？想到这么多城市都能达到这个目标是令人着迷的。所以即使他们仍然会在体育场上花钱，至少现在有人可以问他们：你为什么选择这样做，而不是成为硅谷的真正竞争对手？\n注释\n[1] 创办这些所谓本地种子公司的人总是发现（a）他们的申请者来自各地，不仅仅是本地，（b）本地创业公司也申请其他种子公司。所以最终发生的是申请人池按质量而不是地理位置划分。\n[2] 有趣的是，糟糕的风险投资公司通过选择由像他们这样的人经营的创业公司而失败——那些善于演讲但没有实质内容的人。这是假货领导假货的情况。而且由于所有相关人员都如此令人信服，投资这些基金的有限合伙人在衡量回报之前都不知道发生了什么。\n[3] 我怀疑即使是避税天堂也不行。这让一些富人搬家，但不是那种会成为创业公司好天使投资人的人。\n[4] 感谢Michael Keenan指出这一点。\n感谢Trevor Blackwell、Jessica Livingston、Robert Morris和Fred Wilson阅读草稿。\n",
    "description": "",
    "tags": ["硅谷","创业公司","融资","城市","企业家精神"],
    "categories": [],
    "content": "→ English Version\n也许 2009年2月\n很多城市看着硅谷，问\u0026quot;我们如何能让这样的事情在这里发生？\u0026ldquo;做到这一点的自然方法是在富人想住的地方建立一流的大学。硅谷就是这样形成的。但是你能通过资助创业公司来缩短这个过程吗？\n有可能。让我们考虑一下需要什么。\n首先要理解的是，鼓励创业公司与鼓励特定城市的创业公司是两个不同的问题。后者要昂贵得多。\n人们有时认为他们可以通过在镇上创办类似Y Combinator的项目来改善当地的创业环境，但实际上这几乎没有任何效果。我知道是因为Y Combinator本身在波士顿呆了半年，对那里几乎没有影响。我们资助的人来自全国各地（实际上是世界各地），之后他们去了能获得更多资金的地方——通常意味着硅谷。\n种子投资业务不是区域性业务，因为在这个阶段，创业公司是流动的。他们只是几个带着笔记本电脑的创始人。[1]\n如果你想在特定城市鼓励创业公司，你必须资助那些不会离开的创业公司。有两种方法可以做到这一点：制定规则阻止他们离开，或者在它们自然扎根的时候资助它们。第一种方法是错误的，因为它成为了选择糟糕创业公司的过滤器。如果你的条款强迫创业公司做他们不想做的事情，只有绝望的人才会拿你的钱。\n好的创业公司会搬到另一个城市作为融资的条件。他们不会做的是同意在下次需要融资时不搬走。所以让他们留下的唯一方法是给他们足够的资金，让他们永远不需要离开。\n这需要多少钱？如果你想阻止创业公司离开你的城市，你必须给他们足够的资金，让他们不被那些要求他们搬到硅谷的风险投资公司的诱惑所动摇。如果一个创业公司已经成长到（a）在你的城市扎根和/或（b）如此成功以至于即使他们不搬，风险投资公司也会资助他们的程度，他们就能拒绝这样的提议。\n将一个创业公司发展到那个程度需要多少成本？至少几十万美元。Wufoo似乎用11.8万美元在坦帕扎根了，但他们是一个极端案例。平均来说，至少需要50万美元。\n所以，如果你认为通过像Y Combinator那样给每个创业公司1.5-2万美元就能在当地培育一个硅谷，那听起来太好了以至于不像真的，这是因为确实如此。要让他们留下来，你必须给他们至少20倍的资金。\n然而，即使如此，这也是一个有趣的前景。假设为了安全起见，每个创业公司需要100万美元。如果你能让每个创业公司用100万美元留在你的城市，那么用10亿美元你可以带来1000个创业公司。这可能不会让你超过硅谷本身，但可能会让你获得第二名。\n用一个足球场的价格，任何适合居住的城市都可以使自己成为世界上最大的创业中心之一。\n更重要的是，这不会花很长时间。你可能在五年内完成。在一个市长的任期内。而且随着时间的推移会变得更容易，因为你镇上的创业公司越多，让新创业公司搬来所需的条件就越少。当你的镇上有1000个创业公司时，风险投资公司就不会那么努力地试图让他们搬到硅谷；相反，他们会开设当地办事处。那时你真的就处于有利地位了。你已经开启了一个自我维持的连锁反应，就像驱动硅谷的那个一样。\n但现在困难的部分来了。你必须挑选创业公司。你怎么做到这一点？挑选创业公司是一种罕见而宝贵的技能，拥有这种技能的少数人并不容易雇佣。而且这种技能如此难以衡量，如果政府试图雇佣拥有这种技能的人，他们几乎肯定会选错人。\n例如，一个城市可以给风险投资基金钱来建立当地分支机构，让他们做出选择。但只有糟糕的风险投资基金才会接受这笔交易。他们在城市官员看来不会显得糟糕。他们会看起来非常令人印象深刻。但他们在挑选创业公司方面会很糟糕。这是风险投资公司的特征性失败模式。所有风险投资公司在有限合伙人看来都令人印象深刻。好的和坏的之间的区别只有在他们工作的另一半才会显现：选择和指导创业公司。[2]\n你真正想要的是一群当地的天使投资人——用自己创业赚来的钱投资的人。但不幸的是，你在这里遇到了鸡和蛋的问题。如果你的城市还不是创业中心，那里就不会有从创业公司致富的人。我想不出一个城市能如何吸引外来的天使投资人。根据定义，他们很富有。没有任何激励会让他们搬家。[3]\n然而，一个城市可以通过利用非本地投资者的专业知识来选择创业公司。列出最著名的硅谷天使投资人，然后从中生成他们投资过的所有创业公司的列表，这是相当直接的。如果一个城市向这些公司提供每人100万美元让他们搬来，很多早期阶段的创业公司可能会接受。\n尽管这个计划听起来很荒谬，但这可能是城市选择好的创业公司最有效的方式。\n与原来的投资者分离会对创业公司造成一些伤害。另一方面，额外的100万美元会给它们更多的跑道。\n移植的创业公司能生存下来吗？很有可能。找出答案的唯一方法是尝试。作为市政支出来说，这将是一个相当便宜的实验。选择30个著名天使投资人最近投资过的创业公司，如果他们愿意搬到你的城市，给他们每人100万美元，看看一年后会发生 …"
  },{
    "title": "书呆子的复仇",
    "url": "/paul_graham/essays_zh/icad/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n书呆子的复仇 想要创业？获得Y Combinator的投资。\n2002年5月\n\u0026ldquo;我们当时在追逐C++程序员。我们成功地将他们中的许多人拖到了Lisp的路上。\u0026rdquo;\nGuy Steele，Java规范合著者 在软件行业中，一直存在着一场持续的斗争，一方是尖脑袋的学者，另一方是同样强大的力量——尖头发的老板。大家都知道尖头发的老板是谁，对吧？我认为技术界的大多数人不仅认识这个卡通人物，而且知道他们公司中这个人物的原型是谁。\n尖头发的老板奇迹般地结合了两个各自常见但很少同时出现的品质：(a)他对技术一无所知，(b)他对技术有非常强烈的看法。\n假设，例如，你需要编写一个软件。尖头发的老板对这个软件应该如何工作一无所知，也无法区分一种编程语言和另一种，但他知道你应该用什么语言来编写它。完全正确。他认为你应该用Java来编写。\n他为什么这么认为？让我们来看看尖头发的老板的大脑里面在想什么。他在想的大概是这样的。Java是一个标准。我知道它一定是标准，因为我总是在媒体上看到它。既然它是标准，我使用它就不会惹上麻烦。这也意味着总会有很多Java程序员，所以如果现在为我工作的程序员辞职了——为我工作的程序员总是神秘地辞职——我可以很容易地替换他们。\n嗯，这听起来并不那么不合理。但这一切都基于一个未言明的假设，而这个假设结果是错误的。尖头发的老板认为所有编程语言都差不多是等价的。如果这是真的，那他完全正确。如果所有语言都等价，当然，使用其他人都在使用的语言。\n但并非所有语言都是等价的，我想我甚至不需要深入它们之间的差异就能向你证明这一点。如果你在1992年问尖头发的老板软件应该用什么语言编写，他会像今天一样毫不犹豫地回答。软件应该用C++编写。但如果所有语言都等价，为什么尖头发的老板的意见会改变？事实上，Java的开发者为什么要费心创建一种新语言？\n据推测，如果你创建一种新语言，那是因为你认为它在某些方面比人们已有的语言更好。事实上，Gosling在第一份Java白皮书中明确表示，Java被设计用来解决C++的一些问题。所以事情就是这样：语言并不都是等价的。如果你顺着尖头发的老板的大脑思路追踪到Java，然后再回溯Java的历史到它的起源，你最终会得到一个与你开始时的假设相矛盾的想法。\n那么，谁是对的？James Gosling，还是尖头发的老板？毫不奇怪，Gosling是对的。某些语言对于某些问题来说比其他语言更好。你知道，这引发了一些有趣的问题。Java被设计为在特定问题上比C++更好。什么问题？什么时候Java更好，什么时候C++更好？是否存在某些情况下其他语言比两者都更好？\n一旦你开始考虑这个问题，你就打开了一个真正的潘多拉盒子。如果尖头发的老板不得不以全部复杂性来思考这个问题，他的大脑会爆炸。只要他认为所有语言都等价，他所要做的就是选择一个似乎最有势头的语言，既然这更多是时尚问题而不是技术问题，即使他也可能得到正确的答案。但如果语言各不相同，他突然必须同时解两个方程，试图在他一无所知的两件事之间找到最佳平衡：解决他需要解决的问题的二十种左右主要语言的相对适用性，以及为每种语言找到程序员、库等的可能性。如果门后是这样的东西，尖头发的老板不想打开它也就不足为奇了。\n认为所有编程语言都等价的缺点是这不是真的。但优点是它让你的生活简单得多。我认为这是这个想法如此广泛传播的主要原因。这是一个令人舒适的想法。\n我们知道Java一定相当不错，因为它是酷的、新的编程语言。或者真是如此吗？如果你从远处看编程语言的世界，看起来Java是最新的事物。（从足够远的地方看，你只能看到Sun支付的大型闪烁广告牌。）但如果你近距离观察这个世界，你会发现酷的程度是不同的。在黑客亚文化中，有一种叫做Perl的语言被认为比Java酷得多。例如，Slashdot就是用Perl生成的。我想你不会发现那些家伙使用Java Server Pages。但还有另一种更新的语言叫做Python，它的用户倾向于看不起Perl，还有更多的语言在等待。\n如果你按顺序看这些语言，Java、Perl、Python，你会注意到一个有趣的模式。至少，如果你是Lisp黑客，你会注意到这种模式。每一种都比前一种更像Lisp。Python甚至复制了许多Lisp黑客认为是错误的特性。你可以将简单的Lisp程序逐行翻译成Python。现在是2002年，编程语言几乎赶上了1958年。\n追上数学 我的意思是，Lisp是John McCarthy在1958年首次发现的，而流行的编程语言现在才赶上他当时发展的想法。\n现在，这怎么可能是真的？计算机技术不是变化很快的东西吗？我的意思是，在1958年，计算机是冰箱大小的庞然大物，处理能力相当于手表。怎么可能有那么古老的技术仍然相关，更不用说比最新的发展更优越？\n我来告诉你原因。这是因为Lisp并不是真正被设计为一种编程语言，至少不是我们今天意义上的编程语言。我们所说的编程语言是我们用来告诉计算机做什么的东西。McCarthy最终确实打算发展这种意义上的编程语言，但我们实际得到的Lisp是基于他作为理论练习所做的另一件事——努力定义一个比图灵机更方便的替代方案。正如McCarthy后来所说，\n展示Lisp比图灵机更整洁的另一种方法是编写一个通用的Lisp函数，并证明它比通用图灵机的描述更简洁、更易理解。这就是Lisp函数eval\u0026hellip;\u0026hellip;它计算Lisp表达式的值\u0026hellip;\u0026hellip;编写eval需要发明一种表示Lisp函数作为Lisp数据的符号，这种符号是为了论文的目的而设计的，并没有想到它会用来实际表达Lisp程序。\n接下来发生的事情是，在1958年末的某个时候，Steve Russell，McCarthy的一个研究生，看着这个eval的定义，意识到如果将它翻译成机器语言，结果将是一个Lisp解释器。\n这在当时是一个很大的惊喜。以下是McCarthy后来在采访中对此的评论：\nSteve Russell说，看，为什么我不来编程这个eval\u0026hellip;\u0026hellip;，我对他说，呵，呵，你把理论和实践混淆了，这个eval是为了阅读，不是为了计算的。但他还是继续做了。也就是说，他把我论文中的eval编译成[IBM] 704机器码，修复了一些错误，然后将其宣传为Lisp解释器，它确实是。在那时，Lisp基本上就有了今天的形式。\n所以，我想在几周内，McCarthy发现他的理论练习转变为实际的编程语言——而且是一种比他预期更强大的语言。\n所以，这个1950年代的语言没有过时的简短解释是它不是技术而是数学，而数学不会过时。将Lisp比较的正确对象不是1950年代的硬件，而是，比如说，快速排序算法，它发现于1960年，至今仍然是最快的通用排序算法。\n1950年代还有另一种语言幸存下来，Fortran，它代表了语言设计的相反方法。Lisp是一段意想不到地转变为编程语言的理论。Fortran是故意被开发为一种编程语言的，但我们现在认为是一种非常低级的语言。\n1956年开发的Fortran I语言与现在的Fortran是完全不同的动物。Fortran I基本上是带有数学的汇编语言。在某些方面它比最近的汇编语言功能更弱；例如，没有子程序，只有分支。现在的Fortran可以说更接近Lisp而不是Fortran I。\nLisp和Fortran是两个独立进化树的树干，一个根植于数学，一个根植于机器架构。这两棵树从那时起一直在收敛。Lisp开始时很强大，在接下来的二十年里变得快速。所谓的主流语言开始时很快，在接下来的四十年里逐渐变得更强大，直到现在它们中最先进的相当接近Lisp。接近，但仍然缺少一些东西。\n使Lisp不同的东西 当Lisp首次被开发时，它体现了九个新想法。其中一些我们现在认为是理所当然的，其他只在更先进的语言中看到，有两个仍然是Lisp独有的。这九个想法按主流采用的顺序排列，\n条件语句。条件语句是if-then-else结构。我们现在认为这是理所当然的，但Fortran I没有它们。它只有基于底层机器指令的条件goto。\n函数类型。在Lisp中，函数是一种像整数或字符串一样的数据类型。它们有字面表示，可以存储在变量中，可以作为参数传递，等等。\n递归。Lisp是第一种支持递归的编程语言。\n动态类型。在Lisp中，所有变量实际上都是指针。值才有类型，变量没有，赋值或绑定变量意味着复制指针，而不是它们指向的内容。\n垃圾回收。\n由表达式组成的程序。Lisp程序是表达式的树，每个表达式都返回一个值。这与Fortran和大多数后续语言形成对比，它们区分表达式和语句。\n在Fortran I中很自然要有这种区别，因为你不能嵌套语句。所以虽然你需要表达式来进行数学运算，但没有必要让其他任何东西返回值，因为不可能有任何东西在等待它。\n随着块结构语言的出现，这种限制消失了，但那时已经太晚了。表达式和语句的区别已经根深蒂固。它从Fortran传播到Algol，然后传播到它们两者的后代。\n符号类型。符号实际上是指向存储在哈希表中的字符串的指针。所以你可以通过比较指针来测试相等性，而不是比较每个字符。\n使用符号和常量树的代码表示法。\n整个语言一直存在。读取时、编译时和运行时之间没有真正的区别。你可以在读取时编译或运行代码，在编译时读取或运行代码，在运行时读取或编译代码。\n在读取时运行代码允许用户重新编程Lisp的语法；在编译时运行代码是宏的基础；在运行时编译是Lisp在Emacs等程序中用作扩展语言的基础；在运行时读取使程序能够使用s表达式进行通信，这是一个最近重新发明的想法，称为XML。\n当Lisp首次出现时，这些想法与普通的编程实践相距甚远，这在很大程度上是由1950年代后期可用的硬件决定的。随着时间的推移，默认语言，体现在一系列流行语言中，逐渐向Lisp发展。想法1-5现在已经广泛传播。数字6开始出现在主流中。Python有7的形式，尽管似乎没有任何语法。\n至于数字8，这可能是最有趣的。想法8和9只是偶然成为Lisp的一部分，因为Steve Russell实现了McCarthy从未打算实现的东西。然而，这些想法结果要对Lisp的奇怪外观和其最独特的特征负责。Lisp看起来奇怪不是因为它有奇怪的语法，而是因为它没有语法；你直接在解析树中表达程序，当其他语言被解析时，这些解析树是在幕后构建的，而这些树是由列表组成的，列表是Lisp数据结构。\n用其自身的数据结构表达语言结果证明是一个非常强大的特性。想法8和9一起意味着你可以编写编写程序的程序。这可能听起来像是一个奇怪的想法，但在Lisp中这是日常的事情。最常见的方法是使用叫做宏的东西。\n\u0026ldquo;宏\u0026quot;这个术语在Lisp中的含义与其他语言中的含义不同。Lisp宏可以是从缩写到新语言编译器的任何东西。如果你想真正理解Lisp，或者只是扩展你的编程视野，我会学习更多关于宏的知识。\n据我所知，Lisp意义上的宏仍然是Lisp独有的。这部分是因为为了拥有宏，你可能必须使你的语言看起来像Lisp一样奇怪。也可能是因为如果你确实添加了这最后的力量增量，你不能再声称你发明了一种新语言，只是一种新的Lisp方言。\n我提到这主要是作为一个笑话，但这是相当真实的。如果你定义一种具有car、cdr、cons、quote、cond、atom、eq和函数列表表示法的语言，那么你可以从中构建出所有其余的Lisp。这实际上是Lisp的定义品质：McCarthy给予Lisp现在的形状就是为了使这一点成为可能。\n语言重要的地方 所以假设Lisp确实代表了主流语言渐近接近的一种极限——这是否意味着你实际上应该使用它来编写软件？使用不太强大的语言你会失去多少？有时候，不处于创新的最前沿不是更明智吗？受欢迎度在某种程度上不是其自身的证明吗？例如，尖头发的老板想要使用一种他可以轻松雇到程序员的语言，难道不对吗？\n当然，有些项目编程语言的选择并不重要。通常，应用程序要求越高，使用强大语言获得的优势就越大。但很多项目根本不要求高。大多数编程可能包括编写小的粘合程序，对于小的粘合程序，你可以使用任何你已经熟悉的语言，并且对于你需要做的事情有好的库。如果你只需要将数据从一个Windows应用程序馈送到另一个，当然，使用Visual Basic。\n",
    "description": "",
    "tags": ["Lisp","编程语言","软件开发","技术","创新","创业"],
    "categories": [],
    "content": "→ English Version\n书呆子的复仇 想要创业？获得Y Combinator的投资。\n2002年5月\n\u0026ldquo;我们当时在追逐C++程序员。我们成功地将他们中的许多人拖到了Lisp的路上。\u0026rdquo;\nGuy Steele，Java规范合著者 在软件行业中，一直存在着一场持续的斗争，一方是尖脑袋的学者，另一方是同样强大的力量——尖头发的老板。大家都知道尖头发的老板是谁，对吧？我认为技术界的大多数人不仅认识这个卡通人物，而且知道他们公司中这个人物的原型是谁。\n尖头发的老板奇迹般地结合了两个各自常见但很少同时出现的品质：(a)他对技术一无所知，(b)他对技术有非常强烈的看法。\n假设，例如，你需要编写一个软件。尖头发的老板对这个软件应该如何工作一无所知，也无法区分一种编程语言和另一种，但他知道你应该用什么语言来编写它。完全正确。他认为你应该用Java来编写。\n他为什么这么认为？让我们来看看尖头发的老板的大脑里面在想什么。他在想的大概是这样的。Java是一个标准。我知道它一定是标准，因为我总是在媒体上看到它。既然它是标准，我使用它就不会惹上麻烦。这也意味着总会有很多Java程序员，所以如果现在为我工作的程序员辞职了——为我工作的程序员总是神秘地辞职——我可以很容易地替换他们。\n嗯，这听起来并不那么不合理。但这一切都基于一个未言明的假设，而这个假设结果是错误的。尖头发的老板认为所有编程语言都差不多是等价的。如果这是真的，那他完全正确。如果所有语言都等价，当然，使用其他人都在使用的语言。\n但并非所有语言都是等价的，我想我甚至不需要深入它们之间的差异就能向你证明这一点。如果你在1992年问尖头发的老板软件应该用什么语言编写，他会像今天一样毫不犹豫地回答。软件应该用C++编写。但如果所有语言都等价，为什么尖头发的老板的意见会改变？事实上，Java的开发者为什么要费心创建一种新语言？\n据推测，如果你创建一种新语言，那是因为你认为它在某些方面比人们已有的语言更好。事实上，Gosling在第一份Java白皮书中明确表示，Java被设计用来解决C++的一些问题。所以事情就是这样：语言并不都是等价的。如果你顺着尖头发的老板的大脑思路追踪到Java，然后再回溯Java的历史到它的起源，你最终会得到一个与你开始时的假设相矛盾的想法。\n那么，谁是对的？James Gosling，还是尖头发的老板？毫不奇怪，Gosling是对的。某些语言对于某些问题来说比其他语言更好。你知道，这引发了一些有趣的问题。Java被设计为在特定问题上比C++更好。什么问题？什么时候Java更好，什么时候C++更好？是否存在某些情况下其他语言比两者都更好？\n一旦你开始考虑这个问题，你就打开了一个真正的潘多拉盒子。如果尖头发的老板不得不以全部复杂性来思考这个问题，他的大脑会爆炸。只要他认为所有语言都等价，他所要做的就是选择一个似乎最有势头的语言，既然这更多是时尚问题而不是技术问题，即使他也可能得到正确的答案。但如果语言各不相同，他突然必须同时解两个方程，试图在他一无所知的两件事之间找到最佳平衡：解决他需要解决的问题的二十种左右主要语言的相对适用性，以及为每种语言找到程序员、库等的可能性。如果门后是这样的东西，尖头发的老板不想打开它也就不足为奇了。\n认为所有编程语言都等价的缺点是这不是真的。但优点是它让你的生活简单得多。我认为这是这个想法如此广泛传播的主要原因。这是一个令人舒适的想法。\n我们知道Java一定相当不错，因为它是酷的、新的编程语言。或者真是如此吗？如果你从远处看编程语言的世界，看起来Java是最新的事物。（从足够远的地方看，你只能看到Sun支付的大型闪烁广告牌。）但如果你近距离观察这个世界，你会发现酷的程度是不同的。在黑客亚文化中，有一种叫做Perl的语言被认为比Java酷得多。例如，Slashdot就是用Perl生成的。我想你不会发现那些家伙使用Java Server Pages。但还有另一种更新的语言叫做Python，它的用户倾向于看不起Perl，还有更多的语言在等待。\n如果你按顺序看这些语言，Java、Perl、Python，你会注意到一个有趣的模式。至少，如果你是Lisp黑客，你会注意到这种模式。每一种都比前一种更像Lisp。Python甚至复制了许多Lisp黑客认为是错误的特性。你可以将简单的Lisp程序逐行翻译成Python。现在是2002年，编程语言几乎赶上了1958年。\n追上数学 我的意思是，Lisp是John McCarthy在1958年首次发现的，而流行的编程语言现在才赶上他当时发展的想法。\n现在，这怎么可能是真的？计算机技术不是变化很快的东西吗？我的意思是，在1958年，计算机是冰箱大小的庞然大物，处理能力相当于手表。怎么可能有那么古老 …"
  },{
    "title": "五位创始人",
    "url": "/paul_graham/essays_zh/5founders/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n五位创始人 五位创始人 2009年4月\nInc最近问我，我认为过去30年中最有趣的5位创业创始人是谁。你如何决定谁是最有趣的？最好的标准似乎是影响力：哪5个人对我影响最大？当我与我们投资的公司交谈时，我会用谁作为例子？我发现自己经常引用谁的话？\n史蒂夫·乔布斯 我猜史蒂夫不仅对我，而且对大多数人来说都是最有影响力的创始人。很多创业文化都是苹果文化。他是最初的年轻创始人。虽然\u0026quot;疯狂伟大\u0026quot;的概念在艺术界已经存在，但在20世纪80年代将其引入公司是一个新颖的想法。\n更值得注意的是，他在30年里一直保持着人们的兴趣。人们期待新的苹果产品，就像期待受欢迎小说家的新书一样。史蒂夫可能不是亲自设计它们，但如果没有他担任CEO，这些产品就不会出现。\n史蒂夫聪明且充满动力，但硅谷的很多人也是如此。使他独特的是他的设计感。在他之前，大多数公司把设计看作是多余的奢侈品。苹果的竞争对手现在明白了这一点。\nTJ·罗杰斯 TJ·罗杰斯不像史蒂夫·乔布斯那么出名，但他可能是硅谷CEO中最好的作家。关于创业思维方式，我从他那里学到的可能比从任何其他人都多。不是从他写的具体内容，而是通过重构产生这些思想的思维：极其坦率；积极地淘汰过时的想法；但受实用主义而不是意识形态驱动。\n我读到的他的第一篇文章是如此令人振奋，以至于我清楚地记得当时在哪里。那是《高科技创新：自由市场还是政府补贴？》，我当时在哈佛广场T站的楼下。感觉就像有人在我脑中打开了一个电灯开关。\n拉里和谢尔盖 我很抱歉把拉里和谢尔盖当作一个人来对待。我一直认为这对他们不公平。但谷歌确实似乎是一次合作。\n在谷歌之前，硅谷的公司已经知道拥有最好的黑客很重要。至少他们是这么声称的。但谷歌比任何人都更进一步地推动了这个想法。他们的假设似乎是，至少在初始阶段，你只需要优秀的黑客：如果你雇佣所有最聪明的人，让他们在可以衡量其成功的问题上工作，你就会赢。其他所有东西——包括商学院认为商业所包含的所有东西——你可以在过程中弄清楚。结果不会完美，但它们会是最佳的。如果这是他们的假设，现在已经被实验验证了。\n保罗·布赫海特 很少有人知道这一点，但有一个人，保罗·布赫海特，负责谷歌所做的三件最好的事情。他是GMail的原创作者，这是谷歌在搜索之后最令人印象深刻的东西。他还写了AdSense的第一个原型，是谷歌口号\u0026quot;不要作恶\u0026quot;的作者。\nPB在一次演讲中提出的观点，现在我对我们资助的每家创业公司都提到：最初，让少数用户真正喜欢你比让大量用户有点喜欢你更好。如果我只能告诉创业公司十句话，这会是其中之一。\n现在他是一家名为Friendfeed的创业公司的联合创始人。它才成立一年，但硅谷的每个人已经在关注他们。一个对谷歌的三个最大想法负责的人将会想出更多。\n萨姆·奥特曼 有人告诉我，我不应该在这个名单中提到YC资助公司的创始人。但萨姆·奥特曼不会被这样脆弱的规则阻止。如果他想在这个名单上，他就会在。\n说实话，萨姆和史蒂夫·乔布斯一样，是我向创业公司提供建议时最常提到的创始人。在设计问题上，我问\u0026quot;史蒂夫会怎么做？\u0026ldquo;但在战略或抱负问题上，我问\u0026quot;萨马会怎么做？\u0026rdquo;\n从与萨马会面中我学到的是，选民教义适用于创业公司。它适用的程度远比大多数人认为的要少：创业投资并不像赛马那样试图挑选获胜者。但有几个人具有如此强大的意志力，他们将得到他们想要的任何东西。\n",
    "description": "",
    "tags": ["创业","创始人","史蒂夫·乔布斯","谷歌","保罗·布赫海特","萨姆·奥特曼"],
    "categories": [],
    "content": "→ English Version\n五位创始人 五位创始人 2009年4月\nInc最近问我，我认为过去30年中最有趣的5位创业创始人是谁。你如何决定谁是最有趣的？最好的标准似乎是影响力：哪5个人对我影响最大？当我与我们投资的公司交谈时，我会用谁作为例子？我发现自己经常引用谁的话？\n史蒂夫·乔布斯 我猜史蒂夫不仅对我，而且对大多数人来说都是最有影响力的创始人。很多创业文化都是苹果文化。他是最初的年轻创始人。虽然\u0026quot;疯狂伟大\u0026quot;的概念在艺术界已经存在，但在20世纪80年代将其引入公司是一个新颖的想法。\n更值得注意的是，他在30年里一直保持着人们的兴趣。人们期待新的苹果产品，就像期待受欢迎小说家的新书一样。史蒂夫可能不是亲自设计它们，但如果没有他担任CEO，这些产品就不会出现。\n史蒂夫聪明且充满动力，但硅谷的很多人也是如此。使他独特的是他的设计感。在他之前，大多数公司把设计看作是多余的奢侈品。苹果的竞争对手现在明白了这一点。\nTJ·罗杰斯 TJ·罗杰斯不像史蒂夫·乔布斯那么出名，但他可能是硅谷CEO中最好的作家。关于创业思维方式，我从他那里学到的可能比从任何其他人都多。不是从他写的具体内容，而是通过重构产生这些思想的思维：极其坦率；积极地淘汰过时的想法；但受实用主义而不是意识形态驱动。\n我读到的他的第一篇文章是如此令人振奋，以至于我清楚地记得当时在哪里。那是《高科技创新：自由市场还是政府补贴？》，我当时在哈佛广场T站的楼下。感觉就像有人在我脑中打开了一个电灯开关。\n拉里和谢尔盖 我很抱歉把拉里和谢尔盖当作一个人来对待。我一直认为这对他们不公平。但谷歌确实似乎是一次合作。\n在谷歌之前，硅谷的公司已经知道拥有最好的黑客很重要。至少他们是这么声称的。但谷歌比任何人都更进一步地推动了这个想法。他们的假设似乎是，至少在初始阶段，你只需要优秀的黑客：如果你雇佣所有最聪明的人，让他们在可以衡量其成功的问题上工作，你就会赢。其他所有东西——包括商学院认为商业所包含的所有东西——你可以在过程中弄清楚。结果不会完美，但它们会是最佳的。如果这是他们的假设，现在已经被实验验证了。\n保罗·布赫海特 很少有人知道这一点，但有一个人，保罗·布赫海特，负责谷歌所做的三件最好的事情。他是GMail的原创作者，这是谷歌在搜索之后最令人印象深刻的东西。他还写了AdSense的第一个原型，是谷歌口号\u0026quot;不要作恶\u0026quot;的作者。\nPB在一次演讲中提出的观点，现在我对我们资助的每家创业公司都提到：最初，让少数用户真正喜欢你比让大量用户有点喜欢你更好。如果我只能告诉创业公司十句话，这会是其中之一。\n现在他是一家名为Friendfeed的创业公司的联合创始人。它才成立一年，但硅谷的每个人已经在关注他们。一个对谷歌的三个最大想法负责的人将会想出更多。\n萨姆·奥特曼 有人告诉我，我不应该在这个名单中提到YC资助公司的创始人。但萨姆·奥特曼不会被这样脆弱的规则阻止。如果他想在这个名单上，他就会在。\n说实话，萨姆和史蒂夫·乔布斯一样，是我向创业公司提供建议时最常提到的创始人。在设计问题上，我问\u0026quot;史蒂夫会怎么做？\u0026ldquo;但在战略或抱负问题上，我问\u0026quot;萨马会怎么做？\u0026rdquo;\n从与萨马会面中我学到的是，选民教义适用于创业公司。它适用的程度远比大多数人认为的要少：创业投资并不像赛马那样试图挑选获胜者。但有几个人具有如此强大的意志力，他们将得到他们想要的任何东西。\n"
  },{
    "title": "人生苦短",
    "url": "/paul_graham/essays_zh/vb/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n人生苦短 2016年1月\n人生苦短，这是每个人都知道的。当我还是个孩子的时候，我常常思考这个问题。人生真的很短，还是我们只是在抱怨它的有限性？如果我们能活10倍长的时间，我们是否还会觉得人生短暂？\n由于似乎没有办法回答这个问题，我停止了思考这个问题。然后我有了孩子。这给了我一个回答这个问题的方法，答案是人生确实很短暂。\n有孩子让我明白如何将一个连续的量——时间——转换成离散的量。你和你的2岁孩子只有52个周末。如果圣诞节的魔力从比如说3岁持续到10岁，你只能看着你的孩子体验它8次。虽然很难说什么是一个连续量如时间的多或少，但8个某种东西确实不多。如果你有一把8颗花生，或者一个架子上只有8本书可供选择，无论你的寿命有多长，这个数量肯定会显得有限。\n好吧，所以人生确实很短暂。知道这一点有什么不同吗？\n对我来说有。这意味着\u0026quot;人生太短了，不适合做x\u0026quot;这种论点有很大的力量。说人生太短不适合做某事，这不仅仅是一种比喻说法。它不仅仅是讨厌的同义词。如果你发现自己认为人生太短不适合做某事，如果可能的话，你应该努力消除它。\n当我问自己我发现人生太短不适合做什么时，我脑海中浮现的词是\u0026quot;浪费时间\u0026quot;。我意识到这个答案有点同义反复。浪费时间的定义几乎就是人生太短不适合做的事情。然而，浪费时间确实有独特的特征。它有虚假的东西。它是经验的垃圾食品。[1]\n如果你问自己你把时间花在什么浪费时间的事情上，你可能已经知道答案了。不必要的会议、无意义的争论、官僚主义、装模作样、处理别人的错误、交通堵塞、让人上瘾但没有回报的消遣。\n这种事情进入你的生活有两种方式：要么是强加给你的，要么是欺骗了你。在某种程度上，你必须忍受环境强加给你的浪费时间。你需要赚钱，而赚钱主要就是跑腿。事实上，供求法则确保了这一点：某种工作越有回报，人们就会越便宜地去做。然而，强加给你的浪费时间可能比你想象的要少。总有一群人选择退出常规的苦差事，去生活在机会在传统意义上较少但生活感觉更真实的地方。这可能会变得更加普遍。\n你可以在不搬家的情况下在小规模上做到这一点。你必须在浪费时间上花费的时间因雇主而异。大多数大型组织（以及许多小型组织）都深陷其中。但如果你有意识地将避免浪费时间优先于金钱和声望等其他因素，你可能会找到浪费你较少时间的雇主。\n如果你是自由职业者或小公司，你可以在个别客户的层面上做到这一点。如果你解雇或避免有毒的客户，你可以减少生活中的浪费时间，而且减少的幅度超过你收入的减少。\n但是，虽然有些浪费时间不可避免地强加给你，但通过欺骗潜入你生活的浪费时间除了你自己之外没有人的错。然而，你选择的浪费时间可能比强加给你的更难消除。引诱你浪费时间的事情必须非常擅长欺骗你。很多人熟悉的一个例子是在网上争论。当有人反驳你时，在某种意义上他们是在攻击你。有时相当公开。你被攻击时的本能是为自己辩护。但像许多本能一样，这个本能不是为我们现在生活的世界设计的。感觉违反直觉的是，大多数时候最好不要为自己辩护。否则这些人实际上是在夺走你的生命。[2]\n网上争论只是偶尔上瘾。还有比这更危险的事情。正如我之前写过的，技术进步的一个副产品是我们喜欢的东西往往会变得更加令人上瘾。这意味着我们将越来越需要有意识地努力避免上瘾——站在自己之外问\u0026quot;这是我想花时间的方式吗？\u0026quot;\n除了避免浪费时间，还应该积极寻找重要的事情。但不同的事情对不同的人重要，大多数人必须学会什么对他们重要。少数人很幸运，很早就意识到他们热爱数学或照顾动物或写作，然后想出方法花大量时间做这件事。但大多数人的生活开始时是重要和不重要事情的混合，只有逐渐学会区分它们。\n特别是对年轻人来说，这种困惑的大部分是由他们发现自己所处的人为情况引起的。在初中和高中，其他孩子对你的看法似乎是世界上最重要的事情。但当你问成年人他们在那个年龄做错了什么时，几乎所有人都说他们太在意其他孩子对他们的看法了。\n区分重要事情的一个启发式方法是问自己将来是否会在意它。看起来重要的虚假东西通常有一个尖锐的看似重要的峰值。这就是它欺骗你的方式。曲线下的面积很小，但它的形状像大头针一样刺入你的意识。\n重要的事情不一定是人们会称之为\u0026quot;重要\u0026quot;的事情。和朋友一起喝咖啡很重要。你后来不会觉得那是浪费时间。\n有小孩子的一个好处是他们让你花时间在重要的事情上：他们。当你盯着手机时，他们抓住你的袖子说\u0026quot;你能和我玩吗？\u0026ldquo;而且很可能这实际上是最小化浪费时间的选项。\n如果人生短暂，我们应该预期它的短暂性会让我们感到惊讶。而事实正是如此。你把事情视为理所当然，然后它们就消失了。你以为你总能写那本书，或爬那座山，或其他什么，然后你意识到窗口已经关闭。最悲伤的窗口是当其他人死去时关闭的。他们的生命也很短暂。我母亲去世后，我希望我花了更多时间陪她。我活得好像她永远会在那里。而她以典型的安静方式鼓励了这种幻觉。但这是一种幻觉。我想很多人都犯了和我一样的错误。\n避免被某事突然袭击的通常方法是有意识地意识到它。当生命更加 precarious 时，人们曾经意识到死亡的程度现在似乎有点病态。我不知道为什么，但不断地提醒自己 grim reaper 盘旋在每个人肩膀上似乎不是正确的答案。也许更好的解决方案是从另一端看问题。培养对你最想做的事情的急躁习惯。不要等爬那座山或写那本书或探望你的母亲。你不需要不断地提醒自己为什么不等待。只是不要等待。\n当一个人没有很多东西时，我能想到他们会做两件事：试图获得更多，品尝拥有的东西。在这里两者都有意义。\n你的生活方式影响你活多久。大多数人可以做得更好。包括我在内。\n但你可以通过更密切关注你拥有的时间获得更多效果。让日子匆匆流逝很容易。富有想象力的人如此喜爱的\u0026quot;心流\u0026quot;有一个更黑暗的表亲，它阻止你在日常差事和警报的泥浆中停下来品味生活。我读过的最引人注目的东西之一不是在书中，而是一本书的标题：James Salter 的《燃烧岁月》。\n有可能稍微减慢时间。我已经在这方面做得更好了。孩子们有帮助。当你有小孩子时，有很多时刻如此完美，你不可能不注意到。\n感觉你已经从某种经历中榨取了一切也有帮助。我对我母亲感到难过的原因不仅是因为我想念她，而是因为我想到了我们本可以做但没有做的所有事情。我的大儿子很快就7岁了。虽然我想念他3岁时的样子，但我至少对可能发生的事情没有任何遗憾。我们度过了一个父亲和3岁孩子所能拥有的最美好的时光。\n无情地修剪浪费时间，不要等待做重要的事情，品味你拥有的时间。这就是人生短暂时你要做的。\n注释\n[1] 起初我不喜欢想到的词是有其他含义的词。但后来我意识到其他含义相当密切相关。浪费时间的意义上的浪费时间很像智力上的浪费时间。\n[2] 我特意选择这个例子作为给自己的便条。我在网上经常受到攻击。人们对我编造最疯狂的谎言。到目前为止，我在抑制说\u0026quot;嘿，那不是真的！\u0026ldquo;这一自然人类倾向方面做得相当平庸。\n感谢 Jessica Livingston 和 Geoff Ralston 阅读本文的草稿。\n韩语翻译 日语翻译 中文翻译\n",
    "description": "",
    "tags": ["时间","优先级","浪费时间","有意义的生活","后悔","为人父母"],
    "categories": [],
    "content": "→ English Version\n人生苦短 2016年1月\n人生苦短，这是每个人都知道的。当我还是个孩子的时候，我常常思考这个问题。人生真的很短，还是我们只是在抱怨它的有限性？如果我们能活10倍长的时间，我们是否还会觉得人生短暂？\n由于似乎没有办法回答这个问题，我停止了思考这个问题。然后我有了孩子。这给了我一个回答这个问题的方法，答案是人生确实很短暂。\n有孩子让我明白如何将一个连续的量——时间——转换成离散的量。你和你的2岁孩子只有52个周末。如果圣诞节的魔力从比如说3岁持续到10岁，你只能看着你的孩子体验它8次。虽然很难说什么是一个连续量如时间的多或少，但8个某种东西确实不多。如果你有一把8颗花生，或者一个架子上只有8本书可供选择，无论你的寿命有多长，这个数量肯定会显得有限。\n好吧，所以人生确实很短暂。知道这一点有什么不同吗？\n对我来说有。这意味着\u0026quot;人生太短了，不适合做x\u0026quot;这种论点有很大的力量。说人生太短不适合做某事，这不仅仅是一种比喻说法。它不仅仅是讨厌的同义词。如果你发现自己认为人生太短不适合做某事，如果可能的话，你应该努力消除它。\n当我问自己我发现人生太短不适合做什么时，我脑海中浮现的词是\u0026quot;浪费时间\u0026quot;。我意识到这个答案有点同义反复。浪费时间的定义几乎就是人生太短不适合做的事情。然而，浪费时间确实有独特的特征。它有虚假的东西。它是经验的垃圾食品。[1]\n如果你问自己你把时间花在什么浪费时间的事情上，你可能已经知道答案了。不必要的会议、无意义的争论、官僚主义、装模作样、处理别人的错误、交通堵塞、让人上瘾但没有回报的消遣。\n这种事情进入你的生活有两种方式：要么是强加给你的，要么是欺骗了你。在某种程度上，你必须忍受环境强加给你的浪费时间。你需要赚钱，而赚钱主要就是跑腿。事实上，供求法则确保了这一点：某种工作越有回报，人们就会越便宜地去做。然而，强加给你的浪费时间可能比你想象的要少。总有一群人选择退出常规的苦差事，去生活在机会在传统意义上较少但生活感觉更真实的地方。这可能会变得更加普遍。\n你可以在不搬家的情况下在小规模上做到这一点。你必须在浪费时间上花费的时间因雇主而异。大多数大型组织（以及许多小型组织）都深陷其中。但如果你有意识地将避免浪费时间优先于金钱和声望等其他因素，你可能会找到浪费你较少时间的雇主。\n如果你是自由职业者或小公司，你可以在个别客户的层面上做到这一点。如果你解雇或避免有毒的客户，你可以减少生活中的浪费时间，而且减少的幅度超过你收入的减少。\n但是，虽然有些浪费时间不可避免地强加给你，但通过欺骗潜入你生活的浪费时间除了你自己之外没有人的错。然而，你选择的浪费时间可能比强加给你的更难消除。引诱你浪费时间的事情必须非常擅长欺骗你。很多人熟悉的一个例子是在网上争论。当有人反驳你时，在某种意义上他们是在攻击你。有时相当公开。你被攻击时的本能是为自己辩护。但像许多本能一样，这个本能不是为我们现在生活的世界设计的。感觉违反直觉的是，大多数时候最好不要为自己辩护。否则这些人实际上是在夺走你的生命。[2]\n网上争论只是偶尔上瘾。还有比这更危险的事情。正如我之前写过的，技术进步的一个副产品是我们喜欢的东西往往会变得更加令人上瘾。这意味着我们将越来越需要有意识地努力避免上瘾——站在自己之外问\u0026quot;这是我想花时间的方式吗？\u0026quot;\n除了避免浪费时间，还应该积极寻找重要的事情。但不同的事情对不同的人重要，大多数人必须学会什么对他们重要。少数人很幸运，很早就意识到他们热爱数学或照顾动物或写作，然后想出方法花大量时间做这件事。但大多数人的生活开始时是重要和不重要事情的混合，只有逐渐学会区分它们。\n特别是对年轻人来说，这种困惑的大部分是由他们发现自己所处的人为情况引起的。在初中和高中，其他孩子对你的看法似乎是世界上最重要的事情。但当你问成年人他们在那个年龄做错了什么时，几乎所有人都说他们太在意其他孩子对他们的看法了。\n区分重要事情的一个启发式方法是问自己将来是否会在意它。看起来重要的虚假东西通常有一个尖锐的看似重要的峰值。这就是它欺骗你的方式。曲线下的面积很小，但它的形状像大头针一样刺入你的意识。\n重要的事情不一定是人们会称之为\u0026quot;重要\u0026quot;的事情。和朋友一起喝咖啡很重要。你后来不会觉得那是浪费时间。\n有小孩子的一个好处是他们让你花时间在重要的事情上：他们。当你盯着手机时，他们抓住你的袖子说\u0026quot;你能和我玩吗？\u0026ldquo;而且很可能这实际上是最小化浪费时间的选项。\n如果人生短暂，我们应该预期它的短暂性会让我们感到惊讶。而事实正是如此。你把事情视为理所当然，然后它们就消失了。你以为你总能写那本书，或爬那座山，或其他什么，然后你意识到窗口已经关闭。最悲伤的窗口是当其他人死去 …"
  },{
    "title": "什么不像工作？",
    "url": "/paul_graham/essays_zh/work/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n什么不像工作？ 2015年1月\n我父亲是一位数学家。在我童年大部分时间里，他为西屋公司工作，建模核反应堆。\n他是那些很早就知道自己想做什么的幸运人之一。当你和他谈论他的童年时，有一个明确的分水岭，大约在12岁，当时他\u0026quot;对数学产生了兴趣\u0026quot;。\n他在威尔士海岸小镇普尔赫利长大。当我们在谷歌街景上回溯他上学的路时，他说在乡下长大很好。\n\u0026ldquo;当你长到大约15岁时，会不会感到无聊？\u0026ldquo;我问。\n\u0026ldquo;不，\u0026ldquo;他说，\u0026ldquo;那时我已经对数学感兴趣了。\u0026rdquo;\n在另一次谈话中，他告诉我，他真正喜欢的是解决问题。对我来说，数学教科书每章末尾的练习代表工作，或者最多是巩固你在该章学到的东西的一种方式。对他来说，问题是奖励。每一章的文本只是关于如何解决它们的一些建议。他说，一旦他得到一本新教科书，他会立即解决所有问题——这有点让他的老师烦恼，因为班级应该逐步学习这本书。\n很少有人如此早或如此确定地知道他们想做什么。但和我父亲谈话让我想起了我们其他人可以使用的一个启发式方法。如果对其他人来说像工作的事情对你来说不像工作，那就是你很适合做的事情。例如，我认识的很多程序员，包括我，实际上喜欢调试。这不是人们倾向于自愿做的事情；人们喜欢它就像喜欢挤粉刺一样。但考虑到编程在多大程度上由调试组成，你可能必须喜欢调试才能喜欢编程。\n你的品味对其他人来说越是奇怪，它们就越是你应该做什么的强烈证据。我在大学时常常为朋友写论文。为我没有修的课程写一篇论文是相当有趣的。而且他们总是如此解脱。\n同一项任务对一个人来说是痛苦的，对另一个人来说是愉快的，这似乎很奇怪，但当时我没有意识到这种不平衡意味着什么，因为我没有寻找它。我没有意识到决定你应该做什么工作有多难，有时你必须像侦探解决神秘小说中的案件一样从微妙的线索中弄明白。所以我敢打赌，明确地问自己这个问题会帮助很多人。对其他人来说像工作的事情对你来说不像工作吗？\n感谢 感谢萨姆·奥特曼、特雷弗·布莱克威尔、杰西卡·利文斯顿、罗伯特·莫里斯和我的父亲阅读草稿。\n罗伯特·莫里斯：关于编程的一切\n法语翻译\n",
    "description": "",
    "tags": ["工作","热情","职业","快乐","成功"],
    "categories": [],
    "content": "→ English Version\n什么不像工作？ 2015年1月\n我父亲是一位数学家。在我童年大部分时间里，他为西屋公司工作，建模核反应堆。\n他是那些很早就知道自己想做什么的幸运人之一。当你和他谈论他的童年时，有一个明确的分水岭，大约在12岁，当时他\u0026quot;对数学产生了兴趣\u0026quot;。\n他在威尔士海岸小镇普尔赫利长大。当我们在谷歌街景上回溯他上学的路时，他说在乡下长大很好。\n\u0026ldquo;当你长到大约15岁时，会不会感到无聊？\u0026ldquo;我问。\n\u0026ldquo;不，\u0026ldquo;他说，\u0026ldquo;那时我已经对数学感兴趣了。\u0026rdquo;\n在另一次谈话中，他告诉我，他真正喜欢的是解决问题。对我来说，数学教科书每章末尾的练习代表工作，或者最多是巩固你在该章学到的东西的一种方式。对他来说，问题是奖励。每一章的文本只是关于如何解决它们的一些建议。他说，一旦他得到一本新教科书，他会立即解决所有问题——这有点让他的老师烦恼，因为班级应该逐步学习这本书。\n很少有人如此早或如此确定地知道他们想做什么。但和我父亲谈话让我想起了我们其他人可以使用的一个启发式方法。如果对其他人来说像工作的事情对你来说不像工作，那就是你很适合做的事情。例如，我认识的很多程序员，包括我，实际上喜欢调试。这不是人们倾向于自愿做的事情；人们喜欢它就像喜欢挤粉刺一样。但考虑到编程在多大程度上由调试组成，你可能必须喜欢调试才能喜欢编程。\n你的品味对其他人来说越是奇怪，它们就越是你应该做什么的强烈证据。我在大学时常常为朋友写论文。为我没有修的课程写一篇论文是相当有趣的。而且他们总是如此解脱。\n同一项任务对一个人来说是痛苦的，对另一个人来说是愉快的，这似乎很奇怪，但当时我没有意识到这种不平衡意味着什么，因为我没有寻找它。我没有意识到决定你应该做什么工作有多难，有时你必须像侦探解决神秘小说中的案件一样从微妙的线索中弄明白。所以我敢打赌，明确地问自己这个问题会帮助很多人。对其他人来说像工作的事情对你来说不像工作吗？\n感谢 感谢萨姆·奥特曼、特雷弗·布莱克威尔、杰西卡·利文斯顿、罗伯特·莫里斯和我的父亲阅读草稿。\n罗伯特·莫里斯：关于编程的一切\n法语翻译\n"
  },{
    "title": "从众主义",
    "url": "/paul_graham/essays_zh/conformism/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n从众主义 从众主义的四个象限 2020年7月\n最有揭示性的人物分类方法之一是根据人们从众的程度和攻击性。想象一个笛卡尔坐标系，其水平轴从左到右是从众思维到独立思维，垂直轴从下到上是从被动到攻击性。产生的四个象限定义了四种类型的人。从左上开始逆时针方向：攻击性从众思维、被动从众思维、被动独立思维和攻击性独立思维。\n我认为在大多数社会中你会发现所有四种类型，人们落入哪个象限更多地取决于他们自己的个性，而不是他们社会中普遍的信仰。\n小孩子为这两个观点提供了一些最好的证据。任何上过小学的人都见过这四种类型，而学校规则如此任意这一事实是强有力的证据，证明人们落入哪个象限更多地取决于他们自己，而不是规则。\n左上象限的孩子，即攻击性从众思维的孩子，是告密者。他们不仅认为规则必须遵守，而且认为不遵守规则的人必须受到惩罚。\n左下象限的孩子，即被动从众思维的孩子，是绵羊。他们小心地遵守规则，但当其他孩子违反规则时，他们的冲动是担心那些孩子会受到惩罚，而不是确保他们会被惩罚。\n右下象限的孩子，即被动独立思维的孩子，是爱幻想的孩子。他们不太关心规则，可能甚至不完全确定规则是什么。\n右上象限的孩子，即攻击性独立思维的孩子，是淘气的孩子。当他们看到规则时，他们的第一冲动是质疑它。仅仅被告知要做什么就会使他们倾向于做相反的事情。\n当然，在衡量从众主义时，你必须说明是相对于什么，这随着孩子年龄的增长而变化。对较小的孩子来说，这是成年人制定的规则。但随着孩子年龄的增长，规则的来源变成他们的同龄人。因此，一群以同样方式违反学校规则的青少年并不是独立思维的；恰恰相反。\n在成年期，我们可以通过他们独特的叫声来识别这四种类型，就像你可以识别四种鸟类一样。攻击性从众思维的叫声是\u0026quot;粉碎\u0026lt;外群体\u0026gt;！\u0026quot;（在变量后面看到感叹号相当令人担忧，但这就是攻击性从众思维的整个问题。）被动从众思维的叫声是\u0026quot;邻居会怎么想？\u0026ldquo;被动独立思维的叫声是\u0026quot;各人自扫门前雪\u0026rdquo;。攻击性独立思维的叫声是\u0026quot;然而它确实在动\u0026quot;。\n这四种类型并不同样常见。被动的人比攻击性的人多，而从众思维的人比独立思维的人多得多。因此被动从众思维是最大的群体，而攻击性独立思维是最小的。\n由于一个人的象限更多地取决于一个人的个性而不是规则的性质，即使他们在完全不同的社会中长大，大多数人也会占据相同的象限。\n普林斯顿教授罗伯特·乔治最近写道：\u0026ldquo;我有时问学生，如果他们是白人并在废除奴隶制前生活在南方，他们对奴隶制的立场会是什么。猜猜看？他们都会是废奴主义者！他们都会勇敢地反对奴隶制，并为反对奴隶制而不懈努力。\u0026rdquo;\n他太礼貌了，没有明说，但当然他们不会。事实上，我们的默认假设不仅应该是他的学生在平均意义上会像当时的人们一样表现，而且应该是现在攻击性从众思维的人在当时也会是攻击性从众思维的。换句话说，他们不仅不会反对奴隶制，而且会是奴隶制最坚定的捍卫者之一。\n我承认我有偏见，但在我看来，攻击性从众思维的人对世界上不成比例的麻烦负有责任，而且我们自启蒙运动以来发展起来的许多习俗都是为了保护我们其他人免受他们的伤害。特别是，异端概念的废除以及用自由辩论各种不同想法的原则来替代，即使是那些目前被认为不可接受的想法，对于那些尝试看看它们是否有效的人也没有任何惩罚。\n然而，为什么独立思维的人需要被保护？因为他们拥有所有的新想法。例如，要成为一个成功的科学家，仅仅正确是不够的。你必须在其他人都错的时候正确。从众思维的人做不到这一点。出于类似的原因，所有成功的创业公司CEO不仅仅是独立思维的，而且是攻击性的。因此，社会只有在拥有习俗来遏制从众思维的情况下才能繁荣，这并非巧合。\n在过去的几年里，我们许多人注意到保护自由探究的习俗已经被削弱。有些人说我们反应过度——它们没有被削弱很多，或者它们被削弱是为了更大的利益。后者我立即处理。当从众思维的人占据上风时，他们总是说这是为了更大的利益。只是每次碰巧是一个不同的、不兼容的更大利益。\n至于前一种担忧，即独立思维的人过于敏感，自由探究没有被关闭那么多，除非你自己是独立思维的，否则你无法判断这一点。除非你有那些边缘的想法，否则你不知道有多少想法空间被砍掉，而只有独立思维的人才有那些边缘的想法。正因为如此，他们对人们可以自由探索想法的程度的变化非常敏感。他们是这个煤矿里的金丝雀。\n从众思维的人像往常一样说，他们不想关闭所有想法的讨论，只是坏的想法。\n你会认为仅仅从这句话就可以明显看出他们在玩一个多么危险的游戏。但我会详细说明。为什么我们需要能够讨论即使是\u0026quot;坏\u0026quot;的想法有两个原因。\n首先，任何决定禁止哪些想法的过程都一定会犯错误。尤其是因为没有聪明人想要承担那种工作，所以最终由愚蠢的人来做。当一个过程犯很多错误时，你需要留下错误的空间。在这种情况下，这意味着你需要禁止比你想要的更少的想法。但这对于攻击性从众思维的人来说很难做到，部分是因为他们喜欢看到人们受到惩罚，从他们小时候开始就是这样，部分是因为他们相互竞争。正统的执行者不允许存在一个模糊的想法，因为这给了其他执行者在道德纯洁部门胜过他们的机会，甚至可能将执行者转向他们自己。因此，我们没有得到我们需要的错误空间，而是得到了相反的东西：一场逐底竞争，任何似乎可以被禁止的想法最终都被禁止。\n禁止讨论想法之所以危险的第二个原因是想法之间的关系比看起来更密切。这意味着如果你限制某些话题的讨论，它不仅影响那些话题。限制会传播回任何在禁止话题中有含义的话题。这不是边缘情况。最好的想法正是这样做的：它们在远离其起源的领域中有影响。在一个有些想法被禁止的世界里有想法就像在一个角落有雷区的足球场上踢足球。你不是玩你本来会玩的游戏，而是在一个不同形状的场地上玩。即使在安全的场地上，你也玩一个更加压抑的游戏。\n在过去，独立思维的人保护自己的方式是聚集在少数地方——首先在法院，后来在大学——在那里他们可以在一定程度上制定自己的规则。人们在那里与想法工作的地方倾向于有保护自由探究的习俗，出于同样的原因，晶圆厂有强大的空气过滤器，或录音室有良好的隔音。至少在过去的几个世纪里，当攻击性从众思维的人无论出于什么原因横行时，大学是最安全的地方。\n然而，这次可能不会奏效，由于不幸的事实，最新一波的不宽容始于大学。它始于1980年代中期，到2000年似乎已经平息，但随着社交媒体的到来，它最近再次爆发。不幸的是，这似乎是硅谷的一个乌龙球。尽管运行硅谷的人几乎都是独立思维的，但他们给了攻击性从众思维的人一个他们只能梦想的工具。\n另一方面，也许大学内自由探究精神的下降既是独立思维人离开的症状，也是原因。50年前会成为教授的人现在有其他选择。现在他们可以成为量化分析师或创办创业公司。在这两个领域取得成功都必须是独立思维的。如果这些人当了教授，他们会为学术自由提出更强烈的抵抗。因此，独立思维人逃离衰落的大学的图景过于悲观。也许大学正在衰落，因为许多人已经离开了。\n尽管我花了很多时间思考这种情况，我无法预测结果如何。一些大学能否扭转当前趋势并保持独立思维人想要聚集的地方？或者独立思维人会逐渐放弃它们？如果发生了这种情况，我非常担心我们可能会失去什么。\n但我长期来看是有希望的。独立思维人善于保护自己。如果现有机构受到损害，他们会创建新的机构。这可能需要一些想象力。但想象力毕竟是他们的专长。\n注释 [1] 我当然意识到，如果人们的个性在任何两个方向上变化，你可以用它们作为轴，并将产生的四个象限称为个性类型。所以我真正声称的是轴是正交的，并且两个方向都有显著变化。\n[2] 攻击性从众思维的人不对世界上所有的麻烦负责。另一个大麻烦的来源是通过吸引他们来获得权力的有魅力的领导者类型。当这样的领导者出现时，他们变得更加危险。\n[3] 当我运营Y Combinator时，我从不担心写冒犯从众思维人的东西。如果YC是一家饼干公司，我会面临艰难的道德选择。从众思维的人也吃饼干。但他们不创办成功的创业公司。所以我阻止他们申请YC的唯一效果是节省我们阅读申请的工作。\n[4] 在一个领域取得了进展：谈论被禁止想法的惩罚比过去轻。被杀害的危险很小，至少在较富裕的国家。攻击性从众思维的人基本上对让人们被解雇感到满意。\n[5] 许多教授是独立思维的——特别是在数学、硬科学和工程学中，你必须这样才能成功。但学生更能代表一般人口，因此主要是从众思维的。所以当教授和学生发生冲突时，这不仅仅是代际之间的冲突，也是不同类型人之间的冲突。\n感谢Sam Altman、Trevor Blackwell、Nicholas Christakis、Patrick Collison、Sam Gichuru、Jessica Livingston、Patrick McKenzie、Geoff Ralston和Harj Taggar阅读本文的草稿。\n相关 德语翻译 韩语翻译 塞尔维亚语翻译\n",
    "description": "",
    "tags": ["从众主义","独立性","个性","社会","行为","思维","分析"],
    "categories": [],
    "content": "→ English Version\n从众主义 从众主义的四个象限 2020年7月\n最有揭示性的人物分类方法之一是根据人们从众的程度和攻击性。想象一个笛卡尔坐标系，其水平轴从左到右是从众思维到独立思维，垂直轴从下到上是从被动到攻击性。产生的四个象限定义了四种类型的人。从左上开始逆时针方向：攻击性从众思维、被动从众思维、被动独立思维和攻击性独立思维。\n我认为在大多数社会中你会发现所有四种类型，人们落入哪个象限更多地取决于他们自己的个性，而不是他们社会中普遍的信仰。\n小孩子为这两个观点提供了一些最好的证据。任何上过小学的人都见过这四种类型，而学校规则如此任意这一事实是强有力的证据，证明人们落入哪个象限更多地取决于他们自己，而不是规则。\n左上象限的孩子，即攻击性从众思维的孩子，是告密者。他们不仅认为规则必须遵守，而且认为不遵守规则的人必须受到惩罚。\n左下象限的孩子，即被动从众思维的孩子，是绵羊。他们小心地遵守规则，但当其他孩子违反规则时，他们的冲动是担心那些孩子会受到惩罚，而不是确保他们会被惩罚。\n右下象限的孩子，即被动独立思维的孩子，是爱幻想的孩子。他们不太关心规则，可能甚至不完全确定规则是什么。\n右上象限的孩子，即攻击性独立思维的孩子，是淘气的孩子。当他们看到规则时，他们的第一冲动是质疑它。仅仅被告知要做什么就会使他们倾向于做相反的事情。\n当然，在衡量从众主义时，你必须说明是相对于什么，这随着孩子年龄的增长而变化。对较小的孩子来说，这是成年人制定的规则。但随着孩子年龄的增长，规则的来源变成他们的同龄人。因此，一群以同样方式违反学校规则的青少年并不是独立思维的；恰恰相反。\n在成年期，我们可以通过他们独特的叫声来识别这四种类型，就像你可以识别四种鸟类一样。攻击性从众思维的叫声是\u0026quot;粉碎\u0026lt;外群体\u0026gt;！\u0026quot;（在变量后面看到感叹号相当令人担忧，但这就是攻击性从众思维的整个问题。）被动从众思维的叫声是\u0026quot;邻居会怎么想？\u0026ldquo;被动独立思维的叫声是\u0026quot;各人自扫门前雪\u0026rdquo;。攻击性独立思维的叫声是\u0026quot;然而它确实在动\u0026quot;。\n这四种类型并不同样常见。被动的人比攻击性的人多，而从众思维的人比独立思维的人多得多。因此被动从众思维是最大的群体，而攻击性独立思维是最小的。\n由于一个人的象限更多地取决于一个人的个性而不是规则的性质，即使他们在完全不同的社会中长大，大多数人也会占据相同的象限。\n普林斯顿教授罗伯特·乔治最近写道：\u0026ldquo;我有时问学生，如果他们是白人并在废除奴隶制前生活在南方，他们对奴隶制的立场会是什么。猜猜看？他们都会是废奴主义者！他们都会勇敢地反对奴隶制，并为反对奴隶制而不懈努力。\u0026rdquo;\n他太礼貌了，没有明说，但当然他们不会。事实上，我们的默认假设不仅应该是他的学生在平均意义上会像当时的人们一样表现，而且应该是现在攻击性从众思维的人在当时也会是攻击性从众思维的。换句话说，他们不仅不会反对奴隶制，而且会是奴隶制最坚定的捍卫者之一。\n我承认我有偏见，但在我看来，攻击性从众思维的人对世界上不成比例的麻烦负有责任，而且我们自启蒙运动以来发展起来的许多习俗都是为了保护我们其他人免受他们的伤害。特别是，异端概念的废除以及用自由辩论各种不同想法的原则来替代，即使是那些目前被认为不可接受的想法，对于那些尝试看看它们是否有效的人也没有任何惩罚。\n然而，为什么独立思维的人需要被保护？因为他们拥有所有的新想法。例如，要成为一个成功的科学家，仅仅正确是不够的。你必须在其他人都错的时候正确。从众思维的人做不到这一点。出于类似的原因，所有成功的创业公司CEO不仅仅是独立思维的，而且是攻击性的。因此，社会只有在拥有习俗来遏制从众思维的情况下才能繁荣，这并非巧合。\n在过去的几年里，我们许多人注意到保护自由探究的习俗已经被削弱。有些人说我们反应过度——它们没有被削弱很多，或者它们被削弱是为了更大的利益。后者我立即处理。当从众思维的人占据上风时，他们总是说这是为了更大的利益。只是每次碰巧是一个不同的、不兼容的更大利益。\n至于前一种担忧，即独立思维的人过于敏感，自由探究没有被关闭那么多，除非你自己是独立思维的，否则你无法判断这一点。除非你有那些边缘的想法，否则你不知道有多少想法空间被砍掉，而只有独立思维的人才有那些边缘的想法。正因为如此，他们对人们可以自由探索想法的程度的变化非常敏感。他们是这个煤矿里的金丝雀。\n从众思维的人像往常一样说，他们不想关闭所有想法的讨论，只是坏的想法。\n你会认为仅仅从这句话就可以明显看出他们在玩一个多么危险的游戏。但我会详细说明。为什么我们需要能够讨论即使是\u0026quot;坏\u0026quot;的想法有两个原因。\n首先，任何决定禁止哪些想法的过程都一定会犯错误。尤其是因为没有聪明人 …"
  },{
    "title": "令人恐惧的雄心勃勃的创业想法",
    "url": "/paul_graham/essays_zh/ambitious/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n令人恐惧的雄心勃勃的创业想法 2012年3月\nYC最近要求申请者描述他们公司可以扩展到的一个令人恐惧的雄心勃勃的创业想法。这让我想知道什么是令人恐惧的雄心勃勃的创业想法，以及它们是否存在。\n首先让我问，什么是雄心勃勃的创业想法？我的意思是，不是那种雄心勃勃的初创公司，而是那些雄心勃勃的想法。这些想法在某种意义上说是初创公司能够追求的最大想法。\n一个令人恐惧的雄心勃勃的创业想法的想法似乎是一个可以发展成为一个价值数十亿美元的公司。但仅仅大并不足以令人恐惧。没有人害怕一个牙膏公司，即使它可以卖10亿美元的牙膏。\n这个想法必须是一个有争议的初创公司，这意味着它必须有一个秘密。秘密是一个重要但尚未被广泛相信的真实想法。大多数雄心勃勃的想法实际上都有多个秘密。例如，一个杀死并替换Google的想法至少包含三个秘密：(1)搜索结果可以显著更好，(2)你可以通过某种方式赚钱，让用户满意，同时仍然保持搜索结果中立，以及(3)你可以做到而不被Google碾压。\n这些想法令人恐惧，因为它们有争议的后果。雄心勃勃的想法之所以有争议，是因为它们挑战了一些被广泛相信的谎言。而人们不会对挑战他们认为是真实的事情感到不安，但当有人挑战他们认为理所当然的谎言时，他们会感到被冒犯。\n但仅仅有争议还不足以令人恐惧。一个想法要令人恐惧，还必须有某种规模。没有人会担心一个声称某些地方性美食不好吃的想法。一个令人恐惧的想法是一个有争议的、大的想法。\n一个有争议的大想法是挑战一些大型既得利益者的想法。因此，一个令人恐惧的雄心勃勃的创业想法的想法是一个挑战某些大型既得利益者的、大的、有争议的想法。\n新搜索引擎 例如，假设你想杀死并替换Google。这显然是一个令人恐惧的雄心勃勃的创业想法。它挑战了一个大型既得利益者——实际上是最大的——但更重要的是，它挑战了人们的一个核心信念：即Google是最好的搜索引擎，没有人可以做得更好。这几乎是宗教信仰。\n杀死Google的想法令人恐惧，但令人恐惧的是雄心勃勃的想法，而不是初创公司。初创公司本身并不那么令人恐惧。事实上，它们通常很弱小。你只需要一台笔记本电脑。你不需要很多钱。你不需要很多员工。你不需要很多经验。\n杀死Google的想法令人恐惧，因为它是一个大的、有争议的想法。它挑战了一个大型既得利益者，它挑战了一个核心信念，而且它是一个大想法。\n替换电子邮件 另一个例子：替换电子邮件。电子邮件是一个巨大而重要的市场。但电子邮件是一个破碎的系统。它被垃圾邮件、垃圾邮件、垃圾邮件所困扰。没有人喜欢电子邮件。每个人都讨厌电子邮件。所以替换电子邮件的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的，但它挑战了谁？电子邮件不是由任何一家公司控制的。它是一个开放的标准。所以它没有一个明确的既得利益者来挑战。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即电子邮件是不可避免的，我们必须忍受它。\n它是一个大想法吗？是的。替换电子邮件是一个巨大的想法。\n所以替换电子邮件是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，但我认为它不像杀死Google那样令人恐惧。因为它没有一个明确的既得利益者来挑战。\n替换大学 另一个例子：替换大学。大学是一个巨大的市场。大学是一个破碎的系统。它们价格昂贵，它们教的东西没有用，它们官僚主义，它们被官僚主义所困扰。没有人喜欢大学。每个人都讨厌大学。所以替换大学的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的。它挑战了大学。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即大学是获得良好教育的唯一途径，你需要一个大学学位才能获得好工作。\n它是一个大想法吗？是的。替换大学是一个巨大的想法。\n所以替换大学是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，我认为它比替换电子邮件更令人恐惧，因为它有一个明确的既得利益者来挑战。\n互联网戏剧 下一个例子：互联网戏剧。互联网是一个巨大的平台。但互联网是一个破碎的系统。它被垃圾邮件、垃圾邮件、垃圾邮件所困扰。没有人喜欢互联网。每个人都讨厌互联网。所以互联网戏剧的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的。它挑战了电影和电视行业。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即电影和电视是娱乐的唯一形式。\n它是一个大想法吗？是的。互联网戏剧是一个巨大的想法。\n所以互联网戏剧是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，我认为它比替换大学更令人恐惧，因为它挑战了一个更大的既得利益者。\n下一个史蒂夫·乔布斯 下一个例子：下一个史蒂夫·乔布斯。史蒂夫·乔布斯是一个巨大的想法。史蒂夫·乔布斯是一个破碎的系统。他死了。没有人喜欢史蒂夫·乔布斯。每个人都讨厌史蒂夫·乔布斯。所以下一个史蒂夫·乔布斯的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的。它挑战了苹果公司。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即史蒂夫·乔布斯是不可替代的，没有人可以做到他所做的事情。\n它是一个大想法吗？是的。下一个史蒂夫·乔布斯是一个巨大的想法。\n所以下一个史蒂夫·乔布斯是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，我认为它比互联网戏剧更令人恐惧，因为它挑战了一个更大的既得利益者。\n带回摩尔定律 下一个例子：带回摩尔定律。摩尔定律是一个巨大的想法。摩尔定律是一个破碎的系统。它已经死了。没有人喜欢摩尔定律。每个人都讨厌摩尔定律。所以带回摩尔定律的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的。它挑战了英特尔公司。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即摩尔定律已经死了，没有人可以带回它。\n它是一个大想法吗？是的。带回摩尔定律是一个巨大的想法。\n所以带回摩尔定律是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，我认为它比下一个史蒂夫·乔布斯更令人恐惧，因为它挑战了一个更大的既得利益者。\n持续诊断 最后一个例子：持续诊断。持续诊断是一个巨大的想法。持续诊断是一个破碎的系统。它不存在。没有人喜欢持续诊断。每个人都讨厌持续诊断。所以持续诊断的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的。它挑战了医疗行业。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即医疗是昂贵的，没有人能负担得起持续诊断。\n它是一个大想法吗？是的。持续诊断是一个巨大的想法。\n所以持续诊断是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，我认为它比带回摩尔定律更令人恐惧，因为它挑战了一个更大的既得利益者。\n战术建议 所以这些都是令人恐惧的雄心勃勃的创业想法。但如何实现它们呢？如何开始追求一个令人恐惧的雄心勃勃的创业想法？\n首先，你需要一个想法。你需要一个大的、有争议的想法。你需要一个挑战某个大型既得利益者的想法。你需要一个挑战某个核心信念的想法。你需要一个大的想法。\n其次，你需要一个计划。你需要一个如何实现这个想法的计划。你需要一个如何开始、如何成长、如何赚钱的计划。你需要一个如何避免被既得利益者碾压的计划。\n第三，你需要一个团队。你需要一个能够实现这个想法的团队。你需要一个有经验的团队。你需要一个有才华的团队。你需要一个有决心的团队。\n第四，你需要资金。你需要实现这个想法的资金。你需要开始、成长、赚钱的资金。你需要避免被既得利益者碾压的资金。\n第五，你需要时间。你需要实现这个想法的时间。你需要开始、成长、赚钱的时间。你需要避免被既得利益者碾压的时间。\n第六，你需要运气。你需要实现这个想法的运气。你需要开始、成长、赚钱的运气。你需要避免被既得利益者碾压的运气。\n第七，你需要决心。你需要实现这个想法的决心。你需要开始、成长、赚钱的决心。你需要避免被既得利益者碾压的决心。\n所以这些都是令人恐惧的雄心勃勃的创业想法。但如何实现它们呢？如何开始追求一个令人恐惧的雄心勃勃的创业想法？你需要一个想法、一个计划、一个团队、资金、时间、运气和决心。\n但最重要的是，你需要一个令人恐惧的雄心勃勃的创业想法。因为如果你没有一个令人恐惧的雄心勃勃的创业想法，那么你就没有机会成功。\n所以如果你有一个令人恐惧的雄心勃勃的创业想法，那么恭喜你。你有机会成功。但你仍然需要计划、团队、资金、时间、运气和决心。\n但如果你没有一个令人恐惧的雄心勃勃的创业想法，那么你就麻烦了。因为你没有机会成功。\n所以问题是：你有一个令人恐惧的雄心勃勃的创业想法吗？\n如果你有，那么恭喜你。你有机会成功。\n如果你没有，那么你就麻烦了。因为你没有机会成功。\n所以去找到一个令人恐惧的雄心勃勃的创业想法。找到一个大的、有争议的想法。找到一个挑战某个大型既得利益者的想法。找到一个挑战某个核心信念的想法。找到一个大的想法。\n因为如果你没有一个令人恐惧的雄心勃勃的创业想法，那么你就没有机会成功。\n所以去找到一个令人恐惧的雄心勃勃的创业想法。因为如果你没有一个令人恐惧的雄心勃勃的创业想法，那么你就没有机会成功。\n",
    "description": "",
    "tags": ["创业","雄心","想法","yc","远见"],
    "categories": [],
    "content": "→ English Version\n令人恐惧的雄心勃勃的创业想法 2012年3月\nYC最近要求申请者描述他们公司可以扩展到的一个令人恐惧的雄心勃勃的创业想法。这让我想知道什么是令人恐惧的雄心勃勃的创业想法，以及它们是否存在。\n首先让我问，什么是雄心勃勃的创业想法？我的意思是，不是那种雄心勃勃的初创公司，而是那些雄心勃勃的想法。这些想法在某种意义上说是初创公司能够追求的最大想法。\n一个令人恐惧的雄心勃勃的创业想法的想法似乎是一个可以发展成为一个价值数十亿美元的公司。但仅仅大并不足以令人恐惧。没有人害怕一个牙膏公司，即使它可以卖10亿美元的牙膏。\n这个想法必须是一个有争议的初创公司，这意味着它必须有一个秘密。秘密是一个重要但尚未被广泛相信的真实想法。大多数雄心勃勃的想法实际上都有多个秘密。例如，一个杀死并替换Google的想法至少包含三个秘密：(1)搜索结果可以显著更好，(2)你可以通过某种方式赚钱，让用户满意，同时仍然保持搜索结果中立，以及(3)你可以做到而不被Google碾压。\n这些想法令人恐惧，因为它们有争议的后果。雄心勃勃的想法之所以有争议，是因为它们挑战了一些被广泛相信的谎言。而人们不会对挑战他们认为是真实的事情感到不安，但当有人挑战他们认为理所当然的谎言时，他们会感到被冒犯。\n但仅仅有争议还不足以令人恐惧。一个想法要令人恐惧，还必须有某种规模。没有人会担心一个声称某些地方性美食不好吃的想法。一个令人恐惧的想法是一个有争议的、大的想法。\n一个有争议的大想法是挑战一些大型既得利益者的想法。因此，一个令人恐惧的雄心勃勃的创业想法的想法是一个挑战某些大型既得利益者的、大的、有争议的想法。\n新搜索引擎 例如，假设你想杀死并替换Google。这显然是一个令人恐惧的雄心勃勃的创业想法。它挑战了一个大型既得利益者——实际上是最大的——但更重要的是，它挑战了人们的一个核心信念：即Google是最好的搜索引擎，没有人可以做得更好。这几乎是宗教信仰。\n杀死Google的想法令人恐惧，但令人恐惧的是雄心勃勃的想法，而不是初创公司。初创公司本身并不那么令人恐惧。事实上，它们通常很弱小。你只需要一台笔记本电脑。你不需要很多钱。你不需要很多员工。你不需要很多经验。\n杀死Google的想法令人恐惧，因为它是一个大的、有争议的想法。它挑战了一个大型既得利益者，它挑战了一个核心信念，而且它是一个大想法。\n替换电子邮件 另一个例子：替换电子邮件。电子邮件是一个巨大而重要的市场。但电子邮件是一个破碎的系统。它被垃圾邮件、垃圾邮件、垃圾邮件所困扰。没有人喜欢电子邮件。每个人都讨厌电子邮件。所以替换电子邮件的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的，但它挑战了谁？电子邮件不是由任何一家公司控制的。它是一个开放的标准。所以它没有一个明确的既得利益者来挑战。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即电子邮件是不可避免的，我们必须忍受它。\n它是一个大想法吗？是的。替换电子邮件是一个巨大的想法。\n所以替换电子邮件是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，但我认为它不像杀死Google那样令人恐惧。因为它没有一个明确的既得利益者来挑战。\n替换大学 另一个例子：替换大学。大学是一个巨大的市场。大学是一个破碎的系统。它们价格昂贵，它们教的东西没有用，它们官僚主义，它们被官僚主义所困扰。没有人喜欢大学。每个人都讨厌大学。所以替换大学的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的。它挑战了大学。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即大学是获得良好教育的唯一途径，你需要一个大学学位才能获得好工作。\n它是一个大想法吗？是的。替换大学是一个巨大的想法。\n所以替换大学是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，我认为它比替换电子邮件更令人恐惧，因为它有一个明确的既得利益者来挑战。\n互联网戏剧 下一个例子：互联网戏剧。互联网是一个巨大的平台。但互联网是一个破碎的系统。它被垃圾邮件、垃圾邮件、垃圾邮件所困扰。没有人喜欢互联网。每个人都讨厌互联网。所以互联网戏剧的想法是一个雄心勃勃的想法。\n但这个想法令人恐惧吗？嗯，它挑战了一个大型既得利益者吗？嗯，是的。它挑战了电影和电视行业。\n它挑战了一个核心信念吗？嗯，是的。它挑战了这样一个信念：即电影和电视是娱乐的唯一形式。\n它是一个大想法吗？是的。互联网戏剧是一个巨大的想法。\n所以互联网戏剧是一个令人恐惧的雄心勃勃的创业想法吗？嗯，是的，我认为它比替换大学更令人恐惧，因为它挑战了一个更大的既得利益者。\n下一个史蒂夫·乔布斯 下一个例子：下一个史蒂夫·乔布斯。史蒂夫·乔布斯是一个巨大的想法。史蒂夫·乔布斯 …"
  },{
    "title": "企业开发",
    "url": "/paul_graham/essays_zh/corpdev/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n企业开发 不要与企业开发部门交谈 2015年1月\n企业开发，简称corp dev，是公司内部负责收购其他公司的部门。如果你在与corp dev的人交谈，那就是原因，不管你是否意识到这一点。\n与corp dev交谈通常是一个错误，除非（a）你现在就想出售你的公司，并且（b）你有可能以可接受的价格获得要约。实际上，这意味着创业公司只有在做得非常好或非常糟糕时才应该与corp dev交谈。如果你做得非常糟糕，意味着公司即将倒闭，你不妨与他们交谈，因为你没什么可失去的。如果你做得非常好，你可以安全地与他们交谈，因为你们都知道价格必须很高，如果他们表现出丝毫浪费你时间的迹象，你会有足够的信心告诉他们离开。\n危险在于处于中间的公司。特别是那些快速增长但还没有足够长时间成长为大公司的年轻公司。对于一家不到一岁的有前途的公司来说，与corp dev交谈通常是一个错误。\n但这是创始人不断犯的错误。当corp dev的人想要会面时，创始人告诉自己他们至少应该弄清楚他们想要什么。此外，他们不想因拒绝会面而冒犯大公司。\n好吧，我会告诉你他们想要什么。他们想要谈论收购你。这就是\u0026quot;corp dev\u0026quot;这个头衔的意思。所以在同意与corp dev的人会面之前，问自己，\u0026ldquo;我们现在想出售公司吗？\u0026ldquo;如果答案是否定的，告诉他们\u0026quot;抱歉，但我们专注于发展公司。\u0026ldquo;他们不会被冒犯。当然，大公司的创始人也不会被冒犯。如果有什么的话，他们会更看重你。你会让他们想起自己。他们也没有出售；这就是为什么他们现在处于收购其他公司的位置。[1]\n大多数被corp dev联系过的创始人已经知道这意味着什么。然而，即使他们知道corp dev做什么并且知道他们不想出售，他们还是会参加会面。他们为什么这么做？同样的否认和一厢情愿的混合，这是创始人犯大多数错误的基础。与想要收购你的人交谈是令人高兴的。谁知道，也许他们的要约会高得出奇。你至少应该看看是什么，对吗？\n不。如果他们要通过电子邮件立即给你发要约，当然，你不妨打开它。但这不是与corp dev交谈的方式。如果你收到要约，那也是在一个长得令人难以置信的分心过程结束时。而如果要约令人惊讶，那将是惊人的低。\n分心是你最不能在创业公司中承受的事情。而与corp dev的交谈是最糟糕的分心类型，因为除了消耗你的注意力外，它们还会破坏你的士气。在艰苦过程中生存的技巧之一是不要停下来思考你有多累。相反，你进入一种心流状态。[2] 想象一下，在马拉松第20英里时，如果有人跑到你身边说\u0026quot;你一定觉得很累。你想停下来休息一下吗？\u0026ldquo;这会对你的影响。与corpdev的交谈就像那样，但更糟糕，因为停止的建议在你头脑中与你认为他们会提供的想象的高价格结合在一起。\n然后你就真的陷入困境了。如果可能的话，corp dev的人喜欢反过来对付你。他们喜欢让你达到试图说服他们购买的地步，而不是他们试图说服你出售。而且令人惊讶的是，他们经常成功。\n这是一个非常滑的斜坡，润滑着一些可以作用于创始人头脑的最强大力量，并且有一个经验丰富的专业人士陪同，他的全职工作就是把你推下去。\n他们在把你推下那个斜坡时的战术通常相当残酷。corp dev的人的整个工作就是收购公司，他们甚至不能选择收购哪些公司。衡量他们表现的唯一标准是他们能多便宜地收购你，更有野心的人会不择手段地实现这一点。例如，他们几乎总是会以低价开始，只是看看你是否会接受。即使你不接受，初始低价也会让你士气低落，使你更容易被操纵。\n这只是他们最无辜的战术。等到你同意了价格，认为你已经达成了交易，然后他们回来说他们的老板否决了这笔交易，不会以超过协议价格一半的价格进行。这种情况经常发生。如果你认为投资者可能行为不端，与corp dev的人能做的相比，那算不了什么。即使是其他方面仁慈的公司的corp dev人员也是如此。\n我记得有一次向谷歌的一个朋友抱怨他们的corp dev人员对一家YC创业公司玩的一些 nasty伎俩。\n\u0026ldquo;不作恶发生了什么？\u0026ldquo;我问。\n\u0026ldquo;我认为corp dev没有收到备忘录，\u0026ldquo;他回答。\n你在并购对话中遇到的战术可能是你在硅谷相对正直的世界中从未经历过的。就好像一块来自老式强盗大亨商业世界的遗传物质被整合到了创业世界中。[3]\n保护自己的最简单方法是使用约翰·D·洛克菲勒的技巧，他的祖父是个酒鬼，他用这个技巧来保护自己不成为酒鬼。他曾对一个主日学班级说：孩子们，你们知道我为什么从来没有成为酒鬼吗？因为我从来没有喝过第一杯酒。你现在想出售你的公司吗？不是最终，而是现在。如果不想，就不要参加第一次会面。他们不会被冒犯。而你反过来将保证免受创业公司可能发生的最糟糕经历之一。\n如果你确实想出售，有另一套技术可以做到这一点。但创始人处理corp dev时犯的最大错误不是在他们准备好时与他们交谈做得不好，而是在他们准备好之前就与他们交谈。所以如果你只记住这篇散文的标题，你已经知道了第一年关于并购的大部分知识。\n注释 [1] 我不是说永远不要出售。我的意思是你应该在头脑中清楚是否想出售，不要被操纵或一厢情愿的思绪引导，比你本来打算的更早尝试出售。\n[2] 在创业公司中，就像在大多数竞争性运动中一样，眼前的任务几乎会自动为你做到这一点；你太忙了感觉不到累。但当你失去这种保护时，例如在终场哨声时，疲劳像波浪一样击中你。与corp dev交谈就是让你在比赛中感受到它。\n[3] 公平地说，corp dev人员的明显不当行为因为他们作为一个经常不知道自己想法的大组织的面孔而被放大。收购者对收购可能令人惊讶地优柔寡断，当他们不靠谱传到你这里时，与不诚实无法区分。\n感谢Marc Andreessen、Jessica Livingston、Geoff Ralston和Qasar Younis阅读本文的草稿。\n",
    "description": "",
    "tags": ["企业开发","并购","收购","创业公司","企业","策略","谈判","警告"],
    "categories": [],
    "content": "→ English Version\n企业开发 不要与企业开发部门交谈 2015年1月\n企业开发，简称corp dev，是公司内部负责收购其他公司的部门。如果你在与corp dev的人交谈，那就是原因，不管你是否意识到这一点。\n与corp dev交谈通常是一个错误，除非（a）你现在就想出售你的公司，并且（b）你有可能以可接受的价格获得要约。实际上，这意味着创业公司只有在做得非常好或非常糟糕时才应该与corp dev交谈。如果你做得非常糟糕，意味着公司即将倒闭，你不妨与他们交谈，因为你没什么可失去的。如果你做得非常好，你可以安全地与他们交谈，因为你们都知道价格必须很高，如果他们表现出丝毫浪费你时间的迹象，你会有足够的信心告诉他们离开。\n危险在于处于中间的公司。特别是那些快速增长但还没有足够长时间成长为大公司的年轻公司。对于一家不到一岁的有前途的公司来说，与corp dev交谈通常是一个错误。\n但这是创始人不断犯的错误。当corp dev的人想要会面时，创始人告诉自己他们至少应该弄清楚他们想要什么。此外，他们不想因拒绝会面而冒犯大公司。\n好吧，我会告诉你他们想要什么。他们想要谈论收购你。这就是\u0026quot;corp dev\u0026quot;这个头衔的意思。所以在同意与corp dev的人会面之前，问自己，\u0026ldquo;我们现在想出售公司吗？\u0026ldquo;如果答案是否定的，告诉他们\u0026quot;抱歉，但我们专注于发展公司。\u0026ldquo;他们不会被冒犯。当然，大公司的创始人也不会被冒犯。如果有什么的话，他们会更看重你。你会让他们想起自己。他们也没有出售；这就是为什么他们现在处于收购其他公司的位置。[1]\n大多数被corp dev联系过的创始人已经知道这意味着什么。然而，即使他们知道corp dev做什么并且知道他们不想出售，他们还是会参加会面。他们为什么这么做？同样的否认和一厢情愿的混合，这是创始人犯大多数错误的基础。与想要收购你的人交谈是令人高兴的。谁知道，也许他们的要约会高得出奇。你至少应该看看是什么，对吗？\n不。如果他们要通过电子邮件立即给你发要约，当然，你不妨打开它。但这不是与corp dev交谈的方式。如果你收到要约，那也是在一个长得令人难以置信的分心过程结束时。而如果要约令人惊讶，那将是惊人的低。\n分心是你最不能在创业公司中承受的事情。而与corp dev的交谈是最糟糕的分心类型，因为除了消耗你的注意力外，它们还会破坏你的士气。在艰苦过程中生存的技巧之一是不要停下来思考你有多累。相反，你进入一种心流状态。[2] 想象一下，在马拉松第20英里时，如果有人跑到你身边说\u0026quot;你一定觉得很累。你想停下来休息一下吗？\u0026ldquo;这会对你的影响。与corpdev的交谈就像那样，但更糟糕，因为停止的建议在你头脑中与你认为他们会提供的想象的高价格结合在一起。\n然后你就真的陷入困境了。如果可能的话，corp dev的人喜欢反过来对付你。他们喜欢让你达到试图说服他们购买的地步，而不是他们试图说服你出售。而且令人惊讶的是，他们经常成功。\n这是一个非常滑的斜坡，润滑着一些可以作用于创始人头脑的最强大力量，并且有一个经验丰富的专业人士陪同，他的全职工作就是把你推下去。\n他们在把你推下那个斜坡时的战术通常相当残酷。corp dev的人的整个工作就是收购公司，他们甚至不能选择收购哪些公司。衡量他们表现的唯一标准是他们能多便宜地收购你，更有野心的人会不择手段地实现这一点。例如，他们几乎总是会以低价开始，只是看看你是否会接受。即使你不接受，初始低价也会让你士气低落，使你更容易被操纵。\n这只是他们最无辜的战术。等到你同意了价格，认为你已经达成了交易，然后他们回来说他们的老板否决了这笔交易，不会以超过协议价格一半的价格进行。这种情况经常发生。如果你认为投资者可能行为不端，与corp dev的人能做的相比，那算不了什么。即使是其他方面仁慈的公司的corp dev人员也是如此。\n我记得有一次向谷歌的一个朋友抱怨他们的corp dev人员对一家YC创业公司玩的一些 nasty伎俩。\n\u0026ldquo;不作恶发生了什么？\u0026ldquo;我问。\n\u0026ldquo;我认为corp dev没有收到备忘录，\u0026ldquo;他回答。\n你在并购对话中遇到的战术可能是你在硅谷相对正直的世界中从未经历过的。就好像一块来自老式强盗大亨商业世界的遗传物质被整合到了创业世界中。[3]\n保护自己的最简单方法是使用约翰·D·洛克菲勒的技巧，他的祖父是个酒鬼，他用这个技巧来保护自己不成为酒鬼。他曾对一个主日学班级说：孩子们，你们知道我为什么从来没有成为酒鬼吗？因为我从来没有喝过第一杯酒。你现在想出售你的公司吗？不是最终，而是现在。如果不想，就不要参加第一次会面。他们不会被冒犯。而你反过来将保证免受创业公司可能发 …"
  },{
    "title": "会写的人和不会写的人",
    "url": "/paul_graham/essays_zh/writes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n会写的人和不会写的人 2024年10月\n我通常不愿意对技术做出预测，但我对这个预测相当有信心：再过几十年，不会有很多人能够写作。\n如果你是作家，你学到的最奇怪的事情之一是有多少人在写作方面有困难。医生知道有多少人有一颗他们担心的痣；擅长设置电脑的人知道有多少人不会设置；作家知道有多少人需要写作帮助。\n这么多人在写作方面有困难的原因是它从根本上就是困难的。要写得好你必须思考清楚，而思考清楚是困难的。\n然而写作渗透到许多工作中，而且工作越有声望，它往往要求越多的写作。\n这两个强大的对立力量，对写作的普遍期望和做它的不可减少的困难，创造了巨大的压力。这就是为什么杰出的教授经常被发现诉诸剽窃。在这些案件中，最令我震惊的是偷窃的琐碎性。他们偷窃的东西通常是最普通的套话——任何甚至还算过得去的作家都可以毫不费力地写出来的东西。这意味着他们甚至还不算过得去的作家。\n直到最近，对于这些对立力量创造的压力没有方便的 escape valve。你可以付钱让别人为你写作，像肯尼迪，或者剽窃，像马丁·路德·金，但如果你不能购买或偷窃文字，你必须自己写。因此，几乎所有被期望写作的人都必须学会如何写作。\n不再是了。AI已经打开了这个世界。几乎所有写作的压力都消散了。你可以让AI为你写作，无论在学校还是工作。\n结果将是一个分为会写的人和不会写的人的世界。仍然会有一些人能够写作。我们中的一些人喜欢它。但在擅长写作和完全不会写作的人之间的中间地带将会消失。而不是好作家、普通作家和不会写作的人，将只有好作家和不会写作的人。\n有那么糟糕吗？当技术使技能过时时，技能消失不是很常见吗？没有多少铁匠留下了，这似乎也不是问题。\n是的，这很糟糕。原因是我之前提到的事情：写作就是思考。事实上，有一种思考只能通过写作来完成。你无法比Leslie Lamport更好地表达这一点：如果你在写作之外思考，你只是在认为你在思考。所以一个分为会写的人和不会写的人的世界比听起来更危险。它将是一个有思考的人和不会思考的人的世界。我知道我想成为哪一半，我打赌你也是。\n这种情况并非前所未有。在前工业时代，大多数人的工作使他们强壮。现在如果你想强壮，你锻炼。所以仍然有强壮的人，但只有那些选择强壮的人。\n写作将是同样的情况。仍然会有聪明的人，但只有那些选择聪明的人。\n感谢 感谢杰西卡·利文斯顿、本·米勒和罗伯特·莫里斯阅读草稿。\n",
    "description": "",
    "tags": ["写作","AI","思考","未来","技术"],
    "categories": [],
    "content": "→ English Version\n会写的人和不会写的人 2024年10月\n我通常不愿意对技术做出预测，但我对这个预测相当有信心：再过几十年，不会有很多人能够写作。\n如果你是作家，你学到的最奇怪的事情之一是有多少人在写作方面有困难。医生知道有多少人有一颗他们担心的痣；擅长设置电脑的人知道有多少人不会设置；作家知道有多少人需要写作帮助。\n这么多人在写作方面有困难的原因是它从根本上就是困难的。要写得好你必须思考清楚，而思考清楚是困难的。\n然而写作渗透到许多工作中，而且工作越有声望，它往往要求越多的写作。\n这两个强大的对立力量，对写作的普遍期望和做它的不可减少的困难，创造了巨大的压力。这就是为什么杰出的教授经常被发现诉诸剽窃。在这些案件中，最令我震惊的是偷窃的琐碎性。他们偷窃的东西通常是最普通的套话——任何甚至还算过得去的作家都可以毫不费力地写出来的东西。这意味着他们甚至还不算过得去的作家。\n直到最近，对于这些对立力量创造的压力没有方便的 escape valve。你可以付钱让别人为你写作，像肯尼迪，或者剽窃，像马丁·路德·金，但如果你不能购买或偷窃文字，你必须自己写。因此，几乎所有被期望写作的人都必须学会如何写作。\n不再是了。AI已经打开了这个世界。几乎所有写作的压力都消散了。你可以让AI为你写作，无论在学校还是工作。\n结果将是一个分为会写的人和不会写的人的世界。仍然会有一些人能够写作。我们中的一些人喜欢它。但在擅长写作和完全不会写作的人之间的中间地带将会消失。而不是好作家、普通作家和不会写作的人，将只有好作家和不会写作的人。\n有那么糟糕吗？当技术使技能过时时，技能消失不是很常见吗？没有多少铁匠留下了，这似乎也不是问题。\n是的，这很糟糕。原因是我之前提到的事情：写作就是思考。事实上，有一种思考只能通过写作来完成。你无法比Leslie Lamport更好地表达这一点：如果你在写作之外思考，你只是在认为你在思考。所以一个分为会写的人和不会写的人的世界比听起来更危险。它将是一个有思考的人和不会思考的人的世界。我知道我想成为哪一半，我打赌你也是。\n这种情况并非前所未有。在前工业时代，大多数人的工作使他们强壮。现在如果你想强壮，你锻炼。所以仍然有强壮的人，但只有那些选择强壮的人。\n写作将是同样的情况。仍然会有聪明的人，但只有那些选择聪明的人。\n感谢 感谢杰西卡·利文斯顿、本·米勒和罗伯特·莫里斯阅读草稿。\n"
  },{
    "title": "伟大的黑客",
    "url": "/paul_graham/essays_zh/gh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n伟大的黑客 2004年7月\n（本文源自2004年Oscon大会的演讲。）\n几个月前我完成了一本新书，在评论中我不断注意到诸如\u0026quot;挑衅性\u0026quot;和\u0026quot;争议性\u0026quot;的词语。更不用说\u0026quot;白痴\u0026quot;了。\n我并不是想让这本书具有争议性。我试图让它高效。我不想浪费人们的时间告诉他们他们已经知道的事情。更高效的方法只是给他们差异。但我想这必然会产生一本令人担忧的书。\n爱迪生们 最具争议的想法是：财富的差异可能并不像我们想象的那么大问题。\n我在书中没有说财富差异本身就是好事。我说在某些情况下它可能是好事的标志。剧烈的头痛不是好事，但它可能是好事的标志——例如，你被击中头部后正在恢复意识。\n财富差异可能是生产力差异的标志。（在一个人的社会中，它们是相同的。）这几乎肯定是好事：如果你的社会没有生产力差异，可能不是因为每个人都是托马斯·爱迪生。而是因为你没有托马斯·爱迪生。\n在低技术社会中，你看不到太多的生产力差异。如果你有一群游牧民族为火收集木棍，最好的木棍收集者比最差的能多收集多少？两倍？而当你给人们一个像电脑这样的复杂工具时，他们能用它做的事情的差异是巨大的。\n这不是一个新想法。Fred Brooks在1974年写过这个，他引用的研究发表于1968年。但我认为他低估了程序员之间的差异。他写了代码行数方面的生产力：最好的程序员可以在十分之一的时间内解决给定问题。但如果问题没有给定呢？在编程中，就像在许多领域一样，困难的部分不是解决问题，而是决定要解决什么问题。想象力很难衡量，但在实践中它主导着以代码行数衡量的那种生产力。\n生产力在任何领域都有变化，但很少有领域变化如此之大。程序员之间的差异如此之大，以至于成为一种质的差异。我不认为这是编程固有的，但在每个领域，技术都放大了生产力的差异。我认为编程中发生的事情只是因为我们有很多技术杠杆。但在每个领域，杠杆都在变长，所以我们看到的差异是随着时间的推移，越来越多的领域都会看到的。公司和国家的成功将越来越取决于他们如何应对这个问题。\n如果生产力的差异随着技术而增加，那么最有生产力个体的贡献不仅会不成比例地大，而且会随着时间的推移而实际增长。当你达到一个群体的90%产出由其1%的成员创造的地步时，如果有什么（无论是维京袭击，还是中央计划）将他们的生产力拖到平均水平，你就会损失惨重。\n如果我们想充分利用他们，我们需要了解这些特别有生产力的人。什么激励他们？他们需要什么来做他们的工作？你如何认识他们？你如何让他们来为你工作？然后当然还有这个问题，你如何成为其中一员？\n不仅仅是金钱 我认识一些超级黑客，所以我坐下来思考他们有什么共同点。他们的决定性品质可能是他们真的喜欢编程。普通程序员写代码是为了付账单。伟大的黑客认为这是他们为了乐趣而做的事情，并且很高兴发现有人会为此付钱。\n伟大的程序员有时被认为对金钱漠不关心。这不完全正确。确实，他们真正关心的只是做有趣的工作。但如果你赚了足够的钱，你就可以做任何你想做的工作，因此黑客被赚取巨额金钱的想法所吸引。但只要他们还必须每天上班工作，他们更关心在那里做什么，而不是得到多少报酬。\n从经济学上讲，这是最重要的事实，因为这意味着你不必支付伟大的黑客接近他们价值的报酬。一个伟大的程序员可能比普通程序员生产力高十倍或一百倍，但他会认为能获得三倍报酬就很幸运了。正如我稍后要解释的，这部分是因为伟大的黑客不知道他们有多好。但也是因为金钱不是他们主要想要的东西。\n黑客想要什么？像所有工匠一样，黑客喜欢好工具。事实上，这低估了。好的黑客发现无法忍受使用坏工具。他们会拒绝在错误基础设施的项目上工作。\n在我曾经工作过的一家创业公司，我们公告板上钉着的一张东西是IBM的广告。那是一张AS400的图片，标题写着，我认为，\u0026ldquo;黑客鄙视它。\u0026quot;[1]\n当你决定为项目使用什么基础设施时，你不仅在做出技术决定。你还在做出社会决定，而这可能是两者中更重要的。例如，如果你的公司想写一些软件，用Java写似乎是一个谨慎的选择。但当你选择一种语言时，你也在选择一个社区。你能雇佣来在Java项目上工作的程序员不会像你能雇佣来在Python项目上工作的那样聪明。而你的黑客的质量可能比你选择的语言更重要。虽然，坦率地说，好的黑客更喜欢Python而不是Java这一事实应该告诉你这些语言的相对优点。\n商业类型更喜欢最流行的语言，因为他们将语言视为标准。他们不想在公司上下注Betamax。但语言的问题是，它们不仅仅是标准。如果你必须通过网络传输比特，务必使用TCP/IP。但编程语言不仅仅是格式。编程语言是一种表达媒介。\n我读到Java刚刚超过Cobol成为最流行的语言。作为标准，你不能期望更多。但作为表达媒介，你可以做得更好。在我能想到的所有伟大程序员中，我只知道一个会自愿用Java编程。而在我能想到的所有不为Sun工作的伟大程序员中，在Java方面，我一个也不知道。\n伟大的黑客通常也坚持使用开源软件。不仅仅是因为它更好，还因为它给他们更多控制权。好的黑客坚持控制权。这是使他们成为好黑客的部分原因：当某些东西坏了时，他们需要修复它。你希望他们对你为他们编写的软件有这种感觉。当他们对操作系统有同样的感觉时，你不应该感到惊讶。\n几年前，一个风险投资家朋友告诉我他参与的一家新创业公司。听起来很有希望。但下次我和他交谈时，他们说他们决定在Windows NT上构建软件，并刚刚聘请了一位非常有经验的NT开发者担任首席技术官。当我听到这个时，我想，这些人注定要失败。第一，CTO不可能是第一流黑客，因为要成为杰出的NT开发者，他必须自愿多次使用NT，我无法想象一个伟大的黑客会这样做；第二，即使他很好，如果项目必须在NT上构建，他也很难雇佣到优秀的人才。[2]\n最后的边疆 除了软件，黑客最重要的工具可能是他的办公室。大公司认为办公室空间的功能是表达等级。但黑客不仅仅为此使用办公室：他们将办公室作为思考的地方。如果你是一家技术公司，他们的思想就是你的产品。所以让黑客在嘈杂、分散注意力的环境中工作，就像在油漆厂空气中充满烟尘。\n连环漫画Dilbert有很多关于隔间的说法，这是有充分理由的。我认识的所有黑客都鄙视它们。仅仅被中断的前景就足以阻止黑客处理困难问题。如果你想在有隔间的办公室里完成真正的工作，你只有两个选择：在家工作，或在别人不在的时候早点来、晚点来或周末来。公司没有意识到这是出了问题的标志吗？办公室环境应该是有助于你工作的东西，而不是你尽管如此才工作的东西。\n像思科这样的公司为每个人都有一间隔间而自豪，即使是CEO。但他们不像他们想象的那么先进；显然他们仍然将办公室空间视为等级的标志。还要注意，思科以很少在内部进行产品开发而闻名。他们通过收购创造新技术的创业公司来获得新技术——大概在那里黑客确实有安静的工作地方。\n一家理解黑客需求的大公司是微软。我曾经看到过微软的招聘广告，有一张门的大图片。为我们工作，前提是，我们会给你一个可以真正完成工作的地方。而且你知道，微软在大公司中之所以非凡，是因为他们能够在内部开发软件。也许不太好，但足够好。\n如果公司希望黑客有生产力，他们应该看看他们在家里做什么。在家里，黑客可以自己安排事情，以便完成最多的工作。当黑客在家工作时，他们不在嘈杂、开放的空间工作；他们在有门的房间里工作。他们在舒适、社区化的地方工作，周围有人，需要思考时可以散步，而不是在停车场英亩的玻璃盒子里。他们有可以在感到疲倦时小睡的沙发，而不是坐在桌前昏迷，假装工作。没有吸尘器人员在每晚黑客黄金时间呼啸而过。没有会议，或者，天哪，公司静修或团队建设练习。当你看他们在电脑上做什么时，你会发现它强化了我之前关于工具的说法。他们在工作时可能必须使用Java和Windows，但在家里，当他们可以自由选择时，你更可能发现他们使用Perl和Linux。\n事实上，这些关于Cobol或Java是最流行语言的统计数据可能会产生误导。如果我们想知道什么工具最好，我们应该看的是黑客在可以自由选择时选择什么——也就是说，在他们自己的项目中。当你问这个问题时，你会发现开源操作系统已经占据了主导市场份额，排名第一的语言可能是Perl。\n有趣 除了好工具，黑客想要有趣的项目。什么使项目有趣？嗯，显然像隐形飞机或特效软件那样明显性感的应用程序会很有趣。但任何应用程序如果提出新颖的技术挑战，都可能很有趣。所以很难预测黑客会喜欢哪些问题，因为有些只有在工作的人发现新的解决方案时才变得有趣。在ITA（编写Orbitz内部软件的公司）之前，从事机票价格搜索的人可能认为这是可以想象的最无聊的应用程序。但ITA通过以更雄心勃勃的方式重新定义问题使其变得有趣。\n我认为谷歌也发生了同样的事情。当谷歌成立时，所谓门户网站的传统看法是搜索很无聊且不重要。但谷歌的人不认为搜索无聊，这就是为什么他们做得这么好。\n这是管理者可以有所作为的领域。就像父母对孩子说，我打赌你不能在十分钟内清理整个房间，一个好的管理者有时可以将问题重新定义为更有趣的问题。史蒂夫·乔布斯似乎特别擅长这个，部分原因只是因为他有高标准。在Mac之前有很多小型、便宜的电脑。他将问题重新定义为：制造一个漂亮的。这可能比任何胡萝卜或大棒更能驱动开发者。\n他们确实做到了。当Mac首次出现时，你甚至不必打开它就知道它会很好；你可以从机箱上看出来。几周前我在剑桥的街上走，在某个人的垃圾里我看到了一个似乎是Mac手提箱的东西。我往里看，里面有一台Mac SE。我带回家插上电，它启动了。快乐的Macintosh脸，然后是finder。我的天，它是如此简单。就像\u0026hellip;\u0026hellip;谷歌。\n黑客喜欢为有高标准的人工作。但仅仅精确是不够的。你必须坚持正确的事情。这通常意味着你必须自己是一个黑客。我偶尔看到过关于如何管理程序员的文章。真的应该有两篇文章：一篇是关于如果你自己是程序员该做什么，另一篇是关于如果你不是该做什么。而第二篇可能可以浓缩成两个词：放弃。\n问题不在于日常管理。真正好的黑客几乎是自我管理的。问题是，如果你不是黑客，你无法分辨谁是好黑客。一个类似的问题解释了为什么美国汽车如此丑陋。我称之为设计悖论。你可能认为你可以通过雇佣伟大的设计师来设计产品而使产品美丽。但如果你自己没有好品味，你如何认识好设计师？根据定义，你无法从他的作品集中判断。你也不能看他获得的奖项或工作，因为在设计领域，就像在大多数领域一样，这些往往是由时尚和交际驱动的，而实际能力排在第三位。没有办法：你无法在不知道什么是美丽的情况下管理一个旨在生产美丽的过程。美国汽车丑陋是因为美国汽车公司由品味差的人经营。\n这个国家的许多人认为品味是难以捉摸的，甚至是轻浮的。它都不是。要推动设计，管理者必须是公司产品最苛刻的用户。如果你真的有好品味，你可以像史蒂夫·乔布斯那样，使满足你成为好人喜欢解决的问题。\n讨厌的小问题 很容易说什么样的问题不是有趣的：那些你必须解决很多讨厌小问题，而不是解决几个大的、清晰的问题。最糟糕的项目之一是为充满错误的软件编写接口。另一个是当你必须为个别客户的复杂和定义不清的需求定制东西。对黑客来说，这类项目是千刀万剐的死亡。\n讨厌小问题的区别特征是你从中学不到任何东西。编写编译器很有趣，因为它教你什么是编译器。但为有错误的软件编写接口教不了你任何东西，因为错误是随机的。[3] 所以不仅仅是挑剔使好黑客避免讨厌的小问题。这更多是自我保护的问题。处理讨厌的小问题会让你变笨。好黑客避免它就像模特避免奶酪汉堡一样。\n当然，有些问题固有这种特征。由于供需关系，它们报酬特别高。所以找到方法让伟大黑客处理繁琐问题的公司会非常成功。你会怎么做？\n这种情况发生的一个地方是创业公司。在我们的创业公司，我们有Robert Morris担任系统管理员。这就像让滚石乐队在犹太成年礼上演奏。你雇佣不到那种人才。但人们会为他们创始人的公司做任何艰苦的工作。[4]\n大公司通过分割公司来解决这个问题。他们通过建立独立的研发部门来吸引聪明的人为他们工作，员工不必直接处理客户讨厌的小问题。[5] 在这个模型中，研发部门的功能就像矿山。他们产生新想法；也许公司其余部分能够使用它们。\n你可能不必走到这种极端。自底向上编程提供了另一种分割公司的方法：让聪明的人作为工具制造者工作。如果你的公司制造做x的软件，让一个组构建用于编写这类软件的工具，另一个组使用这些工具编写应用程序。这样你可能能够让聪明的人写99%的代码，但仍然让他们像在传统研发部门那样与用户几乎隔离。工具制造者会有用户，但他们只是公司自己的开发者。[6]\n如果微软使用这种方法，他们的软件就不会充满安全漏洞，因为编写实际应用程序的较不聪明的人不会做分配内存这样的低级工作。他们不会直接用C编写Word，而是将Word语言的大型乐高积木拼在一起。（Duplo，我相信是技术术语。）\n聚集 除了有趣的问题，好黑客喜欢的还有其他好黑客。伟大的黑客倾向于聚集在一起——有时如此壮观，就像在施乐帕洛阿尔托研究中心。所以你不会以线性比例吸引好黑客，因为你为他们创造的环境有多好。聚集的倾向意味着它更像是环境的平方。所以赢家通吃。在任何给定时间，只有大约十个或二十个黑客最想工作的地方，如果你不是其中之一，你不仅会有更少的伟大黑客，你会是零。\n拥有伟大的黑客本身并不足以使公司成功。这对谷歌和ITA很有效，它们是现在的两个热点，但它没有帮助思维机器或施乐。Sun曾经有一段好时光，但他们的商业模式是下降电梯。在这种情况下，即使最好的黑客也救不了你。\n不过，我认为，在其他条件相同的情况下，能够吸引伟大黑客的公司将具有巨大优势。有人会不同意这一点。当我们在1990年代走访风险投资公司时，几家告诉我们软件公司不是通过编写伟大的软件获胜，而是通过品牌、主导渠道和做正确的交易。\n他们似乎真的相信这一点，我想我知道为什么。我认为许多风险投资家寻找的，至少在无意识中，是下一个微软。当然，如果微软是你的模型，你不应该寻找希望通过编写伟大软件获胜的公司。但风险投资家寻找下一个微软是错误的，因为没有创业公司能成为下一个微软，除非其他公司准备在恰到好处的时刻弯腰成为下一个IBM。\n使用微软作为模型是错误的，因为他们的整个文化源自那一次幸运的突破。微软是一个坏的数据点。如果你把他们扔出去，你会发现好产品确实倾向于在市场上获胜。风险投资家应该寻找的是下一个苹果，或下一个谷歌。\n我想比尔·盖茨知道这一点。谷歌让他担心的不是他们品牌的力量，而是他们有更好的黑客。[7]\n认可 那么谁是伟大的黑客？你遇到时如何知道？结果证明这非常困难。即使是黑客也说不出来。我现在很确定我的朋友Trevor Blackwell是一个伟大的黑客。你可能读过Slashdot上关于他如何制作自己的Segway的报道。这个项目的显著之处是他在一天内写了所有软件（顺便说一句，用Python）。\n对Trevor来说，这是家常便饭。但当我第一次遇到他时，我认为他是个十足的白痴。他站在Robert Morris的办公室里对他喋喋不休地说着什么，我记得我站在他身后向Robert做疯狂的手势，把这个疯子赶出办公室，这样我们就可以去吃午饭了。Robert说他一开始也误判了Trevor。显然当Robert第一次遇到他时，Trevor刚刚开始一个新计划，涉及在一堆索引卡上写下他生活各方面的所有内容，他随身携带。他也刚从加拿大来，有浓重的加拿大口音和mullet发型。\n由于黑客尽管有社交迟钝的声誉，有时却花费很大努力让自己看起来聪明，这使问题更加复杂。当我在研究生院时，我偶尔会在MIT AI实验室闲逛。起初有点吓人。那里的每个人都说话这么快。但过了一会儿我学会了快速说话的技巧。你不必思考得更快；只是用两倍的词说所有事情。信号中有这么多噪音，遇到好黑客时很难分辨。我现在也分辨不出。你也无法从他们的简历中看出来。似乎判断黑客的唯一方法是和他一起处理某个问题。\n",
    "description": "",
    "tags": ["黑客","编程","生产力","软件","技术","工作"],
    "categories": [],
    "content": "→ English Version\n伟大的黑客 2004年7月\n（本文源自2004年Oscon大会的演讲。）\n几个月前我完成了一本新书，在评论中我不断注意到诸如\u0026quot;挑衅性\u0026quot;和\u0026quot;争议性\u0026quot;的词语。更不用说\u0026quot;白痴\u0026quot;了。\n我并不是想让这本书具有争议性。我试图让它高效。我不想浪费人们的时间告诉他们他们已经知道的事情。更高效的方法只是给他们差异。但我想这必然会产生一本令人担忧的书。\n爱迪生们 最具争议的想法是：财富的差异可能并不像我们想象的那么大问题。\n我在书中没有说财富差异本身就是好事。我说在某些情况下它可能是好事的标志。剧烈的头痛不是好事，但它可能是好事的标志——例如，你被击中头部后正在恢复意识。\n财富差异可能是生产力差异的标志。（在一个人的社会中，它们是相同的。）这几乎肯定是好事：如果你的社会没有生产力差异，可能不是因为每个人都是托马斯·爱迪生。而是因为你没有托马斯·爱迪生。\n在低技术社会中，你看不到太多的生产力差异。如果你有一群游牧民族为火收集木棍，最好的木棍收集者比最差的能多收集多少？两倍？而当你给人们一个像电脑这样的复杂工具时，他们能用它做的事情的差异是巨大的。\n这不是一个新想法。Fred Brooks在1974年写过这个，他引用的研究发表于1968年。但我认为他低估了程序员之间的差异。他写了代码行数方面的生产力：最好的程序员可以在十分之一的时间内解决给定问题。但如果问题没有给定呢？在编程中，就像在许多领域一样，困难的部分不是解决问题，而是决定要解决什么问题。想象力很难衡量，但在实践中它主导着以代码行数衡量的那种生产力。\n生产力在任何领域都有变化，但很少有领域变化如此之大。程序员之间的差异如此之大，以至于成为一种质的差异。我不认为这是编程固有的，但在每个领域，技术都放大了生产力的差异。我认为编程中发生的事情只是因为我们有很多技术杠杆。但在每个领域，杠杆都在变长，所以我们看到的差异是随着时间的推移，越来越多的领域都会看到的。公司和国家的成功将越来越取决于他们如何应对这个问题。\n如果生产力的差异随着技术而增加，那么最有生产力个体的贡献不仅会不成比例地大，而且会随着时间的推移而实际增长。当你达到一个群体的90%产出由其1%的成员创造的地步时，如果有什么（无论是维京袭击，还是中央计划）将他们的生产力拖到平均水平，你就会损失惨重。\n如果我们想充分利用他们，我们需要了解这些特别有生产力的人。什么激励他们？他们需要什么来做他们的工作？你如何认识他们？你如何让他们来为你工作？然后当然还有这个问题，你如何成为其中一员？\n不仅仅是金钱 我认识一些超级黑客，所以我坐下来思考他们有什么共同点。他们的决定性品质可能是他们真的喜欢编程。普通程序员写代码是为了付账单。伟大的黑客认为这是他们为了乐趣而做的事情，并且很高兴发现有人会为此付钱。\n伟大的程序员有时被认为对金钱漠不关心。这不完全正确。确实，他们真正关心的只是做有趣的工作。但如果你赚了足够的钱，你就可以做任何你想做的工作，因此黑客被赚取巨额金钱的想法所吸引。但只要他们还必须每天上班工作，他们更关心在那里做什么，而不是得到多少报酬。\n从经济学上讲，这是最重要的事实，因为这意味着你不必支付伟大的黑客接近他们价值的报酬。一个伟大的程序员可能比普通程序员生产力高十倍或一百倍，但他会认为能获得三倍报酬就很幸运了。正如我稍后要解释的，这部分是因为伟大的黑客不知道他们有多好。但也是因为金钱不是他们主要想要的东西。\n黑客想要什么？像所有工匠一样，黑客喜欢好工具。事实上，这低估了。好的黑客发现无法忍受使用坏工具。他们会拒绝在错误基础设施的项目上工作。\n在我曾经工作过的一家创业公司，我们公告板上钉着的一张东西是IBM的广告。那是一张AS400的图片，标题写着，我认为，\u0026ldquo;黑客鄙视它。\u0026quot;[1]\n当你决定为项目使用什么基础设施时，你不仅在做出技术决定。你还在做出社会决定，而这可能是两者中更重要的。例如，如果你的公司想写一些软件，用Java写似乎是一个谨慎的选择。但当你选择一种语言时，你也在选择一个社区。你能雇佣来在Java项目上工作的程序员不会像你能雇佣来在Python项目上工作的那样聪明。而你的黑客的质量可能比你选择的语言更重要。虽然，坦率地说，好的黑客更喜欢Python而不是Java这一事实应该告诉你这些语言的相对优点。\n商业类型更喜欢最流行的语言，因为他们将语言视为标准。他们不想在公司上下注Betamax。但语言的问题是，它们不仅仅是标准。如果你必须通过网络传输比特，务必使用TCP/IP。但编程语言不仅仅是格式。编程语言是一种表达媒介。\n我读到Java刚刚超过Cobol成为最流行的语言。作为标准，你不能期望更多。但作为表达媒介，你可以做得更 …"
  },{
    "title": "何时做你热爱的事",
    "url": "/paul_graham/essays_zh/when/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n何时做你热爱的事 2024年9月\n关于\u0026quot;追随你的热情\u0026quot;是否是个好主意，存在一些争论。事实上，这个问题无法用简单的是或否来回答。有时你应该，有时你不应该，但应该与不应该之间的界限非常复杂。给出一个通用答案的唯一方法是追溯它。\n当人们讨论这个问题时，总有一个隐含的\u0026quot;而不是\u0026quot;。在其他条件相同的情况下，你为什么不从事你最感兴趣的工作呢？因此，即使提出这个问题也意味着所有条件并不相同，你必须在从事你最感兴趣的工作和其他事情之间做出选择，比如报酬最好的工作。\n确实，如果你的主要目标是赚钱，你通常无法从事你最感兴趣的工作。人们为你做他们想要你做的事付费，而不是做你想做的事。但有一个明显的例外：当你们想要相同时。例如，如果你热爱足球，并且你足够擅长它，你可以通过踢球获得丰厚的报酬。\n当然，在足球这样的情况下，成功的几率对你不利，因为太多其他人也喜欢踢球。这并不是说你不应该尝试。这取决于你有多少能力以及你愿意付出多大的努力。\n当你有奇怪的品味时，几率会更好：当你喜欢某种报酬丰厚而很少有人喜欢的东西时。例如，很明显比尔·盖茨真正热爱经营软件公司。他不仅热爱编程，很多人都热爱这个。他热爱为客户编写软件。这确实是一种非常奇怪的品味，但如果你有这种品味，通过 indulging 它可以赚很多钱。\n甚至有些人对赚钱有真正的智力兴趣。这与单纯的贪婪不同。他们忍不住注意到某物被错误定价，也忍不住对此做些什么。这对他们来说就像一个谜题。[1]\n事实上，这里有一个如此极端的边缘情况，它颠倒了所有先前的建议。如果你想赚非常非常多的钱——数亿甚至数十亿美元——事实证明从事你最感兴趣的工作非常有用。原因不是你这样做获得的额外动力，而是赚非常非常多钱的方法是创业，而从事你最感兴趣的工作是发现创业想法的极好方式。\n许多（如果不是大多数）最大的创业公司都始于创始人为了乐趣而做的项目。苹果、谷歌和Facebook都是这样开始的。为什么这种模式如此常见？因为最好的想法往往是如此异常，如果你有意识地寻找赚钱的方法，你会忽略它们。而如果你年轻且擅长技术，你对什么会是有趣工作的无意识本能与需要构建的东西非常一致。\n所以赚钱有点像\u0026quot;中智峰值\u0026quot;。如果你不需要赚很多钱，你可以从事你最感兴趣的工作；如果你想变得相当富有，你通常无法承担；但如果你想变得超级富有，并且你年轻且擅长技术，从事你最感兴趣的工作又变成了一个好主意。\n如果你不确定你想要什么怎么办？如果你被赚钱的想法吸引，对某些工作比其他工作更感兴趣，但两种吸引力都没有占主导地位？你如何打破僵局？\n这里的关键是要理解这种僵局只是表面上的。当你在追随兴趣和赚钱之间难以选择时，这绝不是因为你有完整的自我认知和对正在选择的工作类型的了解，而且选择完全平衡。当你无法决定走哪条路时，几乎总是由于无知。事实上，你通常同时遭受三种无知：你不知道什么让你快乐，各种工作到底是什么样的，或者你能把它们做得有多好。[2]\n在某种程度上，这种无知是可以原谅的。预测这些事情通常很困难，甚至没有人告诉你需要预测。如果你有雄心壮志，有人告诉你应该上大学，这个建议到目前为止是好的，但通常也就到此为止。没有人告诉你如何弄清楚要从事什么工作，或者这可能有多困难。\n面对不确定性，你该怎么办？获得更多的确定性。而做到这一点的最好方法可能是尝试从事你感兴趣的事情。这将让你获得更多关于你对它们的兴趣程度、你有多擅长它们以及它们为雄心壮志提供多少范围的信息。\n不要等待。不要等到大学结束才弄清楚要从事什么工作。甚至不要等到大学期间的实习。你不一定需要做x的工作才能从事x工作；通常你可以自己开始以某种形式做。由于弄清楚要从事什么工作是一个可能需要数年才能解决的问题，你开始得越早越好。\n判断不同工作的一个有用技巧是看看你的同事会是谁。你会变得像和你一起工作的人。你想成为像这些人一样的人吗？\n确实，不同工作之间的性格差异被这样一个事实放大：其他每个人都面临着与你相同的决定。如果你主要根据报酬多少选择一种工作，你将被出于同样原因选择它的其他人包围，这将使它比从外面看起来更令人灵魂枯竭。而如果你选择你真正感兴趣的工作，你将主要被其他真正感兴趣的人包围，这将使它更加鼓舞人心。[3]\n面对不确定性，你要做的另一件事是做出抗不确定性的选择。你对做什么越不确定，选择能给你未来更多选择的选择就越重要。我称之为\u0026quot;保持上风\u0026quot;。例如，如果你不确定是主修数学还是经济学，选择数学；数学在经济学的上风，因为从数学转向经济学比从经济学转向数学更容易。\n不过，有一种情况很容易说你是否应该从事你最感兴趣的工作：如果你想做出伟大的工作。这不是做出伟大工作的充分条件，但它是必要条件。\n关于是否\u0026quot;追随你的热情\u0026quot;的建议中存在很多选择偏差，这就是原因。大多数这样的建议来自著名成功的人，如果你问一个著名成功的人如何做他们所做的事，大多数人会告诉你，你必须从事你最感兴趣的工作。而这确实是事实。\n这并不意味着这对每个人都是正确的建议。不是每个人都能做出伟大的工作，或者想要做。但如果你想做出伟大的工作，关于是否从事你最感兴趣工作的复杂问题就变得简单了。答案是肯定的。伟大工作的根源是一种雄心勃勃的好奇心，你无法制造这种好奇心。\n注释 [1] 这些例子说明了为什么假设经济不平等必须是某种破损或不公平的证据是错误的。很明显，不同的人有不同的兴趣，有些兴趣比其他兴趣产生的钱多得多，所以一些人最终比其他人富有得多这一点怎么可能不明显呢？在一个有些人喜欢编写企业软件而其他人喜欢制作工作室陶器的世界里，经济不平等是自然结果。\n[2] 在兴趣之间难以选择是另一回事。这不总是由于无知。它通常是内在困难的。我仍然在这方面有困难。\n[3] 在这方面，你不能总是相信人们的说法。由于从事你感兴趣的工作比被金钱驱动更有声望，主要被金钱驱动的人经常声称他们对工作比实际更感兴趣。测试这种说法的一种方法是进行以下思想实验：如果他们的工作报酬不高，他们会为了在业余时间做它而从事白天的工作吗？很多数学家、科学家和工程师会。历史上很多人确实这样做了。但我不认为投资银行家会有那么多。\n这个思想实验对于区分大学院系也很有用。\n感谢 感谢Trevor Blackwell、Paul Buchheit、Jessica Livingston、Robert Morris、Harj Taggar和Garry Tan阅读本文草稿。\n",
    "description": "",
    "tags": ["热情","职业","金钱","创业","工作"],
    "categories": [],
    "content": "→ English Version\n何时做你热爱的事 2024年9月\n关于\u0026quot;追随你的热情\u0026quot;是否是个好主意，存在一些争论。事实上，这个问题无法用简单的是或否来回答。有时你应该，有时你不应该，但应该与不应该之间的界限非常复杂。给出一个通用答案的唯一方法是追溯它。\n当人们讨论这个问题时，总有一个隐含的\u0026quot;而不是\u0026quot;。在其他条件相同的情况下，你为什么不从事你最感兴趣的工作呢？因此，即使提出这个问题也意味着所有条件并不相同，你必须在从事你最感兴趣的工作和其他事情之间做出选择，比如报酬最好的工作。\n确实，如果你的主要目标是赚钱，你通常无法从事你最感兴趣的工作。人们为你做他们想要你做的事付费，而不是做你想做的事。但有一个明显的例外：当你们想要相同时。例如，如果你热爱足球，并且你足够擅长它，你可以通过踢球获得丰厚的报酬。\n当然，在足球这样的情况下，成功的几率对你不利，因为太多其他人也喜欢踢球。这并不是说你不应该尝试。这取决于你有多少能力以及你愿意付出多大的努力。\n当你有奇怪的品味时，几率会更好：当你喜欢某种报酬丰厚而很少有人喜欢的东西时。例如，很明显比尔·盖茨真正热爱经营软件公司。他不仅热爱编程，很多人都热爱这个。他热爱为客户编写软件。这确实是一种非常奇怪的品味，但如果你有这种品味，通过 indulging 它可以赚很多钱。\n甚至有些人对赚钱有真正的智力兴趣。这与单纯的贪婪不同。他们忍不住注意到某物被错误定价，也忍不住对此做些什么。这对他们来说就像一个谜题。[1]\n事实上，这里有一个如此极端的边缘情况，它颠倒了所有先前的建议。如果你想赚非常非常多的钱——数亿甚至数十亿美元——事实证明从事你最感兴趣的工作非常有用。原因不是你这样做获得的额外动力，而是赚非常非常多钱的方法是创业，而从事你最感兴趣的工作是发现创业想法的极好方式。\n许多（如果不是大多数）最大的创业公司都始于创始人为了乐趣而做的项目。苹果、谷歌和Facebook都是这样开始的。为什么这种模式如此常见？因为最好的想法往往是如此异常，如果你有意识地寻找赚钱的方法，你会忽略它们。而如果你年轻且擅长技术，你对什么会是有趣工作的无意识本能与需要构建的东西非常一致。\n所以赚钱有点像\u0026quot;中智峰值\u0026quot;。如果你不需要赚很多钱，你可以从事你最感兴趣的工作；如果你想变得相当富有，你通常无法承担；但如果你想变得超级富有，并且你年轻且擅长技术，从事你最感兴趣的工作又变成了一个好主意。\n如果你不确定你想要什么怎么办？如果你被赚钱的想法吸引，对某些工作比其他工作更感兴趣，但两种吸引力都没有占主导地位？你如何打破僵局？\n这里的关键是要理解这种僵局只是表面上的。当你在追随兴趣和赚钱之间难以选择时，这绝不是因为你有完整的自我认知和对正在选择的工作类型的了解，而且选择完全平衡。当你无法决定走哪条路时，几乎总是由于无知。事实上，你通常同时遭受三种无知：你不知道什么让你快乐，各种工作到底是什么样的，或者你能把它们做得有多好。[2]\n在某种程度上，这种无知是可以原谅的。预测这些事情通常很困难，甚至没有人告诉你需要预测。如果你有雄心壮志，有人告诉你应该上大学，这个建议到目前为止是好的，但通常也就到此为止。没有人告诉你如何弄清楚要从事什么工作，或者这可能有多困难。\n面对不确定性，你该怎么办？获得更多的确定性。而做到这一点的最好方法可能是尝试从事你感兴趣的事情。这将让你获得更多关于你对它们的兴趣程度、你有多擅长它们以及它们为雄心壮志提供多少范围的信息。\n不要等待。不要等到大学结束才弄清楚要从事什么工作。甚至不要等到大学期间的实习。你不一定需要做x的工作才能从事x工作；通常你可以自己开始以某种形式做。由于弄清楚要从事什么工作是一个可能需要数年才能解决的问题，你开始得越早越好。\n判断不同工作的一个有用技巧是看看你的同事会是谁。你会变得像和你一起工作的人。你想成为像这些人一样的人吗？\n确实，不同工作之间的性格差异被这样一个事实放大：其他每个人都面临着与你相同的决定。如果你主要根据报酬多少选择一种工作，你将被出于同样原因选择它的其他人包围，这将使它比从外面看起来更令人灵魂枯竭。而如果你选择你真正感兴趣的工作，你将主要被其他真正感兴趣的人包围，这将使它更加鼓舞人心。[3]\n面对不确定性，你要做的另一件事是做出抗不确定性的选择。你对做什么越不确定，选择能给你未来更多选择的选择就越重要。我称之为\u0026quot;保持上风\u0026quot;。例如，如果你不确定是主修数学还是经济学，选择数学；数学在经济学的上风，因为从数学转向经济学比从经济学转向数学更容易。\n不过，有一种情况很容易说你是否应该从事你最感兴趣的工作：如果你想做出伟大的工作。这不是做出伟大工作的充分条件，但它是必要条件。\n关于是否\u0026quot;追随你的 …"
  },{
    "title": "你（想要）*想要什么",
    "url": "/paul_graham/essays_zh/want/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n你（想要）*想要什么 2022年11月\n从大约9岁起，我就一直对物质以可预测方式运行与感觉可以选择做任何想做的事之间的明显矛盾感到困惑。那时，我有探索这个问题的自私动机。在那个年龄（像大多数后来的年龄一样），我总是和当权者有麻烦，在我看来，也许有可能通过 arguing 我不对我的行为负责来摆脱麻烦。我逐渐对此失去了希望，但这个谜题仍然存在：你如何调和自己是由物质构成的机器与感觉可以自由选择做什么？[1]\n解释答案的最好方法可能是从一个稍微错误的版本开始，然后修正它。错误的版本是：你可以做你想做的事，但你不能想要你想要的。是的，你可以控制你做什么，但你会做你想做的事，而你无法控制那个。\n这个错误的原因是人们有时确实会改变他们想要的东西。那些不想要想要某些东西的人——例如吸毒成瘾者——有时可以让自己停止想要它。而那些想要想要某些东西的人——那些想要喜欢古典音乐或西兰花的人——有时会成功。\n所以我们修改我们的初始陈述：你可以做你想做的事，但你不能想要想要你想要的。\n这仍然不完全正确。改变你想要的东西是可能的。我可以想象有人说\u0026quot;我决定停止想要喜欢古典音乐。\u0026ldquo;但我们正在接近真理。人们很少改变他们想要的东西，你添加的\u0026quot;想要\u0026quot;越多，这种情况就越罕见。\n我们可以通过添加更多的\u0026quot;想要\u0026quot;来无限接近真实的陈述，就像我们通过在小数点后添加更多的9来无限接近1一样。在实践中，三四个\u0026quot;想要\u0026quot;肯定足够了。很难想象改变你想要想要想要想要什么会意味着什么，更不用说真正做到了。\n所以表达正确答案的一种方法是使用正则表达式。你可以做你想做的事，但某种形式的\u0026quot;你不能（想要）*想要你想要的\u0026quot;陈述是真实的。最终你会回到一个你无法控制的想要。[2]\n注释 [1] 我9岁时不知道物质可能会随机行为，但我不认为这对问题有很大影响。随机性和决定论一样有效地摧毁了机器中的幽灵。\n[2] 如果你不喜欢使用表达式，你可以用高阶欲望来表达同样的观点：存在某个n，你无法控制你的n阶欲望。\n感谢Trevor Blackwell、Jessica Livingston、Robert Morris和Michael Nielsen阅读本文的草稿。\n",
    "description": "",
    "tags": ["自由意志","欲望","意识","决策","哲学","心理学"],
    "categories": [],
    "content": "→ English Version\n你（想要）*想要什么 2022年11月\n从大约9岁起，我就一直对物质以可预测方式运行与感觉可以选择做任何想做的事之间的明显矛盾感到困惑。那时，我有探索这个问题的自私动机。在那个年龄（像大多数后来的年龄一样），我总是和当权者有麻烦，在我看来，也许有可能通过 arguing 我不对我的行为负责来摆脱麻烦。我逐渐对此失去了希望，但这个谜题仍然存在：你如何调和自己是由物质构成的机器与感觉可以自由选择做什么？[1]\n解释答案的最好方法可能是从一个稍微错误的版本开始，然后修正它。错误的版本是：你可以做你想做的事，但你不能想要你想要的。是的，你可以控制你做什么，但你会做你想做的事，而你无法控制那个。\n这个错误的原因是人们有时确实会改变他们想要的东西。那些不想要想要某些东西的人——例如吸毒成瘾者——有时可以让自己停止想要它。而那些想要想要某些东西的人——那些想要喜欢古典音乐或西兰花的人——有时会成功。\n所以我们修改我们的初始陈述：你可以做你想做的事，但你不能想要想要你想要的。\n这仍然不完全正确。改变你想要的东西是可能的。我可以想象有人说\u0026quot;我决定停止想要喜欢古典音乐。\u0026ldquo;但我们正在接近真理。人们很少改变他们想要的东西，你添加的\u0026quot;想要\u0026quot;越多，这种情况就越罕见。\n我们可以通过添加更多的\u0026quot;想要\u0026quot;来无限接近真实的陈述，就像我们通过在小数点后添加更多的9来无限接近1一样。在实践中，三四个\u0026quot;想要\u0026quot;肯定足够了。很难想象改变你想要想要想要想要什么会意味着什么，更不用说真正做到了。\n所以表达正确答案的一种方法是使用正则表达式。你可以做你想做的事，但某种形式的\u0026quot;你不能（想要）*想要你想要的\u0026quot;陈述是真实的。最终你会回到一个你无法控制的想要。[2]\n注释 [1] 我9岁时不知道物质可能会随机行为，但我不认为这对问题有很大影响。随机性和决定论一样有效地摧毁了机器中的幽灵。\n[2] 如果你不喜欢使用表达式，你可以用高阶欲望来表达同样的观点：存在某个n，你无法控制你的n阶欲望。\n感谢Trevor Blackwell、Jessica Livingston、Robert Morris和Michael Nielsen阅读本文的草稿。\n"
  },{
    "title": "你会希望你当初知道的事",
    "url": "/paul_graham/essays_zh/hs/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n你会希望你当初知道的事 2005年1月\n（我为高中写了这篇演讲。我实际上从未做过这个演讲，因为学校当局否决了邀请我的计划。）\n当我说我要在高中演讲时，我的朋友们很好奇。你会对高中生说什么？于是我问他们，你希望有人在高中时告诉你什么？他们的回答惊人地相似。所以我要告诉你们我们都希望有人告诉过我们的事情。\n我先告诉你们一件你们在高中不需要知道的事情：你的人生想做什么。人们总是问你这个问题，所以你觉得你应该有个答案。但成年人问这个主要是为了开始对话。他们想知道你是哪种人，这个问题只是为了让你们开口说话。他们问这个问题就像你可能戳潮水池里的寄居蟹，看看它会做什么。\n如果我现在回到高中，有人问我的计划，我会说我的首要任务是了解有什么选择。你不需要急着选择你的人生工作。你需要做的是发现你喜欢什么。如果你想在所做的事情上做得好，你必须做你喜欢的事情。\n决定你喜欢什么似乎是最容易的事情，但结果证明是困难的，部分是因为很难准确了解大多数工作的真实情况。当医生并不像电视上描绘的那样。幸运的是，你也可以通过在医院做志愿者来观察真正的医生。[1]\n但是有些工作你无法了解，因为还没有人做这些工作。过去十年里我做的大多数工作在我上高中时都不存在。世界变化很快，变化的速度本身也在加快。在这样的世界里，制定固定计划不是个好主意。\n然而每年五月，全国各地的演讲者都会点燃标准毕业演讲，主题是：不要放弃你的梦想。我知道他们的意思，但这是个糟糕的说法，因为它暗示你应该被早期制定的某个计划束缚。计算机世界对此有个术语：过早优化。这等同于灾难。这些演讲者最好只简单地说，不要放弃。\n他们真正的意思是，不要气馁。不要认为你不能做别人能做的事情。我同意你不应该低估你的潜力。做过伟大事情的人似乎像是另一个种族的人。大多数传记只会夸大这种幻觉，部分原因是传记作者不可避免地陷入崇拜的态度，部分是因为，知道故事的结局，他们忍不住简化情节，直到似乎主题的生活是命运的问题，只是某种天生天才的展开。事实上，我怀疑如果你和十六岁的莎士比亚或爱因斯坦一起上学，他们会给人留下深刻印象，但并不是完全不像你的其他朋友。\n这是个令人不安的想法。如果他们只是像我们一样，那么他们必须非常努力地工作才能做到他们所做的事情。这是我们喜欢相信天才的原因之一。它为我们的懒惰找了个借口。如果这些人能够做到他们所做的事情只是因为某种神奇的莎士比亚性或爱因斯坦性，那么如果我们不能做到同样好的事情，不是我们的错。\n我并不是说没有天才这种东西。但如果你试图在两个理论之间选择，一个为你的懒惰找借口，另一个可能是正确的。\n到目前为止，我们已经将标准毕业演讲从\u0026quot;不要放弃你的梦想\u0026quot;削减到\u0026quot;别人能做的，你也能做。\u0026ldquo;但这还需要进一步削减。自然能力确实存在差异。大多数人高估了它的作用，但它确实存在。如果我和一个四英尺高、雄心是在NBA打球的人说话，我会说\u0026quot;只要你真正努力，你就能做任何事情\u0026rdquo;，这会显得非常愚蠢。[2]\n我们需要将标准毕业演讲削减为，\u0026ldquo;具有你能力的人能做的，你也能做；不要低估你的能力。\u0026ldquo;但经常发生的是，你越接近真相，你的句子就越混乱。我们采用了一个漂亮、整洁（但错误）的口号，把它搅得像泥潭一样。它不再是一篇很好的演讲了。但更糟糕的是，它不再告诉你该做什么了。具有你能力的人？你的能力是什么？\n逆风 我认为解决方案是朝另一个方向努力。不要从目标倒推，要从有希望的情况向前推进。实际上，大多数成功的人都是这样做的。\n在毕业演讲的方法中，你决定二十年后想在哪里，然后问：我现在应该做什么才能到达那里？我建议你不要承诺未来任何事情，只看现在可用的选择，选择那些会给你最有希望的选择范围的。\n你做什么工作并不那么重要，只要你不浪费时间。做你感兴趣并增加你选择的事情，稍后再担心选择哪个。\n假设你是一个大学新生，决定主修数学还是经济学。嗯，数学会给你更多选择：你可以从数学进入几乎任何领域。如果你主修数学，很容易进入经济学研究生院，但如果你主修经济学，很难进入数学研究生院。\n滑翔机在这里是个很好的比喻。因为滑翔机没有引擎，你不能迎风飞行而不失去大量高度。如果你让自己离好的着陆点很远顺风，你的选择会不舒服地缩小。通常你想保持逆风。所以我建议用\u0026quot;保持逆风\u0026quot;来替代\u0026quot;不要放弃你的梦想\u0026rdquo;。\n但是，你怎么做到这一点呢？即使数学是经济学的逆风，你作为一个高中生怎么知道这一点？\n嗯，你不知道，而这是你需要发现的。寻找聪明人和困难的问题。聪明人倾向于聚集在一起，如果你能找到这样一个群体，加入它可能是值得的。但要找到这些并不直接，因为有很多造假行为。\n对于一个新来的本科生，所有大学系看起来都差不多。教授们似乎都令人生畏地博学，发表的论文对外人来说难以理解。但是，虽然在某些领域论文难以理解是因为它们充满了困难的想法，但在其他领域，它们被故意写成晦涩的方式，似乎在说重要的事情。这似乎是个令人震惊的主张，但它已经在著名的《社会文本》事件中被实验验证了。怀疑文学理论家发表的论文常常只是听起来理智的无稽之谈，一位物理学家故意写了一篇充满听起来理智的无稽之谈的论文，并提交给一家文学理论期刊，该期刊发表了它。\n最好的保护总是做困难的问题。写小说是困难的。读小说不是。困难意味着担忧：如果你不担心你制作的东西会出来得不好，或者你将无法理解你正在学习的东西，那么它就不够困难。必须有悬念。\n嗯，这可能看起来是对世界的悲观看法，你可能认为。我告诉你的是你应该担忧？是的，但并不像听起来那么糟糕。克服担忧是令人振奋的。你看不到比赢得金牌的人更快乐的面孔。你知道他们为什么那么快乐吗？解脱。\n我并不是说这是快乐的唯一方式。只是说某些担忧并不像听起来那么糟糕。\n雄心 在实践中，\u0026ldquo;保持逆风\u0026quot;简化为\u0026quot;做困难的问题\u0026rdquo;。你今天就可以开始。我希望我在高中时就理解了这一点。\n大多数人喜欢在所做的事情上做得好。在所谓现实世界中，这种需求是一种强大的力量。但高中生很少从中受益，因为他们被给予一个虚假的事情做。当我在高中时，我让自己相信我的工作是做一个高中生。于是我让自己对在所做的事情上做得好的需求仅仅通过在学校做得好来满足。\n如果你在高中时问我高中生和成年人之间的区别是什么，我会说成年人必须谋生。错了。是成年人为自己负责。谋生只是其中的一小部分。更重要的是为自己承担智力责任。\n如果我不得不再次经历高中，我会把它当作日常工作对待。我不是说我在学校会松懈。把某事当作日常工作并不意味着把它做得很差。它意味着不被它定义。我的意思是我不认为自己是高中生，就像一个有服务员日常工作的音乐家不认为自己是服务员。[3] 当我不做日常工作的时候，我会开始尝试做真正的工作。\n当我问人们他们对高中最大的遗憾是什么时，他们几乎都说同样的事情：他们浪费了这么多时间。如果你想知道你现在在做什么，将来会最遗憾，可能就是这个。[4]\n有人说这是不可避免的——高中生还不能完成任何事情。但我不认为这是真的。证据就是你很无聊。你八岁的时候可能不无聊。你八岁的时候叫\u0026quot;玩耍\u0026quot;而不是\u0026quot;闲逛\u0026rdquo;，但这是一回事。当我八岁的时候，我很少无聊。给我一个后院和几个其他孩子，我就能玩一整天。\n我现在意识到，这在初中和高中变得陈旧的原因，是我准备好做别的事情了。童年正在变老。\n我不是说你不应该和朋友闲逛——不是说你们都应该成为除了工作什么都不做的无趣的小机器人。和朋友闲逛就像巧克力蛋糕。如果你偶尔吃它，你会更享受它，而不是每顿饭都只吃巧克力蛋糕。无论你多么喜欢巧克力蛋糕，吃了三顿饭后你会相当恶心。而这就是一个人在高中时感到的不适：精神恶心。[5]\n你可能想，我们必须做的不仅仅是取得好成绩。我们必须有课外活动。但你很清楚这些大多数是多么虚假。为慈善机构收集捐款是值得称赞的事情，但这不难。这不是完成什么事情。我所说的完成事情是指学习如何写得很好，或者如何编程计算机，或者前工业社会的生活到底是什么样的，或者如何写生人面。这种事情很少能转化为大学申请表上的一项。\n腐败 围绕进入大学设计你的生活是危险的，因为你必须给留下印象才能进入大学的人不是一个很有洞察力的听众。在大多数大学，决定你是否能进入的不是教授，而是招生官员，他们远没有那么聪明。他们是智力世界的士官。他们看不出你有多聪明。预科学校的存在本身就证明了这一点。\n很少有父母会为他们的孩子付那么多钱去一个不改善他们入学前景的学校。预科学校公开说这是他们的目标之一。但如果你停下来想一想，这意味着他们可以入侵入学过程：他们可以让同一个孩子显得比他去当地公立学校时更有吸引力。[6]\n现在你们大多数人都觉得你们生活中的工作是成为一个有前途的大学申请人。但这意味着你在设计你的生活来满足一个如此无意识的过程，以至于有一个完整的行业致力于颠覆它。难怪你会变得愤世嫉俗。你感到的不适与真人秀节目制作人或烟草业高管所感到的相同。你甚至得不到很多报酬。\n那么你做什么？你不应该做的是反抗。我就是这么做的，那是个错误。我没有完全意识到我们身上发生了什么，但我闻到了一股大老鼠的味道。于是我就放弃了。显然世界糟透了，那又何必费心呢？\n当我发现我们的一位老师自己也在使用Cliff\u0026rsquo;s Notes时，这似乎是理所当然的。在这样的课上取得好成绩肯定毫无意义。\n回想起来这是愚蠢的。这就像有人在足球比赛中被犯规，说，嘿，你犯规了，这是违反规则的，然后愤愤地走下场。犯规会发生。当你被犯规时要做的是不要失去冷静。继续比赛。通过把你置于这种情况，社会对你犯规了。是的，正如你怀疑的，你在课堂上学到的很多东西都是垃圾。是的，正如你怀疑的，大学入学过程很大程度上是一场骗局。但像许多犯规一样，这个是无意的。[7]所以继续比赛。\n反抗几乎和服从一样愚蠢。无论哪种情况，你都让他们告诉你的事情来定义你。我认为最好的计划是踏上正交向量。不要只做他们告诉你的，也不要只是拒绝。而是把学校当作日常工作。作为日常工作来说，这是相当甜的。你三点钟就完成了，你甚至可以在那里做你自己的事情。\n好奇心 而你真正的工作应该是什么？除非你是莫扎特，你的首要任务是弄清楚这一点。有什么伟大的事情可以做？有想象力的人在哪里？最重要的是，你对什么感兴趣？\u0026ldquo;能力\u0026quot;这个词是误导性的，因为它暗示着某种天生的东西。最强大的能力是对某个问题的一种强烈兴趣，而这种兴趣通常是后天培养的品味。\n这种想法的扭曲版本已经以\u0026quot;激情\u0026quot;的名义渗入流行文化。最近我看到一则服务员的广告，说他们想要对服务有\u0026quot;激情\u0026quot;的人。真正的东西不是一个人可以为侍餐桌而拥有的东西。激情是个不好的词。更好的名字应该是好奇心。\n孩子是好奇的，但我说的好奇心与孩子的好奇心形状不同。孩子的好奇心广泛而浅薄；他们随机地问为什么关于一切。在大多数成年人中，这种好奇心完全干涸了。必须如此：如果你总是问为什么关于一切，你无法完成任何事情。但在有雄心的成年人中，好奇心不是干涸，而是变得狭窄而深沉。泥滩变成了井。\n好奇心把工作变成游戏。对爱因斯坦来说，相对论不是一本他为了考试而学习的充满困难东西的书。这是一个他试图解决的谜团。所以对他来说发明它可能感觉比现在某人在课堂上学习它更像游戏。\n你从学校得到的最危险的错觉之一是，做伟大的事情需要很多纪律。大多数学科的教学方式如此无聊，以至于只有通过纪律你才能鞭策自己完成它们。所以当我在大学早期读到维特根斯坦的一句话说他没有自律，从未能拒绝自己任何东西，甚至一杯咖啡，我感到很惊讶。\n现在我认识一些做伟大工作的人，他们都一样。他们几乎没有纪律。他们都是可怕的拖延者，发现几乎不可能让自己做他们不感兴趣的事情。一个还没有送出他婚礼感谢 notes的一半，那是四年前的事了。另一个的收件箱里有26,000封电子邮件。\n我并不是说你可以零自律。你可能需要你跑步所需要的那么多。我常常不愿意去跑步，但一旦去了，我很享受。如果我不跑步好几天，我会感到不舒服。做伟大事情的人也是如此。他们知道如果不工作会感觉不好，他们有足够的自律让自己到桌边开始工作。但一旦开始，兴趣接管，纪律就不再必要了。\n你认为莎士比亚是咬紧牙关，勤奋地试图写伟大的文学吗？当然不是。他在享受乐趣。这就是他如此优秀的原因。\n如果你想做好工作，你需要对一个有希望的问题有强烈的好奇心。爱因斯坦的关键时刻是当他看麦克斯韦方程组时说，这里到底发生了什么？\n可能需要数年时间才能确定一个有生产力的问题，因为可能需要数年时间才能弄清一个学科真正是关于什么的。举一个极端的例子，考虑数学。大多数人认为他们讨厌数学，但你在学校以\u0026quot;数学\u0026quot;名义做的无聊事情与数学家所做的事情完全不同。\n伟大的数学家G.H.哈代说他在高中时也不喜欢数学。他只是接受它是因为他比其他学生更擅长。只是后来他意识到数学很有趣——只是后来他才开始提问，而不仅仅是正确回答。\n当我的一个朋友过去常常因为他必须为学校写论文而抱怨时，他的母亲会告诉他：找一个让它变得有趣的方法。这就是你需要做的：找一个让世界变得有趣的问题。做伟大事情的人看着和其他人一样的世界，但注意到一些奇怪而引人入胜的神秘细节。\n不仅在智力方面。亨利·福特的伟大问题是，为什么汽车必须是奢侈品？如果你把它们当作商品对待会发生什么？弗朗茨·贝肯鲍尔的实际上是，为什么每个人都必须保持在自己的位置？为什么后卫也能进球呢？\n现在 如果需要数年时间才能阐明伟大的问题，你现在十六岁该做什么？努力寻找一个。伟大的问题不会突然出现。它们逐渐在你头脑中凝结。而使它们凝结的是经验。所以找到伟大问题的方法不是搜索它们——不是游荡思考，我将做出什么伟大发现？你无法回答那个问题；如果你能，你就已经做到了。\n让大想法出现在你头脑中的方法不是寻找大想法，而是花大量时间做你感兴趣的工作，并在这个过程中让你的头脑足够开放，让大想法可以栖息。爱因斯坦、福特和贝肯鲍尔都使用了这个配方。他们都像钢琴家知道键盘一样了解自己的工作。所以当有什么事情似乎不对劲时，他们有信心注意到它。\n如何花时间，花在什么上？只需选择一个看起来有趣的项目：掌握一些材料，或者制作一些东西，或者回答某个问题。选择一个需要不到一个月的项目，并确保你有办法完成它。做一些足够困难以扩展你自己的事情，但只是刚好，特别是在开始时。如果你在两个项目之间做决定，选择看起来最有趣的那个。如果一个在你面前爆炸了，开始另一个。重复直到，像内燃机一样，过程变得自我维持，每个项目都产生下一个项目。（这可能需要数年。）\n如果不为\u0026quot;学校\u0026quot;做项目可能会限制你或让它看起来像工作，那也好。如果你想，可以让你的朋友参与，但不要太多，只有当他们不是靠不住的人。朋友提供道义支持（很少有创业公司是一个人开始的），但秘密也有其优势。秘密项目有某种令人愉悦的感觉。你可以承担更多风险，因为没有人会知道你是否失败。\n如果一个项目似乎不在你应该有的某个目标的路径上，不要担心。路径可以比你想象的弯曲得多。所以让路径从项目中生长。最重要的是对它感到兴奋，因为你是通过做来学习的。\n不要不理会不良动机。最强大的是在某些事情上比别人做得更好的欲望。哈代说这就是让他开始的，我认为他唯一不寻常的地方是他承认了这一点。另一个强大的动力是做或知道你不应该做的事情的欲望。密切相关的是做某些大胆事情的欲望。十六岁的人不应该写小说。所以如果你尝试，你实现的任何事情都是积极的一面；如果你完全失败，你做得不比期望差。[8]\n",
    "description": "",
    "tags": ["高中","建议","教育","好奇心","雄心","成功","人生课程"],
    "categories": [],
    "content": "→ English Version\n你会希望你当初知道的事 2005年1月\n（我为高中写了这篇演讲。我实际上从未做过这个演讲，因为学校当局否决了邀请我的计划。）\n当我说我要在高中演讲时，我的朋友们很好奇。你会对高中生说什么？于是我问他们，你希望有人在高中时告诉你什么？他们的回答惊人地相似。所以我要告诉你们我们都希望有人告诉过我们的事情。\n我先告诉你们一件你们在高中不需要知道的事情：你的人生想做什么。人们总是问你这个问题，所以你觉得你应该有个答案。但成年人问这个主要是为了开始对话。他们想知道你是哪种人，这个问题只是为了让你们开口说话。他们问这个问题就像你可能戳潮水池里的寄居蟹，看看它会做什么。\n如果我现在回到高中，有人问我的计划，我会说我的首要任务是了解有什么选择。你不需要急着选择你的人生工作。你需要做的是发现你喜欢什么。如果你想在所做的事情上做得好，你必须做你喜欢的事情。\n决定你喜欢什么似乎是最容易的事情，但结果证明是困难的，部分是因为很难准确了解大多数工作的真实情况。当医生并不像电视上描绘的那样。幸运的是，你也可以通过在医院做志愿者来观察真正的医生。[1]\n但是有些工作你无法了解，因为还没有人做这些工作。过去十年里我做的大多数工作在我上高中时都不存在。世界变化很快，变化的速度本身也在加快。在这样的世界里，制定固定计划不是个好主意。\n然而每年五月，全国各地的演讲者都会点燃标准毕业演讲，主题是：不要放弃你的梦想。我知道他们的意思，但这是个糟糕的说法，因为它暗示你应该被早期制定的某个计划束缚。计算机世界对此有个术语：过早优化。这等同于灾难。这些演讲者最好只简单地说，不要放弃。\n他们真正的意思是，不要气馁。不要认为你不能做别人能做的事情。我同意你不应该低估你的潜力。做过伟大事情的人似乎像是另一个种族的人。大多数传记只会夸大这种幻觉，部分原因是传记作者不可避免地陷入崇拜的态度，部分是因为，知道故事的结局，他们忍不住简化情节，直到似乎主题的生活是命运的问题，只是某种天生天才的展开。事实上，我怀疑如果你和十六岁的莎士比亚或爱因斯坦一起上学，他们会给人留下深刻印象，但并不是完全不像你的其他朋友。\n这是个令人不安的想法。如果他们只是像我们一样，那么他们必须非常努力地工作才能做到他们所做的事情。这是我们喜欢相信天才的原因之一。它为我们的懒惰找了个借口。如果这些人能够做到他们所做的事情只是因为某种神奇的莎士比亚性或爱因斯坦性，那么如果我们不能做到同样好的事情，不是我们的错。\n我并不是说没有天才这种东西。但如果你试图在两个理论之间选择，一个为你的懒惰找借口，另一个可能是正确的。\n到目前为止，我们已经将标准毕业演讲从\u0026quot;不要放弃你的梦想\u0026quot;削减到\u0026quot;别人能做的，你也能做。\u0026ldquo;但这还需要进一步削减。自然能力确实存在差异。大多数人高估了它的作用，但它确实存在。如果我和一个四英尺高、雄心是在NBA打球的人说话，我会说\u0026quot;只要你真正努力，你就能做任何事情\u0026rdquo;，这会显得非常愚蠢。[2]\n我们需要将标准毕业演讲削减为，\u0026ldquo;具有你能力的人能做的，你也能做；不要低估你的能力。\u0026ldquo;但经常发生的是，你越接近真相，你的句子就越混乱。我们采用了一个漂亮、整洁（但错误）的口号，把它搅得像泥潭一样。它不再是一篇很好的演讲了。但更糟糕的是，它不再告诉你该做什么了。具有你能力的人？你的能力是什么？\n逆风 我认为解决方案是朝另一个方向努力。不要从目标倒推，要从有希望的情况向前推进。实际上，大多数成功的人都是这样做的。\n在毕业演讲的方法中，你决定二十年后想在哪里，然后问：我现在应该做什么才能到达那里？我建议你不要承诺未来任何事情，只看现在可用的选择，选择那些会给你最有希望的选择范围的。\n你做什么工作并不那么重要，只要你不浪费时间。做你感兴趣并增加你选择的事情，稍后再担心选择哪个。\n假设你是一个大学新生，决定主修数学还是经济学。嗯，数学会给你更多选择：你可以从数学进入几乎任何领域。如果你主修数学，很容易进入经济学研究生院，但如果你主修经济学，很难进入数学研究生院。\n滑翔机在这里是个很好的比喻。因为滑翔机没有引擎，你不能迎风飞行而不失去大量高度。如果你让自己离好的着陆点很远顺风，你的选择会不舒服地缩小。通常你想保持逆风。所以我建议用\u0026quot;保持逆风\u0026quot;来替代\u0026quot;不要放弃你的梦想\u0026rdquo;。\n但是，你怎么做到这一点呢？即使数学是经济学的逆风，你作为一个高中生怎么知道这一点？\n嗯，你不知道，而这是你需要发现的。寻找聪明人和困难的问题。聪明人倾向于聚集在一起，如果你能找到这样一个群体，加入它可能是值得的。但要找到这些并不直接，因为有很多造假行为。\n对于一个新来的本科生，所有大学系看起来都差不多。教授们 …"
  },{
    "title": "你如何知道",
    "url": "/paul_graham/essays_zh/know/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n你如何知道 2014年12月\n我至少读过两次维尔阿杜安的第四次十字军东征编年史，可能是三次。然而如果我必须写下我记得的一切，我怀疑它不会超过一页。乘以几百倍，当我看着我的书架时，我有一种不安的感觉。如果你记得这么少，读所有这些书有什么用？\n几个月前，当我正在阅读康斯坦斯·里德的精彩希尔伯特传记时，我想出了如果不是这个问题的答案，至少是让我感觉更好一些的东西。她写道：\n希尔伯特对那些用事实填满学生但没有教他们如何构建问题和解决它们的数学讲座没有耐心。他经常告诉他们\u0026quot;一个问题的完美表述已经是它的一半解决方案。\u0026quot;\n这似乎对我来说一直是一个重要的观点，在听到希尔伯特确认它后，我更加确信了这一点。但我是如何首先相信这个想法的呢？我自己的经验和我读过的其他东西的结合。当时我什么也不记得了！最终我也会忘记希尔伯特也确认了这一点。但我对这个想法重要性的增加信念将仍然是我从这本书中学到的东西，即使我忘记了我学过它。\n阅读和经验训练你对世界的模型。即使你忘记了经验或你读过的内容，它对你世界模型的影响仍然存在。你的心智就像一个你已经丢失源代码的编译程序。它能工作，但你不知道为什么。\n寻找我从维尔阿杜安编年史中学到的东西的地方不是我记住的内容，而是我对十字军东征、威尼斯、中世纪文化、攻城战等等的心智模型。这并不意味着我不能更专注地阅读，但至少阅读的收获并不像看起来那么微不足道。\n这是那些事后看来显而易见的事情之一。但对我来说这是一个惊喜，想必对任何其他对他们（显然）忘记读过的那么多内容感到不安的人来说也是。\n然而，意识到它不仅仅是让你对忘记感觉好一点。还有具体的影响。\n例如，阅读和经验通常在发生时被\u0026quot;编译\u0026quot;，使用你当时的大脑状态。同一本书在你生命的不同时间会被不同地编译。这意味着多次阅读重要的书是非常值得的。我过去总是对重读书感到一些不安。我无意识地将阅读与木工等工作混为一谈，在那里不得不再次做某事意味着你第一次做错了。而现在\u0026quot;已经读过\u0026quot;这个短语似乎几乎不合语法。\n有趣的是，这种影响不仅限于书籍。技术将越来越多地使我们能够重新体验我们的经历。当人们今天这样做时，通常是为了再次享受它们（例如，当看旅行的照片时）或找到他们编译代码中某些错误的起源（例如，当斯蒂芬·弗莱成功记起阻止他唱歌的童年创伤时）。但随着记录和播放你生活的技术改进，人们可能会变得普遍地在没有特定目标的情况下重新体验经历，只是为了像重读书一样再次从它们中学习。\n最终我们可能不仅能够播放经历，还能够索引甚至编辑它们。所以虽然不知道你是如何知道事情的可能似乎是人性的一部分，但它可能不是。\n感谢 Sam Altman、Jessica Livingston 和 Robert Morris 阅读本文的草稿。\n日语翻译\n",
    "description": "",
    "tags": ["知识","学习","记忆","阅读","经验","心智模型","教育"],
    "categories": [],
    "content": "→ English Version\n你如何知道 2014年12月\n我至少读过两次维尔阿杜安的第四次十字军东征编年史，可能是三次。然而如果我必须写下我记得的一切，我怀疑它不会超过一页。乘以几百倍，当我看着我的书架时，我有一种不安的感觉。如果你记得这么少，读所有这些书有什么用？\n几个月前，当我正在阅读康斯坦斯·里德的精彩希尔伯特传记时，我想出了如果不是这个问题的答案，至少是让我感觉更好一些的东西。她写道：\n希尔伯特对那些用事实填满学生但没有教他们如何构建问题和解决它们的数学讲座没有耐心。他经常告诉他们\u0026quot;一个问题的完美表述已经是它的一半解决方案。\u0026quot;\n这似乎对我来说一直是一个重要的观点，在听到希尔伯特确认它后，我更加确信了这一点。但我是如何首先相信这个想法的呢？我自己的经验和我读过的其他东西的结合。当时我什么也不记得了！最终我也会忘记希尔伯特也确认了这一点。但我对这个想法重要性的增加信念将仍然是我从这本书中学到的东西，即使我忘记了我学过它。\n阅读和经验训练你对世界的模型。即使你忘记了经验或你读过的内容，它对你世界模型的影响仍然存在。你的心智就像一个你已经丢失源代码的编译程序。它能工作，但你不知道为什么。\n寻找我从维尔阿杜安编年史中学到的东西的地方不是我记住的内容，而是我对十字军东征、威尼斯、中世纪文化、攻城战等等的心智模型。这并不意味着我不能更专注地阅读，但至少阅读的收获并不像看起来那么微不足道。\n这是那些事后看来显而易见的事情之一。但对我来说这是一个惊喜，想必对任何其他对他们（显然）忘记读过的那么多内容感到不安的人来说也是。\n然而，意识到它不仅仅是让你对忘记感觉好一点。还有具体的影响。\n例如，阅读和经验通常在发生时被\u0026quot;编译\u0026quot;，使用你当时的大脑状态。同一本书在你生命的不同时间会被不同地编译。这意味着多次阅读重要的书是非常值得的。我过去总是对重读书感到一些不安。我无意识地将阅读与木工等工作混为一谈，在那里不得不再次做某事意味着你第一次做错了。而现在\u0026quot;已经读过\u0026quot;这个短语似乎几乎不合语法。\n有趣的是，这种影响不仅限于书籍。技术将越来越多地使我们能够重新体验我们的经历。当人们今天这样做时，通常是为了再次享受它们（例如，当看旅行的照片时）或找到他们编译代码中某些错误的起源（例如，当斯蒂芬·弗莱成功记起阻止他唱歌的童年创伤时）。但随着记录和播放你生活的技术改进，人们可能会变得普遍地在没有特定目标的情况下重新体验经历，只是为了像重读书一样再次从它们中学习。\n最终我们可能不仅能够播放经历，还能够索引甚至编辑它们。所以虽然不知道你是如何知道事情的可能似乎是人性的一部分，但它可能不是。\n感谢 Sam Altman、Jessica Livingston 和 Robert Morris 阅读本文的草稿。\n日语翻译\n"
  },{
    "title": "你本不该有老板",
    "url": "/paul_graham/essays_zh/boss/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n你本不该有老板 想要创业吗？获得Y Combinator的资助。\n2008年3月，2008年6月修订\n技术倾向于将正常与自然分开。我们的身体不是被设计来吃富裕国家人们吃的食物，也不是来进行这么少的运动。我们的工作方式可能也有类似的问题：正常的工作对我们智力的伤害可能就像白面粉或糖对我们身体的伤害一样。\n在与创业创始人共事几年后，我开始怀疑这一点。我现在已经与200多个创始人合作过，我注意到在自己创业公司工作的程序员与在大组织工作的程序员之间有明显的区别。我不会说创始人看起来更快乐， necessarily；创业可能非常有压力。也许最好的说法是，他们在你的身体在长跑时比坐在沙发上吃甜甜圈时更快乐的意义上更快乐。\n虽然他们在统计上不正常，但创业创始人似乎在以对人类更自然的方式工作。\n去年我在非洲，看到很多以前只在动物园里见过的野生动物。它们看起来多么不同，这很了不起。特别是狮子。野外的狮子似乎有十倍的活力。它们就像是不同的动物。我怀疑为自己工作对人类来说感觉更好，就像生活在野外对像狮子这样广泛活动的捕食者来说一定感觉更好一样。动物园的生活更容易，但这不是它们被设计的生活。\n树 在大公司工作有什么不自然的？问题的根源在于人类不是被设计在如此大的群体中工作。\n当你在野外看到动物时，你注意到的另一件事是，每个物种都在特定大小的群体中茁壮成长。一群黑斑羚可能有100只成年个体；狒狒可能20只；狮子很少10只。人类似乎也被设计在群体中工作，我读到的关于狩猎采集者的内容与组织研究和我的经验相符，表明理想的大小大致是：8人的群体工作良好；到20人时它们变得难以管理；50人的群体真的很笨拙。[1] 无论上限是多少，我们显然不是被设计在几百人的群体中工作。然而——由于与技术而非人性有关的原因——很多人在拥有数百或数千员工的公司工作。\n公司知道那么大的群体无法工作，所以它们将自己分成足够小以一起工作的单位。但为了协调这些，它们必须引入新的东西：老板。\n这些较小的群体总是按树状结构排列。你的老板是你的群体附着到树上的点。但是当你使用这个技巧将大群体分成小群体时，会发生一些奇怪的事情，我从未听有人明确提及。在你上一级的群体中，你的老板代表你的整个群体。10个经理的群体不仅仅是10个人以通常方式一起工作的群体。它真的是群体的群体。这意味着为了让10个经理的群体像只是10个个体一样一起工作，每个经理工作的群体必须像一个人一样工作——工人和经理之间只能分享相当于一个人的自由。\n在实践中，一群人永远无法像一个人一样行动。但在以这种方式分成群体的大组织中，压力总是在那个方向上。每个群体都尽力像人类被设计工作的小个体群体一样工作。创造它的目的就是如此。当你传播这种约束时，结果是每个人获得的行动自由与整个树的大小成反比。[2]\n任何在大组织工作过的人都感受到过这一点。即使你的群体只有10个人，你也能感受到在100名员工的公司和10,000名员工的公司工作的区别。\n玉米糖浆 大组织中的10人群体是一种虚假的部落。你与之互动的人数大约是正确的。但缺少了一些东西：个人主动性。狩猎采集部落的自由度要高得多。领导者比部落其他成员有更多的权力，但他们通常不像老板那样告诉他们做什么和什么时候做。\n这不是你老板的错。真正的问题是在你上面的层级群体中，你的整个群体是一个虚拟的人。你的老板只是约束传递给你的方式。\n所以在大组织中的10人群体中工作同时感觉既对又错。表面上它感觉像是你被设计工作的群体类型，但缺少了一些重要的东西。大公司的工作就像高果糖玉米糖浆：它具有你喜欢的东西的一些品质，但灾难性地缺乏其他品质。\n确实，食物是解释通常工作方式有什么问题的绝佳隐喻。\n例如，在大公司工作是默认要做的事情，至少对程序员来说。能有多糟糕？嗯，食物很清楚地显示了这一点。如果你今天被随机放在美国的一个地方，你周围几乎所有的食物对你都是有害的。人类不是被设计来吃白面粉、精制糖、高果糖玉米糖浆和氢化植物油的。然而，如果你分析普通杂货店的内容，你可能会发现这四种成分占了大部分热量。\u0026ldquo;正常\u0026quot;食物对你非常糟糕。唯一吃人类被设计实际吃的东西的人是伯克利的几个穿Birkenstock鞋的怪人。\n如果\u0026quot;正常\u0026quot;食物对我们如此糟糕，为什么它如此普遍？主要有两个原因。一是它有更直接的吸引力。你可能在吃那个披萨一小时后感觉糟糕，但吃前几口感觉很好。另一个是规模经济。生产垃圾食品可以规模化；生产新鲜蔬菜不行。这意味着（a）垃圾食品可以非常便宜，（b）值得花很多钱来营销它。\n如果人们必须在便宜、大量营销、短期有吸引力的东西和昂贵、晦涩、长期有吸引力的东西之间选择，你认为大多数人会选择哪个？\n工作也是如此。普通的麻省理工学院毕业生想在谷歌或微软工作，因为它是一个公认的品牌，很安全，他们会立即得到高薪。这是他们午餐吃的披萨的工作等价物。缺点只有在以后才会显现，而且只是一种模糊的不适感。\n同时，创业公司的创始人和早期员工，就像伯克利的穿Birkenstock鞋的怪人：虽然只是人口的极少数，但他们是像人类被设计那样生活的人。在人工世界里，只有极端主义者自然地生活。\n程序员 大公司工作的限制性对程序员来说尤其困难，因为编程的本质是构建新事物。销售人员每天做大致相同的推销；支持人员回答大致相同的问题；但一旦你写了一段代码，你就不需要再写它了。所以像程序员被设计那样工作的程序员总是在创造新事物。当你是一个组织的一部分，其结构给予每个人的自由与树的大小成反比时，当你做新事情时，你会面临阻力。\n这似乎是规模大的必然结果。即使在最聪明的公司也是如此。最近我与一个创始人交谈，他考虑一毕业就创业，但去了谷歌工作，因为他认为在那里会学到更多。他没有学到预期的那么多。程序员通过做来学习，而他想做的大多数事情，他都不能——有时因为公司不让他，但常常因为公司的代码不让他。在遗留代码的阻力、在如此大的组织中进行开发的开销，以及其他群体拥有的接口施加的限制之间，他只能尝试他想做的事情的一小部分。他说他在自己的创业公司学到了更多，尽管他必须做公司的所有杂事以及编程，因为至少当他编程时，他可以做任何他想做的事情。\n下游的障碍向上游传播。如果不允许你实现新想法，你就会停止有新想法。反之亦然：当你做任何你想做的事情时，你对做什么有更多的想法。所以为自己工作使你的大脑更强大，就像低限制排气系统使发动机更强大一样。\n为自己工作不一定要意味着创业，当然。但在大公司的常规工作和自己的创业公司之间做决定的程序员可能会在创业中学到更多。\n通过调整你工作的公司规模，你可以调整你获得的自由量。如果你创办公司，你将有最多的自由。如果你成为前10名员工之一，你将拥有几乎与创始人一样多的自由。即使是100人的公司也会感觉与1000人的公司不同。\n在小公司工作不确保自由。大组织的树状结构设置了自由的的上限，而不是下限。小公司的头可能仍然选择成为暴君。关键是大组织被其结构 compelled 成为暴君。\n后果 这对组织和个人都有真正的后果。一个是公司随着规模变大不可避免地会变慢，无论它们多么努力保持创业精神。这是每个大组织被迫采用的树状结构的结果。\n或者说，大组织只有避免树状结构才能避免变慢。而且由于人性限制了可以一起工作的群体规模，我能想象的更大群体避免树状结构的唯一方法是没有结构：让每个群体实际上是独立的，像市场经济组成部分那样一起工作。\n这可能值得探索。我怀疑已经有一些高度可分的业务倾向于这种方式。但我不知道有任何技术公司这样做。\n公司可以做的比构建自己为海绵少的一件事是：保持小规模。如果我是对的，那么在每个阶段保持公司尽可能小确实有回报。特别是技术公司。这意味着雇佣最好的人加倍重要。平庸的雇佣伤害你两次：他们完成的更少，但它们也使你变大，因为你需要更多人来解决给定的问题。\n对个人来说结果是一样的：瞄准小规模。在大组织工作总是会糟糕，组织越大，越糟糕。\n几年前我写的一篇文章中，我建议即将毕业的 seniors 在创办自己的公司之前为另一家公司工作几年。我现在要修改这个。如果你愿意，可以为另一家公司工作，但只在小公司，如果你想创办自己的创业公司，就继续吧。\n我建议大学毕业生不要立即创业的原因是我觉得大多数人会失败。而且他们会失败。但有雄心的程序员做自己的事情并失败比去大公司工作更好。当然他们会学到更多。他们甚至在财务上可能更好。很多二十出头的人陷入债务，因为他们的费用增长比离开学校时看起来如此高的工资更快。至少如果你创业并失败，你的净资产将是零而不是负数。[3]\n我们现在资助了这么多不同类型的创始人，我们有足够的数据看到模式，在大公司工作似乎没有好处。工作过几年的人确实比刚毕业的人看起来更好，但只是因为他们年长那么多。\n来自大公司的人往往看起来有点保守。很难说有多少是大公司使他们那样的，有多少是使他们首先在大公司工作的自然保守。但很大一部分肯定是学到的。我知道因为我看到它消失了。\n看到这种情况发生如此多次是让我相信为自己工作，或者至少为小群体工作，是程序员的自然生活方式的事情之一。到达Y Combinator的创始人经常有难民般的被压抑神态。三个月后他们 transformed：他们有如此多的信心，似乎长高了几英寸。[4] 这听起来很奇怪，他们似乎同时更担心和更快乐。这正是我描述野外狮子看起来的方式。\n看着员工转变为创始人使清楚两个人之间的差异主要是由于环境——特别是大公司的环境对程序员有毒。在他们自己创业公司工作的头几周，他们似乎活了过来，因为他们终于以人们被设计的方式工作了。\n注释 [1] 当我说人类被 meant 或设计以某种方式生活时，我指的是通过进化。\n[2] 不仅仅是叶子受苦。约束向上和向下传播。所以经理也受到约束；他们不能只是做事情，而必须通过下属行动。\n[3] 不要用信用卡为你的创业融资。用债务为创业融资通常是愚蠢的举动，而信用卡债务是最愚蠢的。信用卡债务是个坏主意， period。它是邪恶公司为绝望和愚蠢的人设置的陷阱。\n[4] 我们资助的创始人曾经更年轻（最初我们鼓励本科生申请），前几次我看到这个时，我常想知道他们是否真的在身体上长高了。\n感谢Trevor Blackwell、Ross Boucher、Aaron Iba、Abby Kirigin、Ivan Kirigin、Jessica Livingston和Robert Morris阅读本文的草稿。\n",
    "description": "",
    "tags": ["老板","工作","创业","自由","组织","编程","管理"],
    "categories": [],
    "content": "→ English Version\n你本不该有老板 想要创业吗？获得Y Combinator的资助。\n2008年3月，2008年6月修订\n技术倾向于将正常与自然分开。我们的身体不是被设计来吃富裕国家人们吃的食物，也不是来进行这么少的运动。我们的工作方式可能也有类似的问题：正常的工作对我们智力的伤害可能就像白面粉或糖对我们身体的伤害一样。\n在与创业创始人共事几年后，我开始怀疑这一点。我现在已经与200多个创始人合作过，我注意到在自己创业公司工作的程序员与在大组织工作的程序员之间有明显的区别。我不会说创始人看起来更快乐， necessarily；创业可能非常有压力。也许最好的说法是，他们在你的身体在长跑时比坐在沙发上吃甜甜圈时更快乐的意义上更快乐。\n虽然他们在统计上不正常，但创业创始人似乎在以对人类更自然的方式工作。\n去年我在非洲，看到很多以前只在动物园里见过的野生动物。它们看起来多么不同，这很了不起。特别是狮子。野外的狮子似乎有十倍的活力。它们就像是不同的动物。我怀疑为自己工作对人类来说感觉更好，就像生活在野外对像狮子这样广泛活动的捕食者来说一定感觉更好一样。动物园的生活更容易，但这不是它们被设计的生活。\n树 在大公司工作有什么不自然的？问题的根源在于人类不是被设计在如此大的群体中工作。\n当你在野外看到动物时，你注意到的另一件事是，每个物种都在特定大小的群体中茁壮成长。一群黑斑羚可能有100只成年个体；狒狒可能20只；狮子很少10只。人类似乎也被设计在群体中工作，我读到的关于狩猎采集者的内容与组织研究和我的经验相符，表明理想的大小大致是：8人的群体工作良好；到20人时它们变得难以管理；50人的群体真的很笨拙。[1] 无论上限是多少，我们显然不是被设计在几百人的群体中工作。然而——由于与技术而非人性有关的原因——很多人在拥有数百或数千员工的公司工作。\n公司知道那么大的群体无法工作，所以它们将自己分成足够小以一起工作的单位。但为了协调这些，它们必须引入新的东西：老板。\n这些较小的群体总是按树状结构排列。你的老板是你的群体附着到树上的点。但是当你使用这个技巧将大群体分成小群体时，会发生一些奇怪的事情，我从未听有人明确提及。在你上一级的群体中，你的老板代表你的整个群体。10个经理的群体不仅仅是10个人以通常方式一起工作的群体。它真的是群体的群体。这意味着为了让10个经理的群体像只是10个个体一样一起工作，每个经理工作的群体必须像一个人一样工作——工人和经理之间只能分享相当于一个人的自由。\n在实践中，一群人永远无法像一个人一样行动。但在以这种方式分成群体的大组织中，压力总是在那个方向上。每个群体都尽力像人类被设计工作的小个体群体一样工作。创造它的目的就是如此。当你传播这种约束时，结果是每个人获得的行动自由与整个树的大小成反比。[2]\n任何在大组织工作过的人都感受到过这一点。即使你的群体只有10个人，你也能感受到在100名员工的公司和10,000名员工的公司工作的区别。\n玉米糖浆 大组织中的10人群体是一种虚假的部落。你与之互动的人数大约是正确的。但缺少了一些东西：个人主动性。狩猎采集部落的自由度要高得多。领导者比部落其他成员有更多的权力，但他们通常不像老板那样告诉他们做什么和什么时候做。\n这不是你老板的错。真正的问题是在你上面的层级群体中，你的整个群体是一个虚拟的人。你的老板只是约束传递给你的方式。\n所以在大组织中的10人群体中工作同时感觉既对又错。表面上它感觉像是你被设计工作的群体类型，但缺少了一些重要的东西。大公司的工作就像高果糖玉米糖浆：它具有你喜欢的东西的一些品质，但灾难性地缺乏其他品质。\n确实，食物是解释通常工作方式有什么问题的绝佳隐喻。\n例如，在大公司工作是默认要做的事情，至少对程序员来说。能有多糟糕？嗯，食物很清楚地显示了这一点。如果你今天被随机放在美国的一个地方，你周围几乎所有的食物对你都是有害的。人类不是被设计来吃白面粉、精制糖、高果糖玉米糖浆和氢化植物油的。然而，如果你分析普通杂货店的内容，你可能会发现这四种成分占了大部分热量。\u0026ldquo;正常\u0026quot;食物对你非常糟糕。唯一吃人类被设计实际吃的东西的人是伯克利的几个穿Birkenstock鞋的怪人。\n如果\u0026quot;正常\u0026quot;食物对我们如此糟糕，为什么它如此普遍？主要有两个原因。一是它有更直接的吸引力。你可能在吃那个披萨一小时后感觉糟糕，但吃前几口感觉很好。另一个是规模经济。生产垃圾食品可以规模化；生产新鲜蔬菜不行。这意味着（a）垃圾食品可以非常便宜，（b）值得花很多钱来营销它。\n如果人们必须在便宜、大量营销、短期有吸引力的东西和昂贵、晦涩、长期有吸引力的东西之间选择，你认为大多数人会选择哪个？\n工作也是如此。普通的麻省理工学院毕业生想在谷歌或微软工作，因为 …"
  },{
    "title": "你脑海中最主要的想法",
    "url": "/paul_graham/essays_zh/top/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n你脑海中最主要的想法 2010年7月\n我最近意识到，早晨洗澡时思考的东西比我想象的更重要。我知道那是产生想法的好时机。现在我要进一步说：对于任何你洗澡时不会思考的事情，你都很难真正做好。\n每个解决过难题的人可能都熟悉这种现象：努力思考想要弄明白某件事，失败了，然后在做其他事情时突然看到了答案。有一种思考是你不需要努力就去做的。我越来越确信，这种思考方式不仅对解决难题有帮助，而且是必要的。棘手的部分是，你只能间接地控制它。[1]\n我认为大多数人在任何特定时间都有一个最主要的想法。那就是当他们被允许自由漂移时思绪会漂向的想法。而这个想法往往会获得这种思考的所有好处，而其他想法则被剥夺了。这意味着让错误的想法成为你脑海中的主要想法是一场灾难。\n让我明白这一点的是，我有两个很长的时期，有一个我不希望成为主要想法的想法。\n我注意到创业公司在开始融资时完成的任务要少得多，但直到我们自己融资时我才明白为什么。问题不在于与投资者会面所花费的实际时间。问题在于，一旦你开始融资，融资就成为你脑海中的主要想法。那就是你早晨洗澡时会思考的事情。这意味着其他问题都不是。\n当我运行Viaweb时，我讨厌融资，但我忘记了为什么我如此讨厌它。当我们为Y Combinator融资时，我想起来了。金钱问题特别容易成为你脑海中的主要想法。原因是它们必须如此。很难获得金钱。这不是那种默认会发生的事情。除非你让它成为你洗澡时思考的事情，否则它不会发生。然后你在其他宁愿做的事情上就进展甚微。[2]\n（我听到从事教授工作的朋友有类似的抱怨。现在的教授似乎已经成了专业筹款人，顺便做一点研究。也许是时候解决这个问题了。）\n这件事给我如此强烈冲击的原因是，在之前的10年里，我大部分时间都能思考我想思考的事情。所以当我不能时的对比很鲜明。但我不认为这个问题只有我有，因为我看到的几乎每个创业公司在开始融资时都会陷入停顿——或者在与收购者交谈时。\n你不能直接控制你的思绪漂向哪里。如果你在控制它们，它们就不是在漂移。但你可以通过控制让自己陷入的情境来间接地控制它们。这对我是个教训：小心你让什么变得对你至关重要。努力让自己陷入最紧迫的问题是你想要思考的情境中。\n当然，你没有完全的控制权。紧急情况可能会把其他想法推出你的脑海。但除了紧急情况，你对什么成为你脑海中的主要想法有很大的间接控制权。\n我发现有两种想法特别值得避免——它们就像尼罗河鲈鱼一样推出更有趣的想法。我已经提到过一种：关于金钱的想法。获得金钱几乎就定义了是一个注意力陷阱。另一个是争议。这些也以错误的方式引人入胜：它们具有与真正有趣的想法相同的魔术贴形状，但没有实质内容。所以如果你想完成真正的工作，就要避免争议。[3]\n就连牛顿也陷入了这种陷阱。1672年发表他的色彩理论后，他发现自己多年来被争议分散了注意力，最终得出结论，唯一的解决方案是停止发表：我发现自己成了哲学的奴隶，但如果我能摆脱莱纳斯先生的事情，我将坚决地永远告别它，除非我为自己的私满足所做的事情，或者留待我身后发表。因为我看到一个人必须要么决心不发表任何新东西，要么成为捍卫它的奴隶。[4] 列日大学的莱纳斯和他的学生是那些更顽固的批评者之一。牛顿的传记作者韦斯特福尔似乎觉得他反应过度：回想一下，在他写作的时候，牛顿的\u0026quot;奴役\u0026quot;包括在一年内给列日写了五封回信，总共十四页印刷页。我对牛顿更有同情心。问题不在于这14页，而在于这个愚蠢的争议不断地被重新引入作为一个渴望思考其他事情的心灵中的主要想法所带来的痛苦。\n转过另一边脸被证明有自私的好处。伤害你的人伤害你两次：第一次是伤害本身，第二次是事后花时间思考它。如果你学会忽视伤害，你至少可以避免第二次伤害。我发现我可以通过告诉自己：这不值得占据我头脑中的空间，从而在某种程度上避免思考人们对我的恶意行为。我总是很高兴发现自己忘记了争议的细节，因为那意味着我没有在思考它们。我的妻子认为我比她更宽容，但我的动机纯粹是自私的。\n我怀疑很多人不确定在任何特定时间他们脑海中的主要想法是什么。我经常对此判断错误。我倾向于认为它是我希望成为主要想法的想法，而不是实际上的那个。但弄清楚这一点很容易：洗个澡就是了。你的思绪不断回到什么话题？如果这不是你想要思考的，你可能想要改变一些事情。\n注释\n[1] 毫无疑问，这种思考类型已经有名字了，但我称之为\u0026quot;环境思考\u0026quot;。\n[2] 在我们的情况下这一点特别明显，因为我们筹集的两笔资金都不困难，但在这两种情况下，过程都拖了几个月。转移大量资金从来不是人们会随意对待的事情。所需的注意力随金额增加——可能不是线性的，但绝对是单调的。\n[3] 推论：避免成为管理者，否则你的工作将 consist 处理金钱和争议。\n[4] 致奥尔登堡的信，引自韦斯特福尔，理查德，《艾萨克·牛顿的生活》，第107页。\n感谢萨姆·奥特曼、帕特里克·克里森、杰西卡·利文斯顿和罗伯特·莫里斯阅读草稿。\n",
    "description": "",
    "tags": ["思维","注意力","专注","生产力","创业","想法"],
    "categories": [],
    "content": "→ English Version\n你脑海中最主要的想法 2010年7月\n我最近意识到，早晨洗澡时思考的东西比我想象的更重要。我知道那是产生想法的好时机。现在我要进一步说：对于任何你洗澡时不会思考的事情，你都很难真正做好。\n每个解决过难题的人可能都熟悉这种现象：努力思考想要弄明白某件事，失败了，然后在做其他事情时突然看到了答案。有一种思考是你不需要努力就去做的。我越来越确信，这种思考方式不仅对解决难题有帮助，而且是必要的。棘手的部分是，你只能间接地控制它。[1]\n我认为大多数人在任何特定时间都有一个最主要的想法。那就是当他们被允许自由漂移时思绪会漂向的想法。而这个想法往往会获得这种思考的所有好处，而其他想法则被剥夺了。这意味着让错误的想法成为你脑海中的主要想法是一场灾难。\n让我明白这一点的是，我有两个很长的时期，有一个我不希望成为主要想法的想法。\n我注意到创业公司在开始融资时完成的任务要少得多，但直到我们自己融资时我才明白为什么。问题不在于与投资者会面所花费的实际时间。问题在于，一旦你开始融资，融资就成为你脑海中的主要想法。那就是你早晨洗澡时会思考的事情。这意味着其他问题都不是。\n当我运行Viaweb时，我讨厌融资，但我忘记了为什么我如此讨厌它。当我们为Y Combinator融资时，我想起来了。金钱问题特别容易成为你脑海中的主要想法。原因是它们必须如此。很难获得金钱。这不是那种默认会发生的事情。除非你让它成为你洗澡时思考的事情，否则它不会发生。然后你在其他宁愿做的事情上就进展甚微。[2]\n（我听到从事教授工作的朋友有类似的抱怨。现在的教授似乎已经成了专业筹款人，顺便做一点研究。也许是时候解决这个问题了。）\n这件事给我如此强烈冲击的原因是，在之前的10年里，我大部分时间都能思考我想思考的事情。所以当我不能时的对比很鲜明。但我不认为这个问题只有我有，因为我看到的几乎每个创业公司在开始融资时都会陷入停顿——或者在与收购者交谈时。\n你不能直接控制你的思绪漂向哪里。如果你在控制它们，它们就不是在漂移。但你可以通过控制让自己陷入的情境来间接地控制它们。这对我是个教训：小心你让什么变得对你至关重要。努力让自己陷入最紧迫的问题是你想要思考的情境中。\n当然，你没有完全的控制权。紧急情况可能会把其他想法推出你的脑海。但除了紧急情况，你对什么成为你脑海中的主要想法有很大的间接控制权。\n我发现有两种想法特别值得避免——它们就像尼罗河鲈鱼一样推出更有趣的想法。我已经提到过一种：关于金钱的想法。获得金钱几乎就定义了是一个注意力陷阱。另一个是争议。这些也以错误的方式引人入胜：它们具有与真正有趣的想法相同的魔术贴形状，但没有实质内容。所以如果你想完成真正的工作，就要避免争议。[3]\n就连牛顿也陷入了这种陷阱。1672年发表他的色彩理论后，他发现自己多年来被争议分散了注意力，最终得出结论，唯一的解决方案是停止发表：我发现自己成了哲学的奴隶，但如果我能摆脱莱纳斯先生的事情，我将坚决地永远告别它，除非我为自己的私满足所做的事情，或者留待我身后发表。因为我看到一个人必须要么决心不发表任何新东西，要么成为捍卫它的奴隶。[4] 列日大学的莱纳斯和他的学生是那些更顽固的批评者之一。牛顿的传记作者韦斯特福尔似乎觉得他反应过度：回想一下，在他写作的时候，牛顿的\u0026quot;奴役\u0026quot;包括在一年内给列日写了五封回信，总共十四页印刷页。我对牛顿更有同情心。问题不在于这14页，而在于这个愚蠢的争议不断地被重新引入作为一个渴望思考其他事情的心灵中的主要想法所带来的痛苦。\n转过另一边脸被证明有自私的好处。伤害你的人伤害你两次：第一次是伤害本身，第二次是事后花时间思考它。如果你学会忽视伤害，你至少可以避免第二次伤害。我发现我可以通过告诉自己：这不值得占据我头脑中的空间，从而在某种程度上避免思考人们对我的恶意行为。我总是很高兴发现自己忘记了争议的细节，因为那意味着我没有在思考它们。我的妻子认为我比她更宽容，但我的动机纯粹是自私的。\n我怀疑很多人不确定在任何特定时间他们脑海中的主要想法是什么。我经常对此判断错误。我倾向于认为它是我希望成为主要想法的想法，而不是实际上的那个。但弄清楚这一点很容易：洗个澡就是了。你的思绪不断回到什么话题？如果这不是你想要思考的，你可能想要改变一些事情。\n注释\n[1] 毫无疑问，这种思考类型已经有名字了，但我称之为\u0026quot;环境思考\u0026quot;。\n[2] 在我们的情况下这一点特别明显，因为我们筹集的两笔资金都不困难，但在这两种情况下，过程都拖了几个月。转移大量资金从来不是人们会随意对待的事情。所需的注意力随金额增加——可能不是线性的，但绝对是单调的。\n[3] 推论：避免成为管理者，否则你的工作将 consist 处理金钱和争议。\n[4] 致奥尔登堡的信，引 …"
  },{
    "title": "保持身份小规模",
    "url": "/paul_graham/essays_zh/identity/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n保持身份小规模 2009年2月\n我今天终于意识到为什么政治和宗教会产生如此无用的讨论。\n通常情况下，在在线论坛上任何提到宗教的内容都会退化为宗教争论。为什么？为什么这种情况发生在宗教上，而不是发生在人们在线程上讨论的JavaScript或烘焙或其他话题上？\n宗教的不同之处在于，人们不觉得需要任何特定的专业知识才能对它发表意见。他们所需要的只是坚定的信念，任何人都可以拥有这些。没有一个关于JavaScript的讨论会像关于宗教的讨论增长得那么快，因为人们觉得他们必须超过某种专业知识的门槛才能发表评论。但在宗教上，每个人都是专家。\n然后我突然想到：这也是政治的问题所在。政治和宗教一样，是一个不需要专业知识门槛就可以发表意见的话题。你所需要的只是坚定的信念。\n宗教和政治是否有共同之处可以解释这种相似性？一个可能的解释是，它们处理的是没有确定答案的问题，所以人们的意见没有压力。由于没有人可以被证明是错的，每个意见都是同样有效的，意识到这一点，每个人都随意发表他们的意见。\n但这不是真的。当然，有些政治问题有确定的答案，比如一个新的政府政策会花费多少。但更精确的政治问题也遭受着与更模糊问题相同的命运。\n我认为宗教和政治的共同点是它们成为人们身份的一部分，而人们永远无法对成为他们身份一部分的事情进行富有成效的争论。根据定义，他们是偏袒的。\n哪些话题涉及人们的身份取决于人，而不是话题。例如，关于涉及一个或多个国家公民的战斗的讨论可能会退化为政治争论。但是今天关于青铜时代发生的战斗的讨论可能不会。没有人知道应该站在哪一边。所以不是政治是麻烦的根源，而是身份。当人们说讨论已经退化为宗教战争时，他们真正的意思是它已经开始主要由人们的身份驱动。[1]\n因为这种情况发生的点取决于人而不是话题，所以得出结论说因为一个问题倾向于引发宗教战争，它一定没有答案是错误的。例如，编程语言相对优点的问题经常退化为宗教战争，因为许多程序员自认为是X程序员或Y程序员。这有时导致人们得出结论认为问题一定是无法回答的——所有语言都是同样好的。显然这是错误的：人们制作的任何其他东西都可以设计得好或坏；为什么这对编程语言来说是唯一不可能的？事实上，你可以对编程语言的相对优点进行富有成效的讨论，只要排除那些从身份回应的人。\n更一般地说，只有当一个话题不涉及任何参与者的身份时，你才能对它进行富有成效的讨论。政治和宗教成为雷区的原因是它们涉及许多人的身份。但原则上，你可以与某些人进行关于它们的有用对话。还有其他可能看起来无害的话题，比如福特和雪佛兰皮卡的相对优点，你不能安全地与他人讨论。\n如果这个理论是正确的，最有趣的是它不仅解释了要避免哪种讨论，还解释了如何有更好的想法。如果人们不能清楚地思考任何已经成为他们身份一部分的事情，那么在其他条件相同的情况下，最好的计划是让尽可能少的事情进入你的身份。[2]\n大多数阅读这篇文章的人已经相当宽容了。但还有一步超越认为自己是x但容忍y：甚至不认为自己是x。你为自己拥有的标签越多，它们就越让你愚蠢。\n注释 [1] 当这种情况发生时，它往往发生得很快，就像核心达到临界状态。参与的门槛降为零，这带来了更多的人。而且他们倾向于说煽动性的事情，这引起更多更愤怒的反驳。\n[2] 可能有一些事情包含在你的身份中是净收益。例如，成为一名科学家。但可以说，这更像是一个占位符而不是一个实际的标签——就像在询问你中间名字首字母的表格上写NMI——因为它不承诺你相信任何特定的事情。科学家不像圣经字面主义者那样致力于拒绝自然选择那样致力于相信自然选择。他只承诺无论证据指向哪里都跟随证据。\n认为自己是科学家相当于在橱柜里放一个标志说\u0026quot;这个橱柜必须保持空着\u0026quot;。是的，严格来说，你在橱柜里放了一些东西，但不是在通常意义上。\n感谢Sam Altman、Trevor Blackwell、Paul Buchheit和Robert Morris阅读本文的草稿。\n俄语翻译 | 葡萄牙语翻译 | 罗马尼亚语翻译\n",
    "description": "",
    "tags": ["身份","政治","宗教","哲学","心理学","批判性思维","自我提升"],
    "categories": [],
    "content": "→ English Version\n保持身份小规模 2009年2月\n我今天终于意识到为什么政治和宗教会产生如此无用的讨论。\n通常情况下，在在线论坛上任何提到宗教的内容都会退化为宗教争论。为什么？为什么这种情况发生在宗教上，而不是发生在人们在线程上讨论的JavaScript或烘焙或其他话题上？\n宗教的不同之处在于，人们不觉得需要任何特定的专业知识才能对它发表意见。他们所需要的只是坚定的信念，任何人都可以拥有这些。没有一个关于JavaScript的讨论会像关于宗教的讨论增长得那么快，因为人们觉得他们必须超过某种专业知识的门槛才能发表评论。但在宗教上，每个人都是专家。\n然后我突然想到：这也是政治的问题所在。政治和宗教一样，是一个不需要专业知识门槛就可以发表意见的话题。你所需要的只是坚定的信念。\n宗教和政治是否有共同之处可以解释这种相似性？一个可能的解释是，它们处理的是没有确定答案的问题，所以人们的意见没有压力。由于没有人可以被证明是错的，每个意见都是同样有效的，意识到这一点，每个人都随意发表他们的意见。\n但这不是真的。当然，有些政治问题有确定的答案，比如一个新的政府政策会花费多少。但更精确的政治问题也遭受着与更模糊问题相同的命运。\n我认为宗教和政治的共同点是它们成为人们身份的一部分，而人们永远无法对成为他们身份一部分的事情进行富有成效的争论。根据定义，他们是偏袒的。\n哪些话题涉及人们的身份取决于人，而不是话题。例如，关于涉及一个或多个国家公民的战斗的讨论可能会退化为政治争论。但是今天关于青铜时代发生的战斗的讨论可能不会。没有人知道应该站在哪一边。所以不是政治是麻烦的根源，而是身份。当人们说讨论已经退化为宗教战争时，他们真正的意思是它已经开始主要由人们的身份驱动。[1]\n因为这种情况发生的点取决于人而不是话题，所以得出结论说因为一个问题倾向于引发宗教战争，它一定没有答案是错误的。例如，编程语言相对优点的问题经常退化为宗教战争，因为许多程序员自认为是X程序员或Y程序员。这有时导致人们得出结论认为问题一定是无法回答的——所有语言都是同样好的。显然这是错误的：人们制作的任何其他东西都可以设计得好或坏；为什么这对编程语言来说是唯一不可能的？事实上，你可以对编程语言的相对优点进行富有成效的讨论，只要排除那些从身份回应的人。\n更一般地说，只有当一个话题不涉及任何参与者的身份时，你才能对它进行富有成效的讨论。政治和宗教成为雷区的原因是它们涉及许多人的身份。但原则上，你可以与某些人进行关于它们的有用对话。还有其他可能看起来无害的话题，比如福特和雪佛兰皮卡的相对优点，你不能安全地与他人讨论。\n如果这个理论是正确的，最有趣的是它不仅解释了要避免哪种讨论，还解释了如何有更好的想法。如果人们不能清楚地思考任何已经成为他们身份一部分的事情，那么在其他条件相同的情况下，最好的计划是让尽可能少的事情进入你的身份。[2]\n大多数阅读这篇文章的人已经相当宽容了。但还有一步超越认为自己是x但容忍y：甚至不认为自己是x。你为自己拥有的标签越多，它们就越让你愚蠢。\n注释 [1] 当这种情况发生时，它往往发生得很快，就像核心达到临界状态。参与的门槛降为零，这带来了更多的人。而且他们倾向于说煽动性的事情，这引起更多更愤怒的反驳。\n[2] 可能有一些事情包含在你的身份中是净收益。例如，成为一名科学家。但可以说，这更像是一个占位符而不是一个实际的标签——就像在询问你中间名字首字母的表格上写NMI——因为它不承诺你相信任何特定的事情。科学家不像圣经字面主义者那样致力于拒绝自然选择那样致力于相信自然选择。他只承诺无论证据指向哪里都跟随证据。\n认为自己是科学家相当于在橱柜里放一个标志说\u0026quot;这个橱柜必须保持空着\u0026quot;。是的，严格来说，你在橱柜里放了一些东西，但不是在通常意义上。\n感谢Sam Altman、Trevor Blackwell、Paul Buchheit和Robert Morris阅读本文的草稿。\n俄语翻译 | 葡萄牙语翻译 | 罗马尼亚语翻译\n"
  },{
    "title": "值得拥有智慧吗？",
    "url": "/paul_graham/essays_zh/wisdom/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n值得拥有智慧吗？ 2007年2月\n几天前，我终于弄明白了一个困扰了我25年的问题：智慧和智力之间的关系。任何人都能看出它们不是一回事，因为聪明但不智慧的人太多了。然而，智力和智慧似乎确实有关系。究竟是什么关系呢？\n什么是智慧？我想说就是在很多情况下知道该做什么。我不是想在这里对智慧的本质做深刻的阐述，只是想弄清楚我们如何使用这个词。智慧的人通常是知道什么是对的该做什么的人。\n然而，聪明不也是在某些情况下知道该做什么吗？例如，当老师让你小学班级把1到100的所有数字加起来时，知道该怎么做？[1]\n有人说智慧和智力适用于不同类型的问题——智慧适用于人类问题，智力适用于抽象问题。但这是不正确的。有些智慧与人无关：例如，工程师知道某些结构比其他结构更不容易失败的智慧。当然，聪明的人也能为人类问题和抽象问题找到聪明的解决方案。[2]\n另一个流行的解释是智慧来自经验，而智力是天生的。但人的智慧并不与其拥有的经验成正比。除了经验之外，肯定还有其他东西有助于智慧，有些可能是天生的：例如，反思的倾向。\n关于智慧和智力差异的传统解释都经不起仔细审查。那么区别是什么呢？如果我们看看人们如何使用\u0026quot;智慧\u0026quot;和\u0026quot;聪明\u0026quot;这两个词，它们似乎意味着不同形状的表现。\n曲线 \u0026ldquo;智慧\u0026quot;和\u0026quot;聪明\u0026quot;都是说某人知道该做什么的方式。区别在于\u0026quot;智慧\u0026quot;意味着一个人在所有情况下都有很高的平均结果，而\u0026quot;聪明\u0026quot;意味着在少数情况下表现出色。也就是说，如果你有一个图表，x轴代表情况，y轴代表结果，智慧的人的图表整体很高，而聪明的人的图表有很高的峰值。\n这种区别类似于一个人应该在其最佳状态下评判才能，在最差状态下评判品格的规则。除了你在最佳状态下评判智力，在平均状态下评判智慧。这就是两者相关的方式：它们是同一条曲线可以很高的两种不同意义。\n所以智慧的人在大多数情况下知道该做什么，而聪明的人在很少有人能做到的情况下知道该做什么。我们需要再加一个限定条件：我们应该忽略某人因为拥有内部信息而知道该做什么的情况。[3] 但除此之外，我认为如果不开始犯错，我们无法更具体。\n我们也不需要。这个解释很简单，它预测或至少符合关于智慧和智力差异的两个传统观点。人类问题是最常见的类型，因此擅长解决这些问题对于实现高平均结果至关重要。而且高平均结果似乎主要取决于经验，而戏剧性的峰值只能由具有某些罕见、天生品质的人实现；几乎任何人都可以学会成为一名好的游泳者，但要成为奥运会游泳者，你需要一定的体型。\n这个解释也说明了为什么智慧是如此难以捉摸的概念：根本没有这回事。\u0026ldquo;智慧\u0026quot;意味着某种东西——一个人平均上擅长做出正确的选择。但把使一个人能够做到这一点的所谓品质称为\u0026quot;智慧\u0026quot;并不意味着这种东西存在。就\u0026quot;智慧\u0026quot;意味着什么而言，它指的是各种品质的混合，如自律、经验和同理心。[4]\n同样，虽然\u0026quot;聪明\u0026quot;意味着某种东西，但如果我们坚持寻找一种叫做\u0026quot;智力\u0026quot;的单个东西，我们就会自找麻烦。无论它的组成部分是什么，它们并不都是天生的。我们使用\u0026quot;聪明\u0026quot;这个词作为能力的指标：聪明的人能理解很少有人能理解的东西。智力（以及智慧）确实可能有某种天生的倾向，但这种倾向本身并不是智力。\n我们倾向于认为智力是天生的原因之一是，试图测量智力的人集中在它最可测量的方面。天生的品质显然比受经验影响的品质更方便处理，因此在研究过程中可能会变化。问题在于当我们把\u0026quot;智力\u0026quot;这个词拖到他们正在测量的东西上时。如果他们在测量天生的东西，他们就不可能是在测量智力。三岁的孩子不聪明。当我们描述一个孩子聪明时，是\u0026quot;比其他三岁孩子更聪明\u0026quot;的简写。\n分歧 指出智力的倾向与智力本身不同可能是个技术细节。但这是一个重要的技术细节，因为它提醒我们可以变得更聪明，就像我们可以变得更智慧一样。\n令人担忧的是我们可能不得不在两者之间做出选择。\n如果智慧和智力是同一条曲线的平均值和峰值，那么随着曲线上点的数量减少，它们会收敛。如果只有一个点，它们是相同的：平均值和最大值相同。但随着点的数量增加，智慧和智力会分道扬镳。历史上，曲线上点的数量似乎一直在增加：我们的能力在越来越广泛的情况下受到测试。\n在孔子和苏格拉底的时代，人们似乎认为智慧、学习和智力比我们现在认为的更密切相关。区分\u0026quot;智慧\u0026quot;和\u0026quot;聪明\u0026quot;是现代习惯。[5] 我们这样做的原因是它们一直在分歧。随着知识变得更加专业化，曲线上的点更多，峰值和平均值之间的区别变得更加明显，就像用更多像素渲染的数字图像一样。\n一个结果是，一些古老的处方可能已经过时。至少我们必须回去弄清楚它们真的是智慧的处方还是智力的处方。但随着智慧和智力的分离，真正令人震惊的变化是我们可能必须决定我们更喜欢哪一个。我们可能无法同时优化两者。\n社会似乎选择了智力。我们不再崇拜圣人——不像两千年前人们那样。现在我们崇拜天才。因为事实上，我们开始时的区别有一个相当残酷的推论：就像你可以聪明但不很智慧一样，你也可以智慧但不很聪明。这听起来并不是特别令人钦佩。这会让你想到詹姆斯·邦德，他在很多情况下知道该做什么，但在涉及数学的情况下必须依赖Q。\n智力和智慧显然不是相互排斥的。事实上，高平均值可能有助于支撑高峰值。但有理由相信在某个时候你必须在两者之间做出选择。一个非常聪明的人的例子就是如此，他们经常如此不智慧，以至于在流行文化中这似乎被视为常态而非例外。也许心不在焉的教授有他自己的智慧，或者比看起来更智慧，但他没有以孔子或苏格拉底希望人们的方式智慧。[6]\n新的 对于孔子和苏格拉底来说，智慧、美德和幸福必然是相关的。智慧的人是知道什么是正确的选择并总是做出这种选择的人；为了成为正确的选择，它必须在道德上是正确的；因此他总是幸福的，知道自己已经尽了最大努力。我想不出有多少古代哲学家会不同意这一点，至少就其本身而言。\n\u0026ldquo;君子总是快乐；小人悲伤，\u0026ldquo;孔子说。[7]\n然而几年前我读到一篇对数学家的采访，他说大多数晚上他不满意地上床睡觉，感觉自己没有取得足够的进展。[8] 我们翻译为\u0026quot;快乐\u0026quot;的中文和希腊词并不意味着完全相同的意思，但有足够的重叠，使得这个评论与它们相矛盾。\n数学家因为不满意就是小人吗？不；他只是在做一种在孔子时代不是很常见的工作。\n人类知识似乎以分形方式增长。一次又一次，一些看起来小而无趣的领域——甚至是实验误差——当仔细检查时，证明其中包含的知识与到那时为止的所有知识一样多。几个自古代以来爆发的分形芽涉及发明和发现新事物。例如，数学过去只是少数人兼职做的事情。现在它是成千上万人的职业。在涉及制造新事物的工作中，一些旧的规则不适用。\n最近我花了一些时间给人建议，在那里我发现古老的规则仍然有效：尽可能理解情况，根据经验给出最好的建议，然后不要担心，知道你已经尽了最大努力。但当我写文章时，我没有任何这样的宁静。那时我很担心。如果我的想法用完了怎么办？当我写作时，五个晚上中有四个我不满意地上床睡觉，感觉自己没有做得足够。\n给人建议和写作是根本不同类型的工作。当人们带着问题来找你，你必须弄清楚正确的做法时，你（通常）不必发明任何东西。你只是权衡选择，试图判断哪个是谨慎的选择。但谨慎不能告诉我下一句该写什么。搜索空间太大了。\n像法官或军事军官这样的人，在大部分工作中可以由职责引导，但职责在制造东西时没有指导作用。制造者依赖更不稳定的东西：灵感。像大多数过着不稳定生活的人一样，他们往往担心，不满意。在这方面他们更像孔子时代的小人，总是离一次坏收成（或统治者）导致的饥饿一步之遥。除了不是受天气和官员的摆布，他们受自己想象力的摆布。\n限制 对我来说，意识到不满意可能是可以接受的，这是一种解脱。成功的人应该快乐的想法背后有几千年的势头。如果我足够好，为什么我没有获胜者应该有的轻松自信？但我现在相信，这就像一个跑步者问\u0026quot;如果我是这么好的运动员，为什么感觉这么累？\u0026ldquo;好的跑步者仍然会累；他们只是在更高的速度下累。\n工作是发明或发现事物的人与跑步者处于相同的位置。他们没有办法做到最好，因为他们能做的事情没有限制。最接近的是与他人比较。但你做得越好，这越不重要。一个发表了一些东西的本科生感觉像个明星。但对于处于领域顶端的人来说，做得好的标准是什么？跑步者至少可以与其他做完全相同事情的人比较；如果你赢得奥运金牌，你可以相当满足，即使你认为你可以跑得更快一点。但小说家该怎么办？\n而如果你做的是那种问题呈现给你，你必须从几个选择中选择一个的工作，你的表现有上限：每次都选择最好的。在古代社会，几乎所有的工作似乎都是这种类型。农民必须决定一件衣服是否值得修补，国王必须决定是否入侵邻国，但都不期望发明任何东西。原则上他们可以；国王可以发明火器，然后入侵邻国。但实际上创新如此罕见，以至于不期望你这样做，就像不期望守门员进球一样。[9] 实际上，似乎每种情况下都有正确的决定，如果你做出了，你就完美地完成了工作，就像阻止对方球队得分的守门员被认为打了一场完美的比赛。\n在这个世界里，智慧似乎至高无上。[10] 即使现在，大多数人做的工作都是问题呈现给他们，他们必须选择最好的替代方案。但随着知识变得更加专业化，有越来越多的工作类型人们必须制造新事物，因此表现是无界的。相对于智慧，智力变得越来越重要，因为有更多峰值的空间。\n处方 我们可能不得不在智慧和智力之间做出选择的另一个迹象是它们的处方有多么不同。智慧似乎主要来自治愈孩童般的品质，而智力主要来自培养它们。\n智慧的处方，特别是古老的，往往具有补救性质。要达到智慧，必须清除童年时期充满头脑的所有碎片，只留下重要的东西。自制和经验都有这种效果：分别消除来自自己天性和成长环境的随机偏见。这并不是智慧的全部，但它是很大一部分。圣人头脑中的很多东西也在每个12岁孩子的头脑中。区别在于在12岁孩子的头脑中，它与大量随机垃圾混合在一起。\n通往智力的道路似乎是通过解决难题。你通过锻炼发展智力，就像你可能发展肌肉一样。但这里不能有太多强迫。任何程度的纪律都无法取代真正的好奇心。因此培养智力似乎是一个人性格中识别某种倾向——对某些类型事物感兴趣的倾向——并培养它的问题。你不是为了使自己成为真理的中性容器而消除你的特质，而是选择一个并试图将其从幼苗成长为树。\n智慧的人在智慧方面都非常相似，但非常聪明的人往往以独特的方式聪明。\n我们的大多数教育传统都以智慧为目标。所以也许学校工作不好的原因之一是它们试图使用智慧的处方来制造智力。大多数智慧的处方都有顺从的元素。至少，你应该按照老师说的做。更极端的处方旨在像基础训练一样打破你的个性。但这不是通往智力的道路。而智慧通过谦卑而来，在培养智力时，对自己的能力有错误的高估计实际上可能有帮助，因为它鼓励你继续工作。理想情况下，直到你意识到自己错了多少。\n（晚年学习新技能困难的原因不仅仅是一个人的大脑可塑性较差。另一个可能更糟糕的障碍是一个人有更高的标准。）\n我意识到我们在这里处于危险的境地。我不是建议教育的主要目标应该是提高学生的\u0026quot;自尊\u0026rdquo;。那只会培养懒惰。而且，它并不能真正欺骗孩子，不是聪明的孩子。他们在年轻的时候就能看出每个人都能赢的比赛是骗局。\n教师必须走一条狭窄的路：你想鼓励孩子们自己想出东西，但你不能只是为他们生产的每样东西鼓掌。你必须成为一个好观众：欣赏，但不要太容易印象深刻。这是很多工作。你必须对不同年龄段孩子的能力有足够的把握，知道什么时候应该感到惊讶。\n这与传统的教育处方相反。传统上学生是观众，不是老师；学生的工作不是发明，而是吸收一些规定的材料。（一些学院使用\u0026quot;背诵\u0026quot;这个词是这方面的化石。）这些旧传统的问题是它们太受智慧处方的影响。\n不同 我故意给这篇文章起了个 provocative 的标题；当然，拥有智慧是值得的。但我认为理解智慧和智力之间的关系很重要，特别是它们之间似乎日益增长的差距。这样我们就可以避免将真正针对智慧的规则和标准应用于智力。这两种\u0026quot;知道该做什么\u0026quot;的意义比大多数人意识到的更加不同。通往智慧的道路是通过纪律，通往智力的道路是通过精心选择的自我放纵。智慧是普遍的，智力是独特的。虽然智慧带来平静，但智力很多时候导致不满。\n这尤其值得记住。一位物理学家朋友最近告诉我，他的一半部门都在服用百忧解。也许如果我们承认在某些类型的工作中一定量的挫折是不可避免的，我们可以减轻其影响。也许我们可以把它装箱并在某些时候放在一边，而不是让它与日常悲伤混合在一起，产生看起来令人担忧的大池塘。至少，我们可以避免对不满意而不满意。\n如果你感到筋疲力尽，不一定是因为你有什么问题。也许你只是在快速奔跑。\n注释 [1] 高斯据说在10岁时被问到这个问题。他没有像其他学生那样费力地把数字加起来，而是看到它们由50对组成，每对总和为101（100 + 1，99 + 2，等等），他可以只将101乘以50得到答案5050。\n[2] 一个变体是智力是解决问题的能力，智慧是知道如何使用这些解决方案的判断力。虽然这肯定是智慧和智力之间的重要关系，但并不是它们之间的区别。智慧在解决问题时也很有用，智力可以帮助决定如何处理解决方案。\n",
    "description": "",
    "tags": ["智慧","智力","哲学","教育","心理学"],
    "categories": [],
    "content": "→ English Version\n值得拥有智慧吗？ 2007年2月\n几天前，我终于弄明白了一个困扰了我25年的问题：智慧和智力之间的关系。任何人都能看出它们不是一回事，因为聪明但不智慧的人太多了。然而，智力和智慧似乎确实有关系。究竟是什么关系呢？\n什么是智慧？我想说就是在很多情况下知道该做什么。我不是想在这里对智慧的本质做深刻的阐述，只是想弄清楚我们如何使用这个词。智慧的人通常是知道什么是对的该做什么的人。\n然而，聪明不也是在某些情况下知道该做什么吗？例如，当老师让你小学班级把1到100的所有数字加起来时，知道该怎么做？[1]\n有人说智慧和智力适用于不同类型的问题——智慧适用于人类问题，智力适用于抽象问题。但这是不正确的。有些智慧与人无关：例如，工程师知道某些结构比其他结构更不容易失败的智慧。当然，聪明的人也能为人类问题和抽象问题找到聪明的解决方案。[2]\n另一个流行的解释是智慧来自经验，而智力是天生的。但人的智慧并不与其拥有的经验成正比。除了经验之外，肯定还有其他东西有助于智慧，有些可能是天生的：例如，反思的倾向。\n关于智慧和智力差异的传统解释都经不起仔细审查。那么区别是什么呢？如果我们看看人们如何使用\u0026quot;智慧\u0026quot;和\u0026quot;聪明\u0026quot;这两个词，它们似乎意味着不同形状的表现。\n曲线 \u0026ldquo;智慧\u0026quot;和\u0026quot;聪明\u0026quot;都是说某人知道该做什么的方式。区别在于\u0026quot;智慧\u0026quot;意味着一个人在所有情况下都有很高的平均结果，而\u0026quot;聪明\u0026quot;意味着在少数情况下表现出色。也就是说，如果你有一个图表，x轴代表情况，y轴代表结果，智慧的人的图表整体很高，而聪明的人的图表有很高的峰值。\n这种区别类似于一个人应该在其最佳状态下评判才能，在最差状态下评判品格的规则。除了你在最佳状态下评判智力，在平均状态下评判智慧。这就是两者相关的方式：它们是同一条曲线可以很高的两种不同意义。\n所以智慧的人在大多数情况下知道该做什么，而聪明的人在很少有人能做到的情况下知道该做什么。我们需要再加一个限定条件：我们应该忽略某人因为拥有内部信息而知道该做什么的情况。[3] 但除此之外，我认为如果不开始犯错，我们无法更具体。\n我们也不需要。这个解释很简单，它预测或至少符合关于智慧和智力差异的两个传统观点。人类问题是最常见的类型，因此擅长解决这些问题对于实现高平均结果至关重要。而且高平均结果似乎主要取决于经验，而戏剧性的峰值只能由具有某些罕见、天生品质的人实现；几乎任何人都可以学会成为一名好的游泳者，但要成为奥运会游泳者，你需要一定的体型。\n这个解释也说明了为什么智慧是如此难以捉摸的概念：根本没有这回事。\u0026ldquo;智慧\u0026quot;意味着某种东西——一个人平均上擅长做出正确的选择。但把使一个人能够做到这一点的所谓品质称为\u0026quot;智慧\u0026quot;并不意味着这种东西存在。就\u0026quot;智慧\u0026quot;意味着什么而言，它指的是各种品质的混合，如自律、经验和同理心。[4]\n同样，虽然\u0026quot;聪明\u0026quot;意味着某种东西，但如果我们坚持寻找一种叫做\u0026quot;智力\u0026quot;的单个东西，我们就会自找麻烦。无论它的组成部分是什么，它们并不都是天生的。我们使用\u0026quot;聪明\u0026quot;这个词作为能力的指标：聪明的人能理解很少有人能理解的东西。智力（以及智慧）确实可能有某种天生的倾向，但这种倾向本身并不是智力。\n我们倾向于认为智力是天生的原因之一是，试图测量智力的人集中在它最可测量的方面。天生的品质显然比受经验影响的品质更方便处理，因此在研究过程中可能会变化。问题在于当我们把\u0026quot;智力\u0026quot;这个词拖到他们正在测量的东西上时。如果他们在测量天生的东西，他们就不可能是在测量智力。三岁的孩子不聪明。当我们描述一个孩子聪明时，是\u0026quot;比其他三岁孩子更聪明\u0026quot;的简写。\n分歧 指出智力的倾向与智力本身不同可能是个技术细节。但这是一个重要的技术细节，因为它提醒我们可以变得更聪明，就像我们可以变得更智慧一样。\n令人担忧的是我们可能不得不在两者之间做出选择。\n如果智慧和智力是同一条曲线的平均值和峰值，那么随着曲线上点的数量减少，它们会收敛。如果只有一个点，它们是相同的：平均值和最大值相同。但随着点的数量增加，智慧和智力会分道扬镳。历史上，曲线上点的数量似乎一直在增加：我们的能力在越来越广泛的情况下受到测试。\n在孔子和苏格拉底的时代，人们似乎认为智慧、学习和智力比我们现在认为的更密切相关。区分\u0026quot;智慧\u0026quot;和\u0026quot;聪明\u0026quot;是现代习惯。[5] 我们这样做的原因是它们一直在分歧。随着知识变得更加专业化，曲线上的点更多，峰值和平均值之间的区别变得更加明显，就像用更多像素渲染的 …"
  },{
    "title": "做个新手",
    "url": "/paul_graham/essays_zh/noob/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n做个新手 2020年1月\n当我年轻的时候，我认为老年人什么都搞懂了。现在我老了，我知道这不是真的。\n我总是感觉像个新手。似乎我总是在和某个在全新领域工作的初创公司交谈，我对那个领域一无所知，或者读一本我不够了解的主题的书，或者访问某个我不知道事情如何运作的新国家。\n感觉像个新手并不愉快。而且\u0026quot;新手\u0026quot;这个词肯定不是恭维。然而今天我意识到关于做新手的一些令人鼓舞的事情：你在本地越是新手，在全球就越是新手。\n例如，如果你留在自己的国家，你会比搬到一切都不同的 Farawavia 感觉更少像个新手。然而如果你搬家，你会知道更多。所以感觉像个新手与实际的无知成反比。\n但如果感觉像个新手对我们有好处，为什么我们不喜欢这种感觉呢？这种厌恶可能有什么进化目的呢？\n我认为答案是感觉像新手有两个来源：愚蠢和做新颖的事情。我们不喜欢感觉像新手是我们的大脑告诉我们\u0026quot;快点，快点，搞清楚这件事。\u0026ldquo;这在人类历史的大部分时间里都是正确的想法。狩猎采集者的生活很复杂，但没有像现在的生活变化这么大。他们不必突然搞清楚如何处理加密货币。因此，偏向于现有问题的能力而不是发现新问题是有意义的。人类不喜欢感觉像新手是有意义的，就像在食物稀缺的世界里，他们不喜欢饥饿的感觉是有意义的。\n现在食物过多比食物过少更是个问题，我们不喜欢饥饿的感觉让我们误入歧途。我认为我们不喜欢感觉像新手也是如此。\n虽然感觉不愉快，人们有时会因此嘲笑你，但你越是感觉像个新手，就越好。\n",
    "description": "",
    "tags": ["学习","成长","新手","知识","谦逊","个人发展"],
    "categories": [],
    "content": "→ English Version\n做个新手 2020年1月\n当我年轻的时候，我认为老年人什么都搞懂了。现在我老了，我知道这不是真的。\n我总是感觉像个新手。似乎我总是在和某个在全新领域工作的初创公司交谈，我对那个领域一无所知，或者读一本我不够了解的主题的书，或者访问某个我不知道事情如何运作的新国家。\n感觉像个新手并不愉快。而且\u0026quot;新手\u0026quot;这个词肯定不是恭维。然而今天我意识到关于做新手的一些令人鼓舞的事情：你在本地越是新手，在全球就越是新手。\n例如，如果你留在自己的国家，你会比搬到一切都不同的 Farawavia 感觉更少像个新手。然而如果你搬家，你会知道更多。所以感觉像个新手与实际的无知成反比。\n但如果感觉像个新手对我们有好处，为什么我们不喜欢这种感觉呢？这种厌恶可能有什么进化目的呢？\n我认为答案是感觉像新手有两个来源：愚蠢和做新颖的事情。我们不喜欢感觉像新手是我们的大脑告诉我们\u0026quot;快点，快点，搞清楚这件事。\u0026ldquo;这在人类历史的大部分时间里都是正确的想法。狩猎采集者的生活很复杂，但没有像现在的生活变化这么大。他们不必突然搞清楚如何处理加密货币。因此，偏向于现有问题的能力而不是发现新问题是有意义的。人类不喜欢感觉像新手是有意义的，就像在食物稀缺的世界里，他们不喜欢饥饿的感觉是有意义的。\n现在食物过多比食物过少更是个问题，我们不喜欢饥饿的感觉让我们误入歧途。我认为我们不喜欢感觉像新手也是如此。\n虽然感觉不愉快，人们有时会因此嘲笑你，但你越是感觉像个新手，就越好。\n"
  },{
    "title": "做善事",
    "url": "/paul_graham/essays_zh/good/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n做善事 2008年4月\n（本文源自2008年创业学校的演讲。）\n我们在Y Combinator开始大约一个月后，提出了一个成为我们座右铭的短语：做人们想要的东西。从那时起我们学到了很多东西，但如果现在要我选择，这仍然是我会选的那个。\n我们告诉创始人的另一件事是不要太担心商业模式，至少在开始时是这样。不是因为赚钱不重要，而是因为它比做出伟大的东西容易得多。\n几周前我意识到，如果你把这两个想法放在一起，你会得到一些令人惊讶的东西。做人们想要的东西。不要太担心赚钱。你得到的是对慈善机构的描述。\n当你得到这样一个意外的结果时，它可能是一个错误，也可能是一个新的发现。要么企业不应该像慈善机构，我们已经通过归谬法证明我们开始时的一个或两个原则是错误的。或者我们有一个新的想法。\n我怀疑是后者，因为一旦这个想法出现在我脑海中，许多其他事情就都水落石出了。\n例子 例如，Craigslist。它不是慈善机构，但他们像慈善机构一样运营它。而且他们惊人地成功。当你浏览最受欢迎网站列表时，Craigslist的员工数量看起来像是印刷错误。他们的收入没有可能的高，但大多数创业公司都很乐意与他们交换位置。\n在帕特里克·奥布莱恩的小说中，他的船长总是试图占据对手的上风。如果你处于上风，你决定何时以及是否与另一艘船交战。Craigslist实际上处于巨大收入的上风。如果他们想赚更多钱，会面临一些挑战，但不是那种当你逆风航行时面临的挑战，试图通过在销售上的花费是开发的十倍来将糟糕的产品强加给冷漠的用户。[1]\n我不是说创业公司的目标应该是最终像Craigslist。它们是特殊环境的产物。但它们是早期阶段的好模式。\nGoogle在开始时看起来很像慈善机构。他们一年多没有广告。在第一年，Google与非营利组织无法区分。如果非营利组织或政府组织已经开始了一个索引网络的项目，第一年的Google就是他们能生产的极限。\n当我从事垃圾邮件过滤器工作时，我认为拥有一个带有良好垃圾邮件过滤功能的基于网络的电子邮件服务是个好主意。我没有把它当作公司来考虑。我只是想防止人们收到垃圾邮件。但当我更多地考虑这个项目时，我意识到它可能必须是一家公司。运行它需要成本，而通过赠款和捐赠资助会很麻烦。\n这是一个令人惊讶的认识。公司经常声称是仁慈的，但令人惊讶的是发现纯粹仁慈的项目必须体现为公司才能运作。\n我不想再开一家公司，所以我没有这样做。但如果有人这样做了，他们现在可能相当富有。大约有两年的时间窗口，垃圾邮件正在迅速增加，但所有大型电子邮件服务都有糟糕的过滤器。如果有人推出一个新的、无垃圾邮件的邮件服务，用户会涌向它。\n注意到这里的模式了吗？从任何一个方向我们都到达同一个地方。如果你从成功的创业公司开始，你会发现它们经常表现得像非营利组织。如果你从非营利组织的想法开始，你会发现它们经常成为好的创业公司。\n力量 这个领域有多广泛？所有好的非营利组织都会成为好公司吗？可能不会。Google如此有价值的原因是他们的用户有钱。如果你让有钱的人喜欢你，你可能会得到一些。但你也可以通过对待没有钱的人像非营利组织一样来建立成功的创业公司吗？例如，你能通过治疗一种不时尚但致命的疾病如疟疾来发展成功的创业公司吗？\n我不确定，但我怀疑如果你推进这个想法，你会惊讶它能走多远。例如，申请Y Combinator的人通常没有多少钱，然而我们可以通过帮助他们获利，因为在我们的帮助下他们可以赚钱。也许疟疾的情况类似。也许帮助一个国家摆脱负担的组织可以从 resulting 增长中受益。\n我并不是说这是一个严肃的想法。我对疟疾一无所知。但我一直在思考想法足够长的时间，知道什么时候遇到了强大的想法。\n猜测一个想法能延伸多远的一种方法是问自己，在什么时候你会反对它。反对仁慈的想法令人警醒，就像说某事在技术上不可能一样。你只是在自找麻烦，因为这些是如此强大的力量。[2]\n例如，最初我认为这个原则可能只适用于互联网创业公司。显然它对Google有效，但微软呢？微软肯定不仁慈吗？但当我回想开始时，他们是仁慈的。与IBM相比，他们像罗宾汉。当IBM推出PC时，他们以为会通过高价销售硬件赚钱。但通过获得PC标准的控制权，微软向任何制造商开放了市场。硬件价格暴跌，很多人能够拥有电脑，否则他们负担不起。这是你期望Google做的事情。\n微软现在不那么仁慈了。现在当人们想到微软对用户所做的事情时，脑海中出现的所有动词都以F开头。[3]然而这似乎没有回报。他们的股票价格多年来一直持平。当他们是罗宾汉时，他们的股票价格像Google一样上涨。这有联系吗？\n你可以看到为什么会这样。当你很小的时候，你不能欺负客户，所以你必须取悦他们。而当你很大时，你可以随意虐待他们，而且你倾向于这样做，因为这比满足他们更容易。你通过友善成长壮大，但你可以通过恶毒保持强大。\n在潜在条件改变之前你可以逃脱惩罚，然后所有的受害者都会逃跑。所以\u0026quot;不要作恶\u0026quot;可能是Paul Buchheit为Google创造的最有价值的东西，因为它可能成为公司青春的灵丹妙药。我确信他们觉得这很受限制，但想想如果它能挽救他们免于困扰微软和IBM的致命懒惰，它将会有多宝贵。\n奇怪的是，这种灵丹妙药对任何其他公司都是免费提供的。任何人都可以采用\u0026quot;不要作恶\u0026quot;。问题是人们会坚持这一点。所以我认为你不会看到唱片公司或烟草公司使用这一发现。\n士气 有很多外部证据表明仁慈是有效的。但它如何运作？投资大量创业公司的一个优势是你获得了很多关于它们如何运作的数据。从我们所见到的，做好似乎以三种方式帮助创业公司：它提高了他们的士气，它使其他人想要帮助他们，最重要的是，它帮助他们果断。\n士气对创业公司极为重要——如此重要以至于士气本身就几乎足以决定成功。创业公司经常被描述为情绪过山车。一分钟你要接管世界，下一分钟你就注定要失败。感觉注定要失败的问题不仅仅是它让你不快乐，而是它让你停止工作。所以过山车的下坡比上坡更像是自我实现的预言。如果感觉你会成功让你更努力工作，这可能会提高你成功的机会，但如果感觉你会失败让你停止工作，这几乎保证你会失败。\n这就是仁慈的用武之地。如果你觉得你真的在帮助人们，即使看起来你的创业公司注定要失败，你也会继续工作。我们大多数人都有一些天生的仁慈。有人需要你的单纯事实就让你想要帮助他们。所以如果你开始那种用户每天都会回来的创业公司，你基本上为自己建立了一个巨大的电子宠物。你制造了一些你需要照顾的东西。\nBlogger是一个经历了真正的低谷并幸存下来的著名创业公司例子。有一次他们没钱了，所有人都离开了。Evan Williams第二天来上班，只有他一个人。是什么让他继续前进？部分原因是用户需要他。他在托管数千人的博客。他不能让网站就这么死了。\n快速启动有很多优势，但最重要的可能是，一旦你有了用户，电子宠物效应就开始了。一旦你有用户需要照顾，你被迫找出会让他们开心的事情，这实际上是很有价值的信息。\n来自试图帮助人们的额外信心也可以帮助你与投资者打交道。Chatterous的一位创始人最近告诉我，他和他的联合创始人已经决定这项服务是世界需要的，所以无论发生什么他们都会继续努力，即使他们不得不搬回加拿大住在父母的地下室。\n一旦他们意识到这一点，他们就不再那么在意投资者对他们的看法。他们仍然与他们见面，但如果没有得到他们的钱，他们也不会死。你知道吗？投资者变得更加感兴趣了。他们能感觉到Chatterouses无论如何都会做这个创业公司，无论有没有他们。\n如果你真的承诺并且你的创业公司运行成本低，你就变得很难被杀死。而且实际上所有创业公司，即使是最成功的，都会在某个时候接近死亡。所以为人们做好事给你一种使命感，使你更难被杀死，仅这一点就足以补偿你没有选择更自私项目所损失的任何东西。\n帮助 做好事的另一个优势是它使其他人想要帮助你。这似乎也是人类的一种天生特质。\n我们资助的创业公司之一Octopart，目前正在进行善与恶的经典战斗。他们是工业零部件的搜索网站。很多人需要搜索零部件，在Octopart之前没有好的方法可以做到。事实证明，这并非巧合。\nOctopart建立了搜索零部件的正确方法。用户喜欢它，他们一直在快速增长。然而在Octopart的大部分时间里，最大的分销商Digi-Key一直试图强迫他们将价格从网站上删除。Octopart免费向他们发送客户，然而Digi-Key却试图阻止这种流量。为什么？因为他们当前的商业模式依赖于对价格信息不完整的人过度收费。他们不希望搜索正常工作。\nOctopart是世界上最好的人。他们从伯克利的物理博士项目退学来做这件事。他们只是想修复他们在研究中遇到的问题。想象一下，如果工程师可以在线搜索，你可以为世界工程师节省多少时间。所以当我听说一个大的、邪恶的公司为了保持搜索的 broken 状态而试图阻止他们时，这让我真的想要帮助他们。这让我花在Octopart上的时间比我们资助的其他大多数创业公司都多。这让我花了几分钟告诉你他们有多棒。为什么？因为他们是好人，他们试图帮助世界。\n如果你是仁慈的，人们会聚集在你周围：投资者、客户、其他公司和潜在员工。从长远来看，最重要的可能是潜在员工。我想现在每个人都知道好的黑客比平庸的黑客好得多。如果你能像Google一样吸引最好的黑客为你工作，你就有很大的优势。而且最好的黑客往往是理想主义的。他们对工作不感到绝望。他们可以在任何地方工作。所以大多数人都想做能让世界变得更好的事情。\n指南针 但做好事最重要的优势是它起到指南针的作用。做创业公司最难的部分之一是你有太多的选择。只有两三个人，但你可以做一千件事。你怎么决定？\n答案是：做对你的用户最好的事情。你可以在飓风中像抓住绳子一样抓住这个，如果有什么能救你，它会的。跟随它，它会带你完成你需要做的一切。\n它甚至是对看似无关问题的答案，比如如何说服投资者给你钱。如果你是个好的推销员，你可以尝试说服他们。但更可靠的途径是通过你的用户说服他们：如果你做出用户足够喜欢以至于告诉朋友的东西，你就会呈指数级增长，这会说服任何投资者。\n做好事是在复杂情况下做决策的特别有用的策略，因为它是无状态的。这就像说真话。说谎的问题是你必须记住你过去所说的一切，以确保你不自相矛盾。如果你说真话，你不需要记住任何东西，这在事情发生得很快的领域是很有用的属性。\n例如，Y Combinator现在已经投资了80家创业公司，其中57家仍然活着。（其余的已经死亡、合并或被收购。）当你试图为57家创业公司提供建议时，结果是你必须有一个无状态的算法。当同时有57件事情在进行时，你不能有不可告人的动机，因为你记不住它们。所以我们的规则只是做对创始人最有利的事情。不是因为我们特别仁慈，而是因为这是唯一能在这种规模上运作的算法。\n当你写一些告诉人们要好的东西时，你似乎在声称自己是个好人。所以我想明确地说我不是个特别好的人。当我还是个孩子的时候，我坚定地站在坏人阵营。成年人使用\u0026quot;好\u0026quot;这个词的方式，似乎与安静同义，所以我长大后对此非常怀疑。\n你知道有些人当在谈话中提到他们的名字时每个人都会说\u0026quot;他是个好人\u0026quot;吗？人们从来不会这样说我。我得到的最好的评价是\u0026quot;他本意是好的\u0026quot;。我并不声称自己是个好人。充其量我只能算说好语作为第二语言。\n所以我不是建议你以通常伪善的方式做好事。我建议这样做是因为它有效。它不仅作为\u0026quot;价值观\u0026quot;的陈述有效，而且作为战略指南，甚至作为软件设计规范都有效。不仅仅是不要作恶。要做好事。\n注释 [1] 五十年前，上市公司不支付红利似乎令人震惊。现在许多科技公司都不支付。市场似乎已经搞清楚了如何评估潜在股息。也许这不是这个演变的最后一步。也许市场最终会对潜在收益感到舒服。（风险投资家已经这样了，至少其中一些人一直都在赚钱。）\n我意识到这听起来像是在泡沫时期听到的关于\u0026quot;新经济\u0026quot;的东西。相信我，我当时没有喝那种kool-aid。但我确信泡沫思维中埋藏着一些好想法。例如，专注于增长而不是利润是可以的——但前提是增长是真实的。你不能购买用户；那是金字塔计划。但具有快速真实增长的公司是有价值的，最终市场学会如何评估有价值的东西。\n[2] 以仁慈为目标创办公司的想法目前被低估了，因为目前将此作为明确目标的人通常做得很差。\n开始某种模糊的慈善企业是信托基金受益人的标准职业道路之一。大多数人的问题在于他们要么有虚假的政治议程，要么执行不力。信托基金受益人的祖先并不是通过保护他们的传统文化而致富的；也许玻利维亚人也不想这样做。而且开始有机农场，虽然至少是直接的慈善，但并不能像Google那样帮助人们。\n大多数明确的慈善项目都没有充分对自己负责。他们表现得好像良好的意图足以保证良好的效果。\n",
    "description": "",
    "tags": ["仁慈","慈善","士气","用户","指南针"],
    "categories": [],
    "content": "→ English Version\n做善事 2008年4月\n（本文源自2008年创业学校的演讲。）\n我们在Y Combinator开始大约一个月后，提出了一个成为我们座右铭的短语：做人们想要的东西。从那时起我们学到了很多东西，但如果现在要我选择，这仍然是我会选的那个。\n我们告诉创始人的另一件事是不要太担心商业模式，至少在开始时是这样。不是因为赚钱不重要，而是因为它比做出伟大的东西容易得多。\n几周前我意识到，如果你把这两个想法放在一起，你会得到一些令人惊讶的东西。做人们想要的东西。不要太担心赚钱。你得到的是对慈善机构的描述。\n当你得到这样一个意外的结果时，它可能是一个错误，也可能是一个新的发现。要么企业不应该像慈善机构，我们已经通过归谬法证明我们开始时的一个或两个原则是错误的。或者我们有一个新的想法。\n我怀疑是后者，因为一旦这个想法出现在我脑海中，许多其他事情就都水落石出了。\n例子 例如，Craigslist。它不是慈善机构，但他们像慈善机构一样运营它。而且他们惊人地成功。当你浏览最受欢迎网站列表时，Craigslist的员工数量看起来像是印刷错误。他们的收入没有可能的高，但大多数创业公司都很乐意与他们交换位置。\n在帕特里克·奥布莱恩的小说中，他的船长总是试图占据对手的上风。如果你处于上风，你决定何时以及是否与另一艘船交战。Craigslist实际上处于巨大收入的上风。如果他们想赚更多钱，会面临一些挑战，但不是那种当你逆风航行时面临的挑战，试图通过在销售上的花费是开发的十倍来将糟糕的产品强加给冷漠的用户。[1]\n我不是说创业公司的目标应该是最终像Craigslist。它们是特殊环境的产物。但它们是早期阶段的好模式。\nGoogle在开始时看起来很像慈善机构。他们一年多没有广告。在第一年，Google与非营利组织无法区分。如果非营利组织或政府组织已经开始了一个索引网络的项目，第一年的Google就是他们能生产的极限。\n当我从事垃圾邮件过滤器工作时，我认为拥有一个带有良好垃圾邮件过滤功能的基于网络的电子邮件服务是个好主意。我没有把它当作公司来考虑。我只是想防止人们收到垃圾邮件。但当我更多地考虑这个项目时，我意识到它可能必须是一家公司。运行它需要成本，而通过赠款和捐赠资助会很麻烦。\n这是一个令人惊讶的认识。公司经常声称是仁慈的，但令人惊讶的是发现纯粹仁慈的项目必须体现为公司才能运作。\n我不想再开一家公司，所以我没有这样做。但如果有人这样做了，他们现在可能相当富有。大约有两年的时间窗口，垃圾邮件正在迅速增加，但所有大型电子邮件服务都有糟糕的过滤器。如果有人推出一个新的、无垃圾邮件的邮件服务，用户会涌向它。\n注意到这里的模式了吗？从任何一个方向我们都到达同一个地方。如果你从成功的创业公司开始，你会发现它们经常表现得像非营利组织。如果你从非营利组织的想法开始，你会发现它们经常成为好的创业公司。\n力量 这个领域有多广泛？所有好的非营利组织都会成为好公司吗？可能不会。Google如此有价值的原因是他们的用户有钱。如果你让有钱的人喜欢你，你可能会得到一些。但你也可以通过对待没有钱的人像非营利组织一样来建立成功的创业公司吗？例如，你能通过治疗一种不时尚但致命的疾病如疟疾来发展成功的创业公司吗？\n我不确定，但我怀疑如果你推进这个想法，你会惊讶它能走多远。例如，申请Y Combinator的人通常没有多少钱，然而我们可以通过帮助他们获利，因为在我们的帮助下他们可以赚钱。也许疟疾的情况类似。也许帮助一个国家摆脱负担的组织可以从 resulting 增长中受益。\n我并不是说这是一个严肃的想法。我对疟疾一无所知。但我一直在思考想法足够长的时间，知道什么时候遇到了强大的想法。\n猜测一个想法能延伸多远的一种方法是问自己，在什么时候你会反对它。反对仁慈的想法令人警醒，就像说某事在技术上不可能一样。你只是在自找麻烦，因为这些是如此强大的力量。[2]\n例如，最初我认为这个原则可能只适用于互联网创业公司。显然它对Google有效，但微软呢？微软肯定不仁慈吗？但当我回想开始时，他们是仁慈的。与IBM相比，他们像罗宾汉。当IBM推出PC时，他们以为会通过高价销售硬件赚钱。但通过获得PC标准的控制权，微软向任何制造商开放了市场。硬件价格暴跌，很多人能够拥有电脑，否则他们负担不起。这是你期望Google做的事情。\n微软现在不那么仁慈了。现在当人们想到微软对用户所做的事情时，脑海中出现的所有动词都以F开头。[3]然而这似乎没有回报。他们的股票价格多年来一直持平。当他们是罗宾汉时，他们的股票价格像Google一样上涨。这有联系吗？\n你可以看到为什么会这样。当你很小的时候，你不能欺负客户，所以你必须取悦他们。而当你很大时，你可以随意虐待他们，而且你倾向于这样做，因为这比满足他们更容易。 …"
  },{
    "title": "做无法扩展的事情",
    "url": "/paul_graham/essays_zh/ds/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n做无法扩展的事情 做无法扩展的事情 想要创业吗？获得Y Combinator的资助。\n2013年7月\n我们在Y Combinator最常见的建议类型之一是做无法扩展的事情。很多准创始人认为创业公司要么起飞，要么不行。你构建一些东西，让它可用，如果你制造了更好的捕鼠器，人们会如承诺的那样踏破你的门槛。或者他们不会，那样的话市场一定不存在。[1]\n实际上创业公司起飞是因为创始人让它们起飞。可能有少数是自然增长的，但通常需要某种推动才能让它们开始。一个好的比喻是汽车发动机在有电启动器之前用的曲柄。一旦发动机运转，它会持续运转，但有一个单独而费力的过程来启动它。\n招募 创始人在开始时必须做的最常见的无法扩展的事情是手动招募用户。几乎所有创业公司都必须这样做。你不能坐等用户来找你。你必须出去找到他们。\nStripe是我们资助的最成功的创业公司之一，他们解决的问题非常紧迫。如果有人可以坐等用户，那就是Stripe。但事实上，他们在YC内部以积极的早期用户获取而闻名。\n为其他创业公司制造东西的创业公司在我们资助的其他公司中有大量潜在用户，但没有比Stripe更好地利用这一点的。在YC，我们用\u0026quot;Collison安装\u0026quot;这个词来描述他们发明的技术。更胆怯的创始人会问\u0026quot;你愿意试试我们的测试版吗？\u0026ldquo;如果答案是肯定的，他们会说\u0026quot;很好，我们会给你发送链接。\u0026ldquo;但Collison兄弟不打算等待。当任何人同意尝试Stripe时，他们会说\u0026quot;好的，把你的笔记本电脑给我\u0026rdquo;，然后当场为他们设置。\n创始人抗拒出去个别招募用户有两个原因。一个是害羞和懒惰的结合。他们宁愿坐在家里写代码，也不愿出去和一群陌生人交谈，可能还会被大多数人拒绝。但对于创业公司来说要成功，至少有一位创始人（通常是CEO）必须花大量时间在销售和营销上。[2]\n创始人忽略这条路径的另一个原因是绝对数字起初看起来很小。这不可能是那些大型的、著名的创业公司的起步方式，他们认为。他们犯的错误是低估了复合增长的力量。我们鼓励每个创业公司用每周增长率来衡量他们的进展。如果你有100个用户，下周需要获得10个新用户才能实现每周10%的增长。虽然110可能看起来不比100好多少，但如果你保持每周10%的增长，你会惊讶于数字变得有多大。一年后你将有14,000个用户，2年后你将有200万。\n当你一次获取一千个用户时，你将做不同的事情，增长最终必须放缓。但如果市场存在，你通常可以从手动招募用户开始，然后逐渐转向不那么手动的方法。[3]\nAirbnb是这种技术的经典例子。市场启动非常困难，你应该预期一开始要采取英雄式的措施。在Airbnb的情况下，这些措施包括在纽约挨家挨户地走访，招募新用户并帮助现有用户改进他们的列表。当我记得YC期间的Airbnb时，我脑海中浮现出他们带着拉杆箱的形象，因为他们来参加周二晚餐时总是刚从某个地方飞回来。\n脆弱 Airbnb现在看起来像不可阻挡的巨头，但早期它是如此脆弱，大约30天的外出与用户亲自接触决定了成功与失败的区别。\n这种最初的脆弱性不是Airbnb独有的特点。几乎所有创业公司在初期都是脆弱的。这是没有经验的创始人和投资者（以及记者和论坛上的万事通）对它们最大的误解之一。他们无意识地用成熟公司的标准来评判萌芽中的创业公司。他们就像看着新生儿并断言\u0026quot;这个小生物永远不可能成就任何事\u0026quot;的人。\n如果记者和万事通轻视你的创业公司，那是无害的。他们总是弄错。即使投资者轻视你的创业公司也没关系；当他们看到增长时会改变想法。最大的危险是你自己轻视你的创业公司。我见过这种情况发生。我经常必须鼓励那些看不到自己所构建事物的全部潜力的创始人。甚至比尔·盖茨也犯了那个错误。他在创办微软后回到哈佛参加秋季学期。他没有待很久，但如果他意识到微软将要达到后来规模的哪怕一部分，他就根本不会回去。[4]\n关于早期创业公司要问的问题不是\u0026quot;这家公司正在接管世界吗？\u0026ldquo;而是\u0026quot;如果创始人做正确的事情，这家公司能变得多大？\u0026ldquo;而正确的事情在当时往往看起来既费力又微不足道。当微软只是阿尔伯克基的几个人为几千个爱好者（当时他们这样称呼）市场编写Basic解释器时，它看起来不会很令人印象深刻，但回想起来，这是主导微机软件的最佳路径。而且我知道Brian Chesky和Joe Gebbia在为他们的第一批房东的公寓拍摄\u0026quot;专业\u0026quot;照片时，并不感觉自己正在通往成功的道路上。他们只是在努力生存。但回想起来，这也是主导大市场的最佳路径。\n你如何找到要手动招募的用户？如果你构建一些东西来解决自己的问题，那么你只需要找到你的同龄人，这通常很简单。否则，你将不得不做出更刻意的努力来定位最有希望的用户群。通常的做法是通过相对无针对性的发布获得一些初始用户群，然后观察哪些类型看起来最热情，并寻找更多类似的用户。例如，Ben Silbermann注意到很多最早的Pinterest用户对设计感兴趣，所以他参加了一个设计博客会议来招募用户，效果很好。[5]\n取悦 你应该采取非凡的措施不仅为了获取用户，还为了让他们快乐。在Wufoo能够做到的范围内（结果证明时间出奇地长），他们给每个新用户发送手写的感谢信。你的第一批用户应该感觉与你签约是他们做过的最好的选择之一。而你反过来应该绞尽脑汁想出新的方法来让他们高兴。\n为什么我们必须教创业公司这个？为什么这对创始人来说是反直觉的？我认为有三个原因。\n一个是很多创业公司的创始人接受过工程师培训，而客户服务不是工程师培训的一部分。你应该构建强大而优雅的东西，而不是像某种推销员那样奴性地关注个别用户。具有讽刺意味的是，工程学传统上反对手把手指导的部分原因是其传统可以追溯到工程师权力较小的时代——当他们只负责构建事物的狭窄领域，而不是经营整个节目时。你是Scotty时可以发脾气，但你是Kirk时就不能。\n另一个原因是创始人不够关注个别客户，因为他们担心这无法扩展。但当萌芽中的创业公司的创始人担心这一点时，我指出，在当前状态下他们没有什么可失去的。也许如果他们努力让现有用户超级快乐，有一天他们会因为用户太多而无法为他们做那么多事情。那将是一个很好的问题。看看你是否能让它发生。顺便说一句，当这种情况发生时，你会发现取悦客户的扩展性比你预期的要好。部分原因是你通常能找到让任何事情比你预期的更具扩展性的方法，部分原因是到那时取悦客户已经渗透到你的文化中。\n我从未见过一家创业公司因为过于努力让初始用户高兴而误入歧途。\n但也许阻止创始人意识到他们可以多么关注用户的最大原因是他们自己从未经历过这样的关注。他们的客户服务标准是由他们作为客户的公司设定的，这些公司大多是大型公司。蒂姆·库克不会在你购买笔记本电脑后给你寄手写笔记。他不能。但你可以。这是小公司的一个优势：你可以提供大公司无法提供的服务水平。[6]\n一旦你意识到现有的约定不是用户体验的上限，思考你能走多远来取悦用户会是一件非常愉快的事情。\n体验 我试图想出一个短语来表达你对用户的关注应该多么极端，我意识到史蒂夫·乔布斯已经做到了：疯狂地伟大。史蒂夫不仅仅是把\u0026quot;疯狂地\u0026quot;用作\u0026quot;非常\u0026quot;的同义词。他的意思更字面——一个人应该专注于执行质量，达到在日常生活中会被认为病态的程度。\n我们资助的所有最成功的创业公司都做到了，这可能不会让准创始人感到惊讶。新手创始人不理解的是疯狂地伟大在萌芽中的创业公司中意味着什么。当史蒂夫·乔布斯开始使用这个短语时，苹果已经是一家成熟的公司。他的意思是Mac（及其文档甚至包装——这就是痴迷的本质）应该疯狂地精心设计和制造。这对工程师来说不难掌握。这只是设计强大而优雅产品的更极端版本。\n创始人难以掌握的（史蒂夫本人可能也难以掌握）是，当你把时间滑块推回到创业公司生活的头几个月时，疯狂地伟大会变成什么。不是产品应该疯狂地伟大，而是作为你的用户的体验。产品只是其中的一部分。对于大公司来说，它必然是主导的部分。但你可以也应该给用户一个早期、不完整、有缺陷产品的疯狂地伟大体验，如果你用关注来弥补差异。\n可以，也许，但应该吗？是的。过度参与早期用户不仅仅是启动增长的可允许技术。对于大多数成功的创业公司来说，这是使产品变好的反馈循环的必要部分。制造更好的捕鼠器不是一个原子操作。即使你以大多数成功创业公司的方式开始，通过构建你自己需要的东西，你构建的第一个东西永远不会完全正确。除了在有重大惩罚错误的领域外，通常最好一开始不要追求完美。特别是在软件中，通常最好在东西有一些效用时就立即放在用户面前，然后看看他们用它做什么。完美主义常常是拖延的借口，无论如何，你最初的用户模型总是不准确的，即使你是其中之一。[7]\n从与你最早的用户直接接触中获得的反馈将是你能得到的最好的反馈。当你如此之大以至于必须依靠焦点小组时，你会希望你能去用户的家庭和办公室，像只有少数人时那样看他们使用你的东西。\n火 有时正确的无法扩展技巧是专注于故意狭窄的市场。这就像一开始让火保持受控以让它真正炽热，然后再添加更多木柴。\nFacebook就是这么做的。起初它只对哈佛学生开放。在这种形式下，它只有几千人的潜在市场，但因为他们感觉这真的是为他们而设，他们中的临界数量签约了。在Facebook停止对哈佛学生开放后，它仍然是特定学院学生的网站相当长一段时间。当我在创业学校采访Mark Zuckerberg时，他说虽然为每个学校创建课程列表很费事，但这样做让学生觉得网站是他们的自然家园。\n任何可以被描述为市场平台的创业公司通常必须从市场的子集开始，但这也可以适用于其他创业公司。总是值得询问市场中是否有你可以快速获得临界用户数量的子集。[8]\n大多数使用控制火策略的创业公司无意识地这样做。他们为自己和朋友构建东西，这些人恰好是早期采用者，只有后来才意识到他们可以将其提供给更广阔的市场。即使你无意识地这样做，这个策略也同样有效。没有意识地意识到这种模式的最大危险是那些天真地丢弃其中一部分的人。例如，如果你不为自己和朋友构建东西，或者即使你做了，但你来自企业界，你的朋友不是早期采用者，你将不再有一个完美的初始市场 handed to you on a platter。\n在公司中，最好的早期采用者通常是其他创业公司。他们本质上对新事物更加开放，而且因为刚刚成立，他们还没有做出所有选择。此外，当他们成功时，他们增长很快，你也与他们一起增长。YC模式（特别是让YC变大）的许多未预见的优势之一是，B2B创业公司现在有数百个其他创业公司的即时市场可供使用。\nMeraki 对于硬件创业公司，有一种做无法扩展事情的变体，我们称之为\u0026quot;拉一个Meraki\u0026rdquo;。虽然我们没有资助Meraki，但创始人是Robert Morris的研究生，所以我们知道他们的历史。他们通过做真正无法扩展的事情开始：自己组装路由器。\n硬件创业公司面临软件创业公司没有的障碍。工厂生产运行的最低订单通常是几十万美元。这会让你陷入进退两难的境地：没有产品你无法产生增长来筹集制造产品的资金。在硬件创业公司必须依赖投资者资金的时候，你必须非常有说服力才能克服这一点。众筹（或者更准确地说，预订）的到来帮助很大。但即使如此，如果可能的话，我建议创业公司一开始拉一个Meraki。Pebble就是这么做的。Pebbles自己组装了前几百块手表。如果他们没有经历那个阶段，当他们确实在Kickstarter上推出时，他们可能不会卖出价值1000万美元的手表。\n像过度关注早期客户一样，自己制造东西对硬件创业公司来说是有价值的。当你是工厂时，你可以更快地调整设计，而且你会学到否则永远不会知道的事情。Pebble的Eric Migicovsky说他学到的事情之一是\u0026quot;采购好螺丝的价值有多大。\u0026ldquo;谁知道呢？\n咨询 有时我们建议B2B创业公司的创始人将过度参与推向极端，选择一个单一用户，表现得好像他们是为那一个用户构建东西的顾问。初始用户作为你的模具的形式；不断调整直到你完美适应他们的需求，你通常会发现你制造了其他用户也想要的东西。即使他们中的人数不多，也可能有拥有更多用户的相邻领域。只要你找到一个真正需要某种东西并且能够据此行动的用户，你就拥有了制造人们想要的东西的立足点，这和任何创业公司最初需要的一样多。[9]\n咨询是无法扩展工作的典型例子。但（像其他慷慨施予恩惠的方式一样）只要你没有为此获得报酬，这样做就是安全的。这就是公司越界的地方。只要你是一个仅仅对客户特别关注的产品公司，即使你没有解决他们所有问题，他们也会非常感激。但是当他们开始专门为那种关注付费时——当他们开始按小时付费时——他们期望你做所有事情。\n另一种类似咨询的招募最初冷淡用户的技术是代表他们自己使用你的软件。我们在Viaweb就是这么做的。当我们接近商家询问他们是否想使用我们的软件制作在线商店时，有些人说不，但他们会让我们为他们做一个。因为我们愿意为获取用户做任何事，我们就做了。当时我们感觉相当差劲。我们没有组织大型战略电子商务伙伴关系，而是在试图销售行李、笔和男士衬衫。但回想起来，这正是正确的做法，因为它教会了我们商家使用我们的软件会有什么感觉。有时反馈循环几乎是即时的：在构建某个商家的网站的过程中，我发现我们需要一个我们没有的功能，所以我会花几个小时实现它，然后继续构建网站。\n手动 有一个更极端的变体，你不仅使用你的软件，你就是你的软件。当你只有少量用户时，你有时可以侥幸手动做一些你计划以后自动化的事情。这让你能更快推出，当你最终将自己自动化出循环时，你会确切知道要构建什么，因为你从自己做中有了肌肉记忆。\n当手动组件在用户看来像软件时，这种技术开始具有恶作剧的方面。例如，Stripe向其第一批用户提供\u0026quot;即时\u0026quot;商户账户的方式是创始人在幕后手动为他们注册传统商户账户。\n一些创业公司一开始完全可以是手动的。如果你找到一个有需要解决的问题的人并且你可以手动解决它，只要你能就继续这样做，然后逐渐自动化瓶颈。以尚未自动化的方式解决用户的问题会有点吓人，但比拥有自动化的东西但不解决任何人的问题这种更常见的情况要好。\n大 我应该提一下一种通常不起作用的初始策略：大发布。我偶尔遇到一些创始人，他们似乎相信创业公司是抛射体而不是动力飞机，只有当它们以足够的初始速度发射时才能做大。他们想在8种不同的出版物同时发布，并有禁运令。当然是在星期二，因为他们在某处读到这是发布东西的最佳日子。\n",
    "description": "",
    "tags": ["创业","企业家精神","扩展","用户获取","y combinator","增长","建议","策略"],
    "categories": [],
    "content": "→ English Version\n做无法扩展的事情 做无法扩展的事情 想要创业吗？获得Y Combinator的资助。\n2013年7月\n我们在Y Combinator最常见的建议类型之一是做无法扩展的事情。很多准创始人认为创业公司要么起飞，要么不行。你构建一些东西，让它可用，如果你制造了更好的捕鼠器，人们会如承诺的那样踏破你的门槛。或者他们不会，那样的话市场一定不存在。[1]\n实际上创业公司起飞是因为创始人让它们起飞。可能有少数是自然增长的，但通常需要某种推动才能让它们开始。一个好的比喻是汽车发动机在有电启动器之前用的曲柄。一旦发动机运转，它会持续运转，但有一个单独而费力的过程来启动它。\n招募 创始人在开始时必须做的最常见的无法扩展的事情是手动招募用户。几乎所有创业公司都必须这样做。你不能坐等用户来找你。你必须出去找到他们。\nStripe是我们资助的最成功的创业公司之一，他们解决的问题非常紧迫。如果有人可以坐等用户，那就是Stripe。但事实上，他们在YC内部以积极的早期用户获取而闻名。\n为其他创业公司制造东西的创业公司在我们资助的其他公司中有大量潜在用户，但没有比Stripe更好地利用这一点的。在YC，我们用\u0026quot;Collison安装\u0026quot;这个词来描述他们发明的技术。更胆怯的创始人会问\u0026quot;你愿意试试我们的测试版吗？\u0026ldquo;如果答案是肯定的，他们会说\u0026quot;很好，我们会给你发送链接。\u0026ldquo;但Collison兄弟不打算等待。当任何人同意尝试Stripe时，他们会说\u0026quot;好的，把你的笔记本电脑给我\u0026rdquo;，然后当场为他们设置。\n创始人抗拒出去个别招募用户有两个原因。一个是害羞和懒惰的结合。他们宁愿坐在家里写代码，也不愿出去和一群陌生人交谈，可能还会被大多数人拒绝。但对于创业公司来说要成功，至少有一位创始人（通常是CEO）必须花大量时间在销售和营销上。[2]\n创始人忽略这条路径的另一个原因是绝对数字起初看起来很小。这不可能是那些大型的、著名的创业公司的起步方式，他们认为。他们犯的错误是低估了复合增长的力量。我们鼓励每个创业公司用每周增长率来衡量他们的进展。如果你有100个用户，下周需要获得10个新用户才能实现每周10%的增长。虽然110可能看起来不比100好多少，但如果你保持每周10%的增长，你会惊讶于数字变得有多大。一年后你将有14,000个用户，2年后你将有200万。\n当你一次获取一千个用户时，你将做不同的事情，增长最终必须放缓。但如果市场存在，你通常可以从手动招募用户开始，然后逐渐转向不那么手动的方法。[3]\nAirbnb是这种技术的经典例子。市场启动非常困难，你应该预期一开始要采取英雄式的措施。在Airbnb的情况下，这些措施包括在纽约挨家挨户地走访，招募新用户并帮助现有用户改进他们的列表。当我记得YC期间的Airbnb时，我脑海中浮现出他们带着拉杆箱的形象，因为他们来参加周二晚餐时总是刚从某个地方飞回来。\n脆弱 Airbnb现在看起来像不可阻挡的巨头，但早期它是如此脆弱，大约30天的外出与用户亲自接触决定了成功与失败的区别。\n这种最初的脆弱性不是Airbnb独有的特点。几乎所有创业公司在初期都是脆弱的。这是没有经验的创始人和投资者（以及记者和论坛上的万事通）对它们最大的误解之一。他们无意识地用成熟公司的标准来评判萌芽中的创业公司。他们就像看着新生儿并断言\u0026quot;这个小生物永远不可能成就任何事\u0026quot;的人。\n如果记者和万事通轻视你的创业公司，那是无害的。他们总是弄错。即使投资者轻视你的创业公司也没关系；当他们看到增长时会改变想法。最大的危险是你自己轻视你的创业公司。我见过这种情况发生。我经常必须鼓励那些看不到自己所构建事物的全部潜力的创始人。甚至比尔·盖茨也犯了那个错误。他在创办微软后回到哈佛参加秋季学期。他没有待很久，但如果他意识到微软将要达到后来规模的哪怕一部分，他就根本不会回去。[4]\n关于早期创业公司要问的问题不是\u0026quot;这家公司正在接管世界吗？\u0026ldquo;而是\u0026quot;如果创始人做正确的事情，这家公司能变得多大？\u0026ldquo;而正确的事情在当时往往看起来既费力又微不足道。当微软只是阿尔伯克基的几个人为几千个爱好者（当时他们这样称呼）市场编写Basic解释器时，它看起来不会很令人印象深刻，但回想起来，这是主导微机软件的最佳路径。而且我知道Brian Chesky和Joe Gebbia在为他们的第一批房东的公寓拍摄\u0026quot;专业\u0026quot;照片时，并不感觉自己正在通往成功的道路上。他们只是在努力生存。但回想起来，这也是主导大市场的最佳路径。\n你如何找到要手动招募的用户？如果你构建一些东西来解决自己的问题，那么你只需要找到你的同龄人，这通常很简单。否 …"
  },{
    "title": "像你说话一样写作",
    "url": "/paul_graham/essays_zh/talk/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n像你说话一样写作 2015年10月\n这里有一个简单的技巧，让更多人阅读你写的东西：用口语写作。\n当大多数人开始写作时，会发生某种变化。他们使用的语言与他们和朋友交谈时使用的不同。句子结构甚至词汇都不同。没有人会在口语中使用\u0026quot;pen\u0026quot;作为动词。在与朋友交谈时使用\u0026quot;pen\u0026quot;而不是\u0026quot;write\u0026quot;会让你觉得自己像个白痴。\n让我受不了的是我几天前读到的一句话：那个反复无常的西班牙人自己宣称：\u0026ldquo;在阿尔塔米拉之后，一切都堕落了。\u0026ldquo;这来自尼尔·奥利弗的《古代英国史》。我觉得拿这本书作例子很不好，因为它不比许多其他书差。但想象一下和朋友交谈时称毕加索为\u0026quot;那个反复无常的西班牙人\u0026rdquo;。即使只有一句话也会在交谈中引起皱眉。然而人们却整本整本地写这种东西。\n好吧，书面语和口语是不同的。这使书面语更糟吗？\n如果你想让人们阅读和理解你写的东西，是的。书面语言更复杂，这使得阅读更费力。它也更正式和疏远，这让读者的注意力容易漂移。但也许最糟糕的是，复杂的句子和华丽的词汇给你，作者，一种虚假的印象，让你以为你说得比实际更多。\n你不需要复杂的句子来表达复杂的想法。当某个深奥领域的专家相互谈论他们领域的想法时，他们使用的句子不会比谈论午餐吃什么时更复杂。他们当然使用不同的词汇。但即使是那些词汇，他们也使用得不多。根据我的经验，主题越难，专家说话越随意。部分原因，我想，是因为他们需要证明的东西较少，部分原因是，你谈论的想法越难，你越不能让语言成为障碍。\n非正式语言是思想的运动装。\n我并不是说口语总是最有效。诗歌既是音乐也是文本，所以你可以说一些在交谈中不会说的话。而且有少数作家可以在散文中使用华丽语言而不受惩罚。当然，也有作者不想让人们容易理解他们在说什么的情况——例如，在公司的坏消息公告中，或人文学科更虚假的一端。但对几乎所有其他人来说，口语更好。\n对大多数人来说，用口语写作似乎很难。所以也许最好的解决方案是按照你通常的方式写初稿，然后 afterward看每个句子并问\u0026quot;这是我和朋友交谈时会说的吗？\u0026ldquo;如果不是，想象你会说什么，然后用那个代替。一段时间后，这个过滤器会在你写作时开始运作。当你写下一些你不会说的话时，你会听到它击中页面时的哐当声。\n在我发表新文章之前，我会大声朗读并修复所有听起来不像交谈的内容。我甚至会修复语音上尴尬的部分；我不知道这是否必要，但成本不高。\n这个技巧可能并不总是足够。我见过一些写作与口语相差太远，无法逐句修复。对于这种情况，有一个更彻底的解决方案。写完初稿后，试着向朋友解释你刚刚写的东西。然后用你对朋友说的话替换草稿。\n人们经常告诉我，我的文章听起来多么像我说话。这个事实似乎值得评论，这表明人们很少能够用口语写作。否则每个人的写作都会听起来像他们说话。\n如果你只是设法用口语写作，你将领先95%的写作者。而且这很容易做到：只要不让一个句子通过，除非它是你对朋友会说的方式。\n感谢Patrick Collison和Jessica Livingston阅读本文的草稿。\n日语翻译\n阿拉伯语翻译\n",
    "description": "",
    "tags": ["写作","口语","沟通","风格","散文"],
    "categories": [],
    "content": "→ English Version\n像你说话一样写作 2015年10月\n这里有一个简单的技巧，让更多人阅读你写的东西：用口语写作。\n当大多数人开始写作时，会发生某种变化。他们使用的语言与他们和朋友交谈时使用的不同。句子结构甚至词汇都不同。没有人会在口语中使用\u0026quot;pen\u0026quot;作为动词。在与朋友交谈时使用\u0026quot;pen\u0026quot;而不是\u0026quot;write\u0026quot;会让你觉得自己像个白痴。\n让我受不了的是我几天前读到的一句话：那个反复无常的西班牙人自己宣称：\u0026ldquo;在阿尔塔米拉之后，一切都堕落了。\u0026ldquo;这来自尼尔·奥利弗的《古代英国史》。我觉得拿这本书作例子很不好，因为它不比许多其他书差。但想象一下和朋友交谈时称毕加索为\u0026quot;那个反复无常的西班牙人\u0026rdquo;。即使只有一句话也会在交谈中引起皱眉。然而人们却整本整本地写这种东西。\n好吧，书面语和口语是不同的。这使书面语更糟吗？\n如果你想让人们阅读和理解你写的东西，是的。书面语言更复杂，这使得阅读更费力。它也更正式和疏远，这让读者的注意力容易漂移。但也许最糟糕的是，复杂的句子和华丽的词汇给你，作者，一种虚假的印象，让你以为你说得比实际更多。\n你不需要复杂的句子来表达复杂的想法。当某个深奥领域的专家相互谈论他们领域的想法时，他们使用的句子不会比谈论午餐吃什么时更复杂。他们当然使用不同的词汇。但即使是那些词汇，他们也使用得不多。根据我的经验，主题越难，专家说话越随意。部分原因，我想，是因为他们需要证明的东西较少，部分原因是，你谈论的想法越难，你越不能让语言成为障碍。\n非正式语言是思想的运动装。\n我并不是说口语总是最有效。诗歌既是音乐也是文本，所以你可以说一些在交谈中不会说的话。而且有少数作家可以在散文中使用华丽语言而不受惩罚。当然，也有作者不想让人们容易理解他们在说什么的情况——例如，在公司的坏消息公告中，或人文学科更虚假的一端。但对几乎所有其他人来说，口语更好。\n对大多数人来说，用口语写作似乎很难。所以也许最好的解决方案是按照你通常的方式写初稿，然后 afterward看每个句子并问\u0026quot;这是我和朋友交谈时会说的吗？\u0026ldquo;如果不是，想象你会说什么，然后用那个代替。一段时间后，这个过滤器会在你写作时开始运作。当你写下一些你不会说的话时，你会听到它击中页面时的哐当声。\n在我发表新文章之前，我会大声朗读并修复所有听起来不像交谈的内容。我甚至会修复语音上尴尬的部分；我不知道这是否必要，但成本不高。\n这个技巧可能并不总是足够。我见过一些写作与口语相差太远，无法逐句修复。对于这种情况，有一个更彻底的解决方案。写完初稿后，试着向朋友解释你刚刚写的东西。然后用你对朋友说的话替换草稿。\n人们经常告诉我，我的文章听起来多么像我说话。这个事实似乎值得评论，这表明人们很少能够用口语写作。否则每个人的写作都会听起来像他们说话。\n如果你只是设法用口语写作，你将领先95%的写作者。而且这很容易做到：只要不让一个句子通过，除非它是你对朋友会说的方式。\n感谢Patrick Collison和Jessica Livingston阅读本文的草稿。\n日语翻译\n阿拉伯语翻译\n"
  },{
    "title": "关于语言设计的五个问题",
    "url": "/paul_graham/essays_zh/langdes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n关于语言设计的五个问题 2001年5月\n（这些是我在2001年5月10日MIT编程语言设计小组讨论会上所做的笔记。）\n1. 编程语言是为人设计的。 编程语言是人们与计算机交流的方式。计算机对于任何无歧义的语言都会同样满意。我们有高级语言的原因是因为人们无法处理机器语言。编程语言的要点是防止我们可怜脆弱的人类大脑被大量细节所淹没。\n建筑师知道某些设计问题比其他问题更具个人性。最干净、最抽象的设计问题之一是设计桥梁。在那里，你的工作主要是用最少的材料跨越给定的距离。光谱的另一端是设计椅子。椅子设计师必须花时间思考人类的臀部。\n软件也是如此。设计网络数据路由算法是一个很好的抽象问题，就像设计桥梁。而设计编程语言就像设计椅子：这完全是关于处理人类弱点的问题。\n我们大多数人都讨厌承认这一点。设计具有数学优雅性的系统对我们大多数人来说比迎合人类弱点听起来更有吸引力。数学优雅确实有作用：某些优雅性使程序更容易理解。但优雅本身不是目的。\n当我说语言必须设计得适合人类弱点时，我并不是说语言必须为糟糕的程序员设计。事实上我认为你应该为最好的程序员设计，但即使是最好的程序员也有局限性。我认为没有人会喜欢在所有变量都是带整数下标的字母x的语言中编程。\n2. 为自己和你的朋友设计。 如果你看看编程语言的历史，很多最好的语言都是为其作者自己使用的语言设计的，而很多最差的语言是为其他人使用而设计的。\n当语言为其他人设计时，总是特定的一群其他人：没有语言设计师聪明的人。所以你得到一种居高临下的语言。Cobol是最极端的例子，但很多语言都充斥着这种精神。\n这与语言的抽象程度无关。C是相当低级的，但它是为其作者使用而设计的，这就是为什么黑客喜欢它。\n为糟糕的程序员设计语言的论点是糟糕的程序员比好程序员多。可能是这样。但是那些少数好程序员编写了不成比例的大量软件。\n我对这个问题很感兴趣，你如何设计一种最好的黑客会喜欢的语言？我碰巧认为这与如何设计一种好的编程语言是同一个问题，但即使不是，它至少是一个有趣的问题。\n3. 给程序员尽可能多的控制权。 许多语言（特别是为其他人设计的语言）都有保姆的态度：它们试图阻止你做它们认为对你不好的事情。我喜欢相反的方法：给程序员尽可能多的控制权。\n当我第一次学习Lisp时，我最喜欢的是它把我当作平等的伙伴。在我之前学习的其他语言中，有语言本身和用该语言写的我的程序，两者非常分离。但在Lisp中，我编写的函数和宏就像构成语言本身的那些一样。如果我想，我可以重写语言。它有着与开源软件相同的吸引力。\n4. 追求简洁。 简洁被低估甚至被鄙视。但如果你深入了解黑客的内心，你会发现他们真的很喜欢它。你有多少次听到黑客深情地谈到，比如说，在APL中，他们只需几行代码就能做出惊人的事情？我认为任何真正聪明的人真正喜欢的东西都值得注意。\n我认为几乎任何能让程序更短的事情都是好的。应该有很多库函数；任何可以隐含的东西都应该；语法应该简洁到极致；甚至事物的名称都应该简短。\n不仅程序应该简短。手册也应该薄。手册的很大部分被用于澄清、保留、警告和特殊情况。如果你强迫自己缩短手册，在最好的情况下，你会通过修复语言中需要这么多解释的东西来实现。\n5. 承认黑客的本质。 很多人希望黑客是数学，或者至少是类似自然科学的东西。我认为黑客更像是建筑。建筑与物理学有关，因为建筑师必须设计不会倒塌的建筑，但建筑师的真正目标是建造伟大的建筑，而不是做出关于静力学的发现。\n黑客喜欢做的是编写伟大的程序。而且我认为，至少在我们自己的心中，我们必须记住，编写伟大的程序是一件令人钦佩的事情，即使这项工作不容易转化为研究论文的传统智力货币。在智力上，设计程序员会喜欢的语言与设计一个包含你可以发表论文的某些想法的糟糕语言同样有价值。\n开放性问题 1. 如何组织大型库？ 库正在成为编程语言越来越重要的组成部分。它们也在变得更大，这可能很危险。如果找到能做你想要的事情的库函数比你自己编写它需要更长的时间，那么所有这些代码只是在让你的手册变厚。（Symbolics手册就是一个例子。）所以我认为我们必须研究组织库的方法。理想的情况是设计它们，使程序员能够猜测哪个库调用会做正确的事情。\n2. 人们真的害怕前缀语法吗？ 这是一个开放性问题，在这个意义上我多年来一直在思考它，但仍然不知道答案。前缀语法对我来说似乎完全自然，可能除了数学。但Lisp不受欢迎可能只是因为它有陌生的语法。如果这是真的，是否要对此做些什么是另一个问题。\n3. 基于服务器的软件需要什么？ 我认为未来二十年内编写的最令人兴奋的新应用程序中，很多将是基于Web的应用程序，意味着程序位于服务器上并通过Web浏览器与你交谈。而编写这类程序我们可能需要一些新东西。\n我们需要的一件事是支持基于服务器的应用程序发布的新方式。不像桌面软件那样每年有一两个大的发布版本，基于服务器的应用程序作为一系列小变化发布。你一天可能有五到十个发布版本。而且作为规则，每个人都会总是使用最新版本。\n你知道你可以设计程序以便调试吗？嗯，基于服务器的软件同样必须设计成可改变的。你必须能够轻松地改变它，或者至少知道什么是小的改变，什么是重大的改变。\n另一个可能对基于服务器的软件有用的东西，令人惊讶的是，是continuations。在基于Web的软件中，你可以使用类似continuation-passing style的东西来在Web会话本质上无状态的世界中获得子程序的效果。如果不太昂贵，拥有实际的continuations可能是值得的。\n4. 还有什么新的抽象有待发现？ 我不确定这个希望有多合理，但我个人真的很想做的一件事是发现一个新的抽象——某种能像拥有一等函数或递归甚至关键字参数那样产生巨大影响的东西。这可能是一个不可能实现的梦想。这些东西并不经常被发现。但我一直在寻找。\n预测 1. 你可以使用任何你想要的语言。 编写应用程序过去意味着编写桌面软件。在桌面软件中，有很大的偏向于使用与操作系统相同的语言编写应用程序。所以十年前，编写软件几乎意味着用C编写软件。最终形成了一个传统：应用程序不能用不寻常的语言编写。而这个传统有很长时间发展，以至于像经理和风险投资家这样的非技术人员也学会了它。\n基于服务器的软件彻底打破了这一模式。使用基于服务器的软件，你可以使用任何你想要的语言。几乎没有人理解这一点（特别是经理和风险投资家）。一些黑客理解它，这就是为什么我们甚至听到像Perl和Python这样的新的独立语言。我们听到Perl和Python不是因为人们用它们编写Windows应用程序。\n作为对设计编程语言感兴趣的人，这对我们意味着我们的工作现在可能有真正的受众。\n2. 速度来自分析器。 语言设计师，或者至少语言实现者，喜欢编写生成快速代码的编译器。但我不认为这是使语言对用户来说快速的原因。Knuth很久以前就指出，速度只在几个关键瓶颈中重要。任何尝试过的人都知道你无法猜测这些瓶颈在哪里。分析器是答案。\n语言设计师在解决错误的问题。用户不需要基准测试运行得快。他们需要的是一种能够显示他们自己程序的哪些部分需要重写的语言。这就是实践中速度的来源。所以也许如果语言实现者把他们本来会花在编译器优化上的一半时间用来编写一个好的分析器，这会是一个净收益。\n3. 你需要一个应用程序来推动语言的设计。 这可能不是一个绝对的规则，但似乎最好的语言都是与它们被用来编写的某个应用程序一起演化的。C是由需要它进行系统编程的人编写的。Lisp的开发部分是为了进行符号微分，McCarthy如此急于开始，甚至在1960年第一篇关于Lisp的论文中就在编写微分程序。\n如果你的应用程序解决一些新问题，那就特别好。这将倾向于推动你的语言拥有程序员需要的新特性。我个人对编写一种适合编写基于服务器的应用程序的语言感兴趣。\n[在小组讨论中，Guy Steele也提出了这一点，并补充建议应用程序不应该包括为你语言编写编译器，除非你的语言碰巧是用于编写编译器的。]\n4. 语言必须适合编写一次性程序。 你知道什么是一次性程序：你为某些有限任务快速编写的东西。我认为如果你环顾四周，你会发现很多大的、严肃的程序开始时是一次性程序。如果大多数程序开始时是一次性程序，我不会感到惊讶。所以如果你想制造一种适合一般软件编写的好语言，它必须适合编写一次性程序，因为这是大多数软件的幼虫阶段。\n5. 语法与语义相连。 传统上认为语法和语义是完全分开的。这听起来很震惊，但它们可能不是。我认为你语言中想要的东西可能与你如何表达它有关。\n",
    "description": "",
    "tags": ["编程语言","语言设计","黑客","lisp","软件开发","计算机科学","技术"],
    "categories": [],
    "content": "→ English Version\n关于语言设计的五个问题 2001年5月\n（这些是我在2001年5月10日MIT编程语言设计小组讨论会上所做的笔记。）\n1. 编程语言是为人设计的。 编程语言是人们与计算机交流的方式。计算机对于任何无歧义的语言都会同样满意。我们有高级语言的原因是因为人们无法处理机器语言。编程语言的要点是防止我们可怜脆弱的人类大脑被大量细节所淹没。\n建筑师知道某些设计问题比其他问题更具个人性。最干净、最抽象的设计问题之一是设计桥梁。在那里，你的工作主要是用最少的材料跨越给定的距离。光谱的另一端是设计椅子。椅子设计师必须花时间思考人类的臀部。\n软件也是如此。设计网络数据路由算法是一个很好的抽象问题，就像设计桥梁。而设计编程语言就像设计椅子：这完全是关于处理人类弱点的问题。\n我们大多数人都讨厌承认这一点。设计具有数学优雅性的系统对我们大多数人来说比迎合人类弱点听起来更有吸引力。数学优雅确实有作用：某些优雅性使程序更容易理解。但优雅本身不是目的。\n当我说语言必须设计得适合人类弱点时，我并不是说语言必须为糟糕的程序员设计。事实上我认为你应该为最好的程序员设计，但即使是最好的程序员也有局限性。我认为没有人会喜欢在所有变量都是带整数下标的字母x的语言中编程。\n2. 为自己和你的朋友设计。 如果你看看编程语言的历史，很多最好的语言都是为其作者自己使用的语言设计的，而很多最差的语言是为其他人使用而设计的。\n当语言为其他人设计时，总是特定的一群其他人：没有语言设计师聪明的人。所以你得到一种居高临下的语言。Cobol是最极端的例子，但很多语言都充斥着这种精神。\n这与语言的抽象程度无关。C是相当低级的，但它是为其作者使用而设计的，这就是为什么黑客喜欢它。\n为糟糕的程序员设计语言的论点是糟糕的程序员比好程序员多。可能是这样。但是那些少数好程序员编写了不成比例的大量软件。\n我对这个问题很感兴趣，你如何设计一种最好的黑客会喜欢的语言？我碰巧认为这与如何设计一种好的编程语言是同一个问题，但即使不是，它至少是一个有趣的问题。\n3. 给程序员尽可能多的控制权。 许多语言（特别是为其他人设计的语言）都有保姆的态度：它们试图阻止你做它们认为对你不好的事情。我喜欢相反的方法：给程序员尽可能多的控制权。\n当我第一次学习Lisp时，我最喜欢的是它把我当作平等的伙伴。在我之前学习的其他语言中，有语言本身和用该语言写的我的程序，两者非常分离。但在Lisp中，我编写的函数和宏就像构成语言本身的那些一样。如果我想，我可以重写语言。它有着与开源软件相同的吸引力。\n4. 追求简洁。 简洁被低估甚至被鄙视。但如果你深入了解黑客的内心，你会发现他们真的很喜欢它。你有多少次听到黑客深情地谈到，比如说，在APL中，他们只需几行代码就能做出惊人的事情？我认为任何真正聪明的人真正喜欢的东西都值得注意。\n我认为几乎任何能让程序更短的事情都是好的。应该有很多库函数；任何可以隐含的东西都应该；语法应该简洁到极致；甚至事物的名称都应该简短。\n不仅程序应该简短。手册也应该薄。手册的很大部分被用于澄清、保留、警告和特殊情况。如果你强迫自己缩短手册，在最好的情况下，你会通过修复语言中需要这么多解释的东西来实现。\n5. 承认黑客的本质。 很多人希望黑客是数学，或者至少是类似自然科学的东西。我认为黑客更像是建筑。建筑与物理学有关，因为建筑师必须设计不会倒塌的建筑，但建筑师的真正目标是建造伟大的建筑，而不是做出关于静力学的发现。\n黑客喜欢做的是编写伟大的程序。而且我认为，至少在我们自己的心中，我们必须记住，编写伟大的程序是一件令人钦佩的事情，即使这项工作不容易转化为研究论文的传统智力货币。在智力上，设计程序员会喜欢的语言与设计一个包含你可以发表论文的某些想法的糟糕语言同样有价值。\n开放性问题 1. 如何组织大型库？ 库正在成为编程语言越来越重要的组成部分。它们也在变得更大，这可能很危险。如果找到能做你想要的事情的库函数比你自己编写它需要更长的时间，那么所有这些代码只是在让你的手册变厚。（Symbolics手册就是一个例子。）所以我认为我们必须研究组织库的方法。理想的情况是设计它们，使程序员能够猜测哪个库调用会做正确的事情。\n2. 人们真的害怕前缀语法吗？ 这是一个开放性问题，在这个意义上我多年来一直在思考它，但仍然不知道答案。前缀语法对我来说似乎完全自然，可能除了数学。但Lisp不受欢迎可能只是因为它有陌生的语法。如果这是真的，是否要对此做些什么是另一个问题。\n3. 基于服务器的软件需要什么？ 我认为未来二十年内编写的最令人兴奋的新应用程序中，很多将是基于Web的应用程序，意味着程序位于服务器上并通过Web浏览器与你交谈。而编写这类程序我们可能需要一些新东西。\n我们需要的一件事是支持基于服务器的应 …"
  },{
    "title": "养育孩子",
    "url": "/paul_graham/essays_zh/kids/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n养育孩子 2019年12月\n在有孩子之前，我害怕生孩子。在那之前，我对孩子的感觉就像年幼的奥古斯丁对过道德生活的感觉一样。如果我想到自己永远不会有孩子，我会感到难过。但是我现在想要孩子吗？不。\n如果我有孩子，我将成为父母，而从我小时候起就知道，父母都不酷。他们沉闷、负责任，没有乐趣。虽然孩子们会这样想并不奇怪，但说实话，成年后我也没有看到太多能改变我看法的事情。每当我注意到有孩子的父母时，孩子们似乎都是小恶魔，而父母则是可怜的、疲惫不堪的生物，即使他们占了上风。\n当人们生婴儿时，我热情地祝贺他们，因为这似乎是应该做的事情。但我完全没有这种感觉。\u0026ldquo;幸好是你不是我，\u0026ldquo;我当时在想。\n现在当人们生婴儿时，我热情地祝贺他们，而且我是真心的。尤其是第一个孩子。我感觉他们刚刚得到了世界上最好的礼物。\n当然，改变的是我有了孩子。我曾经害怕的事情结果却是美妙的。\n部分原因，我不会否认，是因为我们的第一个孩子出生时几乎立即发生的严重化学变化。就像有人翻转了一个开关。我突然不仅对我们的孩子感到保护，而且对所有的孩子都是如此。当我开车带妻子和新生的儿子从医院回家时，我走近一个挤满行人的十字路口，我发现自己在想\u0026quot;我必须非常小心所有这些人。每个人都是某人的孩子！\u0026rdquo;\n所以在某种程度上，当我说生孩子很棒时，你不能完全相信我。在某种程度上，我像一个宗教邪教成员告诉你如果你加入邪教也会快乐——但这只是因为加入邪教会改变你的思想，使你成为一个快乐的邪教成员。\n但不完全是这样。关于生孩子这件事，有一些我在有孩子之前明显弄错了的地方。\n例如，我对父母和孩子的观察中存在巨大的选择偏见。有些父母可能注意到我写了\u0026quot;每当我注意到有孩子的父母时\u0026rdquo;。当然，我注意到孩子的时候都是出了问题的时候。只有当他们制造噪音时我才会注意到他们。而当我在哪里注意到他们呢？通常我从来不去有孩子的地方，所以我遇到他们的唯一地方是在飞机这样的共享瓶颈处。这根本不是有代表性的样本。几乎没有父母喜欢和幼儿一起飞行。\n我没有注意到的事情，是因为他们往往安静得多，是父母与孩子在一起的所有美好时刻。人们不太谈论这些——魔力很难用言语表达，而且所有其他父母都知道——但生孩子的最大好处之一是有很多时候你会觉得没有其他地方你更想去，也没有其他事情你更想做。你不必在做特别的事情。你可能只是一起去某个地方，或者哄他们睡觉，或者在公园里推他们荡秋千。但你不会用这些时刻交换任何东西。人们往往不会将孩子与平静联系起来，但这就是你的感受。你不需要再看得比你现在的位置更远。\n在有孩子之前，我也有过这种平静的时刻，但它们比较罕见。有了孩子，一天可以发生好几次。\n我关于孩子的另一个数据来源是我自己的童年，这也同样具有误导性。我当时相当调皮，总是因为这样或那样的事情惹上麻烦。所以在我看来，为人父母基本上就是执法。我没有意识到也有好时光。\n我记得我大约30岁时，母亲有一次告诉我她真的很享受有我和我妹妹的时光。我的天啊，我想，这个女人是个圣人。她不仅忍受了我们让她承受的所有痛苦，而且还乐在其中？现在我意识到她只是在说实话。\n她说她喜欢我们的一个原因是我们谈话很有趣。当我有孩子时，这让我感到惊讶。你不仅爱他们。他们也成了你的朋友。他们真的很有趣。虽然我承认幼儿非常喜欢重复（任何值得做一次的事情都值得做五十次），但和他们一起玩通常真的很有趣。这也让我感到惊讶。和2岁的孩子玩耍在我2岁时很有趣，在我6岁时肯定不好玩。为什么后来又变得有趣了？但它确实如此。\n当然，有些时候纯粹是苦差事。或者更糟，是恐惧。生孩子是那种强烈的体验类型，很难想象，除非你经历过。但这并不是像我生孩子之前隐含地认为的那样，只是你的DNA走向救生艇。\n不过，我关于生孩子的担忧有一些是对的。它们确实会让你生产力下降。我知道生孩子让一些人把事情整理好，但如果你的事情已经整理好了，你去做事情的时间就会减少。特别是，你必须按照时间表工作。孩子有时间表。我不确定是因为孩子就是这样，还是因为这是将他们的生活与成年人生活整合的唯一方式，但一旦你有了孩子，你往往必须按照他们的时间表工作。\n你会有大块的时间来工作。但你不能让工作随意地蔓延到你的整个生活中，就像我生孩子前那样。你必须在每天同一时间工作，无论灵感是否流动，而且会有时候你必须停止，即使它正在流动。\n我已经能够适应这种方式工作。工作，像爱情一样，总会找到方法。如果只有某些时间可以发生，它就会在那些时间发生。所以虽然我没有生孩子前完成那么多工作，但我完成的工作足够了。\n我讨厌这么说，因为抱负一直是我身份的一部分，但生孩子可能会让人不那么有抱负。看到这句话写下来我很痛苦。我挣扎着避免它。但如果没有真实的东西在那里，我为什么要挣扎？事实上，一旦你有了孩子，你可能会更关心他们而不是自己。而注意力是一个零和游戏。一次只有一个想法可以是你头脑中的首要想法。一旦你有了孩子，它通常会是你的孩子，这意味着它不太会是你正在工作的某个项目。\n我有一些技巧来接近这个边缘。例如，当我写文章时，我想我希望我的孩子知道什么。这驱使我把事情做对。当我写《贝尔》时，我告诉我的孩子一旦我完成它，我就带他们去非洲。当你对小孩子说这种话时，他们会把它当作承诺。这意味着我必须完成，否则我就要带走他们的非洲之旅。也许如果我真的很幸运，这样的技巧可能会让我净赚。但风就在那里，毫无疑问。\n另一方面，如果你的抱负连有孩子都经受不了，那是多么无力的抱负？你有这么少的余力吗？\n虽然生孩子可能扭曲了我现在的判断，但它没有覆盖我的记忆。我清楚地记得以前的生活是怎样的。足够想念很多事情，比如能够随时动身去另一个国家的能力。那真是太棒了。我为什么从来没有那样做？\n看到我做了什么？事实上，我在生孩子前拥有的大多数自由，我从来没有使用过。我用孤独为它付出了代价，但我从来没有使用过。\n我在有孩子前有很多快乐的时光。但如果我计算快乐时刻，不仅仅是潜在的快乐，而是实际的快乐时刻，生孩子后比以前多了。现在我几乎可以随时获得，几乎任何睡前时间。\n人们作为父母的经历差异很大，我知道我一直很幸运。但我认为我生孩子前的担忧一定很常见，而且从其他父母看到孩子时的脸色来看，孩子带来的幸福也一定很普遍。\n注意 [1] 成年人足够复杂，能够看到2岁孩子是迷人的复杂角色，而对大多数6岁孩子来说，2岁孩子只是有缺陷的6岁孩子。\n感谢 Trevor Blackwell、Jessica Livingston 和 Robert Morris 阅读本文的草稿。\n阿拉伯语翻译 | 斯洛伐克语翻译\n",
    "description": "",
    "tags": ["育儿","孩子","家庭","个人成长","幸福","工作生活平衡","抱负"],
    "categories": [],
    "content": "→ English Version\n养育孩子 2019年12月\n在有孩子之前，我害怕生孩子。在那之前，我对孩子的感觉就像年幼的奥古斯丁对过道德生活的感觉一样。如果我想到自己永远不会有孩子，我会感到难过。但是我现在想要孩子吗？不。\n如果我有孩子，我将成为父母，而从我小时候起就知道，父母都不酷。他们沉闷、负责任，没有乐趣。虽然孩子们会这样想并不奇怪，但说实话，成年后我也没有看到太多能改变我看法的事情。每当我注意到有孩子的父母时，孩子们似乎都是小恶魔，而父母则是可怜的、疲惫不堪的生物，即使他们占了上风。\n当人们生婴儿时，我热情地祝贺他们，因为这似乎是应该做的事情。但我完全没有这种感觉。\u0026ldquo;幸好是你不是我，\u0026ldquo;我当时在想。\n现在当人们生婴儿时，我热情地祝贺他们，而且我是真心的。尤其是第一个孩子。我感觉他们刚刚得到了世界上最好的礼物。\n当然，改变的是我有了孩子。我曾经害怕的事情结果却是美妙的。\n部分原因，我不会否认，是因为我们的第一个孩子出生时几乎立即发生的严重化学变化。就像有人翻转了一个开关。我突然不仅对我们的孩子感到保护，而且对所有的孩子都是如此。当我开车带妻子和新生的儿子从医院回家时，我走近一个挤满行人的十字路口，我发现自己在想\u0026quot;我必须非常小心所有这些人。每个人都是某人的孩子！\u0026rdquo;\n所以在某种程度上，当我说生孩子很棒时，你不能完全相信我。在某种程度上，我像一个宗教邪教成员告诉你如果你加入邪教也会快乐——但这只是因为加入邪教会改变你的思想，使你成为一个快乐的邪教成员。\n但不完全是这样。关于生孩子这件事，有一些我在有孩子之前明显弄错了的地方。\n例如，我对父母和孩子的观察中存在巨大的选择偏见。有些父母可能注意到我写了\u0026quot;每当我注意到有孩子的父母时\u0026rdquo;。当然，我注意到孩子的时候都是出了问题的时候。只有当他们制造噪音时我才会注意到他们。而当我在哪里注意到他们呢？通常我从来不去有孩子的地方，所以我遇到他们的唯一地方是在飞机这样的共享瓶颈处。这根本不是有代表性的样本。几乎没有父母喜欢和幼儿一起飞行。\n我没有注意到的事情，是因为他们往往安静得多，是父母与孩子在一起的所有美好时刻。人们不太谈论这些——魔力很难用言语表达，而且所有其他父母都知道——但生孩子的最大好处之一是有很多时候你会觉得没有其他地方你更想去，也没有其他事情你更想做。你不必在做特别的事情。你可能只是一起去某个地方，或者哄他们睡觉，或者在公园里推他们荡秋千。但你不会用这些时刻交换任何东西。人们往往不会将孩子与平静联系起来，但这就是你的感受。你不需要再看得比你现在的位置更远。\n在有孩子之前，我也有过这种平静的时刻，但它们比较罕见。有了孩子，一天可以发生好几次。\n我关于孩子的另一个数据来源是我自己的童年，这也同样具有误导性。我当时相当调皮，总是因为这样或那样的事情惹上麻烦。所以在我看来，为人父母基本上就是执法。我没有意识到也有好时光。\n我记得我大约30岁时，母亲有一次告诉我她真的很享受有我和我妹妹的时光。我的天啊，我想，这个女人是个圣人。她不仅忍受了我们让她承受的所有痛苦，而且还乐在其中？现在我意识到她只是在说实话。\n她说她喜欢我们的一个原因是我们谈话很有趣。当我有孩子时，这让我感到惊讶。你不仅爱他们。他们也成了你的朋友。他们真的很有趣。虽然我承认幼儿非常喜欢重复（任何值得做一次的事情都值得做五十次），但和他们一起玩通常真的很有趣。这也让我感到惊讶。和2岁的孩子玩耍在我2岁时很有趣，在我6岁时肯定不好玩。为什么后来又变得有趣了？但它确实如此。\n当然，有些时候纯粹是苦差事。或者更糟，是恐惧。生孩子是那种强烈的体验类型，很难想象，除非你经历过。但这并不是像我生孩子之前隐含地认为的那样，只是你的DNA走向救生艇。\n不过，我关于生孩子的担忧有一些是对的。它们确实会让你生产力下降。我知道生孩子让一些人把事情整理好，但如果你的事情已经整理好了，你去做事情的时间就会减少。特别是，你必须按照时间表工作。孩子有时间表。我不确定是因为孩子就是这样，还是因为这是将他们的生活与成年人生活整合的唯一方式，但一旦你有了孩子，你往往必须按照他们的时间表工作。\n你会有大块的时间来工作。但你不能让工作随意地蔓延到你的整个生活中，就像我生孩子前那样。你必须在每天同一时间工作，无论灵感是否流动，而且会有时候你必须停止，即使它正在流动。\n我已经能够适应这种方式工作。工作，像爱情一样，总会找到方法。如果只有某些时间可以发生，它就会在那些时间发生。所以虽然我没有生孩子前完成那么多工作，但我完成的工作足够了。\n我讨厌这么说，因为抱负一直是我身份的一部分，但生孩子可能会让人不那么有抱负。看到这句话写下来我很痛苦。我挣扎着避免它。但如果没有真实的东西在那里，我为什么要挣扎？事实上， …"
  },{
    "title": "再分化",
    "url": "/paul_graham/essays_zh/re/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n再分化 2016年1月\n年老的一个好处是，你能在自己的有生之年看到变化的发生。我看到的大部分变化都是分化。美国政治比以往更加两极化。文化上，我们共同的基础越来越少。创意阶层涌向少数几个幸福的城市，抛弃了其他地方。日益加剧的经济不平等意味着贫富差距也在扩大。我想提出一个假说：所有这些趋势都是同一现象的不同实例。而且，其根本原因不是某种将我们分开的力量，而是曾经将我们凝聚在一起的力量正在侵蚀。\n更糟糕的是，对于那些担心这些趋势的人来说，曾经将我们凝聚在一起的力量是一种异常现象，是一次性情况的结合，不太可能重复——而且，我们也不希望重复。\n这两种力量是战争（尤其是第二次世界大战）和大公司的兴起。\n第二次世界大战的影响既有经济上的，也有社会上的。在经济上，它减少了收入差异。与所有现代武装力量一样，美国的军队在经济上是社会主义的。\u0026ldquo;各尽所能，按需分配\u0026rdquo;。或多或少。军队中高级成员得到的更多（正如社会主义社会中高层人员总是那样），但他们得到的是根据其级别固定的。而且这种扁平化效应并不限于军人，因为美国经济也被征召入伍。在1942年到1945年期间，所有工资都由国家战争劳工委员会设定。像军队一样，它们默认扁平化。而且这种工资的标准化如此普遍，以至于在战争结束多年后其影响仍然可见。[1]\n企业主也不应该赚钱。罗斯福说\u0026quot;不允许任何一个战争百万富翁\u0026quot;出现。为确保这一点，任何公司战前利润的增长都被征收85%的税。当公司税后收入到达个人手中时，又以93%的边际税率再次征税。[2]\n在社会方面，战争也倾向于减少差异。超过1600万来自各种不同背景的男性和女性以一种真正统一的生活方式聚集在一起。1920年代初出生男性的服兵役率接近80%。为共同目标而努力，通常在压力下，使他们更加紧密地团结在一起。\n虽然严格来说，第二次世界大战对美国来说持续了不到4年，但其影响持续了更长时间。战争使中央政府更加强大，而第二次世界大战是这种情况的极端例子。在美国，就像所有其他盟国一样，联邦政府不愿意放弃它获得的新权力。事实上，在某些方面，战争并没有在1945年结束；敌人只是变成了苏联。在税率、联邦权力、国防开支、征兵和民族主义方面，战后的几十年看起来更像战时而非战前的和平时期。[3] 社会影响也持续了。那个从西弗吉尼亚州骡队后面被征召入伍的年轻人并没有简单回到农场。有其他东西在等待着他，看起来很像军队。\n如果总体战争是20世纪重大的政治故事，那么重大的经济故事就是一种新型公司的兴起。这也倾向于产生社会和经济凝聚力。[4]\n20世纪是大型全国性公司的世纪。通用电气、通用食品、通用汽车。金融、通信、交通和制造业的发展使一种新型公司成为可能，其首要目标是规模。这个世界的1.0版本是低分辨率的：由少数几家巨头公司主导每个大市场的乐高世界。[5]\n19世纪末和20世纪初是一个整合的时代，尤其由J.P.摩根领导。成千上万家由其创始人经营的公司合并成了几百家由专业经理人经营的巨头公司。规模经济统治了那个时代。当时的人们认为这是最终状态。约翰·D·洛克菲勒在1880年说：\u0026ldquo;联合的时代已经到来并将永远存在。个人主义已经消失，再也不会回来。\u0026ldquo;事实证明他错了，但在接下来的100年里，他似乎是对的。\n19世纪末开始的整合持续了20世纪的大部分时间。到第二次世界大战结束时，正如迈克尔·林德所写，\u0026ldquo;经济的主要部门要么组织成政府支持的卡特尔，要么由少数寡头公司主导。\u0026rdquo;\n对消费者来说，这个新世界意味着到处都有同样的选择，但只有少数几种选择。我长大时，大多数东西只有2或3种选择，而且由于它们都以市场中间为目标，没有什么可以区分它们。\n这种现象最重要的例子之一是在电视领域。这里有3个选择：NBC、CBS和ABC。加上为知识分子和共产主义者准备的公共电视。3个网络提供的节目无法区分。事实上，这里有三重压力向中心靠拢。如果一个节目确实尝试了一些大胆的东西，保守市场的当地分公司会让他们停止。此外，由于电视很贵，全家人一起看同样的节目，所以它们必须适合每个人。\n而且，每个人不仅得到同样的东西，而且在同一时间得到。现在很难想象，但每天晚上数千万家庭会一起坐在电视机前，和他们的邻居一样，在同一时间看同一个节目。现在超级碗发生的事情在当时每晚都发生。我们真的是同步的。[6]\n在某种程度上，中世纪的电视文化是好的。它给出的世界观就像在儿童读物中找到的，它可能具有（父母希望的）儿童读物所具有的效果，使人们表现得更好。但是，像儿童读物一样，电视也具有误导性。对成年人来说是危险的误导。罗伯特·麦克尼尔在他的自传中谈到看到刚从越南传来的恐怖图像时想，我们不能在家人吃晚饭时给他们看这些。\n我知道共同文化是多么普遍，因为我试图脱离它，而实际上不可能找到替代品。我13岁时意识到，更多是从内部证据而非任何外部来源，我们在电视上被灌输的想法都是垃圾，我就停止看电视了。[7] 但不仅仅是电视。我周围的一切似乎都是垃圾。政治家们说着同样的话，消费品牌生产几乎相同的产品，贴上不同的标签来表明它们应有的声望，带有虚假\u0026quot;殖民地\u0026quot;外观的轻框架房屋，每端有几英尺多余金属的汽车，几年后就开始解体，\u0026ldquo;红美味\u0026quot;苹果是红色的，但只是名义上的苹果。回想起来，那确实是垃圾。[8]\n但是，当我寻找替代品来填补这个空白时，我几乎什么也没找到。那时没有互联网。唯一能看的地方是我们当地购物中心连锁书店。[9] 在那里我找到了一本《大西洋月刊》。我希望我能说它成为了进入更广阔世界的门户，但事实上我发现它无聊且难以理解。像小孩子第一次尝威士忌并假装喜欢它一样，我像保存一本书一样小心翼翼地保存那本杂志。我相信我还在某个地方有它。但尽管它证明在某个地方存在一个不是红美味苹果的世界，但我直到大学才找到它。\n大公司不仅作为消费者让我们相似，作为雇主也是如此。在公司内部，有强大的力量将人们推向单一的外表和行为模式。IBM在这方面特别臭名昭著，但它们只是比其他大公司更极端一点。而且如何看和行动的模式在公司之间差异很小。意味着这个世界内的每个人都预期看起来或多或少相同。不仅是企业世界的人，还有所有渴望进入它的人——在20世纪中期，这意味着大多数还没有进入其中的人。在20世纪的大部分时间里，工人阶级努力看起来像中产阶级。你可以在老照片中看到。1950年很少有成年人渴望看起来危险。\n但是全国性公司的兴起不仅压缩了我们的文化，也压缩了我们的经济，而且是两端都压缩。\n随着全国性大公司，我们得到了全国性的大型工会。在20世纪中期，公司与工会达成交易，支付高于市场价格的劳动力。部分是因为工会是垄断的。[10] 部分是因为，作为寡头本身的组成部分，公司知道他们可以安全地将成本转嫁给客户，因为他们的竞争对手也必须这样做。部分是因为在20世纪中期，大多数大公司仍然专注于寻找新的方法来利用规模经济。就像初创公司合理地向AWS支付高于运行自己服务器成本的溢价一样，许多全国性大公司愿意为劳动力支付溢价。[11]\n20世纪的大公司不仅通过过度支付工会将收入从底部推高，也通过支付过少的高层管理人员薪酬将收入在顶部压低。经济学家J.K.加尔布雷斯在1967年写道：\u0026ldquo;很少有公司会建议高管薪酬已经达到最大值。\u0026quot;[12]\n在某种程度上这是一种错觉。高管的大部分实际薪酬从未出现在他们的所得税申报表上，因为它以福利形式出现。所得税税率越高，在税前支付员工薪酬的压力就越大。（在英国，税率比美国更高，公司甚至会支付他们孩子的私立学校学费。）20世纪中期大公司给员工的最有价值的东西之一是工作保障，这也没有出现在所得税申报表或收入统计中。因此这些组织中的就业性质往往产生关于经济不平等的错误低数字。但即使考虑到这一点，大公司支付给他们最好的人也比市场价格低。没有市场；预期是你会在同一家公司工作几十年，如果不是整个职业生涯的话。[13]\n你的工作如此缺乏流动性，几乎没有机会获得市场价格。但同样的缺乏流动性也鼓励你不要寻求它。如果公司承诺雇用你直到退休，并在之后给你养老金，你不想今年从中榨取尽可能多的东西。你需要照顾公司，这样公司才能照顾你。特别是当你与同一群人工作了几十年的时候。如果你试图从公司榨取更多钱，你就是在挤压将要照顾他们的组织。而且如果你不把公司放在第一位，你就不会被提升，如果你不能换梯子，在这个梯子上提升是唯一的上升方式。[14]\n对于在武装部队度过几年形成岁月的人来说，这种情况现在看起来并不像对我们那样奇怪。从他们的观点来看，作为大公司高管，他们是高级军官。他们比士兵得到的多得多。他们可以在最好的餐厅享用账户午餐，乘坐公司的湾流飞机到处飞。他们大多数人可能没有想到要问他们是否得到了市场价格。\n获得市场价格的最终方式是自己创业。这对现在任何有雄心的人来说似乎很明显。但在20世纪中期，这是一个陌生的概念。不是因为创业看起来太雄心勃勃，而是因为它看起来不够雄心勃勃。即使在20世纪70年代，我长大的时候，雄心勃勃的计划是在知名机构获得大量教育，然后加入另一个知名机构，在等级制度中逐步晋升。你的声望就是你所属于的机构的声望。人们当然创业，但受过教育的人很少这样做，因为那时实际上几乎没有什么我们现在称之为初创企业的概念：从小开始并长大的业务。这在20世纪中期要难得多。创业意味着创业从小开始并保持小规模。在大公司的时代，这通常意味着试图避免被大象踩踏。成为骑大象的管理阶级更有声望。\n到20世纪70年代，没有人停下来想知道那些大而有声望的公司最初是从哪里来的。它们似乎一直存在，就像化学元素一样。确实，在20世纪的雄心勃勃的孩子和大公司的起源之间有一双重的墙。许多大公司是整合而来的，没有明确的创始人。当它们有创始人时，创始人看起来不像我们。几乎所有的人都没有受过教育，就是没上过大学。他们是莎士比亚所说的粗鲁的机械师。大学训练一个人成为专业阶级的一员。其毕业生不期望做安德鲁·卡内基或亨利·福特开始做的那种粗活。[15]\n在20世纪，大学毕业生越来越多。他们从1900年约占总人口的2%增加到2000年的约25%。在世纪中叶，我们的两大力量以《退伍军人权利法案》的形式相交，该法案将220万二战退伍军人送入大学。很少有人这样想，但使大学成为雄心勃勃者的规范路径的结果是，一个为亨利·福特工作在社会上可以接受，但成为亨利·福特却不可以接受的世界。[16]\n我很清楚地记得这个世界。我成年时它刚开始解体。在我的童年它仍然占主导地位。不像以前那么占主导地位。我们可以从老电视节目、年鉴和成年人的行为方式看出，1950年代和60年代的人们比我们更加从众。中世纪的模型已经开始老化了。但那不是我们当时看待它的方式。我们最多会说1975年可以比1965年更大胆一些。确实，那时还没有太大变化。\n但变化即将到来。当乐高经济开始解体时，它同时以几种不同的方式解体。纵向整合的公司实际上解体了，因为更有效率。现有企业面临新的竞争对手，因为（a）市场全球化，（b）技术创新开始胜过规模经济，将规模从资产变成了负债。随着以前狭窄的消费者渠道拓宽，小公司越来越能够生存。随着全新类别的产品出现，市场本身也开始变化得更快。最后但并非最不重要的是，联邦政府之前一直对J.P.摩根的世界微笑，认为这是事物的自然状态，开始意识到它毕竟不是最终答案。\nJ.P.摩根之于横向轴线，亨利·福特之于纵向轴线。他希望自己做所有事情。他在1917年到1928年间在红河建造的巨型工厂 literally 一端吸收铁矿石，另一端送出汽车。10万人在那里工作。当时这似乎是未来。但这不是今天的汽车公司运营方式。现在大部分设计和制造发生在长长的供应链中，汽车公司最终组装和销售其产品。汽车公司这样运营的原因是因为它效果更好。供应链中的每家公司都专注于它们最了解的。它们每家都必须做好，否则可以被另一个供应商取代。\n为什么亨利·福特没有意识到合作公司网络比单一公司效果更好？一个原因是供应商网络需要一段时间才能进化。在1917年，自己做所有事情对福特来说似乎是获得他所需规模的唯一方式。第二个原因是，如果你想用合作公司网络解决问题，你必须能够协调它们的努力，而你可以用计算机做得好得多。计算机减少了科斯所说的公司存在理由的交易成本。这是一个根本性的变化。\n在20世纪初，大公司是效率的同义词。在20世纪末，它们是低效率的同义词。在某种程度上这是因为公司本身变得僵化。但也是因为我们的标准更高了。\n变化不仅发生在现有行业内部。行业本身也发生了变化。制造许多新东西成为可能，有时现有的公司不是做得最好的。\n微型计算机是典型的例子。市场由像苹果这样的新贵开创。当市场变得足够大时，IBM决定值得注意。当时IBM完全主导计算机行业。他们假设现在这个市场成熟了，他们要做的就是伸手摘取。当时的大多数人会同意他们的看法。但接下来发生的事情说明了世界变得多么复杂。IBM确实推出了微型计算机。虽然相当成功，但没有压倒苹果。但更重要的是，IBM最终被一个从侧面进入的供应商所取代——来自软件，这甚至看起来不像同样的业务。IBM最大的错误是接受DOS的非独占许可。在当时这似乎是安全的举动。没有其他计算机制造商曾经能够超过他们的销量。如果其他制造商也能提供DOS，这有什么区别？那个错误计算的结果是廉价PC克隆机的爆炸式增长。微软现在拥有PC标准，以及客户。微型计算机业务最终成为苹果对微软。\n基本上，苹果挤掉了IBM，然后微软偷了它的钱包。这种事情在中世纪的大公司身上不会发生。但未来会越来越频繁地发生。\n在计算机业务中，变化大多是自行发生的。在其他行业，必须首先消除法律障碍。许多中世纪的寡头垄断得到了联邦政府政策的批准（以及在战时的大量订单），这些政策阻止了竞争对手。这在当时对政府官员来说并不像听起来那么可疑。他们认为两党制确保了政治上足够的竞争。它也应该适用于商业。\n政府逐渐意识到反竞争政策弊大于利，在卡特政府期间开始取消它们。用于这个过程的说法是误导性地狭窄：放松管制。真正发生的是去寡头垄断化。它一个接一个地发生在行业上。消费者最明显的两个是航空旅行和长途电话服务，两者在放松管制后都变得便宜得多。\n放松管制也促成了1980年代敌意收购浪潮。在过去，公司低效率的唯一限制，除了实际破产，是其竞争对手的低效率。现在公司必须面对绝对标准而非相对标准。任何未能为其资产产生足够回报的上市公司都面临管理层被更有效率的管理层取代的风险。新管理层经常通过将公司分解成单独更有价值的部分来做到这一点。[17]\n国民经济的1.0版本由几个大块组成，它们的关系由少数高管、政治家、监管者和工会领导在密室中谈判。2.0版本是更高分辨率的：有更多的公司，更多不同的大小，制造更多不同的东西，它们的关系变化更快。在这个世界上仍然有很多密室谈判，但更多留给市场力量。这进一步加速了分化。\n在描述一个渐进过程时谈论版本有点误导，但不像看起来那么误导。几十年内有很多变化，我们最终得到的是质的不同。1958年标准普尔500指数中的公司平均已经在那里61年。到2012年，这个数字是18年。[18]\n乐高经济的解体与计算能力的普及同时发生。计算能力在多大程度上是先决条件？回答这个问题需要一本书。显然计算能力的普及是初创企业兴起的先决条件。我怀疑它也是金融领域大部分事情的先决条件。但它是全球化或LBO浪潮的先决条件吗？我不知道，但我不会排除这种可能性。再分化可能是由计算机驱动的，就像工业革命是由蒸汽机驱动的一样。无论计算机是否是先决条件，它们肯定加速了它。\n公司的新流动性改变了人们与雇主的关系。为什么要爬一个可能被从你下面抽走的公司阶梯？有雄心的人开始把职业看作不是爬单一的阶梯，而是一系列可能在不同公司的工作。公司之间更多的流动（甚至潜在的流动）在薪酬中引入了更多的竞争。此外，随着公司变小，估计员工对公司收入的贡献变得更容易。两种变化都将薪酬推向市场价格。而且由于人们在生产力上差异很大，支付市场价格意味着薪酬开始分化。\n毫不奇怪，正是在20世纪80年代初，\u0026ldquo;雅皮士\u0026quot;这个词被创造出来。这个词现在不太使用，因为它描述的现象如此理所当然，但当时它是为新奇事物的标签。雅皮士是赚很多钱的年轻专业人士。对今天二十多岁的人来说，这似乎不值得命名。年轻专业人士为什么不赚很多钱？但直到20世纪80年代，职业生涯早期薪酬过低是专业人士的一部分意义。年轻专业人士正在支付他们的会费，在阶梯上努力工作。回报稍后会来。雅皮士的新奇之处在于他们想要现在工作的市场价格。\n第一批雅皮士不为初创公司工作。那还在未来。他们也不为大公司工作。他们是法律、金融和咨询等领域的专业人士。但他们的例子迅速激励了他们的同行。一旦他们看到那辆新的宝马325i，他们也想要一个。\n在职业生涯早期支付过低只有在每个人都这样做时才有效。一旦某个雇主打破行列，其他人都必须这样做，否则他们得不到好人才。一旦开始，这个过程扩散到整个经济，因为在人们职业生涯的开始时，他们可以轻易地不仅转换雇主，而且转换行业。\n但并不是所有年轻专业人士都受益。你必须有产出才能获得高薪。第一批雅皮士在容易衡量这一点的领域工作并非巧合。\n更普遍地说，一个观点正在回归，它的名字听起来老派正是因为它长期以来如此罕见：你可以创造你的财富。像过去一样，有多种方法可以做到这一点。一些人通过创造财富致富，其他人通过玩零和游戏致富。但一旦创造财富成为可能，雄心勃勃的人必须决定是否要这样做。1990年选择物理学而非华尔街的物理学家做出了1960年物理学家不必考虑的牺牲。\n这个观点甚至流回了大公司。大公司的CEO现在比以前赚得更多，我认为很大程度上原因是因为声望。1960年，公司CEO拥有巨大的声望。他们是镇上唯一经济游戏的赢家。但如果他们现在赚得像当时一样少，以实际美元计算，与专业运动员和从初创企业和对冲基金赚数百万的奇才相比，他们看起来像小角色。他们不喜欢这个想法，所以他们现在试图尽可能多地获得，这比他们以前得到的要多。[19]\n与此同时，在经济规模的其他端发生了类似的分化。随着大公司的寡头垄断变得不那么安全，它们越来越不能将成本转嫁给客户，因此越来越不愿意为劳动力支付过高。随着由几个大块组成的乐高世界分解成许多不同大小的公司——其中一些在国外——工会越来越难以执行其垄断。结果工人的工资也趋向市场价格。这（不可避免地，如果工会在做他们的工作）趋向于更低。如果自动化减少了对某种工作的需求，可能是戏剧性的。\n就像中世纪的模型不仅产生经济凝聚力，也产生社会凝聚力一样，其解体带来了社会和经济分化。人们开始穿着和行为不同。后来被称为\u0026quot;创意阶层\u0026quot;的人变得更加流动。不太关心宗教的人感到较少为了面子而去教堂的压力，而非常喜欢它的人选择了越来越丰富多彩的形式。一些人从肉饼换成豆腐，另一些人换成热口袋。一些人从驾驶福特轿车换成驾驶小型进口车，另一些人换成驾驶SUV。上私立学校或希望上私立学校的孩子开始穿着\u0026quot;预科生\u0026rdquo;，想要看起来叛逆的孩子有意识地努力看起来不体面。在一百个方面人们分散开来。[20]\n将近四十年后，分化仍在增加。它是净好还是净坏？我不知道；这个问题可能无法回答。并不完全是坏的。我们理所当然地认为我们喜欢的分化形式，只担心我们不喜欢的那些。但作为捕捉到中世纪从众主义尾巴的人，我可以告诉你那不是乌托邦。[21]\n我在这里的目标不是说分化是好是坏，只是解释它为什么发生。随着总体战争和20世纪寡头垄断的向心力力量大部分消失，接下来会发生什么？更具体地说，是否有可能扭转我们看到的一些分化？\n如果可能，它必须零碎地发生。你不能像最初产生中世纪凝聚力那样重现它。仅仅为了引发更多的民族团结而去战争将是疯狂的。一旦你理解20世纪经济历史在某种意义上是低分辨率的1.0版本的程度，很明显你也不能重现那个。\n20世纪的凝聚力至少在某种意义上是自然发生的。战争主要是由于外部力量，乐高经济是一个进化阶段。如果你现在想要凝聚力，你必须故意诱导它。而且如何做并不明显。我怀疑我们最多能做到的是处理分化的症状。但这可能就足够了。\n人们最近最担心的分化形式是经济不平等，如果你想消除这一点，你面对的是自石器时代以来一直运作的真正强大的逆风。技术。\n技术是一个杠杆。它放大工作。杠杆不仅变得越来越长，而且其增长速度本身也在增加。\n这反过来意味着人们可以创造的财富量的差异不仅在增加，而且在加速。20世纪中期盛行的异常情况掩盖了这一基本趋势。雄心勃勃的人别无选择，只能加入大型组织，让他们与许多人步调一致——在武装部队是字面意思，在大公司是比喻意义。即使大公司想要按人们的价值比例支付他们，他们也想不到如何做到。但那个约束现在消失了。自从它在20世纪70年代开始侵蚀以来，我们看到了基本力量再次起作用。[22]\n现在不是每个富人都是通过创造财富致富的，当然。但有相当数量的人是，而鲍莫效应意味着他们所有的同行也被拖累。[23] 只要通过创造财富致富是可能的，经济不平等加剧的默认倾向就会存在。即使你消除所有其他致富方式。你可以在底部用补贴，在顶部用税收来缓解这一点，但除非税收高到足以阻止人们创造财富，否则你将永远在生产力增加的差异增加方面打一场必输的战斗。[24]\n那种分化形式，就像其他形式一样，会在这里留下来。或者更确切地说，回来留下来。没有什么是一成不变的，但分化倾向应该比大多数事物更永恒，恰恰因为它不是由于任何特定原因。它只是回归均值。当洛克菲勒说个人主义已经消失时，他在100年里都是对的。它现在回来了，而且可能会在更长的时间里保持这样。\n",
    "description": "",
    "tags": ["分化","不平等","大公司","战争","经济","社会","变革"],
    "categories": [],
    "content": "→ English Version\n再分化 2016年1月\n年老的一个好处是，你能在自己的有生之年看到变化的发生。我看到的大部分变化都是分化。美国政治比以往更加两极化。文化上，我们共同的基础越来越少。创意阶层涌向少数几个幸福的城市，抛弃了其他地方。日益加剧的经济不平等意味着贫富差距也在扩大。我想提出一个假说：所有这些趋势都是同一现象的不同实例。而且，其根本原因不是某种将我们分开的力量，而是曾经将我们凝聚在一起的力量正在侵蚀。\n更糟糕的是，对于那些担心这些趋势的人来说，曾经将我们凝聚在一起的力量是一种异常现象，是一次性情况的结合，不太可能重复——而且，我们也不希望重复。\n这两种力量是战争（尤其是第二次世界大战）和大公司的兴起。\n第二次世界大战的影响既有经济上的，也有社会上的。在经济上，它减少了收入差异。与所有现代武装力量一样，美国的军队在经济上是社会主义的。\u0026ldquo;各尽所能，按需分配\u0026rdquo;。或多或少。军队中高级成员得到的更多（正如社会主义社会中高层人员总是那样），但他们得到的是根据其级别固定的。而且这种扁平化效应并不限于军人，因为美国经济也被征召入伍。在1942年到1945年期间，所有工资都由国家战争劳工委员会设定。像军队一样，它们默认扁平化。而且这种工资的标准化如此普遍，以至于在战争结束多年后其影响仍然可见。[1]\n企业主也不应该赚钱。罗斯福说\u0026quot;不允许任何一个战争百万富翁\u0026quot;出现。为确保这一点，任何公司战前利润的增长都被征收85%的税。当公司税后收入到达个人手中时，又以93%的边际税率再次征税。[2]\n在社会方面，战争也倾向于减少差异。超过1600万来自各种不同背景的男性和女性以一种真正统一的生活方式聚集在一起。1920年代初出生男性的服兵役率接近80%。为共同目标而努力，通常在压力下，使他们更加紧密地团结在一起。\n虽然严格来说，第二次世界大战对美国来说持续了不到4年，但其影响持续了更长时间。战争使中央政府更加强大，而第二次世界大战是这种情况的极端例子。在美国，就像所有其他盟国一样，联邦政府不愿意放弃它获得的新权力。事实上，在某些方面，战争并没有在1945年结束；敌人只是变成了苏联。在税率、联邦权力、国防开支、征兵和民族主义方面，战后的几十年看起来更像战时而非战前的和平时期。[3] 社会影响也持续了。那个从西弗吉尼亚州骡队后面被征召入伍的年轻人并没有简单回到农场。有其他东西在等待着他，看起来很像军队。\n如果总体战争是20世纪重大的政治故事，那么重大的经济故事就是一种新型公司的兴起。这也倾向于产生社会和经济凝聚力。[4]\n20世纪是大型全国性公司的世纪。通用电气、通用食品、通用汽车。金融、通信、交通和制造业的发展使一种新型公司成为可能，其首要目标是规模。这个世界的1.0版本是低分辨率的：由少数几家巨头公司主导每个大市场的乐高世界。[5]\n19世纪末和20世纪初是一个整合的时代，尤其由J.P.摩根领导。成千上万家由其创始人经营的公司合并成了几百家由专业经理人经营的巨头公司。规模经济统治了那个时代。当时的人们认为这是最终状态。约翰·D·洛克菲勒在1880年说：\u0026ldquo;联合的时代已经到来并将永远存在。个人主义已经消失，再也不会回来。\u0026ldquo;事实证明他错了，但在接下来的100年里，他似乎是对的。\n19世纪末开始的整合持续了20世纪的大部分时间。到第二次世界大战结束时，正如迈克尔·林德所写，\u0026ldquo;经济的主要部门要么组织成政府支持的卡特尔，要么由少数寡头公司主导。\u0026rdquo;\n对消费者来说，这个新世界意味着到处都有同样的选择，但只有少数几种选择。我长大时，大多数东西只有2或3种选择，而且由于它们都以市场中间为目标，没有什么可以区分它们。\n这种现象最重要的例子之一是在电视领域。这里有3个选择：NBC、CBS和ABC。加上为知识分子和共产主义者准备的公共电视。3个网络提供的节目无法区分。事实上，这里有三重压力向中心靠拢。如果一个节目确实尝试了一些大胆的东西，保守市场的当地分公司会让他们停止。此外，由于电视很贵，全家人一起看同样的节目，所以它们必须适合每个人。\n而且，每个人不仅得到同样的东西，而且在同一时间得到。现在很难想象，但每天晚上数千万家庭会一起坐在电视机前，和他们的邻居一样，在同一时间看同一个节目。现在超级碗发生的事情在当时每晚都发生。我们真的是同步的。[6]\n在某种程度上，中世纪的电视文化是好的。它给出的世界观就像在儿童读物中找到的，它可能具有（父母希望的）儿童读物所具有的效果，使人们表现得更好。但是，像儿童读物一样，电视也具有误导性。对成年人来说是危险的误导。罗伯特·麦克尼尔在他的自传中谈到看到刚从越南传来的恐怖图像时想，我们不能在家人吃晚饭时给他们看这些。\n我知道共同文化是多么普 …"
  },{
    "title": "写作与演讲",
    "url": "/paul_graham/essays_zh/speak/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n写作与演讲 2012年3月\n我不是一个很好的演讲者。我经常说\u0026quot;嗯\u0026quot;。有时当我失去思路时我不得不暂停。我希望我是一个更好的演讲者。但我不像希望成为一个更好的作家那样希望成为一个更好的演讲者。我真正想要的是有好的想法，而这比成为一个好的演讲者是成为一个好作家的更大部分。\n拥有好的想法是写好文章的大部分。如果你知道你在谈论什么，你可以用最简单的词语说出来，你将被认为有好的风格。演讲则相反：拥有好的想法是成为一个好演讲者的惊人小的组成部分。\n几年前我在一个会议上第一次注意到这一点。有另一个演讲者比我好得多。他让我们所有人都哄堂大笑。相比之下，我显得笨拙和结结巴巴。之后我像往常一样把我的演讲稿放在网上。当我这样做时，我试图想象另一个人的演讲稿会是什么样子，只是那时我才意识到他没有说太多。\n这可能对一个更了解演讲的人来说是显而易见的，但对我来说，想法在演讲中比在写作中重要得多是一个启示。[1]\n几年后，我听了一个人的演讲，他不仅仅是一个比我好的演讲者，而是一个著名的演讲者。天哪，他真好。所以我决定我会密切关注他说的话，学习他是如何做到的。大约十句话后，我发现自己想\u0026quot;我不想成为一个好的演讲者\u0026quot;。\n成为一个真正好的演讲者不仅仅是与拥有好的想法正交，而且在许多方面将你推向相反的方向。例如，当我发表演讲时，我通常事先写出来。我知道那是个错误；我知道发表预写的演讲使与观众互动更难。获得观众注意力的方法是给他们你的全部注意力，而当你发表预写的演讲时，你的注意力总是在观众和演讲之间分配——即使你记住了它。如果你想与观众互动，最好只从你想说的大纲开始，即兴发挥单个句子。但如果你那样做，你可能花在思考每个句子上的时间不超过说它所需的时间。[2] 偶尔与现场观众交谈的刺激使你想起新的事情，但总的来说，这不会像写作那样产生想法，在写作中你可以在每个句子上花你想要的时间。\n如果你足够排练预写的演讲，你可以渐近地接近即兴演讲时获得的参与类型。演员就是这样做的。但这里又有一个流畅性和想法之间的权衡。你花在练习演讲上的所有时间，你可以用来使它更好。演员不面临那种诱惑，除了在他们写了剧本的罕见情况下，但任何演讲者都面临。在我发表演讲之前，通常可以发现在某个角落坐着一份打印在纸上的副本，试图在脑海中排练。但我最终总是花大部分时间重写它。我发表的每个演讲最终都是从一份充满划掉和重写的东西的手稿中发表的。这当然使我嗯得更多，因为我没有时间练习新的部分。[3]\n根据你的观众，有比这些更糟糕的权衡。观众喜欢被奉承；他们喜欢笑话；他们喜欢被有力的词语流冲昏头脑。当你降低观众的智力时，成为一个好的演讲者越来越成为一个好的吹牛者的事情。写作当然也是如此，但演讲的下降更陡峭。任何给定的人作为观众的一员都比作为读者时更笨。就像即兴演讲的演讲者只能花在思考每个句子上的时间不超过说它所需的时间一样，听演讲的人也只能花在思考每个句子上的时间不超过听它所需的时间。此外，观众中的成员总是受到周围人反应的影响，在观众中人与人之间传播的反应是不成比例的更原始类型，就像低音比高音更好地穿过墙壁一样。每个观众都是潜在的暴民，好的演讲者利用这一点。在那个会议上我在那个好演讲者的演讲中笑得这么多的部分原因是其他人都在笑。[4]\n那么演讲无用吗？作为想法的来源，它们当然不如书面文字。但那不是演讲的全部好处。当我去听演讲时，通常是因为我对演讲者感兴趣。听演讲是大多数人最接近与像总统那样没有时间与所有想见他的人单独会面的人交谈的方式。\n演讲也很善于激励我做事情。如此多著名的演讲者被描述为励志演讲者可能不是巧合。那可能是公开演讲的真正目的。那可能是它最初的目的。你用演讲能引起的情感反应可以是一股强大的力量。我希望我能说这股力量更多地用于善而不是恶，但我不确定。\n注释：\n[1] 我在这里谈论的不是学术演讲，那是不同类型的东西。虽然学术演讲的观众可能会欣赏笑话，但他们将（或至少应该）有意识地努力看到你呈现的新想法。\n[2] 那是下限。在实践中你通常可以做得更好，因为演讲通常是关于你以前写过或谈论过的事情，当你即兴发挥时，你最终重现了其中一些句子。像早期中世纪建筑一样，即兴演讲是由spolia（再利用材料）制成的。顺便说一句，这感觉有点不诚实，因为你必须传达这些句子，好像你刚刚想到它们一样。\n[3] Robert Morris指出，练习演讲有一种方式可以使它们更好：大声朗读演讲可以暴露笨拙的部分。我同意，事实上，我因此至少大声朗读一次我写的大部分东西。\n[4] 对于足够小的观众，成为观众的一员使人变笨可能不成立。真正的下降似乎是在观众太大，演讲感觉不像对话时开始的——大约10人左右。\n感谢Sam Altman和Robert Morris阅读草稿。\n",
    "description": "",
    "tags": ["演讲","写作","沟通","想法","公开演讲","修辞","教育"],
    "categories": [],
    "content": "→ English Version\n写作与演讲 2012年3月\n我不是一个很好的演讲者。我经常说\u0026quot;嗯\u0026quot;。有时当我失去思路时我不得不暂停。我希望我是一个更好的演讲者。但我不像希望成为一个更好的作家那样希望成为一个更好的演讲者。我真正想要的是有好的想法，而这比成为一个好的演讲者是成为一个好作家的更大部分。\n拥有好的想法是写好文章的大部分。如果你知道你在谈论什么，你可以用最简单的词语说出来，你将被认为有好的风格。演讲则相反：拥有好的想法是成为一个好演讲者的惊人小的组成部分。\n几年前我在一个会议上第一次注意到这一点。有另一个演讲者比我好得多。他让我们所有人都哄堂大笑。相比之下，我显得笨拙和结结巴巴。之后我像往常一样把我的演讲稿放在网上。当我这样做时，我试图想象另一个人的演讲稿会是什么样子，只是那时我才意识到他没有说太多。\n这可能对一个更了解演讲的人来说是显而易见的，但对我来说，想法在演讲中比在写作中重要得多是一个启示。[1]\n几年后，我听了一个人的演讲，他不仅仅是一个比我好的演讲者，而是一个著名的演讲者。天哪，他真好。所以我决定我会密切关注他说的话，学习他是如何做到的。大约十句话后，我发现自己想\u0026quot;我不想成为一个好的演讲者\u0026quot;。\n成为一个真正好的演讲者不仅仅是与拥有好的想法正交，而且在许多方面将你推向相反的方向。例如，当我发表演讲时，我通常事先写出来。我知道那是个错误；我知道发表预写的演讲使与观众互动更难。获得观众注意力的方法是给他们你的全部注意力，而当你发表预写的演讲时，你的注意力总是在观众和演讲之间分配——即使你记住了它。如果你想与观众互动，最好只从你想说的大纲开始，即兴发挥单个句子。但如果你那样做，你可能花在思考每个句子上的时间不超过说它所需的时间。[2] 偶尔与现场观众交谈的刺激使你想起新的事情，但总的来说，这不会像写作那样产生想法，在写作中你可以在每个句子上花你想要的时间。\n如果你足够排练预写的演讲，你可以渐近地接近即兴演讲时获得的参与类型。演员就是这样做的。但这里又有一个流畅性和想法之间的权衡。你花在练习演讲上的所有时间，你可以用来使它更好。演员不面临那种诱惑，除了在他们写了剧本的罕见情况下，但任何演讲者都面临。在我发表演讲之前，通常可以发现在某个角落坐着一份打印在纸上的副本，试图在脑海中排练。但我最终总是花大部分时间重写它。我发表的每个演讲最终都是从一份充满划掉和重写的东西的手稿中发表的。这当然使我嗯得更多，因为我没有时间练习新的部分。[3]\n根据你的观众，有比这些更糟糕的权衡。观众喜欢被奉承；他们喜欢笑话；他们喜欢被有力的词语流冲昏头脑。当你降低观众的智力时，成为一个好的演讲者越来越成为一个好的吹牛者的事情。写作当然也是如此，但演讲的下降更陡峭。任何给定的人作为观众的一员都比作为读者时更笨。就像即兴演讲的演讲者只能花在思考每个句子上的时间不超过说它所需的时间一样，听演讲的人也只能花在思考每个句子上的时间不超过听它所需的时间。此外，观众中的成员总是受到周围人反应的影响，在观众中人与人之间传播的反应是不成比例的更原始类型，就像低音比高音更好地穿过墙壁一样。每个观众都是潜在的暴民，好的演讲者利用这一点。在那个会议上我在那个好演讲者的演讲中笑得这么多的部分原因是其他人都在笑。[4]\n那么演讲无用吗？作为想法的来源，它们当然不如书面文字。但那不是演讲的全部好处。当我去听演讲时，通常是因为我对演讲者感兴趣。听演讲是大多数人最接近与像总统那样没有时间与所有想见他的人单独会面的人交谈的方式。\n演讲也很善于激励我做事情。如此多著名的演讲者被描述为励志演讲者可能不是巧合。那可能是公开演讲的真正目的。那可能是它最初的目的。你用演讲能引起的情感反应可以是一股强大的力量。我希望我能说这股力量更多地用于善而不是恶，但我不确定。\n注释：\n[1] 我在这里谈论的不是学术演讲，那是不同类型的东西。虽然学术演讲的观众可能会欣赏笑话，但他们将（或至少应该）有意识地努力看到你呈现的新想法。\n[2] 那是下限。在实践中你通常可以做得更好，因为演讲通常是关于你以前写过或谈论过的事情，当你即兴发挥时，你最终重现了其中一些句子。像早期中世纪建筑一样，即兴演讲是由spolia（再利用材料）制成的。顺便说一句，这感觉有点不诚实，因为你必须传达这些句子，好像你刚刚想到它们一样。\n[3] Robert Morris指出，练习演讲有一种方式可以使它们更好：大声朗读演讲可以暴露笨拙的部分。我同意，事实上，我因此至少大声朗读一次我写的大部分东西。\n[4] 对于足够小的观众，成为观众的一员使人变笨可能不成立。真正的下降似乎是在观众太大，演讲感觉不像对话时开始的——大约10人左右。\n感谢Sam Altman和Robert Morris阅读草稿。\n"
  },{
    "title": "写作简述",
    "url": "/paul_graham/essays_zh/writing44/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n写作简述 2005年3月\n（在回答一封邮件的过程中，我意外地写了一篇关于写作的短文。我通常在一篇文章上花费数周时间。这篇花了67分钟——23分钟写作，44分钟修改。）\n我认为写好文章比大多数人意识到的重要得多。写作不仅仅是交流思想；它还产生思想。如果你不擅长写作且不喜欢做，你将错过写作本会产生的大部分思想。\n至于如何写好文章，这里是简短版本：尽快写出糟糕的第一版；一遍又一遍地重写；删除一切不必要的内容；用对话的语气写作；培养对糟糕写作的嗅觉，这样你就能看到并修复你自己的；模仿你喜欢的作家；如果无法开始，告诉某人你计划写什么，然后写下你所说的；期望文章中80%的思想在你开始写作后出现，而你开始时50%的思想是错误的；有足够的信心进行删减；让你信任的朋友阅读你的东西并告诉你哪些部分令人困惑或拖沓；不要（总是）制作详细的大纲；在写作前花几天时间思考想法；随身携带小笔记本或废纸；想到第一句话时就开始写作；如果截止日期迫使你在此之前开始，只说出最重要的句子；写你喜欢的东西；不要试图听起来令人印象深刻；不要犹豫地随时改变主题；使用脚注来包含离题；使用首语重复法将句子连接在一起；大声朗读你的文章，看看（a）你在哪些笨拙的短语上绊倒，（b）哪些部分令人厌烦（你害怕阅读的段落）；努力告诉读者一些新的和有用的东西；在相当大的时间量内工作；重新开始时，从重读你到目前为止的内容开始；完成时，给自己留下一些容易开始的东西；在文件底部累积你计划涵盖的主题的笔记；不要觉得有义务涵盖任何主题；为不会像你一样仔细阅读文章的读者写作，就像流行歌曲被设计成在糟糕的汽车收音机上听起来不错一样；如果说错了任何话，立即修复；问朋友哪句话你会最后悔；回去缓和尖锐的评论；在线发布东西，因为观众让你写得更多，从而产生更多思想；打印出草稿而不只是在屏幕上看；使用简单的、日耳曼语的词；学会区分惊喜和离题；学会识别结尾的临近，当一个出现时，抓住它。\n",
    "description": "",
    "tags": ["写作","建议","技巧","过程","创意"],
    "categories": [],
    "content": "→ English Version\n写作简述 2005年3月\n（在回答一封邮件的过程中，我意外地写了一篇关于写作的短文。我通常在一篇文章上花费数周时间。这篇花了67分钟——23分钟写作，44分钟修改。）\n我认为写好文章比大多数人意识到的重要得多。写作不仅仅是交流思想；它还产生思想。如果你不擅长写作且不喜欢做，你将错过写作本会产生的大部分思想。\n至于如何写好文章，这里是简短版本：尽快写出糟糕的第一版；一遍又一遍地重写；删除一切不必要的内容；用对话的语气写作；培养对糟糕写作的嗅觉，这样你就能看到并修复你自己的；模仿你喜欢的作家；如果无法开始，告诉某人你计划写什么，然后写下你所说的；期望文章中80%的思想在你开始写作后出现，而你开始时50%的思想是错误的；有足够的信心进行删减；让你信任的朋友阅读你的东西并告诉你哪些部分令人困惑或拖沓；不要（总是）制作详细的大纲；在写作前花几天时间思考想法；随身携带小笔记本或废纸；想到第一句话时就开始写作；如果截止日期迫使你在此之前开始，只说出最重要的句子；写你喜欢的东西；不要试图听起来令人印象深刻；不要犹豫地随时改变主题；使用脚注来包含离题；使用首语重复法将句子连接在一起；大声朗读你的文章，看看（a）你在哪些笨拙的短语上绊倒，（b）哪些部分令人厌烦（你害怕阅读的段落）；努力告诉读者一些新的和有用的东西；在相当大的时间量内工作；重新开始时，从重读你到目前为止的内容开始；完成时，给自己留下一些容易开始的东西；在文件底部累积你计划涵盖的主题的笔记；不要觉得有义务涵盖任何主题；为不会像你一样仔细阅读文章的读者写作，就像流行歌曲被设计成在糟糕的汽车收音机上听起来不错一样；如果说错了任何话，立即修复；问朋友哪句话你会最后悔；回去缓和尖锐的评论；在线发布东西，因为观众让你写得更多，从而产生更多思想；打印出草稿而不只是在屏幕上看；使用简单的、日耳曼语的词；学会区分惊喜和离题；学会识别结尾的临近，当一个出现时，抓住它。\n"
  },{
    "title": "冠状病毒与信誉",
    "url": "/paul_graham/essays_zh/cred/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n冠状病毒与信誉 2020年4月\n我最近看到一段视频，电视记者和政治家们自信地说冠状病毒不会比流感更严重。让我感到震惊的不仅是他们看起来多么错误，还有他们多么大胆。他们怎么能放心地说这样的话？\n答案，我意识到，是他们不认为自己会被抓住。他们没有意识到做出错误预测有任何危险。这些人不断地做出错误的预测，并逃脱了惩罚，因为他们预测的事情要么结果足够模糊，他们可以吹嘘自己摆脱麻烦，要么发生在如此遥远的未来，很少有人记得他们说了什么。\n流行病不同。它迅速且明确地否定你的预测。\n但流行病足够罕见，这些人显然没有意识到这甚至是一种可能性。相反，他们只是继续使用他们的普通方法，正如流行病所表明的，就是自信地谈论他们不理解的事情。\n因此，这样的事件是衡量人的独特有力方式。正如沃伦·巴菲特所说，\u0026ldquo;只有当潮水退去时，你才知道谁在裸泳。\u0026ldquo;而潮水从未如此退去过。\n既然我们已经看到了结果，让我们记住我们所看到的，因为这是我们可能拥有的最准确的信誉测试。我希望如此。\n",
    "description": "",
    "tags": ["信誉","冠状病毒","预测","媒体","政治","专业知识","信任","分析"],
    "categories": [],
    "content": "→ English Version\n冠状病毒与信誉 2020年4月\n我最近看到一段视频，电视记者和政治家们自信地说冠状病毒不会比流感更严重。让我感到震惊的不仅是他们看起来多么错误，还有他们多么大胆。他们怎么能放心地说这样的话？\n答案，我意识到，是他们不认为自己会被抓住。他们没有意识到做出错误预测有任何危险。这些人不断地做出错误的预测，并逃脱了惩罚，因为他们预测的事情要么结果足够模糊，他们可以吹嘘自己摆脱麻烦，要么发生在如此遥远的未来，很少有人记得他们说了什么。\n流行病不同。它迅速且明确地否定你的预测。\n但流行病足够罕见，这些人显然没有意识到这甚至是一种可能性。相反，他们只是继续使用他们的普通方法，正如流行病所表明的，就是自信地谈论他们不理解的事情。\n因此，这样的事件是衡量人的独特有力方式。正如沃伦·巴菲特所说，\u0026ldquo;只有当潮水退去时，你才知道谁在裸泳。\u0026ldquo;而潮水从未如此退去过。\n既然我们已经看到了结果，让我们记住我们所看到的，因为这是我们可能拥有的最准确的信誉测试。我希望如此。\n"
  },{
    "title": "决心的剖析",
    "url": "/paul_graham/essays_zh/determination/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n决心的剖析 2009年9月\n像所有投资者一样，我们花大量时间试图学习如何预测哪些创业公司会成功。我们可能比大多数投资者花更多时间思考这个问题，因为我们投资最早。预测通常是我们所能依靠的一切。\n我们很快学到的最重要成功预测因素是决心。起初我们以为可能是智力。每个人都喜欢相信那是创业公司成功的原因。公司成功是因为创始人如此聪明，这是一个更好的故事。传播这些故事的公关人员和记者可能自己都相信。但虽然聪明肯定有帮助，但它不是决定性因素。有很多人和比尔·盖茨一样聪明，却一事无成。\n在大多数领域，与决心相比，天赋被高估了——部分是因为它构成更好的故事，部分是因为它给旁观者提供了懒惰的借口，部分是因为一段时间后决心开始看起来像天赋。\n我想不出有任何领域决心被高估了，但决心和天赋的相对重要性确实可能有所不同。在更纯粹的工作类型中，天赋可能更重要，因为这类工作主要是解决单一类型的问题而不是许多不同类型的问题。我怀疑决心在数学中不会像在有组织犯罪中那样让你走得那么远。\n我通过这个比较并不意味着更多地依赖天赋的工作类型总是更令人钦佩。大多数人会同意擅长数学比记忆长串数字更令人钦佩，尽管后者更多地依赖自然能力。\n也许人们相信创业创始人通过更聪明而获胜的一个原因是，在技术创业公司中，智力确实比早期类型的公司更重要。要主导互联网搜索，你可能确实需要比主导铁路、酒店或报纸时更聪明一点。这可能是一个持续的趋势。但即使在最高科技产业中，成功仍然更多地依赖于决心而不是智力。\n如果决心如此重要，我们能分离出它的组成部分吗？有些比其他更重要吗？有些可以培养吗？\n决心的最简单形式是纯粹的意志力。当你想要某样东西时，你必须拥有它，无论如何。\n很大一部分意志力必须是天生的，因为常见的家庭情况是，一个兄弟姐妹比另一个拥有更多的意志力。环境可以改变它，但在高端，天性似乎比养育更重要。糟糕的环境可能击垮意志坚强的人的精神，但我认为你无法让意志薄弱的人变得更坚强。\n然而，仅意志坚强是不够的。你还必须对自己严格要求。意志坚强但自我放纵的人不会被称作有决心。决心意味着你的意志力被自律所平衡。\n平衡这个词很重要。你越有意志力，你就必须越自律。你的意志越强，除了你自己之外，越没有人能够与你争论。必须有人与你争论，因为每个人都有基本的冲动，如果你的意志多于自律，你就会屈服于它们，最终停留在局部最大化，如药物成瘾。\n我们可以想象意志和自律像两个手指挤压一颗滑溜的西瓜子。他们挤压得越用力，种子飞得越远，但他们必须同等用力挤压，否则种子就会向侧面旋转。\n如果这是真的，它就有有趣的含义，因为自律可以培养，并且实际上在个人生命过程中确实倾向于有很大变化。如果决心实际上是意志和自律的产物，那么通过更加自律，你可以变得更有决心。[1]\n西瓜子模型的另一个后果是，你越有意志力，缺乏自律就越危险。似乎有很多例子证实了这一点。在一些精力非常充沛的人的生活中，你会看到类似机翼颤振的情况，他们在做伟大的工作和完全不做任何事情之间交替。从外部看，这很像双相情感障碍。\n然而，西瓜子模型至少在一个方面不准确：它是静态的。实际上，缺乏自律的危险随着诱惑而增加。这意味着有趣的是，决心倾向于侵蚀自身。如果你足够决心成就伟大事业，这可能会增加你周围的诱惑数量。除非你按比例变得更加自律，否则意志力将占据上风，你的成就将回归平均水平。\n这就是为什么莎士比亚的凯撒认为瘦人如此危险。他们不受权力次要好处的诱惑。\n西瓜子模型意味着可能过于自律。是这样吗？我认为可能有人的意志力被过度的自律压垮，如果他们不对自己那么苛刻，可能会取得更多成就。年轻人有时在老年人失败的地方成功的原因之一是他们没有意识到自己多么无能。这让他们能够进行一种赤字支出。当他们刚开始做某事时，他们高估了自己的成就。但这给了他们继续工作的信心，他们的表现提高了。而眼光更清晰的人会看到他们最初的无能，并可能因继续而气馁。\n决心的另一个主要组成部分是野心。如果意志力和自律让你到达目的地，野心就是你如何选择目的地。\n我不确定说野心是决心的组成部分是否完全正确，但它们并非完全正交。如果有人说他们非常有决心去做一件极其容易的事情，这似乎是用词不当。\n幸运的是，野心似乎相当可塑；你可以做很多事情来增加它。大多数人不知道应该有多大野心，特别是当他们年轻的时候。他们不知道什么是困难的，也不知道自己有能力做什么。这个问题因同龄人少而加剧。有野心的人很少见，所以如果每个人都随机混合在一起，就像人们生命早期那样，那么有野心的人就不会有很多有野心的同龄人。当你把这样的人和其他有野心的人放在一起时，他们会像得到水的濒死植物一样绽放。可能大多数有野心的人都渴望从有野心的同龄人那里得到的那种鼓励，无论他们年龄多大。[2]\n成就也倾向于增加你的野心。每一步你都获得信心，下次可以伸展得更远。\n所以总而言之，决心似乎是这样运作的：它包括由意志力平衡的自律，由野心引导。幸运的是，这三个品质中至少有两个可以培养。你可能能够增加一些意志力；你绝对可以学习自律；而几乎每个人在野心方面都几乎是营养不良的。\n我觉得我现在对决心有了更好的理解。但只是一点点：意志力、自律和野心都是几乎和决心本身一样复杂的概念。[3]\n还要注意，决心和天赋并不是全部。成就还有第三个因素：你多么喜欢这份工作。如果你真的喜欢做某事，你不需要决心来驱动你；这是你无论如何都会做的事情。但大多数类型的工作都有人不喜欢的方面，因为大多数类型的工作包括为他人做事，而他们的需求所强加的任务不太可能恰好与你想做的事情一致。\n确实，如果你想创造最多的财富，方法就是更多地关注他们的需求而不是你的兴趣，并用决心来弥补差异。\n注释 [1] 宽松地说。我声称西瓜子模型更像是决心与wd^m - k|w - d|^n成正比，其中w是意志，d是自律。\n[2] 这意味着帮助社会的一个最佳方式是创造将有野心的人聚集在一起的活动和机构。这就像从反应堆中抽出控制棒：他们发出的能量鼓励其他有野心的人，而不是被他们通常围绕的正常人吸收。\n相反，像一些欧洲国家那样，试图确保你的大学中没有一所显著优于其他大学，可能是一个错误。\n[3] 例如，意志力显然有两个子组成部分：顽固和精力。仅有第一个产生顽固不前的人。仅有第二个产生轻浮的人。当有意志力的人变老或以其他方式失去精力时，他们倾向于变得仅仅是顽固。\n感谢Sam Altman、Jessica Livingston和Robert Morris阅读本文的草稿。\n相关链接：\n意大利语翻译 葡萄牙语翻译 俄语翻译 ",
    "description": "",
    "tags": ["决心","意志力","自律","野心","创业公司","成功","心理学","成就"],
    "categories": [],
    "content": "→ English Version\n决心的剖析 2009年9月\n像所有投资者一样，我们花大量时间试图学习如何预测哪些创业公司会成功。我们可能比大多数投资者花更多时间思考这个问题，因为我们投资最早。预测通常是我们所能依靠的一切。\n我们很快学到的最重要成功预测因素是决心。起初我们以为可能是智力。每个人都喜欢相信那是创业公司成功的原因。公司成功是因为创始人如此聪明，这是一个更好的故事。传播这些故事的公关人员和记者可能自己都相信。但虽然聪明肯定有帮助，但它不是决定性因素。有很多人和比尔·盖茨一样聪明，却一事无成。\n在大多数领域，与决心相比，天赋被高估了——部分是因为它构成更好的故事，部分是因为它给旁观者提供了懒惰的借口，部分是因为一段时间后决心开始看起来像天赋。\n我想不出有任何领域决心被高估了，但决心和天赋的相对重要性确实可能有所不同。在更纯粹的工作类型中，天赋可能更重要，因为这类工作主要是解决单一类型的问题而不是许多不同类型的问题。我怀疑决心在数学中不会像在有组织犯罪中那样让你走得那么远。\n我通过这个比较并不意味着更多地依赖天赋的工作类型总是更令人钦佩。大多数人会同意擅长数学比记忆长串数字更令人钦佩，尽管后者更多地依赖自然能力。\n也许人们相信创业创始人通过更聪明而获胜的一个原因是，在技术创业公司中，智力确实比早期类型的公司更重要。要主导互联网搜索，你可能确实需要比主导铁路、酒店或报纸时更聪明一点。这可能是一个持续的趋势。但即使在最高科技产业中，成功仍然更多地依赖于决心而不是智力。\n如果决心如此重要，我们能分离出它的组成部分吗？有些比其他更重要吗？有些可以培养吗？\n决心的最简单形式是纯粹的意志力。当你想要某样东西时，你必须拥有它，无论如何。\n很大一部分意志力必须是天生的，因为常见的家庭情况是，一个兄弟姐妹比另一个拥有更多的意志力。环境可以改变它，但在高端，天性似乎比养育更重要。糟糕的环境可能击垮意志坚强的人的精神，但我认为你无法让意志薄弱的人变得更坚强。\n然而，仅意志坚强是不够的。你还必须对自己严格要求。意志坚强但自我放纵的人不会被称作有决心。决心意味着你的意志力被自律所平衡。\n平衡这个词很重要。你越有意志力，你就必须越自律。你的意志越强，除了你自己之外，越没有人能够与你争论。必须有人与你争论，因为每个人都有基本的冲动，如果你的意志多于自律，你就会屈服于它们，最终停留在局部最大化，如药物成瘾。\n我们可以想象意志和自律像两个手指挤压一颗滑溜的西瓜子。他们挤压得越用力，种子飞得越远，但他们必须同等用力挤压，否则种子就会向侧面旋转。\n如果这是真的，它就有有趣的含义，因为自律可以培养，并且实际上在个人生命过程中确实倾向于有很大变化。如果决心实际上是意志和自律的产物，那么通过更加自律，你可以变得更有决心。[1]\n西瓜子模型的另一个后果是，你越有意志力，缺乏自律就越危险。似乎有很多例子证实了这一点。在一些精力非常充沛的人的生活中，你会看到类似机翼颤振的情况，他们在做伟大的工作和完全不做任何事情之间交替。从外部看，这很像双相情感障碍。\n然而，西瓜子模型至少在一个方面不准确：它是静态的。实际上，缺乏自律的危险随着诱惑而增加。这意味着有趣的是，决心倾向于侵蚀自身。如果你足够决心成就伟大事业，这可能会增加你周围的诱惑数量。除非你按比例变得更加自律，否则意志力将占据上风，你的成就将回归平均水平。\n这就是为什么莎士比亚的凯撒认为瘦人如此危险。他们不受权力次要好处的诱惑。\n西瓜子模型意味着可能过于自律。是这样吗？我认为可能有人的意志力被过度的自律压垮，如果他们不对自己那么苛刻，可能会取得更多成就。年轻人有时在老年人失败的地方成功的原因之一是他们没有意识到自己多么无能。这让他们能够进行一种赤字支出。当他们刚开始做某事时，他们高估了自己的成就。但这给了他们继续工作的信心，他们的表现提高了。而眼光更清晰的人会看到他们最初的无能，并可能因继续而气馁。\n决心的另一个主要组成部分是野心。如果意志力和自律让你到达目的地，野心就是你如何选择目的地。\n我不确定说野心是决心的组成部分是否完全正确，但它们并非完全正交。如果有人说他们非常有决心去做一件极其容易的事情，这似乎是用词不当。\n幸运的是，野心似乎相当可塑；你可以做很多事情来增加它。大多数人不知道应该有多大野心，特别是当他们年轻的时候。他们不知道什么是困难的，也不知道自己有能力做什么。这个问题因同龄人少而加剧。有野心的人很少见，所以如果每个人都随机混合在一起，就像人们生命早期那样，那么有野心的人就不会有很多有野心的同龄人。当你把这样的人和其他有野心的人放在一起时，他们会像得到水的濒死植物一样绽放。可能大多数有野心的人都渴望从有野心的同龄人那里得到的那种鼓励，无论他们年龄多大。[2]\n成就也倾向于增加你的野心。每一步你都获得信 …"
  },{
    "title": "凯特在硅谷看到的",
    "url": "/paul_graham/essays_zh/kate/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n凯特在硅谷看到的 2009年8月\n凯特·库尔托是设计Y Combinator办公室的建筑师。最近我们成功招募她在建筑项目不忙时帮助我们运营YC。虽然她从一开始就听说了很多关于YC的事情，但过去9个月是完全沉浸其中。\n我在创业世界待了这么久，以至于它对我来说似乎很正常，所以我很好奇听到什么最让她惊讶。这是她的清单：\n有多少创业公司失败。 凯特原则上知道创业公司风险很大，但她惊讶地看到失败的威胁是多么持续——不仅对于小鱼，甚至对于那些创始人来YC晚餐演讲的著名创业公司也是如此。\n创业公司的想法变化多大。 像往常一样，到演示日时，大约一半的创业公司做的事情与他们开始时有显著不同。我们鼓励这样做。创办创业公司就像科学一样，你必须追随真理无论它导向哪里。在世界其他地方，人们不确定想要做什么不会开始事情，一旦开始，他们倾向于继续在初始路径上，即使它是错误的。\n创办创业公司需要多么少的钱。 在凯特的世界里，一切都是物质的和昂贵的。你几乎无法用创办创业公司的成本翻新一个浴室。\n创始人多么顽强。 那是她的原话。我同意她，但在她提到这一点之前，我从未意识到这种品质在世界其他大多数地方多么不被欣赏。在大多数组织中，称某人为顽强不会是赞美。\n这意味着什么，确切地说？它基本上是好斗的小形式。一个顽强的人设法同时既有威胁性又不失尊严。在我看来，这正是一个人在任何类型的工作中想要成为的样子。如果你没有威胁性，你可能没有在做任何新事情，而尊严只是一种装饰。\n硅谷多么技术饱和。 \u0026ldquo;似乎这里的每个人都在这个行业。\u0026ldquo;这不完全是事实，但硅谷和其他地方有质的区别。你倾向于降低声音，因为旁边桌子的人很可能认识你正在谈论的一些人。我在波士顿从未有过这种感觉。好消息是，旁边桌子的人也有可能在某种程度上帮助你。\nYC的演讲者在建议上如此一致。 实际上，我也注意到了这一点。我总是担心演讲者会通过告诉我们创业公司的事情来让我们处于尴尬位置，但这很少发生。\n当我问她记得演讲者总是说的具体事情时，她提到：成功的方法是快速推出一些东西，倾听用户，然后迭代；创业公司需要韧性，因为它们总是情绪过山车；大多数风险投资家是羊。\n我对演讲者多么一贯地倡导快速推出和迭代印象深刻。这是10年前的逆向建议，但现在显然是既定做法。\n成功的创业公司创始人多么随意。 硅谷大多数著名创始人是你在街上会忽略的人。不仅仅是他们不打扮。他们也没有投射任何权力光环。\u0026ldquo;他们不试图给任何人留下印象。\u0026rdquo;\n有趣的是，虽然凯特说她永远无法挑选出成功的创始人，但她能认出风险投资家，既通过他们的穿着方式，也通过他们的举止。\n对创始人来说有可以询问建议的人多么重要。 （我发誓我没有提示这一点。）没有建议\u0026quot;他们会有点迷失。\u0026ldquo;幸运的是，有很多人帮助他们。YC内有帮助其他YC资助创业公司的强大传统。但我们没有发明这个想法：它只是现有硅谷文化的稍微浓缩形式。\n创业公司多么孤独的任务。 建筑师不断地与他人面对面互动，而做技术创业公司，至少，需要长时间不间断的工作时间。\u0026ldquo;你可以在盒子里做。\u0026rdquo;\n通过倒置这个清单，我们可以得到\u0026quot;正常\u0026quot;世界的肖像。它充满了人们彼此交谈很多，他们缓慢但和谐地在保守的、昂贵的项目上工作，这些项目的目的地预先决定，他们仔细调整自己的方式以反映他们在等级制度中的位置。\n这也是对过去的相当准确的描述。所以创业文化可能不仅仅以你期望任何亚文化不同的方式不同，而是一个领先指标。\n日语翻译\n",
    "description": "",
    "tags": ["硅谷","创业文化","观察","y_combinator","创始人","风险投资","创新"],
    "categories": [],
    "content": "→ English Version\n凯特在硅谷看到的 2009年8月\n凯特·库尔托是设计Y Combinator办公室的建筑师。最近我们成功招募她在建筑项目不忙时帮助我们运营YC。虽然她从一开始就听说了很多关于YC的事情，但过去9个月是完全沉浸其中。\n我在创业世界待了这么久，以至于它对我来说似乎很正常，所以我很好奇听到什么最让她惊讶。这是她的清单：\n有多少创业公司失败。 凯特原则上知道创业公司风险很大，但她惊讶地看到失败的威胁是多么持续——不仅对于小鱼，甚至对于那些创始人来YC晚餐演讲的著名创业公司也是如此。\n创业公司的想法变化多大。 像往常一样，到演示日时，大约一半的创业公司做的事情与他们开始时有显著不同。我们鼓励这样做。创办创业公司就像科学一样，你必须追随真理无论它导向哪里。在世界其他地方，人们不确定想要做什么不会开始事情，一旦开始，他们倾向于继续在初始路径上，即使它是错误的。\n创办创业公司需要多么少的钱。 在凯特的世界里，一切都是物质的和昂贵的。你几乎无法用创办创业公司的成本翻新一个浴室。\n创始人多么顽强。 那是她的原话。我同意她，但在她提到这一点之前，我从未意识到这种品质在世界其他大多数地方多么不被欣赏。在大多数组织中，称某人为顽强不会是赞美。\n这意味着什么，确切地说？它基本上是好斗的小形式。一个顽强的人设法同时既有威胁性又不失尊严。在我看来，这正是一个人在任何类型的工作中想要成为的样子。如果你没有威胁性，你可能没有在做任何新事情，而尊严只是一种装饰。\n硅谷多么技术饱和。 \u0026ldquo;似乎这里的每个人都在这个行业。\u0026ldquo;这不完全是事实，但硅谷和其他地方有质的区别。你倾向于降低声音，因为旁边桌子的人很可能认识你正在谈论的一些人。我在波士顿从未有过这种感觉。好消息是，旁边桌子的人也有可能在某种程度上帮助你。\nYC的演讲者在建议上如此一致。 实际上，我也注意到了这一点。我总是担心演讲者会通过告诉我们创业公司的事情来让我们处于尴尬位置，但这很少发生。\n当我问她记得演讲者总是说的具体事情时，她提到：成功的方法是快速推出一些东西，倾听用户，然后迭代；创业公司需要韧性，因为它们总是情绪过山车；大多数风险投资家是羊。\n我对演讲者多么一贯地倡导快速推出和迭代印象深刻。这是10年前的逆向建议，但现在显然是既定做法。\n成功的创业公司创始人多么随意。 硅谷大多数著名创始人是你在街上会忽略的人。不仅仅是他们不打扮。他们也没有投射任何权力光环。\u0026ldquo;他们不试图给任何人留下印象。\u0026rdquo;\n有趣的是，虽然凯特说她永远无法挑选出成功的创始人，但她能认出风险投资家，既通过他们的穿着方式，也通过他们的举止。\n对创始人来说有可以询问建议的人多么重要。 （我发誓我没有提示这一点。）没有建议\u0026quot;他们会有点迷失。\u0026ldquo;幸运的是，有很多人帮助他们。YC内有帮助其他YC资助创业公司的强大传统。但我们没有发明这个想法：它只是现有硅谷文化的稍微浓缩形式。\n创业公司多么孤独的任务。 建筑师不断地与他人面对面互动，而做技术创业公司，至少，需要长时间不间断的工作时间。\u0026ldquo;你可以在盒子里做。\u0026rdquo;\n通过倒置这个清单，我们可以得到\u0026quot;正常\u0026quot;世界的肖像。它充满了人们彼此交谈很多，他们缓慢但和谐地在保守的、昂贵的项目上工作，这些项目的目的地预先决定，他们仔细调整自己的方式以反映他们在等级制度中的位置。\n这也是对过去的相当准确的描述。所以创业文化可能不仅仅以你期望任何亚文化不同的方式不同，而是一个领先指标。\n日语翻译\n"
  },{
    "title": "分心",
    "url": "/paul_graham/essays_zh/distraction/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n分心 2008年5月\n断开分心说明：本文结尾描述的策略没有奏效。它会工作一段时间，然后我会逐渐发现自己在工作电脑上使用互联网。我现在正在尝试其他策略，但我想这次我会等到确定它们有效之后再写。\n拖延症依赖分心而存在。大多数人发现只是坐着什么都不做很不舒服；你通过做其他事情来避免工作。\n因此，克服拖延症的一种方法是让它缺少分心。但这并不像听起来那么简单，因为有人努力让你分心。分心不是你避免的静态障碍，就像你可能避免路上的岩石一样。分心会主动找到你。\n切斯特菲尔德将污垢描述为错位的物质。同样，分心是在错误时间出现的有吸引力的事物。技术不断被改进以产生越来越多有吸引力的事物。这意味着当我们学会避免一类分心时，新的分心会不断出现，就像耐药细菌一样。\n例如，电视经过50年的改进，已经达到了视觉鸦片的程度。我13岁时就意识到电视会上瘾，所以我停止观看。但我最近读到，美国人平均每天看4小时电视。他们生命的四分之一。\n现在电视正在衰落，但只是因为人们找到了更令人上瘾的浪费时间方式。特别危险的是，许多发生在你的电脑上。这并非偶然。越来越多的办公室职员坐在连接到互联网的电脑前，而分心总是向拖延者进化。\n我记得当电脑至少对我来说 exclusively 用于工作时。我偶尔会拨号服务器获取邮件或ftp文件，但大部分时间我都是离线的。我只能做的是写作和编程。现在我感觉好像有人偷偷把电视放到了我的桌子上。非常令人上瘾的东西只需点击一下即可。在工作中遇到障碍？嗯，我想知道网上有什么新鲜事。最好检查一下。\n在多年仔细避免像电视、游戏和Usenet这样的经典时间消耗者之后，我仍然成为分心的牺牲品，因为我没有意识到它会进化。曾经安全的东西，使用互联网，逐渐变得越来越危险。有些天我醒来，喝杯茶，查看新闻，然后检查邮件，然后再次查看新闻，然后回复几封邮件，然后突然发现快到午饭时间了，我还没有完成任何真正的工作。而且这种情况开始越来越多地发生。\n我花了很长的时间才意识到互联网变得多么令人分心，因为问题是间歇性的。我忽略了它，就像你让自己忽略一个只间歇性出现的错误一样。当我在项目中间时，分心并不是真正的问题。当我完成一个项目并决定下一步做什么时，它们总是会咬我。\n很难注意到这种新型分心的危险的另一个原因是社会习俗还没有赶上它。如果我在沙发上坐了一整个上午看电视，我会很快注意到。这是一个已知的危险信号，就像独自喝酒一样。但使用互联网看起来和感觉上仍然很像工作。\n然而，最终很明显互联网变得如此令人分心，以至于我必须开始以不同的方式对待它。基本上，我必须在我的已知时间消耗者列表中添加一个新应用程序：Firefox。\n这个问题很难解决，因为大多数人仍然需要互联网来做一些事情。如果你喝得太多，你可以通过完全停止来解决这个问题。但你不能通过停止进食来解决暴饮暴食的问题。我不能完全避免互联网，就像我对以前的时间消耗者所做的那样。\n起初我尝试规则。例如，我告诉自己每天只会使用互联网两次。但这些方案从来没有长期有效。最终会出现一些事情，需要我更多地使用它。然后我会逐渐滑回我的老路。\n令人上瘾的东西必须被当作有知觉的对手来对待——就好像你脑子里有个小人总是为你想要停止做的事情编造最合理的论据。如果你给它的留一条路，他会找到它。\n关键似乎是可见性。大多数坏习惯的最大成分是否认。所以你必须确保你不会仅仅滑入你试图避免的事情中。它必须触发警报。\n也许从长远来看，处理互联网分心的正确答案将是监视和控制它们的软件。但与此同时，我找到了一个更激烈的解决方案，确实有效：设置一台单独的电脑来使用互联网。\n我现在在主电脑上保持wifi关闭，除非我需要传输文件或编辑网页，我在房间的另一边有一台单独的笔记本电脑，用来检查邮件或浏览网页。（具有讽刺意味的是，这是Steve Huffman编写Reddit的电脑。当Steve和Alexis为了慈善拍卖他们的旧笔记本电脑时，我为Y Combinator博物馆购买了它们。）\n我的规则是，我可以花尽可能多的时间上网，只要我在那台电脑上做。事实证明这已经足够了。当我必须坐在房间的另一边检查邮件或浏览网页时，我会更加意识到它。至少在我的情况下，足够意识到每天很难花超过大约一小时上网。\n而我的主电脑现在 freed 用于工作。如果你尝试这个技巧，当你的电脑断开互联网连接时，你可能会对它的不同感觉感到震惊。对我来说，坐在一台只能用于工作的电脑前是多么陌生，这让我警醒，因为它显示了我一定浪费了多少时间。\n哇。我在这台电脑上能做的只是工作。好吧，那我最好工作。\n这是好的部分。你旧有的坏习惯现在帮助你工作。你已经习惯了一连几个小时坐在那台电脑前。但现在你不能浏览网页或检查邮件。你打算怎么办？你不能只是坐在那里。所以你开始工作。\n好的和坏的拖延\n相关链接：\n西班牙语翻译 阿拉伯语翻译 加泰罗尼亚语翻译 俄语翻译 ",
    "description": "",
    "tags": ["分心","拖延","互联网","生产力","专注","技术","心理学","散文"],
    "categories": [],
    "content": "→ English Version\n分心 2008年5月\n断开分心说明：本文结尾描述的策略没有奏效。它会工作一段时间，然后我会逐渐发现自己在工作电脑上使用互联网。我现在正在尝试其他策略，但我想这次我会等到确定它们有效之后再写。\n拖延症依赖分心而存在。大多数人发现只是坐着什么都不做很不舒服；你通过做其他事情来避免工作。\n因此，克服拖延症的一种方法是让它缺少分心。但这并不像听起来那么简单，因为有人努力让你分心。分心不是你避免的静态障碍，就像你可能避免路上的岩石一样。分心会主动找到你。\n切斯特菲尔德将污垢描述为错位的物质。同样，分心是在错误时间出现的有吸引力的事物。技术不断被改进以产生越来越多有吸引力的事物。这意味着当我们学会避免一类分心时，新的分心会不断出现，就像耐药细菌一样。\n例如，电视经过50年的改进，已经达到了视觉鸦片的程度。我13岁时就意识到电视会上瘾，所以我停止观看。但我最近读到，美国人平均每天看4小时电视。他们生命的四分之一。\n现在电视正在衰落，但只是因为人们找到了更令人上瘾的浪费时间方式。特别危险的是，许多发生在你的电脑上。这并非偶然。越来越多的办公室职员坐在连接到互联网的电脑前，而分心总是向拖延者进化。\n我记得当电脑至少对我来说 exclusively 用于工作时。我偶尔会拨号服务器获取邮件或ftp文件，但大部分时间我都是离线的。我只能做的是写作和编程。现在我感觉好像有人偷偷把电视放到了我的桌子上。非常令人上瘾的东西只需点击一下即可。在工作中遇到障碍？嗯，我想知道网上有什么新鲜事。最好检查一下。\n在多年仔细避免像电视、游戏和Usenet这样的经典时间消耗者之后，我仍然成为分心的牺牲品，因为我没有意识到它会进化。曾经安全的东西，使用互联网，逐渐变得越来越危险。有些天我醒来，喝杯茶，查看新闻，然后检查邮件，然后再次查看新闻，然后回复几封邮件，然后突然发现快到午饭时间了，我还没有完成任何真正的工作。而且这种情况开始越来越多地发生。\n我花了很长的时间才意识到互联网变得多么令人分心，因为问题是间歇性的。我忽略了它，就像你让自己忽略一个只间歇性出现的错误一样。当我在项目中间时，分心并不是真正的问题。当我完成一个项目并决定下一步做什么时，它们总是会咬我。\n很难注意到这种新型分心的危险的另一个原因是社会习俗还没有赶上它。如果我在沙发上坐了一整个上午看电视，我会很快注意到。这是一个已知的危险信号，就像独自喝酒一样。但使用互联网看起来和感觉上仍然很像工作。\n然而，最终很明显互联网变得如此令人分心，以至于我必须开始以不同的方式对待它。基本上，我必须在我的已知时间消耗者列表中添加一个新应用程序：Firefox。\n这个问题很难解决，因为大多数人仍然需要互联网来做一些事情。如果你喝得太多，你可以通过完全停止来解决这个问题。但你不能通过停止进食来解决暴饮暴食的问题。我不能完全避免互联网，就像我对以前的时间消耗者所做的那样。\n起初我尝试规则。例如，我告诉自己每天只会使用互联网两次。但这些方案从来没有长期有效。最终会出现一些事情，需要我更多地使用它。然后我会逐渐滑回我的老路。\n令人上瘾的东西必须被当作有知觉的对手来对待——就好像你脑子里有个小人总是为你想要停止做的事情编造最合理的论据。如果你给它的留一条路，他会找到它。\n关键似乎是可见性。大多数坏习惯的最大成分是否认。所以你必须确保你不会仅仅滑入你试图避免的事情中。它必须触发警报。\n也许从长远来看，处理互联网分心的正确答案将是监视和控制它们的软件。但与此同时，我找到了一个更激烈的解决方案，确实有效：设置一台单独的电脑来使用互联网。\n我现在在主电脑上保持wifi关闭，除非我需要传输文件或编辑网页，我在房间的另一边有一台单独的笔记本电脑，用来检查邮件或浏览网页。（具有讽刺意味的是，这是Steve Huffman编写Reddit的电脑。当Steve和Alexis为了慈善拍卖他们的旧笔记本电脑时，我为Y Combinator博物馆购买了它们。）\n我的规则是，我可以花尽可能多的时间上网，只要我在那台电脑上做。事实证明这已经足够了。当我必须坐在房间的另一边检查邮件或浏览网页时，我会更加意识到它。至少在我的情况下，足够意识到每天很难花超过大约一小时上网。\n而我的主电脑现在 freed 用于工作。如果你尝试这个技巧，当你的电脑断开互联网连接时，你可能会对它的不同感觉感到震惊。对我来说，坐在一台只能用于工作的电脑前是多么陌生，这让我警醒，因为它显示了我一定浪费了多少时间。\n哇。我在这台电脑上能做的只是工作。好吧，那我最好工作。\n这是好的部分。你旧有的坏习惯现在帮助你工作。你已经习惯了一连几个小时坐在那台电脑前。但现在你不能浏览网页或检查邮件。你打算怎么办？你不能只是坐在那里。所以你开始工作。\n好的和坏的拖延\n相关链 …"
  },{
    "title": "创业之前",
    "url": "/paul_graham/essays_zh/before/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创业之前 想要创业吗？获得Y Combinator的资助。\n2014年10月\n（本文改编自Sam Altman在斯坦福大学创业课程中的客座讲座。主要面向大学生，但其中大部分内容也适用于其他年龄的潜在创始人。）\n有孩子的一个好处是，当你需要给出建议时，你可以问自己\u0026quot;我会告诉我的孩子什么？\u0026ldquo;我的孩子还小，但我可以想象如果他们在上大学，我会告诉他们关于创业的事情，这就是我现在要告诉你们的。\n创业公司非常违反直觉。我不确定为什么。也许只是因为关于它们的知识还没有渗透到我们的文化中。但无论出于什么原因，创办创业公司是一项你不能总是相信直觉的任务。\n在这方面就像滑雪。当你第一次尝试滑雪时，如果你想减速，你的本能是向后倾斜。但如果你在滑雪板上向后倾斜，你会失去控制地向山下滑去。所以学习滑雪的一部分就是学会抑制这种冲动。最终你会养成新的习惯，但一开始需要有意识的努力。一开始当你开始下山时，有一堆事情你试图记住。\n创业公司像滑雪一样不自然，所以创业公司也有类似的清单。在这里我将给你第一部分——如果你想为创业做准备，需要记住的事情。\n违反直觉 清单上的第一点是我已经提到的事实：创业公司如此奇怪，如果你相信直觉，你会犯很多错误。如果你只知道这一点，你至少在犯错误之前会停下来。\n当我运行Y Combinator时，我经常开玩笑说我们的功能是告诉创始人他们会忽略的事情。这是真的。一批又一批，YC合伙人警告创始人他们即将犯的错误，创始人忽略它们，然后一年后回来说\u0026quot;我希望我们听了。\u0026rdquo;\n为什么创始人忽略合伙人的建议？嗯，这就是违反直觉想法的问题：它们与你的直觉相矛盾。它们看起来是错的。所以你的第一反应当然是忽视它们。事实上，我开玩笑的描述不仅仅是Y Combinator的诅咒，也是其存在理由的一部分。如果创始人的直觉已经给了他们正确的答案，他们就不需要我们了。你只需要别人给你让你惊讶的建议。这就是为什么有很多滑雪教练而没有多少跑步教练。\n然而，你可以相信你对他人的直觉。事实上，年轻创始人最常见的错误之一就是不够相信这一点。他们与看起来令人印象深刻的人交往，但对他们个人感觉有些不安。后来当事情爆发时他们说\u0026quot;我知道他有什么不对劲，但我忽略了，因为他看起来如此令人印象深刻。\u0026quot;\n如果你正在考虑与某人合作——作为联合创始人、员工、投资者或收购者——而你对他们有不祥的预感，相信你的直觉。如果某人看起来滑头、虚假或是个混蛋，不要忽视。\n这是一个放纵自己有益处的情况。与你真正喜欢的人一起工作，而且你已经认识足够长的时间以确保。\n专业知识 第二个违反直觉的观点是，了解很多关于创业公司的知识并不那么重要。在创业公司中成功的方法不是成为创业公司的专家，而是成为你的用户和为他们解决的问题的专家。马克·扎克伯格成功不是因为他是一位创业公司专家。尽管他完全是个创业新手，他还是成功了，因为他非常了解他的用户。\n如果你对如何进行天使轮融资一无所知，不要为此感到难过。那种事情你需要时可以学习，做完后就忘记。\n事实上，我担心不仅没有必要详细学习创业公司的机制，甚至可能有些危险。如果我遇到一个本科生，他对可转换票据、员工协议和（天哪）FF级股票了如指掌，我不会认为\u0026quot;这是一个远远领先于同龄人的人\u0026quot;。这会敲响警钟。因为年轻创始人的另一个特征性错误是走过场，假装创办创业公司。他们编造一些听起来合理的想法，以高估值筹集资金，租一个很酷的办公室，雇佣一群人。从外面看起来，这似乎就是创业公司所做的。但在租一个很酷的办公室和雇佣一群人之后的下一步是：逐渐意识到他们完蛋了，因为在模仿创业公司的所有外在形式时，他们忽略了唯一真正重要的事情：制造人们想要的东西。\n游戏 我们看到这种情况经常发生，以至于我们给它起了个名字：过家家。最终我意识到为什么会这样。年轻创始人走过场创办创业公司的原因是因为这是他们到目前为止一生中被训练要做的事情。想想你必须做什么才能进入大学，例如。课外活动，检查。即使在大学课程中，大部分工作也像跑步圈一样人为。\n我不是因为教育系统这样而攻击它。当你被教导某些东西时，你做的事情总会有一定程度的虚假性，如果你衡量他们的表现，人们不可避免地会利用这种差异，以至于你衡量的大部分东西都是虚假性的产物。\n我承认我在大学时自己也这样做过。我发现很多课程中可能只有20或30个想法是适合作为好考试题的形状。我在这些课程中准备考试的方法不是（顺便说）掌握课程中教授的材料，而是列出潜在的考试题并提前想出答案。当我走进期末考试时，我主要会感到好奇我的哪些问题会出现在考试中。这就像一场游戏。\n在一生中被训练玩这样的游戏后，年轻创始人创办创业公司的第一反应是试图找出赢得这个新游戏的技巧，这并不奇怪。由于筹资似乎是创业公司成功的衡量标准（另一个经典的新手错误），他们总是想知道说服投资者的技巧是什么。我们告诉他们说服投资者的最好方法是创办一个真正做得好的创业公司，意思是快速增长，然后简单地告诉投资者。然后他们想知道快速增长的技巧是什么。我们必须告诉他们说最好的方法就是制造人们想要的东西。\nYC合伙人与年轻创始人的许多对话都以创始人问\u0026quot;我们如何\u0026hellip;\u0026ldquo;开始，合伙人回答\u0026quot;只要\u0026hellip;\u0026rdquo;\n为什么创始人总是把事情搞得这么复杂？我意识到，原因是他们在寻找技巧。\n所以这是关于创业公司要记住的第三个违反直觉的事情：创办创业公司是钻营系统停止工作的地方。如果你去大公司工作，钻营系统可能继续有效。取决于公司的糟糕程度，你可以通过讨好合适的人，给人留下生产力印象等方式成功。但这在创业公司中不起作用。没有老板可以欺骗，只有用户，而用户关心的只是你的产品是否做他们想要的事情。创业公司像物理一样非个人化。你必须制造人们想要的东西，你只有在做到这一点的情况下才能繁荣。\n危险的是，在一定程度上伪装对投资者确实有效。如果你非常擅长听起来像你知道自己在说什么，你至少可以欺骗投资者进行一轮甚至可能是两轮融资。但这不符合你的利益。公司最终注定要失败。你做的只是在下跌的过程中浪费自己的时间。\n所以停止寻找技巧。创业公司中确实有技巧，就像任何领域一样，但它们比解决真正问题的重要性低一个数量级。一个对筹资一无所知但制造了用户喜爱的产品的创始人，会比一个知道书中所有技巧但使用量图表平坦的创始人更容易筹集资金。更重要的是，制造了用户喜爱产品的创始人是在筹集资金后能够继续成功的人。\n虽然在某种意义上这是个坏消息，因为你被剥夺了最强大的武器之一，但我觉得当你开始创业公司时，钻营系统停止工作是令人兴奋的。令人兴奋的是，世界上确实存在通过做好工作获胜的地方。想象一下，如果世界都像学校和大公司那样，你要么不得不在虚假的事情上花费大量时间，要么输给这样做的人，那会多么令人沮丧。\n如果我在大学时意识到现实世界中有些地方钻营系统比其他地方重要性低，有些地方几乎不重要，我会很高兴。但确实存在，这种差异是你在思考未来时要考虑的最重要事情之一。你在每种类型的工作中如何获胜，你希望通过做什么获胜？\n全部消耗 这带给我们第四个违反直觉的观点：创业公司会消耗你的一切。如果你创办一家创业公司，它会在你无法想象的程度上掌控你的生活。如果你的创业公司成功，它会在很长一段时间内掌控你的生活：至少几年，也许是十年，也许是你整个工作生涯。所以这里确实有机会成本。\n拉里·佩奇可能看起来过着令人羡慕的生活，但其中有些方面并不令人羡慕。基本上他在25岁时开始尽可能快地奔跑，在他看来，从那时起他就一直没有停下来喘口气。谷歌帝国每天都会发生只有CEO才能处理的新问题，他作为CEO必须处理它。即使他只休假一周，也会积累整整一周的问题积压。他必须毫无怨言地忍受这一点，部分原因是作为公司的父亲，他永远不能表现出恐惧或软弱，部分原因是亿万富翁如果谈论生活困难，得到的同情少于零。这有一个奇怪的副作用，即成功创业公司创始人的难度几乎被所有人隐藏，除了那些经历过的人。\nY Combinator现在已经资助了几家可以称为巨大成功的公司，在每一种情况下，创始人说的话都一样。它永远不会变得更容易。问题的性质发生了变化。你在担心伦敦办公室的建设延误，而不是工作室公寓里坏的空调。但担忧的总量永远不会减少；如果有的话，它增加了。\n创办成功的创业公司类似于生孩子，就像你按下的一个按钮，会不可逆转地改变你的生活。虽然生孩子真的很美好，但有很多事情在你有孩子之前做比之后做更容易。其中许多事情会让你在你有孩子时成为更好的父母。由于你可以推迟按按钮一段时间，大多数富裕国家的人都会这样做。\n然而当涉及到创业公司时，很多人似乎认为他们应该在大学时创办它们。你疯了吗？大学在想什么？他们不遗余力地确保学生避孕用品供应充足，但却在左右设置创业项目和创业孵化器。\n公平地说，大学在这里别无选择。很多新生对创业公司感兴趣。大学，至少事实上，被期望为他们准备职业生涯。所以想创办创业公司的学生希望大学能教他们关于创业公司的知识。无论大学能否做到这一点，都有一些压力声称他们可以，以免他们失去申请者到其他确实这样做的大学。\n大学能教学生关于创业公司的知识吗？是的，也不是。他们可以教学生关于创业公司的知识，但正如我之前解释的，这不是你需要知道的知识。你需要学习的是你自己用户的需求，而你直到真正创办公司才能做到这一点。所以创办创业公司本质上是一件只有通过做才能真正学会的事情。而在大学里不可能做到这一点，原因我刚才解释过：创业公司会消耗你的一切。作为学生，你不能真正地创办创业公司，因为如果你真正地创办创业公司，你就不再是学生了。你可能名义上还是学生一段时间，但你甚至也不会是那样很久。\n考虑到这种二分法，你应该走哪条路？做一个真正的学生，不创办创业公司，还是创办一个真正的创业公司，不做学生？我可以为你回答这个问题。不要在大学创办创业公司。如何创办创业公司只是你试图解决的更大问题的一个子集：如何过上美好的生活。虽然创办创业公司对很多雄心勃勃的人来说可以成为美好生活的一部分，但20岁不是最佳时间。创办创业公司就像 brutally fast depth-first search（一种非常快速的深度优先搜索）。大多数人在20岁时应该仍然在进行广度搜索。\n你在20出头时可以做一些在之前或之后都不能做得好的事情，比如一时冲动深入项目，没有截止日期感地超级便宜旅行。对于没有雄心的人来说，这种事情是可怕的\u0026quot;发射失败\u0026quot;，但对于有雄心的人来说，它可以是一种无与伦比的宝贵探索。如果你在20岁时创办创业公司并且足够成功，你永远不会再有机会做这些事情。\n马克·扎克伯格永远不会有机会在国外闲逛。他可以做大多数人不能做的事情，比如包租飞机飞到国外。但成功从他生活中带走了很多偶然性。Facebook在操控他就像他在操控Facebook一样。虽然被一个你认为是你终生工作的项目所控制可以很酷，但偶然性也有优势，尤其是在生活早期。除其他外，它给你更多选择你终生工作的选项。\n这里甚至没有权衡。如果你放弃在20岁时创办创业公司，你不会牺牲任何东西，因为如果你等待，你更有可能成功。在不太可能的情况下，如果你20岁时你的一个副项目像Facebook一样起飞，你将面临选择是否继续运行它，这可能合理。但创业公司起飞的通常方式是创始人让它们起飞，而在20岁时这样做是 gratuitously stupid（毫无意义的愚蠢）。\n尝试 你应该在任何年龄都这样做吗？我意识到我把创业公司描述得相当难。如果我没有，让我再试一次：创办创业公司真的很难。如果太难怎么办？你怎么知道你是否能应对这个挑战？\n答案是第五个违反直觉的观点：你无法判断。到目前为止，你的生活可能给了你一些关于如果你试图成为数学家或职业足球运动员你的前景如何的想法。但除非你过着非常奇怪的生活，否则你没有做过太多像创业创始人的事情。创办创业公司会改变你很多。所以你试图估计的不仅仅是你现在是什么，而是你能成长为什么，谁能做到这一点？\n在过去的9年里，我的工作是预测人们是否有能力创办成功的创业公司。很容易看出他们有多聪明，大多数读这篇文章的人都会超过那个门槛。困难的部分是预测他们会变得多么坚韧和雄心勃勃。可能没有人有更多经验试图预测这一点，所以我可以告诉你专家能对它了解多少，答案是：不多。我学会对每批创业公司中哪些会成为明星保持完全开放的心态。\n创始人有时认为他们知道。有些人到达时确信他们会像迄今为止他们生活中面对过的所有（少数、人为、简单的）测试一样轻松通过YC。其他人到达时想知道他们是如何进入的，希望YC不会发现导致接受他们的任何错误。但创始人的初始态度与他们公司的表现之间几乎没有相关性。\n我读到军队中也是如此—— swaggering recruits（神气活现的新兵）并不比安静的新兵更有可能变得真正坚韧。可能出于同样的原因：所涉及的测试与他们之前生活中的测试如此不同。\n如果你对创办创业公司绝对恐惧，你可能不应该这样做。但如果你只是不确定你是否能胜任，唯一的发现方法就是尝试。只是不是现在。\n想法 所以如果你想有一天创办创业公司，你在大学应该做什么？你最初只需要两样东西：一个想法和联合创始人。获得两者的方法是一样的。这带给我们第六个也是最后一个违反直觉的观点：获得创业想法的方法不是试图思考创业想法。\n我为此写了一整篇文章，所以我不在这里重复所有内容。但简短的版本是，如果你有意识地努力思考创业想法，你想出的想法不仅会很糟糕，而且听起来合理，这意味着你在意识到它们很糟糕之前会在它们身上浪费大量时间。\n想出好的创业想法的方法是退后一步。不要有意识地努力思考创业想法，而是将你的思想变成那种在没有有意识努力的情况下创业想法会在其中形成的类型。事实上，如此无意识地，你一开始甚至没有意识到它们是创业想法。\n这不仅是可能的，而且正是苹果、雅虎、谷歌和Facebook的起步方式。这些公司最初甚至都不是打算成为公司。它们都只是副项目。最好的创业公司几乎必须作为副项目开始，因为伟大的想法往往是如此异常，以至于你的有意识思维会拒绝它们作为公司的想法。\n",
    "description": "",
    "tags": ["创业","创始人","大学","建议","准备","企业家精神"],
    "categories": [],
    "content": "→ English Version\n创业之前 想要创业吗？获得Y Combinator的资助。\n2014年10月\n（本文改编自Sam Altman在斯坦福大学创业课程中的客座讲座。主要面向大学生，但其中大部分内容也适用于其他年龄的潜在创始人。）\n有孩子的一个好处是，当你需要给出建议时，你可以问自己\u0026quot;我会告诉我的孩子什么？\u0026ldquo;我的孩子还小，但我可以想象如果他们在上大学，我会告诉他们关于创业的事情，这就是我现在要告诉你们的。\n创业公司非常违反直觉。我不确定为什么。也许只是因为关于它们的知识还没有渗透到我们的文化中。但无论出于什么原因，创办创业公司是一项你不能总是相信直觉的任务。\n在这方面就像滑雪。当你第一次尝试滑雪时，如果你想减速，你的本能是向后倾斜。但如果你在滑雪板上向后倾斜，你会失去控制地向山下滑去。所以学习滑雪的一部分就是学会抑制这种冲动。最终你会养成新的习惯，但一开始需要有意识的努力。一开始当你开始下山时，有一堆事情你试图记住。\n创业公司像滑雪一样不自然，所以创业公司也有类似的清单。在这里我将给你第一部分——如果你想为创业做准备，需要记住的事情。\n违反直觉 清单上的第一点是我已经提到的事实：创业公司如此奇怪，如果你相信直觉，你会犯很多错误。如果你只知道这一点，你至少在犯错误之前会停下来。\n当我运行Y Combinator时，我经常开玩笑说我们的功能是告诉创始人他们会忽略的事情。这是真的。一批又一批，YC合伙人警告创始人他们即将犯的错误，创始人忽略它们，然后一年后回来说\u0026quot;我希望我们听了。\u0026rdquo;\n为什么创始人忽略合伙人的建议？嗯，这就是违反直觉想法的问题：它们与你的直觉相矛盾。它们看起来是错的。所以你的第一反应当然是忽视它们。事实上，我开玩笑的描述不仅仅是Y Combinator的诅咒，也是其存在理由的一部分。如果创始人的直觉已经给了他们正确的答案，他们就不需要我们了。你只需要别人给你让你惊讶的建议。这就是为什么有很多滑雪教练而没有多少跑步教练。\n然而，你可以相信你对他人的直觉。事实上，年轻创始人最常见的错误之一就是不够相信这一点。他们与看起来令人印象深刻的人交往，但对他们个人感觉有些不安。后来当事情爆发时他们说\u0026quot;我知道他有什么不对劲，但我忽略了，因为他看起来如此令人印象深刻。\u0026quot;\n如果你正在考虑与某人合作——作为联合创始人、员工、投资者或收购者——而你对他们有不祥的预感，相信你的直觉。如果某人看起来滑头、虚假或是个混蛋，不要忽视。\n这是一个放纵自己有益处的情况。与你真正喜欢的人一起工作，而且你已经认识足够长的时间以确保。\n专业知识 第二个违反直觉的观点是，了解很多关于创业公司的知识并不那么重要。在创业公司中成功的方法不是成为创业公司的专家，而是成为你的用户和为他们解决的问题的专家。马克·扎克伯格成功不是因为他是一位创业公司专家。尽管他完全是个创业新手，他还是成功了，因为他非常了解他的用户。\n如果你对如何进行天使轮融资一无所知，不要为此感到难过。那种事情你需要时可以学习，做完后就忘记。\n事实上，我担心不仅没有必要详细学习创业公司的机制，甚至可能有些危险。如果我遇到一个本科生，他对可转换票据、员工协议和（天哪）FF级股票了如指掌，我不会认为\u0026quot;这是一个远远领先于同龄人的人\u0026quot;。这会敲响警钟。因为年轻创始人的另一个特征性错误是走过场，假装创办创业公司。他们编造一些听起来合理的想法，以高估值筹集资金，租一个很酷的办公室，雇佣一群人。从外面看起来，这似乎就是创业公司所做的。但在租一个很酷的办公室和雇佣一群人之后的下一步是：逐渐意识到他们完蛋了，因为在模仿创业公司的所有外在形式时，他们忽略了唯一真正重要的事情：制造人们想要的东西。\n游戏 我们看到这种情况经常发生，以至于我们给它起了个名字：过家家。最终我意识到为什么会这样。年轻创始人走过场创办创业公司的原因是因为这是他们到目前为止一生中被训练要做的事情。想想你必须做什么才能进入大学，例如。课外活动，检查。即使在大学课程中，大部分工作也像跑步圈一样人为。\n我不是因为教育系统这样而攻击它。当你被教导某些东西时，你做的事情总会有一定程度的虚假性，如果你衡量他们的表现，人们不可避免地会利用这种差异，以至于你衡量的大部分东西都是虚假性的产物。\n我承认我在大学时自己也这样做过。我发现很多课程中可能只有20或30个想法是适合作为好考试题的形状。我在这些课程中准备考试的方法不是（顺便说）掌握课程中教授的材料，而是列出潜在的考试题并提前想出答案。当我走进期末考试时，我主要会感到好奇我的哪些问题会出现在考试中。这就像一场游戏。\n在一生中被训练玩这样的游戏后，年轻创始人创办创业公司的第一反应是试图找出赢得这个新游戏的技巧，这并不奇怪。由于 …"
  },{
    "title": "创业公司 = 增长",
    "url": "/paul_graham/essays_zh/growth/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创业公司 = 增长 想创业吗？获得Y Combinator的资助。\n2012年9月\n创业公司就是为快速增长而设计的公司。新成立本身并不能使一家公司成为创业公司。创业公司也不一定必须从事技术工作，或者接受风险投资，或者有某种\u0026quot;退出\u0026quot;方式。唯一重要的是增长。我们与创业公司相关的一切都源于增长。\n如果你想创立一家创业公司，理解这一点很重要。创业公司很难，你不能偏离目标却希望成功。你必须知道你追求的是增长。好消息是，如果你获得了增长，其他一切往往都会水到渠成。这意味着你可以用增长作为指南针来做出几乎每一个决定。\n红杉木 让我们从一个应该显而易见但经常被忽视的区别开始：并非每家新成立的公司都是创业公司。美国每年有数百万家公司成立。只有极少数是创业公司。大多数是服务型企业——餐厅、理发店、管道工等等。这些都不是创业公司，除了一些特殊情况。理发店不是为了快速增长而设计的。而搜索引擎，例如，就是。\n当我说创业公司是为快速增长而设计时，我在两个意义上使用这个词。部分上我指的是预期意义上的设计，因为大多数创业公司都会失败。但我也指的是创业公司在本质上与其他公司不同，就像红杉树苗与豆芽有不同的命运一样。\n正是这种区别使得\u0026quot;创业公司\u0026quot;这个词成为了为快速增长而设计的公司的独特称谓。如果所有公司本质上都相似，但有些公司由于运气或创始人的努力而最终增长非常快，我们就不需要一个单独的词。我们可以只谈论超级成功的公司和不太成功的公司。但实际上，创业公司确实拥有与其他企业不同的DNA。谷歌不仅仅是一家由异常幸运和勤奋的创始人经营的理发店。谷歌从一开始就与众不同。\n要快速增长，你需要制造可以卖给大市场的东西。这就是谷歌和理发店之间的区别。理发店无法规模化。\n要让一家公司真正变得庞大，它必须（a）制造许多人都想要的东西，并且（b）能够接触并服务于所有这些人。理发店在（a）方面做得很好。几乎每个人都需要理发。但理发店的问题，和任何零售企业一样，是（b）。理发店亲自为顾客服务，很少有人会为了理发而长途跋涉。即使他们愿意，理发店也无法容纳他们。[1]\n编写软件是解决（b）的好方法，但你仍然可能在（a）方面受到限制。如果你编写软件教匈牙利人说藏语，你将能够接触大多数想要这种软件的人，但这样的人不会很多。然而，如果你制作软件教中国人说英语，你就进入了创业公司领域。\n大多数企业在（a）或（b）方面都受到严格限制。成功创业公司的显著特点是它们没有受到这种限制。\n想法 似乎创业总是比创立普通企业更好。如果你要创立一家公司，为什么不创立最有潜力的那种类型？问题在于这是一个（相对）高效的市场。如果你编写软件教匈牙利人说藏语，你不会有太多竞争。如果你编写软件教中国人说英语，你将面临激烈的竞争，正是因为后者是更大的奖项。[2]\n限制普通公司的约束也保护了它们。这就是权衡。如果你开一家理发店，你只需要与其他本地理发师竞争。如果你创立搜索引擎，你必须与全世界竞争。\n正常企业的约束所保护的最重要的东西不是竞争，而是想出新想法的困难。如果你在特定街区开一家酒吧，地理限制既限制了你的潜力，也保护了你免受竞争对手的影响，这个地理约束也有助于定义你的公司。酒吧+街区对小企业来说是一个足够的概念。同样，对于在（a）方面受限的公司也是如此。你的细分市场既保护你也定义了你。\n而如果你想创立一家创业公司，你可能必须想出一些相当新颖的东西。创业公司必须制造能够交付给大市场的东西，而这种类型的想法非常宝贵，所有显而易见的想法都已经被采用了。\n想法空间已经被彻底筛选过，以至于创业公司通常必须从事其他人都忽视的事情。我本想写必须要有意识地努力找到其他人都忽视的想法。但这并不是大多数创业公司的开始方式。通常成功的创业公司之所以成功，是因为创始人与其他人足够不同，以至于其他人很少能看到的想法对他们来说似乎显而易见。也许后来他们会退后一步，注意到他们找到了一个在其他人盲点中的想法，从那时起，他们会有意努力留在那里。[3] 但在成功的创业公司开始时，大部分创新都是无意识的。\n成功创始人的不同之处在于他们能看到不同的问题。既擅长技术又面临可以用技术解决的问题是一个特别好的组合，因为技术变化如此迅速，以前糟糕的想法往往在没有人注意到的情况下变成好主意。史蒂夫·沃兹尼亚克的问题是想要自己的计算机。在1975年，这是一个不寻常的问题。但技术变革即将使其成为一个更普遍的问题。因为他不仅想要一台计算机，而且知道如何制造它们，沃兹尼亚克能够为自己制造一台。他为自己解决的问题成为了苹果在未来几年为数百万人解决的问题。但到普通人明显这是一个大市场时，苹果已经建立了。\n谷歌有相似的起源。拉里·佩奇和谢尔盖·布林想要搜索网络。但与大多数人不同，他们既有技术专业知识能够注意到现有搜索引擎并不如它们可能的那样好，也知道如何改进它们。在接下来的几年里，他们的问题成为了每个人的问题，因为网络发展到一定程度，你不必是挑剔的搜索专家就能注意到旧算法不够好。但就像苹果的情况一样，到其他人意识到搜索有多重要时，谷歌已经确立了地位。\n这就是创业想法与技术之间的一个联系。一个领域的快速变化在其他领域揭示了大量可解决的问题。有时这些变化是进步，它们改变的是可解性。那种产生苹果的变化就是这种类型；芯片技术的进步最终让史蒂夫·沃兹尼亚克能够设计出一台他负担得起的计算机。但在谷歌的情况下，最重要的变化是网络的成长。那里改变的不是可解性而是规模。\n创业公司与技术之间的另一个联系是，创业公司创造新的做事方式，而新的做事方式，在更广泛的意义上，就是新技术。当创业公司既以技术变革暴露的想法开始，又制造由技术（在更狭窄意义上，过去被称为\u0026quot;高技术\u0026quot;）组成的产品时，很容易将两者混为一谈。但这两种联系是不同的，原则上，一个人可以创立一家既不是由技术变革驱动，其产品也不是由技术组成的创业公司，除了在更广泛的意义上。[4]\n速度 一家公司必须增长多快才能被视为创业公司？对此没有精确的答案。\u0026ldquo;创业公司\u0026quot;是一个极点，而不是阈值。创立一个起初不过是对自己雄心的宣言。你不仅承诺要创立一家公司，还要创立一家快速增长的公司，因此你承诺寻找那种罕见的想法。但起初你只有承诺。创立创业公司在这一点上很像当演员。\u0026ldquo;演员\u0026quot;也是一个极点，而不是阈值。在职业生涯开始时，演员是去试镜的服务员。找到工作使他成为成功的演员，但他并不是在成功时才成为演员。\n所以真正的问题不是什么增长率使公司成为创业公司，而是成功创业公司往往有什么样的增长率。对创始人来说，这不仅仅是一个理论问题，因为它相当于询问他们是否在正确的道路上。\n成功创业公司的增长通常有三个阶段：在创业公司试图弄清楚自己在做什么时，有一个初始的缓慢或无增长时期。随着创业公司弄清楚如何制造许多人都想要的东西以及如何接触这些人，有一个快速增长时期。最终，成功的创业公司将成长为一家大公司。增长将放缓，部分是由于内部限制，部分是因为公司开始遇到其所服务市场的限制。[5] 这三个阶段一起产生S形曲线。定义创业公司的增长阶段是第二个阶段，上升阶段。其长度和斜率决定了公司将有多大规模。\n斜率是公司的增长率。如果有一个数字每个创始人应该始终知道，那就是公司的增长率。这就是创业公司的衡量标准。如果你不知道这个数字，你甚至不知道自己做得好坏。\n当我第一次见到创始人并问他们的增长率是多少时，有时他们告诉我\u0026quot;我们每月获得大约100个新客户。\u0026ldquo;这不是增长率。重要的不是新客户的绝对数量，而是新客户与现有客户的比率。如果你真的每月获得恒定数量的新客户，你就有麻烦了，因为这意味着你的增长率在下降。\n在Y Combinator期间，我们按周测量增长率，部分是因为在演示日之前时间很少，部分是因为创业公司早期需要用户的频繁反馈来调整他们正在做的事情。[6]\n在YC期间的良好增长率是每周5-7%。如果你能达到每周10%，你做得非常好。如果你只能做到1%，这表明你还没有弄清楚自己在做什么。\n衡量增长率的最好东西是收入。对于最初不收费的创业公司，第二好的选择是活跃用户。这是收入增长的合理代理，因为每当创业公司确实开始试图赚钱时，他们的收入可能是活跃用户的恒定倍数。[7]\n指南针 我们通常建议创业公司选择他们认为能够达到的增长率，然后每周努力达到它。这里的关键词是\u0026quot;只是\u0026rdquo;。如果他们决定以每周7%的速度增长，并且达到了这个数字，那么那一周他们就是成功的。他们不需要做任何其他事情。但如果他们没有达到，他们在唯一重要的事情上失败了，因此应该相应地警惕。\n程序员会认出我们在这里做什么。我们正在把创立创业公司变成一个优化问题。任何尝试过优化代码的人都知道这种狭窄的专注是多么奇妙的有效。优化代码意味着获取现有程序并改变它以使用更少的东西，通常是时间或内存。你不必思考程序应该做什么，只是让它更快。对大多数程序员来说，这是非常令人满意的工作。狭窄的专注使它成为一种谜题，你通常对自己能多快解决它感到惊讶。\n专注于达到增长率将开始创业公司的原本令人困惑的多方面问题减少到单一问题。你可以使用那个目标增长率来为你做出所有决定；任何能让你获得所需增长的东西都是正确的。你应该在会议上花两天时间吗？你应该再雇佣一个程序员吗？你应该更专注于营销吗？你应该花时间追求某个大客户吗？你应该添加x功能吗？任何能让你达到目标增长率的事情。[8]\n按周增长来评判自己并不意味着你只能向前看一周。一旦你经历了某一周错过目标的痛苦（这是唯一重要的事情，而你在那件事上失败了），你就会对任何能在未来避免这种痛苦的事情感兴趣。所以你会愿意，例如，雇佣另一个程序员，他不会为本周的增长做出贡献，但也许一个月后会实现一些能给你带来更多用户的新功能。但前提是（a）雇佣某人的分心不会让你在短期内错过你的数字，并且（b）你足够担心是否能够在不雇佣新人的情况下保持达到你的数字。\n不是你不考虑未来，只是你考虑的不超过必要的程度。\n理论上这种爬山可能会让创业公司陷入困境。它们可能最终达到局部最大值。但在实践中，这种情况从未发生。每周必须达到一个增长数字迫使创始人采取行动，行动与不行动是成功的高位。十次中有九次，坐在那里制定战略只是一种拖延的形式。而创始人关于爬哪座山的直觉通常比他们意识到的要好。此外，创业公司想法空间中的最大值不是尖峰和孤立的。大多数相当好的想法都与更好的想法相邻。\n优化增长的迷人之处在于它实际上可以发现创业公司的想法。你可以将增长需求作为一种进化压力来使用。如果你从一些初始计划开始，并为了保持达到，比如说，每周10%的增长而必要时修改它，你最终可能会得到一家与你打算创立的完全不同的公司。但任何以每周10%一致增长的东西几乎肯定比你开始时的想法更好。\n这与小企业有相似之处。正如位于特定街区的约束有助于定义酒吧一样，以特定速率增长的约束有助于定义创业公司。\n你通常会最好地遵循那个约束，无论它引向何方，而不是受到一些最初愿景的影响，就像科学家最好追随真理，无论它引向何方，而不是受到他希望情况怎样的影响。当理查德·费曼说自然的想象力比人的想象力更伟大时，他的意思是如果你只是追随真理，你会发现比你所能编造的更酷的东西。对创业公司来说，增长是一个类似于真理的约束。每家成功的创业公司至少部分是增长想象力的产物。[9]\n价值 很难找到每周持续增长几个百分点的任何东西，但如果你找到了，你可能发现了出人意料地有价值的东西。如果我们向前看，我们就知道为什么。\n每周 每年 1% 1.7x 2% 2.8x 5% 12.6x 7% 33.7x 10% 142.0x 一家每周增长1%的公司将每年增长1.7倍，而一家每周增长5%的公司将增长12.6倍。一家每月赚取1000美元（YC早期的典型数字）并以每周1%增长的公司4年后将每月赚取7900美元，这比硅谷一个好的程序员的工资还少。一家以每周5%增长的创业公司4年后将每月赚取2500万美元。[10]\n我们的祖先很少遇到指数增长的情况，因为我们的直觉在这里无法指导我们。快速增长创业公司发生的事情往往会令创始人都感到惊讶。\n增长率的微小变化产生质的不同结果。这就是为什么创业公司有一个单独的词，为什么创业公司做普通公司不做的事情，比如筹集资金和被收购。而且，奇怪的是，这也是它们经常失败的原因。\n考虑到成功的创业公司可以变得多么有价值，任何熟悉期望价值概念的人都会对失败率不高感到惊讶。如果一家成功的创业公司能让创始人赚取1亿美元，那么即使成功的概率只有1%，创立一家的期望价值也是100万美元。一组足够聪明和坚定的创始人在这个规模上成功的概率可能显著超过1%。对于合适的人来说——比如年轻的比尔·盖茨——概率可能是20%甚至50%。所以这么多人想要尝试并不奇怪。在一个高效的市场中，失败的创业公司数量应该与成功的规模成比例。既然后者巨大，前者也应该如此。[11]\n这意味着在任何给定时间，绝大多数创业公司都在从事永远不会有所作为的事情，然而却用\u0026quot;创业公司\u0026quot;这个宏伟的标题来美化他们注定要失败的努力。\n这并不困扰我。其他高风险职业也是如此，比如成为演员或小说家。我早就习惯了。但这似乎困扰着很多人，特别是那些创立了普通企业的人。许多人对这些所谓的创业公司获得所有关注感到恼火，尽管它们中几乎没有一个会有所作为。\n",
    "description": "",
    "tags": ["创业","增长","风险投资","融资","商业"],
    "categories": [],
    "content": "→ English Version\n创业公司 = 增长 想创业吗？获得Y Combinator的资助。\n2012年9月\n创业公司就是为快速增长而设计的公司。新成立本身并不能使一家公司成为创业公司。创业公司也不一定必须从事技术工作，或者接受风险投资，或者有某种\u0026quot;退出\u0026quot;方式。唯一重要的是增长。我们与创业公司相关的一切都源于增长。\n如果你想创立一家创业公司，理解这一点很重要。创业公司很难，你不能偏离目标却希望成功。你必须知道你追求的是增长。好消息是，如果你获得了增长，其他一切往往都会水到渠成。这意味着你可以用增长作为指南针来做出几乎每一个决定。\n红杉木 让我们从一个应该显而易见但经常被忽视的区别开始：并非每家新成立的公司都是创业公司。美国每年有数百万家公司成立。只有极少数是创业公司。大多数是服务型企业——餐厅、理发店、管道工等等。这些都不是创业公司，除了一些特殊情况。理发店不是为了快速增长而设计的。而搜索引擎，例如，就是。\n当我说创业公司是为快速增长而设计时，我在两个意义上使用这个词。部分上我指的是预期意义上的设计，因为大多数创业公司都会失败。但我也指的是创业公司在本质上与其他公司不同，就像红杉树苗与豆芽有不同的命运一样。\n正是这种区别使得\u0026quot;创业公司\u0026quot;这个词成为了为快速增长而设计的公司的独特称谓。如果所有公司本质上都相似，但有些公司由于运气或创始人的努力而最终增长非常快，我们就不需要一个单独的词。我们可以只谈论超级成功的公司和不太成功的公司。但实际上，创业公司确实拥有与其他企业不同的DNA。谷歌不仅仅是一家由异常幸运和勤奋的创始人经营的理发店。谷歌从一开始就与众不同。\n要快速增长，你需要制造可以卖给大市场的东西。这就是谷歌和理发店之间的区别。理发店无法规模化。\n要让一家公司真正变得庞大，它必须（a）制造许多人都想要的东西，并且（b）能够接触并服务于所有这些人。理发店在（a）方面做得很好。几乎每个人都需要理发。但理发店的问题，和任何零售企业一样，是（b）。理发店亲自为顾客服务，很少有人会为了理发而长途跋涉。即使他们愿意，理发店也无法容纳他们。[1]\n编写软件是解决（b）的好方法，但你仍然可能在（a）方面受到限制。如果你编写软件教匈牙利人说藏语，你将能够接触大多数想要这种软件的人，但这样的人不会很多。然而，如果你制作软件教中国人说英语，你就进入了创业公司领域。\n大多数企业在（a）或（b）方面都受到严格限制。成功创业公司的显著特点是它们没有受到这种限制。\n想法 似乎创业总是比创立普通企业更好。如果你要创立一家公司，为什么不创立最有潜力的那种类型？问题在于这是一个（相对）高效的市场。如果你编写软件教匈牙利人说藏语，你不会有太多竞争。如果你编写软件教中国人说英语，你将面临激烈的竞争，正是因为后者是更大的奖项。[2]\n限制普通公司的约束也保护了它们。这就是权衡。如果你开一家理发店，你只需要与其他本地理发师竞争。如果你创立搜索引擎，你必须与全世界竞争。\n正常企业的约束所保护的最重要的东西不是竞争，而是想出新想法的困难。如果你在特定街区开一家酒吧，地理限制既限制了你的潜力，也保护了你免受竞争对手的影响，这个地理约束也有助于定义你的公司。酒吧+街区对小企业来说是一个足够的概念。同样，对于在（a）方面受限的公司也是如此。你的细分市场既保护你也定义了你。\n而如果你想创立一家创业公司，你可能必须想出一些相当新颖的东西。创业公司必须制造能够交付给大市场的东西，而这种类型的想法非常宝贵，所有显而易见的想法都已经被采用了。\n想法空间已经被彻底筛选过，以至于创业公司通常必须从事其他人都忽视的事情。我本想写必须要有意识地努力找到其他人都忽视的想法。但这并不是大多数创业公司的开始方式。通常成功的创业公司之所以成功，是因为创始人与其他人足够不同，以至于其他人很少能看到的想法对他们来说似乎显而易见。也许后来他们会退后一步，注意到他们找到了一个在其他人盲点中的想法，从那时起，他们会有意努力留在那里。[3] 但在成功的创业公司开始时，大部分创新都是无意识的。\n成功创始人的不同之处在于他们能看到不同的问题。既擅长技术又面临可以用技术解决的问题是一个特别好的组合，因为技术变化如此迅速，以前糟糕的想法往往在没有人注意到的情况下变成好主意。史蒂夫·沃兹尼亚克的问题是想要自己的计算机。在1975年，这是一个不寻常的问题。但技术变革即将使其成为一个更普遍的问题。因为他不仅想要一台计算机，而且知道如何制造它们，沃兹尼亚克能够为自己制造一台。他为自己解决的问题成为了苹果在未来几年为数百万人解决的问题。但到普通人明显这是一个大市场时，苹果已经建立了。\n谷歌有相似的起源。拉里·佩奇和谢尔盖·布林想要搜索网络。但与大多数人不同，他们既有技术专业知识能够注意到 …"
  },{
    "title": "创业公司最难学到的教训",
    "url": "/paul_graham/essays_zh/startuplessons/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创业公司最难学到的教训 2006年4月\n（本文源自2006年创业学校的一次演讲。）\n到目前为止，我们资助的创业公司反应都相当快，但他们在学习某些课程时似乎比其他课程更快。我认为这是因为创业公司的某些事情有点反直觉。\n我们现在已经投资了足够多的公司，以至于我学到了一个诀窍来判断哪些是反直觉的观点：那些是我必须不断重复的观点。\n所以我要给这些观点编号，也许对于未来的创业公司，我能够实现一种霍夫曼编码。我会让他们都读这篇文章，然后不用详细地唠叨他们，我就能说：第四点！\n1. 尽早发布。 我可能最常重复的这个创业秘诀是：尽快推出1.0版本，然后根据用户的反应来改进它。\n我说的\u0026quot;尽早发布\u0026quot;并不是指你应该发布一个充满bug的产品，而是说你应该发布一个最小化的产品。用户讨厌bug，但如果即将有更多功能推出，他们似乎不介意一个最小化的1.0版本。\n尽快完成1.0版本有几个好处。一个是，这本来就是编写软件的正确方式，无论是对创业公司还是其他情况。我从1993年就开始重复这个观点，至今没有看到太多与之矛盾的东西。我看到很多创业公司因为发布产品太慢而死亡，但没有一家是因为太快而死亡的。[1]\n当你构建出一个受欢迎的东西时，会让你感到惊讶的一件事是你不会了解你的用户。Reddit现在每月有近50万独立访客。这些人都是谁？他们不知道。没有网络创业公司知道。而且既然你不知道你的用户，猜测他们会喜欢什么是危险的。最好是发布一些东西，让他们来告诉你。\nWufoo牢记这一点，在底层数据库之前就发布了他们的表单构建器。你甚至还不能驱动这个东西，但已经有83,000人来坐在驾驶座上握着方向盘。Wufoo从中获得了宝贵的反馈：Linux用户抱怨他们使用了太多Flash，所以他们重写了软件不再使用Flash。如果他们等到一次性发布所有内容，就不会在问题更深层次植入之前发现它。\n即使你没有用户，快速发布仍然很重要，因为对于创业公司来说，初始版本就像一次试航。如果有什么重大问题——例如，想法不好，或者创始人互相憎恨——发布第一个版本的压力会暴露这些问题。如果你有这样的问题，你希望尽早发现它们。\n不过，尽早发布的最重要原因可能是它让你更努力地工作。当你在处理还没有发布的东西时，问题是有趣的。在已经发布的东西中，问题是令人担忧的。一旦你发布，就会有很多紧迫感。我认为这正是人们推迟发布的原因。他们知道一旦发布，就必须更努力地工作。[2]\n2. 不断推出新功能。 当然，\u0026ldquo;尽早发布\u0026quot;有第二个组成部分，没有它就是坏建议。如果你要从一个功能不多的东西开始，你最好快速改进它。\n我发现自己在重复的是\u0026quot;推出新功能\u0026rdquo;。而且这个规则不仅适用于初始阶段。这是所有创业公司在想要被视为创业公司的整个过程中都应该做的事情。\n当然，我并不是说你应该让你的应用程序变得越来越复杂。我说的\u0026quot;功能\u0026quot;是指一个单位的黑客工作——让用户生活变得更好的一个量子单位。\n就像锻炼一样，改进会带来更多的改进。如果你每天都跑步，你可能会感觉明天也想跑步。但如果你几周不跑步，要强迫自己出门会很费力。黑客工作也是如此：你实现的想法越多，你就会有更多的想法。你应该每隔一两天就以某种小方式改进你的系统。\n这不仅是完成开发工作的好方法；它也是一种营销形式。用户喜欢一个不断改进的网站。事实上，用户期望网站能够改进。想象一下，如果你访问一个看起来非常好的网站，两个月后再次访问，没有任何变化。它会不会开始显得很烂？[3]\n当你根据他们的评论做出改进时，他们会更加喜欢你，因为用户习惯于公司忽视他们。如果你是罕见的例外——一个真正倾听的公司——你会产生狂热的忠诚度。你不需要做广告，因为你的用户会为你做广告。\n这似乎也很明显，那么为什么我必须不断重复它？我认为这里的问题在于人们习惯了事物的现状。一旦产品过了有明显缺陷的阶段，你开始习惯它，逐渐地，它碰巧拥有的任何功能都成了它的身份。例如，我怀疑雅虎（或者谷歌）的很多人意识到网页邮件可以好多少，直到Paul Buchheit向他们展示。\n我认为解决方案是假设你制作的任何东西都远未达到它可能的程度。强迫自己，作为一种智力练习，不断思考改进。好吧，当然，你拥有的东西是完美的。但如果你必须改变什么，那会是什么？\n如果你的产品看起来已经完成了，有两种可能的解释：（a）它确实完成了，或者（b）你缺乏想象力。经验表明（b）的可能性要大一千倍。\n3. 让用户开心。 不断改进是一个更普遍规则的例子：让用户开心。所有创业公司的一个共同点是它们不能强迫任何人做任何事情。它们不能强迫任何人使用它们的软件，也不能强迫任何人与它们交易。创业公司必须为自己的生存而奋斗。这就是为什么成功的创业公司制造伟大的产品。它们必须这样做，否则就会死亡。\n当你经营一家创业公司时，你感觉自己就像一块被强风吹动的小碎片。最强大的风是用户。他们要么抓住你把你托到天空，就像他们对Google做的那样，要么让你平躺在人行道上，就像他们对大多数创业公司做的那样。用户是变化无常的风，但比任何其他风都更强大。如果他们把你托起来，没有竞争对手能让你倒下。\n作为一块小碎片，对你来说理性的做法不是平躺着，而是把自己卷成一个风能抓住的形状。\n我喜欢风的比喻，因为它提醒你流量是多么不个人化的。访问你网站的绝大多数人都是随意访客。你必须为他们设计你的网站。真正关心的人会自己找到他们想要的东西。\n普通的访客到达时手指会悬停在返回按钮上。想想你自己的经历：你点击的大多数链接都会导向一些平庸的东西。任何使用网络超过几周的人都被训练成在点击链接后点击返回。所以你的网站必须说\u0026quot;等等！不要点击返回。这个网站不烂。看看这个，例如。\u0026quot;\n要让人们停下来，你必须做两件事。最重要的是尽可能简洁地解释你的网站到底是关于什么的。你多久访问过一个网站，它似乎假设你已经知道他们是做什么的？例如，那个公司网站说公司为企业制作企业内容管理解决方案，使组织能够统一人员、内容和流程，以最小化商业风险，加速实现价值的时间并维持较低的总拥有成本。一个成熟的公司可能会逃脱这种不透明的描述，但没有创业公司可以。创业公司应该能够用一两句话准确解释它是做什么的。[4] 不仅是对用户。你需要这个给每个人：投资者、收购者、合作伙伴、记者、潜在员工，甚至是现有员工。你可能甚至不应该开始一个不能用一两句话令人信服地描述的公司。\n我重复的另一件事是立即把你拥有的一切都给人们。如果你有什么令人印象深刻的东西，试着把它放在首页，因为那是大多数访客唯一会看到的页面。尽管这里有一个悖论：你越把好东西推向前面，访客就越有可能进一步探索。[5]\n在最好的情况下，这两个建议会结合起来：你通过向访客展示来告诉他们你的网站是关于什么的。小说写作中的标准建议之一是\u0026quot;展示，不要讲述\u0026quot;。不要说一个角色很生气；让他咬紧牙关，或者把铅笔折成两半。没有什么比使用你的网站能更好地解释它的功能。\n这里的行业术语是\u0026quot;转化\u0026quot;。你网站的工作是把随意访客转化为用户——无论你对用户的定义是什么。你可以在你的增长率中衡量这一点。要么你的网站开始流行，要么没有，你必须知道是哪一种。如果你有像样的增长，最终你会获胜，无论你现在多么默默无闻。如果你没有，你需要修复一些东西。\n4. 担心正确的事情。 我发现自己经常说的另一件事是\u0026quot;不要担心\u0026quot;。实际上，更常见的是\u0026quot;不要担心这个；而是担心那个\u0026quot;。创业公司有偏执狂是对的，但有时他们担心的是错误的事情。\n大多数可见的灾难并不像看起来那么令人担忧。灾难在创业公司中是正常的：一个创始人退出，你发现了一项涵盖你正在做的事情的专利，你的服务器不断崩溃，你遇到了一个无法解决的技术问题，你必须改变你的名字，一笔交易失败——这些都是家常便饭。除非你让它们，否则它们不会杀死你。\n大多数竞争对手也不会。很多创业公司担心\u0026quot;如果Google构建类似我们的东西怎么办？\u0026ldquo;实际上大公司不是你必须担心的——甚至Google也不是。Google的人很聪明，但不比你更聪明；他们的动力不那么强，因为如果这个产品失败了，Google不会倒闭；即使在Google，他们也有很多官僚主义来拖慢他们。\n作为创业公司，你应该担心的不是现有的玩家，而是你还不知道存在的其他创业公司。他们比Google危险得多，因为，像你一样，他们是陷入困境的动物。\n只看现有的竞争对手可能会给你一种虚假的安全感。你应该与别人可能正在做的事情竞争，而不仅仅是你能看到人们正在做的事情。一个推论是，即使你还没有可见的竞争对手，也不应该放松。无论你的想法是什么，总有其他人在那里研究同样的事情。\n这就是现在更容易创业的缺点：更多人在做这件事。但我不同意Caterina Fake的观点，她说这使得现在不是一个开始创业的好时机。更多人在开始创业，但没有可能有的那么多。大多数大学毕业生仍然认为他们必须找一份工作。普通人不会忽略从三岁起就被灌输到头脑中的东西，仅仅是因为提供网页最近变得便宜多了。\n无论如何，竞争对手都不是最大的威胁。比被竞争对手压垮更多的创业公司是自己把自己搞砸的。有很多方法可以做到，但主要的三个是内部纠纷、惯性和忽视用户。每一个本身就足以杀死你。但如果我必须选择最糟糕的，那就是忽视用户。如果你想要一个注定要死亡的创业公司的秘诀，就是这个：几个创始人有一些他们知道每个人都会喜欢的伟大想法，这就是他们要构建的，无论发生什么。\n几乎每个人的初始计划都是有缺陷的。如果公司坚持他们的初始计划，微软会在销售编程语言，苹果会在销售印刷电路板。在这两种情况下，他们的客户都告诉他们他们的业务应该是什么——而且他们足够聪明，听取了他们的意见。\n正如理查德·费曼所说，自然的想象力比人的想象力更伟大。通过观察世界，你会找到比你仅仅通过思考就能产生的更有趣的事情。这个原则非常强大。这就是为什么最好的抽象绘画仍然达不到列奥纳多的水平，例如。这也适用于创业公司。没有任何产品想法能像通过将一系列原型与一系列用户碰撞所能发现的那样聪明。\n5. 承诺是自我实现的预言。 我现在有足够的创业经验，可以说创业创始人最重要的品质是什么，这可能不是你想的那样。创业创始人最重要的品质是决心。不是智力——是决心。\n这有点令人沮丧。我宁愿相信Viaweb成功是因为我们聪明，而不仅仅是有决心。创业世界的很多人想要相信这一点。不仅是创始人，投资者也是。他们喜欢居住在一个由智力统治的世界。你可以看出他们真的相信这一点，因为它影响了他们的投资决策。\n风险投资家一次又一次地投资于著名教授创立的创业公司。这在生物技术领域可能有效，那里的很多创业公司只是将现有研究商业化，但在软件领域，你想投资的是学生，而不是教授。微软、雅虎和谷歌都是由辍学生创建的。学生在经验上缺乏的，他们在奉献精神上绰绰有余。\n当然，如果你想变得富有，仅仅有决心是不够的。你也必须聪明，对吗？我愿意这么认为，但我有过一个经历让我相信了这一点：我在纽约生活了几年。\n你在智力部门失去很多不会杀死你。但即使在承诺部门失去一点点，那也会很快杀死你。\n经营一家创业公司就像用手走路：这是可能的，但它需要非凡的努力。如果一个普通员工被要求做创业创始人必须做的事情，他会非常愤怒。想象一下，如果你被雇佣到某个大公司，除了编写比你以前必须做的快十倍的软件外，他们还期望你回答支持电话、管理服务器、设计网站、冷电话潜在客户、找到公司办公空间，并出去为每个人买午餐。\n而且，这一切不是在大公司平静、子宫般的环境中，而是在不断灾难的背景下发生的。这才是真正需要决心的地方。在创业公司，总有一些灾难在发生。所以，如果你有哪怕一点倾向找借口退出，那里总有一个合适的借口。\n但如果你缺乏承诺，很可能在你实际退出之前它就已经在伤害你了。每个与创业公司打交道的人都知道承诺有多重要，所以如果他们感觉你犹豫不决，他们不会给你太多关注。如果你缺乏承诺，你会发现出于某种神秘的原因，好事发生在你的竞争对手身上，而不是你身上。如果你缺乏承诺，你会觉得你很不幸。\n而如果你决心坚持下去，人们会关注你，因为很可能他们以后必须与你打交道。你是本地人，而不仅仅是游客，所以每个人都必须与你达成协议。\n在Y Combinator，我们有时错误地资助了那些态度的团队，他们要给这个创业公司的事情尝试三个月，如果有什么伟大的事情发生，他们会坚持下去——\u0026ldquo;伟大的事情\u0026quot;意味着要么有人想收购他们，要么有人投资数百万美元在他们身上。但如果这是你的态度，\u0026ldquo;伟大的事情\u0026quot;不太可能发生在你身上，因为收购者和投资者都根据你的承诺水平来判断你。\n如果收购者认为无论发生什么你都会坚持下去，他们更可能收购你，因为如果他们不收购而你坚持下去，你可能会成长，你的价格会上涨，他们会后悔没有早点收购你。投资者也是如此。真正激励投资者的，甚至是大风险投资公司，不是好回报的希望，而是错失机会的恐惧。[6] 所以如果你清楚地表明无论发生什么你都会成功，你需要他们的唯一原因是让它更快发生，你更有可能获得资金。\n你不能伪造这个。让每个人都相信你准备好战斗到死亡的唯一方法实际上是准备好。\n不过，你必须是对的那种决心。我仔细选择了决心而不是固执这个词，因为固执在创业公司中是灾难性的品质。你必须有决心，但要灵活，就像跑卫一样。一个成功的跑卫不只是低下头试图穿过人们。他即兴发挥：如果有人出现在他面前，他会绕过他们；如果有人试图抓住他，他会从他们的抓握中挣脱出来；他甚至会暂时朝错误的方向跑，如果那有帮助的话。他永远不会做的一件事是站着不动。[7]\n",
    "description": "",
    "tags": ["创业公司","教训","企业家精神","商业","建议"],
    "categories": [],
    "content": "→ English Version\n创业公司最难学到的教训 2006年4月\n（本文源自2006年创业学校的一次演讲。）\n到目前为止，我们资助的创业公司反应都相当快，但他们在学习某些课程时似乎比其他课程更快。我认为这是因为创业公司的某些事情有点反直觉。\n我们现在已经投资了足够多的公司，以至于我学到了一个诀窍来判断哪些是反直觉的观点：那些是我必须不断重复的观点。\n所以我要给这些观点编号，也许对于未来的创业公司，我能够实现一种霍夫曼编码。我会让他们都读这篇文章，然后不用详细地唠叨他们，我就能说：第四点！\n1. 尽早发布。 我可能最常重复的这个创业秘诀是：尽快推出1.0版本，然后根据用户的反应来改进它。\n我说的\u0026quot;尽早发布\u0026quot;并不是指你应该发布一个充满bug的产品，而是说你应该发布一个最小化的产品。用户讨厌bug，但如果即将有更多功能推出，他们似乎不介意一个最小化的1.0版本。\n尽快完成1.0版本有几个好处。一个是，这本来就是编写软件的正确方式，无论是对创业公司还是其他情况。我从1993年就开始重复这个观点，至今没有看到太多与之矛盾的东西。我看到很多创业公司因为发布产品太慢而死亡，但没有一家是因为太快而死亡的。[1]\n当你构建出一个受欢迎的东西时，会让你感到惊讶的一件事是你不会了解你的用户。Reddit现在每月有近50万独立访客。这些人都是谁？他们不知道。没有网络创业公司知道。而且既然你不知道你的用户，猜测他们会喜欢什么是危险的。最好是发布一些东西，让他们来告诉你。\nWufoo牢记这一点，在底层数据库之前就发布了他们的表单构建器。你甚至还不能驱动这个东西，但已经有83,000人来坐在驾驶座上握着方向盘。Wufoo从中获得了宝贵的反馈：Linux用户抱怨他们使用了太多Flash，所以他们重写了软件不再使用Flash。如果他们等到一次性发布所有内容，就不会在问题更深层次植入之前发现它。\n即使你没有用户，快速发布仍然很重要，因为对于创业公司来说，初始版本就像一次试航。如果有什么重大问题——例如，想法不好，或者创始人互相憎恨——发布第一个版本的压力会暴露这些问题。如果你有这样的问题，你希望尽早发现它们。\n不过，尽早发布的最重要原因可能是它让你更努力地工作。当你在处理还没有发布的东西时，问题是有趣的。在已经发布的东西中，问题是令人担忧的。一旦你发布，就会有很多紧迫感。我认为这正是人们推迟发布的原因。他们知道一旦发布，就必须更努力地工作。[2]\n2. 不断推出新功能。 当然，\u0026ldquo;尽早发布\u0026quot;有第二个组成部分，没有它就是坏建议。如果你要从一个功能不多的东西开始，你最好快速改进它。\n我发现自己在重复的是\u0026quot;推出新功能\u0026rdquo;。而且这个规则不仅适用于初始阶段。这是所有创业公司在想要被视为创业公司的整个过程中都应该做的事情。\n当然，我并不是说你应该让你的应用程序变得越来越复杂。我说的\u0026quot;功能\u0026quot;是指一个单位的黑客工作——让用户生活变得更好的一个量子单位。\n就像锻炼一样，改进会带来更多的改进。如果你每天都跑步，你可能会感觉明天也想跑步。但如果你几周不跑步，要强迫自己出门会很费力。黑客工作也是如此：你实现的想法越多，你就会有更多的想法。你应该每隔一两天就以某种小方式改进你的系统。\n这不仅是完成开发工作的好方法；它也是一种营销形式。用户喜欢一个不断改进的网站。事实上，用户期望网站能够改进。想象一下，如果你访问一个看起来非常好的网站，两个月后再次访问，没有任何变化。它会不会开始显得很烂？[3]\n当你根据他们的评论做出改进时，他们会更加喜欢你，因为用户习惯于公司忽视他们。如果你是罕见的例外——一个真正倾听的公司——你会产生狂热的忠诚度。你不需要做广告，因为你的用户会为你做广告。\n这似乎也很明显，那么为什么我必须不断重复它？我认为这里的问题在于人们习惯了事物的现状。一旦产品过了有明显缺陷的阶段，你开始习惯它，逐渐地，它碰巧拥有的任何功能都成了它的身份。例如，我怀疑雅虎（或者谷歌）的很多人意识到网页邮件可以好多少，直到Paul Buchheit向他们展示。\n我认为解决方案是假设你制作的任何东西都远未达到它可能的程度。强迫自己，作为一种智力练习，不断思考改进。好吧，当然，你拥有的东西是完美的。但如果你必须改变什么，那会是什么？\n如果你的产品看起来已经完成了，有两种可能的解释：（a）它确实完成了，或者（b）你缺乏想象力。经验表明（b）的可能性要大一千倍。\n3. 让用户开心。 不断改进是一个更普遍规则的例子：让用户开心。所有创业公司的一个共同点是它们不能强迫任何人做任何事情。它们不能强迫任何人使用它们的软件，也不能强迫任何人与它们交易。创业公司必须为自己的生存而奋斗。这就是为什么成功的创业公司制造伟大的产品。它 …"
  },{
    "title": "创业公司真实情况",
    "url": "/paul_graham/essays_zh/really/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创业公司真实情况 2009年10月\n（本文源于2009年创业学校的演讲。）\n我不确定在创业学校上该讲什么，所以我决定问问我们资助的创业公司的创始人。我还没有写过什么？\n我处于一个不寻常的位置，能够测试我写的关于创业公司的文章。我希望关于其他主题的文章是正确的，但我没有办法测试它们。关于创业公司的文章每6个月由大约70人测试。\n所以我给所有创始人发了一封电子邮件，询问他们在创业过程中让他们感到惊讶的事情。这相当于问我哪里错了，因为如果我解释得足够好，任何事都不应该让他们感到惊讶。\n我很自豪地报告，我收到一个回应说：最让我惊讶的是，一切都相当可预测！坏消息是，我收到了100多个其他回应，列出了他们遇到的惊讶。\n回应中有非常清晰的模式；令人惊讶的是，多个人经常因为完全相同的事情而感到惊讶。以下是最大的几个：\n1. 谨慎选择联合创始人 这是最多创始人提到的惊讶。有两种回应：你必须小心选择谁作为你的联合创始人，而且你必须努力维护你们的关系。\n人们在选择联合创始人时希望自己更关注的是品格和承诺，而不是能力。这对于失败的创业公司尤其如此。教训是：不要选择会退缩的联合创始人。\n一个典型的回应是：除非你与某人在创业公司一起工作过，否则你没有看到过他们的真实面目。品格如此重要的原因是它在大多数情况下受到更严峻的考验。一个创始人明确表示创始人之间的关系比能力更重要：我宁愿与朋友一起创办创业公司，也不愿与产出更高的陌生人一起。创业公司如此艰难和情感化，以至于友谊带来的情感和社会支持超过了失去的额外产出。我们很早就学到了这个教训。如果你看YC申请表，关于创始人的承诺和关系的问题比他们能力的问题多。\n成功的创业公司创始人较少谈论选择联合创始人，更多谈论他们如何努力维护他们的关系。让我感到惊讶的一件事是创业公司创始人之间的关系如何从友谊变成婚姻。我与我的联合创始人的关系从仅仅是朋友变成整天见面，为财务烦恼和清理烂摊子。而创业公司是我们的孩子。我曾经这样总结：\u0026ldquo;就像我们结婚了，但我们没有性关系。\u0026ldquo;好几个人用了\u0026quot;结婚\u0026quot;这个词。这是一种比你通常在同事之间看到的更强烈的关系——部分是因为压力大得多，部分是因为最初创始人就是整个公司。所以这种关系必须用优质材料建造并仔细维护。这是一切的基础。\n2. 创业公司占据你的生活 正如联合创始人之间的关系比通常同事之间的关系更强烈一样，创始人和公司之间的关系也是如此。经营创业公司不像有工作或当学生，因为它永远不会停止。这对大多数人的经验来说是如此陌生，以至于他们直到发生才理解。[1]\n我没有意识到我会几乎每一刻醒着的时间都在工作或思考我们的创业公司。当这是你的公司而不是为别人的公司工作时，你进入了一种完全不同的生活方式。创业公司的快节奏加剧了这一点，这使得时间似乎变慢了：让我感到最惊讶的是一个人对时间的看法如何转变。在我们的创业公司工作时，我记得时间似乎拉长了，以至于一个月是一个巨大的间隔。在最好的情况下，完全沉浸可能令人兴奋：令人惊讶的是你被创业公司消耗了多少，你日夜思考它，但一次都不觉得像\u0026quot;工作\u0026rdquo;。不过我必须说，这句话是我们今年夏天资助的一个人说的。几年后他可能不会听起来那么精神。\n3. 这是情感过山车 这是另一个人感到惊讶的事情。起伏比他们准备的更极端。\n在创业公司，事情在某一刻看起来很棒，下一刻就无望了。我说下一刻，是指几小时后。情感的起伏对我来说是最大的惊讶。有一天，我们会把自己想象成下一个谷歌，梦想购买岛屿；第二天，我们会思考如何让我们所爱的人知道我们的彻底失败；如此反复。显然，困难的部分是低谷。对于许多创始人来说，这是大的惊讶：在困难的日子或周里保持每个人的积极性是多么困难，即低谷可以有多低。过了一段时间，如果你没有显著的成功来让你振作，它会让你筋疲力尽：你对创始人的最基本建议是\u0026quot;只是不要死\u0026rdquo;，但在缺乏令人解脱的成功的情况下保持公司运转的能量不是免费的；它是从创始人自身抽取的。你能承受的是有限度的。如果你到了不能再工作的地步，这不是世界末日。许多著名创始人在路上也有一些失败。\n4. 它可以是有趣的 好消息是，高潮也非常高。几个创始人说，做创业公司最让他们惊讶的是它多么有趣：我认为你遗漏了做创业公司是多么有趣。我在工作中比我几乎所有没有开公司的朋友都更有成就感。他们最喜欢的是自由：令我惊讶的是，做一些具有挑战性和创造性的事情，一些我相信的事情，感觉比以前做的雇佣枪手式工作好多少。我知道它会感觉更好；令人惊讶的是好多少。坦率地说，如果我在这里误导了人们，我不急于纠正。我宁愿让每个人都认为创业公司是严峻和艰难的，也不愿创始人期望它有趣，几个月后说\u0026quot;这应该是有趣的？你在开玩笑吗？\u0026quot;\n事实是，对大多数人来说不会有趣。我们在申请过程中试图做的大部分事情是筛选出不会喜欢它的人，既为我们自己也为他们。\n最好的说法可能是，创业公司有趣的方式就像生存训练课程如果你是那种人会那样有趣。也就是说，如果你不是那种人，就一点也不有趣。\n5. 毅力是关键 许多创始人对毅力在创业公司中的重要性感到惊讶。这既是负面也是正面的惊讶：他们对所需的毅力程度感到惊讶，每个人都说你必须多么坚定和有韧性，但经历它让我意识到所需的坚定仍然被低估了。也对毅力单独能够消除障碍的程度感到惊讶：如果你有毅力，即使是看起来超出你控制的问题（即移民）似乎也能自行解决。几个创始人特别提到毅力比智力重要多少。我一再惊讶于毅力比原始智力重要多少。这不仅适用于智力，也适用于一般能力，这就是为什么那么多人在选择联合创始人时说品格更重要。\n6. 长期思考 你需要毅力，因为一切都比你预期的需要更长时间。许多人对此感到惊讶。我一直对一切可能需要多长时间感到惊讶。假设你的产品没有经历很少有产品经历的爆炸性增长，从开发到交易（尤其是交易）的一切似乎总是比我想象的要长2-3倍。\n创始人感到惊讶的一个原因是，因为他们工作得快，他们期望其他人也这样。在创业公司触及更官僚的组织，如大公司或风险投资基金的每一点，都有令人震惊的剪切应力。这就是为什么融资和企业市场杀死和伤害这么多创业公司的原因。[2]\n但我认为大多数创始人对所需时间感到惊讶的原因是他们过于自信。他们认为他们会立即成功，像YouTube或Facebook一样。你告诉他们只有100个成功的创业公司中有1个有这样的轨迹，他们都认为\u0026quot;我们将是那1个\u0026quot;。\n也许他们会听一个更成功的创始人：进入创业公司之前我没有理解的最重要的事情是毅力是游戏的名称。对于绝大多数变得成功的创业公司，这将是一个非常漫长的旅程，至少3年，可能5年以上。\n长期思考有积极的一面。不仅仅是你必须屈从于一切都比应该的要花更长时间的事实。如果你耐心地工作，压力更小，你可以做得更好：因为我们放松，做我们做的事情有趣得多。消失的是由不要失败的迫切需求驱动的尴尬紧张能量指导我们的行动。我们可以专注于做对我们公司、产品、员工和客户最好的事情。这就是为什么当你达到拉面盈利时事情变得好得多。你可以转换到不同的工作模式。\n7. 许多小事 我们经常强调创业公司很少仅仅因为碰上某种神奇的想法而获胜。我认为创始人现在把这个记在脑子里了。但许多人惊讶地发现这也适用于创业公司内部。你必须做许多不同的事情：它更像苦差事而不是光鲜。随机选择的时间片段更可能发现我在瑞典Windows上追踪奇怪的DLL加载错误，或在董事会会议前一天晚上在财务模型Excel电子表格中追踪错误，而不是拥有战略洞察力的辉煌闪光。大多数黑客创始人喜欢把所有时间花在编程上。你不会，除非你失败了。这可以转化为：如果你把所有时间花在编程上，你将会失败。\n这个原则甚至延伸到编程中。很少有单一的聪明技巧能确保成功：我学会永远不要赌任何一个功能或交易或任何东西能给你带来成功。从来不是单一的东西。一切都只是渐进的，你只需继续做许多这样的事情，直到你碰到什么。即使在聪明的技巧让你发财的罕见情况下，你可能后来才知道：没有所谓的杀手功能。或者至少你不知道它是什么。所以最好的策略是尝试许多不同的事情。不要把所有鸡蛋放在一个篮子里的原因不是通常的原因，即使当你知道哪个篮子最好时也适用。在创业公司中，你甚至不知道那个。\n8. 从最小化的东西开始 许多创始人提到用最简单可能的东西启动是多么重要。此时每个人都知道你应该快速发布和迭代。这在YC几乎是一种口头禅。但即使如此，许多人似乎因为不这样做而受到伤害：构建可以被视为完整应用程序的绝对最小化东西并发布它。\n为什么人们在第一个版本上花太长时间？主要是骄傲。他们讨厌发布可以更好的东西。他们担心人们会说什么。但你必须克服这个：乍一看做\u0026quot;简单\u0026quot;的事情并不意味着你没有在做有意义、可防御或有价值的事情。不要担心人们会说什么。如果你的第一个版本如此令人印象深刻以至于巨魔不开玩笑，你发布太晚了。[3]\n一个创始人说这应该是你所有编程的方法，不仅仅是创业公司，我倾向于同意。现在，当编程时，我试图思考\u0026quot;我如何写这个，如果人们看到我的代码，他们会惊讶于代码如此之少和做的事情如此之少？\u0026ldquo;过度工程化是有毒的。不像为了额外学分做额外工作。它更像说一个谎言，然后你必须记住它，以便你不会自相矛盾。\n9. 吸引用户 产品开发是与用户的对话，直到你发布才真正开始。在你发布之前，你就像一个警察艺术家在他向证人展示第一版素描之前。\n快速发布如此重要，以至于最好将你的初始版本视为让用户开始与你交谈的技巧，而不是产品。我学会将创业公司的初始阶段视为一个巨大的实验。所有产品都应被视为实验，那些有市场的产品会极其迅速地显示出有希望的结果。一旦你开始与用户交谈，我保证你会对他们告诉你的事情感到惊讶。当你让客户告诉你他们在追求什么时，他们经常会揭示惊人的细节，关于他们发现什么有价值以及他们愿意为什么付钱。惊讶通常是积极的也是消极的。他们不会喜欢你构建的东西，但会有其他他们喜欢的东西，实现起来会非常容易。直到你通过发布错误的东西开始对话，他们才能表达（或甚至意识到）他们在寻找什么。\n10. 改变你的想法 要从与用户互动中受益，你必须愿意改变你的想法。我们总是鼓励创始人将创业公司想法视为假设而不是蓝图。然而，他们仍然惊讶于改变想法的效果有多好。通常如果你抱怨某事很难，一般建议是更努力工作。对于创业公司，我认为你应该找到一个对你来说容易解决的问题。在解决方案空间中优化是熟悉和直接的，但你可以在问题空间中玩耍获得巨大的收益。而仅仅是决心，没有灵活性，是一个贪婪的算法，可能不会给你带来比平庸的局部最大值更多的东西：当一个人坚定时，仍然有危险他们会遵循一条漫长而艰难的道路，最终无处可去。你想向前推进，但同时扭动和转向以找到最有希望的道路。一个创始人非常简洁地表达：快速迭代是成功的关键。\n这个建议如此难遵循的一个原因是人们没有意识到判断创业公司想法有多难，特别是他们自己的想法。有经验的创始人学会保持开放的心态：现在我不嘲笑想法了，因为我意识到我在知道它们是否好方面多么糟糕。你永远不知道什么会有效。你只需在每个点做似乎最好的事情。我们对YC本身也这样做。我们仍然不知道它是否会工作，但它似乎像一个不错的假设。\n11. 不要担心竞争对手 当你认为你有一个伟大的想法时，这有点像对某事有负罪感。某人只需要对你好笑，你就想\u0026quot;哦天哪，他们知道了。\u0026rdquo;\n这些警报几乎总是错误的：乍看似乎像竞争对手和威胁的公司，当你真正看时通常从来都不是。即使他们在同一领域运作，他们也有不同的目标。人们对竞争对手过度反应的一个原因是他们高估想法。如果想法真的是关键，有相同想法的竞争对手将是真正的威胁。但通常是执行最重要：看到新竞争对手出现引起的所有恐慌几周后都被忘记了。总是归结为你自己的产品和市场方法。即使竞争对手获得很多关注，这通常也是真的。骑在许多好的博客感知上的竞争对手并不是真正的赢家，可以很快从地图上消失。你毕竟需要消费者。炒作不会制造满意的用户，至少对于像技术这样复杂的东西不会。\n12. 获得用户很难 不过，许多创始人抱怨获得用户有多难。我不知道需要多少时间和精力去获得用户。这是一个复杂的话题。当你不能获得用户时，很难说问题是缺乏曝光，还是产品简单就是坏的。即使是好产品也可能被切换或集成成本阻挡：让人们使用新服务是极其困难的。对于其他公司可以使用的产品尤其如此，因为它需要他们的开发者做工作。如果你很小，他们认为这不紧急。[4] 对YC最尖锐的批评来自一个创始人，说我们没有足够关注客户获取：YC宣扬\u0026quot;做人们想要的东西\u0026quot;作为一项工程任务，一个永不结束的功能流，直到足够的人满意并且应用程序起飞。对客户获取成本的关注很少。这可能是真的；这可能是我需要修复的东西，特别是对于像游戏这样的应用程序。如果你做的东西挑战主要是技术性的，你可以依靠口碑，就像Google那样。一个创始人惊讶于那对他有多有效：有一种非理性的恐惧，没有人会买你的产品。但如果你努力并逐步使其更好，就没有必要担心。但对于其他类型的创业公司，你可能通过功能和交易和营销赢得更少。\n13. 对交易期望最坏 交易失败。这是创业世界的常数。创业公司是无力的，好的创业公司想法通常似乎是错误的。所以每个人都对与你关闭交易感到紧张，你没有办法让他们这样做。\n对于投资者尤其如此：回想起来，如果我们假设我们永远不会得到任何额外的外部投资运作，那会好得多。那会让我们专注于早期找到收入流。我的建议一般是悲观的。假设你不会得到钱，如果有人确实提供给你任何，假设你永远不会得到任何更多。如果有人提供给你钱，接受它。你经常这么说，但我认为它需要更多强调。我们有机会比去年筹集更多的钱，我希望我们这样做了。\n为什么创始人忽视我？主要是因为他们天生乐观。错误是对你无法控制的事情乐观。无论如何对你能够做出伟大的东西的能力要乐观。但如果你对大公司或投资者乐观，你就是在自找麻烦。\n14. 投资者一无所知 许多创始人提到他们对投资者的一无所知感到惊讶：他们甚至不知道他们投资的东西。我遇到了一些投资了硬件设备的投资者，当我要求他们演示设备时，他们很难打开它。天使投资者比风险投资家好一点，因为他们通常自己有创业经验：风险投资家不知道他们在谈论什么的一半时间，他们的思想落后几年。几个是伟大的，但我们处理的95%的投资者不专业，似乎不是很擅长商业或有任何创意愿景。天使投资者通常好谈得多。\n",
    "description": "",
    "tags": ["创业","创始人","企业家","毅力","联合创始人","情感","经验"],
    "categories": [],
    "content": "→ English Version\n创业公司真实情况 2009年10月\n（本文源于2009年创业学校的演讲。）\n我不确定在创业学校上该讲什么，所以我决定问问我们资助的创业公司的创始人。我还没有写过什么？\n我处于一个不寻常的位置，能够测试我写的关于创业公司的文章。我希望关于其他主题的文章是正确的，但我没有办法测试它们。关于创业公司的文章每6个月由大约70人测试。\n所以我给所有创始人发了一封电子邮件，询问他们在创业过程中让他们感到惊讶的事情。这相当于问我哪里错了，因为如果我解释得足够好，任何事都不应该让他们感到惊讶。\n我很自豪地报告，我收到一个回应说：最让我惊讶的是，一切都相当可预测！坏消息是，我收到了100多个其他回应，列出了他们遇到的惊讶。\n回应中有非常清晰的模式；令人惊讶的是，多个人经常因为完全相同的事情而感到惊讶。以下是最大的几个：\n1. 谨慎选择联合创始人 这是最多创始人提到的惊讶。有两种回应：你必须小心选择谁作为你的联合创始人，而且你必须努力维护你们的关系。\n人们在选择联合创始人时希望自己更关注的是品格和承诺，而不是能力。这对于失败的创业公司尤其如此。教训是：不要选择会退缩的联合创始人。\n一个典型的回应是：除非你与某人在创业公司一起工作过，否则你没有看到过他们的真实面目。品格如此重要的原因是它在大多数情况下受到更严峻的考验。一个创始人明确表示创始人之间的关系比能力更重要：我宁愿与朋友一起创办创业公司，也不愿与产出更高的陌生人一起。创业公司如此艰难和情感化，以至于友谊带来的情感和社会支持超过了失去的额外产出。我们很早就学到了这个教训。如果你看YC申请表，关于创始人的承诺和关系的问题比他们能力的问题多。\n成功的创业公司创始人较少谈论选择联合创始人，更多谈论他们如何努力维护他们的关系。让我感到惊讶的一件事是创业公司创始人之间的关系如何从友谊变成婚姻。我与我的联合创始人的关系从仅仅是朋友变成整天见面，为财务烦恼和清理烂摊子。而创业公司是我们的孩子。我曾经这样总结：\u0026ldquo;就像我们结婚了，但我们没有性关系。\u0026ldquo;好几个人用了\u0026quot;结婚\u0026quot;这个词。这是一种比你通常在同事之间看到的更强烈的关系——部分是因为压力大得多，部分是因为最初创始人就是整个公司。所以这种关系必须用优质材料建造并仔细维护。这是一切的基础。\n2. 创业公司占据你的生活 正如联合创始人之间的关系比通常同事之间的关系更强烈一样，创始人和公司之间的关系也是如此。经营创业公司不像有工作或当学生，因为它永远不会停止。这对大多数人的经验来说是如此陌生，以至于他们直到发生才理解。[1]\n我没有意识到我会几乎每一刻醒着的时间都在工作或思考我们的创业公司。当这是你的公司而不是为别人的公司工作时，你进入了一种完全不同的生活方式。创业公司的快节奏加剧了这一点，这使得时间似乎变慢了：让我感到最惊讶的是一个人对时间的看法如何转变。在我们的创业公司工作时，我记得时间似乎拉长了，以至于一个月是一个巨大的间隔。在最好的情况下，完全沉浸可能令人兴奋：令人惊讶的是你被创业公司消耗了多少，你日夜思考它，但一次都不觉得像\u0026quot;工作\u0026rdquo;。不过我必须说，这句话是我们今年夏天资助的一个人说的。几年后他可能不会听起来那么精神。\n3. 这是情感过山车 这是另一个人感到惊讶的事情。起伏比他们准备的更极端。\n在创业公司，事情在某一刻看起来很棒，下一刻就无望了。我说下一刻，是指几小时后。情感的起伏对我来说是最大的惊讶。有一天，我们会把自己想象成下一个谷歌，梦想购买岛屿；第二天，我们会思考如何让我们所爱的人知道我们的彻底失败；如此反复。显然，困难的部分是低谷。对于许多创始人来说，这是大的惊讶：在困难的日子或周里保持每个人的积极性是多么困难，即低谷可以有多低。过了一段时间，如果你没有显著的成功来让你振作，它会让你筋疲力尽：你对创始人的最基本建议是\u0026quot;只是不要死\u0026rdquo;，但在缺乏令人解脱的成功的情况下保持公司运转的能量不是免费的；它是从创始人自身抽取的。你能承受的是有限度的。如果你到了不能再工作的地步，这不是世界末日。许多著名创始人在路上也有一些失败。\n4. 它可以是有趣的 好消息是，高潮也非常高。几个创始人说，做创业公司最让他们惊讶的是它多么有趣：我认为你遗漏了做创业公司是多么有趣。我在工作中比我几乎所有没有开公司的朋友都更有成就感。他们最喜欢的是自由：令我惊讶的是，做一些具有挑战性和创造性的事情，一些我相信的事情，感觉比以前做的雇佣枪手式工作好多少。我知道它会感觉更好；令人惊讶的是好多少。坦率地说，如果我在这里误导了人们，我不急于纠正。我宁愿让每个人都认为创业公司是严峻和艰难的，也不愿创始人期望它有趣，几个月后说\u0026quot;这应该是有趣的？你在开玩笑 …"
  },{
    "title": "创业公司融资的未来",
    "url": "/paul_graham/essays_zh/future/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English version\n创业公司融资的未来 想创办创业公司？获得 Y Combinator 的资助。\n2010年8月\n两年前我写到了我称之为\u0026quot;创业公司融资中一个巨大的、未开发的机会\u0026quot;：风险投资者与他们当前商业模式要求他们投资大笔资金，以及一类需要比以前更少资金的大型创业公司之间日益增长的不匹配。越来越多的创业公司想要几十万美元，而不是几百万。[1]\n这个机会现在未开发的程度要小得多。投资者从两个方向涌入这个领域。风险投资者比一年前更可能进行天使规模的投资。与此同时，过去一年看到了新型投资者的急剧增加：超级天使，他们像天使一样运作，但使用其他人的钱，像风险投资者一样。\n虽然许多投资者正在进入这个领域，但仍有更多空间。投资者的分布应该反映创业公司的分布，这具有通常的幂律下降。所以投资几十万或几十万的人应该比投资几百万的人多得多。[2]\n事实上，有更多人进行天使规模的交易对天使投资者可能是好事，因为如果天使轮变得更合法，那么即使创业公司可以，如果他们愿意，从风险投资者那里筹集 A 轮融资，他们也可能开始选择天使轮。创业公司偏爱 A 轮融资的原因之一是它们更有声望。但如果天使投资者变得更加活跃和知名，他们将越来越多地能够在品牌上与风险投资者竞争。\n当然，声望不是偏爱 A 轮融资的主要原因。创业公司在 A 轮融资中可能会比在天使轮中得到投资者更多的关注。所以如果一个创业公司在天使轮和好的风险投资基金的 A 轮之间选择，我通常建议他们选择 A 轮。[3]\n但是，虽然 A 轮融资不会消失，我认为风险投资者应该比超级天使更担心，而不是相反。尽管他们的名字，超级天使实际上是迷你风险投资基金，他们显然把现有的风险投资者作为目标。\n他们似乎有历史站在他们这边。这里的模式似乎与创业公司和成熟公司进入新市场时我们看到的相同。在线视频成为可能，YouTube 直接冲进去，而现有媒体公司只是半心半意地接受它，更多的是由恐惧而不是希望驱动，更多的是为了保护自己的地盘而不是为用户做伟大的事情。PayPal 也是如此。这个模式重复了一遍又一遍，通常是入侵者获胜。在这种情况下，超级天使是入侵者。天使轮是他们的整个业务，就像在线视频对 YouTube 一样。而进行天使投资的风险投资者主要这样做是为了为 A 轮融资产生交易流。[4]\n另一方面，创业投资是一个非常奇怪的生意。几乎所有的回报都集中在几个大赢家身上。如果超级天使仅仅未能投资于（并在某种程度上产生）大赢家，即使他们投资于所有其他公司，他们也会倒闭。\n风险投资者 为什么风险投资者不开始进行更小的 A 轮融资？症结在于董事会席位。在传统的 A 轮融资中，负责交易的合伙人会在创业公司的董事会中占有一席之地。如果我们假设平均创业公司运行6年，一个合伙人可以同时承受12个董事会席位，那么一个风险投资基金可以每年每个合伙人进行2笔 A 轮交易。\n在我看来，解决方案一直是担任更少的董事会席位。你不必在董事会中帮助创业公司。也许风险投资者觉得他们需要董事会成员带来的权力来确保他们的钱不被浪费。但他们检验过那个理论吗？除非他们尝试不担任董事会席位并发现他们的回报更低，否则他们没有解决这个问题。\n我不是说风险投资者不帮助创业公司。好的那些帮助他们很多。我所说的是，那种重要的帮助，你可能不必是董事会成员才能给予。[5]\n这一切将如何展开？一些风险投资者可能会适应，进行更多、更小的交易。如果他们简化选择过程并担任更少的董事会席位，风险投资基金可以进行2到3倍的 A 轮交易而不会质量下降，我不会感到惊讶。\n但其他风险投资者将不会做出超过表面性的改变。风险投资者是保守的，对他们的威胁不是致命的。不适应的风险投资基金不会被暴力取代。他们会不知不觉地逐渐进入不同的业务。他们仍会做他们称之为 A 轮融资的事情，但这些将 increasingly 成为事实上的 B 轮融资。[6]\n在这样的轮次中，他们不会得到他们现在做的公司25%到40%的股份。在后来的轮次中你不会放弃那么多的公司股份，除非出现严重问题。由于不适应的风险投资者将在 later 投资，他们从赢家那里获得的回报可能更小。但 later 投资也应该意味着他们有更少的输家。所以他们的风险回报比可能是相同的甚至更好。他们只是变成了一种不同的、更保守的投资类型。\n天使投资者 在 increasingly 与 A 轮竞争的大型天使轮中，投资者不会像风险投资者现在那样拿走那么多的股权。试图通过进行更多、更小的交易与天使投资者竞争的风险投资者可能会发现他们必须接受更少的股权才能做到这一点。这对创始人来说是个好消息：他们将能够保留更多公司股份。\n天使轮的交易条款也将变得不那么严格——不仅比 A 轮条款不那么严格，而且比传统的天使条款也不那么严格。\n",
    "description": "",
    "tags": ["未来","创业公司融资","风险投资","天使投资者","超级天使","创始人"],
    "categories": [],
    "content": "→ English version\n创业公司融资的未来 想创办创业公司？获得 Y Combinator 的资助。\n2010年8月\n两年前我写到了我称之为\u0026quot;创业公司融资中一个巨大的、未开发的机会\u0026quot;：风险投资者与他们当前商业模式要求他们投资大笔资金，以及一类需要比以前更少资金的大型创业公司之间日益增长的不匹配。越来越多的创业公司想要几十万美元，而不是几百万。[1]\n这个机会现在未开发的程度要小得多。投资者从两个方向涌入这个领域。风险投资者比一年前更可能进行天使规模的投资。与此同时，过去一年看到了新型投资者的急剧增加：超级天使，他们像天使一样运作，但使用其他人的钱，像风险投资者一样。\n虽然许多投资者正在进入这个领域，但仍有更多空间。投资者的分布应该反映创业公司的分布，这具有通常的幂律下降。所以投资几十万或几十万的人应该比投资几百万的人多得多。[2]\n事实上，有更多人进行天使规模的交易对天使投资者可能是好事，因为如果天使轮变得更合法，那么即使创业公司可以，如果他们愿意，从风险投资者那里筹集 A 轮融资，他们也可能开始选择天使轮。创业公司偏爱 A 轮融资的原因之一是它们更有声望。但如果天使投资者变得更加活跃和知名，他们将越来越多地能够在品牌上与风险投资者竞争。\n当然，声望不是偏爱 A 轮融资的主要原因。创业公司在 A 轮融资中可能会比在天使轮中得到投资者更多的关注。所以如果一个创业公司在天使轮和好的风险投资基金的 A 轮之间选择，我通常建议他们选择 A 轮。[3]\n但是，虽然 A 轮融资不会消失，我认为风险投资者应该比超级天使更担心，而不是相反。尽管他们的名字，超级天使实际上是迷你风险投资基金，他们显然把现有的风险投资者作为目标。\n他们似乎有历史站在他们这边。这里的模式似乎与创业公司和成熟公司进入新市场时我们看到的相同。在线视频成为可能，YouTube 直接冲进去，而现有媒体公司只是半心半意地接受它，更多的是由恐惧而不是希望驱动，更多的是为了保护自己的地盘而不是为用户做伟大的事情。PayPal 也是如此。这个模式重复了一遍又一遍，通常是入侵者获胜。在这种情况下，超级天使是入侵者。天使轮是他们的整个业务，就像在线视频对 YouTube 一样。而进行天使投资的风险投资者主要这样做是为了为 A 轮融资产生交易流。[4]\n另一方面，创业投资是一个非常奇怪的生意。几乎所有的回报都集中在几个大赢家身上。如果超级天使仅仅未能投资于（并在某种程度上产生）大赢家，即使他们投资于所有其他公司，他们也会倒闭。\n风险投资者 为什么风险投资者不开始进行更小的 A 轮融资？症结在于董事会席位。在传统的 A 轮融资中，负责交易的合伙人会在创业公司的董事会中占有一席之地。如果我们假设平均创业公司运行6年，一个合伙人可以同时承受12个董事会席位，那么一个风险投资基金可以每年每个合伙人进行2笔 A 轮交易。\n在我看来，解决方案一直是担任更少的董事会席位。你不必在董事会中帮助创业公司。也许风险投资者觉得他们需要董事会成员带来的权力来确保他们的钱不被浪费。但他们检验过那个理论吗？除非他们尝试不担任董事会席位并发现他们的回报更低，否则他们没有解决这个问题。\n我不是说风险投资者不帮助创业公司。好的那些帮助他们很多。我所说的是，那种重要的帮助，你可能不必是董事会成员才能给予。[5]\n这一切将如何展开？一些风险投资者可能会适应，进行更多、更小的交易。如果他们简化选择过程并担任更少的董事会席位，风险投资基金可以进行2到3倍的 A 轮交易而不会质量下降，我不会感到惊讶。\n但其他风险投资者将不会做出超过表面性的改变。风险投资者是保守的，对他们的威胁不是致命的。不适应的风险投资基金不会被暴力取代。他们会不知不觉地逐渐进入不同的业务。他们仍会做他们称之为 A 轮融资的事情，但这些将 increasingly 成为事实上的 B 轮融资。[6]\n在这样的轮次中，他们不会得到他们现在做的公司25%到40%的股份。在后来的轮次中你不会放弃那么多的公司股份，除非出现严重问题。由于不适应的风险投资者将在 later 投资，他们从赢家那里获得的回报可能更小。但 later 投资也应该意味着他们有更少的输家。所以他们的风险回报比可能是相同的甚至更好。他们只是变成了一种不同的、更保守的投资类型。\n天使投资者 在 increasingly 与 A 轮竞争的大型天使轮中，投资者不会像风险投资者现在那样拿走那么多的股权。试图通过进行更多、更小的交易与天使投资者竞争的风险投资者可能会发现他们必须接受更少的股权才能做到这一点。这对创始人来说是个好消息：他们将能够保留更多公司股份。\n天使轮的交易条款也将变得不那么严格——不仅比 A 轮条款不那么严格，而且比传统的天使条款也不那么严格。\n在未来，天使轮将较 …"
  },{
    "title": "创业想法",
    "url": "/paul_graham/essays_zh/ideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创业想法 2005年10月\nY Combinator的创始合伙人之一保罗·格雷厄姆撰写的关于如何为创业公司产生好想法的指南。\n想要创业？获得Y Combinator的投资。\n对于想要创办创业公司的人来说，最重要的问题之一是如何获得想法。Y Combinator申请表格中问的第一个问题是\u0026quot;你在做什么？\u0026ldquo;这实际上是问：你有什么想法？\n令人惊讶的是，申请表中的问题不是\u0026quot;你有什么想法？\u0026ldquo;而是\u0026quot;你在做什么？\u0026ldquo;这是因为我们意识到，大多数申请者实际上并没有想法。他们只是想创办创业公司。这就像想当作家但没有想到要写什么。\n但是没有想法，你如何创办创业公司？你可能会认为这是不可能的，但事实并非如此。我们资助的大多数初创公司在申请时并没有完全成形的想法。他们只是有一些想法，这些想法在Y Combinator的三个月中逐渐成形。\n这怎么可能？因为好想法不像大多数人认为的那样来自灵光一现。好想法来自于对问题的观察和解决。\n如何获得创业想法 创业想法不是凭空产生的。它们来自于解决你自己的问题。最好的创业想法是解决你自己遇到的问题。\n如果你和其他程序员一样，你每天都会遇到一些烦人的问题。大多数时候，你只是容忍它们。但是如果你开始把它们记下来，你会发现它们实际上是创业想法的金矿。\n当你解决自己的问题时，你就有了优势。你确切地知道问题是什么，因为你亲身经历过。你也知道解决方案是否有效，因为你就是用户。\n创业想法的特征 好的创业想法通常具有以下特征：\n它们解决了一个真实的问题：不是虚构的问题，而是人们真正遇到的问题。\n它们看起来不像好主意：最好的创业想法通常看起来很愚蠢。如果它们看起来像好主意，可能已经有人在做它们了。\n它们是利基市场：不要试图为所有人构建产品。从一个小的、特定的市场开始。\n它们可以从小开始：你不需要在第一天就构建一个庞大的系统。从最小可行产品开始。\n它们具有可扩展性：虽然它们从小开始，但它们有潜力变得很大。\n何时寻找想法 很多人犯的错误是试图坐在那里产生想法。这很少有效。相反，你应该过你的生活，但保持敏锐的观察力。\n当你注意到有什么事情让你感到沮丧或烦恼时，把它记下来。当你发现自己在思考\u0026quot;应该有更好的方法来做这件事\u0026quot;时，把它写下来。\n想法往往在你忙于其他事情时出现。保持一个想法列表，定期回顾它。\n如何测试想法 一旦你有了一个想法，如何测试它是否好？以下是一些方法：\n构建它：最好的测试是实际构建它并看看人们是否使用它。\n谈论它：与他人讨论你的想法。但不要过度依赖他们的意见。\n研究竞争对手：看看是否有人在解决类似的问题。他们的方法如何？\n问自己一些关键问题：\n这个问题有多普遍？ 人们愿意为解决方案付钱吗？ 市场有多大？ 你能否在竞争对手之前进入市场？ 常见错误 在寻找创业想法时，人们经常犯以下错误：\n试图追随潮流：不要试图追逐最新的热潮。解决真实的问题。\n构建你自己的工具：不要构建只有你想使用的东西。\n忽视小问题：小问题可能看起来不重要，但它们往往是最好的起点。\n过早放弃：好想法需要时间来发展。不要期望立即成功。\n结论 创业想法不是凭空产生的。它们来自于解决真实的问题。通过保持敏锐的观察力并解决你自己的问题，你可以发现伟大的创业机会。\n记住，最好的想法往往看起来很愚蠢。如果它们看起来像好主意，可能已经有人在做它们了。\n注：这是Paul Graham关于创业想法的经典文章的中文翻译。原文发布于2005年10月，至今仍然是创业者的重要指南。\n",
    "description": "",
    "tags": ["创业公司","想法","企业家精神","创新","商业策略","Y Combinator","问题解决"],
    "categories": [],
    "content": "→ English Version\n创业想法 2005年10月\nY Combinator的创始合伙人之一保罗·格雷厄姆撰写的关于如何为创业公司产生好想法的指南。\n想要创业？获得Y Combinator的投资。\n对于想要创办创业公司的人来说，最重要的问题之一是如何获得想法。Y Combinator申请表格中问的第一个问题是\u0026quot;你在做什么？\u0026ldquo;这实际上是问：你有什么想法？\n令人惊讶的是，申请表中的问题不是\u0026quot;你有什么想法？\u0026ldquo;而是\u0026quot;你在做什么？\u0026ldquo;这是因为我们意识到，大多数申请者实际上并没有想法。他们只是想创办创业公司。这就像想当作家但没有想到要写什么。\n但是没有想法，你如何创办创业公司？你可能会认为这是不可能的，但事实并非如此。我们资助的大多数初创公司在申请时并没有完全成形的想法。他们只是有一些想法，这些想法在Y Combinator的三个月中逐渐成形。\n这怎么可能？因为好想法不像大多数人认为的那样来自灵光一现。好想法来自于对问题的观察和解决。\n如何获得创业想法 创业想法不是凭空产生的。它们来自于解决你自己的问题。最好的创业想法是解决你自己遇到的问题。\n如果你和其他程序员一样，你每天都会遇到一些烦人的问题。大多数时候，你只是容忍它们。但是如果你开始把它们记下来，你会发现它们实际上是创业想法的金矿。\n当你解决自己的问题时，你就有了优势。你确切地知道问题是什么，因为你亲身经历过。你也知道解决方案是否有效，因为你就是用户。\n创业想法的特征 好的创业想法通常具有以下特征：\n它们解决了一个真实的问题：不是虚构的问题，而是人们真正遇到的问题。\n它们看起来不像好主意：最好的创业想法通常看起来很愚蠢。如果它们看起来像好主意，可能已经有人在做它们了。\n它们是利基市场：不要试图为所有人构建产品。从一个小的、特定的市场开始。\n它们可以从小开始：你不需要在第一天就构建一个庞大的系统。从最小可行产品开始。\n它们具有可扩展性：虽然它们从小开始，但它们有潜力变得很大。\n何时寻找想法 很多人犯的错误是试图坐在那里产生想法。这很少有效。相反，你应该过你的生活，但保持敏锐的观察力。\n当你注意到有什么事情让你感到沮丧或烦恼时，把它记下来。当你发现自己在思考\u0026quot;应该有更好的方法来做这件事\u0026quot;时，把它写下来。\n想法往往在你忙于其他事情时出现。保持一个想法列表，定期回顾它。\n如何测试想法 一旦你有了一个想法，如何测试它是否好？以下是一些方法：\n构建它：最好的测试是实际构建它并看看人们是否使用它。\n谈论它：与他人讨论你的想法。但不要过度依赖他们的意见。\n研究竞争对手：看看是否有人在解决类似的问题。他们的方法如何？\n问自己一些关键问题：\n这个问题有多普遍？ 人们愿意为解决方案付钱吗？ 市场有多大？ 你能否在竞争对手之前进入市场？ 常见错误 在寻找创业想法时，人们经常犯以下错误：\n试图追随潮流：不要试图追逐最新的热潮。解决真实的问题。\n构建你自己的工具：不要构建只有你想使用的东西。\n忽视小问题：小问题可能看起来不重要，但它们往往是最好的起点。\n过早放弃：好想法需要时间来发展。不要期望立即成功。\n结论 创业想法不是凭空产生的。它们来自于解决真实的问题。通过保持敏锐的观察力并解决你自己的问题，你可以发现伟大的创业机会。\n记住，最好的想法往往看起来很愚蠢。如果它们看起来像好主意，可能已经有人在做它们了。\n注：这是Paul Graham关于创业想法的经典文章的中文翻译。原文发布于2005年10月，至今仍然是创业者的重要指南。\n"
  },{
    "title": "创业投资趋势",
    "url": "/paul_graham/essays_zh/invtrend/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创业投资趋势 2013年6月\n（本文为投资者听众而作。）\nY Combinator现已资助了564家创业公司，包括当前的53家批次。拥有估值（通过融资轮、被收购或倒闭）的287家公司的总估值约为117亿美元，当前批次之前的511家公司总共筹集了约17亿美元。[1]\n和往常一样，这些数字由少数几个大赢家主导。前10名创业公司占117亿中的86亿。但后面还有一批年轻的创业公司。大约还有40家有潜力成为真正的大公司。\n去年夏天当我们有84家公司时，情况有点失控，所以我们收紧了筛选标准以减少批次规模。[2] 一些记者试图将其解读为他们正在讲述的宏观故事的证据，但原因与任何外部趋势无关。原因是我们发现我们使用的是n²算法，我们需要购买时间来修复它。幸运的是，我们提出了几种分片YCombinator的技术，现在问题似乎已经解决。有了新的更具可扩展性的模型，只有53家公司，当前的批次感觉就像在公园散步。我猜我们还可以再增长2-3倍才会遇到下一个瓶颈。[3]\n资助如此大量的创业公司的一个后果是我们能够及早看到趋势。由于融资是我们帮助创业公司的主要事项之一，我们处于很好的位置来发现投资趋势。\n我将尝试描述这些趋势的发展方向。让我们从最基本的问题开始：未来会比过去更好还是更糟？投资者总体上会赚更多钱还是更少？\n我认为会更多。有多种力量在起作用，其中一些会降低回报，一些会增加回报。我无法确定哪种力量会占上风，但我会描述它们，你可以自己判断。\n推动创业公司融资变化的两大力量是：创业公司的启动成本正在降低，创业公司正在成为更正常的事情。\n当我1986年大学毕业时，基本上有两个选择：找工作或读研究生。现在有第三个选择：创办自己的公司。这是一个很大的变化。原则上，1986年也可以创办自己的公司，但这似乎不是一个真正的可能性。似乎可以创办咨询公司或利基产品公司，但似乎不可能创办会变得很大的公司。[4]\n这种从2个路径到3个路径的变化是几代人才会发生一次的那种大社会转变。我认为我们仍处于这个转变的开始阶段。很难预测这会有多大的影响。会和工业革命一样大吗？也许。可能不会。但这将是一件大事，几乎让所有人感到惊讶，因为那些大的社会转变总是如此。\n我们可以肯定的是会有更多的创业公司。20世纪中期庞大的层级公司正在被较小公司的网络所取代。这个过程不仅仅是现在硅谷正在发生的事情。它在几十年前就开始了，甚至发生在汽车行业。它还有很长的路要走。[5]\n推动变化的另一个大因素是创业公司的启动成本正在降低。事实上，这两个力量是相关的：创业公司启动成本的降低是创业公司变得更正常的事情的原因之一。\n创业公司需要更少钱这一事实意味着创始人将在投资者面前占据上风。你仍然需要他们同样多的精力和想象力，但他们不需要你那么多钱。由于创始人占据上风，他们将保留公司中越来越大的股份和控制权。这意味着投资者将获得更少的股份和更少的控制权。\n这是否意味着投资者会赚更少的钱？不一定，因为会有更多的好创业公司。投资者可获得的有价值创业公司股份总量可能会增加，因为有价值创业公司的数量增长速度可能会快于他们出售给投资者的比例下降速度。\n风险投资业务中有一个经验法则，即每年大约有15家公司会非常成功。尽管许多投资者下意识地将这个数字视为某种宇宙常数，但我确定它不是。技术发展的速度可能有极限，但现在这不是限制因素。如果是的话，每个成功的创业公司都会在可能成立的那个月成立，但事实并非如此。现在限制大公司数量的因素是足够好的创始人创办公司的数量，这个数量可以而且将会增加。仍然有很多人会成为优秀的创始人但最终没有创办公司。你可以从一些最成功的创业公司是多么偶然地开始看到这一点。许多最大的创业公司几乎都没有发生，这意味着肯定有同样多实际上没有发生的优秀创业公司。\n可能有10倍甚至50倍更多的优秀创始人。随着其中更多人开始创办创业公司，每年15个大赢家很容易变成50甚至100个。[6]\n那么回报呢？我们是否正走向回报因越来越高的估值而被挤压的世界？我认为顶级公司实际上会比过去赚更多钱。高回报不是来自低估值投资。它们来自投资那些真正做得好的公司。所以如果每年有更多这样的公司，最好的挑选者应该会有更多的成功。\n这意味着风险投资业务会有更多的可变性。能够识别和吸引最好创业公司的公司会做得更好，因为会有更多这样的公司需要识别和吸引。而糟糕的公司会像现在一样得到剩菜，但为此支付更高的价格。\n我也不认为创始人长期控制他们的公司会是一个问题。这方面的经验证据已经很清楚：投资者作为创始人的跟班比作为他们的老板赚更多钱。虽然有些羞辱，但这对投资者来说实际上是个好消息，因为服务创始人比微观管理他们花的时间更少。\n天使投资人呢？我认为那里有很多机会。过去做天使投资人很糟糕。除非你像AndyBechtolsheim那样幸运，否则你无法获得最好的交易，当你投资创业公司时，风险投资家可能会在后来到达时剥夺你的股份。现在天使可以去像DemoDay或AngelList这样的地方，获得和风险投资家一样的交易。风险投资家可以从股权表中洗掉天使投资人的日子早已一去不复返。\n我认为创业投资中最大的未开发机会之一是快速进行天使规模的投资。很少有投资者理解向他们筹集资金对创业公司造成的成本。当公司只有创始人时，一切在融资期间都会停止，这很容易需要6周时间。当前融资的高成本意味着低成本投资者有空间来削减其余部分。在这种情况下，低成本意味着快速决定。如果有一个信誉良好的投资者以良好条件投资10万美元并承诺在24小时内决定是或否，他们会获得几乎所有最好的交易，因为每个好的创业公司都会首先接近他们。由他们来挑选，因为每个糟糕的创业公司也会首先接近他们，但至少他们会看到一切。而如果一个投资者以思维时间长或就估值进行大量谈判而闻名，创始人会把他们留到最后。而对于最有前途的创业公司来说，它们往往容易筹集资金，最后很容易变成永远不会。\n大公司的数量会随着新创业公司总数线性增长吗？可能不会，有两个原因。一个是在过去创业的可怕性是一个相当有效的过滤器。既然失败的成本正在降低，我们应该期望创始人更多地这样做。这不是坏事。在技术中，降低失败成本的创新会增加失败数量，但最终让你净前进，这是常见的。\n大公司数量不会与创业公司数量成比例增长的另一个原因是，将会开始出现越来越多的创意冲突。虽然好想法数量的有限性不是每年只有15个大公司的原因，但数量必须是有限的，创业公司越多，我们会看到多家公司在同一时间做同样的事情。如果创意冲突变得更加普遍，那将会很有趣，但从坏的方面来说。[7]\n主要是因为早期失败的数量增加，未来的创业公司将不仅仅是相同形状的放大。以前是方尖碑的将变成金字塔。顶部会宽一点，但底部会宽得多。\n这对投资者意味着什么？这意味着在最早阶段会有更多投资机会，因为这是我们想象固体的体积增长最快的地方。想象对应于创业公司方尖碑的投资者方尖碑。当它扩展成金字塔以匹配创业公司金字塔时，所有内容都附着在顶部，在底部留下真空。\n投资者的机会主要意味着新投资者的机会，因为现有投资者或公司愿意承担的风险程度是他们最难改变的事情之一。不同类型的投资者适应不同程度的风险，但每种类型都有其特定的风险深度烙印，不仅在他们遵循的程序中，而且在工作人员的个性中。\n我认为风险投资家最大的危险也是最大的机会是在A轮阶段。或者更确切地说，在A轮变成事实上的B轮之前的A轮阶段。\n现在，风险投资家经常明知故犯地在A轮投资太多钱。他们这样做是因为他们觉得需要获得每个A轮公司的一大块股份来补偿董事会席位所消耗的机会成本。这意味着当交易有很多竞争时，变化的数字是估值（以及投资金额）而不是出售的公司百分比。这意味着，特别是对于更有前途的创业公司，A轮投资者经常让公司接受比他们想要的更多钱。\n一些风险投资家撒谎并声称公司真的需要那么多钱。其他人更坦率，承认他们的财务模型要求他们拥有每家公司的一定百分比。但我们都知道A轮筹集的金额不是通过问什么对公司最好来决定的。它们是由风险投资家从他们想要拥有的公司数量开始，市场设定估值从而确定投资金额决定的。\n和许多坏事一样，这不是故意发生的。风险投资业务随着他们的初始假设逐渐过时而陷入其中。风险投资业务的传统和财务模型是在创始人更需要投资者时建立的。在那些日子里，创始人在A轮向风险投资家出售一大块公司股份是很自然的。现在创始人宁愿出售更少，风险投资家正在坚持立场，因为他们不确定是否能够通过购买每家A轮公司不到20%的股份来赚钱。\n我将此描述为危险的原因是，A轮投资者与他们声称服务的创业公司越来越不一致，这最终会回来咬你。我将此描述为机会的原因是，现在已经建立了很多潜在能量，因为市场已经远离了风险投资家传统的商业模式。这意味着第一个打破常规并开始做A轮交易的风险投资公司，只要创始人想出售多少股份就做多少股份（并且没有\u0026quot;期权池\u0026quot;仅来自创始人的股份），将获得巨大收益。\n当这种情况发生时，风险投资业务会发生什么？鬼才知道。但我打赌那家特定的公司最终会领先。如果一家顶级风险投资公司开始做从公司需要筹集的金额开始并让获得的百分比随市场变化的A轮交易，而不是相反，他们会立即获得几乎所有最好的创业公司。这就是钱所在的地方。\n你无法永远对抗市场力量。在过去十年中，我们看到A轮出售的公司百分比稳步下降。40%曾经很常见。现在风险投资家正在努力将底线保持在20%。但我每天都在等待这条线的崩溃。它会发生的。你不妨预料到它，看起来大胆。\n谁知道，也许风险投资家通过做正确的事情会赚更多钱。这不是第一次发生这种情况。风险投资是一个偶尔的大成功产生百倍回报的业务。你对此类事情有多少信心真的可以用财务模型来表达？大成功只需要变得稍微不那么频繁就可以补偿A轮股份出售减少2倍。\n如果你想找到新的投资机会，寻找创始人抱怨的事情。创始人是你的客户，他们抱怨的事情是未满足的需求。我给出了两个创始人最常抱怨的例子——花太长时间做决定的投资者，以及A轮融资中的过度稀释——所以现在是寻找这些的好地方。但更一般的处方是：做创始人想要的事情。\n注释 [1] 我意识到收入而不是融资是创业公司成功的真正考验。我们引用融资统计的原因是因为这些是我们有的数字。我们不能有意义地讨论收入而不包括最成功创业公司的数字，我们没有这些数字。我们经常与早期阶段的创业公司讨论收入增长，因为这是我们衡量他们进展的方式，但当公司达到一定规模时，种子投资者这样做变得自以为是。\n无论如何，公司的市值最终确实成为收入的函数，融资轮的投后估值至少是专业人士对这些市值最终位置的猜测。\n只有287家有估值的原因是其余的大多通过可转换票据筹集资金，虽然可转换票据通常有估值上限，但估值上限只是估值的上限。\n[2] 我们没有尝试接受特定数量。即使我们想要，我们也没有办法做到。我们只是试图变得更加挑剔。\n[3] 虽然你永远不知道瓶颈，我猜下一个将是协调合作伙伴之间的努力。\n[4] 我意识到创办公司不一定意味着创办创业公司。也会有很多创办正常公司的人。但这与投资者受众无关。\nGeoff Ralston报告说，在硅谷，在20世纪80年代中期创办创业公司似乎是可想的。它会从那里开始。但我知道对东海岸的本科生来说不是这样。\n[5] 这一趋势是自二十世纪中叶以来美国经济不平等加剧的主要原因之一。在1950年可能成为Megacorp x部门总经理的人现在是x公司的创始人，并拥有其中的重要股权。\n[6] 如果国会以非破碎形式通过创始人签证，仅此一项原则上就可以让我们达到20倍，因为95%的世界人口生活在美国以外。\n[7] 如果创意冲突变得足够糟糕，它可能会改变成为创业公司的意义。我们目前建议创业公司主要忽略竞争对手。我们告诉他们创业公司的竞争像跑步而不是足球；你不必去从另一队那里抢球。但如果创意冲突变得足够普遍，也许你必须开始那样做。那将是不幸的。\n感谢Sam Altman、Paul Buchheit、Dalton Caldwell、Patrick Collison、Jessica Livingston、Andrew Mason、Geoff Ralston和Garry Tan阅读本文草稿。\n",
    "description": "",
    "tags": ["投资","创业公司","趋势","风险投资","天使投资人","融资"],
    "categories": [],
    "content": "→ English Version\n创业投资趋势 2013年6月\n（本文为投资者听众而作。）\nY Combinator现已资助了564家创业公司，包括当前的53家批次。拥有估值（通过融资轮、被收购或倒闭）的287家公司的总估值约为117亿美元，当前批次之前的511家公司总共筹集了约17亿美元。[1]\n和往常一样，这些数字由少数几个大赢家主导。前10名创业公司占117亿中的86亿。但后面还有一批年轻的创业公司。大约还有40家有潜力成为真正的大公司。\n去年夏天当我们有84家公司时，情况有点失控，所以我们收紧了筛选标准以减少批次规模。[2] 一些记者试图将其解读为他们正在讲述的宏观故事的证据，但原因与任何外部趋势无关。原因是我们发现我们使用的是n²算法，我们需要购买时间来修复它。幸运的是，我们提出了几种分片YCombinator的技术，现在问题似乎已经解决。有了新的更具可扩展性的模型，只有53家公司，当前的批次感觉就像在公园散步。我猜我们还可以再增长2-3倍才会遇到下一个瓶颈。[3]\n资助如此大量的创业公司的一个后果是我们能够及早看到趋势。由于融资是我们帮助创业公司的主要事项之一，我们处于很好的位置来发现投资趋势。\n我将尝试描述这些趋势的发展方向。让我们从最基本的问题开始：未来会比过去更好还是更糟？投资者总体上会赚更多钱还是更少？\n我认为会更多。有多种力量在起作用，其中一些会降低回报，一些会增加回报。我无法确定哪种力量会占上风，但我会描述它们，你可以自己判断。\n推动创业公司融资变化的两大力量是：创业公司的启动成本正在降低，创业公司正在成为更正常的事情。\n当我1986年大学毕业时，基本上有两个选择：找工作或读研究生。现在有第三个选择：创办自己的公司。这是一个很大的变化。原则上，1986年也可以创办自己的公司，但这似乎不是一个真正的可能性。似乎可以创办咨询公司或利基产品公司，但似乎不可能创办会变得很大的公司。[4]\n这种从2个路径到3个路径的变化是几代人才会发生一次的那种大社会转变。我认为我们仍处于这个转变的开始阶段。很难预测这会有多大的影响。会和工业革命一样大吗？也许。可能不会。但这将是一件大事，几乎让所有人感到惊讶，因为那些大的社会转变总是如此。\n我们可以肯定的是会有更多的创业公司。20世纪中期庞大的层级公司正在被较小公司的网络所取代。这个过程不仅仅是现在硅谷正在发生的事情。它在几十年前就开始了，甚至发生在汽车行业。它还有很长的路要走。[5]\n推动变化的另一个大因素是创业公司的启动成本正在降低。事实上，这两个力量是相关的：创业公司启动成本的降低是创业公司变得更正常的事情的原因之一。\n创业公司需要更少钱这一事实意味着创始人将在投资者面前占据上风。你仍然需要他们同样多的精力和想象力，但他们不需要你那么多钱。由于创始人占据上风，他们将保留公司中越来越大的股份和控制权。这意味着投资者将获得更少的股份和更少的控制权。\n这是否意味着投资者会赚更少的钱？不一定，因为会有更多的好创业公司。投资者可获得的有价值创业公司股份总量可能会增加，因为有价值创业公司的数量增长速度可能会快于他们出售给投资者的比例下降速度。\n风险投资业务中有一个经验法则，即每年大约有15家公司会非常成功。尽管许多投资者下意识地将这个数字视为某种宇宙常数，但我确定它不是。技术发展的速度可能有极限，但现在这不是限制因素。如果是的话，每个成功的创业公司都会在可能成立的那个月成立，但事实并非如此。现在限制大公司数量的因素是足够好的创始人创办公司的数量，这个数量可以而且将会增加。仍然有很多人会成为优秀的创始人但最终没有创办公司。你可以从一些最成功的创业公司是多么偶然地开始看到这一点。许多最大的创业公司几乎都没有发生，这意味着肯定有同样多实际上没有发生的优秀创业公司。\n可能有10倍甚至50倍更多的优秀创始人。随着其中更多人开始创办创业公司，每年15个大赢家很容易变成50甚至100个。[6]\n那么回报呢？我们是否正走向回报因越来越高的估值而被挤压的世界？我认为顶级公司实际上会比过去赚更多钱。高回报不是来自低估值投资。它们来自投资那些真正做得好的公司。所以如果每年有更多这样的公司，最好的挑选者应该会有更多的成功。\n这意味着风险投资业务会有更多的可变性。能够识别和吸引最好创业公司的公司会做得更好，因为会有更多这样的公司需要识别和吸引。而糟糕的公司会像现在一样得到剩菜，但为此支付更高的价格。\n我也不认为创始人长期控制他们的公司会是一个问题。这方面的经验证据已经很清楚：投资者作为创始人的跟班比作为他们的老板赚更多钱。虽然有些羞辱，但这对投资者来说实际上是个好消息，因为服务创始人比微观管理他们花的时间更少。\n天使投资人呢？我认为那里有很多机会。过去做天使投资人很糟糕。除非你 …"
  },{
    "title": "创始人模式",
    "url": "/paul_graham/essays_zh/foundermode/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创始人模式 2024年9月\n在上周的YC活动上，Brian Chesky发表了一个让所有在场者都难忘的演讲。之后我交谈的大多数创始人都说这是他们听过的最好的演讲。Ron Conway有生以来第一次忘记记笔记。我不打算在这里重现他的演讲，而是想讨论它提出的一个问题。\nBrian演讲的主题是关于如何运营大公司的传统智慧是错误的。随着Airbnb的发展，善意的人们建议他必须以某种方式运营公司才能实现规模化。他们的建议可以乐观地概括为\u0026quot;雇用优秀的人才，给他们空间去完成工作\u0026quot;。他遵循了这个建议，结果却是灾难性的。因此他必须自己找出更好的方法，部分是通过研究Steve Jobs如何运营苹果公司。到目前为止，这似乎是有效的。Airbnb的自由现金流利润率现在是硅谷最好的之一。\n这个活动的观众包括许多我们资助的最成功的创始人，一个接一个地说，同样的事情也发生在他们身上。他们也得到了关于如何随着公司发展而运营公司的相同建议，但这些建议不但没有帮助他们的公司，反而损害了他们。\n为什么每个人都告诉这些创始人错误的事情？这对我来说是个很大的谜团。经过一番思考后，我找到了答案：他们被告知的是如何运营一个你没有创立的公司——如果你只是一个职业经理人，如何运营公司。但这种运营方式对创始人来说效果要差得多，以至于感觉是错误的。创始人可以做经理人做不到的事情，而不做这些事情对创始人来说感觉是错误的，因为它确实是错误的。\n实际上，有两种不同的运营公司的方式：创始人模式和经理人模式。直到现在，即使是硅谷的大多数人也隐含地假设扩大创业公司的规模意味着切换到经理人模式。但我们可以从尝试过这种模式的创始人的沮丧中，以及他们试图摆脱它的成功中，推断出另一种模式的存在。\n据我所知，没有专门关于创始人模式的书籍。商学院不知道它的存在。到目前为止，我们只有个别创始人为自己摸索的实验。但现在我们知道我们要寻找什么，我们可以搜索它。我希望几年后创始人模式会和经理人模式一样被很好地理解。我们已经可以猜测它会有所不同的一些方式。\n经理人被教导运营公司的方式似乎类似于模块化设计，在这种意义上，你将组织架构图的子树视为黑盒子。你告诉你的直接下属该做什么，而由他们来找出如何做的方法。但你不会介入他们工作的细节。那将是微观管理他们，这是不好的。\n雇用优秀的人才，给他们空间去完成工作。这样描述时听起来很棒，不是吗？但实际上，从创始人的报告中判断，这通常意味着：雇用职业伪装者，让他们把公司搞垮。\n我在Brian的演讲中和之后与创始人交谈时注意到的一个主题是被煤气灯效应操纵的想法。创始人感觉他们从两边都被煤气灯效应操纵——那些告诉他们必须像经理人一样运营公司的人，以及当他们这样做时为他们工作的人。通常当你周围的每个人都不同意你时，你的默认假设应该是你错了。但这是一个罕见的例外。没有做过创始人的风险投资人不知道创始人应该如何运营公司，而C级高管作为一个阶层，包括一些世界上最有技巧的说谎者。[1]\n无论创始人模式包含什么，很明显它会打破CEO应该只通过他或她的直接下属与公司接触的原则。\u0026ldquo;跳级\u0026quot;会议将成为常态，而不是一个如此不寻常以至于有特定名称的做法。一旦你放弃这个约束，就有大量的排列组合可供选择。\n例如，Steve Jobs过去每年为他认为的苹果公司最重要的100人举办一次静修活动，而这100人并不是组织架构图上最高的100人。你能想象在普通公司要做到这一点需要多大的意志力吗？然而想象一下这样的事情会有多有用。它可以让大公司感觉像创业公司。Steve如果这些静修活动不起作用，大概就不会继续举办它们了。但我从未听说过另一家公司这样做。那么这是一个好主意，还是一个坏主意？我们仍然不知道。这就是我们对创始人模式了解得如此之少的原因。[2]\n显然，创始人不能像运营20人公司那样继续运营2000人的公司。必须有某种程度的授权。自主权的边界在哪里，以及它们有多清晰，可能会因公司而异。它们甚至会随着经理人在同一公司内赢得信任而随时间变化。因此创始人模式比经理人模式更复杂。但它也会更有效。我们已经从个别创始人摸索着朝这个方向发展的例子中知道了这一点。\n实际上，我要对创始人模式做出的另一个预测是，一旦我们弄清楚它是什么，我们会发现许多个别创始人已经几乎到达了那里——除了他们所做的事情被许多人视为古怪或更糟。[3]\n奇怪的是，我们仍然对创始人模式知之甚少，这是一个令人鼓舞的想法。看看创始人已经取得的成就，然而他们是在逆着不良建议的逆风中取得这些成就的。想象一下，一旦我们能告诉他们如何像Steve Jobs而不是John Sculley那样运营公司，他们会取得什么成就。\n注释 [1] 表达这个陈述更外交的方式是说，经验丰富的C级高管通常非常擅长向上管理。而且我认为任何了解这个世界的人都不会对此有异议。\n[2] 如果举办这种静修活动的做法变得如此普遍，以至于即使是政治主导的成熟公司也开始这样做，我们可以通过被邀请者在组织架构图上的平均深度来量化公司的衰老程度。\n[3] 我还有一个不太乐观的预测：一旦创始人模式的概念确立，人们就会开始滥用它。无法委派他们应该委派的事情的创始人会以创始人模式为借口。或者不是创始人的经理人会决定他们应该试图表现得像创始人。这在某种程度上可能有效，但当它不起作用时，结果会很混乱；模块化方法至少可以限制糟糕CEO所能造成的损害。\n感谢Brian Chesky、Patrick Collison、Ron Conway、Jessica Livingston、Elon Musk、Ryan Petersen、Harj Taggar和Garry Tan阅读本文的草稿。\n",
    "description": "",
    "tags": ["创始人","管理","创业公司","领导力","YC"],
    "categories": [],
    "content": "→ English Version\n创始人模式 2024年9月\n在上周的YC活动上，Brian Chesky发表了一个让所有在场者都难忘的演讲。之后我交谈的大多数创始人都说这是他们听过的最好的演讲。Ron Conway有生以来第一次忘记记笔记。我不打算在这里重现他的演讲，而是想讨论它提出的一个问题。\nBrian演讲的主题是关于如何运营大公司的传统智慧是错误的。随着Airbnb的发展，善意的人们建议他必须以某种方式运营公司才能实现规模化。他们的建议可以乐观地概括为\u0026quot;雇用优秀的人才，给他们空间去完成工作\u0026quot;。他遵循了这个建议，结果却是灾难性的。因此他必须自己找出更好的方法，部分是通过研究Steve Jobs如何运营苹果公司。到目前为止，这似乎是有效的。Airbnb的自由现金流利润率现在是硅谷最好的之一。\n这个活动的观众包括许多我们资助的最成功的创始人，一个接一个地说，同样的事情也发生在他们身上。他们也得到了关于如何随着公司发展而运营公司的相同建议，但这些建议不但没有帮助他们的公司，反而损害了他们。\n为什么每个人都告诉这些创始人错误的事情？这对我来说是个很大的谜团。经过一番思考后，我找到了答案：他们被告知的是如何运营一个你没有创立的公司——如果你只是一个职业经理人，如何运营公司。但这种运营方式对创始人来说效果要差得多，以至于感觉是错误的。创始人可以做经理人做不到的事情，而不做这些事情对创始人来说感觉是错误的，因为它确实是错误的。\n实际上，有两种不同的运营公司的方式：创始人模式和经理人模式。直到现在，即使是硅谷的大多数人也隐含地假设扩大创业公司的规模意味着切换到经理人模式。但我们可以从尝试过这种模式的创始人的沮丧中，以及他们试图摆脱它的成功中，推断出另一种模式的存在。\n据我所知，没有专门关于创始人模式的书籍。商学院不知道它的存在。到目前为止，我们只有个别创始人为自己摸索的实验。但现在我们知道我们要寻找什么，我们可以搜索它。我希望几年后创始人模式会和经理人模式一样被很好地理解。我们已经可以猜测它会有所不同的一些方式。\n经理人被教导运营公司的方式似乎类似于模块化设计，在这种意义上，你将组织架构图的子树视为黑盒子。你告诉你的直接下属该做什么，而由他们来找出如何做的方法。但你不会介入他们工作的细节。那将是微观管理他们，这是不好的。\n雇用优秀的人才，给他们空间去完成工作。这样描述时听起来很棒，不是吗？但实际上，从创始人的报告中判断，这通常意味着：雇用职业伪装者，让他们把公司搞垮。\n我在Brian的演讲中和之后与创始人交谈时注意到的一个主题是被煤气灯效应操纵的想法。创始人感觉他们从两边都被煤气灯效应操纵——那些告诉他们必须像经理人一样运营公司的人，以及当他们这样做时为他们工作的人。通常当你周围的每个人都不同意你时，你的默认假设应该是你错了。但这是一个罕见的例外。没有做过创始人的风险投资人不知道创始人应该如何运营公司，而C级高管作为一个阶层，包括一些世界上最有技巧的说谎者。[1]\n无论创始人模式包含什么，很明显它会打破CEO应该只通过他或她的直接下属与公司接触的原则。\u0026ldquo;跳级\u0026quot;会议将成为常态，而不是一个如此不寻常以至于有特定名称的做法。一旦你放弃这个约束，就有大量的排列组合可供选择。\n例如，Steve Jobs过去每年为他认为的苹果公司最重要的100人举办一次静修活动，而这100人并不是组织架构图上最高的100人。你能想象在普通公司要做到这一点需要多大的意志力吗？然而想象一下这样的事情会有多有用。它可以让大公司感觉像创业公司。Steve如果这些静修活动不起作用，大概就不会继续举办它们了。但我从未听说过另一家公司这样做。那么这是一个好主意，还是一个坏主意？我们仍然不知道。这就是我们对创始人模式了解得如此之少的原因。[2]\n显然，创始人不能像运营20人公司那样继续运营2000人的公司。必须有某种程度的授权。自主权的边界在哪里，以及它们有多清晰，可能会因公司而异。它们甚至会随着经理人在同一公司内赢得信任而随时间变化。因此创始人模式比经理人模式更复杂。但它也会更有效。我们已经从个别创始人摸索着朝这个方向发展的例子中知道了这一点。\n实际上，我要对创始人模式做出的另一个预测是，一旦我们弄清楚它是什么，我们会发现许多个别创始人已经几乎到达了那里——除了他们所做的事情被许多人视为古怪或更糟。[3]\n奇怪的是，我们仍然对创始人模式知之甚少，这是一个令人鼓舞的想法。看看创始人已经取得的成就，然而他们是在逆着不良建议的逆风中取得这些成就的。想象一下，一旦我们能告诉他们如何像Steve Jobs而不是John Sculley那样运营公司，他们会取得什么成就。\n注释 [1] 表达这个陈述更外交的方式是说，经验丰富的C级高管通常非常擅长向 …"
  },{
    "title": "创始人签证",
    "url": "/paul_graham/essays_zh/foundervisa/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创始人签证 2009年4月\n我通常避免政治，但既然我们现在似乎有一个愿意接受建议的政府，我冒险提一个建议。政府能做的增加这个国家创业公司数量的最大事情是一项零成本政策：为创业创始人建立一个新的签证类别。\n在美国创造的新创业公司数量的最大限制不是税收政策或就业法，甚至不是萨班斯-奥克斯利法。而是我们不让那些想要创办创业公司的人进入这个国家。\n每年只让10,000名创业创始人进入这个国家可能对经济产生可见的影响。如果我们假设每个创业公司4个人，这可能是高估，那就是2500家新公司。每年。它们不会都成长为谷歌那么大，但在2500家中，有些会接近。\n根据定义，这10,000名创始人不会抢走美国人的工作：这可以是签证条款的一部分，他们不能为现有公司工作，只能为他们创立的新公司工作。事实上，他们会为美国人创造更多就业机会，因为他们创立的公司随着成长会雇佣更多员工。\n棘手的部分可能似乎是如何定义创业公司。但这可以很容易地解决：让市场决定。创业投资者努力寻找最好的创业公司。政府无法比利用他们的专业知识做得更好，使用公认的创业投资者的投资作为检验公司是否是真实创业公司的标准。\n政府如何决定谁是创业投资者？就像他们决定什么算作学生签证的大学一样。我们将建立自己的认证程序。我们彼此认识。\n从移民标准来看，10,000人是沧海一粟，但会代表创业创始人池子的巨大增加。我认为这会对经济产生如此可见的影响，以至于会使提出该法案的立法者闻名。唯一确定的方法是尝试它，而这几乎不需要成本。\n感谢Trevor Blackwell、Paul Buchheit、Jeff Clavier、David Hornik、Jessica Livingston、Greg Mcadoo、Aydin Senkut和Fred Wilson阅读本文的草稿。\n相关：\n企业家之国\n约一半的风投支持公司创始人是移民\n",
    "description": "",
    "tags": ["创始人","签证","移民","创业公司","政策","经济"],
    "categories": [],
    "content": "→ English Version\n创始人签证 2009年4月\n我通常避免政治，但既然我们现在似乎有一个愿意接受建议的政府，我冒险提一个建议。政府能做的增加这个国家创业公司数量的最大事情是一项零成本政策：为创业创始人建立一个新的签证类别。\n在美国创造的新创业公司数量的最大限制不是税收政策或就业法，甚至不是萨班斯-奥克斯利法。而是我们不让那些想要创办创业公司的人进入这个国家。\n每年只让10,000名创业创始人进入这个国家可能对经济产生可见的影响。如果我们假设每个创业公司4个人，这可能是高估，那就是2500家新公司。每年。它们不会都成长为谷歌那么大，但在2500家中，有些会接近。\n根据定义，这10,000名创始人不会抢走美国人的工作：这可以是签证条款的一部分，他们不能为现有公司工作，只能为他们创立的新公司工作。事实上，他们会为美国人创造更多就业机会，因为他们创立的公司随着成长会雇佣更多员工。\n棘手的部分可能似乎是如何定义创业公司。但这可以很容易地解决：让市场决定。创业投资者努力寻找最好的创业公司。政府无法比利用他们的专业知识做得更好，使用公认的创业投资者的投资作为检验公司是否是真实创业公司的标准。\n政府如何决定谁是创业投资者？就像他们决定什么算作学生签证的大学一样。我们将建立自己的认证程序。我们彼此认识。\n从移民标准来看，10,000人是沧海一粟，但会代表创业创始人池子的巨大增加。我认为这会对经济产生如此可见的影响，以至于会使提出该法案的立法者闻名。唯一确定的方法是尝试它，而这几乎不需要成本。\n感谢Trevor Blackwell、Paul Buchheit、Jeff Clavier、David Hornik、Jessica Livingston、Greg Mcadoo、Aydin Senkut和Fred Wilson阅读本文的草稿。\n相关：\n企业家之国\n约一半的风投支持公司创始人是移民\n"
  },{
    "title": "创造新事物的六个原则",
    "url": "/paul_graham/essays_zh/newthings/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创造新事物的六个原则 2008年2月\nArc 发布引发的激烈反应有一个意想不到的后果：它让我意识到我有一种设计哲学。那些更有条理的批评者主要抱怨的是 Arc 看起来太脆弱了。经过多年的工作，我所能展示的只有几千行宏？为什么我没有从事更实质性的问题？\n当我思考这些评论时，突然意识到它们看起来多么熟悉。这正是人们一开始对 Viaweb、Y Combinator 和我大多数文章所说的那种话。\n当我们推出 Viaweb 时，在风险投资家和电子商务\u0026quot;专家\u0026quot;看来这似乎很可笑。我们只是公寓里的几个人，这在1995年并不像现在那样酷。而我们所构建的东西，在他们看来，甚至不是软件。对他们来说，软件等于大型的 Windows 应用程序。由于 Viaweb 是他们见到的第一个基于网络的应用程序，它似乎仅仅是一个网站。当他们发现 Viaweb 不处理信用卡交易时（我们第一年确实没有处理），他们更加轻视。交易处理在他们看来就是电子商务的全部。这听起来严肃且困难。\n然而，神秘的是，Viaweb 最终碾压了所有竞争对手。\n对 Y Combinator 的最初反应几乎完全相同。它看起来轻得可笑。创业融资意味着 A 轮融资：在数月的严肃、商业化的会议后，给予少数由有资历的人创立的初创公司数百万美元，条件在一英尺厚的文件中描述。Y Combinator 似乎微不足道。现在说 Y Combinator 是否会像 Viaweb 那样成功还为时过早，但从模仿的数量来看，很多人似乎认为我们抓住了重点。\n我无法衡量我的文章是否成功，除了页面浏览量，但对它们的反应至少与我开始时不同。起初，Slashdot 上的巨魔的默认反应是（翻译成有条理的话）：\u0026ldquo;这家伙是谁，他有什么权威写这些话题？我还没读过这篇文章，但这么短、以如此非正式风格写的东西，在相关学科的专家已经写了很多厚书的情况下，不可能对某个话题有任何有用的见解。\u0026ldquo;现在在新一代网站上有新一代的巨魔，但他们至少已经开始省略最初的\u0026quot;这家伙是谁？\u0026rdquo;\n现在人们对 Arc 说着与一开始对 Viaweb、Y Combinator 和我大多数文章相同的话。为什么会有这种模式？答案，我意识到，是我对这四者的操作方式都是相同的。\n这就是：我喜欢找到（a）简单的解决方案（b）来解决被忽视的问题（c）这些问题确实需要解决，并且（d）尽可能非正式地交付它们，（e）从一个非常粗糙的第1版开始，然后（f）快速迭代。\n当我第一次明确列出这些原则时，我注意到一些引人注目的事情：这几乎是产生轻蔑初始反应的配方。虽然简单的解决方案更好，但它们看起来不像复杂的解决方案那样令人印象深刻。被忽视的问题按定义就是大多数人认为不重要的问题。非正式地交付解决方案意味着人们不能通过呈现方式来判断某些东西，而必须实际理解它，这需要更多工作。而从一个粗糙的第1版开始意味着你的初始努力总是小而不完整的。\n我当然注意到，人们似乎从来没有在第一时间掌握新想法。我以为这只是因为大多数人都很愚蠢。现在我看到了更多的原因。像一个逆向投资基金，遵循这种策略的人几乎总是在做普通人看来错误的事情。\n与逆向投资策略一样，这正是重点。这种技术是成功的（长期来看），因为它给了你所有其他人为了显得合法而放弃的优势。如果你处理被忽视的问题，你更有可能发现新事物，因为你的竞争更少。如果你非正式地交付解决方案，你（a）节省了所有本要花费让它们看起来令人印象深刻的努力，（b）避免了欺骗自己以及观众的危险。如果你发布一个粗糙的第1版然后迭代，你的解决方案可以从自然的想象力中受益，正如费曼指出的，这比你自己的更强大。\n以 Viaweb 为例，简单的解决方案是让软件在服务器上运行。被忽视的问题是自动生成网站；1995年，在线商店都是人工设计师手工制作的，但我们知道这无法扩展。真正重要的是图形设计，而不是交易处理。非正式的交付机制是我，穿着牛仔裤和T恤出现在某个零售商的办公室。而粗糙的第1版，如果我没记错的话，我们发布时不到一万行代码。\n这种技术的力量超出了初创公司、编程语言和文章的范围。它可能扩展到任何类型的创造性工作。当然它可以用于绘画：这正是塞尚和克利所做的。\n在 Y Combinator，我们把钱押在上面，从这个意义上说，我们鼓励我们资助的初创公司以这种方式工作。好想法总是在你的眼皮底下。所以要寻找其他人忽视的简单事物——人们后来会声称\u0026quot;显而易见\u0026quot;的事物——特别是当他们被过时的惯例误导，或者试图做表面上令人印象深刻的事情时。弄清楚真正的问题是什么，并确保你解决了这个问题。不要担心试图看起来像公司；产品才是长期获胜的关键。尽可能快地发布，这样你就开始从用户那里学习你应该制作什么。\nReddit 是这种方法的一个经典例子。当 Reddit 首次发布时，似乎没什么内容。对那些图形设计不成熟的人来说，它故意极简的设计似乎根本不像设计。但 Reddit 解决了真正的问题，即告诉人们什么是新的，其他方面不要干扰。结果它变得非常成功。现在传统观念赶上了它，这似乎是显而易见的。人们看着 Reddit 认为创始人是幸运的。像所有这样的事情，它比看起来更难。Reddit 们如此用力地逆流而上以至于扭转了它；现在看起来他们只是在顺流而下。\n所以当你看着像 Reddit 这样的东西并想\u0026quot;我希望我能想到这样的想法\u0026quot;时，记住：这样的想法都在你周围。但你忽略了它们，因为它们看起来是错误的。\n",
    "description": "",
    "tags": ["创新","设计","简单","创业","创造力","问题解决"],
    "categories": [],
    "content": "→ English Version\n创造新事物的六个原则 2008年2月\nArc 发布引发的激烈反应有一个意想不到的后果：它让我意识到我有一种设计哲学。那些更有条理的批评者主要抱怨的是 Arc 看起来太脆弱了。经过多年的工作，我所能展示的只有几千行宏？为什么我没有从事更实质性的问题？\n当我思考这些评论时，突然意识到它们看起来多么熟悉。这正是人们一开始对 Viaweb、Y Combinator 和我大多数文章所说的那种话。\n当我们推出 Viaweb 时，在风险投资家和电子商务\u0026quot;专家\u0026quot;看来这似乎很可笑。我们只是公寓里的几个人，这在1995年并不像现在那样酷。而我们所构建的东西，在他们看来，甚至不是软件。对他们来说，软件等于大型的 Windows 应用程序。由于 Viaweb 是他们见到的第一个基于网络的应用程序，它似乎仅仅是一个网站。当他们发现 Viaweb 不处理信用卡交易时（我们第一年确实没有处理），他们更加轻视。交易处理在他们看来就是电子商务的全部。这听起来严肃且困难。\n然而，神秘的是，Viaweb 最终碾压了所有竞争对手。\n对 Y Combinator 的最初反应几乎完全相同。它看起来轻得可笑。创业融资意味着 A 轮融资：在数月的严肃、商业化的会议后，给予少数由有资历的人创立的初创公司数百万美元，条件在一英尺厚的文件中描述。Y Combinator 似乎微不足道。现在说 Y Combinator 是否会像 Viaweb 那样成功还为时过早，但从模仿的数量来看，很多人似乎认为我们抓住了重点。\n我无法衡量我的文章是否成功，除了页面浏览量，但对它们的反应至少与我开始时不同。起初，Slashdot 上的巨魔的默认反应是（翻译成有条理的话）：\u0026ldquo;这家伙是谁，他有什么权威写这些话题？我还没读过这篇文章，但这么短、以如此非正式风格写的东西，在相关学科的专家已经写了很多厚书的情况下，不可能对某个话题有任何有用的见解。\u0026ldquo;现在在新一代网站上有新一代的巨魔，但他们至少已经开始省略最初的\u0026quot;这家伙是谁？\u0026rdquo;\n现在人们对 Arc 说着与一开始对 Viaweb、Y Combinator 和我大多数文章相同的话。为什么会有这种模式？答案，我意识到，是我对这四者的操作方式都是相同的。\n这就是：我喜欢找到（a）简单的解决方案（b）来解决被忽视的问题（c）这些问题确实需要解决，并且（d）尽可能非正式地交付它们，（e）从一个非常粗糙的第1版开始，然后（f）快速迭代。\n当我第一次明确列出这些原则时，我注意到一些引人注目的事情：这几乎是产生轻蔑初始反应的配方。虽然简单的解决方案更好，但它们看起来不像复杂的解决方案那样令人印象深刻。被忽视的问题按定义就是大多数人认为不重要的问题。非正式地交付解决方案意味着人们不能通过呈现方式来判断某些东西，而必须实际理解它，这需要更多工作。而从一个粗糙的第1版开始意味着你的初始努力总是小而不完整的。\n我当然注意到，人们似乎从来没有在第一时间掌握新想法。我以为这只是因为大多数人都很愚蠢。现在我看到了更多的原因。像一个逆向投资基金，遵循这种策略的人几乎总是在做普通人看来错误的事情。\n与逆向投资策略一样，这正是重点。这种技术是成功的（长期来看），因为它给了你所有其他人为了显得合法而放弃的优势。如果你处理被忽视的问题，你更有可能发现新事物，因为你的竞争更少。如果你非正式地交付解决方案，你（a）节省了所有本要花费让它们看起来令人印象深刻的努力，（b）避免了欺骗自己以及观众的危险。如果你发布一个粗糙的第1版然后迭代，你的解决方案可以从自然的想象力中受益，正如费曼指出的，这比你自己的更强大。\n以 Viaweb 为例，简单的解决方案是让软件在服务器上运行。被忽视的问题是自动生成网站；1995年，在线商店都是人工设计师手工制作的，但我们知道这无法扩展。真正重要的是图形设计，而不是交易处理。非正式的交付机制是我，穿着牛仔裤和T恤出现在某个零售商的办公室。而粗糙的第1版，如果我没记错的话，我们发布时不到一万行代码。\n这种技术的力量超出了初创公司、编程语言和文章的范围。它可能扩展到任何类型的创造性工作。当然它可以用于绘画：这正是塞尚和克利所做的。\n在 Y Combinator，我们把钱押在上面，从这个意义上说，我们鼓励我们资助的初创公司以这种方式工作。好想法总是在你的眼皮底下。所以要寻找其他人忽视的简单事物——人们后来会声称\u0026quot;显而易见\u0026quot;的事物——特别是当他们被过时的惯例误导，或者试图做表面上令人印象深刻的事情时。弄清楚真正的问题是什么，并确保你解决了这个问题。不要担心试图看起来像公司；产品才是长期获胜的关键。尽可能快地发布，这样你就开始从用户那里学习你应该制作什么。 …"
  },{
    "title": "创造者的品味",
    "url": "/paul_graham/essays_zh/taste/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创造者的品味 2002年2月\n\u0026ldquo;\u0026hellip;哥白尼对[等分点]的美学反对，成为他拒绝托勒密系统的一个重要动机\u0026hellip;\u0026hellip;\u0026rdquo;\n托马斯·库恩，《哥白尼革命》 \u0026ldquo;我们所有人都被凯利·约翰逊训练过，并且狂热地相信他的坚持：看起来美丽的飞机也会以同样的方式飞行。\u0026rdquo;\n本·里奇，《臭鼬工厂》 \u0026ldquo;美是第一个测试：在这个世界上，丑陋的数学没有永久的地位。\u0026rdquo;\nG·H·哈代，《一个数学家的辩解》 我最近和一个在麻省理工学院教书的朋友交谈。他的领域现在很热门，每年他都被大量想成为研究生的申请淹没。\u0026ldquo;他们中许多人看起来很聪明，\u0026ldquo;他说。\u0026ldquo;我无法判断的是他们是否有任何品味。\u0026rdquo;\n品味。你现在很少听到这个词。然而我们仍然需要这个基本概念，无论我们称之为什么。我的朋友的意思是，他想要的学生不仅仅是好的技术人员，而是那些能够运用他们的技术知识来设计美丽事物的人。\n数学家称好作品为\u0026quot;美丽的\u0026rdquo;，科学家、工程师、音乐家、建筑师、设计师、作家和画家过去或现在也是如此。他们使用同一个词只是巧合，还是他们所指的东西有重叠？如果有重叠，我们能否利用一个领域关于美的发现来帮助另一个领域？\n对于我们这些设计事物的人来说，这些不仅仅是理论问题。如果确实有美这样的东西，我们需要能够识别它。我们需要好的品味来做出好的东西。不要把美当作一个空泛的抽象概念，根据你对空泛抽象概念的感觉来要么夸夸其谈要么回避，让我们尝试把它当作一个实际问题来考虑：你如何做出好的东西？\n如果你现在提到品味，很多人会告诉你\u0026quot;品味是主观的。\u0026ldquo;他们相信这一点是因为对他们来说确实如此。当他们喜欢某样东西时，他们不知道为什么。可能是因为它美丽，或者因为他们母亲有一个，或者因为他们在杂志上看到电影明星有一个，或者因为他们知道它很贵。他们的思想是一团未经过审视的冲动。\n我们大多数人在童年时都被鼓励不要审视这团乱麻。如果你嘲笑你的小弟弟在涂色书中把人涂成绿色，你母亲可能会告诉你一些类似\u0026quot;你喜欢用你的方式做，他喜欢用他的方式\u0026quot;的话。\n在这一点上，你母亲并不是试图教你关于美学的重要真理。她是想让你们两个停止争吵。\n就像许多成年人告诉我们的半真相一样，这与他们告诉我们的其他事情相矛盾。在向你灌输品味只是个人偏好的事情之后，他们带你去博物馆，告诉你应该注意，因为莱昂纳多是伟大的艺术家。\n此时孩子脑中想的是什么？他认为\u0026quot;伟大艺术家\u0026quot;是什么意思？在被教导多年认为每个人都只是喜欢用自己的方式做事之后，他不太可能直接得出伟大艺术家是作品比其他人更好的人的结论。在他的托勒密宇宙模型中，一个更可能的理论是，伟大艺术家是对你有好处的某种东西，就像西兰花一样，因为有人在一本书里这样说。\n说品味只是个人偏好是防止争执的好方法。问题是，这不是真的。当你开始设计事物时，你会感觉到这一点。\n无论人们做什么工作，他们都自然地想做得更好。足球运动员喜欢赢得比赛。CEO喜欢增加收益。在工作中变得更好是自尊的事情，也是一种真正的快乐。但如果你的工作是设计事物，而没有美这样的东西，那么你就不可能在工作中变得更好。如果品味只是个人偏好，那么每个人的品味都已经完美：你喜欢你所喜欢的，就这样。\n和在任何工作中一样，当你继续设计事物时，你会做得更好。你的品味会改变。而且，像任何在工作中变得更好的人一样，你会知道你正在变得更好。如果是这样，你旧的品味不仅仅是不同，而是更差。品味不能错的公理就不成立了。\n相对主义现在很时髦，这可能会阻碍你思考品味问题，即使你的品味在成长。但如果你走出衣柜，至少对自己承认有好设计和坏设计这样的东西，那么你就可以开始详细研究好设计。你的品味如何改变？当你犯错误时，是什么导致你犯错误？其他人从设计中学到了什么？\n一旦你开始审视这个问题，不同领域关于美的想法有多少共同之处是令人惊讶的。好的设计原则一次又一次地出现。\n好的设计是简单的。你从数学到绘画都听到这个。在数学中，这意味着较短的证明往往是较好的证明。特别是在公理方面，少即是多。在编程中这意味着大致相同的事情。对于建筑师和设计师来说，这意味着美应该依赖于几个精心选择的结构元素，而不是大量表面装饰。（装饰本身并不坏，只有当它是乏味形式的伪装时才坏。）同样，在绘画中，几个精心观察和坚实建模物体的静物往往比比如花边领的华丽但重复乏味的绘画更有趣。在写作中，这意味着：说出你的意思并简短地说。\n必须强调简单似乎很奇怪。你会认为简单应该是默认的。华丽需要更多工作。但当人们试图变得有创意时，似乎发生了某种变化。初学写作的作者采用一种浮夸的语气，听起来一点也不像他们说话的方式。试图艺术的设计者求助于曲线和卷曲。画家发现他们是表现主义者。这都是逃避。在长单词或\u0026quot;表现性\u0026quot;笔触下面，没有太多实质性内容，那是可怕的。\n当你被迫简单时，你被迫面对真正的问题。当你不能提供装饰时，你必须提供实质。\n好的设计是永恒的。在数学中，每个证明都是永恒的，除非它包含错误。那么哈代说丑陋的数学没有永久地位是什么意思？他的意思和凯利·约翰逊的意思一样：如果某物丑陋，它不可能是最佳解决方案。一定有更好的一个，最终有人会发现它。\n目标是永恒是让你自己找到最佳答案的一种方式：如果你能想象有人超越你，你应该自己这样做。一些最伟大的大师做得如此之好，以至于给后来者留下很小的空间。自从丢勒以来的每个雕刻家都不得不生活在他的阴影下。\n目标是永恒也是逃避时尚掌控的一种方式。时尚几乎根据定义随时间变化，所以如果你能做出在未来很久看起来仍然很好的东西，那么它的吸引力必然更多来自优点而不是时尚。\n奇怪的是，如果你想制作吸引后代的东西，一种方法是尝试吸引前代。很难猜测未来会是什么样子，但我们可以确定它会像过去一样不在乎现在的时尚。所以如果你能制作吸引今天人们的东西，也能吸引1500年的人们，那么它很可能吸引2500年的人们。\n好的设计解决正确的问题。典型的炉子有四个排列成方形的燃烧器，和一个控制每个的旋钮。你如何安排旋钮？最简单的答案是把它们排成一排。但这是对错误问题的简单答案。旋钮是给人类使用的，如果你把它们排成一排，不幸的人类必须每次停下来思考哪个旋钮匹配哪个燃烧器。最好把旋钮像燃烧器一样排列成方形。\n很多坏设计是勤奋但误入歧途的。在二十世纪中期，有一种用无衬线字体排文本的时尚。这些字体更接近纯粹、潜在的字母形式。但在文本中，这不是你试图解决的问题。为了易读性，字母容易区分更重要。它可能看起来维多利亚式，但Times Roman小写g很容易与小写y区分。\n问题和解决方案都可以改进。在软件中，一个棘手的问题通常可以被一个容易解决的等效问题替代。物理学随着问题变得预测可观察行为，而不是与经文协调而进展更快。\n好的设计是暗示性的。简·奥斯汀的小说几乎不包含描述；她不告诉你一切看起来如何，而是如此好地讲述她的故事，让你自己想象场景。同样，暗示的绘画通常比直接告知的更吸引人。每个人都为《蒙娜丽莎》编造自己的故事。\n在建筑和设计中，这个原则意味着建筑或物体应该让你以你想要的方式使用它：一个好的建筑，例如，将作为人们在其中想要过任何生活的背景，而不是让他们生活得像在执行建筑师编写的程序一样。\n在软件中，这意味着你应该给用户一些基本元素，他们可以按照自己的意愿组合，像乐高一样。在数学中，一个成为大量新工作基础的证明比一个困难但不导致未来发现的证明更可取；在科学中，引用通常被认为是价值的粗略指标。\n好的设计通常是有点滑稽的。这一点可能并不总是正确。但丢勒的雕刻、沙里宁的子宫椅、万神殿和原版保时捷911在我看来都有点滑稽。哥德尔不完备定理看起来像一个恶作剧。\n我认为这是因为幽默与力量有关。有幽默感就是强大：保持幽默感是摆脱不幸，而失去幽默感是被它们伤害。因此力量——或至少是特权——的标志是不把自己太当回事。自信的人常常，像燕子一样，似乎在稍微嘲弄整个过程，就像希区柯克在他的电影中或勃鲁盖尔在他的画中——或者莎士比亚，就此而言。\n好的设计不一定非得滑稽，但很难想象被称为没有幽默感的东西同时是好设计。\n好的设计是困难的。如果你看看那些做了伟大工作的人，他们似乎都有一个共同点，就是他们工作非常努力。如果你不努力工作，你可能是在浪费你的时间。\n难题需要巨大的努力。在数学中，困难的证明需要巧妙的解决方案，而那些往往是有趣的。工程学也是如此。\n当你必须爬一座山时，你把不必要的东西扔出背包。因此，不得不在困难地点或小预算上建造的建筑师会发现他被迫产生优雅的设计。时尚和华饰被解决问题的困难业务推到一边。\n不是每种困难都是好的。有好的痛苦和坏的痛苦。你想要跑步得到的痛苦，而不是踩到钉子得到的痛苦。困难的问题对设计师可能是好的，但善变的客户或不可靠的材料不是。\n在艺术中，传统上最高位置被给予人物画。这个传统有些道理，不仅是因为面部图片能按下我们大脑中其他图片不能按下的按钮。我们如此擅长看脸，以至于我们迫使任何画它们的人努力工作来满足我们。如果你画一棵树，改变树枝的角度五度，没人会知道。当你改变某人眼睛的角度五度时，人们会注意到。\n当包豪斯设计师采用沙利文的\u0026quot;形式追随功能\u0026quot;时，他们的意思是形式应该追随功能。如果功能足够困难，形式被迫追随它，因为没有精力用于错误。野生动物是美丽的，因为它们生活艰难。\n好的设计看起来容易。像伟大的运动员一样，伟大的设计师让它看起来容易。大部分这是一种错觉。好的写作的轻松、谈话式的语调只在第八次重写时出现。\n在科学和工程中，一些最伟大的发现看起来如此简单，以至于你对自己说，我本可以想到那个。发现者有权回答，那你为什么不呢？\n一些莱昂纳多头部只是几条线。你看着它们想，你只需要把八到十条线放在正确的位置，你就做出了这个美丽的肖像。是的，但你必须把它们放在绝对正确的位置。最小的错误会让整个事情崩溃。\n线条画实际上是最困难的视觉媒介，因为它们要求接近完美。用数学术语，它们是闭式解；较差的艺术家字面上通过逐次近似解决相同的问题。孩子在大约十岁时放弃绘画的原因之一是他们决定开始像成年人一样绘画，而他们尝试的第一件事之一是脸的线条画。砰！\n在大多数领域，容易的外表似乎来自练习。也许练习的作用是训练你的潜意识处理过去需要有意识思考的任务。在某些情况下，你字面上训练你的身体。专家钢琴家可以比大脑向手发送信号更快地弹奏音符。同样，艺术家过一段时间后，可以让视觉感知从眼睛流入，从手流出，就像某人用脚打拍子一样自动。\n当人们谈论处于\u0026quot;状态\u0026quot;时，我认为他们的意思是脊髓控制了情况。你的脊髓较少犹豫，它让有意识思考处理难题。\n好的设计使用对称。我认为对称可能只是实现简单的一种方式，但它重要到足以单独提及。自然界大量使用它，这是好迹象。\n有两种对称，重复和递归。递归意味着在子元素中重复，像叶子的脉络图案。\n对称现在在某些领域不时髦，是对过去过度的一种反应。建筑师在维多利亚时代开始有意识地使建筑不对称，到1920年代不对称是现代主义建筑的明确前提。但即使这些建筑也只是倾向于在主要轴上不对称；有数百个小对称。\n在写作中，你在每个层次都发现对称，从句子中的短语到小说的情节。你在音乐和艺术中发现相同的东西。马赛克（和一些塞尚作品）通过用相同的原子构成整个图画获得额外的视觉冲击力。构图对称产生了一些最令人难忘的绘画，特别是当两半相互反应时，如《创造亚当》或《美国哥特式》。\n在数学和工程中，递归尤其是一个巨大的胜利。归纳证明非常简短。在软件中，可以用递归解决的问题几乎总是最好那样解决。埃菲尔铁塔看起来令人印象深刻，部分是因为它是一个递归解决方案，塔上之塔。\n对称的危险，特别是重复的危险，是它可以被用作思想的替代。\n好的设计类似自然。类似自然本身并不内在地好，而是自然界有很长时间解决这个问题。当你的答案类似自然界的时，是好迹象。\n复制不是作弊。很少有人会否认故事应该像生活。在生活中工作也是绘画中的宝贵工具，尽管它的作用经常被误解。目的不仅仅是制作记录。从生活中绘画的要点是它给你的思想提供咀嚼的东西：当你的眼睛看着某物时，你的手会做更有趣的工作。\n模仿自然在工程学中也有效。长期以来，船有像动物胸腔一样的脊柱和肋骨。在某些情况下，我们可能必须等待更好的技术：早期飞机设计师错误地设计看起来像鸟的飞机，因为他们没有足够轻的材料或动力源（莱特兄弟的发动机重152磅，只产生12马力。）或足够复杂的控制系统让机器像鸟一样飞，但我可以想象五十年后像鸟一样飞的小型无人侦察机。\n既然我们有足够的计算机能力，我们可以模仿自然的方法以及结果。遗传算法可能让我们创造出太复杂而无法在通常意义上设计的东西。\n好的设计是重新设计。第一次就做对是罕见的。专家期望抛弃一些早期工作。他们计划让计划改变。\n抛弃工作需要信心。你必须能够想，那里还有更多。例如，当人们开始绘画时，他们常常不愿意重做不对的部分；他们觉得自己已经走这么远很幸运，如果他们尝试重做某物，结果会更糟。相反，他们说服自己图画并不是那么糟糕，真的——事实上，也许他们有意让它看起来那样。\n危险领域，那个；如果有的话，你应该培养不满。在莱昂纳多的绘画中，经常有五到六次尝试把一条线画对。保时捷911独特的后部只在一个笨拙原型的重新设计中出现。在赖特对古根海姆的早期计划中，右半边是一个金字形神塔；他把它倒置得到现在的形状。\n错误是自然的。不要把它们当作灾难，而是让它们容易承认和容易修复。莱昂纳多或多或少发明了素描，作为一种让绘画承担更多探索重量的方式。开源软件有较少的错误，因为它承认错误的可能性。\n有一个使变化容易的媒介是有帮助的。当油画在十五世纪取代蛋彩时，它帮助画家处理像人物这样困难的题材，因为与蛋彩不同，油可以混合和覆盖。\n好的设计可以复制。对复制的态度常常绕了一圈。新手无意识地模仿；接下来他试图有意识地原创；最后，他决定正确比原创更重要。\n无意识的模仿几乎坏设计的配方。如果你不知道你的想法来自哪里，你可能是在模仿模仿者。拉斐尔如此渗透十九世纪中期的品味，以至于任何试图绘画的人都在模仿他，通常经过几次 remove。这，而不是拉斐尔自己的作品，是困扰前拉斐尔派的东西。\n",
    "description": "",
    "tags": ["品味","设计","美","美学","简单","创造力","艺术"],
    "categories": [],
    "content": "→ English Version\n创造者的品味 2002年2月\n\u0026ldquo;\u0026hellip;哥白尼对[等分点]的美学反对，成为他拒绝托勒密系统的一个重要动机\u0026hellip;\u0026hellip;\u0026rdquo;\n托马斯·库恩，《哥白尼革命》 \u0026ldquo;我们所有人都被凯利·约翰逊训练过，并且狂热地相信他的坚持：看起来美丽的飞机也会以同样的方式飞行。\u0026rdquo;\n本·里奇，《臭鼬工厂》 \u0026ldquo;美是第一个测试：在这个世界上，丑陋的数学没有永久的地位。\u0026rdquo;\nG·H·哈代，《一个数学家的辩解》 我最近和一个在麻省理工学院教书的朋友交谈。他的领域现在很热门，每年他都被大量想成为研究生的申请淹没。\u0026ldquo;他们中许多人看起来很聪明，\u0026ldquo;他说。\u0026ldquo;我无法判断的是他们是否有任何品味。\u0026rdquo;\n品味。你现在很少听到这个词。然而我们仍然需要这个基本概念，无论我们称之为什么。我的朋友的意思是，他想要的学生不仅仅是好的技术人员，而是那些能够运用他们的技术知识来设计美丽事物的人。\n数学家称好作品为\u0026quot;美丽的\u0026rdquo;，科学家、工程师、音乐家、建筑师、设计师、作家和画家过去或现在也是如此。他们使用同一个词只是巧合，还是他们所指的东西有重叠？如果有重叠，我们能否利用一个领域关于美的发现来帮助另一个领域？\n对于我们这些设计事物的人来说，这些不仅仅是理论问题。如果确实有美这样的东西，我们需要能够识别它。我们需要好的品味来做出好的东西。不要把美当作一个空泛的抽象概念，根据你对空泛抽象概念的感觉来要么夸夸其谈要么回避，让我们尝试把它当作一个实际问题来考虑：你如何做出好的东西？\n如果你现在提到品味，很多人会告诉你\u0026quot;品味是主观的。\u0026ldquo;他们相信这一点是因为对他们来说确实如此。当他们喜欢某样东西时，他们不知道为什么。可能是因为它美丽，或者因为他们母亲有一个，或者因为他们在杂志上看到电影明星有一个，或者因为他们知道它很贵。他们的思想是一团未经过审视的冲动。\n我们大多数人在童年时都被鼓励不要审视这团乱麻。如果你嘲笑你的小弟弟在涂色书中把人涂成绿色，你母亲可能会告诉你一些类似\u0026quot;你喜欢用你的方式做，他喜欢用他的方式\u0026quot;的话。\n在这一点上，你母亲并不是试图教你关于美学的重要真理。她是想让你们两个停止争吵。\n就像许多成年人告诉我们的半真相一样，这与他们告诉我们的其他事情相矛盾。在向你灌输品味只是个人偏好的事情之后，他们带你去博物馆，告诉你应该注意，因为莱昂纳多是伟大的艺术家。\n此时孩子脑中想的是什么？他认为\u0026quot;伟大艺术家\u0026quot;是什么意思？在被教导多年认为每个人都只是喜欢用自己的方式做事之后，他不太可能直接得出伟大艺术家是作品比其他人更好的人的结论。在他的托勒密宇宙模型中，一个更可能的理论是，伟大艺术家是对你有好处的某种东西，就像西兰花一样，因为有人在一本书里这样说。\n说品味只是个人偏好是防止争执的好方法。问题是，这不是真的。当你开始设计事物时，你会感觉到这一点。\n无论人们做什么工作，他们都自然地想做得更好。足球运动员喜欢赢得比赛。CEO喜欢增加收益。在工作中变得更好是自尊的事情，也是一种真正的快乐。但如果你的工作是设计事物，而没有美这样的东西，那么你就不可能在工作中变得更好。如果品味只是个人偏好，那么每个人的品味都已经完美：你喜欢你所喜欢的，就这样。\n和在任何工作中一样，当你继续设计事物时，你会做得更好。你的品味会改变。而且，像任何在工作中变得更好的人一样，你会知道你正在变得更好。如果是这样，你旧的品味不仅仅是不同，而是更差。品味不能错的公理就不成立了。\n相对主义现在很时髦，这可能会阻碍你思考品味问题，即使你的品味在成长。但如果你走出衣柜，至少对自己承认有好设计和坏设计这样的东西，那么你就可以开始详细研究好设计。你的品味如何改变？当你犯错误时，是什么导致你犯错误？其他人从设计中学到了什么？\n一旦你开始审视这个问题，不同领域关于美的想法有多少共同之处是令人惊讶的。好的设计原则一次又一次地出现。\n好的设计是简单的。你从数学到绘画都听到这个。在数学中，这意味着较短的证明往往是较好的证明。特别是在公理方面，少即是多。在编程中这意味着大致相同的事情。对于建筑师和设计师来说，这意味着美应该依赖于几个精心选择的结构元素，而不是大量表面装饰。（装饰本身并不坏，只有当它是乏味形式的伪装时才坏。）同样，在绘画中，几个精心观察和坚实建模物体的静物往往比比如花边领的华丽但重复乏味的绘画更有趣。在写作中，这意味着：说出你的意思并简短地说。\n必须强调简单似乎很奇怪。你会认为简单应该是默认的。华丽需要更多工作。但当人们试图变得有创意时，似乎发生了某种变化。初学写作的作者采用一种浮夸的语气，听起来一点也不 …"
  },{
    "title": "创造者的日程表，管理者的日程表",
    "url": "/paul_graham/essays_zh/makersschedule/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n创造者的日程表，管理者的日程表 2009年7月\n\u0026ldquo;\u0026hellip;仅仅意识到有约会，有时就会困扰一整天。\u0026rdquo; – 查尔斯·狄更斯\n程序员如此讨厌会议的一个原因是，他们与其他人的日程表类型不同。会议对他们来说成本更高。\n有两种类型的日程表，我称之为管理者的日程表和创造者的日程表。管理者的日程表是为老板设计的。它体现在传统的约会簿中，每天被划分为一小时的时间段。如果需要，你可以为单个任务屏蔽几个小时，但默认情况下你每小时都会改变正在做的事情。\n当你这样使用时间时，与某人会面只是一个实际问题。在你的日程表中找一个空闲的时间段，预约他们，就完成了。\n大多数有权力的人都在管理者的日程表上。这是指挥的日程表。但还有一种使用时间的方式在创造事物的人中很常见，比如程序员和作家。他们通常更喜欢至少以半天为单位使用时间。你无法在一小时的时间内很好地写作或编程。那 barely 是足够开始的时间。\n当你按照创造者的日程表工作时，会议是灾难性的。一个会议可以毁掉整个下午，因为它把下午分成两部分，每部分都太小，无法做任何困难的事情。而且你必须记得去参加会议。这对于管理者的日程表上的人来说不是问题。下一个小时总是有事情；唯一的问题是什么。但当创造者的日程表上的人有会议时，他们必须考虑它。\n对于创造者日程表上的人来说，开会就像抛出异常。它不仅让你从一个任务切换到另一个任务；它改变了你工作的模式。\n我发现一个会议有时会影响一整天。一个会议通常会破坏至少半天，通过打乱上午或下午。此外，有时还有连锁效应。如果我知道下午会被打断，我在上午开始一些雄心勃勃的事情的可能性就会稍微降低。我知道这听起来可能过于敏感，但如果你是创造者，想想你自己的情况。当想到有一整天的时间可以工作，没有任何约会时，你的精神不会振奋吗？嗯，这意味着当你没有这样的时间时，你的精神会相应地低落。而雄心勃勃的项目按定义接近你能力的极限。士气的小幅下降就足以扼杀它们。\n每种类型的日程表本身都运作良好。当它们相遇时，问题就出现了。由于大多数有权力的人都在管理者的日程表上，他们有能力让每个人都按照他们的频率共振，如果他们想的话。但更聪明的人会克制自己，如果他们知道为他们工作的一些人需要大块的时间来工作。\n我们的情况是不寻常的。几乎所有的投资者，包括我认识的所有风险投资家，都在管理者的日程表上。但Y Combinator按照创造者的日程表运行。Rtm、Trevor和我这样做是因为我们一直如此，Jessica也主要是如此，因为她与我们同步。\n如果开始有更多像我们这样的公司，我不会感到惊讶。我怀疑创始人可能越来越能够抵抗，或至少推迟，转变为管理者，就像几十年前他们开始能够抵抗从牛仔裤换成西装一样。\n我们如何在创造者的日程表上为这么多创业公司提供建议？通过使用在创造者的日程表中模拟管理者日程表的经典设备：办公时间。我每周几次留出一大块时间来见我们资助的创始人。这些时间块是在我工作日的末尾，我写了一个注册程序，确保给定办公时间内的所有预约都集中在末尾。因为它们在我的一天结束时到来，这些会议从来不会中断。（除非他们的工作日与我的同时结束，会议可能会中断他们的，但既然他们预约了，对他们来说一定是值得的。）在繁忙时期，办公时间有时会变得足够长，以至于压缩了一天，但它们从不中断它。\n当我们在90年代为自己的创业公司工作时，我发展出了另一个划分一天的技巧。我每天从晚餐编程到大约凌晨3点，因为在晚上没有人能打断我。然后我会睡到大约上午11点，进来工作直到晚餐，我称之为\u0026quot;业务事情\u0026quot;。我从来没有用这些术语思考过，但实际上我每天都有两个工作日，一个在管理者的日程表上，一个在创造者的日程表上。\n当你按照管理者的日程表工作时，你可以做一些在创造者的日程表上永远不想做的事情：你可以进行试探性会议。你可以见某人只是为了互相认识。如果你的日程表有空闲的时间段，为什么不呢？也许结果你们可以在某种程度上互相帮助。\n硅谷的商界人士（实际上是整个世界）一直在进行试探性会议。如果你在管理者的日程表上，它们实际上是免费的。它们如此普遍，以至于有独特的语言来提议它们：例如，说你想要\u0026quot;喝杯咖啡\u0026quot;。\n但是，如果你在创造者的日程表上，试探性会议的成本非常可怕。这使我们陷入某种困境。每个人都认为，像其他投资者一样，我们在管理者的日程表上运行。所以他们向我们介绍他们认为我们应该见面的人，或者给我们发邮件提议我们喝杯咖啡。在这一点上，我们有两个选择，都不好：我们可以与他们见面，失去半天的工作；或者我们可以尝试避免与他们见面，可能会冒犯他们。\n直到最近，我们自己对问题的根源还不清楚。我们只是想当然地认为我们必须要么破坏我们的日程表，要么冒犯人。但现在我意识到发生了什么，也许有第三种选择：写一些解释两种类型日程表的东西。也许最终，如果管理者的日程表和创造者的日程表之间的冲突开始被更广泛地理解，它会变得不那么成问题。\n我们这些在创造者日程表上的人愿意妥协。我们知道我们必须有一定数量的会议。我们只要求那些在管理者日程表上的人理解成本。\n感谢 Sam Altman、Trevor Blackwell、Paul Buchheit、Jessica Livingston 和 Robert Morris 阅读本文的草稿。\n相关：\n如何做你喜欢的事 好的和坏的拖延 ",
    "description": "",
    "tags": ["时间","管理","生产力","编程","日程","工作","会议","创业","ycombinator"],
    "categories": [],
    "content": "→ English Version\n创造者的日程表，管理者的日程表 2009年7月\n\u0026ldquo;\u0026hellip;仅仅意识到有约会，有时就会困扰一整天。\u0026rdquo; – 查尔斯·狄更斯\n程序员如此讨厌会议的一个原因是，他们与其他人的日程表类型不同。会议对他们来说成本更高。\n有两种类型的日程表，我称之为管理者的日程表和创造者的日程表。管理者的日程表是为老板设计的。它体现在传统的约会簿中，每天被划分为一小时的时间段。如果需要，你可以为单个任务屏蔽几个小时，但默认情况下你每小时都会改变正在做的事情。\n当你这样使用时间时，与某人会面只是一个实际问题。在你的日程表中找一个空闲的时间段，预约他们，就完成了。\n大多数有权力的人都在管理者的日程表上。这是指挥的日程表。但还有一种使用时间的方式在创造事物的人中很常见，比如程序员和作家。他们通常更喜欢至少以半天为单位使用时间。你无法在一小时的时间内很好地写作或编程。那 barely 是足够开始的时间。\n当你按照创造者的日程表工作时，会议是灾难性的。一个会议可以毁掉整个下午，因为它把下午分成两部分，每部分都太小，无法做任何困难的事情。而且你必须记得去参加会议。这对于管理者的日程表上的人来说不是问题。下一个小时总是有事情；唯一的问题是什么。但当创造者的日程表上的人有会议时，他们必须考虑它。\n对于创造者日程表上的人来说，开会就像抛出异常。它不仅让你从一个任务切换到另一个任务；它改变了你工作的模式。\n我发现一个会议有时会影响一整天。一个会议通常会破坏至少半天，通过打乱上午或下午。此外，有时还有连锁效应。如果我知道下午会被打断，我在上午开始一些雄心勃勃的事情的可能性就会稍微降低。我知道这听起来可能过于敏感，但如果你是创造者，想想你自己的情况。当想到有一整天的时间可以工作，没有任何约会时，你的精神不会振奋吗？嗯，这意味着当你没有这样的时间时，你的精神会相应地低落。而雄心勃勃的项目按定义接近你能力的极限。士气的小幅下降就足以扼杀它们。\n每种类型的日程表本身都运作良好。当它们相遇时，问题就出现了。由于大多数有权力的人都在管理者的日程表上，他们有能力让每个人都按照他们的频率共振，如果他们想的话。但更聪明的人会克制自己，如果他们知道为他们工作的一些人需要大块的时间来工作。\n我们的情况是不寻常的。几乎所有的投资者，包括我认识的所有风险投资家，都在管理者的日程表上。但Y Combinator按照创造者的日程表运行。Rtm、Trevor和我这样做是因为我们一直如此，Jessica也主要是如此，因为她与我们同步。\n如果开始有更多像我们这样的公司，我不会感到惊讶。我怀疑创始人可能越来越能够抵抗，或至少推迟，转变为管理者，就像几十年前他们开始能够抵抗从牛仔裤换成西装一样。\n我们如何在创造者的日程表上为这么多创业公司提供建议？通过使用在创造者的日程表中模拟管理者日程表的经典设备：办公时间。我每周几次留出一大块时间来见我们资助的创始人。这些时间块是在我工作日的末尾，我写了一个注册程序，确保给定办公时间内的所有预约都集中在末尾。因为它们在我的一天结束时到来，这些会议从来不会中断。（除非他们的工作日与我的同时结束，会议可能会中断他们的，但既然他们预约了，对他们来说一定是值得的。）在繁忙时期，办公时间有时会变得足够长，以至于压缩了一天，但它们从不中断它。\n当我们在90年代为自己的创业公司工作时，我发展出了另一个划分一天的技巧。我每天从晚餐编程到大约凌晨3点，因为在晚上没有人能打断我。然后我会睡到大约上午11点，进来工作直到晚餐，我称之为\u0026quot;业务事情\u0026quot;。我从来没有用这些术语思考过，但实际上我每天都有两个工作日，一个在管理者的日程表上，一个在创造者的日程表上。\n当你按照管理者的日程表工作时，你可以做一些在创造者的日程表上永远不想做的事情：你可以进行试探性会议。你可以见某人只是为了互相认识。如果你的日程表有空闲的时间段，为什么不呢？也许结果你们可以在某种程度上互相帮助。\n硅谷的商界人士（实际上是整个世界）一直在进行试探性会议。如果你在管理者的日程表上，它们实际上是免费的。它们如此普遍，以至于有独特的语言来提议它们：例如，说你想要\u0026quot;喝杯咖啡\u0026quot;。\n但是，如果你在创造者的日程表上，试探性会议的成本非常可怕。这使我们陷入某种困境。每个人都认为，像其他投资者一样，我们在管理者的日程表上运行。所以他们向我们介绍他们认为我们应该见面的人，或者给我们发邮件提议我们喝杯咖啡。在这一点上，我们有两个选择，都不好：我们可以与他们见面，失去半天的工作；或者我们可以尝试避免与他们见面，可能会冒犯他们。\n直到最近，我们自己对问题的根源还不清楚。我们只是想当然地认为我们必须要么破坏我们的日程表，要么冒犯人。但现在我意识到发生了什么，也 …"
  },{
    "title": "刻薄",
    "url": "/paul_graham/essays_zh/mean/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n刻薄 2014年11月\n最近我注意到，我认识的最成功的人中很少有刻薄的。有例外，但非常少。\n刻薄并不罕见。事实上，互联网向我们展示的一件事就是人们可以多么刻薄。几十年前，只有名人和专业作家才能发表他们的意见。现在每个人都可以，我们都能看到以前隐藏的刻薄的长尾。\n然而，虽然外面显然有很多刻薄的人，但在我认为最成功的人中几乎没有。这是怎么回事？刻薄和成功成反比吗？\n当然，部分原因是选择偏见。我只认识在某些领域工作的人：创业公司创始人、程序员、教授。我愿意相信其他领域的成功人士是刻薄的。也许成功的对冲基金经理是刻薄的；我不够了解，无法确定。似乎大多数成功的毒枭都很可能是刻薄的。但至少世界上有刻薄人不统治的大块区域，而且这个区域似乎正在增长。\n我的妻子和Y Combinator联合创始人杰西卡是那些具有品格X光视觉的罕见人物之一。和她结婚就像站在机场行李扫描仪旁边。她从投资银行业来到创业世界，她一直对成功的创业公司创始人如何一致地证明是好人，以及坏人如何一致地在创业公司创始人中失败感到惊讶。\n为什么？我认为有几个原因。一个是刻薄会让你变笨。这就是我讨厌争吵的原因。在争吵中你永远不会做到最好，因为争吵不够普遍。胜利总是取决于情况和涉及的人。你赢得争吵不是通过思考大创意，而是通过思考在特定情况下有效的技巧。然而，争吵和思考真正的问题一样耗费精力。对于一个关心如何使用自己大脑的人来说，这尤其痛苦：你的大脑转得很快，但你却寸步难行，就像车轮空转的汽车。\n创业公司不是通过攻击获胜的。他们通过超越获胜。当然有例外，但通常获胜的方法是领先，而不是停下来战斗。\n刻薄的创始人失败的另一个原因是他们无法让最优秀的人为他们工作。他们可以雇佣那些因为需要工作而忍受他们的人。但最优秀的人有其他选择。刻薄的人无法说服最优秀的人为他工作，除非他非常有说服力。虽然拥有最优秀的人对任何组织都有帮助，但对创业公司来说至关重要。\n还有一种互补的力量在起作用：如果你想建造伟大的东西，被仁慈精神驱动会有帮助。最终变得最富有的创业公司创始人不是那些被金钱驱动的人。被金钱驱动的人接受几乎每个成功创业公司在途中都会收到的大额收购要约。[1] 那些继续前进的人被其他东西驱动。他们可能不会明确这么说，但他们通常试图改善世界。这意味着有改善世界愿望的人具有天然优势。[2]\n令人兴奋的是，创业公司不仅仅是刻薄和成功成反比的一种随机工作类型。这种工作是未来。\n在历史的大部分时间里，成功意味着控制稀缺资源。人们通过战斗获得这种资源，无论是游牧民族将狩猎采集者驱赶到边缘土地的字面战斗，还是镀金时代金融家相互竞争组装铁路垄断的比喻性战斗。在历史的大部分时间里，成功意味着在零和游戏中成功。在大多数零和游戏中，刻薄不是障碍，反而可能是优势。\n这种情况正在改变。越来越重要的是，重要的游戏不是零和的。越来越多的你不是通过战斗来获得对稀缺资源的控制而获胜，而是通过拥有新想法和建造新东西。[3]\n长期以来，有些游戏是通过拥有新想法获胜的。在公元前3世纪，阿基米德就是这样获胜的。至少直到入侵的罗马军队杀了他。这说明了为什么这种变化正在发生：为了让新想法变得重要，你需要一定程度的文明秩序。不仅仅是不在战争状态。你还需要防止19世纪大亨相互之间和共产主义国家对公民实施的那种经济暴力。人们需要感觉到他们创造的东西不会被偷走。[4]\n对于思想家来说，情况一直如此，这就是为什么这种趋势始于他们。当你想到历史上那些无情的成功人士时，你会想到数学家、作家和艺术家。令人兴奋的是，他们的运作方式似乎正在传播。知识分子玩的游戏正在泄漏到现实世界，这正在逆转刻薄与成功之间关系的历史极性。\n所以我真的很高兴我停下来思考这个问题。杰西卡和我一直努力教导我们的孩子不要刻薄。我们容忍噪音、混乱和垃圾食品，但不容忍刻薄。现在我既有额外的理由来打击它，也有额外的论据来使用：刻薄会让你失败。\n注释\n[1] 我并不是说所有接受大额收购要约的创始人都是只被金钱驱动，而是说那些不接受的人不是。而且，被金钱驱动可能有慈善的动机——例如，照顾家庭，或者能够自由从事改善世界的项目。\n[2] 不可能每个成功的创业公司都改善世界。但它们的创始人，像父母一样，真的相信它们做到了。成功的创始人爱着他们的公司。虽然这种爱像人们之间的爱一样盲目，但它是真实的。\n[3] 彼得·蒂尔会指出，成功的创始人仍然通过控制垄断致富，只是他们创造的垄断而不是他们捕获的垄断。虽然这基本正确，但这意味着获胜者的类型发生了很大变化。\n[4] 公平地说，罗马人并不是故意杀死阿基米德的。罗马指挥官特别命令饶他一命。但他在混乱中还是被杀了。\n在足够混乱的时代，甚至思考都需要控制稀缺资源，因为活着本身就是稀缺资源。\n感谢Sam Altman、Ron Conway、Daniel Gackle、Jessica Livingston、Robert Morris、Geoff Ralston和Fred Wilson阅读本文草稿。\n葡萄牙语翻译\n日语翻译\n阿拉伯语翻译\n",
    "description": "",
    "tags": ["品格","成功","善良","创业","领导力"],
    "categories": [],
    "content": "→ English Version\n刻薄 2014年11月\n最近我注意到，我认识的最成功的人中很少有刻薄的。有例外，但非常少。\n刻薄并不罕见。事实上，互联网向我们展示的一件事就是人们可以多么刻薄。几十年前，只有名人和专业作家才能发表他们的意见。现在每个人都可以，我们都能看到以前隐藏的刻薄的长尾。\n然而，虽然外面显然有很多刻薄的人，但在我认为最成功的人中几乎没有。这是怎么回事？刻薄和成功成反比吗？\n当然，部分原因是选择偏见。我只认识在某些领域工作的人：创业公司创始人、程序员、教授。我愿意相信其他领域的成功人士是刻薄的。也许成功的对冲基金经理是刻薄的；我不够了解，无法确定。似乎大多数成功的毒枭都很可能是刻薄的。但至少世界上有刻薄人不统治的大块区域，而且这个区域似乎正在增长。\n我的妻子和Y Combinator联合创始人杰西卡是那些具有品格X光视觉的罕见人物之一。和她结婚就像站在机场行李扫描仪旁边。她从投资银行业来到创业世界，她一直对成功的创业公司创始人如何一致地证明是好人，以及坏人如何一致地在创业公司创始人中失败感到惊讶。\n为什么？我认为有几个原因。一个是刻薄会让你变笨。这就是我讨厌争吵的原因。在争吵中你永远不会做到最好，因为争吵不够普遍。胜利总是取决于情况和涉及的人。你赢得争吵不是通过思考大创意，而是通过思考在特定情况下有效的技巧。然而，争吵和思考真正的问题一样耗费精力。对于一个关心如何使用自己大脑的人来说，这尤其痛苦：你的大脑转得很快，但你却寸步难行，就像车轮空转的汽车。\n创业公司不是通过攻击获胜的。他们通过超越获胜。当然有例外，但通常获胜的方法是领先，而不是停下来战斗。\n刻薄的创始人失败的另一个原因是他们无法让最优秀的人为他们工作。他们可以雇佣那些因为需要工作而忍受他们的人。但最优秀的人有其他选择。刻薄的人无法说服最优秀的人为他工作，除非他非常有说服力。虽然拥有最优秀的人对任何组织都有帮助，但对创业公司来说至关重要。\n还有一种互补的力量在起作用：如果你想建造伟大的东西，被仁慈精神驱动会有帮助。最终变得最富有的创业公司创始人不是那些被金钱驱动的人。被金钱驱动的人接受几乎每个成功创业公司在途中都会收到的大额收购要约。[1] 那些继续前进的人被其他东西驱动。他们可能不会明确这么说，但他们通常试图改善世界。这意味着有改善世界愿望的人具有天然优势。[2]\n令人兴奋的是，创业公司不仅仅是刻薄和成功成反比的一种随机工作类型。这种工作是未来。\n在历史的大部分时间里，成功意味着控制稀缺资源。人们通过战斗获得这种资源，无论是游牧民族将狩猎采集者驱赶到边缘土地的字面战斗，还是镀金时代金融家相互竞争组装铁路垄断的比喻性战斗。在历史的大部分时间里，成功意味着在零和游戏中成功。在大多数零和游戏中，刻薄不是障碍，反而可能是优势。\n这种情况正在改变。越来越重要的是，重要的游戏不是零和的。越来越多的你不是通过战斗来获得对稀缺资源的控制而获胜，而是通过拥有新想法和建造新东西。[3]\n长期以来，有些游戏是通过拥有新想法获胜的。在公元前3世纪，阿基米德就是这样获胜的。至少直到入侵的罗马军队杀了他。这说明了为什么这种变化正在发生：为了让新想法变得重要，你需要一定程度的文明秩序。不仅仅是不在战争状态。你还需要防止19世纪大亨相互之间和共产主义国家对公民实施的那种经济暴力。人们需要感觉到他们创造的东西不会被偷走。[4]\n对于思想家来说，情况一直如此，这就是为什么这种趋势始于他们。当你想到历史上那些无情的成功人士时，你会想到数学家、作家和艺术家。令人兴奋的是，他们的运作方式似乎正在传播。知识分子玩的游戏正在泄漏到现实世界，这正在逆转刻薄与成功之间关系的历史极性。\n所以我真的很高兴我停下来思考这个问题。杰西卡和我一直努力教导我们的孩子不要刻薄。我们容忍噪音、混乱和垃圾食品，但不容忍刻薄。现在我既有额外的理由来打击它，也有额外的论据来使用：刻薄会让你失败。\n注释\n[1] 我并不是说所有接受大额收购要约的创始人都是只被金钱驱动，而是说那些不接受的人不是。而且，被金钱驱动可能有慈善的动机——例如，照顾家庭，或者能够自由从事改善世界的项目。\n[2] 不可能每个成功的创业公司都改善世界。但它们的创始人，像父母一样，真的相信它们做到了。成功的创始人爱着他们的公司。虽然这种爱像人们之间的爱一样盲目，但它是真实的。\n[3] 彼得·蒂尔会指出，成功的创始人仍然通过控制垄断致富，只是他们创造的垄断而不是他们捕获的垄断。虽然这基本正确，但这意味着获胜者的类型发生了很大变化。\n[4] 公平地说，罗马人并不是故意杀死阿基米德的。罗马指挥官特别命令饶他一命。但他在混乱中还是被杀了。\n在足够混乱的时代，甚至思考都需要控制稀缺资源，因为活着本身就是稀缺资源。\n感谢Sam Altman、Ron …"
  },{
    "title": "前线消息",
    "url": "/paul_graham/essays_zh/colleges/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n前线消息 2007年9月\n几周前，我有一个如此异端的想法，连我自己都感到惊讶。你上哪所大学可能并不那么重要。\n对于我和许多中产阶级的孩子来说，考上好大学在我成长过程中或多或少就是生命的意义。我是什么？一个学生。要做好这个，意味着要取得好成绩。为什么要取得好成绩？为了考上好大学。为什么要这样做？似乎有几个原因：你会学到更多，找到更好的工作，赚更多的钱。但具体的好处是什么并不重要。大学是你所有未来前景必须通过的瓶颈；如果你上了更好的大学，一切都会更好。\n几周前我意识到，在这个过程中某个时候，我已经不再相信这个了。\n是什么让我开始思考这个问题的是现在这种过分担心孩子上什么幼儿园的新趋势。在我看来，这根本不可能重要。要么它不会帮助孩子进入哈佛，要么如果确实有帮助，进入哈佛也不会再有太大意义了。然后我想：那么现在它有多重要呢？\n结果我有很多关于这方面的数据。我和我的三个合伙人经营着一家名为Y Combinator的种子期投资公司。我们在公司只有几个人和一个想法时进行投资。想法并不重要；它反正会改变。我们的大部分决策基于创始人。创始人平均大学毕业三年。许多人刚刚毕业；少数还在上学。所以我们与研究生项目或刚从大学毕业就招聘员工的公司处境非常相似。只是我们的选择会立即受到可见的检验。创业公司只有两种可能的结果：成功或失败——通常一年内你就会知道会是哪种。\n应用于创业公司的测试是现实世界中最纯粹的测试之一。创业公司的成功或失败几乎完全取决于创始人的努力。成功由市场决定：只有用户喜欢你构建的东西，你才会成功。而用户不在乎你上过哪所大学。\n除了有精确可测量的结果，我们还有很多结果。不像传统风险投资基金做少量大交易，我们做大量小交易。我们目前每年资助约40家公司，从约900份申请中选出，代表约2000人。[1]\n考虑到我们评估的人数之众以及应用于我们选择的快速、明确的测试，Y Combinator一直是学习如何挑选赢家的前所未有的机会。我们学到的最令人惊讶的事情之一就是人们上过的大学有多不重要。\n我以为自己已经不再关心这个了。没有什么比在哈佛读研究生更能治愈你对普通哈佛本科生的任何幻想了。然而Y Combinator向我们表明，我们仍然高估了上过精英大学的人。我们会面试来自麻省理工、哈佛或斯坦福的人，有时会想：他们一定比看起来更聪明。我们花了几次迭代才学会相信自己的直觉。\n实际上，每个人都认为上过麻省理工、哈佛或斯坦福的人一定很聪明。即使为此讨厌你的人也相信这一点。\n但当你想想上精英大学意味着什么时，这怎么可能呢？我们谈论的是由招生官员——基本上是人力资源人员——做出的决定，基于对十七岁青少年提交的大量令人沮丧地相似的申请的粗略检查。他们有什么依据？一个容易被游戏化的标准化测试；一篇短文告诉你孩子认为你想听什么；与随机校友的面试；基本上是服从性指标的高中记录。谁会依赖这样的测试？\n然而很多公司确实这样做。很多公司在很大程度上受到申请人上过的大学的影响。怎么会这样呢？我想我知道答案。\n企业界曾经有句说法：\u0026ldquo;没有人会因为购买IBM而被解雇。\u0026ldquo;你不再专门听到关于IBM的说法，但这个想法非常活跃；有一整类\u0026quot;企业\u0026quot;软件公司存在就是为了利用这一点。为大型组织购买技术的人不在乎为平庸软件支付巨额费用。那不是他们的钱。他们只想从一个看起来安全的供应商那里购买——一家有成熟名称、自信的销售人员、令人印象深刻的办公室以及符合所有当前潮流的软件的公司。不一定是会交付的公司，而是如果他们让你失望，仍然看起来是谨慎选择的公司。所以公司已经演变成填补这个利基市场。\n大公司的招聘人员与为组织购买技术的人处境非常相似。如果有人上过斯坦福且明显不疯狂，他们可能是个安全的选择。而安全的选择就足够了。没有人会根据招聘人员拒绝的人后来的表现来衡量他们。[2]\n我当然不是说，精英大学已经像企业软件公司那样演变成利用大型组织的弱点。但它们工作起来好像已经这样了。除了品牌名的力量，精英大学的毕业生有两个关键品质，正好适合大型组织的工作方式。他们擅长做被要求做的事情，因为这是取悦十七岁评判你的成年人所需要的。而上过精英大学让他们更加自信。\n在人们可能一辈子在一家大公司工作的日子里，这些品质一定非常有价值。精英大学的毕业生既能干，又服从权威。由于在大型组织中个人表现如此难以衡量，他们自己的自信将成为他们声誉的起点。\n在创业公司的新世界中，情况非常不同。即使我们想，我们也无法将某人从市场的判断中拯救出来。而魅力和自信对用户来说一文不值。用户关心的只是你是否制作了他们喜欢的东西。如果不，你就死定了。\n知道这个测试即将到来，我们比那些仅仅招聘的人更努力地寻找正确答案。我们不能对成功的预测因素有任何幻想。我们发现的是学校之间的差异比个人之间的差异小得多，相比之下可以忽略不计。在与某人交谈的第一分钟，我们比知道他们上过什么学校能了解更多。\n这样说是显而易见的。看个人，而不是他们上过什么大学。但这比我开始时的想法要弱，即个人上哪所大学并不那么重要。你在最好的学校学不到在较差学校学不到的东西吗？\n显然不是。显然，对于个人情况你无法证明这一点，但你可以从综合证据看出：如果不问他们，你无法区分上过一所学校的人与上过另一所在美国新闻列表上排名低三倍的学校的人。[3] 试试看。\n怎么会这样？因为你在大学学到多少更多地取决于你自己，而不是大学。一个坚定的派对动物可以在最好的学校度过而不学任何东西。而对知识有真正渴望的人将能够在一所根本不著名的学校找到一些聪明的人学习。其他学生是上精英大学的最大优势；你从他们身上学到比教授更多的东西。但如果你有意识地寻找聪明朋友，你应该能够在大多数大学重现这一点。在大多数大学，你至少能找到少数其他聪明学生，而且大多数人在大学也只有少数亲密朋友。[4] 找到聪明教授的几率甚至更好。教授的曲线比学生平坦得多，特别是在数学和硬科学方面；在数学系找不到聪明教授之前，你必须把大学列表排得很靠后。\n所以，我们发现不同大学的相对声望在判断个人时是无用的，这并不奇怪。大学如何选择人有很多随机性，而他们在那里学到什么更多地取决于他们自己，而不是大学。在这两个变化来源之间，某个人上过的大学并不意味着什么。它在某种程度上是能力的预测因素，但太弱了，我们主要将其视为错误来源，并努力有意识地忽略它。\n我怀疑我们的发现是创业公司特有的异常现象。可能人们一直高估了上大学地点的重要性。我们只是终于能够衡量它了。\n不幸的事情不仅是人们受到如此肤浅的测试的判断，而且这么多的人也这样判断自己。很多人，可能是美国大多数的人，对上过或没上过大学都有些不安全感。这种情况的悲剧性在于，没上过你喜欢的大学的最大 liability 是你自己感觉因此缺少了什么。大学在这方面有点像专属俱乐部。成为大多数专属俱乐部会员的唯一真正优势是：你知道如果不是会员，你不会错过太多。当你被排除在外时，你只能想象成为内部人士的优势。但它们在你的想象中总是比现实更大。\n大学也是如此。大学有所不同，但它们完全不像许多人想象的那样是命运的印记。人们不是十七岁时招生官员决定的样子。他们是自己塑造的样子。\n确实，不关心人们上过哪所大学的最大优势不仅是你可以停止用肤浅的标准判断他们（和你自己），而是你可以专注于真正重要的事情。重要的是你把自己塑造成什么样。我认为这是我们应该告诉孩子们的。他们的工作不是取得好成绩以便进入好大学，而是学习和行动。不仅因为这比世俗成功更有回报。那将越来越成为通往世俗成功的道路。\n注释 [1] 我们衡量的东西值得衡量吗？我认为是的。你可以仅仅通过精力充沛和不择手段而致富，但从科技创业公司致富需要一定量的智慧。这正是中产阶级重视的那种工作；它与当医生的智力成分大致相同。\n[2] 实际上，有人做过一次。米奇·卡波尔的妻子弗雷达在莲花公司早期负责人力资源。（正如他痛苦地指出的，他们后来才发展浪漫关系。）有一次他们担心莲花公司正在失去创业优势，变成一家大公司。所以作为实验，她向招聘人员发送了前40名员工的简历，识别细节已更改。这些正是让莲花公司成为明星的人。没有一个得到面试机会。\n[3] 美国新闻列表？当然没有人相信那个。即使他们考虑的统计数字有用，他们如何决定相对权重？美国新闻列表有意义的原因恰恰是因为他们在这方面如此不诚实。他们没有外部来源可以用来校准他们使用的统计数字的权重；如果有，我们就可以直接使用那个了。他们必须做的是调整权重，直到顶尖学校以大致正确的顺序成为通常的怀疑对象。所以实际上美国新闻列表告诉我们的是编辑认为顶尖学校是什么，这可能与此事的普遍看法相差不远。有趣的是，因为一些学校努力游戏系统，编辑们必须不断调整算法以获得他们想要的排名。\n[4] 当然，可能并不意味着容易。派对学校的聪明学生不可避免地会成为某种局外人，就像他们在大多数高中一样。\n感谢特雷弗·布莱克威尔、莎拉·哈林、杰西卡·利文斯顿、杰基·麦克唐纳、彼得·诺维格和罗伯特·莫里斯阅读本文的草稿。\n相关 法语翻译\n",
    "description": "",
    "tags": ["大学","教育","成功","Y-Combinator","招生"],
    "categories": [],
    "content": "→ English Version\n前线消息 2007年9月\n几周前，我有一个如此异端的想法，连我自己都感到惊讶。你上哪所大学可能并不那么重要。\n对于我和许多中产阶级的孩子来说，考上好大学在我成长过程中或多或少就是生命的意义。我是什么？一个学生。要做好这个，意味着要取得好成绩。为什么要取得好成绩？为了考上好大学。为什么要这样做？似乎有几个原因：你会学到更多，找到更好的工作，赚更多的钱。但具体的好处是什么并不重要。大学是你所有未来前景必须通过的瓶颈；如果你上了更好的大学，一切都会更好。\n几周前我意识到，在这个过程中某个时候，我已经不再相信这个了。\n是什么让我开始思考这个问题的是现在这种过分担心孩子上什么幼儿园的新趋势。在我看来，这根本不可能重要。要么它不会帮助孩子进入哈佛，要么如果确实有帮助，进入哈佛也不会再有太大意义了。然后我想：那么现在它有多重要呢？\n结果我有很多关于这方面的数据。我和我的三个合伙人经营着一家名为Y Combinator的种子期投资公司。我们在公司只有几个人和一个想法时进行投资。想法并不重要；它反正会改变。我们的大部分决策基于创始人。创始人平均大学毕业三年。许多人刚刚毕业；少数还在上学。所以我们与研究生项目或刚从大学毕业就招聘员工的公司处境非常相似。只是我们的选择会立即受到可见的检验。创业公司只有两种可能的结果：成功或失败——通常一年内你就会知道会是哪种。\n应用于创业公司的测试是现实世界中最纯粹的测试之一。创业公司的成功或失败几乎完全取决于创始人的努力。成功由市场决定：只有用户喜欢你构建的东西，你才会成功。而用户不在乎你上过哪所大学。\n除了有精确可测量的结果，我们还有很多结果。不像传统风险投资基金做少量大交易，我们做大量小交易。我们目前每年资助约40家公司，从约900份申请中选出，代表约2000人。[1]\n考虑到我们评估的人数之众以及应用于我们选择的快速、明确的测试，Y Combinator一直是学习如何挑选赢家的前所未有的机会。我们学到的最令人惊讶的事情之一就是人们上过的大学有多不重要。\n我以为自己已经不再关心这个了。没有什么比在哈佛读研究生更能治愈你对普通哈佛本科生的任何幻想了。然而Y Combinator向我们表明，我们仍然高估了上过精英大学的人。我们会面试来自麻省理工、哈佛或斯坦福的人，有时会想：他们一定比看起来更聪明。我们花了几次迭代才学会相信自己的直觉。\n实际上，每个人都认为上过麻省理工、哈佛或斯坦福的人一定很聪明。即使为此讨厌你的人也相信这一点。\n但当你想想上精英大学意味着什么时，这怎么可能呢？我们谈论的是由招生官员——基本上是人力资源人员——做出的决定，基于对十七岁青少年提交的大量令人沮丧地相似的申请的粗略检查。他们有什么依据？一个容易被游戏化的标准化测试；一篇短文告诉你孩子认为你想听什么；与随机校友的面试；基本上是服从性指标的高中记录。谁会依赖这样的测试？\n然而很多公司确实这样做。很多公司在很大程度上受到申请人上过的大学的影响。怎么会这样呢？我想我知道答案。\n企业界曾经有句说法：\u0026ldquo;没有人会因为购买IBM而被解雇。\u0026ldquo;你不再专门听到关于IBM的说法，但这个想法非常活跃；有一整类\u0026quot;企业\u0026quot;软件公司存在就是为了利用这一点。为大型组织购买技术的人不在乎为平庸软件支付巨额费用。那不是他们的钱。他们只想从一个看起来安全的供应商那里购买——一家有成熟名称、自信的销售人员、令人印象深刻的办公室以及符合所有当前潮流的软件的公司。不一定是会交付的公司，而是如果他们让你失望，仍然看起来是谨慎选择的公司。所以公司已经演变成填补这个利基市场。\n大公司的招聘人员与为组织购买技术的人处境非常相似。如果有人上过斯坦福且明显不疯狂，他们可能是个安全的选择。而安全的选择就足够了。没有人会根据招聘人员拒绝的人后来的表现来衡量他们。[2]\n我当然不是说，精英大学已经像企业软件公司那样演变成利用大型组织的弱点。但它们工作起来好像已经这样了。除了品牌名的力量，精英大学的毕业生有两个关键品质，正好适合大型组织的工作方式。他们擅长做被要求做的事情，因为这是取悦十七岁评判你的成年人所需要的。而上过精英大学让他们更加自信。\n在人们可能一辈子在一家大公司工作的日子里，这些品质一定非常有价值。精英大学的毕业生既能干，又服从权威。由于在大型组织中个人表现如此难以衡量，他们自己的自信将成为他们声誉的起点。\n在创业公司的新世界中，情况非常不同。即使我们想，我们也无法将某人从市场的判断中拯救出来。而魅力和自信对用户来说一文不值。用户关心的只是你是否制作了他们喜欢的东西。如果不，你就死定了。\n知道这个测试即将到来，我们比那些仅仅招聘的人更努力地寻找正确答案。我们不能对成功的预测因素有任何幻想。我们发现的是学校之间的差 …"
  },{
    "title": "反击的过滤器",
    "url": "/paul_graham/essays_zh/ffb/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n反击的过滤器 2003年8月\n我们也许能够通过让贝叶斯垃圾邮件过滤器跟踪链接来看看另一端等待什么来提高其准确性。death2spam的理查德·乔西现在在边界情况下这样做，并报告说效果很好。\n为什么只在边界情况下这样做？为什么只做一次？\n正如我在《过滤器会杀死垃圾邮件吗？》中提到的，跟踪垃圾邮件中的所有url会有一个有趣的副作用。如果流行的邮件客户端为了过滤垃圾邮件而这样做，垃圾邮件发送者的服务器将受到严重打击。我越想这个，越觉得这是个好主意。这不仅仅是有趣；很难想象有比这更精确地针对垃圾邮件发送者的反击。\n所以我想向那些正在研究垃圾邮件过滤器的人建议一个附加功能：\u0026ldquo;惩罚\u0026quot;模式，如果打开，将对可疑垃圾邮件中的每个url进行n次蜘蛛抓取，其中n可以由用户设置。[1]\n正如许多人指出的，当前邮件系统的问题之一是它太被动了。它做你告诉它做的一切。到目前为止，所有修复问题的建议似乎都涉及新协议。这个不会。\n如果广泛使用，自动检索垃圾邮件过滤器将使邮件系统反弹。垃圾邮件的大量数量，迄今为止一直对垃圾邮件发送者有利，现在将对他不利，就像树枝反弹在他脸上一样。自动检索垃圾邮件过滤器将提高垃圾邮件发送者的成本，并降低他的销售：他的带宽使用将飙升，他的服务器将在负载下停止运转，这将使它们对那些会响应垃圾邮件的人不可用。\n每小时发送一百万封邮件，每小时在你的服务器上获得一百万次点击。我们想确保这只对可疑的垃圾邮件进行。通常，发送给数百万人的任何url都可能是垃圾邮件url，因此提交每封邮件中的每个http请求几乎总是可以正常工作。但有几种情况这不是真的：例如，像Yahoo Mail和Hotmail这样的免费邮件服务发送的邮件底部的url。\n为了保护这样的站点，并防止滥用，自动检索应该与垃圾邮件推广站点的黑名单结合。只有黑名单上的站点才会被抓取，站点只有在经过人工检查后才会被列入黑名单。垃圾邮件的生命周期必须至少有几个小时，所以应该很容易及时更新这样的列表来干扰推广新站点的垃圾邮件。[2]\n大量自动检索只对高带宽连接的用户实用，但有足够的用户会给垃圾邮件发送者造成严重麻烦。实际上，这个解决方案巧妙地反映了问题。垃圾邮件的问题在于，为了到达少数易受骗的人，垃圾邮件发送者向每个人发送邮件。不易受骗的收件人只是附带损害。但不易受骗的多数人不会停止接收垃圾邮件，直到他们能够停止（或威胁停止）易受骗的人响应它。自动检索垃圾邮件过滤器为他们提供了一种方法来做到这一点。\n这会杀死垃圾邮件吗？不完全是。最大的垃圾邮件发送者可能能够保护他们的服务器免受自动检索过滤器的影响。然而，对他们来说最简单、最便宜的方法是在邮件中包含有效的退订链接。这对于小鱼以及雇佣垃圾邮件发送者推广他们的\u0026quot;合法\u0026quot;站点来说将是必要的。因此，如果自动检索过滤器变得广泛，它们将成为自动退订过滤器。\n在这种情况下，垃圾邮件将像操作系统崩溃、病毒和弹出窗口一样，成为那些懒得使用正确软件的人所遭受的瘟疫之一。\n注释 [1] 自动检索过滤器必须跟踪重定向，并在某些情况下（例如，只说\u0026quot;点击这里\u0026quot;的页面）跟踪多级链接。还要确保http请求与流行Web浏览器的请求无法区分，包括顺序和引用者。\n如果响应在x时间内没有返回，默认为相当高的垃圾邮件概率。\n与其使n恒定，不如使它成为提到该站点的垃圾邮件数量的函数，这可能是个好主意。这将增加对滥用和事故的进一步保护。\n[2] 本文的早期版本使用\u0026quot;白名单\u0026quot;而不是\u0026quot;黑名单\u0026quot;一词。虽然它们要像黑名单一样工作，我更喜欢称它们为白名单，因为这可能使它们不太容易受到法律攻击。然而，这似乎只是让读者感到困惑。\n应该可能有多个黑名单。单点故障既容易受到攻击也容易受到滥用。\n感谢布莱恩·伯顿、比尔·耶拉祖尼斯、丹·吉芬、埃里克·雷蒙德和理查德·乔西阅读本文的草稿。\n",
    "description": "",
    "tags": ["垃圾邮件过滤器","邮件","技术","自动检索","垃圾邮件发送者","反击","贝叶斯","安全"],
    "categories": [],
    "content": "→ English Version\n反击的过滤器 2003年8月\n我们也许能够通过让贝叶斯垃圾邮件过滤器跟踪链接来看看另一端等待什么来提高其准确性。death2spam的理查德·乔西现在在边界情况下这样做，并报告说效果很好。\n为什么只在边界情况下这样做？为什么只做一次？\n正如我在《过滤器会杀死垃圾邮件吗？》中提到的，跟踪垃圾邮件中的所有url会有一个有趣的副作用。如果流行的邮件客户端为了过滤垃圾邮件而这样做，垃圾邮件发送者的服务器将受到严重打击。我越想这个，越觉得这是个好主意。这不仅仅是有趣；很难想象有比这更精确地针对垃圾邮件发送者的反击。\n所以我想向那些正在研究垃圾邮件过滤器的人建议一个附加功能：\u0026ldquo;惩罚\u0026quot;模式，如果打开，将对可疑垃圾邮件中的每个url进行n次蜘蛛抓取，其中n可以由用户设置。[1]\n正如许多人指出的，当前邮件系统的问题之一是它太被动了。它做你告诉它做的一切。到目前为止，所有修复问题的建议似乎都涉及新协议。这个不会。\n如果广泛使用，自动检索垃圾邮件过滤器将使邮件系统反弹。垃圾邮件的大量数量，迄今为止一直对垃圾邮件发送者有利，现在将对他不利，就像树枝反弹在他脸上一样。自动检索垃圾邮件过滤器将提高垃圾邮件发送者的成本，并降低他的销售：他的带宽使用将飙升，他的服务器将在负载下停止运转，这将使它们对那些会响应垃圾邮件的人不可用。\n每小时发送一百万封邮件，每小时在你的服务器上获得一百万次点击。我们想确保这只对可疑的垃圾邮件进行。通常，发送给数百万人的任何url都可能是垃圾邮件url，因此提交每封邮件中的每个http请求几乎总是可以正常工作。但有几种情况这不是真的：例如，像Yahoo Mail和Hotmail这样的免费邮件服务发送的邮件底部的url。\n为了保护这样的站点，并防止滥用，自动检索应该与垃圾邮件推广站点的黑名单结合。只有黑名单上的站点才会被抓取，站点只有在经过人工检查后才会被列入黑名单。垃圾邮件的生命周期必须至少有几个小时，所以应该很容易及时更新这样的列表来干扰推广新站点的垃圾邮件。[2]\n大量自动检索只对高带宽连接的用户实用，但有足够的用户会给垃圾邮件发送者造成严重麻烦。实际上，这个解决方案巧妙地反映了问题。垃圾邮件的问题在于，为了到达少数易受骗的人，垃圾邮件发送者向每个人发送邮件。不易受骗的收件人只是附带损害。但不易受骗的多数人不会停止接收垃圾邮件，直到他们能够停止（或威胁停止）易受骗的人响应它。自动检索垃圾邮件过滤器为他们提供了一种方法来做到这一点。\n这会杀死垃圾邮件吗？不完全是。最大的垃圾邮件发送者可能能够保护他们的服务器免受自动检索过滤器的影响。然而，对他们来说最简单、最便宜的方法是在邮件中包含有效的退订链接。这对于小鱼以及雇佣垃圾邮件发送者推广他们的\u0026quot;合法\u0026quot;站点来说将是必要的。因此，如果自动检索过滤器变得广泛，它们将成为自动退订过滤器。\n在这种情况下，垃圾邮件将像操作系统崩溃、病毒和弹出窗口一样，成为那些懒得使用正确软件的人所遭受的瘟疫之一。\n注释 [1] 自动检索过滤器必须跟踪重定向，并在某些情况下（例如，只说\u0026quot;点击这里\u0026quot;的页面）跟踪多级链接。还要确保http请求与流行Web浏览器的请求无法区分，包括顺序和引用者。\n如果响应在x时间内没有返回，默认为相当高的垃圾邮件概率。\n与其使n恒定，不如使它成为提到该站点的垃圾邮件数量的函数，这可能是个好主意。这将增加对滥用和事故的进一步保护。\n[2] 本文的早期版本使用\u0026quot;白名单\u0026quot;而不是\u0026quot;黑名单\u0026quot;一词。虽然它们要像黑名单一样工作，我更喜欢称它们为白名单，因为这可能使它们不太容易受到法律攻击。然而，这似乎只是让读者感到困惑。\n应该可能有多个黑名单。单点故障既容易受到攻击也容易受到滥用。\n感谢布莱恩·伯顿、比尔·耶拉祖尼斯、丹·吉芬、埃里克·雷蒙德和理查德·乔西阅读本文的草稿。\n"
  },{
    "title": "发现的风险",
    "url": "/paul_graham/essays_zh/disc/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n发现的风险 2017年1月\n因为著名科学家的传记往往删去他们的错误，我们低估了他们愿意承担的风险程度。而且因为著名科学家所做的任何不是错误的事情现在可能已经成为传统智慧，这些选择似乎也不具风险。\n例如，牛顿的传记 understandably 更关注物理学而不是炼金术或神学。我们得到的印象是他无误的判断力直接引导他走向了别人没有注意到的真理。如何解释他在炼金术和神学上花费的所有时间？嗯，聪明人往往有点疯狂。\n但也许有一个更简单的解释。也许聪明和疯狂并不像我们想象的那么分离。物理学对我们来说似乎是一个有前途的工作领域，而炼金术和神学明显是浪费时间。但那是因为我们知道事情的结果。在牛顿的时代，这三个问题似乎大致同样有前途。还没有人知道发明我们现在称之为物理学的东西会有什么回报；如果他们知道，就会有更多的人在做它。而炼金术和神学在当时仍然属于Marc Andreessen所描述的\u0026quot;巨大，如果为真\u0026quot;的范畴。\n牛顿下了三个赌注。其中一个成功了。但它们都是有风险的。\n相关链接：\n日语翻译 ",
    "description": "",
    "tags": ["发现","风险","科学","历史","牛顿","物理学","炼金术","神学"],
    "categories": [],
    "content": "→ English Version\n发现的风险 2017年1月\n因为著名科学家的传记往往删去他们的错误，我们低估了他们愿意承担的风险程度。而且因为著名科学家所做的任何不是错误的事情现在可能已经成为传统智慧，这些选择似乎也不具风险。\n例如，牛顿的传记 understandably 更关注物理学而不是炼金术或神学。我们得到的印象是他无误的判断力直接引导他走向了别人没有注意到的真理。如何解释他在炼金术和神学上花费的所有时间？嗯，聪明人往往有点疯狂。\n但也许有一个更简单的解释。也许聪明和疯狂并不像我们想象的那么分离。物理学对我们来说似乎是一个有前途的工作领域，而炼金术和神学明显是浪费时间。但那是因为我们知道事情的结果。在牛顿的时代，这三个问题似乎大致同样有前途。还没有人知道发明我们现在称之为物理学的东西会有什么回报；如果他们知道，就会有更多的人在做它。而炼金术和神学在当时仍然属于Marc Andreessen所描述的\u0026quot;巨大，如果为真\u0026quot;的范畴。\n牛顿下了三个赌注。其中一个成功了。但它们都是有风险的。\n相关链接：\n日语翻译 "
  },{
    "title": "另一条道路",
    "url": "/paul_graham/essays_zh/road/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n另一条道路 2001年9月\n（本文解释了为什么下一代软件的大部分可能是基于服务器的，这对程序员意味着什么，以及这种新型软件为什么是创业公司的绝佳机会。本文源自在BBN实验室的一次演讲。）\n1995年夏天，我的朋友Robert Morris和我决定创办一家创业公司。当时，围绕Netscape IPO的公关活动正如火如荼地进行，媒体上有很多关于电子商务的讨论。那时网络上可能只有三十家实际的商店，都是手工制作的。如果将来会有很多在线商店，就需要制作它们的软件，所以我们决定写一些这样的软件。\n在最初的一周左右，我们打算将其制作成一个普通的桌面应用程序。然后有一天我们想到让软件在我们的Web服务器上运行，使用浏览器作为界面。我们尝试重写软件使其在Web上工作，很明显这是正确的方法。如果我们编写的软件在服务器上运行，对用户和我们自己都会容易得多。\n结果证明这是一个好计划。现在，作为Yahoo Store，这个软件是最受欢迎的在线商店构建器，拥有约14,000个用户。\n当我们开始Viaweb时，几乎没有人理解我们说软件在服务器上运行是什么意思。直到一年后Hotmail推出，人们才开始理解。现在每个人都知道这是一个有效的方法。我们现在所做的事情有了一个名字：应用服务提供商，或ASP。\n我认为下一代软件的大部分都将按照这个模型编写。即使是损失最大的微软，似乎也看到将一些东西移出桌面是不可避免的。如果软件从桌面移到服务器上，对开发者来说将意味着一个完全不同的世界。本文描述了我们作为这个新世界的首批访客所看到的令人惊讶的事情。就软件确实转移到服务器上的程度而言，我在这里描述的就是未来。\n下一件大事？ 当我们回顾桌面软件时代时，我想我们会惊叹于人们忍受的不便，就像我们现在惊叹于早期车主忍受的不便一样。在最初的二三十年里，你必须是一个汽车专家才能拥有汽车。但汽车是一个如此巨大的进步，以至于很多不是汽车专家的人也想拥有它们。\n计算机现在正处于这个阶段。当你拥有桌面计算机时，你最终会学到比你想要知道的更多关于其内部情况的知识。但超过一半的美国家庭都拥有一台。我母亲有一台计算机，她用它来收发邮件和记账。大约一年前，她收到Apple的一封信，为她提供新操作系统的折扣，这让她感到担忧。当一个65岁的女性只想用计算机来收发邮件和记账时，却不得不考虑安装新的操作系统，这就有问题了。普通用户甚至不应该知道\u0026quot;操作系统\u0026quot;这个词，更不用说\u0026quot;设备驱动程序\u0026quot;或\u0026quot;补丁\u0026quot;了。\n现在有另一种交付软件的方式可以拯救用户免于成为系统管理员。基于Web的应用程序是在Web服务器上运行并使用Web页面作为用户界面的程序。对于普通用户来说，这种新型软件将比桌面软件更容易、更便宜、更便携、更可靠，而且通常更强大。\n有了基于Web的软件，大多数用户除了他们使用的应用程序外，不必考虑任何其他事情。所有混乱、变化的东西都将位于某处的服务器上，由擅长这种事情的人维护。因此，你通常不需要特定的计算机来使用软件。你只需要一个带有键盘、屏幕和Web浏览器的东西。也许它会有无线互联网接入。也许它也会是你的手机。无论它是什么，都将是消费电子产品：价格约200美元，人们主要根据外观选择的东西。你将在互联网服务上花费比硬件更多的钱，就像你现在对电话所做的那样。[1]\n点击到达服务器并返回需要大约十分之一秒，所以重度交互软件的用户，如Photoshop，仍然希望计算在桌面上进行。但如果你看大多数人使用计算机做的那种事情，十分之一秒的延迟不会成为问题。我母亲真的不需要桌面计算机，有很多像她这样的人。\n用户的胜利 我家附近有一辆车，保险杠上贴着\u0026quot;死也不愿不便\u0026quot;。大多数人，在大多数时候，会选择需要最少工作的选择。如果基于Web的软件获胜，那将是因为它更方便。对于用户和开发者来说，它似乎都会更方便。\n使用纯基于Web的应用程序，你只需要一个连接到互联网的浏览器。所以你可以在任何地方使用基于Web的应用程序。当你在桌面计算机上安装软件时，你只能在该计算机上使用它。更糟糕的是，你的文件被困在那台计算机上。随着人们习惯网络，这种模式的不便越来越明显。\n这里的开端是基于Web的电子邮件。现在数百万人意识到，无论你在哪里，都应该能够访问电子邮件。如果你能看到你的邮件，为什么不能看到你的日历？如果你能和同事讨论文档，为什么不能编辑它？为什么你的任何数据都应该被困在某个远处桌子的计算机上？\n\u0026ldquo;你的计算机\u0026quot;的整个概念正在消失，被\u0026quot;你的数据\u0026quot;所取代。你应该能够从任何计算机访问你的数据。或者更确切地说，任何客户端，而客户端不一定是计算机。\n客户端不应该存储数据；它们应该像电话一样。事实上，它们可能会变成电话，或者反之亦然。随着客户端变小，你有另一个理由不在它们上保存数据：随身携带的东西可能会丢失或被盗。把PDA留在出租车里就像磁盘崩溃，只是你的数据交给了别人而不是被蒸发掉了。\n使用纯基于Web的软件，你的数据和应用程序都不会保存在客户端上。所以你不需要安装任何东西来使用它。当没有安装时，你不必担心安装出错。应用程序和你的操作系统之间不可能存在不兼容性，因为软件不在你的操作系统上运行。\n因为它不需要安装，所以在你\u0026quot;购买\u0026quot;之前尝试基于Web的软件将是容易且常见的。你应该期望能够免费试用任何基于Web的应用程序，只需访问提供它的网站即可。在Viaweb，我们的整个网站就像一个大箭头，指向用户试驾。\n试驾后，注册服务只需要填写一个简短的表格（越简短越好）。这应该是用户必须做的最后工作。有了基于Web的软件，你应该无需额外付费、做任何工作，甚至可能无需知道就能获得新版本。\n升级不会像现在那样令人震惊。随着时间的推移，应用程序将悄然变得更强大。这需要开发者付出一些努力。他们必须设计软件，使其能够在不使用户困惑的情况下更新。这是一个新问题，但有解决方法。\n有了基于Web的应用程序，每个人都使用相同的版本，错误一旦发现就可以修复。所以基于Web的软件应该比桌面软件的错误少得多。在Viaweb，我怀疑我们任何时候有过十个已知的错误。这比桌面软件好几个数量级。\n基于Web的应用程序可以同时被多个人使用。这对于协作应用程序来说显然是一个优势，但我敢打赌，一旦用户意识到这是可能的，他们会开始在大多数应用程序中想要这个功能。例如，让两个人编辑同一个文档通常是有用的。Viaweb允许多个用户同时编辑一个站点，更多是因为这是编写软件的正确方式，而不是因为我们期望用户想要这样做，但结果证明很多人确实这样做了。\n当你使用基于Web的应用程序时，你的数据会更安全。磁盘崩溃不会成为过去的事情，但用户不会再听到它们。它们将发生在服务器集群中。提供基于Web应用程序的公司实际上会进行备份——不仅因为他们会有真正的系统管理员担心这些事情，而且因为丢失用户数据的ASP将陷入巨大的麻烦。当人们在自己的磁盘崩溃中丢失数据时，他们不会太生气，因为他们只能生自己的气。当公司为他们丢失数据时，他们会更生气。\n最后，基于Web的软件应该对病毒不那么脆弱。如果客户端除了浏览器外不运行任何东西，运行病毒的机会就更少，本地也没有数据可以损坏。攻击服务器本身的程序会发现它们防御得很好。[2]\n对于用户来说，基于Web的软件压力会更小。我认为如果你查看普通Windows用户的内心，你会发现对符合这种描述的软件有着巨大且基本未被利用的渴望。释放出来，它可能是一股强大的力量。\n代码之城 对于开发者来说，基于Web和桌面软件之间最显著的区别是，基于Web的应用程序不是单一的代码片段。它将是不同类型程序的集合，而不是单一的大二进制文件。因此设计基于Web的软件更像设计城市而不是建筑：除了建筑物，你还需要道路、路标、公用设施、警察和消防部门，以及增长和各种灾难的计划。\n在Viaweb，软件包括相当大的应用程序，用户直接与之对话；这些程序使用的程序；在后台持续运行寻找问题的程序；如果出现问题尝试重新启动事物的程序；偶尔运行以编译统计信息或构建搜索索引的程序；我们明确运行以垃圾收集资源或移动或恢复数据的程序；假装是用户的程序（以测量性能或暴露错误）；诊断网络问题的程序；进行备份的程序；外部服务的接口；驱动令人印象深刻的表盘集合显示实时服务器统计的软件（对访客来说很受欢迎，但对我们来说也是不可或缺的）；对开源软件的修改（包括错误修复）；以及大量的配置文件和设置。在我们被Yahoo收购后，Trevor Blackwell编写了一个精彩的程序，可以在不关闭商店的情况下将商店迁移到全国的新服务器。程序通过传呼机呼叫我们，向用户发送传真和电子邮件，与信用卡处理商进行交易，并通过套接字、管道、http请求、ssh、udp数据包、共享内存和文件相互交谈。Viaweb的一部分甚至由程序的缺失组成，因为Unix安全的关键之一是不运行人们可能用来闯入服务器的不必要实用程序。\n这并不以软件结束。我们花了很多时间思考服务器配置。我们自己从组件构建服务器——部分是为了省钱，部分是为了得到我们想要的东西。我们必须考虑我们的上游ISP是否与所有骨干网有足够快的连接。我们与RAID供应商连续约会。\n但硬件不仅仅是要担心的事情。当你控制它时，你可以为用户做更多。对于桌面应用程序，你可以指定某些最低硬件要求，但你不能添加更多。如果你管理服务器，你可以一步让所有用户能够传呼别人，或发送传真，或通过电话发送命令，或处理信用卡等，只需安装相关硬件即可。我们总是寻找用硬件添加功能的新方法，不仅因为它让用户高兴，而且作为将自己与竞争对手区分开来的方式——竞争对手要么因为他们销售桌面软件，要么通过ISP转售基于Web的应用程序，不能直接控制硬件。\n因为基于Web应用程序中的软件将是程序的集合而不是单一的二进制文件，它可以用多种不同的语言编写。当你编写桌面软件时，你实际上被迫用与底层操作系统相同的语言编写应用程序——即C和C++。因此，这些语言（尤其是在非技术人员如经理和风险投资家中）被认为是\u0026quot;严肃\u0026quot;软件开发的语言。但这只是桌面软件必须交付方式的人工产物。对于基于服务器的软件，你可以使用任何你想要的语言。[3] 今天，许多顶级黑客使用远离C和C++的语言：Perl、Python，甚至Lisp。\n有了基于服务器的软件，没有人能告诉你使用什么语言，因为你控制整个系统，一直到硬件。不同的语言适合不同的任务。你可以为每个任务使用最适合的语言。当你有竞争对手时，\u0026ldquo;你可以\u0026quot;意味着\u0026quot;你必须\u0026rdquo;（我们稍后会回到这一点），因为如果你不利用这种可能性，你的竞争对手会。\n我们的大多数竞争对手使用C和C++，这使得他们的软件明显 inferior，因为（除其他外），他们无法解决CGI脚本的无状态性问题。如果你要改变什么，所有的改变都必须在一个页面上发生，底部有一个更新按钮。正如我在其他地方写过的，通过使用许多人仍然认为是研究语言的Lisp，我们能够让Viaweb编辑器的行为更像桌面软件。\n发布 在这个新世界中最重要的变化之一是你进行发布的方式。在桌面软件业务中，进行发布是一个巨大的创伤，整个公司都在努力推出一个单一的、巨大的代码片段。明显的比较会让人联想到这个过程和最终产品。\n有了基于服务器的软件，你可以像为自己编写的程序那样几乎实时地进行更改。你以一系列增量更改而不是偶尔的大爆炸形式发布软件。一个典型的桌面软件公司可能一年进行一两次发布。在Viaweb，我们通常一天进行三到五次发布。\n当你切换到这个新模式时，你会意识到软件开发受到发布方式的影响有多大。你在桌面软件业务中看到的一些最令人讨厌的问题是由于发布的灾难性性质造成的。\n当你每年只发布一个新版本时，你倾向于批量处理错误。在发布日期之前的某个时间，你组装一个新版本，其中一半的代码被撕掉并替换，引入了无数错误。然后一队QA人员介入并开始计算它们，程序员们处理这个列表，修复它们。他们通常不会到达列表的末尾，事实上，没有人确定末尾在哪里。这就像从池塘里捞碎石。你永远不知道软件内部发生了什么。充其量你最终得到一种统计上的正确性。\n有了基于服务器的软件，大多数更改都是小而增量的。这本身就不太可能引入错误。这也意味着当你准备发布软件时，你知道最需要仔细测试什么：你最后改变的东西。你对代码的控制要牢固得多。作为一个一般规则，你确实知道它内部发生了什么。当然你没有记住源代码，但当你阅读源代码时，你这样做就像飞行员扫描仪表盘，而不是像侦探试图解开一些谜团。\n桌面软件培养了对错误的某种宿命论。你知道你正在发布充满错误的东西，你甚至建立了补偿机制（例如补丁发布）。那么为什么还要担心几个更多的错误呢？很快你就会发布你知道有问题的整个功能。苹果今年早些时候就这样做了。他们感到压力要发布他们的新操作系统，其发布日期已经四次推迟，但一些软件（对CD和DVD的支持）还没有准备好。解决方案？他们在没有完成部分的情况下发布了操作系统，用户将不得不稍后安装它们。\n有了基于Web的软件，你永远不必在软件能够工作之前发布它，你可以一旦它能够工作就发布它。\n行业资深人士可能会想，说你在软件能够工作之前永远不必发布软件听起来是个好主意，但当你承诺在某个日期之前交付软件的新版本时会发生什么？有了基于Web的软件，你不会做出这样的承诺，因为没有版本。你的软件逐渐而持续地变化。一些变化可能比其他变化更大，但版本的概念自然不适合基于Web的软件。\n如果有人记得Viaweb，这可能听起来很奇怪，因为我们总是在宣布新版本。这完全是为了公关目的。我们了解到，行业媒体是以版本号思考的。他们会为主要版本提供主要报道，意思是版本号的新第一位数字，而对于点版本，通常最多只有一个段落，意思是小数点后的新数字。\n我们的一些竞争对手提供桌面软件，实际上有版本号。对于这些发布，仅仅这个事实在我们看来就是他们落后的证据，他们会获得各种宣传。我们不想错过，所以我们也开始给我们的软件版本号。当我们想要一些宣传时，我们会列出自上次\u0026quot;发布\u0026quot;以来我们添加的所有功能，在软件上贴上一个新版本号，并发布新闻稿说新版本立即可用。令人惊讶的是，从来没有人指责我们这样做。\n到我们被收购时，我们已经这样做了三次，所以我们处于版本4。如果我没记错的话，是版本4.1。在Viaweb成为Yahoo Store后，不再如此迫切需要宣传，所以尽管软件继续发展，版本号的整个概念被悄然放弃了。\n错误 基于Web软件的另一个主要技术优势是你可以重现大多数错误。用户的数据就在你的磁盘上。如果有人破坏了你的软件，你不必像桌面软件那样猜测发生了什么：你应该能够在他们在电话上与你交谈时重现错误。如果你在应用程序中内置了注意错误的代码，你甚至可能已经知道它。\n基于Web的软件全天候使用，所以你所做的一切都会立即受到考验。错误很快就会出现。\n软件公司有时被指控让用户调试他们的软件。而这正是我所倡导的。对于基于Web的软件，这实际上是一个好计划，因为错误更少且短暂。当你逐渐发布软件时，一开始你得到的错误会少得多。当你能够重现错误并立即发布更改时，你可以在大多数错误出现时找到并修复它们。我们任何时候都没有足够的错误需要正式的错误跟踪系统。\n当然，你应该在发布之前测试更改，所以不应该发布主要错误。那些不可避免地漏掉的少数错误将涉及边界情况，并且只会在有人打电话抱怨之前影响少数遇到它们的用户。只要你立即修复错误，对于普通用户来说，净效果是错误少得多。我怀疑普通Viaweb用户曾经看到过错误。\n修复新错误比修复旧错误更容易。在你刚刚编写的代码中找到错误通常相当快。当它出现时，你往往在查看源代码之前就知道哪里错了，因为你已经在潜意识中担心它了。修复六个月前编写的代码中的错误（如果你一年发布一次，这是平均情况）要多花很多工作。而且由于你对代码的理解不够，你更有可能以丑陋的方式修复它，甚至引入更多错误。[4]\n当你及早发现错误时，你也会得到更少的复合错误。复合错误是两个相互作用的独立错误：你下楼时绊倒，当你伸手抓住栏杆时，它从你手中脱落。在软件中，这种错误是最难发现的，而且往往具有最严重的后果。[5] 传统的\u0026quot;打破一切然后过滤错误\u0026quot;方法本质上会产生很多复合错误。而以一系列小更改发布的软件本质上不会这样。地板不断被清扫干净，任何可能后来卡在什么东西里的松散物体。\n如果你使用一种称为函数式编程的技术，这会有所帮助。函数式编程意味着避免副作用。你更可能在研究论文中看到它，而不是商业软件，但对于基于Web的应用程序，它结果非常有用。将整个程序写成纯函数式代码很难，但你可以用这种方式编写实质性的部分。它使你软件的这些部分更容易测试，因为它们没有状态，在你不断制作和测试小修改的情况下，这非常方便。我用这种风格编写了Viaweb编辑器的大部分，我们使我们的脚本语言RTML成为一种纯函数式语言。\n来自桌面软件业务的人会发现这难以置信，但在Viaweb，错误几乎成了一种游戏。由于大多数发布的错误都涉及边界情况，遇到它们的用户可能是高级用户，他们在测试极限。高级用户对错误更宽容，特别是因为你可能是在添加他们要求的功能时引入了它们的。事实上，因为错误很少，你必须做复杂的事情才能看到它们，高级用户常常为抓住一个而感到自豪。他们会怀着更多是胜利而不是愤怒的精神致电支持，好像他们从我们这里得分了。\n支持 当你能够重现错误时，它改变了你处理客户支持的方法。在大多数软件公司，支持作为让客户感觉更好的方式提供。他们要么是关于一个已知错误打电话给你，要么是他们做错了什么，你必须弄清楚是什么。在任何一种情况下，你都从他们那里学不到太多东西。所以你倾向于将支持电话视为一个令人讨厌的事情，你希望尽可能将其与开发者隔离。\n",
    "description": "",
    "tags": ["基于网络的软件","编程","创业公司","技术","软件开发","未来"],
    "categories": [],
    "content": "→ English Version\n另一条道路 2001年9月\n（本文解释了为什么下一代软件的大部分可能是基于服务器的，这对程序员意味着什么，以及这种新型软件为什么是创业公司的绝佳机会。本文源自在BBN实验室的一次演讲。）\n1995年夏天，我的朋友Robert Morris和我决定创办一家创业公司。当时，围绕Netscape IPO的公关活动正如火如荼地进行，媒体上有很多关于电子商务的讨论。那时网络上可能只有三十家实际的商店，都是手工制作的。如果将来会有很多在线商店，就需要制作它们的软件，所以我们决定写一些这样的软件。\n在最初的一周左右，我们打算将其制作成一个普通的桌面应用程序。然后有一天我们想到让软件在我们的Web服务器上运行，使用浏览器作为界面。我们尝试重写软件使其在Web上工作，很明显这是正确的方法。如果我们编写的软件在服务器上运行，对用户和我们自己都会容易得多。\n结果证明这是一个好计划。现在，作为Yahoo Store，这个软件是最受欢迎的在线商店构建器，拥有约14,000个用户。\n当我们开始Viaweb时，几乎没有人理解我们说软件在服务器上运行是什么意思。直到一年后Hotmail推出，人们才开始理解。现在每个人都知道这是一个有效的方法。我们现在所做的事情有了一个名字：应用服务提供商，或ASP。\n我认为下一代软件的大部分都将按照这个模型编写。即使是损失最大的微软，似乎也看到将一些东西移出桌面是不可避免的。如果软件从桌面移到服务器上，对开发者来说将意味着一个完全不同的世界。本文描述了我们作为这个新世界的首批访客所看到的令人惊讶的事情。就软件确实转移到服务器上的程度而言，我在这里描述的就是未来。\n下一件大事？ 当我们回顾桌面软件时代时，我想我们会惊叹于人们忍受的不便，就像我们现在惊叹于早期车主忍受的不便一样。在最初的二三十年里，你必须是一个汽车专家才能拥有汽车。但汽车是一个如此巨大的进步，以至于很多不是汽车专家的人也想拥有它们。\n计算机现在正处于这个阶段。当你拥有桌面计算机时，你最终会学到比你想要知道的更多关于其内部情况的知识。但超过一半的美国家庭都拥有一台。我母亲有一台计算机，她用它来收发邮件和记账。大约一年前，她收到Apple的一封信，为她提供新操作系统的折扣，这让她感到担忧。当一个65岁的女性只想用计算机来收发邮件和记账时，却不得不考虑安装新的操作系统，这就有问题了。普通用户甚至不应该知道\u0026quot;操作系统\u0026quot;这个词，更不用说\u0026quot;设备驱动程序\u0026quot;或\u0026quot;补丁\u0026quot;了。\n现在有另一种交付软件的方式可以拯救用户免于成为系统管理员。基于Web的应用程序是在Web服务器上运行并使用Web页面作为用户界面的程序。对于普通用户来说，这种新型软件将比桌面软件更容易、更便宜、更便携、更可靠，而且通常更强大。\n有了基于Web的软件，大多数用户除了他们使用的应用程序外，不必考虑任何其他事情。所有混乱、变化的东西都将位于某处的服务器上，由擅长这种事情的人维护。因此，你通常不需要特定的计算机来使用软件。你只需要一个带有键盘、屏幕和Web浏览器的东西。也许它会有无线互联网接入。也许它也会是你的手机。无论它是什么，都将是消费电子产品：价格约200美元，人们主要根据外观选择的东西。你将在互联网服务上花费比硬件更多的钱，就像你现在对电话所做的那样。[1]\n点击到达服务器并返回需要大约十分之一秒，所以重度交互软件的用户，如Photoshop，仍然希望计算在桌面上进行。但如果你看大多数人使用计算机做的那种事情，十分之一秒的延迟不会成为问题。我母亲真的不需要桌面计算机，有很多像她这样的人。\n用户的胜利 我家附近有一辆车，保险杠上贴着\u0026quot;死也不愿不便\u0026quot;。大多数人，在大多数时候，会选择需要最少工作的选择。如果基于Web的软件获胜，那将是因为它更方便。对于用户和开发者来说，它似乎都会更方便。\n使用纯基于Web的应用程序，你只需要一个连接到互联网的浏览器。所以你可以在任何地方使用基于Web的应用程序。当你在桌面计算机上安装软件时，你只能在该计算机上使用它。更糟糕的是，你的文件被困在那台计算机上。随着人们习惯网络，这种模式的不便越来越明显。\n这里的开端是基于Web的电子邮件。现在数百万人意识到，无论你在哪里，都应该能够访问电子邮件。如果你能看到你的邮件，为什么不能看到你的日历？如果你能和同事讨论文档，为什么不能编辑它？为什么你的任何数据都应该被困在某个远处桌子的计算机上？\n\u0026ldquo;你的计算机\u0026quot;的整个概念正在消失，被\u0026quot;你的数据\u0026quot;所取代。你应该能够从任何计算机访问你的数据。或者更确切地说，任何客户端，而客户端不一定是计算机。\n客户端不应该存储数据；它们应该像电话一样。事实上，它 …"
  },{
    "title": "后媒体时代的出版",
    "url": "/paul_graham/essays_zh/publishing/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n后媒体时代的出版 2009年9月\n从新闻到音乐，各种类型的出版商都对消费者不再为内容付费感到不满。至少，他们是这么看的。\n实际上，消费者从来没有真正为内容付费，出版商也从来没有真正在销售内容。如果他们销售的是内容，为什么书籍、音乐或电影的价格总是主要取决于格式？为什么更好的内容不会更贵？[1]\n一本《时代》杂志售价5美元，共58页，每页8.6美分。《经济学人》售价7美元，共86页，每页8.1美分。更好的新闻实际上反而更便宜。\n几乎所有的出版形式都组织得好像他们销售的是媒介，而内容是无关紧要的。例如，图书出版商根据生产和分销书籍的成本来定价。他们对待书中印刷的文字的方式，就像纺织制造商对待其织物上印刷的图案一样。\n从经济上讲，纸质媒体从事的是纸张加价的业务。我们都能想象一个老式编辑得到独家新闻时说\u0026quot;这会卖很多报纸！\u0026ldquo;划掉最后的那个S，你就是在描述他们的商业模式。他们现在赚钱较少的原因是人们不再需要那么多纸张。\n几个月前，我在一家咖啡馆遇到一个朋友。我有一份《纽约时报》，我仍然偶尔在周末购买。当我离开时，我把它给了他，就像我以前无数次在同样情况下做的那样。但这次发生了新的情况。我感到那种当你给别人无价值的东西时的尴尬感觉。\u0026ldquo;呃，你想要一份昨天的新闻打印件吗？\u0026ldquo;我问道。（他不要。）\n既然媒介正在消失，出版商就没有什么东西可以销售了。有些人认为他们要销售内容——他们实际上一直从事内容业务。但他们不是，而且也不清楚是否有人能做得到。\n销售 一直有人从事销售信息的业务，但这在历史上一直是与出版不同的业务。而向消费者销售信息的业务一直是一个边缘业务。当我还是个孩子的时候，有人过去常常出售包含股票投资建议的通讯，印刷在彩色纸上，使得当时的复印机难以复制。无论是文化上还是经济上，这都是与出版商目前所处的世界不同的世界。\n人们会为他们认为可以从中赚钱的信息付费。这就是他们为那些股票投资建议通讯付费的原因，也是为什么公司现在为彭博终端和经济学人情报社报告付费的原因。但人们会为其他信息付费吗？历史提供不了多少鼓励。\n如果观众愿意为更好的内容支付更多费用，为什么没有人已经在向他们销售呢？在物理媒体时代，你没有理由不能这样做。那么，纸质媒体和唱片公司只是忽略了这个机会吗？还是说，它根本不存在？\niTunes呢？这不是说明人们会为内容付费吗？嗯，不是真的。iTunes更像是一个收费站而不是商店。苹果控制了进入iPod的默认路径。他们提供一个方便的歌曲列表，每当你选择一首歌时，他们就会向你的信用卡收取一笔小额费用，刚好低于注意力的门槛。基本上，iTunes通过向人们征税而不是向他们出售东西来赚钱。只有当你拥有渠道时才能做到这一点，即使如此，你也从中赚不了多少钱，因为为了有效，收费站必须是可以忽略的。一旦收费站变得令人痛苦，人们开始寻找绕过它的方法，而对于数字内容来说这很容易。\n数字书籍的情况大致相同。谁控制了设备，谁就制定了条款。让内容尽可能便宜符合他们的利益，而且由于他们拥有渠道，他们可以做很多事情来压低价格。一旦作家意识到他们不需要出版商，价格将进一步下降。对于作家来说，让一本书印刷和分发是一个令人望而生畏的前景，但大多数人可以上传一个文件。\n软件是一个反例吗？人们为桌面软件支付很多钱，那只是信息。是的，但我认为出版商从软件中学不到多少东西。软件公司可以收取很多费用，因为（a）许多客户是企业，如果他们使用盗版版本会遇到麻烦，（b）尽管在形式上只是信息，但软件被制作者和购买者都视为与歌曲或文章不同类型的东西。Photoshop用户需要Photoshop，就像没有人需要特定的歌曲或文章一样。\n这就是为什么对于不是软件的信息有一个单独的词\u0026quot;内容\u0026rdquo;。软件是不同的业务。在一些最轻量级的软件中，软件和内容会融合在一起，比如休闲游戏。但那些通常是免费的。要以软件公司的方式赚钱，出版商必须成为软件公司，而作为出版商并不能让他们在这个领域有特别的优势。[2]\n最有希望的反趋势是付费有线电视频道。人们仍然为那些付费。但广播不是出版：你不是在销售某个东西的副本。这就是电影业没有像新闻和音乐业那样看到收入下降的原因之一。他们只有一只脚踏入出版业。\n只要电影业能够避免成为出版商，他们就可以避免出版业的问题。但他们能在这方面做得好的程度是有限的。一旦出版——给人们副本——成为分发内容的最自然方式，仅仅因为你赚得更多就坚持旧的分发方式可能就行不通了。如果你的内容的免费副本在网上可以找到，那么你就在与出版的分发形式竞争，这和作为出版商一样糟糕。\n显然，音乐行业中的一些人希望通过让听众支付订阅费用来事后将其转变为非出版业务。如果他们只是流式传输你可以作为mp3获得的相同文件，这似乎不太可能奏效。\n下一步 如果你不能销售内容，出版业会怎样？你有两个选择：免费赠送并间接从中赚钱，或者找到方法将其体现在人们愿意为之付费的东西中。\n第一个可能是大多数当前媒体的未来。免费赠送音乐，通过音乐会和T恤赚钱。免费发表文章，通过广告的十几种变化形式中的一种赚钱。出版商和投资者目前都对广告不看好，但它比他们意识到的潜力更大。\n我并不是说这个潜力会由现有的参与者实现。从书面文字中赚钱的最佳方式可能需要由不同的人写出不同的文字。\n很难说电影会发生什么。它们可能演变成广告。或者它们可能回归本源，让去电影院成为一种享受。如果他们让体验足够好，观众可能开始更喜欢它，而不是在家里看盗版电影。[3] 或者电影业可能会枯萎，在其中工作的人将去为游戏开发商工作。\n我不知道将信息体现在物理形式中会有多大。它可能会出人意料地大；人们高估了物理的东西。至少应该还保留一些印刷书籍的市场。\n我可以从书架上的书籍看到图书出版的演变。显然在1960年代的某个时候，大型出版公司开始问：我们能把书做得多么便宜，直到人们拒绝购买它们？结果证明是比电话簿差一步。只要不是软的，消费者仍然认为它是一本书。\n只要购买印刷书籍是阅读它们的唯一方式，这种方式就一直有效。如果印刷书籍是可选的，出版商将不得不更加努力地吸引人们购买它们。应该会有一些市场，但很难预见会有多大，因为它的大小不取决于人们阅读量等宏观趋势，而是取决于个别出版商的独创性。[4]\n一些杂志可能会通过专注于杂志作为物理对象而蓬勃发展。时尚杂志可以制作得奢华到在数字上难以匹配的程度，至少在一段时间内是这样。但这可能对大多数杂志来说不是一个选择。\n我不知道未来会是什么样子，但我并不太担心。这种变化往往会创造与它摧毁的一样多的好东西。实际上，真正有趣的问题不是现有形式会发生什么，而是会出现什么新形式。\n我一直在写现有形式的原因是我不知道会出现什么新形式。虽然我无法预测具体的赢家，但我可以提供一个识别它们的秘诀。当你看到某些东西正在利用新技术给人们一些他们以前无法拥有的东西时，你可能正在看一个赢家。当你看到某些东西只是对新科技做出反应，试图保护某些现有的收入来源时，你可能正在看一个输家。\n注释 [1] 我不喜欢\u0026quot;内容\u0026quot;这个词，并试图一段时间内避免使用它，但我必须承认没有其他词能表达正确的意思。\u0026ldquo;信息\u0026quot;太笼统了。\n具有讽刺意味的是，我不喜欢\u0026quot;内容\u0026quot;的主要原因是这篇论文的论点。这个词暗示着一种未分化的浆状物，但在经济上，出版商和观众都是这样对待它的。内容是你不需要的信息。\n[2] 某些类型的出版商在尝试进入软件业务时会处于不利地位。例如，唱片公司可能会发现扩展到赌场比扩展到软件更自然，因为经营他们的人会在业务频谱的黑手党一端比不作恶一端更自在。\n[3] 我再也不在电影院看电影了。对我来说的转折点是他们首先展示的广告。\n[4] 不幸的是，制作物理上精美的书籍只会是小众中的小众。出版商更可能采取像出售签名副本或封面上有买家照片的版本等权宜之计。\n感谢Michael Arrington、Trevor Blackwell、Steven Levy、Robert Morris和Geoff Ralston阅读本文草稿。\n",
    "description": "",
    "tags": ["出版","媒体","内容","数字","商业模式"],
    "categories": [],
    "content": "→ English Version\n后媒体时代的出版 2009年9月\n从新闻到音乐，各种类型的出版商都对消费者不再为内容付费感到不满。至少，他们是这么看的。\n实际上，消费者从来没有真正为内容付费，出版商也从来没有真正在销售内容。如果他们销售的是内容，为什么书籍、音乐或电影的价格总是主要取决于格式？为什么更好的内容不会更贵？[1]\n一本《时代》杂志售价5美元，共58页，每页8.6美分。《经济学人》售价7美元，共86页，每页8.1美分。更好的新闻实际上反而更便宜。\n几乎所有的出版形式都组织得好像他们销售的是媒介，而内容是无关紧要的。例如，图书出版商根据生产和分销书籍的成本来定价。他们对待书中印刷的文字的方式，就像纺织制造商对待其织物上印刷的图案一样。\n从经济上讲，纸质媒体从事的是纸张加价的业务。我们都能想象一个老式编辑得到独家新闻时说\u0026quot;这会卖很多报纸！\u0026ldquo;划掉最后的那个S，你就是在描述他们的商业模式。他们现在赚钱较少的原因是人们不再需要那么多纸张。\n几个月前，我在一家咖啡馆遇到一个朋友。我有一份《纽约时报》，我仍然偶尔在周末购买。当我离开时，我把它给了他，就像我以前无数次在同样情况下做的那样。但这次发生了新的情况。我感到那种当你给别人无价值的东西时的尴尬感觉。\u0026ldquo;呃，你想要一份昨天的新闻打印件吗？\u0026ldquo;我问道。（他不要。）\n既然媒介正在消失，出版商就没有什么东西可以销售了。有些人认为他们要销售内容——他们实际上一直从事内容业务。但他们不是，而且也不清楚是否有人能做得到。\n销售 一直有人从事销售信息的业务，但这在历史上一直是与出版不同的业务。而向消费者销售信息的业务一直是一个边缘业务。当我还是个孩子的时候，有人过去常常出售包含股票投资建议的通讯，印刷在彩色纸上，使得当时的复印机难以复制。无论是文化上还是经济上，这都是与出版商目前所处的世界不同的世界。\n人们会为他们认为可以从中赚钱的信息付费。这就是他们为那些股票投资建议通讯付费的原因，也是为什么公司现在为彭博终端和经济学人情报社报告付费的原因。但人们会为其他信息付费吗？历史提供不了多少鼓励。\n如果观众愿意为更好的内容支付更多费用，为什么没有人已经在向他们销售呢？在物理媒体时代，你没有理由不能这样做。那么，纸质媒体和唱片公司只是忽略了这个机会吗？还是说，它根本不存在？\niTunes呢？这不是说明人们会为内容付费吗？嗯，不是真的。iTunes更像是一个收费站而不是商店。苹果控制了进入iPod的默认路径。他们提供一个方便的歌曲列表，每当你选择一首歌时，他们就会向你的信用卡收取一笔小额费用，刚好低于注意力的门槛。基本上，iTunes通过向人们征税而不是向他们出售东西来赚钱。只有当你拥有渠道时才能做到这一点，即使如此，你也从中赚不了多少钱，因为为了有效，收费站必须是可以忽略的。一旦收费站变得令人痛苦，人们开始寻找绕过它的方法，而对于数字内容来说这很容易。\n数字书籍的情况大致相同。谁控制了设备，谁就制定了条款。让内容尽可能便宜符合他们的利益，而且由于他们拥有渠道，他们可以做很多事情来压低价格。一旦作家意识到他们不需要出版商，价格将进一步下降。对于作家来说，让一本书印刷和分发是一个令人望而生畏的前景，但大多数人可以上传一个文件。\n软件是一个反例吗？人们为桌面软件支付很多钱，那只是信息。是的，但我认为出版商从软件中学不到多少东西。软件公司可以收取很多费用，因为（a）许多客户是企业，如果他们使用盗版版本会遇到麻烦，（b）尽管在形式上只是信息，但软件被制作者和购买者都视为与歌曲或文章不同类型的东西。Photoshop用户需要Photoshop，就像没有人需要特定的歌曲或文章一样。\n这就是为什么对于不是软件的信息有一个单独的词\u0026quot;内容\u0026rdquo;。软件是不同的业务。在一些最轻量级的软件中，软件和内容会融合在一起，比如休闲游戏。但那些通常是免费的。要以软件公司的方式赚钱，出版商必须成为软件公司，而作为出版商并不能让他们在这个领域有特别的优势。[2]\n最有希望的反趋势是付费有线电视频道。人们仍然为那些付费。但广播不是出版：你不是在销售某个东西的副本。这就是电影业没有像新闻和音乐业那样看到收入下降的原因之一。他们只有一只脚踏入出版业。\n只要电影业能够避免成为出版商，他们就可以避免出版业的问题。但他们能在这方面做得好的程度是有限的。一旦出版——给人们副本——成为分发内容的最自然方式，仅仅因为你赚得更多就坚持旧的分发方式可能就行不通了。如果你的内容的免费副本在网上可以找到，那么你就在与出版的分发形式竞争，这和作为出版商一样糟糕。\n显然，音乐行业中的一些人希望通过让听众支付订阅费用来事后将其转变为非出版业务。如果他们只是流式传输你可以作为mp3获得的相同文件，这似乎不太 …"
  },{
    "title": "向创始人学习",
    "url": "/paul_graham/essays_zh/foundersatwork/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n向创始人学习 2007年1月\n（Jessica Livingston的《创业者访谈录》前言）\n显然，短跑运动员在起跑后就达到最高速度，然后其余时间都在减速。赢家减速最少。大多数创业公司也是如此。最早的阶段通常是最多产的。那是他们真正有大创意的时候。想象一下当苹果公司100%的员工都是Steve Jobs或Steve Wozniak时的样子。\n这个阶段的显著特点是，它与大多数人对商业的看法完全不同。如果你在人们的头脑（或图片库）中寻找代表\u0026quot;商业\u0026quot;的图像，你会得到人们穿着西装、坐在会议桌周围表情严肃的群体、Powerpoint演示文稿、人们为彼此阅读制作厚厚报告的图像。早期创业公司与此完全相反。然而，它们可能是整个经济中最有生产力的部分。\n为什么会有这种脱节？我认为这里有一个普遍原则在起作用：人们在表现上花费的精力越少，他们在外表上花费的精力就越多以补偿。通常，他们花在看起来令人印象深刻上的精力实际上使他们的表现更差。几年前我读了一篇文章，其中一家汽车杂志改装了某款量产车的\u0026quot;运动\u0026quot;型号，以获得最快可能的静止四分之一英里速度。你知道他们是怎么做的吗？他们切掉了制造商为了使车看起来快而安装在车上所有垃圾。\n商业就像那辆车一样被破坏了。花在看起来有生产力上的努力不仅是浪费的，而且实际上使组织的生产力降低。例如，西装。西装无助于人们更好地思考。我敢打赌，大多数大公司的高管在周日早上醒来，穿着浴袍下楼喝咖啡时思考得最好。那时你才有创意。想象一下，如果人们能在工作中思考得那么好，公司会是什么样子。在创业公司中人们确实能做到，至少有时如此。（一半时间你处于恐慌状态，因为你的服务器着火了，但另一半时间你的思考深度是大多数人在周日早上独自坐着时才能达到的。）\n创业公司与在大公司中被视为生产力的大多数其他差异也是如此。然而，传统的专业主义观念对我们的思想有如此强烈的控制，甚至创业创始人都受到影响。在我们的创业公司中，当外人来访时，我们努力显得\u0026quot;专业\u0026quot;。我们会清理办公室，穿更好的衣服，试着安排很多人在正常办公时间在那里。事实上，编程不是由穿着得体的人在干净办公桌前在办公时间内完成的。它是由穿着不得体的人（我因只穿着毛巾编程而臭名昭著）在凌晨2点在堆满垃圾的办公室里完成的。但没有一个访客会理解这一点。即使是投资者，他们应该能够在看到真正的生产力时认出它。甚至我们也受到了传统智慧的影响。我们把自己视为冒名顶替者，尽管完全不专业却成功了。就好像我们创造了一辆一级方程式赛车，但因为看起来不像汽车应该的样子而感到尴尬。\n在汽车界，至少有一些人知道高性能汽车看起来像一级方程式赛车，而不是带有巨大轮毂和假尾翼固定在行李箱上的轿车。为什么在商业界不是这样？可能是因为创业公司太小了。真正的戏剧性增长发生在创业公司只有三四个人时，所以只有三四个人看到这一点，而成千上万的人看到的是像波音或菲利普莫里斯那样的商业运作方式。\n这本书可以帮助解决这个问题，向每个人展示到目前为止只有少数人能看到的东西：创业公司第一年发生的事情。这就是真正生产力的样子。这是一级方程式赛车。它看起来很奇怪，但跑得很快。\n当然，大公司无法做到这些创业公司所做的一切。在大公司中，总会有更多的政治，个人决策的空间更少。但看到创业公司的真实情况至少会向其他组织展示目标是什么。很快的时候可能会到来，不是创业公司试图显得更像企业，而是企业试图显得更像创业公司。那将是一件好事。\n日文版《创业者访谈录》\n能够亲身体验成功创业公司第一个月发生的事情的人不会超过几千人。Jessica Livingston让他们告诉我们。所以尽管是访谈格式，但这真的是一本操作指南。它可能是创业创始人能读到的最有价值的单本书籍。\n",
    "description": "",
    "tags": ["创始人","生产力","创业公司","专业主义","Jessica Livingston"],
    "categories": [],
    "content": "→ English Version\n向创始人学习 2007年1月\n（Jessica Livingston的《创业者访谈录》前言）\n显然，短跑运动员在起跑后就达到最高速度，然后其余时间都在减速。赢家减速最少。大多数创业公司也是如此。最早的阶段通常是最多产的。那是他们真正有大创意的时候。想象一下当苹果公司100%的员工都是Steve Jobs或Steve Wozniak时的样子。\n这个阶段的显著特点是，它与大多数人对商业的看法完全不同。如果你在人们的头脑（或图片库）中寻找代表\u0026quot;商业\u0026quot;的图像，你会得到人们穿着西装、坐在会议桌周围表情严肃的群体、Powerpoint演示文稿、人们为彼此阅读制作厚厚报告的图像。早期创业公司与此完全相反。然而，它们可能是整个经济中最有生产力的部分。\n为什么会有这种脱节？我认为这里有一个普遍原则在起作用：人们在表现上花费的精力越少，他们在外表上花费的精力就越多以补偿。通常，他们花在看起来令人印象深刻上的精力实际上使他们的表现更差。几年前我读了一篇文章，其中一家汽车杂志改装了某款量产车的\u0026quot;运动\u0026quot;型号，以获得最快可能的静止四分之一英里速度。你知道他们是怎么做的吗？他们切掉了制造商为了使车看起来快而安装在车上所有垃圾。\n商业就像那辆车一样被破坏了。花在看起来有生产力上的努力不仅是浪费的，而且实际上使组织的生产力降低。例如，西装。西装无助于人们更好地思考。我敢打赌，大多数大公司的高管在周日早上醒来，穿着浴袍下楼喝咖啡时思考得最好。那时你才有创意。想象一下，如果人们能在工作中思考得那么好，公司会是什么样子。在创业公司中人们确实能做到，至少有时如此。（一半时间你处于恐慌状态，因为你的服务器着火了，但另一半时间你的思考深度是大多数人在周日早上独自坐着时才能达到的。）\n创业公司与在大公司中被视为生产力的大多数其他差异也是如此。然而，传统的专业主义观念对我们的思想有如此强烈的控制，甚至创业创始人都受到影响。在我们的创业公司中，当外人来访时，我们努力显得\u0026quot;专业\u0026quot;。我们会清理办公室，穿更好的衣服，试着安排很多人在正常办公时间在那里。事实上，编程不是由穿着得体的人在干净办公桌前在办公时间内完成的。它是由穿着不得体的人（我因只穿着毛巾编程而臭名昭著）在凌晨2点在堆满垃圾的办公室里完成的。但没有一个访客会理解这一点。即使是投资者，他们应该能够在看到真正的生产力时认出它。甚至我们也受到了传统智慧的影响。我们把自己视为冒名顶替者，尽管完全不专业却成功了。就好像我们创造了一辆一级方程式赛车，但因为看起来不像汽车应该的样子而感到尴尬。\n在汽车界，至少有一些人知道高性能汽车看起来像一级方程式赛车，而不是带有巨大轮毂和假尾翼固定在行李箱上的轿车。为什么在商业界不是这样？可能是因为创业公司太小了。真正的戏剧性增长发生在创业公司只有三四个人时，所以只有三四个人看到这一点，而成千上万的人看到的是像波音或菲利普莫里斯那样的商业运作方式。\n这本书可以帮助解决这个问题，向每个人展示到目前为止只有少数人能看到的东西：创业公司第一年发生的事情。这就是真正生产力的样子。这是一级方程式赛车。它看起来很奇怪，但跑得很快。\n当然，大公司无法做到这些创业公司所做的一切。在大公司中，总会有更多的政治，个人决策的空间更少。但看到创业公司的真实情况至少会向其他组织展示目标是什么。很快的时候可能会到来，不是创业公司试图显得更像企业，而是企业试图显得更像创业公司。那将是一件好事。\n日文版《创业者访谈录》\n能够亲身体验成功创业公司第一个月发生的事情的人不会超过几千人。Jessica Livingston让他们告诉我们。所以尽管是访谈格式，但这真的是一本操作指南。它可能是创业创始人能读到的最有价值的单本书籍。\n"
  },{
    "title": "商业可以从开源中学到什么",
    "url": "/paul_graham/essays_zh/opensource/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n商业可以从开源中学到什么 2005年8月\n（本文源自2005年Oscon大会的演讲。）\n最近，公司对开源的关注越来越多。十年前，微软似乎真的有可能将其垄断扩展到服务器领域。现在可以肯定地说，开源已经阻止了这种情况的发生。最近的一项调查发现，52%的公司正在用Linux服务器替换Windows服务器。[1]\n我认为，更重要的是这52%是哪些公司。在这一点上，任何提议在服务器上运行Windows的人都应该准备好解释他们对服务器的了解比Google、Yahoo和Amazon多什么。\n但商业可以从开源中学到的最重要的东西不是关于Linux或Firefox，而是关于产生它们的力量。最终，这些力量将影响的远不止你使用什么软件。\n我们或许可以通过开源和博客的三角定位来把握这些潜在力量。你可能已经注意到，它们有很多共同之处。\n像开源一样，博客是人们自己做、免费做、因为他们喜欢而做的事情。像开源黑客一样，博客作者与为钱工作的人竞争，而且经常获胜。确保质量的方法也是一样的：达尔文式的。公司通过防止员工搞砸的规则来确保质量。但当受众可以相互交流时，你就不需要那种规则了。人们只是生产他们想要的任何东西；好的东西传播开来，坏的则被忽视。在这两种情况下，受众的反馈都改进了最好的作品。\n博客和开源的另一个共同点是Web。人们总是愿意免费做伟大的工作，但在Web之前，接触受众或在项目上合作更加困难。\n业余爱好者 我认为商业必须学习的最重要新原则是，人们对自己喜欢的东西会工作得更努力。嗯，这对任何人来说都不是新闻。那么我怎么能说商业必须学习它呢？当我说商业不知道这一点时，我的意思是商业结构没有反映这一点。\n商业仍然反映了一个更古老的模式，以法语工作的词travailleur为例。它有一个英语表亲travail，它的意思是折磨。[2]\n然而，事实证明这不是关于工作的最后定论。随着社会变得越来越富裕，他们学到的一些关于工作的事情很像他们学到的一些关于饮食的事情。我们现在知道，最健康的饮食是我们的农民祖先因为贫穷而被迫吃的饮食。像丰富的食物一样，只有当你得不到足够的懒惰时，它才似乎令人向往。我认为我们被设计来工作，就像我们被设计吃一定量的纤维一样，如果我们不这样做，我们会感到不舒服。\n为爱而工作的人有一个名字：业余爱好者。这个词现在有如此坏的内涵，以至于我们忘记了它的词源，尽管它就在我们眼前。\u0026ldquo;Amateur\u0026quot;最初是一个相当恭维的词。但在二十世纪，要成为专业人士，而业余爱好者，根据定义，不是专业人士。\n这就是为什么商业界对开源的一个教训如此惊讶：为爱而工作的人经常超过为钱而工作的人。用户从Explorer切换到Firefox不是因为想要修改源代码。他们切换是因为它是更好的浏览器。\n不是微软不努力。他们知道控制浏览器是保持垄断的关键之一。他们面临的问题与他们在操作系统领域面临的问题相同：他们无法支付足够的钱让人们建造比一群有灵感的黑客免费建造的更好的东西。\n我怀疑专业化一直被高估了——不仅是从为钱工作的字面意义上，还包括形式和超然等内涵。不可思议的是，比如在1970年，我认为专业化主要是一种时尚，是由二十世纪存在的条件驱动的。\n其中最强大的是\u0026quot;渠道\u0026quot;的存在。引人注目的是，同样的术语用于产品和信息：有分销渠道，以及电视和广播频道。\n正是这种渠道的狭窄性使专业人士似乎比业余爱好者优越得多。例如，专业记者的工作职位很少，所以竞争确保了普通记者都相当不错。而任何人都可以在酒吧里表达对当前事件的看法。因此，在酒吧里表达意见的普通人与撰写这个主题的记者相比听起来像个白痴。\n在Web上，发布你想法的门槛甚至更低。你不需要买饮料，他们甚至让孩子进入。数百万人在线发布，他们写作的平均水平，正如你可能预期的，不是很好。这导致媒体中的一些人得出结论，博客不构成太大威胁——博客只是一种时尚。\n实际上，时尚的是\u0026quot;博客\u0026quot;这个词，至少是印刷媒体现在使用它的方式。他们所说的\u0026quot;博主\u0026quot;不是以网络日志格式发布的人，而是在线发布的任何人。随着Web成为默认的发布媒介，这将变成一个问题。所以我想为在线发布的人建议一个替代词。怎么样用\u0026quot;作家\u0026rdquo;？\n那些因为在线写作的平均质量低而忽视它的印刷媒体人士忽略了一个重要观点：没有人读普通的博客。在渠道的旧世界里，谈论平均质量是有意义的，因为不管你喜欢与否，你得到的就是那个。但现在你可以阅读任何你想要的作家。所以在线写作的平均质量不是印刷媒体竞争的对象。他们竞争的是在线最好的写作。而且，像微软一样，他们正在输。\n我从自己作为读者的经历知道这一点。虽然大多数印刷出版物都在线，但我可能在个人网站上读两三篇文章，才会在报纸或杂志的网站上读一篇。\n当我读，比如说，《纽约时报》的故事时，我从不通过《纽约时报》首页到达它们。我大多通过聚合器如Google News、Slashdot或Delicious找到它们。聚合器显示了你可以比渠道做得好多少。《纽约时报》首页是为《纽约时报》工作的人写的文章列表。Delicious是有趣的文章列表。只有现在你可以并排看到两者，你才注意到重叠是多么少。\n印刷媒体中的大多数文章都很无聊。例如，总统注意到大多数选民现在认为入侵伊拉克是个错误，所以他向全国发表演讲以争取支持。那有什么咬人的呢？我没有听演讲，但我可能可以准确告诉你他说了什么。像这样的演讲，从最字面的意义上说，不是新闻：里面没有什么新东西。[3]\n在大多数关于出错的\u0026quot;新闻\u0026quot;中，除了名字和地点，也没有什么新东西。一个孩子被绑架；有龙卷风；渡轮沉没；有人被鲨鱼咬伤；小型飞机坠毁。你从这些故事中学到了什么关于世界的事情？绝对没有。它们是离群的数据点；使它们引人入胜的东西也使它们变得无关紧要。\n就像在软件中一样，当专业人士生产这样的垃圾时，如果业余爱好者能做得更好，也就不足为奇了。成也渠道，败也渠道：如果你依赖寡头垄断，你会陷入难以克服的坏习惯，当你突然遇到竞争时。[4]\n工作场所 博客和开源软件的另一个共同点是它们通常是在家工作的人制作的。这可能看起来并不令人惊讶。但应该是。这相当于一架自制飞机击落F-18的建筑上的等价物。公司花费数百万建造办公楼，只为一个目的：作为工作场所。然而，在自己家里工作的人，他们的家甚至不是设计为工作场所的，最终却更有生产力。\n这证明了许多人怀疑的事情。普通办公室是完成工作的糟糕地方。使办公室变坏的很多东西恰恰是我们与专业化相关的品质。办公室的无菌性应该是为了暗示效率。但暗示效率和实际上有效率是不同的事情。\n普通工作场所的氛围对生产力来说就像画在汽车侧面的火焰对速度一样。而且不仅仅是办公室看起来很 bleak。人们的行为方式也同样糟糕。\n在初创公司中情况不同。初创公司通常从公寓开始。他们没有匹配的米色小隔间，而是有各种他们买来的二手家具。他们工作时间不规律，穿着最随意的衣服。他们看任何他们想在线看的东西，而不担心是否\u0026quot;工作安全\u0026quot;。办公室愉快、平淡的语言被邪恶的幽默所取代。你知道吗？公司在这个阶段可能是有史以来最有生产力的。\n也许这不是巧合。也许专业化的某些方面实际上是一个净损失。\n对我来说，传统办公室最令人沮丧的方面是你应该在特定时间在那里。公司里通常有几个人真的必须这样，但大多数员工工作时间固定是因为公司无法衡量他们的生产力。\n办公时间背后的基本想法是，如果你不能让人们工作，你至少可以防止他们玩乐。如果员工每天必须在建筑物里待一定数量的小时，并且在那里被禁止做非工作的事情，那么他们一定是在工作。理论上。在实践中，他们花费大量时间在无人地带，在那里他们既不工作也不玩乐。\n如果你能衡量人们做了多少工作，许多公司不需要任何固定的工作日。你可以说：这是你必须做的。无论何时何地，只要你喜欢就做。如果你的工作需要与公司里的其他人交谈，那么你可能需要在这里一定时间。否则我们不关心。\n这可能看起来乌托邦，但这就是我们告诉来为我们公司工作的人的话。没有固定的办公时间。我从不早于上午11点出现。但我们说这个不是为了仁慈。我们说：如果你在这里工作，我们期望你完成很多事情。不要试图仅仅通过多在这里来欺骗我们。\n面子时间模式的问题不仅令人沮丧，而且假装工作的人打断了实际工作的人。我确信面子时间模式是大型组织有这么多会议的主要原因。人均而言，大型组织完成的很少。然而所有这些人每天必须在现场至少八小时。当这么多时间进入一端而如此少的成就从另一端出来时，总会有所让步。而会议是填补松懈的主要机制。\n我曾经做了一份朝九晚五的常规工作，我记得很清楚会议期间 strange, cozy的感觉。因为新奇，我很清楚地意识到我正在为编程获得报酬。这似乎令人惊讶，好像我桌上有一台机器，无论我做什么，每两分钟吐出一美元纸币。即使我在浴室里！但因为想象中的机器一直在运行，我觉得我应该总是在工作。所以会议感觉令人愉快地放松。它们算作工作，就像编程一样，但它们容易得多。你只需要坐着看起来注意力集中。\n会议就像有网络效应的鸦片。电子邮件在较小程度上也是如此。除了时间的直接成本外，还有碎片化的成本——把人们的一天分解成太小而无法利用的碎片。\n你可以通过突然移除某些东西来看你对它有多依赖。所以对于大公司，我提议以下实验。留出一天禁止会议——每个人都必须整天坐在办公桌前，在没有中断的情况下工作，做他们可以在不与任何人交谈的情况下做的事情。大多数工作需要一定量的沟通，但我确信许多员工可以找到八小时的自己可以做的事情。你可以称之为\u0026quot;工作日\u0026quot;。\n假装工作的另一个问题是它通常看起来比真实工作更好。当我写作或编程时，我花在思考上的时间和实际打字的时间一样多。一半的时间我坐着喝茶，或在附近散步。这是一个关键阶段——这是想法来源的地方——然而在大多数办公室里，我会感到内疚，因为其他人看起来都很忙。\n在你有可以比较的东西之前，很难看出一些做法有多糟糕。这就是开源，甚至在某些情况下的博客如此重要的原因之一。它们向我们展示了真实工作的样子。\n我们目前正在资助八家新的初创公司。一个朋友问他们在办公空间方面做什么，当我说我们期望他们在他们找到居住的任何公寓里工作时，他似乎感到惊讶。但我们提出这个不是为了省钱。我们这样做是因为我们希望他们的软件是好的。在糟糕的非正式空间工作是初创公司在没有意识到的情况下做对的事情之一。一旦你进入办公室，工作和生活就开始分离。\n这就是专业化的关键信条之一。工作和生活应该分开。但那部分，我确信，是一个错误。\n自下而上 我们可以从开源和博客中学到的第三个大教训是，想法可以从底部冒出来，而不是从顶部流下来。开源和博客都是自下而上工作的：人们制作他们想要的东西，最好的东西胜出。\n这听起来熟悉吗？这是市场经济的原则。具有讽刺意味的是，虽然开源和博客是免费做的，但那些世界类似于市场经济，而大多数公司，尽管他们谈论自由市场的价值，内部却像共产主义国家一样运作。\n有两个力量一起引导设计：关于接下来做什么的想法，以及质量的执行。在渠道时代，两者都从顶部流下来。例如，报纸编辑给记者分配故事，然后编辑他们写的东西。\n开源和博客向我们展示了事情不必那样运作。想法甚至质量的执行都可以自下而上地流动。在这两种情况下，结果不仅是可接受的，而且是更好的。例如，开源软件更可靠正是因为它是开源的；任何人都可以发现错误。\n写作也是如此。当我们接近出版时，我发现我非常担心《黑客与画家》中没有在线的文章。一旦一篇文章有了几千次浏览，我对它就相当有信心了。但这些文章受到的审查 literally 少了数量级。感觉就像发布没有测试过的软件。\n这就是所有出版过去的样子。如果你能让十个人阅读手稿，你就很幸运了。但我已经变得如此习惯在线发布，以至于旧的方法现在看起来令人担忧地不可靠，就像在你习惯了GPS之后通过航位推法导航。\n我喜欢在线出版的另一个事情是你可以写你想写的，随时发布。今年早些时候我写了一些似乎适合杂志的东西，所以我把它发给我认识的一个编辑。在等待回音时，我惊讶地发现自己希望他们拒绝它。然后我可以立即把它放上网。如果他们接受了，几个月内不会有人读到它，在此期间我必须逐字斗争以拯救它不被某个二十五岁的文字编辑破坏。[5]\n许多员工想为他们工作的公司建造伟大的东西，但管理层往往不让他们。我们中有多少人听过员工去管理层说，请让我们建造这个东西为你赚钱——而公司说不的故事？最著名的例子可能是Steve Wozniak，他最初想为他当时的雇主HP建造微型计算机。他们拒绝了他。在失误测量仪上，这一事件与IBM接受DOS的非排他性许可证相当。但我认为这种情况一直发生。我们通常没有听说，因为要证明自己是对的，你必须辞职并创办自己的公司，就像Wozniak那样。\n初创公司 所以这些，我认为，是开源和博客可以教给商业的三个大教训：(1) 人们对自己喜欢的东西工作得更努力，(2) 标准的办公环境非常没有生产力，(3) 自下而上往往比自上而下效果更好。\n我可以想象经理们现在会说：这家伙在说什么？知道我的程序员在家自己的项目上工作会更有效率对我有什么好处？我需要他们的屁股在这里为我们的软件3.2版本工作，否则我们永远无法赶上发布日期。\n确实，我描述的力量给那个特定经理能带来的好处接近于零。当我说商业可以从开源中学习时，我不是说任何特定的商业可以。我的意思是商业可以像基因池一样学习新条件。我不是声称公司可以变得更聪明，只是说愚蠢的公司会死掉。\n",
    "description": "",
    "tags": ["开源","商业","工作场所","生产力","创新","管理","博客"],
    "categories": [],
    "content": "→ English Version\n商业可以从开源中学到什么 2005年8月\n（本文源自2005年Oscon大会的演讲。）\n最近，公司对开源的关注越来越多。十年前，微软似乎真的有可能将其垄断扩展到服务器领域。现在可以肯定地说，开源已经阻止了这种情况的发生。最近的一项调查发现，52%的公司正在用Linux服务器替换Windows服务器。[1]\n我认为，更重要的是这52%是哪些公司。在这一点上，任何提议在服务器上运行Windows的人都应该准备好解释他们对服务器的了解比Google、Yahoo和Amazon多什么。\n但商业可以从开源中学到的最重要的东西不是关于Linux或Firefox，而是关于产生它们的力量。最终，这些力量将影响的远不止你使用什么软件。\n我们或许可以通过开源和博客的三角定位来把握这些潜在力量。你可能已经注意到，它们有很多共同之处。\n像开源一样，博客是人们自己做、免费做、因为他们喜欢而做的事情。像开源黑客一样，博客作者与为钱工作的人竞争，而且经常获胜。确保质量的方法也是一样的：达尔文式的。公司通过防止员工搞砸的规则来确保质量。但当受众可以相互交流时，你就不需要那种规则了。人们只是生产他们想要的任何东西；好的东西传播开来，坏的则被忽视。在这两种情况下，受众的反馈都改进了最好的作品。\n博客和开源的另一个共同点是Web。人们总是愿意免费做伟大的工作，但在Web之前，接触受众或在项目上合作更加困难。\n业余爱好者 我认为商业必须学习的最重要新原则是，人们对自己喜欢的东西会工作得更努力。嗯，这对任何人来说都不是新闻。那么我怎么能说商业必须学习它呢？当我说商业不知道这一点时，我的意思是商业结构没有反映这一点。\n商业仍然反映了一个更古老的模式，以法语工作的词travailleur为例。它有一个英语表亲travail，它的意思是折磨。[2]\n然而，事实证明这不是关于工作的最后定论。随着社会变得越来越富裕，他们学到的一些关于工作的事情很像他们学到的一些关于饮食的事情。我们现在知道，最健康的饮食是我们的农民祖先因为贫穷而被迫吃的饮食。像丰富的食物一样，只有当你得不到足够的懒惰时，它才似乎令人向往。我认为我们被设计来工作，就像我们被设计吃一定量的纤维一样，如果我们不这样做，我们会感到不舒服。\n为爱而工作的人有一个名字：业余爱好者。这个词现在有如此坏的内涵，以至于我们忘记了它的词源，尽管它就在我们眼前。\u0026ldquo;Amateur\u0026quot;最初是一个相当恭维的词。但在二十世纪，要成为专业人士，而业余爱好者，根据定义，不是专业人士。\n这就是为什么商业界对开源的一个教训如此惊讶：为爱而工作的人经常超过为钱而工作的人。用户从Explorer切换到Firefox不是因为想要修改源代码。他们切换是因为它是更好的浏览器。\n不是微软不努力。他们知道控制浏览器是保持垄断的关键之一。他们面临的问题与他们在操作系统领域面临的问题相同：他们无法支付足够的钱让人们建造比一群有灵感的黑客免费建造的更好的东西。\n我怀疑专业化一直被高估了——不仅是从为钱工作的字面意义上，还包括形式和超然等内涵。不可思议的是，比如在1970年，我认为专业化主要是一种时尚，是由二十世纪存在的条件驱动的。\n其中最强大的是\u0026quot;渠道\u0026quot;的存在。引人注目的是，同样的术语用于产品和信息：有分销渠道，以及电视和广播频道。\n正是这种渠道的狭窄性使专业人士似乎比业余爱好者优越得多。例如，专业记者的工作职位很少，所以竞争确保了普通记者都相当不错。而任何人都可以在酒吧里表达对当前事件的看法。因此，在酒吧里表达意见的普通人与撰写这个主题的记者相比听起来像个白痴。\n在Web上，发布你想法的门槛甚至更低。你不需要买饮料，他们甚至让孩子进入。数百万人在线发布，他们写作的平均水平，正如你可能预期的，不是很好。这导致媒体中的一些人得出结论，博客不构成太大威胁——博客只是一种时尚。\n实际上，时尚的是\u0026quot;博客\u0026quot;这个词，至少是印刷媒体现在使用它的方式。他们所说的\u0026quot;博主\u0026quot;不是以网络日志格式发布的人，而是在线发布的任何人。随着Web成为默认的发布媒介，这将变成一个问题。所以我想为在线发布的人建议一个替代词。怎么样用\u0026quot;作家\u0026rdquo;？\n那些因为在线写作的平均质量低而忽视它的印刷媒体人士忽略了一个重要观点：没有人读普通的博客。在渠道的旧世界里，谈论平均质量是有意义的，因为不管你喜欢与否，你得到的就是那个。但现在你可以阅读任何你想要的作家。所以在线写作的平均质量不是印刷媒体竞争的对象。他们竞争的是在线最好的写作。而且，像微软一样，他们正在输。\n我从自己作为读者的经历知道这一点。虽然大多数印刷出版物都在线，但我可能在个人网站上读两三篇文章，才会在报纸或杂志的网站上读一 …"
  },{
    "title": "在哪里看硅谷",
    "url": "/paul_graham/essays_zh/seesv/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n在哪里看硅谷 2010年10月\n硅谷本身大部分是郊区蔓延。乍看之下似乎没有什么可看的。它不是那种有明显纪念碑的地方。但如果你仔细看，有一些微妙的迹象表明你在一个不同于其他地方的地方。\n斯坦福大学 斯坦福是一个奇怪的地方。从结构上讲，它对于普通大学来说就像郊区对于城市一样。它非常分散，很多时候感觉出奇地空旷。但注意天气。它可能是完美的。注意西边美丽的山脉。虽然你看不到它，但国际化的旧金山在北边40分钟处。这种组合很大程度上是硅谷在这所大学而不是其他大学周围成长的原因。\n大学大道 令人惊讶的是，硅谷的大量工作是在帕洛阿尔托大学大道上或附近的咖啡馆里完成的。如果你在工作日的上午10点到下午5点之间参观，你经常会看到创始人在向投资者做演示。如果你分不清，创始人是那些身体前倾、热情洋溢的人，而投资者是那些身体后靠、表情略带痛苦的人。\n幸运办公室 165大学大道的办公室是谷歌的第一个办公室。然后是贝宝的。（现在是Wepay的。）关于它的有趣之处是位置。把创业公司放在有餐厅和人们走动的地方而不是办公园区里是一个聪明的举动，因为在那里工作的人想要留在那里，而不是在常规工作时间结束后就逃离。他们一起出去吃晚饭，谈论想法，然后回来实现它们。\n重要的是要意识到谷歌目前在办公园区的位置不是他们开始的；这只是当他们需要更多空间时被迫搬去的地方。Facebook直到最近还在街对面，直到他们也因为需要更多空间而不得不搬走。\n老帕洛阿尔托 帕洛阿尔托最初不是一个郊区。在它存在的大约前100年里，它是乡下的一个大学城。然后在1950年代中期，它被一股席卷半岛的郊区浪潮所吞没。但俄勒冈高速公路以北的帕洛阿尔托仍然感觉与周围地区明显不同。它是硅谷最好的地方之一。建筑物很旧（尽管越来越多的建筑物被拆除并代之以普通的豪宅），树木很高。但房子非常昂贵——大约每平方英尺1000美元。这是退出后的硅谷。\n沙山路 看到沙山路北侧风险投资公司的办公室很有趣，正因为它们如此单调统一。建筑物或多或少都一样，它们的外表表达很少，它们被安排在一个令人困惑的迷宫中。（我多年来一直在拜访它们，偶尔还是会迷路。）这不是巧合。这些建筑相当准确地反映了风险投资业务。\n如果你在工作日去，你可能会看到成群的创始人在那里会见风险投资家。但大多数时候你不会看到任何人；喧嚣是你会用来描述氛围的最后一个词。参观沙山路提醒你，\u0026ldquo;肮脏\u0026quot;的反面是\u0026quot;干净\u0026rdquo;。\n卡斯特罗街 现在卡斯特罗街还是大学大道应该被认为是硅谷的中心是有争议的。10年前应该是大学大道。但帕洛阿尔托变得越来越昂贵。创业公司越来越多地位于山景城，而帕洛阿尔托是他们来会见投资者的地方。帕洛阿尔托有很多不同的咖啡馆，但在山景城有一个明显占主导地位的：Red Rock。\n谷歌 谷歌从山景城的第一个建筑扩展到周围的许多建筑。但因为建筑物是由不同人在不同时间建造的，这个地方没有典型大公司总部的无菌、封闭的感觉。不过它确实有自己的特色。你感觉到有什么事情正在发生。普遍的氛围隐约乌托邦；有很多普锐斯，和看起来像开这种车的人。\n除非你在那里认识人，否则你不能进入谷歌。如果你能进去，里面非常值得一看。帕洛阿尔托加利福尼亚大道尽头的Facebook也是如此，尽管外面没有什么可看的。\n天际线大道 天际线大道沿着圣克鲁斯山脉的山脊运行。一边是硅谷，另一边是海——因为它寒冷、多雾、港口很少，考虑到它的距离有多近，它在硅谷人生活中的作用出人意料地小。在天际线的一些部分，主要的树木是巨大的红杉，而在其他地方是活橡树。红杉意味着这些是海岸浓雾在晚上进来的地方；红杉从浓雾中凝结出雨水。MROSD管理着天际线沿线的一系列很棒的步行道。\n280号公路 硅谷有两条贯穿全境的公路：101号，相当丑陋，和280号，世界上最美丽的公路之一。当我可以选择时，我总是走280号。注意西边狭长的湖？那是圣安德烈亚斯断层。它沿着山脚运行，然后穿过波特拉谷上坡。MROSD的一条小路正好沿着断层运行。一串富裕的社区沿着280号西山麓延伸：伍德赛德、波特拉谷、洛斯阿尔托斯山、萨拉托加、洛斯加托斯。\nSLAC正好在沙山路南边一点穿过280号地下。再往南几英里是硅谷的\u0026quot;欢迎来到拉斯维加斯\u0026quot;标志的等价物：巨碟。\n注释\n我跳过了计算机历史博物馆，因为这是关于在哪里看硅谷本身的列表，而不是在哪里看它的文物。我也跳过了圣何塞。圣何塞自称是硅谷的首都，但当硅谷人使用\u0026quot;城市\u0026quot;这个词时，他们指的是旧金山。圣何塞是地图上的虚线。\n感谢萨姆·奥特曼、保罗·布赫海特、帕特里克·克里森和杰西卡·利文斯顿阅读本文的草稿。\n",
    "description": "",
    "tags": ["硅谷","创业公司","风险投资","技术文化","y_combinator","地理"],
    "categories": [],
    "content": "→ English Version\n在哪里看硅谷 2010年10月\n硅谷本身大部分是郊区蔓延。乍看之下似乎没有什么可看的。它不是那种有明显纪念碑的地方。但如果你仔细看，有一些微妙的迹象表明你在一个不同于其他地方的地方。\n斯坦福大学 斯坦福是一个奇怪的地方。从结构上讲，它对于普通大学来说就像郊区对于城市一样。它非常分散，很多时候感觉出奇地空旷。但注意天气。它可能是完美的。注意西边美丽的山脉。虽然你看不到它，但国际化的旧金山在北边40分钟处。这种组合很大程度上是硅谷在这所大学而不是其他大学周围成长的原因。\n大学大道 令人惊讶的是，硅谷的大量工作是在帕洛阿尔托大学大道上或附近的咖啡馆里完成的。如果你在工作日的上午10点到下午5点之间参观，你经常会看到创始人在向投资者做演示。如果你分不清，创始人是那些身体前倾、热情洋溢的人，而投资者是那些身体后靠、表情略带痛苦的人。\n幸运办公室 165大学大道的办公室是谷歌的第一个办公室。然后是贝宝的。（现在是Wepay的。）关于它的有趣之处是位置。把创业公司放在有餐厅和人们走动的地方而不是办公园区里是一个聪明的举动，因为在那里工作的人想要留在那里，而不是在常规工作时间结束后就逃离。他们一起出去吃晚饭，谈论想法，然后回来实现它们。\n重要的是要意识到谷歌目前在办公园区的位置不是他们开始的；这只是当他们需要更多空间时被迫搬去的地方。Facebook直到最近还在街对面，直到他们也因为需要更多空间而不得不搬走。\n老帕洛阿尔托 帕洛阿尔托最初不是一个郊区。在它存在的大约前100年里，它是乡下的一个大学城。然后在1950年代中期，它被一股席卷半岛的郊区浪潮所吞没。但俄勒冈高速公路以北的帕洛阿尔托仍然感觉与周围地区明显不同。它是硅谷最好的地方之一。建筑物很旧（尽管越来越多的建筑物被拆除并代之以普通的豪宅），树木很高。但房子非常昂贵——大约每平方英尺1000美元。这是退出后的硅谷。\n沙山路 看到沙山路北侧风险投资公司的办公室很有趣，正因为它们如此单调统一。建筑物或多或少都一样，它们的外表表达很少，它们被安排在一个令人困惑的迷宫中。（我多年来一直在拜访它们，偶尔还是会迷路。）这不是巧合。这些建筑相当准确地反映了风险投资业务。\n如果你在工作日去，你可能会看到成群的创始人在那里会见风险投资家。但大多数时候你不会看到任何人；喧嚣是你会用来描述氛围的最后一个词。参观沙山路提醒你，\u0026ldquo;肮脏\u0026quot;的反面是\u0026quot;干净\u0026rdquo;。\n卡斯特罗街 现在卡斯特罗街还是大学大道应该被认为是硅谷的中心是有争议的。10年前应该是大学大道。但帕洛阿尔托变得越来越昂贵。创业公司越来越多地位于山景城，而帕洛阿尔托是他们来会见投资者的地方。帕洛阿尔托有很多不同的咖啡馆，但在山景城有一个明显占主导地位的：Red Rock。\n谷歌 谷歌从山景城的第一个建筑扩展到周围的许多建筑。但因为建筑物是由不同人在不同时间建造的，这个地方没有典型大公司总部的无菌、封闭的感觉。不过它确实有自己的特色。你感觉到有什么事情正在发生。普遍的氛围隐约乌托邦；有很多普锐斯，和看起来像开这种车的人。\n除非你在那里认识人，否则你不能进入谷歌。如果你能进去，里面非常值得一看。帕洛阿尔托加利福尼亚大道尽头的Facebook也是如此，尽管外面没有什么可看的。\n天际线大道 天际线大道沿着圣克鲁斯山脉的山脊运行。一边是硅谷，另一边是海——因为它寒冷、多雾、港口很少，考虑到它的距离有多近，它在硅谷人生活中的作用出人意料地小。在天际线的一些部分，主要的树木是巨大的红杉，而在其他地方是活橡树。红杉意味着这些是海岸浓雾在晚上进来的地方；红杉从浓雾中凝结出雨水。MROSD管理着天际线沿线的一系列很棒的步行道。\n280号公路 硅谷有两条贯穿全境的公路：101号，相当丑陋，和280号，世界上最美丽的公路之一。当我可以选择时，我总是走280号。注意西边狭长的湖？那是圣安德烈亚斯断层。它沿着山脚运行，然后穿过波特拉谷上坡。MROSD的一条小路正好沿着断层运行。一串富裕的社区沿着280号西山麓延伸：伍德赛德、波特拉谷、洛斯阿尔托斯山、萨拉托加、洛斯加托斯。\nSLAC正好在沙山路南边一点穿过280号地下。再往南几英里是硅谷的\u0026quot;欢迎来到拉斯维加斯\u0026quot;标志的等价物：巨碟。\n注释\n我跳过了计算机历史博物馆，因为这是关于在哪里看硅谷本身的列表，而不是在哪里看它的文物。我也跳过了圣何塞。圣何塞自称是硅谷的首都，但当硅谷人使用\u0026quot;城市\u0026quot;这个词时，他们指的是旧金山。圣何塞是地图上的虚线。\n感谢萨姆·奥特曼、保罗·布赫海特、帕特里克·克里森和杰西卡·利文斯顿阅读本文的草稿。\n"
  },{
    "title": "垃圾邮件过滤计划",
    "url": "/paul_graham/essays_zh/spam/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n垃圾邮件过滤计划 2002年8月\n（本文描述了在我们构建的用于测试Arc的反垃圾邮件网络邮件阅读器中使用的垃圾邮件过滤技术。改进的算法在《更好的贝叶斯过滤》中有描述。）我认为可以阻止垃圾邮件，而基于内容的过滤器是实现这一目标的方法。垃圾邮件发送者的致命弱点是他们的消息。他们可以绕过你设置的任何其他障碍。至少到目前为止是这样。但他们必须传递他们的信息，无论是什么。如果我们能够编写识别他们消息的软件，就没有办法能够绕过它。\n对收件人来说，垃圾邮件很容易识别。如果你雇佣某人阅读你的邮件并丢弃垃圾邮件，他们会毫无困难地做到这一点。我们需要做多少工作，除了人工智能之外，来自动化这个过程？\n我认为我们将能够用相当简单的算法解决这个问题。事实上，我发现你可以使用不比单个词的垃圾邮件概率的贝叶斯组合更多的东西来相当好地过滤现在的垃圾邮件。使用一个稍微调整的（如下所述）贝叶斯过滤器，我们现在在每1000封垃圾邮件中遗漏少于5封，误报率为0。\n统计方法通常不是人们编写垃圾邮件过滤器时首先尝试的方法。大多数黑客的第一本能是尝试编写识别垃圾邮件单个特征的软件。你看着垃圾邮件，想，这些家伙竟然敢给我发送以\u0026quot;亲爱的朋友\u0026quot;开头的邮件，或者主题行全是大写并以八个感叹号结尾的邮件。我可以用大约一行代码过滤掉这些东西。\n于是你这样做了，开始时它有效。几个简单的规则会大量减少你收到的垃圾邮件。仅仅查找\u0026quot;点击\u0026quot;这个词就会捕获我垃圾邮件语料库中79.7%的邮件，误报率只有1.2%。\n在尝试统计方法之前，我花了大约六个月编写查找单个垃圾邮件特征的软件。我发现的是，识别最后百分之几的垃圾邮件变得非常困难，而且当我使过滤器更严格时，我得到了更多的误报。\n误报是被错误识别为垃圾邮件的无辜邮件。对于大多数用户来说，错过合法邮件比收到垃圾邮件糟糕一个数量级，因此产生误报的过滤器就像带有死亡风险的痤疮治疗。\n用户收到的垃圾邮件越多，他们注意到一封无辜邮件坐在垃圾邮件文件夹中的可能性就越小。奇怪的是，你的垃圾邮件过滤器越好，误报就变得越危险，因为当过滤器真的很好时，用户更可能忽略它们捕获的一切。\n我不知道为什么我这么长时间才尝试统计方法。我想这是因为我对试图自己识别垃圾邮件特征上了瘾，好像我在和垃圾邮件发送者玩某种竞争游戏。（非黑客通常不会意识到这一点，但大多数黑客非常有竞争心。）当我尝试统计分析时，我立即发现它比我聪明得多。它当然发现了像\u0026quot;virtumundo\u0026quot;和\u0026quot;teens\u0026quot;这样的术语是垃圾邮件的良好指标。但它还发现\u0026quot;per\u0026quot;和\u0026quot;FL\u0026quot;和\u0026quot;ff0000\u0026quot;是垃圾邮件的良好指标。事实上，\u0026ldquo;ff0000\u0026rdquo;（亮红色的html）结果证明和任何色情术语一样是垃圾邮件的良好指标。\n以下是我如何进行统计过滤的概述。我从一个垃圾邮件语料库和一个非垃圾邮件语料库开始。目前每个语料库中大约有4000条消息。我扫描每个语料库中每条消息的整个文本，包括标题、嵌入的html和javascript。我目前认为字母数字字符、破折号、撇号和美元符号是标记的一部分，其他一切都是标记分隔符。（这里可能还有改进的空间。）我忽略全是数字的标记，我也忽略html注释，甚至不将它们视为标记分隔符。\n我计算每个标记（目前忽略大小写）在每个语料库中出现的次数。在这个阶段，我最终得到两个大的哈希表，每个语料库一个，将标记映射到出现次数。\n接下来我创建第三个哈希表，这次将每个标记映射到包含它的电子邮件是垃圾邮件的概率，我计算如下[1]：(let ((g (* 2 (or (gethash word good) 0))) (b (or (gethash word bad) 0))) (unless (\u0026lt; (+ g b) 5) (max .01 (min .99 (float (/ (min 1 (/ b nbad)) (+ (min 1 (/ g ngood)) (min 1 (/ b nbad))))))))) 其中word是我们计算其概率的标记，good和bad是我在第一步创建的哈希表，ngood和nbad分别是非垃圾邮件和垃圾邮件的数量。\n我将此解释为代码以显示几个重要细节。我想稍微偏向概率以避免误报，通过反复试验，我发现一个好的方法是将good中的所有数字加倍。这有助于区分偶尔确实出现在合法邮件中的词和几乎从不出现的词。我只考虑总共出现超过五次的词（实际上，由于加倍，在非垃圾邮件中出现三次就足够了）。然后是关于给在一个语料库中出现但不在另一个语料库中出现的词分配什么概率的问题。同样通过反复试验，我选择了.01和.99。这里可能还有调整的空间，但随着语料库的增长，这种调整无论如何都会自动发生。\n特别细心的人会注意到，虽然为了计算出现次数的目的我将每个语料库视为一个长文本流，但在计算垃圾邮件概率时，我使用每个语料库中的邮件数量，而不是它们的组合长度作为除数。这增加了另一个轻微的偏向以防止误报。\n当新邮件到达时，它被扫描成标记，最有趣的十五个标记，其中有趣度是通过它们的垃圾邮件概率与中性的.5相差多远来衡量的，被用来计算邮件是垃圾邮件的概率。如果probs是十五个单独概率的列表，你这样计算组合概率：(let ((prod (apply #\u0026rsquo;* probs))) (/ prod (+ prod (apply #\u0026rsquo;* (mapcar #\u0026rsquo;(lambda (x) (- 1 x)) probs))))) 实践中出现的一个问题是给你从未见过的词分配什么概率，即没有出现在词概率哈希表中的词。我再次通过反复试验发现，.4是一个好数字。如果你以前从未见过一个词，它可能是相当无辜的；垃圾邮件词往往太熟悉了。\n",
    "description": "",
    "tags": ["垃圾邮件","过滤","算法","贝叶斯","电子邮件","编程","安全"],
    "categories": [],
    "content": "→ English Version\n垃圾邮件过滤计划 2002年8月\n（本文描述了在我们构建的用于测试Arc的反垃圾邮件网络邮件阅读器中使用的垃圾邮件过滤技术。改进的算法在《更好的贝叶斯过滤》中有描述。）我认为可以阻止垃圾邮件，而基于内容的过滤器是实现这一目标的方法。垃圾邮件发送者的致命弱点是他们的消息。他们可以绕过你设置的任何其他障碍。至少到目前为止是这样。但他们必须传递他们的信息，无论是什么。如果我们能够编写识别他们消息的软件，就没有办法能够绕过它。\n对收件人来说，垃圾邮件很容易识别。如果你雇佣某人阅读你的邮件并丢弃垃圾邮件，他们会毫无困难地做到这一点。我们需要做多少工作，除了人工智能之外，来自动化这个过程？\n我认为我们将能够用相当简单的算法解决这个问题。事实上，我发现你可以使用不比单个词的垃圾邮件概率的贝叶斯组合更多的东西来相当好地过滤现在的垃圾邮件。使用一个稍微调整的（如下所述）贝叶斯过滤器，我们现在在每1000封垃圾邮件中遗漏少于5封，误报率为0。\n统计方法通常不是人们编写垃圾邮件过滤器时首先尝试的方法。大多数黑客的第一本能是尝试编写识别垃圾邮件单个特征的软件。你看着垃圾邮件，想，这些家伙竟然敢给我发送以\u0026quot;亲爱的朋友\u0026quot;开头的邮件，或者主题行全是大写并以八个感叹号结尾的邮件。我可以用大约一行代码过滤掉这些东西。\n于是你这样做了，开始时它有效。几个简单的规则会大量减少你收到的垃圾邮件。仅仅查找\u0026quot;点击\u0026quot;这个词就会捕获我垃圾邮件语料库中79.7%的邮件，误报率只有1.2%。\n在尝试统计方法之前，我花了大约六个月编写查找单个垃圾邮件特征的软件。我发现的是，识别最后百分之几的垃圾邮件变得非常困难，而且当我使过滤器更严格时，我得到了更多的误报。\n误报是被错误识别为垃圾邮件的无辜邮件。对于大多数用户来说，错过合法邮件比收到垃圾邮件糟糕一个数量级，因此产生误报的过滤器就像带有死亡风险的痤疮治疗。\n用户收到的垃圾邮件越多，他们注意到一封无辜邮件坐在垃圾邮件文件夹中的可能性就越小。奇怪的是，你的垃圾邮件过滤器越好，误报就变得越危险，因为当过滤器真的很好时，用户更可能忽略它们捕获的一切。\n我不知道为什么我这么长时间才尝试统计方法。我想这是因为我对试图自己识别垃圾邮件特征上了瘾，好像我在和垃圾邮件发送者玩某种竞争游戏。（非黑客通常不会意识到这一点，但大多数黑客非常有竞争心。）当我尝试统计分析时，我立即发现它比我聪明得多。它当然发现了像\u0026quot;virtumundo\u0026quot;和\u0026quot;teens\u0026quot;这样的术语是垃圾邮件的良好指标。但它还发现\u0026quot;per\u0026quot;和\u0026quot;FL\u0026quot;和\u0026quot;ff0000\u0026quot;是垃圾邮件的良好指标。事实上，\u0026ldquo;ff0000\u0026rdquo;（亮红色的html）结果证明和任何色情术语一样是垃圾邮件的良好指标。\n以下是我如何进行统计过滤的概述。我从一个垃圾邮件语料库和一个非垃圾邮件语料库开始。目前每个语料库中大约有4000条消息。我扫描每个语料库中每条消息的整个文本，包括标题、嵌入的html和javascript。我目前认为字母数字字符、破折号、撇号和美元符号是标记的一部分，其他一切都是标记分隔符。（这里可能还有改进的空间。）我忽略全是数字的标记，我也忽略html注释，甚至不将它们视为标记分隔符。\n我计算每个标记（目前忽略大小写）在每个语料库中出现的次数。在这个阶段，我最终得到两个大的哈希表，每个语料库一个，将标记映射到出现次数。\n接下来我创建第三个哈希表，这次将每个标记映射到包含它的电子邮件是垃圾邮件的概率，我计算如下[1]：(let ((g (* 2 (or (gethash word good) 0))) (b (or (gethash word bad) 0))) (unless (\u0026lt; (+ g b) 5) (max .01 (min .99 (float (/ (min 1 (/ b nbad)) (+ (min 1 (/ g ngood)) (min 1 (/ b nbad))))))))) 其中word是我们计算其概率的标记，good和bad是我在第一步创建的哈希表，ngood和nbad分别是非垃圾邮件和垃圾邮件的数量。\n我将此解释为代码以显示几个重要细节。我想稍微偏向概率以避免误报，通过反复试验，我发现一个好的方法是将good中的所有数字加倍。这有助于区分偶尔确实出现在合法邮件中的词和几乎从不出现的词。我只考虑总共出现超过五次的词（实际上，由于加倍，在非垃圾邮件中出现三次就足够了）。然后是关于给在一个语料库中出现但不在另一个语料库中出现的词分配什么概率的问题。同样通过反复试验，我选择了.01和.99。这里可 …"
  },{
    "title": "城市与雄心",
    "url": "/paul_graham/essays_zh/cities/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n城市与雄心 2008年5月\n伟大的城市吸引有雄心的人。当你在一个城市里走动时，你能感觉到这一点。在一百种微妙的方式中，城市向你传递一个信息：你可以做得更多；你应该更加努力。\n令人惊讶的是这些信息有多么不同。纽约首先告诉你：你应该赚更多的钱。当然，还有其他信息。你应该更时髦。你应该更好看。但最清晰的信息是你应该更富有。\n我喜欢波士顿（或者更确切地说是剑桥）的原因是，那里的信息是：你应该更聪明。你真的应该开始读那些你一直打算读的书了。\n当你问一个城市传递什么信息时，有时你会得到令人惊讶的答案。尽管硅谷很尊重聪明才智，但硅谷传递的信息是：你应该更强大。\n这与纽约传递的信息并不完全相同。当然，权力在纽约也很重要，但纽约对即使是继承来的十亿美元也相当印象深刻。在硅谷，除了几个房地产经纪人外，没有人会在意。在硅谷重要的是你对世界有多大的影响力。人们关心拉里和谢尔盖的原因不是他们的财富，而是他们控制着谷歌，这几乎影响了每个人。\n_____ 城市传递的信息有多重要？从经验来看，答案似乎是：非常重要。你可能认为，如果你有足够强大的意志力去做伟大的事情，你就能够超越你的环境。你住的地方最多只能造成百分之几的差别。但如果你看看历史证据，似乎事情比这更重要。大多数做出伟大成就的人都聚集在几个地方，那些地方在当时就是做这类事情的地方。\n从我之前写过的内容中你可以看到城市有多强大：米兰人达芬奇的例子。你听说过的几乎所有15世纪意大利画家都来自佛罗伦萨，尽管米兰也一样大。佛罗伦萨的人在基因上并没有什么不同，所以你必须假设米兰也有一个与达芬奇天赋相当的人。他怎么样了？\n如果即使一个与达芬奇天赋相当的人也无法战胜环境的力量，你认为你能吗？\n我不能。我相当固执，但我不会试图对抗这种力量。我宁愿利用它。所以我花了很多时间思考住在哪里。\n我一直想象伯克利会是一个理想的地方——基本上就是剑桥加上好天气。但几年前我终于尝试住在那里时，结果并不是。伯克利传递的信息是：你应该生活得更好。伯克利的生活非常文明。这可能是北欧人在美国感到最自在的地方。但它并不充满雄心。\n回想起来，一个如此宜人的地方吸引那些首先关心生活质量的人并不令人惊讶。有好天气的剑桥，结果并不是剑桥。你在剑桥找到的人并不是偶然在那里生活的。你必须做出牺牲才能住在那里。那里昂贵且有些肮脏，天气经常不好。所以你在剑桥找到的那种人是想要和最聪明的人住在一起的人，即使这意味着生活在一个昂贵、肮脏、天气不好的地方。\n在写这篇文章的时候，剑桥似乎是世界的知识之都。我意识到这似乎是一个荒谬的说法。使之真实的是，在其他地方声称这一点更加荒谬。从雄心勃勃的学生的流动来看，美国大学目前似乎是最好的。哪个美国城市有更强的主张？纽约？有相当多的聪明人，但被更多穿着西装的尼安德特人稀释了。湾区也有很多的聪明人，但同样被稀释了；那里有两所伟大的大学，但它们相距甚远。哈佛和麻省理工按照西海岸的标准实际上是相邻的，周围还有大约20所其他学院和大学。\n因此，剑桥给人的感觉是一个主要产业是思想的小镇，而纽约的是金融，硅谷的是创业公司。\n_____ 当我们谈论城市时，我们真正谈论的是人的集合。长期以来，城市是唯一的大型人口集合，所以你可以互换使用这两个概念。但从我提到的例子中我们可以看到事情发生了多大的变化。纽约是一个典型的伟大城市。但剑桥只是城市的一部分，而硅谷甚至都不是。（圣何塞并不像它有时声称的那样是硅谷的首都。它只是硅谷一端的178平方英里。）\n也许互联网会进一步改变事情。也许有一天你所属的最重要的社区将是一个虚拟社区，你住在哪里就不重要了。但我不会打赌。物理世界带宽很高，城市向你传递信息的一些方式相当微妙。\n每年春天回到剑桥最令人兴奋的事情之一是在黄昏时走在街道上，那时你可以看到房子里面。当你在晚上走过帕洛阿尔托时，你只看到电视的蓝色光芒。在剑桥，你看到的是装满了有希望的书架。帕洛阿尔托在1960年可能很像剑桥，但现在你永远不会猜到附近有一所大学。现在它只是硅谷较富裕的街区之一。\n城市主要通过偶然的方式与你对话——通过窗户看到的东西，通过无意中听到的对话。这不是你必须寻找的东西，而是你无法关闭的东西。住在剑桥的职业危害之一是听到那些在陈述句中使用疑问语调的人的对话。但平均而言，我选择剑桥的对话而不是纽约或硅谷的对话。\n一个90年代末搬到硅谷的朋友说，住在那里最糟糕的是偷听质量低下。当时我以为她是在故意标新立异。当然，偷听别人很有趣，但高质量的偷听真的重要到会影响你选择住在哪里吗？现在我明白她的意思了。你无意中听到的对话告诉你你周围是哪种人。\n_____ 无论你多么坚定，你很难不受周围人的影响。问题不在于你做城市期望你做的事，而在于当你周围没有人关心和你同样的事情时，你会感到气馁。\n鼓励和气馁之间存在着像赚钱和亏钱一样的不平衡。大多数人高估负数金额的钱：他们会更努力地工作以避免损失一美元，而不是赚一美元。同样，尽管有足够强大的人可以抵抗仅仅因为在那里人们应该做的事情就去做，但很少有人足够强大，可以在周围没有人关心的事情上继续工作。\n因为野心在某种程度上是不相容的，而钦佩是一个零和游戏，每个城市倾向于专注于一种类型的野心。剑桥是知识之都的原因不仅是因为那里有聪明人的集中，而是因为那里的人们没有更关心的事情。纽约和湾区的教授是二等公民——直到他们分别开始对冲基金或创业公司。\n这回答了自泡沫以来纽约人一直在思考的一个问题：纽约能否发展成与硅谷匹敌的创业中心。一个不太可能的原因是，在纽约创业的人会感觉像个二等公民。纽约人已经更钦佩别的东西了。\n从长远来看，这对纽约可能是一件坏事。一项重要的新技术的力量最终确实会转化为金钱。因此，比硅谷更关心金钱而不是权力，纽约认识到了同样的事情，但更慢。事实上，它在自己的游戏中一直在输给硅谷：《福布斯》400中纽约与加州居民的比例从1982年首次发布时的1.45（81:56）下降到2007年的0.83（73:88）。\n_____ 并非所有城市都传递信息。只有那些是某种雄心中心的城市才传递。而且如果不生活在那里，很难准确说出一个城市传递什么信息。我理解纽约、剑桥和硅谷的信息，因为我在这三个地方都生活了几年。华盛顿特区和洛杉矶似乎也传递信息，但我在任何一个地方都没有待足够长的时间来确定它们是什么。\n洛杉矶的重要事情似乎是名声。有一个当前最受欢迎的人的A名单，最受钦佩的是在名单上，或者是与名单上的人交朋友。在这之下，信息很像纽约的，尽管可能更强调外表吸引力。\n在华盛顿特区，信息似乎是最重要的是你认识谁。你想成为内部人士。在实践中，这似乎与洛杉矶很像。有一个A名单，你想在名单上或接近名单上的人。唯一的区别是A名单如何选择。即使这一点也没有太大不同。\n目前，旧金山的信息似乎与伯克利的相同：你应该生活得更好。但如果足够多的创业公司选择旧金山而不是硅谷，这将会改变。在泡沫时期，这是失败的预测——一个自我放纵的选择，比如购买昂贵的办公家具。即使现在，当创业公司选择旧金山时我还是很怀疑。但如果足够多的好公司这样做，它就不再是自我放纵的选择，因为硅谷的重心将转移到那里。\n我没有找到像剑桥这样的知识雄心中心。牛津和剑桥（英国）感觉像伊萨卡或汉诺威：信息在那里，但不够强大。\n巴黎曾经是伟大的知识中心。如果你在1300年去那里，它可能传递了剑桥现在的信息。但我去年尝试在那里住了一段时间，居民的抱负不是知识方面的。巴黎现在传递的信息是：有风格地做事。实际上，我喜欢这一点。巴黎是我住过的唯一一个人们真正关心艺术的城市。在美国只有少数富人购买原创艺术，即使那些更老练的人也很少超越以艺术家的品牌名来判断艺术。但在黄昏时透过窗户看，你可以看到那里的人们实际上关心画的外观。视觉上，巴黎有我所知道的最好的偷听。\n我从城市中听到的还有一个信息：在伦敦，你仍然（勉强）能听到一个人应该更高贵的信息。如果你注意听，你也可以在巴黎、纽约和波士顿听到。但这个信息在任何地方都非常微弱。100年前它会很强大，但现在如果我没有故意调到那个波长看看是否还有信号，我可能根本不会注意到。\n_____ 到目前为止，我从城市收集到的完整信息列表是：财富、风格、时髦、外表吸引力、名声、政治权力、经济权力、智力、社会阶层和生活质量。\n我对这个清单的直接反应是它让我有点不舒服。我一直认为雄心是件好事，但我现在意识到那是因为我一直隐含地理解它是指在我关心的领域的雄心。当你列出有雄心的人有雄心的一切事情时，它并不那么漂亮。\n仔细观察，我看到清单上有几件在历史背景下令人惊讶的事情。例如，外表吸引力100年前不会在那里（尽管2400年前可能在）。对女性来说它一直很重要，但在20世纪后期，它似乎对男性也开始重要了。我不确定为什么——可能是女性力量增加、演员作为模特影响力增加，以及现在太多人在办公室工作的某种组合：你不能通过穿太华丽不适合在工厂穿的衣服来炫耀，所以你必须用你的身体来炫耀。\n时髦是100年前你不会在清单上看到的另一件事。或者不会？它的意思是知道什么是什么。所以也许它只是简单地取代了社会阶层中由\u0026quot;精通\u0026quot;组成的部分。这可以解释为什么时髦在伦敦似乎特别受钦佩：它是传统的英国人对只有内部人士才能理解的神秘代码喜爱的第二版。\n经济权力100年前会在清单上，但我们对它的理解正在改变。它过去意味着控制庞大的人力物力资源。但现在它越来越多的意味着指导技术进程的能力，而一些能够做到这一点的人甚至并不富有——例如，重要开源项目的领导者。过去的工业巨头有实验室，里面充满了聪明人为他们开发新技术。新一代的人就是那些人本身。\n随着这种力量获得更多关注，另一个正在从清单上消失：社会阶层。我认为这两种变化是相关的。经济权力、财富和社会阶级只是同一事物在不同生命阶段的不同名称：经济权力转化为财富，财富转化为社会阶级。所以钦佩的焦点只是向上游转移。\n_____ 任何想做伟大工作的人都必须住在伟大的城市吗？不；所有伟大的城市都激发某种雄心，但它们并不是唯一这样做的地方。对于某些类型的工作，你所需要的只是一些有才华的同事。\n城市提供的是观众，和同行的渠道。在数学或物理等领域，这些并不那么重要，因为除了你的同行，没有观众重要，而且判断能力足够直接，招聘和录取委员会可以可靠地做到。在数学或物理这样的领域，你所需要的只是一个有合适同事的部门。它可以在任何地方——例如，新墨西哥州的洛斯阿拉莫斯。\n在艺术、写作或技术等领域，更大的环境很重要。在这些领域中，最好的从业者并没有方便地集中在几个顶尖的大学部门和研究实验室中——部分是因为才能更难判断，部分是因为人们为这些东西付钱，所以一个人不需要依靠教学或研究资金来支持自己。正是在这些更混乱的领域中，身处伟大城市最有帮助：你需要鼓励，感觉周围的人关心你所做的工作，而且因为你必须自己寻找同行，你需要伟大城市更大的吸收机制。\n你不必一生都住在伟大的城市才能从中受益。关键年份似乎是你职业生涯的早期和中期。显然，你不必在伟大的城市长大。你在一个城市上大学似乎也不重要。对大多数大学生来说，几千人的世界似乎足够大了。另外，在大学里你还没有面对最困难的工作——发现要解决的新问题。\n当你进入下一个更困难的阶段时，身处一个你能找到同行和鼓励的地方最有帮助。一旦你找到了两者，你似乎就可以离开，如果你想的话。印象派展示了典型的模式：他们出生在法国各地（毕沙罗出生在加勒比海），死在法国各地，但定义他们的是他们在巴黎一起度过的岁月。\n_____ 除非你确定你想做什么以及哪里是领先中心，否则你最好的选择可能是在年轻时尝试生活在几个地方。你永远不知道一个城市传递什么信息，直到你住在那里，或者它是否仍然传递信息。通常你的信息会是错误的：我25岁时尝试住在佛罗伦萨，认为它会是艺术中心，但结果我晚了450年。\n即使一个城市仍然是雄心的活跃中心，在你听到它的信息之前，你也不会确定它是否会与你产生共鸣。当我搬到纽约时，起初我非常兴奋。那是个令人兴奋的地方。所以我花了相当长的时间才意识到我只是不像那里的人。我一直在寻找纽约的剑桥。结果它远远地在上城区：乘飞机一小时的上城区。\n有些人在16岁时就知道他们要做什么工作，但在大多数有雄心的孩子中，雄心似乎先于任何具体要雄心的事物。他们知道他们想做伟大的事情。他们只是还没有决定是要成为摇滚明星还是脑外科医生。这没什么错。但这意味着如果你有这种最常见的雄心类型，你可能必须通过反复试验来弄清楚住在哪里。你可能必须找到让你感觉像家的城市，才能知道你有什么样的雄心。\n注释 [1] 这是大学不受政府控制的好处之一。当政府决定如何分配资源时，政治交易导致事物在地理上分散。没有中央政府会把其最好的两所大学放在同一个城镇，除非它是首都（这会引起其他问题）。但学者似乎和其他领域的人一样喜欢聚集在一起，当给予自由时，他们从中获得同样的好处。\n[2] 帕洛阿尔托还有一些老教授，但他们一个接一个地去世，他们的房子被开发商变成豪宅并出售给业务发展副总裁。\n[3] 你读过多少次关于创业创始人在公司起飞后继续过简朴生活的文章？他们继续穿牛仔裤和T恤，开研究生时的旧车，等等？如果你在纽约这样做，人们会把你当垃圾对待。如果你穿着牛仔裤和T恤走进旧金山的一家高档餐厅，他们会对你很好；谁知道你可能是什么人？在纽约不会。\n一个城市作为技术中心的潜力的一个标志是仍然要求男士穿西装的餐厅数量。根据Zagat\u0026rsquo;s的调查，旧金山、洛杉矶、波士顿或西雅图没有，华盛顿特区有4家，芝加哥有6家，伦敦有8家，纽约有13家，巴黎有20家。\n（Zagat\u0026rsquo;s将旧金山的丽思卡尔顿餐厅列为要求穿西装，但我无法相信，所以我打电话检查，事实上他们不要求。显然整个西海岸只剩下一家餐厅仍然要求穿西装：纳帕谷的法国洗衣店。）\n[4] 想法比经济权力上游一步，所以可以想象，像剑桥这样的知识中心有一天会拥有对硅谷的优势，就像硅谷对纽约的优势一样。\n目前这似乎不太可能；如果说有什么的话，波士顿正在越来越落后。我甚至提到这种可能性的唯一原因是，从想法到创业公司的路径最近变得越来越顺畅。现在对几个没有商业经验的黑客来说，创办一家创业公司比10年前容易得多。如果再推算20年，也许权力的平衡会开始转移。我不会打赌它会，但我也不会打赌它不会。\n[5] 如果巴黎是人们最关心艺术的地方，为什么纽约是艺术业的重心？因为在20世纪，艺术作为品牌与艺术作为物品分开了。纽约是最富有的买家所在的地方，但他们从艺术中要求的只是品牌，而既然你可以基于任何具有足够可识别风格的东西来建立品牌，你也可以使用当地的东西。\n感谢Trevor Blackwell、Sarah Harlin、Jessica Livingston、Jackie McDonough、Robert Morris和David Sloo阅读本文的草稿。\n",
    "description": "",
    "tags": ["城市","雄心","环境","成功","地点","文化","分析"],
    "categories": [],
    "content": "→ English Version\n城市与雄心 2008年5月\n伟大的城市吸引有雄心的人。当你在一个城市里走动时，你能感觉到这一点。在一百种微妙的方式中，城市向你传递一个信息：你可以做得更多；你应该更加努力。\n令人惊讶的是这些信息有多么不同。纽约首先告诉你：你应该赚更多的钱。当然，还有其他信息。你应该更时髦。你应该更好看。但最清晰的信息是你应该更富有。\n我喜欢波士顿（或者更确切地说是剑桥）的原因是，那里的信息是：你应该更聪明。你真的应该开始读那些你一直打算读的书了。\n当你问一个城市传递什么信息时，有时你会得到令人惊讶的答案。尽管硅谷很尊重聪明才智，但硅谷传递的信息是：你应该更强大。\n这与纽约传递的信息并不完全相同。当然，权力在纽约也很重要，但纽约对即使是继承来的十亿美元也相当印象深刻。在硅谷，除了几个房地产经纪人外，没有人会在意。在硅谷重要的是你对世界有多大的影响力。人们关心拉里和谢尔盖的原因不是他们的财富，而是他们控制着谷歌，这几乎影响了每个人。\n_____ 城市传递的信息有多重要？从经验来看，答案似乎是：非常重要。你可能认为，如果你有足够强大的意志力去做伟大的事情，你就能够超越你的环境。你住的地方最多只能造成百分之几的差别。但如果你看看历史证据，似乎事情比这更重要。大多数做出伟大成就的人都聚集在几个地方，那些地方在当时就是做这类事情的地方。\n从我之前写过的内容中你可以看到城市有多强大：米兰人达芬奇的例子。你听说过的几乎所有15世纪意大利画家都来自佛罗伦萨，尽管米兰也一样大。佛罗伦萨的人在基因上并没有什么不同，所以你必须假设米兰也有一个与达芬奇天赋相当的人。他怎么样了？\n如果即使一个与达芬奇天赋相当的人也无法战胜环境的力量，你认为你能吗？\n我不能。我相当固执，但我不会试图对抗这种力量。我宁愿利用它。所以我花了很多时间思考住在哪里。\n我一直想象伯克利会是一个理想的地方——基本上就是剑桥加上好天气。但几年前我终于尝试住在那里时，结果并不是。伯克利传递的信息是：你应该生活得更好。伯克利的生活非常文明。这可能是北欧人在美国感到最自在的地方。但它并不充满雄心。\n回想起来，一个如此宜人的地方吸引那些首先关心生活质量的人并不令人惊讶。有好天气的剑桥，结果并不是剑桥。你在剑桥找到的人并不是偶然在那里生活的。你必须做出牺牲才能住在那里。那里昂贵且有些肮脏，天气经常不好。所以你在剑桥找到的那种人是想要和最聪明的人住在一起的人，即使这意味着生活在一个昂贵、肮脏、天气不好的地方。\n在写这篇文章的时候，剑桥似乎是世界的知识之都。我意识到这似乎是一个荒谬的说法。使之真实的是，在其他地方声称这一点更加荒谬。从雄心勃勃的学生的流动来看，美国大学目前似乎是最好的。哪个美国城市有更强的主张？纽约？有相当多的聪明人，但被更多穿着西装的尼安德特人稀释了。湾区也有很多的聪明人，但同样被稀释了；那里有两所伟大的大学，但它们相距甚远。哈佛和麻省理工按照西海岸的标准实际上是相邻的，周围还有大约20所其他学院和大学。\n因此，剑桥给人的感觉是一个主要产业是思想的小镇，而纽约的是金融，硅谷的是创业公司。\n_____ 当我们谈论城市时，我们真正谈论的是人的集合。长期以来，城市是唯一的大型人口集合，所以你可以互换使用这两个概念。但从我提到的例子中我们可以看到事情发生了多大的变化。纽约是一个典型的伟大城市。但剑桥只是城市的一部分，而硅谷甚至都不是。（圣何塞并不像它有时声称的那样是硅谷的首都。它只是硅谷一端的178平方英里。）\n也许互联网会进一步改变事情。也许有一天你所属的最重要的社区将是一个虚拟社区，你住在哪里就不重要了。但我不会打赌。物理世界带宽很高，城市向你传递信息的一些方式相当微妙。\n每年春天回到剑桥最令人兴奋的事情之一是在黄昏时走在街道上，那时你可以看到房子里面。当你在晚上走过帕洛阿尔托时，你只看到电视的蓝色光芒。在剑桥，你看到的是装满了有希望的书架。帕洛阿尔托在1960年可能很像剑桥，但现在你永远不会猜到附近有一所大学。现在它只是硅谷较富裕的街区之一。\n城市主要通过偶然的方式与你对话——通过窗户看到的东西，通过无意中听到的对话。这不是你必须寻找的东西，而是你无法关闭的东西。住在剑桥的职业危害之一是听到那些在陈述句中使用疑问语调的人的对话。但平均而言，我选择剑桥的对话而不是纽约或硅谷的对话。\n一个90年代末搬到硅谷的朋友说，住在那里最糟糕的是偷听质量低下。当时我以为她是在故意标新立异。当然，偷听别人很有趣，但高质量的偷听真的重要到会影响你选择住在哪里吗？现在我明白她的意思了。你无意中听到的对话告诉你你周围是哪种人。\n_____ 无论你多么坚定，你很难不受周围人的影响。问题不在于你做城市期望你做的事，而在于当你周围没有人关心和你同样的事情时，你会感到气馁。\n鼓励和气馁之间存在着 …"
  },{
    "title": "基于Web应用的Lisp",
    "url": "/paul_graham/essays_zh/lwba/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n基于Web应用的Lisp 在《击败平均值》的链接被发布在slashdot上之后，一些读者希望更详细地了解我们在Viaweb中使用Lisp获得的具体技术优势。对于那些感兴趣的人，以下是我2001年4月在剑桥BBN实验室的演讲节选。\nBBN演讲节选（ASCII）\n",
    "description": "",
    "tags": ["lisp","web","编程","软件","技术","viaweb","创业"],
    "categories": [],
    "content": "→ English Version\n基于Web应用的Lisp 在《击败平均值》的链接被发布在slashdot上之后，一些读者希望更详细地了解我们在Viaweb中使用Lisp获得的具体技术优势。对于那些感兴趣的人，以下是我2001年4月在剑桥BBN实验室的演讲节选。\nBBN演讲节选（ASCII）\n"
  },{
    "title": "复制你喜欢的东西",
    "url": "/paul_graham/essays_zh/copy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n复制你喜欢的东西 2006年7月\n当我在高中时，我花了很多时间模仿糟糕的作家。我们在英语课上学习的大多是小说，所以我认为那是写作的最高形式。\n错误一。\n似乎最受推崇的故事是那些人们以复杂方式受苦的故事。任何有趣或引人入胜的东西都理所当然地值得怀疑，除非它古老到难以理解，比如莎士比亚或乔叟。\n错误二。\n理想的媒介似乎是短篇小说，我后来了解到它生命周期相当短暂，大致与杂志出版的高峰期重合。但由于它们的大小使它们非常适合在高中课堂使用，我们读了很多，这给我们留下了短篇小说正在蓬勃发展的印象。\n错误三。\n因为它们如此之短，所以真的不需要发生什么；你只能展示一个随机截断的生活片段，这被认为是先进的。\n错误四。\n结果是我写了很多故事，其中什么都没发生，只是有人以看似深刻的方式不开心。\n大学的大部分时间我是哲学专业的。我对发表在哲学期刊上的论文印象很深。它们的排版如此精美，语气令人着迷——时而随意，时而技术到缓冲区溢出。一个人会走在街上，突然模态性本身就会出现在他面前。我从没有真正理解这些论文，但我想我以后会抽时间更仔细地重读它们。在此期间，我尽力模仿它们。我现在可以看到，这是一个注定失败的努力，因为它们并没有真正说什么。例如，没有哲学家反驳过另一个，因为没有人说过足够确定的东西来反驳。不用说，我的模仿也没有说什么。\n在研究生院，我仍然在浪费时间模仿错误的东西。当时有一种时髦的程序叫做专家系统，其核心是叫做推理引擎的东西。我看了看这些东西的功能，想\u0026quot;我可以用一千行代码写出那个。\u0026ldquo;然而，著名教授们正在写关于它们的书，创业公司正在以年薪一份的价格销售它们。多么好的机会，我想；这些令人印象深刻的东西对我来说似乎很容易；我一定很敏锐。错了。这只是一个时尚。教授们写的关于专家系统的书现在被忽略了。它们甚至不在通向任何有趣事物的道路上。而为它们支付如此之多费用的客户很大程度上是那些为螺丝刀和马桶座支付数千美元的政府机构。\n如何避免模仿错误的东西？只模仿你真正喜欢的东西。这在所有三种情况下都会救了我。我不喜欢我们在英语课上必须读的短篇小说；我从哲学论文中学不到任何东西；我自己没有使用专家系统。我相信这些东西是好的，因为它们受到钦佩。\n很难将你喜欢的东西和你印象深刻的东西分开。一个技巧是忽略包装。每当我在博物馆看到一幅令人印象深刻的画时，我会问自己：如果我在车库拍卖中发现它，脏兮兮的，没有画框，不知道是谁画的，我会为它付多少钱？如果你在博物馆里尝试这个实验，你会发现你会得到一些真正令人震惊的结果。不要因为这个数据点是异常值就忽略它。\n找出你喜欢的东西的另一种方法是看看你作为有罪恶感的乐趣喜欢什么。人们喜欢的很多东西，特别是如果他们年轻而有雄心，他们喜欢主要是因为喜欢它们的美德感。99%读《尤利西斯》的人都在想\u0026quot;我正在读《尤利西斯》\u0026quot;。有罪恶感的乐趣至少是纯粹的。当你感觉不够有美德时，你读什么？当你读一本书时，你感到悲伤只剩下半本，而不是因为你已经读了一半而印象深刻，那是什么？那是你真正喜欢的东西。\n即使当你发现真正好的东西来模仿时，还有另一个陷阱需要避免。小心地模仿使它们变得好的东西，而不是它们的缺陷。很容易被引入模仿缺陷，因为它们更容易看到，当然也更容易模仿。例如，十八和十九世纪的大多数画家使用棕色调的颜色。他们是在模仿文艺复兴时期的伟大画家，那些画在当时已经因为灰尘而变成棕色。那些画后来被清理了，显示出鲜艳的色彩；当然，他们的模仿者仍然是棕色的。\n顺便说一句，是绘画治愈了我模仿错误东西的习惯。研究生院读到一半时，我决定尝试成为一名画家，艺术世界如此明显地腐败，以至于它挣断了轻信的缰绳。这些人使哲学教授看起来像数学家一样一丝不苟。显然，做好工作 xor 成为内部人士的选择如此明显，我被迫看到这种区别。在某种程度上，几乎每个领域都存在这种区别，但直到那时我设法避免面对它。\n这是我从绘画中学到的最有价值的东西之一：你必须自己弄清楚什么是好的。你不能信任权威。他们在这件事上会对你说谎。\n",
    "description": "",
    "tags": ["模仿","学习","写作","艺术","哲学","品味","原创性"],
    "categories": [],
    "content": "→ English Version\n复制你喜欢的东西 2006年7月\n当我在高中时，我花了很多时间模仿糟糕的作家。我们在英语课上学习的大多是小说，所以我认为那是写作的最高形式。\n错误一。\n似乎最受推崇的故事是那些人们以复杂方式受苦的故事。任何有趣或引人入胜的东西都理所当然地值得怀疑，除非它古老到难以理解，比如莎士比亚或乔叟。\n错误二。\n理想的媒介似乎是短篇小说，我后来了解到它生命周期相当短暂，大致与杂志出版的高峰期重合。但由于它们的大小使它们非常适合在高中课堂使用，我们读了很多，这给我们留下了短篇小说正在蓬勃发展的印象。\n错误三。\n因为它们如此之短，所以真的不需要发生什么；你只能展示一个随机截断的生活片段，这被认为是先进的。\n错误四。\n结果是我写了很多故事，其中什么都没发生，只是有人以看似深刻的方式不开心。\n大学的大部分时间我是哲学专业的。我对发表在哲学期刊上的论文印象很深。它们的排版如此精美，语气令人着迷——时而随意，时而技术到缓冲区溢出。一个人会走在街上，突然模态性本身就会出现在他面前。我从没有真正理解这些论文，但我想我以后会抽时间更仔细地重读它们。在此期间，我尽力模仿它们。我现在可以看到，这是一个注定失败的努力，因为它们并没有真正说什么。例如，没有哲学家反驳过另一个，因为没有人说过足够确定的东西来反驳。不用说，我的模仿也没有说什么。\n在研究生院，我仍然在浪费时间模仿错误的东西。当时有一种时髦的程序叫做专家系统，其核心是叫做推理引擎的东西。我看了看这些东西的功能，想\u0026quot;我可以用一千行代码写出那个。\u0026ldquo;然而，著名教授们正在写关于它们的书，创业公司正在以年薪一份的价格销售它们。多么好的机会，我想；这些令人印象深刻的东西对我来说似乎很容易；我一定很敏锐。错了。这只是一个时尚。教授们写的关于专家系统的书现在被忽略了。它们甚至不在通向任何有趣事物的道路上。而为它们支付如此之多费用的客户很大程度上是那些为螺丝刀和马桶座支付数千美元的政府机构。\n如何避免模仿错误的东西？只模仿你真正喜欢的东西。这在所有三种情况下都会救了我。我不喜欢我们在英语课上必须读的短篇小说；我从哲学论文中学不到任何东西；我自己没有使用专家系统。我相信这些东西是好的，因为它们受到钦佩。\n很难将你喜欢的东西和你印象深刻的东西分开。一个技巧是忽略包装。每当我在博物馆看到一幅令人印象深刻的画时，我会问自己：如果我在车库拍卖中发现它，脏兮兮的，没有画框，不知道是谁画的，我会为它付多少钱？如果你在博物馆里尝试这个实验，你会发现你会得到一些真正令人震惊的结果。不要因为这个数据点是异常值就忽略它。\n找出你喜欢的东西的另一种方法是看看你作为有罪恶感的乐趣喜欢什么。人们喜欢的很多东西，特别是如果他们年轻而有雄心，他们喜欢主要是因为喜欢它们的美德感。99%读《尤利西斯》的人都在想\u0026quot;我正在读《尤利西斯》\u0026quot;。有罪恶感的乐趣至少是纯粹的。当你感觉不够有美德时，你读什么？当你读一本书时，你感到悲伤只剩下半本，而不是因为你已经读了一半而印象深刻，那是什么？那是你真正喜欢的东西。\n即使当你发现真正好的东西来模仿时，还有另一个陷阱需要避免。小心地模仿使它们变得好的东西，而不是它们的缺陷。很容易被引入模仿缺陷，因为它们更容易看到，当然也更容易模仿。例如，十八和十九世纪的大多数画家使用棕色调的颜色。他们是在模仿文艺复兴时期的伟大画家，那些画在当时已经因为灰尘而变成棕色。那些画后来被清理了，显示出鲜艳的色彩；当然，他们的模仿者仍然是棕色的。\n顺便说一句，是绘画治愈了我模仿错误东西的习惯。研究生院读到一半时，我决定尝试成为一名画家，艺术世界如此明显地腐败，以至于它挣断了轻信的缰绳。这些人使哲学教授看起来像数学家一样一丝不苟。显然，做好工作 xor 成为内部人士的选择如此明显，我被迫看到这种区别。在某种程度上，几乎每个领域都存在这种区别，但直到那时我设法避免面对它。\n这是我从绘画中学到的最有价值的东西之一：你必须自己弄清楚什么是好的。你不能信任权威。他们在这件事上会对你说谎。\n"
  },{
    "title": "外星真理",
    "url": "/paul_graham/essays_zh/alien/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n外星真理 2022年10月\n如果宇宙中其他地方存在智能生物，他们会与我们共享某些真理。数学真理将是相同的，因为它们根据定义为真。物理真理也是如此；碳原子的质量在他们的星球上将是相同的。但我认为除了数学和物理的真理之外，我们还会与外星人分享其他真理，思考这些可能是什么是值得的。\n例如，我认为我们会分享这样的原则：测试某个假设的受控实验使我们有理由按比例增加对它的信念。对外星人来说，通过练习可以变得更擅长某事，这似乎也是相当可能的。我们可能会分享奥卡姆剃刀。这些想法中似乎没有任何特定于人类的东西。\n当然，我们只能猜测。我们不能确定智能生命可能采取什么形式。我在这里的目标也不是探索这个问题，尽管它很有趣。外星真理概念的重点不是它给我们一种推测智能生命可能采取什么形式的方式，而是它为真理提供了一个门槛，或者更精确地说是一个目标。如果你试图找到除了数学或物理之外的最普遍的真理，那么大概它们就是我们与其他形式的智能生命共享的那些。\n如果我们倾向于慷慨，外星真理将最好地作为一种启发式方法。如果一个想法可能合理地与外星人相关，那就足够了。例如，正义。我不想打赌所有智能生物都会理解正义的概念，但我也不会打赌反对它。\n外星真理的概念与Erdos的上帝之书的概念有关。他过去常描述一个特别好的证明是在上帝之书中，这意味着（a）足够好的证明更多是被发现而不是被发明，（b）它的优点会被普遍认可。如果有外星真理这样的东西，那么上帝之书中除了数学还有更多内容。\n我们应该称什么为寻找外星真理？显而易见的选择是\u0026quot;哲学\u0026quot;。无论哲学还包括什么，它可能都应该包括这个。我相当确定亚里士多德会这么认为。人们甚至可以说，寻找外星真理如果不是对哲学的准确描述，也是对它的一个很好的定义。也就是说，这是自称哲学家的人应该做的事情，无论他们现在是否在这样做。但我并不执着于此；做这件事才是重要的，而不是我们称它为什么。\n有一天，我们可能会以人工智能的形式在我们中间拥有类似外星生命的东西。而这反过来可能让我们能够精确地确定智能生物必须与我们分享什么真理。例如，我们可能会发现，不可能创造出我们不认为智能却不使用奥卡姆剃刀的东西。有一天我们甚至可能能够证明这一点。但是，虽然这种研究会非常有趣，但这对我们的目的不是必要的，甚至不是同一领域；哲学的目标，如果我们要这么称呼的话，将是看看我们使用外星真理作为目标能想出什么想法，而不是说它的门槛确切在哪里。这两个问题有一天可能会趋同，但它们会从相当不同的方向趋同，在它们趋同之前，限制自己只思考我们确定会是外星真理的事情会过于约束。特别是因为这可能是那些最佳猜测结果证明出奇接近最优的领域之一。（让我们看看这个是否如此。）\n无论我们称它为什么，发现外星真理的尝试都将是一项值得的努力。而且奇怪的是，这本身可能就是一个外星真理。\n感谢Trevor Blackwell、Greg Brockman、Patrick Collison、Robert Morris和Michael Nielsen阅读本文草稿。\n",
    "description": "",
    "tags": ["哲学","真理","智能","外星人","人工智能"],
    "categories": [],
    "content": "→ English Version\n外星真理 2022年10月\n如果宇宙中其他地方存在智能生物，他们会与我们共享某些真理。数学真理将是相同的，因为它们根据定义为真。物理真理也是如此；碳原子的质量在他们的星球上将是相同的。但我认为除了数学和物理的真理之外，我们还会与外星人分享其他真理，思考这些可能是什么是值得的。\n例如，我认为我们会分享这样的原则：测试某个假设的受控实验使我们有理由按比例增加对它的信念。对外星人来说，通过练习可以变得更擅长某事，这似乎也是相当可能的。我们可能会分享奥卡姆剃刀。这些想法中似乎没有任何特定于人类的东西。\n当然，我们只能猜测。我们不能确定智能生命可能采取什么形式。我在这里的目标也不是探索这个问题，尽管它很有趣。外星真理概念的重点不是它给我们一种推测智能生命可能采取什么形式的方式，而是它为真理提供了一个门槛，或者更精确地说是一个目标。如果你试图找到除了数学或物理之外的最普遍的真理，那么大概它们就是我们与其他形式的智能生命共享的那些。\n如果我们倾向于慷慨，外星真理将最好地作为一种启发式方法。如果一个想法可能合理地与外星人相关，那就足够了。例如，正义。我不想打赌所有智能生物都会理解正义的概念，但我也不会打赌反对它。\n外星真理的概念与Erdos的上帝之书的概念有关。他过去常描述一个特别好的证明是在上帝之书中，这意味着（a）足够好的证明更多是被发现而不是被发明，（b）它的优点会被普遍认可。如果有外星真理这样的东西，那么上帝之书中除了数学还有更多内容。\n我们应该称什么为寻找外星真理？显而易见的选择是\u0026quot;哲学\u0026quot;。无论哲学还包括什么，它可能都应该包括这个。我相当确定亚里士多德会这么认为。人们甚至可以说，寻找外星真理如果不是对哲学的准确描述，也是对它的一个很好的定义。也就是说，这是自称哲学家的人应该做的事情，无论他们现在是否在这样做。但我并不执着于此；做这件事才是重要的，而不是我们称它为什么。\n有一天，我们可能会以人工智能的形式在我们中间拥有类似外星生命的东西。而这反过来可能让我们能够精确地确定智能生物必须与我们分享什么真理。例如，我们可能会发现，不可能创造出我们不认为智能却不使用奥卡姆剃刀的东西。有一天我们甚至可能能够证明这一点。但是，虽然这种研究会非常有趣，但这对我们的目的不是必要的，甚至不是同一领域；哲学的目标，如果我们要这么称呼的话，将是看看我们使用外星真理作为目标能想出什么想法，而不是说它的门槛确切在哪里。这两个问题有一天可能会趋同，但它们会从相当不同的方向趋同，在它们趋同之前，限制自己只思考我们确定会是外星真理的事情会过于约束。特别是因为这可能是那些最佳猜测结果证明出奇接近最优的领域之一。（让我们看看这个是否如此。）\n无论我们称它为什么，发现外星真理的尝试都将是一项值得的努力。而且奇怪的是，这本身可能就是一个外星真理。\n感谢Trevor Blackwell、Greg Brockman、Patrick Collison、Robert Morris和Michael Nielsen阅读本文草稿。\n"
  },{
    "title": "大学本科",
    "url": "/paul_graham/essays_zh/college/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n大学本科 想要创业吗？获得Y Combinator的资助。2005年3月\n（本文的部分内容始于对给我写信提问的学生的回复。）\n最近我收到了几封计算机科学本科生的邮件，询问在大学应该做什么。我可能不是最好的建议来源，因为我在大学主修的是哲学。但我上了很多计算机科学的课程，以至于大多数计算机科学专业的学生都以为我是其中一员。我当然是个黑客，至少如此。\n黑客技术 在大学里应该做什么才能成为一个优秀的黑客？你可以做两件主要的事情：在编程方面变得非常出色，并学习很多关于特定、酷炫问题的知识。这两件事被证明是等价的，因为每一件都会推动你去做另一件。\n在编程方面变得出色的方法是（a）大量地（b）解决难题。而让你自己解决难题的方法是从事一些非常引人入胜的项目。这个项目很可能不是课堂作业。我的朋友罗伯特在本科时通过编写网络软件学到了很多。他的一个项目是将哈佛连接到阿帕网；它曾经是最初的节点之一，但到1984年连接已经断开了。这项工作不仅不是为了课堂，而且因为他把所有时间都花在上面而忽视了学业，他被学校开除了一年。最终一切都平衡了，现在他是麻省理工学院的教授。但如果你不走那个极端，你可能会更快乐；这当时给他带来了很多担忧。\n在编程方面变得出色的另一种方法是找到其他擅长编程的人，学习他们的知识。程序员倾向于根据他们做的工作类型和他们使用的工具将自己分成部落，有些部落比其他部落更聪明。看看你周围，看看聪明的人似乎在做什么；通常都有原因。\n你周围一些最聪明的人是教授。所以找到有趣工作的一个方法是自愿担任研究助理。教授对那些能为他们解决繁琐的系统管理类型问题的人特别感兴趣，所以这是进门的一种方式。他们害怕的是那些不可靠和为了简历而工作的人。助理往往导致工作量净增加，这太常见了。所以你必须明确你会带来净减少。\n如果他们说不要，不要气馁。拒绝几乎总是比被拒绝者想象的要少个人色彩。继续下一个。（这也适用于约会。）\n小心，因为虽然大多数教授都很聪明，但并不是所有人都从事有趣的工作。教授必须发表新颖的结果才能推进他们的职业生涯，但在更有趣的研究领域竞争更激烈。所以那些不那么有抱负的教授所做的是发表一系列论文，这些论文的结论之所以新颖，是因为没有其他人关心它们。你最好避免这些。\n我从来没有当过研究助理，所以推荐那条路线我觉得有点不诚实。我通过写自己的东西学会了编程，特别是通过尝试逆向工程Winograd的SHRDLU。我对那个程序的痴迷就像母亲对新生婴儿一样。\n无论独自工作有什么缺点，优点是这个项目完全是你自己的。你永远不必妥协或询问任何人的许可，如果你有新的想法，你可以坐下来开始实现它。\n在你自己的项目中，你不必担心新颖性（像教授那样）或盈利能力（像企业那样）。唯一重要的是项目在技术上的难度，这与应用的性质没有相关性。像数据库这样的\u0026quot;严肃\u0026quot;应用在技术上往往是琐碎和枯燥的（如果你曾遭受失眠之苦，试试阅读关于数据库的技术文献），而像游戏这样的\u0026quot;琐碎\u0026quot;应用往往非常复杂。我确信有一些游戏公司正在开发的产品，其智力内容比大学计算机科学系底部十分之九的研究还要多。\n如果我现在在大学，我可能会从事图形学工作：例如，一个网络游戏，或者一个3D动画工具。当我是本科生时，没有足够的周期让图形学变得有趣，但现在很难想象有什么更有趣的工作。\n数学 当我在大学时，很多教授相信（或至少希望）计算机科学是数学的一个分支。这种想法在哈佛最强烈，那里直到1980年代甚至没有计算机科学专业；在此之前，人们必须主修应用数学。但在康奈尔大学也几乎一样糟糕。当我告诉可怕的康威教授我对人工智能感兴趣（那时是个热门话题）时，他告诉我应该主修数学。我仍然不确定他认为人工智能需要数学，还是他认为人工智能是无稽之谈，主修一些严谨的学科会治愈我这种愚蠢的抱负。\n事实上，作为黑客，你需要的数学比大多数大学系愿意承认的要少得多。我认为你需要的除了高中数学加上计算理论的一些概念外，不需要太多。如果你想避免编写n²算法，你必须知道什么是n²算法。当然，除非你计划编写数学应用。例如，机器人技术全是数学。\n虽然对于大多数类型的黑客技术，你从字面上不需要数学，在知道1001个微分公式技巧的意义上，数学本身非常值得学习。它几乎是任何类型工作的宝贵隐喻来源。出于这个原因，我希望我在大学时学了更多数学。\n像许多人一样，我在童年时被数学虐待过。我学会将数学视为公式的集合，这些公式既不美丽，与我的生活也没有任何关系（尽管试图将它们翻译成\u0026quot;文字问题\u0026quot;），但必须记住以便在考试中取得好成绩。\n你在大学能做的最有价值的事情之一可能是了解数学的真正含义。这可能不容易，因为许多优秀的数学家都是糟糕的老师。虽然有许多关于数学的通俗书籍，但似乎很少有好的。我能想到的最好的是W.W.索耶的。当然还有欧几里得。\n一切 托马斯·赫胥黎说\u0026quot;尝试了解一切的一些事情和一件事的一切。\u0026ldquo;大多数大学都以这个理想为目标。\n但什么是\u0026quot;一切\u0026rdquo;？对我来说，它意味着人们在诚实解决难题的过程中学到的一切。所有这样的工作往往是相关的，因为一个领域的想法和技术通常可以成功移植到其他领域。即使是那些看起来相当遥远的领域。例如，我写文章的方式和写软件的方式一样：我坐下来尽可能快地敲出一个蹩脚的版本1，然后花几周时间重写它。\n解决难题本身并不足够。中世纪的炼金术士在解决一个难题，但他们的方法是如此虚假，以至于研究它几乎学不到什么，除了可能关于人们欺骗自己的能力。不幸的是，我在大学尝试学习的那种人工智能有同样的缺陷：一个非常困难的问题，轻率地使用完全不足的技术来解决。大胆？更接近欺诈。社会科学也相当虚假，因为它们受到知识时尚的太大影响。如果一个物理学家遇到100年前的同事，他可以教他一些新东西；如果一个心理学家遇到100年前的同事，他们只会陷入意识形态争论。是的，当然，通过上心理学课你会学到一些东西。重点是，通过上另一个系的课，你会学到更多。\n在我看来，值得学习的系是数学、硬科学、工程、历史（特别是经济和社会历史，以及科学史）、建筑学和古典文学。艺术史概论课程可能是值得的。现代文学很重要，但了解它的方法就是阅读。我对音乐了解不够，无法发表意见。\n你可以跳过社会科学、哲学和最近为应对政治压力而创建的各个系。这些领域当然谈论重要问题。但它们谈论问题的方式是无用的。例如，哲学谈论我们对彼此的义务等；但你可以从一位明智的祖母或E.B.怀特那里学到更多关于这方面的知识，而不是从一位学术哲学家。\n我在这里是从经验出发说话。当人们嘲笑克林顿说\u0026quot;这取决于\u0026rsquo;是\u0026rsquo;这个词的含义是什么\u0026quot;时，我可能应该感到被冒犯。我在大学上了大约五门关于\u0026quot;是\u0026quot;这个词的含义的课。\n找出哪些领域值得学习的另一种方法是创建辍学图表。例如，我知道许多人从数学转向计算机科学，因为他们发现数学太难了，没有人做相反的事情。人们不会无缘无故地做困难的事情；除非一个问题相应地（或至少log(n)）更有回报，否则没有人会去解决更难的问题。所以可能数学比计算机科学更值得学习。通过类似的比较，你可以为大学中的所有系制作一个图表。在底部你会发现智力内容最少的科目。\n如果你使用这种方法，你会得到与我刚才给出的大致相同的答案。\n语言课程是一个异常。我认为它们更好地被视为课外活动，就像陶艺课程一样。当结合在讲这种语言的国家生活一段时间时，它们会更有用。我一时兴起在大一时学习了阿拉伯语。这是很多工作，唯一持久的好处是一种奇怪的能力来识别闪米特语词根，以及对人们如何识别单词的一些见解。\n工作室艺术和创意写作课程是变数。通常你不会被教太多：你只是在老师模糊的监督下做（或不做）你想做的任何事情，然后坐在一起为彼此的创作提供\u0026quot;批评\u0026quot;。但写作和艺术都是人们诚实解决的非常困难的问题，所以它们值得做，特别是如果你能找到一位好老师。\n工作 当然，大学生必须考虑的不仅仅是学习。还有两个实际问题需要考虑：工作和研究生院。\n理论上，通识教育不应该提供职业培训。但每个人都知道这有点谎言。每所大学的黑客都学习实用技能，而且不是偶然的。\n为找工作而学习的内容取决于你想要的工作类型。如果你想在大公司工作，学习如何在Windows上编写Blub程序。如果你想在一家酷的小公司或研究实验室工作，学习在Linux上使用Ruby会更好。如果你想创办自己的公司，我认为这会越来越普遍，掌握你能找到的最强大的工具，因为你将要与竞争对手比赛，他们将是你的马。\n你应该在大学学习的技能和工作中使用的技能之间没有直接的相关性。在大学里你应该目标稍微高一些。\n在锻炼中，足球运动员可能卧推300磅，尽管在比赛过程中他可能永远不必施加类似的力量。同样，如果你的教授试图让你学习比工作中需要的更先进的东西，可能不仅仅是因为他们是学者，脱离现实世界。他们可能在试图用你的大脑举重。\n你在课堂上写的程序与你将在现实世界中写的程序在三个关键方面不同：它们很小；你可以从头开始；问题通常是人为的和预定的。在现实世界中，程序更大，往往涉及现有代码，通常需要你在解决问题之前弄清楚问题是什么。\n你不必等到离开（甚至进入）大学才学习这些技能。例如，如果你想学习如何处理现有代码，你可以为开源项目做贡献。你想要为之工作的雇主会对此印象深刻，就像课堂作业的好成绩一样。\n在现有的开源项目中，你在第三种技能上没有太多练习，即决定要解决什么问题。但没有什么能阻止你开始自己的新项目。好雇主会对这更印象深刻。\n你应该尝试解决什么类型的问题？回答这个问题的一种方法是询问你作为用户需要什么。例如，我偶然发现了一个很好的垃圾邮件过滤算法，因为我想停止接收垃圾邮件。现在我希望我有一个邮件阅读器，能以某种方式防止我的收件箱填满。我倾向于使用我的收件箱作为待办事项列表。但这就像用螺丝刀开瓶子；人们真正想要的是一个开瓶器。\n研究生院 研究生院怎么样？你应该去吗？你如何进入一所好的研究生院？\n原则上，研究生院是研究的专业培训，除非你想把研究作为职业，否则你不应该去。然而，获得计算机科学博士学位的人中有一半没有进入研究界。我去研究生院不是为了成为教授。我去是因为我想学到更多。\n所以如果你主要对黑客技术感兴趣并且你去研究生院，你会发现很多其他人在同样地不在他们的元素中。如果你周围有一半的人以同样的方式不在他们的元素中，你真的不在你的元素中吗？\n\u0026ldquo;计算机科学\u0026quot;中有一个根本问题，在这种情况下就显现出来了。没有人确定\u0026quot;研究\u0026quot;应该是什么。很多研究是黑客技术，不得不被塞进学术论文的形式以产生又一个出版量。\n所以问你是否会在研究生院如鱼得水有点误导性，因为很少有人真正在计算机科学中如鱼得水。整个领域在自己的皮肤中感到不舒服。所以你主要对黑客技术感兴趣这一事实不应该阻止你去研究生院。只是要警告你，你将不得不做很多你不喜欢的事情。\n第一将是你的论文。几乎每个人在完成时都讨厌他们的论文。这个过程往往会产生令人不快的结果，就像用全麦面粉制作并烘烤十二小时的蛋糕。很少有论文是被愉快地阅读的，尤其是它们的作者。\n但在你之前有成千上万的人忍受了写论文的痛苦。除此之外，研究生院接近天堂。许多人记得这是他们一生中最快乐的时光。几乎所有其余的人，包括我，记得如果他们不必写论文，这本来会是一段美好的时期。\n研究生院的危险在于你 upfront 看不到可怕的部分。博士计划开始作为大学第2部分，有几年的课程。所以当你面对写论文的恐怖时，你已经进入几年了。如果你现在退出，你将成为研究生院辍学生，你可能不会喜欢这个想法。当罗伯特因为编写1988年的互联网蠕虫而被研究生院开除时，我非常羡慕他找到了一种没有失败耻辱的退出方式。\n总体而言，研究生院可能比大多数选择更好。你会遇到很多聪明人，你忧郁的拖延至少会是一个强大的共同纽带。当然，最后你有一个博士学位。我忘记了那一点。我想那是值得的。\n博士学位的最大优势（当然，除了是学术界的工会卡）可能是它给你一些基线信心。例如，我家的霍尼韦尔恒温器有着最糟糕的用户界面。我的母亲有相同的型号，勤奋地花了一天时间阅读用户手册来学习如何操作它。她认为问题出在她身上。但我可以对自己说\u0026quot;如果拥有计算机科学博士学位的人都无法理解这个恒温器，那它一定是设计得很糟糕。\u0026rdquo;\n在这个不温不火的推荐之后，如果你仍然想去研究生院，我可以给你关于如何进入的可靠建议。我的很多朋友现在是计算机科学教授，所以我有关于招生的内幕。这与大学完全不同。在大多数大学，招生官员决定谁被录取。对于博士计划，教授决定。他们努力做好这件事，因为他们录取的人将要为他们工作。\n显然，在最好的学校，只有推荐信真正重要。标准化测试毫无价值，成绩也很少价值。文章主要是通过说愚蠢的话来取消自己资格的机会。教授唯一信任的是推荐信，最好来自他们认识的人。\n所以如果你想进入博士计划，关键是给教授留下印象。从我当教授的朋友那里，我知道什么给他们留下印象：不仅仅是试图给他们留下印象。他们对取得好成绩的学生或想成为他们的研究助理以便进入研究生院的学生不感兴趣。他们对取得好成绩并且想成为他们的研究助理的学生印象深刻，因为他们真正对这个话题感兴趣。\n所以你在大学能做的最好的事情，无论你想进入研究生院还是只想擅长黑客技术，是找出你真正喜欢的东西。很难欺骗教授让你进入研究生院，也不可能欺骗问题让你解决它们。大学是伪装停止工作的地方。从这一点开始，除非你想去大公司工作，这就像回到高中，前进的唯一方法是通过做你喜欢的事情。\n注释 [1] 似乎没有人介意，这表明阿帕网（后来成为互联网）在1984年是多么不重要。\n[2] 这就是为什么当我成为雇主时，我不关心GPA。事实上，我们积极寻找从学校辍学的人。我们曾经在哈佛周围张贴海报说\u0026quot;你是否因为把所有时间花在某个自己的项目上而在课堂上表现不佳而被踢出学校？来为我们工作吧！\u0026ldquo;我们设法找到了一个这样的人，他是个优秀的黑客。\n当哈佛将本科生开除一年时，他们必须找工作。想法是向他们展示现实世界是多么糟糕，这样他们会明白他们在大学里是多么幸运。这个计划在我们来找工作的那个家伙身上适得其反，因为他比在学校时更有趣，那年从股票期权中赚的钱比他任何教授的薪水都多。所以他没有在年底悔改地爬回来，而是又请了一年假去了欧洲。他最终大约在26岁毕业。\n[3] 埃里克·雷蒙德说，对黑客来说最好的隐喻在集合论、组合学和图论中。\n",
    "description": "",
    "tags": ["大学","教育","编程","黑客","数学","研究生院","职业建议"],
    "categories": [],
    "content": "→ English Version\n大学本科 想要创业吗？获得Y Combinator的资助。2005年3月\n（本文的部分内容始于对给我写信提问的学生的回复。）\n最近我收到了几封计算机科学本科生的邮件，询问在大学应该做什么。我可能不是最好的建议来源，因为我在大学主修的是哲学。但我上了很多计算机科学的课程，以至于大多数计算机科学专业的学生都以为我是其中一员。我当然是个黑客，至少如此。\n黑客技术 在大学里应该做什么才能成为一个优秀的黑客？你可以做两件主要的事情：在编程方面变得非常出色，并学习很多关于特定、酷炫问题的知识。这两件事被证明是等价的，因为每一件都会推动你去做另一件。\n在编程方面变得出色的方法是（a）大量地（b）解决难题。而让你自己解决难题的方法是从事一些非常引人入胜的项目。这个项目很可能不是课堂作业。我的朋友罗伯特在本科时通过编写网络软件学到了很多。他的一个项目是将哈佛连接到阿帕网；它曾经是最初的节点之一，但到1984年连接已经断开了。这项工作不仅不是为了课堂，而且因为他把所有时间都花在上面而忽视了学业，他被学校开除了一年。最终一切都平衡了，现在他是麻省理工学院的教授。但如果你不走那个极端，你可能会更快乐；这当时给他带来了很多担忧。\n在编程方面变得出色的另一种方法是找到其他擅长编程的人，学习他们的知识。程序员倾向于根据他们做的工作类型和他们使用的工具将自己分成部落，有些部落比其他部落更聪明。看看你周围，看看聪明的人似乎在做什么；通常都有原因。\n你周围一些最聪明的人是教授。所以找到有趣工作的一个方法是自愿担任研究助理。教授对那些能为他们解决繁琐的系统管理类型问题的人特别感兴趣，所以这是进门的一种方式。他们害怕的是那些不可靠和为了简历而工作的人。助理往往导致工作量净增加，这太常见了。所以你必须明确你会带来净减少。\n如果他们说不要，不要气馁。拒绝几乎总是比被拒绝者想象的要少个人色彩。继续下一个。（这也适用于约会。）\n小心，因为虽然大多数教授都很聪明，但并不是所有人都从事有趣的工作。教授必须发表新颖的结果才能推进他们的职业生涯，但在更有趣的研究领域竞争更激烈。所以那些不那么有抱负的教授所做的是发表一系列论文，这些论文的结论之所以新颖，是因为没有其他人关心它们。你最好避免这些。\n我从来没有当过研究助理，所以推荐那条路线我觉得有点不诚实。我通过写自己的东西学会了编程，特别是通过尝试逆向工程Winograd的SHRDLU。我对那个程序的痴迷就像母亲对新生婴儿一样。\n无论独自工作有什么缺点，优点是这个项目完全是你自己的。你永远不必妥协或询问任何人的许可，如果你有新的想法，你可以坐下来开始实现它。\n在你自己的项目中，你不必担心新颖性（像教授那样）或盈利能力（像企业那样）。唯一重要的是项目在技术上的难度，这与应用的性质没有相关性。像数据库这样的\u0026quot;严肃\u0026quot;应用在技术上往往是琐碎和枯燥的（如果你曾遭受失眠之苦，试试阅读关于数据库的技术文献），而像游戏这样的\u0026quot;琐碎\u0026quot;应用往往非常复杂。我确信有一些游戏公司正在开发的产品，其智力内容比大学计算机科学系底部十分之九的研究还要多。\n如果我现在在大学，我可能会从事图形学工作：例如，一个网络游戏，或者一个3D动画工具。当我是本科生时，没有足够的周期让图形学变得有趣，但现在很难想象有什么更有趣的工作。\n数学 当我在大学时，很多教授相信（或至少希望）计算机科学是数学的一个分支。这种想法在哈佛最强烈，那里直到1980年代甚至没有计算机科学专业；在此之前，人们必须主修应用数学。但在康奈尔大学也几乎一样糟糕。当我告诉可怕的康威教授我对人工智能感兴趣（那时是个热门话题）时，他告诉我应该主修数学。我仍然不确定他认为人工智能需要数学，还是他认为人工智能是无稽之谈，主修一些严谨的学科会治愈我这种愚蠢的抱负。\n事实上，作为黑客，你需要的数学比大多数大学系愿意承认的要少得多。我认为你需要的除了高中数学加上计算理论的一些概念外，不需要太多。如果你想避免编写n²算法，你必须知道什么是n²算法。当然，除非你计划编写数学应用。例如，机器人技术全是数学。\n虽然对于大多数类型的黑客技术，你从字面上不需要数学，在知道1001个微分公式技巧的意义上，数学本身非常值得学习。它几乎是任何类型工作的宝贵隐喻来源。出于这个原因，我希望我在大学时学了更多数学。\n像许多人一样，我在童年时被数学虐待过。我学会将数学视为公式的集合，这些公式既不美丽，与我的生活也没有任何关系（尽管试图将它们翻译成\u0026quot;文字问题\u0026quot;），但必须记住以便在考试中取得好成绩。\n你在大学能做的最有价值的事情之一可能是了解数学的真正含义。这可能不容易，因为许多优秀的数学家都是糟糕的老师。虽然有许多关于数学的通俗书籍，但似乎很少有好的。我能想 …"
  },{
    "title": "天才的公交车票理论",
    "url": "/paul_graham/essays_zh/genius/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n天才的公交车票理论 2019年11月\n每个人都知道，要做伟大的工作，你需要天赋和决心。但还有一个不太为人理解的第三种成分：对特定话题的痴迷兴趣。\n为了解释这一点，我需要冒犯某群人的声誉，我选择公交车票收藏者。有人收集旧公交车票。像许多收藏家一样，他们对所收集物品的细节有着痴迷的兴趣。他们能够记住不同类型公交车票之间的区别，这对我们其他人来说很难记住。因为我们不够在乎。花这么多时间思考旧公交车票有什么意义？\n这引出了这种痴迷的第二特征：没有意义。公交车票收藏者的爱是无私的。他们这样做不是为了给我们留下印象，也不是为了让自己富有，而是为了它本身。\n当你观察那些做过伟大工作的人的生活时，你会看到一个一致的模式。他们往往从对某个东西的公交车票收藏者式的痴迷开始，这对他们同时代的大多数人来说似乎毫无意义。达尔文关于贝格尔号航行的书籍最显著的特征之一是他对自然史的兴趣深度。他的好奇心似乎无穷无尽。拉马努金也是如此，他一小时一小时地坐在石板上计算级数会发生什么。\n认为他们是在为后来的发现\u0026quot;奠定基础\u0026quot;是错误的。这个隐喻中有太多的意图。像公交车票收藏者一样，他们这样做是因为他们喜欢。\n但拉马努金和公交车票收藏者有区别。级数很重要，公交车票不重要。\n如果我用一句话概括天才的秘诀，可能就是这样：对重要的事情有无私的痴迷。\n我不是忘记了其他两种成分吗？比你可能想的少。对某个话题的痴迷兴趣既是能力的代理，也是决心的替代品。除非你有足够的数学才能，否则你不会觉得级数有趣。当你对某事痴迷时，你不需要那么多决心：当好奇心拉着你时，你不需要那么努力地推动自己。\n痴迷兴趣甚至会给你带来好运，在某种程度上任何事情都可以。正如巴斯德所说，机会眷顾有准备的头脑，如果说痴迷的头脑有一个特点的话，那就是它是有准备的。\n这种痴迷的无私性是其最重要的特征。不仅因为它是真诚的过滤器，而且因为它帮助你发现新想法。\n导致新想法的路径往往看起来没有希望。如果它们看起来有希望，其他人早就已经探索过了。那些做伟大工作的人如何发现这些被他人忽视的路径？流行的说法是他们只是有更好的视野：因为他们如此有才华，他们看到别人错过的路径。但如果你观察伟大发现是如何做出的，事情并非如此。达尔文并不比其他人更关注个别物种，因为他看到这会导致伟大的发现，而他们没有。他只是对这类事情真的、真的感兴趣。\n达尔文无法关闭这种兴趣。拉马努金也是如此。他们没有发现那些隐藏的路径是因为它们看起来有希望，而是因为他们情不自禁。正是这让他们能够遵循那些仅仅有野心的人会忽视的路径。\n什么理性的人会决定写伟大小说的方式是先花几年创造一个虚构的精灵语，像托尔金那样，或者访问英国西南部的每个家庭，像特罗洛普那样？没有人，包括托尔金和特罗洛普。\n公交车票理论类似于卡莱尔对天才的著名定义：承受痛苦的无限能力。但有两个区别。公交车票理论明确指出，这种无限承受痛苦能力的来源不是无限的勤奋，正如卡莱尔似乎意味的那样，而是收藏家拥有的那种无限兴趣。它还添加了一个重要的限定：对重要事情承受痛苦的无限能力。\n那么什么重要？你永远无法确定。正因为没有人能预先知道哪些路径有希望，你才能通过做你感兴趣的工作来发现新想法。\n但你可以使用一些启发式方法来猜测某种痴迷是否可能是重要的。例如，如果你在创造东西，而不仅仅是消费别人创造的东西，它就更有希望。如果你感兴趣的东西很困难，特别是如果它对其他人来说比对你更困难，那就更有希望。而有才华的人的痴迷更可能有希望。当有才华的人对随机事情感兴趣时，它们并不是真正随机的。\n但你永远无法确定。事实上，这里有一个有趣的想法，如果它是真的，也相当令人不安：可能要做伟大的工作，你还必须浪费大量时间。\n在许多不同领域，回报与风险成正比。如果这个规则在这里成立，那么找到导致真正伟大工作的路径的方法就是愿意在那些结果证明完全没有希望的事情上花费大量精力。\n我不确定这是否是真的。一方面，只要你努力做有趣的事情，似乎很难浪费时间。你所做的很多事情最终都是有用的。但另一方面，风险与回报关系的规则如此强大，以至于它似乎在风险发生的任何地方都成立。至少牛顿的案例表明，风险/回报规则在这里成立。他以一个特定的痴迷而闻名，这个痴迷结果证明是前所未有的成果：用数学描述世界。但他还有另外两个痴迷，炼金术和神学，似乎完全是浪费时间。他最终净 ahead。他对我们现在称为物理学的赌注如此成功，以至于超过了其他两个的补偿。但其他两个是否必要，从这个意义上说他必须承担大风险才能做出如此大的发现？我不知道。\n这是一个更令人不安的想法：一个人可能会做出所有错误的赌注？这可能经常发生。但我们不知道频率，因为这些人没有出名。\n不仅仅是遵循某个路径的回报难以预测。它们随时间变化很大。1830年是对自然史痴迷的好时机。如果达尔文出生在1709年而不是1809年，我们可能永远不会听说过他。\n面对这种不确定性，一个人能做什么？一个解决方案是对冲你的赌注，在这种情况下，这意味着遵循明显有希望的路径，而不是你自己的私人痴迷。但就像任何对冲一样，当你降低风险时，你也在降低回报。如果你放弃做你喜欢的工作，而遵循一些更传统雄心勃勃的路径，你可能会错过一些你本来会发现的美妙事情。这也一定经常发生，可能甚至比那些赌注都失败的天才更频繁。\n另一个解决方案是让自己对许多不同的事情感兴趣。如果你基于哪个似乎迄今为止有效而在同样真实的兴趣之间切换，你不会降低你的上限。但这里也有危险：如果你工作在太多不同的项目上，你可能无法足够深入地进入其中任何一个。\n公交车票理论的一个有趣之处是，它可能有助于解释为什么不同类型的人在不同类型的工作中表现出色。兴趣的分布比能力不均匀得多。如果做伟大工作只需要天赋，而天赋是均匀分布的，你必须发明复杂的理论来解释我们在各个领域中实际做伟大工作的人中看到的偏斜分布。但可能大部分偏斜有一个更简单的解释：不同的人对不同的东西感兴趣。\n公交车票理论也解释了为什么人们有了孩子后不太可能做伟大的工作。在这里，兴趣不仅要与外部障碍竞争，还要与另一个兴趣竞争，而这个兴趣对大多数人来说是极其强大的。有了孩子后更难找到工作时间，但这是容易的部分。真正的变化是你不想了。\n但公交车票理论最令人兴奋的含义是，它提出了鼓励伟大工作的方法。如果天才的秘诀只是天赋加努力，我们能做的就是希望我们有大量能力，并尽可能努力地工作。但如果兴趣是天才的关键成分，我们可能能够通过培养兴趣来培养天才。\n例如，对非常有野心的人来说，公交车票理论表明，做伟大工作的方式是放松一点。不要咬牙切齿地勤奋追求所有同龄人都同意的最有希望的研究路线，也许你应该尝试只是为了好玩而做一些事情。如果你被困住了，那可能是突破的方向。\n我一直喜欢汉明的著名双管问题：你领域中最重要的问题是什么，你为什么没有在其中之一上工作？这是一个很好的让自己震惊的方式。但它可能有点过度拟合。问自己可能至少同样有用：如果你能休假一年去做一件可能不重要但会非常有趣的事情，那会是什么？\n公交车票理论还提出了一种避免随着年龄增长而放缓的方法。也许人们随着年龄增长新想法变少的原因不仅仅是因为他们失去了锋芒。也可能是因为一旦你确立地位，你就不能再像年轻时那样不负责任地搞副项目，那时没有人关心你做什么。\n解决方案很明显：保持不负责任。但这会很困难，因为你为了防止衰退而承担的看似随机的项目，在外人看来会证明衰退的证据。你自己也不会确定他们是错的。但至少做你想做的工作会更有趣。\n我们甚至可以在孩子中培养智力公交车票收集的习惯。教育中的通常计划是从广泛、浅显的关注开始，然后逐渐变得更专业化。但我对我的孩子做了相反的事情。我知道我可以依靠他们的学校来处理广泛、浅显的部分，所以我带他们深入。\n当他们对某事感兴趣时，无论多么随机，我都鼓励他们达到荒谬的、公交车票收藏者式的深度。我这样做不是因为公交车票理论。我这样做是因为我想让他们感受到学习的乐趣，他们永远不会对我让他们学习的东西有这种感觉。必须是他们感兴趣的东西。我只是遵循阻力最小的路径；深度是副产品。但如果在试图向他们展示学习乐趣的同时，我最终训练他们深入，那就更好了。\n会有任何效果吗？我不知道。但这种不确定性可能是最有趣的一点。关于如何做伟大工作还有很多要学习的。人类文明感觉如此古老，如果我们还没有掌握如此基本的东西，它实际上仍然非常年轻。想到关于发现还有发现要做，这是令人兴奋的。如果那是你感兴趣的那种事情。\n注释 [1] 还有其他类型的收集比公交车票更好地说明这一点，但它们也更受欢迎。使用一个较差的例子似乎更好，而不是通过告诉他们他们的爱好不重要来冒犯更多人。\n[2] 我有点担心使用\u0026quot;无私\u0026quot;这个词，因为有些人错误地相信它意味着不感兴趣。但任何期望成为天才的人都必须知道这样一个基本词的含义，所以我想他们不妨现在就开始。\n[3] 想想天才一定经常被告知，或告诉自己，停止胡闹并负责任而在萌芽中被扼杀。拉马努金的母亲是一个巨大的促成者。想象一下，如果她不是。想象一下，如果他的父母让他出去找工作，而不是坐在家里做数学。\n另一方面，任何引用前一段来证明不找工作的人可能是错误的。\n[4] 1709年的达尔文在时间上相当于空间上的米兰达芬奇。\n[5] \u0026ldquo;承受痛苦的无限能力\u0026quot;是对卡莱尔所写内容的意译。他在《腓特烈大帝史》中写道的是\u0026hellip;\u0026hellip;它是\u0026rsquo;天才\u0026rsquo;的果实（首先意味着承受烦恼的卓越能力）\u0026hellip;\u0026hellip;\u0026ldquo;由于意译在此时似乎是这个想法的名称，我保留了它。\n卡莱尔的《历史》于1858年出版。1785年，埃罗·德·塞谢勒引用布丰说\u0026quot;Le génie n\u0026rsquo;est qu\u0026rsquo;une plus grande aptitude à la patience.\u0026quot;（天才只是对耐心更大的适应能力。）\n[6] 特罗洛普正在建立邮政路线系统。他自己意识到他追求这个目标的痴迷程度。看着激情如何在一个人身上增长是很有趣的。在这两年里，用乡村邮递员覆盖全国是我人生的雄心。即使是牛顿偶尔也意识到他痴迷的程度。在将pi计算到15位数后，他在给朋友的信中写道：我羞于告诉你我把这些计算进行了多少位数字，当时没有其他事情要做。顺便说一句，拉马努金也是一个强迫性的计算者。正如卡尼格尔在他优秀的传记中所写的那样：一位拉马努金学者，B.M.威尔逊，后来告诉拉马努金对数论的研究通常是\u0026quot;以数值结果表为前提的，通常延伸到我们大多数人会退缩的长度。\u0026rdquo;\n[7] 努力理解自然世界算作创造而不是消费。\n牛顿在选择研究神学时在这个区别上绊倒了。他的信念不允许他看到这一点，但追寻自然中的悖论是有成果的，而追寻神圣文本中的悖论则不是。\n[8] 人们对某个话题产生兴趣的倾向有多少是天生的？我到目前为止的经验表明答案是：大部分。不同的孩子对不同的事情感兴趣，很难让孩子对他们本来不会感兴趣的事情感兴趣。不是以一种持久的方式。你能为一个话题做的最多的事情是确保它得到公平的展示——例如，向他们明确说明，数学不仅仅是他们在学校做的乏味练习。之后就取决于孩子了。\n",
    "description": "",
    "tags": ["天才","创造力","痴迷","兴趣","创新","学习"],
    "categories": [],
    "content": "→ English Version\n天才的公交车票理论 2019年11月\n每个人都知道，要做伟大的工作，你需要天赋和决心。但还有一个不太为人理解的第三种成分：对特定话题的痴迷兴趣。\n为了解释这一点，我需要冒犯某群人的声誉，我选择公交车票收藏者。有人收集旧公交车票。像许多收藏家一样，他们对所收集物品的细节有着痴迷的兴趣。他们能够记住不同类型公交车票之间的区别，这对我们其他人来说很难记住。因为我们不够在乎。花这么多时间思考旧公交车票有什么意义？\n这引出了这种痴迷的第二特征：没有意义。公交车票收藏者的爱是无私的。他们这样做不是为了给我们留下印象，也不是为了让自己富有，而是为了它本身。\n当你观察那些做过伟大工作的人的生活时，你会看到一个一致的模式。他们往往从对某个东西的公交车票收藏者式的痴迷开始，这对他们同时代的大多数人来说似乎毫无意义。达尔文关于贝格尔号航行的书籍最显著的特征之一是他对自然史的兴趣深度。他的好奇心似乎无穷无尽。拉马努金也是如此，他一小时一小时地坐在石板上计算级数会发生什么。\n认为他们是在为后来的发现\u0026quot;奠定基础\u0026quot;是错误的。这个隐喻中有太多的意图。像公交车票收藏者一样，他们这样做是因为他们喜欢。\n但拉马努金和公交车票收藏者有区别。级数很重要，公交车票不重要。\n如果我用一句话概括天才的秘诀，可能就是这样：对重要的事情有无私的痴迷。\n我不是忘记了其他两种成分吗？比你可能想的少。对某个话题的痴迷兴趣既是能力的代理，也是决心的替代品。除非你有足够的数学才能，否则你不会觉得级数有趣。当你对某事痴迷时，你不需要那么多决心：当好奇心拉着你时，你不需要那么努力地推动自己。\n痴迷兴趣甚至会给你带来好运，在某种程度上任何事情都可以。正如巴斯德所说，机会眷顾有准备的头脑，如果说痴迷的头脑有一个特点的话，那就是它是有准备的。\n这种痴迷的无私性是其最重要的特征。不仅因为它是真诚的过滤器，而且因为它帮助你发现新想法。\n导致新想法的路径往往看起来没有希望。如果它们看起来有希望，其他人早就已经探索过了。那些做伟大工作的人如何发现这些被他人忽视的路径？流行的说法是他们只是有更好的视野：因为他们如此有才华，他们看到别人错过的路径。但如果你观察伟大发现是如何做出的，事情并非如此。达尔文并不比其他人更关注个别物种，因为他看到这会导致伟大的发现，而他们没有。他只是对这类事情真的、真的感兴趣。\n达尔文无法关闭这种兴趣。拉马努金也是如此。他们没有发现那些隐藏的路径是因为它们看起来有希望，而是因为他们情不自禁。正是这让他们能够遵循那些仅仅有野心的人会忽视的路径。\n什么理性的人会决定写伟大小说的方式是先花几年创造一个虚构的精灵语，像托尔金那样，或者访问英国西南部的每个家庭，像特罗洛普那样？没有人，包括托尔金和特罗洛普。\n公交车票理论类似于卡莱尔对天才的著名定义：承受痛苦的无限能力。但有两个区别。公交车票理论明确指出，这种无限承受痛苦能力的来源不是无限的勤奋，正如卡莱尔似乎意味的那样，而是收藏家拥有的那种无限兴趣。它还添加了一个重要的限定：对重要事情承受痛苦的无限能力。\n那么什么重要？你永远无法确定。正因为没有人能预先知道哪些路径有希望，你才能通过做你感兴趣的工作来发现新想法。\n但你可以使用一些启发式方法来猜测某种痴迷是否可能是重要的。例如，如果你在创造东西，而不仅仅是消费别人创造的东西，它就更有希望。如果你感兴趣的东西很困难，特别是如果它对其他人来说比对你更困难，那就更有希望。而有才华的人的痴迷更可能有希望。当有才华的人对随机事情感兴趣时，它们并不是真正随机的。\n但你永远无法确定。事实上，这里有一个有趣的想法，如果它是真的，也相当令人不安：可能要做伟大的工作，你还必须浪费大量时间。\n在许多不同领域，回报与风险成正比。如果这个规则在这里成立，那么找到导致真正伟大工作的路径的方法就是愿意在那些结果证明完全没有希望的事情上花费大量精力。\n我不确定这是否是真的。一方面，只要你努力做有趣的事情，似乎很难浪费时间。你所做的很多事情最终都是有用的。但另一方面，风险与回报关系的规则如此强大，以至于它似乎在风险发生的任何地方都成立。至少牛顿的案例表明，风险/回报规则在这里成立。他以一个特定的痴迷而闻名，这个痴迷结果证明是前所未有的成果：用数学描述世界。但他还有另外两个痴迷，炼金术和神学，似乎完全是浪费时间。他最终净 ahead。他对我们现在称为物理学的赌注如此成功，以至于超过了其他两个的补偿。但其他两个是否必要，从这个意义上说他必须承担大风险才能做出如此大的发现？我不知道。\n这是一个更令人不安的想法：一个人可能会做出所有错误的赌注？这可能经常发生。但我们不知道频率，因为这些人没有出名。\n不仅仅是遵循某个路径的回报难以预测。它们随时间变化很大。1830年是对自然史痴迷的 …"
  },{
    "title": "好坏拖延症",
    "url": "/paul_graham/essays_zh/procrastination/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n好坏拖延症 2005年12月\n我认识的最令人印象深刻的人都是糟糕的拖延症患者。那么拖延症难道不总是坏事吗？\n大多数写拖延症的人写的是如何治愈它。但严格来说，这是不可能的。你可以做无限多的事情。无论你在做什么，你都没有在做其他事情。所以问题不是如何避免拖延，而是如何拖延得好。\n拖延症有三种变体，取决于你做什么而不是工作：你可以做（a）什么也不做，（b）不太重要的事情，或（c）更重要的事情。我认为最后一种是好的拖延症。\n那就是\u0026quot;心不在焉的教授\u0026quot;，他在思考一些有趣问题时忘记刮胡子，忘记吃饭，甚至忘记看自己要去哪里。他的心不在日常世界，因为在另一个世界里努力工作。\n这就是为什么我认识的最令人印象深刻的人都是拖延症患者。他们是C型拖延症患者：他们推迟做小事情来做大事情。\n什么是\u0026quot;小事情？\u0026ldquo;大致来说，就是没有任何机会在你讣告中提到的工作。当时很难说什么最终会成为你最好的工作（会是你的关于苏美尔神庙建筑的杰作，还是你用笔名写的侦探小说？），但有一整类任务你可以安全地排除：刮胡子、洗衣服、打扫房子、写感谢信——任何可能被称为杂事的事情。\n好的拖延是避免杂事来做真正的工作。\n至少在某种意义上是好的。想要你做杂事的人不会认为这是好的。但如果你想做成任何事，你可能必须惹恼他们。看起来最温和的人，如果他们想做真正的工作，在避免杂事方面都有某种程度的无情。\n有些杂事，比如回信，如果你忽略它们就会消失（也许连朋友一起消失）。其他的，比如修剪草坪或提交纳税申报单，如果你推迟只会变得更糟。原则上推迟第二种杂事应该不起作用。你最终必须做任何事情。为什么不（如逾期通知总是说的）现在就做？\n即使推迟那些杂事也是有回报的，因为真正的工作需要两样杂事不需要的东西：大块的时间和正确的心情。如果你被某个项目所启发，把接下来几天应该做的一切都抛在一边去做它，可能是一个净胜利。是的，当你最终去做那些杂事时，它们可能会花费你更多时间。但如果你在那几天里完成了很多工作，你的净生产力会更高。\n事实上，这可能不是程度上的差异，而是种类上的差异。可能有些类型的工作只能在长期不间断的时间段内完成，当灵感来临时，而不是尽职地在安排好的小块时间里完成。经验上似乎是这样。当我想到我认识的做成伟大事情的人时，我不想象他们尽职地在待办事项清单上划掉项目。我想象他们偷偷溜去做一些新想法。\n相反，强迫某人同步执行杂事必然会限制他们的生产力。中断的成本不仅仅是它花费的时间，还在于它把两边的时间都切成两半。你可能一天只需要打断某人几次，他们就完全无法处理难题了。\n我一直在想为什么创业公司在最开始时最有效率，那时他们只是一对在公寓里的人。主要原因可能是还没有人打断他们。理论上，当创始人最终有足够的钱雇人帮他们做一些工作时是好的。但过度工作可能比被打断更好。一旦你用普通办公室员工稀释了创业公司——用B型拖延症患者——整个公司开始以他们的频率共振。他们是中断驱动的，很快你也是了。\n杂事在扼杀伟大项目方面如此有效，以至于很多人为此目的使用它们。例如，决定写小说的人会突然发现房子需要打扫。没能写出小说的人不是整天坐在白纸前什么都不写。他们通过喂猫、出去买公寓需要的东西、见朋友喝咖啡、检查电子邮件来做到这一点。\u0026ldquo;我没有时间工作，\u0026ldquo;他们说。他们确实没有；他们确保了这一点。\n（还有一种变体是没有人可以工作。解决方法是参观名人工作的地方，看看它们多么不合适。）\n我在某个时候或另一个时候都使用过这两个借口。在过去的20年里，我学到了很多让自己工作的技巧，但即使现在我也不能一直赢。有些天我做真正的工作。其他天被杂事吃掉。而且我知道这通常是我的错：我让杂事吃掉了一天，以避免面对一些难题。\n最危险的拖延形式是未被承认的B型拖延，因为它感觉不像拖延。你\u0026quot;在把事情做完。\u0026ldquo;只是错误的事情。\n任何关于拖延的建议，如果专注于在待办事项清单上划掉项目，而没有考虑待办事项清单本身可能是B型拖延的一种形式，那么它不仅不完整，而且是 positively 误导的。事实上，可能性这个词太弱了。几乎每个人的都是。除非你在做你能做的最大的事情，否则你就是在B型拖延，无论你完成了多少。\n在他著名的论文《你和你的研究》（我推荐给任何有抱负的人，无论他们在做什么）中，Richard Hamming 建议你问自己三个问题：你领域中最重要的问题是什么？你在做其中之一吗？为什么不？Hamming 在贝尔实验室时开始问这样的问题。原则上那里的任何人都应该能够在他们领域中最重要的问题上工作。也许不是每个人都能对世界产生同样显著的影响；我不知道；但无论你的能力如何，都有项目能扩展它们。所以Hamming的练习可以概括为：你能做的最好的事情是什么，你为什么不做？大多数人会回避这个问题。我自己也回避；我看到它在页面上，迅速移到下一句。Hamming 曾经四处真正问人们这个问题，这并没有让他受欢迎。但这是任何有抱负的人都应该面对的问题。\n问题是，你最终可能会用这个饵钩上一条非常大的鱼。要做好工作，你需要做的不仅仅是找到好项目。一旦你找到了它们，你必须让自己去工作，这可能很难。问题越大，越难让自己去工作。\n当然，人们发现很难在特定问题上工作的主要原因是他们不喜欢它。当你年轻的时候，特别是，你经常发现自己做的工作不是真正喜欢的——例如，因为它看起来令人印象深刻，或者因为你被分配去做它。大多数研究生被卡在他们不喜欢的大问题上工作，因此研究生院与拖延症同义。\n但即使你喜欢你所做的工作，让自己在小问题上工作也比在大问题上工作更容易。为什么？为什么在大问题上工作如此困难？一个原因是你在可预见的未来可能得不到任何回报。如果你做一些一两天就能完成的工作，你可以期望很快就有很好的成就感。如果回报在无限远的未来，它似乎不那么真实。\n人们不在大项目上工作的另一个原因是，具有讽刺意味的，害怕浪费时间。如果他们失败了怎么办？那么他们花在上面的所有时间都浪费了。（事实上可能不会，因为在困难项目上的工作几乎总会通向某个地方。）\n但大问题的麻烦不能只是它们承诺没有立即的回报，可能会让你浪费大量时间。如果只是那样，它们不会比去看姻亲更糟糕。比那更多。大问题是可怕的。面对它们有几乎身体的痛苦。就像把真空吸尘器接到你的想象力上。你所有的初始想法立即被吸走，你不再有更多了，然而真空吸尘器仍然在吸。\n你不能太直接地看大问题的眼睛。你必须有点斜向地接近它。但你必须把角度调整得正好：你必须足够直接地面对大问题，捕捉到从它辐射出的一些兴奋，但不能太多以至于它使你瘫痪。一旦你开始，就可以收紧角度，就像帆船一旦开始航行就可以更靠近风航行。\n如果你想做大事，你似乎必须欺骗自己去做。你必须做可能长成大事的小事情，或者做越来越大的事情，或者与合作者分担道德负担。依赖这样的技巧不是软弱的标志。最好的工作就是以这种方式完成的。\n当我谈到那些设法让自己在大问题上工作的人时，我发现他们都抛开杂事，都为此感到内疚。我不认为他们应该感到内疚。要做的事情比任何人能做的都多。所以做他们能做的最好工作的人必然会留下很多未完成的杂事。为此感到难过似乎是个错误。\n我认为\u0026quot;解决\u0026quot;拖延症问题的方法是让快乐拉着你，而不是让待办事项清单推着你。做一个你真正喜欢的有抱负的项目，尽可能靠近风航行，你会留下正确的事情未完成。\n感谢 Trevor Blackwell、Jessica Livingston 和 Robert Morris 阅读本文草稿。\n罗马尼亚语翻译 | 俄语翻译 | 希伯来语翻译 | 德语翻译 | 葡萄牙语翻译 | 意大利语翻译 | 日语翻译 | 西班牙语翻译\n",
    "description": "",
    "tags": ["拖延症","生产力","工作","时间管理"],
    "categories": [],
    "content": "→ English Version\n好坏拖延症 2005年12月\n我认识的最令人印象深刻的人都是糟糕的拖延症患者。那么拖延症难道不总是坏事吗？\n大多数写拖延症的人写的是如何治愈它。但严格来说，这是不可能的。你可以做无限多的事情。无论你在做什么，你都没有在做其他事情。所以问题不是如何避免拖延，而是如何拖延得好。\n拖延症有三种变体，取决于你做什么而不是工作：你可以做（a）什么也不做，（b）不太重要的事情，或（c）更重要的事情。我认为最后一种是好的拖延症。\n那就是\u0026quot;心不在焉的教授\u0026quot;，他在思考一些有趣问题时忘记刮胡子，忘记吃饭，甚至忘记看自己要去哪里。他的心不在日常世界，因为在另一个世界里努力工作。\n这就是为什么我认识的最令人印象深刻的人都是拖延症患者。他们是C型拖延症患者：他们推迟做小事情来做大事情。\n什么是\u0026quot;小事情？\u0026ldquo;大致来说，就是没有任何机会在你讣告中提到的工作。当时很难说什么最终会成为你最好的工作（会是你的关于苏美尔神庙建筑的杰作，还是你用笔名写的侦探小说？），但有一整类任务你可以安全地排除：刮胡子、洗衣服、打扫房子、写感谢信——任何可能被称为杂事的事情。\n好的拖延是避免杂事来做真正的工作。\n至少在某种意义上是好的。想要你做杂事的人不会认为这是好的。但如果你想做成任何事，你可能必须惹恼他们。看起来最温和的人，如果他们想做真正的工作，在避免杂事方面都有某种程度的无情。\n有些杂事，比如回信，如果你忽略它们就会消失（也许连朋友一起消失）。其他的，比如修剪草坪或提交纳税申报单，如果你推迟只会变得更糟。原则上推迟第二种杂事应该不起作用。你最终必须做任何事情。为什么不（如逾期通知总是说的）现在就做？\n即使推迟那些杂事也是有回报的，因为真正的工作需要两样杂事不需要的东西：大块的时间和正确的心情。如果你被某个项目所启发，把接下来几天应该做的一切都抛在一边去做它，可能是一个净胜利。是的，当你最终去做那些杂事时，它们可能会花费你更多时间。但如果你在那几天里完成了很多工作，你的净生产力会更高。\n事实上，这可能不是程度上的差异，而是种类上的差异。可能有些类型的工作只能在长期不间断的时间段内完成，当灵感来临时，而不是尽职地在安排好的小块时间里完成。经验上似乎是这样。当我想到我认识的做成伟大事情的人时，我不想象他们尽职地在待办事项清单上划掉项目。我想象他们偷偷溜去做一些新想法。\n相反，强迫某人同步执行杂事必然会限制他们的生产力。中断的成本不仅仅是它花费的时间，还在于它把两边的时间都切成两半。你可能一天只需要打断某人几次，他们就完全无法处理难题了。\n我一直在想为什么创业公司在最开始时最有效率，那时他们只是一对在公寓里的人。主要原因可能是还没有人打断他们。理论上，当创始人最终有足够的钱雇人帮他们做一些工作时是好的。但过度工作可能比被打断更好。一旦你用普通办公室员工稀释了创业公司——用B型拖延症患者——整个公司开始以他们的频率共振。他们是中断驱动的，很快你也是了。\n杂事在扼杀伟大项目方面如此有效，以至于很多人为此目的使用它们。例如，决定写小说的人会突然发现房子需要打扫。没能写出小说的人不是整天坐在白纸前什么都不写。他们通过喂猫、出去买公寓需要的东西、见朋友喝咖啡、检查电子邮件来做到这一点。\u0026ldquo;我没有时间工作，\u0026ldquo;他们说。他们确实没有；他们确保了这一点。\n（还有一种变体是没有人可以工作。解决方法是参观名人工作的地方，看看它们多么不合适。）\n我在某个时候或另一个时候都使用过这两个借口。在过去的20年里，我学到了很多让自己工作的技巧，但即使现在我也不能一直赢。有些天我做真正的工作。其他天被杂事吃掉。而且我知道这通常是我的错：我让杂事吃掉了一天，以避免面对一些难题。\n最危险的拖延形式是未被承认的B型拖延，因为它感觉不像拖延。你\u0026quot;在把事情做完。\u0026ldquo;只是错误的事情。\n任何关于拖延的建议，如果专注于在待办事项清单上划掉项目，而没有考虑待办事项清单本身可能是B型拖延的一种形式，那么它不仅不完整，而且是 positively 误导的。事实上，可能性这个词太弱了。几乎每个人的都是。除非你在做你能做的最大的事情，否则你就是在B型拖延，无论你完成了多少。\n在他著名的论文《你和你的研究》（我推荐给任何有抱负的人，无论他们在做什么）中，Richard Hamming 建议你问自己三个问题：你领域中最重要的问题是什么？你在做其中之一吗？为什么不？Hamming 在贝尔实验室时开始问这样的问题。原则上那里的任何人都应该能够在他们领域中最重要的问题上工作。也许不是每个人都能对世界产生同样显著的影响；我不知道；但无论你的能力如何，都有项目能扩展它们。所以Hamming的练习可以概括为：你能做的最好的事情是什么，你为 …"
  },{
    "title": "好的写作",
    "url": "/paul_graham/essays_zh/goodwriting/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n好的写作 2025年5月\n写作可以在两个意义上是好的：它可以听起来很好，而且思想可以是正确的。它可以有优美流畅的句子，而且可以就重要的事情得出正确的结论。这两种好似乎可能是无关的，就像汽车的速度和它的颜色一样。然而我不认为它们是无关的。我认为听起来好的写作更可能是正确的。\n所以我们就有了最令人兴奋的那种想法：一个看起来既荒谬又真实的想法。让我们来检验它。这怎么可能是真的？\n我从写作中知道这是真的。你不可能同时优化两个无关的东西；当你把一个推得足够远时，你最终总是要牺牲另一个。然而无论我多么努力，我从未发现自己不得不在听起来最好的句子和表达思想最好的句子之间做选择。如果我必须这样做，那么关心句子的声音就是轻浮的。但在实践中，感觉恰恰相反。修复听起来不好的句子似乎有助于把思想弄对。[1]\n我说的对不仅仅是真实。把思想弄对意味着很好地发展它们——得出最重要的结论，并以适当的细节程度探索每一个结论。所以把思想弄对不仅仅是说真实的事情，而是说正确的真实事情。\n试图让句子听起来好怎么会有助于做到这一点呢？答案的线索是我在30年前为我的第一本书做版面设计时注意到的事情。有时候你在排文时会遇到坏运气。例如，你有一个部分比页面长一行。我不知道普通的排版工在这种情况下会做什么，但我做的是重写这个部分，让它少一行。你可能会期望这样一个任意的约束会让写作变得更糟。但我发现，令我惊讶的是，它从来没有。我总是得到我更喜欢的东西。\n我不认为这是因为我的写作特别粗心。我认为如果你指向任何人写的任何东西中的随机段落，告诉他们让它稍微短一点（或长一点），他们可能能够想出更好的东西。\n这种现象最好的类比是当你摇动一个装满不同物体的箱子时。摇晃是任意的运动。或者更确切地说，它们不是为了让任何两个特定的物体更紧密地结合在一起而计算的。然而，反复的摇晃不可避免地使物体发现聪明绝顶的包装方式。重力不会让它们变得不那么紧密，所以任何变化都必须是变得更好。[2]\n写作也是如此。如果你必须重写一个笨拙的段落，你永远不会以一种让它变得不那么真实的方式来这样做。你无法忍受，就像重力无法忍受东西向上漂浮一样。所以思想的任何变化都必须是变得更好。\n一旦你想到这一点，就显而易见了。听起来好的写作更可能是正确的，原因与摇晃好的箱子更可能是紧密包装的原因相同。但还有其他事情也在发生。听起来好不仅仅是一个随机的、让文章中的思想变得更好的外部力量。它实际上有助于你把它们弄对。\n原因是它让文章更容易阅读。阅读流畅的写作工作量更少。这对写作者有什么帮助？因为写作者是第一个读者。当我在写一篇文章时，我花在阅读上的时间远比写作多。有些部分我会重读50或100次，重放其中的思想，并问自己，就像有人在打磨一块木头，有什么东西卡住吗？有什么感觉不对吗？而且文章越容易读，就越容易注意到是否有东西卡住。\n所以是的，好写作的两种意义至少以两种方式连接。试图让写作听起来好会让你无意识地修正错误，也有助于你有意识地修正它们；它摇晃思想的箱子，也让错误更容易看到。但现在我们已经消解了一层荒谬，我忍不住要再添一层。听起来好是否不仅仅是帮助你把思想弄对？听起来好的写作本质上更可能是正确的吗？虽然看起来很疯狂，但我也认为这是真的。\n显然，在单个单词的层面上有联系。英语中有很多词听起来就像它们的意思，通常以奇妙而微妙的方式。闪烁。圆形。刮擦。一本正经。骑兵队。但好写作的声音更取决于你把词放在一起的方式，在那个层面上也有联系。\n当写作听起来好时，主要是因为它有好的节奏。但好写作的节奏不是音乐的节奏，也不是诗歌的韵律。它不那么规律。如果是的话，它就不会是好的，因为好写作的节奏必须匹配其中的思想，而思想有各种不同的形状。有时候它们很简单，你只是陈述它们。但其他时候它们更微妙，你需要更长、更复杂的句子来梳理出所有的含义。\n文章是整理过的思路，就像对话是整理过的交谈一样，思路有自然的节奏。所以当文章听起来好时，不仅仅是因为它有令人愉悦的节奏，而是因为它有自然的节奏。这意味着你可以把把节奏弄对作为把思想弄对的启发式方法。而且不仅仅是在原则上：好的作家通常会同时做这两件事。我经常甚至不区分这两个问题。我只是想，呃，这听起来不对；我在这里想说什么？[3]\n写作的声音原来更像飞机的形状，而不是汽车的颜色。如果它看起来好，就像凯利·约翰逊过去常说的，它会飞得好。\n然而，这只适用于用来发展思想的写作。当你在其他方面有了思想然后写作时，它就不适用了——例如，如果你建造了什么东西，或者进行了实验，然后写一篇关于它的论文。在这种情况下，思想更多地存在于作品中而不是写作中，所以即使思想是好的，写作也可能是坏的。教科书和流行调查中的写作可能很糟糕也是同样的原因：作者不是在发展思想，仅仅是在描述别人的思想。只有当你写作是为了发展思想时，做好这件事的两种意义之间才有如此密切的联系。\n好的，许多人会想，到目前为止这似乎是合理的，但骗子呢？一个能说会道的骗子写一些完全错误但美丽的东西，这不是臭名昭著的可能吗？\n当然是可能的。但没有方法表演是做不到的。写一些美丽而虚假的东西的方法是开始让自己几乎相信它。所以就像写一些美丽而真实东西的人一样，你呈现的是一个完美形成的思路。不同的是它附着在世界上的点。你在说如果某些错误前提成立，那就会是真的东西。如果出于某种奇怪的原因，一个国家的工作岗位数量是固定的，那么移民确实会抢走我们的工作。\n所以说听起来更好的写作更可能是正确的，这不太对。听起来更好的写作更可能是内在一致的。如果作者是诚实的，内在一致和真理就会趋同。\n虽然我们不能安全地得出结论说美丽的写作是真实的，但通常可以安全地得出相反的结论：看起来笨拙地写作的东西通常也会把思想弄错。\n实际上，好写作的两种意义更像同一件事的两端。它们之间的联系不是刚性的；好写作的美好不是一根杆子，而是一根绳子，有多个重叠的联系贯穿其中。但很难移动一端而不移动另一端。很难正确而不听起来正确。\n注释 [1] 最接近例外的情况是当你必须回到你已经写的东西的中间插入一个新的观点。这常常会破坏流畅性，有时是你永远无法完全修复的方式。但我认为这个问题的最终根源是思想是树状的，而文章是线性的。当你试图把前者塞进后者时，你不可避免地会遇到困难。坦率地说，你能侥幸逃脱的程度令人惊讶。但即使如此，有时你不得不诉诸尾注。\n[2] 显然，如果你摇晃箱子够用力，里面的物体可能变得不那么紧密。同样，如果你对你的写作施加一些巨大的外部约束，比如使用交替的一个和两个音节的词，思想就会开始受到影响。\n[3] 奇怪的是，在这一段的写作中发生了这种情况。早期版本与前一段有几个共同的短语，每次我重读时，这种重复都让我烦恼。当我烦到足够修复它时，我发现这种重复反映了潜在思想中的问题，我同时修复了两者。\n感谢杰西卡·利文斯顿和考特尼·皮普金阅读本文的草稿。\n",
    "description": "",
    "tags": ["写作","风格","思想","节奏","清晰度"],
    "categories": [],
    "content": "→ English Version\n好的写作 2025年5月\n写作可以在两个意义上是好的：它可以听起来很好，而且思想可以是正确的。它可以有优美流畅的句子，而且可以就重要的事情得出正确的结论。这两种好似乎可能是无关的，就像汽车的速度和它的颜色一样。然而我不认为它们是无关的。我认为听起来好的写作更可能是正确的。\n所以我们就有了最令人兴奋的那种想法：一个看起来既荒谬又真实的想法。让我们来检验它。这怎么可能是真的？\n我从写作中知道这是真的。你不可能同时优化两个无关的东西；当你把一个推得足够远时，你最终总是要牺牲另一个。然而无论我多么努力，我从未发现自己不得不在听起来最好的句子和表达思想最好的句子之间做选择。如果我必须这样做，那么关心句子的声音就是轻浮的。但在实践中，感觉恰恰相反。修复听起来不好的句子似乎有助于把思想弄对。[1]\n我说的对不仅仅是真实。把思想弄对意味着很好地发展它们——得出最重要的结论，并以适当的细节程度探索每一个结论。所以把思想弄对不仅仅是说真实的事情，而是说正确的真实事情。\n试图让句子听起来好怎么会有助于做到这一点呢？答案的线索是我在30年前为我的第一本书做版面设计时注意到的事情。有时候你在排文时会遇到坏运气。例如，你有一个部分比页面长一行。我不知道普通的排版工在这种情况下会做什么，但我做的是重写这个部分，让它少一行。你可能会期望这样一个任意的约束会让写作变得更糟。但我发现，令我惊讶的是，它从来没有。我总是得到我更喜欢的东西。\n我不认为这是因为我的写作特别粗心。我认为如果你指向任何人写的任何东西中的随机段落，告诉他们让它稍微短一点（或长一点），他们可能能够想出更好的东西。\n这种现象最好的类比是当你摇动一个装满不同物体的箱子时。摇晃是任意的运动。或者更确切地说，它们不是为了让任何两个特定的物体更紧密地结合在一起而计算的。然而，反复的摇晃不可避免地使物体发现聪明绝顶的包装方式。重力不会让它们变得不那么紧密，所以任何变化都必须是变得更好。[2]\n写作也是如此。如果你必须重写一个笨拙的段落，你永远不会以一种让它变得不那么真实的方式来这样做。你无法忍受，就像重力无法忍受东西向上漂浮一样。所以思想的任何变化都必须是变得更好。\n一旦你想到这一点，就显而易见了。听起来好的写作更可能是正确的，原因与摇晃好的箱子更可能是紧密包装的原因相同。但还有其他事情也在发生。听起来好不仅仅是一个随机的、让文章中的思想变得更好的外部力量。它实际上有助于你把它们弄对。\n原因是它让文章更容易阅读。阅读流畅的写作工作量更少。这对写作者有什么帮助？因为写作者是第一个读者。当我在写一篇文章时，我花在阅读上的时间远比写作多。有些部分我会重读50或100次，重放其中的思想，并问自己，就像有人在打磨一块木头，有什么东西卡住吗？有什么感觉不对吗？而且文章越容易读，就越容易注意到是否有东西卡住。\n所以是的，好写作的两种意义至少以两种方式连接。试图让写作听起来好会让你无意识地修正错误，也有助于你有意识地修正它们；它摇晃思想的箱子，也让错误更容易看到。但现在我们已经消解了一层荒谬，我忍不住要再添一层。听起来好是否不仅仅是帮助你把思想弄对？听起来好的写作本质上更可能是正确的吗？虽然看起来很疯狂，但我也认为这是真的。\n显然，在单个单词的层面上有联系。英语中有很多词听起来就像它们的意思，通常以奇妙而微妙的方式。闪烁。圆形。刮擦。一本正经。骑兵队。但好写作的声音更取决于你把词放在一起的方式，在那个层面上也有联系。\n当写作听起来好时，主要是因为它有好的节奏。但好写作的节奏不是音乐的节奏，也不是诗歌的韵律。它不那么规律。如果是的话，它就不会是好的，因为好写作的节奏必须匹配其中的思想，而思想有各种不同的形状。有时候它们很简单，你只是陈述它们。但其他时候它们更微妙，你需要更长、更复杂的句子来梳理出所有的含义。\n文章是整理过的思路，就像对话是整理过的交谈一样，思路有自然的节奏。所以当文章听起来好时，不仅仅是因为它有令人愉悦的节奏，而是因为它有自然的节奏。这意味着你可以把把节奏弄对作为把思想弄对的启发式方法。而且不仅仅是在原则上：好的作家通常会同时做这两件事。我经常甚至不区分这两个问题。我只是想，呃，这听起来不对；我在这里想说什么？[3]\n写作的声音原来更像飞机的形状，而不是汽车的颜色。如果它看起来好，就像凯利·约翰逊过去常说的，它会飞得好。\n然而，这只适用于用来发展思想的写作。当你在其他方面有了思想然后写作时，它就不适用了——例如，如果你建造了什么东西，或者进行了实验，然后写一篇关于它的论文。在这种情况下，思想更多地存在于作品中而不是写作中，所以即使思想是好的，写作也可能是坏的。教科书和流行调查中的写作可能很糟糕也是同样的原因：作者不是在发展思想，仅仅是在描述别人的思想。只有当你写作是为了发 …"
  },{
    "title": "如何不同意",
    "url": "/paul_graham/essays_zh/disagree/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何不同意 2008年3月\n网络正在将写作变成对话。二十年前，作家写作，读者阅读。网络让读者能够回应，而且他们确实越来越多地这样做——在评论串中、论坛上，以及他们自己的博客文章中。\n许多回应某事的人对此持不同意见。这是意料之中的。同意往往比不同意更能激发人的积极性。而且当你同意时，能说的话就更少了。你可以扩展作者所说的某些内容，但他可能已经探索了最有趣的含义。当你不同意时，你正在进入他可能没有探索过的领域。\n结果是有更多不同意见在进行，特别是按字数衡量。这并不意味着人们变得越来越愤怒。我们沟通方式的结构性变化足以解释这一点。但虽然驱动不同意见增加的不是愤怒，但不同意见的增加会使人们更愤怒存在危险。特别是在线时，在那里很容易说出你永远不会面对面说的话。\n如果我们都要更多地表达不同意见，我们应该小心地做好它。什么是做好不同意见？大多数读者能够分辨出纯粹的辱骂和仔细推理的驳斥之间的区别，但我认为给中间阶段命名会有帮助。所以这里尝试建立一个不同意见的层次结构：\nDH0. 辱骂。 这是最低形式的不同意见，可能也是最常见的。我们都见过这样的评论：u r a fag!!!!!!!!!!但重要的是要认识到，更有表达力的辱骂同样没有分量。像\u0026quot;作者是一个自命不凡的半吊子\u0026quot;这样的评论实际上只是\u0026quot;u r a fag\u0026quot;的做作版本。\nDH1. 人身攻击。 人身攻击不如纯粹的辱骂那么弱。它实际上可能有一些分量。例如，如果一位参议员写文章说参议员的薪水应该增加，有人可以回应：他当然会这么说。他是参议员。这不会驳斥作者的论点，但至少可能与案件相关。不过，这仍然是非常弱的不同意见形式。如果参议员的论点有问题，你应该说出来；如果没有，他是参议员又有什么区别？\n说作者缺乏写某个话题的权威性是人身攻击的一种变体——而且是特别无用的一种，因为好想法往往来自外人。问题是作者是否正确。如果他缺乏权威导致他犯了错误，指出那些错误。如果没有，那就不是问题。\nDH2. 回应语气。 再往上一层，我们开始看到对写作的回应，而不是对作者。这些中最低级的形式是不同意作者的语气。例如：我不敢相信作者如此轻率地否定智能设计。虽然比攻击作者好，但这仍然是弱的不同意见形式。作者是对是错比他的语气重要得多。特别是因为语气很难判断。对某个话题有芥蒂的人可能会被其他读者看起来中性的语气冒犯。\n所以如果你能对某件事说的最坏的话是批评它的语气，那你就没说什么。作者轻率，但是正确的？那比严肃但错误好。如果作者在某处不正确，说出来。\nDH3. 矛盾。 在这个阶段，我们终于得到对所说内容的回应，而不是如何说或谁说的。对论点的最低级回应形式只是陈述对立的情况，很少或没有支持证据。\n这通常与DH2陈述结合，如：我不敢相信作者如此轻率地否定智能设计。智能设计是合法的科学理论。矛盾有时可能有一些分量。有时仅仅看到对立情况明确陈述就足以看出它是正确的。但通常证据会有帮助。\nDH4. 反论证。 在第4级，我们达到第一种令人信服的不同意见形式：反论证。到此为止的形式通常可以忽略，因为证明不了什么。反论证可能证明一些东西。问题是，很难准确地说出是什么。\n反论证是矛盾加上推理和/或证据。当直接针对原始论点时，它可能是令人信服的。但不幸的是，反论证通常针对的是稍微不同的东西。两个热衷于争论某事的人实际上经常在争论两个不同的东西，这种情况比比皆是。有时他们甚至彼此同意，但如此沉迷于争吵以至于没有意识到。\n可能有正当理由反驳与原作者说的稍微不同的东西：当你觉得他们错过了问题的核心时。但当你这样做时，你应该明确说你在这样做。\nDH5. 驳斥。 最有说服力的不同意见形式是驳斥。它也是最罕见的，因为它是最费力的。确实，不同意见层次结构形成了一种金字塔，意义是越高你找到的实例越少。\n要驳斥某人，你可能必须引用他们。你必须找到一个\u0026quot;确凿的证据\u0026quot;，在你不同意的东西中的一个你认为错误的段落，然后解释为什么它是错误的。如果你找不到一个实际的引用来不同意，你可能在与一个稻草人争论。\n虽然驳斥通常需要引用，但引用并不一定意味着驳斥。一些作者引用他们不同意的东西的部分，以给予合法驳斥的外观，然后跟随低至DH3甚至DH0的回应。\nDH6. 驳斥中心论点。 驳斥的力量取决于你驳斥什么。最有力的不同意见形式是驳斥某人的中心论点。\n即使在DH5这样高的级别，我们有时仍然看到刻意的不诚实，比如当某人挑选出论点的次要点并驳斥那些。有时这样做的精神使它更像一种复杂形式的人身攻击，而不是实际的驳斥。例如，纠正某人的语法，或纠缠名称或数字的小错误。除非对立的论点实际上依赖这些东西，纠正它们的唯一目的是抹黑对手。\n真正驳斥某事需要一个人驳斥其中心论点，或至少其中之一。这意味着一个人必须明确承诺中心论点是什么。所以一个真正有效的驳斥看起来像这样：作者的主要论点似乎是x。正如他所说：\u0026lt;引用\u0026gt;但以下是错误的\u0026hellip;\u0026hellip;\n你指出错误的引用不需要是作者主要论点的实际陈述。驳斥它依赖的东西就足够了。\n意义是什么 现在我们有了一种分类不同意见形式的方法。这有什么好处？不同意见层次结构没有给我们提供的一种方法是选择赢家的方式。DH级别仅仅描述陈述的形式，而不是它是否正确。DH6回应仍然可能完全错误。\n但是虽然DH级别不设置_reply说服力的下限，但它们确实设置了上限。DH6回应可能没有说服力，但DH2或更低的回应总是没有说服力。\n分类不同意见形式的最明显优势是它将帮助人们评估他们所读的内容。特别是，它将帮助他们看穿智力不诚实的论证。雄辩的演讲者或作家可以仅仅通过使用有力的词语给予战胜对手的印象。实际上，这可能是煽动者的定义品质。通过给不同形式的不同意见命名，我们给批判性读者一根针来刺破这样的气球。\n这样的标签也可能帮助作家。大多数智力不诚实是无意的。反对他不同意的东西的语气的人可能相信他真的在说什么。缩小并看到他在不同意见层次结构上的当前位置可能激发他尝试提升到反论证或驳斥。\n但良好不同意见的最大好处不仅仅是它会使对话更好，而是它会使进行对话的人更快乐。如果你研究对话，你会发现DH1级别比DH6级别有更多的刻薄。当你有真正的观点要表达时，你不必刻薄。事实上，你不想刻薄。如果你有真实的话要说，刻薄只会妨碍。\n如果在不同意见层次结构上提升使人们不那么刻薄，那会使他们中的大多数更快乐。大多数人真的不喜欢刻薄；他们这样做是因为他们忍不住。\n感谢Trevor Blackwell和Jessica Livingston阅读本文的草稿。\n相关链接：\n不能说的话 散文的时代 意大利语翻译 俄语翻译 瑞典语翻译 西班牙语翻译 德语翻译 法语翻译 阿拉伯语翻译 芬兰语翻译 土耳其语翻译 ",
    "description": "",
    "tags": ["不同意","论证","交流","写作","批判性思维","逻辑","哲学","辩论"],
    "categories": [],
    "content": "→ English Version\n如何不同意 2008年3月\n网络正在将写作变成对话。二十年前，作家写作，读者阅读。网络让读者能够回应，而且他们确实越来越多地这样做——在评论串中、论坛上，以及他们自己的博客文章中。\n许多回应某事的人对此持不同意见。这是意料之中的。同意往往比不同意更能激发人的积极性。而且当你同意时，能说的话就更少了。你可以扩展作者所说的某些内容，但他可能已经探索了最有趣的含义。当你不同意时，你正在进入他可能没有探索过的领域。\n结果是有更多不同意见在进行，特别是按字数衡量。这并不意味着人们变得越来越愤怒。我们沟通方式的结构性变化足以解释这一点。但虽然驱动不同意见增加的不是愤怒，但不同意见的增加会使人们更愤怒存在危险。特别是在线时，在那里很容易说出你永远不会面对面说的话。\n如果我们都要更多地表达不同意见，我们应该小心地做好它。什么是做好不同意见？大多数读者能够分辨出纯粹的辱骂和仔细推理的驳斥之间的区别，但我认为给中间阶段命名会有帮助。所以这里尝试建立一个不同意见的层次结构：\nDH0. 辱骂。 这是最低形式的不同意见，可能也是最常见的。我们都见过这样的评论：u r a fag!!!!!!!!!!但重要的是要认识到，更有表达力的辱骂同样没有分量。像\u0026quot;作者是一个自命不凡的半吊子\u0026quot;这样的评论实际上只是\u0026quot;u r a fag\u0026quot;的做作版本。\nDH1. 人身攻击。 人身攻击不如纯粹的辱骂那么弱。它实际上可能有一些分量。例如，如果一位参议员写文章说参议员的薪水应该增加，有人可以回应：他当然会这么说。他是参议员。这不会驳斥作者的论点，但至少可能与案件相关。不过，这仍然是非常弱的不同意见形式。如果参议员的论点有问题，你应该说出来；如果没有，他是参议员又有什么区别？\n说作者缺乏写某个话题的权威性是人身攻击的一种变体——而且是特别无用的一种，因为好想法往往来自外人。问题是作者是否正确。如果他缺乏权威导致他犯了错误，指出那些错误。如果没有，那就不是问题。\nDH2. 回应语气。 再往上一层，我们开始看到对写作的回应，而不是对作者。这些中最低级的形式是不同意作者的语气。例如：我不敢相信作者如此轻率地否定智能设计。虽然比攻击作者好，但这仍然是弱的不同意见形式。作者是对是错比他的语气重要得多。特别是因为语气很难判断。对某个话题有芥蒂的人可能会被其他读者看起来中性的语气冒犯。\n所以如果你能对某件事说的最坏的话是批评它的语气，那你就没说什么。作者轻率，但是正确的？那比严肃但错误好。如果作者在某处不正确，说出来。\nDH3. 矛盾。 在这个阶段，我们终于得到对所说内容的回应，而不是如何说或谁说的。对论点的最低级回应形式只是陈述对立的情况，很少或没有支持证据。\n这通常与DH2陈述结合，如：我不敢相信作者如此轻率地否定智能设计。智能设计是合法的科学理论。矛盾有时可能有一些分量。有时仅仅看到对立情况明确陈述就足以看出它是正确的。但通常证据会有帮助。\nDH4. 反论证。 在第4级，我们达到第一种令人信服的不同意见形式：反论证。到此为止的形式通常可以忽略，因为证明不了什么。反论证可能证明一些东西。问题是，很难准确地说出是什么。\n反论证是矛盾加上推理和/或证据。当直接针对原始论点时，它可能是令人信服的。但不幸的是，反论证通常针对的是稍微不同的东西。两个热衷于争论某事的人实际上经常在争论两个不同的东西，这种情况比比皆是。有时他们甚至彼此同意，但如此沉迷于争吵以至于没有意识到。\n可能有正当理由反驳与原作者说的稍微不同的东西：当你觉得他们错过了问题的核心时。但当你这样做时，你应该明确说你在这样做。\nDH5. 驳斥。 最有说服力的不同意见形式是驳斥。它也是最罕见的，因为它是最费力的。确实，不同意见层次结构形成了一种金字塔，意义是越高你找到的实例越少。\n要驳斥某人，你可能必须引用他们。你必须找到一个\u0026quot;确凿的证据\u0026quot;，在你不同意的东西中的一个你认为错误的段落，然后解释为什么它是错误的。如果你找不到一个实际的引用来不同意，你可能在与一个稻草人争论。\n虽然驳斥通常需要引用，但引用并不一定意味着驳斥。一些作者引用他们不同意的东西的部分，以给予合法驳斥的外观，然后跟随低至DH3甚至DH0的回应。\nDH6. 驳斥中心论点。 驳斥的力量取决于你驳斥什么。最有力的不同意见形式是驳斥某人的中心论点。\n即使在DH5这样高的级别，我们有时仍然看到刻意的不诚实，比如当某人挑选出论点的次要点并驳斥那些。有时这样做的精神使它更像一种复杂形式的人身攻击，而不是实际的驳斥。例如，纠正某人的语法，或纠缠名称或数字的小错误。除非对立的论点实际上依赖这些东西，纠正它们的唯一目的是抹黑对手。\n真正驳斥某事需要一个人驳斥其中心论点，或至少其中之一。这意味着一个人 …"
  },{
    "title": "如何不死",
    "url": "/paul_graham/essays_zh/die/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何不死 2007年8月\n（这是我在Y Combinator夏季最后一次晚餐上的演讲。通常我们最后一次晚餐没有演讲者；这更像是一个聚会。但如果我能挽救一些创业公司免于可预防的死亡，破坏气氛似乎值得。所以在最后一刻我准备了这个相当严峻的演讲。我并不是要把它作为一篇散文；我写下来是因为晚餐前只有两个小时，而我写作时思考最快。）\n几天前我告诉一位记者，我们预计资助的公司中约有三分之一会成功。实际上我是在保守估计。我希望可能高达一半。如果我们能实现50%的成功率，那不是很棒吗？\n另一种说法是你们中有一半会死。这样说的话，听起来一点都不好。事实上，当你思考这个问题时有点奇怪，因为我们对成功的定义是创始人变得富有。如果我们资助的创业公司中有一半成功，那么你们中有一半会变得富有，另一半将一无所获。\n如果你能避免死亡，你就会变得富有。这听起来像是个笑话，但实际上是对典型创业公司中发生的事情的相当好的描述。它确实描述了Viaweb发生的事情。我们避免了死亡直到变得富有。\n那也是非常接近的。当我们访问雅虎谈论被收购时，我们不得不中断一切，借用他们的一个会议室来安抚一个投资者，他正要退出我们需要维持生存的新一轮融资。所以即使在变得富有的过程中，我们也在与死神搏斗。\n你可能听说过运气是机会遇上准备的那句名言。现在你已经做好了准备。你到目前为止所做的工作，实际上让你处于一个幸运的位置：你现在可以通过不让你的公司死亡而变得富有。这比大多数人拥有的要多。那么让我们谈谈如何不死。\n我们现在已经做了五次，我们看到了一群创业公司死亡。到目前为止大约有10家。我们不太清楚它们死亡时发生了什么，因为它们通常不会大声而英勇地死亡。它们大多爬到某个地方然后死亡。\n对我们来说，即将到来的毁灭的主要迹象是当我们没有收到你的消息时。当我们几个月没有收到来自或关于某个创业公司的消息时，这是个坏迹象。如果我们发送电子邮件询问情况，而他们不回复，那是个非常糟糕的迹象。到目前为止，这是死亡的100%准确预测因素。\n而如果一个创业公司定期做新交易和发布，并且要么给我们发邮件要么出现在YC活动中，他们可能会生存下来。\n我意识到这听起来很天真，但这种联系可能双向起作用。也许如果你能安排让我们继续听到你的消息，你就不会死。\n这听起来可能并不那么天真。你可能已经注意到，每周二与我们和其他创始人一起晚餐让你比其他情况下完成更多工作，因为每次晚餐都是一个小型演示日。每次晚餐都是一种截止日期。所以仅仅保持与我们定期联系的限制就会推动你让事情发生，否则你会不好意思地告诉我们自从上次谈话以来你还没有做任何新事情。\n如果这有效，那将是一个惊人的技巧。如果仅仅通过与我们保持定期联系你就能变得富有，那将相当酷。这听起来很疯狂，但这很可能会有效。\n一个变体是与其他YC资助的创业公司保持联系。现在旧金山有一个完整的社区。如果你搬到那里，让你整个夏天更努力工作的同辈压力将继续发挥作用。\n当创业公司死亡时，官方的死因总是要么资金耗尽，要么关键创始人退出。通常两者同时发生。但我认为根本原因通常是他们变得士气低落。你很少听说一个创业公司夜以继日地工作做交易和推出新功能，却因为他们无法支付账单而ISP拔掉他们的服务器而死亡。\n创业公司很少在击键中途死亡。所以继续打字！\n如果这么多创业公司变得士气低落并失败，而仅仅坚持下去就能变得富有，你必须假设经营创业公司可能会让人士气低落。这当然是真实的。我曾经经历过，这就是为什么我再也没有做过另一个创业公司。创业公司的低点简直令人难以置信地低。我敢打赌即使是谷歌也有看起来毫无希望的时刻。\n知道这一点应该会有帮助。如果你知道有时会感觉很糟糕，那么当感觉糟糕时你不会想\u0026quot;哎呀，这感觉太糟糕了，我放弃了\u0026quot;。每个人都会有这种感觉。如果你坚持下去，事情可能会好转。人们用来描述创业公司感觉的比喻至少是过山车而不是溺水。你不会一直下沉；低谷后有高潮。\n创业公司中另一种看起来令人担忧但实际上正常的感觉是你正在做的事情不起作用的感觉。你可以预期会有这种感觉的原因是你做的事情可能不会起作用。创业公司几乎第一次就做对的情况很少见。更常见的是你推出一些东西，而没有人关心。当这种情况发生时，不要假设你失败了。这对创业公司来说是正常的。但不要无所事事地坐着。迭代。\n我喜欢Paul Buchheit的建议，尝试制作至少有人真正热爱的东西。只要你制作了一些用户为之狂热的东西，你就走在正确的轨道上。即使有一小群真正爱你的人对你的士气也有好处，而创业公司靠士气运行。而且它会告诉你应该关注什么。他们喜欢你什么？你能在这方面做得更多吗？你在哪里能找到更多喜欢那种事情的人？只要你有一群爱你的核心用户，你所要做的就是扩大它。可能需要一段时间，但只要你不断努力，最终你会成功。Blogger和Delicious都做到了这一点。两者都花了数年才成功。但两者都从一个狂热忠诚的用户核心开始，Evan和Joshua所要做的就是逐步扩大这个核心。Wufoo现在也在同样的轨迹上。\n所以当你发布一些东西而似乎没有人关心时，更仔细地看。是否有零个用户真正爱你，或者至少有一些小组这样？很有可能会是零。在这种情况下，调整你的产品再试一次。你们每个人都在一个包含至少一个成功排列的空间中工作。如果你不断尝试，你会找到它的。\n让我提一些不该做的事情。最不该做的事情是做其他事情。如果你发现自己说一句以\u0026quot;但我们要继续为创业公司工作\u0026quot;结尾的句子，你就大麻烦了。Bob要去读研究生了，但我们要继续为创业公司工作。我们要搬回明尼苏达州，但我们要继续为创业公司工作。我们要接一些咨询项目，但我们要继续为创业公司工作。你不妨直接把这些翻译成\u0026quot;我们放弃了创业公司，但我们不愿意对自己承认\u0026quot;，因为大多数时候这就是它的意思。创业公司是如此困难，以至于做它不能以\u0026quot;但\u0026quot;开头。\n特别是，不要去读研究生，也不要开始其他项目。分心对创业公司是致命的。去（或回）学校是死亡的巨大预测因素，因为除了分心，它还给了你一些说你正在做的事情。如果你只在做创业公司，那么如果创业公司失败了，你就失败了。如果你在读研究生而你的创业公司失败了，你以后可以说\u0026quot;哦，是的，我在读研究生时有个创业公司，但没有起色。\u0026quot;\n你不能对你唯一的工作使用诸如\u0026quot;没有起色\u0026quot;这样的委婉语。人们不会让你这么做。\n我们在Y Combinator工作过程中发现的最有趣的事情之一是，创始人更害怕看起来不好，而不是希望获得数百万美元。所以如果你想获得数百万美元，把自己置于失败将是公开和羞辱的境地。\n当我们第一次见到Octopart的创始人时，他们看起来非常聪明，但不是成功的很好赌注，因为他们似乎不是特别投入。两位创始人中有一位还在读研究生。这是通常的情况：如果创业公司看起来有起色，他就会退学。从那时起，他不仅退学了，还全身出现在《新闻周刊》上，胸前印着\u0026quot;亿万富翁\u0026quot;这个词。他现在不能失败了。他认识的每个人都看到了那张照片。高中时拒绝过他的女孩们都看到了。他妈妈可能把它贴在冰箱上。现在失败将是难以想象的羞辱。此时他承诺要战斗到底。\n我希望我们资助的每个创业公司都能出现在一篇描述他们为下一代亿万富翁的《新闻周刊》文章中，因为那样他们中没有人能够放弃。成功率将是90%。我不是在开玩笑。\n当我们第一次认识Octoparts时，他们是轻松愉快的人。现在当我们与他们交谈时，他们看起来严峻而坚定。电子零件分销商试图挤压他们以保持垄断定价。（如果你觉得2007年人们还从厚厚的纸质目录中订购电子零件很奇怪，那是有原因的。分销商希望防止在线定价带来的透明度。）我感觉有点不好，我们把这些人从轻松愉快转变为严峻而坚定。但这是伴随而来的。如果创业公司成功，你会获得数百万美元，而你不会仅仅通过要求就得到那种钱。你必须假设它需要一定程度的痛苦。\n无论Octoparts的情况变得多么艰难，我预测他们会成功。他们可能必须把自己变成完全不同的东西，但他们不会只是爬走然后死亡。他们聪明；他们在一个有前途的领域工作；他们只是不能放弃。\n你们大家已经具备了前两个条件。你们都聪明，都在为有前途的想法工作。你最终是归于生者还是死者取决于第三个因素，不放弃。\n所以我现在告诉你：糟糕的事情要来了。创业公司总是如此。从发布到流动性没有发生某种灾难而幸存的几率是千分之一。所以不要士气低落。当灾难袭来时，只要对自己说，好的，这就是Paul谈论的事情。他说要做什么？哦，是的。不要放弃。\n相关链接：\n日语翻译 阿拉伯语翻译 ",
    "description": "",
    "tags": ["创业公司","生存","坚持","创业","动机","失败","成功","建议"],
    "categories": [],
    "content": "→ English Version\n如何不死 2007年8月\n（这是我在Y Combinator夏季最后一次晚餐上的演讲。通常我们最后一次晚餐没有演讲者；这更像是一个聚会。但如果我能挽救一些创业公司免于可预防的死亡，破坏气氛似乎值得。所以在最后一刻我准备了这个相当严峻的演讲。我并不是要把它作为一篇散文；我写下来是因为晚餐前只有两个小时，而我写作时思考最快。）\n几天前我告诉一位记者，我们预计资助的公司中约有三分之一会成功。实际上我是在保守估计。我希望可能高达一半。如果我们能实现50%的成功率，那不是很棒吗？\n另一种说法是你们中有一半会死。这样说的话，听起来一点都不好。事实上，当你思考这个问题时有点奇怪，因为我们对成功的定义是创始人变得富有。如果我们资助的创业公司中有一半成功，那么你们中有一半会变得富有，另一半将一无所获。\n如果你能避免死亡，你就会变得富有。这听起来像是个笑话，但实际上是对典型创业公司中发生的事情的相当好的描述。它确实描述了Viaweb发生的事情。我们避免了死亡直到变得富有。\n那也是非常接近的。当我们访问雅虎谈论被收购时，我们不得不中断一切，借用他们的一个会议室来安抚一个投资者，他正要退出我们需要维持生存的新一轮融资。所以即使在变得富有的过程中，我们也在与死神搏斗。\n你可能听说过运气是机会遇上准备的那句名言。现在你已经做好了准备。你到目前为止所做的工作，实际上让你处于一个幸运的位置：你现在可以通过不让你的公司死亡而变得富有。这比大多数人拥有的要多。那么让我们谈谈如何不死。\n我们现在已经做了五次，我们看到了一群创业公司死亡。到目前为止大约有10家。我们不太清楚它们死亡时发生了什么，因为它们通常不会大声而英勇地死亡。它们大多爬到某个地方然后死亡。\n对我们来说，即将到来的毁灭的主要迹象是当我们没有收到你的消息时。当我们几个月没有收到来自或关于某个创业公司的消息时，这是个坏迹象。如果我们发送电子邮件询问情况，而他们不回复，那是个非常糟糕的迹象。到目前为止，这是死亡的100%准确预测因素。\n而如果一个创业公司定期做新交易和发布，并且要么给我们发邮件要么出现在YC活动中，他们可能会生存下来。\n我意识到这听起来很天真，但这种联系可能双向起作用。也许如果你能安排让我们继续听到你的消息，你就不会死。\n这听起来可能并不那么天真。你可能已经注意到，每周二与我们和其他创始人一起晚餐让你比其他情况下完成更多工作，因为每次晚餐都是一个小型演示日。每次晚餐都是一种截止日期。所以仅仅保持与我们定期联系的限制就会推动你让事情发生，否则你会不好意思地告诉我们自从上次谈话以来你还没有做任何新事情。\n如果这有效，那将是一个惊人的技巧。如果仅仅通过与我们保持定期联系你就能变得富有，那将相当酷。这听起来很疯狂，但这很可能会有效。\n一个变体是与其他YC资助的创业公司保持联系。现在旧金山有一个完整的社区。如果你搬到那里，让你整个夏天更努力工作的同辈压力将继续发挥作用。\n当创业公司死亡时，官方的死因总是要么资金耗尽，要么关键创始人退出。通常两者同时发生。但我认为根本原因通常是他们变得士气低落。你很少听说一个创业公司夜以继日地工作做交易和推出新功能，却因为他们无法支付账单而ISP拔掉他们的服务器而死亡。\n创业公司很少在击键中途死亡。所以继续打字！\n如果这么多创业公司变得士气低落并失败，而仅仅坚持下去就能变得富有，你必须假设经营创业公司可能会让人士气低落。这当然是真实的。我曾经经历过，这就是为什么我再也没有做过另一个创业公司。创业公司的低点简直令人难以置信地低。我敢打赌即使是谷歌也有看起来毫无希望的时刻。\n知道这一点应该会有帮助。如果你知道有时会感觉很糟糕，那么当感觉糟糕时你不会想\u0026quot;哎呀，这感觉太糟糕了，我放弃了\u0026quot;。每个人都会有这种感觉。如果你坚持下去，事情可能会好转。人们用来描述创业公司感觉的比喻至少是过山车而不是溺水。你不会一直下沉；低谷后有高潮。\n创业公司中另一种看起来令人担忧但实际上正常的感觉是你正在做的事情不起作用的感觉。你可以预期会有这种感觉的原因是你做的事情可能不会起作用。创业公司几乎第一次就做对的情况很少见。更常见的是你推出一些东西，而没有人关心。当这种情况发生时，不要假设你失败了。这对创业公司来说是正常的。但不要无所事事地坐着。迭代。\n我喜欢Paul Buchheit的建议，尝试制作至少有人真正热爱的东西。只要你制作了一些用户为之狂热的东西，你就走在正确的轨道上。即使有一小群真正爱你的人对你的士气也有好处，而创业公司靠士气运行。而且它会告诉你应该关注什么。他们喜欢你什么？你能在这方面做得更多吗？你在哪里能找到更多喜欢那种事情的人？只要你有一群爱你的核心用户，你所要做的就是扩大它。可能需要一段时间，但只要你不断努力，最终你会成 …"
  },{
    "title": "如何为创业公司融资",
    "url": "/paul_graham/essays_zh/startupfunding/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何为创业公司融资 2005年11月\n风险投资就像齿轮一样运作。典型的创业公司会经历多轮融资，在每一轮中，你希望获得足够的资金来达到可以换到下一档的速度。\n很少有创业公司能完全做到这一点。许多公司资金不足。少数公司资金过多，这就像试图用三档起步一样。\n我认为帮助创始人更好地理解融资会很有用——不仅仅是机制，还有投资者在想什么。最近我惊讶地意识到，我们在创业公司面临的最糟糕问题都不是来自竞争对手，而是来自投资者。相比之下，应对竞争对手很容易。\n我并不是说我们的投资者只是我们的累赘。例如，他们在谈判交易方面很有帮助。我的意思是，与投资者的冲突特别令人讨厌。竞争对手会打你的下巴，但投资者会抓住你的要害。\n显然，我们的情况并不少见。如果投资者问题是创业公司最大的威胁之一，那么管理他们就是创始人需要学习的最重要技能之一。\n让我们从谈论创业公司融资的五个来源开始。然后我们将追踪一个假设的（非常幸运的）创业公司如何通过连续几轮融资换档的过程。\n朋友和家人 许多创业公司的第一笔资金来自朋友和家人。例如，Excite就是这样做的：创始人大学毕业后，向父母借了15,000美元来创办公司。在一些兼职工作的帮助下，他们维持了18个月。\n如果你的朋友或家人恰好很富有，他们和天使投资者之间的界限就会变得模糊。在Viaweb，我们从我们的朋友Julian那里获得了第一笔10,000美元的种子资金，但他相当富有，很难说应该把他归类为朋友还是天使。他还是一名律师，这很好，因为这意味着我们不必用这笔初始的小额资金支付法律账单。\n从朋友和家人那里筹集资金的好处是他们很容易找到。你已经认识他们。主要有三个缺点：你把商业和个人生活混在一起；他们可能没有天使或风险投资公司那样良好的人脉；他们可能不是认证投资者，这可能会在以后复杂化你的生活。\n美国证券交易委员会将\u0026quot;认证投资者\u0026quot;定义为拥有超过100万美元流动资产或年收入超过20万美元的人。如果公司的股东都是认证投资者，监管负担要低得多。一旦你从公众那里获得资金，你在行动上就会受到更多限制。[1]\n如果任何投资者不是认证投资者，创业公司的生活在法律上会更复杂。在首次公开募股中，这可能不仅是增加费用的问题，还可能改变结果。我问过的一个律师说：当公司上市时，证券交易委员会将仔细研究公司之前的所有股票发行，并要求其立即采取行动纠正任何过去的证券违法行为。这些补救行动可能会延迟、阻碍甚至扼杀IPO。当然，任何给定创业公司进行IPO的几率都很小。但并不像看起来那么小。许多最终上市的创业公司最初看起来并不可能。（谁能想到沃兹尼亚克和乔布斯在业余时间出售微计算机计划的公司的IPO会成为十年中最大的IPO之一？）创业公司的很大一部分价值在于这个微小的概率乘以巨大的结果。\n我没有向父母要种子资金并不是因为他们不是认证投资者。当我们创办Viaweb时，我不知道认证投资者的概念，也没有停下来考虑投资者人脉的价值。我没有向父母要钱的原因是我不想让他们损失这些钱。\n咨询 为创业公司融资的另一种方式是找份工作。最好的工作是咨询项目，你可以在其中构建你想作为创业公司销售的任何软件。然后你可以逐渐将自己从咨询公司转变为产品公司，让你的客户支付你的开发费用。\n对于有孩子的人来说，这是一个好计划，因为它消除了创业公司的大部分风险。你永远不会有没有收入的时候。然而，风险和回报通常是成正比的：你应该期望一个减少创业公司风险的计划也会降低平均回报。在这种情况下，你用降低的财务风险换取了你的公司不会成功作为创业公司的风险增加。\n但咨询公司本身不就是创业公司吗？不，通常不是。一个公司要成为创业公司，必须不仅仅是小型和新成立的。美国有数百万小企业，但只有几千家是创业公司。要成为创业公司，公司必须是产品业务，而不是服务业务。我的意思不是说它必须制造物理产品，而是它必须有一种产品卖给许多人，而不是为个别客户做定制工作。定制工作无法扩展。要成为创业公司，你需要成为卖出百万份歌曲的乐队，而不是通过在个别婚礼和成人礼上表演赚钱的乐队。\n咨询的问题在于客户有一个令人讨厌的习惯，就是给你打电话。大多数创业公司在失败的边缘运作，而必须处理客户的干扰可能会让你越过边缘。特别是如果你的竞争对手可以全职工作，只做创业公司。\n所以如果你走咨询路线，你必须非常自律。你必须积极工作，防止你的公司成长为\u0026quot;杂草树\u0026quot;，依赖这种容易但利润率低的资金来源。[2]\n实际上，咨询最大的危险可能是它给了你失败的借口。在创业公司中，就像在研究生院中一样，最终驱动你的很多事情是你家人和朋友的期望。一旦你开始创业公司并告诉每个人这就是你要做的事情，你现在就走上了\u0026quot;致富或破产\u0026quot;的道路。你现在必须变得富有，否则你就失败了。\n对失败的恐惧是一种非常强大的力量。通常它会阻止人们开始事情，但一旦你公布了某种雄心壮志，它就会改变方向并开始对你有利。我认为用这种不可抗拒的力量对抗成为富人这个稍微不可移动的目标是相当聪明的一招。如果你所说的雄心仅仅是创办一个有一天会变成创业公司的咨询公司，你就不会有这种力量推动你。\n作为开发产品的一种方式，咨询的一个优势是你知道你正在制造至少一个客户想要的东西。但如果你有创办创业公司的能力，你应该有足够的远见，不需要这种拐杖。\n天使投资者 天使是富有的个人。这个词最初用于百老汇戏剧的支持者，但现在适用于一般的个人投资者。在科技领域赚钱的天使更受欢迎，原因有二：他们理解你的处境，他们也是人脉和建议的来源。\n人脉和建议可能比金钱更重要。当del.icio.us从投资者那里获得资金时，他们从Tim O\u0026rsquo;Reilly等人那里获得了资金。他投入的金额相比领导这轮的风险投资公司来说很小，但Tim是一个聪明而有影响力的人，让他站在你这边是好事。\n你可以用来自咨询或朋友和家人的钱做任何你想做的事。有了天使，我们现在谈论的是适当的风险投资，所以是时候介绍退出策略的概念了。年轻的潜在创始人常常惊讶地发现投资者期望他们要么出售公司，要么上市。原因是投资者需要收回他们的资本。他们只会考虑有退出策略的公司——意味着那些可能被收购或上市的公司。\n这听起来并不像听起来那么自私。大型私人科技公司很少。那些没有失败的似乎都会被收购或上市。原因是员工也是投资者——他们的时间投资者——他们也希望能够套现。如果你的竞争对手为员工提供可能让他们致富的股票期权，而你明确表示你计划保持私人控股，你的竞争对手会获得最优秀的人才。因此，\u0026ldquo;退出\u0026quot;的原则不仅仅是投资者强加给创业公司的，而是作为创业公司的意义的一部分。\n我们现在需要介绍的另一个概念是估值。当有人购买一家公司的股份时，这隐含地为其建立了价值。如果有人为一家公司的10%支付20,000美元，理论上该公司价值200,000美元。我说\u0026quot;理论上\u0026quot;是因为在早期投资中，估值是巫术。随着公司变得更加成熟，其估值更接近实际市场价值。但在一个新成立的创业公司中，估值数字只是每个人各自贡献的人工产物。\n创业公司经常通过让以低估值投资的投资者来\u0026quot;支付\u0026quot;那些将在某种程度上帮助公司的投资者。如果我有一个创业公司，而史蒂夫·乔布斯想投资其中，我会以10美元的价格把股票给他，只是为了能够吹嘘他是投资者。不幸的是，为每个投资者调整公司的估值是不实际的（如果不是非法的话）。创业公司的估值应该随时间上升。所以如果你要向知名天使出售廉价股票，要早点做，当公司自然有低估值时。\n一些天使投资者组成辛迪加。任何人们创办创业公司的城市都会有一个或多个这样的组织。在波士顿，最大的是Common Angels。在湾区，是Band of Angels。你可以通过Angel Capital Association找到你附近的小组。[3]然而，大多数天使投资者不属于这些组织。事实上，天使越知名，他们属于组织的可能性就越小。\n一些天使组织向你收费来向他们推销你的想法。不用说，你永远不应该这样做。\n从个人天使那里投资，而不是通过天使组织或投资公司，危险之一是他们的声誉保护较少。知名风险投资公司不会太过分地坑你，因为如果消息传出去，其他创始人会避开他们。对于个人天使，你没有这种保护，我们在自己的创业公司中痛苦地发现了这一点。在许多创业公司的生活中，会有一个时刻你处于投资者的 mercy——当你没钱时，唯一能获得更多资金的地方是你的现有投资者。当我们陷入这样的困境时，我们的投资者利用了这一点，而品牌风险投资公司可能不会这样做。\n然而，天使有一个相应的优势：他们也不受风险投资公司所有规则的约束。因此他们可以，例如，允许创始人通过在融资轮中向投资者直接出售一些股票来部分套现。我认为这将变得越来越普遍；普通创始人渴望这样做，而出售，比如说，价值五十万美元的股票不会像风险投资公司担心的那样导致大多数创始人对业务的投入减少。\n那些试图坑我们的天使也让我们这样做，所以总的来说我感激而不是愤怒。（就像在家庭中，创始人和投资者之间的关系可能是复杂的。）\n找到天使投资者的最佳方式是通过个人介绍。你可以尝试冷呼叫你附近的天使组织，但天使像风险投资公司一样，会更注意他们尊重的人推荐的机会。\n与天使的交易条款差异很大。没有普遍接受的标准。有时天使的交易条款和风险投资公司一样可怕。其他天使，特别是在最早阶段，可能会基于两页协议进行投资。\n偶尔投资的天使可能自己也不知道他们想要什么条款。他们只是想投资这家创业公司。他们想要什么样的反稀释保护？他们怎么知道。在这种情况下，交易条款往往是随机的：天使让他的律师创建一个普通协议，条款最终成为律师认为普通的任何东西。这实际上通常意味着，他在公司里找到的任何现有协议。（很少有法律文件是从头开始创建的。）\n这些标准文件对小创业公司来说是个问题，因为它们往往会成长为所有先前文件的总和。我知道一家创业公司从天使投资者那里得到了相当于五百磅握手的东西：决定投资后，天使向他们提供了70页的协议。创业公司没有足够的钱支付律师来阅读它，更不用说谈判条款，所以交易失败了。\n这个问题的一个解决方案是让创业公司的律师起草协议，而不是天使的。一些天使可能会对此犹豫，但其他人可能会欢迎它。\n没有经验的天使在到了写大额支票的时候常常会变冷。在我们的创业公司中，初始轮中的两个天使之一花了几个月才付钱给我们，而且是在我们的律师反复催促之后才做的，幸运的是，他的律师也是我们的律师。\n投资者延迟的原因很明显。投资创业公司是有风险的！当一家公司只有两个月大时，你每等待一天，你就会获得关于其轨迹的1.7%的更多信息。但投资者已经在股票的低价中得到了这种风险的补偿，所以延迟是不公平的。\n不管是否公平，如果你让他们，投资者就会这样做。即使是风险投资公司也会这样做。融资延迟对创始人来说是一个很大的干扰，他们应该专注于自己的公司，而不是担心投资者。创业公司该怎么办？对于投资者和收购者，你唯一的筹码是竞争。如果投资者知道你还有其他投资者排队，他会更急于成交——不仅因为他会担心失去交易，而且因为如果其他投资者感兴趣，你一定值得投资。收购也是如此。在有人想要购买你之前，没有人想购买你，然后每个人都想购买你。\n成交的关键是永远不要停止寻找替代方案。当投资者说想投资你，或者收购者说想购买你时，在拿到支票之前不要相信。当投资者说yes时，你的自然倾向是放松并回去写代码。唉，你不能；你必须继续寻找更多投资者，即使只是为了让这个投资者行动。[4]\n种子融资公司 种子公司像天使一样，在早期阶段投资相对较少的金额，但像风险投资公司一样，它们是做这个业务的公司，而不是偶尔进行投资的个人。\n直到现在，几乎所有的种子公司都是所谓的\u0026quot;孵化器\u0026rdquo;，所以Y Combinator也被称为孵化器，尽管我们唯一的共同点是我们都在最早阶段投资。\n根据国家商业孵化器协会的数据，美国大约有800个孵化器。这是一个惊人的数字，因为我认识很多创业公司的创始人，我想不起有一个是在孵化器开始的。\n什么是孵化器？我自己也不确定。定义性的品质似乎你在他们的空间工作。这就是\u0026quot;孵化器\u0026quot;这个名字的由来。他们在其他方面似乎差异很大。一个极端是某种政治分肥项目，一个城镇从州政府获得资金将空置建筑翻新为\u0026quot;高科技孵化器\u0026quot;，好像仅仅是缺乏合适的办公空间阻止了该镇成为创业公司中心。另一个极端是像Idealab这样的地方，它在内部为新创业公司产生想法，并雇佣人们为他们工作。\n典型的泡沫时代的孵化器，现在大多数似乎已经死了，像风险投资公司，除了它们在资助的创业公司中扮演更大的角色。除了在他们的空间工作之外，你应该使用他们的办公室职员、律师、会计师等等。\n而孵化器倾向于（或倾向于）比风险投资公司施加更多控制，Y Combinator施加更少。我们认为创业公司在自己的场所运作更好，无论多么糟糕，而不是在投资者的办公室。所以我们不断被称为\u0026quot;孵化器\u0026quot;是很烦人的，但也许是不可避免的，因为目前只有我们一个，还没有词来形容我们是什么。如果非得被称为什么，显而易见的名字是\u0026quot;excubator\u0026quot;。（如果考虑到它意味着我们使人们能够逃离小隔间，这个名字就更可辩解了。）\n因为种子公司是公司而不是个人，所以接触他们比接触天使更容易。只需去他们的网站并向他们发送电子邮件。个人介绍的重要性各不相同，但比天使或风险投资公司少。\n种子公司是公司这一事实也意味着投资过程更加标准化。（天使组织通常也是如此。）种子公司可能会有他们为资助的每个创业公司使用的设定交易条款。交易条款是标准的事实并不意味着它们对你有利，但如果其他创业公司签署了相同的协议并且事情进展顺利，这是一个条款合理的标志。\n种子公司与天使和风险投资公司的不同之处在于他们专门在最早阶段投资——通常当公司还只是一个想法时。天使甚至风险投资公司偶尔也会这样做，但他们也在后期阶段投资。\n早期阶段的问题是不同的。例如，在最初几个月，创业公司可能会完全重新定义他们的想法。所以种子投资者通常更关心人而不是想法。这对所有风险投资都是如此，但在种子阶段尤其如此。\n像风险投资公司一样，种子公司的优势之一是他们提供的建议。但因为种子公司在更早的阶段运作，他们需要提供不同类型的建议。例如，种子公司应该能够提供关于如何接触风险投资公司的建议，这显然是风险投资公司不需要做的；而风险投资公司应该能够提供关于如何雇佣\u0026quot;高管团队\u0026quot;的建议，这在种子阶段不是问题。\n在最早阶段，很多问题是技术性的，所以种子公司应该能够在技术和商业问题上都提供帮助。\n种子公司和天使投资者通常希望在创业公司的初始阶段投资，然后将他们交给风险投资公司进行下一轮融资。然而，创业公司偶尔会从种子融资直接进入收购，我预计这种情况会变得越来越普遍。\n",
    "description": "",
    "tags": ["风险投资","融资","创业公司","投资者","企业家精神"],
    "categories": [],
    "content": "→ English Version\n如何为创业公司融资 2005年11月\n风险投资就像齿轮一样运作。典型的创业公司会经历多轮融资，在每一轮中，你希望获得足够的资金来达到可以换到下一档的速度。\n很少有创业公司能完全做到这一点。许多公司资金不足。少数公司资金过多，这就像试图用三档起步一样。\n我认为帮助创始人更好地理解融资会很有用——不仅仅是机制，还有投资者在想什么。最近我惊讶地意识到，我们在创业公司面临的最糟糕问题都不是来自竞争对手，而是来自投资者。相比之下，应对竞争对手很容易。\n我并不是说我们的投资者只是我们的累赘。例如，他们在谈判交易方面很有帮助。我的意思是，与投资者的冲突特别令人讨厌。竞争对手会打你的下巴，但投资者会抓住你的要害。\n显然，我们的情况并不少见。如果投资者问题是创业公司最大的威胁之一，那么管理他们就是创始人需要学习的最重要技能之一。\n让我们从谈论创业公司融资的五个来源开始。然后我们将追踪一个假设的（非常幸运的）创业公司如何通过连续几轮融资换档的过程。\n朋友和家人 许多创业公司的第一笔资金来自朋友和家人。例如，Excite就是这样做的：创始人大学毕业后，向父母借了15,000美元来创办公司。在一些兼职工作的帮助下，他们维持了18个月。\n如果你的朋友或家人恰好很富有，他们和天使投资者之间的界限就会变得模糊。在Viaweb，我们从我们的朋友Julian那里获得了第一笔10,000美元的种子资金，但他相当富有，很难说应该把他归类为朋友还是天使。他还是一名律师，这很好，因为这意味着我们不必用这笔初始的小额资金支付法律账单。\n从朋友和家人那里筹集资金的好处是他们很容易找到。你已经认识他们。主要有三个缺点：你把商业和个人生活混在一起；他们可能没有天使或风险投资公司那样良好的人脉；他们可能不是认证投资者，这可能会在以后复杂化你的生活。\n美国证券交易委员会将\u0026quot;认证投资者\u0026quot;定义为拥有超过100万美元流动资产或年收入超过20万美元的人。如果公司的股东都是认证投资者，监管负担要低得多。一旦你从公众那里获得资金，你在行动上就会受到更多限制。[1]\n如果任何投资者不是认证投资者，创业公司的生活在法律上会更复杂。在首次公开募股中，这可能不仅是增加费用的问题，还可能改变结果。我问过的一个律师说：当公司上市时，证券交易委员会将仔细研究公司之前的所有股票发行，并要求其立即采取行动纠正任何过去的证券违法行为。这些补救行动可能会延迟、阻碍甚至扼杀IPO。当然，任何给定创业公司进行IPO的几率都很小。但并不像看起来那么小。许多最终上市的创业公司最初看起来并不可能。（谁能想到沃兹尼亚克和乔布斯在业余时间出售微计算机计划的公司的IPO会成为十年中最大的IPO之一？）创业公司的很大一部分价值在于这个微小的概率乘以巨大的结果。\n我没有向父母要种子资金并不是因为他们不是认证投资者。当我们创办Viaweb时，我不知道认证投资者的概念，也没有停下来考虑投资者人脉的价值。我没有向父母要钱的原因是我不想让他们损失这些钱。\n咨询 为创业公司融资的另一种方式是找份工作。最好的工作是咨询项目，你可以在其中构建你想作为创业公司销售的任何软件。然后你可以逐渐将自己从咨询公司转变为产品公司，让你的客户支付你的开发费用。\n对于有孩子的人来说，这是一个好计划，因为它消除了创业公司的大部分风险。你永远不会有没有收入的时候。然而，风险和回报通常是成正比的：你应该期望一个减少创业公司风险的计划也会降低平均回报。在这种情况下，你用降低的财务风险换取了你的公司不会成功作为创业公司的风险增加。\n但咨询公司本身不就是创业公司吗？不，通常不是。一个公司要成为创业公司，必须不仅仅是小型和新成立的。美国有数百万小企业，但只有几千家是创业公司。要成为创业公司，公司必须是产品业务，而不是服务业务。我的意思不是说它必须制造物理产品，而是它必须有一种产品卖给许多人，而不是为个别客户做定制工作。定制工作无法扩展。要成为创业公司，你需要成为卖出百万份歌曲的乐队，而不是通过在个别婚礼和成人礼上表演赚钱的乐队。\n咨询的问题在于客户有一个令人讨厌的习惯，就是给你打电话。大多数创业公司在失败的边缘运作，而必须处理客户的干扰可能会让你越过边缘。特别是如果你的竞争对手可以全职工作，只做创业公司。\n所以如果你走咨询路线，你必须非常自律。你必须积极工作，防止你的公司成长为\u0026quot;杂草树\u0026quot;，依赖这种容易但利润率低的资金来源。[2]\n实际上，咨询最大的危险可能是它给了你失败的借口。在创业公司中，就像在研究生院中一样，最终驱动你的很多事情是你家人和朋友的期望。一旦你开始创业公司并告诉每个人这就是你要做的事情，你现在就走上了\u0026quot;致富或破产\u0026quot;的道路。你现在必须变得富有，否则你就失败了。\n对失败 …"
  },{
    "title": "如何做你热爱的事情",
    "url": "/paul_graham/essays_zh/love/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何做你热爱的事情 2006年1月\n要把事情做好，你必须喜欢它。这个想法并不新颖。我们把它总结成四个词：\u0026ldquo;做你热爱的事情。\u0026ldquo;但仅仅告诉人们这是不够的。做你热爱的事情是复杂的。\n这个想法对我们大多数人在童年时学到的东西来说是陌生的。当我还是个孩子的时候，工作和乐趣似乎按定义是对立的。生活有两种状态：有时候成年人让你做事情，那被称为工作；其余时间你可以做你想做的事情，那被称为玩耍。偶尔成年人让你做的事情是有趣的，就像偶尔玩耍也不是——比如，如果你摔倒受伤了。但除了这些异常情况，工作基本上被定义为非乐趣。\n这似乎不是偶然的。学校，暗示着，是乏味的，因为它是为成人工作做准备的。\n那时世界分为两组，成年人和孩子。成年人，像某种被诅咒的种族，必须工作。孩子不必，但他们必须上学，这是工作的稀释版本，旨在为我们为真实的事情做准备。尽管我们不喜欢学校，成年人都同意成人工作更糟糕，而我们很容易。\n特别是老师，似乎都相信工作不是有趣的。这并不奇怪：对大多数他们来说工作不是有趣的。为什么我们必须记住州首府而不是玩躲避球？出于同样的原因，他们必须看管一群孩子而不是躺在海滩上。你不能做你想做的事情。\n我不是说我们应该让孩子做任何他们想做的事情。他们可能必须被强迫做某些事情。但如果我们让孩子做乏味的事情，告诉他们乏味不是工作的决定性质量可能是明智的，而且事实上他们现在必须做乏味事情的原因是他们以后可以做更有趣的事情。[1]\n有一次，当我大约9或10岁时，我父亲告诉我长大后我可以成为任何我想成为的人，只要我享受它。我清楚地记得这个，因为它似乎如此异常。就像被告知使用干水一样。无论我认为他是什么意思，我都不认为他的意思是工作实际上可以是有趣的——像玩耍一样的有趣。我花了很多年才理解这一点。\n工作 到了高中，实际工作的前景就在眼前。成年人有时会来和我们谈论他们的工作，或者我们会去看他们工作。总是理解为他们享受他们所做的事情。回想起来，我认为可能有一个人这样：私人飞机飞行员。但我不认为银行经理真的这样。\n他们所有人都表现得好像享受他们的工作的主要原因可能是中上阶层的惯例，认为你应该这样。说你对你的工作感到厌恶不仅对你的职业生涯不利，而且是社交失礼。\n为什么假装喜欢你所做的事情是常规的？这篇文章的第一句解释了这一点。如果你必须喜欢某件事才能把它做好，那么最成功的人都会喜欢他们所做的事情。这就是中上阶层传统的来源。就像全美国各地的房子都充满了椅子，没有主人甚至知道，是250年前为法国国王设计的椅子的n度模仿一样，关于工作的传统态度，没有主人甚至知道，是做了伟大事情的人的态度的n度模仿。\n这是疏离的配方。到他们到达考虑他们想做什么的年龄时，大多数孩子已经被严重误导了对热爱工作的想法。学校训练他们将工作视为不愉快的义务。有工作据说甚至比学校作业更繁重。然而所有成年人都声称喜欢他们所做的事情。你不能责怪孩子认为\u0026quot;我不像这些人；我不适合这个世界。\u0026rdquo;\n实际上他们被告知了三个谎言：他们在学校被教导视为工作的东西不是真实的工作；成人工作不一定比学校作业更糟糕；周围的许多成年人在说他们喜欢所做的事情时在撒谎。\n最危险的撒谎者可能是孩子自己的父母。如果你做一个无聊的工作给你的家庭提供高标准的生活，正如许多人那样，你冒着用工作是乏味的想法感染孩子的风险。[2] 也许在这种情况下，如果父母不那么无私，对孩子会更好。一个树立热爱工作榜样的父母可能比昂贵的房子更多地帮助孩子。[3]\n直到我上了大学，工作的概念才终于从谋生的概念中解放出来。那么重要的问题不是如何赚钱，而是要做什么工作。理想情况下这些重合，但一些惊人的边界情况（像专利局的爱因斯坦）证明它们不是相同的。\n工作的定义现在是对世界做出一些原创贡献，在这个过程中不挨饿。但经过这么多年的习惯，我对工作的概念仍然包含大量痛苦的成分。工作似乎仍然需要纪律，因为只有难题才能产生伟大的结果，而难题不可能字面上是有趣的。当然人们必须强迫自己在它们上面工作。\n如果你认为某件事应该伤害你，你就不太可能注意到你是否做错了。这总结了我研究生院的经历。\n界限 你应该多喜欢你所做的事情？除非你知道这个，否则你不知道何时停止寻找。而且，如果像大多数人一样，你低估了它，你往往会过早停止寻找。你最终会做由你父母、或赚钱的欲望、或声望——或纯粹惯性为你选择的事情。\n这里有一个上限：做你热爱的事情并不意味着，做你这一秒最想做的事情。即使是爱因斯坦也可能有想要喝杯咖啡的时刻，但他告诉自己应该先完成正在做的事情。\n当我读到那些如此喜欢他们所做的事情以至于没有他们宁愿做的事情的人时，我曾经感到困惑。似乎没有任何我喜欢的工作达到那种程度。如果我选择(a)下个小时工作在某事上或(b)被传送到罗马并在下个小时闲逛，有任何工作我更喜欢吗？老实说，没有。\n但事实上，几乎任何人在任何给定的时刻，都宁愿在加勒比海漂浮，或做爱，或吃美味的食物，而不是在难题上工作。做你热爱的事情的规则假设了一定的时间长度。它不是指，做什么会让你在这一秒最快乐，而是会在更长时期内让你最快乐，比如一周或一个月。\n非生产性的乐趣最终会变得乏味。过了一会儿，你会厌倦躺在海滩上。如果你想保持快乐，你必须做点什么。\n作为下限，你必须比任何非生产性的乐趣更喜欢你的工作。你必须足够喜欢你做的事情，以至于\u0026quot;业余时间\u0026quot;的概念似乎是错误的。这并不是说你必须把所有时间都花在工作上。你只能工作这么多，然后你会累并开始搞砸。然后你想做别的事情——甚至是无意识的事情。但你不会把这时间视为奖品，把你花在工作上的时间视为你为赚取它而忍受的痛苦。\n我把下限设在那里是出于实际原因。如果你的工作不是你最喜欢做的事情，你会有严重的拖延症问题。你必须强迫自己工作，当你诉诸此时，结果明显较差。\n要快乐，我认为你必须做某件你不仅享受而且钦佩的事情。你必须能够在最后说，哇，那很酷。这不意味着你必须制造什么东西。如果你学习悬挂滑翔，或流利地说外语，那将足够让你说，至少一段时间，哇，那很酷。必须有一个测试。\n所以我认为，差一点达到标准的一件事是读书。除了数学和硬科学中的一些书，没有测试你读得有多好，这就是为什么仅仅读书不感觉像工作。你必须用你读到的内容做些什么才能感觉有生产力。\n我认为最好的测试是Gino Lee教给我的：尝试做会让你的朋友说哇的事情。但它可能要到22岁左右才能正常工作，因为大多数人之前没有足够大的样本来选择朋友。\n海妖 我认为你不应该做的是担心朋友以外的人的意见。你不必担心声望。声望是世界其他人的意见。当你能询问你尊重其判断的人的意见时，考虑你甚至不认识的人的意见有什么用？[4]\n这是容易给出的建议。很难遵循，特别是当你年轻的时候。[5] 声望就像一个强大的磁铁，甚至扭曲你对你喜欢什么的信念。它导致你不在你喜欢的事情上工作，而在你想要喜欢的事情上工作。\n这就是导致人们尝试写小说的原因，例如。他们喜欢读小说。他们注意到写小说的人赢得诺贝尔奖。他们认为，有什么比成为小说家更美妙的呢？但喜欢成为小说家的想法是不够的；如果你要在小说写作上做得好，你必须喜欢小说写作的实际工作；你必须喜欢编造精心制作的谎言。\n声望只是化石化的灵感。如果你做得足够好，任何事，你会使它有声望。我们现在认为有声望的许多事情最初根本不是。爵士乐浮现在脑海中——尽管几乎任何已确立的艺术形式都可以。所以只做你喜欢的事情，让声望自己解决。\n声望对有雄心的人尤其危险。如果你想让有雄心的人在差事上浪费时间，方法是用声望作诱饵。这是让人们做演讲、写序言、在委员会任职、做系主任等等的配方。简单地避免任何有声望的任务可能是一个好规则。如果它不糟糕，他们就不必使它有声望。\n同样，如果你同样钦佩两种工作，但一种更有声望，你可能应该选择另一种。你对什么值得钦佩的意见总是会被声望轻微影响，所以如果两者对你来说似乎相等，你可能对不太有声望的那种有更真诚的钦佩。\n另一个导致人们误入歧途的强大力量是金钱。金钱本身并不那么危险。当某事报酬丰厚但被蔑视时，比如电话营销，或卖淫，或人身伤害诉讼，有雄心的人不会被它诱惑。那种工作最终由那些\u0026quot;只是试图谋生\u0026quot;的人做。（提示：避免其从业者说这个的任何领域。）危险的是当金钱与声望结合时，比如，公司法，或医学。一个相对安全和繁荣的职业，具有某种自动基线声望，对年轻人来说是危险的诱惑，他们没有充分考虑他们真正喜欢什么。\n测试人们是否热爱他们所做的事情的标准是，即使他们没有报酬——即使他们不得不做另一份工作谋生，他们是否还会做。有多少公司律师如果必须免费做，在业余时间，并且做服务员的工作来支持自己，会做他们现在的工作？\n这个测试在决定不同类型的学术工作时特别有帮助，因为领域在这方面差异很大。大多数好的数学家即使没有数学教授的工作也会研究数学，而在光谱另一端的系，教学工作的可获得性是驱动因素：人们宁愿做英语教授也不愿在广告公司工作，发表论文是竞争这类工作的方式。没有数学系数学也会发生，但正是英语专业的存在，因此教他们的工作，导致了所有那些关于康拉德小说中性别和认同的乏味论文的产生。没有人为了乐趣做那种事情。\n父母的建议往往会偏向金钱方面。可以肯定地说，更多想成为小说家而父母想他们成为医生的本科生，比想成为医生而父母想他们成为小说家的多。孩子认为他们的父母\u0026quot;物质主义\u0026rdquo;。不一定。所有父母往往对孩子比对自己更保守，仅仅因为，作为父母，他们分享风险多于奖励。如果你八岁的儿子决定爬一棵高树，或你十几岁的女儿决定和当地坏男孩约会，你不会分享兴奋，但如果你儿子摔下来，或你女儿怀孕了，你必须处理后果。\n纪律 有如此强大的力量导致我们误入歧途，我们发现很难找到我们喜欢在什么上工作也就不足为奇了。大多数人在童年就被注定，接受了工作=痛苦的公理。那些逃脱这个的人几乎全部被声望或金钱引诱到礁石上。有多少人甚至发现他们热爱在什么上工作？也许几十万，从数十亿人中。\n很难找到你热爱的工作；如果很少人能做到，那一定是这样。所以不要低估这个任务。如果你还没有成功也不要感到难过。事实上，如果你承认自己不满意，你比大多数仍处于否认的人领先一步。如果你被声称享受你认为可鄙的工作的同事包围，很可能他们在对自己撒谎。不一定，但很可能。\n虽然做伟大的工作需要的纪律比人们认为的少——因为做伟大工作的方法是找到你如此喜欢以至于不必强迫自己做的事情——但找到你热爱的工作通常确实需要纪律。有些人很幸运，12岁时就知道他们想做什么，就像在轨道上一样滑行。但这似乎是例外。更常见的是，做伟大事情的人有着乒乓球弹跳轨迹的职业生涯。他们去学校学习A，退学并做B的工作，然后在业余时间开始做C并因此出名。\n有时从一种工作跳到另一种是精力的标志，有时是懒惰的标志。你是退出了，还是大胆地开辟新道路？你经常无法告诉自己。许多后来会做伟大事情的人在他们试图找到自己的位置时似乎令人失望。\n有什么测试你可以用来保持诚实吗？一个是尝试在你所做的任何事情上做好，即使你不喜欢它。那么至少你会知道你不是在用不满意作为懒惰的借口。也许更重要的是，你会养成做好事情的习惯。\n你可以使用的另一个测试是：始终生产。例如，如果你有一份白天的工作，你不认真对待，因为你计划成为小说家，你在生产吗？你在写小说的页面吗，无论多差？只要你生产，你会知道你不仅仅是在用计划一天写的宏伟小说的模糊愿景作为麻醉剂。它的视角会被你实际写的明显有缺陷的小说所阻碍。\n\u0026ldquo;始终生产\u0026quot;也是寻找你热爱的工作的启发式方法。如果你使自己受这个约束制约，它会自动将你从你认为你应该工作的事情推向你实际上喜欢的事情。\u0026ldquo;始终生产\u0026quot;会发现你的终身工作，就像水在重力的帮助下发现你屋顶的洞一样。\n当然，弄清楚你喜欢在什么上工作并不意味着你能在它上面工作。那是一个单独的问题。而且如果你有雄心，你必须保持它们分开：你必须有意识地努力防止你想要什么的想法被看似可能的事情污染。[6]\n把它们分开是痛苦的，因为观察它们之间的差距是痛苦的。所以大多数人抢先降低他们的期望。例如，如果你问街上的随机人他们是否想能像达芬奇一样画画，你会发现大多数人会说类似\u0026quot;哦，我不会画画。\u0026ldquo;这更多的是意图的陈述而非事实；它的意思是，我不打算尝试。因为事实上，如果你从街上带一个随机的人，并设法让他们在未来二十年里尽可能努力地画画，他们会取得令人惊讶的进步。但这需要巨大的道德努力；它意味着每年每天面对失败。所以为了保护自己，人们说\u0026quot;我不能。\u0026rdquo;\n你经常听到的另一个相关的说法是，不是每个人都能做他们热爱的工作——有人必须做不愉快的工作。真的吗？你怎么让他们做？在美国，强迫人们做不愉快工作的唯一机制是征兵，而那已经30多年没有使用了。我们所能做的就是用金钱和声望鼓励人们做不愉快的工作。\n如果有些事人们仍然不愿做，似乎社会只能将就。这就是家庭仆人发生的事情。几千年那是工作\u0026quot;有人必须做\u0026quot;的典型例子。然而在二十世纪中叶，仆人在富国几乎消失了，富人只能将就。\n所以虽然可能有些事情有人必须做，但任何人说任何特定工作如此很可能是错误的。如果没有人愿意做，大多数不愉快的工作要么自动化，要么不做。\n两条路线 还有另一种\u0026quot;不是每个人都能做他们热爱的工作\u0026quot;的意义，然而那是太真实了。一个人必须谋生，很难为你热爱的工作获得报酬。有两条路线通向那个目的地：\n有机路线：随着你变得更杰出，逐渐增加你工作中喜欢的部分，减少你不喜欢的部分。 双工作路线：在你不喜欢的事情上工作以赚钱，然后在你喜欢的事情上工作。 有机路线更常见。它自然发生在任何做好工作的人身上。一个年轻的建筑师必须接受他能得到的任何工作，但如果他做得好，他会逐渐能够在项目中挑选。这条路线的缺点是它缓慢而不确定。即使是终身教职也不是真正的自由。\n双工作路线有几种变体，取决于你一次为金钱工作多长时间。一个极端是\u0026quot;白天工作\u0026rdquo;，你在一份工作上定期工作赚钱，在业余时间在你热爱的事情上工作。另一个极端是你工作直到赚足够多的钱不必再为金钱工作。\n双工作路线比有机路线少见，因为它需要深思熟虑的选择。它也更危险。生活随着年龄增长而变得更昂贵，所以很容易被吸金在工作中比预期更长的时间更糟的是，你在任何事情上工作都会改变你。如果你在乏味的事情上工作太久，它会腐蚀你的大脑。而报酬最高的工作最危险，因为它们需要你全神贯注。\n双工作路线的优势是它能让你跳过障碍。可能工作的景观不是平坦的；不同类型的工作之间有不同高度的墙。[7] 最大化你工作中你喜欢的部分的技巧可以从建筑到产品设计，但可能不能到音乐。如果你做一件事赚钱，然后在另一件事上工作，你有更多的选择自由。\n你应该走哪条路线？那取决于你对想做什么有多确定，你接受命令有多好，你能承受多少风险，以及有人会（在你有生之年）为你想做的事情付钱的可能性。如果你确定你想工作的总体领域，而且是人们可能付钱给你的事情，那么你可能应该走有机路线。但如果你不知道你想在什么上工作，或不喜欢接受命令，如果你能承受风险，你可能想走双工作路线。\n不要太早决定。很早就知道他们想做什么的孩子似乎令人印象深刻，好像他们在其他孩子之前得到了某个数学问题的答案。他们确实有一个答案，但很可能是错的。\n",
    "description": "",
    "tags": ["职业","工作","热情","热爱","满足感","声望","金钱","幸福","成功","人生建议"],
    "categories": [],
    "content": "→ English Version\n如何做你热爱的事情 2006年1月\n要把事情做好，你必须喜欢它。这个想法并不新颖。我们把它总结成四个词：\u0026ldquo;做你热爱的事情。\u0026ldquo;但仅仅告诉人们这是不够的。做你热爱的事情是复杂的。\n这个想法对我们大多数人在童年时学到的东西来说是陌生的。当我还是个孩子的时候，工作和乐趣似乎按定义是对立的。生活有两种状态：有时候成年人让你做事情，那被称为工作；其余时间你可以做你想做的事情，那被称为玩耍。偶尔成年人让你做的事情是有趣的，就像偶尔玩耍也不是——比如，如果你摔倒受伤了。但除了这些异常情况，工作基本上被定义为非乐趣。\n这似乎不是偶然的。学校，暗示着，是乏味的，因为它是为成人工作做准备的。\n那时世界分为两组，成年人和孩子。成年人，像某种被诅咒的种族，必须工作。孩子不必，但他们必须上学，这是工作的稀释版本，旨在为我们为真实的事情做准备。尽管我们不喜欢学校，成年人都同意成人工作更糟糕，而我们很容易。\n特别是老师，似乎都相信工作不是有趣的。这并不奇怪：对大多数他们来说工作不是有趣的。为什么我们必须记住州首府而不是玩躲避球？出于同样的原因，他们必须看管一群孩子而不是躺在海滩上。你不能做你想做的事情。\n我不是说我们应该让孩子做任何他们想做的事情。他们可能必须被强迫做某些事情。但如果我们让孩子做乏味的事情，告诉他们乏味不是工作的决定性质量可能是明智的，而且事实上他们现在必须做乏味事情的原因是他们以后可以做更有趣的事情。[1]\n有一次，当我大约9或10岁时，我父亲告诉我长大后我可以成为任何我想成为的人，只要我享受它。我清楚地记得这个，因为它似乎如此异常。就像被告知使用干水一样。无论我认为他是什么意思，我都不认为他的意思是工作实际上可以是有趣的——像玩耍一样的有趣。我花了很多年才理解这一点。\n工作 到了高中，实际工作的前景就在眼前。成年人有时会来和我们谈论他们的工作，或者我们会去看他们工作。总是理解为他们享受他们所做的事情。回想起来，我认为可能有一个人这样：私人飞机飞行员。但我不认为银行经理真的这样。\n他们所有人都表现得好像享受他们的工作的主要原因可能是中上阶层的惯例，认为你应该这样。说你对你的工作感到厌恶不仅对你的职业生涯不利，而且是社交失礼。\n为什么假装喜欢你所做的事情是常规的？这篇文章的第一句解释了这一点。如果你必须喜欢某件事才能把它做好，那么最成功的人都会喜欢他们所做的事情。这就是中上阶层传统的来源。就像全美国各地的房子都充满了椅子，没有主人甚至知道，是250年前为法国国王设计的椅子的n度模仿一样，关于工作的传统态度，没有主人甚至知道，是做了伟大事情的人的态度的n度模仿。\n这是疏离的配方。到他们到达考虑他们想做什么的年龄时，大多数孩子已经被严重误导了对热爱工作的想法。学校训练他们将工作视为不愉快的义务。有工作据说甚至比学校作业更繁重。然而所有成年人都声称喜欢他们所做的事情。你不能责怪孩子认为\u0026quot;我不像这些人；我不适合这个世界。\u0026rdquo;\n实际上他们被告知了三个谎言：他们在学校被教导视为工作的东西不是真实的工作；成人工作不一定比学校作业更糟糕；周围的许多成年人在说他们喜欢所做的事情时在撒谎。\n最危险的撒谎者可能是孩子自己的父母。如果你做一个无聊的工作给你的家庭提供高标准的生活，正如许多人那样，你冒着用工作是乏味的想法感染孩子的风险。[2] 也许在这种情况下，如果父母不那么无私，对孩子会更好。一个树立热爱工作榜样的父母可能比昂贵的房子更多地帮助孩子。[3]\n直到我上了大学，工作的概念才终于从谋生的概念中解放出来。那么重要的问题不是如何赚钱，而是要做什么工作。理想情况下这些重合，但一些惊人的边界情况（像专利局的爱因斯坦）证明它们不是相同的。\n工作的定义现在是对世界做出一些原创贡献，在这个过程中不挨饿。但经过这么多年的习惯，我对工作的概念仍然包含大量痛苦的成分。工作似乎仍然需要纪律，因为只有难题才能产生伟大的结果，而难题不可能字面上是有趣的。当然人们必须强迫自己在它们上面工作。\n如果你认为某件事应该伤害你，你就不太可能注意到你是否做错了。这总结了我研究生院的经历。\n界限 你应该多喜欢你所做的事情？除非你知道这个，否则你不知道何时停止寻找。而且，如果像大多数人一样，你低估了它，你往往会过早停止寻找。你最终会做由你父母、或赚钱的欲望、或声望——或纯粹惯性为你选择的事情。\n这里有一个上限：做你热爱的事情并不意味着，做你这一秒最想做的事情。即使是爱因斯坦也可能有想要喝杯咖啡的时刻，但他告诉自己应该先完成正在做的事情。\n当我读到那些如此喜欢他们所做的事情以至于没有他们宁愿做的事情的人时，我曾经感到困惑。似乎没有任何我喜欢的工作达到那种程度。如果我选择(a)下个小时工作在某事上或(b)被传送到罗马并在下 …"
  },{
    "title": "如何做出伟大的工作",
    "url": "/paul_graham/essays_zh/greatwork/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何做出伟大的工作 2023年7月\n如果你收集了很多不同领域中做出伟大工作的技巧清单，它们的交集会是什么样子？我决定通过制作这样一个清单来找出答案。\n部分我的目标是创建一个可以被任何领域的人使用的指南。但我也好奇这个交集的形状。而这个练习表明它确实有一个确定的形状；它不仅仅是一个标记着\u0026quot;努力工作\u0026quot;的点。\n以下这个配方假设你非常有雄心壮志。\n第一步是决定要做什么工作。你选择的工作需要具备三个品质：它必须是你有天赋的事情，你对此有深厚兴趣，并且它有做出伟大工作的空间。\n实际上，你不必太担心第三个标准。有雄心壮志的人在这方面往往过于保守。所以你只需要找到你有天赋和浓厚兴趣的事情。[1]\n这听起来很简单，但通常相当困难。当你年轻的时候，你不知道自己擅长什么，也不知道不同类型的工作是怎样的。你最终可能从事的某些工作甚至可能还不存在。所以虽然有些人在14岁就知道自己想做什么，但大多数人必须弄清楚这一点。\n弄清楚要做什么工作的方法就是通过工作。如果你不确定要做什么，就猜测。但选择一些事情并开始行动。你可能会经常猜错，但这没关系。了解多种事情是好事；一些最重大的发现来自于注意到不同领域之间的联系。\n培养一个从事自己项目的习惯。不要让\u0026quot;工作\u0026quot;意味着别人告诉你做的事情。如果你真的有一天做出了伟大的工作，那很可能是在你自己的项目上。它可能是在某个更大的项目之内，但你会推动你自己的那部分。\n你的项目应该是什么？任何让你觉得兴奋和雄心勃勃的事情。随着你年龄的增长和你在项目上的品味变化，令人兴奋和重要的事情会趋于一致。7岁时，用乐高积木建造巨大的东西可能看起来令人兴奋和雄心勃勃，14岁时自学微积分，到21岁时你开始探索物理学中未解答的问题。但要始终保持令人兴奋的感觉。\n有一种兴奋的好奇心，它既是伟大工作的引擎，也是舵盘。它不仅会驱动你，如果你让它发挥，它也会告诉你该做什么。\n你对什么过度好奇——好奇到会让大多数其他人感到无聊的程度？这就是你要寻找的。\n一旦你找到了你过度感兴趣的事情，下一步就是学习足够的知识，让你到达知识的前沿。知识以分形方式扩展，从远处看它的边缘看起来很平滑，但一旦你学得足够多接近其中一个，就会发现它们充满了空白。\n下一步是注意到这些空白。这需要一些技巧，因为你为了简化世界模型而忽略这些空白。许多发现来自于提出其他人认为理所当然的问题。[2]\n如果答案看起来奇怪，那就更好了。伟大的工作常常带有奇怪的色彩。从绘画到数学你都能看到这一点。试图制造这种奇怪感可能会显得做作，但如果它出现了，就拥抱它。\n大胆追逐异常的想法，即使其他人对它们不感兴趣——事实上，特别是当他们不感兴趣的时候。如果你对一些其他人都忽视的可能性感到兴奋，而且你有足够的专业知识准确说出他们都忽略了什么，这是你能找到的最好赌注。[3]\n四个步骤：选择一个领域，学习足够的知识到达前沿，注意到空白，探索有希望的那些。这几乎是所有做出伟大工作的人的做法，从画家到物理学家。\n第二步和第四步需要努力工作。可能无法证明你必须努力工作才能做出伟大的事情，但经验证据的规模相当于关于死亡率的证据。这就是为什么在你非常感兴趣的事情上工作至关重要。兴趣会驱使你比单纯的勤奋更加努力工作。\n三个最强大的动机是好奇心、愉悦和做出令人印象深刻的事情的愿望。有时它们汇聚在一起，这种组合是最强大的。\n大奖是发现一个新的分形芽。你注意到知识表面的裂缝，撬开它，里面有一个完整的世界。\n让我们再谈谈弄清楚要做什么工作的复杂事情。它之所以困难的主要原因是，除了亲自做，你无法说出大多数类型的工作是怎样的。这意味着四个步骤是重叠的：你可能需要在某件事上工作多年才能知道你有多喜欢它或你有多擅长它。与此同时，你没有在做，因此也没有了解大多数其他类型的工作。所以在最坏的情况下，你在信息非常不完整的基础上做出选择。[4]\n雄心的本质加剧了这个问题。雄心有两种形式，一种先于对主题的兴趣，一种从中产生。大多数做出伟大工作的人都有两者的混合，你拥有前者越多，决定做什么就越困难。\n大多数国家的教育系统假装这很容易。他们期望你在真正了解某个领域之前就承诺投入该领域。因此，一个处于最佳轨迹上有雄心的人通常会被系统视为故障的例子。\n如果他们至少承认这一点会更好——如果他们承认系统不仅不能帮助你弄清楚要做什么，而且是建立在假设你会在青少年时期神奇地猜测的基础上的。他们不会告诉你，但我会：当涉及到弄清楚要做什么工作时，你只能靠自己。有些人幸运地猜对了，但其他人会发现自己在假设每个人都做到的轨道上斜向挣扎。\n如果你年轻有雄心但不知道要做什么工作，该怎么办？你不应该做的是被动地漂泊，假设问题会自行解决。你需要采取行动。但没有你可以遵循的系统程序。当你阅读那些做出伟大工作的人的传记时，令人惊讶的是有多少运气涉及其中。他们通过偶然的相遇，或者通过阅读他们碰巧拿起的书，发现要做什么工作。所以你需要让自己成为运气的大目标，做到这一点的方法就是保持好奇心。尝试很多事情，见很多人，读很多书，问很多问题。[5]\n有疑问时，优化有趣性。随着你对领域的了解更多，领域会发生变化。例如，数学家所做的与你在高中数学课上所做的非常不同。所以你需要给不同类型的工作一个机会向你展示它们的样子。但随着你对它的了解更多，一个领域应该变得越来越有趣。如果不是，它可能不适合你。\n不要担心如果你发现自己对与其他人不同的事情感兴趣。你的品味越奇怪越好。奇怪的品味往往是强烈的品味，对工作的强烈品味意味着你会富有成效。如果你在很少有人看过的地方寻找，你更可能找到新东西。\n你适合某种工作的一个标志是，当你喜欢甚至其他人觉得乏味或可怕的部分。\n但领域不是人；你不欠它们任何忠诚。如果在做一件事的过程中你发现了另一个更令人兴奋的事情，不要害怕切换。\n如果你在为人们制作东西，确保它是他们真正想要的东西。做到这一点的最好方法是制作你自己想要的东西。写你想读的故事；构建你想使用的工具。由于你的朋友可能有相似的兴趣，这也会给你带来初始受众。\n这应该遵循令人兴奋的规则。显然最令人兴奋的故事是写你想读的故事。我明确提到这个情况的原因是太多人搞错了。他们不是制作自己想要的，而是试图制作一些想象的、更复杂的受众想要的东西。一旦你走上那条路，你就迷失了。[6]\n当你试图弄清楚要做什么工作时，会有很多力量让你误入歧途。做作、时尚、恐惧、金钱、政治、他人的愿望、著名的骗子。但如果你坚持你发现真正有趣的事情，你就能抵御所有这些。如果你感兴趣，你就没有误入歧途。\n跟随你的兴趣听起来像是一种相当被动的策略，但在实践中，它通常意味着跟随它们越过各种障碍。你通常必须冒被拒绝和失败的风险。所以这确实需要相当大的勇气。\n但虽然你需要勇气，你通常不需要太多计划。在大多数情况下，做出伟大工作的配方很简单：在令人兴奋的雄心勃勃的项目上努力工作，好事就会发生。你不是制定计划然后执行它，而是试图保持某些不变量。\n计划的问题在于它只适用于你能预先描述的成就。你可以通过在童年时决定赢得金牌或致富，然后顽强地追求那个目标，但你不能用那种方式发现自然选择。\n我认为对于大多数想要做出伟大工作的人来说，正确的策略不要计划太多。在每个阶段做任何看起来最有趣的事情，并为未来提供最好的选择。我称这种方法为\u0026quot;保持在上风\u0026quot;。这就是大多数做出伟大工作的人似乎做到的。\n即使你找到了令人兴奋的工作，工作并不总是直截了当的。有时会有一些新想法让你早上跳出床直接去工作。但也会有很多时候事情不是那样的。\n你不是简单地扬起帆就被灵感吹向前方。有逆风、暗流和隐藏的浅滩。所以工作有一种技巧，就像航海一样。\n例如，虽然你必须努力工作，但可能工作得太努力，如果你那样做，你会发现收益递减：疲劳会让你变得愚蠢，最终甚至会损害你的健康。工作产生收益递减的点取决于类型。一些最困难的类型你可能每天只能做四五个小时。\n理想情况下，这些小时应该是连续的。尽可能安排你的生活，让你有大块的时间来工作。如果你知道可能会被打断，你会回避困难的任务。\n开始工作可能比保持工作更困难。你经常必须欺骗自己才能越过那个初始门槛。不要担心这个；这是工作的本质，不是你性格的缺陷。工作有一种激活能量，每天和每个项目都有。由于这个门槛在意义上是虚假的——它比继续工作所需的能量更高——可以告诉自己相应程度的谎言来克服它。\n如果你想要做出伟大的工作，对自己撒谎通常是错误的，但这是极少数不是的案例之一。当我早上不愿开始工作时，我经常通过说\u0026quot;我只是读一遍我已有的东西\u0026quot;来欺骗自己。五分钟后，我发现了一些看起来错误或不完整的东西，我就开始了。\n类似的技术也适用于开始新项目。例如，对一个项目需要多少工作撒谎是可以的。许多伟大的事情始于有人说\u0026quot;这能有多难？\u0026quot;\n这是年轻人有优势的一个领域。他们更乐观，即使他们乐观的一个来源是无知，在这种情况下无知有时能战胜知识。\n不过，要努力完成你开始的事情，即使结果比你预期的更多工作。完成事情不仅仅是整洁或自律的练习。在许多项目中，最好的工作发生在本应是最后阶段的部分。\n另一个可以接受的谎言是夸大你正在工作的重要性，至少在你自己的头脑中。如果这帮助你发现新东西，结果可能证明它根本不是谎言。[7]\n由于开始工作有两种感觉——每天和每个项目——所以也有两种形式的拖延。每个项目的拖延要危险得多。你一年又一年地推迟开始那个雄心勃勃的项目，因为时机不太对。当你以年为单位拖延时，你可以让很多事情没有完成。[8]\n每个项目拖延如此危险的一个原因是它通常伪装成工作。你不只是坐着无所事事；你在勤奋地做其他事情。所以每个项目的拖延不会像每天的拖延那样触发警报。你太忙了，注意不到它。\n打败它的方法是偶尔停下来问自己：我在做我最想做的工作吗？当你年轻的时候，答案有时是否定的也没关系，但随着年龄的增长，这变得越来越危险。[9]\n伟大的工作通常意味着在问题上花费大多数人认为不合理的时间。你不能把这段时间视为成本，否则它会显得太高。你必须发现工作在进行时本身就足够吸引人。\n可能有些工作你必须在你得到好部分之前，在你讨厌的事情上勤奋工作数年，但这不是伟大工作发生的方式。伟大的工作通过持续专注于你真正感兴趣的事情而发生。当你停下来盘点时，你会惊讶于你已经走了多远。\n我们惊讶的原因是我们低估了工作的累积效应。每天写一页听起来不多，但如果你每天都这样做，一年就能写一本书。这就是关键：一致性。做出伟大事情的人不是每天完成很多事情。他们完成一些事情，而不是无所事事。\n如果你做复利的工作，你会得到指数增长。大多数这样做的人是无意识地做的，但值得停下来思考一下。例如，学习就是这种现象的一个例子：你对某件事了解得越多，学习更多就越容易。增长受众是另一个：你拥有的粉丝越多，他们会给你带来新粉丝。\n指数增长的问题在于曲线在开始阶段感觉平坦。它不是；它仍然是一个美妙的指数曲线。但我们无法直观地理解这一点，所以我们在早期阶段低估了指数增长。\n指数增长的东西可能变得如此有价值，值得付出非凡的努力来启动它。但由于我们在早期低估了指数增长，这也大多是无意识地完成的：人们推动学习新事物的初始无回报阶段，因为他们从经验中知道学习新事物总是需要初始推动，或者他们一次一个粉丝地增长受众，因为他们没有更好的事情可做。如果人们有意识地意识到他们可以投资于指数增长，更多的人会这样做。\n工作不仅在你试图做的时候发生。有一种当你走路或淋浴或躺在床上时的无定向思维，这可以非常强大。让你的思绪稍微漫游，你经常能解决你无法通过正面攻击解决的问题。\n不过，你必须以正常方式努力工作才能从这种现象中受益。你不能只是四处闲逛白日做梦。白日梦必须与向它提供问题的刻意工作交错进行。[10]\n每个人都知道要在工作中避免分心，但在循环的另一半避免它们也很重要。当你让你的思绪漫游时，它会漫游到你当时最关心的事情。所以避免那种将你的工作推出首位的分心，否则你会浪费这种有价值的思维方式在分心上。（例外：不要避免爱情。）\n有意识地培养对你领域内工作的品味。直到你知道哪个是最好的以及什么使它如此，你才知道你的目标是什么。\n这就是你的目标，因为如果你不努力成为最好的，你甚至不会是好的。这么多人在这么多不同领域都做出了这个观察，这可能是值得思考为什么是真的。可能是因为雄心是一种几乎所有错误都在一个方向的现象——几乎所有没有击中目标的弹壳都是因为距离不够。或者可能是因为成为最好的雄心与成为好的雄心是质的不同。或者可能成为好只是一个太模糊的标准。可能三个都是真的。[11]\n幸运的是，这里有某种规模经济。虽然试图成为最好的似乎会给你带来沉重的负担，但实际上你最终往往会净收益。它令人兴奋，而且奇怪地令人解放。它简化了事情。在某些方面，试图成为最好的比试图仅仅成为好更容易。\n瞄准高点的一个方法是尝试制作一百年后人们会在乎的东西。不是因为他们的意见比你同时代的人更重要，而是因为一百年后仍然看起来好的东西更可能是真正好的。\n不要试图以独特的风格工作。只是尽力做最好的工作；你会不自觉地以独特的方式做到。\n风格是以独特的方式做事而不试图这样做。试图这样做是做作。\n做作实际上是在假装不是你在做这项工作。你采用一个令人印象深刻但虚假的人格，虽然你对令人印象深刻感到满意，但虚假在工作表现出来。[12]\n成为别人的诱惑对年轻人最大。他们经常觉得自己是无名小卒。但你永远不必担心这个问题，因为如果你在足够雄心勃勃的项目上工作，它会自己解决。如果你在一个雄心勃勃的项目上成功，你不是无名小卒；你是做这件事的人。所以只做工作，你的身份会自己解决。\n\u0026ldquo;避免做作\u0026quot;就其本身而言是一个有用的规则，但你如何积极表达这个想法？你会说要成为什么，而不是不要成为什么？最好的答案是真诚。如果你真诚，你不仅避免了做作，还避免了一整套类似的恶习。\n",
    "description": "",
    "tags": ["伟大工作","创造力","好奇心","独创性","专业知识"],
    "categories": [],
    "content": "→ English Version\n如何做出伟大的工作 2023年7月\n如果你收集了很多不同领域中做出伟大工作的技巧清单，它们的交集会是什么样子？我决定通过制作这样一个清单来找出答案。\n部分我的目标是创建一个可以被任何领域的人使用的指南。但我也好奇这个交集的形状。而这个练习表明它确实有一个确定的形状；它不仅仅是一个标记着\u0026quot;努力工作\u0026quot;的点。\n以下这个配方假设你非常有雄心壮志。\n第一步是决定要做什么工作。你选择的工作需要具备三个品质：它必须是你有天赋的事情，你对此有深厚兴趣，并且它有做出伟大工作的空间。\n实际上，你不必太担心第三个标准。有雄心壮志的人在这方面往往过于保守。所以你只需要找到你有天赋和浓厚兴趣的事情。[1]\n这听起来很简单，但通常相当困难。当你年轻的时候，你不知道自己擅长什么，也不知道不同类型的工作是怎样的。你最终可能从事的某些工作甚至可能还不存在。所以虽然有些人在14岁就知道自己想做什么，但大多数人必须弄清楚这一点。\n弄清楚要做什么工作的方法就是通过工作。如果你不确定要做什么，就猜测。但选择一些事情并开始行动。你可能会经常猜错，但这没关系。了解多种事情是好事；一些最重大的发现来自于注意到不同领域之间的联系。\n培养一个从事自己项目的习惯。不要让\u0026quot;工作\u0026quot;意味着别人告诉你做的事情。如果你真的有一天做出了伟大的工作，那很可能是在你自己的项目上。它可能是在某个更大的项目之内，但你会推动你自己的那部分。\n你的项目应该是什么？任何让你觉得兴奋和雄心勃勃的事情。随着你年龄的增长和你在项目上的品味变化，令人兴奋和重要的事情会趋于一致。7岁时，用乐高积木建造巨大的东西可能看起来令人兴奋和雄心勃勃，14岁时自学微积分，到21岁时你开始探索物理学中未解答的问题。但要始终保持令人兴奋的感觉。\n有一种兴奋的好奇心，它既是伟大工作的引擎，也是舵盘。它不仅会驱动你，如果你让它发挥，它也会告诉你该做什么。\n你对什么过度好奇——好奇到会让大多数其他人感到无聊的程度？这就是你要寻找的。\n一旦你找到了你过度感兴趣的事情，下一步就是学习足够的知识，让你到达知识的前沿。知识以分形方式扩展，从远处看它的边缘看起来很平滑，但一旦你学得足够多接近其中一个，就会发现它们充满了空白。\n下一步是注意到这些空白。这需要一些技巧，因为你为了简化世界模型而忽略这些空白。许多发现来自于提出其他人认为理所当然的问题。[2]\n如果答案看起来奇怪，那就更好了。伟大的工作常常带有奇怪的色彩。从绘画到数学你都能看到这一点。试图制造这种奇怪感可能会显得做作，但如果它出现了，就拥抱它。\n大胆追逐异常的想法，即使其他人对它们不感兴趣——事实上，特别是当他们不感兴趣的时候。如果你对一些其他人都忽视的可能性感到兴奋，而且你有足够的专业知识准确说出他们都忽略了什么，这是你能找到的最好赌注。[3]\n四个步骤：选择一个领域，学习足够的知识到达前沿，注意到空白，探索有希望的那些。这几乎是所有做出伟大工作的人的做法，从画家到物理学家。\n第二步和第四步需要努力工作。可能无法证明你必须努力工作才能做出伟大的事情，但经验证据的规模相当于关于死亡率的证据。这就是为什么在你非常感兴趣的事情上工作至关重要。兴趣会驱使你比单纯的勤奋更加努力工作。\n三个最强大的动机是好奇心、愉悦和做出令人印象深刻的事情的愿望。有时它们汇聚在一起，这种组合是最强大的。\n大奖是发现一个新的分形芽。你注意到知识表面的裂缝，撬开它，里面有一个完整的世界。\n让我们再谈谈弄清楚要做什么工作的复杂事情。它之所以困难的主要原因是，除了亲自做，你无法说出大多数类型的工作是怎样的。这意味着四个步骤是重叠的：你可能需要在某件事上工作多年才能知道你有多喜欢它或你有多擅长它。与此同时，你没有在做，因此也没有了解大多数其他类型的工作。所以在最坏的情况下，你在信息非常不完整的基础上做出选择。[4]\n雄心的本质加剧了这个问题。雄心有两种形式，一种先于对主题的兴趣，一种从中产生。大多数做出伟大工作的人都有两者的混合，你拥有前者越多，决定做什么就越困难。\n大多数国家的教育系统假装这很容易。他们期望你在真正了解某个领域之前就承诺投入该领域。因此，一个处于最佳轨迹上有雄心的人通常会被系统视为故障的例子。\n如果他们至少承认这一点会更好——如果他们承认系统不仅不能帮助你弄清楚要做什么，而且是建立在假设你会在青少年时期神奇地猜测的基础上的。他们不会告诉你，但我会：当涉及到弄清楚要做什么工作时，你只能靠自己。有些人幸运地猜对了，但其他人会发现自己在假设每个人都做到的轨道上斜向挣扎。\n如果你年轻有雄心但不知道要做什么工作，该怎么办？你不应该做的是被动地漂泊，假设问题会自行解决。你需要采取行动。但没有你可以遵循的系统程序。当你阅读那些做出伟大工作的人的 …"
  },{
    "title": "如何做哲学",
    "url": "/paul_graham/essays_zh/philosophy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何做哲学 2007年9月\n高中时我决定大学要学哲学。我有几个动机，有些比其他更体面。其中一个不太体面的动机是为了震惊人们。在我长大的地方，大学被视为职业培训，所以学哲学看起来是一种令人印象深刻的实用主义。就像在你的衣服上划破洞，或在耳朵上戴安全别针一样，这些都是当时刚刚流行的令人印象深刻的实用主义形式。\n但我也有一些更诚实的动机。我认为学习哲学是通往智慧的捷径。所有主修其他科目的人最终只会获得一堆领域知识。我将学到真正的东西。\n我尝试过读几本哲学书。不是近代的；在我们的高中图书馆里找不到那些。但我尝试读柏拉图和亚里士多德。我怀疑我是否相信自己理解了他们，但他们听起来像是在谈论重要的事情。我以为我会在大学里学到什么。\n大四前的那个夏天我修了一些大学课程。我在微积分课上学到了很多，但在哲学101课上学得不多。然而我学习哲学的计划仍然完好无损。没有学到任何东西是我的错。我没有足够仔细地阅读我们被指定的书籍。我会在大学再给贝克莱的人类知识原理一次机会。如此受推崇又难以阅读的东西，如果能弄明白其中奥妙，必定有其价值。\n二十六年后，我仍然不理解贝克莱。我有一本不错的他的著作集。我会读它吗？似乎不太可能。\n那时和现在的区别是，现在我知道为什么贝克莱可能不值得努力去理解。我想我现在明白哲学出了什么问题，以及我们如何修复它。\n词语\n我大学大部分时间确实主修了哲学。结果并不如我所愿。我没有学到任何神奇真理，相比之下其他一切都只是领域知识。但我至少现在知道为什么没有学到。哲学并不像数学、历史或大多数其他大学学科那样真正有一个主题。没有必须掌握的核心知识。最接近的是了解多年来各个哲学家对不同话题说了什么。很少有人足够正确以至于人们忘记了是谁发现了他们发现的东西。\n形式逻辑有一些主题。我修了几门逻辑课。我不知道是否从中学到了什么。[1] 在我看来，能够在大脑中翻转想法非常重要：看到什么时候两个想法没有完全覆盖可能性空间，或者什么时候一个想法与另一个相同但有一两处变化。但学习逻辑教会了我这种思维方式的重要性，还是让我在这方面更擅长了吗？我不知道。\n我知道我从学习哲学中学到了一些东西。最戏剧性的是我在大一年级第一学期立即学到的，在一门由悉尼·舒梅克教授的课程中。我学到我不存在。我（和你）是一组细胞，在各种力量的驱动下蹒跚而行，并称自己为我。但没有一个中心的、不可分割的东西与你的身份同在。你可以想象失去一半大脑还活着。这意味着你的大脑可以被想象分成两半，每半移植到不同的身体里。想象在这样的手术后醒来。你必须想象自己是两个人。\n这里真正的教训是，我们在日常生活中使用的概念是模糊的，如果过度推敲就会崩溃。即使是我们珍视的我这个概念。我花了一段时间才理解这一点，但当我理解时，这是相当突然的，就像十九世纪有人理解进化论并意识到他们小时候被告知的创造故事完全是错的。[2] 在数学之外，词语的推敲有一个极限；事实上，把数学称为研究具有精确含义的术语的学科并不是一个坏的定义。日常词语本质上是模糊的。它们在日常生活中足够好用，以至于你没有注意到。词语似乎有效，就像牛顿物理学似乎有效一样。但如果你推敲得足够远，你总是能让它们崩溃。\n我会说，这对哲学来说是不幸的，这是哲学的核心事实。大多数哲学辩论不仅仅是被词语混淆所困扰，而是被词语混淆所驱动。我们有自由意志吗？取决于你所说的\u0026quot;自由\u0026quot;是什么意思。抽象观念存在吗？取决于你所说的\u0026quot;存在\u0026quot;是什么意思。\n维特根斯坦被普遍认为提出了大多数哲学争议是由于语言混淆造成的观点。我不确定应该给他多少功劳。我怀疑很多人意识到了这一点，但反应只是不学习哲学，而不是成为哲学教授。\n事情怎么会变成这样？人们花了几千年研究的东西真的可能是浪费时间吗？这些都是有趣的问题。事实上，你可以问关于哲学的最有趣的问题中的一些。接近当前哲学传统的最有价值的方式可能既不是陷入像贝克莱那样的无意义思辨，也不是像维特根斯坦那样关闭它们，而是把它作为理性出错的例子来研究。\n历史\n西方哲学真正始于苏格拉底、柏拉图和亚里士多德。我们对他们前人的了解来自后来作品中的片段和引用；他们的学说可以被描述为偶尔涉及分析的思辨宇宙学。推测他们是由促使每个其他社会发明宇宙学的任何东西驱动的。[3]\n随着苏格拉底、柏拉图，特别是亚里士多德，这个传统发生了转折。开始有更多的分析。我怀疑柏拉图和亚里士多德受到数学进步的鼓励。到那时，数学家已经表明，你可以用比编造动听的故事更结论性的方式弄清楚事情。[4]\n人们现在谈论这么多抽象概念，以至于我们没有意识到当他们第一次开始时这必须是一个多大的飞跃。从人们第一次开始描述事物为热或冷到有人问\u0026quot;热是什么？\u0026ldquo;之间，大概有数千年。毫无疑问，这是一个非常渐进的过程。我们不知道柏拉图或亚里士多德是否是第一个提出他们所问问题的人。但他们的作品是我们拥有的最早大规模这样做的人，并且有一种新鲜感（不用说天真）表明他们问的一些问题对他们来说是新的，至少。\n亚里士多德特别让我想起了人们发现新事物时发生的现象，他们对此如此兴奋以至于一生中快速穿越了新发现领域的巨大百分比。如果是这样，那证明这种思维方式是多么新颖。[5]\n这一切都是为了解释柏拉图和亚里士多德如何能够令人印象深刻却又天真和错误。即使问他们所问的问题也是令人印象深刻的。这并不意味着他们总是想出好答案。说古希腊数学家在某些方面天真，或者至少缺乏一些会让他们的生活更轻松的概念，并不被认为是侮辱性的。所以我希望如果我提出古代哲学家同样天真，人们不会太冒犯。特别是，他们似乎没有完全理解我前面所说的哲学的核心事实：如果你过度推敲词语，它们会崩溃。\n罗德·布鲁克斯写道：\u0026ldquo;令第一台数字计算机的建造者非常惊讶的是，为它们编写的程序通常不起作用。\u0026quot;[6] 当人们第一次开始谈论抽象概念时发生了类似的事情。令他们惊讶的是，他们没有达成一致的答案。事实上，他们似乎很少得出任何答案。\n他们实际上是在争论由采样分辨率过低引起的人工制品。\n他们的一些答案多么无用的证明是它们的影响多么小。没有人读了亚里士多德的形而上学后会因此做任何不同的事情。[7]\n当然我不是说思想必须有实际应用才有价值？不，它们可能不需要。哈代吹嘘数论没有任何用途也不会使其不合格。但他被证明是错误的。事实上，很难找到一个真正没有实际用途的数学领域。而且亚里士多德在形而上学A书中对哲学终极目标的解释意味着哲学也应该是有用的。\n理论知识\n亚里士多德的目标是找到最一般的普遍原则。他给出的例子是有说服力的：普通工人出于习惯以某种方式建造事物；大师工匠能做得更多，因为他们掌握了基本原理。趋势很清楚：知识越普遍，就越令人钦佩。但随后他犯了一个错误——可能是哲学史上最重要的错误。他注意到理论知识通常是为了自身而被获得，出于好奇心，而不是为了任何实际需要。所以他提出有两种理论知识：一种在实际事务中有用，一种没有。因为对后者感兴趣的人是为了它本身而对它感兴趣，所以它必定更高尚。所以他在形而上学中设定探索没有实际用途的知识的目标。这意味着当他承担宏大但模糊理解的问题并最终迷失在词语海洋中时，没有警报响起。\n他的错误是混淆了动机和结果。当然，想要深入了解事物的人通常是由好奇心驱动的，而不是任何实际需要。但这并不意味着他们最终学到的东西没有用。在实践中深入了解你正在做的事情非常有价值；即使你从未被要求解决高级问题，你也能在简单问题的解决方案中看到捷径，而且你的知识在边缘情况下不会崩溃，就像你依赖不理解的公式那样。知识就是力量。这就是理论知识有声望的原因。这也是聪明人对某些事物好奇而对其他事物不好奇的原因；我们的DNA并不像我们想象的那么无利害关系。\n所以虽然思想不必有直接的实际应用才有趣，但我们发现有趣的事物种类往往会出人意料地有实际应用。\n亚里士多德在形而上学中没有取得进展的部分原因是他在矛盾的意图下出发：探索最抽象的想法，受它们无用的假设指导。他就像一个探险家寻找北边的领土，却从假设它位于南边开始。\n而且由于他的作品成为未来几代探险家使用的地图，他也把他们送错了方向。[8] 也许最糟糕的是，他保护他们免受外界的批评和自己内心指南针的驱使，确立了最高尚的理论知识必须无用的原则。\n形而上学主要是一个失败的实验。从中产生的一些想法证明值得保留；其大部分根本没有任何影响。形而上学是最少被阅读的著名书籍之一。它不像牛顿的原理那样难以理解，而是像一条混乱的信息。\n可以说这是一个有趣的失败实验。但不幸的是，亚里士多德的继承者从形而上学等作品中得出的结论并非如此。[9] 不久之后，西方世界陷入智力困难时期。柏拉图和亚里士多德的作品没有被取代的版本1，而是成为需要掌握和讨论的受尊崇文本。而且事情维持了令人震惊的长时间。直到大约1600年（在欧洲，那时重心已经转移）才有人有足够的信心把亚里士多德的作品视为错误目录。但即使如此他们也很少直接这样说。\n如果这个差距如此之长似乎令人惊讶，考虑一下从希腊时代到文艺复兴时期数学进展如此之少。\n在 intervening years，一个不幸的想法占据了主导：产生像形而上学这样的作品不仅是可接受的，而且是一种特别有声望的工作，由被称为哲学家的一类人完成。没有人想到回去调试亚里士多德的动机论证。所以他们没有纠正亚里士多德通过陷入其中而发现的问题——如果你对非常抽象的想法谈论得太松散，很容易迷失——他们继续陷入其中。\n奇点\n然而，奇怪的是，他们创作的作品继续吸引新读者。传统哲学在这方面占据了一种奇点。如果你以不清晰的方式写关于大想法的东西，你会产生对缺乏经验但智力雄心的学生看似诱人的东西。在知道更好之前，很难区分因为作者头脑不清晰而难以理解的东西和因为所代表的思想难以理解而难以理解的数学证明之类的东西。对于没有学到区别的人来说，传统哲学似乎极具吸引力：像数学一样难（因此令人印象深刻），但范围更广。这就是我在高中时被吸引的原因。\n这个奇点更奇特的是它有自己的防御机制。当事情难以理解时，怀疑它们是无意义的人通常保持沉默。没有办法证明文本是无意义的。最接近的是显示某类文本的官方法官无法区分它们和安慰剂。[10]\n所以大多数怀疑哲学是浪费时间的人没有谴责哲学，而是学习了其他东西。仅此一点就是相当有罪的 evidence，考虑到哲学的主张。它应该是关于终极真理的。如果它兑现了承诺，所有聪明人都会对它感兴趣。\n因为哲学的缺陷赶走了可能纠正它们的那种人，它们倾向于自我延续。伯特兰·罗素在1912年的一封信中写道：迄今为止，被哲学吸引的人大多是那些热爱大概括的人，这些概括都是错的，所以很少有思维精确的人从事这个主题。[11] 他的反应是让维特根斯坦来处理它，结果戏剧性。\n我认为维特根斯坦之所以出名，不是因为发现大多数以前的哲学是浪费时间，从环境证据来看，每个学了一点哲学但没有继续深入研究的聪明人一定都做出了这个发现，而是因为他的反应方式。[12] 他不是安静地转向另一个领域，而是从内部制造了轰动。他是戈尔巴乔夫。\n哲学领域仍然被维特根斯坦给它的惊吓所震撼。[13] 后来他花了很多时间谈论词语如何工作。既然这似乎被允许，这就是许多哲学家现在所做的。同时，感觉到形而上学思辨部门有真空，以前做文学批评的人一直在以新的名字向康德方向靠近，如\u0026quot;文学理论\u0026rdquo;、\u0026ldquo;批判理论\u0026rdquo;，当他们有雄心时，干脆就是\u0026quot;理论\u0026rdquo;。写作是熟悉的词语沙拉：性别不像一些其他语法模式，这些模式精确地表达一种概念模式，没有任何与概念模式相对应的现实，因此不精确地表达现实中智力可以以某种方式构想事物的东西，即使那种动机不是事物本身固有的。[14] 我描述的奇点不会消失。有一种市场听起来令人印象深刻且无法被证伪的写作。永远有供求双方。所以如果一个群体放弃这个领域，总有其他人准备占领它。\n一个建议\n我们可能做得更好。这里有一个有趣的可能性。也许我们应该做亚里士多德打算做的事，而不是他实际做的事。他在形而上学中宣布的目标似乎值得追求：发现最普遍的真理。这听起来不错。但让我们不要因为它们无用而试图发现它们，让我们因为它们有用而试图发现它们。\n我建议我们再试一次，但我们使用迄今为止被鄙视的标准，适用性，作为指导，防止我们陷入抽象的沼泽。与其试图回答问题：最普遍的真理是什么？让我们试图回答问题在我们能说的所有有用事物中，哪些是最普遍的？我提出的效用测试是我们是否让阅读我们所写内容的人之后做任何不同的事情。知道我们必须给出明确的（即使是隐含的）建议将防止我们超越所用词语的分辨率。\n目标与亚里士多德相同；我们只是从不同的方向接近它。\n作为一个有用的、普遍的想法的例子，考虑控制实验。这是一个证明具有广泛适用性的想法。有些人可能会说它是科学的一部分，但它不是任何特定科学的一部分；它字面上是元物理学（在我们的\u0026quot;元\u0026quot;意义上）。进化的想法是另一个。它证明具有相当广泛的应用——例如，在遗传算法甚至产品设计中。法兰克福关于谎言和胡扯的区别似乎是一个有希望的最新例子。[15]\n这些在我看来哲学应该是什么样子：相当普遍的观察，理解它们的人会因此做不同的事情。\n这样的观察必然是关于定义不精确的事物。一旦你开始使用精确含义的词语，你就在做数学了。所以从效用出发不会完全解决我上面描述的问题——它不会清除形而上学奇点。但它应该有帮助。它为有良好意图的人提供了进入抽象的新路线。他们可能因此产生让有不良意图的人的写作相比之下显得糟糕的东西。\n这种方法的一个缺点是它不会产生能让你获得终身教职的那种写作。不仅仅是因为它目前不是时尚。为了在任何领域获得终身教职，你必须不得出终身教职委员会成员可能不同意结论。在实践中这个问题有两种解决方案。在数学和科学中，你可以证明你所说的，或者至少调整你的结论，使你不会声称任何虚假的东西（\u0026ldquo;8个受试者中有6个在治疗后血压降低\u0026rdquo;）。在人文学科中，你可以避免得出任何明确的结论（例如，得出问题是复杂的），或者得出如此狭隘的结论，以至于没有人足够关心而不同意。\n我提倡的哲学将无法采取这两种路线。充其量你只能达到散文家的证明标准，而不是数学家或实验者的标准。然而，你将无法在不暗示明确且相当普遍适用的结论的情况下满足效用测试。更糟糕的是，效用测试倾向于产生令人讨厌的结果：告诉人们他们已经相信的事情没有用，而人们经常被告知他们不相信的事情而感到不安。\n不过，令人兴奋的事情是。任何人都可以这样做。从有用开始并提高普遍性以达到普遍加有用可能不适合试图获得终身教职的初级教授，但对其他人更好，包括已经有终身教职的教授。山的这一边是一个很好的缓坡。你可以从写有用但非常具体的事情开始，然后逐渐使它们更普遍。乔的玉米饼很好。什么造就了好的玉米饼？什么造就了好食物？什么造就任何东西好？你可以想花多长时间就花多长时间。你不必一路走到山顶。你不必告诉任何人你在做哲学。\n如果做哲学看起来是一项艰巨的任务，这里有一个令人鼓舞的想法。这个领域比看起来年轻得多。虽然西方传统的第一批哲学家生活在大约2500年前，但说这个领域有2500年历史是误导性的，因为在大部分时间里，领先的从业者除了写柏拉图或亚里士多德的评论外没有做得更多，同时提防下一个入侵军队。在他们没有的时候，哲学与宗教无可救药地混合在一起。直到几百年前才摆脱出来，即使如此也受到我上面描述的结构性问题的困扰。如果我说这个，有些人会说这是一个荒谬的过度宽泛和不仁慈的概括，其他人会说这是旧新闻，但不管怎样：从他们的作品判断，迄今为止大多数哲学家都在浪费时间。所以在某种意义上，这个领域仍然在第一步。[16]\n这听起来是一个荒谬的说法。在10000年后不会显得如此荒谬。文明似乎总是老的，因为它总是有史以来最老的。说某事物是否真正老的唯一方法是看结构性证据，而结构上哲学是年轻的；它仍然在词语意外崩溃中摇摇晃晃。\n哲学现在就像1500年的数学一样年轻。还有更多要发现的东西。\n",
    "description": "",
    "tags": ["哲学","思考","智慧","教育","知识","学习"],
    "categories": [],
    "content": "→ English Version\n如何做哲学 2007年9月\n高中时我决定大学要学哲学。我有几个动机，有些比其他更体面。其中一个不太体面的动机是为了震惊人们。在我长大的地方，大学被视为职业培训，所以学哲学看起来是一种令人印象深刻的实用主义。就像在你的衣服上划破洞，或在耳朵上戴安全别针一样，这些都是当时刚刚流行的令人印象深刻的实用主义形式。\n但我也有一些更诚实的动机。我认为学习哲学是通往智慧的捷径。所有主修其他科目的人最终只会获得一堆领域知识。我将学到真正的东西。\n我尝试过读几本哲学书。不是近代的；在我们的高中图书馆里找不到那些。但我尝试读柏拉图和亚里士多德。我怀疑我是否相信自己理解了他们，但他们听起来像是在谈论重要的事情。我以为我会在大学里学到什么。\n大四前的那个夏天我修了一些大学课程。我在微积分课上学到了很多，但在哲学101课上学得不多。然而我学习哲学的计划仍然完好无损。没有学到任何东西是我的错。我没有足够仔细地阅读我们被指定的书籍。我会在大学再给贝克莱的人类知识原理一次机会。如此受推崇又难以阅读的东西，如果能弄明白其中奥妙，必定有其价值。\n二十六年后，我仍然不理解贝克莱。我有一本不错的他的著作集。我会读它吗？似乎不太可能。\n那时和现在的区别是，现在我知道为什么贝克莱可能不值得努力去理解。我想我现在明白哲学出了什么问题，以及我们如何修复它。\n词语\n我大学大部分时间确实主修了哲学。结果并不如我所愿。我没有学到任何神奇真理，相比之下其他一切都只是领域知识。但我至少现在知道为什么没有学到。哲学并不像数学、历史或大多数其他大学学科那样真正有一个主题。没有必须掌握的核心知识。最接近的是了解多年来各个哲学家对不同话题说了什么。很少有人足够正确以至于人们忘记了是谁发现了他们发现的东西。\n形式逻辑有一些主题。我修了几门逻辑课。我不知道是否从中学到了什么。[1] 在我看来，能够在大脑中翻转想法非常重要：看到什么时候两个想法没有完全覆盖可能性空间，或者什么时候一个想法与另一个相同但有一两处变化。但学习逻辑教会了我这种思维方式的重要性，还是让我在这方面更擅长了吗？我不知道。\n我知道我从学习哲学中学到了一些东西。最戏剧性的是我在大一年级第一学期立即学到的，在一门由悉尼·舒梅克教授的课程中。我学到我不存在。我（和你）是一组细胞，在各种力量的驱动下蹒跚而行，并称自己为我。但没有一个中心的、不可分割的东西与你的身份同在。你可以想象失去一半大脑还活着。这意味着你的大脑可以被想象分成两半，每半移植到不同的身体里。想象在这样的手术后醒来。你必须想象自己是两个人。\n这里真正的教训是，我们在日常生活中使用的概念是模糊的，如果过度推敲就会崩溃。即使是我们珍视的我这个概念。我花了一段时间才理解这一点，但当我理解时，这是相当突然的，就像十九世纪有人理解进化论并意识到他们小时候被告知的创造故事完全是错的。[2] 在数学之外，词语的推敲有一个极限；事实上，把数学称为研究具有精确含义的术语的学科并不是一个坏的定义。日常词语本质上是模糊的。它们在日常生活中足够好用，以至于你没有注意到。词语似乎有效，就像牛顿物理学似乎有效一样。但如果你推敲得足够远，你总是能让它们崩溃。\n我会说，这对哲学来说是不幸的，这是哲学的核心事实。大多数哲学辩论不仅仅是被词语混淆所困扰，而是被词语混淆所驱动。我们有自由意志吗？取决于你所说的\u0026quot;自由\u0026quot;是什么意思。抽象观念存在吗？取决于你所说的\u0026quot;存在\u0026quot;是什么意思。\n维特根斯坦被普遍认为提出了大多数哲学争议是由于语言混淆造成的观点。我不确定应该给他多少功劳。我怀疑很多人意识到了这一点，但反应只是不学习哲学，而不是成为哲学教授。\n事情怎么会变成这样？人们花了几千年研究的东西真的可能是浪费时间吗？这些都是有趣的问题。事实上，你可以问关于哲学的最有趣的问题中的一些。接近当前哲学传统的最有价值的方式可能既不是陷入像贝克莱那样的无意义思辨，也不是像维特根斯坦那样关闭它们，而是把它作为理性出错的例子来研究。\n历史\n西方哲学真正始于苏格拉底、柏拉图和亚里士多德。我们对他们前人的了解来自后来作品中的片段和引用；他们的学说可以被描述为偶尔涉及分析的思辨宇宙学。推测他们是由促使每个其他社会发明宇宙学的任何东西驱动的。[3]\n随着苏格拉底、柏拉图，特别是亚里士多德，这个传统发生了转折。开始有更多的分析。我怀疑柏拉图和亚里士多德受到数学进步的鼓励。到那时，数学家已经表明，你可以用比编造动听的故事更结论性的方式弄清楚事情。[4]\n人们现在谈论这么多抽象概念，以至于我们没有意识到当他们第一次开始时这必须是一个多大的飞跃。从人们第一次开始描述事物为热或冷到有人问\u0026quot;热是什么？\u0026ldquo;之间，大概有数千年。毫无疑问，这是一个非常渐进的过程。我 …"
  },{
    "title": "如何创业",
    "url": "/paul_graham/essays_zh/start/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何创业 想要创业？获得Y Combinator的资助。\n2005年3月\n（本文源自哈佛计算机协会的一次演讲。）\n要创建一个成功的创业公司，你需要三样东西：优秀的人才、客户真正想要的产品，以及尽可能少地花钱。大多数失败的创业公司都在这三项中有一项失败。一个三项都做到的创业公司很可能会成功。\n想想这一点，这很令人兴奋，因为这三项都是可以做到的。困难，但可以做到。而且，既然一个成功的创业公司通常能让其创始人致富，这意味着致富也是可以做到的。困难，但可以做到。\n如果有一条关于创业公司的信息我想传达，那就是这个。没有哪一步需要魔法般的才华才能解决。\n创意 特别是，你不需要一个绝妙的创意来开始创业。创业公司赚钱的方式是为人们提供比现有技术更好的技术。但人们现有的技术通常非常糟糕，以至于要做到更好并不需要什么才华。\n例如，谷歌的计划只是创建一个不会糟糕的搜索网站。他们有三个新想法：索引更多的网页，使用链接来对搜索结果进行排名，以及拥有干净、简单的网页和不显眼的基于关键词的广告。最重要的是，他们决心创建一个使用起来很棒的网站。毫无疑问，谷歌内部有很多伟大的技术技巧，但整体计划是 straightforward 的。虽然他们现在可能有更大的野心，但仅这一项每年就能为他们带来十亿美元的收入。[1]\n还有很多其他领域和谷歌出现之前的搜索一样落后。我可以想到几个为创业公司生成创意的经验法则，但大多数都归结为：观察人们正在尝试做的事情，然后想出如何以一种不会糟糕的方式来做。\n例如，约会网站现在的糟糕程度远超过谷歌出现之前的搜索。它们都使用同样简单的模式。它们似乎是通过思考如何进行数据库匹配来解决问题的，而不是思考现实世界中的约会是如何运作的。一个大学生可以作为一个课程项目构建更好的东西。而且有大量的资金处于危险之中。在线约会现在是一个有价值的业务，如果它能正常工作，价值可能是一百倍。\n然而，创业公司的创意仅仅是个开始。许多有抱负的创业公司创始人认为整个过程的关键是初始创意，从那时起你要做的就是执行。风险投资家们更清楚。如果你带着一个绝妙的创意去风险投资公司，告诉他们如果他们签署保密协议你就会告诉他们，大多数人会叫你滚蛋。这表明一个单纯的创意价值多少。市场价格低于签署保密协议的不便。\n另一个表明初始创意价值不高的迹象是改变计划的创业公司数量。微软的最初计划是通过出售编程语言来赚钱，天知道是些什么东西。他们现在的商业模式直到五年后IBM把它送到他们面前才出现。\n创业公司的创意当然有价值，但问题是，它们不可转移。它们不是你可以交给别人去执行的东西。它们的价值主要是作为起点：作为让拥有它们的人继续思考的问题。\n重要的不是创意，而是拥有创意的人。优秀的人可以修复糟糕的创意，但好的创意无法拯救糟糕的人。\n人才 我说的优秀的人是什么意思？我在创业公司期间学到的最好技巧之一是决定雇用谁的标准。你能否把这个人形容为动物？这可能很难翻译成另一种语言，但我认为美国的每个人都明白这意味着什么。这意味着一个对自己的工作有点过于认真的人；一个把自己所做的事情做得非常好，以至于超越了专业，进入了痴迷状态的人。\n具体含义取决于工作：一个绝不会接受否定的销售人员；一个宁愿熬夜到凌晨4点也不愿带着有bug的代码上床睡觉的黑客；一个会主动给纽约时报记者的手机打电话的公关人员；一个当某物偏离两毫米时会感到身体痛苦的平面设计师。\n几乎所有为我们工作的人都是他们所做事情方面的动物。负责销售的女士非常顽强，我过去常常为和她通话的潜在客户感到遗憾。你能感觉到他们在钩子上挣扎，但你知道在他们签约之前不会有安宁。\n如果你想想你认识的人，你会发现动物测试很容易应用。在脑海中想象这个人的形象，想象\u0026quot;某某是个动物\u0026quot;这句话。如果你笑了，他们就不是。在大公司中你不需要或甚至不想要这种品质，但在创业公司中你需要。\n对于程序员，我们有三个额外的测试。这个人真的聪明吗？如果是，他们能真正完成事情吗？最后，因为一些优秀的黑客有令人难以忍受的性格，我们能忍受他们在身边吗？\n最后一个测试过滤掉的人出人意料地少。如果有人真的聪明，我们可以忍受任何程度的书呆子气。我们不能忍受的是有很多态度的人。但大多数人都不真正聪明，所以我们的第三个测试基本上是第一个测试的重述。\n当书呆子令人难以忍受时，通常是因为他们太努力地表现聪明。但他们越聪明，就越感觉不到表现聪明的压力。因此，作为一个规则，你可以通过他们说\u0026quot;我不知道\u0026quot;、\u0026ldquo;也许你是对的\u0026quot;和\u0026quot;我不太理解x\u0026quot;的能力来认识真正聪明的人。\n这种技术并不总是有效，因为人们可能受到环境的影响。在MIT计算机科学系，似乎有一种表现得像粗鲁自大狂的传统。有人告诉我这最终源于Marvin Minsky，就像经典的飞行员风格据说源自Chuck Yeager一样。即使真正聪明的人在那里也开始这样表现，所以你必须有所宽容。\n我们有Robert Morris很有帮助，他是我遇到的最愿意说\u0026quot;我不知道\u0026quot;的人之一。（至少，在他成为MIT教授之前是这样。）没有人敢在Robert面前摆架子，因为他显然比他们聪明，但自己却零架子。\n像大多数创业公司一样，我们的创始于一群朋友，我们雇用的人大部分是通过个人接触。这是创业公司和大公司之间的关键区别。和朋友相处几天，你会比公司通过面试能学到的更多。[2]\n创业公司在大学周围开始并非巧合，因为那是聪明人相遇的地方。不是人们在MIT和斯坦福的课堂上学到的东西使得技术公司在它们周围兴起。他们可以在班级里唱营火歌曲，只要招生工作正常。\n如果你开始创业公司，很可能与你从大学或研究生院认识的人一起。所以理论上你应该尽量在学校里与尽可能多的聪明人交朋友，对吗？嗯，不对。不要有意识地拉关系；这对黑客来说效果不好。\n你在大学里应该做的是做自己的项目。黑客应该这样做，即使他们不计划开始创业公司，因为这是学习如何编程的唯一真正方法。在某些情况下，你可能会与其他学生合作，这是了解优秀黑客的最佳方式。项目甚至可能发展成创业公司。但再次，我不会过于直接地针对任何一个目标。不要强求；只是和你喜欢的人一起做你喜欢的事情。\n理想情况下，你希望有两到四个创始人。只从一个开始会很难。一个人会觉得开始公司的道德负担难以承受。即使是比尔·盖茨，他似乎能够承受相当大的道德负担，也必须有一个联合创始人。但你不想有那么多创始人，以至于公司开始看起来像团体照。部分是因为你一开始不需要很多人，但主要是因为创始人越多，分歧就越大。当只有两三个创始人时，你知道你必须立即解决争议或灭亡。如果有七八个，分歧可能会持续并硬化成派系。你不想仅仅投票；你需要一致。\n在技术创业公司中，大多数创业公司都是如此，创始人应该包括技术人员。在互联网泡沫期间，有很多创业公司是由商业人士创立的，然后他们寻找黑客来为他们创建产品。这不太有效。商业人士不擅长决定如何处理技术，因为他们不知道选择是什么，或者哪些问题困难，哪些容易。当商业人士试图雇用黑客时，他们无法分辨哪些是好的。即使是其他黑客也很难做到这一点。对商业人士来说这是轮盘赌。\n创业公司的创始人是否必须包括商业人士？这取决于情况。当我们开始时，我们认为是这样，我们问了几个人说他们了解这个叫做\u0026quot;商业\u0026quot;的神秘事物，问他们是否愿意成为总裁。但他们都说不，所以我不得不自己做。我发现商业不是什么大秘密。它不像物理或医学那样需要广泛研究的东西。你只是试图让人们为你的东西付钱。\n我认为我对商业如此神秘的原因是我讨厌做这件事的想法。我想在软件纯粹的智力世界工作，而不是处理客户的世俗问题。不想被拖入某种工作的人常常对它产生一种保护性的无能。Paul Erdos特别擅长这个。似乎甚至不能将葡萄柚切成两半（更不用说去商店买一个），他强迫别人为他做这些事情，把所有时间都留给数学。Erdos是个极端的例子，但大多数丈夫在某种程度上使用相同的伎俩。\n一旦我被迫放弃我的保护性无能，我发现商业既不像我担心的那么难，也不那么无聊。商业中有些深奥的领域相当困难，比如税法或衍生品定价，但你在创业公司中不需要了解这些。经营创业公司所需的关于商业的所有知识，都是在商学院甚至大学出现之前人们就已经知道的常识。\n如果你在福布斯400强上逐个查看，在每个有MBA的人名字旁边做个标记，你会学到关于商学院的重要东西。在沃伦·巴菲特之后，你要到第22位才遇到另一个MBA，耐克的CEO菲尔·奈特。前50名中只有5个MBA。你在福布斯400强中注意到的是很多有技术背景的人。比尔·盖茨、史蒂夫·乔布斯、拉里·埃利森、迈克尔·戴尔、杰夫·贝佐斯、戈登·摩尔。技术业务的统治者往往来自技术，而不是商业。所以如果你想投资两年时间来帮助你在商业中成功，证据表明你最好学习如何破解而不是获得MBA。[3]\n有一个原因你可能想在创业公司中包括商业人士：因为你必须有至少一个愿意并能够专注于客户想要什么的人。有些人认为只有商业人士能做到这一点——黑客可以实现软件，但不能设计它。这是胡说。了解如何编程并不会阻止黑客理解用户，不了解编程也不会神奇地使商业人士能够理解他们。\n然而，如果你不能理解用户，你应该要么学习如何理解，要么找到一个能够理解用户的联合创始人。这是技术创业公司最重要的问题，也是比其他任何问题都更可能导致失败的原因。\n客户想要什么 不仅仅是创业公司必须担心这一点。我认为大多数失败的企业都是因为它们没有给客户想要的东西。看看餐馆。很大比例的失败，大约四分之一在第一年。但你能想到一个食物真正很好却倒闭的餐馆吗？\n无论怎样，食物很棒的餐馆似乎都很繁荣。一个食物很棒的餐馆可能昂贵、拥挤、嘈杂、昏暗、偏远，甚至服务很差，但人们会继续来。确实，食物平庸的餐馆有时可以通过花招吸引顾客。但这种方法非常冒险。更直接的方法是把食物做好。\n技术也是如此。你听到各种关于创业公司失败的原因。但你能想到一个产品非常受欢迎却仍然失败的吗？\n在几乎所有失败的创业公司中，真正的问题是客户不想要产品。对大多数来说，死亡原因列为\u0026quot;资金耗尽\u0026rdquo;，但这只是直接原因。为什么他们不能获得更多资金？可能是因为产品很差，或者似乎不可能完成，或者两者兼而有之。\n当我试图思考每个创业公司需要做的事情时，我几乎包括了第四项：尽快推出版本1。但我决定不这样做，因为这在制作客户想要的东西中是隐含的。制作客户想要的东西的唯一方法是把原型放在他们面前，并根据他们的反应进行完善。\n另一种方法是我所谓的\u0026quot;万福玛利亚\u0026quot;策略。你为产品制定详细计划，雇佣一个工程师团队来开发它（这样做的人倾向于称黑客为\u0026quot;工程师\u0026quot;），然后一年后发现你花了两百万美元开发没有人想要的东西。这在泡沫时期并不罕见，尤其是在由商业人士运营的公司中，他们认为软件开发是一件可怕的事情，因此必须仔细计划。\n我们甚至从未考虑过这种方法。作为一个Lisp黑客，我来自快速原型开发的传统。我不会声称（至少不是在这里）这是编写每个程序的正确方式，但它无疑是编写创业公司软件的正确方式。在创业公司中，你的初始计划几乎肯定在某些方面是错误的，你的第一优先事项应该是找出哪里错了。唯一的方法是尝试实现它们。\n像大多数创业公司一样，我们在即时改变了计划。起初我们期望我们的客户是网络顾问。但结果是他们不喜欢我们，因为我们的软件易于使用，我们托管网站。客户很容易解雇他们。我们也认为我们能够签约很多目录公司，因为在线销售是他们现有业务的自然延伸。但在1996年，这是一个很难销售的东西。我们在目录公司谈话的中层管理人员将网络视为不是机会，而是意味着更多的工作。\n我们确实签约了一些更冒险的目录公司。其中包括好莱坞的Frederick，它给了我们处理服务器上沉重负载的宝贵经验。但我们的大多数用户是看到网络作为建立业务机会的小型个体商人。有些人有零售店，但许多人只存在于网上。所以我们改变了方向，专注于这些用户。我们不再专注于网络顾问和目录公司想要的功能，而是努力使软件易于使用。\n我从中学到了有价值的东西。努力使技术易于使用是非常值得的。黑客如此习惯于计算机，他们不知道软件对普通人来说似乎多么可怕。斯蒂芬·霍金的编辑告诉他，他在书中包含的每一个方程都会使销量减半。当你努力使技术更容易使用时，你是在向上而不是向下走那条曲线。易用性提高10%不仅增加10%的销量。它更可能使你的销量翻倍。\n你如何弄清楚客户想要什么？观察他们。最好的地方之一是在贸易展览会上。贸易展览作为获得新客户的方式并不划算，但作为市场研究是值得的。我们在贸易展览会上不仅仅是做预制的演示。我们过去常常向人们展示如何构建真实、工作的商店。这意味着我们可以在他们使用我们的软件时观察，并与他们谈论他们需要什么。\n无论你开始什么类型的创业公司，对你来说，创始人，理解用户想要什么可能都是一种挑战。你可以在不研究用户的情况下构建的唯一软件是你作为典型用户的那种。但这只是那种倾向于开源的软件：操作系统、编程语言、编辑器等等。所以如果你为了钱开发技术，你可能不会为像你这样的人开发它。事实上，你可以用这个作为为创业公司生成创意的方法：不像你的人想要从技术中得到什么？\n当大多数人想到创业公司时，他们想到的是像苹果或谷歌这样的公司。每个人都知道这些，因为它们是大型消费品牌。但每一个这样的创业公司，就有二十个在利基市场运营或在基础设施中安静生活的公司。所以如果你开始一个成功的创业公司，很可能你会开始其中一个。\n换句话说，如果你试图开始那种必须成为大型消费品牌的创业公司，成功的几率更大。最好的机会在利基市场。由于创业公司通过为人们提供比现有更好的东西来赚钱，最好的机会是情况最糟糕的地方。很难找到比公司IT部门更糟糕的地方。你不会相信公司在软件上花费的金额，以及他们得到的垃圾。这种不平衡等于机会。\n如果你想要创业公司的创意，你能做的最有价值的事情之一是找到一家中型非技术公司，花几周时间观察他们用计算机做什么。大多数优秀的黑客对这些地方发生的恐怖行为毫无概念，就像富有的美国人对巴西贫民窟发生的事情毫无概念一样。\n从为小公司编写软件开始，因为向他们销售更容易。向大公司销售东西如此有价值，以至于向他们销售他们目前使用的垃圾的人花费大量时间和金钱来做这件事。虽然你只用一个额叶绑在背后就能破解Oracle，但你无法击败Oracle销售人员。所以如果你想通过更好的技术获胜，瞄准较小的客户。[4]\n无论如何，它们是市场上更具战略价值的部分。在技术中，低端总是吃掉高端。使廉价产品更强大比使强大产品更便宜更容易。所以开始作为廉价、简单选择的产品往往会逐渐变得更强大，直到像房间里的水一样上升，将\u0026quot;高端\u0026quot;产品挤压到天花板。Sun对大型机这样做，Intel正在对Sun这样做。Microsoft Word对像Interleaf和Framemaker这样的桌面出版软件这样做。大众市场数码相机对为专业人士制造的昂贵型号这样做。Avid对专业视频编辑系统制造商这样做，现在苹果正在对Avid这样做。亨利·福特对他之前的汽车制造商这样做。如果你构建简单、廉价的选择，你不仅会发现一开始更容易销售，而且你也将处于征服市场其余部分的最佳位置。\n让任何人在你下面飞行是非常危险的。如果你拥有最便宜、最简单的产品，你将拥有低端。而如果你没有，你就是那些拥有的人的靶子。\n融资 为了实现这一切，你需要资金。一些创业公司是自筹资金的——例如微软——但大多数不是。我认为从投资者那里拿钱是明智的。要自筹资金，你必须从咨询公司开始，而很难从咨询公司转向产品公司。\n在经济上，创业公司像一门及格/不及格的课程。从创业公司致富的方法是最大化公司成功的机会，而不是最大化你保留的股票数量。所以如果你可以用股票换取改善你机会的东西，这可能是明智的举动。\n",
    "description": "",
    "tags": ["创业","企业家精神","商业","融资","创新","技术"],
    "categories": [],
    "content": "→ English Version\n如何创业 想要创业？获得Y Combinator的资助。\n2005年3月\n（本文源自哈佛计算机协会的一次演讲。）\n要创建一个成功的创业公司，你需要三样东西：优秀的人才、客户真正想要的产品，以及尽可能少地花钱。大多数失败的创业公司都在这三项中有一项失败。一个三项都做到的创业公司很可能会成功。\n想想这一点，这很令人兴奋，因为这三项都是可以做到的。困难，但可以做到。而且，既然一个成功的创业公司通常能让其创始人致富，这意味着致富也是可以做到的。困难，但可以做到。\n如果有一条关于创业公司的信息我想传达，那就是这个。没有哪一步需要魔法般的才华才能解决。\n创意 特别是，你不需要一个绝妙的创意来开始创业。创业公司赚钱的方式是为人们提供比现有技术更好的技术。但人们现有的技术通常非常糟糕，以至于要做到更好并不需要什么才华。\n例如，谷歌的计划只是创建一个不会糟糕的搜索网站。他们有三个新想法：索引更多的网页，使用链接来对搜索结果进行排名，以及拥有干净、简单的网页和不显眼的基于关键词的广告。最重要的是，他们决心创建一个使用起来很棒的网站。毫无疑问，谷歌内部有很多伟大的技术技巧，但整体计划是 straightforward 的。虽然他们现在可能有更大的野心，但仅这一项每年就能为他们带来十亿美元的收入。[1]\n还有很多其他领域和谷歌出现之前的搜索一样落后。我可以想到几个为创业公司生成创意的经验法则，但大多数都归结为：观察人们正在尝试做的事情，然后想出如何以一种不会糟糕的方式来做。\n例如，约会网站现在的糟糕程度远超过谷歌出现之前的搜索。它们都使用同样简单的模式。它们似乎是通过思考如何进行数据库匹配来解决问题的，而不是思考现实世界中的约会是如何运作的。一个大学生可以作为一个课程项目构建更好的东西。而且有大量的资金处于危险之中。在线约会现在是一个有价值的业务，如果它能正常工作，价值可能是一百倍。\n然而，创业公司的创意仅仅是个开始。许多有抱负的创业公司创始人认为整个过程的关键是初始创意，从那时起你要做的就是执行。风险投资家们更清楚。如果你带着一个绝妙的创意去风险投资公司，告诉他们如果他们签署保密协议你就会告诉他们，大多数人会叫你滚蛋。这表明一个单纯的创意价值多少。市场价格低于签署保密协议的不便。\n另一个表明初始创意价值不高的迹象是改变计划的创业公司数量。微软的最初计划是通过出售编程语言来赚钱，天知道是些什么东西。他们现在的商业模式直到五年后IBM把它送到他们面前才出现。\n创业公司的创意当然有价值，但问题是，它们不可转移。它们不是你可以交给别人去执行的东西。它们的价值主要是作为起点：作为让拥有它们的人继续思考的问题。\n重要的不是创意，而是拥有创意的人。优秀的人可以修复糟糕的创意，但好的创意无法拯救糟糕的人。\n人才 我说的优秀的人是什么意思？我在创业公司期间学到的最好技巧之一是决定雇用谁的标准。你能否把这个人形容为动物？这可能很难翻译成另一种语言，但我认为美国的每个人都明白这意味着什么。这意味着一个对自己的工作有点过于认真的人；一个把自己所做的事情做得非常好，以至于超越了专业，进入了痴迷状态的人。\n具体含义取决于工作：一个绝不会接受否定的销售人员；一个宁愿熬夜到凌晨4点也不愿带着有bug的代码上床睡觉的黑客；一个会主动给纽约时报记者的手机打电话的公关人员；一个当某物偏离两毫米时会感到身体痛苦的平面设计师。\n几乎所有为我们工作的人都是他们所做事情方面的动物。负责销售的女士非常顽强，我过去常常为和她通话的潜在客户感到遗憾。你能感觉到他们在钩子上挣扎，但你知道在他们签约之前不会有安宁。\n如果你想想你认识的人，你会发现动物测试很容易应用。在脑海中想象这个人的形象，想象\u0026quot;某某是个动物\u0026quot;这句话。如果你笑了，他们就不是。在大公司中你不需要或甚至不想要这种品质，但在创业公司中你需要。\n对于程序员，我们有三个额外的测试。这个人真的聪明吗？如果是，他们能真正完成事情吗？最后，因为一些优秀的黑客有令人难以忍受的性格，我们能忍受他们在身边吗？\n最后一个测试过滤掉的人出人意料地少。如果有人真的聪明，我们可以忍受任何程度的书呆子气。我们不能忍受的是有很多态度的人。但大多数人都不真正聪明，所以我们的第三个测试基本上是第一个测试的重述。\n当书呆子令人难以忍受时，通常是因为他们太努力地表现聪明。但他们越聪明，就越感觉不到表现聪明的压力。因此，作为一个规则，你可以通过他们说\u0026quot;我不知道\u0026quot;、\u0026ldquo;也许你是对的\u0026quot;和\u0026quot;我不太理解x\u0026quot;的能力来认识真正聪明的人。\n这种技术并不总是有效，因为人们可能受到环境的影响。在MIT计算机科学系，似乎有一种表现得像粗鲁自大狂的传统。有人告诉我这最终源于Marvin …"
  },{
    "title": "如何创建Google",
    "url": "/paul_graham/essays_zh/google/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何创建Google 2024年3月\n（这是我对14岁和15岁的孩子们做的一次演讲，内容是如果他们以后想创业，现在应该做什么。很多学校认为他们应该告诉学生一些关于创业的事情。这就是我认为他们应该告诉学生的。）\n你们大多数人可能认为，当你们进入所谓的现实世界时，你们最终将不得不找某种工作。这不是真的，今天我要谈论一个你可以用来避免找工作的技巧。\n这个技巧就是创办自己的公司。所以这不是避免工作的技巧，因为如果你创办自己的公司，你会比有一份普通工作时更努力工作。但是你会避免工作中带来的许多烦人的事情，包括老板告诉你该做什么。\n从事自己的项目比从事别人的项目更令人兴奋。你也可以变得富有得多。事实上，这是真正致富的标准方法。如果你看看偶尔在媒体上发布的最富有的人名单，几乎所有人都是通过创办自己的公司做到的。\n创办自己的公司可以意味着从开理发店到创办Google的任何事情。我在这里要谈论的是这个连续体的一个极端端。我要告诉你如何创建Google。\n连续体的Google端的公司在年轻时被称为初创公司。我了解它们的原因是，我妻子杰西卡和我创办了一个名为Y Combinator的组织，它基本上是一个初创公司工厂。自2005年以来，Y Combinator已经资助了4000多家初创公司。所以我们确切地知道创办初创公司需要什么，因为我们过去19年来一直在帮助人们做这件事。\n你可能会认为我说要告诉你如何创建Google是在开玩笑。你可能在想\u0026quot;我们怎么能创建Google？\u0026ldquo;但这实际上就是创建Google的人在开始之前所想的。如果你告诉Google的创始人拉里·佩奇和谢尔盖·布林，他们即将创办的公司有一天会价值超过万亿美元，他们的大脑会爆炸。\n当你开始做初创公司时，你只能知道它似乎值得追求。你不知道它会变成一家价值数十亿美元的公司还是一家倒闭的公司。所以当我说我要告诉你如何创建Google时，我的意思是我要告诉你如何达到可以创办一家公司的程度，这家公司成为Google的机会与Google在开始时成为Google的机会一样多。[1]\n你如何从现在的位置达到可以创办成功初创公司的程度？你需要三样东西。你需要擅长某种技术，你需要一个关于你要构建什么的主意，你需要联合创始人来一起创办公司。\n你如何变得擅长技术？你如何选择要擅长哪种技术？这两个问题的答案原来是相同的：做你自己的项目。不要试图猜测基因编辑、大语言模型或火箭是否会成为最有价值的技术。没有人能预测这一点。只要做你最感兴趣的事情。你会对你感兴趣的事情比因为你认为应该做而做的事情更努力工作。\n如果你不确定要擅长哪种技术，那就擅长编程。这是过去30年普通初创公司的来源，而这在未来10年内可能不会改变。\n你们中那些在学校上计算机科学课程的人现在可能在想，好吧，我们已经搞定了。我们已经在学习所有关于编程的知识。但是抱歉，这还不够。你必须做你自己的项目，而不仅仅是在课堂上学习东西。你可以在计算机科学课程中取得好成绩，但从来没有真正学会编程。事实上，你可以从顶尖大学毕业，获得计算机科学学位，但仍然不擅长编程。这就是为什么所有科技公司都会让你参加编程测试才会雇佣你，不管你去过什么大学或在那里表现如何。他们知道成绩和考试成绩证明不了什么。\n如果你真的想学会编程，你必须做你自己的项目。那样你学得快得多。想象一下，你在写一个游戏，里面有你想做的事情，而你不知道怎么做。你会比我快得多地弄明白如何做，比你在课堂上学到任何东西都快。\n不过，你不必学习编程。如果你想知道什么算作技术，它实际上包括你可以用\u0026quot;制造\u0026quot;或\u0026quot;构建\u0026quot;这个词描述的一切。所以焊接算，制作衣服算，制作视频也算。无论你最感兴趣的是什么。关键的区别在于你是在生产还是在消费。你在写电脑游戏，还是在玩电脑游戏？这就是分界线。\n苹果公司的创始人史蒂夫·乔布斯在青少年时期花时间研究书法——你在中世纪手稿中看到的那种美丽书写。没有人，包括他自己，认为这会对他的职业生涯有帮助。他这样做只是因为他感兴趣。但结果证明这对他的帮助很大。让苹果真正变得伟大的计算机，Macintosh，恰恰在计算机变得足够强大可以制作像印刷书籍中的字母而不是你在8位游戏中看到的计算机式字母的时候问世。苹果在这方面击败了所有人，原因之一是史蒂夫是计算机行业中少数真正懂得图形设计的人之一。\n不要觉得你的项目必须是严肃的。它们可以像你喜欢的那样轻浮，只要你在构建你兴奋的东西。大概90%的程序员从构建游戏开始。他们和他们的朋友喜欢玩游戏。所以他们构建他们和他们的朋友想要的那种东西。如果你有一天想创办初创公司，这正是你15岁时应该做的事情。\n你不必只做一个项目。事实上，学习多种东西是好的。史蒂夫·乔布斯不仅学习了书法。他还学习了电子学，这更有价值。无论你最感兴趣的是什么。（你注意到这里的主题了吗？）\n所以这就是你需要的三个东西中的第一个，变得擅长某种或某些技术。你做这件事的方式和你变得擅长小提琴或足球的方式相同：练习。如果你在22岁创办初创公司，现在开始写你自己的程序，那么到创办公司时，你将至少花费7年时间练习编写代码，任何事情练习7年后你都可以变得相当擅长。\n假设你现在22岁并且已经成功了：你现在真的擅长某种技术。你如何获得初创公司的主意？这似乎可能是困难的部分。即使你是一个好的程序员，你如何获得创建Google的主意？\n实际上，一旦你擅长技术，获得初创公司的主意就很容易。一旦你擅长某种技术，当你看世界时，你会看到缺失事物周围的虚线轮廓。你开始能够看到技术本身缺失的东西，以及可以使用它修复的所有破损东西，而每一个都是潜在的初创公司。\n在我们家附近的小镇上有一家商店，门口有个标志警告门很难关上。这个标志已经存在好几年了。对商店里的人来说，门卡住一定看起来像这种神秘的自然现象，他们所能做的就是竖起一个标志警告顾客。但任何木匠看到这种情况都会想\u0026quot;为什么不把卡住的部分刨掉？\u0026rdquo;\n一旦你擅长编程，世界上所有缺失的软件开始变得像对木匠来说卡住的门一样明显。我给你一个真实的例子。回到20世纪，美国大学过去出版包含所有学生姓名和联系信息的印刷目录。当我告诉你这些目录被称为什么时，你会知道我在谈论哪个初创公司。它们被称为facebook，因为通常每个学生名字旁边都有一张照片。\n所以马克·扎克伯格2002年出现在哈佛，而大学仍然没有把facebook放到网上。每个单独的宿舍都有在线的facebook，但没有整个大学的。大学行政部门一直在努力开会讨论这个问题，大概再过十年左右可能会解决问题。大多数学生没有有意识地注意到有什么问题。但马克是个程序员。他看着这种情况想\u0026quot;嗯，这很愚蠢。我可以在一晚上写个程序来解决这个问题。只要让人们上传他们自己的照片，然后将数据组合成整个大学的新网站。\u0026ldquo;所以他做了。几乎一夜之间，他就有数千用户。\n当然Facebook当时还不是初创公司。它只是一个\u0026hellip;项目。又是这个词。项目不仅是学习技术的最佳方式。它们也是初创公司主意的最佳来源。\nFacebook在这方面并不不寻常。苹果和Google也是从项目开始的。苹果本不是为了成为一家公司。史蒂夫·沃兹尼亚克只是想建造自己的计算机。它只有在史蒂夫·乔布斯说\u0026quot;嘿，我想知道我们是否能向其他人销售这台计算机的计划\u0026quot;时才变成一家公司。苹果就是这样开始的。他们甚至没有销售计算机，只是销售计算机的计划。你能想象这家公司看起来多么蹩脚吗？\nGoogle也是如此。拉里和谢尔盖最初并不是试图创办公司。他们只是试图让搜索变得更好。在Google之前，大多数搜索引擎不尝试按重要性对它们给你的结果进行排序。如果你搜索\u0026quot;rugby\u0026rdquo;，它们只是给你包含\u0026quot;rugby\u0026quot;这个词的每个网页。1997年网络如此之小，这实际上有效！有点。可能只有20或30个包含\u0026quot;rugby\u0026quot;这个词的页面，但网络呈指数级增长，这意味着这种搜索方式变得指数级更加破损。大多数用户只是想，\u0026ldquo;哇，我肯定要查看很多搜索结果才能找到我想要的东西。\u0026ldquo;门卡住了。但和马克一样，拉里和谢尔盖是程序员。和马克一样，他们看着这种情况想\u0026quot;嗯，这很愚蠢。一些关于rugby的页面比其他页面更重要。让我们弄清楚哪些是更重要的，先显示它们。\u0026rdquo;\n事后看来，这显然是一个很好的初创公司主意。当时并不明显。永远不会明显。如果创办苹果、Google或Facebook显然是个好主意，其他人早就已经做了。这就是为什么最好的初创公司成长自不打算成为初创公司的项目。你不是在试图创办公司。你只是在跟随你对什么有趣的直觉。如果你年轻且擅长技术，那么你对什么有趣的潜意识本能比你对什么会是好公司的有意识想法更好。\n所以，如果你是年轻的创始人，为你自己和你的朋友构建东西使用是至关重要的。年轻创始人犯的最大错误是为某些神秘的其他人群构建东西。但如果你能制作一些你和朋友真正想要使用的东西——你的朋友不是出于对你的忠诚才使用，如果你关闭它他们会非常伤心——那么你几乎肯定有一个好初创公司主意的萌芽。对你来说它可能不像初创公司。可能不清楚如何从中赚钱。但相信我，有办法。\n你在初创公司主意中需要的，而且是你唯一需要的，是你的朋友真正想要的东西。而一旦你擅长技术，这些主意并不难看到。到处都是卡住的门。[2]\n现在是你需要的第三样也是最后一样东西：一个联合创始人，或多个联合创始人。最佳的初创公司有两到三个创始人，所以你需要一到两个联合创始人。你如何找到他们？你能预测我接下来要说什么吗？是同样的东西：项目。你通过与他们一起做项目来找到联合创始人。你在联合创始人中需要的是擅长他们做的事情并且你和他们合作良好的人，而判断这一点的唯一方法是和他们一起做事情。\n在这一点上，我要告诉你一些你可能不想听到的事情。在你的课程中表现出色真的很重要，即使是那些只是记忆或对文学喋喋不休的课程，因为你需要在课程中表现出色才能进入好大学。如果你想创办初创公司，你应该努力进入你能进入的最好的大学，因为那是最好的联合创始人的地方。它也是最好的员工的地方。当拉里和谢尔盖创办Google时，他们开始只是雇佣他们从斯坦福认识的所有最聪明的人，这对他们来说是一个真正的优势。\n经验证据在这方面是明确的。如果你看看最大数量的成功初创公司来自哪里，它几乎与最挑剔的大学名单相同。\n我不认为是这些大学的声望导致了更多的好初创公司从它们那里出来。我也不认为这是因为教学质量更好。驱动这一点的只是进入的难度。你必须相当聪明和坚定才能进入MIT或剑桥，所以如果你确实设法进入了，你会发现其他学生包括很多聪明和坚定的人。[3]\n你不必和你在大学遇到的人一起创办初创公司。Twitch的创始人在七岁时就认识了。Stripe的创始人帕特里克和约翰·科利森在约翰出生时就认识了。但大学是联合创始人的主要来源。因为它们是联合创始人的地方，它们也是主意的地方，因为最好的主意成长自你与成为你联合创始人的人一起做的项目。\n所以从现在到开始初创公司你需要做的事情清单相当短。你需要变得擅长技术，而做到这一点的方法是做你自己的项目。你需要在学校尽可能表现好，这样你才能进入好大学，因为那是联合创始人和主意的地方。\n就是这样，只有两件事，构建东西并在学校表现出色。\n注释 [1] 这句话中的修辞技巧是\u0026quot;Google\u0026quot;指的是不同的事物。我的意思是：一家最终变得像Google一样大的公司，其成长机会与拉里和谢尔盖在开始时可以合理预期Google本身的成长机会一样多。但我认为原版更简洁。\n[2] 为朋友做东西不是初创公司主意的唯一来源。它只是年轻创始人的最佳来源，他们对其他人想要的东西了解最少，他们自己的需求最能预测未来需求。\n[3] 奇怪的是，在像美国这样的国家，本科招生做得不好，这一点尤其如此。美国招生部门让申请者跳过许多与其智力能力无关的任意障碍。但测试越随意，它就越成为仅仅测试决心和足智多谋。而这两者是初创公司创始人最重要的品质。所以美国招生部门在选择创始人方面比他们在选择学生方面做得更好时更擅长。\n感谢贾里德·弗里德曼、卡罗琳·利维、杰西卡·利文斯顿、哈吉·塔加尔和加里·谭阅读本文的草稿。\n",
    "description": "",
    "tags": ["创业","google","项目","联合创始人","教育"],
    "categories": [],
    "content": "→ English Version\n如何创建Google 2024年3月\n（这是我对14岁和15岁的孩子们做的一次演讲，内容是如果他们以后想创业，现在应该做什么。很多学校认为他们应该告诉学生一些关于创业的事情。这就是我认为他们应该告诉学生的。）\n你们大多数人可能认为，当你们进入所谓的现实世界时，你们最终将不得不找某种工作。这不是真的，今天我要谈论一个你可以用来避免找工作的技巧。\n这个技巧就是创办自己的公司。所以这不是避免工作的技巧，因为如果你创办自己的公司，你会比有一份普通工作时更努力工作。但是你会避免工作中带来的许多烦人的事情，包括老板告诉你该做什么。\n从事自己的项目比从事别人的项目更令人兴奋。你也可以变得富有得多。事实上，这是真正致富的标准方法。如果你看看偶尔在媒体上发布的最富有的人名单，几乎所有人都是通过创办自己的公司做到的。\n创办自己的公司可以意味着从开理发店到创办Google的任何事情。我在这里要谈论的是这个连续体的一个极端端。我要告诉你如何创建Google。\n连续体的Google端的公司在年轻时被称为初创公司。我了解它们的原因是，我妻子杰西卡和我创办了一个名为Y Combinator的组织，它基本上是一个初创公司工厂。自2005年以来，Y Combinator已经资助了4000多家初创公司。所以我们确切地知道创办初创公司需要什么，因为我们过去19年来一直在帮助人们做这件事。\n你可能会认为我说要告诉你如何创建Google是在开玩笑。你可能在想\u0026quot;我们怎么能创建Google？\u0026ldquo;但这实际上就是创建Google的人在开始之前所想的。如果你告诉Google的创始人拉里·佩奇和谢尔盖·布林，他们即将创办的公司有一天会价值超过万亿美元，他们的大脑会爆炸。\n当你开始做初创公司时，你只能知道它似乎值得追求。你不知道它会变成一家价值数十亿美元的公司还是一家倒闭的公司。所以当我说我要告诉你如何创建Google时，我的意思是我要告诉你如何达到可以创办一家公司的程度，这家公司成为Google的机会与Google在开始时成为Google的机会一样多。[1]\n你如何从现在的位置达到可以创办成功初创公司的程度？你需要三样东西。你需要擅长某种技术，你需要一个关于你要构建什么的主意，你需要联合创始人来一起创办公司。\n你如何变得擅长技术？你如何选择要擅长哪种技术？这两个问题的答案原来是相同的：做你自己的项目。不要试图猜测基因编辑、大语言模型或火箭是否会成为最有价值的技术。没有人能预测这一点。只要做你最感兴趣的事情。你会对你感兴趣的事情比因为你认为应该做而做的事情更努力工作。\n如果你不确定要擅长哪种技术，那就擅长编程。这是过去30年普通初创公司的来源，而这在未来10年内可能不会改变。\n你们中那些在学校上计算机科学课程的人现在可能在想，好吧，我们已经搞定了。我们已经在学习所有关于编程的知识。但是抱歉，这还不够。你必须做你自己的项目，而不仅仅是在课堂上学习东西。你可以在计算机科学课程中取得好成绩，但从来没有真正学会编程。事实上，你可以从顶尖大学毕业，获得计算机科学学位，但仍然不擅长编程。这就是为什么所有科技公司都会让你参加编程测试才会雇佣你，不管你去过什么大学或在那里表现如何。他们知道成绩和考试成绩证明不了什么。\n如果你真的想学会编程，你必须做你自己的项目。那样你学得快得多。想象一下，你在写一个游戏，里面有你想做的事情，而你不知道怎么做。你会比我快得多地弄明白如何做，比你在课堂上学到任何东西都快。\n不过，你不必学习编程。如果你想知道什么算作技术，它实际上包括你可以用\u0026quot;制造\u0026quot;或\u0026quot;构建\u0026quot;这个词描述的一切。所以焊接算，制作衣服算，制作视频也算。无论你最感兴趣的是什么。关键的区别在于你是在生产还是在消费。你在写电脑游戏，还是在玩电脑游戏？这就是分界线。\n苹果公司的创始人史蒂夫·乔布斯在青少年时期花时间研究书法——你在中世纪手稿中看到的那种美丽书写。没有人，包括他自己，认为这会对他的职业生涯有帮助。他这样做只是因为他感兴趣。但结果证明这对他的帮助很大。让苹果真正变得伟大的计算机，Macintosh，恰恰在计算机变得足够强大可以制作像印刷书籍中的字母而不是你在8位游戏中看到的计算机式字母的时候问世。苹果在这方面击败了所有人，原因之一是史蒂夫是计算机行业中少数真正懂得图形设计的人之一。\n不要觉得你的项目必须是严肃的。它们可以像你喜欢的那样轻浮，只要你在构建你兴奋的东西。大概90%的程序员从构建游戏开始。他们和他们的朋友喜欢玩游戏。所以他们构建他们和他们的朋友想要的那种东西。如果你有一天想创办初创公司，这正是你15岁时应该做的事情。\n你不必只做一个项目。事实上，学习多种东西是好的。史蒂夫·乔布斯不仅学习了书法。他还 …"
  },{
    "title": "如何创造财富",
    "url": "/paul_graham/essays_zh/wealth/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何创造财富 2004年5月\n（本文最初发表于《黑客与画家》。）\n想创业吗？获得Y Combinator的资助。\n如果你想变得富有，你会怎么做？我认为你最好的选择是创办或加入一家创业公司。几百年来，这一直是可靠的致富方式。\u0026ldquo;创业公司\u0026quot;这个词始于1960年代，但其中发生的事情与中世纪风险投资的贸易航行非常相似。\n创业公司通常涉及技术，以至于\u0026quot;高科技创业公司\u0026quot;这个短语几乎是多余的。创业公司是一家解决困难技术问题的小公司。\n很多人只知道这些就能变得富有。你不需要懂物理就能成为一名优秀的投手。但我认为理解基本原则可以给你优势。为什么创业公司必须很小？创业公司随着规模变大会不可避免地不再是创业公司吗？为什么他们经常致力于开发新技术？为什么有这么多创业公司销售新药或计算机软件，却没有销售玉米油或洗衣粉的？\n命题 从经济上讲，你可以把创业公司看作是将你整个工作生活压缩到几年的一种方式。你不再是低强度地工作四十年，而是尽你所能地努力工作四年。这在技术领域特别有利可图，因为在那里你为快速工作获得溢价。\n这是经济命题的简要概述。如果你是一个二十多岁的好黑客，你可以得到一份每年支付约80,000美元的工作。所以平均而言，这样的黑客每年必须为公司创造至少80,000美元的价值才能收支平衡。你可能会工作比公司员工多一倍的时间，而且如果你专注，你在一小时内完成的工作可能是他们的三倍。[1] 你应该再获得至少两倍的倍数，通过消除大公司中可能成为你老板的点发中层经理的阻力。还有一个倍数：你比你的职位描述期望的聪明多少？假设再有三倍。结合所有这些倍数，我声称你可以比你在普通公司工作中的预期效率高36倍。[2] 如果一个相当好的黑客在大公司值每年80,000美元，那么一个非常聪明、非常努力、没有任何公司废话拖慢他的黑客应该能够创造价值约每年300万美元的工作。\n像所有信封背面的计算一样，这个计算有很多摆动空间。我不会试图为实际数字辩护。但我坚持计算的结构。我并不是说倍数正好是36，但它肯定超过10，并且很少像100那样高。\n如果每年300万美元看起来很高，请记住我们谈论的是极限情况：你不仅没有休闲时间，而且确实如此努力工作以至于危及你的健康。\n创业公司不是魔法。它们不改变财富创造的规律。它们只代表了曲线远端的一个点。这里有一个守恒定律在起作用：如果你想赚一百万美元，你必须忍受价值一百万美元的痛苦。例如，赚一百万美元的一种方法是在邮局工作一生，并节省你工资的每一分钱。想象在邮局工作五十年的压力。在创业公司中，你将所有这些压力压缩到三四年中。如果你购买经济规模的痛苦，你确实会获得一定的批量折扣，但你无法逃避基本的守恒定律。如果创办创业公司很容易，每个人都会这么做。\n数百万，而不是数十亿 如果每年300万美元对某些人来说看起来很高，对其他人来说看起来会很低。三百万？我怎样才能像比尔·盖茨那样成为亿万富翁？\n所以让我们现在就把比尔·盖茨排除在外。使用著名的有钱人作为例子不是一个好主意，因为媒体只写最有钱的人，而这些往往是异常值。比尔·盖茨是一个聪明、坚定和勤奋的人，但你需要更多的东西才能赚到他那么多的钱。你还需要非常幸运。\n任何公司的成功都有很大的随机因素。所以你最终在报纸上读到的人是那些非常聪明、完全专注并且中奖的人。当然比尔是聪明和专注的，但微软碰巧也是商业史上最壮观错误之一的受益者：DOS的许可交易。毫无疑问，比尔做了他所能做的一切来引导IBM犯那个错误，并且他在利用它方面做得非常出色，但如果IBM方面有一个有头脑的人，微软的未来就会大不相同。在那个阶段，微软对IBM几乎没有影响力。他们实际上是一个组件供应商。如果IBM要求独家许可，他们应该这样做，微软仍然会签署协议。这对他们来说仍然意味着很多钱，而IBM可以很容易地从其他地方获得操作系统。\n相反，IBM最终利用其在市场的所有力量给予微软对PC标准的控制。从那时起，微软所要做的就是执行。他们从未不得不在大胆的决定上押注公司。他们所要做的就是与被许可人打硬球，并相当及时地复制更具创新性的产品。\n如果IBM没有犯这个错误，微软仍然会是一家成功的公司，但它不可能如此快速地发展壮大。比尔·盖茨会很富有，但他会在福布斯400强的底部附近，与他同龄的其他人在一起。\n有很多致富的方法，而本文只讨论其中一种。本文是关于通过创造财富并为此获得报酬来赚钱的。还有很多其他获得金钱的方法，包括机会、投机、婚姻、继承、盗窃、勒索、欺诈、垄断、贪污、游说、伪造和勘探。大多数巨大的财富可能涉及其中的几种。\n作为致富方式，创造财富的优势不仅在于它更合法（许多其他方法现在是非法的），而且在于它更直接。你只需要做人们想要的事情。\n货币不是财富 如果你想创造财富，理解它是什么会有帮助。财富与货币不是一回事。[3] 财富与人类历史一样古老。事实上，要古老得多；蚂蚁有财富。货币是相对较近的发明。\n财富是根本的东西。财富是我们想要的东西：食物、衣服、房子、汽车、小玩意儿、去有趣的地方旅行等等。你可以在没有钱的情况下拥有财富。如果你有一台魔术机器，可以按命令为你制造汽车或为你煮晚餐或为你洗衣服，或做任何你想要的事情，你就不需要钱。而如果你在南极洲中部，那里没有什么可买的，你有多少钱都无关紧要。\n财富是你想要的，而不是钱。但如果财富是重要的东西，为什么每个人都谈论赚钱？这是一种速记：货币是移动财富的一种方式，在实践中它们通常可以互换。但它们不是一回事，除非你计划通过造假来致富，否则谈论赚钱可能会让你更难理解如何赚钱。\n货币是专业化的副产品。在一个专业化的社会中，你需要的大部分东西，你自己不能制造。如果你想要一个土豆或一支铅笔或一个居住的地方，你必须从别人那里得到。\n你如何让种土豆的人给你一些？通过给他他想要的东西作为回报。但你不能通过直接与需要它们的人交易东西走得很远。如果你制造小提琴，而当地没有农民想要一个，你怎么吃饭？\n社会在变得更加专业化时找到的解决方案是将交易变成一个两步过程。你不是直接用小提琴交换土豆，而是用小提琴交换，比如说，银币，然后你可以再用银币交换你需要的任何其他东西。中间的东西——交换媒介——可以是任何稀有且便携的东西。历史上金属是最常见的，但最近我们一直在使用一种称为美元的交换媒介，它并不实际存在。然而，它作为交换媒介起作用，因为它的稀有性由美国政府保证。\n交换媒介的优势是它使贸易运作。缺点是它倾向于模糊贸易的真正含义。人们认为企业所做的是赚钱。但货币只是中间阶段——只是任何人们想要的东西的速记。大多数企业真正做的是创造财富。他们做人们想要的事情。[4]\n饼谬论 令人惊讶的是，很多人从童年时代起就保留着世界上有固定数量财富的想法。在任何正常的家庭中，任何时刻都有固定数量的钱。但这不是一回事。\n当在这个语境中谈论财富时，它通常被描述为一张饼。\u0026ldquo;你不能把饼做得更大，\u0026ldquo;政客们说。当你谈论一个家庭银行账户中的资金数量，或政府从一年税收中可获得的数量时，这是真的。如果一个人得到更多，另一个人必须得到更少。\n我记得小时候相信，如果几个有钱人拥有所有的钱，留给其他人的就更少。许多人似乎继续相信类似的东西直到成年。当你听到有人谈论x%的人口拥有y%的财富时，这种谬论通常在背景中。如果你计划创办创业公司，那么无论你是否意识到，你都在计划证明饼谬论是错误的。\n在这里让人们误入歧途的是货币的抽象。货币不是财富。它只是我们用来移动财富的东西。所以尽管在某些特定时刻（比如你的家庭，这个月）可能有一定数量的钱可用于与其他人交易你想要的东西，但世界上没有固定数量的财富。你可以创造更多的财富。在整个人类历史中，财富一直在被创造和被破坏（但总体上是创造）。\n假设你拥有一辆破旧的老爷车。下个夏天你可以不坐在你的屁股上，而是花时间把你的车恢复到原始状态。在此过程中你创造了财富。世界——特别是你——多了一辆原始状态的旧车。而且不仅仅是在某种隐喻意义上。如果你卖掉你的车，你会得到更多的钱。\n在恢复你的旧车过程中，你让自己变得更富有。你没有让任何人变得更穷。所以显然没有一张固定的饼。事实上，当你这样看时，你会想知道为什么会有人认为有。[5]\n工匠 最有可能理解财富可以被创造的人是那些擅长制造东西的人，工匠。他们的手工制品变成了商店里的商品。但随着工业化的兴起，工匠越来越少。最大的剩余群体之一是计算机程序员。\n程序员可以坐在计算机前创造财富。一个好的软件本身就是一个有价值的东西。没有制造来混淆这个问题。你输入的字符是一个完整的、成品。如果有人坐下来写一个不会很糟糕的网络浏览器（顺便说一句，这是个好主意），世界就会因此变得更富有。[5b]\n公司里的每个人一起工作以创造财富，在制造更多人们想要的东西的意义上。许多员工（例如邮件室或人事部门的人）在远离实际制造东西的地方工作。程序员不是。他们从字面上思考产品，一行一行地。所以对程序员来说更清楚的是，财富是被制造出来的，而不是像饼的切片一样由某种想象中的爸爸分配的。\n程序员也显然知道财富创造率有巨大的差异。在Viaweb，我们有一个程序员，他是一种生产力怪物。我记得看着他在一个漫长的日子里所做的工作，估计他为公司的市场价值增加了几十万美元。一个伟大的程序员，在状态好的时候，可以在几周内创造价值一百万美元的财富。一个普通的程序员在同一时期会产生零甚至负的财富（例如通过引入错误）。\n这就是为什么最好的程序员中有这么多是自由主义者。在我们的世界里，你要么沉浮，没有借口。当那些远离财富创造的人——本科生、记者、政客——听说最富有的5%的人拥有一半的总财富时，他们倾向于认为不公正！一个有经验的程序员更可能会想，就这样？最顶尖的5%的程序员可能编写了99%的好软件。\n财富可以在不被出售的情况下被创造。科学家，至少直到最近，有效地捐赠了他们创造的财富。因为知道了青霉素，我们所有人都更富有，因为我们不太可能死于感染。财富是人们想要的任何东西，而不死肯定是我们想要的东西。黑客经常通过编写任何人都可以免费使用的开源软件来捐赠他们的工作。我现在运行的计算机上的操作系统FreeBSD让我更富有，雅虎也是如此，他们在所有服务器上运行它。\n工作是什么 在工业化国家，人们至少在二十多岁之前属于一个或另一个机构。在所有这些年之后，你习惯于属于一群人的想法，这群人都在早上起床，去某些建筑，做他们通常不喜欢做的事情。属于这样一个群体成为你身份的一部分：名字、年龄、角色、机构。如果你必须介绍自己，或者别人描述你，将会是这样的，约翰·史密斯，10岁，某某小学的学生，或者约翰·史密斯，20岁，某某学院的学生。\n当约翰·史密斯完成学业时，他预期要找一份工作。而找一份工作似乎意味着加入另一个机构。表面上这很像大学。你选择你想为之工作的公司并申请加入它们。如果一个公司喜欢你，你成为这个新群体的成员。你早上起床，去一组新的建筑，做你通常不喜欢做的事情。有几个不同之处：生活不那么有趣，而且你得到报酬，而不是像在大学时那样支付。但相似之处感觉大于不同之处。约翰·史密斯现在是约翰·史密斯，22岁，某某公司的软件开发人员。\n事实上，约翰·史密斯的生活比他意识到的变化更大。在社会上，公司看起来很像大学，但你越深入底层现实，就越不同。\n公司所做的，如果想要继续存在就必须做的事情，是赚钱。而大多数公司赚钱的方式是通过创造财富。公司可能如此专业化以至于这种相似性被掩盖，但创造财富的不仅仅是制造公司。财富的一个重要组成部分是位置。记得那台可以为你制造汽车和为你煮晚餐等等的魔术机器吗？如果它把你的晚餐运送到中亚的一个随机位置，它就不会那么有用。如果财富意味着人们想要的东西，那么移动东西的公司也创造财富。许多其他不制造任何实物产品的公司也是如此。几乎所有公司的存在都是为了做人们想要的事情。\n当你在为公司工作时，你也是如此。但这里有另一个倾向于掩盖底层现实的层次。在公司里，你所做的工作与很多人的工作平均在一起。你甚至可能没有意识到你正在做人们想要的事情。你的贡献可能是间接的。但公司作为一个整体必须给人们他们想要的东西，否则他们不会赚钱。如果他们每年支付你x美元，那么平均而言，你必须每年贡献至少价值x美元的工作，否则公司将会花费超过其收入，并且将会倒闭。\n一个大学毕业生认为，并且被告知，他需要找一份工作，好像重要的事情是成为一个机构的成员。更直接的说法是：你需要开始做人们想要的事情。你不需要加入公司来做到这一点。公司只是一群人一起工作以做人们想要的事情。做人们想要的事情才是重要的，而不是加入这个群体。[6]\n对大多数人来说，最好的计划可能是为一些现有的公司工作。但当你这样做时，理解正在发生的事情是个好主意。工作意味着做人们想要的事情，与那个公司的每个人平均在一起。\n更努力工作 这种平均成为一个问题。我认为困扰大公司的最大问题是难以给每个人的工作分配价值。在大多数情况下他们回避。在大公司里，你为相当努力的工作获得相当可预测的薪水。你预期不要明显无能或懒惰，但你也不预期把你的一生都献给你的工作。\n然而，事实证明，你在工作上投入多少生命有规模经济。在合适的业务中，一个真正致力于工作的人可以创造比普通员工多十倍甚至一百倍的财富。例如，一个程序员，不是缓慢地维护和更新现有的软件，而是编写一个全新的软件，并借此创造一个新的收入来源。\n公司没有设置为奖励那些想要这样做的人。你不能去找你的老板说，我想开始工作十倍努力，所以请你付我十倍多的钱。一方面，官方的虚构是你已经在尽可能努力地工作。但更严重的问题是公司没有办法衡量你工作的价值。\n销售人员是个例外。很容易衡量他们产生多少收入，他们通常按收入的一定比例获得报酬。如果销售人员想更努力工作，他可以开始这样做，并且他会自动按比例获得更多报酬。\n除了销售之外，还有一个工作大公司可以雇佣一流人才：在高层管理工作中。出于同样的原因：他们的表现可以被衡量。高层管理人员对整个公司的表现负责。因为普通员工的表现通常无法衡量，所以他不被期望做超过坚实努力的事情。而高层管理人员，像销售人员一样，必须实际拿出数字。一个倒闭的首席执行官不能 plead 他付出了坚实的努力。如果公司做得不好，他做得不好。\n一个能够如此直接地支付所有员工薪酬的公司将会非常成功。许多员工如果能够为此获得报酬会更努力工作。更重要的是，这样的公司会吸引那些想要特别努力工作的人。它会压垮其竞争对手。\n不幸的是，公司不能像销售人员那样支付每个人。销售人员单独工作。大多数员工的工作纠缠在一起。假设一家公司制造某种消费小玩意。工程师建造一个具有各种新功能的可靠小玩意；工业设计师为它设计一个漂亮的外壳；然后营销人员说服每个人这是他们必须拥有的东西。你知道小玩意儿的销售有多少是由于每个群体的努力吗？或者，就此而言，有多少是由于创造了小玩意儿的过去给了公司质量声誉的创造者？没有办法解开他们所有的贡献。即使你能读懂消费者的思想，你会发现这些因素都模糊在一起。\n如果你想走得更快，让你的工作与大量其他人的工作纠缠在一起是个问题。在一个大群体中，你的表现不是单独可衡量的——而群体的其余部分会拖慢你。\n衡量和杠杆 要致富，你需要让自己处于有两种情况的环境中：衡量和杠杆。你需要处于一个你的表现可以被衡量的位置，否则没有方法通过做更多来获得更多报酬。你必须拥有杠杆，在某种意义上，你做出的决定有很大的影响。\n",
    "description": "",
    "tags": ["财富创造","创业","技术","经济学","商业","创新"],
    "categories": [],
    "content": "→ English Version\n如何创造财富 2004年5月\n（本文最初发表于《黑客与画家》。）\n想创业吗？获得Y Combinator的资助。\n如果你想变得富有，你会怎么做？我认为你最好的选择是创办或加入一家创业公司。几百年来，这一直是可靠的致富方式。\u0026ldquo;创业公司\u0026quot;这个词始于1960年代，但其中发生的事情与中世纪风险投资的贸易航行非常相似。\n创业公司通常涉及技术，以至于\u0026quot;高科技创业公司\u0026quot;这个短语几乎是多余的。创业公司是一家解决困难技术问题的小公司。\n很多人只知道这些就能变得富有。你不需要懂物理就能成为一名优秀的投手。但我认为理解基本原则可以给你优势。为什么创业公司必须很小？创业公司随着规模变大会不可避免地不再是创业公司吗？为什么他们经常致力于开发新技术？为什么有这么多创业公司销售新药或计算机软件，却没有销售玉米油或洗衣粉的？\n命题 从经济上讲，你可以把创业公司看作是将你整个工作生活压缩到几年的一种方式。你不再是低强度地工作四十年，而是尽你所能地努力工作四年。这在技术领域特别有利可图，因为在那里你为快速工作获得溢价。\n这是经济命题的简要概述。如果你是一个二十多岁的好黑客，你可以得到一份每年支付约80,000美元的工作。所以平均而言，这样的黑客每年必须为公司创造至少80,000美元的价值才能收支平衡。你可能会工作比公司员工多一倍的时间，而且如果你专注，你在一小时内完成的工作可能是他们的三倍。[1] 你应该再获得至少两倍的倍数，通过消除大公司中可能成为你老板的点发中层经理的阻力。还有一个倍数：你比你的职位描述期望的聪明多少？假设再有三倍。结合所有这些倍数，我声称你可以比你在普通公司工作中的预期效率高36倍。[2] 如果一个相当好的黑客在大公司值每年80,000美元，那么一个非常聪明、非常努力、没有任何公司废话拖慢他的黑客应该能够创造价值约每年300万美元的工作。\n像所有信封背面的计算一样，这个计算有很多摆动空间。我不会试图为实际数字辩护。但我坚持计算的结构。我并不是说倍数正好是36，但它肯定超过10，并且很少像100那样高。\n如果每年300万美元看起来很高，请记住我们谈论的是极限情况：你不仅没有休闲时间，而且确实如此努力工作以至于危及你的健康。\n创业公司不是魔法。它们不改变财富创造的规律。它们只代表了曲线远端的一个点。这里有一个守恒定律在起作用：如果你想赚一百万美元，你必须忍受价值一百万美元的痛苦。例如，赚一百万美元的一种方法是在邮局工作一生，并节省你工资的每一分钱。想象在邮局工作五十年的压力。在创业公司中，你将所有这些压力压缩到三四年中。如果你购买经济规模的痛苦，你确实会获得一定的批量折扣，但你无法逃避基本的守恒定律。如果创办创业公司很容易，每个人都会这么做。\n数百万，而不是数十亿 如果每年300万美元对某些人来说看起来很高，对其他人来说看起来会很低。三百万？我怎样才能像比尔·盖茨那样成为亿万富翁？\n所以让我们现在就把比尔·盖茨排除在外。使用著名的有钱人作为例子不是一个好主意，因为媒体只写最有钱的人，而这些往往是异常值。比尔·盖茨是一个聪明、坚定和勤奋的人，但你需要更多的东西才能赚到他那么多的钱。你还需要非常幸运。\n任何公司的成功都有很大的随机因素。所以你最终在报纸上读到的人是那些非常聪明、完全专注并且中奖的人。当然比尔是聪明和专注的，但微软碰巧也是商业史上最壮观错误之一的受益者：DOS的许可交易。毫无疑问，比尔做了他所能做的一切来引导IBM犯那个错误，并且他在利用它方面做得非常出色，但如果IBM方面有一个有头脑的人，微软的未来就会大不相同。在那个阶段，微软对IBM几乎没有影响力。他们实际上是一个组件供应商。如果IBM要求独家许可，他们应该这样做，微软仍然会签署协议。这对他们来说仍然意味着很多钱，而IBM可以很容易地从其他地方获得操作系统。\n相反，IBM最终利用其在市场的所有力量给予微软对PC标准的控制。从那时起，微软所要做的就是执行。他们从未不得不在大胆的决定上押注公司。他们所要做的就是与被许可人打硬球，并相当及时地复制更具创新性的产品。\n如果IBM没有犯这个错误，微软仍然会是一家成功的公司，但它不可能如此快速地发展壮大。比尔·盖茨会很富有，但他会在福布斯400强的底部附近，与他同龄的其他人在一起。\n有很多致富的方法，而本文只讨论其中一种。本文是关于通过创造财富并为此获得报酬来赚钱的。还有很多其他获得金钱的方法，包括机会、投机、婚姻、继承、盗窃、勒索、欺诈、垄断、贪污、游说、伪造和勘探。大多数巨大的财富可能涉及其中的几种。\n作为致富方式，创造财富的优势不仅在于它更合法（许多其他方法现在是非法的），而且在于它更直接。你只需要做人们想要的事情。\n货币不是财富 如果你想创造财富，理解它是什 …"
  },{
    "title": "如何努力工作",
    "url": "/paul_graham/essays_zh/hwh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何努力工作 2021年6月\n似乎没有什么可学的关于如何努力工作的知识。任何上过学的人都知道这意味着什么，即使他们选择不这样做。有12岁的孩子工作得非常努力。然而，当我问我现在是否比在学校时更了解努力工作时，答案肯定是肯定的。\n我知道的一件事是，如果你想做伟大的事情，你必须非常努力地工作。我小时候并不确定这一点。功课的难度各不相同；人们不总是必须超级努力才能做得好。而且一些著名成年人所做的事情，他们似乎做得毫不费力。也许，有什么方法可以通过纯粹的才华来逃避努力工作？现在我知道那个问题的答案了。没有。\n某些科目似乎容易的原因是我的学校标准很低。著名成年人似乎毫不费力地做事情的原因是多年的练习；他们让它看起来很容易。\n当然，那些著名成年人通常也很有天赋。伟大的工作有三个要素：天赋、练习和努力。只有其中两个你可以做得相当好，但要做最好的工作你需要所有三个：你需要伟大的天赋，大量的练习，并且非常努力。[1]\n例如，比尔·盖茨是他那个时代商界最聪明的人之一，但他也是最努力工作的人之一。\u0026ldquo;我在二十多岁时从来没有休息过一天，\u0026ldquo;他说。\u0026ldquo;一天都没有。\u0026ldquo;莱昂内尔·梅西也是如此。他很有天赋，但当他的青少年教练谈论他时，他们记得的不是他的才华，而是他的奉献和获胜的欲望。如果必须选择，P.G.伍德豪斯可能会获得我对20世纪最佳英语作家的投票。当然没有人让这看起来更容易。但没有人比他更努力。74岁时，他写道\n对于我的每一本新书，我有，可以说，这次我在文学花园里挑了一个柠檬的感觉。真的，这是好事。我想。让一个人保持警觉，让一个人把每句话重写十次。或者在许多情况下二十次。\n听起来有点极端，你认为。然而比尔·盖茨听起来更极端。十年中没有一天休息？这两个人的天赋几乎和任何人可能拥有的一样多，然而他们也工作得和任何人可能努力的一样。你需要两者兼得。\n这似乎很明显，然而在实践中我们发现这有点难以把握。才华和努力工作之间有一种微妙的异或。这部分来自流行文化，在那里它似乎运行得很深，部分来自离群值如此罕见的事实。如果伟大的才华和伟大的动力都是罕见的，那么两者兼得的人就是罕见的平方。你遇到的大多数拥有大量其中一个的人会有较少的另一个。但如果你想成为离群值，你需要两者兼得。由于你无法真正改变你拥有多少天赋，在实践中，做伟大的工作，尽可能地说，归结为非常努力地工作。\n如果你有明确定义的、外部强加的目标，就像你在学校时那样，努力工作是直接的。这有一些技巧：你必须学会不对自己撒谎，不拖延（这是对自己撒谎的一种形式），不分心，在事情出错时不放弃。但这种纪律水平似乎相当小的孩子也能达到，如果他们想要的话。\n我从小孩时代学到现在的是如何朝着既不明确定义也不是外部强加的目标努力。如果你想做真正伟大的事情，你可能必须两者都学会。\n其中最基本的水平就是简单地觉得你应该在没有人告诉你的情况下工作。现在，当我不努力工作时，警钟就会响起。当我努力工作时，我不能确定我在取得进展，但当我不努力时，我可以确定我一事无成，这感觉很糟糕。[2]\n学习这一点没有一个单一的时刻。像大多数小孩子一样，我喜欢学习或做新事物时的成就感。随着我长大，这变成了当我没有取得任何成就时的一种厌恶感。我有一个可以精确确定日期的里程碑是我13岁时停止看电视。\n和我谈过的几个人记得在这个年龄左右开始认真对待工作。当我问帕特里克·克里森什么时候开始觉得闲散令人厌恶时，他说我想大约13或14岁。我有一个大约那时的清晰记忆，坐在客厅里，盯着外面，想知道为什么我在浪费我的暑假。也许青春期会发生一些变化。这是有道理的。\n奇怪的是，认真对待工作的最大障碍可能是学校，它使工作（他们称之为工作）显得无聊和无意义。在能够全心全意地渴望做之前，我必须学会什么是真正的工作。这花了一段时间，因为即使在大学里，很多工作也是毫无意义的；有整个部门是毫无意义的。但当我了解到真正工作的形状时，我发现我对它的渴望就像它们彼此天生一对一样嵌入其中。\n我怀疑大多数人必须在爱工作之前学会什么是工作。哈代在《一个数学家的辩白》中雄辩地写道：\n我不记得作为一个男孩时对数学有任何热情，我可能有的关于数学家职业的观念远非高尚。我从考试和奖学金的角度思考数学：我想击败其他男孩，这似乎是我能最果断地做到这一点的方式。\n他直到大学中途读到乔丹的《分析教程》时才学会数学的真正含义。\n我永远不会忘记阅读那杰出著作时的惊讶，那是我这一代许多数学家的第一个灵感，并且在阅读它时第一次学会了数学的真正含义。\n为了理解什么是真正的工作，你需要学会忽略两种独立的虚假。一种是哈代在学校遇到的那种。当科目被调整教给孩子时会被扭曲——通常扭曲到与实际从业者所做的工作完全不同。[3] 另一种虚假是某些类型工作固有的。某些类型的工作本质上是虚假的，或者充其量只是忙碌的工作。\n真正的工作有一种实在性。并不都是写作《原理》，但都感觉是必要的。这是一个模糊的标准，但它是故意模糊的，因为它必须涵盖许多不同的类型。[4]\n一旦你了解真正工作的形状，你必须学会每天花多少小时在上面。你不能通过简单地醒着的每一刻都工作来解决这个问题，因为在许多类型的工作中，有一个点之后结果的质量会开始下降。\n这个限制取决于工作类型和个人。我做过几种不同的工作，每种的限制都不同。对于较难的写作或编程类型，我的限制是每天大约五小时。而当我经营创业公司时，我可以一直工作。至少在我做的那三年是这样；如果我继续更久，我可能需要偶尔休假。[5]\n找到限制的唯一方法是超越它。培养对你所做工作质量的敏感性，然后你会注意到它是否因为你工作太努力而下降。诚实在这里是关键的，在两个方向上：你必须注意你什么时候懒惰，但也要注意你什么时候工作太努力。如果你认为工作太努力有什么值得钦佩的，把那个想法从头脑中去掉。你不仅得到更差的结果，而且是因为你在炫耀而得到它们——如果不是对别人，那么是对自己。[6]\n找到努力工作的限制是一个持续的、正在进行的过程，不是你只做一次的事情。工作的难度和你做它的能力都可以随时变化，所以你需要不断判断你有多努力和你做得如何。\n然而，努力并不意味着不断推动自己去工作。也许有些人这样做，但我认为我的经历是相当典型的，我只需要偶尔在开始项目或遇到某种阻碍时推动自己。那是我有拖延危险的时候。但一旦我开始滚动，我倾向于继续前进。\n让我继续前进的动力取决于工作类型。当我在Viaweb工作时，我是被对失败的恐惧驱动的。那时我几乎没有拖延，因为总是有事情需要做，如果我能通过做它在我和追逐的野兽之间拉开更多距离，为什么要等？[7] 而现在驱动我写论文的是论文中的缺陷。在论文之间，我会烦恼几天，像一只狗在决定确切躺在哪里时绕圈。但一旦我开始一篇，我不必推动自己去工作，因为总是有一些错误或遗漏已经在推动我。\n我确实做了一些努力专注于重要话题。许多问题中心有一个硬核，周围是较容易的东西。努力工作意味着尽可能朝着中心瞄准。有些日子你可能不能；有些日子你只能处理较容易的、外围的东西。但你应该总是尽可能接近中心瞄准而不停滞。\n你人生要做什么这个更大的问题是这些有硬核的问题之一。中心有重要的问题，这些问题往往是困难的，边缘有不那么重要、较容易的问题。因此，除了处理特定问题涉及的小的、日常调整外，你偶尔必须做出大的、终身规模的调整，关于做哪种类型的工作。规则是相同的：努力工作意味着朝着中心瞄准——朝着最雄心勃勃的问题。\n然而，我所说的中心是指实际的中心，而不仅仅是当前关于中心的共识。关于哪些问题最重要的共识经常是错误的，无论是在一般意义上还是在特定领域内。如果你不同意它，而你是对的，这可能代表一个做新事情的宝贵机会。\n更雄心勃勃的工作类型通常会更难，但虽然你不应该对此否认，你也不应该把困难作为决定做什么的不谬指南。如果你发现某种雄心勃勃的工作对你来说是便宜的，意思是它比别人更容易，要么是因为你碰巧拥有的能力，要么是因为你发现的新方法，或者仅仅是因为你对它更兴奋，那么一定要做那个。一些最好的工作是由那些找到做困难事情的简单方法的人完成的。\n除了学习真正工作的形状外，你需要弄清楚你适合哪种类型。这不仅仅意味着弄清楚哪种类型最适合你的自然能力；这不意味着如果你7英尺高，你必须打篮球。你适合的不仅取决于你的才华，而且可能更重要的是你的兴趣。对一个话题的深层兴趣让人们比任何纪律都能让他们更努力地工作。\n发现你的兴趣可能比发现你的才华更难。才华的类型比兴趣少，它们在童年早期就开始被判断，而对一个话题的兴趣是一种微妙的东西，可能要到二十多岁，甚至更晚才能成熟。这个话题甚至可能更早不存在。另外有一些强大的错误来源你需要学会忽略。你真的对x感兴趣吗，还是你想做它因为你会赚很多钱，或者因为别人会对你印象深刻，或者因为你父母想要你做？[8]\n弄清楚做什么工作的难度因人而异。这是我从孩提时代起学到的关于工作的最重要的事情之一。作为一个孩子，你得到印象每个人都有一个使命，他们所要做的就是弄清楚它是什么。在电影中是这样，在给孩子的精简传记中也是这样。有时在现实生活中也是这样。有些人在孩童时就弄清楚要做什么并且就去做，像莫扎特。但其他人，像牛顿，不安分地从一种工作转向另一种。也许回顾中我们可以识别一个作为他们的使命——我们可以希望牛顿花更多时间在数学和物理上，更少时间在炼金术和神学上——但这是由后见之偏误引起的幻觉。没有他能听到的声音呼唤他。\n因此，虽然有些人的生活快速收敛，但会有其他人的生活永远不会收敛。对于这些人来说，弄清楚做什么工作与其说是努力工作的前奏，不如说是它的一个持续部分，像一组联立方程之一。对于这些人，我前面描述的过程有第三个组成部分：除了测量你工作多努力和你做得如何外，你必须思考是否应该继续在这个领域工作或切换到另一个。如果你工作努力但没有得到足够好的结果，你应该切换。这样表达听起来很简单，但在实践中非常困难。你不应该在第一天仅仅因为你工作努力但没有取得任何进展就放弃。你需要给自己时间开始。但多少时间？如果进行顺利的工作停止顺利，你应该做什么？那时你给自己多少时间？[9]\n什么甚至算作好结果？这可能真的很难决定。如果你在探索一个很少有人工作过的领域，你甚至可能不知道好结果是什么样子。历史充满了人们误判他们工作重要性的例子。\n检验做某事是否值得的最好标准是你是否觉得它有趣。这听起来像是一个危险的主观标准，但它可能是你能得到的最准确的。你是在这些东西上工作的人。谁比你处于更好的位置来判断它是否重要，什么比它是否有趣更好地预测它的重要性？\n然而，为了使这个检验有效，你必须对自己诚实。确实，这是关于努力工作整个问题最引人注目的事情：在每一点上它如何取决于对自己诚实。\n努力工作不仅仅是你拨到11的表盘。它是一个复杂的、动态的系统，必须在每一点都正确调整。你必须了解真正工作的形状，清楚地看到你最擅长哪种类型，尽可能接近它的真实核心瞄准，在每一刻准确判断你能够做什么和你做得如何，并且每天投入尽可能多的时间而不损害结果的质量。这个网络太复杂了而无法欺骗。但如果你始终诚实和有洞察力，它会自动呈现最佳形状，你会以很少有人具有的方式富有成效。\n注释 [1] 在《天才的车票理论》中我说伟大工作的三个要素是天赋、决心和兴趣。这是前一阶段的公式；决心和兴趣产生练习和努力。\n[2] 我的意思是以天为分辨率，而不是小时。你经常在不工作的时候取得进展，意思是问题的解决方案在你淋浴时来到你，甚至在你睡觉时，但那只是因为你前一天在努力工作。\n偶尔去度假是好的，但当我度假时，我喜欢学习新事物。我不会喜欢仅仅坐在海滩上。\n[3] 孩子在学校做的最像真正版本的事情是运动。承认是因为许多运动起源于学校玩的游戏。但至少在这个领域，孩子们正在做成年人完全做的事情。\n在普通美国高中，你有一个选择：假装做严肃的事情，或者认真地做假装的事情。可以说后者并不更糟。\n[4] 知道你想做什么工作并不意味着你能够。大多数人必须花大量时间做他们不想做的事情，特别是在早期。但如果你知道你想做什么，你至少知道推动你生活的方向。\n[5] 强烈工作的较低时间限制为解决有孩子后工作时间减少的问题提供了一个方案：切换到更难的问题。实际上我这样做了，虽然不是故意的。\n[6] 一些文化有表演性努力工作的传统。我不喜欢这个想法，因为（a）它使重要的事情变得滑稽可笑，（b）它使人们在做不重要的事情时筋疲力尽。我不知道足够多的是否能肯定地说它总体是好还是坏，但我的猜测是坏的。\n[7] 人们在创业公司上如此努力工作的原因之一是创业公司可能失败，当它们失败时，那种失败往往是决定性和明显的。\n[8] 为了赚很多钱而做某事是可以的。你必须以某种方式解决金钱问题，通过试图一次赚很多来高效地做这件事没有错。我想甚至为了金钱本身而对金钱感兴趣也是可以的；无论什么让你高兴。只要你意识到你的动机。要避免的是无意识地让金钱的需要扭曲你关于你发现什么类型的工作最有趣的想法。\n[9] 许多人在个人项目中以较小规模面对这个问题。但认识和接受单个项目中的死胡同比完全放弃某种类型的工作更容易。你越坚定，它就越难。像西班牙流感受害者一样，你在与自己的免疫系统斗争：你不是放弃，而是告诉自己，我应该更努力。谁能说你不对？\n感谢特雷弗·布莱克威尔、约翰·卡马克、约翰·克里森、帕特里克·克里森、罗伯特·莫里斯、杰夫·拉尔斯顿和哈吉·塔加阅读本文草稿。\n阿拉伯语翻译\n",
    "description": "",
    "tags": ["努力工作","生产力","成功","职业道德","动机","纪律","个人发展"],
    "categories": [],
    "content": "→ English Version\n如何努力工作 2021年6月\n似乎没有什么可学的关于如何努力工作的知识。任何上过学的人都知道这意味着什么，即使他们选择不这样做。有12岁的孩子工作得非常努力。然而，当我问我现在是否比在学校时更了解努力工作时，答案肯定是肯定的。\n我知道的一件事是，如果你想做伟大的事情，你必须非常努力地工作。我小时候并不确定这一点。功课的难度各不相同；人们不总是必须超级努力才能做得好。而且一些著名成年人所做的事情，他们似乎做得毫不费力。也许，有什么方法可以通过纯粹的才华来逃避努力工作？现在我知道那个问题的答案了。没有。\n某些科目似乎容易的原因是我的学校标准很低。著名成年人似乎毫不费力地做事情的原因是多年的练习；他们让它看起来很容易。\n当然，那些著名成年人通常也很有天赋。伟大的工作有三个要素：天赋、练习和努力。只有其中两个你可以做得相当好，但要做最好的工作你需要所有三个：你需要伟大的天赋，大量的练习，并且非常努力。[1]\n例如，比尔·盖茨是他那个时代商界最聪明的人之一，但他也是最努力工作的人之一。\u0026ldquo;我在二十多岁时从来没有休息过一天，\u0026ldquo;他说。\u0026ldquo;一天都没有。\u0026ldquo;莱昂内尔·梅西也是如此。他很有天赋，但当他的青少年教练谈论他时，他们记得的不是他的才华，而是他的奉献和获胜的欲望。如果必须选择，P.G.伍德豪斯可能会获得我对20世纪最佳英语作家的投票。当然没有人让这看起来更容易。但没有人比他更努力。74岁时，他写道\n对于我的每一本新书，我有，可以说，这次我在文学花园里挑了一个柠檬的感觉。真的，这是好事。我想。让一个人保持警觉，让一个人把每句话重写十次。或者在许多情况下二十次。\n听起来有点极端，你认为。然而比尔·盖茨听起来更极端。十年中没有一天休息？这两个人的天赋几乎和任何人可能拥有的一样多，然而他们也工作得和任何人可能努力的一样。你需要两者兼得。\n这似乎很明显，然而在实践中我们发现这有点难以把握。才华和努力工作之间有一种微妙的异或。这部分来自流行文化，在那里它似乎运行得很深，部分来自离群值如此罕见的事实。如果伟大的才华和伟大的动力都是罕见的，那么两者兼得的人就是罕见的平方。你遇到的大多数拥有大量其中一个的人会有较少的另一个。但如果你想成为离群值，你需要两者兼得。由于你无法真正改变你拥有多少天赋，在实践中，做伟大的工作，尽可能地说，归结为非常努力地工作。\n如果你有明确定义的、外部强加的目标，就像你在学校时那样，努力工作是直接的。这有一些技巧：你必须学会不对自己撒谎，不拖延（这是对自己撒谎的一种形式），不分心，在事情出错时不放弃。但这种纪律水平似乎相当小的孩子也能达到，如果他们想要的话。\n我从小孩时代学到现在的是如何朝着既不明确定义也不是外部强加的目标努力。如果你想做真正伟大的事情，你可能必须两者都学会。\n其中最基本的水平就是简单地觉得你应该在没有人告诉你的情况下工作。现在，当我不努力工作时，警钟就会响起。当我努力工作时，我不能确定我在取得进展，但当我不努力时，我可以确定我一事无成，这感觉很糟糕。[2]\n学习这一点没有一个单一的时刻。像大多数小孩子一样，我喜欢学习或做新事物时的成就感。随着我长大，这变成了当我没有取得任何成就时的一种厌恶感。我有一个可以精确确定日期的里程碑是我13岁时停止看电视。\n和我谈过的几个人记得在这个年龄左右开始认真对待工作。当我问帕特里克·克里森什么时候开始觉得闲散令人厌恶时，他说我想大约13或14岁。我有一个大约那时的清晰记忆，坐在客厅里，盯着外面，想知道为什么我在浪费我的暑假。也许青春期会发生一些变化。这是有道理的。\n奇怪的是，认真对待工作的最大障碍可能是学校，它使工作（他们称之为工作）显得无聊和无意义。在能够全心全意地渴望做之前，我必须学会什么是真正的工作。这花了一段时间，因为即使在大学里，很多工作也是毫无意义的；有整个部门是毫无意义的。但当我了解到真正工作的形状时，我发现我对它的渴望就像它们彼此天生一对一样嵌入其中。\n我怀疑大多数人必须在爱工作之前学会什么是工作。哈代在《一个数学家的辩白》中雄辩地写道：\n我不记得作为一个男孩时对数学有任何热情，我可能有的关于数学家职业的观念远非高尚。我从考试和奖学金的角度思考数学：我想击败其他男孩，这似乎是我能最果断地做到这一点的方式。\n他直到大学中途读到乔丹的《分析教程》时才学会数学的真正含义。\n我永远不会忘记阅读那杰出著作时的惊讶，那是我这一代许多数学家的第一个灵感，并且在阅读它时第一次学会了数学的真正含义。\n为了理解什么是真正的工作，你需要学会忽略两种独立的虚假。一种是哈代在学校遇到的那种。当科目被调整教给孩子时会被扭曲——通常扭曲到与实际从业者所做的工作完全不同。[3] 另一种虚假是某些类型工作固有的。某些类型 …"
  },{
    "title": "如何变得流行",
    "url": "/paul_graham/essays_zh/popular/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何变得流行 2001年5月\n（本文是作为一种新语言的商业计划书而写的。因此它缺少（因为想当然）一个好的编程语言最重要的特征：非常强大的抽象能力。）\n我有一个朋友曾经告诉一位著名的操作系统专家，他想设计一种真正好的编程语言。专家告诉他，这将是浪费时间，编程语言不会因为其优点而变得流行或不流行，所以无论他的语言有多好，都没人会使用。至少，这是他设计的语言所发生的情况。\n到底是什么让一种语言变得流行？流行的语言是否配得上它们的流行度？试图定义一个好的编程语言是否值得？你会怎么做？\n我认为这些问题的答案可以通过观察黑客并了解他们想要什么来找到。编程语言是为黑客而设计的，而编程语言作为编程语言（而不是，比如说，作为指称语义练习或编译器设计练习）是好的，当且仅当黑客喜欢它。\n1 流行的机制 当然，大多数人在选择编程语言时并不仅仅基于它们的优点。大多数程序员被告知要使用什么语言。然而我认为这些外部因素对编程语言流行度的影响并不像人们有时认为的那么大。我认为更大的问题是黑客对好的编程语言的想法与大多数语言设计者的想法不同。\n在这两者之间，黑客的意见才是重要的。编程语言不是定理。它们是工具，为人们设计的，必须像鞋子必须为人类的脚设计一样，适合人类的优点和缺点。如果鞋子穿上时夹脚，那它就是一双坏鞋，无论它作为雕塑品多么优雅。\n可能是大多数程序员无法区分好语言和坏语言。但这与其他工具没有什么不同。这并不意味着尝试设计好语言是浪费时间。专家黑客在看到好语言时能够识别出来，他们会使用它。诚然，专家黑客是极少数，但这个极少数群体编写了所有好的软件，他们的影响力使得其他程序员倾向于使用他们使用的任何语言。通常，这不仅仅是影响，而是命令：专家黑客通常就是那些作为老板或导师告诉其他程序员使用什么语言的人。\n专家黑客的意见并不是决定编程语言相对流行度的唯一力量——遗留软件（Cobol）和炒作（Ada、Java）也起作用——但我认为它是长期内最强大的力量。考虑到初始的关键质量和足够的时间，编程语言可能会变得与其应得的流行度相当。而流行度进一步将好语言与坏语言分开，因为来自真实用户的反馈总是导致改进。看看任何流行语言在其生命周期中发生了多大变化。Perl和Fortran是极端的例子，但即使是Lisp也发生了很大变化。例如，Lisp 1.5没有宏；这些是后来发展的，在麻省理工学院的黑客花了几年时间使用Lisp编写真实程序之后。[1]\n所以无论一种语言是否必须好才能流行，我认为一种语言必须流行才能好。它必须保持流行才能保持好。编程语言的工艺水平不会停滞不前。然而我们今天拥有的Lisp几乎与麻省理工学院在1980年代中期的Lisp相同，因为那是Lisp最后一次拥有足够大和要求高的用户群的时候。\n当然，黑客在使用语言之前必须了解它。他们如何听到？从其他黑客那里。但必须有一些初始的黑客群体使用该语言，其他人才能听到。我想知道这个群体必须多大；多少用户构成关键质量？我随口一说，二十个。如果一种语言有二十个独立的用户，意味着二十个用户自己决定使用它，我会认为它是真实的。\n达到那里并不容易。如果从零到二十比从二十到一千更难，我不会感到惊讶。获得那初始二十个用户的最好方法可能是使用特洛伊木马：给人们一个他们想要的应用程序，而这个应用程序恰好是用新语言编写的。\n2 外部因素 让我们首先承认一个确实影响编程语言流行度的外部因素。要变得流行，编程语言必须是流行系统的脚本语言。Fortran和Cobol是早期IBM大型机的脚本语言。C是Unix的脚本语言，后来Perl也是。Tcl是Tk的脚本语言。Java和Javascript旨在成为Web浏览器的脚本语言。\nLisp不是一个大规模流行的语言，因为它不是大规模流行系统的脚本语言。它保留的流行度可以追溯到1960年代和1970年代，当时它是麻省理工学院的脚本语言。当时的许多伟大程序员都在某个时期与麻省理工学院有关联。在1970年代初期，在C之前，麻省理工学院的Lisp方言MacLisp是严肃黑客想要使用的唯一编程语言之一。\n今天，Lisp是两个适度流行系统的脚本语言，Emacs和Autocad，因此我怀疑今天大部分Lisp编程都是在Emacs Lisp或AutoLisp中完成的。\n编程语言不是孤立存在的。Hack是一个及物动词——黑客通常在hack某物——在实践中，语言是相对于它们用来hack的任何东西来评判的。所以如果你想设计一种流行的语言，你要么必须提供比语言更多的东西，要么你必须设计你的语言来取代某个现有系统的脚本语言。\nCommon Lisp不受欢迎的部分原因是因为它是一个孤儿。它确实伴随着一个要hack的系统：Lisp Machine。但Lisp Machines（以及并行计算机）在1980年代被通用处理器日益增长的力量压垮了。如果Common Lisp是Unix的好脚本语言，它可能会保持流行。唉，它是一个非常糟糕的脚本语言。\n描述这种情况的一种方法是说语言不是根据其自身的优点来评判的。另一种观点是，编程语言除非也是某物的脚本语言，否则就不是真正的编程语言。如果这让人感到意外，这似乎不公平。我认为这并不比期望编程语言有实现更不公平。这只是编程语言的一部分。\n当然，编程语言需要好的实现，而且这必须是免费的。公司会为软件付费，但个人黑客不会，而你需要吸引的是黑客。\n语言也需要有一本关于它的书。这本书应该是薄的、写得好的，充满了好的例子。K\u0026amp;R是这里的理想。目前我几乎会说一种语言必须有一本O\u0026rsquo;Reilly出版的书。这正成为对黑客重要性的测试。\n也应该有在线文档。事实上，书可以作为在线文档开始。但我不认为物理书已经过时了。它们的格式方便，出版商施加的事实审查是一种有用的、虽然不完美的过滤器。书店是学习新语言的最重要地方之一。\n3 简洁 假设你能提供任何语言需要的三个东西——一个免费的实现、一本书、以及要hack的东西——你如何制造一种黑客会喜欢的语言？\n黑客喜欢的一件事是简洁。黑客是懒惰的，与数学家和现代主义建筑师是懒惰的方式相同：他们讨厌任何多余的东西。说一个即将编写程序的黑客基于他必须键入的字符总数来选择使用什么语言，至少是潜意识的，这离真相不远。如果这不是黑客思考的精确方式，语言设计者最好表现得好像是这样。\n试图用冗长的表达来宠用户，这些表达旨在类似英语，是错误的。Cobol因此缺陷而臭名昭著。黑客会认为被要求写\nadd x to y giving z\n而不是\nz = x+y\n是介于对他智力的侮辱和对上帝的罪之间。\n有时有人说Lisp应该使用first和rest而不是car和cdr，因为这将使程序更容易阅读。可能是最初的几个小时。但黑客可以很快学会car意味着列表的第一个元素，cdr意味着其余的。使用first和rest意味着多50%的输入。而且它们的长度也不同，这意味着参数在调用时不会对齐，而car和cdr经常在连续行中这样使用。我发现代码在页面上的对齐方式非常重要。当Lisp代码以可变宽度字体设置时，我几乎无法阅读，朋友们说这对其他语言也是如此。\n简洁是强类型语言失败的一个地方。在所有其他条件相同的情况下，没有人想以一堆声明开始程序。任何可以隐含的东西，都应该是。\n单个标记也应该简短。Perl和Common Lisp在这个问题上占据相反的极端。Perl程序几乎可以神秘地密集，而内置Common Lisp操作符的名称则可笑地长。Common Lisp的设计者可能期望用户有文本编辑器为他们键入这些长名称。但长名称的成本不仅仅是键入它的成本。还有阅读它的成本，以及它在屏幕上占用空间的成本。\n4 可Hack性 对黑客来说，有一件事比简洁更重要：能够做你想做的事。在编程语言的历史中，令人惊讶的是，大量的努力都用于防止程序员做被认为不合适的事情。这是一个危险傲慢的计划。语言设计师如何知道程序员将要需要做什么？我认为语言设计师最好将他们的目标用户视为天才，他们将需要做设计师从未预料到的事情，而不是需要保护自己免受自己的伤害的笨蛋。笨蛋无论如何都会伤到自己的脚。你可能阻止他引用另一个包中的变量，但你无法阻止他编写一个设计不良的程序来解决错误的问题，并且永远花时间做这件事。\n好的程序员经常想做危险和不雅的事情。我所说的不雅是指超越语言试图呈现的任何语义门面的东西：例如，获取某些高级抽象的内部表示。黑客喜欢hack，而hack意味着进入事物内部并重新猜测原始设计师。\n让自己被重新猜测。当你制造任何工具时，人们以你未曾打算的方式使用它，这对于高度复杂的工具如编程语言尤其如此。许多黑客想要以你从未想象过的方式调整你的语义模型。我说，让他们吧；在不危害运行时系统如垃圾收集器的情况下，给予程序员尽可能多的内部东西访问权限。\n在Common Lisp中，我经常想要迭代结构的字段——例如，梳理对已删除对象的引用，或找到未初始化的字段。我知道结构在底层只是向量。然而我无法编写一个可以在任何结构上调用的通用函数。我只能通过名称访问字段，因为这就是结构应该意味着的意思。\n黑客可能只想在一个大程序中一两次颠覆事物的预期模型。但能够这样做会产生多大的不同。这可能不仅仅是解决问题的问题。这里也有一种乐趣。黑客分享外科医生秘密的探索内脏的乐趣，青少年秘密的挤痘痘的乐趣。[2] 至少对于男孩来说，某些类型的恐怖是迷人的。Maxim杂志每年出版一卷照片，包含美女写真和可怕事故的混合。他们了解他们的观众。\n从历史上看，Lisp在让黑客为所欲为方面一直很好。Common Lisp的政治正确性是一种异常。早期的Lisp让你可以接触到一切。幸运的是，这种精神的大部分在宏中得以保留。能够对源代码进行任意转换，这是一件多么美妙的事情。\n经典的宏是真正的黑客工具——简单、强大和危险。理解它们的作用是如此简单：你调用一个函数在宏的参数上，无论它返回什么都被插入到宏调用的地方。卫生宏体现了相反的原则。它们试图保护你理解它们在做什么。我从未听过卫生宏用一句话解释过。它们是决定程序员被允许想要什么危险的经典例子。卫生宏旨在保护我免受变量捕获等问题的影响，但变量捕获正是在某些宏中我想要的东西。\n真正好的语言应该是既干净又肮脏的：干净地设计，具有少量良好理解和高度正交的操作符核心，但肮脏在它让黑客为所欲为的意义上。C就是这样。早期的Lisp也是。真正的黑客语言总是有一种稍微放荡不羁的特征。\n好的编程语言应该有让那些使用\u0026quot;软件工程\u0026quot;短语的人摇头不赞成的特征。在连续体的另一端是像Ada和Pascal这样的语言，它们是适合教学的礼仪模型，但不适合其他用途。\n5 一次性程序 为了吸引黑客，语言必须擅长编写他们想要编写的程序类型。这意味着，也许令人惊讶的是，它必须擅长编写一次性程序。\n",
    "description": "",
    "tags": ["编程语言","流行度","黑客文化","语言设计","Lisp"],
    "categories": [],
    "content": "→ English Version\n如何变得流行 2001年5月\n（本文是作为一种新语言的商业计划书而写的。因此它缺少（因为想当然）一个好的编程语言最重要的特征：非常强大的抽象能力。）\n我有一个朋友曾经告诉一位著名的操作系统专家，他想设计一种真正好的编程语言。专家告诉他，这将是浪费时间，编程语言不会因为其优点而变得流行或不流行，所以无论他的语言有多好，都没人会使用。至少，这是他设计的语言所发生的情况。\n到底是什么让一种语言变得流行？流行的语言是否配得上它们的流行度？试图定义一个好的编程语言是否值得？你会怎么做？\n我认为这些问题的答案可以通过观察黑客并了解他们想要什么来找到。编程语言是为黑客而设计的，而编程语言作为编程语言（而不是，比如说，作为指称语义练习或编译器设计练习）是好的，当且仅当黑客喜欢它。\n1 流行的机制 当然，大多数人在选择编程语言时并不仅仅基于它们的优点。大多数程序员被告知要使用什么语言。然而我认为这些外部因素对编程语言流行度的影响并不像人们有时认为的那么大。我认为更大的问题是黑客对好的编程语言的想法与大多数语言设计者的想法不同。\n在这两者之间，黑客的意见才是重要的。编程语言不是定理。它们是工具，为人们设计的，必须像鞋子必须为人类的脚设计一样，适合人类的优点和缺点。如果鞋子穿上时夹脚，那它就是一双坏鞋，无论它作为雕塑品多么优雅。\n可能是大多数程序员无法区分好语言和坏语言。但这与其他工具没有什么不同。这并不意味着尝试设计好语言是浪费时间。专家黑客在看到好语言时能够识别出来，他们会使用它。诚然，专家黑客是极少数，但这个极少数群体编写了所有好的软件，他们的影响力使得其他程序员倾向于使用他们使用的任何语言。通常，这不仅仅是影响，而是命令：专家黑客通常就是那些作为老板或导师告诉其他程序员使用什么语言的人。\n专家黑客的意见并不是决定编程语言相对流行度的唯一力量——遗留软件（Cobol）和炒作（Ada、Java）也起作用——但我认为它是长期内最强大的力量。考虑到初始的关键质量和足够的时间，编程语言可能会变得与其应得的流行度相当。而流行度进一步将好语言与坏语言分开，因为来自真实用户的反馈总是导致改进。看看任何流行语言在其生命周期中发生了多大变化。Perl和Fortran是极端的例子，但即使是Lisp也发生了很大变化。例如，Lisp 1.5没有宏；这些是后来发展的，在麻省理工学院的黑客花了几年时间使用Lisp编写真实程序之后。[1]\n所以无论一种语言是否必须好才能流行，我认为一种语言必须流行才能好。它必须保持流行才能保持好。编程语言的工艺水平不会停滞不前。然而我们今天拥有的Lisp几乎与麻省理工学院在1980年代中期的Lisp相同，因为那是Lisp最后一次拥有足够大和要求高的用户群的时候。\n当然，黑客在使用语言之前必须了解它。他们如何听到？从其他黑客那里。但必须有一些初始的黑客群体使用该语言，其他人才能听到。我想知道这个群体必须多大；多少用户构成关键质量？我随口一说，二十个。如果一种语言有二十个独立的用户，意味着二十个用户自己决定使用它，我会认为它是真实的。\n达到那里并不容易。如果从零到二十比从二十到一千更难，我不会感到惊讶。获得那初始二十个用户的最好方法可能是使用特洛伊木马：给人们一个他们想要的应用程序，而这个应用程序恰好是用新语言编写的。\n2 外部因素 让我们首先承认一个确实影响编程语言流行度的外部因素。要变得流行，编程语言必须是流行系统的脚本语言。Fortran和Cobol是早期IBM大型机的脚本语言。C是Unix的脚本语言，后来Perl也是。Tcl是Tk的脚本语言。Java和Javascript旨在成为Web浏览器的脚本语言。\nLisp不是一个大规模流行的语言，因为它不是大规模流行系统的脚本语言。它保留的流行度可以追溯到1960年代和1970年代，当时它是麻省理工学院的脚本语言。当时的许多伟大程序员都在某个时期与麻省理工学院有关联。在1970年代初期，在C之前，麻省理工学院的Lisp方言MacLisp是严肃黑客想要使用的唯一编程语言之一。\n今天，Lisp是两个适度流行系统的脚本语言，Emacs和Autocad，因此我怀疑今天大部分Lisp编程都是在Emacs Lisp或AutoLisp中完成的。\n编程语言不是孤立存在的。Hack是一个及物动词——黑客通常在hack某物——在实践中，语言是相对于它们用来hack的任何东西来评判的。所以如果你想设计一种流行的语言，你要么必须提供比语言更多的东西，要么你必须设计你的语言来取代某个现有系统的脚本语言。\nCommon Lisp不受欢迎的部分原因是因为它是一个孤儿。它确实伴随着一个要hack的系统：Lisp Machine。但Lisp Machines（以及并行计算机）在1980年代被 …"
  },{
    "title": "如何向投资者展示",
    "url": "/paul_graham/essays_zh/investors/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何向投资者展示 2006年8月\n想要创业？获得Y Combinator资助。\n几天后就是演示日，今年夏天我们资助的创业公司将向投资者展示。Y Combinator每年一月和六月资助创业公司。十周后，我们邀请所有我们认识的投资者来听他们展示到目前为止所构建的东西。\n十周时间不多。普通创业公司在十周后可能没有什么可展示的。但普通创业公司会失败。当你观察那些后来做得很好的公司时，你会发现很多都是从某人用一两周不间断的工作敲出一个原型开始的。创业公司是\u0026quot;欲速则不达\u0026quot;规则的反例。\n（太多的钱对创业公司来说似乎和太多的时间一样糟糕，所以我们也不给他们太多钱。）\n演示日前一周，我们有一个叫做排练日的彩排。在其他Y Combinator活动中，我们允许外部客人参加，但排练日不行。除了其他创始人，没有人可以看到排练。\n排练日的展示通常相当粗糙。但这是可以预料的。我们努力选择擅长构建东西的创始人，而不是擅长展示的人。有些创始人刚刚大学毕业，甚至还在学校，从未在他们不认识的人群面前讲过话。\n所以我们专注于基础知识。在演示日，每个创业公司只有十分钟时间，所以我们鼓励他们专注于两个目标：(a) 解释你在做什么，(b) 解释为什么用户会想要它。\n这听起来可能很容易，但当演讲者没有展示经验，而且他们正在向主要是非技术背景的观众解释技术问题时，这并不容易。\n当创业公司向投资者展示时，这种情况不断重复：不擅长解释的人，对不擅长理解的人讲话。实际上每个成功的创业公司，包括像谷歌这样的明星公司，都在某个时候向不理解的投资者展示并被拒绝。这是因为创始人不擅长展示，还是因为投资者迟钝？可能两者都有。\n在最近的排练日，我们四个Y Combinator合伙人发现自己说了很多和前两次一样的话。所以在晚宴后，我们收集了所有关于向投资者展示的建议。大多数创业公司面临类似的挑战，所以我们希望这会对更广泛的受众有用。\n1. 解释你在做什么。 投资者在判断早期创业公司时的主要问题是你是否做出了引人注目的产品。在他们能够判断你是否构建了一个好的x之前，他们必须理解你构建了什么类型的x。如果你不告诉他们你做什么，而是让他们听某种开场白，他们会感到非常沮丧。\n尽快说出你在做什么，最好在第一句。\u0026ldquo;我们是杰夫和鲍勃，我们构建了一个易于使用的基于网络的数据库。现在我们将向你们展示并解释为什么人们需要这个。\u0026rdquo;\n如果你是一个伟大的公共演讲者，你可能能够违反这个规则。去年，一位创始人在演讲的前半部分花了大量时间对传统桌面比喻的局限性进行了迷人分析。他成功了，但除非你是一个迷人的演讲者，而大多数黑客不是，最好还是安全行事。\n2. 迅速进入演示。 对于在演示日展示的YC创始人来说，这部分现在已经过时了，因为演示日展示现在如此之短，以至于它们很少包含太多或任何演示。然而，它们在没有演示的情况下似乎工作得一样好，这让我觉得我之前如此强调演示是错误的。\n演示比你任何口头描述都能更有效地解释你制作了什么。唯一值得先谈论的是你试图解决的问题以及为什么它很重要。但不要花费超过十分之一的时间在那上面。然后演示。\n当你演示时，不要按功能目录运行。而是从你要解决的问题开始，然后展示你的产品如何解决它。按照某种目的驱动的顺序展示功能，而不是它们在屏幕上出现的顺序。\n如果你在演示基于网络的东西，假设网络连接会在你演示30秒后神秘死亡，并且准备好在你的笔记本电脑上运行服务器软件的副本。\n3. 宁要狭窄的描述，不要模糊的描述。 创始人抵抗简洁描述项目的一个原因是，在这个早期阶段，有各种可能性。最简洁的描述似乎误导性地狭窄。例如，一个构建了易于使用的基于网络的数据库的团队可能抵制称他们的应用程序为那个，因为它可能远不止于此。事实上，它可能是任何东西\u0026hellip;\n问题是，当你（在微积分意义上）接近对可能是任何东西的描述时，你描述的内容接近于零。如果你将你的基于网络的数据库描述为\u0026quot;一个允许人们协作利用信息价值的系统\u0026quot;，它会从一个投资者的耳朵进，另一个耳朵出。他们只会把那句话当作无意义的套话丢弃，并越来越不耐烦地希望在下一句话中你真正解释你制作了什么。\n你的主要目标不是描述你的系统有一天可能成为的一切，而只是说服投资者你值得进一步交谈。所以像通过连续逼近获得正确答案的算法一样处理这个问题。从一个引人入胜但可能过于狭窄的描述开始，然后尽可能充实它。这与增量开发的原则相同：从简单的原型开始，然后添加功能，但在每一点都有可工作的代码。在这种情况下，\u0026ldquo;可工作的代码\u0026quot;意味着投资者头脑中的可工作描述。\n4. 不要边说边操作。 让一个人说话，另一个人使用电脑。如果同一个人做两件事，他们不可避免地会朝着电脑屏幕喃喃自语，而不是清楚地对着观众说话。\n只要你站在观众附近并看着他们，礼貌（和习惯）迫使他们注意你。一旦你停止看他们去摆弄电脑上的东西，他们的思绪就会飘到他们稍后要做的差事上。\n5. 不要长篇大论地谈论次要问题。 如果你只有几分钟时间，用它们来解释你的产品做什么以及为什么它很棒。竞争对手或简历等次要问题应该是你在最后快速浏览的单张幻灯片。如果你有令人印象深刻的简历，只需在屏幕上闪现15秒并说几句话。对于竞争对手，列出前3名，并用一句话分别解释他们缺少什么而你拥有。把这类东西放在最后，在你已经清楚说明你构建了什么之后。\n6. 不要过于深入商业模式。 谈论你计划如何赚钱是好的，但主要是因为这表明你关心那个并且已经考虑过。不要详细谈论你的商业模式，因为(a) 聪明的投资者在简短演示中并不关心那个，(b) 你此时拥有的任何商业模式可能是错误的。\n最近一位来Y Combinator演讲的风险投资家谈到了他刚刚投资的一家公司。他说他们的商业模式是错误的，在他们做对之前可能会改变三次。创始人是经验丰富的人，以前做过创业公司，刚刚成功从顶级风险投资公司之一获得了数百万资金，即使他们的商业模式也是垃圾。（然而他还是投资了，因为他预期在这个阶段会是垃圾。）\n如果你在解决一个重要问题，谈论那个会比谈论商业模式让你听起来聪明得多。商业模式只是一堆猜测，对你可能不擅长的领域的猜测。所以不要把你宝贵的几分钟花在谈论垃圾上，而你可以谈论你了解很多的具体、有趣的事情：你正在解决的问题和你到目前为止构建的东西。\n除了浪费时间，如果你的商业模式看起来明显错误，那会把你想让投资者记住的东西从他们头脑中推出去。他们只会记住你是那个有愚蠢赚钱计划的公司，而不是解决了那个重要问题的公司。\n7. 对着观众缓慢而清晰地说话。 在排练日，每个人都能看出那些在世界各地待过一段时间并向群体展示过的人和那些没有的人之间的区别。\n你对着满屋子的人说话时需要使用完全不同于对话的声音和方式。日常生活在这方面没有给你练习。如果你还不能做到这一点，最好的解决方案是把它当作一种有意识的人工技巧，就像杂耍一样。\n然而，这不意味着你应该像某种播音员一样说话。观众会忽略那个。你需要做的是用这种人工方式说话，但让它看起来像对话。（写作也是一样。好的写作是为了看起来自然而做的精心努力。）\n如果你想事先写出整个演示并背诵，那没问题。这在过去对一些团队有效。但确保写出听起来像自然、非正式演讲的内容，并以那种方式传达。\n宁可说慢一点。在排练日，一位创始人提到了演员使用的一条规则：如果你觉得你说得太慢了，你的说话速度大约是正确的。\n8. 让一个人说话。 创业公司经常想表明所有创始人都是平等的伙伴。这是一个好本能；投资者不喜欢不平衡的团队。但通过分割演示来表明这一点太过分了。这很分散注意力。你可以用更微妙的方式展示彼此的尊重。例如，当其中一个团队在演示日展示时，两位创始人中更外向的一位做了大部分讲话，但他把他的联合创始人描述为他遇到过的最好的黑客，你可以看出他是真心的。\n选择一个或最多两个最好的演讲者，让他们做大部分讲话。\n例外：如果其中一位创始人是某个特定技术领域的专家，让他们谈论那方面一两分钟可能是好的。这种\u0026quot;专家证人\u0026quot;可以增加可信度，即使观众不理解所有细节。如果乔布斯和沃兹尼亚克有10分钟时间展示Apple II，让乔布斯讲9分钟，让沃兹在中间讲一分钟关于他在设计中完成的一些技术壮举，可能是个好计划。（当然，如果真的是他们两个，乔布斯会讲整个10分钟。）\n9. 显得自信。 由于可用时间短暂以及他们缺乏技术背景，观众中的许多人将很难评估你在做什么。可能最初最大的证据是你自己对它的信心。你必须表明你对自己制作的东西印象深刻。\n我的意思是展示，而不是告诉。永远不要说\u0026quot;我们充满激情\u0026quot;或\u0026quot;我们的产品很棒\u0026rdquo;。人们只是忽略那个——或者更糟，把你当作吹牛者写掉。这样的信息必须是隐含的。\n你绝不能做的是显得紧张和道歉。如果你真的制作了好东西，你告诉投资者是在帮他们一个忙。如果你不真正相信那个，也许你应该改变你公司在做的事情。如果你不相信你的创业公司有如此的前景，让他们投资是你帮他们的忙，为什么你要把时间投资在里面？\n",
    "description": "",
    "tags": ["投资者","展示","创业公司","融资","演讲","建议"],
    "categories": [],
    "content": "→ English Version\n如何向投资者展示 2006年8月\n想要创业？获得Y Combinator资助。\n几天后就是演示日，今年夏天我们资助的创业公司将向投资者展示。Y Combinator每年一月和六月资助创业公司。十周后，我们邀请所有我们认识的投资者来听他们展示到目前为止所构建的东西。\n十周时间不多。普通创业公司在十周后可能没有什么可展示的。但普通创业公司会失败。当你观察那些后来做得很好的公司时，你会发现很多都是从某人用一两周不间断的工作敲出一个原型开始的。创业公司是\u0026quot;欲速则不达\u0026quot;规则的反例。\n（太多的钱对创业公司来说似乎和太多的时间一样糟糕，所以我们也不给他们太多钱。）\n演示日前一周，我们有一个叫做排练日的彩排。在其他Y Combinator活动中，我们允许外部客人参加，但排练日不行。除了其他创始人，没有人可以看到排练。\n排练日的展示通常相当粗糙。但这是可以预料的。我们努力选择擅长构建东西的创始人，而不是擅长展示的人。有些创始人刚刚大学毕业，甚至还在学校，从未在他们不认识的人群面前讲过话。\n所以我们专注于基础知识。在演示日，每个创业公司只有十分钟时间，所以我们鼓励他们专注于两个目标：(a) 解释你在做什么，(b) 解释为什么用户会想要它。\n这听起来可能很容易，但当演讲者没有展示经验，而且他们正在向主要是非技术背景的观众解释技术问题时，这并不容易。\n当创业公司向投资者展示时，这种情况不断重复：不擅长解释的人，对不擅长理解的人讲话。实际上每个成功的创业公司，包括像谷歌这样的明星公司，都在某个时候向不理解的投资者展示并被拒绝。这是因为创始人不擅长展示，还是因为投资者迟钝？可能两者都有。\n在最近的排练日，我们四个Y Combinator合伙人发现自己说了很多和前两次一样的话。所以在晚宴后，我们收集了所有关于向投资者展示的建议。大多数创业公司面临类似的挑战，所以我们希望这会对更广泛的受众有用。\n1. 解释你在做什么。 投资者在判断早期创业公司时的主要问题是你是否做出了引人注目的产品。在他们能够判断你是否构建了一个好的x之前，他们必须理解你构建了什么类型的x。如果你不告诉他们你做什么，而是让他们听某种开场白，他们会感到非常沮丧。\n尽快说出你在做什么，最好在第一句。\u0026ldquo;我们是杰夫和鲍勃，我们构建了一个易于使用的基于网络的数据库。现在我们将向你们展示并解释为什么人们需要这个。\u0026rdquo;\n如果你是一个伟大的公共演讲者，你可能能够违反这个规则。去年，一位创始人在演讲的前半部分花了大量时间对传统桌面比喻的局限性进行了迷人分析。他成功了，但除非你是一个迷人的演讲者，而大多数黑客不是，最好还是安全行事。\n2. 迅速进入演示。 对于在演示日展示的YC创始人来说，这部分现在已经过时了，因为演示日展示现在如此之短，以至于它们很少包含太多或任何演示。然而，它们在没有演示的情况下似乎工作得一样好，这让我觉得我之前如此强调演示是错误的。\n演示比你任何口头描述都能更有效地解释你制作了什么。唯一值得先谈论的是你试图解决的问题以及为什么它很重要。但不要花费超过十分之一的时间在那上面。然后演示。\n当你演示时，不要按功能目录运行。而是从你要解决的问题开始，然后展示你的产品如何解决它。按照某种目的驱动的顺序展示功能，而不是它们在屏幕上出现的顺序。\n如果你在演示基于网络的东西，假设网络连接会在你演示30秒后神秘死亡，并且准备好在你的笔记本电脑上运行服务器软件的副本。\n3. 宁要狭窄的描述，不要模糊的描述。 创始人抵抗简洁描述项目的一个原因是，在这个早期阶段，有各种可能性。最简洁的描述似乎误导性地狭窄。例如，一个构建了易于使用的基于网络的数据库的团队可能抵制称他们的应用程序为那个，因为它可能远不止于此。事实上，它可能是任何东西\u0026hellip;\n问题是，当你（在微积分意义上）接近对可能是任何东西的描述时，你描述的内容接近于零。如果你将你的基于网络的数据库描述为\u0026quot;一个允许人们协作利用信息价值的系统\u0026quot;，它会从一个投资者的耳朵进，另一个耳朵出。他们只会把那句话当作无意义的套话丢弃，并越来越不耐烦地希望在下一句话中你真正解释你制作了什么。\n你的主要目标不是描述你的系统有一天可能成为的一切，而只是说服投资者你值得进一步交谈。所以像通过连续逼近获得正确答案的算法一样处理这个问题。从一个引人入胜但可能过于狭窄的描述开始，然后尽可能充实它。这与增量开发的原则相同：从简单的原型开始，然后添加功能，但在每一点都有可工作的代码。在这种情况下，\u0026ldquo;可工作的代码\u0026quot;意味着投资者头脑中的可工作描述。\n4. 不要边说边操作。 让一个人说话，另一个人使用电脑。如果同一个人做两件事，他们不可避免地会朝着电脑屏幕喃喃自语，而不是清 …"
  },{
    "title": "如何在变化的世界中成为专家",
    "url": "/paul_graham/essays_zh/ecw/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何在变化的世界中成为专家 2014年12月\n如果世界是静态的，我们可以对我们的信念有单调递增的信心。一个信念经历过的（更多样化的）经验越多，它错误的可能性就越小。大多数人对自己的观点隐含地相信类似的东西。对于那些变化不大的事物，比如人性，他们这样做是有道理的。但对于变化的事物，你不能以同样的方式信任你的观点，这可能包括几乎其他一切。\n当专家出错时，通常因为他们是早期世界版本的专家。\n有可能避免这种情况吗？你能保护自己免受过时信念的影响吗？在某种程度上，是的。我花了将近十年时间投资早期创业公司，奇怪的是，保护自己免受过时信念的影响正是你作为创业投资者必须做的。大多数真正好的创业想法一开始看起来像坏主意，其中许多看起来不好特别是因为世界的一些变化刚刚将它们从坏变成好。我花了很多时间学习识别这样的想法，我使用的技术可能适用于一般性的想法。\n第一步是对变化有明确的信念。那些陷入对观点单调递增信心的人隐含地得出结论世界是静态的。如果你有意识地提醒自己不是，你开始寻找变化。\n应该在哪里寻找？除了人性变化不大这个中等有用的概括外，不幸的事实是变化很难预测。这很大程度上是同义反复，但仍然值得记住：重要的变化通常来自不可预见的领域。\n所以我甚至不尝试预测它。当在采访中被要求预测未来时，我总是不得不努力即兴想出听起来合理的东西，就像一个没有为考试准备的学生。[1] 但我没有准备不是因为懒惰。在我看来，关于未来的信念很少是正确的，它们通常不值得它们强加的额外刚性，最好的策略就是保持积极开放的心态。不要试图将自己指向正确的方向，而是承认你不知道正确的方向是什么，而是尝试对变化的风向超级敏感。\n有工作假设是可以的，即使它们可能会限制你一些，因为它们也会激励你。追逐事物令人兴奋，尝试猜测答案也令人兴奋。但你必须自律，不要让你的假设变成更坚固的东西。[2]\n我相信这种被动的方法不仅适用于评估新想法，也适用于产生新想法。想出新想法的方法不是明确地尝试，而是尝试解决问题，并且在这个过程中不忽视你产生的奇怪预感。\n变化的风向源于领域专家的无意识思维。如果你在某个领域足够专业，你产生的任何奇怪想法或看似无关的问题本身就值得探索。[3] 在Y Combinator内部，当一个想法被描述为疯狂时，这是一种赞美——实际上，平均来说可能比当一个想法被描述为好时更高的赞美。\n创业投资者有非凡的动机来纠正过时的信念。如果他们能在其他投资者之前意识到某个看似无望的创业公司实际上并非如此，他们可以赚大钱。但动机不仅仅是财务上的。投资者的观点被明确测试：创业公司来找他们，他们必须说是或否，然后，相当快地，他们就知道自己是否猜对了。那些对Google说不的投资者（而且有几个人）将在余生中记住这一点。\n任何必须在某种意义上押注想法而不仅仅是评论想法的人都有类似的动机。这意味着任何想要这种动机的人都可以拥有它们，通过将他们的评论变成赌注：如果你以某种相当持久和公开的形式写一个话题，你会发现你比大多数人在随意对话中更担心把事情做对。[4]\n我发现的另一个保护自己免受过时信念影响的技巧是首先关注人而不是想法。虽然未来发现的本质很难预测，但我发现我能很好地预测什么样的人会做出这些发现。好的新想法来自真诚、精力充沛、独立思考的人。\n作为投资者，押注人而不是想法无数次拯救了我。例如，我们认为Airbnb是个坏主意。但我们能看出创始人是真诚、精力充沛、独立思考的。（确实，几乎是病态地如此。）所以我们暂停怀疑并资助了他们。\n这似乎也是一种应该普遍适用的技术。让自己周围环绕着那些能产生新想法的人。如果你想在自己的信念变得过时时快速注意到，没有什么比与那些发现会使它们过时的人做朋友更好的了。\n不成为自己专业知识的囚徒已经够难了，但只会变得更难，因为变化正在加速。这不是最近的趋势；自旧石器时代以来变化一直在加速。思想催生思想。我不期望那会改变。但我可能错了。\n注释 [1] 我通常的技巧是谈论大多数人还没有注意到的当下方面。\n[2] 特别是当它们变得足够知名以至于人们开始将它们与你认同时。你必须对你想相信的事情保持额外的怀疑，一旦一个假设开始与你认同，它几乎肯定会开始属于那一类。\n[3] 在实践中，\u0026ldquo;足够专业\u0026quot;并不要求一个人被认可为专家——无论如何，这是一个滞后指标。在许多领域，一年的专注工作加上大量关心就足够了。\n[4] 虽然它们是公开的并且无限期地存在，但在论坛和Twitter等地方上的评论经验上似乎像随意对话一样运作。门槛可能在于你写的东西是否有标题。\n感谢Sam Altman、Patrick Collison和Robert Morris阅读本文草稿。\n",
    "description": "",
    "tags": ["专业知识","变化","信念","创业","投资","适应","想法","未来"],
    "categories": [],
    "content": "→ English Version\n如何在变化的世界中成为专家 2014年12月\n如果世界是静态的，我们可以对我们的信念有单调递增的信心。一个信念经历过的（更多样化的）经验越多，它错误的可能性就越小。大多数人对自己的观点隐含地相信类似的东西。对于那些变化不大的事物，比如人性，他们这样做是有道理的。但对于变化的事物，你不能以同样的方式信任你的观点，这可能包括几乎其他一切。\n当专家出错时，通常因为他们是早期世界版本的专家。\n有可能避免这种情况吗？你能保护自己免受过时信念的影响吗？在某种程度上，是的。我花了将近十年时间投资早期创业公司，奇怪的是，保护自己免受过时信念的影响正是你作为创业投资者必须做的。大多数真正好的创业想法一开始看起来像坏主意，其中许多看起来不好特别是因为世界的一些变化刚刚将它们从坏变成好。我花了很多时间学习识别这样的想法，我使用的技术可能适用于一般性的想法。\n第一步是对变化有明确的信念。那些陷入对观点单调递增信心的人隐含地得出结论世界是静态的。如果你有意识地提醒自己不是，你开始寻找变化。\n应该在哪里寻找？除了人性变化不大这个中等有用的概括外，不幸的事实是变化很难预测。这很大程度上是同义反复，但仍然值得记住：重要的变化通常来自不可预见的领域。\n所以我甚至不尝试预测它。当在采访中被要求预测未来时，我总是不得不努力即兴想出听起来合理的东西，就像一个没有为考试准备的学生。[1] 但我没有准备不是因为懒惰。在我看来，关于未来的信念很少是正确的，它们通常不值得它们强加的额外刚性，最好的策略就是保持积极开放的心态。不要试图将自己指向正确的方向，而是承认你不知道正确的方向是什么，而是尝试对变化的风向超级敏感。\n有工作假设是可以的，即使它们可能会限制你一些，因为它们也会激励你。追逐事物令人兴奋，尝试猜测答案也令人兴奋。但你必须自律，不要让你的假设变成更坚固的东西。[2]\n我相信这种被动的方法不仅适用于评估新想法，也适用于产生新想法。想出新想法的方法不是明确地尝试，而是尝试解决问题，并且在这个过程中不忽视你产生的奇怪预感。\n变化的风向源于领域专家的无意识思维。如果你在某个领域足够专业，你产生的任何奇怪想法或看似无关的问题本身就值得探索。[3] 在Y Combinator内部，当一个想法被描述为疯狂时，这是一种赞美——实际上，平均来说可能比当一个想法被描述为好时更高的赞美。\n创业投资者有非凡的动机来纠正过时的信念。如果他们能在其他投资者之前意识到某个看似无望的创业公司实际上并非如此，他们可以赚大钱。但动机不仅仅是财务上的。投资者的观点被明确测试：创业公司来找他们，他们必须说是或否，然后，相当快地，他们就知道自己是否猜对了。那些对Google说不的投资者（而且有几个人）将在余生中记住这一点。\n任何必须在某种意义上押注想法而不仅仅是评论想法的人都有类似的动机。这意味着任何想要这种动机的人都可以拥有它们，通过将他们的评论变成赌注：如果你以某种相当持久和公开的形式写一个话题，你会发现你比大多数人在随意对话中更担心把事情做对。[4]\n我发现的另一个保护自己免受过时信念影响的技巧是首先关注人而不是想法。虽然未来发现的本质很难预测，但我发现我能很好地预测什么样的人会做出这些发现。好的新想法来自真诚、精力充沛、独立思考的人。\n作为投资者，押注人而不是想法无数次拯救了我。例如，我们认为Airbnb是个坏主意。但我们能看出创始人是真诚、精力充沛、独立思考的。（确实，几乎是病态地如此。）所以我们暂停怀疑并资助了他们。\n这似乎也是一种应该普遍适用的技术。让自己周围环绕着那些能产生新想法的人。如果你想在自己的信念变得过时时快速注意到，没有什么比与那些发现会使它们过时的人做朋友更好的了。\n不成为自己专业知识的囚徒已经够难了，但只会变得更难，因为变化正在加速。这不是最近的趋势；自旧石器时代以来变化一直在加速。思想催生思想。我不期望那会改变。但我可能错了。\n注释 [1] 我通常的技巧是谈论大多数人还没有注意到的当下方面。\n[2] 特别是当它们变得足够知名以至于人们开始将它们与你认同时。你必须对你想相信的事情保持额外的怀疑，一旦一个假设开始与你认同，它几乎肯定会开始属于那一类。\n[3] 在实践中，\u0026ldquo;足够专业\u0026quot;并不要求一个人被认可为专家——无论如何，这是一个滞后指标。在许多领域，一年的专注工作加上大量关心就足够了。\n[4] 虽然它们是公开的并且无限期地存在，但在论坛和Twitter等地方上的评论经验上似乎像随意对话一样运作。门槛可能在于你写的东西是否有标题。\n感谢Sam Altman、Patrick Collison和Robert Morris阅读本文草稿。\n"
  },{
    "title": "如何成为天使投资人",
    "url": "/paul_graham/essays_zh/angelinvesting/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何成为天使投资人 2009年3月\n（本文源自于AngelConf会议的演讲。）\n1998年我们卖掉创业公司时，我想有一天我会做一些天使投资。七年后我仍然没有开始。我推迟是因为它看起来神秘而复杂。结果证明它比我想象的要容易，而且也更有趣。\n我认为困难的部分，投资的机制，其实并不是。你给创业公司钱，他们给你股票。你可能会得到优先股，这意味着拥有额外权利的股票，比如在出售时优先拿回你的钱，或者可转换债券，这意味着（在纸上）你在借钱给公司，债务在下一个足够大的融资轮时转换为股票。[1]\n使用其中一个有时有小的战术优势。可转换债券的文书工作更简单。但实际上你使用哪个并不重要。不要花太多时间担心交易条款的细节，特别是当你刚开始天使投资时。这不是你在这个游戏中获胜的方式。当人们谈论一个成功的天使投资人时，他们不是说\u0026quot;他获得了4倍清算优先权。\u0026ldquo;他们说\u0026quot;他投资了Google。\u0026rdquo;\n这就是你获胜的方式：投资正确的创业公司。这比其他任何事情都重要得多，我担心甚至谈论其他事情会误导你。\n机制 天使投资人经常联合交易，这意味着他们联合起来以相同条款投资。在联合体中通常有一个\u0026quot;领投\u0026quot;投资者，他与创业公司谈判条款。但并非总是如此：有时创业公司拼凑一个投资者联合体，这些投资者独立接触他们，创业公司的律师提供文书工作。\n开始天使投资的最简单方法是找到一个已经在做这件事的朋友，并试图被纳入他的联合体。然后你所要做的就是开支票。\n不过，不要觉得你必须加入联合体。自己做并不难。你可以直接使用Wilson Sonsini和Y Combinator在线发布的标准AA系列文件。你当然应该让律师审查一切。你和创业公司都应该有律师。但律师不必从头创建协议。[2] 当你与创业公司谈判条款时，你关心两个数字：你投入多少钱，以及公司的估值。估值决定你获得多少股票。如果你向一家公司投入5万美元，投资前估值为100万美元，那么投资后估值为105万美元，你获得.05/1.05，即公司股票的4.76%。\n如果公司以后筹集更多资金，新投资者将像你一样从所有现有股东手中拿走一部分公司股份。如果在下一轮他们向新投资者出售公司10%的股份，你的4.76%将减少到4.28%。\n没关系。稀释是正常的。通常能保护你在未来轮次中不被虐待的是，你和创始人在同一条船上。他们不能在稀释你的同时不稀释自己。而且除非最终净收益，他们不会稀释自己。所以理论上，每一轮进一步的投资让你在公司更有价值的情况下拥有更小的份额，直到几轮后你最终在公司IPO时拥有0.5%的股份，你非常高兴，因为你的5万美元变成了500万美元。[3]\n你投资的协议应该有条款让你贡献到未来轮次以维持你的百分比。所以是否被稀释是你的选择。[4] 如果公司做得真的很好，你最终会被稀释，因为最终估值会变得太高，对你来说不值得。\n天使投资多少？差异很大，从1万美元到数十万，甚至在极少数情况下达到数百万。上限显然是创始人想要筹集的总金额。下限是总数的5-10%或1万美元，以较大者为准。如今典型的天使轮可能是从5个人筹集15万美元。\n估值变化不大。对于天使轮，很少看到低于50万或高于4-5百万的估值。4百万开始是VC的领域。\n你如何决定提供什么估值？如果你是由其他人领导的轮次的一部分，那个问题就为你解决了。但如果你自己投资呢？没有真正的答案。没有合理的方法来评估早期创业公司。估值只反映了公司议价能力的强弱。如果他们真的很想要你，要么是因为他们迫切需要钱，要么你是能给他们很大帮助的人，他们会让你以低估值投资。如果他们不需要你，估值会更高。所以猜测。创业公司可能不比你知道这个数字应该是多少。[5]\n最终这并不重要。当天使投资人从交易中赚很多钱时，不是因为他们以150万美元而不是300万美元的估值投资。是因为公司真的非常成功。\n我不能过分强调这一点。不要纠结于机制或交易条款。你应该花时间思考的是公司是否好。\n（同样，创始人们也不应该纠结于交易条款，而应该花时间思考如何使公司变得更好。）\n天使投资的第二个不太明显的组成部分是：你预期帮助创业公司多少。像你投资的金额一样，这可能差异很大。如果你不想，你不必做任何事；你可以只是一个资金来源。或者你可以成为公司的事实上的员工。只要确保你和创业公司提前达成一致，关于你将为他们做多少。\n真正热门的公司有时对天使有高标准。每个人都想投资的公司实际上在试镜投资者，只接受有名和/或会为他们努力工作的人的钱。但不要觉得你必须投入大量时间，否则你就无法投资任何好的创业公司。创业公司的交易有多热门与其最终表现有多好之间缺乏相关性令人惊讶。许多热门的创业公司最终会失败，而没有人喜欢的许多创业公司最终会成功。而后者如此渴望资金，他们会以低估值接受任何人的钱。[6]\n选择赢家 如果能够挑选出那些，那不是很好吗？天使投资对你回报影响最大的部分，选择正确的公司，也是最难的。所以你实际上应该忽略（或者更精确地说，存档，在Gmail意义上）我到目前为止告诉你的一切。你可能需要在某个时候参考它，但它不是中心问题。\n中心问题是选择正确的创业公司。\u0026ldquo;制造人们想要的东西\u0026quot;对创业公司来说，\u0026ldquo;选择正确的创业公司\u0026quot;对投资者来说。结合起来就是\u0026quot;选择将制造人们想要的东西的创业公司\u0026rdquo;。\n你怎么做到这一点？这不像选择已经在制造广受欢迎东西的创业公司那么简单。到那时对天使来说已经太晚了。VC已经盯上他们了。作为天使，你必须在创业公司成功之前选择它们——要么因为他们制造了伟大的东西但用户还没有意识到，就像早期的Google，要么因为他们距离重大成功还有一到两次迭代，就像Paypal当他们为在PDA之间转账制作软件时。\n要成为一个好的天使投资人，你必须是一个好的潜力判断者。这就是归结为的。VC可以是快速的追随者。他们中的大多数不试图预测什么会赢。他们只是试图在某个东西已经在赢时快速注意到。但天使必须能够预测。[7]\n这个事实的一个有趣结果是，有很多人从未做过天使投资，却已经是比他们意识到的更好的天使投资人。一个对风险投资机制一无所知但知道成功的创业创始人看起来是什么样的人，实际上比那些精通条款表但认为\u0026quot;黑客\u0026quot;意味着闯入计算机的人远远领先。如果你能够通过同情心来识别好的创业创始人——如果你都以相同的频率共鸣——那么你可能已经是比普通专业VC更好的创业选择者了。[8]\n例如，Paul Buchheit在我开始天使投资大约一年后开始，他在选择创业公司方面几乎立即和我一样好。我额外的一年经验与我们共鸣创始人的能力相比是四舍五入的误差。\n什么造就了好的创始人？如果有一个词意味着无助的反义词，那就是那个词。糟糕的创始人看起来无助。他们可能聪明，也可能不聪明，但不知何故事件压倒了他们，他们变得沮丧并放弃。好的创始人让事情按他们想要的方式发生。这并不是说他们以预定的方式强迫事情发生。好的创始人对现实有健康的尊重。但他们是不懈地足智多谋的。这是我能想到的最接近无助反义词的词。你想要资助那些不懈足智多谋的人。\n注意我们开始谈论事情，现在我们在谈论人。投资者之间有一个持续的争论，哪个更重要，人，还是想法——或者更精确地说，市场。有些人，像Ron Conway，说是人——想法会改变，但人是公司的基础。而Marc Andreessen说他会支持热门市场中一般的创始人而不是糟糕市场中的伟大创始人。[9]\n这两个立场并不像看起来那么遥远，因为好人会找到好的市场。即使IBM没有碰巧将PC标准丢在他怀里，Bill Gates可能最终也会相当富有。\n我思考了很多偏爱押注人的投资者和偏爱押注市场的投资者之间的分歧。令人惊讶的是它甚至存在。你会期望意见已经收敛得更多了。\n但我想我已经弄清楚发生了什么。我认识的最突出的三个偏爱市场的人是Marc、Jawed Karim和Joe Kraus。他们三个在自己的创业公司中，基本上飞入了一个上升热气流：他们遇到了一个增长如此之快的市场，他们所能做的就是跟上它。那种经历很难忽视。而且我认为他们低估了自己：他们回想骑乘那个巨大热气流上升的感觉是多么容易，他们认为\u0026quot;任何人都能做到。\u0026ldquo;但那不是真的；他们不是普通人。\n所以作为天使投资人，我认为你想选择Ron Conway并押注于人。热气流会发生，是的，但没有人能预测它们——甚至创始人也不能，当然作为投资者的你也不能。而且只有好人才能在遇到热气流时骑乘它们。\n交易流 当然，如何选择创业公司的问题假定你有创业公司可供选择。你如何找到它们？这是另一个由联合体为你解决的问题。如果你跟随朋友的投资，你就不必寻找创业公司。\n问题不是找到创业公司，而是找到一条合理高质量的公司流。传统的方法是通过联系人。如果你是许多投资者和创始人的朋友，他们会把交易发给你。硅谷基本上靠推荐运行。而且一旦你开始成为可靠、有用的投资者，人们会向你推荐很多交易。我当然会。\n还有一种更新的方法找到创业公司，那就是参加像Y Combinator的演示日这样的活动，那里一批新创建的创业公司同时向投资者展示。我们每年有两个演示日，一个在三月，一个在八月。这些基本上是大规模推荐。\n但像演示日这样的活动只占创业公司和投资者之间匹配的一小部分。个人推荐仍然是最常见的途径。所以如果你想听说新的创业公司，最好的方法是获得大量推荐。\n获得大量推荐的最佳方法是投资创业公司。无论你看起来多么聪明和友好，内部人士会不愿意向你推荐，直到你通过做几次投资证明了自己。一些聪明、友好的人原来是不可靠、高维护的投资者。但一旦你证明自己是好的投资者，所谓的交易流将在质量和数量上迅速增加。在极端情况下，对于像Ron Conway这样的人，它基本上与整个硅谷的交易流相同。\n所以如果你想认真投资，开始的方法是从你现有的联系自我启动，在你遇到的公司中成为好的投资者，最终你将开始一个连锁反应。好的投资者很少见，即使在硅谷。整个硅谷可能只有几百个认真的天使，然而他们可能是使硅谷成为今天样子的单一最重要的成分。天使是创业形成的限制性试剂。\n如果硅谷只有几百个认真的天使，那么通过决定成为一个，你可以单手显著拓宽硅谷创业公司的管道。这有点令人震惊。\n做得好 你如何成为好的天使投资人？你需要的第一个东西是果断。当我们与创始人谈论好和坏的投资者时，我们描述好人的方式之一是说\u0026quot;他开支票。\u0026ldquo;这并不意味着投资者对每个人说是。远非如此。这意味着他快速下定决心，并跟进执行。你可能想，这能有多难？你尝试时会看到。这源于天使投资的本质，决策是困难的。你必须早期猜测，在最有前途的想法仍然看似反直觉的阶段，因为如果它们明显好，VC已经资助它们了。\n假设是1998年。你遇到一个由几个研究生创立的创业公司。他们说他们要做互联网搜索。已经有一堆大上市公司在做搜索。这些研究生怎么可能与他们竞争？而且搜索真的重要吗？所有搜索引擎都在试图让人们开始称它们为\u0026quot;门户网站\u0026quot;而不是。你为什么要投资一个由几个无名小辈经营的公司，他们试图在一个自己已经宣布过时的领域与大型、积极的公司竞争？然而这些研究生看起来相当聪明。你怎么办？\n当你没有经验时，有一个果断的技巧：将你的投资规模降低到你不会太在意损失的金额。对于每个富人（你可能不应该尝试天使投资，除非你认为自己富有），有一些金额会是虽然令人烦恼但无痛的损失。在你感觉舒适投资之前，不要投资超过那个数额。\n例如，如果你有500万美元的可投资资产，损失1.5万美元可能虽然令人烦恼但是无痛的。这不到你净资产的.3%。所以从做3或4个1.5万美元的投资开始。没有什么能像经验一样教你天使投资。把前几个当作教育费用。6万美元比许多研究生课程便宜。而且你获得股权。\n真正不酷的是战略性犹豫不决：在试图收集更多关于创业公司轨迹的信息的同时拖延创始人。[10] 总有这样做的诱惑，因为你依据的东西太少了，但你有意识地抵抗它。从长远来看，对你有利的是做好。\n成为好的天使投资人的另一个组成部分就是做一个好人。天使投资不是通过欺骗人们赚钱的业务。创业公司创造财富，创造财富不是零和游戏。没有人必须输你才能赢。事实上，如果你虐待你投资的创始人，他们只会变得沮丧，公司会做得更差。而且你的推荐会枯竭。所以我建议做好。\n我认识的最成功的天使投资人基本上都是好人。一旦他们投资了一家公司，他们只想帮助它。他们也会帮助他们没有投资的人。当他们帮忙时，他们似乎不记录这些。开销太大了。他们只是试图帮助每个人，并假设好的事情会以某种方式回流给他们。经验上这似乎有效。\n注释 [1] 可转换债券可以在特定估值上限，或者在转换时以对最终估值的折扣进行。例如，30%折扣的可转换债券意味着当它转换时，你获得的股票就像你以低30%的估值投资一样。在无法或不想确定估值应该是什么的情况下，这可能很有用。你把它留给下一个投资者。另一方面，许多投资者想知道他们确切得到什么，所以他们只会做有上限的可转换债券。\n",
    "description": "",
    "tags": ["天使","投资","创业","融资","建议"],
    "categories": [],
    "content": "→ English Version\n如何成为天使投资人 2009年3月\n（本文源自于AngelConf会议的演讲。）\n1998年我们卖掉创业公司时，我想有一天我会做一些天使投资。七年后我仍然没有开始。我推迟是因为它看起来神秘而复杂。结果证明它比我想象的要容易，而且也更有趣。\n我认为困难的部分，投资的机制，其实并不是。你给创业公司钱，他们给你股票。你可能会得到优先股，这意味着拥有额外权利的股票，比如在出售时优先拿回你的钱，或者可转换债券，这意味着（在纸上）你在借钱给公司，债务在下一个足够大的融资轮时转换为股票。[1]\n使用其中一个有时有小的战术优势。可转换债券的文书工作更简单。但实际上你使用哪个并不重要。不要花太多时间担心交易条款的细节，特别是当你刚开始天使投资时。这不是你在这个游戏中获胜的方式。当人们谈论一个成功的天使投资人时，他们不是说\u0026quot;他获得了4倍清算优先权。\u0026ldquo;他们说\u0026quot;他投资了Google。\u0026rdquo;\n这就是你获胜的方式：投资正确的创业公司。这比其他任何事情都重要得多，我担心甚至谈论其他事情会误导你。\n机制 天使投资人经常联合交易，这意味着他们联合起来以相同条款投资。在联合体中通常有一个\u0026quot;领投\u0026quot;投资者，他与创业公司谈判条款。但并非总是如此：有时创业公司拼凑一个投资者联合体，这些投资者独立接触他们，创业公司的律师提供文书工作。\n开始天使投资的最简单方法是找到一个已经在做这件事的朋友，并试图被纳入他的联合体。然后你所要做的就是开支票。\n不过，不要觉得你必须加入联合体。自己做并不难。你可以直接使用Wilson Sonsini和Y Combinator在线发布的标准AA系列文件。你当然应该让律师审查一切。你和创业公司都应该有律师。但律师不必从头创建协议。[2] 当你与创业公司谈判条款时，你关心两个数字：你投入多少钱，以及公司的估值。估值决定你获得多少股票。如果你向一家公司投入5万美元，投资前估值为100万美元，那么投资后估值为105万美元，你获得.05/1.05，即公司股票的4.76%。\n如果公司以后筹集更多资金，新投资者将像你一样从所有现有股东手中拿走一部分公司股份。如果在下一轮他们向新投资者出售公司10%的股份，你的4.76%将减少到4.28%。\n没关系。稀释是正常的。通常能保护你在未来轮次中不被虐待的是，你和创始人在同一条船上。他们不能在稀释你的同时不稀释自己。而且除非最终净收益，他们不会稀释自己。所以理论上，每一轮进一步的投资让你在公司更有价值的情况下拥有更小的份额，直到几轮后你最终在公司IPO时拥有0.5%的股份，你非常高兴，因为你的5万美元变成了500万美元。[3]\n你投资的协议应该有条款让你贡献到未来轮次以维持你的百分比。所以是否被稀释是你的选择。[4] 如果公司做得真的很好，你最终会被稀释，因为最终估值会变得太高，对你来说不值得。\n天使投资多少？差异很大，从1万美元到数十万，甚至在极少数情况下达到数百万。上限显然是创始人想要筹集的总金额。下限是总数的5-10%或1万美元，以较大者为准。如今典型的天使轮可能是从5个人筹集15万美元。\n估值变化不大。对于天使轮，很少看到低于50万或高于4-5百万的估值。4百万开始是VC的领域。\n你如何决定提供什么估值？如果你是由其他人领导的轮次的一部分，那个问题就为你解决了。但如果你自己投资呢？没有真正的答案。没有合理的方法来评估早期创业公司。估值只反映了公司议价能力的强弱。如果他们真的很想要你，要么是因为他们迫切需要钱，要么你是能给他们很大帮助的人，他们会让你以低估值投资。如果他们不需要你，估值会更高。所以猜测。创业公司可能不比你知道这个数字应该是多少。[5]\n最终这并不重要。当天使投资人从交易中赚很多钱时，不是因为他们以150万美元而不是300万美元的估值投资。是因为公司真的非常成功。\n我不能过分强调这一点。不要纠结于机制或交易条款。你应该花时间思考的是公司是否好。\n（同样，创始人们也不应该纠结于交易条款，而应该花时间思考如何使公司变得更好。）\n天使投资的第二个不太明显的组成部分是：你预期帮助创业公司多少。像你投资的金额一样，这可能差异很大。如果你不想，你不必做任何事；你可以只是一个资金来源。或者你可以成为公司的事实上的员工。只要确保你和创业公司提前达成一致，关于你将为他们做多少。\n真正热门的公司有时对天使有高标准。每个人都想投资的公司实际上在试镜投资者，只接受有名和/或会为他们努力工作的人的钱。但不要觉得你必须投入大量时间，否则你就无法投资任何好的创业公司。创业公司的交易有多热门与其最终表现有多好之间缺乏相关性令人惊讶。许多热门的创业公司最终会失败，而没有人喜欢的许多创业公司最终会成功。而后者如此渴望资金，他们会以低估值接受 …"
  },{
    "title": "如何成为硅谷",
    "url": "/paul_graham/essays_zh/siliconvalley/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何成为硅谷 2006年5月\n（本文源自Xtech大会的主题演讲。）\n你能在其他地方复制硅谷，还是硅谷有什么独特之处？\n如果在其他国家复制硅谷很困难，这不会令人惊讶，因为在美国大部分地区你也无法复制它。即使在这里，要创建一个硅谷需要什么？\n所需要的是合适的人。如果你能让合适的一万人从硅谷搬到布法罗，布法罗就会成为硅谷。[1]\n这与过去形成了鲜明的对比。直到几十年前，地理位置还是城市的命运。所有伟大的城市都位于水道上，因为城市通过贸易赚钱，而水是唯一经济的运输方式。\n现在你可以在任何地方创建一个伟大的城市，如果你能让合适的人搬到那里。所以如何创建硅谷的问题变成了：谁是合适的人，你如何让他们搬来？\n两种类型 我认为你只需要两种人来创建技术中心：富人和技术怪才。他们是产生创业公司反应中的限制性试剂，因为他们在创业公司开始时是唯一在场的人。其他人都会搬来。\n观察证实了这一点：在美国，城镇只有在同时拥有富人和技术怪才时才会成为创业中心。例如，迈阿密很少有创业公司，因为虽然那里有很多富人，但很少有技术怪才。那不是技术怪才喜欢的地方。\n而匹兹堡则有相反的问题：有很多技术怪才，但没有富人。据说美国顶尖的计算机科学系是麻省理工学院、斯坦福大学、伯克利大学和卡内基梅隆大学。麻省理工学院产生了128公路。斯坦福大学和伯克利大学产生了硅谷。但是卡内基梅隆呢？记录在那里跳过了。在名单上更低的位置，华盛顿大学在西雅图产生了一个高科技社区，德克萨斯大学奥斯汀分校在奥斯汀产生了一个。但是匹兹堡发生了什么？还有康奈尔大学所在的伊萨卡，它也在名单上很高，那里发生了什么？\n我在匹兹堡长大，在康奈尔上大学，所以我可以回答这两个地方。天气很糟糕，特别是在冬天，而且没有有趣的古老城市来弥补，就像波士顿那样。富人不想住在匹兹堡或伊萨卡。所以虽然有很多可以开始创业公司的黑客，但没有人投资他们。\n不是官僚 你真的需要富人吗？让政府投资技术怪才行吗？不，不行。创业投资者是一种特殊类型的富人。他们自己在技术行业往往有很多经验。这（a）帮助他们选择正确的创业公司，（b）意味着他们可以提供建议和人际关系以及金钱。而且他们对结果有个人利益关系这一事实使他们真正关注。\n官僚本质上与创业投资者是完全相反的人。他们进行创业投资的想法是可笑的。这就像数学家经营《Vogue》——或者更准确地说，《Vogue》的编辑经营数学期刊。[2]\n虽然确实，官僚做的大多数事情都做得很糟糕。我们通常没有注意到，因为他们只需要与其他官僚竞争。但作为创业投资者，他们必须与经验丰富得多、积极性高得多的专业人士竞争。\n即使拥有内部风险投资集团的公司也通常禁止他们做出自己的投资决策。大多数只被允许在一些声誉良好的私人风险投资公司愿意担任主要投资者的交易中投资。\n不是建筑 如果你去看硅谷，你看到的是建筑。但正是人使它成为硅谷，而不是建筑。我偶尔读到关于在其他地方建立\u0026quot;技术园\u0026quot;的尝试，好像硅谷的有效成分是办公空间。一篇关于索菲亚·安蒂波利斯的文章夸耀说那里的公司包括思科、康柏、IBM、NCR和北电。法国人难道没有意识到这些不是创业公司吗？\n为技术公司建造办公大楼不会给你一个硅谷，因为创业公司生命中的关键阶段发生在他们想要那种空间之前。关键阶段是三个人在公寓里运作的时候。无论创业公司在获得资金时在哪里，它都会留在那里。硅谷的决定性品质不是英特尔、苹果或谷歌在那里有办公室，而是它们是在那里起步的。\n所以如果你想复制硅谷，你需要复制的是那两三个创始人围坐在厨房桌旁决定创办公司的情况。要复制这一点，你需要那些人。\n大学 令人兴奋的是，你所需要的只是人。如果你能吸引临界数量的技术怪才和投资者住在某个地方，你就可以复制硅谷。两个群体都有很高的流动性。他们会去生活好的地方。那么什么让一个地方对他们来说是好的？\n技术怪才喜欢的是其他技术怪才。聪明人会去其他聪明人在的地方。特别是，去伟大的大学。理论上可能有其他方法吸引他们，但到目前为止，大学似乎是不可或缺的。在美国，没有一流大学——或者至少一流的计算机科学系的技术中心。\n所以如果你想创建一个硅谷，你不仅需要一所大学，而是世界上顶级的几所之一。它必须足够好，能够起到磁铁的作用，吸引数千英里外的最佳人才。这意味着它必须能够与现有的磁铁如麻省理工学院和斯坦福大学竞争。\n这听起来很难。实际上可能很容易。我的教授朋友在决定他们想在哪里工作时，首先考虑一件事：其他教师的质量。吸引教授的是好同事。所以如果你能够大规模地招募大量最好的年轻研究人员，你可以一夜之间从无到有创建一所一流的大学。你可以用惊人的少的钱做到这一点。如果你给200人每人300万美元的签约奖金，你可以组建一个能够与世界上任何地方相比的师资队伍。从那时起，连锁反应将是自我维持的。所以无论建立一所平庸大学需要多少钱，再增加大约五亿你就可以拥有一所伟大的大学。[3]\n个性 然而，仅仅创建一所新大学并不足以启动硅谷。大学只是种子。它必须种植在合适的土壤中，否则不会发芽。把它种在错误的地方，你只是创建了另一个卡内基梅隆。\n要产生创业公司，你的大学必须在一个除了大学之外还有其他吸引力的城镇。它必须是投资者想住的地方，学生毕业后想留下来的地方。\n两者喜欢很多东西是相同的，因为大多数创业投资者自己就是技术怪才。那么技术怪才在城镇中寻找什么？他们的品味与其他人的品味并不完全不同，因为他们最喜欢的美国城镇中很多也是大型旅游目的地：旧金山、波士顿、西雅图。但他们的品味也不能太主流，因为他们不喜欢其他大型旅游目的地，如纽约、洛杉矶和拉斯维加斯。\n最近有很多关于\u0026quot;创意阶层\u0026quot;的文章。论点似乎是，由于财富越来越来自想法，城市只有吸引那些有想法的人才能繁荣。这当然是真实的；事实上，这是400年前阿姆斯特丹繁荣的基础。\n技术怪才的很多品味与一般创意阶层共享。例如，他们喜欢保存完好的古老社区而不是千篇一律的郊区，喜欢本地拥有的商店和餐厅而不是全国连锁店。像创意阶层的其他人一样，他们想住在有个性的地方。\n什么 exactly 是个性？我认为这是每栋建筑都是不同人群作品的感觉。有个性的城镇是不会感觉批量生产的地方。所以如果你想创建一个创业中心——或者任何吸引\u0026quot;创意阶层\u0026quot;的城镇——你可能必须禁止大型开发项目。当大片区域由单个组织开发时，你总能看出来。[4]\n大多数有个性的城镇都是古老的，但它们不必是。古老城镇有两个优势：它们更密集，因为它们是在汽车出现之前规划的，而且它们更多样化，因为它们是一次建造一栋建筑。你现在可以两者兼得。只要确保密度的建筑规范，并禁止大规模开发。\n一个推论是你必须阻止最大的开发者：政府。一个问\u0026quot;我们如何建立硅谷？\u0026ldquo;的政府可能已经通过提问的方式确保了失败。你不是建立硅谷；你让它生长。\n技术怪才 如果你想吸引技术怪才，你需要的不只是有个性的城镇。你需要有正确个性的城镇。技术怪才是创意阶层的独特子集，与其他人有不同的品味。你可以在纽约最清楚地看到这一点，纽约吸引了很多创意人士，但很少有技术怪才。[5]\n技术怪才喜欢的是人们微笑走动的城镇。这排除了洛杉矶，那里没有人走路，也排除了纽约，那里人们走路，但不微笑。当我在波士顿读研究生时，一个朋友从纽约来看我。在从机场回来的地铁上她问\u0026quot;为什么每个人都在微笑？\u0026ldquo;我看了看，他们没有微笑。只是与她习惯的面部表情相比，他们看起来像在微笑。\n如果你在纽约生活过，你知道这些面部表情来自哪里。那是那种你的思想可能很兴奋，但你的身体知道它过得很糟糕的地方。人们与其说享受在那里生活，不如说是为了刺激而忍受。而且如果你喜欢某种刺激，纽约是无与伦比的。它是魅力的中心，是所有风格和名声的短半衰期同位素的磁铁。\n技术怪才不关心魅力，所以对他们来说纽约的吸引力是个谜。喜欢纽约的人会花一大笔钱买一个又小又黑又吵的公寓，为了住在一个酷的人真的很酷的城镇。技术怪才看着这笔交易只看到：花一大笔钱买一个又小又黑又吵的公寓。\n技术怪才会付溢价住在聪明人真的很聪明的地方，但你不必为此付那么多。这是供求关系：魅力很受欢迎，所以你必须为此付很多钱。\n大多数技术怪才喜欢更安静的乐趣。他们喜欢咖啡馆而不是俱乐部；二手书店而不是时尚服装店；徒步旅行而不是跳舞；阳光而不是高楼大厦。技术怪才的天堂是伯克利或博尔德。\n年轻人 正是年轻的技术怪才创办创业公司，所以城市必须特别吸引他们。美国的创业中心都是感觉年轻的城镇。这不意味着它们必须是新的。剑桥有美国最古老的城镇规划，但它感觉很年轻，因为它充满了学生。\n如果你想创建硅谷，你不能拥有大量的现有保守人群。试图通过鼓励创业来扭转底特律或费城等衰落工业城市的命运将是浪费时间。这些地方在错误的方向上有太多的势头。你最好从一个小城镇的空白开始。或者更好，如果有一个年轻人已经涌向的城镇，那就是那个。\n海湾地区几十年来一直是年轻和乐观人士的磁石，在它与技术相关之前。那是人们去寻找新事物的地方。所以它成了加州怪异行为的代名词。那里仍然有很多这样的地方。如果你想开始一个新潮流——比如一种新的集中\u0026quot;能量\u0026quot;的方式，或者一个新的不吃的东西类别——海湾地区就是这样做的地方。但是一个在寻找新事物的过程中容忍怪异的地方正是创业中心所需要的，因为经济上创业公司就是这样。大多数好的创业想法看起来有点疯狂；如果它们显然是好主意，有人已经做过了。\n（有多少人想要在家里拥有电脑？什么，又一个搜索引擎？）\n这就是技术与自由主义之间的联系。毫无例外，美国的高科技城市也是最自由的。但这并不是因为自由主义者更聪明。这是因为自由主义城市容忍奇怪的想法，而聪明人按定义有奇怪的想法。\n相反，一个因\u0026quot;稳固\u0026quot;或代表\u0026quot;传统价值观\u0026quot;而受到赞扬的城镇可能是个好住处，但它永远不会成为成功的创业中心。2004年总统选举，尽管在其他方面是灾难性的，方便地为我们提供了这些地方的县地图。[6]\n要吸引年轻人，城镇必须有完整的中心。在大多数美国城市，中心已被废弃，如果有的话，增长在郊区。大多数美国城市已经被内外翻转。但没有一个创业中心是这样的：不是旧金山，不是波士顿，不是西雅图。它们都有完整的中心。[7] 我的猜测是，没有中心死亡的城市能够变成创业中心。年轻人不想住在郊区。\n在美国，我认为最容易变成新硅谷的两个城市是博尔德和波特兰。如果它们愿意，它们都有那种吸引年轻人的活跃感觉。它们都只差一所伟大的大学就能成为硅谷。\n时间 一所伟大的大学靠近一个有吸引力的城镇。这就是所需要的全部吗？这就是创建原始硅谷所需要的全部。硅谷的起源可以追溯到威廉·肖克利，晶体管的发明者之一。他在贝尔实验室做了获得诺贝尔奖的研究，但当他在1956年创办自己的公司时，他搬到了帕洛阿尔托来做这件事。当时这是件奇怪的事。他为什么这么做？因为他在那里长大，记得那里有多好。现在帕洛阿尔托是郊区，但那时它是一个迷人的大学城——一个有着完美天气和旧金山只有一小时路程的迷人大学城。\n现在统治硅谷的公司都以各种方式源自肖克利半导体。肖克利是个难相处的人，1957年他的顶尖人物——\u0026ldquo;叛逆八人帮\u0026rdquo;——离开创办了一家新公司，仙童半导体。其中包括戈登·摩尔和罗伯特·诺伊斯，他们后来创立了英特尔，以及尤金·克莱纳，他创立了风险投资公司克莱纳·珀金斯。四十二年后，克莱纳·珀金斯资助了谷歌，负责这笔交易的合作伙伴是约翰·杜尔，他于1974年来到硅谷为英特尔工作。\n所以虽然硅谷许多最新的公司不制造硅制品，但似乎总有多重回溯到肖克利的联系。这里有一个教训：创业公司产生创业公司。为创业公司工作的人创办自己的公司。从创业公司致富的人资助新的公司。我怀疑这种有机增长是产生创业中心的唯一方法，因为它是培养你所需专业知识的唯一方法。\n这有两个重要的含义。首先，你需要时间来培育硅谷。大学你可以在几年内创建，但周围的创业社区必须有机增长。周期时间受公司成功所需时间的限制，这可能平均大约五年。\n有机增长假设的另一个含义是你不能有点像创业中心。你要么有一个自我维持的连锁反应，要么没有。观察也证实了这一点：城市要么有创业场景，要么没有。没有中间地带。芝加哥有美国第三大大都市区。作为创业公司的来源，它与第15位的西雅图相比可以忽略不计。\n好消息是初始种子可以相当小。肖克利半导体，虽然本身不是很成功，但足够大。它将重要新技术中的临界数量的专家聚集在一个他们足够喜欢而留下的地方。\n竞争 当然，一个想要成为硅谷的地方面临着原始硅谷没有的障碍：它必须与硅谷竞争。这能做到吗？可能。\n硅谷最大的优势之一是它的风险投资公司。这在肖克利时代不是因素，因为风险投资基金不存在。事实上，肖克利半导体和仙童半导体在我们的意义上根本不是创业公司。它们是子公司——分别是贝克曼仪器和仙童相机与仪器的子公司。这些公司显然愿意在专家想住的地方建立子公司。\n然而，风险投资者更愿意资助一小时车程内的创业公司。首先，他们更可能注意到附近的创业公司。但当他们确实注意到其他城镇的创业公司时，他们更希望它们搬来。他们不想为了参加董事会会议而旅行，而且无论如何，在创业中心成功的几率更高。\n风险公司的集中效应是双重的：它们导致创业公司围绕它们形成，而那些通过收购吸引更多创业公司。虽然第一个可能正在减弱，因为现在开始一些创业公司如此便宜，但第二个似乎一如既往地强大。最受崇拜的\u0026quot;Web 2.0\u0026quot;公司中有三家是在通常的创业中心之外开始的，但其中两家已经通过收购被拉了进来。\n",
    "description": "",
    "tags": ["硅谷","技术中心","技术怪才","投资者","大学","创新"],
    "categories": [],
    "content": "→ English Version\n如何成为硅谷 2006年5月\n（本文源自Xtech大会的主题演讲。）\n你能在其他地方复制硅谷，还是硅谷有什么独特之处？\n如果在其他国家复制硅谷很困难，这不会令人惊讶，因为在美国大部分地区你也无法复制它。即使在这里，要创建一个硅谷需要什么？\n所需要的是合适的人。如果你能让合适的一万人从硅谷搬到布法罗，布法罗就会成为硅谷。[1]\n这与过去形成了鲜明的对比。直到几十年前，地理位置还是城市的命运。所有伟大的城市都位于水道上，因为城市通过贸易赚钱，而水是唯一经济的运输方式。\n现在你可以在任何地方创建一个伟大的城市，如果你能让合适的人搬到那里。所以如何创建硅谷的问题变成了：谁是合适的人，你如何让他们搬来？\n两种类型 我认为你只需要两种人来创建技术中心：富人和技术怪才。他们是产生创业公司反应中的限制性试剂，因为他们在创业公司开始时是唯一在场的人。其他人都会搬来。\n观察证实了这一点：在美国，城镇只有在同时拥有富人和技术怪才时才会成为创业中心。例如，迈阿密很少有创业公司，因为虽然那里有很多富人，但很少有技术怪才。那不是技术怪才喜欢的地方。\n而匹兹堡则有相反的问题：有很多技术怪才，但没有富人。据说美国顶尖的计算机科学系是麻省理工学院、斯坦福大学、伯克利大学和卡内基梅隆大学。麻省理工学院产生了128公路。斯坦福大学和伯克利大学产生了硅谷。但是卡内基梅隆呢？记录在那里跳过了。在名单上更低的位置，华盛顿大学在西雅图产生了一个高科技社区，德克萨斯大学奥斯汀分校在奥斯汀产生了一个。但是匹兹堡发生了什么？还有康奈尔大学所在的伊萨卡，它也在名单上很高，那里发生了什么？\n我在匹兹堡长大，在康奈尔上大学，所以我可以回答这两个地方。天气很糟糕，特别是在冬天，而且没有有趣的古老城市来弥补，就像波士顿那样。富人不想住在匹兹堡或伊萨卡。所以虽然有很多可以开始创业公司的黑客，但没有人投资他们。\n不是官僚 你真的需要富人吗？让政府投资技术怪才行吗？不，不行。创业投资者是一种特殊类型的富人。他们自己在技术行业往往有很多经验。这（a）帮助他们选择正确的创业公司，（b）意味着他们可以提供建议和人际关系以及金钱。而且他们对结果有个人利益关系这一事实使他们真正关注。\n官僚本质上与创业投资者是完全相反的人。他们进行创业投资的想法是可笑的。这就像数学家经营《Vogue》——或者更准确地说，《Vogue》的编辑经营数学期刊。[2]\n虽然确实，官僚做的大多数事情都做得很糟糕。我们通常没有注意到，因为他们只需要与其他官僚竞争。但作为创业投资者，他们必须与经验丰富得多、积极性高得多的专业人士竞争。\n即使拥有内部风险投资集团的公司也通常禁止他们做出自己的投资决策。大多数只被允许在一些声誉良好的私人风险投资公司愿意担任主要投资者的交易中投资。\n不是建筑 如果你去看硅谷，你看到的是建筑。但正是人使它成为硅谷，而不是建筑。我偶尔读到关于在其他地方建立\u0026quot;技术园\u0026quot;的尝试，好像硅谷的有效成分是办公空间。一篇关于索菲亚·安蒂波利斯的文章夸耀说那里的公司包括思科、康柏、IBM、NCR和北电。法国人难道没有意识到这些不是创业公司吗？\n为技术公司建造办公大楼不会给你一个硅谷，因为创业公司生命中的关键阶段发生在他们想要那种空间之前。关键阶段是三个人在公寓里运作的时候。无论创业公司在获得资金时在哪里，它都会留在那里。硅谷的决定性品质不是英特尔、苹果或谷歌在那里有办公室，而是它们是在那里起步的。\n所以如果你想复制硅谷，你需要复制的是那两三个创始人围坐在厨房桌旁决定创办公司的情况。要复制这一点，你需要那些人。\n大学 令人兴奋的是，你所需要的只是人。如果你能吸引临界数量的技术怪才和投资者住在某个地方，你就可以复制硅谷。两个群体都有很高的流动性。他们会去生活好的地方。那么什么让一个地方对他们来说是好的？\n技术怪才喜欢的是其他技术怪才。聪明人会去其他聪明人在的地方。特别是，去伟大的大学。理论上可能有其他方法吸引他们，但到目前为止，大学似乎是不可或缺的。在美国，没有一流大学——或者至少一流的计算机科学系的技术中心。\n所以如果你想创建一个硅谷，你不仅需要一所大学，而是世界上顶级的几所之一。它必须足够好，能够起到磁铁的作用，吸引数千英里外的最佳人才。这意味着它必须能够与现有的磁铁如麻省理工学院和斯坦福大学竞争。\n这听起来很难。实际上可能很容易。我的教授朋友在决定他们想在哪里工作时，首先考虑一件事：其他教师的质量。吸引教授的是好同事。所以如果你能够大规模地招募大量最好的年轻研究人员，你可以一夜之间从无到有创建一所一流的大学。你可以用惊人的少的钱做到这一点。如果你给200人每人300万美元的签约奖金，你可以组建一个能够与世界上任何地方相比的师资队伍。从那时起，连锁反应将是自我维持的。所以 …"
  },{
    "title": "如何浪费时间和金钱",
    "url": "/paul_graham/essays_zh/selfindulgence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何浪费时间和金钱 2010年7月\n当我们在1998年出售我们的创业公司时，我突然得到了很多钱。现在我必须考虑我以前不必考虑的事情：如何不失去它。我知道从富有到贫穷是可能的，就像从贫穷到富有是可能的。但是，虽然我过去几年花了很多时间研究从贫穷到富有的途径，但我对从富有到贫穷的途径几乎一无所知。现在，为了避免它们，我必须了解它们在哪里。\n所以我开始关注财富是如何失去的。如果你小时候问我富人如何变得贫穷，我会说是因为花光了所有的钱。这就是书籍和电影中的情况，因为这是色彩斑斓的方式。但事实上，大多数财富失去的方式不是通过过度支出，而是通过糟糕的投资。\n很难在不注意的情况下花掉一笔财富。一个品味普通的人会发现很难在不想\u0026quot;哇，我花了很多钱\u0026quot;的情况下花掉超过几万美元。而如果你开始交易衍生品，你可以在眨眼之间失去一百万美元（实际上是你想要的任何数量）。\n在大多数人的心目中，在奢侈品上花钱会引发警报，而投资不会。奢侈品似乎很自我放纵。除非你是通过继承或赢得彩票获得这笔钱，否则你已经彻底接受过自我放纵会导致麻烦的训练。投资绕过了这些警报。你不是在花钱；你只是把它从一个资产转移到另一个资产。这就是为什么试图向你推销昂贵东西的人说\u0026quot;这是一项投资\u0026quot;。\n解决方案是开发新的警报。这可能是一个棘手的业务，因为虽然防止你过度支出的警报如此基本，甚至可能存在于我们的DNA中，但防止你做出糟糕投资的警报必须学习，有时相当违反直觉。\n几天前我意识到了令人惊讶的事情：时间的情况与金钱非常相似。失去时间的最危险方式不是花在娱乐上，而是花在做假工作上。当你花时间娱乐时，你知道你在自我放纵。警报很快就会开始响起。如果有一天早上我醒来坐在沙发上看了一整天电视，我会感觉有什么事情 terribly 错了。光是想到这个就让我畏缩。在沙发上看电视2小时后我就开始感到不舒服，更不用说一整天了。\n然而，我确实有过一些日子，我本可以整天坐在电视前——在这些日子的最后，如果我问自己那天完成了什么，答案会是：基本上，什么都没有。这些日子后我也感觉很糟糕，但不像我整天在沙发上看电视那样糟糕。如果我整天看电视，我会感觉自己在堕入地狱。但在那些我没有完成任何事情的日子里，同样的警报不会响起，因为我做的事情表面上看起来像是真正的工作。例如，处理电子邮件。你坐在办公桌前做这件事。这并不有趣。所以一定是工作。\n与金钱一样，避免享受不再足以保护你。这可能足以保护狩猎采集者，也许是所有前工业社会。所以自然和 nurture 结合起来让我们避免自我放纵。但世界变得更加复杂：现在最危险的陷阱是新的行为，它们通过模仿更良性的类型来绕过我们关于自我放纵的警报。最糟糕的是，它们甚至不好玩。\n感谢 Sam Altman、Trevor Blackwell、Patrick Collison、Jessica Livingston 和 Robert Morris 阅读本文的草稿。\n",
    "description": "",
    "tags": ["时间管理","金钱","投资","自我放纵","生产力"],
    "categories": [],
    "content": "→ English Version\n如何浪费时间和金钱 2010年7月\n当我们在1998年出售我们的创业公司时，我突然得到了很多钱。现在我必须考虑我以前不必考虑的事情：如何不失去它。我知道从富有到贫穷是可能的，就像从贫穷到富有是可能的。但是，虽然我过去几年花了很多时间研究从贫穷到富有的途径，但我对从富有到贫穷的途径几乎一无所知。现在，为了避免它们，我必须了解它们在哪里。\n所以我开始关注财富是如何失去的。如果你小时候问我富人如何变得贫穷，我会说是因为花光了所有的钱。这就是书籍和电影中的情况，因为这是色彩斑斓的方式。但事实上，大多数财富失去的方式不是通过过度支出，而是通过糟糕的投资。\n很难在不注意的情况下花掉一笔财富。一个品味普通的人会发现很难在不想\u0026quot;哇，我花了很多钱\u0026quot;的情况下花掉超过几万美元。而如果你开始交易衍生品，你可以在眨眼之间失去一百万美元（实际上是你想要的任何数量）。\n在大多数人的心目中，在奢侈品上花钱会引发警报，而投资不会。奢侈品似乎很自我放纵。除非你是通过继承或赢得彩票获得这笔钱，否则你已经彻底接受过自我放纵会导致麻烦的训练。投资绕过了这些警报。你不是在花钱；你只是把它从一个资产转移到另一个资产。这就是为什么试图向你推销昂贵东西的人说\u0026quot;这是一项投资\u0026quot;。\n解决方案是开发新的警报。这可能是一个棘手的业务，因为虽然防止你过度支出的警报如此基本，甚至可能存在于我们的DNA中，但防止你做出糟糕投资的警报必须学习，有时相当违反直觉。\n几天前我意识到了令人惊讶的事情：时间的情况与金钱非常相似。失去时间的最危险方式不是花在娱乐上，而是花在做假工作上。当你花时间娱乐时，你知道你在自我放纵。警报很快就会开始响起。如果有一天早上我醒来坐在沙发上看了一整天电视，我会感觉有什么事情 terribly 错了。光是想到这个就让我畏缩。在沙发上看电视2小时后我就开始感到不舒服，更不用说一整天了。\n然而，我确实有过一些日子，我本可以整天坐在电视前——在这些日子的最后，如果我问自己那天完成了什么，答案会是：基本上，什么都没有。这些日子后我也感觉很糟糕，但不像我整天在沙发上看电视那样糟糕。如果我整天看电视，我会感觉自己在堕入地狱。但在那些我没有完成任何事情的日子里，同样的警报不会响起，因为我做的事情表面上看起来像是真正的工作。例如，处理电子邮件。你坐在办公桌前做这件事。这并不有趣。所以一定是工作。\n与金钱一样，避免享受不再足以保护你。这可能足以保护狩猎采集者，也许是所有前工业社会。所以自然和 nurture 结合起来让我们避免自我放纵。但世界变得更加复杂：现在最危险的陷阱是新的行为，它们通过模仿更良性的类型来绕过我们关于自我放纵的警报。最糟糕的是，它们甚至不好玩。\n感谢 Sam Altman、Trevor Blackwell、Patrick Collison、Jessica Livingston 和 Robert Morris 阅读本文的草稿。\n"
  },{
    "title": "如何独立思考",
    "url": "/paul_graham/essays_zh/think/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何独立思考 2020年11月\n有些类型的工作，如果不与同伴有不同的思考，你无法做好。例如，要成为一名成功的科学家，仅仅正确是不够的。你的想法必须既正确又新颖。你不能发表说其他人已经知道的事情的论文。你需要说还没有其他人意识到的事情。\n投资者也是如此。公开市场投资者仅仅正确预测公司将如何表现是不够的。如果很多其他人做出相同的预测，股票价格将已经反映它，没有赚钱的空间。唯一有价值的见解是大多数其他投资者不分享的见解。\n你在创业公司创始人身上也看到这种模式。你不想创业去做每个人都同意是好主意的事情，或者已经有其他公司在做它。你必须做一件对大多数其他人来说听起来像坏主意，但你知道不是的事情——比如为几千个爱好者使用的微型计算机编写软件，或者创办一个让人们可以在陌生人地板上租充气床垫的网站。\n散文家也是如此。告诉人们他们已经知道的事情的散文会很无聊。你必须告诉他们一些新东西。\n但这种模式并不普遍。事实上，它对大多数类型的工作不成立。在大多数类型的工作中——例如，成为一名管理员——你只需要前一半。你只需要是正确的。其他人都不错并不是必需的。\n在大多数类型的工作中都有一些新意的空间，但在实践中，在必须独立思考的工作类型和不必须的工作类型之间有相当明显的区别。\n我希望有人在我小时候告诉我这种区别，因为这是在决定你想做什么类型工作时需要思考的最重要事情之一。你想做那种只能通过与每个人不同思考才能赢的工作吗？我怀疑大多数人的潜意识会在他们的意识有机会之前回答那个问题。我知道我的会。\n独立思考似乎更多是天生的而不是后天培养的。这意味着如果你选择了错误类型的工作，你将会不快乐。如果你天生独立思考，你会发现成为一名中层管理者很令人沮丧。如果你天生从众，如果你尝试做原创研究，你将会逆风而上。\n然而，这里的一个困难是，人们经常误解自己在从众到独立思考的光谱上的位置。从众的人不喜欢认为自己是从众的。而且，无论如何，他们真的感觉自己对一切都有自己的想法。他们的信念与同龄人的信念相同只是一个巧合。同时，独立思考的人常常没有意识到他们的想法与常规想法有多不同，至少在他们公开陈述它们之前。[1]\n到成年时，大多数人大致知道他们有多聪明（在解决预设问题的狭义能力上），因为他们不断地根据它被测试和排名。但学校通常忽视独立思考，除了他们试图压制它的程度。所以我们没有获得关于我们独立思考程度的任何相同类型的反馈。\n甚至可能有类似邓宁-克鲁格的现象在起作用，其中最从众的人自信他们是独立思考的，而真正独立思考的人担心他们可能不够独立思考。\n你能让自己更独立思考吗？我想是的。这种品质可能主要是天生的，但似乎有方法可以放大它，或者至少不压制它。\n最有效的技术之一是大多数书呆子无意中实践的：简单地更少知道常规信念是什么。如果你不知道你应该遵守什么，就很难成为从众者。但再次，可能这样的人已经是独立思考的。从众的人可能会因为不知道其他人想什么而感到焦虑，并更努力去寻找。\n你周围的人很重要。如果你被从众的人包围，这将限制你能表达的想法，而这反过来又将限制你有的想法。但如果你被独立思考的人包围，你将有相反的经历：听到其他人说令人惊讶的事情将鼓励你，并思考更多。\n因为独立思考的人发现被从众的人包围是不舒服的，一旦有机会，他们倾向于自我隔离。高中的问题在于他们还没有机会这样做。而且高中往往是一个向内看的小世界，其居民缺乏自信，这两者都放大了从众的力量。所以对独立思考的人来说，高中通常是一个糟糕的时期。但即使这里也有一些优势：它教会你避免什么。如果你后来发现自己在一个让你想\u0026quot;这像高中\u0026quot;的情况中，你知道你应该离开。[2]\n独立思考和从众的人被抛在一起的另一个地方是在成功的创业公司中。创始人和早期员工几乎总是独立思考的；否则创业公司不会成功。但从众的人在数量上大大超过独立思考的人，所以随着公司的发展，独立思考的原始精神不可避免地被稀释。除了公司开始变糟的明显问题外，这还导致了各种各样的问题。最奇怪的问题之一是，创始人发现自己能够与其他公司的创始人比与自己的员工更自由地交谈。[3]\n幸运的是，你不必把所有时间都花在独立思考的人身上。有一两个你可以定期交谈的就足够了。一旦你找到他们，他们通常和你一样渴望交谈；他们也需要你。虽然大学不再拥有它们过去对教育的垄断，但好大学仍然是遇到独立思考的人的绝佳方式。大多数学生仍将从众，但你至少会发现独立思考的小群体，而不是你在高中可能发现的接近零。\n另一种方法是反方向：除了培养一小群独立思考的朋友外，尝试尽可能多地遇到不同类型的人。如果你有其他几个同龄人群体，这将减少你直接同龄人的影响。而且如果你是几个不同世界的一部分，你经常可以从一个向另一个导入想法。\n但我说不同类型的人，不是指人口统计上不同的。为了这个技术有效，他们必须思考不同。所以虽然去其他国家访问是个好主意，但你可能就在拐角处能找到思考不同的人。当我遇到某个对不寻常事物了解很多的人（如果你挖得足够深，这实际上包括每个人），我尝试学习他们知道而其他人不知道的东西。这里几乎总是有惊喜。当你遇到陌生人时，这是开始对话的好方法，但我不是为了对话才这样做。我真的想知道。\n你也可以通过阅读历史在时间上和空间上扩大影响的来源。当我读历史时，我不仅是为了了解发生了什么，而是尝试进入生活在过去的人的头脑。事情对他们来说看起来如何？这很难做到，但值得努力，就像值得远行去三角定位一个点一样。\n你也可以采取更明确的措施来防止自己自动接受常规意见。最一般的是培养怀疑态度。当你听到有人说什么时，停下来问自己\u0026quot;这是真的吗？\u0026ldquo;不要大声说出来。我不是建议你给每个与你交谈的人强加证明他们所说的负担，而是你承担评估他们所说的负担。\n把它当作一个谜题。你知道一些公认的想法后来会被证明是错误的。看看你能否猜测是哪些。最终目标不是在你被告知的事情中找到缺陷，而是找到被损坏想法隐藏的新想法。所以这个游戏应该是对新颖性的激动人心的探索，而不是智力卫生的无聊协议。当你开始问\u0026quot;这是真的吗？\u0026ldquo;时，你会惊讶地发现答案往往不是立即是的。如果你有任何想象力，你更可能有过多的线索可循而不是过少。\n更一般地说，你的目标应该是不让任何东西未经审视就进入你的头脑，而东西并不总是以陈述的形式进入你的头脑。一些最强大的影响是隐含的。你甚至如何注意到这些？退后一步，观察其他人如何获得他们的想法。\n当你退后到足够的距离，你可以看到想法像波浪一样在人群中传播。最明显的是在时尚中：你注意到一些人穿某种衬衫，然后越来越多，直到你周围的一半人穿着相同的衬衫。你可能不太在乎你穿什么，但也有智力时尚，你绝对不想参与那些。不仅仅是因为你想要对自己思想的主权，而且是因为不时尚的想法不成比例地可能导致有趣的地方。发现未被发现想法的最好地方是没有人寻找的地方。[4]\n为了超越这个一般建议，我们需要看看独立思考的内部结构——就像我们需要锻炼的个别肌肉。在我看来，它有三个组成部分：对真理的挑剔，对被告知思考的抵抗，和好奇心。\n对真理的挑剔意味着不仅仅是不相信虚假的事情。它意味着对信念程度小心。对大多数人来说，信念程度未经审视地冲向极端：不可能的变成不可能，可能的变成确定的。[5] 对独立思考的人来说，这似乎是不可原谅的草率。他们愿意让任何东西进入他们的头脑，从高度推测的假设到（明显）的重言式，但在他们关心的主题上，一切都必须用仔细考虑的信念程度标记。[6]\n因此，独立思考的人对意识形态有恐惧感，意识形态要求一个人同时接受整个信念集合，并将它们当作信仰条款。对独立思考的人来说，这似乎令人反感，就像对食物挑剔的人会觉得咬一口充满各种不确定年龄和来源成分的潜艇三明治令人反感一样。\n没有这种对真理的挑剔，你不可能真正独立思考。仅仅有对被告知思考的抵抗是不够的。那种人拒绝常规想法只是为了用最随机的阴谋论取而代之。而且由于这些阴谋论常常是为捕获他们而制造的，他们最终比普通人更不独立思考，因为他们受制于一个比仅仅是常规更苛刻的主人。[7]\n你能增加对真理的挑剔吗？我想是的。根据我的经验，仅仅思考你挑剔的事情就会导致那种挑剔增长。如果是这样，这是我们仅仅通过想要就能拥有的少数美德之一。而且如果它像其他形式的挑剔，应该也可能在儿童中鼓励。我肯定从我父亲那里得到了强烈的剂量。[8]\n独立思考的第二个组成部分，对被告知思考的抵抗，是三个中最明显的。但即使这一点也经常被误解。人们犯的最大错误是把它视为仅仅消极的品质。我们使用的语言强化了那个想法。你不循规蹈矩。你不在乎别人想什么。但它不仅仅是一种免疫力。在最独立思考的人中，不想被告知思考的欲望是一种积极的力量。不仅仅是怀疑主义，而是对颠覆常规智慧的想法的积极喜悦，越违反直觉越好。\n一些最新颖的想法在当时几乎像恶作剧。想想你对新颖想法的反应经常是笑。我不认为新颖想法本身很有趣，而是因为新颖性和幽默分享某种惊奇。但虽然不相同，两者足够接近，以至于有幽默感和独立思考之间有明确的相关性——就像无幽默感和从众之间一样。[9]\n我不认为我们能显著增加对被告知思考的抵抗。它似乎似乎是独立思考三个组成部分中最天生的；成年时有这种品质的人通常在儿童时就有太明显的迹象。但如果我们不能增加对被告知思考的抵抗，我们至少可以通过让自己被其他独立思考的人包围来支撑它。\n独立思考的第三个组成部分，好奇心，可能是最有趣的。就我们能对新颖想法来自哪里给出简短答案而言，它是好奇心。那是人们通常在拥有它们之前的感觉。\n根据我的经验，独立思考和好奇心完美地相互预测。我认识的每个独立思考的人都深深好奇，我认识的每个从众的人都不是。奇怪的是，儿童除外。所有小孩子都好奇。也许原因是即使从众的人在开始时也必须好奇，为了学习常规是什么。而独立思考的人是好奇的贪吃者，即使饱了也继续吃。[10]\n独立思考的三个组成部分协同工作：对真理的挑剔和对被告知思考的抵抗在你大脑中创造空间，好奇心找到新想法来填充它。\n有趣的是，三个组成部分可以像肌肉一样在很大程度上相互替代。如果你对真理足够挑剔，你不需要对被告知思考有那么强的抵抗，因为挑剔本身会在你的知识中创造足够的空白。而且任何一个都可以补偿好奇心，因为如果你在大脑中创造足够的空间，你对由此产生的真空的不适将给你的好奇心增加力量。或者好奇心可以补偿它们：如果你足够好奇，你不需要在大脑中清除空间，因为你发现的新想法将把你默认获得的常规想法推出去。\n因为独立思考的组成部分如此可互换，你可以有不同程度地拥有它们并仍然得到相同的结果。所以独立思考不是单一模式。一些独立思考的人是公开颠覆性的，另一些则是安静地好奇的。但他们都知道秘密握手。\n有没有方法培养好奇心？首先，你想避免抑制它的情况。你目前正在做的工作在多大程度上激发你的好奇心？如果答案是\u0026quot;不多\u0026rdquo;，也许你应该改变一些事情。\n你可以采取的培养好奇心的最重要的积极步骤可能是寻找吸引它的主题。很少有成年人对一切都同样好奇，而且你似乎不能选择哪些主题吸引你。所以由你来找到它们。或者必要时发明它们。\n增加好奇心的另一个方法是纵容它，通过调查你感兴趣的事情。好奇心在这方面不同于大多数其他欲望：纵容它往往增加而不是满足它。问题导致更多问题。\n好奇心似乎比对真理的挑剔或对被告知思考的抵抗更个人化。在人们拥有后两者的程度上，他们通常相当普遍，而不同的人可以对非常不同的事物好奇。所以也许好奇心是指南针。也许，如果你的目标是发现新颖想法，你的座右铭不应该那么多是\u0026quot;做你爱的\u0026rdquo;，而是\u0026quot;做你好奇的\u0026quot;。\n注释 [1] 没有人认同为从众的人这一事实的一个方便后果是，你可以说你喜欢从众的人什么而不会陷入太多麻烦。当我写《从众的四个象限时，我预期从侵略性从众的人那里会有愤怒的风暴，但事实上它相当微弱。他们感觉到文章中有某种他们极度不喜欢的东西，但他们很难找到特定的段落来钉它。\n[2] 当我问自己生活中什么像高中时，答案是Twitter。它不仅充满了从众的人，就像任何它规模的东西不可避免的那样，而且受到暴力的从众风暴，让我想起木星的描述。但虽然在那里花时间可能是净损失，但至少让我更多地思考了独立和从众之间的区别，否则我可能不会这样做。\n[3] 成长创业公司中独立思考的减少仍然是一个开放问题，但可能有解决方案。\n创始人可以通过有意识地努力只雇佣独立思考的人来延迟问题。这当然也有他们有更好想法的附加好处。\n另一个可能的解决方案是创造某种政策，破坏从众的力量，很像控制棒减慢连锁反应，这样从众的人就不那么危险。洛克希德臭鼬工厂的物理分离可能有这方面作为一个好处。最近的例子表明像Slack这样的员工论坛可能不是纯粹的善。\n最激进的解决方案是在不增加公司的情况下增加收入。你认为雇佣那个初级公关人员会比程序员便宜，但对你公司平均独立思考水平的影响是什么？（相对于教员的员工增长似乎对大学有类似的影响。）也许关于外包不是你\u0026quot;核心能力\u0026quot;的工作的规则应该补充一个关于外包那些作为员工会破坏你文化的人的工作。\n一些投资公司似乎已经能够在不增加员工数量的情况下增加收入。自动化加上\u0026quot;技术栈\u0026quot;的不断增长的精确性表明有一天这对产品公司可能也是可能的。\n[4] 每个领域都有智力时尚，但它们的影响不同。例如，政治往往无聊的原因之一是它非常受它们影响。对政治有意见的门槛比对集合论有意见的门槛低得多。所以虽然政治中有一些想法，在实践中它们往往被智力时尚的浪潮淹没。\n[5] 从众的人经常被他们意见的力量欺骗，认为他们是独立思考的。但强烈的信念不是独立思考的标志。恰恰相反。\n[6] 对真理的挑剔并不意味着独立思考的人不会不诚实，而是他不会被欺骗。这有点像绅士的定义，即一个从不无礼的人。\n[7] 你在政治极端主义者中特别看到这一点。他们认为自己是叛逆者，但实际上他们是小众从众者。他们的意见可能不同于普通人的，但他们往往比普通人更受同龄人意见的影响。\n[8] 如果我们扩大对真理的挑剔的概念，使其除了严格意义上的虚假外，还包括迎合、虚假和浮夸，我们的独立思考模型可以进一步扩展到艺术。\n[9] 这种相关性远非完美。哥德尔和狄拉克在幽默部门似乎不是很强。但一个既\u0026quot;神经典型\u0026quot;又无幽默感的人很可能从众。\n[10] 例外：八卦。几乎每个人都对八卦好奇。\n",
    "description": "",
    "tags": ["独立思考","好奇心","原创性","从众","创新","想法"],
    "categories": [],
    "content": "→ English Version\n如何独立思考 2020年11月\n有些类型的工作，如果不与同伴有不同的思考，你无法做好。例如，要成为一名成功的科学家，仅仅正确是不够的。你的想法必须既正确又新颖。你不能发表说其他人已经知道的事情的论文。你需要说还没有其他人意识到的事情。\n投资者也是如此。公开市场投资者仅仅正确预测公司将如何表现是不够的。如果很多其他人做出相同的预测，股票价格将已经反映它，没有赚钱的空间。唯一有价值的见解是大多数其他投资者不分享的见解。\n你在创业公司创始人身上也看到这种模式。你不想创业去做每个人都同意是好主意的事情，或者已经有其他公司在做它。你必须做一件对大多数其他人来说听起来像坏主意，但你知道不是的事情——比如为几千个爱好者使用的微型计算机编写软件，或者创办一个让人们可以在陌生人地板上租充气床垫的网站。\n散文家也是如此。告诉人们他们已经知道的事情的散文会很无聊。你必须告诉他们一些新东西。\n但这种模式并不普遍。事实上，它对大多数类型的工作不成立。在大多数类型的工作中——例如，成为一名管理员——你只需要前一半。你只需要是正确的。其他人都不错并不是必需的。\n在大多数类型的工作中都有一些新意的空间，但在实践中，在必须独立思考的工作类型和不必须的工作类型之间有相当明显的区别。\n我希望有人在我小时候告诉我这种区别，因为这是在决定你想做什么类型工作时需要思考的最重要事情之一。你想做那种只能通过与每个人不同思考才能赢的工作吗？我怀疑大多数人的潜意识会在他们的意识有机会之前回答那个问题。我知道我的会。\n独立思考似乎更多是天生的而不是后天培养的。这意味着如果你选择了错误类型的工作，你将会不快乐。如果你天生独立思考，你会发现成为一名中层管理者很令人沮丧。如果你天生从众，如果你尝试做原创研究，你将会逆风而上。\n然而，这里的一个困难是，人们经常误解自己在从众到独立思考的光谱上的位置。从众的人不喜欢认为自己是从众的。而且，无论如何，他们真的感觉自己对一切都有自己的想法。他们的信念与同龄人的信念相同只是一个巧合。同时，独立思考的人常常没有意识到他们的想法与常规想法有多不同，至少在他们公开陈述它们之前。[1]\n到成年时，大多数人大致知道他们有多聪明（在解决预设问题的狭义能力上），因为他们不断地根据它被测试和排名。但学校通常忽视独立思考，除了他们试图压制它的程度。所以我们没有获得关于我们独立思考程度的任何相同类型的反馈。\n甚至可能有类似邓宁-克鲁格的现象在起作用，其中最从众的人自信他们是独立思考的，而真正独立思考的人担心他们可能不够独立思考。\n你能让自己更独立思考吗？我想是的。这种品质可能主要是天生的，但似乎有方法可以放大它，或者至少不压制它。\n最有效的技术之一是大多数书呆子无意中实践的：简单地更少知道常规信念是什么。如果你不知道你应该遵守什么，就很难成为从众者。但再次，可能这样的人已经是独立思考的。从众的人可能会因为不知道其他人想什么而感到焦虑，并更努力去寻找。\n你周围的人很重要。如果你被从众的人包围，这将限制你能表达的想法，而这反过来又将限制你有的想法。但如果你被独立思考的人包围，你将有相反的经历：听到其他人说令人惊讶的事情将鼓励你，并思考更多。\n因为独立思考的人发现被从众的人包围是不舒服的，一旦有机会，他们倾向于自我隔离。高中的问题在于他们还没有机会这样做。而且高中往往是一个向内看的小世界，其居民缺乏自信，这两者都放大了从众的力量。所以对独立思考的人来说，高中通常是一个糟糕的时期。但即使这里也有一些优势：它教会你避免什么。如果你后来发现自己在一个让你想\u0026quot;这像高中\u0026quot;的情况中，你知道你应该离开。[2]\n独立思考和从众的人被抛在一起的另一个地方是在成功的创业公司中。创始人和早期员工几乎总是独立思考的；否则创业公司不会成功。但从众的人在数量上大大超过独立思考的人，所以随着公司的发展，独立思考的原始精神不可避免地被稀释。除了公司开始变糟的明显问题外，这还导致了各种各样的问题。最奇怪的问题之一是，创始人发现自己能够与其他公司的创始人比与自己的员工更自由地交谈。[3]\n幸运的是，你不必把所有时间都花在独立思考的人身上。有一两个你可以定期交谈的就足够了。一旦你找到他们，他们通常和你一样渴望交谈；他们也需要你。虽然大学不再拥有它们过去对教育的垄断，但好大学仍然是遇到独立思考的人的绝佳方式。大多数学生仍将从众，但你至少会发现独立思考的小群体，而不是你在高中可能发现的接近零。\n另一种方法是反方向：除了培养一小群独立思考的朋友外，尝试尽可能多地遇到不同类型的人。如果你有其他几个同龄人群体，这将减少你直接同龄人的影响。而且如果你是几个不同世界的一部分，你经常可以从一个向另一个导入想法。\n但我说不同类型的人，不是指人口统计上不同的。为了这个技术有 …"
  },{
    "title": "如何筹集资金",
    "url": "/paul_graham/essays_zh/fr/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何筹集资金 想创业吗？获得Y Combinator的资助。\n2013年9月\n大多数筹集资金的创业公司不止一次。典型的轨迹可能是（1）从Y Combinator或个人天使投资者那里获得数万美元启动，（2）筹集几十万到几百万来建立公司，然后（3）一旦公司明显成功，再进行一轮或多轮融资以加速增长。\n实际情况可能更加混乱。有些公司在第二阶段筹集两次资金。其他公司跳过第一阶段直接进入第二阶段。在Y Combinator，我们遇到越来越多已经筹集数十万美元的公司。但三阶段路径至少是单个创业公司路径会围绕的标准。\n本文主要关注第二阶段的融资。这是我们在Demo日展示的创业公司正在做的融资类型，本文也是我们给他们的建议。\n力量 融资在两种意义上都是困难的：像举重一样困难，也像解谜题一样困难。像举重一样困难是因为要说服人们拿出大笔资金本身就很困难。这个问题是不可简化的；它本应该困难。但许多其他困难都可以消除。融资之所以看起来像谜题，只是因为对大多数创始人来说这是一个陌生的世界，我希望通过提供一个路线图来解决这个问题。\n对创始人来说，投资者的行为常常是模糊的——部分原因是他们的动机模糊，部分原因是他们故意误导你。投资者的误导方式与缺乏经验创始人的美好愿望结合得非常糟糕。在YC，我们总是警告创始人这种危险，投资者可能对YC创业公司比对其他公司更加谨慎，即使如此，我们仍然看到这两个易变因素结合时产生的一系列爆炸。[1]\n如果你是一个缺乏经验的创始人，生存的唯一方法是给自己施加外部约束。你不能相信你的直觉。我要在这里给你一套规则，如果有什么能帮你度过这个过程的话，就是它了。在某些时刻你会想忽略它们。所以零号规则是：这些规则的存在是有原因的。如果没有强大的力量把你推向另一个方向，你就不需要一条规则来让你朝着某个方向前进。\n作用在你身上的力量的最终来源是作用在投资者身上的力量。投资者夹在两种恐惧之间：投资失败的创业公司的恐惧，和错过成功的创业公司的恐惧。所有这些恐惧的原因恰恰是创业公司成为如此有吸引力的投资的原因：成功的创业公司增长非常快。但这种快速增长意味着投资者不能等待。如果你等到一个创业公司明显成功时，那就太晚了。要获得真正的高回报，你必须在还不清楚创业公司会如何发展时就投资他们。但这反过来又让投资者担心他们即将投资一个失败的项目。而他们经常确实如此。\n如果可能的话，投资者想做的就是等待。当一个创业公司只有几个月大时，过去的每一周都会给你提供更多关于它们的信息。但如果等得太久，其他投资者可能会抢走交易。当然，所有其他投资者都受到同样的力量影响。所以往往会发生的是，他们都尽可能等待，然后当一些人行动时，其他人也不得不行动。\n除非你想要资金而且资金也想要你，否则不要融资。 成功创业公司中如此高比例的公司融资，以至于融资似乎是创业公司的定义特征之一。实际上不是。快速增长才是使公司成为创业公司的原因。大多数处于快速增长位置的公司发现（a）外部资金有助于他们更快增长，（b）他们的增长潜力使他们很容易吸引这种资金。对于一个成功的创业公司来说，（a）和（b）都成立是如此普遍，以至于实际上所有公司都接受外部资金。但可能有这样的情况：创业公司要么不想更快增长，要么外部资金不会帮助它们增长，如果你是其中之一，不要融资。\n另一个不融资的时机是你无法融资的时候。如果你在能够说服投资者之前尝试融资，你不仅会浪费时间，还会在你和那些投资者之间烧毁你的声誉。\n处于融资模式或非融资模式。 融资最让创始人惊讶的事情之一是它是如此分散注意力。当你开始融资时，其他一切都会停止。问题不是融资消耗的时间，而是它成为你头脑中最主要的事情。创业公司无法长时间承受这种分散注意力。早期创业公司之所以增长，主要是因为创始人使其增长，如果创始人分心，增长通常会急剧下降。\n因为融资如此分散注意力，创业公司应该要么处于融资模式，要么不处于融资模式。当你决定融资时，你应该全神贯注于它，这样你就可以快速完成并回到工作中。[2]\n当你不处于融资模式时，你可以从投资者那里接受资金。你只是不能在这方面花费任何注意力。有两件事需要注意力：说服投资者，以及与他们谈判。所以当你不处于融资模式时，只有当投资者不需要说服，并且愿意以你无需谈判就接受的条款投资时，你才应该接受他们的资金。例如，如果一家有声誉的投资者愿意使用标准文件以可转换票据投资，该票据要么没有上限，要么有良好的估值上限，你可以在不考虑的情况下接受。[3] 条款将是你在下一轮股权融资中确定的条款。\u0026ldquo;不需要说服\u0026quot;就是这个意思：零时间与投资者会面或为他们准备材料。如果投资者说他们准备好投资，但需要你过来开一次会面见一些合伙人，如果你不处于融资模式，就说不，因为那就是融资。[4] 礼貌地告诉他们；告诉他们你现在专注于公司，当你融资时你会回复他们；但不要滑下斜坡。\n投资者会试图在你不想融资时引诱你融资。如果他们能做到，这对他们来说很好，因为他们可以借此在其他人之前获得机会。他们会发邮件说他们想要见你了解更多关于你的情况。如果你收到VC公司合伙人的冷邮件，即使你处于融资模式也不应该见面。交易不会那样发生。[5] 但即使你收到合伙人的邮件，你也应该推迟见面直到你处于融资模式。他们可能说他们只是想见面聊天，但投资者从来不只是想见面聊天。如果他们喜欢你怎么办？如果他们开始谈论给你钱怎么办？你能够抵制进行那种对话吗？除非你在融资方面经验丰富，能够与投资者保持随意的对话，否则更安全的方式是告诉他们你以后，当你融资时会很乐意，但现在你需要专注于公司。[6]\n在第二阶段成功融资的公司有时在离开融资模式后会增加一些投资者。这没关系；如果融资顺利，你将能够花费时间说服他们或就条款进行谈判。\n获得投资者的介绍。 在与投资者交谈之前，你必须被介绍给他们。如果你在Demo日展示，你将同时被介绍给一大批投资者。但即使如此，你也应该用你自己收集的介绍来补充这些。\n你必须被介绍吗？在第二阶段，是的。一些投资者会让你给他们发商业计划书，但你可以从他们网站的组织方式看出他们并不真正希望创业公司直接接近他们。\n介绍的有效性差异很大。最好的介绍类型是刚刚投资你的知名投资者。所以当你让投资者承诺时，请他们介绍你给其他他们尊重的投资者。[7] 第二好的介绍类型是他们资助的公司的创始人。你也可以从创业社区的其他人那里获得介绍，如律师和记者。\n现在有像AngelList、FundersClub和WeFunder这样的网站可以介绍你给投资者。我们建议创业公司将其视为辅助资金来源。首先从你自己获得的领导者那里筹集资金。那些平均而言会是更好的投资者。此外，一旦你能说你已经从一些知名投资者那里筹集了一些资金，你将更容易在这些网站上筹集资金。\n在听到是的之前，听到的是不。 把投资者当作说不，直到他们毫不含糊地说是，以 definite offer with no contingencies 的形式。\n我之前提到过，如果可能的话，投资者倾向于等待。对创始人来说特别危险的是他们等待的方式。基本上，他们引导你。他们似乎就要投资了，直到他们说不是的那一刻。如果他们甚至说不的话。一些更差的投资者实际上从不说不；他们只是停止回复你的邮件。他们希望这种方式获得投资的选择权。如果他们后来决定想要投资——通常是因为他们听说你是一个热门交易——他们可以假装只是分心了，然后重新开始对话，好像他们本来就要投资一样。[8]\n这不是投资者会做的最糟糕的事情。有些人会用听起来像他们承诺的语言，但实际上并不承诺他们。而美好愿望的创始人很高兴与他们妥协。[9]\n幸运的是，下一个规则是中和这种行为的一种策略。但要起作用，取决于你不被听起来像是的不是所欺骗。创始人经常被误导/误解这一点，所以我们设计了一个协议来解决这个问题。如果你相信投资者已经承诺，让他们确认。如果你和他们对现实有不同的看法，无论差异的来源是他们的不可靠性还是你的美好愿望，书面确认承诺的前景就会暴露出来。在他们确认之前，把他们的当作不对待。\n进行期望值加权的广度优先搜索。 当你与投资者交谈时，你的模式应该是期望值加权的广度优先搜索。你应该总是与投资者并行交谈，而不是串行。你负担不起串行与投资者交谈的时间，而且如果你一次只与一个投资者交谈，他们就没有其他投资者的压力来促使他们行动。但你不应该对每个投资者都给予同样的关注，因为一些是比其他更有前途的前景。最佳解决方案是与所有潜在投资者并行交谈，但给更有前途的投资者更高的优先级。[10]\n期望值 = 投资者说是的可能性，乘以他们如果说是会有多好。例如，一个著名的投资者会投资很多，但很难说服，可能和一个不出名的天使投资者有相同的期望值，后者不会投资很多，但很容易说服。而一个只会投资少量资金，却需要多次会面才能决定的天使投资者，期望值很低。最后会见这样的投资者，如果有的话。[11]\n进行期望值加权的广度优先搜索将使你免受那些从未明确说不但只是逐渐消失的投资者的影响，因为你也会以相同的速度逐渐远离他们。它保护你免受那些不可靠的投资者的影响，就像分布式算法保护你免受故障处理器的影响一样。如果某个投资者不回复你的邮件，或者想要很多会议但不进展到给你offer，你会自动减少对他们的关注。但你必须在分配概率方面自律。你不能让多想要一个投资者影响你对他们多想要你的估计。\n知道你的立场。 当投资者习惯性地看起来比实际情况更积极时，你如何判断你与一个投资者相处得如何？通过看他们的行动而不是言语。每个投资者都有一定的轨道，他们需要从第一次对话到汇款资金，你应该始终知道这个轨道包括什么，你在哪里，以及你前进的速度有多快。\n永远不要在与投资者的会面结束时离开而不问接下来会发生什么。他们还需要什么才能决定？他们需要再次与你会面吗？谈论什么？多久？他们需要在内部做什么，比如与他们的合伙人交谈，或调查某些问题？他们预计需要多长时间？不要太pushy，但要知道你的立场。如果投资者模糊或抗拒回答这些问题，假设最坏的情况；真正对你的感兴趣的投资者通常会乐于谈论在现在和汇款资金之间必须发生的事情，因为他们已经在头脑中思考那个过程了。[12]\n如果你在谈判方面经验丰富，你已经知道如何问这些问题。[13] 如果不是，在这种情况下你可以使用一个技巧。投资者知道你在融资方面缺乏经验。在这方面缺乏经验不会让你没有吸引力。如果你创办科技创业公司，在技术方面是新手会，但在融资方面是新手不会。Larry和Sergey在融资方面是新手。所以你可以只是坦白说你在这一点上缺乏经验，并问他们的过程如何，你在哪个阶段。[14]\n获得第一个承诺。 大多数投资者对你意见的最大因素是其他投资者对你的意见。一旦你开始让投资者承诺，让更多投资者承诺就变得越来越容易。但硬币的另一面是，获得第一个承诺往往很困难。\n获得第一个实质性的offer可能是融资总难度的一半。什么算作实质性offer取决于来自谁以及金额是多少。来自朋友和家人的资金通常不算，无论多少。但如果你从一家知名的VC公司或天使投资者那里获得5万美元，这通常足以让事情开始滚动。[15]\n关闭承诺的资金。 钱在银行之前不算交易。我经常听到缺乏经验的创始人说\u0026quot;我们已经筹集了80万美元\u0026rdquo;，结果发现到目前为止零美元在银行中。记住折磨投资者的双重恐惧？让他们过早跳起来的错失恐惧，以及导致跳到粪便上的恐惧？这是一个人们特别容易出现买方懊悔的市场。它也为他们提供了很多借口来满足这种懊悔。公开市场像鞭子一样鞭打创业投资。如果中国经济明天爆炸，所有赌注都取消。但对个别创业公司来说也有很多惊喜，它们往往集中在融资周围。明天一个大的竞争对手可能出现，或者你可能会收到停止令，或者你的联合创始人可能会辞职。[16]\n即使一天的延迟也可能带来导致投资者改变主意的信息。所以当某人承诺时，拿钱。知道你的立场并不在他们说会投资时结束。在他们说是之后，知道拿钱的时间表，然后看管这个过程直到它发生。机构投资者有负责汇款的人，但你可能需要亲自追逐天使投资者来收集支票。\n缺乏经验的投资者最有可能出现买方懊悔。经验丰富的投资者已经学会把说是视为从跳水板上跳水，他们也有更多的品牌要维护。但我听说过即使是顶级VC公司也会违背交易的情况。\n避免不\u0026quot;领投\u0026quot;的投资者。 由于获得第一个offer是融资的大部分困难，这应该成为你开始时计算期望值的一部分。你不仅要估计投资者说是的概率，还要估计他们会第一个说是的概率，而后者并不只是前者的恒定分数。一些投资者以快速决定而闻名，这些在早期特别有价值。\n相反，一个只有其他投资者已经投资时才会投资的投资者最初是毫无价值的。虽然大多数投资者受到其他投资者对你感兴趣程度的影响，但有些人有明确的政策，只在其他投资者已经投资后才投资。你可以识别这种可鄙的投资者亚种，因为他们经常谈论\u0026quot;领投者\u0026quot;。他们说他们不领投，或者一旦你有领投者他们就会投资。有时他们甚至声称愿意自己领投，意思是他们不会投资，直到你从其他投资者那里获得$x。（如果\u0026quot;领投\u0026quot;的意思是他们将单方面投资，此外还会帮助你筹集更多，那就很好。当它们用这个术语的意思是除非你能在其他地方筹集更多，否则它们不会投资，那就很糟糕。）[17]\n\u0026ldquo;领投\u0026quot;这个术语从哪里来？直到几年前，在第二阶段筹集资金的创业公司通常会进行股权融资，几个投资者同时使用相同的文件投资。你与一个\u0026quot;领投\u0026quot;投资者谈判条款，然后所有其他人都签署相同的文件，所有资金在收盘时变更。\nA轮融资仍然是这样，但现在大多数A轮融资之前的融资情况不同了。现在在A轮之前很少有实际的轮次，或领投者。现在创业公司只是一次一个地从投资者那里筹集资金，直到他们觉得足够了。\n既然不再有领投者，为什么投资者使用这个术语？因为这是他们真正意思的更合法的说法。他们的真正意思是他们对你的兴趣是其他投资者对你的兴趣的函数。即所有平庸投资者的光谱特征。但当用领投者的术语来表达时，听起来好像他们的行为有一些结构性因此是合法的。\n",
    "description": "",
    "tags": ["融资","投资者","创业公司","资金","YC"],
    "categories": [],
    "content": "→ English Version\n如何筹集资金 想创业吗？获得Y Combinator的资助。\n2013年9月\n大多数筹集资金的创业公司不止一次。典型的轨迹可能是（1）从Y Combinator或个人天使投资者那里获得数万美元启动，（2）筹集几十万到几百万来建立公司，然后（3）一旦公司明显成功，再进行一轮或多轮融资以加速增长。\n实际情况可能更加混乱。有些公司在第二阶段筹集两次资金。其他公司跳过第一阶段直接进入第二阶段。在Y Combinator，我们遇到越来越多已经筹集数十万美元的公司。但三阶段路径至少是单个创业公司路径会围绕的标准。\n本文主要关注第二阶段的融资。这是我们在Demo日展示的创业公司正在做的融资类型，本文也是我们给他们的建议。\n力量 融资在两种意义上都是困难的：像举重一样困难，也像解谜题一样困难。像举重一样困难是因为要说服人们拿出大笔资金本身就很困难。这个问题是不可简化的；它本应该困难。但许多其他困难都可以消除。融资之所以看起来像谜题，只是因为对大多数创始人来说这是一个陌生的世界，我希望通过提供一个路线图来解决这个问题。\n对创始人来说，投资者的行为常常是模糊的——部分原因是他们的动机模糊，部分原因是他们故意误导你。投资者的误导方式与缺乏经验创始人的美好愿望结合得非常糟糕。在YC，我们总是警告创始人这种危险，投资者可能对YC创业公司比对其他公司更加谨慎，即使如此，我们仍然看到这两个易变因素结合时产生的一系列爆炸。[1]\n如果你是一个缺乏经验的创始人，生存的唯一方法是给自己施加外部约束。你不能相信你的直觉。我要在这里给你一套规则，如果有什么能帮你度过这个过程的话，就是它了。在某些时刻你会想忽略它们。所以零号规则是：这些规则的存在是有原因的。如果没有强大的力量把你推向另一个方向，你就不需要一条规则来让你朝着某个方向前进。\n作用在你身上的力量的最终来源是作用在投资者身上的力量。投资者夹在两种恐惧之间：投资失败的创业公司的恐惧，和错过成功的创业公司的恐惧。所有这些恐惧的原因恰恰是创业公司成为如此有吸引力的投资的原因：成功的创业公司增长非常快。但这种快速增长意味着投资者不能等待。如果你等到一个创业公司明显成功时，那就太晚了。要获得真正的高回报，你必须在还不清楚创业公司会如何发展时就投资他们。但这反过来又让投资者担心他们即将投资一个失败的项目。而他们经常确实如此。\n如果可能的话，投资者想做的就是等待。当一个创业公司只有几个月大时，过去的每一周都会给你提供更多关于它们的信息。但如果等得太久，其他投资者可能会抢走交易。当然，所有其他投资者都受到同样的力量影响。所以往往会发生的是，他们都尽可能等待，然后当一些人行动时，其他人也不得不行动。\n除非你想要资金而且资金也想要你，否则不要融资。 成功创业公司中如此高比例的公司融资，以至于融资似乎是创业公司的定义特征之一。实际上不是。快速增长才是使公司成为创业公司的原因。大多数处于快速增长位置的公司发现（a）外部资金有助于他们更快增长，（b）他们的增长潜力使他们很容易吸引这种资金。对于一个成功的创业公司来说，（a）和（b）都成立是如此普遍，以至于实际上所有公司都接受外部资金。但可能有这样的情况：创业公司要么不想更快增长，要么外部资金不会帮助它们增长，如果你是其中之一，不要融资。\n另一个不融资的时机是你无法融资的时候。如果你在能够说服投资者之前尝试融资，你不仅会浪费时间，还会在你和那些投资者之间烧毁你的声誉。\n处于融资模式或非融资模式。 融资最让创始人惊讶的事情之一是它是如此分散注意力。当你开始融资时，其他一切都会停止。问题不是融资消耗的时间，而是它成为你头脑中最主要的事情。创业公司无法长时间承受这种分散注意力。早期创业公司之所以增长，主要是因为创始人使其增长，如果创始人分心，增长通常会急剧下降。\n因为融资如此分散注意力，创业公司应该要么处于融资模式，要么不处于融资模式。当你决定融资时，你应该全神贯注于它，这样你就可以快速完成并回到工作中。[2]\n当你不处于融资模式时，你可以从投资者那里接受资金。你只是不能在这方面花费任何注意力。有两件事需要注意力：说服投资者，以及与他们谈判。所以当你不处于融资模式时，只有当投资者不需要说服，并且愿意以你无需谈判就接受的条款投资时，你才应该接受他们的资金。例如，如果一家有声誉的投资者愿意使用标准文件以可转换票据投资，该票据要么没有上限，要么有良好的估值上限，你可以在不考虑的情况下接受。[3] 条款将是你在下一轮股权融资中确定的条款。\u0026ldquo;不需要说服\u0026quot;就是这个意思：零时间与投资者会面或为他们准备材料。如果投资者说他们准备好投资，但需要你过来开一次会面见一些合伙人，如果你不处于融资模式，就说不，因为那就是融资。[4] 礼貌地告诉他们；告诉他们你现 …"
  },{
    "title": "如何获得创业想法",
    "url": "/paul_graham/essays_zh/startupideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何获得创业想法 2012年11月\n获得创业想法的方法不是试图思考创业想法。而是寻找问题，最好是你自己遇到的问题。\n最好的创业想法往往有三个共同点：它们是创始人自己想要的东西，他们自己可以构建的东西，而且很少有人意识到值得做。微软、苹果、雅虎、谷歌和脸书都是以这种方式开始的。\n问题 为什么解决你遇到的问题如此重要？除其他原因外，它确保问题确实存在。说你应该只解决存在的问题，这听起来很明显。然而，迄今为止创业公司最常见的错误是解决没有人存在的问题。\n我自己也犯了这样的错误。1995年，我创办了一家将艺术画廊在线的公司。但画廊不想上线。这不是艺术业务的运作方式。那我为什么花了6个月时间在这个愚蠢的想法上？因为我没有关注用户。我发明了一个与现实不符的世界模型，并在此基础上工作。直到我试图说服用户为我们构建的东西付费时，我才注意到我的模型是错误的。即使那时，我也花了令人尴尬的长时间才明白。我对我世界模型很执着，而且我在软件上花了很多时间。他们必须想要它！\n为什么这么多创始人构建没有人想要的东西？因为他们从试图思考创业想法开始。这种方法双重危险：它不仅产生很少的好想法；它产生听起来足够合理以至于骗你为之工作的坏想法。\n在YC，我们称这些为\u0026quot;编造的\u0026quot;或\u0026quot;情景喜剧\u0026quot;创业想法。想象一个电视节目中的角色开始创业。编剧必须为它发明一些要做的事情。但想出好的创业想法很难。这不是你可以随随便便做的事情。所以（除非他们极其幸运）编剧会想出一个听起来合理但实际上很坏的想法。\n例如，一个宠物主人社交网络。听起来并不明显错误。数百万人有宠物。通常他们非常关心宠物并花很多钱在他们身上。当然，这些人中会有许多人喜欢一个可以与其他宠物主人交谈的网站。也许不是所有人，但如果只有2%或3%是常客，你可能拥有数百万用户。你可以为他们提供定向广告，也许为高级功能收费。[1]\n这种想法的危险在于，当你向你养宠物的朋友征求意见时，他们不会说\u0026quot;我永远不会用这个。\u0026ldquo;他们说\u0026quot;是的，也许我能看到使用类似的东西。\u0026ldquo;即使当创业公司推出时，它对很多人来说听起来仍然合理。他们自己不想使用它，至少现在不想，但他们可以想象其他人想要它。将这种反应汇总到整个人口，你就拥有零用户。[2]\n井 当创业公司推出时，必须至少有一些用户真正需要他们正在制造的东西——不仅仅是那些可以想象有一天会使用它的人，而是迫切需要它的人。通常这个初始用户群体很小，原因很简单：如果有大量人们迫切需要并且可以用创业公司通常投入版本一的努力量构建的东西，它可能已经存在了。这意味着你必须在一个维度上妥协：你要么构建大量人想要一点的东西，要么构建少量人想要很多的东西。选择后者。并非所有这种类型的想法都是好的创业想法，但几乎所有好的创业想法都是这种类型。\n想象一个图表，其x轴代表所有可能想要你正在制造的东西的人，y轴代表他们想要它的程度。如果你反转y轴的比例，你可以将公司想象成坑洞。谷歌是一个巨大的陨石坑：数亿人使用它，而且他们非常需要它。一个刚刚起步的创业公司不能期望挖掘出那么大的体积。所以你对你开始时的坑洞形状有两种选择。你可以挖一个宽阔但浅的洞，或者一个狭窄而深的洞，像井一样。\n编造的创业想法通常是第一种类型。许多人对宠物主人社交网络有轻微兴趣。\n几乎所有好的创业想法都是第二种类型。微软在制作Altair Basic时是一口井。只有几千个Altair所有者，但没有这个软件他们在用机器语言编程。三十年后，脸书具有相同的形状。他们的第一个网站专门针对哈佛学生，只有几千人，但那几千个用户非常想要它。\n当你有创业想法时，问自己：谁现在想要这个？谁如此想要它以至于即使是一个他们从未听说过的两人创业公司制造的糟糕版本一，他们也会使用？如果你不能回答这个问题，这个想法可能很坏。[3]\n你本身并不需要井的狭窄性。你需要的是深度；你在优化深度（和速度）时获得狭窄性作为副产品但你几乎总是会得到它。在实践中，深度和狭窄性之间的联系如此强烈，以至于当你知道一个想法会对特定群体或类型的用户有强烈吸引力时，这是一个好迹象。\n但是，虽然形状像井的需求几乎是好创业想法的必要条件，但它不是充分条件。如果马克·扎克伯格构建的东西只能吸引哈佛学生，那不会是一个好创业想法。脸书是一个好想法，因为它从一个有快速出路的小市场开始。大学足够相似，如果你构建一个在哈佛有效的脸书，它将在任何大学都有效。所以你迅速在所有大学中传播。一旦你拥有所有大学生，你只需让其他人加入就能得到其他人。\n微软也是如此：Altair的Basic；其他机器的Basic；Basic之外的其他语言；操作系统；应用程序；IPO。\n自我 你如何判断一个想法是否有出路？你如何判断某东西是巨型公司的萌芽，还是只是一个利基产品？通常你无法判断。Airbnb的创始人起初没有意识到他们正在挖掘的市场有多大。最初他们有一个更狭窄的想法。他们打算让主人在会议期间出租他们地板上的空间。他们没有预见到这个想法的扩展；它是逐渐强加给他们的。他们起初只知道他们发现了重要东西。这可能和比尔·盖茨或马克·扎克伯格起初知道的一样多。\n偶尔，从最初利基市场有出路从一开始就很明显。有时我可以看到一个不明显的出路；这是我们在YC的专长之一。但无论你有多少经验，这种做法的效果都是有限的。了解关于最初想法出路的最重要的元事实是这些很难看到。\n所以如果你无法预测一个想法是否有出路，你如何在想法之间选择？事实令人失望但有趣：如果你是合适类型的人，你有合适的直觉。如果你处于一个快速变化领域的领先边缘，当你有直觉认为某事值得做时，你更可能是对的。\n在《禅与摩托车维修艺术》中，罗伯特·波西格说：你想知道如何画一幅完美的画吗？很容易。让自己变得完美，然后自然地绘画。我从高中读到这篇文章后就一直在思考它。我不确定他的建议对绘画具体有多大用处，但它很适合这种情况。从经验上看，拥有好创业想法的方法是成为拥有它们的那种人。\n处于一个领域的领先边缘并不意味着你必须成为推动它前进的人之一。你也可以作为用户处于领先边缘。Facebook对马克·扎克伯格来说似乎是个好主意，并不是因为他是个程序员，而是因为他如此频繁地使用电脑。如果你在2004年问大多数40岁的人是否愿意在互联网上半公开地发布他们的生活，他们对这个想法会感到恐惧。但马克已经生活在线；对他来说这似乎很自然。\n保罗·布赫海特说，处于快速变化领域领先边缘的人\u0026quot;生活在未来中\u0026rdquo;。将其与波西格结合，你得到：生活在未来中，然后构建缺失的东西。这描述了许多甚至大多数最大创业公司的起步方式。苹果、雅虎、谷歌和脸书最初甚至不应该成为公司。它们从创始人构建的东西中成长出来，因为世界上似乎有差距。\n如果你看看成功创始人如何获得他们的想法，通常是一些外部刺激击中准备好的心灵的结果。比尔·盖茨和保罗·艾伦听到Altair并想\u0026quot;我敢打赌我们可以为它编写一个Basic解释器。\u0026ldquo;德鲁·休斯顿意识到他忘了USB记忆棒并想\u0026quot;我真的需要让我的文件在线生活。\u0026ldquo;很多人听说过Altair。很多人忘了USB记忆棒。这些刺激导致那些创始人创办公司的原因是他们的经验使他们准备好注意到它们代表的机会。\n你想用创业想法来使用的动词不是\u0026quot;想出\u0026quot;而是\u0026quot;注意到\u0026rdquo;。在YC，我们称那些从创始人自己经历中自然成长出来的想法为\u0026quot;有机\u0026quot;创业想法。最成功的创业公司几乎都是以这种方式开始的。\n这可能不是你想听到的。你可能期待获得创业想法的秘诀，而我却告诉你关键是拥有以正确方式准备的心灵。但尽管令人失望，这是事实。而且这是一种秘诀，只是在最坏情况下需要一年而不是一个周末。\n如果你不处于某个快速变化领域的领先边缘，你可以达到那个位置。例如，任何相当聪明的人都可能在一年的时间里达到编程的边缘（例如构建移动应用程序）。由于成功的创业公司将消耗你至少3-5年的生命，一年的准备将是合理的投资。特别是如果你也在寻找联合创始人。[4]\n你不必学习编程才能处于快速变化领域的领先边缘。其他领域变化很快。但虽然学习黑客技术不是必要的，它在可预见的未来是充分的。正如马克·安德森所说，软件正在吞噬世界，而且这个趋势还有几十年的运行时间。\n知道如何黑客技术也意味着当你有想法时，你能够实现它们。这不是绝对必要的（杰夫·贝佐斯不能）但这是一个优势。当你考虑像将大学脸书在线这样的想法时，如果你不仅能想\u0026quot;那是个有趣的想法\u0026rdquo;，而是能想\u0026quot;那是个有趣的想法。我今晚会尝试构建一个初始版本\u0026rdquo;，这是一个很大的优势。当你既是程序员又是目标用户时更好，因为那样生成新版本并在用户上测试它们的循环可以在一个头脑内发生。\n注意 一旦你在某些方面生活在未来中，注意创业想法的方法就是寻找似乎缺失的东西。如果你真正处于快速变化领域的领先边缘，将会有些明显缺失的东西。不会明显的是它们是创业想法。所以如果你想找到创业想法，不要只打开\u0026quot;什么缺失？\u0026ldquo;的过滤器。还要关闭每个其他过滤器，特别是\u0026quot;这能成为大公司吗？\u0026ldquo;以后有足够的时间应用那个测试。但如果你一开始就在想那个，它可能不仅过滤掉许多好想法，还会导致你专注于坏想法。\n大多数缺失的东西需要一些时间才能看到。你几乎必须欺骗自己看到周围的想法。\n但你知道想法就在那里。这不是那种可能没有答案的问题。技术进步恰好在这一刻停止的可能性极小。你可以肯定人们将在未来几年构建让你思考\u0026quot;我在x之前做什么？\u0026ldquo;的东西。\n当这些问题得到解决时，它们在回想起来可能会显得非常明显。你需要做的是关闭通常阻止你看到它们的过滤器。最强大的只是理所当然地接受世界的当前状态。即使是我们中最激进开明的人大多数都这样做。如果你停下来质疑一切，你无法从床上走到前门。\n但如果你在寻找创业想法，你可以牺牲一些理所当然地接受现状的效率，并开始质疑事物。为什么你的收件箱溢出？因为你收到很多邮件，还是因为很难将邮件移出收件箱？为什么你收到这么多邮件？人们通过给你发邮件试图解决什么问题？有没有更好的方法来解决它们？为什么很难将邮件移出收件箱？为什么你在读过邮件后还保留它们？收件箱是那个的最佳工具吗？\n特别注意那些让你烦恼的事情。理所当然地接受现状的优势不仅是它使生活（局部上）更有效率，而且它使生活更可容忍。如果你知道我们将在未来50年得到但尚未拥有的所有东西，你会发现现在的生活相当受限，就像现在的人如果被送回50年前的时间机器中一样。当某事让你烦恼时，可能因为你生活在未来中。\n当你找到合适类型的问题时，你应该能够将其描述为明显的，至少对你来说。当我们开始Viaweb时，所有在线商店都是手工构建的，由网页设计师制作单个HTML页面。我们作为程序员很明显这些网站必须由软件生成。[5]\n这意味着，奇怪的是，想出创业想法是一个看到明显事物的问题。这表明这个过程多么奇怪：你试图看到明显的东西，然而你却没看到。\n由于你需要在这里做的是放松你自己的心灵，最好不要对问题进行太多的正面直接攻击——即坐下来试图想出想法。最好的计划可能只是保持一个后台进程运行，寻找似乎缺失的东西。致力于难题，主要由好奇心驱动，但有第二个自我在你肩上看着，注意差距和异常。[6]\n给自己一些时间。你对你将自己变成准备好的心灵的速度有很多控制，但对刺激击中它时激发想法的控制较少。如果比尔·盖茨和保罗·艾伦限制自己一个月内想出创业想法，如果他们选择Altair出现前的一个月怎么办？他们可能已经在不太有希望的想法上工作了。德鲁·休斯顿在Dropbox之前确实在一个不太有希望的想法上工作：一个SAT备考创业公司。但Dropbox是一个好得多的想法，无论是在绝对意义上，还是作为与他技能的匹配。[7]\n欺骗自己注意到想法的一个好方法是从事看起来会很酷的项目。如果你这样做，你自然会倾向于构建缺失的东西。构建已经存在的东西似乎不那么有趣。\n正如试图思考创业想法往往产生坏想法一样，从事可能被 dismiss为\u0026quot;玩具\u0026quot;的事情往往产生好想法。当某物被描述为玩具时，意味着它拥有一个想法需要的一切，除了重要性。它很酷；用户喜欢它；它只是不重要。但如果你生活在未来中，你构建了用户喜欢的酷东西，它可能比外界认为的更重要。当苹果和微软开始工作时，微计算机似乎像玩具。我足够老，记得那个时代；拥有自己微计算机的人的通常术语是\u0026quot;爱好者\u0026rdquo;。BackRub似乎是个不起眼的项目。脸书只是本科生相互 stalk 的方式。\n在YC，当我们遇到从事我们认为论坛上的万事通可能会 dismiss为玩具的事情的创业公司时，我们很兴奋。对我们来说，那是一个想法好的积极证据。\n如果你能采取长远观点（而且可以说你不能负担不起不采取），你可以将\u0026quot;生活在未来中并构建缺失的东西\u0026quot;变成更好的东西：生活在未来中并构建看起来有趣的东西。\n学校 这就是我建议大学生做的事情，而不是试图学习\u0026quot;企业家精神\u0026rdquo;。\u0026ldquo;企业家精神\u0026quot;是你通过做它学得最好的东西。最成功创始人的例子表明了这一点。你在大学应该花时间做的是将自己 ratchet 到未来中。大学是这样做的无与伦比的机会。牺牲解决创业公司难题的机会——成为能够拥有有机创业想法的那种人——而去学习容易的部分，多么浪费。特别是因为你甚至不会真正学到它，就像你在课堂上不会学到关于性一样。你学到的只是事物的词汇。\n领域的冲突是想法的一个特别丰富的来源。如果你对编程了解很多，并开始学习一些其他领域，你可能会看到软件可以解决的问题。事实上，你在另一个领域找到好问题的可能性是双倍的：(a) 那个领域的居民不像软件人那样可能已经用软件解决了他们的问题，(b) 由于你完全无知地进入新领域，你甚至不知道现状是什么以至于理所当然。\n所以如果你是计算机科学专业，想创办创业公司，与其上企业家精神课程，不如上遗传学等课程。或者更好的是，去生物技术公司工作。计算机科学专业学生通常在计算机硬件或软件公司获得暑期工作。但如果你想找到创业想法，在某些无关领域获得暑期工作可能会做得更好。[8]\n或者不要上任何额外的课程，只是构建东西。微软和脸书都在一月起步并非巧合。在哈佛，那是（或曾经是）阅读期，学生没有课要上，因为他们应该为期末考试学习。[9]\n但不要觉得你必须构建将成为创业公司的东西。那是过早优化。只是构建东西。最好和其他学生一起。不仅仅是课程使大学成为将自己 ratchet 到未来中的如此好的地方。你也被试图做同样事情的其他人包围。如果你与他们一起在项目上合作，你最终不仅产生有机想法，而且产生有机有机团队的有机想法——而且，从经验上看，这是最好的组合。\n小心研究。如果一个本科生写了些东西所有他的朋友都开始使用，它很可能代表一个好的创业想法。而博士论文极不可能。出于某种原因，一个项目越需要算作研究，它越不可能成为可以变成创业公司的东西。[10] 我认为原因是算作研究的想法子集如此狭窄，以至于满足该约束的项目不可能也满足解决用户问题的正交约束。而当学生（或教授）构建东西作为副项目时，他们自动倾向于解决用户的问题——也许甚至有额外的能量来自从研究约束中解放出来。\n竞争 因为好想法应该显得明显，当你有一个时你会倾向于觉得你迟了。不要让那阻止你。担心你迟了是好想法的标志之一。搜索网络十分钟通常就能解决这个问题。即使你发现其他人在从事同样的事情，你可能也不会太迟。创业公司被竞争对手杀死的情况极其罕见——如此罕见以至于你几乎可以忽略这种可能性。所以除非你发现一个拥有那种会阻止用户选择你的锁定效应的竞争对手，否则不要放弃这个想法。\n",
    "description": "",
    "tags": ["创业想法","创新","企业家精神","问题解决","创造力"],
    "categories": [],
    "content": "→ English Version\n如何获得创业想法 2012年11月\n获得创业想法的方法不是试图思考创业想法。而是寻找问题，最好是你自己遇到的问题。\n最好的创业想法往往有三个共同点：它们是创始人自己想要的东西，他们自己可以构建的东西，而且很少有人意识到值得做。微软、苹果、雅虎、谷歌和脸书都是以这种方式开始的。\n问题 为什么解决你遇到的问题如此重要？除其他原因外，它确保问题确实存在。说你应该只解决存在的问题，这听起来很明显。然而，迄今为止创业公司最常见的错误是解决没有人存在的问题。\n我自己也犯了这样的错误。1995年，我创办了一家将艺术画廊在线的公司。但画廊不想上线。这不是艺术业务的运作方式。那我为什么花了6个月时间在这个愚蠢的想法上？因为我没有关注用户。我发明了一个与现实不符的世界模型，并在此基础上工作。直到我试图说服用户为我们构建的东西付费时，我才注意到我的模型是错误的。即使那时，我也花了令人尴尬的长时间才明白。我对我世界模型很执着，而且我在软件上花了很多时间。他们必须想要它！\n为什么这么多创始人构建没有人想要的东西？因为他们从试图思考创业想法开始。这种方法双重危险：它不仅产生很少的好想法；它产生听起来足够合理以至于骗你为之工作的坏想法。\n在YC，我们称这些为\u0026quot;编造的\u0026quot;或\u0026quot;情景喜剧\u0026quot;创业想法。想象一个电视节目中的角色开始创业。编剧必须为它发明一些要做的事情。但想出好的创业想法很难。这不是你可以随随便便做的事情。所以（除非他们极其幸运）编剧会想出一个听起来合理但实际上很坏的想法。\n例如，一个宠物主人社交网络。听起来并不明显错误。数百万人有宠物。通常他们非常关心宠物并花很多钱在他们身上。当然，这些人中会有许多人喜欢一个可以与其他宠物主人交谈的网站。也许不是所有人，但如果只有2%或3%是常客，你可能拥有数百万用户。你可以为他们提供定向广告，也许为高级功能收费。[1]\n这种想法的危险在于，当你向你养宠物的朋友征求意见时，他们不会说\u0026quot;我永远不会用这个。\u0026ldquo;他们说\u0026quot;是的，也许我能看到使用类似的东西。\u0026ldquo;即使当创业公司推出时，它对很多人来说听起来仍然合理。他们自己不想使用它，至少现在不想，但他们可以想象其他人想要它。将这种反应汇总到整个人口，你就拥有零用户。[2]\n井 当创业公司推出时，必须至少有一些用户真正需要他们正在制造的东西——不仅仅是那些可以想象有一天会使用它的人，而是迫切需要它的人。通常这个初始用户群体很小，原因很简单：如果有大量人们迫切需要并且可以用创业公司通常投入版本一的努力量构建的东西，它可能已经存在了。这意味着你必须在一个维度上妥协：你要么构建大量人想要一点的东西，要么构建少量人想要很多的东西。选择后者。并非所有这种类型的想法都是好的创业想法，但几乎所有好的创业想法都是这种类型。\n想象一个图表，其x轴代表所有可能想要你正在制造的东西的人，y轴代表他们想要它的程度。如果你反转y轴的比例，你可以将公司想象成坑洞。谷歌是一个巨大的陨石坑：数亿人使用它，而且他们非常需要它。一个刚刚起步的创业公司不能期望挖掘出那么大的体积。所以你对你开始时的坑洞形状有两种选择。你可以挖一个宽阔但浅的洞，或者一个狭窄而深的洞，像井一样。\n编造的创业想法通常是第一种类型。许多人对宠物主人社交网络有轻微兴趣。\n几乎所有好的创业想法都是第二种类型。微软在制作Altair Basic时是一口井。只有几千个Altair所有者，但没有这个软件他们在用机器语言编程。三十年后，脸书具有相同的形状。他们的第一个网站专门针对哈佛学生，只有几千人，但那几千个用户非常想要它。\n当你有创业想法时，问自己：谁现在想要这个？谁如此想要它以至于即使是一个他们从未听说过的两人创业公司制造的糟糕版本一，他们也会使用？如果你不能回答这个问题，这个想法可能很坏。[3]\n你本身并不需要井的狭窄性。你需要的是深度；你在优化深度（和速度）时获得狭窄性作为副产品但你几乎总是会得到它。在实践中，深度和狭窄性之间的联系如此强烈，以至于当你知道一个想法会对特定群体或类型的用户有强烈吸引力时，这是一个好迹象。\n但是，虽然形状像井的需求几乎是好创业想法的必要条件，但它不是充分条件。如果马克·扎克伯格构建的东西只能吸引哈佛学生，那不会是一个好创业想法。脸书是一个好想法，因为它从一个有快速出路的小市场开始。大学足够相似，如果你构建一个在哈佛有效的脸书，它将在任何大学都有效。所以你迅速在所有大学中传播。一旦你拥有所有大学生，你只需让其他人加入就能得到其他人。\n微软也是如此：Altair的Basic；其他机器的Basic；Basic之外的其他语言；操作系统；应用程序；IPO。\n自我 你如何判断一个想法是否有出路？你如何判断某东西是巨 …"
  },{
    "title": "如何获得新想法",
    "url": "/paul_graham/essays_zh/getideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何获得新想法 2023年1月\n（有人将我的文章输入GPT制作了一个可以基于它们回答问题的东西，然后问它好想法从哪里来。答案还可以，但不是我会说的。这是我会说的。）\n获得新想法的方法是注意异常：什么看起来奇怪，或缺失，或坏了？你可以在日常生活中看到异常（很多单口喜剧都是基于这个），但寻找它们的最佳地方是在知识的前沿。\n知识分形增长。从远处看，它的边缘看起来很平滑，但当你学到足够接近其中一个时，你会注意到它充满了空白。这些空白看起来很明显；似乎无法解释没有人尝试过x或对y感到好奇。在最好的情况下，探索这样的空白会产生全新的分形芽。\n",
    "description": "",
    "tags": ["想法","创造力","创新","知识","学习"],
    "categories": [],
    "content": "→ English Version\n如何获得新想法 2023年1月\n（有人将我的文章输入GPT制作了一个可以基于它们回答问题的东西，然后问它好想法从哪里来。答案还可以，但不是我会说的。这是我会说的。）\n获得新想法的方法是注意异常：什么看起来奇怪，或缺失，或坏了？你可以在日常生活中看到异常（很多单口喜剧都是基于这个），但寻找它们的最佳地方是在知识的前沿。\n知识分形增长。从远处看，它的边缘看起来很平滑，但当你学到足够接近其中一个时，你会注意到它充满了空白。这些空白看起来很明显；似乎无法解释没有人尝试过x或对y感到好奇。在最好的情况下，探索这样的空白会产生全新的分形芽。\n"
  },{
    "title": "如何让匹兹堡成为创业中心",
    "url": "/paul_graham/essays_zh/pgh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何让匹兹堡成为创业中心 2016年4月\n（这是我在匹兹堡一个名为Opt412的活动上的演讲。其中大部分内容适用于其他城镇。但并非全部，因为正如我在演讲中所说，匹兹堡比大多数想成为创业中心的地方有一些重要优势。）\n要让匹兹堡成为像硅谷这样的创业中心需要什么？我对匹兹堡相当了解，因为我在这里长大，在门罗维尔。我也相当了解硅谷，因为那是我现在居住的地方。你能在这里建立起那种创业生态系统吗？\n当我同意在这里演讲时，我以为我无法给出一个非常乐观的演讲。我以为我会谈论匹兹堡可以做什么来成为创业中心，很大程度上是虚拟语气。相反，我要谈论的是匹兹堡能够做什么。\n改变我想法的是我在《纽约时报》美食版读到的一篇文章。标题是\u0026quot;匹兹堡青年驱动的食品繁荣\u0026quot;。对大多数人来说，这听起来可能不有趣，更不用说与创业相关了。但读到那个标题让我感到非常振奋。如果我刻意挑选，我想不出一个更有希望的标题。当我读到文章时，我变得更加兴奋。它说\u0026quot;25到29岁的人现在占所有居民的7.6%，比十年前的7%有所上升。\u0026ldquo;哇，我想，匹兹堡可能是下一个波特兰。它可能成为所有二十多岁的人都想去生活的地方。\n几天前我到这里时，我能感觉到不同。我从1968年到1984年住在这里。当时我没有意识到，但在这整个期间，城市都在自由落体。除了各地都发生的向郊区迁移外，钢铁和核工业都在消亡。天啊，现在情况大不相同了。不仅仅是市中心看起来繁荣得多。这里有一种我小时候没有的活力。\n我小时候，这是年轻人离开的地方。现在是吸引他们的地方。\n这与创业有什么关系？创业公司是由人组成的，而典型创业公司中的人的平均年龄正好在25到29岁之间。\n我已经看到一个城市拥有这些人有多么强大。五年前，他们把硅谷的重心从半岛转移到旧金山。谷歌和Facebook在半岛上，但下一代的大赢家都在旧金山。重心转移的原因是人才战争，尤其是程序员方面。大多数25到29岁的人想住在城市，而不是无聊的郊区。所以无论他们喜欢与否，创始人都知道他们必须在城市。我认识多个创始人，他们本来更喜欢住在硅谷 proper，但他们强迫自己搬到旧金山，因为他们知道否则会输掉人才战争。\n因此，成为二十多岁人的磁石是一件非常有希望的事情。很难想象一个地方能成为创业中心却不具备这个特质。当我读到关于25到29岁人群比例增加的统计数据时，我感到的兴奋完全和看到创业公司的图表开始从x轴向上攀升时一样。\n全国25到29岁人群的比例是6.8%。这意味着你领先0.8%。人口是306,000，所以我们谈论的是约2500人的过剩。这是一个小镇的人口，而这还只是过剩。所以你已经有了一个立足点。现在你只需要扩展它。\n虽然\u0026quot;青年驱动的食品繁荣\u0026quot;可能听起来轻浮，但它绝非如此。餐厅和咖啡馆是城市个性的重要组成部分。想象走在巴黎的街道上。你走过什么？小餐厅和咖啡馆。想象开车穿过一些令人沮丧的随机远郊。你开车经过什么？星巴克、麦当劳和必胜客。正如格特鲁德·斯坦因所说，那里没有那里。你可以在任何地方。\n这些独立的餐厅和咖啡馆不仅仅是喂养人们。它们让这里有了这里。\n所以这是我第一个具体建议，将匹兹堡变成下一个硅谷：尽你所能鼓励这种青年驱动的食品繁荣。城市能做什么？把开办这些小餐厅和咖啡馆的人当作你的用户，去问他们想要什么。我至少可以猜到他们可能想要的一件事：快速的许可流程。旧金山在这方面给你留下了大量超越它们的空间。\n我知道餐厅不是主要推动力。主要推动力，正如《纽约时报》文章所说，是便宜的住房。这是一个很大的优势。但\u0026quot;便宜住房\u0026quot;这个短语有点误导。有很多更便宜的地方。匹兹堡的特殊之处不在于它便宜，而在于它是一个你真正想要生活的便宜地方。\n部分原因在于建筑本身。我很久以前就意识到，当我还是一个贫穷的二十多岁年轻人时，最好的交易是曾经富有然后变得贫穷的地方。如果一个地方一直富有，它很好但太昂贵。如果一个地方一直贫穷，它便宜但严酷。但如果一个地方曾经富有然后变得贫穷，你可以找到便宜的宫殿。这就是吸引人们来这里的原因。一百年前匹兹堡富有时，住在这里的人建造了大型坚固的建筑。不一定总是最好的品味，但绝对坚固。所以这是成为创业中心的另一个建议：不要摧毁吸引人们来这里的老建筑。当城市正在复苏时，就像现在的匹兹堡，开发商竞相拆除老建筑。不要让这种情况发生。专注于历史保护。大型房地产开发项目不是吸引二十多岁年轻人来这里的原因。它们与新餐厅和咖啡馆相反；它们减少了城市的个性。\n经验证据表明，你在历史保护方面不能太严格。城市对此越严格，它们似乎做得越好。\n但匹兹堡的吸引力不仅仅是建筑本身。还在于它们所在的街区。像旧金山和纽约一样，匹兹堡幸运地是一个前汽车时代的城市。它不太分散。因为这些25到29岁的人不喜欢开车。他们更喜欢步行、骑自行车或乘坐公共交通。如果你最近去过旧金山，你会忍不住注意到大量的骑自行车的人。这不仅仅是二十多岁年轻人采用的时尚。在这方面，他们发现了一种更好的生活方式。胡须会消失，但自行车不会。无需驾驶就能出行的城市就是更好的城市。所以我建议你尽一切可能利用这一点。与历史保护一样，似乎不可能做得太过。\n为什么不把匹兹堡变成全国对自行车和行人最友好的城市？看看你是否能让旧金山相比之下显得落后。如果你这样做，你不太可能后悔。城市对你想吸引的年轻人来说会像天堂。如果他们确实离开去别处找工作，他们会遗憾地离开这样一个地方。 downside是什么？你能想象一个\u0026quot;因变得对自行车太友好而被毁灭的城市\u0026quot;的头条吗？这根本不会发生。\n所以假设酷炫的老街区和小餐馆让这里成为下一个波特兰。这足够吗？它将使你处于比波特兰本身好得多的位置，因为匹兹堡有波特兰缺乏的东西：一流的研究型大学。CMU加上小咖啡馆意味着你拥有的不仅仅是喝拿铁的时髦人士。这意味着你有一边喝拿铁一边讨论分布式系统的时髦人士。现在你真的非常接近旧金山了。\n事实上，你在一方面比旧金山更好，因为CMU在市中心，但斯坦福和伯克利都在郊区。\nCMU能做什么来帮助匹兹堡成为创业中心？成为更好的研究型大学。CMU是世界上最好的大学之一，但想象一下如果它是最好的，每个人都知道这一点，情况会怎样。有很多有抱负的人必须去最好的地方，无论它在哪里。如果CMU是那个地方，他们都会来这里。哈萨克斯坦的孩子会梦想有一天生活在匹兹堡。\n成为那种人才磁铁是大学为使自己的城市成为创业中心所能做出的最重要贡献。事实上，这几乎是它们能做出的唯一贡献。\n但是等等，大学不应该建立名称中包含\u0026quot;创新\u0026quot;和\u0026quot;创业\u0026quot;等词语的项目吗？不，它们不应该。这类事情几乎总是令人失望。它们追求的是错误的目标。获得创新的方法不是瞄准创新，而是瞄准更具体的东西，比如更好的电池或更好的3D打印。而学习创业的方法是去做，这在学校里是做不到的。\n我知道听到大学鼓励创业最好的事情是成为一所伟大的大学，可能会让一些行政人员失望。这就像告诉想减肥的人减肥的方法是少吃。\n但如果你想了解创业公司的来源，看看经验证据。看看最成功的创业公司的历史，你会发现它们有机地源于几个创始人构建一些开始时是有趣副业项目的东西。大学在聚集创始人方面很出色，但除此之外，它们能做的最好的事情就是不要干涉。例如，不要对学生和教师开发的\u0026quot;知识产权\u0026quot;声称所有权，并且对推迟入学和请假有宽松的规定。\n事实上，大学为鼓励创业所能做的最有效的事情之一是哈佛发明的一种复杂的不干涉方式。哈佛曾经在圣诞节后为秋季学期进行考试。一月初他们有一个叫做\u0026quot;阅读期\u0026quot;的时间，你应该在为考试学习。而微软和Facebook有一个很少有人意识到的共同点：它们都是在阅读期开始的。这是产生那种变成创业公司的副业项目的完美情况。学生们都在校园里，但他们不必做任何事情，因为他们应该在为考试学习。\n哈佛可能已经关闭了这个窗口，因为几年前他们将考试移到圣诞节前，并将阅读期从11天缩短到7天。但如果一所大学真的想帮助学生创办创业公司，经验证据，按市值加权，表明它们能做的最好的事情就是什么都不做。\n匹兹堡的文化是它的另一个优势。一个城市似乎必须在社会上自由才能成为创业中心，原因很明显。一个城市必须容忍奇怪才能成为创业公司的家园，因为创业公司非常奇怪。你不能选择只允许那些会变成大创业公司的奇怪形式，因为它们都混杂在一起。你必须容忍所有的奇怪。\n这立即排除了美国的大部分地区。我很乐观，它不排除匹兹堡。我在这里长大的记忆之一，虽然当时没有意识到有什么不寻常的，是人们相处得有多好。我仍然不确定为什么。也许一个原因是每个人都感觉像移民。当我在门罗维尔还是个孩子时，人们不称自己为美国人。他们称自己为意大利人、塞尔维亚人或乌克兰人。想象一下一百年前这里是什么样子，当时人们从二十个不同的国家涌入。宽容是唯一的选择。\n我记忆中匹兹堡的文化是宽容和务实的。这也是我描述硅谷文化的方式。这不是巧合，因为匹兹堡是它那个时代的硅谷。这是一个人们建造新事物的城市。虽然人们建造的东西已经改变，但做这种工作需要的精神是相同的。\n所以，虽然拿铁喝着的时髦人士的涌入可能有些方面令人讨厌，但我会不遗余力地鼓励他们。更广泛地说是容忍奇怪，即使达到古怪加利福尼亚人的程度。对匹兹堡来说，这是一个保守的选择：这是回到城市的根源。\n不幸的是，我把最艰难的部分留到了最后。成为创业中心还需要一件事，而匹兹堡没有：投资者。硅谷有庞大的投资者社区，因为它有50年的时间来发展一个。纽约有庞大的投资者社区，因为它充满了非常喜欢钱并且能够快速注意到新赚钱方式的人。但匹兹堡两者都没有。吸引其他人来这里便宜的住房对投资者没有影响。\n如果投资者社区在这里成长起来，它会以与硅谷相同的方式发生：缓慢而有机地。所以我不会在短期内拥有庞大投资者社区上下赌注。但幸运的是，有三个趋势使这变得不像以前那样必要。一个是创业公司启动成本越来越低，所以你不需要像以前那样多的外部资金。第二个是感谢Kickstarter等事物，创业公司可以更快获得收入。你可以从任何地方在Kickstarter上放东西。第三个是像Y Combinator这样的项目。来自世界任何地方的创业公司都可以去YC三个月，获得资金，然后如果他们想就可以回家。\n我的建议是让匹兹堡成为创业公司的好地方，逐渐会有更多的创业公司留下来。其中一些会成功；它们的一些创始人会成为投资者；还会有更多的创业公司留下来。\n这不是成为创业中心的快速路径。但它至少是一条路径，这是其他城市很少有的。而且这并不是说你在此期间必须做出痛苦的牺牲。想想我建议你应该做的事情。鼓励当地餐厅，保存老建筑，利用密度，让CMU成为最好的，促进宽容。这些是使匹兹堡现在成为好居住地方的事情。我只是说你应该更多地做这些事情。\n这是一个令人鼓舞的想法。如果匹兹堡成为创业中心的道路是更多地做自己，那么它有很好的成功机会。事实上，它可能在其规模的城市中拥有最好的机会。这需要一些努力和很多时间，但如果任何城市能做到，匹兹堡可以。\n感谢查理·奇弗和杰西卡·利文斯顿阅读草稿，感谢梅格·奇弗组织Opt412并邀请我演讲。\n",
    "description": "",
    "tags": ["创业中心","匹兹堡","城市","企业家精神","创新","大学","投资者"],
    "categories": [],
    "content": "→ English Version\n如何让匹兹堡成为创业中心 2016年4月\n（这是我在匹兹堡一个名为Opt412的活动上的演讲。其中大部分内容适用于其他城镇。但并非全部，因为正如我在演讲中所说，匹兹堡比大多数想成为创业中心的地方有一些重要优势。）\n要让匹兹堡成为像硅谷这样的创业中心需要什么？我对匹兹堡相当了解，因为我在这里长大，在门罗维尔。我也相当了解硅谷，因为那是我现在居住的地方。你能在这里建立起那种创业生态系统吗？\n当我同意在这里演讲时，我以为我无法给出一个非常乐观的演讲。我以为我会谈论匹兹堡可以做什么来成为创业中心，很大程度上是虚拟语气。相反，我要谈论的是匹兹堡能够做什么。\n改变我想法的是我在《纽约时报》美食版读到的一篇文章。标题是\u0026quot;匹兹堡青年驱动的食品繁荣\u0026quot;。对大多数人来说，这听起来可能不有趣，更不用说与创业相关了。但读到那个标题让我感到非常振奋。如果我刻意挑选，我想不出一个更有希望的标题。当我读到文章时，我变得更加兴奋。它说\u0026quot;25到29岁的人现在占所有居民的7.6%，比十年前的7%有所上升。\u0026ldquo;哇，我想，匹兹堡可能是下一个波特兰。它可能成为所有二十多岁的人都想去生活的地方。\n几天前我到这里时，我能感觉到不同。我从1968年到1984年住在这里。当时我没有意识到，但在这整个期间，城市都在自由落体。除了各地都发生的向郊区迁移外，钢铁和核工业都在消亡。天啊，现在情况大不相同了。不仅仅是市中心看起来繁荣得多。这里有一种我小时候没有的活力。\n我小时候，这是年轻人离开的地方。现在是吸引他们的地方。\n这与创业有什么关系？创业公司是由人组成的，而典型创业公司中的人的平均年龄正好在25到29岁之间。\n我已经看到一个城市拥有这些人有多么强大。五年前，他们把硅谷的重心从半岛转移到旧金山。谷歌和Facebook在半岛上，但下一代的大赢家都在旧金山。重心转移的原因是人才战争，尤其是程序员方面。大多数25到29岁的人想住在城市，而不是无聊的郊区。所以无论他们喜欢与否，创始人都知道他们必须在城市。我认识多个创始人，他们本来更喜欢住在硅谷 proper，但他们强迫自己搬到旧金山，因为他们知道否则会输掉人才战争。\n因此，成为二十多岁人的磁石是一件非常有希望的事情。很难想象一个地方能成为创业中心却不具备这个特质。当我读到关于25到29岁人群比例增加的统计数据时，我感到的兴奋完全和看到创业公司的图表开始从x轴向上攀升时一样。\n全国25到29岁人群的比例是6.8%。这意味着你领先0.8%。人口是306,000，所以我们谈论的是约2500人的过剩。这是一个小镇的人口，而这还只是过剩。所以你已经有了一个立足点。现在你只需要扩展它。\n虽然\u0026quot;青年驱动的食品繁荣\u0026quot;可能听起来轻浮，但它绝非如此。餐厅和咖啡馆是城市个性的重要组成部分。想象走在巴黎的街道上。你走过什么？小餐厅和咖啡馆。想象开车穿过一些令人沮丧的随机远郊。你开车经过什么？星巴克、麦当劳和必胜客。正如格特鲁德·斯坦因所说，那里没有那里。你可以在任何地方。\n这些独立的餐厅和咖啡馆不仅仅是喂养人们。它们让这里有了这里。\n所以这是我第一个具体建议，将匹兹堡变成下一个硅谷：尽你所能鼓励这种青年驱动的食品繁荣。城市能做什么？把开办这些小餐厅和咖啡馆的人当作你的用户，去问他们想要什么。我至少可以猜到他们可能想要的一件事：快速的许可流程。旧金山在这方面给你留下了大量超越它们的空间。\n我知道餐厅不是主要推动力。主要推动力，正如《纽约时报》文章所说，是便宜的住房。这是一个很大的优势。但\u0026quot;便宜住房\u0026quot;这个短语有点误导。有很多更便宜的地方。匹兹堡的特殊之处不在于它便宜，而在于它是一个你真正想要生活的便宜地方。\n部分原因在于建筑本身。我很久以前就意识到，当我还是一个贫穷的二十多岁年轻人时，最好的交易是曾经富有然后变得贫穷的地方。如果一个地方一直富有，它很好但太昂贵。如果一个地方一直贫穷，它便宜但严酷。但如果一个地方曾经富有然后变得贫穷，你可以找到便宜的宫殿。这就是吸引人们来这里的原因。一百年前匹兹堡富有时，住在这里的人建造了大型坚固的建筑。不一定总是最好的品味，但绝对坚固。所以这是成为创业中心的另一个建议：不要摧毁吸引人们来这里的老建筑。当城市正在复苏时，就像现在的匹兹堡，开发商竞相拆除老建筑。不要让这种情况发生。专注于历史保护。大型房地产开发项目不是吸引二十多岁年轻人来这里的原因。它们与新餐厅和咖啡馆相反；它们减少了城市的个性。\n经验证据表明，你在历史保护方面不能太严格。城市对此越严格，它们似乎做得越好。\n但匹兹堡的吸引力不仅仅是建筑本身。还在于它们所在的街区。像旧金山和纽约一样，匹兹堡幸运地是一个前汽车时代的城市。它不太分散。因为这些25到29岁的人 …"
  },{
    "title": "如何说服投资者",
    "url": "/paul_graham/essays_zh/convince/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如何说服投资者 2013年8月\n当人们搬重物伤到自己时，通常是因为他们试图用背部来抬。正确的方式是让你的腿部来做这项工作。没有经验的创始人在试图说服投资者时犯了同样的错误。他们试图用他们的演讲来说服。如果让他们自己的创业公司来发挥作用——如果他们首先理解为什么自己的创业公司值得投资，然后向投资者清楚地解释这一点，大多数情况会更好。\n投资者在寻找将会非常成功的创业公司。但这个标准并不像听起来那么简单。在创业公司中，就像在许多其他领域一样，结果分布遵循幂律，但在创业公司中，曲线陡峭得令人吃惊。巨大的成功如此之大，以至于使其他相形见绌。而且由于每年只有少数几个（传统观点是15个），投资者将\u0026quot;巨大成功\u0026quot;视为二元化的。大多数投资者对你感兴趣，如果你看起来有机会，无论多么小，成为15个巨大成功之一，否则不会。[1]\n（有一些天使投资人会对一个有高概率取得中等成功的公司感兴趣。但天使投资人也喜欢巨大的成功。）\n如何让你看起来像是巨大成功之一？你需要三样东西：令人敬畏的创始人、有前途的市场，以及（通常）一些迄今为止成功的证据。\n令人敬畏 最重要的因素是令人敬畏的创始人。大多数投资者在最初几分钟就决定你看起来像是赢家还是输家，一旦他们的观点确定，就很难改变。[2] 每个创业公司都有投资和不投资的理由。如果投资者认为你是赢家，他们会专注于前者，如果不是，他们会专注于后者。例如，这可能是一个丰富的市场，但销售周期缓慢。如果投资者对你作为创始人印象深刻，他们会说他们想投资，因为这是一个丰富的市场，如果不是，他们会说他们因为销售周期缓慢而不能投资。\n他们不一定试图误导你。大多数投资者在自己的头脑中确实不清楚为什么他们喜欢或不喜欢创业公司。如果你看起来像是赢家，他们会更喜欢你的想法。但不要对他们这个弱点太自鸣得意，因为你也有这个弱点；几乎每个人都有。\n当然，想法也有作用。它们是始于喜欢创始人的火焰的燃料。一旦投资者喜欢你，你会看到他们在寻找想法：他们会说\u0026quot;是的，你还可以做x。\u0026quot;（而当他们不喜欢你时，他们会说\u0026quot;但是y呢？\u0026quot;）\n但说服投资者的基础是看起来令人敬畏，由于这不是大多数人在对话中经常使用的词，我应该解释它的含义。一个令人敬畏的人是一个看起来会得到他们想要的东西的人，不管有什么障碍。令人敬畏接近自信，只是有人可能自信但错误。令人敬畏大致上是有理由的自信。\n有少数人真的很擅长看起来令人敬畏——有些是因为他们确实非常令人敬畏，只是让它表现出来，另一些是因为他们或多或少是骗子。[3] 但大多数创始人，包括许多将继续创办非常成功公司的人，在第一次尝试融资时并不那么擅长看起来令人敬畏。他们应该做什么？[4]\n他们不应该做的是试图模仿更有经验的创始人的 swagger。投资者并不总是那么擅长判断技术，但他们擅长判断信心。如果你试图表现得像你不是的东西，你只会陷入恐怖谷。你会偏离真诚，但永远不会达到令人信服。\n真理 作为没有经验的创始人，看起来最令人敬畏的方式是坚持真理。你看起来多么令人敬畏不是一个常数。它取决于你在说什么而变化。大多数人在说\u0026quot;一加一等于二\u0026quot;时可以看起来自信，因为他们知道这是真的。即使是最不自信的人，如果他们告诉风投\u0026quot;一加一等于二\u0026quot;而风投表示怀疑，也会感到困惑甚至轻微鄙视。擅长看起来令人敬畏的人的神奇能力是他们可以用\u0026quot;我们每年要赚十亿美元\u0026quot;这句话做到这一点。但你也可以做到，如果不是用这句话，用一些相当令人印象深刻的句子，只要首先说服自己。\n这就是秘密。说服自己你的创业公司值得投资，然后当你向投资者解释这一点时，他们会相信你。而说服自己，我不是说玩弄心灵游戏来增强你的信心。我的意思是真正评估你的创业公司是否值得投资。如果不是，不要试图筹集资金。[5] 但如果是，当你告诉投资者它值得投资时，你将说实话，他们会感觉到这一点。如果你很好地理解某件事并说出真相，你不必是一个流畅的演讲者。\n要评估你的创业公司是否值得投资，你必须成为领域专家。如果你不是领域专家，你可以对自己的想法感到多么确信，在投资者看来，这只不过是邓宁-克鲁格效应的一个例子。事实上通常就是这样。投资者可以通过你回答他们问题的好坏相当快地判断你是否是领域专家。了解关于你市场的一切。[6]\n为什么创始人坚持试图说服投资者他们自己不相信的事情？部分是因为我们都被训练成这样。\n当我的朋友Robert Morris和Trevor Blackwell在读研究生时，他们的一位同学从他们的导师那里接到了一个问题，我们至今仍然引用。当那个不幸的人讲到他的最后一张幻灯片时，教授脱口而出：\u0026ldquo;这些结论中你真正相信哪一个？\u0026rdquo;\n学校组织方式的产物之一是我们都被训练成即使没有什么可说的时候也要说话。如果你有一个十页的论文要交，那么你必须写十页，即使你只有一页的想法。即使你没有想法。你必须生产出一些东西。太多的创业公司以同样的精神进行融资。当他们认为该是筹集资金的时候了，他们努力为他们的创业公司做出最好的陈述。大多数人从来没有想过事先暂停一下，问自己所说的是否真的令人信服，因为他们都被训练成将呈现的需求视为既定的——作为一个固定大小的区域，无论他们有多少真相，都必须必须被传播，无论多么稀薄。\n筹集资金的时间不是当你需要它的时候，也不是当你达到像Demo Day这样的人为截止日期时。而是当你能够说服投资者的时候，而不是之前。[7]\n除非你是一个很好的骗子，否则如果你自己都不相信，你永远不会说服投资者。他们在发现废话方面比你产生废话要好得多，即使你是在不知不觉中产生它。如果你在自己说服自己之前试图说服投资者，你将浪费你们双方的时间。\n但首先暂停来说服自己，不仅会节省你浪费的时间。它将迫使你组织你的思想。要说服自己你的创业公司值得投资，你必须弄清楚为什么它值得投资。如果你能做到这一点，你最终会得到比增加的信心更多的东西。你还将有一个如何成功的临时路线图。\n市场 注意我一直小心地谈论创业公司是否值得投资，而不是它是否会成功。没有人知道创业公司是否会成功。对投资者来说这是一件好事，因为如果你能提前知道创业公司是否会成功，股票价格将已经是未来价格，投资者就没有赚钱的空间了。创业投资者知道每一项投资都是赌注，而且赔率相当高。\n所以为了证明你值得投资，你不必证明你会成功，只需要证明你是一个足够好的赌注。什么使创业公司成为足够好的赌注？除了令人敬畏的创始人，你还需要一个合理的途径来拥有一个大市场的重要份额。创始人将创业公司视为想法，但投资者将它们视为市场。如果有x数量的客户愿意为你所做的东西平均每年支付y美元，那么你公司的总可用市场，或TAM，就是xy美元。投资者不期望你收集所有这些钱，但这是你能达到的规模的上限。\n你的目标市场必须很大，而且必须是你能够捕捉的。但市场不一定要很大，你也不一定要在其中。实际上，从小市场开始往往更好，这个小市场要么会变成大市场，要么你可以从中进入大市场。只需要有一些合理的跳跃序列，导致几年后主导一个大市场。\n合理性的标准根据创业公司的年龄而有很大差异。一个三个月大的公司在Demo Day只需要是一个有希望的实验，值得资助看看结果如何。而一个两岁的公司筹集A轮融资需要能够证明实验成功。[8]\n但每个真正变得很大的公司都是\u0026quot;幸运\u0026quot;的，因为它们的增长主要是由于它们所骑的某种外部浪潮，所以要制造一个令人信服的成为巨大的案例，你必须确定你将受益的某种特定趋势。通常你可以通过问\u0026quot;为什么是现在？\u0026ldquo;来找到这一点。如果这是如此伟大的想法，为什么还没有其他人已经做了？理想情况下，答案是它最近才成为一个好主意，因为某些事情发生了变化，而其他人还没有注意到。\n例如，微软不会通过销售Basic解释器而变得巨大。但通过从那里开始，他们完美地准备好在微型计算机变得足够强大以支持一个时，向上扩展微型计算机软件栈。而微型计算机结果是一个非常巨大的浪潮，比1975年最乐观的观察者预测的要大得多。\n但是，虽然微软做得非常好，因此有诱惑认为它们几个月后会看起来是一个很好的赌注，但它们可能不会。好，但不是伟大。然而成功的公司，在几个月内看起来都不会超过一个相当好的赌注。微型计算机结果是一件大事，微软既执行得好又幸运。但这绝不是事情会如何发展的明显迹象。许多公司在几个月内看起来都像是同样好的赌注。我不知道一般的创业公司，但我们资助的至少一半的创业公司可以像微软能够提出的那样，提出一个关于主导大市场的好案例。谁能合理地期望创业公司比这更多？\n拒绝 如果你能提出和微软能够提出的一样好的案例，你会说服投资者吗？不总是。许多风险投资公司会拒绝微软。[9] 当然有些人拒绝了谷歌。被拒绝会让你处于一个稍微尴尬的位置，因为当你开始融资时，你会看到从投资者那里得到的最常见问题是\u0026quot;还有谁在投资？\u0026ldquo;如果你已经融资一段时间但还没有人承诺，你会说什么？[10]\n真正擅长表现得令人敬畏的人通常通过给投资者留下这样的印象来解决这个问题：虽然还没有投资者承诺，但有几个即将承诺。这可以说是一种允许的策略。投资者更关心还有谁在投资，而不是关心你创业公司的任何其他方面，这有点混蛋，而对他们误导你与其他投资者的进展似乎是互补的反击。这可以说是骗骗子的一个例子。但我不向大多数创始人推荐这种方法，因为大多数创始人无法成功地做到这一点。这是对投资者说的最常见的谎言，你必须非常擅长撒谎，才能对某个职业的人说出他们听到的最常见的谎言。\n如果你不是谈判大师（也许即使你是），最好的解决方案是直接解决这个问题，解释为什么投资者拒绝了你以及为什么他们错了。如果你知道自己在正确的轨道上，那么你也知道投资者为什么拒绝你是错的。有经验的投资者很清楚最好的想法也是最可怕的。他们都知道那些拒绝谷歌的风险投资公司。如果你不是显得回避和羞耻被拒绝（从而隐含地同意判决），而是坦率地谈论什么让投资者害怕你，你会看起来更自信，这是他们喜欢的，你可能也会更好地展示你创业公司的那个方面。至少，那种担忧现在会公开，而不是留给当前与你交谈的投资者发现的把柄，他们会为他们的发现感到自豪，因此对它产生依恋。[11]\n这种策略对最好的投资者最有效，他们既不容易被欺骗，并且已经相信大多数其他投资者是思维传统的无人机，注定总是错过巨大的异常值。筹集资金不像申请大学，在那里你可以假设如果你能进入麻省理工学院，你也能进入Foobar State。因为最好的投资者比其他的聪明得多，而最好的创业想法最初看起来像坏想法，创业公司被除了最好的以外的所有风险投资公司拒绝并不罕见。Dropbox就是这样。Y Combinator在波士顿开始，前3年我们在波士顿和硅谷交替运行批次。因为波士顿投资者如此之少且如此胆小，我们过去常常将波士顿批次运到硅谷进行第二次Demo Day。Dropbox是波士顿批次的一部分，这意味着所有那些波士顿投资者都得到了第一次看Dropbox的机会，但没有人完成交易。又一个备份和同步的东西，他们都认为。几周后，Dropbox从红杉公司筹集了A轮融资。[12]\n不同 不理解投资者将投资视为赌注，加上十页论文的心态，阻止创始人甚至考虑对他们所说的事情确定的可能性。他们认为他们在试图说服投资者一些非常不确定的事情——他们的创业公司将是巨大的——而说服任何人相信这样的事情显然必须包含一些疯狂的销售技巧。但事实上，当你筹集资金时，你试图说服投资者的东西投机性要少得多——公司是否具有好赌注的所有要素——你可以用一种定性的不同方式来处理这个问题。你可以先说服自己，然后说服他们。\n当你说服他们时，使用你用来说服自己的同样实事求是的语言。你们不会在彼此之间使用模糊、夸大的营销语言。也不要对投资者使用它。它不仅对他们不起作用，而且似乎是无能的标志。只要简洁。许多投资者明确使用这作为测试，推理（正确地）如果你不能简洁地解释你的计划，你就不是真正理解它们。但即使是没有这个规则的投资者也会对不清楚的解释感到厌烦和沮丧。[13]\n所以，当你还没有擅长表现得令人敬畏时，给投资者留下印象的秘诀是：制造一些值得投资的东西。理解为什么它值得投资。向投资者清楚地解释这一点。如果你在说一些你知道是真的的事情，你在说的时候会显得自信。相反，永远不要让路演把你引入胡说八道。只要你停留在真理的领域，你就是强大的。让真理变好，然后说出来。\n注释 [1] 没有理由相信这个数字是常数。事实上，我们在Y Combinator的明确目标是通过鼓励那些否则不会创业的人创业来增加这个数字。\n[2] 或者更准确地说，投资者决定你是输家还是可能是赢家。如果你看起来像是赢家，他们可能会根据你筹集的资金数量与你进行几次更多的会议，以测试第一印象是否成立。但如果你看起来像是输家，他们就完了，至少在接下来的一年左右。当他们决定你是输家时，他们通常在他们可能为第一次会议分配的50分钟内就决定了。这就解释了人们总是听到的关于风险投资公司不专注的令人惊讶的故事。这些人如何在创业公司演示期间查看信息时做出良好的投资决策？这个谜题的解决方案是他们已经做出了决定。\n[3] 这两者并不互斥。有些人既真正令人敬畏，也非常擅长表现得那样。\n[4] 那些将继续创建大公司的人为什么早期看起来不令人敬畏？我认为主要原因是他们到目前为止的经验训练他们保持翅膀折叠，可以说。家庭、学校和工作鼓励合作，而不是征服。他们这样做也是好事，因为即使是成吉思汗也可能99%是合作。但结果是大多数人从他们二十多岁早期的成长管道中出来，被压缩成管道的形状。有些人发现他们有翅膀并开始展开它们。但这需要几年时间。在开始时，即使他们也不知道自己能够做什么。\n[5] 事实上，改变你在做的事情。你正在将你自己的时间投资到你的创业公司中。如果你不相信你正在做的事情是一个足够好的赌注，为什么你甚至在做那个？\n[6] 当投资者问你一个你不知道答案的问题时，最好的反应既不是吹牛也不是放弃，而是解释你将如何找出答案。如果你能当场想出一个初步答案，那就更好，但要解释那是你正在做的事情。\n[7] 在Y Combinator，我们试图确保创业公司在Demo Day准备好筹集资金，鼓励他们忽略投资者，而是在大约一周前专注于他们的公司。这样大多数人在Demo Day之前很久就达到了足够令人信服的阶段。但不是所有人都这样，所以我们也给任何想要的创业公司推迟到后一个Demo Day的选择。\n",
    "description": "",
    "tags": ["投资者","融资","路演","创业","Y-Combinator","信心","真理"],
    "categories": [],
    "content": "→ English Version\n如何说服投资者 2013年8月\n当人们搬重物伤到自己时，通常是因为他们试图用背部来抬。正确的方式是让你的腿部来做这项工作。没有经验的创始人在试图说服投资者时犯了同样的错误。他们试图用他们的演讲来说服。如果让他们自己的创业公司来发挥作用——如果他们首先理解为什么自己的创业公司值得投资，然后向投资者清楚地解释这一点，大多数情况会更好。\n投资者在寻找将会非常成功的创业公司。但这个标准并不像听起来那么简单。在创业公司中，就像在许多其他领域一样，结果分布遵循幂律，但在创业公司中，曲线陡峭得令人吃惊。巨大的成功如此之大，以至于使其他相形见绌。而且由于每年只有少数几个（传统观点是15个），投资者将\u0026quot;巨大成功\u0026quot;视为二元化的。大多数投资者对你感兴趣，如果你看起来有机会，无论多么小，成为15个巨大成功之一，否则不会。[1]\n（有一些天使投资人会对一个有高概率取得中等成功的公司感兴趣。但天使投资人也喜欢巨大的成功。）\n如何让你看起来像是巨大成功之一？你需要三样东西：令人敬畏的创始人、有前途的市场，以及（通常）一些迄今为止成功的证据。\n令人敬畏 最重要的因素是令人敬畏的创始人。大多数投资者在最初几分钟就决定你看起来像是赢家还是输家，一旦他们的观点确定，就很难改变。[2] 每个创业公司都有投资和不投资的理由。如果投资者认为你是赢家，他们会专注于前者，如果不是，他们会专注于后者。例如，这可能是一个丰富的市场，但销售周期缓慢。如果投资者对你作为创始人印象深刻，他们会说他们想投资，因为这是一个丰富的市场，如果不是，他们会说他们因为销售周期缓慢而不能投资。\n他们不一定试图误导你。大多数投资者在自己的头脑中确实不清楚为什么他们喜欢或不喜欢创业公司。如果你看起来像是赢家，他们会更喜欢你的想法。但不要对他们这个弱点太自鸣得意，因为你也有这个弱点；几乎每个人都有。\n当然，想法也有作用。它们是始于喜欢创始人的火焰的燃料。一旦投资者喜欢你，你会看到他们在寻找想法：他们会说\u0026quot;是的，你还可以做x。\u0026quot;（而当他们不喜欢你时，他们会说\u0026quot;但是y呢？\u0026quot;）\n但说服投资者的基础是看起来令人敬畏，由于这不是大多数人在对话中经常使用的词，我应该解释它的含义。一个令人敬畏的人是一个看起来会得到他们想要的东西的人，不管有什么障碍。令人敬畏接近自信，只是有人可能自信但错误。令人敬畏大致上是有理由的自信。\n有少数人真的很擅长看起来令人敬畏——有些是因为他们确实非常令人敬畏，只是让它表现出来，另一些是因为他们或多或少是骗子。[3] 但大多数创始人，包括许多将继续创办非常成功公司的人，在第一次尝试融资时并不那么擅长看起来令人敬畏。他们应该做什么？[4]\n他们不应该做的是试图模仿更有经验的创始人的 swagger。投资者并不总是那么擅长判断技术，但他们擅长判断信心。如果你试图表现得像你不是的东西，你只会陷入恐怖谷。你会偏离真诚，但永远不会达到令人信服。\n真理 作为没有经验的创始人，看起来最令人敬畏的方式是坚持真理。你看起来多么令人敬畏不是一个常数。它取决于你在说什么而变化。大多数人在说\u0026quot;一加一等于二\u0026quot;时可以看起来自信，因为他们知道这是真的。即使是最不自信的人，如果他们告诉风投\u0026quot;一加一等于二\u0026quot;而风投表示怀疑，也会感到困惑甚至轻微鄙视。擅长看起来令人敬畏的人的神奇能力是他们可以用\u0026quot;我们每年要赚十亿美元\u0026quot;这句话做到这一点。但你也可以做到，如果不是用这句话，用一些相当令人印象深刻的句子，只要首先说服自己。\n这就是秘密。说服自己你的创业公司值得投资，然后当你向投资者解释这一点时，他们会相信你。而说服自己，我不是说玩弄心灵游戏来增强你的信心。我的意思是真正评估你的创业公司是否值得投资。如果不是，不要试图筹集资金。[5] 但如果是，当你告诉投资者它值得投资时，你将说实话，他们会感觉到这一点。如果你很好地理解某件事并说出真相，你不必是一个流畅的演讲者。\n要评估你的创业公司是否值得投资，你必须成为领域专家。如果你不是领域专家，你可以对自己的想法感到多么确信，在投资者看来，这只不过是邓宁-克鲁格效应的一个例子。事实上通常就是这样。投资者可以通过你回答他们问题的好坏相当快地判断你是否是领域专家。了解关于你市场的一切。[6]\n为什么创始人坚持试图说服投资者他们自己不相信的事情？部分是因为我们都被训练成这样。\n当我的朋友Robert Morris和Trevor Blackwell在读研究生时，他们的一位同学从他们的导师那里接到了一个问题，我们至今仍然引用。当那个不幸的人讲到他的最后一张幻灯片时，教授脱口而出：\u0026ldquo;这些结论中你真正相信哪一个？\u0026rdquo;\n学校组织方式的 …"
  },{
    "title": "如果Lisp这么好",
    "url": "/paul_graham/essays_zh/iflisp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n如果Lisp这么好 2003年5月\n如果Lisp这么好，为什么没有更多人使用它？我最近在一次演讲中被听众中的一个学生问到了这个问题。而且不是第一次了。\n在语言方面，就像在许多事情中一样，流行度和质量之间没有太大关联。为什么约翰·格里沙姆（《诉讼之王》销售排名第44）比简·奥斯汀（《傲慢与偏见》销售排名第6191）卖得更好？即使是格里沙姆会声称这是因为他是更好的作家吗？\n这是《傲慢与偏见》的第一句话：\u0026ldquo;凡是有钱的单身汉，总想娶位太太，这已经成了一条举世公认的真理。\u0026rdquo;\n\u0026ldquo;举世公认的真理？\u0026rdquo; 对于一个爱情故事的第一句话来说，这些词太长了。\n就像简·奥斯汀的作品一样，Lisp看起来很难。它的语法，或者说缺乏语法，使它看起来完全不同于大多数人习惯的语言。在学习Lisp之前，我也害怕它。我最近发现了一本1983年的笔记本，我在上面写道：\u0026ldquo;我想我应该学习Lisp，但它看起来太陌生了。\u0026ldquo;幸运的是，我当时19岁，对学习新东西没有太多抵触。我非常无知，学习几乎任何东西都意味着学习新事物。\n被Lisp吓到的人们编造了其他不使用它的理由。当C是默认语言时，标准的借口是Lisp太慢。现在Lisp方言是可用语言中较快的之一，这个借口已经消失了。现在的标准借口是公开循环的：其他语言更流行。\n（小心这种推理。它会让你得到Windows。）\n流行度总是自我延续的，但在编程语言中尤其如此。为流行语言编写的库更多，这使它们更流行。程序经常必须与现有程序一起工作，如果它们用相同的语言编写，这会更容易，所以语言像病毒一样从程序传播到程序。管理者更喜欢流行的语言，因为它们给他们更多对开发者的控制力，开发者可以更容易被替换。\n确实，如果编程语言都或多或少等价，那么使用除最流行语言之外的任何语言都没有什么理由。但它们并不都等价，差远了。这就是为什么不那么流行的语言，像简·奥斯汀的小说，继续存在的原因。当其他人在阅读最新的约翰·格里沙姆小说时，总会有一小部分人在阅读简·奥斯汀。\n日语翻译 | 罗马尼亚语翻译 | 西班牙语翻译\n",
    "description": "",
    "tags": ["Lisp","编程语言","软件开发","技术","创新","流行度"],
    "categories": [],
    "content": "→ English Version\n如果Lisp这么好 2003年5月\n如果Lisp这么好，为什么没有更多人使用它？我最近在一次演讲中被听众中的一个学生问到了这个问题。而且不是第一次了。\n在语言方面，就像在许多事情中一样，流行度和质量之间没有太大关联。为什么约翰·格里沙姆（《诉讼之王》销售排名第44）比简·奥斯汀（《傲慢与偏见》销售排名第6191）卖得更好？即使是格里沙姆会声称这是因为他是更好的作家吗？\n这是《傲慢与偏见》的第一句话：\u0026ldquo;凡是有钱的单身汉，总想娶位太太，这已经成了一条举世公认的真理。\u0026rdquo;\n\u0026ldquo;举世公认的真理？\u0026rdquo; 对于一个爱情故事的第一句话来说，这些词太长了。\n就像简·奥斯汀的作品一样，Lisp看起来很难。它的语法，或者说缺乏语法，使它看起来完全不同于大多数人习惯的语言。在学习Lisp之前，我也害怕它。我最近发现了一本1983年的笔记本，我在上面写道：\u0026ldquo;我想我应该学习Lisp，但它看起来太陌生了。\u0026ldquo;幸运的是，我当时19岁，对学习新东西没有太多抵触。我非常无知，学习几乎任何东西都意味着学习新事物。\n被Lisp吓到的人们编造了其他不使用它的理由。当C是默认语言时，标准的借口是Lisp太慢。现在Lisp方言是可用语言中较快的之一，这个借口已经消失了。现在的标准借口是公开循环的：其他语言更流行。\n（小心这种推理。它会让你得到Windows。）\n流行度总是自我延续的，但在编程语言中尤其如此。为流行语言编写的库更多，这使它们更流行。程序经常必须与现有程序一起工作，如果它们用相同的语言编写，这会更容易，所以语言像病毒一样从程序传播到程序。管理者更喜欢流行的语言，因为它们给他们更多对开发者的控制力，开发者可以更容易被替换。\n确实，如果编程语言都或多或少等价，那么使用除最流行语言之外的任何语言都没有什么理由。但它们并不都等价，差远了。这就是为什么不那么流行的语言，像简·奥斯汀的小说，继续存在的原因。当其他人在阅读最新的约翰·格里沙姆小说时，总会有一小部分人在阅读简·奥斯汀。\n日语翻译 | 罗马尼亚语翻译 | 西班牙语翻译\n"
  },{
    "title": "学生创业指南",
    "url": "/paul_graham/essays_zh/mit/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n学生创业指南 2006年10月\n（本文基于在麻省理工学院的演讲。）\n直到最近，毕业生只有两个选择：找工作或读研究生。我认为第三种选择会越来越多：创办自己的创业公司。但这会有多普遍呢？\n我确信默认的选择永远会是找工作，但创业公司很可能变得和读研究生一样普遍。在90年代晚期，我的教授朋友们常常抱怨他们招不到研究生，因为所有本科生都去创业公司工作了。如果这种情况再次出现，我不会感到惊讶，但有一个不同：这一次他们会创办自己的公司，而不是去为别人的公司工作。\n最有抱负的学生现在会问：为什么要等到毕业？为什么不在大学期间就创业？事实上，为什么要上大学？为什么不直接创业？\n一年半前我做过一个演讲，我说雅虎、谷歌和微软创始人的平均年龄是24岁，如果研究生可以创业，为什么本科生不可以？我很高兴我把这表述为一个问题，因为现在我可以假装这不只是一个修辞问题。那时我无法想象为什么创业创始人应该有年龄下限。毕业是行政上的变化，不是生理上的。而且肯定有本科生在技术上和大多数研究生一样有能力。那么为什么本科生就不能像研究生一样能够创业呢？\n我现在意识到毕业时确实有些变化：你失去了一个巨大的失败借口。无论你的生活多么复杂，你会发现其他人，包括你的家人和朋友，都会忽略所有细节，认为你在任何给定时间只有一个职业。如果你在大学并且有暑假编程工作，你仍然被认为是一个学生。而如果你毕业并找到一份编程工作，每个人会立即认为你是一个程序员。\n在校期间创业的问题在于有一个内置的逃生舱。如果你在大三和大四之间的夏天创业，对每个人来说这都像是一个暑假工作。所以如果它没有进展，没什么大不了的；你在秋天和其他所有大四学生一起回到学校；没有人认为你是一个失败者，因为你的职业是学生，而你在那个方面没有失败。而如果你在毕业后一年创业，只要你没有被研究生院录取，创业对每个人来说就是你的职业。你现在是一个创业公司创始人，所以你必须在这方面做得很好。\n对几乎每个人来说，同辈的意见是最强大的动力——甚至比大多数创业公司创始人的名义目标，变得富有，还要强大。[1] 在每个资助周期开始一个月左右，我们有一个叫做原型日的活动，每个创业公司向其他公司展示他们到目前为止所做的事情。你可能认为他们不需要更多的动力。他们在为自己的酷新想法工作；他们有近期所需的资金；他们在玩一个只有两种结果的游戏：财富或失败。你认为这应该足够有动力了。然而，演示的前景使大多数人都疯狂地活动起来。\n即使你明确地为了变得富有而创业，你可能得到的钱在大多数时候看起来相当理论化。驱动你日常工作的是不想看起来很糟糕。\n你可能无法改变这一点。即使你能，我也不认为你会想；一个真正、真正不关心同辈怎么想的人可能是反社会者。所以你最多能做到的是把这种力量当作风，相应地设置你的船。如果你知道你的同辈会把你推向某个方向，选择好的同辈，定位自己让他们把你推向你喜欢的方向。\n毕业改变了主导风向，那些确实有影响。创业是如此困难，即使是成功的那些也是险胜。无论一个创业公司现在飞得多高，它可能在起落架上有几片叶子，是那些在跑道尽头勉强掠过的树留下的。在如此接近的比赛中，反对你的力量的最小增加就足以让你跌入失败的边缘。\n当我们刚开始创办Y Combinator时，我们鼓励人们还在大学时就开始创业。部分原因是Y Combinator开始时是一种夏季项目。我们保持了项目形式——我们每周一起吃晚饭被证明是个好主意——但我们现在决定官方立场应该是告诉人们等到毕业。\n这是否意味着你不能在大学创业？完全不是。Loopt的联合创始人Sam Altman在我们资助他们时刚刚完成大二，而Loopt可能是我们迄今为止资助的所有创业公司中最有前途的一个。但Sam Altman是一个非常不寻常的人。在大约见到他三分钟后，我记得我想\u0026quot;啊，所以这就是比尔·盖茨19岁时一定有的样子。\u0026quot;\n如果在大学期间创业可以成功，为什么我们告诉人们不要这样做？原因和那个可能虚构的小提琴家一样，每当有人请他评判某人的演奏时，他总是说他们没有足够的天赋成为专业演奏家。作为音乐家成功需要决心和天赋，所以这个答案对每个人来说都是正确的建议。不确定的人相信它并放弃，而足够决心的人会想\u0026quot;去他的，不管怎样我都会成功。\u0026quot;\n所以我们现在的官方政策只资助那些我们无法说服不去创业的本科生。坦率地说，如果你不确定，你应该等待。并不是说如果你现在不创业，所有创业机会都会消失。也许你正在研究的某个想法的窗口会关闭，但这不会是你最后一个想法。对于每个过时的想法，新的想法变得可行。从历史上看，创业机会只随时间增加。\n那样的话，你可能会问，为什么不等待更久？为什么不先工作一段时间，或者去读研究生，然后再创业？事实上，这可能是个好主意。如果我必须挑选创业公司创始人的最佳时机，基于我们最兴奋看到申请的人，我说是可能是25岁左右。为什么？25岁左右的人比21岁的人有什么优势？为什么不是更老？25岁的人能做32岁的人不能做什么的事情？这些问题值得研究。\n优势\n如果你在大学后不久创业，按照现在的标准你会是一个年轻的创始人，所以你应该知道年轻创始人的相对优势是什么。它们不是你可能想的那些。作为一个年轻创始人，你的优势是：耐力、贫穷、无根性、同事和无知。\n耐力的重要性不应该令人惊讶。如果你听说过关于创业公司的任何事情，你可能听说过长时间工作。据我所知，这些是普遍的。我想不出任何成功的创业公司创始人是朝九晚五工作的。对于年轻的创始人来说，长时间工作尤其必要，因为他们可能不像后来那样高效。\n你的第二个优势，贫穷，听起来可能不像一个优势，但它确实是一个巨大的优势。贫穷意味着你可以过得很便宜，这对创业公司至关重要。几乎每个失败的创业公司都是因为钱用完了而失败的。这样说有点误导，因为通常有其他潜在原因。但无论问题的来源是什么，低消耗率给你更多的机会从中恢复。由于大多数创业公司一开始会犯各种错误，从错误中恢复的空间是有价值的东西。\n大多数创业公司最终做的事情与他们计划的不同。成功找到可行的方法的方法是尝试那些不可行的方法。所以在创业公司中最糟糕的事情是有一个僵化的、预先确定的计划，然后开始花很多钱来实现它。最好便宜地运营，给你的想法时间来进化。\n最近的毕业生几乎可以靠极少的钱生活，这给了你比年长创始人的优势，因为软件创业公司的主要成本是人。有孩子和抵押贷款的人处于真正的劣势。这是我宁愿选择25岁的人而不是32岁的人的原因之一。32岁的人可能是更好的程序员，但可能也有昂贵得多的生活。而25岁的人有一些工作经验（稍后更多），但可以像本科生一样过得很便宜。\n当我们创办Viaweb时，Robert Morris和我分别是29岁和30岁，但幸运的是我们仍然像23岁的人一样生活。我们俩都几乎零资产。我本来很想有抵押贷款，因为那意味着我有房子。但回想起来，一无所有结果很方便。我没有被束缚，而且我习惯了过得很便宜。\n然而，比过便宜生活更重要的是想得便宜。Apple II如此流行的原因之一是它很便宜。电脑本身很便宜，而且它使用便宜的、现成的配件，比如用于数据存储的盒式磁带录音机和作为显示器的电视机。你知道为什么吗？因为Woz为自己设计这台电脑，他买不起更贵的东西。\n我们从同样的现象中受益。我们的价格在当时是 daringly 低的。最高级的服务是每月300美元，比标准低一个数量级。回想起来这是个聪明的举动，但我们这么做不是因为聪明。每月300美元对我们来说看起来是很多钱。像苹果一样，我们创造了便宜的东西，因此受欢迎，仅仅因为我们很穷。\n很多创业公司都有这种形式：有人出现，以原来成本的十分之一或百分之一制造东西，现有的竞争者无法跟随，因为他们甚至不想思考这种可能性的世界。例如，传统的长途电话公司甚至不想思考VoIP。（但不管怎样，它正在到来。）贫穷在这场游戏中有帮助，因为你个人的偏见指向技术进化的同一方向。\n无根性的优势与贫穷类似。年轻时你更容易移动——不仅因为你没有房子或很多财产，还因为你不太可能有认真的关系。这被证明是重要的，因为很多创业公司涉及某人搬家。\n例如，Kiko的创始人现在正在前往湾区的路上创办他们的下一个创业公司。对于他们想做的事情来说，这是更好的地方。他们很容易决定去，因为据我所知，他们中没有人有认真的女朋友，他们拥有的一切都可以装进一辆车里——或者更准确地说，要么能装进一辆车，要么足够破烂以至于不介意留下。\n他们至少在波士顿。如果他们在内布拉斯加，像Evan Williams在他们那个年龄时一样，会怎么样？最近有人写文章说Y Combinator的缺点是你必须搬家才能参与。不可能有其他方式。我们与创始人进行的对话必须亲自进行。我们一次资助十几个创业公司，不可能同时在十几个地方。但即使我们能以某种方式神奇地让人们免于搬家，我们也不会。让人们留在内布拉斯加对创始人没有好处。不是创业中心的地方对创业公司是有毒的。你可以从间接证据中看出这一点。从休斯顿、芝加哥或迈阿密成功创业的人均数量来看，你可以知道在那里开始创业有多难。我不知道是什么抑制了这些城镇的所有创业公司——可能是一百个微妙的小事情——但一定有原因。[2]\n也许这会改变。也许创业公司越来越便宜意味着它们可以在任何地方生存，而不仅仅是最有利的环境中。也许37signals是未来的模式。但也许不是。从历史上看，总有某些城镇是特定行业的中心，如果你不在其中之一，你就处于劣势。所以我猜测37signals是一个异常。我们在这里看到的是一个比\u0026quot;Web 2.0\u0026quot;古老得多的模式。\n也许湾地区的人均创业公司比迈阿密多的原因仅仅是因为那里有更多的创始人类型的人。成功的创业公司几乎从来不是由一个人创办的。通常它们始于一次对话，其中有人提到某件事对一家公司来说是个好主意，他的朋友说，\u0026ldquo;是的，那是个好主意，让我们试试。\u0026ldquo;如果你缺少那个说\u0026quot;让我们试试\u0026quot;的第二个人，创业公司就不会发生。这是本科生有优势的另一个领域。他们周围有很多愿意这么说的人。在一所好大学里，你与许多其他有抱负和技术头脑的人聚集在一起——可能比你一生中任何时候都要集中。如果你的原子核释放出一个中子，它很可能会击中另一个原子核。\n人们在Y Combinator问我们的首要问题是：我在哪里可以找到联合创始人？这是30岁开始创业的人的最大问题。他们在学校时认识很多好的联合创始人，但到了30岁，他们要么失去了联系，要么这些人被他们不想离开的工作束缚住了。\nViaweb在这方面也是个异常。虽然我们相对年长，但我们没有被令人印象深刻的工作束缚住。我当时试图成为一名艺术家，这不是很有约束力，而Robert虽然29岁，但由于1988年学术生涯中的小插曲，仍然在读研究生。所以可以说是Worm使Viaweb成为可能。否则Robert在那个年龄已经是初级教授了，他不会有时间和我一起疯狂的投机项目。\n人们问Y Combinator的大多数问题我们都有某种答案，但联合创始人问题没有。没有好的答案。联合创始人确实应该是你 already 认识的人。迄今为止，遇到他们的最佳地点是学校。你有大量聪明人样本；你可以比较他们在相同任务上的表现；每个人的生活都很流动。很多创业公司因此从学校发展而来。谷歌、雅虎和微软等都是由在学校认识的人创办的。（微软的情况是高中。）\n许多学生觉得他们应该等待并获得更多经验后再创办公司。如果其他条件都相等，他们应该。但其他条件并不像看起来那么相等。大多数学生没有意识到他们在创业公司最稀缺的成分，联合创始人方面多么富有。如果你等待太久，你可能会发现你的朋友现在 involved 在他们不想放弃的某个项目中。他们越优秀，这种情况越可能发生。\n缓解这个问题的一个方法可能是在你获得那些年经验的同时积极规划你的创业。当然，去工作或去读研究生或做任何事，但要定期聚会谋划，这样创业的想法在每个人的大脑中保持活跃。我不知道这是否有效，但尝试也无害。\n仅仅意识到你作为学生的优势就有帮助。你的一些同学可能会成为成功的创业公司创始人；在一所优秀的技术大学，这几乎是肯定的。那么是哪些人？如果我是你，我会寻找那些不仅聪明，而且无可救药的建设者。寻找那些不断开始项目，并且至少完成其中一些的人。这就是我们要寻找的。最重要的是，在学术资格甚至你申请的想法之上，我们寻找建造东西的人。\n联合创始人相遇的另一个地方是在工作中。比在学校少，但你可以做一些事情来提高几率。最重要的是，在有很多聪明年轻人的地方工作。另一个是为位于创业中心的公司工作。在创业公司到处都是的地方，更容易说服同事和你一起辞职。\n你可能还想看看你被雇用时签署的雇佣协议。大多数会说你在公司工作期间想到的任何想法都属于他们。在实践中，任何人很难证明你什么时候有什么想法，所以界限在代码上划定。如果你要创业，不要在仍然受雇时写任何代码。或者至少丢弃你在受雇期间写的任何代码，重新开始。并不是你的雇主会发现并起诉你。事情不会到那一步；投资者或收购者或（如果你如此幸运）承销商会首先找你麻烦。从t=0到你买游艇之间，会有人问你的代码是否合法属于其他人，你需要能够说不。[3]\n迄今为止我见过的最过分的雇佣协议是亚马逊的。除了通常关于拥有你想法的条款外，你还不能成为有另一位曾在亚马逊工作的创始人的创业公司的创始人——即使你不认识他们，甚至没有同时在那里工作。我怀疑他们会很难执行这个，但他们甚至尝试这是个坏迹象。还有很多其他地方可以工作；你不妨选择一个保留更多选择的地方。\n说到工作的好地方，当然有谷歌。但我注意到谷歌有些令人恐惧的地方：没有创业公司从那里出来。在这方面它是个黑洞。人们似乎太喜欢在谷歌工作而不愿离开。所以如果你希望有一天创办创业公司，迄今为止的证据表明你不应该在那里工作。\n我意识到这似乎是个奇怪的建议。如果他们让你的生活如此美好以至于你不想离开，为什么不在那里工作？因为，实际上，你可能得到了一个局部最大值。你需要一定的激活能量来创办创业公司。所以一个相当愉快的工作场所可能会诱使你无限期地停留，即使离开对你来说是有净收益的。[4]\n如果你想创业，最好的工作场所可能是一个创业公司。除了是合适的经验类型，不管怎样它会很快结束。你要么最终变得富有，那样问题解决了，或者创业公司被收购，那样在那里工作会变得糟糕，离开很容易，或者最可能的是，事情会失败，你又自由了。\n你最后的优势，无知，听起来不太有用。我故意用一个有争议的词来形容它；你也可以同样称之为天真。但它似乎是一种强大的力量。我的Y Combinator联合创始人Jessica Livingston即将出版一本采访创业公司创始人的书，我注意到其中有一个显著的模式。一个接一个的人说，如果他们知道会有多难，他们会太害怕而不敢开始。\n当它是其他愚蠢形式的天平砝码时，无知可能是有用的。在开始创业时有用，因为你比你意识到的更有能力。开始创业比你预期的难，但你也比你预期的更有能力，所以它们平衡了。\n大多数人看着像苹果这样的公司，会想，我怎么可能制造这样的东西？苹果是一个机构，而我只是一个人。但每个机构都曾经只是一小撮人在房间里决定开始某件事。机构是被创造出来的，由与你不同的人创造出来的。\n",
    "description": "",
    "tags": ["学生","创业","教育","创始人","大学"],
    "categories": [],
    "content": "→ English Version\n学生创业指南 2006年10月\n（本文基于在麻省理工学院的演讲。）\n直到最近，毕业生只有两个选择：找工作或读研究生。我认为第三种选择会越来越多：创办自己的创业公司。但这会有多普遍呢？\n我确信默认的选择永远会是找工作，但创业公司很可能变得和读研究生一样普遍。在90年代晚期，我的教授朋友们常常抱怨他们招不到研究生，因为所有本科生都去创业公司工作了。如果这种情况再次出现，我不会感到惊讶，但有一个不同：这一次他们会创办自己的公司，而不是去为别人的公司工作。\n最有抱负的学生现在会问：为什么要等到毕业？为什么不在大学期间就创业？事实上，为什么要上大学？为什么不直接创业？\n一年半前我做过一个演讲，我说雅虎、谷歌和微软创始人的平均年龄是24岁，如果研究生可以创业，为什么本科生不可以？我很高兴我把这表述为一个问题，因为现在我可以假装这不只是一个修辞问题。那时我无法想象为什么创业创始人应该有年龄下限。毕业是行政上的变化，不是生理上的。而且肯定有本科生在技术上和大多数研究生一样有能力。那么为什么本科生就不能像研究生一样能够创业呢？\n我现在意识到毕业时确实有些变化：你失去了一个巨大的失败借口。无论你的生活多么复杂，你会发现其他人，包括你的家人和朋友，都会忽略所有细节，认为你在任何给定时间只有一个职业。如果你在大学并且有暑假编程工作，你仍然被认为是一个学生。而如果你毕业并找到一份编程工作，每个人会立即认为你是一个程序员。\n在校期间创业的问题在于有一个内置的逃生舱。如果你在大三和大四之间的夏天创业，对每个人来说这都像是一个暑假工作。所以如果它没有进展，没什么大不了的；你在秋天和其他所有大四学生一起回到学校；没有人认为你是一个失败者，因为你的职业是学生，而你在那个方面没有失败。而如果你在毕业后一年创业，只要你没有被研究生院录取，创业对每个人来说就是你的职业。你现在是一个创业公司创始人，所以你必须在这方面做得很好。\n对几乎每个人来说，同辈的意见是最强大的动力——甚至比大多数创业公司创始人的名义目标，变得富有，还要强大。[1] 在每个资助周期开始一个月左右，我们有一个叫做原型日的活动，每个创业公司向其他公司展示他们到目前为止所做的事情。你可能认为他们不需要更多的动力。他们在为自己的酷新想法工作；他们有近期所需的资金；他们在玩一个只有两种结果的游戏：财富或失败。你认为这应该足够有动力了。然而，演示的前景使大多数人都疯狂地活动起来。\n即使你明确地为了变得富有而创业，你可能得到的钱在大多数时候看起来相当理论化。驱动你日常工作的是不想看起来很糟糕。\n你可能无法改变这一点。即使你能，我也不认为你会想；一个真正、真正不关心同辈怎么想的人可能是反社会者。所以你最多能做到的是把这种力量当作风，相应地设置你的船。如果你知道你的同辈会把你推向某个方向，选择好的同辈，定位自己让他们把你推向你喜欢的方向。\n毕业改变了主导风向，那些确实有影响。创业是如此困难，即使是成功的那些也是险胜。无论一个创业公司现在飞得多高，它可能在起落架上有几片叶子，是那些在跑道尽头勉强掠过的树留下的。在如此接近的比赛中，反对你的力量的最小增加就足以让你跌入失败的边缘。\n当我们刚开始创办Y Combinator时，我们鼓励人们还在大学时就开始创业。部分原因是Y Combinator开始时是一种夏季项目。我们保持了项目形式——我们每周一起吃晚饭被证明是个好主意——但我们现在决定官方立场应该是告诉人们等到毕业。\n这是否意味着你不能在大学创业？完全不是。Loopt的联合创始人Sam Altman在我们资助他们时刚刚完成大二，而Loopt可能是我们迄今为止资助的所有创业公司中最有前途的一个。但Sam Altman是一个非常不寻常的人。在大约见到他三分钟后，我记得我想\u0026quot;啊，所以这就是比尔·盖茨19岁时一定有的样子。\u0026quot;\n如果在大学期间创业可以成功，为什么我们告诉人们不要这样做？原因和那个可能虚构的小提琴家一样，每当有人请他评判某人的演奏时，他总是说他们没有足够的天赋成为专业演奏家。作为音乐家成功需要决心和天赋，所以这个答案对每个人来说都是正确的建议。不确定的人相信它并放弃，而足够决心的人会想\u0026quot;去他的，不管怎样我都会成功。\u0026quot;\n所以我们现在的官方政策只资助那些我们无法说服不去创业的本科生。坦率地说，如果你不确定，你应该等待。并不是说如果你现在不创业，所有创业机会都会消失。也许你正在研究的某个想法的窗口会关闭，但这不会是你最后一个想法。对于每个过时的想法，新的想法变得可行。从历史上看，创业机会只随时间增加。\n那样的话，你可能会问，为什么不等待更久？为什么不先工作一段时间，或者去读研究生，然后再创业？事实上，这可能是个好主意。如果我必须挑选创业公司创始人的 …"
  },{
    "title": "将思想转化为文字",
    "url": "/paul_graham/essays_zh/words/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n将思想转化为文字 2022年2月\n写关于某件事的文章，即使是你很了解的事情，通常表明你并不像你想象的那样了解它。将思想转化为文字是一个严峻的考验。你选择的第一句话通常是错误的；你必须一遍又一遍地重写句子，使它们完全正确。而且你的思想不仅会不精确，还会不完整。最终出现在文章中的一半思想是你在写作过程中想到的。事实上，这就是我写作的原因。\n一旦你发表了什么东西，惯例就是你写的是你在写作之前所想的。这些是你的想法，现在你已经表达了它们。但你知道这不是真的。你知道把你的思想转化为文字改变了它们。不仅仅是那些你发表了的思想。大概还有其他思想被证明太破碎而无法修复，那些你反而丢弃了。\n使写作如此严格的不仅仅是要将你的思想承诺给特定的词语。真正的考验是阅读你所写的内容。你必须假装是一个中立的读者，只知道你写的内容，不知道你脑中的内容。当他阅读你所写的内容时，看起来是否正确？看起来是否完整？如果你努力，你可以像完全陌生的人一样阅读你的写作，当你这样做时，消息通常是坏的。在我能够让文章通过陌生人之前需要很多次循环。但陌生人是理性的，所以如果你问他需要什么，你总是可以做到。如果他不满意是因为你没有提到x或者没有充分限定某个句子，那么你提到x或添加更多限定条件。现在满意了吗？这可能会让你失去一些好句子，但你必须对此表示认命。你只能让它们尽可能好，同时仍然满足陌生人的要求。\n我认为，这一点不会那么有争议。我认为这与任何试图写关于任何重要事情的人的经历相符。可能存在一些人的思想如此完美地形成，它们直接流入文字。但我从未认识过能够做到这一点的人，如果我遇到有人说他们能够做到，这似乎是他们的局限性的证据，而不是他们的能力。事实上，这是电影中的套路：那个声称有做某件困难事情的计划的人，当进一步被质疑时，他拍拍脑袋说\u0026quot;一切都在这里\u0026quot;。看电影的人都知道这意味着什么。最好的情况是计划是模糊和不完整的。很可能有一些未发现的缺陷使其完全无效。最好的情况是计划的计划。\n在精确定义的领域中，可以在你的头脑中形成完整的想法。例如，人们可以在脑中下棋。数学家可以在脑中做一些数学运算，尽管他们在写下证明之前似乎对一定长度的证明没有把握。但这似乎只有在你能用形式语言表达的想法中才有可能。[1] 可以说，这样的人正在将思想转化为头脑中的文字。我可以在某种程度上在脑中写文章。有时我会在走路或躺在床上时想出一个段落，最终版本几乎没有变化。但实际上我在这样做时是在写作。我正在做写作的心理部分；只是我的手指在我这样做时没有移动。[2]\n你可以在不写关于某件事情的情况下对它了解很多。你能否了解得如此之多，以至于你不会从试图解释你所知道的中学到更多？我不这么认为。我至少写了两件我了解的事情——Lisp黑客技术和创业公司——在这两种情况下，我从写作中学到了很多东西。在这两种情况下，都有一些我直到必须解释它们时才意识到的事情。而且我不认为我的经验是异常的。大量的知识是无意识的，专家无意识知识的比例如果不比初学者更高的话，至少也是一样的。\n我不是说写作是探索所有想法的最好方式。如果你有关于建筑的想法，大概最好的探索方式是建造实际的建筑物。我是说，无论你从以其他方式探索想法中学到多少，你仍然会从写作中学习新东西。\n将思想转化为文字当然不意味着写作，当然。你也可以用旧的方式，通过谈话来做到。但根据我的经验，写作是更严格的考验。你必须承诺一个单一的、最佳的词语序列。当你没有语气来承载意义时，更少的东西可以不说不。而且你可以以一种在对话中似乎过度的方式来集中注意力。我经常在一篇文章上花费2周时间，并重读草稿50次。如果你在对话中这样做，这似乎是某种精神障碍的证据。当然，如果你是懒惰的，写作和谈话都同样无用。但如果你想推动自己把事情做对，写作是更陡峭的山。[3]\n我花了这么长时间建立这个相当明显的观点的原因是，它引导出另一个许多人会发现令人震惊的观点。如果你的想法总是变得更精确、更完整，那么没有写过关于某个主题的人不会有完全形成的想法。而从不写作的人对任何重要的事情都没有完全形成的想法。\n对他们来说，感觉他们确实有，特别是如果他们没有批判性地审视自己思考的习惯。想法可以感觉完整。只有当你试图将它们转化为文字时，你才发现它们不是。所以如果你从不使你的思想经受那个测试，你不仅永远不会拥有完全形成的思想，而且永远不会意识到这一点。\n将思想转化为文字当然不能保证它们是正确的。远非如此。但虽然这不是充分条件，但它是一个必要条件。\n注释 [1] 机械和电路是形式语言。\n[2] 我在帕洛阿尔托街上走时想到了这句话。\n[3] 与某人谈话有两种意义：一种是严格的意义，即对话是语言的；一种是更一般的意义，它可以采取任何形式，包括写作。在极限情况下（例如塞内卡的信件），后一种意义上的对话变成了文章写作。\n在你写作时，与他人谈话（在任一意义上）可能非常有用。但言语对话永远不会比你在谈论你正在写作的事情时更严格。\n感谢 感谢特雷弗·布莱克威尔、帕特里克·克里森和罗伯特·莫里斯阅读草稿。\n",
    "description": "",
    "tags": ["写作","思想","语言","思考","沟通"],
    "categories": [],
    "content": "→ English Version\n将思想转化为文字 2022年2月\n写关于某件事的文章，即使是你很了解的事情，通常表明你并不像你想象的那样了解它。将思想转化为文字是一个严峻的考验。你选择的第一句话通常是错误的；你必须一遍又一遍地重写句子，使它们完全正确。而且你的思想不仅会不精确，还会不完整。最终出现在文章中的一半思想是你在写作过程中想到的。事实上，这就是我写作的原因。\n一旦你发表了什么东西，惯例就是你写的是你在写作之前所想的。这些是你的想法，现在你已经表达了它们。但你知道这不是真的。你知道把你的思想转化为文字改变了它们。不仅仅是那些你发表了的思想。大概还有其他思想被证明太破碎而无法修复，那些你反而丢弃了。\n使写作如此严格的不仅仅是要将你的思想承诺给特定的词语。真正的考验是阅读你所写的内容。你必须假装是一个中立的读者，只知道你写的内容，不知道你脑中的内容。当他阅读你所写的内容时，看起来是否正确？看起来是否完整？如果你努力，你可以像完全陌生的人一样阅读你的写作，当你这样做时，消息通常是坏的。在我能够让文章通过陌生人之前需要很多次循环。但陌生人是理性的，所以如果你问他需要什么，你总是可以做到。如果他不满意是因为你没有提到x或者没有充分限定某个句子，那么你提到x或添加更多限定条件。现在满意了吗？这可能会让你失去一些好句子，但你必须对此表示认命。你只能让它们尽可能好，同时仍然满足陌生人的要求。\n我认为，这一点不会那么有争议。我认为这与任何试图写关于任何重要事情的人的经历相符。可能存在一些人的思想如此完美地形成，它们直接流入文字。但我从未认识过能够做到这一点的人，如果我遇到有人说他们能够做到，这似乎是他们的局限性的证据，而不是他们的能力。事实上，这是电影中的套路：那个声称有做某件困难事情的计划的人，当进一步被质疑时，他拍拍脑袋说\u0026quot;一切都在这里\u0026quot;。看电影的人都知道这意味着什么。最好的情况是计划是模糊和不完整的。很可能有一些未发现的缺陷使其完全无效。最好的情况是计划的计划。\n在精确定义的领域中，可以在你的头脑中形成完整的想法。例如，人们可以在脑中下棋。数学家可以在脑中做一些数学运算，尽管他们在写下证明之前似乎对一定长度的证明没有把握。但这似乎只有在你能用形式语言表达的想法中才有可能。[1] 可以说，这样的人正在将思想转化为头脑中的文字。我可以在某种程度上在脑中写文章。有时我会在走路或躺在床上时想出一个段落，最终版本几乎没有变化。但实际上我在这样做时是在写作。我正在做写作的心理部分；只是我的手指在我这样做时没有移动。[2]\n你可以在不写关于某件事情的情况下对它了解很多。你能否了解得如此之多，以至于你不会从试图解释你所知道的中学到更多？我不这么认为。我至少写了两件我了解的事情——Lisp黑客技术和创业公司——在这两种情况下，我从写作中学到了很多东西。在这两种情况下，都有一些我直到必须解释它们时才意识到的事情。而且我不认为我的经验是异常的。大量的知识是无意识的，专家无意识知识的比例如果不比初学者更高的话，至少也是一样的。\n我不是说写作是探索所有想法的最好方式。如果你有关于建筑的想法，大概最好的探索方式是建造实际的建筑物。我是说，无论你从以其他方式探索想法中学到多少，你仍然会从写作中学习新东西。\n将思想转化为文字当然不意味着写作，当然。你也可以用旧的方式，通过谈话来做到。但根据我的经验，写作是更严格的考验。你必须承诺一个单一的、最佳的词语序列。当你没有语气来承载意义时，更少的东西可以不说不。而且你可以以一种在对话中似乎过度的方式来集中注意力。我经常在一篇文章上花费2周时间，并重读草稿50次。如果你在对话中这样做，这似乎是某种精神障碍的证据。当然，如果你是懒惰的，写作和谈话都同样无用。但如果你想推动自己把事情做对，写作是更陡峭的山。[3]\n我花了这么长时间建立这个相当明显的观点的原因是，它引导出另一个许多人会发现令人震惊的观点。如果你的想法总是变得更精确、更完整，那么没有写过关于某个主题的人不会有完全形成的想法。而从不写作的人对任何重要的事情都没有完全形成的想法。\n对他们来说，感觉他们确实有，特别是如果他们没有批判性地审视自己思考的习惯。想法可以感觉完整。只有当你试图将它们转化为文字时，你才发现它们不是。所以如果你从不使你的思想经受那个测试，你不仅永远不会拥有完全形成的思想，而且永远不会意识到这一点。\n将思想转化为文字当然不能保证它们是正确的。远非如此。但虽然这不是充分条件，但它是一个必要条件。\n注释 [1] 机械和电路是形式语言。\n[2] 我在帕洛阿尔托街上走时想到了这句话。\n[3] 与某人谈话有两种意义：一种是严格的意义，即对话是语言的；一种是更一般的意义，它可以采取任何形式，包括写作。在极限情况下（例如塞内卡的信件），后一种 …"
  },{
    "title": "将程序装在脑中",
    "url": "/paul_graham/essays_zh/head/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n将程序装在脑中 2007年8月\n一个优秀的程序员密集地工作在他自己的代码上时，可以像数学家把持一个他在解决的问题那样把持它。数学家不像学校教的那样在纸上工作来回答问题。他们在脑子里做得更多：他们试图充分理解问题空间，能够像漫步在你成长房屋的记忆中那样漫步其中。在最佳状态下，编程也是如此。你把整个程序装在脑中，你可以随意操纵它。\n这在项目开始时特别有价值，因为最初最重要的是能够改变你正在做的事情。不仅仅是以不同的方式解决问题，而是改变你正在解决的问题。\n你的代码是你对你正在探索的问题的理解。所以只有当你把代码装在脑中时，你才真正理解这个问题。\n把程序装进脑中并不容易。如果你离开一个项目几个月，当你回到它时，可能需要几天才能真正再次理解它。即使你在积极地处理一个程序，每天开始工作时也需要半小时才能把它装进脑中。这是最好的情况。在典型办公条件下工作的普通程序员永远不会进入这种模式。或者更戏剧性地说，在典型办公条件下工作的普通程序员永远不会真正理解他们正在解决的问题。\n即使是最优秀的程序员并不总是把他们正在处理的整个程序都装在脑中。但你可以做一些事情来帮助：\n避免干扰。 干扰对许多类型的工作都是有害的，但对编程尤其有害，因为程序员倾向于在他们能处理的细节极限上运作。\n干扰的危险不在于它持续多久，而在于它使你的大脑混乱的程度。程序员可以离开办公室去吃个三明治而不会失去脑中的代码。但错误的干扰可以在30秒内抹去你的大脑。\n奇怪的是，有计划的干扰可能比没有计划的干扰更糟。如果你知道一小时后有个会议，你甚至不会开始处理困难的事情。\n长时间工作。 因为每次开始处理一个程序都有固定成本，所以在几个长时段中工作比在许多短时段中工作更有效率。当然，总会有一个点，因为你累了而变得愚蠢。这因人而异。我听说过人们连续36小时编程，但我能管理的最多只有18小时左右，而且我在不超过12小时的块中工作效果最好。\n最佳状态不是你身体能忍受的极限。分解项目既有优势也有成本。有时当你在休息后回到问题时，你会发现你的潜意识留下了答案等着你。\n使用简洁的语言。 更强大的编程语言使程序更短。程序员似乎至少部分地用他们用来编写程序的语言来思考程序。语言越简洁，程序越短，就越容易装进脑中并保持在那里。\n你可以通过使用一种称为自底向上编程的风格来增强强大语言的效果，在这种风格中，你编写多层程序，较低的层作为其上层的编程语言。如果你正确地这样做，你只需要把最顶层装在脑中。\n不断重写你的程序。 重写程序通常会得到更清晰的设计。但即使不会，它也有优势：你必须完全理解一个程序才能重写它，所以没有更好的方法把它装进脑中。\n写可重读的代码。 所有程序员都知道写可读代码是好的。但你自己是最重要的读者。特别是在开始时；原型是与自己的对话。当为自己写作时，你有不同的优先事项。如果为别人写作，你可能不想让代码太密集。程序的某些部分可能最容易读，如果你把东西摊开，像一本入门教科书。而如果你写代码是为了让它容易重新装进脑中，最好追求简洁。\n小组工作。 当你在脑中操纵一个程序时，你的视野倾向于停在你拥有的代码边缘。其他部分你理解得不够好，更重要的是，不能随意处理。所以程序员数量越少，项目就能越完全地变异。如果只有一个程序员，通常开始时是这样，你可以做全面重新设计。\n不要让多个人编辑同一段代码。 你永远不会像理解自己的代码那样理解别人的代码。无论你多么彻底地读过它，你只是读了它，而不是写了它。所以如果一段代码由多个作者编写，他们中没有人像单个作者那样理解它。\n当然你不能安全地重新设计别人正在处理的东西。不仅仅是你必须请求许可。你甚至不让自己考虑这样的事情。重新设计有几个作者的代码就像改变法律；重新设计你独自控制的代码就像看到模糊图像的另一种解释。\n如果你想让几个人在一个项目上工作，把它分成组件，每个给一个人。\n从小开始。 随着你对程序越来越熟悉，它变得更容易装在脑中。一旦你确信你已经完全探索了某些部分，你就可以开始把它们当作黑盒处理。但当你开始处理一个项目时，你被迫看到一切。如果你开始的问题太大，你可能永远无法完全把握它。所以如果你需要写一个大的、复杂的程序，开始的最佳方式可能不是为它写规范，而是写一个解决子集问题的原型。无论计划有什么优势，它们往往被能够把程序装在脑中的优势所抵消。\n程序员们经常偶然做到这八点，这很引人注目。有人有了一个新项目的想法，但因为不是正式批准的，他必须在下班时间做——结果证明更有生产力，因为没有干扰。受到他对新项目的热情驱使，他连续工作许多小时。因为它最初只是一个实验，他使用的是\u0026quot;脚本\u0026quot;语言而不是\u0026quot;生产\u0026quot;语言——实际上它强大得多。他完全重写程序几次；这对正式项目是不合理的，但这是爱的劳动，他想要它完美。而且因为除了他没有人会看到它，他省略了除笔记类型外的任何注释。他被迫在小团队中工作，因为他要么还没有告诉任何人这个想法，要么它看起来如此无望以至于不允许其他人在其上工作。即使有一个团队，他们也不能让多个人编辑同一段代码，因为它变化太快，那是不可能的。项目从小开始是因为想法一开始很小；他只是有一些很酷的黑客技巧想试试。\n更引人注目的是有多少正式批准的项目设法把这八件事都做错了。事实上，如果你看看大多数组织中软件编写的方式，几乎就像他们在故意做错事情。在某种意义上，他们确实如此。自从有组织以来，其定义性品质之一就是把个人当作可互换的部件。这对更可并行化的任务很有效，比如打仗。在历史上大部分时间里，一支训练有素的专业士兵军队可以指望打败一群个人战士，无论多么勇敢。但拥有想法不是很可并行化的。而程序就是：想法。\n组织不喜欢依赖个人天才的想法不仅仅是真的，它是同义反复。不这样做是组织定义的一部分。至少是我们当前组织概念的一部分。\n也许我们可以定义一种新型的组织，结合个人的努力而不要求他们可互换。可以说市场就是这种形式的组织，尽管把市场描述为退化情况可能更准确——当组织不可能时默认得到的情况。\n可能我们能做到的最好的是某种hack，比如让一个组织的编程部分以不同于其他部分的方式工作。也许最佳解决方案是大公司甚至不尝试内部开发想法，而只是购买它们。但无论解决方案是什么，第一步是意识到存在问题。\u0026ldquo;软件公司\u0026quot;这个短语本身就有矛盾。这两个词在相反的方向上拉扯。任何大型组织中的优秀程序员都会与之冲突，因为组织的设计是为了防止程序员追求的目标。\n优秀的程序员无论如何都能完成很多事情。但这往往需要对雇佣他们的组织进行实际上反抗的行为。如果更多的人理解程序员的行为方式是由他们工作的需求驱动的，这可能会有所帮助。他们长时间工作，期间推掉所有其他义务，直接投入编程而不是先写规范，重写已经工作的代码，这不是因为他们不负责任。他们更喜欢独自工作，或者对探头说你好的人咆哮，这不是因为他们不友好。这个表面上随机的令人讨厌习惯集合有一个单一的解释：将程序装在脑中的力量。\n无论理解这一点是否能帮助大型组织，它肯定能帮助他们的竞争对手。大公司的最弱点是他们不让个别程序员做出伟大的工作。所以如果你是一个小创业公司，这是攻击他们的地方。接手那些必须在一个大脑中解决的问题。\n感谢Sam Altman、David Greenspan、Aaron Iba、Jessica Livingston、Robert Morris、Peter Norvig、Lisa Randall、Emmett Shear、Sergei Tsarev和Stephen Wolfram阅读本文的草稿。\n",
    "description": "",
    "tags": ["编程","生产力","软件开发","编程","专注"],
    "categories": [],
    "content": "→ English Version\n将程序装在脑中 2007年8月\n一个优秀的程序员密集地工作在他自己的代码上时，可以像数学家把持一个他在解决的问题那样把持它。数学家不像学校教的那样在纸上工作来回答问题。他们在脑子里做得更多：他们试图充分理解问题空间，能够像漫步在你成长房屋的记忆中那样漫步其中。在最佳状态下，编程也是如此。你把整个程序装在脑中，你可以随意操纵它。\n这在项目开始时特别有价值，因为最初最重要的是能够改变你正在做的事情。不仅仅是以不同的方式解决问题，而是改变你正在解决的问题。\n你的代码是你对你正在探索的问题的理解。所以只有当你把代码装在脑中时，你才真正理解这个问题。\n把程序装进脑中并不容易。如果你离开一个项目几个月，当你回到它时，可能需要几天才能真正再次理解它。即使你在积极地处理一个程序，每天开始工作时也需要半小时才能把它装进脑中。这是最好的情况。在典型办公条件下工作的普通程序员永远不会进入这种模式。或者更戏剧性地说，在典型办公条件下工作的普通程序员永远不会真正理解他们正在解决的问题。\n即使是最优秀的程序员并不总是把他们正在处理的整个程序都装在脑中。但你可以做一些事情来帮助：\n避免干扰。 干扰对许多类型的工作都是有害的，但对编程尤其有害，因为程序员倾向于在他们能处理的细节极限上运作。\n干扰的危险不在于它持续多久，而在于它使你的大脑混乱的程度。程序员可以离开办公室去吃个三明治而不会失去脑中的代码。但错误的干扰可以在30秒内抹去你的大脑。\n奇怪的是，有计划的干扰可能比没有计划的干扰更糟。如果你知道一小时后有个会议，你甚至不会开始处理困难的事情。\n长时间工作。 因为每次开始处理一个程序都有固定成本，所以在几个长时段中工作比在许多短时段中工作更有效率。当然，总会有一个点，因为你累了而变得愚蠢。这因人而异。我听说过人们连续36小时编程，但我能管理的最多只有18小时左右，而且我在不超过12小时的块中工作效果最好。\n最佳状态不是你身体能忍受的极限。分解项目既有优势也有成本。有时当你在休息后回到问题时，你会发现你的潜意识留下了答案等着你。\n使用简洁的语言。 更强大的编程语言使程序更短。程序员似乎至少部分地用他们用来编写程序的语言来思考程序。语言越简洁，程序越短，就越容易装进脑中并保持在那里。\n你可以通过使用一种称为自底向上编程的风格来增强强大语言的效果，在这种风格中，你编写多层程序，较低的层作为其上层的编程语言。如果你正确地这样做，你只需要把最顶层装在脑中。\n不断重写你的程序。 重写程序通常会得到更清晰的设计。但即使不会，它也有优势：你必须完全理解一个程序才能重写它，所以没有更好的方法把它装进脑中。\n写可重读的代码。 所有程序员都知道写可读代码是好的。但你自己是最重要的读者。特别是在开始时；原型是与自己的对话。当为自己写作时，你有不同的优先事项。如果为别人写作，你可能不想让代码太密集。程序的某些部分可能最容易读，如果你把东西摊开，像一本入门教科书。而如果你写代码是为了让它容易重新装进脑中，最好追求简洁。\n小组工作。 当你在脑中操纵一个程序时，你的视野倾向于停在你拥有的代码边缘。其他部分你理解得不够好，更重要的是，不能随意处理。所以程序员数量越少，项目就能越完全地变异。如果只有一个程序员，通常开始时是这样，你可以做全面重新设计。\n不要让多个人编辑同一段代码。 你永远不会像理解自己的代码那样理解别人的代码。无论你多么彻底地读过它，你只是读了它，而不是写了它。所以如果一段代码由多个作者编写，他们中没有人像单个作者那样理解它。\n当然你不能安全地重新设计别人正在处理的东西。不仅仅是你必须请求许可。你甚至不让自己考虑这样的事情。重新设计有几个作者的代码就像改变法律；重新设计你独自控制的代码就像看到模糊图像的另一种解释。\n如果你想让几个人在一个项目上工作，把它分成组件，每个给一个人。\n从小开始。 随着你对程序越来越熟悉，它变得更容易装在脑中。一旦你确信你已经完全探索了某些部分，你就可以开始把它们当作黑盒处理。但当你开始处理一个项目时，你被迫看到一切。如果你开始的问题太大，你可能永远无法完全把握它。所以如果你需要写一个大的、复杂的程序，开始的最佳方式可能不是为它写规范，而是写一个解决子集问题的原型。无论计划有什么优势，它们往往被能够把程序装在脑中的优势所抵消。\n程序员们经常偶然做到这八点，这很引人注目。有人有了一个新项目的想法，但因为不是正式批准的，他必须在下班时间做——结果证明更有生产力，因为没有干扰。受到他对新项目的热情驱使，他连续工作许多小时。因为它最初只是一个实验，他使用的是\u0026quot;脚本\u0026quot;语言而不是\u0026quot;生产\u0026quot;语言——实际上它强大得多。他完全重写程序几次；这对正式项目是不合理的，但这是爱的劳动，他想要它完美。而 …"
  },{
    "title": "岛屿测试",
    "url": "/paul_graham/essays_zh/island/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n岛屿测试 2006年7月\n我发现了一个方便的测试方法，可以弄清楚你对什么上瘾。想象你要在缅因州海岸外的一个小岛上朋友家度周末。岛上没有商店，你在那里期间不能离开。而且，你从未去过这个房子，所以不能假设它会比普通房子有更多的东西。\n除了衣物和洗漱用品，你会特意打包带什么东西？那就是你对什么上瘾。例如，如果你发现自己带了一瓶伏特加（以防万一），你可能想要停下来想一想。\n对我来说，这个清单是四样东西：书、耳塞、笔记本和笔。\n如果我想到的话，我可能会带其他东西，比如音乐或茶，但没有它们我也能生活。我对咖啡因没有那么上瘾，不至于仅仅一个周末就冒险让房子里没有茶。\n安静是另一回事。我意识到带耳塞去缅因州海岸外的小岛旅行似乎有点古怪。如果说任何地方应该是安静的，那就是那里。但如果隔壁房间的人打鼾怎么办？如果有孩子在打篮球怎么办？（砰、砰、砰\u0026hellip;砰。）为什么要冒险？耳塞很小。\n有时我可以在噪音中思考。如果我在某个项目上已经有了动力，我可以在嘈杂的地方工作。我可以在机场编辑文章或调试代码。但机场并没有那么糟糕：大部分噪音是白色的。我无法忍受的是墙那边传来情景喜剧的声音，或者街上汽车播放砰砰音乐。\n当然还有另一种思考，当你开始新事物时，需要完全安静。你永远不知道什么时候会需要这种思考。带着耳塞总是好的。\n笔记本和笔可以说是专业设备。虽然实际上它们有类似药物的东西，从某种意义上说，它们的主要目的是让我感觉更好。我几乎从来不回去读我在笔记本上写的东西。只是如果不能写下来，担心记住一个想法会妨碍产生下一个想法。笔和纸能引导想法。\n我发现最好的笔记本是一家叫做Miquelrius的公司制造的。我用他们的最小尺寸，大约2.5×4英寸。在这么窄的页面上写字的秘诀是只有当空间用完时才断词，像拉丁文铭文一样。我用最便宜的塑料Bic圆珠笔，部分原因是它们的粘性墨水不会渗透页面，部分原因是我不担心丢失它们。\n我大约三年前才开始带笔记本。在那之前我用我能找到的任何纸片。但纸片的问题是没有顺序。在笔记本里，你可以通过看周围的页面来猜测一个涂鸦是什么意思。在纸片时代，我不断发现几年前写的笔记，如果我能弄明白是什么意思，可能会说一些我需要记住的东西。\n至于书，我知道房子里可能会有东西可读。平均来说，我在旅行中带四本书，只读其中一本，因为我在途中找到新书可读。真的带书是保险。\n我意识到对书的依赖并不完全是好事——我需要它们是为了分散注意力。我在旅行中带的书往往很正当，那种可能在大学课程中被指定阅读的东西。但我知道我的动机并不正当。我带书是因为如果世界变得无聊，我需要能够潜入某个作家提炼的另一个世界。就像当你知道应该吃水果时吃果酱一样。\n在某个时候我会不带书。有一次我在一些陡峭的山里散步，决定如果无聊的话，我宁愿只是思考，也不愿携带任何不必要的重量。情况并不那么糟。我发现我可以通过有想法而不是读别人的东西来娱乐自己。如果你停止吃果酱，水果开始尝起来更好。\n所以也许我会在未来的某次旅行中尝试不带书。然而，他们将不得不从我冰冷的、死去的耳朵里撬出耳塞。\n西班牙语翻译 | 日语翻译\n",
    "description": "",
    "tags": ["岛屿测试","成瘾","习惯","极简主义","阅读","写作","旅行"],
    "categories": [],
    "content": "→ English Version\n岛屿测试 2006年7月\n我发现了一个方便的测试方法，可以弄清楚你对什么上瘾。想象你要在缅因州海岸外的一个小岛上朋友家度周末。岛上没有商店，你在那里期间不能离开。而且，你从未去过这个房子，所以不能假设它会比普通房子有更多的东西。\n除了衣物和洗漱用品，你会特意打包带什么东西？那就是你对什么上瘾。例如，如果你发现自己带了一瓶伏特加（以防万一），你可能想要停下来想一想。\n对我来说，这个清单是四样东西：书、耳塞、笔记本和笔。\n如果我想到的话，我可能会带其他东西，比如音乐或茶，但没有它们我也能生活。我对咖啡因没有那么上瘾，不至于仅仅一个周末就冒险让房子里没有茶。\n安静是另一回事。我意识到带耳塞去缅因州海岸外的小岛旅行似乎有点古怪。如果说任何地方应该是安静的，那就是那里。但如果隔壁房间的人打鼾怎么办？如果有孩子在打篮球怎么办？（砰、砰、砰\u0026hellip;砰。）为什么要冒险？耳塞很小。\n有时我可以在噪音中思考。如果我在某个项目上已经有了动力，我可以在嘈杂的地方工作。我可以在机场编辑文章或调试代码。但机场并没有那么糟糕：大部分噪音是白色的。我无法忍受的是墙那边传来情景喜剧的声音，或者街上汽车播放砰砰音乐。\n当然还有另一种思考，当你开始新事物时，需要完全安静。你永远不知道什么时候会需要这种思考。带着耳塞总是好的。\n笔记本和笔可以说是专业设备。虽然实际上它们有类似药物的东西，从某种意义上说，它们的主要目的是让我感觉更好。我几乎从来不回去读我在笔记本上写的东西。只是如果不能写下来，担心记住一个想法会妨碍产生下一个想法。笔和纸能引导想法。\n我发现最好的笔记本是一家叫做Miquelrius的公司制造的。我用他们的最小尺寸，大约2.5×4英寸。在这么窄的页面上写字的秘诀是只有当空间用完时才断词，像拉丁文铭文一样。我用最便宜的塑料Bic圆珠笔，部分原因是它们的粘性墨水不会渗透页面，部分原因是我不担心丢失它们。\n我大约三年前才开始带笔记本。在那之前我用我能找到的任何纸片。但纸片的问题是没有顺序。在笔记本里，你可以通过看周围的页面来猜测一个涂鸦是什么意思。在纸片时代，我不断发现几年前写的笔记，如果我能弄明白是什么意思，可能会说一些我需要记住的东西。\n至于书，我知道房子里可能会有东西可读。平均来说，我在旅行中带四本书，只读其中一本，因为我在途中找到新书可读。真的带书是保险。\n我意识到对书的依赖并不完全是好事——我需要它们是为了分散注意力。我在旅行中带的书往往很正当，那种可能在大学课程中被指定阅读的东西。但我知道我的动机并不正当。我带书是因为如果世界变得无聊，我需要能够潜入某个作家提炼的另一个世界。就像当你知道应该吃水果时吃果酱一样。\n在某个时候我会不带书。有一次我在一些陡峭的山里散步，决定如果无聊的话，我宁愿只是思考，也不愿携带任何不必要的重量。情况并不那么糟。我发现我可以通过有想法而不是读别人的东西来娱乐自己。如果你停止吃果酱，水果开始尝起来更好。\n所以也许我会在未来的某次旅行中尝试不带书。然而，他们将不得不从我冰冷的、死去的耳朵里撬出耳塞。\n西班牙语翻译 | 日语翻译\n"
  },{
    "title": "工会的另一种理论",
    "url": "/paul_graham/essays_zh/unions/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n工会的另一种理论 2007年5月\n那些担心贫富差距不断扩大的人，通常会把二十世纪中期视为黄金时代。在那个时代，我们有大量高薪的工会制造业工作，提高了中位数收入。我不会完全把高薪工会工作称为神话，但我认为那些纠结于此的人过于解读它了。\n奇怪的是，正是与创业公司一起工作的经历让我明白了高薪工会工作的来源。在快速增长的市场中，你不会太担心效率。更重要的是快速成长。如果有一些普通的问题阻碍了你，有一个简单但有点昂贵的解决方案，那就接受它，继续处理更重要的事情。eBay并不是通过为服务器支付比竞争对手更少的费用而获胜的。\n尽管现在可能很难想象，但在二十世纪中期，制造业是一个成长型行业。这是一个从汽车到糖果等各种小公司被整合成具有全国影响力和巨大规模经济的新式公司的时代。你必须快速成长，否则就会死亡。工人对这些公司来说，就像互联网创业公司的服务器一样。可靠的供应比低成本更重要。\n如果你看一个1950年代汽车高管的头脑，态度一定是：当然，给他们任何他们要求的，只要新车型不被延迟就行。\n换句话说，那些工人并没有得到他们工作价值的报酬。在当时的情况下，公司坚持支付他们那么少的工资会很愚蠢。\n如果你想要这个现象的一个争议较小的例子，问问任何在互联网泡沫期间作为顾问建设网站的人。在九十年代末，你可以为建造最微不足道的东西获得巨额报酬。然而，当时在那里的人是否期待那些日子会回来？我怀疑。当然，每个人都意识到那只是一个暂时的异常。\n工会时代似乎是同类异常，只是持续时间更长，并且混合了大量意识形态，阻止人们像对待泡沫期间的咨询那样冷静地看待它。\n基本上，工会只是Razorfish。\n那些认为劳工运动是由英勇的工会组织者创造的人有一个问题需要解释：为什么工会现在在萎缩？他们最多只能退回到生活在堕落文明中的人们的默认解释。我们的祖先是巨人。二十世纪初期的工人一定具有今天所缺乏的道德勇气。\n事实上，有一个更简单的解释。二十世纪初只是一个快速增长中的创业公司为基础设施过度付费。而我们现在不是一个堕落的人民，放弃了那些产生高薪工会工作的神秘崇高原则。我们只是生活在一个快速增长公司在不同事情上过度花费的时代。\n",
    "description": "",
    "tags": ["工会","经济学","劳工","历史","商业","创业"],
    "categories": [],
    "content": "→ English Version\n工会的另一种理论 2007年5月\n那些担心贫富差距不断扩大的人，通常会把二十世纪中期视为黄金时代。在那个时代，我们有大量高薪的工会制造业工作，提高了中位数收入。我不会完全把高薪工会工作称为神话，但我认为那些纠结于此的人过于解读它了。\n奇怪的是，正是与创业公司一起工作的经历让我明白了高薪工会工作的来源。在快速增长的市场中，你不会太担心效率。更重要的是快速成长。如果有一些普通的问题阻碍了你，有一个简单但有点昂贵的解决方案，那就接受它，继续处理更重要的事情。eBay并不是通过为服务器支付比竞争对手更少的费用而获胜的。\n尽管现在可能很难想象，但在二十世纪中期，制造业是一个成长型行业。这是一个从汽车到糖果等各种小公司被整合成具有全国影响力和巨大规模经济的新式公司的时代。你必须快速成长，否则就会死亡。工人对这些公司来说，就像互联网创业公司的服务器一样。可靠的供应比低成本更重要。\n如果你看一个1950年代汽车高管的头脑，态度一定是：当然，给他们任何他们要求的，只要新车型不被延迟就行。\n换句话说，那些工人并没有得到他们工作价值的报酬。在当时的情况下，公司坚持支付他们那么少的工资会很愚蠢。\n如果你想要这个现象的一个争议较小的例子，问问任何在互联网泡沫期间作为顾问建设网站的人。在九十年代末，你可以为建造最微不足道的东西获得巨额报酬。然而，当时在那里的人是否期待那些日子会回来？我怀疑。当然，每个人都意识到那只是一个暂时的异常。\n工会时代似乎是同类异常，只是持续时间更长，并且混合了大量意识形态，阻止人们像对待泡沫期间的咨询那样冷静地看待它。\n基本上，工会只是Razorfish。\n那些认为劳工运动是由英勇的工会组织者创造的人有一个问题需要解释：为什么工会现在在萎缩？他们最多只能退回到生活在堕落文明中的人们的默认解释。我们的祖先是巨人。二十世纪初期的工人一定具有今天所缺乏的道德勇气。\n事实上，有一个更简单的解释。二十世纪初只是一个快速增长中的创业公司为基础设施过度付费。而我们现在不是一个堕落的人民，放弃了那些产生高薪工会工作的神秘崇高原则。我们只是生活在一个快速增长公司在不同事情上过度花费的时代。\n"
  },{
    "title": "布拉德利的幽灵",
    "url": "/paul_graham/essays_zh/polls/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n布拉德利的幽灵 2004年11月\n很多人现在在写为什么克里失败了。这里我想探讨一个更具体的问题：为什么出口民调如此错误？\n在俄亥俄州，克里最终以49-51失败，出口民调却给了他52-48的胜利。这不仅仅是随机错误。在每个摇摆州，他们都高估了克里的选票。在佛罗里达州，布什最终以52-47获胜，出口民调预测势均力敌。\n（这些不是早期数字。它们来自东部时间大约午夜，俄亥俄州和佛罗里达州投票结束后很久。然而到第二天下午，网上的出口民调数字与实际结果相符。我能想象这种情况发生的唯一方式是，负责出口民调的人在看到实际结果后篡改了数据。但那是另一个问题。）\n发生了什么？问题的根源可能是布拉德利效应的一种变体。这个术语是在汤姆·布拉德利这位黑人洛杉矶市长尽管在民调中领先优势却在加州州长选举中失败后发明的。显然，选民害怕说他们计划投票反对他，以免他们的动机被（也许正确地）怀疑。\n今年出口民调可能发生了类似情况。理论上，出口民调应该非常准确。你不是在问人们会做什么。你在问他们刚刚做了什么。\n问这个怎么会出错？因为有些人不回应。为了获得真正随机的样本，民意调查员会说，询问离开投票场的每第20个人他们投票给了谁。但不是每个人都想回答。民意调查员不能简单地忽略那些不愿回答的人，否则他们的样本就不再随机了。所以他们所做的，显然是记下这个人的年龄、种族和性别，并据此猜测他们投票给了谁。\n只要人们投票给谁和他们是否愿意谈论之间没有相关性，这就有效。但今年可能有相关性。可能是相当多投票给布什的人不想这么说。\n为什么不？因为美国人的保守程度超过他们愿意承认的程度。这个国家精英的价值观，至少目前，是NPR价值观。普通人，正如我认为共和党和民主党都会同意的，在社会问题上更保守。虽然有些人公开炫耀他们不分享精英意见的事实，但其他人对此感到有点紧张，好像他们有不良餐桌礼仪。\n例如，根据当前的NPR价值观，你不能说任何可能被视为对同性恋者贬损的话。这样做就是\u0026quot;恐同\u0026quot;。然而，大量美国人深信宗教，而圣经在同性恋问题上相当明确。他们该怎么办？我认为许多人做的是保留他们的意见，但只保留在自己心里。\n他们知道自己相信什么，但他们也知道他们应该相信什么。所以当一个陌生人（例如，民意调查员）询问他们对同性婚姻等事情的意见时，他们不会总是说出他们真正想的。\n当精英的价值观是自由派时，民意调查倾向于低估普通选民的保守程度。这似乎是解释为什么今年出口民调如此错误的主要理论。NPR价值观说应该投票给克里。所以所有投票给克里的人都觉得这样做是道德的，并急于告诉民意调查员他们这样做了。没有人投票给克里是作为一种安静的反抗行为。\n支持女性总统\n日语翻译\n如果你喜欢这个，你可能也喜欢黑客与画家。\n",
    "description": "",
    "tags": ["民意调查","政治","社会保守主义","选举","媒体","文化"],
    "categories": [],
    "content": "→ English Version\n布拉德利的幽灵 2004年11月\n很多人现在在写为什么克里失败了。这里我想探讨一个更具体的问题：为什么出口民调如此错误？\n在俄亥俄州，克里最终以49-51失败，出口民调却给了他52-48的胜利。这不仅仅是随机错误。在每个摇摆州，他们都高估了克里的选票。在佛罗里达州，布什最终以52-47获胜，出口民调预测势均力敌。\n（这些不是早期数字。它们来自东部时间大约午夜，俄亥俄州和佛罗里达州投票结束后很久。然而到第二天下午，网上的出口民调数字与实际结果相符。我能想象这种情况发生的唯一方式是，负责出口民调的人在看到实际结果后篡改了数据。但那是另一个问题。）\n发生了什么？问题的根源可能是布拉德利效应的一种变体。这个术语是在汤姆·布拉德利这位黑人洛杉矶市长尽管在民调中领先优势却在加州州长选举中失败后发明的。显然，选民害怕说他们计划投票反对他，以免他们的动机被（也许正确地）怀疑。\n今年出口民调可能发生了类似情况。理论上，出口民调应该非常准确。你不是在问人们会做什么。你在问他们刚刚做了什么。\n问这个怎么会出错？因为有些人不回应。为了获得真正随机的样本，民意调查员会说，询问离开投票场的每第20个人他们投票给了谁。但不是每个人都想回答。民意调查员不能简单地忽略那些不愿回答的人，否则他们的样本就不再随机了。所以他们所做的，显然是记下这个人的年龄、种族和性别，并据此猜测他们投票给了谁。\n只要人们投票给谁和他们是否愿意谈论之间没有相关性，这就有效。但今年可能有相关性。可能是相当多投票给布什的人不想这么说。\n为什么不？因为美国人的保守程度超过他们愿意承认的程度。这个国家精英的价值观，至少目前，是NPR价值观。普通人，正如我认为共和党和民主党都会同意的，在社会问题上更保守。虽然有些人公开炫耀他们不分享精英意见的事实，但其他人对此感到有点紧张，好像他们有不良餐桌礼仪。\n例如，根据当前的NPR价值观，你不能说任何可能被视为对同性恋者贬损的话。这样做就是\u0026quot;恐同\u0026quot;。然而，大量美国人深信宗教，而圣经在同性恋问题上相当明确。他们该怎么办？我认为许多人做的是保留他们的意见，但只保留在自己心里。\n他们知道自己相信什么，但他们也知道他们应该相信什么。所以当一个陌生人（例如，民意调查员）询问他们对同性婚姻等事情的意见时，他们不会总是说出他们真正想的。\n当精英的价值观是自由派时，民意调查倾向于低估普通选民的保守程度。这似乎是解释为什么今年出口民调如此错误的主要理论。NPR价值观说应该投票给克里。所以所有投票给克里的人都觉得这样做是道德的，并急于告诉民意调查员他们这样做了。没有人投票给克里是作为一种安静的反抗行为。\n支持女性总统\n日语翻译\n如果你喜欢这个，你可能也喜欢黑客与画家。\n"
  },{
    "title": "平板电脑",
    "url": "/paul_graham/essays_zh/tablets/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n平板电脑 2010年12月\n我最近在想，没有一个通用术语来称呼iPhone、iPad和运行Android的相应东西是多么不便。最接近通用术语的似乎是\u0026quot;移动设备\u0026quot;，但这（a）适用于任何手机，（b）并没有真正捕捉到iPad的独特之处。\n几秒钟后我突然想到，我们最终会称这些东西为平板电脑。我们甚至考虑称它们为\u0026quot;移动设备\u0026quot;的唯一原因是iPhone先于iPad。如果iPad先出来，我们不会认为iPhone是手机；我们会认为它是小到可以举到耳边的平板电脑。\niPhone与其说是手机，不如说是手机的替代品。这是一个重要的区别，因为它将成为一个常见模式的早期实例。我们周围的许多（如果不是大多数）专用物品将被运行在平板电脑上的应用程序替代。\n在GPS、音乐播放器和相机等情况中这已经很清楚了。但我认为会有多少东西被替代会让人们感到惊讶。我们资助了一家正在替代钥匙的创业公司。你可以轻松改变字体大小的事实意味着iPad有效地替代了阅读眼镜。如果我通过用加速度计玩一些聪明的技巧甚至能替代浴室秤，我不会感到惊讶。\n在单个设备上用软件做事的优势如此之大，以至于任何能变成软件的东西都会。所以在接下来几年里，创业公司的好方法将是环顾四周，寻找人们尚未意识到可以通过平板电脑应用变得不必要的东西。\n1938年，巴克敏斯特·富勒创造了ephemeralization这个词来描述物理机械越来越被我们现在称为软件所取代的趋势。平板电脑将接管世界的原因不是（仅仅）史蒂夫·乔布斯和公司是工业设计巫师，而是因为他们背后有这股力量。iPhone和iPad有效地钻了一个洞，将使ephemeralization流入许多新领域。任何研究过技术历史的人都不会想低估这股力量。\n我担心苹果背后有这股力量可能拥有的权力。我不想看到另一个像80年代和90年代微软那样的客户端单一文化时代。但如果ephemeralization是驱动平板电脑传播的主要力量之一，那表明了一种与苹果竞争的方法：成为它的更好平台。\n事实证明，苹果平板电脑中有加速度计是一件好事。开发人员以苹果从未想象过的方式使用加速度计。这就是平台的本质。工具越多功能，你就越无法预测人们如何使用它。所以平板电脑制造商应该思考：我们还能在里面放什么？不仅仅是硬件，还有软件。我们还能给开发人员访问什么？给黑客一英寸，他们会带你一英里。\n感谢Sam Altman、Paul Buchheit、Jessica Livingston和Robert Morris阅读本文的草稿。\n",
    "description": "",
    "tags": ["平板电脑","移动设备","软件"," ephemeralization","苹果","iPhone","iPad"],
    "categories": [],
    "content": "→ English Version\n平板电脑 2010年12月\n我最近在想，没有一个通用术语来称呼iPhone、iPad和运行Android的相应东西是多么不便。最接近通用术语的似乎是\u0026quot;移动设备\u0026quot;，但这（a）适用于任何手机，（b）并没有真正捕捉到iPad的独特之处。\n几秒钟后我突然想到，我们最终会称这些东西为平板电脑。我们甚至考虑称它们为\u0026quot;移动设备\u0026quot;的唯一原因是iPhone先于iPad。如果iPad先出来，我们不会认为iPhone是手机；我们会认为它是小到可以举到耳边的平板电脑。\niPhone与其说是手机，不如说是手机的替代品。这是一个重要的区别，因为它将成为一个常见模式的早期实例。我们周围的许多（如果不是大多数）专用物品将被运行在平板电脑上的应用程序替代。\n在GPS、音乐播放器和相机等情况中这已经很清楚了。但我认为会有多少东西被替代会让人们感到惊讶。我们资助了一家正在替代钥匙的创业公司。你可以轻松改变字体大小的事实意味着iPad有效地替代了阅读眼镜。如果我通过用加速度计玩一些聪明的技巧甚至能替代浴室秤，我不会感到惊讶。\n在单个设备上用软件做事的优势如此之大，以至于任何能变成软件的东西都会。所以在接下来几年里，创业公司的好方法将是环顾四周，寻找人们尚未意识到可以通过平板电脑应用变得不必要的东西。\n1938年，巴克敏斯特·富勒创造了ephemeralization这个词来描述物理机械越来越被我们现在称为软件所取代的趋势。平板电脑将接管世界的原因不是（仅仅）史蒂夫·乔布斯和公司是工业设计巫师，而是因为他们背后有这股力量。iPhone和iPad有效地钻了一个洞，将使ephemeralization流入许多新领域。任何研究过技术历史的人都不会想低估这股力量。\n我担心苹果背后有这股力量可能拥有的权力。我不想看到另一个像80年代和90年代微软那样的客户端单一文化时代。但如果ephemeralization是驱动平板电脑传播的主要力量之一，那表明了一种与苹果竞争的方法：成为它的更好平台。\n事实证明，苹果平板电脑中有加速度计是一件好事。开发人员以苹果从未想象过的方式使用加速度计。这就是平台的本质。工具越多功能，你就越无法预测人们如何使用它。所以平板电脑制造商应该思考：我们还能在里面放什么？不仅仅是硬件，还有软件。我们还能给开发人员访问什么？给黑客一英寸，他们会带你一英里。\n感谢Sam Altman、Paul Buchheit、Jessica Livingston和Robert Morris阅读本文的草稿。\n"
  },{
    "title": "废除死刑的真正原因",
    "url": "/paul_graham/essays_zh/real/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n废除死刑的真正原因 2021年4月\n当知识分子谈论死刑时，他们谈论的是国家是否可以夺取某人生命，死刑是否起到威慑作用，以及某些群体是否被判处更多死刑等问题。但实际上，关于死刑的辩论不是关于杀死杀人犯是否可以。这是关于杀死无辜者是否可以，因为至少有4%的死囚是无辜的。\n当我还是个孩子时，我想象人们被冤枉定罪是罕见的，特别是在谋杀案中这一定非常罕见。事实远非如此。现在，感谢像\u0026quot;无辜项目\u0026quot;这样的组织，我们看到不断有关于谋杀定罪在新证据出现后被推翻的故事。有时警察和检察官只是非常草率。有时他们是不诚实的，完全知道他们在冤枉一个无辜的人。\n肯尼斯·亚当斯和其他三名男子因谋杀定罪在监狱中度过了18年。他们在DNA检测牵涉到三个不同的男人后被昭雪，其中两人后来供认。警察在调查初期就被告知了其他人的情况，但从未跟进这个线索。\n基思·哈沃德因谋杀定罪在监狱中度过了33年。他被定罪是因为\u0026quot;专家\u0026quot;说他的牙齿与一名受害者身上的咬痕照片相匹配。DNA检测显示谋杀是由另一个名叫杰里·克罗蒂的男人所为后，他被昭雪。\n里基·杰克逊和另外两名男子因一名12岁男孩的证词被定罪谋杀，在监狱中度过了39年，该男孩后来翻供说受到警察胁迫。多人证实男孩当时在其他地方。在县检察官撤销指控后，三名男子被昭雪，称\u0026quot;国家正在承认明显的事实。\u0026quot;\n阿尔弗雷德·布朗因谋杀定罪在监狱中度过了12年，其中包括10年在死囚牢房。当发现助理地区检察官隐瞒了证明他不可能犯罪的电话记录后，他被昭雪。\n格伦·福特在因谋杀定罪后在死囚牢房度过了29年。新证据证明谋杀发生时他甚至不在现场后，他被昭雪。被指派代表他的律师从未尝试过陪审团案件。\n卡梅伦·威灵厄姆实际上在2004年被注射死刑处决。作证说他故意纵火的\u0026quot;专家\u0026quot;后来被揭穿。德克萨斯州2009年下令重新审查此案后得出结论\u0026quot;无法维持纵火认定。\u0026quot;\n里奇·格洛西普因实际杀人犯的证词被定罪谋杀，在死囚牢房度过了20年，实际杀人犯为了指控他而逃脱了无期徒刑。2015年，他在即将被处决前几分钟，发现俄克拉荷马州一直计划用非法药物组合杀死他。尽管有证明他无罪的新证据，他们仍计划继续执行处决，可能在今年夏天。\n我可以继续列举。有数百个类似的案例。仅在佛罗里达州，迄今为止就有29名死囚被昭雪。\n远非罕见，错误的谋杀定罪非常普遍。警察面临解决引起广泛关注的犯罪的压力。当他们找到嫌疑人时，他们想要相信他有罪，并忽视甚至破坏证明相反的证据。地区检察官希望被视为有效和严厉打击犯罪，为了赢得定罪愿意操纵证人和隐瞒证据。法院指定的辩护律师工作过度且往往无能。有一大批愿意提供虚假证词以换取较轻刑罚的罪犯，容易被影响的证人可以被警察要求说任何话，以及渴望声称科学证明被告有罪的虚假\u0026quot;专家\u0026quot;。而陪审团想要相信他们，否则一些可怕的犯罪仍然未解决。\n这种无能和不诚实的马戏团是死刑的真正问题。我们甚至还没有到达关于死刑的道德合理性或有效性的理论问题开始重要的地步，因为这么多被判处死刑的人实际上是无辜的。无论理论上的意义是什么，在实践中，死刑意味着杀死无辜的人。\n感谢特雷弗·布莱克威尔、杰西卡·利文斯顿和唐·奈特阅读本文草稿。\n相关 佛罗里达会杀死一个无辜的人吗？ 凯文·库珀被陷害谋杀了吗？ 德克萨斯处决了一个无辜的人吗？ ",
    "description": "",
    "tags": ["死刑","正义","无辜","法律","伦理","社会"],
    "categories": [],
    "content": "→ English Version\n废除死刑的真正原因 2021年4月\n当知识分子谈论死刑时，他们谈论的是国家是否可以夺取某人生命，死刑是否起到威慑作用，以及某些群体是否被判处更多死刑等问题。但实际上，关于死刑的辩论不是关于杀死杀人犯是否可以。这是关于杀死无辜者是否可以，因为至少有4%的死囚是无辜的。\n当我还是个孩子时，我想象人们被冤枉定罪是罕见的，特别是在谋杀案中这一定非常罕见。事实远非如此。现在，感谢像\u0026quot;无辜项目\u0026quot;这样的组织，我们看到不断有关于谋杀定罪在新证据出现后被推翻的故事。有时警察和检察官只是非常草率。有时他们是不诚实的，完全知道他们在冤枉一个无辜的人。\n肯尼斯·亚当斯和其他三名男子因谋杀定罪在监狱中度过了18年。他们在DNA检测牵涉到三个不同的男人后被昭雪，其中两人后来供认。警察在调查初期就被告知了其他人的情况，但从未跟进这个线索。\n基思·哈沃德因谋杀定罪在监狱中度过了33年。他被定罪是因为\u0026quot;专家\u0026quot;说他的牙齿与一名受害者身上的咬痕照片相匹配。DNA检测显示谋杀是由另一个名叫杰里·克罗蒂的男人所为后，他被昭雪。\n里基·杰克逊和另外两名男子因一名12岁男孩的证词被定罪谋杀，在监狱中度过了39年，该男孩后来翻供说受到警察胁迫。多人证实男孩当时在其他地方。在县检察官撤销指控后，三名男子被昭雪，称\u0026quot;国家正在承认明显的事实。\u0026quot;\n阿尔弗雷德·布朗因谋杀定罪在监狱中度过了12年，其中包括10年在死囚牢房。当发现助理地区检察官隐瞒了证明他不可能犯罪的电话记录后，他被昭雪。\n格伦·福特在因谋杀定罪后在死囚牢房度过了29年。新证据证明谋杀发生时他甚至不在现场后，他被昭雪。被指派代表他的律师从未尝试过陪审团案件。\n卡梅伦·威灵厄姆实际上在2004年被注射死刑处决。作证说他故意纵火的\u0026quot;专家\u0026quot;后来被揭穿。德克萨斯州2009年下令重新审查此案后得出结论\u0026quot;无法维持纵火认定。\u0026quot;\n里奇·格洛西普因实际杀人犯的证词被定罪谋杀，在死囚牢房度过了20年，实际杀人犯为了指控他而逃脱了无期徒刑。2015年，他在即将被处决前几分钟，发现俄克拉荷马州一直计划用非法药物组合杀死他。尽管有证明他无罪的新证据，他们仍计划继续执行处决，可能在今年夏天。\n我可以继续列举。有数百个类似的案例。仅在佛罗里达州，迄今为止就有29名死囚被昭雪。\n远非罕见，错误的谋杀定罪非常普遍。警察面临解决引起广泛关注的犯罪的压力。当他们找到嫌疑人时，他们想要相信他有罪，并忽视甚至破坏证明相反的证据。地区检察官希望被视为有效和严厉打击犯罪，为了赢得定罪愿意操纵证人和隐瞒证据。法院指定的辩护律师工作过度且往往无能。有一大批愿意提供虚假证词以换取较轻刑罚的罪犯，容易被影响的证人可以被警察要求说任何话，以及渴望声称科学证明被告有罪的虚假\u0026quot;专家\u0026quot;。而陪审团想要相信他们，否则一些可怕的犯罪仍然未解决。\n这种无能和不诚实的马戏团是死刑的真正问题。我们甚至还没有到达关于死刑的道德合理性或有效性的理论问题开始重要的地步，因为这么多被判处死刑的人实际上是无辜的。无论理论上的意义是什么，在实践中，死刑意味着杀死无辜的人。\n感谢特雷弗·布莱克威尔、杰西卡·利文斯顿和唐·奈特阅读本文草稿。\n相关 佛罗里达会杀死一个无辜的人吗？ 凯文·库珀被陷害谋杀了吗？ 德克萨斯处决了一个无辜的人吗？ "
  },{
    "title": "异端",
    "url": "/paul_graham/essays_zh/heresy/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n异端 2022年4月\n我一生中目睹的最令人惊讶的事情之一是异端概念的重生。\n理查德·韦斯特福尔在他关于牛顿的优秀传记中写道，当他被选为三一学院研究员时：\u0026ldquo;舒适地得到支持，牛顿可以完全投身于他选择的任何事物。为了留下来，他只需要避免三个不可饶恕的罪：犯罪、异端和婚姻。\u0026rdquo; [1] 我第一次读到这句话是在1990年代，听起来有趣地中世纪。避免犯异端，多么奇怪。但当我20年后重读时，它听起来像是对当代就业的描述。\n你可以因为发表越来越多的意见而被解雇。那些解雇你的人不用\u0026quot;异端\u0026quot;这个词来描述它们，但在结构上它们是等价的。结构上，异端有两个鲜明的特征：（1）它优先于真假问题，（2）它压倒发言人所做的一切其他事情。\n例如，当有人称一个陈述为\u0026quot;x主义\u0026quot;时，他们也隐含地说这是讨论的结束。他们说了这个之后，并不会继续考虑这个陈述是否真实。使用这种标签在对话上相当于发出异常信号。这是它们被使用的原因之一：结束讨论。\n如果你发现自己和一个经常使用这些标签的人交谈，可能值得明确问他们是否相信任何婴儿都被连同洗澡水一起扔掉了。一个陈述可能是x主义（无论x是什么值），同时也真实吗？如果答案是肯定的，那么他们承认禁止真相。这足够明显，我猜大多数人会回答否。但如果他们回答否，很容易表明他们错了，实际上这种标签被应用于陈述，无论其真假。\n这最清楚的证据是，一个陈述是否被认为是x主义往往取决于谁说的。真理不是那样运作的。同一个陈述不可能当一个人说时是真实的，但当另一个人说时是x主义，因此是虚假的。[2]\n异端与普通意见相比的另一个鲜明特征是，它们的公开表达压倒发言人所做的一切其他事情。在普通事情上，比如历史知识或音乐品味，你根据你意见的平均值来评判。异端在质上不同。就像把一块铀掉到天平上。\n在过去（现在在某些地方仍然），对异端的惩罚是死亡。你可能过着模范善行的生活，但如果你公开质疑，比如说，基督的神性，你将被烧死。如今，在文明国家，异端只是在比喻意义上被解雇，通过失去工作。但情况的结构是相同的：异端压倒一切。你可能花了过去十年拯救儿童的生命，但如果你表达某些意见，你会自动被解雇。\n这很像你犯了罪。无论你生活多么有美德，如果你犯了罪，你仍然必须承受法律的惩罚。以前过着无可指责的生活可能会减轻惩罚，但不影响你有罪还是无罪。\n异端是一种意见，其表达被视为犯罪——一种使某些人感觉不仅是你错了，而且你应该受到惩罚的意见。确实，他们看到你受惩罚的愿望往往比你犯了实际罪行时更强烈。极左的许多人强烈相信重罪犯的重新融入（我自己也相信），但却似乎觉得任何犯有某些异端罪的人永远不应该再工作。\n总会有一些异端——一些你会因表达而受惩罚的意见。但现在比几十年前多得多，即使是那些对此感到高兴的人也不得不承认确实如此。\n为什么？为什么这个听起来古老过时的宗教概念以世俗形式回归？为什么是现在？\n你需要两种成分来制造一波不宽容：不宽容的人，以及指导他们的意识形态。不宽容的人总是在那里。它们存在于每个足够大的社会中。这就是为什么不宽容的浪潮会如此突然地出现；它们只需要一些东西来引发它们。\n我已经写过一篇描述激进传统思维者的文章。简短版本是，人们可以根据（1）他们是独立思维还是传统思维，以及（2）他们对这有多激进来在两个维度上分类。激进传统思维者是正统的执行者。\n通常他们只在局部可见。他们是一个群体中脾气暴躁、爱挑剔的人——每当有东西违反当前礼仪规则时，他们总是第一个抱怨。但偶尔，就像矢量场元素变得对齐一样，大量激进传统思维者一下子团结在某种意识形态后面。然后他们成为更大的问题，因为暴民动态接管了，每个参与者的热情被其他人的热情增加。\n20世纪最臭名昭著的案例可能是文化大革命。虽然由毛泽东发起以破坏他的对手，但文化大革命其他方面主要是基层现象。毛泽东本质上说：我们中间有异端。找出他们并惩罚他们。而这就是激进传统思维者需要听到的全部。他们以狗追松鼠的喜悦进行这件事。\n要团结传统思维者，意识形态必须具有宗教的许多特征。特别是它必须有严格和任意的规则，信徒可以通过遵守来证明他们的纯洁，其信徒必须相信遵守这些规则的人事实上比不遵守的人在道德上优越。[3]\n1980年代末，这种类型的新意识形态出现在美国大学。它有非常强烈的道德纯洁成分，激进传统思维者以他们通常的渴望抓住它——更是因为前几十年社会规范的放松意味着可禁止的东西越来越少。结果的不宽容浪潮在形式上与文化大革命惊人地相似，虽然幸好规模小得多。[4]\n我在这里故意避免提及任何具体的异端。部分原因是异端猎人的普遍策略之一，现在和过去一样，是指责那些不赞成他们压制思想方式的人本身就是异端。确实，这种策略如此一致，你可以用它作为在任何时代检测巫师迫害的方法。\n这是我避免提及任何具体异端的第二个原因。我希望这篇文章在未来而不仅仅是现在有效。不幸的是，它可能会。激进传统思维者将永远在我们中间，寻找要禁止的东西。他们需要的只是一个意识形态来告诉他们是什么。而当前的不太可能是最后一个。\n左右都有激进传统思维者。当前不宽容浪潮来自左派的原因很简单，因为新的统一意识形态碰巧来自左派。下一个可能来自右派。想象那会是什么样子。\n幸运的是，在西方国家，对异端的压制远不如过去那样糟糕。虽然过去十年你可以公开表达的意见窗口变窄了，但它仍然比几百年前宽得多。问题是导数。直到大约1985年，窗口一直在变得越来越宽。1985年任何展望未来的人都会期望言论自由继续增加。相反，它减少了。[5]\n这种情况类似于麻疹等传染病发生的情况。2010年任何展望未来的人都会期望美国的麻疹病例数量继续减少。相反，由于反疫苗者，它增加了。绝对数量仍然不是那么高。问题是导数。[6]\n在这两种情况下，很难知道要担心多少。如果少数极端分子拒绝给孩子接种疫苗，或者在大学上喊倒发言人，这对整个社会真的危险吗？开始担心的点大概是当他们的努力开始蔓延到其他人的生活时。在这两种情况下，这似乎确实正在发生。\n所以可能值得花费一些努力来抵制以保持言论自由窗口的开放。我希望这篇文章不仅有助于形成对抗当前压制思想努力的社会抗体，而且有助于对抗异端概念本身。这才是真正的奖品。你如何禁用异端概念？自从启蒙运动以来，西方社会发现了许多技术来做到这一点，但肯定还有更多有待发现。\n总的来说我乐观。虽然过去十年言论自由的趋势不好，但在更长期上它是好的。而且有迹象表明当前的不宽容浪潮正在达到顶峰。我交谈的独立思维者似乎比几年前更有信心。另一方面，即使是一些领导者也开始怀疑事情是否走得太远。年轻人中的流行文化已经向前发展。我们要做的就是继续抵制，浪潮就崩溃了。然后我们将净胜出，因为不仅击败了这波浪潮，我们还开发了抵抗下一波浪潮的新战术。\n注释 [1] 或者更准确地说，是牛顿的传记，因为韦斯特福尔写了两本：一本长的叫《永不休息》，一本短的叫《艾萨克·牛顿的一生》。两本都很棒。短版本进展更快，但长本充满了有趣且经常非常有趣的细节。这段话在两本中相同。\n[2] 另一个更微妙但同样有决定性的证据是，x主义的声称从来没有被限定。你从未听任何人说一个陈述\u0026quot;可能是x主义\u0026quot;或\u0026quot;几乎肯定是y主义\u0026quot;。如果x主义的声称实际上是关于真理的声称，你会期望看到\u0026quot;可能\u0026quot;出现在\u0026quot;x主义\u0026quot;前面，就像你看到它出现在\u0026quot;谬误\u0026quot;前面一样频繁。\n[3] 规则必须严格，但不需要要求高。所以最有效的规则类型是关于表面事务的，比如教义细节，或者信徒必须使用的确切词语。这种规则可以变得极其复杂，却不通过要求重大牺牲而排斥潜在皈依者。\n正统的表面要求使其成为美德的廉价替代品。而这反过来又是正统对坏人如此有吸引力的原因之一。你可能是一个可怕的人，但只要你正统，你就比任何不正统的人都好。\n[4] 可以说有两波。第一波到2000年已经有所减弱，但随后在2010年代跟着第二波，可能是由社交媒体引起的。\n[5] 幸运的是，今天大多数试图压制思想的人仍然足够尊重启蒙原则，对其口头上说说而已。他们知道不应该禁止思想本身，所以他们必须将思想重新描述为造成\u0026quot;伤害\u0026quot;，这听起来像是可以禁止的东西。更极端的人试图声称言论本身就是暴力，甚至沉默也是。但听起来可能很奇怪，这种翻腾是个好迹象。当我们真的陷入麻烦时，他们会停止费心发明禁止思想的借口——当他们像中世纪教会那样说\u0026quot;对，我们在禁止思想，事实上这是它们的清单\u0026quot;时。\n[6] 人们只有因为疫苗工作得如此之好，才有忽视医学界关于疫苗共识的奢侈。如果我们根本没有疫苗，死亡率会如此之高，以至于大多数当前的反疫苗者会乞求它们。而言论自由的情况类似。正是因为他们生活在启蒙运动创造的世界里，郊区的孩子们才能玩禁止思想的游戏。\n感谢Marc Andreessen、Chris Best、Trevor Blackwell、Nicholas Christakis、Daniel Gackle、Jonathan Haidt、Claire Lehmann、Jessica Livingston、Greg Lukianoff、Robert Morris和Garry Tan阅读本文的草稿。\n",
    "description": "",
    "tags": ["异端","言论自由","宽容","审查","社会动态"],
    "categories": [],
    "content": "→ English Version\n异端 2022年4月\n我一生中目睹的最令人惊讶的事情之一是异端概念的重生。\n理查德·韦斯特福尔在他关于牛顿的优秀传记中写道，当他被选为三一学院研究员时：\u0026ldquo;舒适地得到支持，牛顿可以完全投身于他选择的任何事物。为了留下来，他只需要避免三个不可饶恕的罪：犯罪、异端和婚姻。\u0026rdquo; [1] 我第一次读到这句话是在1990年代，听起来有趣地中世纪。避免犯异端，多么奇怪。但当我20年后重读时，它听起来像是对当代就业的描述。\n你可以因为发表越来越多的意见而被解雇。那些解雇你的人不用\u0026quot;异端\u0026quot;这个词来描述它们，但在结构上它们是等价的。结构上，异端有两个鲜明的特征：（1）它优先于真假问题，（2）它压倒发言人所做的一切其他事情。\n例如，当有人称一个陈述为\u0026quot;x主义\u0026quot;时，他们也隐含地说这是讨论的结束。他们说了这个之后，并不会继续考虑这个陈述是否真实。使用这种标签在对话上相当于发出异常信号。这是它们被使用的原因之一：结束讨论。\n如果你发现自己和一个经常使用这些标签的人交谈，可能值得明确问他们是否相信任何婴儿都被连同洗澡水一起扔掉了。一个陈述可能是x主义（无论x是什么值），同时也真实吗？如果答案是肯定的，那么他们承认禁止真相。这足够明显，我猜大多数人会回答否。但如果他们回答否，很容易表明他们错了，实际上这种标签被应用于陈述，无论其真假。\n这最清楚的证据是，一个陈述是否被认为是x主义往往取决于谁说的。真理不是那样运作的。同一个陈述不可能当一个人说时是真实的，但当另一个人说时是x主义，因此是虚假的。[2]\n异端与普通意见相比的另一个鲜明特征是，它们的公开表达压倒发言人所做的一切其他事情。在普通事情上，比如历史知识或音乐品味，你根据你意见的平均值来评判。异端在质上不同。就像把一块铀掉到天平上。\n在过去（现在在某些地方仍然），对异端的惩罚是死亡。你可能过着模范善行的生活，但如果你公开质疑，比如说，基督的神性，你将被烧死。如今，在文明国家，异端只是在比喻意义上被解雇，通过失去工作。但情况的结构是相同的：异端压倒一切。你可能花了过去十年拯救儿童的生命，但如果你表达某些意见，你会自动被解雇。\n这很像你犯了罪。无论你生活多么有美德，如果你犯了罪，你仍然必须承受法律的惩罚。以前过着无可指责的生活可能会减轻惩罚，但不影响你有罪还是无罪。\n异端是一种意见，其表达被视为犯罪——一种使某些人感觉不仅是你错了，而且你应该受到惩罚的意见。确实，他们看到你受惩罚的愿望往往比你犯了实际罪行时更强烈。极左的许多人强烈相信重罪犯的重新融入（我自己也相信），但却似乎觉得任何犯有某些异端罪的人永远不应该再工作。\n总会有一些异端——一些你会因表达而受惩罚的意见。但现在比几十年前多得多，即使是那些对此感到高兴的人也不得不承认确实如此。\n为什么？为什么这个听起来古老过时的宗教概念以世俗形式回归？为什么是现在？\n你需要两种成分来制造一波不宽容：不宽容的人，以及指导他们的意识形态。不宽容的人总是在那里。它们存在于每个足够大的社会中。这就是为什么不宽容的浪潮会如此突然地出现；它们只需要一些东西来引发它们。\n我已经写过一篇描述激进传统思维者的文章。简短版本是，人们可以根据（1）他们是独立思维还是传统思维，以及（2）他们对这有多激进来在两个维度上分类。激进传统思维者是正统的执行者。\n通常他们只在局部可见。他们是一个群体中脾气暴躁、爱挑剔的人——每当有东西违反当前礼仪规则时，他们总是第一个抱怨。但偶尔，就像矢量场元素变得对齐一样，大量激进传统思维者一下子团结在某种意识形态后面。然后他们成为更大的问题，因为暴民动态接管了，每个参与者的热情被其他人的热情增加。\n20世纪最臭名昭著的案例可能是文化大革命。虽然由毛泽东发起以破坏他的对手，但文化大革命其他方面主要是基层现象。毛泽东本质上说：我们中间有异端。找出他们并惩罚他们。而这就是激进传统思维者需要听到的全部。他们以狗追松鼠的喜悦进行这件事。\n要团结传统思维者，意识形态必须具有宗教的许多特征。特别是它必须有严格和任意的规则，信徒可以通过遵守来证明他们的纯洁，其信徒必须相信遵守这些规则的人事实上比不遵守的人在道德上优越。[3]\n1980年代末，这种类型的新意识形态出现在美国大学。它有非常强烈的道德纯洁成分，激进传统思维者以他们通常的渴望抓住它——更是因为前几十年社会规范的放松意味着可禁止的东西越来越少。结果的不宽容浪潮在形式上与文化大革命惊人地相似，虽然幸好规模小得多。[4]\n我在这里故意避免提及任何具体的异端。部分原因是异端猎人的普遍策略之一，现在和过去一样，是指责那些不赞成他们压制思想方式的人本身就是异端。确实，这种策略如此一致，你可以用它作为在任何时代检测巫师迫害的方法。\n这 …"
  },{
    "title": "微软已死",
    "url": "/paul_graham/essays_zh/microsoft/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n微软已死 2007年4月\n几天前我突然意识到微软已经死了。我正在和一个年轻的创业公司创始人谈论谷歌与雅虎的不同。我说雅虎从一开始就被对微软的恐惧所扭曲。这就是为什么他们将自己定位为\u0026quot;媒体公司\u0026quot;而不是\u0026quot;技术公司\u0026quot;。然后我看着他的脸，意识到他并不理解。这就像我告诉他80年代中期女孩们多么喜欢巴里·马尼洛一样。巴里谁？微软？他什么也没说，但我能看出他不相信有人会害怕他们。\n从80年代末开始，微软在软件界投下阴影将近20年。我能记得在他们之前是IBM。我大多忽略了这阴影。我从不使用微软软件，所以它只间接影响我——例如，我从僵尸网络收到的垃圾邮件。因为我没有注意，所以我没有注意到阴影何时消失。\n但现在它已经消失了。我能感觉到。再也没有人害怕微软了。他们仍然赚很多钱——IBM也是如此。但他们并不危险。\n微软什么时候死的，死于什么？我知道他们在2001年时似乎还很危险，因为我当时写了一篇论文，说他们没有看起来那么危险。我猜他们在2005年就死了。我知道当我们创办Y Combinator时，我们并不担心微软会与我们资助的创业公司竞争。事实上，我们甚至从未邀请他们参加我们为创业公司向投资者展示而组织的演示日。我们邀请雅虎、谷歌和其他一些互联网公司，但我们从未费心邀请微软。那里也从未有人给我们发过邮件。他们在不同的世界。\n是什么杀死了他们？我认为是四件事，都发生在2000年代中期。\n最明显的是谷歌。镇上只能有一个大佬，而他们显然就是。谷歌现在是迄今为止最危险的公司，无论从好的还是坏的意义上来说。微软最多只能 afterward 蹒跚而行。\n谷歌什么时候领先？人们会倾向于将其推回到2004年8月的IPO，但那时他们并没有设定辩论的条款。我认为他们在2005年领先。Gmail是让他们越过边缘的事情之一。Gmail表明他们能做的不仅仅是搜索。\nGmail还展示了如果你利用后来被称为\u0026quot;Ajax\u0026quot;的技术，基于网络的软件能做多少事情。这是微软死亡的第二个原因：每个人都能看到桌面已经结束。现在应用程序似乎不可避免地会在网络上生存——不仅仅是电子邮件，而是一切，直到Photoshop。甚至微软现在也看到了这一点。\n具有讽刺意味的是，微软无意中帮助创造了Ajax。Ajax中的x来自XMLHttpRequest对象，它让浏览器在显示页面的同时在后台与服务器通信。（最初与服务器通信的唯一方式是请求新页面。）XMLHttpRequest是微软在90年代末创建的，因为他们需要它用于Outlook。他们没有意识到的是，它对很多其他人也有用——事实上，对任何想要让网络应用程序像桌面应用程序一样工作的人都有用。\nAjax的另一个关键组件是Javascript，这种在浏览器中运行的编程语言。微软看到了Javascript的危险，并试图尽可能长时间地保持其损坏。[1] 但最终开源世界赢了，通过产生Javascript库，这些库就像树长在铁丝网上一样，覆盖了浏览器的缺陷。\n微软死亡的第三个原因是宽带互联网。现在任何关心的人都可以拥有快速的网络接入。连接到服务器的管道越大，你对桌面的需求就越少。\n棺材上的最后一颗钉子来自苹果。感谢OS X，苹果以在技术界极为罕见的方式死而复生。[2] 他们的胜利如此彻底，以至于当我遇到运行Windows的计算机时，我现在感到惊讶。我们在Y Combinator资助的几乎所有人都使用苹果笔记本电脑。在创业学校的观众中也是如此。现在所有计算机人员都使用Mac或Linux。Windows是给祖母用的，就像90年代的Mac一样。所以不仅桌面不再重要，关心计算机的人也没有人使用微软的了。\n当然，苹果在音乐方面也让微软节节败退，电视和手机也在路上。\n我很高兴微软死了。他们像尼禄或康茂德——邪恶得只有继承的权力才能让你如此。因为记住，微软的垄断不是从微软开始的。他们是从IBM那里得到的。软件业务从大约1950年代中期到大约2005年一直被垄断所笼罩。也就是说，几乎它的整个存在时间。\u0026ldquo;Web 2.0\u0026quot;之所以如此兴高采烈，原因之一就是这种感觉，无论是有意识还是无意识的，这个垄断时代可能终于结束了。\n当然，作为一个黑客，我禁不住思考如何修复一些损坏的东西。微软有什么方法可以东山再起吗？原则上，是的。要看看如何做到，想象两件事：（a）微软现在手头的现金量，以及（b）拉里和谢尔盖十年前在所有搜索引擎中奔波，试图以100万美元出售谷歌的想法，但被每个人拒绝。\n令人惊讶的事实是，按照像微软这样富有的公司的标准， brilliant hackers——危险地brilliant的hackers——可以非常便宜地得到。他们再也无法雇佣聪明的人了，但他们可以购买他们想要的数量，只需多一个数量级的钱。所以如果他们想再次成为竞争者，他们可以这样做：购买所有好的\u0026quot;Web 2.0\u0026quot;创业公司。他们可以用比必须为Facebook支付的少的钱获得几乎所有这些公司。把它们都放在硅谷的一栋楼里，用铅屏蔽包围它们，保护它们不受雷德蒙德的任何接触。我建议这个很安全，因为他们永远不会这样做。微软最大的弱点是他们仍然没有意识到他们有多么糟糕。他们仍然认为他们可以在内部编写软件。也许他们可以，按照桌面世界的标准。但那个世界几年前就结束了。\n我已经知道人们对这篇论文的反应会是什么。一半的读者会说微软仍然是一家利润极其丰厚的公司，我应该更小心，不要基于我们与世隔绝的\u0026quot;Web 2.0\u0026quot;小泡泡中少数人的想法得出结论。另一半，年轻的一半，会抱怨这是旧闻。\n另见：微软已死：Cliffs Notes\n注释\n[1] 制作不兼容的软件不需要有意识的努力。你所要做的就是不太努力地修复错误——如果你是一家大公司，你会产生大量的错误。这种情况类似于\u0026quot;文学理论家\u0026quot;的写作。大多数人不试图晦涩；他们只是不努力做到清晰。这不会带来回报。\n[2] 部分原因是史蒂夫·乔布斯被约翰·斯卡利推走，这在技术公司中是罕见的。如果苹果的董事会没有犯那个错误，他们就不必反弹。\n葡萄牙语翻译\n简体中文翻译\n韩语翻译\n",
    "description": "",
    "tags": ["微软","谷歌","苹果","网络","软件","技术"],
    "categories": [],
    "content": "→ English Version\n微软已死 2007年4月\n几天前我突然意识到微软已经死了。我正在和一个年轻的创业公司创始人谈论谷歌与雅虎的不同。我说雅虎从一开始就被对微软的恐惧所扭曲。这就是为什么他们将自己定位为\u0026quot;媒体公司\u0026quot;而不是\u0026quot;技术公司\u0026quot;。然后我看着他的脸，意识到他并不理解。这就像我告诉他80年代中期女孩们多么喜欢巴里·马尼洛一样。巴里谁？微软？他什么也没说，但我能看出他不相信有人会害怕他们。\n从80年代末开始，微软在软件界投下阴影将近20年。我能记得在他们之前是IBM。我大多忽略了这阴影。我从不使用微软软件，所以它只间接影响我——例如，我从僵尸网络收到的垃圾邮件。因为我没有注意，所以我没有注意到阴影何时消失。\n但现在它已经消失了。我能感觉到。再也没有人害怕微软了。他们仍然赚很多钱——IBM也是如此。但他们并不危险。\n微软什么时候死的，死于什么？我知道他们在2001年时似乎还很危险，因为我当时写了一篇论文，说他们没有看起来那么危险。我猜他们在2005年就死了。我知道当我们创办Y Combinator时，我们并不担心微软会与我们资助的创业公司竞争。事实上，我们甚至从未邀请他们参加我们为创业公司向投资者展示而组织的演示日。我们邀请雅虎、谷歌和其他一些互联网公司，但我们从未费心邀请微软。那里也从未有人给我们发过邮件。他们在不同的世界。\n是什么杀死了他们？我认为是四件事，都发生在2000年代中期。\n最明显的是谷歌。镇上只能有一个大佬，而他们显然就是。谷歌现在是迄今为止最危险的公司，无论从好的还是坏的意义上来说。微软最多只能 afterward 蹒跚而行。\n谷歌什么时候领先？人们会倾向于将其推回到2004年8月的IPO，但那时他们并没有设定辩论的条款。我认为他们在2005年领先。Gmail是让他们越过边缘的事情之一。Gmail表明他们能做的不仅仅是搜索。\nGmail还展示了如果你利用后来被称为\u0026quot;Ajax\u0026quot;的技术，基于网络的软件能做多少事情。这是微软死亡的第二个原因：每个人都能看到桌面已经结束。现在应用程序似乎不可避免地会在网络上生存——不仅仅是电子邮件，而是一切，直到Photoshop。甚至微软现在也看到了这一点。\n具有讽刺意味的是，微软无意中帮助创造了Ajax。Ajax中的x来自XMLHttpRequest对象，它让浏览器在显示页面的同时在后台与服务器通信。（最初与服务器通信的唯一方式是请求新页面。）XMLHttpRequest是微软在90年代末创建的，因为他们需要它用于Outlook。他们没有意识到的是，它对很多其他人也有用——事实上，对任何想要让网络应用程序像桌面应用程序一样工作的人都有用。\nAjax的另一个关键组件是Javascript，这种在浏览器中运行的编程语言。微软看到了Javascript的危险，并试图尽可能长时间地保持其损坏。[1] 但最终开源世界赢了，通过产生Javascript库，这些库就像树长在铁丝网上一样，覆盖了浏览器的缺陷。\n微软死亡的第三个原因是宽带互联网。现在任何关心的人都可以拥有快速的网络接入。连接到服务器的管道越大，你对桌面的需求就越少。\n棺材上的最后一颗钉子来自苹果。感谢OS X，苹果以在技术界极为罕见的方式死而复生。[2] 他们的胜利如此彻底，以至于当我遇到运行Windows的计算机时，我现在感到惊讶。我们在Y Combinator资助的几乎所有人都使用苹果笔记本电脑。在创业学校的观众中也是如此。现在所有计算机人员都使用Mac或Linux。Windows是给祖母用的，就像90年代的Mac一样。所以不仅桌面不再重要，关心计算机的人也没有人使用微软的了。\n当然，苹果在音乐方面也让微软节节败退，电视和手机也在路上。\n我很高兴微软死了。他们像尼禄或康茂德——邪恶得只有继承的权力才能让你如此。因为记住，微软的垄断不是从微软开始的。他们是从IBM那里得到的。软件业务从大约1950年代中期到大约2005年一直被垄断所笼罩。也就是说，几乎它的整个存在时间。\u0026ldquo;Web 2.0\u0026quot;之所以如此兴高采烈，原因之一就是这种感觉，无论是有意识还是无意识的，这个垄断时代可能终于结束了。\n当然，作为一个黑客，我禁不住思考如何修复一些损坏的东西。微软有什么方法可以东山再起吗？原则上，是的。要看看如何做到，想象两件事：（a）微软现在手头的现金量，以及（b）拉里和谢尔盖十年前在所有搜索引擎中奔波，试图以100万美元出售谷歌的想法，但被每个人拒绝。\n令人惊讶的事实是，按照像微软这样富有的公司的标准， brilliant hackers——危险地brilliant的hackers——可以非常便宜地得到。他们再也无法雇佣聪明的人了，但他们可以购买他们想要的 …"
  },{
    "title": "快照：Viaweb，1998年6月",
    "url": "/paul_graham/essays_zh/vw/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n快照：Viaweb，1998年6月 2012年1月\n在雅虎收购宣布前几个小时，我拍下了Viaweb网站的快照。我想有一天看看可能会很有趣。\n首先注意到的是页面是多么小。1998年的屏幕要小得多。如果我没记错的话，我们的首页刚好能适应人们当时通常使用的窗口大小。\n那时的浏览器（IE6还要3年才会出现）字体很少，而且没有抗锯齿。如果你想让页面看起来好看，你必须将显示文本渲染为图像。\n你可能会注意到Viaweb和Y Combinator的标志之间有某种相似之处。当我们创办YC时，我们这样做是为了开个内部玩笑。考虑到红色圆圈是多么基础的东西，当我们创办Viaweb时，我很惊讶其他使用红色圆圈作为标志的公司如此之少。稍后我明白了原因。\n在公司页面上，你会注意到一个名叫John McArtyem的神秘人物。Robert Morris（又名Rtm）在蠕虫事件后如此厌恶 publicity，以至于他不想让自己的名字出现在网站上。我设法让他同意妥协：我们可以使用他的简介，但不能使用他的名字。从那时起，他在这一点上稍微放松了一些。\nTrevor大约在收购完成时毕业，所以在4天的时间里，他从身无分文的研究生变成了百万富翁博士。我作为新闻稿撰写者的职业生涯 culminating 是一篇庆祝他毕业的新闻稿，配有一张我在会议期间为他画的插图。\n（Trevor也在我们的网页设计师目录中作为Trevino Bagwell出现，这些设计师是商家可以雇佣来为他们建造商店的。我们在其中安插了一个托儿，以防有竞争对手试图向我们的网页设计师发送垃圾邮件。我们假设他的标志会阻止任何真正的客户，但事实并非如此。）\n回到90年代，为了获得用户，你必须在杂志和报纸上被提及。当时没有像现在这样的在线被发现的方式。所以我们过去每月支付一家公关公司16,000美元让我们在新闻中被提及。幸运的是，记者们喜欢我们。\n在我们关于从搜索引擎获得流量的建议中（我认为SEO这个词还没有被创造出来），我们说只有7个重要的：Yahoo、AltaVista、Excite、WebCrawler、InfoSeek、Lycos和HotBot。注意到少了什么吗？谷歌那年9月才成立。\n我们通过一家名为Cybercash的公司支持在线交易，因为如果我们缺乏这个功能，我们会在产品比较中被 beaten up。但Cybercash是如此糟糕，而且大多数商店的订单量如此之低，以至于商家像处理电话订单一样处理订单会更好。我们网站上有一个页面试图说服商家不要进行实时授权。\n整个网站像一个漏斗一样组织，引导人们进行试驾。能够在线试用软件是件新奇事。我们在动态url中放入cgi-bin来欺骗竞争对手关于我们的软件如何工作。\n我们有一些知名用户。不用说，好莱坞的Frederick\u0026rsquo;s获得了最多的流量。我们对大商店收取每月300美元的固定费用，所以拥有大量流量的用户有点令人担忧。我曾经计算过Frederick\u0026rsquo;s在带宽上花了我们多少钱，大约是每月300美元。\n由于我们托管所有商店，这些商店在1998年6月每月总共获得超过1000万次页面浏览，我们消耗了在当时看起来相当多的带宽。我们的办公室有2条T1线路（3 Mb/sec）。在那个时代没有AWS。甚至将服务器托管似乎也太冒险了，考虑到它们经常出问题。所以我们的服务器在办公室里。或者更准确地说，在Trevor的办公室里。作为与没有其他人共享他办公室的独特特权，他必须与6台尖叫的塔式服务器共享。他的办公室因为它们产生的热量而被戏称为\u0026quot;热水浴缸\u0026quot;。大多数日子，他的一堆窗式空调还能应付。\n为了描述页面，我们有一种叫做RTML的模板语言，据说代表某种东西，但事实上我是以Rtm的名字命名的。RTML是Common Lisp，通过一些宏和库增强，并隐藏在一个结构编辑器后面，使它看起来好像有语法。\n由于我们持续发布，我们的软件实际上没有版本。但在那些日子里，行业媒体期望有版本，所以我们就编造了一些。如果我们想获得大量关注，我们把版本号设为整数。那个\u0026quot;4.0版本\u0026quot;图标顺便说一句是由我们自己的按钮生成器生成的。整个Viaweb网站都是用我们的软件制作的，尽管它不是一个在线商店，因为我们想体验我们的用户的感受。\n1997年底，我们发布了一个叫做Shopfind的通用购物搜索引擎。在当时它相当先进。它有一个可编程的爬虫，可以爬取网上大多数不同的商店并挑选出产品。\n",
    "description": "",
    "tags": ["Viaweb","雅虎","收购","网络开发","历史","技术"],
    "categories": [],
    "content": "→ English Version\n快照：Viaweb，1998年6月 2012年1月\n在雅虎收购宣布前几个小时，我拍下了Viaweb网站的快照。我想有一天看看可能会很有趣。\n首先注意到的是页面是多么小。1998年的屏幕要小得多。如果我没记错的话，我们的首页刚好能适应人们当时通常使用的窗口大小。\n那时的浏览器（IE6还要3年才会出现）字体很少，而且没有抗锯齿。如果你想让页面看起来好看，你必须将显示文本渲染为图像。\n你可能会注意到Viaweb和Y Combinator的标志之间有某种相似之处。当我们创办YC时，我们这样做是为了开个内部玩笑。考虑到红色圆圈是多么基础的东西，当我们创办Viaweb时，我很惊讶其他使用红色圆圈作为标志的公司如此之少。稍后我明白了原因。\n在公司页面上，你会注意到一个名叫John McArtyem的神秘人物。Robert Morris（又名Rtm）在蠕虫事件后如此厌恶 publicity，以至于他不想让自己的名字出现在网站上。我设法让他同意妥协：我们可以使用他的简介，但不能使用他的名字。从那时起，他在这一点上稍微放松了一些。\nTrevor大约在收购完成时毕业，所以在4天的时间里，他从身无分文的研究生变成了百万富翁博士。我作为新闻稿撰写者的职业生涯 culminating 是一篇庆祝他毕业的新闻稿，配有一张我在会议期间为他画的插图。\n（Trevor也在我们的网页设计师目录中作为Trevino Bagwell出现，这些设计师是商家可以雇佣来为他们建造商店的。我们在其中安插了一个托儿，以防有竞争对手试图向我们的网页设计师发送垃圾邮件。我们假设他的标志会阻止任何真正的客户，但事实并非如此。）\n回到90年代，为了获得用户，你必须在杂志和报纸上被提及。当时没有像现在这样的在线被发现的方式。所以我们过去每月支付一家公关公司16,000美元让我们在新闻中被提及。幸运的是，记者们喜欢我们。\n在我们关于从搜索引擎获得流量的建议中（我认为SEO这个词还没有被创造出来），我们说只有7个重要的：Yahoo、AltaVista、Excite、WebCrawler、InfoSeek、Lycos和HotBot。注意到少了什么吗？谷歌那年9月才成立。\n我们通过一家名为Cybercash的公司支持在线交易，因为如果我们缺乏这个功能，我们会在产品比较中被 beaten up。但Cybercash是如此糟糕，而且大多数商店的订单量如此之低，以至于商家像处理电话订单一样处理订单会更好。我们网站上有一个页面试图说服商家不要进行实时授权。\n整个网站像一个漏斗一样组织，引导人们进行试驾。能够在线试用软件是件新奇事。我们在动态url中放入cgi-bin来欺骗竞争对手关于我们的软件如何工作。\n我们有一些知名用户。不用说，好莱坞的Frederick\u0026rsquo;s获得了最多的流量。我们对大商店收取每月300美元的固定费用，所以拥有大量流量的用户有点令人担忧。我曾经计算过Frederick\u0026rsquo;s在带宽上花了我们多少钱，大约是每月300美元。\n由于我们托管所有商店，这些商店在1998年6月每月总共获得超过1000万次页面浏览，我们消耗了在当时看起来相当多的带宽。我们的办公室有2条T1线路（3 Mb/sec）。在那个时代没有AWS。甚至将服务器托管似乎也太冒险了，考虑到它们经常出问题。所以我们的服务器在办公室里。或者更准确地说，在Trevor的办公室里。作为与没有其他人共享他办公室的独特特权，他必须与6台尖叫的塔式服务器共享。他的办公室因为它们产生的热量而被戏称为\u0026quot;热水浴缸\u0026quot;。大多数日子，他的一堆窗式空调还能应付。\n为了描述页面，我们有一种叫做RTML的模板语言，据说代表某种东西，但事实上我是以Rtm的名字命名的。RTML是Common Lisp，通过一些宏和库增强，并隐藏在一个结构编辑器后面，使它看起来好像有语法。\n由于我们持续发布，我们的软件实际上没有版本。但在那些日子里，行业媒体期望有版本，所以我们就编造了一些。如果我们想获得大量关注，我们把版本号设为整数。那个\u0026quot;4.0版本\u0026quot;图标顺便说一句是由我们自己的按钮生成器生成的。整个Viaweb网站都是用我们的软件制作的，尽管它不是一个在线商店，因为我们想体验我们的用户的感受。\n1997年底，我们发布了一个叫做Shopfind的通用购物搜索引擎。在当时它相当先进。它有一个可编程的爬虫，可以爬取网上大多数不同的商店并挑选出产品。\n"
  },{
    "title": "怪异语言",
    "url": "/paul_graham/essays_zh/weird/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n怪异语言 2021年8月\n当人们说根据他们的经验所有编程语言基本上等价时，他们做出的不是关于语言的陈述，而是关于他们做过的编程类型的陈述。\n99.5%的编程包括将库函数调用粘合在一起。所有流行的语言在这方面都同样好。所以一个人可以很容易地花费整个职业生涯在流行编程语言的交集中操作。\n但另外0.5%的编程不成比例地有趣。如果你想了解它由什么组成，怪异语言的怪异性是一个很好的线索。\n怪异语言不是偶然怪异的。至少好的不是。好的怪异语言的怪异性通常暗示着存在某种不仅仅是通常的库函数调用的粘合的编程形式。\n一个具体的例子：Lisp宏。Lisp宏即使对许多Lisp程序员来说也显得怪异。它们不仅不在流行语言的交集中，而且它们的性质使得在语言中正确实现它们而不将其变成Lisp的方言会很困难。宏绝对证明超越了粘合编程的技术。例如，通过首先为该类型的问题编写一种语言，然后在其中编写你的特定应用程序来解决问题。这不是你用宏能做的全部；它只是程序操作技术空间中的一个区域，即使现在还远未被完全探索。\n所以如果你想扩展你对编程可能性的概念，一种方法是学习怪异语言。选择一种大多数程序员认为怪异但其中位数用户聪明的语言，然后专注于这种语言与流行语言交集之间的差异。你能用这种语言说什么，而在其他语言中说会极其不便？在学习如何说你以前不能说的话的过程中，你可能会学习如何想你以前不能想的事。\n感谢Trevor Blackwell、Patrick Collison、Daniel Gackle、Amjad Masad和Robert Morris阅读草稿。\n日语翻译\n",
    "description": "",
    "tags": ["编程语言","Lisp","宏","技术","软件开发"],
    "categories": [],
    "content": "→ English Version\n怪异语言 2021年8月\n当人们说根据他们的经验所有编程语言基本上等价时，他们做出的不是关于语言的陈述，而是关于他们做过的编程类型的陈述。\n99.5%的编程包括将库函数调用粘合在一起。所有流行的语言在这方面都同样好。所以一个人可以很容易地花费整个职业生涯在流行编程语言的交集中操作。\n但另外0.5%的编程不成比例地有趣。如果你想了解它由什么组成，怪异语言的怪异性是一个很好的线索。\n怪异语言不是偶然怪异的。至少好的不是。好的怪异语言的怪异性通常暗示着存在某种不仅仅是通常的库函数调用的粘合的编程形式。\n一个具体的例子：Lisp宏。Lisp宏即使对许多Lisp程序员来说也显得怪异。它们不仅不在流行语言的交集中，而且它们的性质使得在语言中正确实现它们而不将其变成Lisp的方言会很困难。宏绝对证明超越了粘合编程的技术。例如，通过首先为该类型的问题编写一种语言，然后在其中编写你的特定应用程序来解决问题。这不是你用宏能做的全部；它只是程序操作技术空间中的一个区域，即使现在还远未被完全探索。\n所以如果你想扩展你对编程可能性的概念，一种方法是学习怪异语言。选择一种大多数程序员认为怪异但其中位数用户聪明的语言，然后专注于这种语言与流行语言交集之间的差异。你能用这种语言说什么，而在其他语言中说会极其不便？在学习如何说你以前不能说的话的过程中，你可能会学习如何想你以前不能想的事。\n感谢Trevor Blackwell、Patrick Collison、Daniel Gackle、Amjad Masad和Robert Morris阅读草稿。\n日语翻译\n"
  },{
    "title": "成瘾性",
    "url": "/paul_graham/essays_zh/addiction/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n成瘾性 成瘾性的加速 2010年7月\n烈酒、香烟、海洛因和可卡因的共同点是，它们都是成瘾性较低的前身物质的更浓缩形式。我们描述为成瘾性的大多数（如果不是全部）事物都是如此。可怕的是，创造它们的过程正在加速。\n我们不想阻止它。这是治愈疾病的同一过程：技术进步。技术进步意味着让事物做更多我们想要的事情。当我们想要的事物是我们想要想要的事物时，我们认为技术进步是好的。如果某种新技术使太阳能电池的效率提高x%，那似乎绝对是更好的。当进步浓缩了我们不想要想要的东西——当它将鸦片变成海洛因时——它似乎变坏了。但这是同一过程在起作用。\n没有人怀疑这个过程正在加速，这意味着越来越多我们喜欢的事物将被变成我们过于喜欢的事物。\n据我所知，没有词来形容我们过于喜欢的事物。最接近的是\u0026quot;addictive\u0026quot;（成瘾的）的口语意义。在我的一生中，这种用法变得越来越普遍。原因很清楚：我们需要它的事物越来越多。在极端的一端是可卡因和冰毒。食物通过工厂化农业和食品加工创新的结合，变成了具有更直接冲击力的东西，你可以在美国的任何城镇看到结果。跳棋和纸牌已经被《魔兽世界》和《FarmVille》取代。电视变得更加引人入胜，即便如此，它也无法与Facebook竞争。\n现在的世界比40年前更容易让人上瘾。除非产生这些事物的技术进步形式受到与技术进步一般不同的法律约束，否则在未来40年里，世界将比过去40年变得更加容易让人上瘾。\n未来40年将给我们带来一些美妙的事物。我并不是暗示它们都应该被避免。酒精是一种危险的药物，但我宁愿生活在一个有葡萄酒的世界，而不是没有葡萄酒的世界。大多数人可以与酒精共存；但你必须小心。更多我们喜欢的事物将意味着更多我们必须小心的事物。\n不幸的是，大多数人都不会。这意味着随着世界变得更加容易让人上瘾，一个人可以过正常生活的两种意义将被进一步分开。\u0026ldquo;正常\u0026quot;的一种意义是统计上的正常：其他人都做的事情。另一种意义是当我们谈论机械的正常运行范围时的意义：效果最好的。\n这两种意义已经相距甚远。现在，任何试图好好生活的人在美国大部分地区都会显得异常节欲。这种现象只会变得更加明显。从现在开始，你可以把它作为一个经验法则：如果人们不认为你很奇怪，那么你生活得很糟糕。\n社会最终会对新的成瘾事物产生抗体。我在香烟身上看到了这种情况的发生。当香烟首次出现时，它们的传播方式就像传染病在以前隔离的人群中传播一样。吸烟迅速成为一种（统计上的）正常事物。到处都有烟灰缸。我还是孩子的时候，我们家里有烟灰缸，尽管我父母都不吸烟。你必须为客人准备。\n随着关于吸烟危险的知识传播，习俗改变了。在过去20年里，吸烟已经从看起来完全正常的事物变成了一种相当肮脏的习惯：从电影明星在宣传照中做的事情，变成了成瘾者小团体在办公楼门外做的事情。当然，很多变化是由于立法，但如果习俗没有改变，立法也不可能发生。\n然而，这花了一段时间——大约100年。除非社会抗体的进化速度能够加快，以匹配技术进步抛弃新的成瘾事物的加速速度，否则我们将越来越无法依赖习俗来保护我们。\n除非我们想成为每种新成瘾的煤矿中的金丝雀——那些悲惨的例子成为未来一代人教训的人——否则我们将必须自己弄清楚要避免什么以及如何避免。怀疑一切新事物实际上将成为一个合理的策略（或更合理的策略）。\n事实上，即使那样也不够。我们不仅要担心新事物，还要担心现有事物变得更加容易让人上瘾。这就是咬到我的东西。我避免了大多数成瘾，但互联网让我上瘾了，因为在我使用它的过程中它变得让人上瘾了。\n我认识的大多数人都有互联网成瘾问题。我们都在努力找出自己摆脱它的习俗。这就是为什么我没有iPhone的原因；我最不想要的就是互联网跟随我进入世界。\n我最新的技巧是长途徒步旅行。我曾经认为跑步比徒步是更好的锻炼形式，因为它花的时间更少。现在徒步旅行的缓慢性似乎成了一个优势，因为我在小径上花的时间越长，我有不受干扰的思考时间就越长。\n听起来很古怪，不是吗？当你试图解决没有习俗指导的问题时，总是会这样。也许我不能诉诸奥卡姆剃刀；也许我只是古怪。但如果我对成瘾性加速的看法是正确的，那么这种孤独的挣扎来避免它的方式将 increasingly 成为任何想要完成任务的人的命运。我们将越来越多地被我们说不的事情所定义。\n注释 [1] 你能将技术进步限制在你想要的领域吗？只能在有限范围内，而不成为警察国家。即使那样，你的限制也会产生不良副作用。\u0026ldquo;好\u0026quot;和\u0026quot;坏\u0026quot;的技术进步没有明显区分，所以你会发现你不能在不减缓前者的同时减缓后者。而且，无论如何，正如禁酒令和\u0026quot;毒品战争\u0026quot;所显示的，禁令往往弊大于利。\n[2] 技术一直在加速。按照旧石器时代的标准，技术在新石器时代以惊人的速度发展。\n[3] 除非我们大规模生产社会习俗。我怀疑最近美国福音派基督教的复兴部分是对毒品的反应。在绝望中，人们伸手拿大锤；如果他们的孩子不听他们的话，也许他们会听上帝的。但那种解决方案比让孩子对毒品说不有更广泛的后果。你最终也对科学说不。我担心我们可能正在走向一个未来，只有少数人自己规划穿越禁区的行程，而其他人预订包价旅行。或者更糟的是，由政府为他们预订。\n[4] 人们通常用\u0026quot;拖延\u0026quot;这个词来描述他们在互联网上做什么。在我看来，将正在发生的事情仅仅描述为不工作太温和了。当有人喝醉而不是工作时，我们不会称之为拖延。\n[5] 几个人告诉我他们喜欢iPad，因为它让他们能将互联网带到笔记本电脑太显眼的情况下。换句话说，它是一个扁酒瓶。（当然，iPhone也是如此，但这个优势不那么明显，因为它读起来像电话，大家都习惯了。）\n感谢Sam Altman、Patrick Collison、Jessica Livingston和Robert Morris阅读本文草稿。\n",
    "description": "",
    "tags": ["成瘾","技术","社会","互联网","进步"],
    "categories": [],
    "content": "→ English Version\n成瘾性 成瘾性的加速 2010年7月\n烈酒、香烟、海洛因和可卡因的共同点是，它们都是成瘾性较低的前身物质的更浓缩形式。我们描述为成瘾性的大多数（如果不是全部）事物都是如此。可怕的是，创造它们的过程正在加速。\n我们不想阻止它。这是治愈疾病的同一过程：技术进步。技术进步意味着让事物做更多我们想要的事情。当我们想要的事物是我们想要想要的事物时，我们认为技术进步是好的。如果某种新技术使太阳能电池的效率提高x%，那似乎绝对是更好的。当进步浓缩了我们不想要想要的东西——当它将鸦片变成海洛因时——它似乎变坏了。但这是同一过程在起作用。\n没有人怀疑这个过程正在加速，这意味着越来越多我们喜欢的事物将被变成我们过于喜欢的事物。\n据我所知，没有词来形容我们过于喜欢的事物。最接近的是\u0026quot;addictive\u0026quot;（成瘾的）的口语意义。在我的一生中，这种用法变得越来越普遍。原因很清楚：我们需要它的事物越来越多。在极端的一端是可卡因和冰毒。食物通过工厂化农业和食品加工创新的结合，变成了具有更直接冲击力的东西，你可以在美国的任何城镇看到结果。跳棋和纸牌已经被《魔兽世界》和《FarmVille》取代。电视变得更加引人入胜，即便如此，它也无法与Facebook竞争。\n现在的世界比40年前更容易让人上瘾。除非产生这些事物的技术进步形式受到与技术进步一般不同的法律约束，否则在未来40年里，世界将比过去40年变得更加容易让人上瘾。\n未来40年将给我们带来一些美妙的事物。我并不是暗示它们都应该被避免。酒精是一种危险的药物，但我宁愿生活在一个有葡萄酒的世界，而不是没有葡萄酒的世界。大多数人可以与酒精共存；但你必须小心。更多我们喜欢的事物将意味着更多我们必须小心的事物。\n不幸的是，大多数人都不会。这意味着随着世界变得更加容易让人上瘾，一个人可以过正常生活的两种意义将被进一步分开。\u0026ldquo;正常\u0026quot;的一种意义是统计上的正常：其他人都做的事情。另一种意义是当我们谈论机械的正常运行范围时的意义：效果最好的。\n这两种意义已经相距甚远。现在，任何试图好好生活的人在美国大部分地区都会显得异常节欲。这种现象只会变得更加明显。从现在开始，你可以把它作为一个经验法则：如果人们不认为你很奇怪，那么你生活得很糟糕。\n社会最终会对新的成瘾事物产生抗体。我在香烟身上看到了这种情况的发生。当香烟首次出现时，它们的传播方式就像传染病在以前隔离的人群中传播一样。吸烟迅速成为一种（统计上的）正常事物。到处都有烟灰缸。我还是孩子的时候，我们家里有烟灰缸，尽管我父母都不吸烟。你必须为客人准备。\n随着关于吸烟危险的知识传播，习俗改变了。在过去20年里，吸烟已经从看起来完全正常的事物变成了一种相当肮脏的习惯：从电影明星在宣传照中做的事情，变成了成瘾者小团体在办公楼门外做的事情。当然，很多变化是由于立法，但如果习俗没有改变，立法也不可能发生。\n然而，这花了一段时间——大约100年。除非社会抗体的进化速度能够加快，以匹配技术进步抛弃新的成瘾事物的加速速度，否则我们将越来越无法依赖习俗来保护我们。\n除非我们想成为每种新成瘾的煤矿中的金丝雀——那些悲惨的例子成为未来一代人教训的人——否则我们将必须自己弄清楚要避免什么以及如何避免。怀疑一切新事物实际上将成为一个合理的策略（或更合理的策略）。\n事实上，即使那样也不够。我们不仅要担心新事物，还要担心现有事物变得更加容易让人上瘾。这就是咬到我的东西。我避免了大多数成瘾，但互联网让我上瘾了，因为在我使用它的过程中它变得让人上瘾了。\n我认识的大多数人都有互联网成瘾问题。我们都在努力找出自己摆脱它的习俗。这就是为什么我没有iPhone的原因；我最不想要的就是互联网跟随我进入世界。\n我最新的技巧是长途徒步旅行。我曾经认为跑步比徒步是更好的锻炼形式，因为它花的时间更少。现在徒步旅行的缓慢性似乎成了一个优势，因为我在小径上花的时间越长，我有不受干扰的思考时间就越长。\n听起来很古怪，不是吗？当你试图解决没有习俗指导的问题时，总是会这样。也许我不能诉诸奥卡姆剃刀；也许我只是古怪。但如果我对成瘾性加速的看法是正确的，那么这种孤独的挣扎来避免它的方式将 increasingly 成为任何想要完成任务的人的命运。我们将越来越多地被我们说不的事情所定义。\n注释 [1] 你能将技术进步限制在你想要的领域吗？只能在有限范围内，而不成为警察国家。即使那样，你的限制也会产生不良副作用。\u0026ldquo;好\u0026quot;和\u0026quot;坏\u0026quot;的技术进步没有明显区分，所以你会发现你不能在不减缓前者的同时减缓后者。而且，无论如何，正如禁酒令和\u0026quot;毒品战争\u0026quot;所显示的，禁令往往弊大于利。\n[2] 技术一直在加速。按照旧石器时代的标准，技术在新 …"
  },{
    "title": "我今年夏天做了什么",
    "url": "/paul_graham/essays_zh/sfp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n我今年夏天做了什么 2005年10月\n第一个夏季创始人计划刚刚结束。我们惊讶于进展得如此顺利。总体上只有大约10%的创业公司会成功，但如果我现在必须猜测，我预测我们资助的八家创业公司中有三四家会成功。\n在需要进一步融资的创业公司中，我相信所有公司要么已经完成了一轮融资，要么很可能很快就会。有两家已经拒绝了（低价的）收购要约。\n如果在夏末时八家中只有一家看起来有前途，我们就会很高兴了。这是怎么回事？是否某种异常使得今年的申请者特别好？我们担心这个，但想不出一个。我们会在今年冬天找到答案。\n整个夏天充满了惊喜。最好的是我们正在测试的假设似乎是正确的。年轻的黑客可以创办可行的公司。这是好消息，原因有二：(a) 这是一个令人鼓舞的想法，(b) 这意味着基于这个理念的Y Combinator并没有失败。\n年龄 更准确地说，假设是创业公司的成功主要取决于你的聪明程度和精力，而与你的年龄或商业经验关系不大。到目前为止的结果证明了这一点。2005年的夏季创始人年龄在18到28岁之间（平均23岁），他们的年龄与表现之间没有相关性。\n这其实并不令人惊讶。比尔·盖茨和迈克尔·戴尔在创办使他们成名的公司时都是19岁。年轻创始人并不是一个新现象：这种趋势在计算机便宜到大学生能够买得起的时候就开始了。\n我们的另一个假设是，你可以用比大多数人想象的更少的钱创办创业公司。其他投资者惊讶地听到我们给任何小组最多2万美元。但我们知道用这么少的钱是可能的，因为我们用1万美元创办了Viaweb。\n今年夏天的事实证明了这一点。三个月的资金足以进入第二档。我们在十周时为潜在投资者举办了一个演示日，八个小组成员中有七个在那时准备好了原型。其中一个，Reddit，已经上线，能够演示他们的实际网站。\n一位研究SFP创业公司的研究员说，他们共同的一点是他们都工作得极其努力。这个年龄段的人通常被视为懒惰的。我认为在某些情况下，并不是他们缺乏工作欲望，而是提供给他们的工作没有吸引力。\nSFP的经历表明，如果你让有动力的人做真正的工作，无论他们的年龄如何，他们都会努力工作。正如一位创始人所说：\u0026ldquo;我读过创业会吞噬你的生活，但直到我亲自做了，我才明白这意味着什么。\u0026rdquo;\n如果我是让员工如此努力工作的老板，我会感到内疚。但我们不是这些人的老板。他们在为自己的项目工作。让他们工作的不是我们，而是他们的竞争对手。像优秀的运动员一样，他们努力工作不是因为教练对他们大喊大叫，而是因为他们想要获胜。\n我们的权力比老板小，但创始人比员工更努力。这似乎对每个人来说都是双赢。唯一的缺点是我们平均只获得5-7%的收益，而雇主获得几乎全部收益。（我们指望这会是更大数字的5-7%。）\n除了努力工作，所有小组都表现得非常负责任。我想不出有一次他们没有履行承诺，即使是约会迟到。这是世界还有待学习的另一个教训。一位创始人发现，与大型手机运营商的高管安排会议最难的部分是让租车公司租给他车，因为他太年轻了。\n我认为这里的问题与这个年龄段的人明显的懒惰非常相似。他们看起来懒惰是因为给他们的工作毫无意义，他们表现得不负责任是因为没有被赋予任何权力。至少他们中的一些人是这样。我们只有大约二十个样本，但到目前为止似乎表明，如果你让二十出头的人做自己的老板，他们会挺身而出。\n士气 夏季创始人通常非常理想主义。他们也非常想致富。这些品质似乎不相容，但并非如此。这些人想致富，但他们想通过改变世界来实现。他们不会（嗯，八组中有七组不会）对通过股票投机赚钱感兴趣。他们想制作人们使用的东西。\n我认为这使他们成为更有效的创始人。人们会为金钱而努力工作，但为事业会更加努力。而且由于创业公司的成功很大程度上取决于动机，矛盾的结果是，可能赚最多钱的人不是纯粹为了钱的人。\n例如，Kiko的创始人正在开发一个Ajax日历。他们想致富，但如果他们唯一的动机是致富，他们对设计的关注就不会那么细致。仅从外观就能看出来。\n直到今年夏天我从未考虑过，但这可能是黑客经营的创业公司往往比MBA经营的创业公司表现更好的另一个原因。也许不仅仅是因为黑客更懂技术，而是因为他们被更强大的动机驱动。微软，正如我之前所说，是一个危险的误导例子。他们的刻薄企业文化只对垄断企业有效。谷歌是更好的模式。\n考虑到夏季创始人是这个海洋中的鲨鱼，我们惊讶于他们中的大多数对竞争对手的恐惧。但现在想来，我们创办Viaweb时也是如此。第一年，我们对竞争对手消息的初始反应总是：我们完蛋了。就像疑病症患者夸大自己的症状，直到确信自己患了某种可怕的疾病一样，当你不习惯竞争对手时，你会把他们夸大成怪物。\n这里有一个对创业公司有用的规则：竞争对手很少像看起来那么危险。大多数会在你摧毁他们之前自我毁灭。而且有多少个竞争对手肯定不重要，就像对马拉松冠军来说背后有多少跑步者不重要一样。\n\u0026ldquo;这是一个拥挤的市场，\u0026ldquo;我记得一位创始人担忧地说。\n\u0026ldquo;你是现在的领导者吗？\u0026ldquo;我问。\n\u0026ldquo;是的。\u0026rdquo;\n\u0026ldquo;有人能比你更快地开发软件吗？\u0026rdquo;\n\u0026ldquo;可能不会。\u0026rdquo;\n\u0026ldquo;那么，如果你现在领先，而且你是最快的，那么你就会保持领先。有多少其他人有什么区别？\u0026rdquo;\n另一个小组在意识到必须从头开始重写软件时感到担忧。我告诉他们，如果不这样做将是一个坏兆头。初始版本的主要功能就是被重写。\n这就是为什么我们建议小组首先忽略可扩展性、国际化和重型安全等问题。[1] 我可以想象一个\u0026quot;最佳实践\u0026quot;的倡导者说这些应该从一开始就考虑。他是对的，除了它们干扰了创业公司软件的主要功能：成为实验其自身设计的载体。必须改装国际化或可扩展性当然是痛苦的。唯一更大的痛苦是不需要这样做，因为你的初始版本太大太僵硬，无法演变成用户想要的东西。\n我怀疑这是创业公司击败大公司的另一个原因。创业公司可以不负责任地发布版本1，这些版本足够轻量，可以进化。在大公司，所有的压力都是过度工程化的方向。\n学到了什么 今年夏天我们好奇的一件事是这些小组在哪里需要帮助。结果差异很大。有些我们提供技术建议——例如，关于如何设置应用程序在多台服务器上运行。大多数我们帮助解决战略问题，比如申请什么专利，什么收费，什么免费赠送。几乎所有的人都想要关于如何应对未来投资者的建议：他们应该接受多少钱，应该期望什么条款？\n然而，所有小组都很快学会了如何处理专利和投资者等问题。这些问题本身并不困难，只是不熟悉。\n他们学习的速度令人惊讶——甚至有点可怕。在投资者演示日之前的周末，我们进行了一次练习，所有小组都做了演讲。他们都很糟糕。我们试图解释如何改进，但希望不大。所以在演示日，我告诉聚集的天使投资人和风险投资家，这些人是黑客，不是MBA，所以虽然他们的软件很好，但我们不应该期望他们有流畅的演讲。\n然后小组们接着进行了极其流畅的演讲。不见了的是对功能列表的喃喃自述。就好像他们在过去一周里上了表演学校。我仍然不知道他们是怎么做到的。\n也许观看彼此的演讲帮助他们看到了自己一直在做错的事情。就像在大学里一样，夏季创始人从彼此身上学到了很多东西——也许比从我们这里学到的更多。他们面临的许多问题是相同的，从应对投资者到黑客JavaScript。\n我不想给人印象今年夏天没有问题。很多事情出了问题，就像创业公司通常发生的那样。一个小组从一些风险投资家那里得到了\u0026quot;爆炸性条款书\u0026rdquo;。几乎所有与打交道的公司发现大公司做事情都无限缓慢。（这是可以预料的。如果大公司不是无能的，就没有创业公司存在的空间了。）当然还有与服务器相关的常见噩梦。总之，今年夏天的灾难只是常见的儿童疾病。今年夏天的八家创业公司中的一些最终可能会失败；如果八家都成功将是非同寻常的。但杀死他们的不会是戏剧性的外部威胁，而是平凡的内部威胁：没有完成足够的工作。\n不过到目前为止，消息都是好的。事实上，我们惊讶于今年夏天对我们来说有多么有趣。主要原因是我们多么喜欢这些创始人。他们如此真诚和努力。他们似乎也喜欢我们。这说明了投资相对于雇佣的另一个优势：我们与他们的关系远比老板和员工之间的关系要好。Y Combinator最终更像一个哥哥而不是父母。\n我惊讶于我花了多少时间做介绍。幸运的是，我发现当创业公司需要与某人交谈时，我通常最多通过一次跳转就能找到合适的人。我记得想知道，我的朋友是怎么变得如此杰出的？一秒钟后意识到：该死，我四十岁了。\n另一个惊喜是，由于夏季的限制，我们被迫采用的三个月批处理格式，结果证明是一个优势。当我们创办Y Combinator时，我们计划像其他风险投资公司一样投资：随着提案的到来，我们会评估它们并决定是或否。SFP只是一个让事情开始的实验。但效果如此之好，以至于我们计划以这种方式进行所有投资，夏季一个周期，冬季一个周期。这对我们来说更有效率，对创业公司也更好。\n几个小组说我们的每周晚餐使他们免于困扰创业公司的常见问题：如此努力工作以至于没有社交生活。（我非常清楚那部分。）这样，他们保证每周至少有一次社交活动。\n独立性 我听到Y Combinator被描述为\u0026quot;孵化器\u0026rdquo;。实际上我们恰恰相反：孵化器比普通风险投资公司施加更多控制，而我们特别强调施加更少。除其他外，孵化器通常让你在他们的办公室工作——这就是\u0026quot;孵化器\u0026quot;一词的来源。这似乎是错误的模式。如果投资者参与太多，他们会扼杀创业公司最强大的力量之一：这是你自己的公司的感觉。\n孵化器在泡沫时期是明显的失败者。关于这是否是因为泡沫，还是因为它们是一个坏主意，仍有争论。我的投票是它们是一个坏主意。我认为它们失败是因为它们选择了错误的人。当我们创办创业公司时，我们永远不会接受\u0026quot;孵化器\u0026quot;的资金。我们可以找到办公空间，谢谢；只给我们钱。有这种态度的人是那些可能在创业公司中成功的人。\n确实，今年夏天所有创始人共有的品质是一种独立精神。我一直在思考这个问题。有些人就是比其他人更独立，还是如果被允许每个人都会这样？\n与大多数先天/后天问题一样，答案可能是：两者都有。但我今年夏天的主要结论是，环境在混合中所占的比大多数人意识到的更多。我能从创始人态度在今年夏天的变化中看出这一点。大多数人都摆脱了大约二十年来被告知做什么的状态。他们对拥有完全自由似乎有点惊讶。但他们很快就适应了；这些人中的一些现在看起来比夏天开始时高约四英寸（比喻性地）。\n当我们问夏季创始人在创办公司时最令他们惊讶的是什么时，一个人说\u0026quot;最令人震惊的是它成功了。\u0026rdquo;\n需要更多经验才能确定，但我的猜测是许多黑客可以做到这一点——如果你把人们放在独立的位置，他们会发展出所需的品质。把他们推下悬崖，大多数会在下落途中发现他们有翅膀。\n这对任何人来说都是新闻的原因是同样的力量在相反的方向也起作用。大多数黑客是雇员，这把你塑造成一个认为创业不可能的人，就像创办创业公司把你塑造成一个能够处理它的人一样。\n如果我是对的，\u0026ldquo;黑客\u0026quot;在二十年后将意味着与现在不同的东西。它将越来越多地意味着经营公司的人。Y Combinator只是在加速一个无论如何都会发生的过程。权力正在从处理金钱的人转向创造技术的人，如果我们今年夏天的经历是任何指南，这将是一件好事。\n注释 [1] 我说的重型安全是指保护真正坚决的攻击者的努力。\n图片显示了我们，2005年夏季创始人，以及Smartleaf联合创始人Mark Nitzberg和Olin Shivers在Kate Courteau为我们设计的30英尺桌子旁。照片由Alex Lewin拍摄。\n",
    "description": "",
    "tags": ["y_combinator","夏季创始人计划","创业公司","年轻创始人","企业家精神"],
    "categories": [],
    "content": "→ English Version\n我今年夏天做了什么 2005年10月\n第一个夏季创始人计划刚刚结束。我们惊讶于进展得如此顺利。总体上只有大约10%的创业公司会成功，但如果我现在必须猜测，我预测我们资助的八家创业公司中有三四家会成功。\n在需要进一步融资的创业公司中，我相信所有公司要么已经完成了一轮融资，要么很可能很快就会。有两家已经拒绝了（低价的）收购要约。\n如果在夏末时八家中只有一家看起来有前途，我们就会很高兴了。这是怎么回事？是否某种异常使得今年的申请者特别好？我们担心这个，但想不出一个。我们会在今年冬天找到答案。\n整个夏天充满了惊喜。最好的是我们正在测试的假设似乎是正确的。年轻的黑客可以创办可行的公司。这是好消息，原因有二：(a) 这是一个令人鼓舞的想法，(b) 这意味着基于这个理念的Y Combinator并没有失败。\n年龄 更准确地说，假设是创业公司的成功主要取决于你的聪明程度和精力，而与你的年龄或商业经验关系不大。到目前为止的结果证明了这一点。2005年的夏季创始人年龄在18到28岁之间（平均23岁），他们的年龄与表现之间没有相关性。\n这其实并不令人惊讶。比尔·盖茨和迈克尔·戴尔在创办使他们成名的公司时都是19岁。年轻创始人并不是一个新现象：这种趋势在计算机便宜到大学生能够买得起的时候就开始了。\n我们的另一个假设是，你可以用比大多数人想象的更少的钱创办创业公司。其他投资者惊讶地听到我们给任何小组最多2万美元。但我们知道用这么少的钱是可能的，因为我们用1万美元创办了Viaweb。\n今年夏天的事实证明了这一点。三个月的资金足以进入第二档。我们在十周时为潜在投资者举办了一个演示日，八个小组成员中有七个在那时准备好了原型。其中一个，Reddit，已经上线，能够演示他们的实际网站。\n一位研究SFP创业公司的研究员说，他们共同的一点是他们都工作得极其努力。这个年龄段的人通常被视为懒惰的。我认为在某些情况下，并不是他们缺乏工作欲望，而是提供给他们的工作没有吸引力。\nSFP的经历表明，如果你让有动力的人做真正的工作，无论他们的年龄如何，他们都会努力工作。正如一位创始人所说：\u0026ldquo;我读过创业会吞噬你的生活，但直到我亲自做了，我才明白这意味着什么。\u0026rdquo;\n如果我是让员工如此努力工作的老板，我会感到内疚。但我们不是这些人的老板。他们在为自己的项目工作。让他们工作的不是我们，而是他们的竞争对手。像优秀的运动员一样，他们努力工作不是因为教练对他们大喊大叫，而是因为他们想要获胜。\n我们的权力比老板小，但创始人比员工更努力。这似乎对每个人来说都是双赢。唯一的缺点是我们平均只获得5-7%的收益，而雇主获得几乎全部收益。（我们指望这会是更大数字的5-7%。）\n除了努力工作，所有小组都表现得非常负责任。我想不出有一次他们没有履行承诺，即使是约会迟到。这是世界还有待学习的另一个教训。一位创始人发现，与大型手机运营商的高管安排会议最难的部分是让租车公司租给他车，因为他太年轻了。\n我认为这里的问题与这个年龄段的人明显的懒惰非常相似。他们看起来懒惰是因为给他们的工作毫无意义，他们表现得不负责任是因为没有被赋予任何权力。至少他们中的一些人是这样。我们只有大约二十个样本，但到目前为止似乎表明，如果你让二十出头的人做自己的老板，他们会挺身而出。\n士气 夏季创始人通常非常理想主义。他们也非常想致富。这些品质似乎不相容，但并非如此。这些人想致富，但他们想通过改变世界来实现。他们不会（嗯，八组中有七组不会）对通过股票投机赚钱感兴趣。他们想制作人们使用的东西。\n我认为这使他们成为更有效的创始人。人们会为金钱而努力工作，但为事业会更加努力。而且由于创业公司的成功很大程度上取决于动机，矛盾的结果是，可能赚最多钱的人不是纯粹为了钱的人。\n例如，Kiko的创始人正在开发一个Ajax日历。他们想致富，但如果他们唯一的动机是致富，他们对设计的关注就不会那么细致。仅从外观就能看出来。\n直到今年夏天我从未考虑过，但这可能是黑客经营的创业公司往往比MBA经营的创业公司表现更好的另一个原因。也许不仅仅是因为黑客更懂技术，而是因为他们被更强大的动机驱动。微软，正如我之前所说，是一个危险的误导例子。他们的刻薄企业文化只对垄断企业有效。谷歌是更好的模式。\n考虑到夏季创始人是这个海洋中的鲨鱼，我们惊讶于他们中的大多数对竞争对手的恐惧。但现在想来，我们创办Viaweb时也是如此。第一年，我们对竞争对手消息的初始反应总是：我们完蛋了。就像疑病症患者夸大自己的症状，直到确信自己患了某种可怕的疾病一样，当你不习惯竞争对手时，你会把他们夸大成怪物。\n这里有一个对创业公司有用的规则：竞争对手很少像看起来那么危险。大多数会在你摧毁他们之前自我毁灭。而且有多少个竞争对手肯定不重要，就像对马拉松冠军 …"
  },{
    "title": "我从Hacker News学到的",
    "url": "/paul_graham/essays_zh/hackernews/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n我从Hacker News学到的 2009年2月\nHacker News上周满两岁了。最初它应该是一个副业项目——一个用来磨练Arc的应用程序，以及现任和未来Y Combinator创始人交流新闻的地方。它已经变得比我预期的更大，占用了我更多的时间，但我不后悔，因为我在工作中学到了很多东西。\n增长 当我们在2007年2月推出时，工作日流量大约是1600个独立日访问者。从那时起增长到大约22,000个。这个增长率比我喜欢的要高一点。我希望网站增长，因为一个至少不缓慢增长的网站可能已经死了。但我不希望它变得像Digg或Reddit那样大——主要是因为这会稀释网站的特色，也是因为我不想把所有时间都花在处理扩展性问题上。\n我已经有够多的问题了。记住，HN的最初动机是测试一种新的编程语言，而且是一种专注于实验语言设计而非性能的语言。每次网站变慢，我就通过回忆McIlroy和Bentley的名言\u0026quot;性能的关键在于优雅，而不是特殊情况的军队\u0026quot;来强化自己，并寻找我能用最少代码消除的瓶颈。到目前为止，我一直能够跟上，从某种意义上说，尽管增长了14倍，性能却一直保持中等水平。我不知道下一步该做什么，但我可能会想出办法。\n这通常是我对网站的态度。Hacker News是一个实验，而且是在一个非常年轻的领域的实验。这种类型的网站只有几年历史。互联网对话一般来说也只有几十年历史。所以我们可能只发现了最终会发现的很小一部分。\n这就是为什么我对HN如此乐观。当一项技术如此年轻时，现有的解决方案通常很糟糕；这意味着必须有可能做得更好；这意味着许多看似无法解决的问题其实可以解决。包括，我希望，困扰了这么多先前社区的问题：被增长所破坏。\n稀释 自从网站建立几个月以来，用户就一直在担心这个问题。到目前为止，这些警报都是错误的，但它们可能不会永远如此。稀释是一个难题。但可能是可以解决的；当\u0026quot;总是\u0026quot;等于20个实例时，开放对话\u0026quot;总是\u0026quot;被增长破坏并没有多大意义。\n但重要的是要记住我们正在尝试解决一个新问题，因为这意味着我们将不得不尝试新事物，其中大多数可能不会奏效。几周前我尝试用橙色显示平均评论分数最高的用户的名字。[1] 那是一个错误。突然间一个或多或少团结的文化被分为有和没有两部分。直到看到它被分裂，我才意识到这个文化有多么团结。看着很痛苦。[2]\n所以橙色用户名不会回来了。（抱歉。）但将来会有其他同样看似有缺陷的想法，而那些被证明有效的想法可能与那些无效的想法看起来一样有缺陷。\n可能我从稀释中学到的最重要的事情是，它更多地是用行为而不是用户来衡量的。你想要排除的是不良行为，而不是坏人。用户行为出人意料地具有可塑性。如果人们被期望表现良好，他们往往会这样；反之亦然。\n当然，禁止不良行为确实倾向于使坏人远离，因为在一个必须表现良好的地方，他们会感到不舒服地受约束。但这种排除他们的方式比显性障碍更温和，可能也更有效。\n现在很清楚，破窗理论也适用于社区网站。该理论认为，轻微的不良行为形式会鼓励更恶劣的行为：一个有很多涂鸦和破窗户的社区会成为发生抢劫的地方。当Giuliani推行使破窗理论著名的改革时，我住在纽约，转变是奇迹般的。当Reddit发生相反情况时，我是Reddit用户，转变同样引人注目。\n我不是在批评Steve和Alexis。Reddit发生的事情不是出于疏忽。从一开始他们就有一个政策，除了垃圾邮件什么都不审查。此外，Reddit与Hacker News有不同的目标。Reddit是一家创业公司，不是一个副业项目；它的目标是尽可能快地增长。结合快速增长和零审查，结果就是一场混战。但如果他们重新来过，我不认为他们会做得有很大不同。从流量来看，Reddit比Hacker News成功得多。\n但Reddit发生的事情不会不可避免地发生在HN身上。有几个局部最大值。可以有自由放任的地方，也有更深思熟虑的地方，就像现实世界中一样；人们会根据他们在哪里而有不同的行为，就像他们在现实世界中一样。\n我在野外观察到这一点。我见过在Reddit和Hacker News上交叉发帖的人，他们确实费心写了两个版本，一个给Reddit的激烈版本，一个给HN的更温和版本。\n提交 像Hacker News这样的网站需要避免两种主要类型的问题：不好的故事和不好的评论。到目前为止，不好故事的危险似乎较小。现在首页上的故事仍然是HN开始时大概会在那里的那些故事。\n我曾经认为我必须加权投票以防止垃圾出现在首页上，但我还不需要这样做。我本不会预测首页会保持得这么好，我不确定为什么会这样。也许只有更深思熟虑的用户足够关心提交和投票链接，所以一个随机新用户的边际成本接近于零。或者首页通过广告宣传预期类型的提交来保护自己。\n对首页最危险的东西是那些太容易投票的东西。如果有人证明了一个新定理，读者需要一些工作来决定是否投票。一个有趣的漫画需要较少的努力。一个以战斗口号为标题的咆哮需要零努力，因为人们甚至不读它就投票。\n因此我称之为轻浮原则：在用户投票的新闻网站上，最容易判断的链接将接管，除非你采取具体措施来防止它。\nHacker News有两种防止轻浮的保护。最常见的轻浮链接类型被禁止作为离题。小猫图片、政治咆哮等等被明确禁止。这排除了大多数轻浮内容，但不是全部。一些链接既是轻浮的（在非常短的意义上），也是相关的。\n对此没有单一的解决方案。如果一个链接只是一个空洞的咆哮，编辑有时会杀死它，即使它在相关意义上是关于黑客的，因为它不符合真正的标准，即激发一个人的智力好奇心。如果一个网站的帖子特征是这种类型，我有时会禁止它，这意味着该url的新内容被自动杀死。如果一个帖子有诱饵标题，编辑有时会重新措辞使其更实际。这对于标题是战斗口号的链接特别必要，否则它们成为隐含的\u0026quot;如果你相信某某就投票\u0026quot;帖子，这是最极端的轻浮形式。\n处理链接的技术必须发展，因为链接在发展。聚合器的存在已经影响了它们聚合的内容。作者现在故意写东西来吸引聚合器的流量——有时甚至是特定的聚合器。（不，这个陈述的讽刺性没有逃过我的注意。）然后有更阴险的变异，比如链接劫持——发布别人文章的释义并提交它而不是原始文章。这些可以获得很多投票，因为文章中很多好的东西经常被保留；确实，释义越接近抄袭，保留的就越多。[3]\n我认为一个杀死提交的网站提供一种方式让用户如果想要可以看到被杀掉的内容是很重要的。这使编辑诚实，同样重要的是，让用户有信心如果编辑停止诚实他们会知道。HN用户可以通过翻转他们个人资料中称为showdead的开关来做到这一点。[4]\n评论 坏评论似乎比坏提交更难解决的问题。虽然HN首页上链接的质量没有太大变化，但中位数评论的质量可能有所下降。\n评论中有两种主要的坏：刻薄和愚蠢。两者之间有很大的重叠——刻薄的评论很可能也是愚蠢的——但处理它们的策略不同。刻薄更容易控制。你可以有规则说不应该刻薄，如果你执行它们，似乎有可能控制住刻薄。\n控制愚蠢更难，也许是因为愚蠢不那么容易区分。刻薄的人比愚蠢的人更可能知道自己在刻薄。\n最危险的愚蠢评论形式不是长而错误的论点，而是愚蠢的笑话。长而错误的论点实际上相当罕见。评论质量和长度之间有很强的相关性；如果你想比较社区网站上评论的质量，平均长度会是一个很好的预测指标。原因可能是人性，而不是任何特定于评论线程的东西。可能只是愚蠢更多地表现为很少有想法，而不是错误的想法。\n无论原因是什么，愚蠢的评论往往是短的。而且因为很难写一个以其传达的信息量而 distinguished 的短评论，人们试图通过搞笑来区分它们。愚蠢评论最诱人的形式是 supposedly 机智的贬低，可能是因为贬低是幽默的最容易形式。[5] 所以禁止刻薄的一个优势是它也减少了这些。\n坏评论像野葛：它们迅速接管。评论对新评论的影响比提交对新提交的影响大得多。如果有人提交一个蹩脚的文章，其他提交不会都变得蹩脚。但如果有人在帖子上发布一个愚蠢的评论，这就为它周围的区域定下了基调。人们用愚蠢的笑话回复愚蠢的笑话。\n也许解决方案是在人们可以对评论做出回应之前添加一个延迟，并使延迟长度与其质量的一些预测成反比。那么愚蠢的线程会增长得更慢。[6]\n人 我注意到我描述的大多数技术是保守的：它们旨在保护网站的特色，而不是增强它。我不认为这是我的偏见。这是由于问题的形状。Hacker News有幸开始就好，所以在这种情况下这确实是一个保护问题。但我认为这个原则也适用于不同起源的网站。\n社区网站中的好东西更多地来自人，而不是技术；技术主要在防止坏事情方面发挥作用。技术当然可以增强讨论。例如，嵌套评论可以。但我宁愿使用一个功能原始、用户聪明友好的网站，也不愿使用一个用户是白痴或巨魔的更先进的网站。\n所以社区网站能做的最重要的事情是吸引它想要的那种人。一个试图尽可能大的网站想要吸引每个人。但一个针对特定用户群体的网站必须只吸引那些人——同样重要的是，排斥其他所有人。我在HN上有意识地努力做到这一点。图形设计尽可能简单，网站规则不鼓励戏剧性的链接标题。目标是第一次到达HN的人唯一感兴趣的东西应该是那里表达的想法。\n调整网站以吸引某些人的缺点是，对那些人来说，它可能太有吸引力了。我太清楚Hacker News可能有多令人上瘾了。对我，就像对许多用户一样，它是一种虚拟的城镇广场。当我想从工作中休息一下时，我走进广场，就像我可能会走进现实世界中的哈佛广场或大学大道。[7] 但在线广场比物理广场更危险。如果我半天在大学大道闲逛，我会注意到。我必须走一英里才能到那里，坐在咖啡馆感觉与工作不同。但访问在线论坛只需要点击一下，表面上感觉非常像工作。你可能是在浪费时间，但你不是闲置的。互联网上有人错了，而你正在解决问题。\nHacker News肯定是有用的。我从在HN上读到的东西中学到了很多。我写了几篇最初作为评论的文章。所以我不希望网站消失。但我想要确保它不是生产力的净拖累。那将是一场灾难，吸引成千上万聪明人到导致他们浪费大量时间的网站。我希望我能100%确定这不是对HN的描述。\n我觉得游戏和社交应用程序的令人上瘾性仍然是一个大部分未解决的问题。现在的情况就像1980年代的快克可卡因：我们发明了极其令人上瘾的新东西，但我们还没有进化出保护自己免受它们伤害的方法。我们最终会的，这是我希望接下来专注解决的问题之一。\n注释 [1] 我尝试用平均数和中位数评论分数对用户进行排名，平均数（去掉高分）似乎是对高质量更准确的预测。不过中位数可能是对低质量更准确的预测。\n[2] 我从这个实验中学到的另一件事是，如果你要区分人，你最好确定你做得对。这是快速原型设计不起作用的问题之一。\n确实，这是不在各种类型的人之间歧视的智力上诚实的论点。不这样做的理由不是每个人都一样，而是做错是坏的，做对是难的。\n[3] 当我抓住恶劣的链接劫持帖子时，我用他们复制的任何东西的url替换它。习惯性链接劫持的网站会被禁止。\n",
    "description": "",
    "tags": ["hacker news","社区","社交媒体","平台","在线社区"],
    "categories": [],
    "content": "→ English Version\n我从Hacker News学到的 2009年2月\nHacker News上周满两岁了。最初它应该是一个副业项目——一个用来磨练Arc的应用程序，以及现任和未来Y Combinator创始人交流新闻的地方。它已经变得比我预期的更大，占用了我更多的时间，但我不后悔，因为我在工作中学到了很多东西。\n增长 当我们在2007年2月推出时，工作日流量大约是1600个独立日访问者。从那时起增长到大约22,000个。这个增长率比我喜欢的要高一点。我希望网站增长，因为一个至少不缓慢增长的网站可能已经死了。但我不希望它变得像Digg或Reddit那样大——主要是因为这会稀释网站的特色，也是因为我不想把所有时间都花在处理扩展性问题上。\n我已经有够多的问题了。记住，HN的最初动机是测试一种新的编程语言，而且是一种专注于实验语言设计而非性能的语言。每次网站变慢，我就通过回忆McIlroy和Bentley的名言\u0026quot;性能的关键在于优雅，而不是特殊情况的军队\u0026quot;来强化自己，并寻找我能用最少代码消除的瓶颈。到目前为止，我一直能够跟上，从某种意义上说，尽管增长了14倍，性能却一直保持中等水平。我不知道下一步该做什么，但我可能会想出办法。\n这通常是我对网站的态度。Hacker News是一个实验，而且是在一个非常年轻的领域的实验。这种类型的网站只有几年历史。互联网对话一般来说也只有几十年历史。所以我们可能只发现了最终会发现的很小一部分。\n这就是为什么我对HN如此乐观。当一项技术如此年轻时，现有的解决方案通常很糟糕；这意味着必须有可能做得更好；这意味着许多看似无法解决的问题其实可以解决。包括，我希望，困扰了这么多先前社区的问题：被增长所破坏。\n稀释 自从网站建立几个月以来，用户就一直在担心这个问题。到目前为止，这些警报都是错误的，但它们可能不会永远如此。稀释是一个难题。但可能是可以解决的；当\u0026quot;总是\u0026quot;等于20个实例时，开放对话\u0026quot;总是\u0026quot;被增长破坏并没有多大意义。\n但重要的是要记住我们正在尝试解决一个新问题，因为这意味着我们将不得不尝试新事物，其中大多数可能不会奏效。几周前我尝试用橙色显示平均评论分数最高的用户的名字。[1] 那是一个错误。突然间一个或多或少团结的文化被分为有和没有两部分。直到看到它被分裂，我才意识到这个文化有多么团结。看着很痛苦。[2]\n所以橙色用户名不会回来了。（抱歉。）但将来会有其他同样看似有缺陷的想法，而那些被证明有效的想法可能与那些无效的想法看起来一样有缺陷。\n可能我从稀释中学到的最重要的事情是，它更多地是用行为而不是用户来衡量的。你想要排除的是不良行为，而不是坏人。用户行为出人意料地具有可塑性。如果人们被期望表现良好，他们往往会这样；反之亦然。\n当然，禁止不良行为确实倾向于使坏人远离，因为在一个必须表现良好的地方，他们会感到不舒服地受约束。但这种排除他们的方式比显性障碍更温和，可能也更有效。\n现在很清楚，破窗理论也适用于社区网站。该理论认为，轻微的不良行为形式会鼓励更恶劣的行为：一个有很多涂鸦和破窗户的社区会成为发生抢劫的地方。当Giuliani推行使破窗理论著名的改革时，我住在纽约，转变是奇迹般的。当Reddit发生相反情况时，我是Reddit用户，转变同样引人注目。\n我不是在批评Steve和Alexis。Reddit发生的事情不是出于疏忽。从一开始他们就有一个政策，除了垃圾邮件什么都不审查。此外，Reddit与Hacker News有不同的目标。Reddit是一家创业公司，不是一个副业项目；它的目标是尽可能快地增长。结合快速增长和零审查，结果就是一场混战。但如果他们重新来过，我不认为他们会做得有很大不同。从流量来看，Reddit比Hacker News成功得多。\n但Reddit发生的事情不会不可避免地发生在HN身上。有几个局部最大值。可以有自由放任的地方，也有更深思熟虑的地方，就像现实世界中一样；人们会根据他们在哪里而有不同的行为，就像他们在现实世界中一样。\n我在野外观察到这一点。我见过在Reddit和Hacker News上交叉发帖的人，他们确实费心写了两个版本，一个给Reddit的激烈版本，一个给HN的更温和版本。\n提交 像Hacker News这样的网站需要避免两种主要类型的问题：不好的故事和不好的评论。到目前为止，不好故事的危险似乎较小。现在首页上的故事仍然是HN开始时大概会在那里的那些故事。\n我曾经认为我必须加权投票以防止垃圾出现在首页上，但我还不需要这样做。我本不会预测首页会保持得这么好，我不确定为什么会这样。也许只有更深思熟虑的用户足够关心提交和投票链接，所以一个随机新用户的边际成本接近于零。或者首页通过广告宣传预期类型的提交来保护自 …"
  },{
    "title": "我从用户身上学到了什么",
    "url": "/paul_graham/essays_zh/users/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n我从用户身上学到了什么 2022年9月\n我最近告诉Y Combinator的申请者，我能给他们的关于入选的最好建议，按字数计算，是\u0026quot;解释你从用户身上学到了什么\u0026quot;。这测试了很多东西：你是否在关注用户，你对他们的理解程度，甚至他们多么需要你正在制作的东西。\n之后我问了自己同样的问题。我从YC的用户，也就是我们资助的初创公司身上学到了什么？\n首先想到的是，大多数初创公司都有相同的问题。没有两家有完全相同的问题，但令人惊讶的是，无论他们在制作什么，问题在很大程度上保持不变。一旦你 advising 了100家做着不同事情的初创公司，你很少会遇到以前没见过的问题。\n这个事实是使YC运作的原因之一。但我们在开始YC时并不知道这一点。我只有几个数据点：我们自己的初创公司，以及朋友们创办的。相同问题以不同形式反复出现的频率让我感到惊讶。许多后期投资者可能永远不会意识到这一点，因为后期投资者在整个职业生涯中可能不会advising 100家初创公司，但YC合伙人在第一年或第二年就能获得这么多经验。\n这是资助大量早期公司而不是少量后期公司的一个优势。你获得大量数据。不仅因为你在看更多的公司，还因为有更多地方会出错。\n但知道（几乎）所有初创公司可能遇到的问题并不意味着对它们的advising 可以自动化，或简化为公式。没有办法替代与YC合伙人的个人办公时间。每家初创公司都是独特的，这意味着它们必须由了解它们的特定合伙人来advising。[1]\n我们是艰难地学到这一点的，在2012年夏天臭名昭著的\u0026quot;打破YC的批次\u0026quot;中。在那之前，我们将合伙人视为一个整体。当一家初创公司请求办公时间时，他们会得到任何合伙人发布的下一个可用时段。这意味着每个合伙人都必须了解每家初创公司。这在60家初创公司时运作良好，但当批次增长到80家时，一切都崩溃了。创始人可能没有意识到任何问题，但合伙人感到困惑和不高兴，因为他们在批次中途仍然还不了解所有公司。[2]\n起初我很困惑。为什么60家初创公司时还好，80家就崩溃了？只多了三分之一。然后我意识到发生了什么。我们使用的是O(n²)算法。所以当然它爆炸了。\n我们采用的解决方案是这种情况下的经典解决方案。我们将批次分成更小的初创公司组，每组由专门的合伙人组监督。这解决了问题，并且从此运作良好。但打破YC的批次有力地证明了advising 初创公司的过程必须是多么个性化。\n另一个相关的惊喜是创始人在意识到他们的问题方面可以有多差。创始人有时会进来谈论某个问题，而我们会在谈话过程中发现另一个更大的问题。例如（这种情况太常见了），创始人会进来谈论他们在融资方面的困难，在深入调查他们的情况后，原来原因是公司表现不佳，投资者可以看出来。或者创始人会进来担心他们还没有解决用户获取的问题，而原来原因是他们的产品不够好。有时候我问\u0026quot;如果你没有建造它，你会自己使用它吗？\u0026ldquo;创始人在思考后说\u0026quot;不会\u0026rdquo;。好吧，这就是你在获取用户方面遇到困难的原因。\n创始人通常知道他们的问题是什么，但不知道它们的相对重要性。[3] 他们会进来谈论他们担心的三个问题。一个具有中等重要性，一个根本不重要，还有一个如果不立即处理会杀死公司。这就像看那些恐怖电影，女主角对男友欺骗她深感不安，但对神秘半开的门只是略微好奇。你想说：别管你男友了，想想那扇门！幸运的是在办公时间你可以这样做。所以虽然初创公司仍然以一定的规律性死亡，但很少是因为他们走进了一个包含谋杀者的房间。YC合伙人可以警告他们谋杀者在哪儿。\n不是创始人会听。这是另一个大惊喜：创始人经常不听我们的。几周前我和一个已经在YC工作了几批次的合伙人谈话，她开始看到这个模式。\u0026ldquo;他们一年后回来，\u0026ldquo;她说，\u0026ldquo;说\u0026rsquo;我们真希望当初听了你的话。'\u0026rdquo;\n我花了很长时间才弄明白为什么创始人不听。起初我以为仅仅是固执。这是部分原因，但另一个可能更重要的原因是初创公司的很多事情是反直觉的。当你告诉别人一些反直觉的事情时，对他们来说听起来是错误的。所以创始人不听我们的原因是因为他们不相信我们。至少在经验教会他们之前是这样。[4]\n初创公司如此反直觉的原因是它们与大多数人的其他经历如此不同。没有人知道它是什么样子，除了那些做过的人。这就是为什么YC合伙人通常应该自己本身就是创始人。但奇怪的是，初创公司的反直觉性结果是使YC运作的另一个原因。如果它不是反直觉的，创始人就不需要我们关于如何做的建议。\n专注对早期初创公司来说双倍重要，因为不仅他们有一百个不同的问题，除了创始人外没有人来解决这些问题。如果创始人专注于不重要的事情，就没有人专注于重要的事情。所以YC发生的本质是找出哪些问题最重要，然后想出解决它们的想法——理想情况下以一周或更少的分辨率——然后尝试这些想法并衡量它们的效果如何。重点是行动，具有可衡量的近期结果。\n这并不意味着创始人应该不顾后果地向前冲。如果你以足够高的频率纠正路线，你可以同时在微观尺度上果断，在宏观尺度上谨慎。结果是一个有点蜿蜒的路径，但执行得非常迅速，就像跑卫在球场上的路径。在实践中，回溯比你预期的要少。创始人通常猜对了应该往哪个方向跑，特别是如果他们有像YC合伙人这样有经验的人来检验他们的假设。当他们猜错时，他们很快会注意到，因为他们会在下周的办公时间谈论结果。[5]\n导航能力的小幅改进可以让你快得多，因为它有双重效果：路径更短，当你更确定它是正确的时，你可以沿着它走得更快。这就是YC价值所在的地方，帮助创始人获得额外的专注增量，让他们移动得更快。由于快速移动是初创公司的本质，YC实际上使初创公司更像初创公司。\n速度定义初创公司。专注使能速度。YC改善专注。\n为什么创始人不确定该做什么？部分是因为初创公司几乎按照定义在做新的事情，这意味着没有人知道如何做，或者在大多数情况下甚至不知道\u0026quot;它\u0026quot;是什么。部分是因为初创公司总体上如此反直觉。部分是因为许多创始人，特别是年轻而有雄心的，被训练以错误的方式获胜。我花了好几年才弄明白这一点。大多数国家的教育系统训练你通过破解考试来获胜，而不是实际做它应该测量的任何事情。但当你开始初创公司时，这就不起作用了。所以YC所做的一部分是重新训练创始人停止试图破解考试。（这需要惊人的长时间。一年后，你仍然看到他们回到旧习惯。）\nYC不仅仅是更有经验的创始人传递他们的知识。它更像是专业化而不是学徒制。YC合伙人和创始人的知识形状不同：创始人获得YC合伙人拥有的初创公司问题的百科全书式知识是不值得的，就像YC合伙人获得创始人拥有的领域知识深度是不值得的一样。这就是为什么有经验的创始人做YC仍然有价值，就像有经验的运动员有教练仍然有价值一样。\nYC给创始人的另一个重要事情是同事，这可能比合伙人的建议更重要。如果你看历史，伟大的工作聚集在某些地方和机构周围：15世纪晚期的佛罗伦萨，19世纪晚期的哥廷根大学，罗斯领导下的《纽约客》，贝尔实验室，施乐PARC。无论你多好，好同事让你更好。确实，非常有雄心的人可能比任何人都更需要同事，因为他们在日常生活中如此缺乏同事。\n无论YC有一天是否成功被列入这些著名的集群，都不是因为缺乏尝试。我们非常清楚这个历史现象，并有意识地将YC设计成一个。到这时，说它是伟大初创公司创始人的最大集群已经不是吹嘘了。即使是试图攻击YC的人也承认这一点。\n同事和初创公司创始人是世界上两个最强大的力量，所以你会期望将它们结合起来会产生很大的效果。在YC之前，就人们思考这个问题而言，大多数人假设它们不能结合——孤独是独立的代价。这就是我们在1990年代在波士顿创办自己的初创公司时的感觉。我们有几个年长的人可以寻求建议（质量各不相同），但没有同龄人。没有人可以和我们一起抱怨投资者的不当行为，或者一起推测技术的未来。我经常告诉创始人制作他们自己想要的东西，YC当然就是那样：它被设计成正是我们初创初创公司时想要的东西。\n我们想要的一件事是能够获得种子资金，而不必四处寻找随机富人。现在这已经成了商品，至少在美国是这样。但好同事永远不会成为商品，因为它们聚集在某些地方的事实意味着它们在其他地方成比例地缺席。\n但在它们聚集的地方确实会发生一些神奇的事情。YC晚餐时房间里的能量像我经历过的任何其他事情一样。我们本来会很高兴只有一两家其他初创公司可以交谈。当你有满满一房间时，那就完全是另一回事了。\nYC创始人不仅相互激励。他们也相互帮助。这是我学到的关于初创公司创始人最令人高兴的事情：他们在帮助彼此方面可以多么慷慨。我们在第一批就注意到了这一点，并有意识地将YC设计成放大它。结果比大学强烈得多。在合伙人、校友和同批次同学之间，创始人被想要帮助他们并且能够帮助他们的人包围着。\n注释\n[1] 这就是为什么我不喜欢人们把YC称为\u0026quot;训练营\u0026quot;的原因。它像训练营一样紧张，但在结构上相反。不是每个人都在做同样的事情，而是每个人都在和YC合伙人交谈，弄清楚他们的特定初创公司需要什么。\n[2] 当我说2012年夏季批次被打破时，我的意思是合伙人们感觉有什么问题。事情还没有糟糕到初创公司有更差的体验。事实上那批次做得异常好。\n[3] 这种情况让我想起研究表明，人们在回答问题方面比判断他们答案的准确性方面要好得多。这两种现象感觉非常相似。\n[4] Airbnb人特别善于倾听——部分因为他们灵活和自律，但也因为他们在前一年经历了如此艰难的时期。他们准备好倾听。\n[5] 果断性的最佳单位取决于获得结果需要多长时间，而这取决于你正在解决的问题类型。当你与投资者谈判时，可能是几天，而如果你在建造硬件，可能是几个月。\n感谢特雷弗·布莱克威尔、杰西卡·利文斯顿、哈吉·塔加尔和加里·谭阅读本文草稿。\n",
    "description": "",
    "tags": ["创业","用户","y_combinator","建议","学习","企业家精神"],
    "categories": [],
    "content": "→ English Version\n我从用户身上学到了什么 2022年9月\n我最近告诉Y Combinator的申请者，我能给他们的关于入选的最好建议，按字数计算，是\u0026quot;解释你从用户身上学到了什么\u0026quot;。这测试了很多东西：你是否在关注用户，你对他们的理解程度，甚至他们多么需要你正在制作的东西。\n之后我问了自己同样的问题。我从YC的用户，也就是我们资助的初创公司身上学到了什么？\n首先想到的是，大多数初创公司都有相同的问题。没有两家有完全相同的问题，但令人惊讶的是，无论他们在制作什么，问题在很大程度上保持不变。一旦你 advising 了100家做着不同事情的初创公司，你很少会遇到以前没见过的问题。\n这个事实是使YC运作的原因之一。但我们在开始YC时并不知道这一点。我只有几个数据点：我们自己的初创公司，以及朋友们创办的。相同问题以不同形式反复出现的频率让我感到惊讶。许多后期投资者可能永远不会意识到这一点，因为后期投资者在整个职业生涯中可能不会advising 100家初创公司，但YC合伙人在第一年或第二年就能获得这么多经验。\n这是资助大量早期公司而不是少量后期公司的一个优势。你获得大量数据。不仅因为你在看更多的公司，还因为有更多地方会出错。\n但知道（几乎）所有初创公司可能遇到的问题并不意味着对它们的advising 可以自动化，或简化为公式。没有办法替代与YC合伙人的个人办公时间。每家初创公司都是独特的，这意味着它们必须由了解它们的特定合伙人来advising。[1]\n我们是艰难地学到这一点的，在2012年夏天臭名昭著的\u0026quot;打破YC的批次\u0026quot;中。在那之前，我们将合伙人视为一个整体。当一家初创公司请求办公时间时，他们会得到任何合伙人发布的下一个可用时段。这意味着每个合伙人都必须了解每家初创公司。这在60家初创公司时运作良好，但当批次增长到80家时，一切都崩溃了。创始人可能没有意识到任何问题，但合伙人感到困惑和不高兴，因为他们在批次中途仍然还不了解所有公司。[2]\n起初我很困惑。为什么60家初创公司时还好，80家就崩溃了？只多了三分之一。然后我意识到发生了什么。我们使用的是O(n²)算法。所以当然它爆炸了。\n我们采用的解决方案是这种情况下的经典解决方案。我们将批次分成更小的初创公司组，每组由专门的合伙人组监督。这解决了问题，并且从此运作良好。但打破YC的批次有力地证明了advising 初创公司的过程必须是多么个性化。\n另一个相关的惊喜是创始人在意识到他们的问题方面可以有多差。创始人有时会进来谈论某个问题，而我们会在谈话过程中发现另一个更大的问题。例如（这种情况太常见了），创始人会进来谈论他们在融资方面的困难，在深入调查他们的情况后，原来原因是公司表现不佳，投资者可以看出来。或者创始人会进来担心他们还没有解决用户获取的问题，而原来原因是他们的产品不够好。有时候我问\u0026quot;如果你没有建造它，你会自己使用它吗？\u0026ldquo;创始人在思考后说\u0026quot;不会\u0026rdquo;。好吧，这就是你在获取用户方面遇到困难的原因。\n创始人通常知道他们的问题是什么，但不知道它们的相对重要性。[3] 他们会进来谈论他们担心的三个问题。一个具有中等重要性，一个根本不重要，还有一个如果不立即处理会杀死公司。这就像看那些恐怖电影，女主角对男友欺骗她深感不安，但对神秘半开的门只是略微好奇。你想说：别管你男友了，想想那扇门！幸运的是在办公时间你可以这样做。所以虽然初创公司仍然以一定的规律性死亡，但很少是因为他们走进了一个包含谋杀者的房间。YC合伙人可以警告他们谋杀者在哪儿。\n不是创始人会听。这是另一个大惊喜：创始人经常不听我们的。几周前我和一个已经在YC工作了几批次的合伙人谈话，她开始看到这个模式。\u0026ldquo;他们一年后回来，\u0026ldquo;她说，\u0026ldquo;说\u0026rsquo;我们真希望当初听了你的话。'\u0026rdquo;\n我花了很长时间才弄明白为什么创始人不听。起初我以为仅仅是固执。这是部分原因，但另一个可能更重要的原因是初创公司的很多事情是反直觉的。当你告诉别人一些反直觉的事情时，对他们来说听起来是错误的。所以创始人不听我们的原因是因为他们不相信我们。至少在经验教会他们之前是这样。[4]\n初创公司如此反直觉的原因是它们与大多数人的其他经历如此不同。没有人知道它是什么样子，除了那些做过的人。这就是为什么YC合伙人通常应该自己本身就是创始人。但奇怪的是，初创公司的反直觉性结果是使YC运作的另一个原因。如果它不是反直觉的，创始人就不需要我们关于如何做的建议。\n专注对早期初创公司来说双倍重要，因为不仅他们有一百个不同的问题，除了创始人外没有人来解决这些问题。如果创始人专注于不重要的事情，就没有人专注于重要的事情。所以YC发生的本质是找出哪些问 …"
  },{
    "title": "我们告诉孩子的谎言",
    "url": "/paul_graham/essays_zh/lies/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n我们告诉孩子的谎言 2008年5月\n成年人不断地对孩子撒谎。我不是说我们应该停止，但我认为我们至少应该审视我们告诉他们什么谎言以及为什么。\n这对我们可能也有好处。我们小时候都被骗过，有些我们被告知的谎言仍然影响着我们。因此，通过研究成年人对孩子撒谎的方式，我们或许能够清除我们被告知的谎言。\n我在非常广泛的意义上使用\u0026quot;谎言\u0026quot;这个词：不仅仅是明显的虚假陈述，还包括我们误导孩子的所有更微妙的方式。虽然\u0026quot;谎言\u0026quot;有负面含义，我并不是建议我们永远不应该这样做——只是说当我们这样做时应该注意。[1]\n我们对孩子撒谎的方式最显著的事情之一是，这个阴谋是多么广泛。所有成年人都知道他们的文化对孩子撒谎什么：那些你回答\u0026quot;问你父母\u0026quot;的问题。如果一个孩子问1982年谁赢得了世界大赛或碳的原子量是多少，你可以直接告诉他。但如果一个孩子问你\u0026quot;有上帝吗？\u0026ldquo;或\u0026quot;妓女是什么？\u0026ldquo;你可能会说\u0026quot;问你父母\u0026rdquo;。\n既然我们都同意，孩子们很少看到他们被呈现的世界观中有裂缝。最大的分歧是在父母和学校之间，但即使那些也很小。学校对有争议的话题说话很小心，如果他们确实与父母希望孩子相信的相矛盾，父母要么迫使学校保持沉默，要么把孩子转到新学校。\n这个阴谋是如此彻底，以至于大多数发现它的孩子只是通过发现他们被告知的内容中的内在矛盾才发现的。对于那些在手术过程中醒来的孩子来说，这可能是创伤性的。爱因斯坦的经历是这样的：\n通过阅读流行的科学书籍，我很快确信圣经故事中的许多内容不可能是真的。其结果是一种积极的自由思考，伴随着青年故意被国家通过谎言欺骗的印象：这是一个压倒性的印象。[2]\n我记得那种感觉。到15岁时，我确信世界从头到尾都是腐败的。这就是为什么像《黑客帝国》这样的电影有如此共鸣。每个孩子都在一个虚假的世界中长大。在某种程度上，如果背后的力量像一群邪恶机器一样明确区分，人们可以通过吃药就能彻底摆脱，那会更容易。\n保护 如果你问成年人为什么对孩子撒谎，他们给出的最常见的原因是为了保护他们。孩子们确实需要保护。你想为新生儿创造的环境与大城市的街道非常不同。\n这似乎如此明显，以至于称之为谎言似乎是错误的。告诉婴儿世界是安静、温暖和安全的，这当然不是一个坏谎言。但如果这种无害的谎言不加以审视，可能会变味。\n想象一下，如果你试图让某人在像新生儿一样受保护的环境中生活到18岁。如此严重地误导某人关于世界的事情，似乎不是保护而是虐待。当然，这是一个极端的例子；当父母做这种事情时，它成为全国新闻。但你在较小的范围内看到了同样的问题，在郊区青少年感到的不适中。\n郊区的主要目的是为孩子们提供一个受保护的环境成长。它似乎对10岁的孩子很棒。我10岁时喜欢住在郊区。我没有注意到它是多么贫瘠。我的整个世界不比我骑自行车去的几个朋友的家和我跑来跑去的一些树林大。在对数尺度上，我介于婴儿床和地球之间。郊区的街道正好合适。但随着我长大，郊区开始感觉令人窒息地虚假。\n生活在10岁或20岁时可能相当好，但在15岁时经常令人沮丧。这是一个太大的问题，无法在这里解决，但15岁生活糟糕的一个原因肯定是孩子们被困在一个为10岁孩子设计的世界里。\n父母希望通过在郊区抚养孩子来保护他们免受什么伤害？一个搬出曼哈顿的朋友只是说她3岁的女儿\u0026quot;看到太多\u0026rdquo;。我能想到的包括：喝醉或吸毒的人、贫穷、疯狂、可怕的医疗状况、不同程度的奇怪性行为，以及暴力的愤怒。\n我想如果我有3岁的孩子，最让我担心的是愤怒。我29岁时搬到纽约，即使那时我也感到惊讶。我不希望一个3岁的孩子看到我目睹的一些争吵。那太可怕了。成年人对年幼孩子隐瞒的很多事情，他们隐瞒是因为这些事情会吓到孩子，而不是因为他们想隐瞒这些事情的存在。误导孩子只是一个副作用。\n这似乎是成年人对孩子撒谎的最正当的类型之一。但因为谎言是间接的，我们没有对它们进行严格的统计。父母知道他们隐瞒了关于性的事实，许多人在某个时刻会坐下来向孩子解释更多。但很少有人告诉他们孩子真实世界和他们成长起来的茧之间的区别。将此与父母试图在孩子心中灌输的信心结合起来，每年你都会得到一批新的18岁年轻人，他们认为他们知道如何管理世界。\n不是所有18岁的年轻人都认为他们知道如何管理世界吗？实际上这似乎是一个最近的创新，不超过100年。在前工业时代，青少年是成人世界的初级成员，相对较清楚自己的不足。他们能看到他们不像村里的铁匠那么强壮或熟练。在过去时代，人们对某些事情对孩子撒谎比我们现在多，但人工、受保护环境中隐含的谎言是最近的发明。像许多新发明一样，富人首先得到了这个。国王和贵族的孩子是第一批与世界脱节长大的人。郊区意味着一半人口在这方面可以像国王一样生活。\n性（和毒品） 在纽约抚养青少年孩子，我会有不同的担忧。我较少担心他们会看到什么，更担心他们会做什么。我和许多在曼哈顿长大的孩子一起上大学，总的来说他们似乎相当玩世不恭。他们似乎平均在14岁左右失去童贞，到大学时尝试过的毒品比我听说的还要多。\n父母不希望青少年孩子有性生活的原因很复杂。有一些明显的危险：怀孕和性传播疾病。但这些不是父母不希望孩子有性生活的唯一原因。14岁女孩的平均父母会讨厌她有性生活的想法，即使怀孕或性传播疾病的风险为零。\n孩子可能能感觉到他们没有被告诉全部真相。毕竟，怀孕和性传播疾病对成年人来说同样是问题，而他们有性生活。\n什么真正让父母对他们青少年孩子的性生活感到困扰？他们对这个想法的厌恶是如此本能，可能是天生的。但如果是天生的，它应该是普遍的，而且有很多社会父母不介意青少年孩子有性生活——事实上，14岁成为母亲是正常的。那么发生了什么？似乎确实存在一个普遍禁忌，反对与青春期前的儿童发生性关系。人们可以想象这有进化原因。我认为这是工业化社会父母不喜欢青少年孩子有性生活的主要原因。他们仍然认为他们是孩子，尽管从生物学上讲他们不是，所以对儿童性行为的禁忌仍然有力量。\n成年人对性隐瞒的一件事他们也对毒品隐瞒：它可以带来极大的快乐。这就是性和毒品如此危险的原因。对它们的渴望可能会模糊一个人的判断力——当被模糊的判断力已经是青少年孩子糟糕的判断力时，这尤其令人恐惧。\n这里父母的愿望冲突。较老的社会告诉孩子他们判断力差，但现代父母希望孩子自信。这可能是比把他们放在位置上的旧计划更好的计划，但它有副作用，即在隐含地对孩子的判断力撒谎之后，我们不得不再次对他们如果相信我们可能会遇到麻烦的所有事情撒谎。\n如果父母告诉孩子关于性和毒品的真相，那将是：你应该避免这些事情的原因是你的判断力糟糕。有你两倍经验的人仍然会被它们烧伤。但这可能是那些真相不会有说服力的情况之一，因为糟糕判断力的症状之一是相信你有好的判断力。当你太弱而举不起某物时，你能看出来，但当你冲动地做决定时，你更加确信。\n天真 父母不希望孩子有性生活的另一个原因是他们想保持他们的天真。成年人对孩子应该如何行为有一定的模型，这不同于他们对其他成年人的期望。\n最明显的区别之一是孩子们被允许使用的词语。大多数父母在与他人交谈时使用不希望孩子使用的词语。他们试图尽可能长时间地隐瞒这些词语的存在。这是每个人都参与的另一个阴谋：每个人都知道你不应该在孩子面前说脏话。\n我从未听过对父母告诉孩子的任何事情有比为什么他们不应该说脏话更多不同的解释。我认识的每个父母都禁止孩子说脏话，但没有两个人有相同的理由。很明显，大多数开始是不希望孩子说脏话，然后编造理由。\n所以关于正在发生的事情的理论是，脏话的功能是将说话者标记为成年人。\u0026ldquo;shit\u0026quot;和\u0026quot;poopoo\u0026quot;的意思没有区别。那么为什么一个孩子可以说一个被禁止？唯一的解释是：根据定义。[3]\n为什么当孩子做保留给成年人的事情时，成年人如此困扰？一个满嘴脏话、愤世嫉俗的10岁孩子靠在灯柱上，嘴角落出一支香烟的想法非常令人不安。但为什么？\n我们希望孩子天真的一个原因是我们被编程喜欢某种无助感。我几次听到母亲说她们故意不纠正年幼孩子的错误发音，因为它们如此可爱。如果你想一想，可爱就是无助。设计得可爱的玩具和卡通角色总是茫然无知的表情和短小、无效的四肢。\n考虑到人类后代在如此长的时间里如此无助，我们有天生的愿望去爱和保护无助的生物并不奇怪。没有使孩子可爱的无助感，他们会非常烦人。他们只会像无能的成年人。但还有更多。假设的玩世不恭的10岁孩子如此困扰我的原因不仅是他会很烦人，而是他很早就切断了他的成长前景。要变得玩世不恭，你必须认为你知道世界如何运作，而10岁孩子对此的任何理论可能都是相当狭隘的。\n天真也是思想开放。我们希望孩子天真，这样他们才能继续学习。听起来矛盾，但有某些知识会妨碍其他知识。如果你要学习世界是一个残酷的地方，充满试图互相利用的人，你最好最后学习这个。否则你不会费心学习更多。\n非常聪明的成年人似乎通常异常天真，我不认为这是巧合。我认为他们故意避免学习某些事情。当然我这样做。我曾经我想知道一切。现在我知道我不想。\n死亡 除了性，死亡是成年人对孩子撒谎最明显的话题。我相信他们隐瞒性是因为深深的禁忌。但为什么我们向孩子隐瞒死亡？可能是因为年幼的孩子对它特别恐惧。他们想感到安全，而死亡是终极威胁。\n我们父母告诉我们的最壮观的谎言之一是关于我们第一只猫的死亡。多年来，当我们询问更多细节时，他们被迫编造更多，所以故事变得相当精心。猫在兽医办公室死亡。死因？麻醉本身。猫为什么在兽医办公室？要做绝育手术。为什么这样一个常规手术杀死了它？这不是兽医的错；猫有先天性心脏虚弱；麻醉对它来说太强了；但没有人能提前知道这一点。直到我们二十多岁真相才出来：我妹妹，当时大约三岁，不小心踩到了猫并弄断了它的背。\n他们不觉得需要告诉我们猫现在在猫天堂快乐地生活。我父母从未声称死去的人或动物\u0026quot;去了更好的地方\u0026rdquo;，或我们会再次见到他们。这似乎没有伤害我们。\n我祖母告诉我们一个关于我祖父死亡的编辑版本。她说有一天他们正坐着看书，当她对他说什么时，他没有回答。他似乎睡着了，但当她试图唤醒他时，她不能。\u0026ldquo;他走了。\u0026ldquo;心脏病发作听起来像睡着。后来我了解到事情没有那么整洁，心脏病发作花了一天的大部分时间才杀死他。\n除了这样的彻头彻尾的谎言，当死亡话题出现时，肯定有很多改变话题的情况。我当然不记得这个，但我可以从我直到大约19岁才真正意识到我会死亡这一事实推断出来。我怎么可能这么长时间错过如此明显的事情？既然我看到父母处理这个话题，我能看出如何：关于死亡的问题被温和但坚定地避开。\n在这个话题上，特别是，孩子们迎合他们一半。孩子们经常想被欺骗。他们希望相信他们生活在一个舒适、安全的世界，就像他们的父母希望他们相信的那样。[4]\n身份认同 一些父母对种族或宗教群体有强烈的依恋，希望他们的孩子也感受到这一点。这通常需要两种不同的撒谎：第一种是告诉孩子他或她是X，第二种是X群体通过相信来区分自己的特定谎言。[5]\n告诉孩子他们有特定的种族或宗教身份是你能告诉他们的最粘性的事情之一。几乎你告诉孩子的任何其他事情，他们都可以在开始为自己思考后改变主意。但如果你告诉孩子他们是某个群体的成员，这似乎几乎不可能摆脱。\n尽管这可能是父母最预谋的谎言之一。当父母信仰不同宗教时，他们经常在他们之间同意他们的孩子将\u0026quot;被抚养为X\u0026rdquo;。而且这有效。孩子们顺从地长大，认为自己是X，尽管如果他们的父母选择了另一种方式，他们会长大认为自己是Y。\n这如此有效的一个原因是涉及的第二种谎言。真相是公共财产。你无法通过做理性的事情和相信真实的事情来区分你的群体。如果你想把自己与他人区分开来，你必须做武断的事情，相信虚假的事情。在花了一生做武断的事情和相信虚假的事情，并因此被\u0026quot;外人\u0026quot;视为奇怪之后，推动孩子认为自己是X的认知失调一定是巨大的。如果他们不是X，为什么他们坚持所有这些武断的信仰和习俗？如果他们不是X，为什么所有非X都称他们为X？\n这种形式的谎言不是没有用处的。你可以用它来携带有益信仰的载荷，它们也将成为孩子身份认同的一部分。你可以告诉孩子，除了从不穿黄色、相信世界是由巨型兔子创造的，以及在吃鱼前总是弹指外，X群体也特别诚实和勤奋。然后X孩子会长大，感觉诚实和勤奋是他们身份认同的一部分。\n这可能解释了现代宗教传播的很大一部分，并解释了为什么它们的教义是有用的和怪异的组合。怪异的一半使宗教粘住，有用的一半是载荷。[6]\n权威 成年人对孩子撒谎最不可原谅的原因之一是为了维持对他们的权力。有时这些谎言是真正邪恶的，像儿童骚扰者告诉受害者如果他们告诉任何人发生了什么他们会遇到麻烦。其他似乎更无辜；这取决于成年人为了维持权力撒谎的程度，以及他们用它做什么。\n大多数成年人努力对孩子隐瞒他们的缺点。通常他们的动机是混合的。例如，有外遇的父亲通常对孩子隐瞒这件事。他的动机部分是这会让他们担心，部分是这会引入性话题，部分（比他愿意承认的更大部分）是他不想在他们眼中玷污自己。\n如果你想了解告诉孩子什么谎言，阅读任何一本教他们关于\u0026quot;问题\u0026quot;的书。[7] Peter Mayle写了一本叫《我们为什么要离婚？》的书。它从关于离婚要记住的三件最重要的事情开始，其中之一是：你不应该责怪一方父母，因为离婚从来不只是一个人的错。[8] 真的吗？当男人带着他的秘书私奔时，总是部分他妻子的错吗？但我能理解为什么Mayle可能这么说。也许孩子尊重父母比了解他们的真相更重要。\n但因为成年人隐瞒他们的缺点，同时坚持对孩子的高行为标准，很多孩子长大感到他们无望地达不到标准。他们走来走去，因为说了脏话而感到可怕地邪恶，而事实上他们周围的大多数成年人都在做更糟糕的事情。\n这在智力问题和道德问题上都会发生。人们越自信，他们似乎越愿意回答\u0026quot;我不知道\u0026rdquo;。不太自信的人觉得他们必须有答案，否则他们会看起来很糟糕。我父母在承认不知道事情方面相当好，但我肯定被老师告诉了很多这种类型的谎言，因为我直到上大学才听到老师说\u0026quot;我不知道\u0026quot;。我记得因为在全班面前听到有人这么说如此令人惊讶。\n我第一次暗示老师不是全知的是六年级，在我父亲反驳了我在学校学到的东西之后。当我抗议老师说了相反的话时，我父亲回答说那个人不知道他在说什么——他毕竟只是个小学老师。\n只是个老师？这个短语似乎几乎不合语法。老师不知道他们教科目的一切吗？如果不是，为什么他们是教我们的人？\n可悲的事实是，美国公立学校老师通常不太理解他们教的东西。有一些极好的例外，但一般来说，计划从事教学的人在学术上在大学生群体中排名接近底部。所以我11岁时仍然认为老师是不会错的，这一事实显示了系统对我的大脑做了什么。\n学校 孩子在学校学到的内容是复杂的谎言混合物。最可原谅的是那些为了简化思想使其容易学习而说的谎言。问题是，很多宣传被以简化的名义偷偷塞入课程。\n公立学校教科书代表了各种有势力的群体希望被告知的内容之间的妥协。谎言很少是公开的。通常它们要么是遗漏，要么是以牺牲其他话题为代价过度强调某些话题。我们在小学得到的历史观是一个粗略的圣徒传记，每个有势力的群体至少有一个代表。\n我记得的著名科学家是爱因斯坦、玛丽·居里和乔治·华盛顿·卡弗。爱因斯坦很重要，因为他的工作导致了原子弹。玛丽·居里与X射线有关。但卡弗让我困惑。他似乎用花生做了一些事情。\n",
    "description": "",
    "tags": ["育儿","儿童","谎言","教育","真相","童年","社会","心理学","成长"],
    "categories": [],
    "content": "→ English Version\n我们告诉孩子的谎言 2008年5月\n成年人不断地对孩子撒谎。我不是说我们应该停止，但我认为我们至少应该审视我们告诉他们什么谎言以及为什么。\n这对我们可能也有好处。我们小时候都被骗过，有些我们被告知的谎言仍然影响着我们。因此，通过研究成年人对孩子撒谎的方式，我们或许能够清除我们被告知的谎言。\n我在非常广泛的意义上使用\u0026quot;谎言\u0026quot;这个词：不仅仅是明显的虚假陈述，还包括我们误导孩子的所有更微妙的方式。虽然\u0026quot;谎言\u0026quot;有负面含义，我并不是建议我们永远不应该这样做——只是说当我们这样做时应该注意。[1]\n我们对孩子撒谎的方式最显著的事情之一是，这个阴谋是多么广泛。所有成年人都知道他们的文化对孩子撒谎什么：那些你回答\u0026quot;问你父母\u0026quot;的问题。如果一个孩子问1982年谁赢得了世界大赛或碳的原子量是多少，你可以直接告诉他。但如果一个孩子问你\u0026quot;有上帝吗？\u0026ldquo;或\u0026quot;妓女是什么？\u0026ldquo;你可能会说\u0026quot;问你父母\u0026rdquo;。\n既然我们都同意，孩子们很少看到他们被呈现的世界观中有裂缝。最大的分歧是在父母和学校之间，但即使那些也很小。学校对有争议的话题说话很小心，如果他们确实与父母希望孩子相信的相矛盾，父母要么迫使学校保持沉默，要么把孩子转到新学校。\n这个阴谋是如此彻底，以至于大多数发现它的孩子只是通过发现他们被告知的内容中的内在矛盾才发现的。对于那些在手术过程中醒来的孩子来说，这可能是创伤性的。爱因斯坦的经历是这样的：\n通过阅读流行的科学书籍，我很快确信圣经故事中的许多内容不可能是真的。其结果是一种积极的自由思考，伴随着青年故意被国家通过谎言欺骗的印象：这是一个压倒性的印象。[2]\n我记得那种感觉。到15岁时，我确信世界从头到尾都是腐败的。这就是为什么像《黑客帝国》这样的电影有如此共鸣。每个孩子都在一个虚假的世界中长大。在某种程度上，如果背后的力量像一群邪恶机器一样明确区分，人们可以通过吃药就能彻底摆脱，那会更容易。\n保护 如果你问成年人为什么对孩子撒谎，他们给出的最常见的原因是为了保护他们。孩子们确实需要保护。你想为新生儿创造的环境与大城市的街道非常不同。\n这似乎如此明显，以至于称之为谎言似乎是错误的。告诉婴儿世界是安静、温暖和安全的，这当然不是一个坏谎言。但如果这种无害的谎言不加以审视，可能会变味。\n想象一下，如果你试图让某人在像新生儿一样受保护的环境中生活到18岁。如此严重地误导某人关于世界的事情，似乎不是保护而是虐待。当然，这是一个极端的例子；当父母做这种事情时，它成为全国新闻。但你在较小的范围内看到了同样的问题，在郊区青少年感到的不适中。\n郊区的主要目的是为孩子们提供一个受保护的环境成长。它似乎对10岁的孩子很棒。我10岁时喜欢住在郊区。我没有注意到它是多么贫瘠。我的整个世界不比我骑自行车去的几个朋友的家和我跑来跑去的一些树林大。在对数尺度上，我介于婴儿床和地球之间。郊区的街道正好合适。但随着我长大，郊区开始感觉令人窒息地虚假。\n生活在10岁或20岁时可能相当好，但在15岁时经常令人沮丧。这是一个太大的问题，无法在这里解决，但15岁生活糟糕的一个原因肯定是孩子们被困在一个为10岁孩子设计的世界里。\n父母希望通过在郊区抚养孩子来保护他们免受什么伤害？一个搬出曼哈顿的朋友只是说她3岁的女儿\u0026quot;看到太多\u0026rdquo;。我能想到的包括：喝醉或吸毒的人、贫穷、疯狂、可怕的医疗状况、不同程度的奇怪性行为，以及暴力的愤怒。\n我想如果我有3岁的孩子，最让我担心的是愤怒。我29岁时搬到纽约，即使那时我也感到惊讶。我不希望一个3岁的孩子看到我目睹的一些争吵。那太可怕了。成年人对年幼孩子隐瞒的很多事情，他们隐瞒是因为这些事情会吓到孩子，而不是因为他们想隐瞒这些事情的存在。误导孩子只是一个副作用。\n这似乎是成年人对孩子撒谎的最正当的类型之一。但因为谎言是间接的，我们没有对它们进行严格的统计。父母知道他们隐瞒了关于性的事实，许多人在某个时刻会坐下来向孩子解释更多。但很少有人告诉他们孩子真实世界和他们成长起来的茧之间的区别。将此与父母试图在孩子心中灌输的信心结合起来，每年你都会得到一批新的18岁年轻人，他们认为他们知道如何管理世界。\n不是所有18岁的年轻人都认为他们知道如何管理世界吗？实际上这似乎是一个最近的创新，不超过100年。在前工业时代，青少年是成人世界的初级成员，相对较清楚自己的不足。他们能看到他们不像村里的铁匠那么强壮或熟练。在过去时代，人们对某些事情对孩子撒谎比我们现在多，但人工、受保护环境中隐含的谎言是最近的发明。像许多新发明一样，富人首先得到了这个。国王和贵族的孩子是第一批与世界脱节长大的人。郊区意味着一半人口在这方面可以 …"
  },{
    "title": "我们寻找创始人的品质",
    "url": "/paul_graham/essays_zh/founders/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n我们寻找创始人的品质 想创业吗？获得Y Combinator的资助。\n2010年10月\n（我为《福布斯》写了这篇文章，他们让我写一些关于我们寻找创始人所注重的品质的内容。在印刷版中，他们因为空间限制删掉了最后一项。）\n1. 决心 这已经成为创业创始人最重要的品质。当我们开始Y Combinator时，我们认为最重要的品质是智力。这是硅谷的神话。当然，你不希望创始人愚蠢。但只要你的智力超过某个阈值，最重要的是决心。你会遇到很多障碍。你不能成为那种容易气馁的人。\nWePay的Bill Clerico和Rich Aberman就是一个很好的例子。他们在做一家金融创业公司，这意味着与大型官僚公司进行无休止的谈判。当你创办一家依赖与大公司交易才能生存的创业公司时，常常感觉他们试图无视你直到你消失。但是当Bill Clerico开始打电话给你时，你最好还是按照他的要求做，因为他不会放弃。\n2. 灵活性 然而，你不希望拥有\u0026quot;不要放弃你的梦想\u0026quot;这类短语所暗示的那种决心。创业世界是如此不可预测，你需要能够即时修改你的梦想。我找到的对你需要的决心和灵活性组合的最好比喻是跑卫。他决心要向前推进，但在任何特定时刻，他可能需要横向甚至向后移动才能到达那里。\n目前灵活性纪录保持者可能是Greplin的Daniel Gross。他用一些糟糕的电商创意申请了YC。我们告诉他，如果他做其他事情，我们会资助他。他想了一秒钟，然后说好的。在决定做Greplin之前，他又经历了两个想法。他在演示日向投资者展示时只工作了几几天，但他得到了很多关注。他似乎总能化险为夷。\n3. 想象力 智力当然很重要。看起来最重要的类型是想象力。能够快速解决预定义问题并不那么重要，重要的是能够提出令人惊讶的新想法。在创业世界中，大多数好主意最初看起来都很糟糕。如果它们明显很好，就已经有人在做了。所以你需要那种能产生恰到好处的疯狂想法的智力。\nAirbnb就是那种想法。事实上，当我们资助Airbnb时，我们认为它太疯狂了。我们无法相信大量的人会想住在别人的地方。我们资助他们是因为我们非常喜欢创始人。当我们听说他们通过销售奥巴马和麦凯恩品牌的早餐麦片来维持生计时，他们就入选了。事实证明，这个想法最终是恰到好处的疯狂。\n4. 淘气 虽然最成功的创始人通常是好人，但他们眼中往往有一种海盗般的光芒。他们不是那种循规蹈矩的好人。在道德上，他们关心把重大问题做对，而不是遵守礼节。这就是为什么我用淘气而不是邪恶这个词。他们喜欢打破规则，但不是重要的规则。不过这个品质可能是多余的；它可能已经被想象力所暗示。\nLoopt的Sam Altman是最成功的校友之一，所以我们问他可以在Y Combinator申请表上放什么问题，帮助我们找到更多像他这样的人。他说要问一个时候他们曾经为了自己的利益而黑入某些东西——这里的黑入是指击败系统，而不是入侵计算机。这已经成为我们在评审申请时最关注的问题之一。\n5. 友谊 从经验来看，只有一个创始人似乎很难开始创业。大多数重大的成功都有两三个创始人。创始人之间的关系必须牢固。他们必须真正喜欢彼此，并且合作良好。创业公司对创始人关系所做的事情，就像狗对袜子所做的一样：如果可以拉开，它就会被拉开。\nJustin.tv的Emmett Shear和Justin Kan是密切合作的好朋友的好例子。他们从二年级就认识。他们几乎可以读懂彼此的想法。我确信他们会争论，就像所有创始人一样，但我从未感觉到他们之间有任何未解决的紧张关系。\n感谢Jessica Livingston和Chris Steiner阅读本文的草稿。\n",
    "description": "",
    "tags": ["创始人","品质","决心","灵活性","想象力","淘气","友谊"],
    "categories": [],
    "content": "→ English Version\n我们寻找创始人的品质 想创业吗？获得Y Combinator的资助。\n2010年10月\n（我为《福布斯》写了这篇文章，他们让我写一些关于我们寻找创始人所注重的品质的内容。在印刷版中，他们因为空间限制删掉了最后一项。）\n1. 决心 这已经成为创业创始人最重要的品质。当我们开始Y Combinator时，我们认为最重要的品质是智力。这是硅谷的神话。当然，你不希望创始人愚蠢。但只要你的智力超过某个阈值，最重要的是决心。你会遇到很多障碍。你不能成为那种容易气馁的人。\nWePay的Bill Clerico和Rich Aberman就是一个很好的例子。他们在做一家金融创业公司，这意味着与大型官僚公司进行无休止的谈判。当你创办一家依赖与大公司交易才能生存的创业公司时，常常感觉他们试图无视你直到你消失。但是当Bill Clerico开始打电话给你时，你最好还是按照他的要求做，因为他不会放弃。\n2. 灵活性 然而，你不希望拥有\u0026quot;不要放弃你的梦想\u0026quot;这类短语所暗示的那种决心。创业世界是如此不可预测，你需要能够即时修改你的梦想。我找到的对你需要的决心和灵活性组合的最好比喻是跑卫。他决心要向前推进，但在任何特定时刻，他可能需要横向甚至向后移动才能到达那里。\n目前灵活性纪录保持者可能是Greplin的Daniel Gross。他用一些糟糕的电商创意申请了YC。我们告诉他，如果他做其他事情，我们会资助他。他想了一秒钟，然后说好的。在决定做Greplin之前，他又经历了两个想法。他在演示日向投资者展示时只工作了几几天，但他得到了很多关注。他似乎总能化险为夷。\n3. 想象力 智力当然很重要。看起来最重要的类型是想象力。能够快速解决预定义问题并不那么重要，重要的是能够提出令人惊讶的新想法。在创业世界中，大多数好主意最初看起来都很糟糕。如果它们明显很好，就已经有人在做了。所以你需要那种能产生恰到好处的疯狂想法的智力。\nAirbnb就是那种想法。事实上，当我们资助Airbnb时，我们认为它太疯狂了。我们无法相信大量的人会想住在别人的地方。我们资助他们是因为我们非常喜欢创始人。当我们听说他们通过销售奥巴马和麦凯恩品牌的早餐麦片来维持生计时，他们就入选了。事实证明，这个想法最终是恰到好处的疯狂。\n4. 淘气 虽然最成功的创始人通常是好人，但他们眼中往往有一种海盗般的光芒。他们不是那种循规蹈矩的好人。在道德上，他们关心把重大问题做对，而不是遵守礼节。这就是为什么我用淘气而不是邪恶这个词。他们喜欢打破规则，但不是重要的规则。不过这个品质可能是多余的；它可能已经被想象力所暗示。\nLoopt的Sam Altman是最成功的校友之一，所以我们问他可以在Y Combinator申请表上放什么问题，帮助我们找到更多像他这样的人。他说要问一个时候他们曾经为了自己的利益而黑入某些东西——这里的黑入是指击败系统，而不是入侵计算机。这已经成为我们在评审申请时最关注的问题之一。\n5. 友谊 从经验来看，只有一个创始人似乎很难开始创业。大多数重大的成功都有两三个创始人。创始人之间的关系必须牢固。他们必须真正喜欢彼此，并且合作良好。创业公司对创始人关系所做的事情，就像狗对袜子所做的一样：如果可以拉开，它就会被拉开。\nJustin.tv的Emmett Shear和Justin Kan是密切合作的好朋友的好例子。他们从二年级就认识。他们几乎可以读懂彼此的想法。我确信他们会争论，就像所有创始人一样，但我从未感觉到他们之间有任何未解决的紧张关系。\n感谢Jessica Livingston和Chris Steiner阅读本文的草稿。\n"
  },{
    "title": "我所从事的工作",
    "url": "/paul_graham/essays_zh/worked/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n我所从事的工作 2021年2月\n大学前，我在课外主要从事的两件事是写作和编程。我不写文章。我写的是当时初学写作的人应该写的东西，可能现在还是：短篇小说。我的故事很糟糕。几乎没有情节，只有感情强烈的角色，我以为这让他们显得深刻。\n我尝试编写的第一个程序是在我们学区用于当时称为\u0026quot;数据处理\u0026quot;的IBM 1401上。那时我在九年级，所以是13或14岁。学区的1401恰好在我们的初中的地下室，我的朋友Rich Draves和我获得了使用它的许可。那里就像一个小型的邦德反派巢穴，所有这些看起来外星般的机器——CPU、磁盘驱动器、打印机、卡片阅读器——坐在明亮的荧光灯下的抬高地板上。\n我们使用的语言是Fortran的早期版本。你必须在打孔卡上键入程序，然后将它们堆叠在卡片阅读器中并按下按钮将程序加载到内存中并运行。结果通常是在极其响亮的打印机上打印一些东西。\n我对1401感到困惑。我无法弄清楚如何使用它。回想起来，我能用它做的事情不多。程序的唯一输入形式是存储在打孔卡上的数据，而我没有任何存储在打孔卡上的数据。唯一的选择是做不依赖任何输入的事情，比如计算π的近似值，但我的数学知识不足以做任何有趣的这类事情。所以我不奇怪我不记得我编写的任何程序，因为它们不可能做太多事情。我最清晰的记忆是我了解到程序可能不会终止的那一刻，当我的一个程序没有终止时。在没有分时系统的机器上，这既是社会错误也是技术错误，正如数据中心经理的表情所表明的那样。\n有了微型计算机，一切都改变了。现在你可以有一台电脑就坐在你面前，在桌子上，它可以在运行时响应你的按键，而不仅仅是处理一堆打孔卡然后停止。[1]\n我的朋友中第一个拥有微型计算机的人是自己组装的。它是由Heathkit作为套件出售的。我生动地记得看着它坐在它前面，直接在电脑中键入程序时我感到多么印象深刻和羡慕。\n那时候计算机很昂贵，我纠缠了多年才说服我父亲在1980年左右买了一台TRS-80。当时黄金标准是Apple II，但TRS-80已经足够好了。这是我真正开始编程的时候。我编写了简单的游戏，一个预测我的模型火箭能飞多高的程序，以及我的父亲用来写至少一本书的文字处理器。内存中只有大约2页文本的空间，所以他一次写2页然后打印出来，但这比打字机好多了。\n虽然我喜欢编程，但我没打算在大学里学习它。在大学里我要学习哲学，这听起来强大得多。对于我天真的高中自我来说，这似乎是对终极真理的研究，相比之下其他领域研究的东西将只是领域知识。当我到达大学时，我发现其他领域占据了思想空间的很大部分，这些所谓的终极真理没有太多空间留下来。哲学似乎只剩下其他领域的人认为可以安全忽略的边缘情况。\n我18岁时无法把这些变成语言。我当时只知道我不断选修哲学课程，而它们总是很无聊。所以我决定转向AI。\nAI在1980年代中期很流行，但有两件事特别让我想要从事它：海因莱因的一部名为《月亮是一个严厉的女人》的小说，其中有一个名为Mike的智能计算机，以及一个展示Terry Winograd使用SHRDLU的PBS纪录片。我没有尝试重读《月亮是一个严厉的女人》，所以我不知道它老化得如何，但当我读它时，我完全被它的世界吸引住了。似乎只是时间问题，我们就会有Mike，当我看到Winograd使用SHRDLU时，似乎那时间将是几年。你所要做的就是教SHRDLU更多的词语。\n那时康奈尔大学没有任何AI课程，甚至研究生课程也没有，所以我开始尝试自学。这意味着学习Lisp，因为在那些日子Lisp被认为是AI的语言。当时常用的编程语言相当原始，程序员的想法也相应地如此。康奈尔的默认语言是一种类似Pascal的语言，称为PL/I，其他地方的情况也类似。学习Lisp如此迅速地扩展了我对程序的概念，以至于我花了几年时间才开始感觉到新的限制在哪里。这更像它；这是我对大学期望的。它没有像应该的那样在课堂上发生，但没关系。接下来的几年我很顺利。我知道我要做什么。\n对于我的本科论文，我逆向工程了SHRDLU。天啊，我多么喜欢在这个程序上工作。这是一段令人愉悦的代码，但更令人兴奋的是我的信念——现在很难想象，但在1985年并不独特——它已经在攀登智能的较低坡度。\n我进入了康奈尔的一个不要求你选择专业的项目。你可以选修任何你喜欢的课程，选择任何你喜欢放在学位上的东西。我当然选择了\u0026quot;人工智能\u0026quot;。当我拿到实际的物理文凭时，我惊恐地发现引号被包括在内，这使它们读作引号。当时这困扰着我，但现在看来可笑地准确，原因我即将发现。\n我申请了3所研究生院：MIT和耶鲁，当时以AI闻名，以及哈佛，我访问过因为Rich Draves去那里，也是Bill Woods的故乡，他发明了我在我的SHRDLU克隆中使用的解析器类型。只有哈佛接受了我，所以我就去了那里。\n我不记得那一刻是什么时候发生的，或者甚至是否有特定的时刻，但在研究生第一年期间，我意识到AI，当时实践的方式，是一个骗局。我的意思是那种AI，其中被告知\u0026quot;狗坐在椅子上\u0026quot;的程序将其转换为某种正式表示并将其添加到它知道的事情列表中。\n这些程序真正显示的是，自然语言的一个子集是一种形式语言。但是一个非常适当的子集。很明显，他们能做的事情和真正理解自然语言之间有一个不可逾越的鸿沟。事实上，这不仅仅是教SHRDLU更多词语的问题。整个AI方式，用代表概念的显式数据结构，是行不通的。它的 brokenness 确实，像经常发生的那样，产生了大量机会来写关于可以应用的各种创可贴的论文，但它永远不会给我们带来Mike。\n所以我环顾四周，看看我能从计划的残骸中挽救什么，那就是Lisp。我从经验中知道Lisp本身就很有趣，不仅仅是因为它与AI的联系，尽管那时这是人们关心它的主要原因。所以我决定专注于Lisp。事实上，我决定写一本关于Lisp黑客技术的书。想到我开始写那本书时对Lisp黑客技术了解得多么少，真是令人害怕。但是没有什么比写一本关于某件事的书更能帮助你学习它了。这本书，《On Lisp》，直到1993年才出版，但我在研究生院写了大部分。\n计算机科学是两个部分之间不安的联盟：理论和系统。理论家证明事情，系统家建造事情。我想建造事情。我对理论有很大的尊重——确实，一种偷偷摸摸的怀疑，认为它是两个部分中更令人钦佩的——但建造事情似乎令人兴奋得多。\n然而，系统工作的问题在于它不持久。你今天编写的任何程序，无论多好，最多几十年后就会过时。人们可能在脚注中提到你的软件，但没有人会实际使用它。而且，它会显得非常无力的工作。只有对领域历史有了解的人才会意识到，在它的时代，它曾经是好的。\n有一次，计算机实验室里有一些多余的施乐Dandelions。任何想要一个来玩的人都可以有一个。我短暂地被诱惑了，但按照现在的标准它们太慢了；有什么意义呢？也没有其他人想要一个，所以它们被运走了。这就是系统工作的下场。\n我不仅要建造事情，还要建造会持久的事情。\n在这种不满的状态下，我在1988年去CMU拜访Rich Draves，他在那里读研究生。有一天我去参观卡内基研究所，我小时候在那里花了很多时间。在那里看一幅画时，我意识到一些可能看起来显而易见的事情，但对我来说是一个巨大的惊喜。在那里，就在墙上，是一些你可以制造的东西，它会持久。绘画不会过时。一些最好的已经有几百年历史了。\n而且这是你可以谋生的事情。当然不像写软件那么容易，但我认为如果你真正勤奋且生活非常节俭，必须有可能赚足够的钱生存。作为艺术家，你可以真正独立。你不会有老板，甚至不需要获得研究经费。\n我一直喜欢看画。我能画画吗？我不知道。我从未想象过这是可能的。我在理智上知道人们制造艺术——它不是自发出现的——但制造它的人似乎是不同的物种。他们要么生活在很久以前，要么是在《生活》杂志的简介中做奇怪事情的神秘天才。实际上能够制造艺术，把这个动词放在这个名词前面，似乎几乎是奇迹性的。\n那年秋天我开始在哈佛选修艺术课程。研究生可以在任何系选修课程，我的导师Tom Cheatham非常随和。即使他知道我选修的奇怪课程，他也什么都没说。\n所以现在我在计算机科学博士项目中，却计划成为艺术家，却又真正热爱Lisp黑客技术和努力编写《On Lisp》。换句话说，像许多研究生一样，我精力充沛地从事多个不是我的论文的项目。\n我没有看到摆脱这种局面的方法。我不想退学，但我还能怎么出去呢？我记得当我的朋友Robert Morris因编写1988年互联网蠕虫而被康奈尔开除时，我羡慕他找到了如此壮观的方式来离开研究生院。\n然后在1990年4月的一天，墙上出现了一道裂缝。我遇到了Cheatham教授，他问我是否已经足够进展可以在那年六月毕业。我的论文一个字都没有写，但一定是我一生中最快的思考，我决定在剩下的5周左右的时间内尝试写一篇，尽可能重用《On Lisp》的部分，我能够毫无察觉地延迟回答\u0026quot;是的，我想是的。我几天内给你一些东西阅读。\u0026quot;\n我选择了continuations的应用作为主题。回想起来我应该写关于宏和嵌入式语言。那里有一个几乎未被探索的整个世界。但我只想离开研究生院，我快速写的论文足够了，勉强而已。\n与此同时，我在申请艺术学院。我申请了两所：美国的RISD，和佛罗伦萨的Accademia di Belli Arti，因为它是最古老的艺术学校，我想象它会很好。RISD接受了我，而我从未收到Accademia的回音，所以我去了普罗维登斯。\n我申请了RISD的BFA项目，这实际上意味着我必须再次上大学。这听起来不像那么奇怪，因为我只有25岁，艺术学校里充满了不同年龄的人。RISD把我算作转学大二学生，说我必须那年夏天做基础课程。基础课程是每个人都必须参加的基础科目课程，如绘画、色彩和设计。\n在夏末，我得到了一个大惊喜：一封来自Accademia的信，被延迟了因为他们把它寄到了剑桥英格兰而不是剑桥马萨诸塞州，邀请我那年秋天在佛罗伦萨参加入学考试。现在只有几周时间了。我善良的女房东让我把我的东西留在她的阁楼里。我有一些从研究生院咨询工作中节省的钱；如果我生活节俭，可能足够一年。现在我必须做的就是学习意大利语。\n只有stranieri（外国人）必须参加这个入学考试。回想起来，这很可能是排除他们的一种方式，因为有那么多stranieri被在佛罗伦萨学习艺术的想法吸引，否则意大利学生会被数量超过。那年夏天从RISD基础课程来看，我在绘画和素描方面处于不错的状态，但我仍然不知道我是如何通过书面考试的。我记得我通过写关于塞尚来回答散文问题，并且我把智力水平提高到尽可能高，以充分利用我有限的词汇量。[2]\n我只到25岁，已经有如此明显的模式。我又一次即将进入一些庄严的机构，希望学习一些有声望的科目，又一次即将失望。Accademia绘画系的学生和教员是你能想象到的最友好的人，但他们早就达成了一个安排，学生不会要求教员教任何东西，反过来教员也不会要求学生学习任何东西。同时，所有相关者都会在外表上坚持19世纪画室的惯例。我们确实有一个那些小火炉中的一个，用引火柴喂养，你在19世纪画室绘画中看到的那种，一个裸体模特坐在尽可能靠近而不被烧伤的地方。除了我，几乎没有人画她。其余的学生把时间花在聊天上，或者偶尔尝试模仿他们在美国艺术杂志中看到的东西。\n我们的模特原来就住在我家楼下街。她通过模特工作和为当地古董商制作赝品来谋生。她会从书中复制一个模糊的旧绘画，然后他会拿走副本并虐待它使其看起来旧。[3]\n当我在Accademia当学生时，我开始在晚上在我的卧室里画静物画。这些画作很小，因为房间很小，因为我把它们画在剩余的画布碎料上，那是我当时唯一能负担得起的。画静物画不同于画人，因为主体，顾名思义，不能移动。人们一次只能坐大约15分钟，当他们坐下时也不会坐得很稳。所以画人的传统方式是知道如何画一个通用的人，然后你修改它以匹配你正在画的特定人。而静物画，如果你愿意，可以从你看到的东西像素级复制。你当然不想停在那里，否则你只得到摄影准确性，而使静物画有趣的是它经过了一个头脑。你想强调视觉线索，告诉你，例如，颜色在某个点突然变化的原因是它是一个物体的边缘。通过微妙地强调这样的事情，你可以使绘画比照片更现实，不仅仅是在某种隐喻意义上，而是在严格的信息理论意义上。[4]\n我喜欢画静物画是因为我对看到的东西好奇。在日常生活中，我们没有意识地意识到我们看到的很多东西。大多数视觉感知是由低级过程处理的，它们只告诉你的大脑\u0026quot;那是水滴\u0026quot;而不告诉你像最亮和最暗点在哪里这样的细节，或者\u0026quot;那是灌木\u0026quot;而不告诉你每片叶子的形状和位置。这是大脑的一个特征，而不是bug。在日常生活中，注意到每片灌木上的每片叶子会让人分心。但当你必须画什么东西时，你必须更仔细地看，当你这样做时，有很多可看的。在尝试画人们通常视为理所当然的东西几天后，你可能仍在注意到新事情，就像尝试写关于人们通常视为理所当然的东西的文章几天后一样。\n这不是唯一的绘画方式。我不是100%确定它甚至是画画的不错方式。但这似乎是一个足够好的赌注，值得尝试。\n我们的老师Ulivi教授是个好人。他看到我努力工作，给了我一个好成绩，他写在每个学生都有的某种护照上。但Accademia除了意大利语外没有教我任何东西，而我的钱快用完了，所以在第一年结束时我回到了美国。\n我想回到RISD，但我现在破产了而RISD非常昂贵，所以我决定找一年的工作然后在下个秋天回到RISD。我在一家叫做Interleaf的公司找到了一份工作，它制作用于创建文档的软件。你的意思是像微软Word？完全正确。这就是我学到低端软件往往吃掉高端软件的方式。但Interleaf还有几年的寿命。[5]\nInterleaf做了相当大胆的事情。受Emacs启发，他们添加了一种脚本语言，甚至使脚本语言成为Lisp的一种方言。现在他们想要一个Lisp黑客来用它写东西。这是我最接近正常工作的事情，我在此向我的老板和同事道歉，因为我是一个糟糕的员工。他们的Lisp是巨大C蛋糕上的最薄糖衣，因为我不知道C也不想学习它，我从未理解大部分软件。而且我非常不负责任。那时候编程工作意味着在某些工作时间内每天出现。这对我来说似乎不自然，而在这一点上世界其他地区正在转向我的思维方式，但当时造成了很多摩擦。在一年结束时，我花了很多时间秘密地研究《On Lisp》，那时我已经获得了出版合同。\n好的部分是我得到了巨额金钱，特别是按艺术学生标准。在佛罗伦萨，支付我的房租部分后，我其他一切的预算是每天7美元。现在我每小时得到的报酬比那多4倍以上，即使我只是坐在会议上。通过节俭生活，我不仅设法节省了足够的钱回到RISD，还还清了我的大学贷款。\n我在Interleaf学到了一些有用的东西，尽管它们主要是关于不该做什么的。我学到技术公司最好由产品人而不是销售人运营（尽管销售是真正的技能，擅长它的人真的很擅长），当代码被太多人编辑时会导致bug，如果办公室空间令人沮丧那么便宜的办公室空间不是 bargain，计划会议不如走廊对话，大的官僚客户是危险的资金来源，以及常规办公时间和黑客的最佳时间，或常规办公室和最佳地点之间没有太多重叠。\n但我学到的最重要的东西，也是我在Viaweb和Y Combinator中使用的东西，是低端吃掉高端：成为\u0026quot;入门级\u0026quot;选项是好的，即使那会不那么有声望，因为如果你不是，别人会是，并且会把你压在天花板上。这反过来意味着声望是一个危险信号。\n当我那年秋天离开回到RISD时，我安排为为客户做项目的组做自由职业工作，这就是我在接下来几年中生存的方式。当我后来回来访问一个项目时，有人告诉我一个叫做HTML的新东西，正如他描述的，它是SGML的衍生物。标记语言爱好者是Interleaf的职业危害，我忽略了他，但这个HTML东西后来成为我生活的一个重要部分。\n1992年秋天，我搬回普罗维登斯继续在RISD学习。基础课程只是介绍性的东西，而Accademia是一个（非常文明的）笑话。现在我要看看真正的艺术学校是什么样子。但可惜它更像Accademia而不是不像。当然组织得更好，而且昂贵得多，但现在越来越清楚艺术学校与艺术的关系不像医学院与医学的关系。至少绘画系不是。我隔壁邻居所属的纺织系似乎相当严谨。无疑插图和建筑也是。但绘画是后严谨的。绘画学生应该表达自己，对更世俗的人来说这意味着试图搞出某种独特的签名风格。\n",
    "description": "",
    "tags": ["编程","艺术","创业公司","Y Combinator","Lisp","生活","职业"],
    "categories": [],
    "content": "→ English Version\n我所从事的工作 2021年2月\n大学前，我在课外主要从事的两件事是写作和编程。我不写文章。我写的是当时初学写作的人应该写的东西，可能现在还是：短篇小说。我的故事很糟糕。几乎没有情节，只有感情强烈的角色，我以为这让他们显得深刻。\n我尝试编写的第一个程序是在我们学区用于当时称为\u0026quot;数据处理\u0026quot;的IBM 1401上。那时我在九年级，所以是13或14岁。学区的1401恰好在我们的初中的地下室，我的朋友Rich Draves和我获得了使用它的许可。那里就像一个小型的邦德反派巢穴，所有这些看起来外星般的机器——CPU、磁盘驱动器、打印机、卡片阅读器——坐在明亮的荧光灯下的抬高地板上。\n我们使用的语言是Fortran的早期版本。你必须在打孔卡上键入程序，然后将它们堆叠在卡片阅读器中并按下按钮将程序加载到内存中并运行。结果通常是在极其响亮的打印机上打印一些东西。\n我对1401感到困惑。我无法弄清楚如何使用它。回想起来，我能用它做的事情不多。程序的唯一输入形式是存储在打孔卡上的数据，而我没有任何存储在打孔卡上的数据。唯一的选择是做不依赖任何输入的事情，比如计算π的近似值，但我的数学知识不足以做任何有趣的这类事情。所以我不奇怪我不记得我编写的任何程序，因为它们不可能做太多事情。我最清晰的记忆是我了解到程序可能不会终止的那一刻，当我的一个程序没有终止时。在没有分时系统的机器上，这既是社会错误也是技术错误，正如数据中心经理的表情所表明的那样。\n有了微型计算机，一切都改变了。现在你可以有一台电脑就坐在你面前，在桌子上，它可以在运行时响应你的按键，而不仅仅是处理一堆打孔卡然后停止。[1]\n我的朋友中第一个拥有微型计算机的人是自己组装的。它是由Heathkit作为套件出售的。我生动地记得看着它坐在它前面，直接在电脑中键入程序时我感到多么印象深刻和羡慕。\n那时候计算机很昂贵，我纠缠了多年才说服我父亲在1980年左右买了一台TRS-80。当时黄金标准是Apple II，但TRS-80已经足够好了。这是我真正开始编程的时候。我编写了简单的游戏，一个预测我的模型火箭能飞多高的程序，以及我的父亲用来写至少一本书的文字处理器。内存中只有大约2页文本的空间，所以他一次写2页然后打印出来，但这比打字机好多了。\n虽然我喜欢编程，但我没打算在大学里学习它。在大学里我要学习哲学，这听起来强大得多。对于我天真的高中自我来说，这似乎是对终极真理的研究，相比之下其他领域研究的东西将只是领域知识。当我到达大学时，我发现其他领域占据了思想空间的很大部分，这些所谓的终极真理没有太多空间留下来。哲学似乎只剩下其他领域的人认为可以安全忽略的边缘情况。\n我18岁时无法把这些变成语言。我当时只知道我不断选修哲学课程，而它们总是很无聊。所以我决定转向AI。\nAI在1980年代中期很流行，但有两件事特别让我想要从事它：海因莱因的一部名为《月亮是一个严厉的女人》的小说，其中有一个名为Mike的智能计算机，以及一个展示Terry Winograd使用SHRDLU的PBS纪录片。我没有尝试重读《月亮是一个严厉的女人》，所以我不知道它老化得如何，但当我读它时，我完全被它的世界吸引住了。似乎只是时间问题，我们就会有Mike，当我看到Winograd使用SHRDLU时，似乎那时间将是几年。你所要做的就是教SHRDLU更多的词语。\n那时康奈尔大学没有任何AI课程，甚至研究生课程也没有，所以我开始尝试自学。这意味着学习Lisp，因为在那些日子Lisp被认为是AI的语言。当时常用的编程语言相当原始，程序员的想法也相应地如此。康奈尔的默认语言是一种类似Pascal的语言，称为PL/I，其他地方的情况也类似。学习Lisp如此迅速地扩展了我对程序的概念，以至于我花了几年时间才开始感觉到新的限制在哪里。这更像它；这是我对大学期望的。它没有像应该的那样在课堂上发生，但没关系。接下来的几年我很顺利。我知道我要做什么。\n对于我的本科论文，我逆向工程了SHRDLU。天啊，我多么喜欢在这个程序上工作。这是一段令人愉悦的代码，但更令人兴奋的是我的信念——现在很难想象，但在1985年并不独特——它已经在攀登智能的较低坡度。\n我进入了康奈尔的一个不要求你选择专业的项目。你可以选修任何你喜欢的课程，选择任何你喜欢放在学位上的东西。我当然选择了\u0026quot;人工智能\u0026quot;。当我拿到实际的物理文凭时，我惊恐地发现引号被包括在内，这使它们读作引号。当时这困扰着我，但现在看来可笑地准确，原因我即将发现。\n我申请了3所研究生院：MIT和耶鲁，当时以AI闻名，以及哈佛，我访问过因为Rich Draves去那里，也是Bill Woods的故乡，他发明了我在我的SHRDLU克隆中使用的解析器类型。只有哈佛 …"
  },{
    "title": "我的待办事项清单顶端",
    "url": "/paul_graham/essays_zh/todo/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n我的待办事项清单顶端 2012年4月\n一位名叫布朗尼·威尔的姑息治疗护士列出了临终者最大的遗憾。她的名单看起来很有道理。我能看到自己——能看到自己——犯下这5个错误中的至少4个。\n如果你必须将它们压缩成一条建议，可能是：不要做一个齿轮。这5个遗憾描绘了后工业时代人的肖像，他将自己缩小成适合环境形状，然后尽职尽责地转动直到停止。\n令人警醒的是，产生这些遗憾的错误都是不作为的错误。你忘记了自己的梦想，忽视了自己的家人，压抑了自己的感受，忽视了自己的朋友，忘记了要快乐。不作为的错误是一种特别危险的错误类型，因为你在默认情况下犯下它们。\n我想避免犯这些错误。但如何避免你默认犯下的错误呢？理想情况下，你要改造你的生活，使它有其他的默认行为。但完全做到这一点可能是不可能的。只要这些错误在默认情况下发生，你可能就需要被提醒不要犯它们。因此，我反推了这5个遗憾，得出了一份包含5个命令的清单\n不要忽视你的梦想；不要工作太多；说出你的想法；培养友谊；要快乐。\n然后我把它放在我用作待办事项清单的文件的顶端。\n日语翻译\n",
    "description": "",
    "tags": ["遗憾","人生教训","优先级","快乐","友谊","梦想"],
    "categories": [],
    "content": "→ English Version\n我的待办事项清单顶端 2012年4月\n一位名叫布朗尼·威尔的姑息治疗护士列出了临终者最大的遗憾。她的名单看起来很有道理。我能看到自己——能看到自己——犯下这5个错误中的至少4个。\n如果你必须将它们压缩成一条建议，可能是：不要做一个齿轮。这5个遗憾描绘了后工业时代人的肖像，他将自己缩小成适合环境形状，然后尽职尽责地转动直到停止。\n令人警醒的是，产生这些遗憾的错误都是不作为的错误。你忘记了自己的梦想，忽视了自己的家人，压抑了自己的感受，忽视了自己的朋友，忘记了要快乐。不作为的错误是一种特别危险的错误类型，因为你在默认情况下犯下它们。\n我想避免犯这些错误。但如何避免你默认犯下的错误呢？理想情况下，你要改造你的生活，使它有其他的默认行为。但完全做到这一点可能是不可能的。只要这些错误在默认情况下发生，你可能就需要被提醒不要犯它们。因此，我反推了这5个遗憾，得出了一份包含5个命令的清单\n不要忽视你的梦想；不要工作太多；说出你的想法；培养友谊；要快乐。\n然后我把它放在我用作待办事项清单的文件的顶端。\n日语翻译\n"
  },{
    "title": "投资者群体动态",
    "url": "/paul_graham/essays_zh/herd/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n投资者群体动态 2013年8月\n大多数投资者对你的看法中，最大的组成部分是其他投资者的看法。这当然是指数增长的配方。当一个投资者想要投资你时，这使得其他投资者想要投资，这又使得其他人想要投资，如此循环往复。\n有时缺乏经验的创始人错误地得出结论，认为操纵这些力量是融资的本质。他们听到关于成功创业公司投资热潮的故事，并认为因此发生这种情况是成功创业公司的标志。但实际上，这两者并没有那么高度相关。许多引起热潮的创业公司最终失败了（在极端情况下，部分原因是热潮），而许多非常成功的创业公司在第一次筹集资金时只受到投资者的中等程度欢迎。\n所以本文的目的不是解释如何创造热潮，而仅仅是解释产生热潮的力量。这些力量在融资中总是在某种程度上起作用，它们可能导致令人惊讶的情况。如果你理解它们，你至少可以避免感到惊讶。\n当其他投资者喜欢你时，投资者更喜欢你的一个原因是你实际上成了一个更好的投资。筹集资金降低了失败的风险。确实，尽管投资者讨厌这一点，但你因此有理由为后来的投资者提高估值。在你没有钱时投资的投资者承担了更多风险，有权获得更高回报。此外，已经筹集资金的公司在字面上更有价值。在你筹集第一个一百万美元后，公司至少价值增加了一百万美元，因为它是和以前一样的公司，加上它在银行里有一百万美元。[1]\n但要注意，因为后来的投资者如此讨厌价格被提高，他们甚至抵制这种不言自明的推理。只在你愿意失去的投资者身上提高价格，因为有些会愤怒地拒绝。[2]\n当你在融资方面取得一些成功时，投资者更喜欢你的第二个原因是这使你更自信，而投资者对你的看法是他们对你公司看法的基础。创始人常常惊讶于投资者似乎多么快地知道他们开始成功筹集资金。虽然实际上有很多方法让这种信息在投资者之间传播，但主要载体可能是创始人自己。虽然他们对技术常常一无所知，但大多数投资者很擅长读人。当融资进展顺利时，投资者很快在你增加的自信中感觉到它。（这是普通创始人无法保持扑克脸的能力对你有利的一个情况。）\n但坦率地说，当你开始筹集资金时，投资者更喜欢你的最重要原因是他们不擅长判断创业公司。判断创业公司即使对最好的投资者来说也很难。平庸的投资者还不如抛硬币。所以当平庸的投资者看到很多其他人想要投资你时，他们假设一定有原因。这导致了硅谷称为\u0026quot;热门交易\u0026quot;的现象，你有的投资者兴趣超出你所能处理的程度。\n最好的投资者不太受其他投资者意见的影响。将自己的判断与其他人的平均在一起只会稀释自己的判断。但他们在实际意义上间接受到影响，即其他投资者的兴趣施加了截止日期。这是报价产生报价的第四种方式。如果你开始与一家公司接近达成报价，这有时会促使其他公司，甚至是好公司，做出决定，以免失去交易。\n除非你是谈判奇才（如果你不确定，你就不是），在夸大这一点以推动好投资者决定时要非常小心。创始人一直尝试这种事情，投资者对此非常敏感。如果有的话，过于敏感。但只要你告诉真相，你就是安全的。如果你与投资者B进展得很远，但你宁愿从投资者A那里筹集资金，你可以告诉投资者A这正在发生。这没有操纵。你确实处于困境，因为你真的宁愿从A那里筹集资金，但当A的决定仍然不确定时，你不能安全地拒绝B的报价。\n但是，不要告诉A B是谁。VC有时会问你在和哪些其他VC交谈，但你永远不应该告诉他们。天使投资人你有时可以告诉其他天使投资人，因为天使投资人彼此合作更多。但如果VC问，只是指出他们不希望你告诉其他公司你的谈话，你觉得有义务对任何你交谈的公司做同样的事情。如果他们推动你，指出你在融资方面缺乏经验——这总是可以安全打的牌——你觉得你必须格外谨慎。[3]\n虽然很少有创业公司会经历兴趣热潮，但几乎所有的创业公司至少在最初都会经历这种现象的另一面，即群体在远处保持聚集。投资者如此受其他投资者意见影响的事实意味着你总是从某种困境开始。所以不要因为获得第一个承诺有多困难而气馁，因为大部分困难来自这种外部力量。第二个会更容易。\n注释 [1] 会计师可能会说，筹集了一百万美元的公司如果是可转换债务就没有更富有，但在实践中，以可转换债务筹集的资金与股权轮筹集的资金几乎没有区别。\n[2] 创始人常常对此感到惊讶，但投资者可能变得非常情绪化。或者更确切地说是愤慨；这是我观察到的主要情绪；但它非常普遍，有时会导致投资者违背自己的利益行事。我知道一个投资者以1500万美元估值上限投资了一家创业公司。早些时候他有机会以500万美元上限投资，但他拒绝了，因为一个较早投资的朋友能够以300万美元上限投资。\n[3] 如果一个投资者强烈要求你告诉他你与其他投资者的谈话，这是你想要作为投资者的人吗？\n感谢Paul Buchheit、Jessica Livingston、Geoff Ralston和Garry Tan阅读本文的草稿。\n",
    "description": "",
    "tags": ["投资者","群体行为","融资","风险投资","心理学"],
    "categories": [],
    "content": "→ English Version\n投资者群体动态 2013年8月\n大多数投资者对你的看法中，最大的组成部分是其他投资者的看法。这当然是指数增长的配方。当一个投资者想要投资你时，这使得其他投资者想要投资，这又使得其他人想要投资，如此循环往复。\n有时缺乏经验的创始人错误地得出结论，认为操纵这些力量是融资的本质。他们听到关于成功创业公司投资热潮的故事，并认为因此发生这种情况是成功创业公司的标志。但实际上，这两者并没有那么高度相关。许多引起热潮的创业公司最终失败了（在极端情况下，部分原因是热潮），而许多非常成功的创业公司在第一次筹集资金时只受到投资者的中等程度欢迎。\n所以本文的目的不是解释如何创造热潮，而仅仅是解释产生热潮的力量。这些力量在融资中总是在某种程度上起作用，它们可能导致令人惊讶的情况。如果你理解它们，你至少可以避免感到惊讶。\n当其他投资者喜欢你时，投资者更喜欢你的一个原因是你实际上成了一个更好的投资。筹集资金降低了失败的风险。确实，尽管投资者讨厌这一点，但你因此有理由为后来的投资者提高估值。在你没有钱时投资的投资者承担了更多风险，有权获得更高回报。此外，已经筹集资金的公司在字面上更有价值。在你筹集第一个一百万美元后，公司至少价值增加了一百万美元，因为它是和以前一样的公司，加上它在银行里有一百万美元。[1]\n但要注意，因为后来的投资者如此讨厌价格被提高，他们甚至抵制这种不言自明的推理。只在你愿意失去的投资者身上提高价格，因为有些会愤怒地拒绝。[2]\n当你在融资方面取得一些成功时，投资者更喜欢你的第二个原因是这使你更自信，而投资者对你的看法是他们对你公司看法的基础。创始人常常惊讶于投资者似乎多么快地知道他们开始成功筹集资金。虽然实际上有很多方法让这种信息在投资者之间传播，但主要载体可能是创始人自己。虽然他们对技术常常一无所知，但大多数投资者很擅长读人。当融资进展顺利时，投资者很快在你增加的自信中感觉到它。（这是普通创始人无法保持扑克脸的能力对你有利的一个情况。）\n但坦率地说，当你开始筹集资金时，投资者更喜欢你的最重要原因是他们不擅长判断创业公司。判断创业公司即使对最好的投资者来说也很难。平庸的投资者还不如抛硬币。所以当平庸的投资者看到很多其他人想要投资你时，他们假设一定有原因。这导致了硅谷称为\u0026quot;热门交易\u0026quot;的现象，你有的投资者兴趣超出你所能处理的程度。\n最好的投资者不太受其他投资者意见的影响。将自己的判断与其他人的平均在一起只会稀释自己的判断。但他们在实际意义上间接受到影响，即其他投资者的兴趣施加了截止日期。这是报价产生报价的第四种方式。如果你开始与一家公司接近达成报价，这有时会促使其他公司，甚至是好公司，做出决定，以免失去交易。\n除非你是谈判奇才（如果你不确定，你就不是），在夸大这一点以推动好投资者决定时要非常小心。创始人一直尝试这种事情，投资者对此非常敏感。如果有的话，过于敏感。但只要你告诉真相，你就是安全的。如果你与投资者B进展得很远，但你宁愿从投资者A那里筹集资金，你可以告诉投资者A这正在发生。这没有操纵。你确实处于困境，因为你真的宁愿从A那里筹集资金，但当A的决定仍然不确定时，你不能安全地拒绝B的报价。\n但是，不要告诉A B是谁。VC有时会问你在和哪些其他VC交谈，但你永远不应该告诉他们。天使投资人你有时可以告诉其他天使投资人，因为天使投资人彼此合作更多。但如果VC问，只是指出他们不希望你告诉其他公司你的谈话，你觉得有义务对任何你交谈的公司做同样的事情。如果他们推动你，指出你在融资方面缺乏经验——这总是可以安全打的牌——你觉得你必须格外谨慎。[3]\n虽然很少有创业公司会经历兴趣热潮，但几乎所有的创业公司至少在最初都会经历这种现象的另一面，即群体在远处保持聚集。投资者如此受其他投资者意见影响的事实意味着你总是从某种困境开始。所以不要因为获得第一个承诺有多困难而气馁，因为大部分困难来自这种外部力量。第二个会更容易。\n注释 [1] 会计师可能会说，筹集了一百万美元的公司如果是可转换债务就没有更富有，但在实践中，以可转换债务筹集的资金与股权轮筹集的资金几乎没有区别。\n[2] 创始人常常对此感到惊讶，但投资者可能变得非常情绪化。或者更确切地说是愤慨；这是我观察到的主要情绪；但它非常普遍，有时会导致投资者违背自己的利益行事。我知道一个投资者以1500万美元估值上限投资了一家创业公司。早些时候他有机会以500万美元上限投资，但他拒绝了，因为一个较早投资的朋友能够以300万美元上限投资。\n[3] 如果一个投资者强烈要求你告诉他你与其他投资者的谈话，这是你想要作为投资者的人吗？\n感谢Paul Buchheit、Jessica Livingston、Geoff Ralston和Garry Tan阅读本文的草稿。\n"
  },{
    "title": "拉面盈利",
    "url": "/paul_graham/essays_zh/ramenprofitable/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n拉面盈利 2009年7月\n现在\u0026quot;拉面盈利\u0026quot;这个词已经广为流传，我应该准确地解释一下这个概念的含义。\n拉面盈利意味着创业公司赚到的钱刚好够支付创始人的生活费用。这是一种与传统创业公司所追求的不同形式的盈利能力。传统盈利意味着一场大赌注终于得到了回报，而拉面盈利的主要重要性在于它为你赢得了时间。[1]\n在过去，创业公司通常只有在筹集并花费了相当多的资金后才能实现盈利。一家制造计算机硬件的公司可能需要5年才能盈利，在此期间他们花费了5000万美元。但当他们实现盈利时，他们的年收入可能达到5000万美元。这种盈利意味着创业公司已经成功了。\n拉面盈利则是另一个极端：一个创业公司在2个月后就能盈利，即使其月收入只有3000美元，因为唯一的员工是几个25岁的创始人，他们几乎可以靠很少的钱生活。月收入3000美元并不意味着公司已经成功了。但它确实与传统盈利的公司有共同之处：他们不需要筹集资金来生存。\n拉面盈利对大多数人来说是一个陌生的概念，因为它直到最近才变得可行。它对很多创业公司来说仍然不可行；例如，对大多数生物技术创业公司来说就不行；但对许多软件创业公司来说却是可行的，因为它们现在如此便宜。对许多公司来说，唯一的真正成本是创始人的生活费用。\n这种盈利能力的主要意义在于你不再受投资者的摆布。如果你仍在亏损，那么最终你将不得不筹集更多资金或关闭公司。一旦你实现了拉面盈利，这种痛苦的选择就消失了。你仍然可以筹集资金，但你现在不必这样做。\n不需要资金最明显的优势是你可以获得更好的条件。如果投资者知道你需要资金，他们有时会利用你。有些人甚至会故意拖延，因为他们知道随着资金耗尽，你会变得越来越顺从。\n但拉面盈利还有三个不太明显的优势。一是它让你对投资者更有吸引力。如果你已经盈利了，无论规模多么小，它都表明（a）你至少能让某人付钱给你，（b）你认真对待构建人们想要的东西，（c）你有足够的自律来保持低支出。\n这让投资者感到放心，因为你已经解决了他们最大的三个担忧。他们通常会资助有聪明创始人和大市场的公司，但最终仍然失败。当这些公司失败时，通常是因为（a）人们不愿意为他们制作的东西付费，例如因为向他们销售太难，或者市场还没有准备好，（b）创始人解决了错误的问题，而没有关注用户的需求，或者（c）公司在开始赚钱之前花费太多并耗尽了资金。如果你实现了拉面盈利，你已经避免了这些错误。\n拉面盈利的另一个优势是它对士气有好处。当你刚开始创办公司时，公司往往感觉相当理论化。它在法律上是一家公司，但当你称之为公司时，你感觉自己在说谎。当人们开始向你支付可观金额时，公司开始感觉真实。而你自己的生活费用是你感受最深的里程碑，因为在那个时刻未来发生了翻转。现在生存是默认状态，而不是死亡。\n在创业公司中，这种规模的士气提升非常有价值，因为运营创业公司的精神压力是导致困难的原因。创业公司仍然非常罕见。为什么更多的人不去做？财务风险？很多25岁的年轻人无论如何都不存钱。长时间工作？很多人在常规工作中工作时间同样长。阻止人们创办创业公司的是对承担如此多责任的恐惧。这不是非理性的恐惧：真的很难承受。任何能减轻你一些负担的事情都会大大增加你生存的机会。\n一个达到拉面盈利的创业公司成功的可能性可能比失败的可能性更大。考虑到创业公司结果的二元分布：你要么失败，要么赚很多钱，这是相当令人兴奋的。\n拉面盈利的第四个优势是最不明显的，但可能是最重要的。如果你不需要筹集资金，你就不必中断公司的工作去做这件事。\n筹集资金非常分散注意力。如果你的生产力能达到以前的三分之一，你就很幸运了。这种情况可能会持续数月。\n直到今年早些时候，我才理解（或者说记起）为什么筹集资金如此分散注意力。我注意到我们资助的创业公司在转向筹集资金时通常会停滞不前，但直到YC自己筹集资金时我才确切记得为什么。我们相对来说比较顺利；我询问的第一个人就答应了；但是花了数月时间来敲定细节，在那段时间里我几乎没有完成任何实际工作。为什么？因为我一直在思考这个问题。\n在任何给定时间，创业公司往往有一个最紧迫的问题。这是你晚上入睡时和早上洗澡时思考的问题。当你开始筹集资金时，这成为你思考的问题。你早上只洗一次澡，如果你在洗澡时思考投资者，那么你就不是在思考产品。\n而如果你可以选择何时筹集资金，你可以选择一个不在其他事情中间的时间，你可能还可以坚持要求这轮融资快速结束。如果你不在乎它是否完成，你甚至可以避免让这轮融资占据你的思想。\n拉面盈利的含义不超过其定义所暗示的。例如，它并不意味着你在\u0026quot;自举\u0026quot;创业公司——即你永远不会接受投资者的资金。经验上这似乎不太有效。很少有创业公司在没有接受投资的情况下成功。也许随着创业公司变得更便宜，这会变得更加普遍。另一方面，资金就在那里，等待被投资。如果创业公司不那么需要它，他们将能够以更好的条件获得它，这将使他们更倾向于接受它。这将倾向于产生一种平衡。[2]\n拉面盈利不暗示的另一件事是Joe Kraus的想法，即你应该在将产品投入测试版时将商业模式也投入测试版。他认为你应该从一开始就让人们付钱给你。我认为这太局限了。Facebook没有这样做，而且他们比大多数创业公司做得更好。立即赚钱对他们来说不仅不必要，而且可能有害。我确实认为Joe的规则对许多创业公司可能有用。不过，当创始人看起来不专注时，我有时建议他们尝试让客户为他们做的一些事情付费，希望这种约束会促使他们采取行动。\nJoe的想法和拉面盈利之间的区别在于，拉面盈利的公司不必以最终会赚钱的方式赚钱。它只需要赚钱。最著名的例子是Google，最初通过向Yahoo等网站许可搜索来赚钱。\n拉面盈利有缺点吗？可能最大的危险是它可能使你变成一家咨询公司。创业公司必须是产品公司，从某种意义上说，是制作每个人使用的单一东西。创业公司的定义特质是它们增长快，而咨询无法像产品那样扩展。[3] 但是通过咨询每月赚3000美元很容易；事实上，这对于合同编程来说是一个低费率。所以可能有一种滑向咨询的诱惑，并告诉自己你是一家拉面盈利的创业公司，而实际上你根本不是创业公司。\n一开始做一些咨询类型的工作是可以的。创业公司通常一开始必须做一些奇怪的事情。但请记住，拉面盈利不是目的地。创业公司的目标是变得非常大；拉面盈利是避免在路上死亡的技巧。\n注释 [1] \u0026ldquo;拉面盈利\u0026quot;中的\u0026quot;拉面\u0026quot;指的是速食拉面，这差不多是最便宜的食物了。\n请不要按字面意思理解这个词。只靠速食拉面生活会非常不健康。米饭和豆类是更好的食物来源。如果你没有电饭煲，请先投资一个。\n两人份米饭和豆子 n 橄榄油或黄油 n 黄洋葱 其他新鲜蔬菜；尝试不同种类 3n 瓣大蒜 n 12盎司罐白豆、芸豆或黑豆 n 块Knorr牛肉或蔬菜汤块 n 茶匙新鲜研磨黑胡椒 3n 茶匙孜然粉 n 杯干米饭，最好是糙米 将米饭放入电饭煲。按照米包装上的说明加水。（默认：每杯米2杯水。）打开电饭煲然后就不用管它了。\n切碎洋葱和其他蔬菜，在油中用较低火候煎炒至洋葱呈玻璃状。加入切碎的大蒜、胡椒、孜然和更多的脂肪，搅拌。保持低火。再煮2或3分钟，然后加入豆子（不要沥干豆子），搅拌。投入汤块，盖上盖子，在较低火候上再煮至少10分钟。勤加搅拌以避免粘锅。\n如果你想省钱，从折扣店买大罐装的豆子。批量购买香料也便宜得多。如果你附近有印度杂货店，他们会用与超市小罐相同的价格卖大袋孜然。\n[2] 权力从投资者转向创始人实际上很可能会增加风险投资业务的规模。我认为投资者目前对创始人过于严厉。如果他们被迫停止，整个风险投资业务会运作得更好，你可能会看到类似于取消限制性法律时总是看到的贸易增长。\n投资者是创始人痛苦的最大来源之一；如果他们停止造成如此多的痛苦，成为创始人会更好；如果成为创始人更好，更多的人会去做。\n[3] 可以想象，一个创业公司可以通过将咨询转化为可扩展的形式而变得庞大。但如果他们这样做，他们就真的成为了一家产品公司。\n感谢Jessica Livingston阅读本文草稿。\n日文翻译\n",
    "description": "",
    "tags": ["创业","创始人","企业家","盈利","融资","yc","拉面盈利"],
    "categories": [],
    "content": "→ English Version\n拉面盈利 2009年7月\n现在\u0026quot;拉面盈利\u0026quot;这个词已经广为流传，我应该准确地解释一下这个概念的含义。\n拉面盈利意味着创业公司赚到的钱刚好够支付创始人的生活费用。这是一种与传统创业公司所追求的不同形式的盈利能力。传统盈利意味着一场大赌注终于得到了回报，而拉面盈利的主要重要性在于它为你赢得了时间。[1]\n在过去，创业公司通常只有在筹集并花费了相当多的资金后才能实现盈利。一家制造计算机硬件的公司可能需要5年才能盈利，在此期间他们花费了5000万美元。但当他们实现盈利时，他们的年收入可能达到5000万美元。这种盈利意味着创业公司已经成功了。\n拉面盈利则是另一个极端：一个创业公司在2个月后就能盈利，即使其月收入只有3000美元，因为唯一的员工是几个25岁的创始人，他们几乎可以靠很少的钱生活。月收入3000美元并不意味着公司已经成功了。但它确实与传统盈利的公司有共同之处：他们不需要筹集资金来生存。\n拉面盈利对大多数人来说是一个陌生的概念，因为它直到最近才变得可行。它对很多创业公司来说仍然不可行；例如，对大多数生物技术创业公司来说就不行；但对许多软件创业公司来说却是可行的，因为它们现在如此便宜。对许多公司来说，唯一的真正成本是创始人的生活费用。\n这种盈利能力的主要意义在于你不再受投资者的摆布。如果你仍在亏损，那么最终你将不得不筹集更多资金或关闭公司。一旦你实现了拉面盈利，这种痛苦的选择就消失了。你仍然可以筹集资金，但你现在不必这样做。\n不需要资金最明显的优势是你可以获得更好的条件。如果投资者知道你需要资金，他们有时会利用你。有些人甚至会故意拖延，因为他们知道随着资金耗尽，你会变得越来越顺从。\n但拉面盈利还有三个不太明显的优势。一是它让你对投资者更有吸引力。如果你已经盈利了，无论规模多么小，它都表明（a）你至少能让某人付钱给你，（b）你认真对待构建人们想要的东西，（c）你有足够的自律来保持低支出。\n这让投资者感到放心，因为你已经解决了他们最大的三个担忧。他们通常会资助有聪明创始人和大市场的公司，但最终仍然失败。当这些公司失败时，通常是因为（a）人们不愿意为他们制作的东西付费，例如因为向他们销售太难，或者市场还没有准备好，（b）创始人解决了错误的问题，而没有关注用户的需求，或者（c）公司在开始赚钱之前花费太多并耗尽了资金。如果你实现了拉面盈利，你已经避免了这些错误。\n拉面盈利的另一个优势是它对士气有好处。当你刚开始创办公司时，公司往往感觉相当理论化。它在法律上是一家公司，但当你称之为公司时，你感觉自己在说谎。当人们开始向你支付可观金额时，公司开始感觉真实。而你自己的生活费用是你感受最深的里程碑，因为在那个时刻未来发生了翻转。现在生存是默认状态，而不是死亡。\n在创业公司中，这种规模的士气提升非常有价值，因为运营创业公司的精神压力是导致困难的原因。创业公司仍然非常罕见。为什么更多的人不去做？财务风险？很多25岁的年轻人无论如何都不存钱。长时间工作？很多人在常规工作中工作时间同样长。阻止人们创办创业公司的是对承担如此多责任的恐惧。这不是非理性的恐惧：真的很难承受。任何能减轻你一些负担的事情都会大大增加你生存的机会。\n一个达到拉面盈利的创业公司成功的可能性可能比失败的可能性更大。考虑到创业公司结果的二元分布：你要么失败，要么赚很多钱，这是相当令人兴奋的。\n拉面盈利的第四个优势是最不明显的，但可能是最重要的。如果你不需要筹集资金，你就不必中断公司的工作去做这件事。\n筹集资金非常分散注意力。如果你的生产力能达到以前的三分之一，你就很幸运了。这种情况可能会持续数月。\n直到今年早些时候，我才理解（或者说记起）为什么筹集资金如此分散注意力。我注意到我们资助的创业公司在转向筹集资金时通常会停滞不前，但直到YC自己筹集资金时我才确切记得为什么。我们相对来说比较顺利；我询问的第一个人就答应了；但是花了数月时间来敲定细节，在那段时间里我几乎没有完成任何实际工作。为什么？因为我一直在思考这个问题。\n在任何给定时间，创业公司往往有一个最紧迫的问题。这是你晚上入睡时和早上洗澡时思考的问题。当你开始筹集资金时，这成为你思考的问题。你早上只洗一次澡，如果你在洗澡时思考投资者，那么你就不是在思考产品。\n而如果你可以选择何时筹集资金，你可以选择一个不在其他事情中间的时间，你可能还可以坚持要求这轮融资快速结束。如果你不在乎它是否完成，你甚至可以避免让这轮融资占据你的思想。\n拉面盈利的含义不超过其定义所暗示的。例如，它并不意味着你在\u0026quot;自举\u0026quot;创业公司——即你永远不会接受投资者的资金。经验上这似乎不太有效。很少有创业公司在没有接受投资的情况下成功。也许随着创业公司变得更便宜，这会变得更加普遍。另一方面，资金就在那里，等 …"
  },{
    "title": "拖累盲区",
    "url": "/paul_graham/essays_zh/schlep/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n拖累盲区 2012年1月\n伟大的创业想法就在我们眼皮底下未被利用。我们看不到它们的一个原因是我称之为拖累盲区的现象。Schlep最初是一个意第绪语单词，但已经在美国通用。它意味着一项繁琐、不愉快的任务。\n没有人喜欢拖累，但黑客尤其不喜欢它们。大多数开始创业的黑客希望他们能够只写一些聪明的软件，把它放在某个服务器上，看着钱滚滚而来——而不必与用户交谈，或与其他公司谈判，或处理其他人的破损代码。也许这是可能的，但我还没有看到。\n我们在Y Combinator做的许多事情之一是教导黑客们拖累的不可避免性。不，你不能只通过写代码来创业。我记得我自己经历了这种认识。在1995年的某个时刻，我仍然试图说服自己我可以只通过写代码来创业。但我很快从经验中学到，拖累不仅是不可避免的，而且基本上就是商业的组成部分。\n一个公司是由它愿意承担的拖累来定义的。拖累应该像对待冷水游泳池一样处理：直接跳进去。这并不是说你应该刻意寻求不愉快的工作，而是说你永远不应该回避它，如果它在通往伟大事物的道路上。\n我们对拖累的厌恶最危险的部分是其中大部分是无意识的。你的无意识甚至不会让你看到涉及痛苦拖累的想法。这就是拖累盲区。\n这种现象不仅仅限于创业。大多数人不会有意识地决定不拥有与奥林匹克运动员一样好的身体状况。例如，他们的无意识为他们做决定，回避所涉及的工作。\n我所知道的拖累盲区最突出的例子是Stripe，或者更确切地说是Stripe的想法。十多年来，每个曾经不得不在线处理付款的黑客都知道这个体验有多痛苦。成千上万的人一定知道这个问题。然而当他们开始创业时，他们决定建立食谱网站，或者本地活动聚合器。为什么？为什么在你可以修复世界上最重要基础设施之一的组件时，要从事很少有人关心也没有人会为之付钱的问题？因为拖累盲区阻止人们甚至考虑修复付款的想法。\n可能没有人申请Y Combinator做食谱网站项目时首先问\u0026quot;我们应该修复付款，还是建立食谱网站？\u0026ldquo;然后选择了食谱网站。虽然修复付款的想法就在明面上，但他们从未看到它，因为他们的无意识回避所涉及的复杂性。你将不得不与银行达成协议。你怎么做到的？而且你在转移资金，所以你将不得不处理欺诈，以及试图闯入你服务器的人。而且可能还有各种法规需要遵守。开始像这样的创业公司比开始食谱网站创业公司要令人畏惧得多。\n这种可怕性使得雄心勃勃的想法具有双重价值。除了它们的内在价值之外，它们就像被低估的股票，因为在创始人中对它们的需求较少。如果你选择一个雄心勃勃的想法，你将有更少的竞争，因为其他人都会被所涉及的挑战吓倒。（这对于创业一般也是正确的。）\n你如何克服拖累盲区？坦率地说，对拖累盲区最有价值的解药可能是无知。大多数成功的创始人可能会说，如果他们在开始创业时知道他们必须克服的障碍，他们可能永远不会开始。也许这就是为什么最成功的创业公司经常有年轻创始人的原因之一。\n在实践中，创始人与问题一起成长。但似乎没有人能够预见到这一点，即使是更年长、更有经验的创始人。所以年轻创始人有优势的原因是他们犯两个错误，这些错误相互抵消。他们不知道他们能成长多少，但他们也不知道他们需要成长多少。年长的创始人只犯第一个错误。\n无知不能解决所有问题。有些想法如此明显地涉及令人担忧的拖累，任何人都能看到它们。你如何看到这样的想法？我推荐的技巧是自己退出画面。不要问\u0026quot;我应该解决什么问题？\u0026ldquo;而是问\u0026quot;我希望别人为我解决什么问题？\u0026ldquo;如果在Stripe之前有人不得不处理付款的人尝试问这个问题，Stripe会是他们首先希望的事情之一。\n现在成为Stripe已经太晚了，但世界上仍然有很多破损的东西，如果你知道如何看到它。\n感谢萨姆·奥特曼、保罗·布赫海特、帕特里克·克里森、亚伦·伊巴、杰西卡·利文斯顿、埃米特·谢尔和哈吉·塔加阅读本文的草稿。\n",
    "description": "",
    "tags": ["拖累","创业","编程","企业家精神","y_combinator","难题"],
    "categories": [],
    "content": "→ English Version\n拖累盲区 2012年1月\n伟大的创业想法就在我们眼皮底下未被利用。我们看不到它们的一个原因是我称之为拖累盲区的现象。Schlep最初是一个意第绪语单词，但已经在美国通用。它意味着一项繁琐、不愉快的任务。\n没有人喜欢拖累，但黑客尤其不喜欢它们。大多数开始创业的黑客希望他们能够只写一些聪明的软件，把它放在某个服务器上，看着钱滚滚而来——而不必与用户交谈，或与其他公司谈判，或处理其他人的破损代码。也许这是可能的，但我还没有看到。\n我们在Y Combinator做的许多事情之一是教导黑客们拖累的不可避免性。不，你不能只通过写代码来创业。我记得我自己经历了这种认识。在1995年的某个时刻，我仍然试图说服自己我可以只通过写代码来创业。但我很快从经验中学到，拖累不仅是不可避免的，而且基本上就是商业的组成部分。\n一个公司是由它愿意承担的拖累来定义的。拖累应该像对待冷水游泳池一样处理：直接跳进去。这并不是说你应该刻意寻求不愉快的工作，而是说你永远不应该回避它，如果它在通往伟大事物的道路上。\n我们对拖累的厌恶最危险的部分是其中大部分是无意识的。你的无意识甚至不会让你看到涉及痛苦拖累的想法。这就是拖累盲区。\n这种现象不仅仅限于创业。大多数人不会有意识地决定不拥有与奥林匹克运动员一样好的身体状况。例如，他们的无意识为他们做决定，回避所涉及的工作。\n我所知道的拖累盲区最突出的例子是Stripe，或者更确切地说是Stripe的想法。十多年来，每个曾经不得不在线处理付款的黑客都知道这个体验有多痛苦。成千上万的人一定知道这个问题。然而当他们开始创业时，他们决定建立食谱网站，或者本地活动聚合器。为什么？为什么在你可以修复世界上最重要基础设施之一的组件时，要从事很少有人关心也没有人会为之付钱的问题？因为拖累盲区阻止人们甚至考虑修复付款的想法。\n可能没有人申请Y Combinator做食谱网站项目时首先问\u0026quot;我们应该修复付款，还是建立食谱网站？\u0026ldquo;然后选择了食谱网站。虽然修复付款的想法就在明面上，但他们从未看到它，因为他们的无意识回避所涉及的复杂性。你将不得不与银行达成协议。你怎么做到的？而且你在转移资金，所以你将不得不处理欺诈，以及试图闯入你服务器的人。而且可能还有各种法规需要遵守。开始像这样的创业公司比开始食谱网站创业公司要令人畏惧得多。\n这种可怕性使得雄心勃勃的想法具有双重价值。除了它们的内在价值之外，它们就像被低估的股票，因为在创始人中对它们的需求较少。如果你选择一个雄心勃勃的想法，你将有更少的竞争，因为其他人都会被所涉及的挑战吓倒。（这对于创业一般也是正确的。）\n你如何克服拖累盲区？坦率地说，对拖累盲区最有价值的解药可能是无知。大多数成功的创始人可能会说，如果他们在开始创业时知道他们必须克服的障碍，他们可能永远不会开始。也许这就是为什么最成功的创业公司经常有年轻创始人的原因之一。\n在实践中，创始人与问题一起成长。但似乎没有人能够预见到这一点，即使是更年长、更有经验的创始人。所以年轻创始人有优势的原因是他们犯两个错误，这些错误相互抵消。他们不知道他们能成长多少，但他们也不知道他们需要成长多少。年长的创始人只犯第一个错误。\n无知不能解决所有问题。有些想法如此明显地涉及令人担忧的拖累，任何人都能看到它们。你如何看到这样的想法？我推荐的技巧是自己退出画面。不要问\u0026quot;我应该解决什么问题？\u0026ldquo;而是问\u0026quot;我希望别人为我解决什么问题？\u0026ldquo;如果在Stripe之前有人不得不处理付款的人尝试问这个问题，Stripe会是他们首先希望的事情之一。\n现在成为Stripe已经太晚了，但世界上仍然有很多破损的东西，如果你知道如何看到它。\n感谢萨姆·奥特曼、保罗·布赫海特、帕特里克·克里森、亚伦·伊巴、杰西卡·利文斯顿、埃米特·谢尔和哈吉·塔加阅读本文的草稿。\n"
  },{
    "title": "招聘已经过时",
    "url": "/paul_graham/essays_zh/hiring/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n招聘已经过时 2005年5月\n（本文源于在伯克利CSUA的演讲。）\n现在互联网上的三大巨头是雅虎、谷歌和微软。他们创始人的平均年龄：24岁。所以现在已经很确定地建立了研究生可以创办成功公司的观念。如果研究生能做到，为什么本科生不能呢？\n像技术领域的一切一样，创办创业公司的成本已经急剧下降。现在它如此之低，以至于消失在了噪音中。创办基于网络的创业公司的主要成本是食物和房租。这意味着创办公司并不比做一个彻底的懒虫花费更多。如果你准备靠拉面生活，你很可能用一万美元的种子资金就可以创办一家创业公司。\n创办公司的成本越低，你需要投资者的许可来做的就越少。所以很多现在永远无法创办公司的人将能够创办公司。\n最有趣的子集可能是那些二十出头的人。我对拥有投资者想要的一切除了智力的创始人，或者除了精力以外的一切都不感兴趣的创始人并不那么兴奋。被新的更低门槛解放的最有前途的群体是那些拥有投资者想要的一切除了经验的人。\n市场价格 我曾经声称书呆子在中学不受欢迎主要是因为他们有比全职追求受欢迎更重要的事情要做。有些人说我只是在告诉人们他们想听的话。好吧，我现在要以一种壮观的方式来这样做：我认为大学生被低估了。\n或者更准确地说，我认为很少有人意识到20岁人价值的巨大差异。有些，确实，不是很能干。但其他人比几乎所有30岁的人更能干。[1]\n直到现在，问题一直在于很难挑选出他们。世界上每个风险投资家，如果他们能回到过去，都会尝试投资微软。但当时会有谁投资？有多少人会意识到这个特定的19岁少年是比尔·盖茨？\n很难判断年轻人，因为（a）他们变化很快，（b）他们之间有很大差异，（c）他们个人前后不一致。最后一点是个大问题。当你年轻时，即使你很聪明，你偶尔也会说蠢话做蠢事。所以如果算法是过滤掉说蠢话的人，就像许多投资者和雇主无意识做的那样，你会得到很多误报。\n大多数刚从大学招聘人的组织只意识到22岁人的平均价值，这并不高。因此，二十世纪的大多数理念是每个人都必须从某种入门级工作的实习生开始。组织意识到进来的人流有很大差异，但他们没有追求这个想法，而是倾向于压制它，相信即使是最有前途的孩子从底层开始也是好的，这样他们就不会头脑膨胀。\n最有生产力的年轻人总是被大组织低估，因为年轻人还没有表现可以衡量，而且对他们能力的任何猜测错误都会趋向于平均值。\n一个特别有生产力的22岁人该做什么？你能做的一件事是绕过组织，直接到用户那里。任何雇佣你的公司，从经济上讲，都在作为顾客的代理。他们给你的薪酬率（尽管他们可能没有意识到这一点）是试图猜测你对用户的价值。但有一种方法可以上诉他们的判断。如果你愿意，你可以选择通过创办自己的公司来直接被用户估值。\n市场比任何雇主都要有洞察力得多。而且它是完全非歧视性的。在互联网上，没人知道你是一条狗。更重要的是，没人知道你22岁。用户关心的只是你的网站或软件是否给他们想要的东西。他们不关心背后的人是否是个高中生。\n如果你真的很有生产力，为什么不让雇主按市场价格付给你薪水？为什么去大公司做普通员工，而你可以创办创业公司让他们收购你来得到你？\n当大多数人听到\u0026quot;创业公司\u0026quot;这个词时，他们想到的是那些已经上市的名公司。但大多数成功的创业公司都是通过被收购成功的。而且通常收购者不仅想要技术，还想要创造它的人。\n大公司通常在创业公司盈利之前就收购它们。显然，在这种情况下，他们不是为了收入。他们想要的是开发团队和迄今为止他们构建的软件。当一家创业公司在六个月内被以200或300万美元收购时，这实际上更像是一种签约奖金而不是收购。\n我认为这种事情会越来越多发生，而且这对每个人都更好。显然，对创办创业公司的人来说更好，因为他们前期得到一大笔钱。但我认为对收购者来说也会更好。大公司的中心问题，也是他们比小公司生产力低得多的主要原因，是难以评估每个人的工作。购买萌芽阶段的创业公司为他们解决了这个问题：收购者在开发人员证明自己之前不用付款。收购者在下行方面受到保护，但仍然获得大部分上行收益。\n产品开发 购买创业公司还解决了困扰大公司的另一个问题：他们不能做产品开发。大公司擅长从现有产品中提取价值，但不擅长创造新产品。\n为什么？值得详细研究这种现象，因为这是创业公司存在的理由。\n首先，大多数大公司都有某种地盘要保护，这往往会扭曲他们的开发决策。例如，基于网络的应用程序现在很热门，但在微软内部肯定对它们有很多矛盾情绪，因为基于软件的整个想法威胁着桌面。所以微软最终得到的任何基于网络的应用程序，可能像Hotmail一样，是在公司外部开发的。\n大公司不擅长开发新产品的另一个原因是，做那种事情的人往往在大公司中没有多大权力（除非碰巧是CEO）。颠覆性技术是由颠覆性的人开发的。他们要么不为大公司工作，要么被唯唯诺诺的人智取，相比之下影响力很小。\n大公司还失败是因为他们通常每种东西只做一个。当你只有一个网络浏览器时，你不能用它做任何真正有风险的事情。如果十个不同的创业公司设计十个不同的网络浏览器，你选择最好的，你可能会得到更好的东西。\n这个问题更一般的版本是，对公司来说，新想法太多了，无法全部探索。现在可能有500家创业公司认为他们在制造微软可能购买的东西。即使是微软可能也无法管理500个内部开发项目。\n大公司也不以正确的方式付钱给人。在大公司开发新产品的人无论成功与否都得到大致相同的报酬。在创业公司的人期望如果产品成功就变得富有，如果失败就一无所获。[2] 所以很自然，创业公司的人工作努力得多。\n大公司的庞大规模本身就是个障碍。在创业公司，开发人员经常被迫直接与用户交谈，无论他们是否愿意，因为没有其他人做销售和支持。做销售很痛苦，但通过尝试向人们推销东西，你比阅读他们在焦点小组中所说的学到更多。\n然后当然，大公司在产品开发方面很糟糕，因为他们在一切方面都很糟糕。在大公司比小公司发生的一切都慢，而产品开发是必须快速发生的事情，因为你必须经过很多次迭代才能得到好东西。\n趋势 我认为大公司购买创业公司的趋势只会加速。 remaining的最大障碍之一是骄傲。大多数公司，至少无意识地，觉得他们应该能够在内部开发东西，而购买创业公司在某种程度上是承认失败。因此，就像人们通常对待承认失败一样，他们尽可能推迟它。这使得收购在最终发生时非常昂贵。\n公司应该做的是在创业公司年轻时就发现它们，在风险投资家把它们膨胀成需要花费数亿美元收购的东西之前。风险投资家添加的大部分内容，收购者无论如何都不需要。\n为什么收购者不尝试预测他们将不得不以数亿美元收购的公司，并以十分之一或二十分之一的价格及早抓住它们？因为他们无法提前预测赢家？如果他们只支付二十分之一的价格，他们只需要预测到二十分之一那么好就行。他们肯定能做到这一点。\n我认为收购技术的公司将逐渐学会追逐更早期的创业公司。他们不一定直接收购。解决方案可能是投资和收购的某种混合：例如，购买公司的一部分并获得以后购买其余部分的选择权。\n当公司购买创业公司时，他们有效地融合了招聘和产品开发。我认为这比分别做两件事更有效，因为你总是得到真正致力于他们所做事情的人。\n此外，这种方法产生了已经很好合作的开发团队。他们之间的任何冲突都在创业公司的火热考验中解决了。到收购者得到他们时，他们在互相完成对方的句子。这在软件中很有价值，因为如此多的错误发生在不同人代码之间的边界上。\n投资者 创办公司越来越便宜不仅让黑客相对于雇主有更多权力。它也让他们相对于投资者有更多权力。\n风险投资家中的传统智慧是，不应该允许黑客经营自己的公司。创始人应该接受MBA作为他们的老板，自己承担某种首席技术官的头衔。可能有情况下这是个好主意。但我认为创始人将越来越能够就控制问题推回去，因为他们不再像过去那样需要投资者的钱。\n创业公司是一个相对较新的现象。仙童半导体被认为是第一家风险投资支持的创业公司，他们成立于1959年，不到五十年前。以社会变化的时间尺度衡量，我们现在拥有的还是测试版。所以我们不应该假设创业公司现在的工作方式就是它们必须工作的方式。\n仙童需要很多钱才能开始。他们必须建造实际的工厂。现在基于网络的创业公司的第一轮风险融资资金花在什么上？更多的钱不能让软件写得更快；设施不需要，因为现在那些可以相当便宜；钱真正能为你买到的只是销售和营销。我承认销售队伍是有价值的。但营销越来越无关紧要。在互联网上，任何真正好的东西都会通过口碑传播。\n投资者的权力来自金钱。当创业公司需要更少的钱时，投资者对他们的权力就更小。所以未来的创始人可能不必接受新的CEO，如果他们不想要的话。风险投资家将不得不被踢着尖叫地沿着这条路走，但就像许多人们必须被踢着尖叫着推向的事情一样，这可能实际上对他们有好处。\n谷歌是事情发展方向的一个标志。作为资助的条件，他们的投资者坚持他们雇佣一个有经验的老家伙作为CEO。但据我所知，创始人没有 just 屈服并接受风险投资家想要的任何人。他们推迟了整整一年，当他们最终接受CEO时，他们选择了一个拥有计算机科学博士学位的人。\n听起来创始人仍然是公司中最有权力的人，而且从谷歌的表现来看，他们的年轻和缺乏经验似乎并没有伤害他们。确实，我怀疑谷歌比如果创始人在风险投资家想要的时候给他们想要的东西，并在他们获得第一轮融资后让某个MBA接管会做得更好。\n我不是说风险投资家安装的商业人士没有价值。当然他们有价值。但他们不需要成为创始人的老板，这就是CEO这个头衔的意思。我预测未来风险投资家安装的高管将越来越多地是COO而不是CEO。创始人将直接管理工程，其余的通过COO管理。\n开放的笼子 与雇主和投资者双方，权力的天平都在慢慢向年轻人转移。然而他们似乎最后一个意识到这一点。只有最有雄心的大学生甚至在毕业时考虑创办自己的公司。大多数人只想找份工作。\n也许事情就应该这样。也许如果创办创业公司的想法令人生畏，你就过滤掉了不坚定的人。但我怀疑过滤器设置得有点太高。我认为有些人如果尝试的话，能够创办成功的创业公司，而他们却让自己被扫入大公司的进气管道。\n你有没有注意到，当动物被放出笼子时，他们并不总是意识到门开了？通常他们需要用棍子戳才能出来。博客也发生了类似的事情。人们在1995年本可以在线发布，但博客直到近几年才真正流行起来。1995年我们认为只有专业作家才有权发表他们的想法，而任何这样做的人都是怪人。现在在线发布变得如此流行，以至于每个人都想做，甚至印刷记者。但博客最近不是因为任何技术创新而流行起来；只是花了八年时间让每个人意识到笼子开了。\n我认为大多数大学生还没有意识到经济笼子是开着的。很多人被父母告诉成功的道路是找到一份好工作。当他们的父母在大学时这是真的，但现在不那么真实了。成功的道路是建造有价值的东西，你不必为现有公司工作才能做到。事实上，如果你不这样做，你往往能做得更好。\n当我和大学生交谈时，最让我惊讶的是他们多么保守。当然不是政治上。我的意思是他们似乎不想冒险。这是个错误，因为你越年轻，你能承担的风险就越多。\n风险 风险和回报总是成比例的。例如，股票比债券风险更大，而且随着时间的推移总是有更大的回报。那么为什么有人投资债券呢？问题在于\u0026quot;随着时间的推移\u0026quot;这个短语。股票在三十年内会产生更大的回报，但它们可能逐年失去价值。所以你应该投资什么取决于你多快需要钱。如果你年轻，你应该选择你能找到的最有风险的投资。\n所有这些关于投资的说法可能看起来很理论化。大多数大学生可能债务多于资产。他们可能觉得他们没有什么可以投资的。但那不是真的：他们有时间可以投资，同样的风险规则也适用于此。你二十出头正是承担疯狂职业风险的时候。\n风险总是与回报成比例的原因是市场力量使然。人们会为稳定性支付额外费用。所以如果你选择稳定性——通过购买债券，或者去大公司工作——那将花费你。\n风险更大的职业选择平均来说报酬更好，因为对它们的需求更少。像创办创业公司这样的极端选择如此可怕，以至于大多数人甚至不会尝试。所以考虑到赌注，你最终不会遇到你可能期望的那么多竞争。\n数学是无情的。虽然也许10个创业公司中有9个失败，但成功的一个会付给创始人超过他们在普通工作中赚到的10倍。[3] 这就是创业公司在\u0026quot;平均\u0026quot;意义上报酬更好的意思。\n记住这一点。如果你创办创业公司，你可能会失败。大多数创业公司都失败。这是行业的本质。但尝试有90%失败几率的事情不一定是个错误，如果你能承担风险的话。40岁时失败，当你有家庭要抚养时，可能是严重的。但如果你22岁失败，那又怎样？如果你大学一毕业就尝试创办创业公司却失败了，你会在23岁时破产但聪明得多。如果你想想，这大致是你希望从研究生课程中得到的东西。\n即使你的创业公司确实失败了，你也不会损害你在雇主那里的前景。为了确认，我问了一些在大公司工作的朋友。我问了雅虎、谷歌、亚马逊、思科和微软的经理，他们会对两个能力相等的24岁候选人有什么感觉，一个尝试创办了失败的创业公司，另一个大学毕业后两年一直在一家大公司做开发。每个人都回答说他们更 prefer 尝试创办自己公司的人。雅虎的工程负责人Zod Nazem说：\u0026ldquo;我实际上更看重有失败创业公司经历的人。你可以引用我的话！\u0026ldquo;所以你有它了。想被雅虎雇佣吗？创办你自己的公司。\n",
    "description": "",
    "tags": ["创业公司","招聘","投资者","创始人","大学生","风险","产品开发"],
    "categories": [],
    "content": "→ English Version\n招聘已经过时 2005年5月\n（本文源于在伯克利CSUA的演讲。）\n现在互联网上的三大巨头是雅虎、谷歌和微软。他们创始人的平均年龄：24岁。所以现在已经很确定地建立了研究生可以创办成功公司的观念。如果研究生能做到，为什么本科生不能呢？\n像技术领域的一切一样，创办创业公司的成本已经急剧下降。现在它如此之低，以至于消失在了噪音中。创办基于网络的创业公司的主要成本是食物和房租。这意味着创办公司并不比做一个彻底的懒虫花费更多。如果你准备靠拉面生活，你很可能用一万美元的种子资金就可以创办一家创业公司。\n创办公司的成本越低，你需要投资者的许可来做的就越少。所以很多现在永远无法创办公司的人将能够创办公司。\n最有趣的子集可能是那些二十出头的人。我对拥有投资者想要的一切除了智力的创始人，或者除了精力以外的一切都不感兴趣的创始人并不那么兴奋。被新的更低门槛解放的最有前途的群体是那些拥有投资者想要的一切除了经验的人。\n市场价格 我曾经声称书呆子在中学不受欢迎主要是因为他们有比全职追求受欢迎更重要的事情要做。有些人说我只是在告诉人们他们想听的话。好吧，我现在要以一种壮观的方式来这样做：我认为大学生被低估了。\n或者更准确地说，我认为很少有人意识到20岁人价值的巨大差异。有些，确实，不是很能干。但其他人比几乎所有30岁的人更能干。[1]\n直到现在，问题一直在于很难挑选出他们。世界上每个风险投资家，如果他们能回到过去，都会尝试投资微软。但当时会有谁投资？有多少人会意识到这个特定的19岁少年是比尔·盖茨？\n很难判断年轻人，因为（a）他们变化很快，（b）他们之间有很大差异，（c）他们个人前后不一致。最后一点是个大问题。当你年轻时，即使你很聪明，你偶尔也会说蠢话做蠢事。所以如果算法是过滤掉说蠢话的人，就像许多投资者和雇主无意识做的那样，你会得到很多误报。\n大多数刚从大学招聘人的组织只意识到22岁人的平均价值，这并不高。因此，二十世纪的大多数理念是每个人都必须从某种入门级工作的实习生开始。组织意识到进来的人流有很大差异，但他们没有追求这个想法，而是倾向于压制它，相信即使是最有前途的孩子从底层开始也是好的，这样他们就不会头脑膨胀。\n最有生产力的年轻人总是被大组织低估，因为年轻人还没有表现可以衡量，而且对他们能力的任何猜测错误都会趋向于平均值。\n一个特别有生产力的22岁人该做什么？你能做的一件事是绕过组织，直接到用户那里。任何雇佣你的公司，从经济上讲，都在作为顾客的代理。他们给你的薪酬率（尽管他们可能没有意识到这一点）是试图猜测你对用户的价值。但有一种方法可以上诉他们的判断。如果你愿意，你可以选择通过创办自己的公司来直接被用户估值。\n市场比任何雇主都要有洞察力得多。而且它是完全非歧视性的。在互联网上，没人知道你是一条狗。更重要的是，没人知道你22岁。用户关心的只是你的网站或软件是否给他们想要的东西。他们不关心背后的人是否是个高中生。\n如果你真的很有生产力，为什么不让雇主按市场价格付给你薪水？为什么去大公司做普通员工，而你可以创办创业公司让他们收购你来得到你？\n当大多数人听到\u0026quot;创业公司\u0026quot;这个词时，他们想到的是那些已经上市的名公司。但大多数成功的创业公司都是通过被收购成功的。而且通常收购者不仅想要技术，还想要创造它的人。\n大公司通常在创业公司盈利之前就收购它们。显然，在这种情况下，他们不是为了收入。他们想要的是开发团队和迄今为止他们构建的软件。当一家创业公司在六个月内被以200或300万美元收购时，这实际上更像是一种签约奖金而不是收购。\n我认为这种事情会越来越多发生，而且这对每个人都更好。显然，对创办创业公司的人来说更好，因为他们前期得到一大笔钱。但我认为对收购者来说也会更好。大公司的中心问题，也是他们比小公司生产力低得多的主要原因，是难以评估每个人的工作。购买萌芽阶段的创业公司为他们解决了这个问题：收购者在开发人员证明自己之前不用付款。收购者在下行方面受到保护，但仍然获得大部分上行收益。\n产品开发 购买创业公司还解决了困扰大公司的另一个问题：他们不能做产品开发。大公司擅长从现有产品中提取价值，但不擅长创造新产品。\n为什么？值得详细研究这种现象，因为这是创业公司存在的理由。\n首先，大多数大公司都有某种地盘要保护，这往往会扭曲他们的开发决策。例如，基于网络的应用程序现在很热门，但在微软内部肯定对它们有很多矛盾情绪，因为基于软件的整个想法威胁着桌面。所以微软最终得到的任何基于网络的应用程序，可能像Hotmail一样，是在公司外部开发的。\n大公司不擅长开发新产品的另一个原因是，做那种事情的人往往在大公司中没有多大权力（除非碰巧是CEO）。颠覆性技术是由颠覆性的人开发的。他们要么不为大公司工作，要么被唯唯诺诺的人智取，相比之 …"
  },{
    "title": "拯救生命的 NFT",
    "url": "/paul_graham/essays_zh/nft/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n拯救生命的 NFT 2021年5月\nNoora Health，一个我支持了多年的非营利组织，刚刚推出了一种新的 NFT。它有一个戏剧性的名字，\u0026ldquo;拯救数千生命\u0026rdquo;，因为这就是收益要做的事情。\nNoora 拯救生命已经7年了。他们在南亚的医院运行项目，教导新妈妈回家后如何照顾她们的婴儿。他们现在在165家医院。而且因为他们知道在一家新医院开始前后的数字，他们可以衡量他们产生的影响。这是巨大的。每1000个活产婴儿，他们拯救9个婴儿。\n这个数字来自 Noora 与 Ariadne Labs 的 Better Birth 团队合作进行的一项研究，该研究涉及28家不同医院的133,733个家庭。Ariadne Labs 是布莱根妇女医院和哈佛大学陈曾熙公共卫生学院的卫生系统创新联合中心。\nNoora 如此有效，即使你以最保守的方式衡量他们的成本，将他们的整个预算除以拯救的生命数量，拯救一个生命的成本也是我所见过的最低的。1,235美元。\n对于这个 NFT，他们将发布一份公开报告，追踪这笔特定资金的使用情况，并估计因此拯救的生命数量。\nNFT 是一个新领域，这种使用方式尤其新颖，但我对其潜力感到兴奋。我很期待看到这次特别拍卖会发生什么，因为与代表已经发生事情的 NFT 不同，这个 NFT 随着价格升高而变得更好。\n保留价约为250万美元，因为这是名字准确所需要的：这就是拯救2000条生命的成本。但这个 NFT 的价格越高，将拯救的生命就越多。能够写出这样的句子真是太好了。\n",
    "description": "",
    "tags": ["NFT","非营利组织","慈善","区块链","社会影响","医疗保健"],
    "categories": [],
    "content": "→ English Version\n拯救生命的 NFT 2021年5月\nNoora Health，一个我支持了多年的非营利组织，刚刚推出了一种新的 NFT。它有一个戏剧性的名字，\u0026ldquo;拯救数千生命\u0026rdquo;，因为这就是收益要做的事情。\nNoora 拯救生命已经7年了。他们在南亚的医院运行项目，教导新妈妈回家后如何照顾她们的婴儿。他们现在在165家医院。而且因为他们知道在一家新医院开始前后的数字，他们可以衡量他们产生的影响。这是巨大的。每1000个活产婴儿，他们拯救9个婴儿。\n这个数字来自 Noora 与 Ariadne Labs 的 Better Birth 团队合作进行的一项研究，该研究涉及28家不同医院的133,733个家庭。Ariadne Labs 是布莱根妇女医院和哈佛大学陈曾熙公共卫生学院的卫生系统创新联合中心。\nNoora 如此有效，即使你以最保守的方式衡量他们的成本，将他们的整个预算除以拯救的生命数量，拯救一个生命的成本也是我所见过的最低的。1,235美元。\n对于这个 NFT，他们将发布一份公开报告，追踪这笔特定资金的使用情况，并估计因此拯救的生命数量。\nNFT 是一个新领域，这种使用方式尤其新颖，但我对其潜力感到兴奋。我很期待看到这次特别拍卖会发生什么，因为与代表已经发生事情的 NFT 不同，这个 NFT 随着价格升高而变得更好。\n保留价约为250万美元，因为这是名字准确所需要的：这就是拯救2000条生命的成本。但这个 NFT 的价格越高，将拯救的生命就越多。能够写出这样的句子真是太好了。\n"
  },{
    "title": "控制权",
    "url": "/paul_graham/essays_zh/control/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n控制权 创始人控制权 2010年12月\n我们资助的一个创始人现在正在和风险投资家谈判，他问我创业公司的创始人在A轮融资后保留董事会控制权有多普遍。他说风投告诉他这几乎从未发生过。\n十年前这是真的。在过去，创始人很少在A轮融资后保持董事会的控制权。传统的A轮董事会由两名创始人、两名风投和一名独立成员组成。最近的结构通常是一名创始人、一名风投和一名独立成员。无论哪种情况，创始人都失去了多数席位。\n但并非总是如此。马克·扎克伯格在A轮时保持了Facebook董事会的控制权，至今仍然保持着。马克·平库斯也保持了Zynga的控制权。但这些只是例外吗？创始人在A轮后保持控制权有多普遍？我听说过我们资助的公司中有几个案例，但我不确定有多少，所以我给ycfounders邮件列表发了邮件。\n回复让我感到惊讶。在我们资助的十几家公司中，创始人在A轮融资后仍然拥有董事会多数席位。\n我觉得我们正处于一个临界点。很多风投仍然表现得好像创始人在A轮融资后保留董事会控制权是闻所未闻的。很多人试图让你感觉很糟糕，即使你只是问一下——好像你想要这样的东西是个新手或控制狂。但我听到的创始人不是新手或控制狂。或者如果他们是，他们就像马克·扎克伯格那样，是风投应该努力资助更多的新手和控制狂。\n创始人在A轮融资后保留控制权显然是闻所未闻的。除非发生财务灾难，我认为在未来一年内这将成为常态。\n公司的控制权是一个比在董事会会议上简单投票超过其他方更复杂的问题。投资者通常对某些重大决定拥有否决权，比如出售公司，无论他们拥有多少董事会席位。而且董事会投票很少分裂。事情是在投票前的讨论中决定的，而不是在投票本身中，投票通常是一致的。但如果在这种讨论中意见分歧，知道自己会在投票中失败的一方往往会不那么坚持。这就是董事会控制权的实际意义。你不能简单地做任何你想做的事；董事会仍然必须为股东的利益行事；但如果你拥有多数董事会席位，那么你对股东利益的意见往往会占上风。\n因此，虽然董事会控制权不是完全控制权，但也不是虚构的。公司内部的感觉必然会有所不同。这意味着如果创始人在A轮融资后保留董事会控制权成为常态，这将改变整个创业世界的感觉方式。\n转向新规范的速度可能出人意料地快，因为能够保留控制权的创业公司往往是最好的那些。它们是为其他创业公司和风投设定趋势的公司。\n风投在与创业公司谈判时严苛的很多原因是，他们不好意思回到合伙人那里看起来像是被打败了。当他们签署投资意向书时，他们希望能够吹嘘他们获得的好条款。很多人个人并不那么在意创始人是否保留董事会控制权。他们只是不想看起来像是做出了让步。这意味着如果让创始人保留控制权不再被视为让步，它将迅速变得更加普遍。\n就像很多强加给风投的变化一样，这个变化最终不会像他们想象的那样成为大问题。风投仍然能够说服；他们只是不能强迫。而他们不得不诉诸强迫的创业公司并不是重要的那些。风投从少数大成功案例中赚取大部分资金，而那些不是他们。\n知道创始人将保持董事会的控制权甚至可能帮助风投做出更好的选择。如果他们知道不能解雇创始人，他们将不得不选择他们可以信任的创始人。而这才是他们一直以来应该选择的人。\n感谢Sam Altman、John Bautista、Trevor Blackwell、Paul Buchheit、Brian Chesky、Bill Clerico、Patrick Collison、Adam Goldstein、James Lindenbaum、Jessica Livingston和Fred Wilson阅读本文的草稿。\n",
    "description": "",
    "tags": ["控制权","创始人","风投","董事会","融资","Y-Combinator","治理"],
    "categories": [],
    "content": "→ English Version\n控制权 创始人控制权 2010年12月\n我们资助的一个创始人现在正在和风险投资家谈判，他问我创业公司的创始人在A轮融资后保留董事会控制权有多普遍。他说风投告诉他这几乎从未发生过。\n十年前这是真的。在过去，创始人很少在A轮融资后保持董事会的控制权。传统的A轮董事会由两名创始人、两名风投和一名独立成员组成。最近的结构通常是一名创始人、一名风投和一名独立成员。无论哪种情况，创始人都失去了多数席位。\n但并非总是如此。马克·扎克伯格在A轮时保持了Facebook董事会的控制权，至今仍然保持着。马克·平库斯也保持了Zynga的控制权。但这些只是例外吗？创始人在A轮后保持控制权有多普遍？我听说过我们资助的公司中有几个案例，但我不确定有多少，所以我给ycfounders邮件列表发了邮件。\n回复让我感到惊讶。在我们资助的十几家公司中，创始人在A轮融资后仍然拥有董事会多数席位。\n我觉得我们正处于一个临界点。很多风投仍然表现得好像创始人在A轮融资后保留董事会控制权是闻所未闻的。很多人试图让你感觉很糟糕，即使你只是问一下——好像你想要这样的东西是个新手或控制狂。但我听到的创始人不是新手或控制狂。或者如果他们是，他们就像马克·扎克伯格那样，是风投应该努力资助更多的新手和控制狂。\n创始人在A轮融资后保留控制权显然是闻所未闻的。除非发生财务灾难，我认为在未来一年内这将成为常态。\n公司的控制权是一个比在董事会会议上简单投票超过其他方更复杂的问题。投资者通常对某些重大决定拥有否决权，比如出售公司，无论他们拥有多少董事会席位。而且董事会投票很少分裂。事情是在投票前的讨论中决定的，而不是在投票本身中，投票通常是一致的。但如果在这种讨论中意见分歧，知道自己会在投票中失败的一方往往会不那么坚持。这就是董事会控制权的实际意义。你不能简单地做任何你想做的事；董事会仍然必须为股东的利益行事；但如果你拥有多数董事会席位，那么你对股东利益的意见往往会占上风。\n因此，虽然董事会控制权不是完全控制权，但也不是虚构的。公司内部的感觉必然会有所不同。这意味着如果创始人在A轮融资后保留董事会控制权成为常态，这将改变整个创业世界的感觉方式。\n转向新规范的速度可能出人意料地快，因为能够保留控制权的创业公司往往是最好的那些。它们是为其他创业公司和风投设定趋势的公司。\n风投在与创业公司谈判时严苛的很多原因是，他们不好意思回到合伙人那里看起来像是被打败了。当他们签署投资意向书时，他们希望能够吹嘘他们获得的好条款。很多人个人并不那么在意创始人是否保留董事会控制权。他们只是不想看起来像是做出了让步。这意味着如果让创始人保留控制权不再被视为让步，它将迅速变得更加普遍。\n就像很多强加给风投的变化一样，这个变化最终不会像他们想象的那样成为大问题。风投仍然能够说服；他们只是不能强迫。而他们不得不诉诸强迫的创业公司并不是重要的那些。风投从少数大成功案例中赚取大部分资金，而那些不是他们。\n知道创始人将保持董事会的控制权甚至可能帮助风投做出更好的选择。如果他们知道不能解雇创始人，他们将不得不选择他们可以信任的创始人。而这才是他们一直以来应该选择的人。\n感谢Sam Altman、John Bautista、Trevor Blackwell、Paul Buchheit、Brian Chesky、Bill Clerico、Patrick Collison、Adam Goldstein、James Lindenbaum、Jessica Livingston和Fred Wilson阅读本文的草稿。\n"
  },{
    "title": "散文的时代",
    "url": "/paul_graham/essays_zh/essay/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n散文的时代 2004年9月\n还记得你在高中时必须写的散文吗？主题句，引言段，支持段落，结论。结论比如说，白鲸记中的亚哈是一个基督式的人物。\n唉。所以我将试图给出故事的另一面：散文真正是什么，以及如何写散文。或者至少，我是如何写散文的。\n修正 真正的散文与学校里必须写的东西之间最明显的区别是，真正的散文不仅仅局限于英国文学。当然，学校应该教学生如何写作。但由于一系列历史偶然事件，写作教学与文学研究混在了一起。因此全国各地的学生都不是在写预算很少的棒球队如何与洋基队竞争，或者色彩在时尚中的作用，或者什么构成好的甜点，而是在写狄更斯作品中的象征主义。\n结果写作被弄得无聊而无意义。谁在乎狄更斯作品中的象征主义？狄更斯本人会对关于色彩或棒球的散文更感兴趣。\n事情怎么会变成这样？要回答这个问题，我们必须回到将近一千年前。大约在1100年，欧洲在几个世纪的混乱后终于开始喘息，一旦他们有了好奇的奢侈，他们就重新发现了我们称之为\u0026quot;经典\u0026quot;的东西。效果就好像我们被来自另一个太阳系的生物访问过一样。这些早期文明如此复杂，以至于在接下来的几个世纪里，欧洲学者在几乎所有领域的主要工作都是吸收他们所知道的东西。\n在这个时期，研究古代文本获得了巨大的声望。这似乎是学者所做工作的本质。随着欧洲学术获得势头，它变得越来越不重要；到1350年，想要学习科学的人可以找到比亚里士多德时代更好的老师。[1] 但学校的变化比学术慢。在19世纪，研究古代文本仍然是课程的主干。\n那么问题的时机成熟了：如果研究古代文本是学术的合法领域，为什么不是现代文本？答案当然是，古典学术的最初存在理由是一种不需要对当代作者进行的智力考古学。但出于明显的原因，没有人想给出那个答案。考古工作基本完成，这意味着研究古典的人如果不是在浪费时间，至少是在处理次要问题。\n于是现代文学研究开始了。起初有很大的阻力。第一批英国文学课程似乎是由较新的学院提供的，特别是美国的学院。达特茅斯学院、佛蒙特大学、阿默斯特学院和伦敦大学学院在1820年代教授英国文学。但哈佛直到1876年才有英国文学教授，牛津直到1885年才有。（牛津在设立英国文学教授职位之前就有了中文教授。）[2]\n打破平衡的，至少在美国，似乎是教授不仅应该教书还应该做研究的想法。这个想法（连同博士学位、系，以及整个现代大学的概念）在19世纪末从德国进口。从1876年在约翰霍普金斯大学开始，新模式迅速传播。\n写作是受害者之一。学院长期以来一直教授英语写作。但你如何对写作进行研究？教数学的教授可以被要求做原创数学，教历史的教授可以被要求写关于历史的学术文章，但教修辞学或写作的教授呢？他们应该研究什么？最接近的似乎是英国文学。[3]\n因此在19世纪末，写作教学被英语教授继承。这有两个缺点：(a) 文学专家本人不一定是好作家，就像艺术史学家不一定是好画家一样，(b) 写作的题目现在往往是文学，因为那是教授感兴趣的。\n高中模仿大学。我们痛苦的高中经历是在1892年播下的种子，当时全国教育协会\u0026quot;正式建议将文学和写作在高中课程中统一。\u0026quot;[4] 3R中的写作部分后来变成了英语，产生了奇怪的后果，即高中生现在必须写关于英国文学的文章——在不知不觉中，模仿几十年前英语教授在期刊上发表的任何东西。\n如果这对学生来说似乎是无意义的练习，也就不足为奇了，因为我们现在离真正的工作有三步之遥：学生在模仿英语教授，英语教授在模仿古典学者，而古典学者仅仅是传统的继承者，这个传统源自700年前迷人且迫切需要的工作。\n无需辩护 真正的散文与学校让你写的东西之间的另一个大区别是，真正的散文不会采取一个立场然后为它辩护。这个原则，就像我们应该写关于文学的想法一样，结果是一个早已被遗忘的起源的知识遗留物。\n人们常常错误地认为中世纪的大学大多是神学院。实际上它们更像法学院。至少在我们的传统中，律师是倡导者，被训练来为争论的任何一方辩护，并尽可能为那个立场辩护。无论是原因还是结果，这种精神弥漫在早期大学中。修辞学研究，即有说服力地争论的艺术，占本科课程的三分之一。[5] 讲座后最常见的讨论形式是辩论。这至少名义上保存在我们今天的论文答辩中：大多数人把论文和 dissertation 这两个词当作可以互换的，但最初，至少论文是采取的立场，而 dissertation 是为它辩护的论点。\n在法律纠纷中辩护可能是必要的邪恶，但这不是获得真理的最佳方式，我想律师会第一个承认。不仅仅是你这样会错过微妙之处。真正的问题是你不能改变问题。\n然而这个原则被内置在他们在高中教你写的东西的 very 结构中。主题句是你的论点，预先选择，支持段落是你在冲突中打击的 blows，而结论——呃，结论是什么？我在高中时从来不确定。似乎我们应该只是用足够不同的词语重述我们在第一段说的话，以至于没有人能分辨出来。何必呢？但当你理解了这种\u0026quot;散文\u0026quot;的起源，你就能看到结论来自哪里。这是对陪审团的 concluding remarks。\n好的写作应该有说服力，当然，但它应该有说服力是因为你得到了正确的答案，而不是因为你做得很好。当我把散文的草稿给朋友时，我想知道两件事：哪些部分让他们感到无聊，哪些似乎没有说服力。无聊的部分通常可以通过删减来修复。但我不会试图通过更聪明地争论来修复没有说服力的部分。我需要讨论这个问题。\n至少我一定把某件事解释得很糟糕。在这种情况下，在谈话过程中我将被迫想出一个更清晰的解释，我可以直接把它纳入散文中。我常常也不得不说的话。但目的从来不是 per se 有说服力。随着读者变得更聪明，有说服力和真实变得相同，所以如果我能说服聪明的读者，我一定接近真理。\n试图说服的写作可能是一种有效的（或至少不可避免的）形式，但称之为散文在历史上是不准确的。散文是别的东西。\n尝试 要理解真正的散文是什么，我们必须再次回到历史，虽然这次不那么远。回到米歇尔·德·蒙田，他在1580年出版了一本他称之为\u0026quot;essais\u0026quot;的书。他做的事情与律师做的事情完全不同，差异体现在名称中。Essayer 是法语动词，意思是\u0026quot;尝试\u0026quot;，而 essai 是一次尝试。散文是你写来试图弄清楚某事的东西。\n弄清楚什么？你还不知道。所以你不能以论点开始，因为你没有，可能永远不会有一个。散文不以陈述开始，而是以问题开始。在真正的散文中，你不采取立场并辩护。你注意到一扇半开的门，你打开它走进去看看里面是什么。\n如果你想做的只是弄清楚事情，为什么要写任何东西呢？为什么不只是坐着思考？嗯，这正是蒙田的伟大发现。表达想法有助于形成它们。事实上，帮助这个词太弱了。我散文中最终出现的大部分内容只有当我坐下来写它们时才想到。这就是为什么我写它们。\n你在学校写的东西，理论上，你只是在向读者解释自己。在真正的散文中，你为自己写作。你在大声思考。\n但不太一样。就像邀请人们来迫使你清理公寓一样，写别人会读的东西迫使你思考得好。所以有听众确实很重要。我只为自己写的东西不好。它们往往会 peter out。当我遇到困难时，我发现我以几个模糊的问题结束，然后 drift off 去喝杯茶。\n许多已发表的散文以同样的方式 peter out。特别是新闻杂志 staff writers 写的那种。外部作家倾向于提供辩护立场的社论，这种社论直线走向激动人心（且预先注定）的结论。但 staff writers 感觉有义务写一些\u0026quot;平衡\u0026quot;的东西。因为他们为流行杂志写作，他们从最具放射性争议的问题开始，然后——因为他们为流行杂志写作——他们接着惊恐地退缩。堕胎，支持还是反对？这个团体说一件事。那个团体说另一件事。有一件事是确定的：问题是一个复杂的。（但不要生我们的气。我们没有得出任何结论。）\n河流 问题还不够。散文必须提供答案。当然，它们并不总是如此。有时你从一个有希望的问题开始，却一无所获。但那些你不会发表。那些就像得到不确定结果的实验。你发表的散文应该告诉读者一些他还不知道的事情。\n但你告诉他的事情不重要，只要有趣。我有时被指责为 meandering。在辩护立场的写作中，这将是一个缺陷。在那里你不关心真理。你已经知道你要去哪里，你想直接去那里，blustering 通过障碍物，hand-waving 你走过沼泽地的方式。但这不是你在散文中试图做的。散文应该是寻找真理。如果它不 meander 就会令人怀疑。\n",
    "description": "",
    "tags": ["散文","写作","教育","蒙田","文学","历史","创造力","观察"],
    "categories": [],
    "content": "→ English Version\n散文的时代 2004年9月\n还记得你在高中时必须写的散文吗？主题句，引言段，支持段落，结论。结论比如说，白鲸记中的亚哈是一个基督式的人物。\n唉。所以我将试图给出故事的另一面：散文真正是什么，以及如何写散文。或者至少，我是如何写散文的。\n修正 真正的散文与学校里必须写的东西之间最明显的区别是，真正的散文不仅仅局限于英国文学。当然，学校应该教学生如何写作。但由于一系列历史偶然事件，写作教学与文学研究混在了一起。因此全国各地的学生都不是在写预算很少的棒球队如何与洋基队竞争，或者色彩在时尚中的作用，或者什么构成好的甜点，而是在写狄更斯作品中的象征主义。\n结果写作被弄得无聊而无意义。谁在乎狄更斯作品中的象征主义？狄更斯本人会对关于色彩或棒球的散文更感兴趣。\n事情怎么会变成这样？要回答这个问题，我们必须回到将近一千年前。大约在1100年，欧洲在几个世纪的混乱后终于开始喘息，一旦他们有了好奇的奢侈，他们就重新发现了我们称之为\u0026quot;经典\u0026quot;的东西。效果就好像我们被来自另一个太阳系的生物访问过一样。这些早期文明如此复杂，以至于在接下来的几个世纪里，欧洲学者在几乎所有领域的主要工作都是吸收他们所知道的东西。\n在这个时期，研究古代文本获得了巨大的声望。这似乎是学者所做工作的本质。随着欧洲学术获得势头，它变得越来越不重要；到1350年，想要学习科学的人可以找到比亚里士多德时代更好的老师。[1] 但学校的变化比学术慢。在19世纪，研究古代文本仍然是课程的主干。\n那么问题的时机成熟了：如果研究古代文本是学术的合法领域，为什么不是现代文本？答案当然是，古典学术的最初存在理由是一种不需要对当代作者进行的智力考古学。但出于明显的原因，没有人想给出那个答案。考古工作基本完成，这意味着研究古典的人如果不是在浪费时间，至少是在处理次要问题。\n于是现代文学研究开始了。起初有很大的阻力。第一批英国文学课程似乎是由较新的学院提供的，特别是美国的学院。达特茅斯学院、佛蒙特大学、阿默斯特学院和伦敦大学学院在1820年代教授英国文学。但哈佛直到1876年才有英国文学教授，牛津直到1885年才有。（牛津在设立英国文学教授职位之前就有了中文教授。）[2]\n打破平衡的，至少在美国，似乎是教授不仅应该教书还应该做研究的想法。这个想法（连同博士学位、系，以及整个现代大学的概念）在19世纪末从德国进口。从1876年在约翰霍普金斯大学开始，新模式迅速传播。\n写作是受害者之一。学院长期以来一直教授英语写作。但你如何对写作进行研究？教数学的教授可以被要求做原创数学，教历史的教授可以被要求写关于历史的学术文章，但教修辞学或写作的教授呢？他们应该研究什么？最接近的似乎是英国文学。[3]\n因此在19世纪末，写作教学被英语教授继承。这有两个缺点：(a) 文学专家本人不一定是好作家，就像艺术史学家不一定是好画家一样，(b) 写作的题目现在往往是文学，因为那是教授感兴趣的。\n高中模仿大学。我们痛苦的高中经历是在1892年播下的种子，当时全国教育协会\u0026quot;正式建议将文学和写作在高中课程中统一。\u0026quot;[4] 3R中的写作部分后来变成了英语，产生了奇怪的后果，即高中生现在必须写关于英国文学的文章——在不知不觉中，模仿几十年前英语教授在期刊上发表的任何东西。\n如果这对学生来说似乎是无意义的练习，也就不足为奇了，因为我们现在离真正的工作有三步之遥：学生在模仿英语教授，英语教授在模仿古典学者，而古典学者仅仅是传统的继承者，这个传统源自700年前迷人且迫切需要的工作。\n无需辩护 真正的散文与学校让你写的东西之间的另一个大区别是，真正的散文不会采取一个立场然后为它辩护。这个原则，就像我们应该写关于文学的想法一样，结果是一个早已被遗忘的起源的知识遗留物。\n人们常常错误地认为中世纪的大学大多是神学院。实际上它们更像法学院。至少在我们的传统中，律师是倡导者，被训练来为争论的任何一方辩护，并尽可能为那个立场辩护。无论是原因还是结果，这种精神弥漫在早期大学中。修辞学研究，即有说服力地争论的艺术，占本科课程的三分之一。[5] 讲座后最常见的讨论形式是辩论。这至少名义上保存在我们今天的论文答辩中：大多数人把论文和 dissertation 这两个词当作可以互换的，但最初，至少论文是采取的立场，而 dissertation 是为它辩护的论点。\n在法律纠纷中辩护可能是必要的邪恶，但这不是获得真理的最佳方式，我想律师会第一个承认。不仅仅是你这样会错过微妙之处。真正的问题是你不能改变问题。\n然而这个原则被内置在他们在高中教你写的东西的 very 结构中。主题句是你的论点，预先选择，支持段落是你在冲突中打击的 blows，而结论——呃，结论是什么？我在高中时从来不确定。似乎我们应该只是 …"
  },{
    "title": "散文领域的形态",
    "url": "/paul_graham/essays_zh/field/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n散文领域的形态 2025年6月\n散文必须告诉人们一些他们还不知道的事情。但人们不知道某件事有三种不同的原因，这产生了三种非常不同的散文。\n人们不知道某件事的一个原因是如果这件事不重要。这并不意味着它会成为一篇糟糕的散文。例如，你可能会写一篇关于特定车型的好散文。读者会从中学到一些东西。这会丰富他们对世界的认识。对少数读者来说，这甚至可能引发某种顿悟。但除非这是一辆非常不寻常的汽车，否则对每个人来说并不是必须了解的。[1]\n如果某件事不重要，那么\u0026quot;为什么人们不知道它\u0026quot;这个问题就没有答案。不知道随机的事实是默认状态。但如果你要写重要的事情，你必须问为什么你的读者还不知道它们。是因为他们聪明但缺乏经验，还是因为他们迟钝？\n所以读者可能还不知道你告诉他们的事情的三个原因是：(a) 它不重要，(b) 他们迟钝，或 (c) 他们缺乏经验。\n我做这个分类的目的是要说明以下事实，如果我一开始就提出这个事实可能显得有争议，但现在应该很明显了。如果你为聪明的人写重要的事情，你就是在为年轻人写作。\n或者更准确地说，那是你最有影响力的地方。无论你说什么，对你来说都应该至少有些新意，无论你多大年纪。否则就不是散文了，因为散文是你为了弄清楚某件事而写的东西。但无论你弄清楚什么，对年轻读者来说可能比你更令人惊讶。\n惊讶有一个连续谱。在一个极端，你读到的东西可以改变你的整个思维方式。《自私的基因》对我就是这样。就像突然看到一个模糊图像的另一种解释：你可以把基因而不是生物体当作主角，当你这样做时，进化就变得更容易理解了。在另一个极端，写作只是把读者已经在想的事情——或者他们以为自己在想的事情——用文字表达出来。\n散文的影响力是它改变读者思维的程度乘以主题的重要性。但很难在这两方面都做得很好。很难对重要主题有大的新想法。所以在实践中有一个权衡：你可以在中等重要的事情上极大地改变读者的思维，或者在非常重要的事情上稍微改变它。但对于年轻读者，权衡会发生变化。有更多空间来改变他们的思维，所以写重要事情有更大的回报。\n这种权衡不是有意识的，至少对我来说不是。它更像是一种作家工作的引力场。但每个散文家都在其中工作，无论他们是否意识到这一点。\n一旦你陈述这一点，这似乎很明显，但我花了很长时间才理解。我知道我想为聪明的人写重要的事情。我凭经验注意到我似乎在为年轻人写作。但我花了几年时间才理解后者是前者的自动结果。事实上，我只是在写这篇散文时才真正弄明白这一点。\n既然我知道了，我应该改变什么吗？我不这么认为。事实上，看到作家工作领域的形态让我想起我不是在优化其中的回报。我不是在试图惊讶任何特定年龄的读者；我在试图惊讶我自己。\n我通常决定写什么的方式是跟随好奇心。我注意到一些新事物并深入研究它。改变那可能是个错误。但看到散文领域的形态让我开始思考。什么会惊讶年轻读者？人们倾向于晚学到哪些重要事情？有趣的问题。我应该思考一下。\n注释 [1] 不过，写一篇关于不重要主题的真正好散文很难，因为真正好的散文家不可避免地会把主题引入更深的水域。E.B.怀特可以写一篇关于如何煮土豆的散文，结果充满了永恒的智慧。在这种情况下，当然它就不是关于如何煮土豆了；那只是起点。\n感谢杰西卡·利文斯顿和迈克尔·尼尔森阅读本文的草稿。\n",
    "description": "",
    "tags": ["散文","写作","创造力","思维","教育"],
    "categories": [],
    "content": "→ English Version\n散文领域的形态 2025年6月\n散文必须告诉人们一些他们还不知道的事情。但人们不知道某件事有三种不同的原因，这产生了三种非常不同的散文。\n人们不知道某件事的一个原因是如果这件事不重要。这并不意味着它会成为一篇糟糕的散文。例如，你可能会写一篇关于特定车型的好散文。读者会从中学到一些东西。这会丰富他们对世界的认识。对少数读者来说，这甚至可能引发某种顿悟。但除非这是一辆非常不寻常的汽车，否则对每个人来说并不是必须了解的。[1]\n如果某件事不重要，那么\u0026quot;为什么人们不知道它\u0026quot;这个问题就没有答案。不知道随机的事实是默认状态。但如果你要写重要的事情，你必须问为什么你的读者还不知道它们。是因为他们聪明但缺乏经验，还是因为他们迟钝？\n所以读者可能还不知道你告诉他们的事情的三个原因是：(a) 它不重要，(b) 他们迟钝，或 (c) 他们缺乏经验。\n我做这个分类的目的是要说明以下事实，如果我一开始就提出这个事实可能显得有争议，但现在应该很明显了。如果你为聪明的人写重要的事情，你就是在为年轻人写作。\n或者更准确地说，那是你最有影响力的地方。无论你说什么，对你来说都应该至少有些新意，无论你多大年纪。否则就不是散文了，因为散文是你为了弄清楚某件事而写的东西。但无论你弄清楚什么，对年轻读者来说可能比你更令人惊讶。\n惊讶有一个连续谱。在一个极端，你读到的东西可以改变你的整个思维方式。《自私的基因》对我就是这样。就像突然看到一个模糊图像的另一种解释：你可以把基因而不是生物体当作主角，当你这样做时，进化就变得更容易理解了。在另一个极端，写作只是把读者已经在想的事情——或者他们以为自己在想的事情——用文字表达出来。\n散文的影响力是它改变读者思维的程度乘以主题的重要性。但很难在这两方面都做得很好。很难对重要主题有大的新想法。所以在实践中有一个权衡：你可以在中等重要的事情上极大地改变读者的思维，或者在非常重要的事情上稍微改变它。但对于年轻读者，权衡会发生变化。有更多空间来改变他们的思维，所以写重要事情有更大的回报。\n这种权衡不是有意识的，至少对我来说不是。它更像是一种作家工作的引力场。但每个散文家都在其中工作，无论他们是否意识到这一点。\n一旦你陈述这一点，这似乎很明显，但我花了很长时间才理解。我知道我想为聪明的人写重要的事情。我凭经验注意到我似乎在为年轻人写作。但我花了几年时间才理解后者是前者的自动结果。事实上，我只是在写这篇散文时才真正弄明白这一点。\n既然我知道了，我应该改变什么吗？我不这么认为。事实上，看到作家工作领域的形态让我想起我不是在优化其中的回报。我不是在试图惊讶任何特定年龄的读者；我在试图惊讶我自己。\n我通常决定写什么的方式是跟随好奇心。我注意到一些新事物并深入研究它。改变那可能是个错误。但看到散文领域的形态让我开始思考。什么会惊讶年轻读者？人们倾向于晚学到哪些重要事情？有趣的问题。我应该思考一下。\n注释 [1] 不过，写一篇关于不重要主题的真正好散文很难，因为真正好的散文家不可避免地会把主题引入更深的水域。E.B.怀特可以写一篇关于如何煮土豆的散文，结果充满了永恒的智慧。在这种情况下，当然它就不是关于如何煮土豆了；那只是起点。\n感谢杰西卡·利文斯顿和迈克尔·尼尔森阅读本文的草稿。\n"
  },{
    "title": "新的融资格局",
    "url": "/paul_graham/essays_zh/superangels/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n新的融资格局 想要创业吗？让Y Combinator资助你。\n2010年10月\n在几十年几乎没有任何变化之后，创业融资业务现在进入了至少相比之下可以称为混乱的状态。在Y Combinator，我们已经看到了创业公司融资环境的戏剧性变化。幸运的是，其中一个变化是高得多的估值。\n我们一直看到的趋势可能不是Y Combinator特有的。我希望我能说它们是，但主要原因可能只是我们首先看到趋势——部分原因是我们资助的创业公司非常融入硅谷，并迅速利用任何新事物，部分原因是我们资助的如此之多，我们有足够的数据点来清楚地看到模式。\n我们现在看到的，每个人在未来几年可能都会看到。所以我要解释我们看到的，以及如果你试图融资，那对你意味着什么。\n超级天使 让我首先描述创业融资世界过去的样子。过去有两种明显不同类型的投资者：天使投资人和风险投资家。天使投资人是投资少量自己资金的个人富人，而风险投资家是投资大量他人资金的基金的员工。\n几十年来只有这两种类型的投资者，但现在第三种类型已经出现在它们之间：所谓的超级天使。[1] 而且他们的出现已经激怒了风险投资家，使他们自己也做了很多天使风格的投资。所以天使投资人和风险投资家之间曾经明显的界限已经变得无可救药地模糊了。\n天使投资人和风险投资家之间曾经有一块无人地带。天使投资人每人投资2万到5万美元，而风险投资家通常是一百万或更多。所以一轮天使融资意味着一系列天使投资组合起来大约20万美元，而一轮风险融资意味着A轮融资，其中单个风险投资基金（偶尔两个）投资1-5百万美元。\n天使投资人和风险投资家之间的无人地带对创业公司来说非常不方便，因为它恰好与许多想要融资的金额相吻合。大多数从演示日出来的创业公司想要融资大约40万美元。但从天使投资中拼凑这么多是痛苦的，而大多数风险投资家对这么小的投资不感兴趣。这就是超级天使出现的基本原因。他们是对市场的回应。\n一种新型投资者的出现对创业公司来说是重大新闻，因为过去只有两种，它们很少相互竞争。超级天使既与天使投资人也与风险投资家竞争。这将改变融资的规则。我还不知道新规则会是什么，但看起来大多数变化都会是好的。\n超级天使具有天使投资人的一些品质，也具有风险投资家的一些品质。他们通常像天使投资人一样是个人。事实上，许多当前的超级天使最初是经典类型的天使投资人。但像风险投资家一样，他们投资他人的资金。这使他们能够投资比天使投资人更大的金额：典型的超级天使投资目前大约是10万美元。他们像天使投资人一样快速做出投资决定。而且每个合伙人做的投资比风险投资家多得多——多达10倍。\n超级天使投资他人资金的事实使他们双重地令风险投资家感到恐慌。他们不仅为创业公司竞争；他们也为投资者竞争。超级天使真正的是一种新型快速行动的轻量级风险投资基金。而我们这些在技术世界的人知道，当出现可以用这样的术语描述的东西时通常会发生什么。通常它是替代品。\n会是这样吗？截至目前，很少有从超级天使那里拿钱的创业公司排除了拿风险投资的钱的可能性。他们只是推迟了。但这仍然对风险投资家是个问题。一些推迟风险融资的创业公司可能在天使融资上做得如此之好，以至于他们从不费心再融资。而那些确实进行风险融资轮的创业公司在融资时能够获得更高的估值。如果最好的创业公司在A轮融资时获得10倍更高的估值，那将把风险投资家从赢家那里获得的回报至少减少十倍。[2]\n所以我认为风险投资基金受到超级天使的严重威胁。但可能在一定程度上拯救他们的一件事是创业公司结果的不均匀分布：实际上所有回报都集中在少数几个大成功上。创业公司的期望价值是它成为谷歌的百分比机会。所以就赢取是绝对回报的问题而言，超级天使可能在个别创业公司的战斗中赢得几乎所有战斗，但输掉战争，如果他们只是错过了那些几个大赢家。而且这有可能会发生，因为顶级风险投资基金有更好的品牌，也能为他们的投资组合公司做更多事情。[3]\n因为超级天使每个合伙人做更多投资，他们每个投资有更少的合伙人。他们不能像你董事会上的风险投资家那样关注你。那额外的关注价值多少？这将从一个合伙人到另一个合伙人差异很大。在一般情况下还没有共识。所以现在这是创业公司个别决定的事情。\n直到现在，风险投资家关于他们增加多少价值的声明有点像政府的。也许他们让你感觉更好，但如果你需要只有风险投资家能供应规模的钱，你在这件事上没有选择。现在风险投资家有了竞争对手，这将为他们提供的帮助设定市场价格。有趣的是，还没有人知道它会是什么。\n想要变得真正大的创业公司需要只有顶级风险投资家才能提供的建议和关系吗？还是超级天使的钱就足够好？风险投资家会说你需要他们，超级天使会说你不需要。但真相是，还没有人知道，甚至风险投资家和超级天使自己也不知道。所有超级天使知道的是，他们的新模式看起来足够有前途，值得一试，所有风险投资家知道的是，它看起来足够有前途，值得担心。\n融资轮 无论结果如何，风险投资家和超级天使之间的冲突对创始人来说都是好消息。而且不仅仅是因为更激烈的交易竞争意味着更好的条款这个明显原因。交易的整个形状正在改变。\n天使投资人和风险投资家之间最大的区别之一是他们想要你公司的多少。风险投资家想要很多。在A轮融资中，如果他们能得到，他们想要你公司的三分之一。他们不太关心为此支付多少钱，但他们想要很多，因为他们能做的A轮投资数量如此之少。在传统的A轮融资中，至少风险投资基金的一个合伙人在你的董事会中占一个席位。[4] 由于董事会席位持续大约5年，每个合伙人一次不能处理超过大约10个，这意味着一个风险投资基金每年每个合伙人只能做大约2个A轮融资。这意味着他们需要在每个中获得尽可能多的公司。你必须是一个非常有前途的创业公司，才能让风险投资家为你的几个百分比而使用他10个董事会席位中的一个。\n由于天使投资人通常不占董事会席位，他们没有这个约束。他们很乐意只购买你公司的几个百分点。虽然超级天使在大多数方面是小型风险投资基金，但他们保留了天使投资人的这个关键特性。他们不占董事会席位，所以他们不需要你公司的大百分比。\n虽然这意味着你从他们那里得到的关注会相应减少，但在其他方面是好消息。创始人从未真正喜欢放弃风险投资家想要那么多股权。一次放弃那么多公司是太多了。大多数做A轮融资交易的创始人宁愿拿一半的钱换取一半的股票，然后在用前一半的钱增加其价值后，看看他们能为后一半的股票获得什么估值。但风险投资家从未提供过那个选择。\n现在创业公司有另一个选择。现在很容易筹集大约A轮融资一半大小的天使融资轮。我们资助的许多创业公司正在走这条路，我预测这对一般创业公司来说也是如此。\n一个典型的大型天使融资轮可能是在400万美元投前估值上限的可转换票据上融资60万美元。这意味着当票据转换为股票时（在后续轮中，或收购时），该轮的投资者将获得.6 / 4.6，或公司13%的股份。这比你通常在这么早进行的A轮融资中放弃的30%到40%的公司股份少得多。[5]\n但这些中等规模融资轮的优势不仅仅是它们导致的稀释较少。你也失去更少的控制权。在天使融资轮之后，创始人几乎总是仍然控制公司，而在A轮融资之后他们通常不控制。A轮融资后的传统董事会结构是两个创始人，两个风险投资家，和一个（ supposed）中立的第五人。加上A轮融资条款通常给投资者对各种重要决定的否决权，包括出售公司。在A轮融资后，创始人通常有很多实际控制权，只要事情进展顺利。但那与能够做你想做的事情不一样，像以前那样。\n天使融资轮的第三个相当重要的优势是它们融资压力较小。筹集传统的A轮融资过去需要周，如果不是月的话。当一个风险投资公司每年每个合伙人只能做2笔交易时，他们很小心选择他们做的。要获得传统的A轮融资，你必须经历一系列会议，最终在全体合伙人会议上，整个公司说是或否。这对创始人来说真正可怕的部分：不仅仅是A轮融资需要这么长时间，而且在这个漫长过程结束时，风险投资家可能仍然说不。在全体合伙人会议后被拒绝的机会平均约为25%。在一些公司超过50%。\n幸运的是创始人，风险投资家变得越来越快。现在硅谷的风险投资家更可能需要2周而不是2个月。但他们仍然不像天使投资人和超级天使那么快，最果断的有时在几小时内就决定了。\n天使融资轮不仅更快，而且你在进展过程中得到反馈。天使融资轮不像A轮融资那样是全有或全无的事情。它由多个投资者组成，认真程度各不相同，从明确承诺的正直人士到给你\u0026quot;回来给我填满这一轮\u0026quot;台词的混蛋。你通常从最承诺的投资者开始收集钱，逐步向外工作到那些犹豫不决的投资者，他们的兴趣随着融资轮的填满而增加。\n但在每个点你都知道你做得如何。如果投资者变冷，你可能不得不融资更少，但当天使融资轮的投资者变冷时，过程至少优雅地降级，而不是在你脸上爆炸，让你一无所有，就像在全体合伙人会议后被风险投资公司拒绝时发生的那样。而如果投资者看起来很热，你不仅可以更快完成融资轮，而且现在可转换票据成为常态，实际上提高价格以反映需求。\n估值 然而，风险投资家有一个武器可以用来对付超级天使，他们已经开始使用它。风险投资家也开始做天使规模的投资。\u0026ldquo;天使融资轮\u0026quot;这个术语并不意味着其中所有投资者都是天使投资人；它只是描述融资轮的结构。参与者越来越多地包括投资十万或二十万的风险投资家。当风险投资家投资天使融资轮时，他们可以做超级天使不喜欢的事情。风险投资家在天使融资轮中对估值相当不敏感——部分原因是因为他们通常如此，部分原因是因为他们不太关心天使融资轮的回报，他们仍然主要将其视为为以后A轮融资招募创业公司的一种方式。所以投资天使融资轮的风险投资家可以为投资于其中的天使投资人和超级天使抬高估值。[6]\n一些超级天使似乎关心估值。几个在演示日后拒绝了Y Combinator资助的创业公司，因为它们的估值太高。这对创业公司来说不是问题；根据定义，高估值意味着足够的投资者愿意接受它。但超级天使对估值吹毛求疵对我来说是个谜。他们不明白大回报来自少数几个大成功，因此你选择的创业公司比你为它们支付多少钱重要得多吗？\n在思考了一段时间并观察某些其他迹象后，我有一个理论解释为什么超级天使可能比他们看起来更聪明。如果超级天使希望投资于早期被收购的创业公司，他们想要低估值是有道理的。如果你希望击中下一个谷歌，你不应该关心估值是2000万。但如果你寻找将被以3000万收购的公司，你关心。如果你在20时投资，公司以30被收购，你只获得1.5倍。你不如买苹果。\n所以如果一些超级天使在寻找能够被快速收购的公司，那将解释为什么他们会关心估值。但为什么他们会寻找那些？因为取决于\u0026quot;快速\u0026quot;的含义，它实际上可能非常有利可图。一个被以3000万收购的公司对风险投资家来说是失败，但它对天使投资人来说可能是10倍回报，而且，是快速的10倍回报。投资回报率是投资中重要的——不是你获得的倍数，而是每年的倍数。如果超级天使在一年内获得10倍，那比风险投资家从花了6年上市的公司所能希望的回报率更高。要获得相同的回报率，风险投资家必须获得10^6的倍数——一百万倍。即使是谷歌也没有接近那个。\n所以我认为至少一些超级天使在寻找将被收购的公司。这是专注于获得正确估值而不是正确公司的唯一合理解释。如果是这样，他们将与风险投资家不同。他们在估值上会更严格，但如果你想早期出售，他们会更 accommodating。\n预后 谁会赢，超级天使还是风险投资家？我认为那个问题的答案是，每种都有一些。他们会彼此变得更像。超级天使将开始投资更大的金额，风险投资家将逐渐弄清楚如何更快做更多、更小的投资。十年后参与者将难以区分，可能每个群体都有幸存者。\n这对创始人意味着什么？它意味着的一件事是，创业公司目前获得的高估值可能不会永远持续。就估值被对价格不敏感的风险投资家推高而言，如果风险投资家变得更像超级天使并开始对估值更吝啬，它们将再次下降。幸运的是，如果这确实发生，它将需要几年。\n短期预测是投资者之间更多的竞争，这对你是好消息。超级天使将试图通过行动更快来破坏风险投资家，风险投资家将试图通过抬高估值来破坏超级天使。这对创始人来说将导致完美的组合：快速完成的高估值融资轮。\n但记住要获得那个组合，你的创业公司将必须对超级天使和风险投资家都有吸引力。如果你似乎没有上市的潜力，你将不能利用风险投资家来抬高天使融资轮的估值。\n在天使融资轮中有风险投资家有一个危险：所谓的信号风险。如果风险投资家只是为了以后投资更多而这样做，那如果他们不投资更多会怎样？那是对其他每个人他们认为你糟糕的信号。\n你应该多担心那个？信号风险的严重性取决于你进展得如何。如果下次你需要融资时，你有图表显示月收入或流量不断上升，你不必担心你现有投资者发送的任何信号。你的结果将为自己说话。[7]\n而如果下次你需要融资时你还没有具体结果，你可能需要更多地考虑如果你的投资者不投资更多，他们可能发送的信息。我还不知道你必须担心多少，因为风险投资家做天使投资的整个现象如此之新。但我的本能告诉我你不必太担心。信号风险闻起来像是那些创始人担心的不是真正问题的事情之一。通常，唯一能杀死好创业公司的是创业公司自己。创业公司伤害自己的次数比竞争对手伤害他们的次数多得多，例如。我怀疑信号风险也在这个类别中。\nY Combinator资助的创业公司一直在做的一件事来减轻在天使融资轮中接受风险投资家资金的风险是不从任何单个风险投资家那里接受太多。如果你有拒绝钱的奢侈，也许那会有帮助。\n幸运的是，越来越多的创业公司将会有。在几十年可以最好描述为内部的竞争之后，创业融资业务终于获得了一些真正的竞争。那应该持续至少几年，可能更长得多。除非有一些巨大的市场崩溃，接下来几年将是创业公司融资的好时机。而那令人兴奋，因为它意味着更多的创业公司将发生。\n注释 [1] 我也听到他们被称为\u0026quot;迷你风险投资\u0026quot;和\u0026quot;微型风险投资\u0026rdquo;。我不知道哪个名字会 sticking。\n有几个前辈。Ron Conway在1990年代开始有天使基金，在某些方面第一轮资本比风险投资基金更接近超级天使。\n[2] 它不会把他们的整体回报减少十倍，因为后来投资可能会（a）导致他们在失败的投资上损失较少，并且（b）不允许他们获得像现在那么大比例的创业公司。所以很难精确预测他们的回报会发生什么。\n[3] 投资者的品牌主要来自他们投资组合公司的成功。顶级风险投资家因此在品牌上比超级天使有很大的优势。如果他们用它来获得所有最好的新创业公司，他们可以使它自我 perpetuating。但我不认为他们能够。要获得所有最好的创业公司，你必须做的不仅仅是让他们想要你。你也必须想要他们；你必须在你看到他们时认出他们，那要难得多。超级天使将抢走风险投资家错过的明星。那将导致顶级风险投资家和超级天使之间的品牌差距逐渐侵蚀。\n",
    "description": "",
    "tags": ["超级天使","风险投资","融资","创业公司","投资","估值"],
    "categories": [],
    "content": "→ English Version\n新的融资格局 想要创业吗？让Y Combinator资助你。\n2010年10月\n在几十年几乎没有任何变化之后，创业融资业务现在进入了至少相比之下可以称为混乱的状态。在Y Combinator，我们已经看到了创业公司融资环境的戏剧性变化。幸运的是，其中一个变化是高得多的估值。\n我们一直看到的趋势可能不是Y Combinator特有的。我希望我能说它们是，但主要原因可能只是我们首先看到趋势——部分原因是我们资助的创业公司非常融入硅谷，并迅速利用任何新事物，部分原因是我们资助的如此之多，我们有足够的数据点来清楚地看到模式。\n我们现在看到的，每个人在未来几年可能都会看到。所以我要解释我们看到的，以及如果你试图融资，那对你意味着什么。\n超级天使 让我首先描述创业融资世界过去的样子。过去有两种明显不同类型的投资者：天使投资人和风险投资家。天使投资人是投资少量自己资金的个人富人，而风险投资家是投资大量他人资金的基金的员工。\n几十年来只有这两种类型的投资者，但现在第三种类型已经出现在它们之间：所谓的超级天使。[1] 而且他们的出现已经激怒了风险投资家，使他们自己也做了很多天使风格的投资。所以天使投资人和风险投资家之间曾经明显的界限已经变得无可救药地模糊了。\n天使投资人和风险投资家之间曾经有一块无人地带。天使投资人每人投资2万到5万美元，而风险投资家通常是一百万或更多。所以一轮天使融资意味着一系列天使投资组合起来大约20万美元，而一轮风险融资意味着A轮融资，其中单个风险投资基金（偶尔两个）投资1-5百万美元。\n天使投资人和风险投资家之间的无人地带对创业公司来说非常不方便，因为它恰好与许多想要融资的金额相吻合。大多数从演示日出来的创业公司想要融资大约40万美元。但从天使投资中拼凑这么多是痛苦的，而大多数风险投资家对这么小的投资不感兴趣。这就是超级天使出现的基本原因。他们是对市场的回应。\n一种新型投资者的出现对创业公司来说是重大新闻，因为过去只有两种，它们很少相互竞争。超级天使既与天使投资人也与风险投资家竞争。这将改变融资的规则。我还不知道新规则会是什么，但看起来大多数变化都会是好的。\n超级天使具有天使投资人的一些品质，也具有风险投资家的一些品质。他们通常像天使投资人一样是个人。事实上，许多当前的超级天使最初是经典类型的天使投资人。但像风险投资家一样，他们投资他人的资金。这使他们能够投资比天使投资人更大的金额：典型的超级天使投资目前大约是10万美元。他们像天使投资人一样快速做出投资决定。而且每个合伙人做的投资比风险投资家多得多——多达10倍。\n超级天使投资他人资金的事实使他们双重地令风险投资家感到恐慌。他们不仅为创业公司竞争；他们也为投资者竞争。超级天使真正的是一种新型快速行动的轻量级风险投资基金。而我们这些在技术世界的人知道，当出现可以用这样的术语描述的东西时通常会发生什么。通常它是替代品。\n会是这样吗？截至目前，很少有从超级天使那里拿钱的创业公司排除了拿风险投资的钱的可能性。他们只是推迟了。但这仍然对风险投资家是个问题。一些推迟风险融资的创业公司可能在天使融资上做得如此之好，以至于他们从不费心再融资。而那些确实进行风险融资轮的创业公司在融资时能够获得更高的估值。如果最好的创业公司在A轮融资时获得10倍更高的估值，那将把风险投资家从赢家那里获得的回报至少减少十倍。[2]\n所以我认为风险投资基金受到超级天使的严重威胁。但可能在一定程度上拯救他们的一件事是创业公司结果的不均匀分布：实际上所有回报都集中在少数几个大成功上。创业公司的期望价值是它成为谷歌的百分比机会。所以就赢取是绝对回报的问题而言，超级天使可能在个别创业公司的战斗中赢得几乎所有战斗，但输掉战争，如果他们只是错过了那些几个大赢家。而且这有可能会发生，因为顶级风险投资基金有更好的品牌，也能为他们的投资组合公司做更多事情。[3]\n因为超级天使每个合伙人做更多投资，他们每个投资有更少的合伙人。他们不能像你董事会上的风险投资家那样关注你。那额外的关注价值多少？这将从一个合伙人到另一个合伙人差异很大。在一般情况下还没有共识。所以现在这是创业公司个别决定的事情。\n直到现在，风险投资家关于他们增加多少价值的声明有点像政府的。也许他们让你感觉更好，但如果你需要只有风险投资家能供应规模的钱，你在这件事上没有选择。现在风险投资家有了竞争对手，这将为他们提供的帮助设定市场价格。有趣的是，还没有人知道它会是什么。\n想要变得真正大的创业公司需要只有顶级风险投资家才能提供的建议和关系吗？还是超级天使的钱就足够好？风险投资家会说你需要他们，超级天使会说你不需要。但真相是，还没有人知道，甚至风险投资家和超级天使自己也不知道。所有超级天使知道的是，他们的新模式看起来足够有前途，值得一试， …"
  },{
    "title": "新颖与异端",
    "url": "/paul_graham/essays_zh/nov/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n新颖与异端 2019年11月\n如果你发现了新事物，很有可能会被指责为某种形式的异端。\n要发现新事物，你必须研究那些好但不明显的想法；如果一个想法明显很好，其他人可能已经在研究它了。好想法不明显的一个常见方式是它隐藏在人们非常依恋的错误假设的阴影中。但是，你从研究这样的想法中发现的任何东西都会倾向于掩盖它的错误假设。因此，你会从那些执着于错误假设的人那里得到很多压力。伽利略和达尔文是这种现象的著名例子，但这可能总是抵抗新思想的因素。\n因此，组织或社会拥有扑灭异端的文化是特别危险的。当你压制异端时，你不仅仅是防止人们反驳你试图保护的错误假设。你还压制了任何间接暗示它是错误的想法。每个珍视的错误假设周围都有一个未探索想法的死区。假设越是荒谬，它创造的死区就越大。\n然而，这种现象也有积极的一面。如果你在寻找新想法，找到它们的一种方法就是寻找异端。当你从这种方式看问题时，错误假设周围令人沮丧的大死区变成了令人兴奋的新想法大矿。\n",
    "description": "",
    "tags": ["创新","异端","新想法","思考","发现","范式"],
    "categories": [],
    "content": "→ English Version\n新颖与异端 2019年11月\n如果你发现了新事物，很有可能会被指责为某种形式的异端。\n要发现新事物，你必须研究那些好但不明显的想法；如果一个想法明显很好，其他人可能已经在研究它了。好想法不明显的一个常见方式是它隐藏在人们非常依恋的错误假设的阴影中。但是，你从研究这样的想法中发现的任何东西都会倾向于掩盖它的错误假设。因此，你会从那些执着于错误假设的人那里得到很多压力。伽利略和达尔文是这种现象的著名例子，但这可能总是抵抗新思想的因素。\n因此，组织或社会拥有扑灭异端的文化是特别危险的。当你压制异端时，你不仅仅是防止人们反驳你试图保护的错误假设。你还压制了任何间接暗示它是错误的想法。每个珍视的错误假设周围都有一个未探索想法的死区。假设越是荒谬，它创造的死区就越大。\n然而，这种现象也有积极的一面。如果你在寻找新想法，找到它们的一种方法就是寻找异端。当你从这种方式看问题时，错误假设周围令人沮丧的大死区变成了令人兴奋的新想法大矿。\n"
  },{
    "title": "无限制捐赠",
    "url": "/paul_graham/essays_zh/donate/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n无限制捐赠 2021年3月\n非营利世界的秘密诅咒是限制性捐赠。如果你没有参与过非营利组织，你可能以前从未听说过这个短语。但如果你参与过，它可能让你感到不安。\n限制性捐赠意味着捐赠者限制资金用途的捐赠。这在大型捐赠中很常见，可能是默认的。然而，这通常是个坏主意。通常捐赠者希望资金使用的方式不是非营利组织会选择的方式。否则就没有必要限制捐赠。但谁更了解资金需要花在哪里，是非营利组织还是捐赠者？\n如果非营利组织不比其捐赠者更了解资金需要花在哪里，那么它是不称职的，你根本不应该向它捐赠。\n这意味着限制性捐赠本质上不是最优的。它要么是对糟糕的非营利组织的捐赠，要么是为错误事物的捐赠。\n这个原则有几个例外。一个是当非营利组织是伞形组织时。例如，向大学进行限制性捐赠是合理的，因为大学只是名义上的单一非营利组织。另一个例外是当捐赠者确实和非营利组织一样了解资金需要花在哪里时。例如，盖茨基金会有特定目标，经常向个别非营利组织进行限制性捐赠来实现这些目标。但除非你自己是领域专家或向伞形组织捐赠，如果你的捐赠是非限制性的，它会做更多好事。\n如果限制性捐赠比非限制性捐赠做的好事少，为什么捐赠者经常进行限制性捐赠？部分原因是做好事不是捐赠者的唯一动机。他们通常还有其他动机——留下印记，或产生良好的宣传[1]，或遵守法规或公司政策。许多捐赠者可能从未考虑过限制性和非限制性捐赠之间的区别。他们可能相信为特定目的捐赠资金就是捐赠的工作方式。公平地说，非营利组织并不非常努力地阻止这种错觉。他们负担不起。经营非营利组织的人几乎总是对金钱感到焦虑。他们负担不起与大捐赠者争论的权利。\n你不能期望在这种不对称的关系中有坦率。所以我会告诉你非营利组织希望他们能告诉你的话。如果你想向非营利组织捐赠，请进行非限制性捐赠。如果你信任他们使用你的资金，就信任他们决定如何使用。\n注释 [1] 不幸的是，限制性捐赠往往比非限制性捐赠产生更多宣传。\u0026ldquo;X捐赠资金在非洲建造学校\u0026quot;不仅比\u0026quot;X向Y非营利组织捐赠资金由Y自行决定使用\u0026quot;更有趣，而且更多地将注意力集中在X上。\n感谢Chase Adam、Ingrid Bassett、Trevor Blackwell和Edith Elliot阅读本文草稿。\n",
    "description": "",
    "tags": ["捐赠","慈善","非营利组织","公益","给予","限制性捐赠","非限制性捐赠"],
    "categories": [],
    "content": "→ English Version\n无限制捐赠 2021年3月\n非营利世界的秘密诅咒是限制性捐赠。如果你没有参与过非营利组织，你可能以前从未听说过这个短语。但如果你参与过，它可能让你感到不安。\n限制性捐赠意味着捐赠者限制资金用途的捐赠。这在大型捐赠中很常见，可能是默认的。然而，这通常是个坏主意。通常捐赠者希望资金使用的方式不是非营利组织会选择的方式。否则就没有必要限制捐赠。但谁更了解资金需要花在哪里，是非营利组织还是捐赠者？\n如果非营利组织不比其捐赠者更了解资金需要花在哪里，那么它是不称职的，你根本不应该向它捐赠。\n这意味着限制性捐赠本质上不是最优的。它要么是对糟糕的非营利组织的捐赠，要么是为错误事物的捐赠。\n这个原则有几个例外。一个是当非营利组织是伞形组织时。例如，向大学进行限制性捐赠是合理的，因为大学只是名义上的单一非营利组织。另一个例外是当捐赠者确实和非营利组织一样了解资金需要花在哪里时。例如，盖茨基金会有特定目标，经常向个别非营利组织进行限制性捐赠来实现这些目标。但除非你自己是领域专家或向伞形组织捐赠，如果你的捐赠是非限制性的，它会做更多好事。\n如果限制性捐赠比非限制性捐赠做的好事少，为什么捐赠者经常进行限制性捐赠？部分原因是做好事不是捐赠者的唯一动机。他们通常还有其他动机——留下印记，或产生良好的宣传[1]，或遵守法规或公司政策。许多捐赠者可能从未考虑过限制性和非限制性捐赠之间的区别。他们可能相信为特定目的捐赠资金就是捐赠的工作方式。公平地说，非营利组织并不非常努力地阻止这种错觉。他们负担不起。经营非营利组织的人几乎总是对金钱感到焦虑。他们负担不起与大捐赠者争论的权利。\n你不能期望在这种不对称的关系中有坦率。所以我会告诉你非营利组织希望他们能告诉你的话。如果你想向非营利组织捐赠，请进行非限制性捐赠。如果你信任他们使用你的资金，就信任他们决定如何使用。\n注释 [1] 不幸的是，限制性捐赠往往比非限制性捐赠产生更多宣传。\u0026ldquo;X捐赠资金在非洲建造学校\u0026quot;不仅比\u0026quot;X向Y非营利组织捐赠资金由Y自行决定使用\u0026quot;更有趣，而且更多地将注意力集中在X上。\n感谢Chase Adam、Ingrid Bassett、Trevor Blackwell和Edith Elliot阅读本文草稿。\n"
  },{
    "title": "早期",
    "url": "/paul_graham/essays_zh/early/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English version\n早期 2020年10月\n阻碍人们做出伟大工作的最大因素之一，就是害怕做出平庸的东西。这种恐惧并非没有道理。许多伟大的项目在早期阶段都会显得不太令人印象深刻，即使对它们的创造者来说也是如此。你必须经历这个阶段才能达到那之后更伟大的工作。但许多人没有做到。大多数人甚至没有达到做出让自己感到尴尬的成果的阶段，更不用说继续前进了。他们太害怕了，甚至不敢开始。\n想象一下，如果我们能够消除对做出平庸之物的恐惧。想象一下我们能够多做出多少成果。\n有没有希望消除这种恐惧？我认为有。我认为这里起作用的习惯并不深。\n创造新事物对我们这个物种来说本身就是一件新事物。这件事一直都在发生，但在过去的几个世纪里，它发生得太慢，以至于对个人来说几乎是看不见的。而且由于我们不需要处理新想法的习俗，我们也没有发展出任何习俗。\n我们对雄心勃勃项目的早期版本缺乏足够的经验，不知道如何应对它们。我们像对待更完成的工作或不太雄心勃勃的项目一样评判它们。我们没有意识到它们是特殊情况。\n或者至少，大多数人没有。我自信我们能做得更好的原因之一是，这已经开始发生了。在这方面已经有一些地方生活在未来之中。硅谷就是其中之一：一个不知名的人在研究一个听起来很奇怪的想法，不会像在家里那样自动被 dismissed。在硅谷，人们已经意识到这样做有多危险。\n处理新想法的正确方法是把它们视为对你想象力的挑战——不仅仅是降低标准，而是完全转换极性，从列举想法不可行的原因，转变为思考它可行的方式。这就是当我遇到有新想法的人时所做的。我已经相当擅长这个，但我有大量的练习。成为 Y Combinator 的合伙人意味着你几乎完全沉浸于由不知名人物提出的奇怪想法中。每六个月你都会面对成千上万的新想法，必须从中筛选，知道在一个结果呈幂律分布的世界里，如果你错过了这个干草堆中的针，将会非常明显。乐观变得紧迫。\n但我有希望的是，随着时间的推移，这种乐观态度可以变得足够普遍，成为一种社会习俗，而不仅仅是少数专家使用的技巧。毕竟，这是一个极其有利可图的技巧，而且那些 tends to spread quickly.\n当然，缺乏经验并不是人们对雄心勃勃项目的早期版本过于苛刻的唯一原因。他们这样做也是为了显得聪明。在一个新想法有风险的领域，比如初创公司，那些 dismiss 它们的人实际上更可能是对的。只是当他们的预测按结果加权时不是这样。\n但人们 dismiss 新想法还有另一个更阴险的原因。如果你尝试一些雄心勃勃的事情，你周围的许多人会有意识或无意识地希望你失败。他们担心如果你尝试一些雄心勃勃的事情并成功了，你会超过他们。在一些国家，这不仅仅是个人缺陷，而是民族文化的一部分。\n我不会声称硅谷的人们克服这些冲动是因为他们道德更高尚。[1] 许多人希望你成功的原因是他们希望与你一起上升。对投资者来说，这个激励特别明确。他们希望你成功，因为他们希望你在这个过程中让他们致富。但你遇到的许多其他人也可以从你的成功中以某种方式受益。至少，当你出名时，他们可以说他们很久以前就认识你了。\n但即使硅谷的鼓励态度植根于自身利益，但随着时间的推移，它实际上已经成长为一种善意。鼓励初创公司已经实践了很长时间，已经成为一种习俗。现在，这似乎就是对初创公司应该做的事情。\n也许硅谷太乐观了。也许它太容易被冒名顶替者愚弄。许多不太乐观的记者想要相信这一点。但他们引用的冒名顶替者名单 suspiciously 很短，而且充满了星号。[2] 如果你用收入作为标准，硅谷的乐观态度似乎比世界其他地方更准确。而且因为它有效，它会传播。\n当然，新想法不仅仅是新的初创公司想法。对做出平庸之物的恐惧在每个领域都阻碍着人们。但硅谷展示了习俗可以多快地发展以支持新想法。而这反过来又证明，dismiss 新想法并不是深深植根于人性中，以至于无法 unlearn。\n不幸的是，如果你想做新事情，你将面临一个比他人的怀疑更强大的力量：你自己的怀疑。你也会过于严厉地评判自己的早期工作。你如何避免这种情况？\n这是一个困难的问题，因为你不想完全消除对做出平庸之物的恐惧。正是这种恐惧引导你走向做好工作。你只是想暂时关闭它，就像止痛药暂时关闭疼痛一样。\n人们已经发现了几种有效的技术。哈代在《一个数学家的辩白》中提到了两个：好的工作不是由\u0026quot;谦逊\u0026quot;的人完成的。例如，在任何学科中，教授的首要职责之一是稍微夸大他的学科的重要性和他在其中的重要性。如果你高估了你正在从事的工作的重要性，那将弥补你对初始结果的错误严厉判断。如果你看着某个东西，它是一个价值100的目标的20%，然后得出结论说它是一个价值200的目标的10%，你对它的预期价值的估计是正确的，即使两个组成部分都是错误的。\n正如哈代所建议的，稍微过度自信也有帮助。我注意到在许多领域，最成功的人都稍微过度自信。从表面上看，这似乎不太可能。当然，对自己的能力有准确的估计是最优的。怎么可能成为一个错误的优势？因为这个错误补偿了其他来源的反向错误：稍微过度自信使你能够抵御他人的怀疑和你自己的怀疑。\n无知有类似的效果。如果你是一个足够宽松的完成作品的评判者，那么将早期工作错误地判断为完成工作是安全的。我怀疑培养这种无知是否可能，但经验上它是一个真正的优势，特别是对年轻人来说。\n度过雄心勃勃项目平庸阶段的另一种方法是与合适的人在一起——在社会逆风中创造一个漩涡。但仅仅收集总是鼓励你的人是不够的。你会学会 discount 那个。你需要能够真正区分丑小鸭和幼天鹅的同事。最能做到这一点的人是那些从事自己类似项目的人，这就是为什么大学部门和研究实验室工作得如此之好。你不需要机构来收集同事。他们自然会聚集，只要有机会。但通过寻找其他试图做新事情的人来加速这个过程是非常值得的。\n教师实际上是同事的一个特例。教师的工作既是看到早期工作的承诺，也是鼓励你继续。但不幸的是，擅长这个的教师相当稀少，所以如果你有机会向一个学习，抓住它。[3]\n对一些人来说，依靠纯粹的纪律可能有效：告诉自己你只需要按过初始的垃圾阶段，不要气馁。但像很多\u0026quot;告诉你自己\u0026quot;的建议一样，这比听起来更难。而且随着年龄增长，它会变得更难，因为你的标准会提高。老人确实有一个补偿优势：他们以前经历过这个。\n如果你少关注你现在的位置，多关注变化率，会有所帮助。如果你能看到它在改进，你就不会太担心做不好的工作。显然，它改进得越快，这越容易。所以当你开始新事物时，如果你能花很多时间在它上面是好的。这是年轻的另一个优势：你倾向于有更大的时间块。\n另一个常见的技巧是开始时认为新工作是不同类型、要求较低的类型。开始一幅画说它只是一个草图，或者一个新的软件说它只是一个快速的黑客行为。然后你用较低的标准评判你的初始结果。一旦项目滚动起来，你可以偷偷地把它转换成更多的东西。[4]\n如果你使用能让你快速工作并且不需要太多前期承诺的媒介，这会更容易。当你在笔记本上绘画时，比当你在雕刻石头时，更容易说服自己某物只是一个草图。而且你得到初始结果更快。[5][6]\n如果你把它视为一种学习方式而不仅仅是制作东西的方式，那么尝试一个有风险的项目会更容易。那么即使项目真的失败了，你仍然会从中获益。如果问题定义得足够尖锐，失败本身就是知识：如果你试图证明的定理结果证明是假的，或者你使用某种尺寸的结构构件，它在压力下失效了，你学到了一些东西，即使它不是你想学的东西。[7]\n一个对我来说特别有效的动机是好奇心。我喜欢尝试新事物，只是为了看看它们会变成什么样子。我们本着这种精神创立了 Y Combinator，这也是我在研究 Bel 时保持动力的主要因素之一。在长期使用各种方言的 Lisp 之后，我很好奇看到它的固有形状是什么：如果你完全遵循公理方法，你最终会得到什么。\n但为了不被看起来平庸的早期努力所气馁，你必须对自己玩心理游戏，这有点奇怪。你试图 trick 自己相信的东西实际上是事实。一个雄心勃勃项目的看起来平庸的早期版本确实比它看起来的更有价值。所以最终的解决方案可能是教自己认识到这一点。\n一种方法是研究做过伟大工作的人的历史。他们在早期在想什么？他们做的第一件事是什么？有时很难得到这个问题的准确答案，因为人们常常对自己的早期工作感到尴尬，并且很少努力发表它。（他们也错误地判断它。）但当你能够准确了解某人在通往某条伟大工作道路上迈出的第一步时，它们往往相当微弱。[8]\n也许如果你研究足够多的这样的案例，你可以教自己成为早期工作的更好评判者。那么你就能免疫于他人的怀疑和自己对做出平庸之物的恐惧。你会看到早期工作本身的本质。\n奇怪的是，过于严厉地评判早期工作的问题的解决方案是意识到我们对它的态度本身就是早期工作。把一切都放在同一标准是一个粗略的第1版。我们已经在进化更好的习俗，我们已经能看到回报会有多大的迹象。\n注释 [1] 这个假设可能过于保守。有一些证据表明，历史上湾区吸引的是不同类型的人，比如纽约市。\n[2] 他们最喜欢的一个是 Theranos。但 Theranos 股权表最显著的特征是硅谷公司的缺席。记者被 Theranos 愚弄了，但硅谷投资者没有。\n",
    "description": "",
    "tags": ["早期工作","创造力","判断力","怀疑态度","硅谷"],
    "categories": [],
    "content": "→ English version\n早期 2020年10月\n阻碍人们做出伟大工作的最大因素之一，就是害怕做出平庸的东西。这种恐惧并非没有道理。许多伟大的项目在早期阶段都会显得不太令人印象深刻，即使对它们的创造者来说也是如此。你必须经历这个阶段才能达到那之后更伟大的工作。但许多人没有做到。大多数人甚至没有达到做出让自己感到尴尬的成果的阶段，更不用说继续前进了。他们太害怕了，甚至不敢开始。\n想象一下，如果我们能够消除对做出平庸之物的恐惧。想象一下我们能够多做出多少成果。\n有没有希望消除这种恐惧？我认为有。我认为这里起作用的习惯并不深。\n创造新事物对我们这个物种来说本身就是一件新事物。这件事一直都在发生，但在过去的几个世纪里，它发生得太慢，以至于对个人来说几乎是看不见的。而且由于我们不需要处理新想法的习俗，我们也没有发展出任何习俗。\n我们对雄心勃勃项目的早期版本缺乏足够的经验，不知道如何应对它们。我们像对待更完成的工作或不太雄心勃勃的项目一样评判它们。我们没有意识到它们是特殊情况。\n或者至少，大多数人没有。我自信我们能做得更好的原因之一是，这已经开始发生了。在这方面已经有一些地方生活在未来之中。硅谷就是其中之一：一个不知名的人在研究一个听起来很奇怪的想法，不会像在家里那样自动被 dismissed。在硅谷，人们已经意识到这样做有多危险。\n处理新想法的正确方法是把它们视为对你想象力的挑战——不仅仅是降低标准，而是完全转换极性，从列举想法不可行的原因，转变为思考它可行的方式。这就是当我遇到有新想法的人时所做的。我已经相当擅长这个，但我有大量的练习。成为 Y Combinator 的合伙人意味着你几乎完全沉浸于由不知名人物提出的奇怪想法中。每六个月你都会面对成千上万的新想法，必须从中筛选，知道在一个结果呈幂律分布的世界里，如果你错过了这个干草堆中的针，将会非常明显。乐观变得紧迫。\n但我有希望的是，随着时间的推移，这种乐观态度可以变得足够普遍，成为一种社会习俗，而不仅仅是少数专家使用的技巧。毕竟，这是一个极其有利可图的技巧，而且那些 tends to spread quickly.\n当然，缺乏经验并不是人们对雄心勃勃项目的早期版本过于苛刻的唯一原因。他们这样做也是为了显得聪明。在一个新想法有风险的领域，比如初创公司，那些 dismiss 它们的人实际上更可能是对的。只是当他们的预测按结果加权时不是这样。\n但人们 dismiss 新想法还有另一个更阴险的原因。如果你尝试一些雄心勃勃的事情，你周围的许多人会有意识或无意识地希望你失败。他们担心如果你尝试一些雄心勃勃的事情并成功了，你会超过他们。在一些国家，这不仅仅是个人缺陷，而是民族文化的一部分。\n我不会声称硅谷的人们克服这些冲动是因为他们道德更高尚。[1] 许多人希望你成功的原因是他们希望与你一起上升。对投资者来说，这个激励特别明确。他们希望你成功，因为他们希望你在这个过程中让他们致富。但你遇到的许多其他人也可以从你的成功中以某种方式受益。至少，当你出名时，他们可以说他们很久以前就认识你了。\n但即使硅谷的鼓励态度植根于自身利益，但随着时间的推移，它实际上已经成长为一种善意。鼓励初创公司已经实践了很长时间，已经成为一种习俗。现在，这似乎就是对初创公司应该做的事情。\n也许硅谷太乐观了。也许它太容易被冒名顶替者愚弄。许多不太乐观的记者想要相信这一点。但他们引用的冒名顶替者名单 suspiciously 很短，而且充满了星号。[2] 如果你用收入作为标准，硅谷的乐观态度似乎比世界其他地方更准确。而且因为它有效，它会传播。\n当然，新想法不仅仅是新的初创公司想法。对做出平庸之物的恐惧在每个领域都阻碍着人们。但硅谷展示了习俗可以多快地发展以支持新想法。而这反过来又证明，dismiss 新想法并不是深深植根于人性中，以至于无法 unlearn。\n不幸的是，如果你想做新事情，你将面临一个比他人的怀疑更强大的力量：你自己的怀疑。你也会过于严厉地评判自己的早期工作。你如何避免这种情况？\n这是一个困难的问题，因为你不想完全消除对做出平庸之物的恐惧。正是这种恐惧引导你走向做好工作。你只是想暂时关闭它，就像止痛药暂时关闭疼痛一样。\n人们已经发现了几种有效的技术。哈代在《一个数学家的辩白》中提到了两个：好的工作不是由\u0026quot;谦逊\u0026quot;的人完成的。例如，在任何学科中，教授的首要职责之一是稍微夸大他的学科的重要性和他在其中的重要性。如果你高估了你正在从事的工作的重要性，那将弥补你对初始结果的错误严厉判断。如果你看着某个东西，它是一个价值100的目标的20%，然后得出结论说它是一个价值200的目标的10%，你对它的预期价值的估计是正确的，即使两个组成部分都是错误的。\n正如哈代所建议的，稍微过度自信也有帮助。我注意到在许 …"
  },{
    "title": "时髦问题",
    "url": "/paul_graham/essays_zh/fp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n时髦问题 2019年12月\n我在许多不同领域都看到了相同的模式：尽管很多人在这个领域努力工作，但只有一小部分可能性空间被探索过，因为他们都在做相似的事情。\n即使在决定做什么工作时，最聪明、最有想象力的人也出奇地保守。那些在其他方面做梦也不会想到追求时髦的人，却被吸引去解决时髦问题。\n如果你想尝试解决不时髦的问题，最好的去处之一是那些人们认为已经被完全探索过的领域：散文、Lisp、风险投资——你可能在这里注意到一个模式。如果你能找到一个进入一个很大但显然已经过时领域的新方法，你发现的任何东西的价值都会因其巨大的表面积而倍增。\n防止被吸引去做与其他人相同的事情的最佳保护可能是真正热爱你正在做的事情。然后，即使你犯了与其他人相同的错误，认为它太边缘而不重要，你也会继续做这件事。\n日文翻译\n阿拉伯文翻译\n法文翻译\n",
    "description": "",
    "tags": ["时髦","问题","创新","思考","工作"],
    "categories": [],
    "content": "→ English Version\n时髦问题 2019年12月\n我在许多不同领域都看到了相同的模式：尽管很多人在这个领域努力工作，但只有一小部分可能性空间被探索过，因为他们都在做相似的事情。\n即使在决定做什么工作时，最聪明、最有想象力的人也出奇地保守。那些在其他方面做梦也不会想到追求时髦的人，却被吸引去解决时髦问题。\n如果你想尝试解决不时髦的问题，最好的去处之一是那些人们认为已经被完全探索过的领域：散文、Lisp、风险投资——你可能在这里注意到一个模式。如果你能找到一个进入一个很大但显然已经过时领域的新方法，你发现的任何东西的价值都会因其巨大的表面积而倍增。\n防止被吸引去做与其他人相同的事情的最佳保护可能是真正热爱你正在做的事情。然后，即使你犯了与其他人相同的错误，认为它太边缘而不重要，你也会继续做这件事。\n日文翻译\n阿拉伯文翻译\n法文翻译\n"
  },{
    "title": "是魅力，笨蛋",
    "url": "/paul_graham/essays_zh/charisma/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n是魅力，笨蛋 2004年11月，2006年6月更正\n奥卡姆剃刀说我们应该在两个解释中选择较简单的一个。我首先提醒读者这个原则，因为我将要提出一个理论，这将冒犯自由派和保守派。但奥卡姆剃刀实际上意味着，如果你想不同意它，你有一个 hell of a coincidence 需要解释。\n理论：在美国总统选举中，更有魅力的候选人获胜。\n写政治的人，无论是左派还是右派，都有一种一致的偏见：他们认真对待政治。当一个候选人击败另一个时，他们寻找政治解释。国家正在向左转，或向右转。而这种转变当然可能是总统选举的结果，这使得很容易相信它是原因。\n但当我思考为什么我投票给克林顿而不是第一个乔治·布什时，不是因为我在向左转。克林顿似乎更有活力。他似乎更想要这份工作。布什看起来老而疲惫。我怀疑很多选民都是如此。\n克林顿不代表任何国家向左的转变。[1] 他只是比乔治·布什或（上帝保佑我们）鲍勃·多尔更有魅力。2000年我们几乎得到了一个受控实验来证明这一点：戈尔有克林顿的政策，但没有他的魅力，他相应地遭受了损失。[2] 2004年的故事相同。克里比布什更聪明、更有口才，但相当僵硬。克里输了。\n当我进一步回顾时，我一直发现相同的模式。权威人士说卡特击败福特是因为水门事件后国家不信任共和党。但碰巧卡特以其大咧咧的笑和朴实的方式而闻名，而福特则以无聊笨拙而闻名。四年后，权威人士说国家向右猛冲。但里根，前演员，也碰巧比卡特更有魅力（卡特的笑在四年有压力的总统任期后不那么愉快了）。1984年里根和蒙代尔之间的魅力差距就像克林顿和多尔多之间的差距，结果相似。第一个乔治·布什在1988年设法获胜，尽管他后来会被历史上最有魅力的总统之一击败，因为在1988年他的对手是臭名昭著缺乏魅力的迈克尔·杜卡基斯。\n这些是我个人记得的选举，但显然1964年和1972年也出现了相同的模式。最近的反例似乎是1968年，当时尼克松击败了更有魅力的休伯特·汉弗莱。但当你检查那次选举时，它倾向于支持魅力理论而不是反驳它。正如乔·麦金尼斯在他著名的书《1968年总统的推销》中叙述的那样，尼克松知道他比汉弗莱魅力少，因此 simply 拒绝在电视上与他辩论。他知道他不能负担得起让两个人并排出现。\n现在候选人可能无法拒绝辩论而逃脱。但在1968年，电视辩论的习惯仍在演变中。实际上，尼克松在1968年获胜是因为选民从未被允许看到真正的尼克松。他们看到的只是精心编排的竞选广告。\n奇怪的是，最近真正的反例可能是1960年。虽然这次选举通常被作为电视力量的例子，但肯尼迪显然如果没有伊利诺伊州和得克萨斯州政党机器的欺诈就不会获胜。但电视在1960年还很年轻；只有87%的家庭拥有电视。[3] 毫无疑问，电视帮助了肯尼迪，所以历史学家正确地将这次选举视为分水岭。电视需要一种新型的候选人。不再有卡尔文·柯立芝了。\n魅力理论也可能解释为什么民主党倾向于输掉总统选举。民主党意识形态的核心似乎是对政府的信念。也许这 tends to attract people who are earnest, but dull. 杜卡基斯、戈尔和克里在这方面如此相似，他们可能是兄弟。对民主党来说幸运的是，他们的筛选器偶尔会让克林顿通过，即使一些丑闻随之而来。[4]\n人们愿意相信选举是在问题上赢得或失败的，即使是像威利·霍顿这样的假问题。然而，如果它们是，我们有一个值得注意的巧合需要解释。自电视普及以来的每一次总统选举，明显更有魅力的候选人都获胜。令人惊讶的是，不是吗，选民对问题的意见连续11次与魅力一致？\n在事后分析中提出向左或向右转变的政治评论家就像那些日复一日地被迫写关于股市随机波动故事的金融记者。一天结束，市场收盘上涨或下跌，记者分别寻找好坏消息，然后写市场因英特尔收益而上涨，或因中东不稳定恐惧而下跌。假设我们能以某种方式向这些记者提供关于市场收盘的错误信息，但给他们所有其他新闻 intact。有人相信他们会注意到异常，而不是简单地写股票因当天任何好（或坏）消息而上涨（或下跌）吗？他们会说，嘿，等一下，在中东所有这种动荡的情况下股票怎么能上涨？\n我不是说问题对选民不重要。当然它们重要。但主要政党太了解哪些问题对多少选民有多重要，并如此精确地调整他们的信息作为回应，以至于他们倾向于在问题上平分秋色，让选举由他们无法控制的一个因素决定：魅力。\n如果民主党在2004年选举中有一个像克林顿一样有魅力的候选人，他就会获胜。我们会读到选举是对伊拉克战争的全民公决，而不是民主党与美国中部的福音派基督徒脱节。\n在1992年选举期间，克林顿竞选班子在办公室有一个大标语说\u0026quot;是经济，傻瓜\u0026quot;。也许这比他们想象的还要简单。\n后记 关于魅力理论的意见似乎有分歧。有些人说不可能，其他人说很明显。这似乎是个好迹象。也许它处于中间的甜蜜点。\n至于它不可能，我回答：这里是数据；这里是理论；理论100%解释数据。至少对科学家来说，这意味着它值得注意，无论它看起来多么难以置信。\n你不能相信选民如此肤浅，以至于他们只选择最有魅力的家伙？我的理论不要求这样。我不是说魅力是唯一的因素，只是说它是两个党派努力相互抵消后留下的唯一因素。\n至于理论是显而易见的，据我所知，以前没有人提出过。选举预测者能够用更复杂的模型达到相同结果时感到自豪。\n最后，对那些说理论可能是真的，但相当令人沮丧的人：它不像看起来那么糟糕。这种现象就像定价异常；一旦人们意识到它在那里，它就会消失。一旦两个党派都意识到提名没有魅力的候选人是浪费时间，他们将倾向于只提名最有魅力的。如果候选人魅力相当，魅力将相互抵消，选举将在问题上决定，正如政治评论家喜欢认为现在的情况。\n注释 [1] 正如克林顿自己在总统任期的第一个行为中试图向左转军方时惊奇地发现的那样。经过一场激烈的斗争，他得以挽救面子地逃脱。\n[2] 确实，戈尔赢得了普选票。但政治家知道选举人票决定选举，所以他们为此竞选。如果布什一直在为普选票竞选，他大概会得到更多。（感谢 judgmentalist 提出这一点。）\n[3] 来源：尼尔森媒体研究。在剩下的13%中，11%没有电视是因为他们负担不起。我认为缺失的11%可能也是最容易受魅力影响的11%。\n[4] 这一理论的一个含义是党派不应该太快拒绝有秘密的候选人。有魅力的候选人往往比无可挑剔的呆子有更多秘密，但实际上这似乎不会输掉选举。例如，现任布什可能在二十多岁时比任何前任总统都做过更多的毒品，但却能够以福音派基督徒为基础当选。你只需要说你已经改过自新，并在细节上设置障碍。\n感谢Trevor Blackwell、Maria Daniels、Jessica Livingston、Jackie McDonough和Robert Morris阅读本文的草稿，以及Eric Raymond指出我在1968年上错了。\n相关 什么是魅力 政治和表演艺术 日语翻译\n",
    "description": "",
    "tags": ["魅力","政治","选举","投票","总统","分析"],
    "categories": [],
    "content": "→ English Version\n是魅力，笨蛋 2004年11月，2006年6月更正\n奥卡姆剃刀说我们应该在两个解释中选择较简单的一个。我首先提醒读者这个原则，因为我将要提出一个理论，这将冒犯自由派和保守派。但奥卡姆剃刀实际上意味着，如果你想不同意它，你有一个 hell of a coincidence 需要解释。\n理论：在美国总统选举中，更有魅力的候选人获胜。\n写政治的人，无论是左派还是右派，都有一种一致的偏见：他们认真对待政治。当一个候选人击败另一个时，他们寻找政治解释。国家正在向左转，或向右转。而这种转变当然可能是总统选举的结果，这使得很容易相信它是原因。\n但当我思考为什么我投票给克林顿而不是第一个乔治·布什时，不是因为我在向左转。克林顿似乎更有活力。他似乎更想要这份工作。布什看起来老而疲惫。我怀疑很多选民都是如此。\n克林顿不代表任何国家向左的转变。[1] 他只是比乔治·布什或（上帝保佑我们）鲍勃·多尔更有魅力。2000年我们几乎得到了一个受控实验来证明这一点：戈尔有克林顿的政策，但没有他的魅力，他相应地遭受了损失。[2] 2004年的故事相同。克里比布什更聪明、更有口才，但相当僵硬。克里输了。\n当我进一步回顾时，我一直发现相同的模式。权威人士说卡特击败福特是因为水门事件后国家不信任共和党。但碰巧卡特以其大咧咧的笑和朴实的方式而闻名，而福特则以无聊笨拙而闻名。四年后，权威人士说国家向右猛冲。但里根，前演员，也碰巧比卡特更有魅力（卡特的笑在四年有压力的总统任期后不那么愉快了）。1984年里根和蒙代尔之间的魅力差距就像克林顿和多尔多之间的差距，结果相似。第一个乔治·布什在1988年设法获胜，尽管他后来会被历史上最有魅力的总统之一击败，因为在1988年他的对手是臭名昭著缺乏魅力的迈克尔·杜卡基斯。\n这些是我个人记得的选举，但显然1964年和1972年也出现了相同的模式。最近的反例似乎是1968年，当时尼克松击败了更有魅力的休伯特·汉弗莱。但当你检查那次选举时，它倾向于支持魅力理论而不是反驳它。正如乔·麦金尼斯在他著名的书《1968年总统的推销》中叙述的那样，尼克松知道他比汉弗莱魅力少，因此 simply 拒绝在电视上与他辩论。他知道他不能负担得起让两个人并排出现。\n现在候选人可能无法拒绝辩论而逃脱。但在1968年，电视辩论的习惯仍在演变中。实际上，尼克松在1968年获胜是因为选民从未被允许看到真正的尼克松。他们看到的只是精心编排的竞选广告。\n奇怪的是，最近真正的反例可能是1960年。虽然这次选举通常被作为电视力量的例子，但肯尼迪显然如果没有伊利诺伊州和得克萨斯州政党机器的欺诈就不会获胜。但电视在1960年还很年轻；只有87%的家庭拥有电视。[3] 毫无疑问，电视帮助了肯尼迪，所以历史学家正确地将这次选举视为分水岭。电视需要一种新型的候选人。不再有卡尔文·柯立芝了。\n魅力理论也可能解释为什么民主党倾向于输掉总统选举。民主党意识形态的核心似乎是对政府的信念。也许这 tends to attract people who are earnest, but dull. 杜卡基斯、戈尔和克里在这方面如此相似，他们可能是兄弟。对民主党来说幸运的是，他们的筛选器偶尔会让克林顿通过，即使一些丑闻随之而来。[4]\n人们愿意相信选举是在问题上赢得或失败的，即使是像威利·霍顿这样的假问题。然而，如果它们是，我们有一个值得注意的巧合需要解释。自电视普及以来的每一次总统选举，明显更有魅力的候选人都获胜。令人惊讶的是，不是吗，选民对问题的意见连续11次与魅力一致？\n在事后分析中提出向左或向右转变的政治评论家就像那些日复一日地被迫写关于股市随机波动故事的金融记者。一天结束，市场收盘上涨或下跌，记者分别寻找好坏消息，然后写市场因英特尔收益而上涨，或因中东不稳定恐惧而下跌。假设我们能以某种方式向这些记者提供关于市场收盘的错误信息，但给他们所有其他新闻 intact。有人相信他们会注意到异常，而不是简单地写股票因当天任何好（或坏）消息而上涨（或下跌）吗？他们会说，嘿，等一下，在中东所有这种动荡的情况下股票怎么能上涨？\n我不是说问题对选民不重要。当然它们重要。但主要政党太了解哪些问题对多少选民有多重要，并如此精确地调整他们的信息作为回应，以至于他们倾向于在问题上平分秋色，让选举由他们无法控制的一个因素决定：魅力。\n如果民主党在2004年选举中有一个像克林顿一样有魅力的候选人，他就会获胜。我们会读到选举是对伊拉克战争的全民公决，而不是民主党与美国中部的福音派基督徒脱节。\n在1992年选举期间，克林顿竞选班子在办公室有一个大标语说\u0026quot;是经济，傻瓜\u0026quot;。也许这比他们想象的还要简单。\n后记 关于魅力理论的意见似乎有分歧。有些人说不可能，其他人说很明显。这 …"
  },{
    "title": "普遍而惊人的",
    "url": "/paul_graham/essays_zh/sun/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n普遍而惊人的 2017年9月\n最有价值的见解既是普遍的又是惊人的。例如F = ma。但普遍和惊人是一个难以实现的组合。那个领域往往被彻底挖掘，正是因为那些见解如此有价值。\n通常，人们能做到的最好是没有另一个：要么惊人而不普遍（例如八卦），要么普遍而不惊人（例如陈词滥调）。\n事情变得有趣的地方是中等价值的见解。你通过添加缺失的品质的少量来获得这些。更常见的情况是添加少量普遍性：一个不仅仅是八卦的八卦，因为它教会了一些关于世界的有趣事情。但另一个不太常见的方法是专注于最普遍的想法，看看你是否能找到新的东西来说。因为这些开始时非常普遍，你只需要少量的新颖性变化就能产生有用的见解。\n大多数时候你只能获得少量的新颖性变化。这意味着如果你走这条路，你的想法会看起来很像已经存在的想法。有时你会发现你只是重新发现了一个已经存在的想法。但不要气馁。记住，当你确实设法想到一些甚至一点点新的东西时，会有巨大的乘法器作用。\n推论：你谈论的想法越普遍，你越不应该担心重复自己。如果你写得足够多，这是不可避免的。你的大脑年复一年几乎相同，打击它的刺激物也是如此。当我发现我说的与我之前所说的接近时，我感觉有点不好，好像我在抄袭自己。但理性地说不应该。你不会以完全相同的方式第二次说同样的事情，那种变化增加了你获得微小但关键的新颖性变化的机会。\n当然，想法催生想法。（这听起来很熟悉。）一个有少量新颖性的想法可能导致一个有更多新颖性的想法。但只有你继续下去。所以不要让那些说你的发现没有多少新东西的人气馁，这一点尤为重要。\u0026ldquo;没有多少新东西\u0026quot;当你在谈论最普遍的想法时是一个真正的成就。\n说太阳底下没有新东西不是真的。有些领域几乎没有新东西。但当你乘以太阳下的面积时，没有和几乎没有之间有很大的区别。\n感谢Sam Altman、Patrick Collison和Jessica Livingston阅读本文的草稿。\n日语翻译\n",
    "description": "",
    "tags": ["想法","见解","创造力","新颖性","写作","思考"],
    "categories": [],
    "content": "→ English Version\n普遍而惊人的 2017年9月\n最有价值的见解既是普遍的又是惊人的。例如F = ma。但普遍和惊人是一个难以实现的组合。那个领域往往被彻底挖掘，正是因为那些见解如此有价值。\n通常，人们能做到的最好是没有另一个：要么惊人而不普遍（例如八卦），要么普遍而不惊人（例如陈词滥调）。\n事情变得有趣的地方是中等价值的见解。你通过添加缺失的品质的少量来获得这些。更常见的情况是添加少量普遍性：一个不仅仅是八卦的八卦，因为它教会了一些关于世界的有趣事情。但另一个不太常见的方法是专注于最普遍的想法，看看你是否能找到新的东西来说。因为这些开始时非常普遍，你只需要少量的新颖性变化就能产生有用的见解。\n大多数时候你只能获得少量的新颖性变化。这意味着如果你走这条路，你的想法会看起来很像已经存在的想法。有时你会发现你只是重新发现了一个已经存在的想法。但不要气馁。记住，当你确实设法想到一些甚至一点点新的东西时，会有巨大的乘法器作用。\n推论：你谈论的想法越普遍，你越不应该担心重复自己。如果你写得足够多，这是不可避免的。你的大脑年复一年几乎相同，打击它的刺激物也是如此。当我发现我说的与我之前所说的接近时，我感觉有点不好，好像我在抄袭自己。但理性地说不应该。你不会以完全相同的方式第二次说同样的事情，那种变化增加了你获得微小但关键的新颖性变化的机会。\n当然，想法催生想法。（这听起来很熟悉。）一个有少量新颖性的想法可能导致一个有更多新颖性的想法。但只有你继续下去。所以不要让那些说你的发现没有多少新东西的人气馁，这一点尤为重要。\u0026ldquo;没有多少新东西\u0026quot;当你在谈论最普遍的想法时是一个真正的成就。\n说太阳底下没有新东西不是真的。有些领域几乎没有新东西。但当你乘以太阳下的面积时，没有和几乎没有之间有很大的区别。\n感谢Sam Altman、Patrick Collison和Jessica Livingston阅读本文的草稿。\n日语翻译\n"
  },{
    "title": "更好的贝叶斯过滤",
    "url": "/paul_graham/essays_zh/better/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n更好的贝叶斯过滤 2003年1月\n（本文是在2003年垃圾邮件会议上的演讲。它描述了我在改进《垃圾邮件计划》中描述的算法性能方面所做的工作，以及我未来的计划。）\n我在这里要介绍的第一个发现是研究论文的懒惰评估算法。随便写你想写的内容，不要引用任何以前的工作，愤怒的读者会发送给你所有你应该引用的论文的参考文献。我在《垃圾邮件计划》[1]登上Slashdot后发现了这个算法。\n垃圾邮件过滤是文本分类的一个子集，这是一个已经成熟的领域，但是关于贝叶斯垃圾邮件过滤本身的第一篇论文似乎是在1998年同一会议上发表的两篇，一篇是Pantel和Lin的[2]，另一篇是微软研究院的一个小组[3]。\n当我听说这项工作时，我有点惊讶。如果人们在四年前就已经开始研究贝叶斯过滤，为什么不是每个人都在使用它呢？当我阅读这些论文时，我找到了原因。Pantel和Lin的过滤器是两个中更有效的，但它只捕获了92%的垃圾邮件，有1.16%的误报率。\n当我尝试编写贝叶斯垃圾邮件过滤器时，它捕获了99.5%的垃圾邮件，误报率低于0.03%[4]。当两个人尝试相同的实验得到截然不同的结果时，总是令人担忧。在这里尤其令人担忧，因为这两组数字可能会得出相反的结论。不同的用户有不同的要求，但我认为对于许多人来说，92%的过滤率和1.16%的误报率意味着过滤不是一个可接受的解决方案，而99.5%的过滤率和低于0.03%的误报率意味着它是可接受的。\n那么为什么我们会得到如此不同的数字呢？我没有尝试重现Pantel和Lin的结果，但是通过阅读论文，我看到了五个可能解释这种差异的原因。\n一个是他们用很少的数据训练他们的过滤器：160封垃圾邮件和466封非垃圾邮件。过滤器的性能在这么小的数据集上应该还在提升。所以他们的数字可能甚至不能准确衡量他们算法的性能，更不用说一般的贝叶斯垃圾邮件过滤了。\n但我认为最重要的区别可能是他们忽略了邮件头。对于任何从事垃圾邮件过滤工作的人来说，这似乎是一个错误的决定。然而，在我尝试编写的第一个过滤器中，我也忽略了邮件头。为什么？因为我想让问题保持整洁。那时我对邮件头了解不多，它们在我看来充满了随机的东西。这里有一个教训给过滤器编写者：不要忽略数据。你会觉得这个教训太明显了，不需要提及，但我已经不得不学习了好几次。\n第三，Pantel和Lin对词干进行了提取，意味着他们将例如\u0026quot;mailing\u0026quot;和\u0026quot;mailed\u0026quot;都简化为根词\u0026quot;mail\u0026quot;。他们可能觉得他们被迫这样做是因为他们的语料库很小，但如果是这样，这是一种过早的优化。\n第四，他们计算概率的方式不同。他们使用了所有的标记，而我只使用15个最显著的。如果你使用所有的标记，你往往会错过较长的垃圾邮件，就是那种有人告诉你他们的生活故事直到他们从某个多层次营销计划中致富的类型。而且这样的算法很容易被垃圾邮件发送者欺骗：只需添加一大块随机文本来平衡垃圾邮件术语。\n最后，他们没有针对误报进行偏置。我认为任何垃圾邮件过滤算法都应该有一个方便的旋钮，你可以转动它来降低误报率，代价是降低过滤率。我通过将非垃圾邮件语料库中标记的出现次数加倍来实现这一点。我认为将垃圾邮件过滤视为一个直接的文本分类问题是个坏主意。你可以使用文本分类技术，但解决方案可以也应该反映文本是邮件这一事实，特别是垃圾邮件。邮件不仅仅是文本；它有结构。垃圾邮件过滤不仅仅是分类，因为误报比漏报要糟糕得多，你应该将它们视为不同类型的错误。而且错误的来源不仅仅是随机变化，而是一个活跃的人类垃圾邮件发送者积极工作以击败你的过滤器。\n标记 在Slashdot文章之后我听说的另一个项目是Bill Yerazunis的CRM114[5]。这证明了我刚才提到的设计原则的反例。它是一个直接的文本分类器，但它是如此惊人的有效，以至于它甚至不知道自己在做什么的情况下几乎完美地过滤垃圾邮件。\n一旦我理解了CRM114的工作原理，似乎我最终将不得不从基于单个词的过滤转向这样的方法。但是首先，我想，我会看看我用单个词能走多远。答案是，惊人的远。\n我主要在研究更智能的标记化。在当前的垃圾邮件上，我已经能够达到接近CRM114的过滤率。这些技术与Bill的技术大多是正交的；最优的解决方案可能包含两者。\n《垃圾邮件计划》使用了非常简单的标记定义。字母、数字、破折号、撇号和美元符号是组成字符，其他都是标记分隔符。我也忽略了大小写。\n现在我有一个更复杂的标记定义：保留大小写。感叹号是组成字符。句号和逗号如果出现在两个数字之间则是组成字符。这让我能够完整地获得IP地址和价格。像$20-25这样的价格范围产生两个标记，$20和$25。出现在To、From、Subject和Return-Path行中，或者url中的标记会相应地被标记。例如，Subject行中的\u0026quot;foo\u0026quot;变成\u0026quot;Subject*foo\u0026quot;。（星号可以是任何你不允许作为组成字符的字符。）这样的措施增加了过滤器的词汇量，使其更有区分力。例如，在当前的过滤器中，Subject行中的\u0026quot;free\u0026quot;有98%的垃圾邮件概率，而正文中的相同标记只有65%的垃圾邮件概率。\n以下是一些当前的概率[6]：\nSubjectFREE 0.9999 free!! 0.9999 Tofree 0.9998 Subjectfree 0.9782 free! 0.9199 Free 0.9198 Urlfree 0.9091 FREE 0.8747 From*free 0.7636 free 0.6546\n在《垃圾邮件计划》过滤器中，所有这些标记都会有相同的概率，0.7602。那个过滤器识别了大约23,000个标记。当前的一个识别了大约187,000个。\n拥有更大的标记宇宙的缺点是有更多未命中的机会。将你的语料库分散到更多的标记上与使其变小的效果相同。例如，如果你将感叹号视为组成字符，那么你可能最终没有带有七个感叹号的free的垃圾邮件概率，即使你知道只有两个感叹号的free有99.99%的概率。\n对此的一个解决方案是我称之为退化的方法。如果你找不到标记的精确匹配，就将其视为不太具体的版本。我认为终端感叹号、大写字母以及出现在五个标记上下文中的任何一个使标记更具体。例如，如果我找不到\u0026quot;Subjectfree!\u0026ldquo;的概率，我会查找\u0026quot;Subjectfree\u0026rdquo;、\u0026ldquo;free!\u0026ldquo;和\u0026quot;free\u0026quot;的概率，并取离0.5最远的那个。\n以下是过滤器在Subject行中看到\u0026quot;FREE!!!\u0026ldquo;且没有其概率时考虑的替代方案[7]：\nSubjectFree!!! Subjectfree!!! SubjectFREE! SubjectFree! Subjectfree! SubjectFREE SubjectFree Subjectfree FREE!!! Free!!! free!!! FREE! Free! free! FREE Free free\n如果你这样做，一定要考虑首字母大写以及全大写和全小写的版本。垃圾邮件倾向于有更多的祈使语气句子，而在这些句子中，第一个词是动词。所以首字母大写的动词比全小写时有更高的垃圾邮件概率。在我的过滤器中，\u0026ldquo;Act\u0026quot;的垃圾邮件概率是98%，而\u0026quot;act\u0026quot;只有62%。\n如果你增加过滤器的词汇量，你可能会根据你旧的\u0026quot;相同\u0026quot;定义多次计算相同的词。从逻辑上讲，它们不再是相同的标记了。但如果这仍然困扰你，让我从经验补充，你似乎多次计算的词往往正是你想要的。\n更大词汇量的另一个影响是，当你查看传入的邮件时，你会发现更多有趣的标记，即那些概率远离0.5的标记。我使用15个最有趣的来决定邮件是否为垃圾邮件。但是当你使用这样的固定数字时，你可能会遇到问题。如果你发现很多最大有趣的标记，结果可能取决于决定同等有趣标记排序的随机因素。处理这个问题的一种方法是将一些视为比其他更有趣。\n例如，标记\u0026quot;dalco\u0026quot;在我的垃圾邮件语料库中出现3次，在我的合法邮件语料库中从未出现。标记\u0026quot;Url*optmails\u0026rdquo;（意思是url中的\u0026quot;optmails\u0026rdquo;）出现1223次。然而，按照我过去计算标记概率的方式，两者都会有相同的垃圾邮件概率，即0.99的阈值。\n这感觉不对。有理论论据支持给这两个标记显著不同的概率（Pantel和Lin这样做），但我还没有尝试过。但至少似乎如果我们发现超过15个标记只出现在一个语料库或另一个中，我们应该优先考虑出现次数多的。所以现在有两个阈值。对于只出现在垃圾邮件语料库中的标记，如果它们出现超过10次，概率是0.9999，否则是0.9998。在规模范围的另一端，对于只在合法邮件语料库中找到的标记也是如此。\n我以后可能会大幅缩放标记概率，但这少量的缩放至少确保标记以正确的方式排序。\n",
    "description": "",
    "tags": ["垃圾邮件","过滤","贝叶斯","算法","邮件","技术"],
    "categories": [],
    "content": "→ English Version\n更好的贝叶斯过滤 2003年1月\n（本文是在2003年垃圾邮件会议上的演讲。它描述了我在改进《垃圾邮件计划》中描述的算法性能方面所做的工作，以及我未来的计划。）\n我在这里要介绍的第一个发现是研究论文的懒惰评估算法。随便写你想写的内容，不要引用任何以前的工作，愤怒的读者会发送给你所有你应该引用的论文的参考文献。我在《垃圾邮件计划》[1]登上Slashdot后发现了这个算法。\n垃圾邮件过滤是文本分类的一个子集，这是一个已经成熟的领域，但是关于贝叶斯垃圾邮件过滤本身的第一篇论文似乎是在1998年同一会议上发表的两篇，一篇是Pantel和Lin的[2]，另一篇是微软研究院的一个小组[3]。\n当我听说这项工作时，我有点惊讶。如果人们在四年前就已经开始研究贝叶斯过滤，为什么不是每个人都在使用它呢？当我阅读这些论文时，我找到了原因。Pantel和Lin的过滤器是两个中更有效的，但它只捕获了92%的垃圾邮件，有1.16%的误报率。\n当我尝试编写贝叶斯垃圾邮件过滤器时，它捕获了99.5%的垃圾邮件，误报率低于0.03%[4]。当两个人尝试相同的实验得到截然不同的结果时，总是令人担忧。在这里尤其令人担忧，因为这两组数字可能会得出相反的结论。不同的用户有不同的要求，但我认为对于许多人来说，92%的过滤率和1.16%的误报率意味着过滤不是一个可接受的解决方案，而99.5%的过滤率和低于0.03%的误报率意味着它是可接受的。\n那么为什么我们会得到如此不同的数字呢？我没有尝试重现Pantel和Lin的结果，但是通过阅读论文，我看到了五个可能解释这种差异的原因。\n一个是他们用很少的数据训练他们的过滤器：160封垃圾邮件和466封非垃圾邮件。过滤器的性能在这么小的数据集上应该还在提升。所以他们的数字可能甚至不能准确衡量他们算法的性能，更不用说一般的贝叶斯垃圾邮件过滤了。\n但我认为最重要的区别可能是他们忽略了邮件头。对于任何从事垃圾邮件过滤工作的人来说，这似乎是一个错误的决定。然而，在我尝试编写的第一个过滤器中，我也忽略了邮件头。为什么？因为我想让问题保持整洁。那时我对邮件头了解不多，它们在我看来充满了随机的东西。这里有一个教训给过滤器编写者：不要忽略数据。你会觉得这个教训太明显了，不需要提及，但我已经不得不学习了好几次。\n第三，Pantel和Lin对词干进行了提取，意味着他们将例如\u0026quot;mailing\u0026quot;和\u0026quot;mailed\u0026quot;都简化为根词\u0026quot;mail\u0026quot;。他们可能觉得他们被迫这样做是因为他们的语料库很小，但如果是这样，这是一种过早的优化。\n第四，他们计算概率的方式不同。他们使用了所有的标记，而我只使用15个最显著的。如果你使用所有的标记，你往往会错过较长的垃圾邮件，就是那种有人告诉你他们的生活故事直到他们从某个多层次营销计划中致富的类型。而且这样的算法很容易被垃圾邮件发送者欺骗：只需添加一大块随机文本来平衡垃圾邮件术语。\n最后，他们没有针对误报进行偏置。我认为任何垃圾邮件过滤算法都应该有一个方便的旋钮，你可以转动它来降低误报率，代价是降低过滤率。我通过将非垃圾邮件语料库中标记的出现次数加倍来实现这一点。我认为将垃圾邮件过滤视为一个直接的文本分类问题是个坏主意。你可以使用文本分类技术，但解决方案可以也应该反映文本是邮件这一事实，特别是垃圾邮件。邮件不仅仅是文本；它有结构。垃圾邮件过滤不仅仅是分类，因为误报比漏报要糟糕得多，你应该将它们视为不同类型的错误。而且错误的来源不仅仅是随机变化，而是一个活跃的人类垃圾邮件发送者积极工作以击败你的过滤器。\n标记 在Slashdot文章之后我听说的另一个项目是Bill Yerazunis的CRM114[5]。这证明了我刚才提到的设计原则的反例。它是一个直接的文本分类器，但它是如此惊人的有效，以至于它甚至不知道自己在做什么的情况下几乎完美地过滤垃圾邮件。\n一旦我理解了CRM114的工作原理，似乎我最终将不得不从基于单个词的过滤转向这样的方法。但是首先，我想，我会看看我用单个词能走多远。答案是，惊人的远。\n我主要在研究更智能的标记化。在当前的垃圾邮件上，我已经能够达到接近CRM114的过滤率。这些技术与Bill的技术大多是正交的；最优的解决方案可能包含两者。\n《垃圾邮件计划》使用了非常简单的标记定义。字母、数字、破折号、撇号和美元符号是组成字符，其他都是标记分隔符。我也忽略了大小写。\n现在我有一个更复杂的标记定义：保留大小写。感叹号是组成字符。句号和逗号如果出现在两个数字之间则是组成字符。这让我能够完整地获得IP地址和价格。像$20-25这样的价格范围产生两个标记，$20和$25。出现在To、From、Subject和Return-Path行中，或 …"
  },{
    "title": "更改你的名字",
    "url": "/paul_graham/essays_zh/name/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n更改你的名字 2015年8月\n如果你的美国创业公司叫 X，但你没有 x.com，你可能应该改个名字。\n原因不仅仅是人们找不到你。对于有移动应用的公司来说，拥有正确的域名名称对获取用户来说已经不像以前那么关键了。没有拥有你名字的 .com 域名的问题在于它显示了软弱。除非你大到名声在你之前，一个边缘域名暗示你是一家边缘公司。而（正如 Stripe 所示）拥有 x.com 即使与你所做的事情无关也显示了实力。\n即使是优秀的创始人也可能对此否认。他们的否认源于两个非常强大的力量：身份认同和缺乏想象力。\nX 就是我们，创始人想。没有比这更好的名字了。这两个都是错误的。\n你可以通过退后一步来解决这个问题。想象一下你把公司叫了别的名字。如果你这样做了，你肯定会像对现在的名字一样依恋那个名字。切换到你现在的名字的想法会令人反感。[1]\n你现在的名字并没有什么内在的伟大之处。你对它的几乎所有依恋都来自于它与你的联系。[2]\n消除第二个否认来源的方法——你无法想到其他潜在名字的能力——是承认你不擅长命名。命名是一项完全独立的技能，与成为一名优秀创始人所需的技能不同。你可以成为一名伟大的创业创始人，但在为公司想名字方面却毫无希望。\n一旦你承认了这一点，你就不再相信没有其他可以称呼你的名字。有很多其他潜在的名字一样好或更好；你只是想不出来。\n你如何找到它们？一个答案是解决你不擅长的问题的默认方法：找到其他能想出名字的人。但对于公司名称，还有另一种可能的方法。事实证明，几乎任何不是明显坏名字的单词或词对都是足够好的名字，这样的域名数量如此之大，你可以找到很多便宜甚至未被占用的。所以列个清单，试着买一些。这就是 Stripe 所做的。（他们的搜索还发现了 parse.com，他们的 Parse 朋友采用了这个域名。）\n我知道为初创公司命名是一项与其他技能正交的独特技能，因为我恰好拥有这项技能。当我在运营 YC 并与创业公司进行更多办公时间时，我经常帮助他们找到新名字。80% 的情况下，我们可以在 20 分钟的办公时间内找到至少一个好名字。\n现在当我进行办公时间时，我必须专注于更重要的问题，比如公司在做什么。我告诉他们什么时候需要改名字。但我知道控制他们的力量是多么强大，所以我知道大多数人都不会听。[3]\n当然，有些创业公司在没有拥有其名字的 .com 域名的情况下取得了成功。有些创业公司尽管犯了各种不同的错误还是成功了。但这个错误比大多数错误更不可原谅。如果你有足够的纪律来承认问题，这可以在几天内解决。\n按估值计算，前 20 名 YC 公司中 100% 拥有其名字的 .com 域名。前 50 名中有 94% 拥有。但当前批次中只有 66% 的公司拥有其名字的 .com 域名。这表明大多数人还有教训要学习，无论如何。\n注释\n[1] 顺便说一句，这个思维实验也适用于国籍和宗教。\n[2] 你对一个已成为你身份一部分的名字的喜爱不是直接表现的，这很容易被忽视，而是表现为一系列对其内在质量的虚假信念。（这也同样适用于国籍和宗教。）\n[3] 有时创始人知道没有他们名字的 .com 域名是个问题，但错觉会在后来的一步中袭击他们，相信他们将能够购买它，尽管没有证据表明它在出售。除非所有者已经告诉你要价，否则不要相信域名是出售的。\n感谢 Sam Altman、Jessica Livingston 和 Geoff Ralston 阅读本文草稿。\n",
    "description": "",
    "tags": ["命名","创业","域名","公司","品牌"],
    "categories": [],
    "content": "→ English Version\n更改你的名字 2015年8月\n如果你的美国创业公司叫 X，但你没有 x.com，你可能应该改个名字。\n原因不仅仅是人们找不到你。对于有移动应用的公司来说，拥有正确的域名名称对获取用户来说已经不像以前那么关键了。没有拥有你名字的 .com 域名的问题在于它显示了软弱。除非你大到名声在你之前，一个边缘域名暗示你是一家边缘公司。而（正如 Stripe 所示）拥有 x.com 即使与你所做的事情无关也显示了实力。\n即使是优秀的创始人也可能对此否认。他们的否认源于两个非常强大的力量：身份认同和缺乏想象力。\nX 就是我们，创始人想。没有比这更好的名字了。这两个都是错误的。\n你可以通过退后一步来解决这个问题。想象一下你把公司叫了别的名字。如果你这样做了，你肯定会像对现在的名字一样依恋那个名字。切换到你现在的名字的想法会令人反感。[1]\n你现在的名字并没有什么内在的伟大之处。你对它的几乎所有依恋都来自于它与你的联系。[2]\n消除第二个否认来源的方法——你无法想到其他潜在名字的能力——是承认你不擅长命名。命名是一项完全独立的技能，与成为一名优秀创始人所需的技能不同。你可以成为一名伟大的创业创始人，但在为公司想名字方面却毫无希望。\n一旦你承认了这一点，你就不再相信没有其他可以称呼你的名字。有很多其他潜在的名字一样好或更好；你只是想不出来。\n你如何找到它们？一个答案是解决你不擅长的问题的默认方法：找到其他能想出名字的人。但对于公司名称，还有另一种可能的方法。事实证明，几乎任何不是明显坏名字的单词或词对都是足够好的名字，这样的域名数量如此之大，你可以找到很多便宜甚至未被占用的。所以列个清单，试着买一些。这就是 Stripe 所做的。（他们的搜索还发现了 parse.com，他们的 Parse 朋友采用了这个域名。）\n我知道为初创公司命名是一项与其他技能正交的独特技能，因为我恰好拥有这项技能。当我在运营 YC 并与创业公司进行更多办公时间时，我经常帮助他们找到新名字。80% 的情况下，我们可以在 20 分钟的办公时间内找到至少一个好名字。\n现在当我进行办公时间时，我必须专注于更重要的问题，比如公司在做什么。我告诉他们什么时候需要改名字。但我知道控制他们的力量是多么强大，所以我知道大多数人都不会听。[3]\n当然，有些创业公司在没有拥有其名字的 .com 域名的情况下取得了成功。有些创业公司尽管犯了各种不同的错误还是成功了。但这个错误比大多数错误更不可原谅。如果你有足够的纪律来承认问题，这可以在几天内解决。\n按估值计算，前 20 名 YC 公司中 100% 拥有其名字的 .com 域名。前 50 名中有 94% 拥有。但当前批次中只有 66% 的公司拥有其名字的 .com 域名。这表明大多数人还有教训要学习，无论如何。\n注释\n[1] 顺便说一句，这个思维实验也适用于国籍和宗教。\n[2] 你对一个已成为你身份一部分的名字的喜爱不是直接表现的，这很容易被忽视，而是表现为一系列对其内在质量的虚假信念。（这也同样适用于国籍和宗教。）\n[3] 有时创始人知道没有他们名字的 .com 域名是个问题，但错觉会在后来的一步中袭击他们，相信他们将能够购买它，尽管没有证据表明它在出售。除非所有者已经告诉你要价，否则不要相信域名是出售的。\n感谢 Sam Altman、Jessica Livingston 和 Geoff Ralston 阅读本文草稿。\n"
  },{
    "title": "最佳文章",
    "url": "/paul_graham/essays_zh/best/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n最佳文章 2024年3月\n尽管标题如此，但这并不是要成为最好的文章。我的目标是弄清楚最好的文章会是什么样子。\n它会写得很好，但你可以写好任何主题。让它与众不同的是它所写的内容。\n显然有些主题会比其他更好。它可能不会是今年的口红颜色。但它也不会是关于崇高主题的空洞谈论。好文章必须令人惊讶。它必须告诉人们一些他们还不知道的事情。\n最好的文章应该是在你能告诉人们一些令人惊讶的事情的最重要主题上。\n这听起来可能很明显，但它有一些意想不到的后果。一个是科学像大象踏入划艇一样进入画面。例如，达尔文在1844年写的一篇文章中首次描述了自然选择的想法。谈谈一个你能告诉人们令人惊讶事情的重要主题。如果那是对一篇伟大文章的测试，那么这无疑是1844年写的最好的一篇。确实，在任何给定时间，最好的可能文章通常是描述可能做出的最重要科学或技术发现的那一篇。\n另一个意想不到的后果：我在开始写这篇文章时想象最好的文章会是相当永恒的——你在1844年能写的最好的文章和现在能写的最好的文章会大体相同。但事实上相反的情况似乎是真的。也许最好的绘画在这个意义上是永恒的。但现在写一篇介绍自然选择的文章不会令人印象深刻。现在最好的文章会是描述我们还不知道的伟大发现的那一篇。\n如果如何写出最好可能文章的问题归结为如何做出伟大发现的问题，那么我开始时问错了问题。也许这个练习表明我们不应该浪费时间写文章，而是专注于在某个特定领域做出发现。但我对文章以及能用它们做什么感兴趣，所以我想看看是否有其他我可以问的问题。\n有，而且表面上它几乎与我开始时的那个问题相同。我不应该问\u0026quot;最好的文章会是什么？\u0026ldquo;而应该问\u0026quot;如何写出好文章？\u0026ldquo;虽然这些似乎只是措辞不同，但它们的答案不同。正如我们所见，第一个问题的答案并不是真正关于文章写作的。第二个问题迫使它必须是。\n写文章，在最好的情况下，是一种发现思想的方式。如何做到这一点？如何通过写作来发现？\n文章通常应该以我称之为问题的东西开始，尽管我的意思非常宽泛：它在语法上不一定要是问题，只是起到问题作用的东西，即在某种程度上引发一些反应。\n你如何获得这个初始问题？随机选择一些听起来重要的主题并开始攻击可能行不通。专业交易员只有在他们所谓的优势时才会交易——一个令人信服的故事，说明为什么在某类交易中他们会赢多输少。同样，除非你有一个切入点——对它的一些新见解或处理方法，否则你不应该攻击一个主题。\n你不需要有一个完整的论点；你只需要某种可以探索的空白。事实上，仅仅对其他人认为理所当然的事情有疑问就足够了。\n如果你遇到一个足够令人困惑的问题，即使它看起来不是很重要，也值得探索。许多重要的发现都是通过拉扯一个最初看起来微不足道的线索而做出的。它们怎么都是雀鸟？\n一旦你有了问题，然后呢？你开始大声思考它。不是真正大声，而是像你说话时那样，用特定的词语串来回应。这个初始反应通常是错误或不完整的。写作将你的想法从模糊转化为糟糕。但这是向前的一步，因为一旦你能看到缺陷，你就可以修复它。\n也许初学写作的人对以错误或不完整的东西开始感到震惊，但你不应该，因为这就是文章写作有效的原因。强迫自己承诺特定的词语串给你一个起点，如果错了，当你重读时你会看到。至少一半的文章写作是重读你写的东西并问这是否正确和完整？重读时你必须非常严格，不仅因为你想保持诚实，而且因为你的反应与真理之间的差距往往是新思想需要发现的迹象。\n对你所写的东西严格的奖励不仅仅是改进。当你拿一个大致正确的答案并试图使它完全正确时，有时你会发现你不能，原因是你依赖一个错误的假设。当你丢弃它时，答案变得完全不同。\n理想情况下，对问题的反应是两件事：一个向真理收敛过程的第一步，以及额外问题来源（在我非常宽泛的意义上）。所以过程递归地继续，反应引发反应。\n通常一个问题有几种可能的反应，这意味着你正在遍历一棵树。但文章是线性的，不是树形的，这意味着你必须在每个点选择一个分支来跟随。你如何选择？通常你应该跟随提供普遍性和新颖性最大组合的那一个。我没有有意识地对分支进行这样的排名；我只是跟随看起来最令人兴奋的那个；但普遍性和新颖性是使分支令人兴奋的原因。\n如果你愿意做大量重写，你不必猜对。你可以跟随一个分支，看看结果如何，如果不够好，就剪掉并回溯。我一直这样做。在这篇文章中，我已经剪掉了一个17段的子树，此外还有无数较短的子树。也许我会在最后重新附加它，或者把它浓缩成脚注，或者把它变成自己的文章；我们等着瞧。\n一般来说你想快速剪掉。写作（以及软件和绘画）中最危险的诱惑之一是保留不正确的东西，仅仅因为它包含一些好点子或花费了你很多精力。\n此时抛出的最令人惊讶的新问题是初始问题真的重要吗？如果思想空间高度连接，它应该不重要，因为你应该能够从任何问题跳到最有价值的问题，只需要几步。我们看到它高度连接的证据，例如，痴迷于某个主题的人能够将任何对话转向它。但这只有在你知道你想去哪里时才有效，而在文章中你不知道。这就是重点。你不想成为固执的对话者，否则你所有的文章都会是关于同一个主题。\n初始问题重要的另一个原因是你通常感觉有义务坚持它。当我决定跟随哪个分支时，我不考虑这个。我只是跟随新颖性和普遍性。坚持问题是在后来强制的，当我注意到我走得太远时必须回溯。但我认为这是最优解。你不希望当时对新颖性和普遍性的追求受到约束。跟着它走，看看你得到什么。\n由于初始问题确实约束了你，在最好的情况下，它为你将写的文章质量设定了上限。如果你在初始问题引发的思维链上尽可能做得好，初始问题本身是唯一有变化空间的地方。\n让这使你过于保守会是一个错误，因为你无法预测一个问题会通向哪里。如果你做得正确，就不是，因为做得正确意味着做出发现，根据定义你无法预测那些。所以应对这种情况的方法不是对你选择的初始问题保持谨慎，而是写大量文章。文章就是为了冒险。\n几乎任何问题都能给你一篇好文章。确实，我费了些力气才在第三段想出一个足够没有前途的主题，因为任何听到最好的文章不能关于x的文章作家的第一反应就是尝试写它。但如果大多数问题能产生好文章，只有一些能产生伟大的文章。\n我们能预测哪些问题会产生伟大的文章吗？考虑到我写文章的时间有多长，这个问题感觉多么新奇令人担忧。\n我在初始问题中喜欢的一件事是令人愤慨性。我喜欢在某种程度上看起来顽皮的问题——例如，看起来违反直觉或过度雄心或异端。最好是三者兼具。这篇文章就是一个例子。写关于最好的文章意味着存在这样的事情，伪知识分子会将其斥为简化的，尽管它必然可以从一篇文章比另一篇更好这一可能性得出。而且思考如何做如此雄心勃勃的事情接近于实际做它，足以保持你的注意力。\n我喜欢以眼中的光芒开始一篇文章。这可能只是我的品味，但有一个方面可能不是：要在某个主题上写一篇真正好的文章，你必须对它感兴趣。好作家可以写好任何主题，但要达到文章存在理由的新颖见解，你必须关心。\n如果关心它是一个好的初始问题的标准之一，那么最优问题因人而异。这也意味着如果你关心很多不同的事情，你更可能写出伟大的文章。你越好奇，你好奇的事物集合与能产生伟大文章的主题集合之间可能的重叠就越大。\n伟大的初始问题还会有什么其他品质？如果它在很多不同领域有影响可能很好。而且我发现如果人们认为它已经被彻底探索过，这是一个好迹象。但事实是，我几乎没有考虑过如何选择初始问题，因为我很少这样做。我很少选择写什么主题；我只是开始思考某件事，有时它变成一篇文章。\n我会停止写关于我碰巧正在思考的任何东西的文章，而是开始系统地处理某个生成的主题列表吗？这听起来不太有趣。然而我想写好文章，如果初始问题重要，我应该关心它。\n也许答案是早一步：写任何跳入你脑海的东西，但试图确保跳入你脑海的东西是好的。事实上，现在我想起来，这必须是答案，因为仅仅一个主题列表如果你对它们没有任何优势就毫无用处。要开始写文章，你需要一个主题加上对它的一些初始见解，而你不能系统生成那些。要是能就好了。\n不过，你可能让自己有更多。头脑中出来的想法质量取决于输入什么，你可以在两个维度上改进它：广度和深度。\n你不可能学习一切，所以获得广度意味着学习彼此非常不同的主题。当人们告诉我在Hay的图书购买旅行时，他们问我买什么书，我回答时通常感到有点不好意思，因为这些主题看起来像一堆无关主题的清单。但也许这在这个行业中实际上是最优的。\n你也可以通过与人们交谈，通过做和建造东西，通过去地方和看事情来获得想法。我认为与新交谈不如与能让你有新想法的人交谈重要。我和Robert Morris谈一个下午比与20个新的聪明人交谈获得更多新想法。我知道是因为Y Combinator的一个办公时间块就是这样的。\n广度来自阅读、交谈和观看，深度来自做。真正学习某个领域的方法是必须在其中解决问题。虽然这可能采取写作的形式，但我怀疑要成为一个好文章家，你也必须做或做过其他类型的工作。这对大多数其他领域可能不成立，但文章写作不同。你可以一半时间做其他工作，净收益还是正向的，只要它是困难的。\n我不是把这作为一个配方提出，而是对已经在做的人的鼓励。如果你到目前为止一生都在做其他事情，你已经完成一半了。当然，要写得好你必须喜欢它，如果你喜欢写作，你可能已经花了至少一些时间做它。\n我所说的关于初始问题的一切也适用于你在写作文章时遇到的问题。它们是同一件事；文章的每个子树通常是一篇较短的文章，就像Calder活动装置的每个子树是一个较小的活动装置一样。所以任何能给你好初始问题的技巧也能给你好整篇文章。\n在某个时刻，问题和反应的循环达到感觉自然的结束。这有点可疑；不是每个答案都应该暗示更多问题吗？我认为发生的事情是你开始感到满足。一旦你覆盖了足够有趣的领域，你开始失去对新问题的胃口。这同样好，因为读者可能也感到满足了。停止问问题不是懒惰，因为你可以转而问一篇新文章的初始问题。\n这就是思想连接性的最终阻力来源：你一路上做出的发现。如果你从问题A开始发现足够多，你永远不会到达问题B。虽然如果你继续写文章，你会通过消耗这些发现逐渐解决这个问题。所以奇怪的是，写大量文章使得思想空间似乎更加高度连接。\n当一个子树结束时，你可以做两件事之一。你可以停止，或者通过回到你之前跳过的问题来使用立体主义技巧将分离的子树首尾相接。通常在这一点需要一些技巧使文章连续流动，但这次不是。这次我实际上需要这种现象的例子。例如，我们之前发现最好的可能文章通常不会像最好的绘画那样永恒。这似乎足够令人惊讶，值得进一步调查。\n文章永恒有两种意义：关于永恒重要的事情，以及对读者总是有相同的影响。在艺术中，这两种意义融合在一起。对古希腊人看起来美丽的艺术对我们来说仍然看起来美丽。但对于文章，这两种意义分歧，因为文章教导，你不能教导人们已经知道的事情。自然选择当然是永恒重要的事情，但一篇解释它的文章对我们不可能有对达尔文同时代人那样的影响，正是因为他的思想如此成功，每个人都知道它们。\n我在开始写这篇文章时想象最好的可能文章在更严格的、常青的意义上是永恒的：它会包含一些深刻的、永恒的智慧，对亚里士多德和费曼同样有吸引力。这似乎不是真的。但如果最好的可能文章通常不会在这种更严格的意义上是永恒的，那么写出这样的文章需要什么？\n那个答案结果非常奇怪：要成为常青类型的永恒，一篇文章必须无效，在这个意义上它的发现没有被同化到我们的共同文化中。否则对于第二代读者来说其中就没有新东西。如果你想不仅在现在而且在未来也让读者惊讶，你必须写不会粘住的文章——无论多么好，都不会成为未来人们在你读之前学习的一部分文章。\n我可以想象几种方法做到这一点。一种是写人们永远不会学习的东西。例如，雄心勃勃的人追逐各种类型奖品是一个长期模式，只有后来，可能太晚了，才意识到其中一些不如他们想象的那么有价值。如果你写这个，你可以确信未来读者的传送带会被它惊讶。\n同样，如果你写没有经验的人过度做事情的倾向——例如，年轻工程师产生过度复杂的解决方案。有些错误人们只有通过犯它们才能学会避免。其中任何一个都应该是永恒的主题。\n有时我们理解缓慢不仅仅是因为我们迟钝或否认，而是因为我们被故意欺骗。成人对孩子撒谎很多事情，当你成年时，他们不会把你拉到一边给你一份清单。他们不记得告诉了你什么谎言，而且大多数都是隐含的。所以只要成人继续说这些谎言，反驳这样的谎言将是惊讶的来源。\n有时是系统对你撒谎。例如，大多数国家的教育系统训练你通过黑客攻击测试来获胜。但这不是在最重要的现实世界测试中获胜的方式，经过几十年的训练，这对现实世界的新来者来说很难掌握。帮助他们克服这种制度性谎言只要制度仍然破碎就会有效。\n另一种永恒的配方是写读者已经知道的事情，但比文化能传达的详细得多。\u0026ldquo;每个人都知道\u0026quot;有孩子可以是有回报的。但直到你有了孩子，你才知道这采取什么确切形式，即使如此，你可能从未把你所知道的许多事情用语言表达出来。\n我已经写了所有这些类型的主题。但我这样做不是故意尝试写在这种更严格意义上永恒的文章。事实上，这依赖于一个人的思想不粘住这一事实表明，不值得故意尝试。是的，你应该写关于永恒重要主题的文章，但如果你做得足够好，你的结论粘住了，后代发现你的文章显而易见而不是新颖，那就更好了。你已经进入了达尔文领域。\n写关于永恒重要主题的文章是某种更普遍东西的一个例子：适用性的广度。而且有比时间性更多的广度类型——例如，适用于许多不同领域。所以广度是最终目标。\n我已经在追求它。广度和新颖性是我一直追求的两个东西。但我很高兴我理解永恒性适合哪里。\n我现在更好地理解了很多东西在哪里。这篇文章是文章写作的一种指南。我开始时希望得到关于主题的建议；如果你假设写作好，区分最好文章的唯一东西是它的主题。我确实得到了关于主题的建议：发现自然选择。是的，那会很好。但当你退后一步问，不做像那样的伟大发现，你能做的最好的是什么，结果证明是关于程序的。最终，文章的质量是其中发现的思想的函数，你获得它们的方式是对问题撒大网，然后对答案非常严格。\n这张文章写作地图最引人注目的特征是所需的灵感和努力的交替条纹。问题依赖灵感，但答案可以通过纯粹的坚持获得。你不必第一次就得到正确答案，但没有借口最终不得到正确答案，因为你可以一直重写直到你得到。而且这不仅仅是理论可能性。这是我工作方式的相当准确的描述。我现在正在重写。\n但虽然我希望我可以说写出伟大的文章主要依赖于努力，在极限情况下是灵感造成差异。在极限情况下，问题是更难获得的东西。那个池子没有底。\n如何获得更多问题？那是所有问题中最重要的。\n",
    "description": "",
    "tags": ["文章","写作","创造力","发现","思想","哲学"],
    "categories": [],
    "content": "→ English Version\n最佳文章 2024年3月\n尽管标题如此，但这并不是要成为最好的文章。我的目标是弄清楚最好的文章会是什么样子。\n它会写得很好，但你可以写好任何主题。让它与众不同的是它所写的内容。\n显然有些主题会比其他更好。它可能不会是今年的口红颜色。但它也不会是关于崇高主题的空洞谈论。好文章必须令人惊讶。它必须告诉人们一些他们还不知道的事情。\n最好的文章应该是在你能告诉人们一些令人惊讶的事情的最重要主题上。\n这听起来可能很明显，但它有一些意想不到的后果。一个是科学像大象踏入划艇一样进入画面。例如，达尔文在1844年写的一篇文章中首次描述了自然选择的想法。谈谈一个你能告诉人们令人惊讶事情的重要主题。如果那是对一篇伟大文章的测试，那么这无疑是1844年写的最好的一篇。确实，在任何给定时间，最好的可能文章通常是描述可能做出的最重要科学或技术发现的那一篇。\n另一个意想不到的后果：我在开始写这篇文章时想象最好的文章会是相当永恒的——你在1844年能写的最好的文章和现在能写的最好的文章会大体相同。但事实上相反的情况似乎是真的。也许最好的绘画在这个意义上是永恒的。但现在写一篇介绍自然选择的文章不会令人印象深刻。现在最好的文章会是描述我们还不知道的伟大发现的那一篇。\n如果如何写出最好可能文章的问题归结为如何做出伟大发现的问题，那么我开始时问错了问题。也许这个练习表明我们不应该浪费时间写文章，而是专注于在某个特定领域做出发现。但我对文章以及能用它们做什么感兴趣，所以我想看看是否有其他我可以问的问题。\n有，而且表面上它几乎与我开始时的那个问题相同。我不应该问\u0026quot;最好的文章会是什么？\u0026ldquo;而应该问\u0026quot;如何写出好文章？\u0026ldquo;虽然这些似乎只是措辞不同，但它们的答案不同。正如我们所见，第一个问题的答案并不是真正关于文章写作的。第二个问题迫使它必须是。\n写文章，在最好的情况下，是一种发现思想的方式。如何做到这一点？如何通过写作来发现？\n文章通常应该以我称之为问题的东西开始，尽管我的意思非常宽泛：它在语法上不一定要是问题，只是起到问题作用的东西，即在某种程度上引发一些反应。\n你如何获得这个初始问题？随机选择一些听起来重要的主题并开始攻击可能行不通。专业交易员只有在他们所谓的优势时才会交易——一个令人信服的故事，说明为什么在某类交易中他们会赢多输少。同样，除非你有一个切入点——对它的一些新见解或处理方法，否则你不应该攻击一个主题。\n你不需要有一个完整的论点；你只需要某种可以探索的空白。事实上，仅仅对其他人认为理所当然的事情有疑问就足够了。\n如果你遇到一个足够令人困惑的问题，即使它看起来不是很重要，也值得探索。许多重要的发现都是通过拉扯一个最初看起来微不足道的线索而做出的。它们怎么都是雀鸟？\n一旦你有了问题，然后呢？你开始大声思考它。不是真正大声，而是像你说话时那样，用特定的词语串来回应。这个初始反应通常是错误或不完整的。写作将你的想法从模糊转化为糟糕。但这是向前的一步，因为一旦你能看到缺陷，你就可以修复它。\n也许初学写作的人对以错误或不完整的东西开始感到震惊，但你不应该，因为这就是文章写作有效的原因。强迫自己承诺特定的词语串给你一个起点，如果错了，当你重读时你会看到。至少一半的文章写作是重读你写的东西并问这是否正确和完整？重读时你必须非常严格，不仅因为你想保持诚实，而且因为你的反应与真理之间的差距往往是新思想需要发现的迹象。\n对你所写的东西严格的奖励不仅仅是改进。当你拿一个大致正确的答案并试图使它完全正确时，有时你会发现你不能，原因是你依赖一个错误的假设。当你丢弃它时，答案变得完全不同。\n理想情况下，对问题的反应是两件事：一个向真理收敛过程的第一步，以及额外问题来源（在我非常宽泛的意义上）。所以过程递归地继续，反应引发反应。\n通常一个问题有几种可能的反应，这意味着你正在遍历一棵树。但文章是线性的，不是树形的，这意味着你必须在每个点选择一个分支来跟随。你如何选择？通常你应该跟随提供普遍性和新颖性最大组合的那一个。我没有有意识地对分支进行这样的排名；我只是跟随看起来最令人兴奋的那个；但普遍性和新颖性是使分支令人兴奋的原因。\n如果你愿意做大量重写，你不必猜对。你可以跟随一个分支，看看结果如何，如果不够好，就剪掉并回溯。我一直这样做。在这篇文章中，我已经剪掉了一个17段的子树，此外还有无数较短的子树。也许我会在最后重新附加它，或者把它浓缩成脚注，或者把它变成自己的文章；我们等着瞧。\n一般来说你想快速剪掉。写作（以及软件和绘画）中最危险的诱惑之一是保留不正确的东西，仅仅因为它包含一些好点子或花费了你很多精力。\n此时抛出的最令人惊讶的新问题是初始问题真的重要吗？如果思想空间高度连接，它应该不重要，因为你应该能够从任何问题跳 …"
  },{
    "title": "有机的创业想法",
    "url": "/paul_graham/essays_zh/organic/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n有机的创业想法 2010年4月\n想创办初创公司？获得 Y Combinator 的资助。\n想出创业想法的最好方法是问自己这个问题：你希望有人为你做什么？\n有两种类型的创业想法：那些从你自己的生活中有机生长出来的，以及那些你从远处决定将对除你之外的其他用户群体必要的想法。苹果是第一种类型。苹果的发生是因为Steve Wozniak想要一台电脑。与大多数想要电脑的人不同，他能设计一台，所以他做了。而且由于很多其他人也想要同样的东西，苹果能够卖出足够的电脑来让公司运转起来。顺便说一句，他们今天仍然依赖这个原则。iPhone是Steve Jobs想要的手机。[1]\n我们自己的初创公司Viaweb是第二种类型。我们制作了建立在线商店的软件。我们自己不需要这个软件。我们不是直销商。当我们开始时，我们甚至不知道我们的用户被称为\u0026quot;直销商\u0026quot;。但我们开始公司时相对较老（我30岁，Robert Morris 29岁），所以我们见过足够多的情况知道用户需要这种类型的软件。[2]\n这两种类型的想法之间没有明确的界限，但最成功的初创公司似乎更接近苹果类型而不是Viaweb类型。当Bill Gates为Altair编写第一个Basic解释器时，他在写一些他会使用的东西，Larry和Sergey编写Google的第一个版本时也是如此。\n有机的想法通常比编造的那种更可取，但当创始人年轻时尤其如此。预测其他人想要什么需要经验。我们在Y Combinator看到的最糟糕的想法来自年轻的创始人制作他们认为其他人想要的东西。\n所以如果你想创办初创公司但还不知道要做什么，我鼓励你最初专注于有机的想法。你日常生活中缺少或有什么问题？有时如果你只是问这个问题，你会立即得到答案。对Bill Gates来说，你只能用机器语言为Altair编程，这显然是有问题的。\n你可能需要站在自己之外一点来看问题，因为你往往会习惯它并想当然。不过你可以肯定它存在。总是有伟大的想法就在我们眼前。2004年，哈佛本科生仍然使用印刷在纸上的Facebook，这是很荒谬的。当然，这类东西应该在线。\n现在有同样明显的想法 lying around。你忽略它们的原因与你在2004年忽略建立Facebook的想法的原因相同：有机的创业想法最初通常不像创业想法。我们现在知道Facebook非常成功，但把自己放回2004年。把本科生的档案放在网上不会看起来像什么创业想法。事实上，它最初也不是一个创业想法。今年冬天Mark在YC晚宴上发言时说，他写Facebook的第一个版本时并没有试图创办公司。这只是一个项目。当Woz开始开发Apple I时也是如此。他没有认为自己在创办公司。如果这些人认为他们在创办公司，他们可能会被诱惑做一些更\u0026quot;严肃\u0026quot;的事情，那将是一个错误。\n所以如果你想出有机的创业想法，我鼓励你更多地关注想法部分，而不是创业部分。只修复看似有问题的事情，无论这个问题是否看起来重要到可以建立一个公司。如果你继续追求这样的线索，很难不最终做出对很多人有价值的东西，当你这样做时，惊喜，你有了一家公司。[3]\n如果你最初生产的东西被其他人视为玩具而 dismiss，不要灰心。事实上，这是一个好兆头。这可能是为什么其他人一直忽略这个想法的原因。第一台微型计算机被视为玩具。第一架飞机，第一辆汽车也是如此。在这一点上，当有人带着用户喜欢但我们能想象论坛巨魔视为玩具的东西来找我们时，这使我们特别可能投资。\n虽然年轻创始人在想出编造的想法时处于劣势，但他们是有机想法的最佳来源，因为他们处于技术的前沿。他们使用最新的东西。他们刚刚决定使用什么，为什么不呢？因为他们使用最新的东西，他们处于首先发现有价值的可修复问题的位置。\n没有什么比刚刚变得可解决的未满足需求更有价值了。如果你发现一些可以为很多人修复的问题，你就发现了一个金矿。就像真正的金矿一样，你仍然必须努力工作才能从中提炼出黄金。但至少你知道矿脉在哪里，那是困难的部分。\n注释 [1] 这表明了一种预测苹果将会薄弱领域的方法：Steve Jobs不使用的东西。例如，我怀疑他对游戏很感兴趣。\n[2] 回顾起来，我们应该成为直销商。如果我再做Viaweb，我会开设我们自己的在线商店。如果我们这样做了，我们会更好地理解用户。我鼓励任何开始初创公司的人成为其用户之一，无论这看起来多么不自然。\n[3] 可能的例外：很难与开源软件直接竞争。你可以为程序员构建东西，但必须有一些可以收费的部分。\n感谢Sam Altman、Trevor Blackwell和Jessica Livingston阅读本文草稿。\n",
    "description": "",
    "tags": ["创业","想法","企业家精神","创新","Y Combinator","产品开发"],
    "categories": [],
    "content": "→ English Version\n有机的创业想法 2010年4月\n想创办初创公司？获得 Y Combinator 的资助。\n想出创业想法的最好方法是问自己这个问题：你希望有人为你做什么？\n有两种类型的创业想法：那些从你自己的生活中有机生长出来的，以及那些你从远处决定将对除你之外的其他用户群体必要的想法。苹果是第一种类型。苹果的发生是因为Steve Wozniak想要一台电脑。与大多数想要电脑的人不同，他能设计一台，所以他做了。而且由于很多其他人也想要同样的东西，苹果能够卖出足够的电脑来让公司运转起来。顺便说一句，他们今天仍然依赖这个原则。iPhone是Steve Jobs想要的手机。[1]\n我们自己的初创公司Viaweb是第二种类型。我们制作了建立在线商店的软件。我们自己不需要这个软件。我们不是直销商。当我们开始时，我们甚至不知道我们的用户被称为\u0026quot;直销商\u0026quot;。但我们开始公司时相对较老（我30岁，Robert Morris 29岁），所以我们见过足够多的情况知道用户需要这种类型的软件。[2]\n这两种类型的想法之间没有明确的界限，但最成功的初创公司似乎更接近苹果类型而不是Viaweb类型。当Bill Gates为Altair编写第一个Basic解释器时，他在写一些他会使用的东西，Larry和Sergey编写Google的第一个版本时也是如此。\n有机的想法通常比编造的那种更可取，但当创始人年轻时尤其如此。预测其他人想要什么需要经验。我们在Y Combinator看到的最糟糕的想法来自年轻的创始人制作他们认为其他人想要的东西。\n所以如果你想创办初创公司但还不知道要做什么，我鼓励你最初专注于有机的想法。你日常生活中缺少或有什么问题？有时如果你只是问这个问题，你会立即得到答案。对Bill Gates来说，你只能用机器语言为Altair编程，这显然是有问题的。\n你可能需要站在自己之外一点来看问题，因为你往往会习惯它并想当然。不过你可以肯定它存在。总是有伟大的想法就在我们眼前。2004年，哈佛本科生仍然使用印刷在纸上的Facebook，这是很荒谬的。当然，这类东西应该在线。\n现在有同样明显的想法 lying around。你忽略它们的原因与你在2004年忽略建立Facebook的想法的原因相同：有机的创业想法最初通常不像创业想法。我们现在知道Facebook非常成功，但把自己放回2004年。把本科生的档案放在网上不会看起来像什么创业想法。事实上，它最初也不是一个创业想法。今年冬天Mark在YC晚宴上发言时说，他写Facebook的第一个版本时并没有试图创办公司。这只是一个项目。当Woz开始开发Apple I时也是如此。他没有认为自己在创办公司。如果这些人认为他们在创办公司，他们可能会被诱惑做一些更\u0026quot;严肃\u0026quot;的事情，那将是一个错误。\n所以如果你想出有机的创业想法，我鼓励你更多地关注想法部分，而不是创业部分。只修复看似有问题的事情，无论这个问题是否看起来重要到可以建立一个公司。如果你继续追求这样的线索，很难不最终做出对很多人有价值的东西，当你这样做时，惊喜，你有了一家公司。[3]\n如果你最初生产的东西被其他人视为玩具而 dismiss，不要灰心。事实上，这是一个好兆头。这可能是为什么其他人一直忽略这个想法的原因。第一台微型计算机被视为玩具。第一架飞机，第一辆汽车也是如此。在这一点上，当有人带着用户喜欢但我们能想象论坛巨魔视为玩具的东西来找我们时，这使我们特别可能投资。\n虽然年轻创始人在想出编造的想法时处于劣势，但他们是有机想法的最佳来源，因为他们处于技术的前沿。他们使用最新的东西。他们刚刚决定使用什么，为什么不呢？因为他们使用最新的东西，他们处于首先发现有价值的可修复问题的位置。\n没有什么比刚刚变得可解决的未满足需求更有价值了。如果你发现一些可以为很多人修复的问题，你就发现了一个金矿。就像真正的金矿一样，你仍然必须努力工作才能从中提炼出黄金。但至少你知道矿脉在哪里，那是困难的部分。\n注释 [1] 这表明了一种预测苹果将会薄弱领域的方法：Steve Jobs不使用的东西。例如，我怀疑他对游戏很感兴趣。\n[2] 回顾起来，我们应该成为直销商。如果我再做Viaweb，我会开设我们自己的在线商店。如果我们这样做了，我们会更好地理解用户。我鼓励任何开始初创公司的人成为其用户之一，无论这看起来多么不自然。\n[3] 可能的例外：很难与开源软件直接竞争。你可以为程序员构建东西，但必须有一些可以收费的部分。\n感谢Sam Altman、Trevor Blackwell和Jessica Livingston阅读本文草稿。\n"
  },{
    "title": "有用的文章",
    "url": "/paul_graham/essays_zh/useful/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n有用的文章 如何写出有用的文章\n2020年2月\n文章应该是什么样子的？很多人会说，要有说服力。这是我们很多人被教导的文章应该有的样子。但我认为我们可以有更远大的目标：文章应该是有用的。\n首先，这意味着它应该是正确的。但仅仅正确是不够的。通过使陈述模糊不清来使其正确很容易。例如，这是学术写作中的一个常见缺陷。如果你对某个问题一无所知，你说这个问题很复杂，有很多因素需要考虑，过于简单地看待它是错误的，等等，这样你就不会错。\n虽然毫无疑问是正确的，但这样的陈述没有告诉读者任何东西。有用的写作做出的断言要尽可能强有力，但又不能变成错误的。\n例如，说派克峰在科罗拉多州的中部附近，比仅仅说在科罗拉多州的某个地方更有用。但如果我说它在科罗拉多州的正中间，那我就太过分了，因为它在中部稍微偏东一点。\n精确性和正确性就像相反的力量。如果你忽视另一个，很容易满足一个。空洞的学术写作的对立面是民粹主义者的大胆但错误的修辞。有用的写作是大胆的，但也是真实的。\n它还有另外两个特点：它告诉人们重要的事情，而且至少有一些人还不知道。\n告诉人们他们不知道的事情并不总是意味着让他们感到惊讶。有时这意味着告诉他们一些他们潜意识里知道但从未用言语表达的事情。事实上，这些可能更有价值的见解，因为它们往往更根本。\n让我们把它们放在一起。有用的写作告诉人们一些他们还不知道的真实而重要的事情，并尽可能明确地告诉他们。\n注意，这些都是程度问题。例如，你不能期望一个想法对每个人来说都是新颖的。你的任何洞察力可能已经被世界上70亿人中的至少一个人所拥有。但一个想法对很多读者来说是新颖的，这就足够了。\n正确性、重要性和强度也是如此。实际上，这四个组成部分就像数字一样，你可以把它们相乘来获得有用性分数。我意识到这几乎是尴尬的简化，但确实如此。\n你如何确保你说的事情是真实的、新颖的、重要的？信不信由你，有一个技巧可以做到这一点。我是从我的朋友罗伯特·莫里斯那里学到的，他害怕说出任何愚蠢的话。他的技巧是，除非他确定值得听，否则什么也不说。这让你很难从他那里得到意见，但当你得到时，它们通常都是正确的。\n转化为文章写作，这意味着如果你写了一个糟糕的句子，就不要发表它。删除它，再试一次。你经常放弃整整四五个段落。有时是一整篇文章。\n你无法确保你的每个想法都是好的，但你可以确保你发表的每个想法都是好的，只要不发表那些不好的。\n在科学中，这被称为发表偏见，被认为是坏的。当你探索的某个假设得出不确定的结果时，你也应该告诉人们。但在文章写作中，发表偏见是可行的方法。\n我的策略是先松后紧。我快速写文章的第一稿，尝试各种想法。然后我花几天时间仔细重写。\n我从未尝试计算过校对文章的次数，但我敢肯定有些句子在发表前我读了100遍。当我校对一篇文章时，通常有些段落会以令人讨厌的方式突出出来，有时是因为它们写得笨拙，有时是因为我不确定它们是否真实。这种烦恼开始时是无意识的，但大约读了十遍之后，每次遇到那个部分我都会说\u0026quot;呃，那个部分\u0026quot;。它们就像荆棘，在你走过时会勾住你的袖子。通常我不会发表一篇文章，直到它们都消失——直到我能通读整篇文章而没有被勾住的感觉。\n我有时会让一个看起来笨拙的句子通过，如果我想不出重新表达的方法，但我永远不会让一个看起来不正确的句子通过。你永远不需要这样做。如果一个句子看起来不对，你只需要问为什么不对，你通常已经在脑海里有了替代的句子。\n这是散文家相对于记者的优势。你没有截止日期。你可以为一篇文章工作尽可能长的时间来把它写好。如果你写不好，你根本不需要发表这篇文章。错误似乎在面对拥有无限资源的敌人时失去了勇气。或者至少感觉是这样。真正发生的是你对自己有不同的期望。你就像一个父母对孩子说\u0026quot;我们可以整晚坐在这里，直到你把蔬菜吃完\u0026quot;。只不过你也是那个孩子。\n我不是说没有错误会漏掉。例如，在读者指出我遗漏了条件(c)后，我在《检测偏见的方法》中添加了它。但在实践中，你几乎可以抓住所有错误。\n获得重要性也有一个技巧。这就像我向年轻创始人建议的获得创业想法的技巧：制作你自己想要的东西。你可以用自己作为读者的代理。读者并非完全不像你，所以如果你写对你来说很重要的主题，它们可能对相当数量的读者也很重要。\n重要性有两个因素。它是某件事对多少人重要，乘以它对他们的重要程度。这当然意味着它不是一个矩形，而是一个像黎曼和那样的参差不齐的梳子。\n获得新颖性的方法是写你思考了很多的主题。然后你也可以在这个领域用自己作为读者的代理。任何让你感到惊讶的事情，既然你已经对这个主题思考了很多，可能也会让相当数量的读者感到惊讶。在这里，就像正确性和重要性一样，你可以使用莫里斯技术来确保你会这样做。如果你从写一篇文章中没有学到任何东西，就不要发表它。\n你需要谦卑来衡量新颖性，因为承认一个想法的新颖性意味着承认你以前对它的无知。信心和谦卑通常被视为对立面，但在这种情况下，就像在许多其他情况下一样，信心帮助你保持谦卑。如果你知道自己是某个主题的专家，当你学到自己不知道的东西时，你可以自由地承认，因为你可以自信地认为大多数其他人也不知道。\n有用写作的第四个组成部分，强度，来自两件事：思考得好，以及熟练使用限定条件。这两个相互平衡，就像手动变速车中的油门和离合器。当你试图完善一个想法的表达时，你相应地调整限定条件。你确定的事情，你可以直截了当地说，没有任何限定，就像我对有用写作的四个组成部分所做的那样。而看起来可疑的观点必须用或许来保持距离。\n当你完善一个想法时，你正在朝着减少限定条件的方向努力。但你很少能把它减少到零。有时你甚至不想这样做，如果这是一个次要观点，而完全完善的版本会太长的话。\n有人说限定条件削弱了写作。例如，你永远不应该在文章中用\u0026quot;我认为\u0026quot;开始一个句子，因为如果你在说它，那么你当然认为它。确实，\u0026ldquo;我认为x\u0026quot;比简单的\u0026quot;x\u0026quot;是一个更弱的陈述。这正是你需要\u0026quot;我认为\u0026quot;的原因。你需要它来表达你的确定程度。\n但限定条件不是标量。它们不仅仅是实验误差。它们一定可以表达50种事情：某事物的适用范围有多广，你是如何知道的，你对它如此感到有多高兴，甚至它如何可以被证伪。我不打算在这里探讨限定条件的结构。它可能比整个有用写作的主题更复杂。相反，我只给你一个实用的建议：不要低估限定条件。它本身就是一项重要的技能，不仅仅是为了避免说错话而必须缴纳的某种税。所以学习并使用它的全部范围。它可能不是拥有好想法的全部，但它是拥有好想法的一部分。\n我在文章中还追求另一个品质：尽可能简单地说事情。但我不认为这是有用性的组成部分。这更多是对读者的考虑。它也是把事情做对的实用辅助；用简单的语言表达时，错误更明显。但我承认我简单写作的主要原因不是为了读者，也不是因为它有助于把事情做对，而是因为我讨厌使用比我需要的更多或更花哨的词语。这似乎不优雅，就像一个太长的程序。\n我意识到华丽的写作对一些人有效。但除非你确定你是其中之一，否则最好的建议是尽可能简单地写作。\n我相信我给你的公式，重要性+新颖性+正确性+强度，是一篇好文章的配方。但我应该警告你，这也是让人们生气的配方。\n问题的根源在于新颖性。当你告诉人们他们不知道的事情时，他们并不总是为此感谢你。有时人们不知道某件事是因为他们不想知道。通常是因为它与某些珍视的信念相矛盾。确实，如果你在寻找新颖的想法，流行但错误的信念是找到它们的好地方。每一个流行的错误信念都在它周围创造了一个相对未被探索的想法死区，因为它们与它相矛盾。\n强度组成部分只会让事情变得更糟。如果说有什么比人们珍视的假设被矛盾更让他们恼火的话，那就是被直截了当地矛盾。\n另外，如果你使用了莫里斯技术，你的写作会显得相当自信。也许对不同意你的人来说是冒犯性的自信。你显得自信的原因是因为你是自信的：你作弊了，只发表你确定的事情。对于试图不同意你的人来说，你似乎从不承认你错了。事实上你不断地承认你错了。你只是在发表之前而不是之后这样做。\n如果你的写作尽可能简单，那只会让事情变得更糟。简洁是命令的措辞。如果你看到有人处于劣势地位传递不受欢迎的消息，你会注意到他们倾向于使用很多词语来缓和打击。而对某人简短或多或少是对他们无礼。\n有时可以故意比你的意思更弱地表达陈述。在你相当确定的事情前面加上\u0026quot;也许\u0026rdquo;。但你会注意到当作家这样做时，他们通常会眨眨眼。\n我不喜欢这样做太多。对整篇文章采用讽刺的语气是俗气的。我认为我们不得不面对这样一个事实：优雅和简洁是同一件事的两个名字。\n你可能会认为，如果你努力工作以确保文章是正确的，它将能够抵御攻击。这有点道理。它将能够抵御有效的攻击。但在实践中，这没什么安慰。\n事实上，有用写作的强度组成部分将使你特别容易被歪曲。如果你尽可能强烈地表达一个想法而不使其变成错误的，那么任何人需要做的就是稍微夸大你所说的话，现在它就是错误的。\n很多时候他们甚至不是故意这样做的。如果你开始写文章，你会发现的最令人惊讶的事情之一是，不同意你的人很少不同意你实际写的内容。相反，他们编造你说的话，然后不同意它。\n无论价值如何，对策是要求这样做的人引用你写的他们认为错误的特定句子或段落，并解释原因。我说\u0026quot;无论价值如何\u0026quot;是因为他们从不这样做。所以尽管这似乎可以让破碎的讨论回到正轨，但事实是它从一开始就没有走上正轨。\n你是否应该明确地防止可能的误解？是的，如果它们是相当聪明且善意的人可能做出的误解。事实上，有时说一些稍微误导性的话然后添加更正，比试图一次性把一个想法做对更好。这可能更有效，也可以模拟这种想法被发现的方式。\n但我不认为你应该在文章正文中明确地防止故意误解。文章是会见诚实读者的地方。你不想通过在窗户上装栏杆来保护不诚实的人而破坏你的房子。防止故意误解的地方是在尾注中。但不要认为你可以预测所有这些。当你说一些他们不想听的话时，人们在歪曲你方面和在为他们想做但知道不应该做的事情寻找合理化借口方面一样聪明。我怀疑这是同一种技能。\n与大多数其他事情一样，提高文章写作能力的方法是练习。但你如何开始？既然我们已经研究了有用写作的结构，我们可以更准确地重新表述这个问题。你最初放松哪个约束条件？答案是，重要性的第一个组成部分：关心你写作的人数。\n如果你把主题缩小到足够，你可能会找到你擅长的东西。从写那个开始。如果你只有十个关心你的读者，那也没关系。你在帮助他们，你在写作。以后你可以扩展你写作的主题范围。\n你可以放松的另一个约束有点令人惊讶：发表。写文章不意味着要发表它们。现在趋势是发表每一个随意的想法，这似乎很奇怪，但对我来说有效。我在笔记本里写了相当于文章的东西大约15年。我从未发表过它们，也从未期望过。我把它们作为弄清楚事情的一种方式。但当网络出现时，我已经有了很多练习。\n顺便说一下，史蒂夫·沃兹尼亚克也做了同样的事情。高中时他在纸上设计电脑作为娱乐。他无法建造它们，因为他买不起组件。但当英特尔在1975年推出4K DRAM时，他准备好了。\n然而还有多少文章要写呢？这个问题的答案可能是我学到的关于文章写作最令人兴奋的事情。几乎所有文章都还没有写。\n虽然文章是一种古老的形式，但它没有被精心培养。在印刷时代，发表是昂贵的，对文章的需求也不足以发表那么多。如果你已经因为写其他东西而出名，比如小说，你可以发表文章。或者你可以写书评，借此表达自己的想法。但没有真正成为散文家的直接途径。这意味着很少有文章被写出来，而被写出来的那些文章往往只涉及狭窄的主题范围。\n现在，感谢互联网，有了一条途径。任何人都可以在线发表文章。你可能在默默无闻中开始，但至少你可以开始。你不需要任何人的许可。\n有时知识领域会安静地坐几年，直到某种变化使它爆炸。密码学对数论做了这样的事情。互联网正在对文章做这样的事情。\n令人兴奋的不是还有很多要写的，而是还有很多要发现的。有一种想法最好通过写文章来发现。如果大多数文章仍未写出，那么大多数这样的想法仍未被发现。\n注释\n[1] 在阳台上装栏杆，但不要在窗户上装栏杆。\n[2] 即使现在我有时也会写不打算发表的文章。我写了几篇来弄清楚Y Combinator应该做什么，它们真的很有帮助。\n感谢特雷弗·布莱克威尔、丹尼尔·盖克尔、杰西卡·利文斯顿和罗伯特·莫里斯阅读草稿。\n西班牙语翻译\n日语翻译\n",
    "description": "",
    "tags": ["写作","散文","创意","建议","沟通"],
    "categories": [],
    "content": "→ English Version\n有用的文章 如何写出有用的文章\n2020年2月\n文章应该是什么样子的？很多人会说，要有说服力。这是我们很多人被教导的文章应该有的样子。但我认为我们可以有更远大的目标：文章应该是有用的。\n首先，这意味着它应该是正确的。但仅仅正确是不够的。通过使陈述模糊不清来使其正确很容易。例如，这是学术写作中的一个常见缺陷。如果你对某个问题一无所知，你说这个问题很复杂，有很多因素需要考虑，过于简单地看待它是错误的，等等，这样你就不会错。\n虽然毫无疑问是正确的，但这样的陈述没有告诉读者任何东西。有用的写作做出的断言要尽可能强有力，但又不能变成错误的。\n例如，说派克峰在科罗拉多州的中部附近，比仅仅说在科罗拉多州的某个地方更有用。但如果我说它在科罗拉多州的正中间，那我就太过分了，因为它在中部稍微偏东一点。\n精确性和正确性就像相反的力量。如果你忽视另一个，很容易满足一个。空洞的学术写作的对立面是民粹主义者的大胆但错误的修辞。有用的写作是大胆的，但也是真实的。\n它还有另外两个特点：它告诉人们重要的事情，而且至少有一些人还不知道。\n告诉人们他们不知道的事情并不总是意味着让他们感到惊讶。有时这意味着告诉他们一些他们潜意识里知道但从未用言语表达的事情。事实上，这些可能更有价值的见解，因为它们往往更根本。\n让我们把它们放在一起。有用的写作告诉人们一些他们还不知道的真实而重要的事情，并尽可能明确地告诉他们。\n注意，这些都是程度问题。例如，你不能期望一个想法对每个人来说都是新颖的。你的任何洞察力可能已经被世界上70亿人中的至少一个人所拥有。但一个想法对很多读者来说是新颖的，这就足够了。\n正确性、重要性和强度也是如此。实际上，这四个组成部分就像数字一样，你可以把它们相乘来获得有用性分数。我意识到这几乎是尴尬的简化，但确实如此。\n你如何确保你说的事情是真实的、新颖的、重要的？信不信由你，有一个技巧可以做到这一点。我是从我的朋友罗伯特·莫里斯那里学到的，他害怕说出任何愚蠢的话。他的技巧是，除非他确定值得听，否则什么也不说。这让你很难从他那里得到意见，但当你得到时，它们通常都是正确的。\n转化为文章写作，这意味着如果你写了一个糟糕的句子，就不要发表它。删除它，再试一次。你经常放弃整整四五个段落。有时是一整篇文章。\n你无法确保你的每个想法都是好的，但你可以确保你发表的每个想法都是好的，只要不发表那些不好的。\n在科学中，这被称为发表偏见，被认为是坏的。当你探索的某个假设得出不确定的结果时，你也应该告诉人们。但在文章写作中，发表偏见是可行的方法。\n我的策略是先松后紧。我快速写文章的第一稿，尝试各种想法。然后我花几天时间仔细重写。\n我从未尝试计算过校对文章的次数，但我敢肯定有些句子在发表前我读了100遍。当我校对一篇文章时，通常有些段落会以令人讨厌的方式突出出来，有时是因为它们写得笨拙，有时是因为我不确定它们是否真实。这种烦恼开始时是无意识的，但大约读了十遍之后，每次遇到那个部分我都会说\u0026quot;呃，那个部分\u0026quot;。它们就像荆棘，在你走过时会勾住你的袖子。通常我不会发表一篇文章，直到它们都消失——直到我能通读整篇文章而没有被勾住的感觉。\n我有时会让一个看起来笨拙的句子通过，如果我想不出重新表达的方法，但我永远不会让一个看起来不正确的句子通过。你永远不需要这样做。如果一个句子看起来不对，你只需要问为什么不对，你通常已经在脑海里有了替代的句子。\n这是散文家相对于记者的优势。你没有截止日期。你可以为一篇文章工作尽可能长的时间来把它写好。如果你写不好，你根本不需要发表这篇文章。错误似乎在面对拥有无限资源的敌人时失去了勇气。或者至少感觉是这样。真正发生的是你对自己有不同的期望。你就像一个父母对孩子说\u0026quot;我们可以整晚坐在这里，直到你把蔬菜吃完\u0026quot;。只不过你也是那个孩子。\n我不是说没有错误会漏掉。例如，在读者指出我遗漏了条件(c)后，我在《检测偏见的方法》中添加了它。但在实践中，你几乎可以抓住所有错误。\n获得重要性也有一个技巧。这就像我向年轻创始人建议的获得创业想法的技巧：制作你自己想要的东西。你可以用自己作为读者的代理。读者并非完全不像你，所以如果你写对你来说很重要的主题，它们可能对相当数量的读者也很重要。\n重要性有两个因素。它是某件事对多少人重要，乘以它对他们的重要程度。这当然意味着它不是一个矩形，而是一个像黎曼和那样的参差不齐的梳子。\n获得新颖性的方法是写你思考了很多的主题。然后你也可以在这个领域用自己作为读者的代理。任何让你感到惊讶的事情，既然你已经对这个主题思考了很多，可能也会让相当数量的读者感到惊讶。在这里，就像正确性和重要性一样，你可以使用莫里斯技术来确保你会这样做。如果你从写一篇文章中没有学到任何东西，就不要发表它。\n你需 …"
  },{
    "title": "杀死创业公司的18个错误",
    "url": "/paul_graham/essays_zh/startupmistakes/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n杀死创业公司的18个错误 2006年10月\n在最近一次演讲后的问答环节，有人问是什么导致创业公司失败。我在那里呆呆地站了几秒钟后才意识到，这其实是个有点诡计性的问题。这相当于问如何让创业公司成功——如果你避免了所有失败的原因，你就会成功——而这个问题太大，无法即兴回答。\n后来我意识到，从这个角度来看问题可能会有所帮助。如果你有一份所有不应该做的事情的清单，你就可以通过否定这些来变成成功的秘诀。而且这种形式的清单在实践中可能更有用。抓住自己做了不该做的事情，比总是记得要做应该做的事情要容易。[1]\n从某种意义上说，只有一个错误会杀死创业公司：没有做出用户想要的东西。如果你做出了用户想要的东西，无论你做了什么或没做什么，你可能会没事。而如果你没有做出用户想要的东西，那么无论你做了什么或没做什么，你都死定了。所以实际上，这是18个导致创业公司无法做出用户想要的东西的因素列表。几乎所有的失败都是通过这个漏斗的。\n1. 单一创始人 你有没有注意到成功的创业公司很少是由一个人创立的？即使是你认为只有一个创始人的公司，比如Oracle，通常也有多个创始人。这不太可能是巧合。\n只有一个创始人有什么问题？首先，这是不信任票。这可能意味着创始人无法说服他的任何一个朋友和他一起创业公司。这相当令人担忧，因为他的朋友是最了解他的人。\n但即使创始人的朋友都错了，公司是个好赌注，他仍然处于劣势。创业公司对一个人来说太难了。即使你能自己完成所有工作，你也需要同事一起集思广益，说服你放弃愚蠢的决定，并在事情出错时让你振作起来。\n最后一点可能是最重要的。创业公司的低谷是如此之低，几乎没有人能够独自承受。当你有多个创始人时，团队精神将他们联系在一起，这似乎违反了守恒定律。每个人都在想\u0026quot;我不能让我的朋友们失望。\u0026ldquo;这是人性中最强大的力量之一，而只有一个创始人时，这种力量就缺失了。\n2. 糟糕的地理位置 创业公司在一些地方繁荣，而在其他地方则不然。硅谷占主导地位，其次是波士顿，然后是西雅图、奥斯汀、丹佛和纽约。在那之后就不多了。即使在纽约，人均创业公司数量可能只有硅谷的二十分之一。在休斯顿、芝加哥和底特律这样的城镇里，这个数量小到无法测量。\n为什么下降如此之快？可能与其他行业的原因相同。美国第六大时尚中心是什么？第六大石油、金融或出版中心？无论它们是什么，它们可能离顶峰太远了，甚至称它们为中心都是误导的。\n城市为何成为创业中心是个有趣的问题，但创业公司在那里繁荣的原因可能与其他行业相同：那就是专家所在的地方。标准更高；人们更同情你所做的事情；你想要雇用的人想住在那里；配套产业在那里；你在偶然会议中遇到的人从事同一个行业。谁知道这些因素如何结合来促进硅谷的创业公司并压制底特律的创业公司，但从每个地区的人均创业公司数量来看，很明显它们确实在起作用。\n3. 边缘利基 申请Y Combinator的大多数小组都有一个共同的问题：选择一个小的、模糊的利基市场，希望能避免竞争。\n如果你看小孩子玩运动，你会注意到在某个年龄以下，他们害怕球。当球接近他们时，他们的本能是避开它。作为一个八岁的外野手，我没有接住多少球，因为每当一个高飞球飞向我这边时，我过去常常闭上眼睛，举起手套更多是为了保护，而不是希望能抓住它。\n选择边缘项目相当于我八岁时处理高飞球的策略。如果你做出任何好东西，你都会有竞争对手，所以你最好面对这一点。你只能通过避免好主意来避免竞争。\n我认为这种从大问题上退缩大多是无意识的。这并不是人们想到宏伟的想法但决定追求较小的想法，因为它们似乎更安全。你的无意识甚至不会让你想到宏伟的想法。所以解决方案可能是思考想法而不涉及自己。对其他人来说，作为创业公司，什么是个好主意？\n4. 衍生想法 我们收到的许多申请都是模仿某些现有公司的。这是想法的一个来源，但不是最好的。如果你看成功创业公司的起源，很少有是模仿其他创业公司开始的。他们的想法从哪里来？通常来自创始人识别的某些具体、未解决的问题。\n我们的创业公司为制作在线商店制作软件。当我们开始时，还没有；你可以订购的少数几个网站是由网络顾问以巨大成本手工制作的。我们知道，如果网上购物真正起飞，这些网站将必须由软件生成，所以我们写了一些。相当直接。\n看起来最好的要解决的问题是对你个人有影响的问题。苹果公司的发生是因为Steve Wozniak想要一台电脑，谷歌是因为Larry和Sergey在网上找不到东西，Hotmail是因为Sabeer Bhatia和Jack Smith无法在工作中交换电子邮件。\n所以不要复制Facebook，加上一些Facebook理应忽略的变化，而是从另一个方向寻找想法。不要从公司开始，回溯到他们解决的问题，而是寻找问题，想象可能解决它们的创业公司。[2] 人们抱怨什么？你希望有什么东西存在？\n5. 顽固 在某些领域，成功的方法是对你想要实现的目标有愿景，无论遇到什么挫折都坚持到底。创业公司不是其中之一。坚持愿景的方法适用于赢得奥运金牌之类的事情，那里的问题定义明确。创业公司更像是科学，你需要跟随线索走到哪里。\n所以不要太执着于你原来的计划，因为它很可能是错的。大多数成功的创业公司最终做的事情与他们最初打算的大不相同——通常如此不同，以至于甚至不像是同一家公司。你必须准备好在更好的想法出现时看到它。而最困难的部分通常是放弃你的旧想法。\n但对新思想的开放性必须调整得恰到好处。每周切换到一个新想法同样致命。是否有某种你可以使用的外部测试？一个是询问这些想法是否代表某种进展。如果在每个新想法中，你能够重用为前几个想法构建的大部分内容，那么你可能处在一个收敛的过程中。而如果你不断从头开始，那是个坏迹象。\n幸运的是，有一个人你可以寻求建议：你的用户。如果你正在考虑转向某个新方向，而你的用户似乎对此感到兴奋，这可能是个好赌注。\n6. 雇佣糟糕的程序员 我忘记在早期版本中包含这一点，因为我认识的几乎所有创始人都是程序员。这对他们来说不是严重的问题。他们可能意外地雇佣了不好的人，但这不会杀死公司。在紧要关头，他们自己可以做任何需要的事情。\n但当我考虑90年代电子商务业务中杀死大多数创业公司的是什么时，是糟糕的程序员。许多这些公司是由商人创办的，他们认为创业公司的工作方式是你有聪明的想法，然后雇佣程序员来实现它。这实际上比听起来难得多——几乎不可能，因为商人无法分辨哪些是好的程序员。他们甚至没有机会接触到最好的，因为没有人真正优秀的人愿意去实现商人愿景的工作。\n在实践中，发生的是商人选择他们认为的好程序员（他的简历上说他是微软认证开发人员），但事实并非如此。然后他们困惑地发现他们的创业公司像二战轰炸机一样蹒跚而行，而他们的竞争对手像喷气式战斗机一样呼啸而过。这种创业公司与大公司处于相同的位置，但没有优势。\n那么如果你不是程序员，如何选择好的程序员？我认为没有答案。我本想说你必须找到一个好程序员来帮助你雇佣人。但如果你不能识别好的程序员，你甚至怎么做？\n7. 选择错误的平台 一个相关的问题（因为它往往是由糟糕的程序员完成的）是选择错误的平台。例如，我认为泡沫期间的许多创业公司因为决定在Windows上构建基于服务器的应用程序而杀死了自己。Hotmail在微软收购后仍然在FreeBSD上运行了多年，大概是因为Windows无法处理负载。如果Hotmail的创始人选择使用Windows，他们就会被淹没。\nPayPal只是勉强避开了这个子弹。在与X.com合并后，新CEO想切换到Windows——即使在PayPal联合创始人Max Levchin表明他们的软件在Windows上的扩展效果只有Unix的1%之后。幸运的是，PayPal更换了CEO而不是平台。\n平台是一个模糊的词。它可能意味着操作系统，或编程语言，或在编程语言之上构建的\u0026quot;框架\u0026rdquo;。它暗示着既支持又限制的东西，就像房子的基础。\n平台可怕的是，总有一些对外人来说似乎是好的、负责任的选择，然而，就像90年代的Windows一样，如果你选择它们，它们会摧毁你。Java小程序可能是最引人注目的例子。这被认为是交付应用程序的新方式。大概它杀死了几乎所有相信这一点的创业公司100%。\n你如何选择正确的平台？通常的方法是雇佣好的程序员并让他们选择。但如果你不是程序员，你可以使用一个技巧：访问顶尖的计算机科学系，看看他们在研究项目中使用什么。\n8. 发布缓慢 各种规模的公司都很难完成软件。这是媒介固有的；软件总是85%完成。需要努力才能推动这一点并将某些东西发布给用户。[3]\n创业公司为延迟发布找各种借口。大多数都等同于人们在日常生活中拖延时使用的借口。有需要先发生的事情。也许。但如果软件100%完成并准备在按钮按下时发布，他们还会在等待吗？\n快速发布的一个原因是它迫使你实际完成一定量的工作。直到发布，任何东西都没有真正完成；你可以从发布任何东西时总是涉及的工作热潮中看到这一点，无论你认为它完成得多好。你需要发布的另一个原因是，只有通过将你的想法与用户碰撞，你才能完全理解它。\n几个不同的问题表现为发布延迟：工作太慢；没有真正理解问题；害怕必须处理用户；害怕被评判；处理太多不同的事情；过度完美主义。幸运的是，你可以通过强制自己相当快速地发布一些东西的简单权宜之计来对抗所有这些。\n9. 发布太早 发布缓慢可能杀死的创业公司比发布太快的多一百倍，但确实可能发布得太快。这里的危险是你毁了你的声誉。你发布一些东西，早期采用者试用它，如果它不好，他们可能永远不会回来。\n那么发布需要的最低限度是什么？我们建议创业公司思考他们计划做什么，识别一个既(a)本身有用又(b)可以增量扩展到整个项目的核心，然后尽快完成它。\n这与我（和许多其他程序员）用来编写软件的方法相同。考虑总体目标，然后从编写做任何有用事情的最小子集开始。如果它是一个子集，你无论如何都必须编写它，所以在最坏的情况下你不会浪费你的时间。但更有可能的是，你会发现实现一个工作子集既有利于士气，也帮助你更清楚地看到其余部分应该做什么。\n你需要给留下深刻印象的早期采用者相当宽容。他们不期望新发布的产品做所有事情；它只需要做某件事。\n10. 没有特定的用户在脑海 如果你不理解用户，你就无法建立用户喜欢的东西。我之前提到最成功的创业公司似乎都是从试图解决创始人遇到的问题开始的。也许这里有个规则：也许你创造的财富与你对要解决的问题的理解程度成正比，而你理解最好的问题是你自己的。[4]\n",
    "description": "",
    "tags": ["创业公司","错误","失败","企业家精神","商业建议"],
    "categories": [],
    "content": "→ English Version\n杀死创业公司的18个错误 2006年10月\n在最近一次演讲后的问答环节，有人问是什么导致创业公司失败。我在那里呆呆地站了几秒钟后才意识到，这其实是个有点诡计性的问题。这相当于问如何让创业公司成功——如果你避免了所有失败的原因，你就会成功——而这个问题太大，无法即兴回答。\n后来我意识到，从这个角度来看问题可能会有所帮助。如果你有一份所有不应该做的事情的清单，你就可以通过否定这些来变成成功的秘诀。而且这种形式的清单在实践中可能更有用。抓住自己做了不该做的事情，比总是记得要做应该做的事情要容易。[1]\n从某种意义上说，只有一个错误会杀死创业公司：没有做出用户想要的东西。如果你做出了用户想要的东西，无论你做了什么或没做什么，你可能会没事。而如果你没有做出用户想要的东西，那么无论你做了什么或没做什么，你都死定了。所以实际上，这是18个导致创业公司无法做出用户想要的东西的因素列表。几乎所有的失败都是通过这个漏斗的。\n1. 单一创始人 你有没有注意到成功的创业公司很少是由一个人创立的？即使是你认为只有一个创始人的公司，比如Oracle，通常也有多个创始人。这不太可能是巧合。\n只有一个创始人有什么问题？首先，这是不信任票。这可能意味着创始人无法说服他的任何一个朋友和他一起创业公司。这相当令人担忧，因为他的朋友是最了解他的人。\n但即使创始人的朋友都错了，公司是个好赌注，他仍然处于劣势。创业公司对一个人来说太难了。即使你能自己完成所有工作，你也需要同事一起集思广益，说服你放弃愚蠢的决定，并在事情出错时让你振作起来。\n最后一点可能是最重要的。创业公司的低谷是如此之低，几乎没有人能够独自承受。当你有多个创始人时，团队精神将他们联系在一起，这似乎违反了守恒定律。每个人都在想\u0026quot;我不能让我的朋友们失望。\u0026ldquo;这是人性中最强大的力量之一，而只有一个创始人时，这种力量就缺失了。\n2. 糟糕的地理位置 创业公司在一些地方繁荣，而在其他地方则不然。硅谷占主导地位，其次是波士顿，然后是西雅图、奥斯汀、丹佛和纽约。在那之后就不多了。即使在纽约，人均创业公司数量可能只有硅谷的二十分之一。在休斯顿、芝加哥和底特律这样的城镇里，这个数量小到无法测量。\n为什么下降如此之快？可能与其他行业的原因相同。美国第六大时尚中心是什么？第六大石油、金融或出版中心？无论它们是什么，它们可能离顶峰太远了，甚至称它们为中心都是误导的。\n城市为何成为创业中心是个有趣的问题，但创业公司在那里繁荣的原因可能与其他行业相同：那就是专家所在的地方。标准更高；人们更同情你所做的事情；你想要雇用的人想住在那里；配套产业在那里；你在偶然会议中遇到的人从事同一个行业。谁知道这些因素如何结合来促进硅谷的创业公司并压制底特律的创业公司，但从每个地区的人均创业公司数量来看，很明显它们确实在起作用。\n3. 边缘利基 申请Y Combinator的大多数小组都有一个共同的问题：选择一个小的、模糊的利基市场，希望能避免竞争。\n如果你看小孩子玩运动，你会注意到在某个年龄以下，他们害怕球。当球接近他们时，他们的本能是避开它。作为一个八岁的外野手，我没有接住多少球，因为每当一个高飞球飞向我这边时，我过去常常闭上眼睛，举起手套更多是为了保护，而不是希望能抓住它。\n选择边缘项目相当于我八岁时处理高飞球的策略。如果你做出任何好东西，你都会有竞争对手，所以你最好面对这一点。你只能通过避免好主意来避免竞争。\n我认为这种从大问题上退缩大多是无意识的。这并不是人们想到宏伟的想法但决定追求较小的想法，因为它们似乎更安全。你的无意识甚至不会让你想到宏伟的想法。所以解决方案可能是思考想法而不涉及自己。对其他人来说，作为创业公司，什么是个好主意？\n4. 衍生想法 我们收到的许多申请都是模仿某些现有公司的。这是想法的一个来源，但不是最好的。如果你看成功创业公司的起源，很少有是模仿其他创业公司开始的。他们的想法从哪里来？通常来自创始人识别的某些具体、未解决的问题。\n我们的创业公司为制作在线商店制作软件。当我们开始时，还没有；你可以订购的少数几个网站是由网络顾问以巨大成本手工制作的。我们知道，如果网上购物真正起飞，这些网站将必须由软件生成，所以我们写了一些。相当直接。\n看起来最好的要解决的问题是对你个人有影响的问题。苹果公司的发生是因为Steve Wozniak想要一台电脑，谷歌是因为Larry和Sergey在网上找不到东西，Hotmail是因为Sabeer Bhatia和Jack Smith无法在工作中交换电子邮件。\n所以不要复制Facebook，加上一些Facebook理应忽略的变化，而是从另一个方向寻找想法。不要从公司开始，回溯到他们解决的问题，而是寻找问题，想象可能解决它们的创业公司。[2] 人 …"
  },{
    "title": "权力",
    "url": "/paul_graham/essays_zh/pow/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n权力 2017年1月\n那些有权势但缺乏魅力的人往往会被人讨厌。他们的权势使他们成为批评的目标，而他们又没有足够的魅力来化解这些批评。这就是希拉里·克林顿的问题。对于任何更擅长建设而不是应酬的CEO来说，这也往往是个问题。然而，建设型CEO（像希拉里一样）可能是最适合这个职位的人。\n我认为这个问题没有任何解决方案。这是人性。我们最多只能认识到这种情况正在发生，并理解成为批评的磁石有时并不表示某人是个错误的人选，反而说明他们是正确的人选。\n",
    "description": "",
    "tags": ["权力","魅力","领导力","人性"],
    "categories": [],
    "content": "→ English Version\n权力 2017年1月\n那些有权势但缺乏魅力的人往往会被人讨厌。他们的权势使他们成为批评的目标，而他们又没有足够的魅力来化解这些批评。这就是希拉里·克林顿的问题。对于任何更擅长建设而不是应酬的CEO来说，这也往往是个问题。然而，建设型CEO（像希拉里一样）可能是最适合这个职位的人。\n我认为这个问题没有任何解决方案。这是人性。我们最多只能认识到这种情况正在发生，并理解成为批评的磁石有时并不表示某人是个错误的人选，反而说明他们是正确的人选。\n"
  },{
    "title": "杰西卡·利文斯顿",
    "url": "/paul_graham/essays_zh/jessica/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n杰西卡·利文斯顿 2015年11月\n几个月前一篇关于Y Combinator的文章说早期它是一场\u0026quot;独角戏\u0026quot;。可悲的是，读到这种东西很常见。但这种描述的问题不仅是不公平。它还是误导性的。YC最新颖的大部分内容都归功于杰西卡·利文斯顿。如果你不了解她，你就不了解YC。所以让我告诉你一些关于杰西卡的事情。\nYC有4位创始人。杰西卡和我某天晚上决定创办它，第二天我们招募了我的朋友罗伯特·莫里斯和特雷弗·布莱克威尔。杰西卡和我日常运营YC，罗伯特和特雷弗阅读申请并与我们一起进行面试。\n当我们开始YC时，杰西卡和我已经在约会。起初我们试图对此表现得\u0026quot;专业\u0026quot;，意思是试图隐藏它。回想起来这似乎很荒谬，我们很快就放弃了这种伪装。而杰西卡和我是一对夫妻这是YC成为现在样子的重要原因。YC感觉像一个家庭。早期的创始人大多年轻。我们每周一起吃一次晚饭，前几年由我做饭。我们的第一个建筑曾经是私人住宅。整体氛围与沙山路风险投资公司的办公室惊人地不同，而且完全是更好的方面。有一种每个人走进来都能感受到的真实性。这不仅仅意味着人们信任我们。这是灌输给创业公司的完美品质。真实性是YC在创始人中寻找的最重要的事情之一，不仅因为伪造者和机会主义者令人讨厌，而且因为真实性是最成功的创业公司与其他公司区别开来的主要因素之一。\n早期的YC是一个家庭，杰西卡是它的母亲。她定义的文化是YC最重要的创新之一。文化在任何组织中都很重要，但在YC，文化不仅仅是我们构建产品时的行为方式。在YC，文化就是产品。\n杰西卡在另一个意义上也是母亲：她有最终决定权。我们作为组织做的一切都先经过她——资助谁，对公众说什么，如何与其他公司打交道，雇佣谁，一切。\n在我们有孩子之前，YC或多或少就是我们的生活。工作时间和非工作时间之间没有真正的区别。我们一直在谈论YC。虽然有些企业让它们感染你的私人生活可能会很乏味，但我们喜欢这样。我们创办YC是因为这是我们感兴趣的事情。而我们试图解决的一些问题难度无穷。如何识别好的创始人？你可以谈论这个问题多年，我们确实这么做了；我们仍然在这样做。\n我有些事情比杰西卡做得好，她有些事情比我做得好。她最擅长的事情之一是判断人。她是那些具有品格X光视觉的罕见个体之一。她几乎可以立即看穿任何类型的伪造者。她在YC内的绰号是社交雷达，她的这种特殊能力对于使YC成为现在的样子至关重要。你选择创业公司的阶段越早，你越是在选择创始人。后期阶段的投资者可以试用产品并查看增长数字。在YC投资的阶段，通常既没有产品也没有数字。\n其他人认为YC对技术未来有一些特殊见解。大多时候我们拥有苏格拉底声称的那种见解：我们至少知道我们一无所知。使YC成功的是能够选择好的创始人。我们认为Airbnb是个坏主意。我们资助它是因为我们喜欢创始人。\n在面试期间，罗伯特、特雷弗和我会用技术问题轰炸申请人。杰西卡主要观察。很多申请人可能把她看作某种秘书，特别是早期，因为她是出去迎接每个新群体的人，而且她问的问题不多。她对此不在意。如果人们不注意她，她更容易观察人。但面试后，我们三个人会转向杰西卡问\u0026quot;社交雷达说什么？\u0026quot;[1]\n面试时有社交雷达不仅是我们选择会成功的创始人的方式。也是我们选择好人的方式。起初我们这样做是因为情不自禁。想象一下拥有品格X光视觉会是什么感觉。与坏人在一起会让人无法忍受。所以我们拒绝资助那些品格有疑问的创始人，即使我们认为他们会成功。\n虽然我们最初出于自我放纵这样做，但结果证明对YC非常有价值。我们在开始时没有意识到，但我们选择的人将成为YC校友网络。一旦我们选择了他们，除非他们做了真正令人发指的事情，他们将成为其中的一部分终生。有些人现在认为YC的校友网络是其最有价值的特性。我个人认为YC的建议也相当不错，但校友网络肯定是最有价值的特性之一。对于这么大的群体，信任和互助水平是显著的。而杰西卡是主要原因。\n（正如我们后来学到的，拒绝那些品格有疑问的人可能几乎没有成本，因为创始人的好坏和他们做得如何不是正交的。如果坏创始人成功了，他们倾向于早卖。最成功的创始人几乎都是好人。）\n如果杰西卡对YC如此重要，为什么没有更多人意识到这一点？部分原因是我是个作家，作家总是获得不成比例的关注。YC的品牌最初是我的品牌，我们的申请人是读过我文章的人。但还有另一个原因：杰西卡讨厌关注。与记者交谈让她紧张。演讲的想法让她瘫痪。甚至在我们的婚礼上她也不舒服，因为新娘总是注意力的中心。[2]\n她讨厌关注不仅仅是因为她害羞，而是因为它干扰了社交雷达。她无法做自己。当每个人都在看着你时，你无法观察人。\n关注让她担忧的另一个原因是她讨厌吹嘘。在她做的任何公开可见的事情中，她最大的恐惧（在明显的恐惧即它会糟糕之后）是它会显得炫耀。她说过于谦虚是女性的常见问题。但在她的情况下，这不仅仅是如此。她对炫耀的厌恶如此强烈，几乎是一种恐惧症。\n她也讨厌争吵。她做不到；她只是关闭。不幸的是，作为组织的公众人物有很多争吵。\n所以虽然杰西卡比任何人都使YC独特，但使她能够做到这一点的品质意味着她倾向于被从YC历史中写出去。每个人都买了PG创办YC而他妻子只是有点帮助的说法。甚至YC的仇恨者也买这个说法。几年前当人们攻击我们没有资助更多女性创始人（比实际存在的多）时，他们都把YC视为与PG相同。承认杰西卡在YC的中心作用会破坏叙事。\n杰西卡对人们指责她的公司性别歧视感到愤怒。我从未见她对任何事情如此愤怒。但她没有反驳他们。没有公开。私下有很多脏话。她写了三篇关于女性创始人问题的独立文章。但她永远无法让自己发表其中任何一篇。她看到了这场辩论中的恶毒程度，她退缩了。[3]\n这不仅仅是因为她不喜欢争吵。她对品格如此敏感，以至于即使与不诚实的人争吵也让她反感。与点击诱饵记者或推特巨魔混在一起的想法对她来说不仅可怕，而且令人厌恶。\n但杰西卡知道她作为成功的女性创始人的例子会鼓励更多女性创办公司，所以去年她做了YC从未做过的事情，雇佣了一家公关公司来为她安排一些采访。在她做的第一次采访中，记者忽视了她对创业公司的见解，把它变成了一个耸人听闻的故事，说某个家伙在她等着在酒吧见面的地方试图与她搭讪。杰西卡感到羞辱，部分是因为那家伙没有做错什么，但更多是因为这个故事把她当作一个仅仅因为是女性而重要的受害者，而不是湾区最有知识的投资者之一。\n之后她告诉公关公司停止。\n你不会在媒体上听到关于杰西卡取得的成就。所以让我告诉你杰西卡取得了什么成就。Y Combinator根本上是一个人的联结，像一所大学。它不制造产品。定义它的是人。杰西卡比任何人都更精心策划和培育了这群人。从这个意义上说，她字面上创造了YC。\n杰西卡比任何人都更了解创业公司创始人的品质。她庞大的数据集和X光视觉在这方面是完美的风暴。创始人的品质是创业公司表现的最佳预测因素。而创业公司反过来又是成熟经济体增长的最重要来源。\n最了解成熟经济体增长最重要因素的人——那就是杰西卡·利文斯顿。这听起来不像是一个应该更出名的人吗？\n注释 [1] Harj Taggar提醒我，虽然杰西卡问的问题不多，但往往是重要的问题：\n\u0026ldquo;她总是善于嗅出团队或他们决心的任何危险信号，并以解除武装的方式提出正确的问题，这通常揭示了比创始人意识到的更多。\u0026rdquo;\n[2] 或者更准确地说，虽然她喜欢以获得对她所做事情的关注的方式获得关注，但她不喜欢以实时被观看的方式获得关注。不幸的是，不仅对她，而且对很多人来说，你获得多少前者很大程度上取决于你获得多少后者。\n顺便说一句，如果你在公共活动中看到杰西卡，你永远不会猜到她讨厌关注，因为（a）她非常有礼貌，（b）当她紧张时，她通过更多微笑来表达。\n[3] 像杰西卡这样的人的存在不仅是主流媒体需要学会承认的事情，也是女权主义者需要学会承认的事情。有不成功的女性不喜欢争吵。这意味着如果关于女性的公开对话由争吵组成，她们的声音将被沉默。\n有一种格莱欣定律的对话。如果对话达到某种不文明程度，更有思想的人开始离开。没有人比杰西卡更了解女性创始人。但不可能有人听到她坦率地谈论这个话题。她曾经试探性地涉足这个水域，反应如此暴力，以至于她决定\u0026quot;再也不\u0026quot;。\n感谢Sam Altman、Paul Buchheit、Patrick Collison、Daniel Gackle、Carolynn Levy、Jon Levy、Kirsty Nathoo、Robert Morris、Geoff Ralston和Harj Taggar阅读本文草稿。是的，还有杰西卡·利文斯顿，她让我删掉的内容出奇地少。\n",
    "description": "",
    "tags": ["杰西卡_利文斯顿","y_combinator","创业公司","创始人","科技女性","领导力","文化"],
    "categories": [],
    "content": "→ English Version\n杰西卡·利文斯顿 2015年11月\n几个月前一篇关于Y Combinator的文章说早期它是一场\u0026quot;独角戏\u0026quot;。可悲的是，读到这种东西很常见。但这种描述的问题不仅是不公平。它还是误导性的。YC最新颖的大部分内容都归功于杰西卡·利文斯顿。如果你不了解她，你就不了解YC。所以让我告诉你一些关于杰西卡的事情。\nYC有4位创始人。杰西卡和我某天晚上决定创办它，第二天我们招募了我的朋友罗伯特·莫里斯和特雷弗·布莱克威尔。杰西卡和我日常运营YC，罗伯特和特雷弗阅读申请并与我们一起进行面试。\n当我们开始YC时，杰西卡和我已经在约会。起初我们试图对此表现得\u0026quot;专业\u0026quot;，意思是试图隐藏它。回想起来这似乎很荒谬，我们很快就放弃了这种伪装。而杰西卡和我是一对夫妻这是YC成为现在样子的重要原因。YC感觉像一个家庭。早期的创始人大多年轻。我们每周一起吃一次晚饭，前几年由我做饭。我们的第一个建筑曾经是私人住宅。整体氛围与沙山路风险投资公司的办公室惊人地不同，而且完全是更好的方面。有一种每个人走进来都能感受到的真实性。这不仅仅意味着人们信任我们。这是灌输给创业公司的完美品质。真实性是YC在创始人中寻找的最重要的事情之一，不仅因为伪造者和机会主义者令人讨厌，而且因为真实性是最成功的创业公司与其他公司区别开来的主要因素之一。\n早期的YC是一个家庭，杰西卡是它的母亲。她定义的文化是YC最重要的创新之一。文化在任何组织中都很重要，但在YC，文化不仅仅是我们构建产品时的行为方式。在YC，文化就是产品。\n杰西卡在另一个意义上也是母亲：她有最终决定权。我们作为组织做的一切都先经过她——资助谁，对公众说什么，如何与其他公司打交道，雇佣谁，一切。\n在我们有孩子之前，YC或多或少就是我们的生活。工作时间和非工作时间之间没有真正的区别。我们一直在谈论YC。虽然有些企业让它们感染你的私人生活可能会很乏味，但我们喜欢这样。我们创办YC是因为这是我们感兴趣的事情。而我们试图解决的一些问题难度无穷。如何识别好的创始人？你可以谈论这个问题多年，我们确实这么做了；我们仍然在这样做。\n我有些事情比杰西卡做得好，她有些事情比我做得好。她最擅长的事情之一是判断人。她是那些具有品格X光视觉的罕见个体之一。她几乎可以立即看穿任何类型的伪造者。她在YC内的绰号是社交雷达，她的这种特殊能力对于使YC成为现在的样子至关重要。你选择创业公司的阶段越早，你越是在选择创始人。后期阶段的投资者可以试用产品并查看增长数字。在YC投资的阶段，通常既没有产品也没有数字。\n其他人认为YC对技术未来有一些特殊见解。大多时候我们拥有苏格拉底声称的那种见解：我们至少知道我们一无所知。使YC成功的是能够选择好的创始人。我们认为Airbnb是个坏主意。我们资助它是因为我们喜欢创始人。\n在面试期间，罗伯特、特雷弗和我会用技术问题轰炸申请人。杰西卡主要观察。很多申请人可能把她看作某种秘书，特别是早期，因为她是出去迎接每个新群体的人，而且她问的问题不多。她对此不在意。如果人们不注意她，她更容易观察人。但面试后，我们三个人会转向杰西卡问\u0026quot;社交雷达说什么？\u0026quot;[1]\n面试时有社交雷达不仅是我们选择会成功的创始人的方式。也是我们选择好人的方式。起初我们这样做是因为情不自禁。想象一下拥有品格X光视觉会是什么感觉。与坏人在一起会让人无法忍受。所以我们拒绝资助那些品格有疑问的创始人，即使我们认为他们会成功。\n虽然我们最初出于自我放纵这样做，但结果证明对YC非常有价值。我们在开始时没有意识到，但我们选择的人将成为YC校友网络。一旦我们选择了他们，除非他们做了真正令人发指的事情，他们将成为其中的一部分终生。有些人现在认为YC的校友网络是其最有价值的特性。我个人认为YC的建议也相当不错，但校友网络肯定是最有价值的特性之一。对于这么大的群体，信任和互助水平是显著的。而杰西卡是主要原因。\n（正如我们后来学到的，拒绝那些品格有疑问的人可能几乎没有成本，因为创始人的好坏和他们做得如何不是正交的。如果坏创始人成功了，他们倾向于早卖。最成功的创始人几乎都是好人。）\n如果杰西卡对YC如此重要，为什么没有更多人意识到这一点？部分原因是我是个作家，作家总是获得不成比例的关注。YC的品牌最初是我的品牌，我们的申请人是读过我文章的人。但还有另一个原因：杰西卡讨厌关注。与记者交谈让她紧张。演讲的想法让她瘫痪。甚至在我们的婚礼上她也不舒服，因为新娘总是注意力的中心。[2]\n她讨厌关注不仅仅是因为她害羞，而是因为它干扰了社交雷达。她无法做自己。当每个人都在看着你时，你无法观察人。\n关注让她担忧的另一个原因是她讨厌吹嘘。在她做的任何公开可见的事情中，她最大的恐惧（在明显的恐惧即它会糟糕之后）是它会显 …"
  },{
    "title": "梯子之后",
    "url": "/paul_graham/essays_zh/ladder/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n梯子之后 2005年8月\n三十年前，人们应该沿着公司阶梯一路向上。现在这条规则不那么适用了。我们这一代想要提前获得报酬。我们不再为大公司开发产品以期望获得工作保障作为回报，而是在创业公司中自己开发产品，然后把它卖给大公司。至少我们想要期权。\n除其他外，这种转变造成了经济不平等迅速增加的表象。但实际上，这两种情况并不像经济统计中看起来那么不同。\n经济统计具有误导性，因为它们忽略了安全工作的价值。一个不会被解雇的轻松工作是值钱的；交换两者是最常见的腐败形式之一。闲职实际上是一种年金。只不过闲职不会出现在经济统计中。如果它们出现了，那么在实践中社会主义国家有显著的财富差距就会很清楚，因为它们通常有一类主要靠资历支付且永远不会被解雇的强大官僚。\n虽然不是闲职，但公司阶梯上的职位是真正有价值的，因为大公司努力不解雇人，并且主要基于资历从内部提拔。公司阶梯上的职位价值类似于公司估值中非常真实的\u0026quot;商誉\u0026quot;元素。这意味着人们可以期望未来的高薪工作。\n公司阶梯衰落的主要原因之一是始于1980年代的收购趋势。为什么要浪费时间爬一个可能在到达顶峰之前就消失的梯子？\n而且，并非巧合的是，公司阶梯是早期公司掠夺者如此成功的原因之一。不仅经济统计忽略了安全工作的价值。公司资产负债表也是如此。将1980年代的公司分割并出售其零件有利可图的原因之一是，它们没有正式承认对那些做过好工作并期望在时机成熟时获得高薪管理职位作为回报的员工的隐性债务。\n在电影《华尔街》中，戈登·盖柯嘲笑一家副总裁过多的公司。但该公司可能并不像看起来那么腐败；那些副总裁的舒适工作可能是对早期工作的报酬。\n我更喜欢新模式。一方面，将工作作为奖励似乎是个坏计划。很多优秀的工程师因此变成了糟糕的管理者。而且旧制度意味着人们必须处理更多的公司政治，以保护他们在阶梯职位上投入的工作。\n新系统的主要缺点是它涉及更多风险。如果你在创业公司而不是大公司中开发想法，在你完成之前，任何数量的随机因素都可能让你沉没。但也许老一辈会嘲笑我说我们做事的方式风险更大。毕竟，大公司内部的项目总是因为高层的任意决定而被取消。我父亲的整个行业（增殖反应堆）就是这样消失的。\n无论好坏，公司阶梯的想法可能永远消失了。新模式似乎更具流动性，也更有效率。但在财务上，它的变化比人们想象的要小。我们的父辈没有那么愚蠢。\n罗马尼亚语翻译 | 日语翻译\n",
    "description": "",
    "tags": ["公司阶梯","职业","创业","经济不平等","工作文化","风险","工作保障"],
    "categories": [],
    "content": "→ English Version\n梯子之后 2005年8月\n三十年前，人们应该沿着公司阶梯一路向上。现在这条规则不那么适用了。我们这一代想要提前获得报酬。我们不再为大公司开发产品以期望获得工作保障作为回报，而是在创业公司中自己开发产品，然后把它卖给大公司。至少我们想要期权。\n除其他外，这种转变造成了经济不平等迅速增加的表象。但实际上，这两种情况并不像经济统计中看起来那么不同。\n经济统计具有误导性，因为它们忽略了安全工作的价值。一个不会被解雇的轻松工作是值钱的；交换两者是最常见的腐败形式之一。闲职实际上是一种年金。只不过闲职不会出现在经济统计中。如果它们出现了，那么在实践中社会主义国家有显著的财富差距就会很清楚，因为它们通常有一类主要靠资历支付且永远不会被解雇的强大官僚。\n虽然不是闲职，但公司阶梯上的职位是真正有价值的，因为大公司努力不解雇人，并且主要基于资历从内部提拔。公司阶梯上的职位价值类似于公司估值中非常真实的\u0026quot;商誉\u0026quot;元素。这意味着人们可以期望未来的高薪工作。\n公司阶梯衰落的主要原因之一是始于1980年代的收购趋势。为什么要浪费时间爬一个可能在到达顶峰之前就消失的梯子？\n而且，并非巧合的是，公司阶梯是早期公司掠夺者如此成功的原因之一。不仅经济统计忽略了安全工作的价值。公司资产负债表也是如此。将1980年代的公司分割并出售其零件有利可图的原因之一是，它们没有正式承认对那些做过好工作并期望在时机成熟时获得高薪管理职位作为回报的员工的隐性债务。\n在电影《华尔街》中，戈登·盖柯嘲笑一家副总裁过多的公司。但该公司可能并不像看起来那么腐败；那些副总裁的舒适工作可能是对早期工作的报酬。\n我更喜欢新模式。一方面，将工作作为奖励似乎是个坏计划。很多优秀的工程师因此变成了糟糕的管理者。而且旧制度意味着人们必须处理更多的公司政治，以保护他们在阶梯职位上投入的工作。\n新系统的主要缺点是它涉及更多风险。如果你在创业公司而不是大公司中开发想法，在你完成之前，任何数量的随机因素都可能让你沉没。但也许老一辈会嘲笑我说我们做事的方式风险更大。毕竟，大公司内部的项目总是因为高层的任意决定而被取消。我父亲的整个行业（增殖反应堆）就是这样消失的。\n无论好坏，公司阶梯的想法可能永远消失了。新模式似乎更具流动性，也更有效率。但在财务上，它的变化比人们想象的要小。我们的父辈没有那么愚蠢。\n罗马尼亚语翻译 | 日语翻译\n"
  },{
    "title": "检测偏见的一种方法",
    "url": "/paul_graham/essays_zh/bias/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n检测偏见的一种方法 2015年10月\n这对很多人来说会是个惊喜，但在某些情况下，可以在不了解申请者池的情况下检测选择过程中的偏见。这令人兴奋，因为除其他外，这意味着第三方可以使用这种技术来检测偏见，无论进行选择的人是否希望他们这样做。\n当满足以下条件时，你可以使用这种技术：(a) 你至少有一个被选申请者的随机样本，(b) 他们后续的表现被测量，并且 (c) 你比较的申请者群体有大致相同的能力分布。\n它是如何工作的？想想偏见的含义。选择过程对类型x的申请者有偏见意味着他们更难通过。这意味着类型x的申请者必须比非类型x的申请者更优秀才能被选中。[1] 这意味着通过选择过程的类型x申请者将比其他成功的申请者表现更好。如果测量了所有成功申请者的表现，你就会知道他们是否确实如此。\n当然，你用来测量表现的测试必须是有效的。特别是，它不能被你试图测量的偏见所失效。但在某些领域，表现是可以测量的，在这些领域检测偏见是直接的。想知道选择过程是否对某种类型的申请者有偏见吗？检查他们是否比其他人表现更好。这不仅仅是检测偏见的启发式方法。这就是偏见的含义。\n例如，许多人怀疑风险投资公司对女性创始人有偏见。这很容易检测：在他们的投资组合公司中，有女性创始人的初创公司是否比没有的表现更好？几个月前，一家风险投资公司（几乎肯定是无意的）发表了一项显示这种偏见的研究。第一轮资本发现，在其投资组合公司中，有女性创始人的初创公司比没有的表现高出63%。[2]\n我一开始说这种技术会让很多人感到惊讶的原因是，我们很少看到这种类型的分析。我确信第一轮资本会惊讶地发现他们进行了一项。我怀疑那里有人意识到，通过将样本限制在自己的投资组合中，他们产生的不是初创公司趋势的研究，而是他们在选择公司时自身偏见的研究。\n我预测我们将来会看到这种技术被更多使用。进行此类研究所需的信息越来越容易获得。关于谁申请某事的数据通常由选择他们的组织严密保护，但如今关于谁被选中的数据通常对任何愿意花力气聚合它的人都是公开可用的。\n注释 [1] 如果选择过程从不同类型的申请者中寻找不同的东西，这种技术就不会起作用——例如，如果雇主基于能力雇佣男性，但基于外貌雇佣女性。\n[2] 正如Paul Buchheit指出的，第一轮资本将他们最成功的投资Uber排除在研究之外。虽然从某些类型的研究中排除异常值是有道理的，但初创公司投资回报的研究（全部关于命中异常值）并不是其中之一。\n感谢Sam Altman、Jessica Livingston和Geoff Ralston阅读本文的草稿。\n相关 阿拉伯语翻译 瑞典语翻译\n",
    "description": "",
    "tags": ["偏见","选择","表现","测量","风险投资","歧视"],
    "categories": [],
    "content": "→ English Version\n检测偏见的一种方法 2015年10月\n这对很多人来说会是个惊喜，但在某些情况下，可以在不了解申请者池的情况下检测选择过程中的偏见。这令人兴奋，因为除其他外，这意味着第三方可以使用这种技术来检测偏见，无论进行选择的人是否希望他们这样做。\n当满足以下条件时，你可以使用这种技术：(a) 你至少有一个被选申请者的随机样本，(b) 他们后续的表现被测量，并且 (c) 你比较的申请者群体有大致相同的能力分布。\n它是如何工作的？想想偏见的含义。选择过程对类型x的申请者有偏见意味着他们更难通过。这意味着类型x的申请者必须比非类型x的申请者更优秀才能被选中。[1] 这意味着通过选择过程的类型x申请者将比其他成功的申请者表现更好。如果测量了所有成功申请者的表现，你就会知道他们是否确实如此。\n当然，你用来测量表现的测试必须是有效的。特别是，它不能被你试图测量的偏见所失效。但在某些领域，表现是可以测量的，在这些领域检测偏见是直接的。想知道选择过程是否对某种类型的申请者有偏见吗？检查他们是否比其他人表现更好。这不仅仅是检测偏见的启发式方法。这就是偏见的含义。\n例如，许多人怀疑风险投资公司对女性创始人有偏见。这很容易检测：在他们的投资组合公司中，有女性创始人的初创公司是否比没有的表现更好？几个月前，一家风险投资公司（几乎肯定是无意的）发表了一项显示这种偏见的研究。第一轮资本发现，在其投资组合公司中，有女性创始人的初创公司比没有的表现高出63%。[2]\n我一开始说这种技术会让很多人感到惊讶的原因是，我们很少看到这种类型的分析。我确信第一轮资本会惊讶地发现他们进行了一项。我怀疑那里有人意识到，通过将样本限制在自己的投资组合中，他们产生的不是初创公司趋势的研究，而是他们在选择公司时自身偏见的研究。\n我预测我们将来会看到这种技术被更多使用。进行此类研究所需的信息越来越容易获得。关于谁申请某事的数据通常由选择他们的组织严密保护，但如今关于谁被选中的数据通常对任何愿意花力气聚合它的人都是公开可用的。\n注释 [1] 如果选择过程从不同类型的申请者中寻找不同的东西，这种技术就不会起作用——例如，如果雇主基于能力雇佣男性，但基于外貌雇佣女性。\n[2] 正如Paul Buchheit指出的，第一轮资本将他们最成功的投资Uber排除在研究之外。虽然从某些类型的研究中排除异常值是有道理的，但初创公司投资回报的研究（全部关于命中异常值）并不是其中之一。\n感谢Sam Altman、Jessica Livingston和Geoff Ralston阅读本文的草稿。\n相关 阿拉伯语翻译 瑞典语翻译\n"
  },{
    "title": "模拟财富税",
    "url": "/paul_graham/essays_zh/wtax/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n模拟财富税 2020年8月\n一些政治家提议在收入和资本利得税之外引入财富税。让我们尝试模拟不同水平的财富税的效果，看看它们对创业创始人在实践中意味着什么。\n假设你在二十多岁时创办了一家成功的创业公司，然后再生活60年。财富税会消耗你多少股票？\n如果财富税适用于你所有的资产，很容易计算其效果。1%的财富税意味着你每年保留99%的股票。60年后，你剩下的股票比例将是.99^60，即.547。所以直接的1%财富税意味着政府在你一生中将拿走45%的股票。\n（显然，失去股票并不意味着变得更贫穷，除非每股价值增长低于财富税税率。）\n以下是政府在60年内以各种水平的财富税拿走的股票数量：\n财富税 政府拿走 0.1% 6% 0.5% 26% 1.0% 45% 2.0% 70% 3.0% 84% 4.0% 91% 5.0% 95% 财富税通常有一个开始适用的门槛。高门槛会有多大差异？为了模拟这一点，我们需要对你的股票初始价值和增长率做一些假设。\n假设你的股票最初价值200万美元，公司的轨迹如下：你的股票价值在2年内增长3倍，然后在2年内增长2倍，然后在2年内增长50%，之后你只获得典型的上市公司增长率，我们称之为8%。[1] 假设财富税门槛是5000万美元。现在政府拿走多少股票？\n财富税 政府拿走 0.1% 5% 0.5% 23% 1.0% 41% 2.0% 65% 3.0% 79% 4.0% 88% 5.0% 93% 起初似乎令人惊讶的是，如此明显的小税率会产生如此戏剧性的效果。2%的财富税加上5000万美元的门槛拿走了成功创始人大约三分之二的股票。\n财富税有如此戏剧性效果的原因是它们一次又一次地应用于相同的钱。收入税每年发生，但只适用于那一年的收入。而如果你在获得某些资产后生活60年，财富税将对相同的资产征税60次。财富税是复合的。\n注释 [1] 在实践中，最终这8%的一部分会以股息形式出现，股息在发放时作为收入征税，所以这个模型实际上代表了创始人最乐观的情况。\n",
    "description": "",
    "tags": ["财富税","经济学","创业公司","税收","政策"],
    "categories": [],
    "content": "→ English Version\n模拟财富税 2020年8月\n一些政治家提议在收入和资本利得税之外引入财富税。让我们尝试模拟不同水平的财富税的效果，看看它们对创业创始人在实践中意味着什么。\n假设你在二十多岁时创办了一家成功的创业公司，然后再生活60年。财富税会消耗你多少股票？\n如果财富税适用于你所有的资产，很容易计算其效果。1%的财富税意味着你每年保留99%的股票。60年后，你剩下的股票比例将是.99^60，即.547。所以直接的1%财富税意味着政府在你一生中将拿走45%的股票。\n（显然，失去股票并不意味着变得更贫穷，除非每股价值增长低于财富税税率。）\n以下是政府在60年内以各种水平的财富税拿走的股票数量：\n财富税 政府拿走 0.1% 6% 0.5% 26% 1.0% 45% 2.0% 70% 3.0% 84% 4.0% 91% 5.0% 95% 财富税通常有一个开始适用的门槛。高门槛会有多大差异？为了模拟这一点，我们需要对你的股票初始价值和增长率做一些假设。\n假设你的股票最初价值200万美元，公司的轨迹如下：你的股票价值在2年内增长3倍，然后在2年内增长2倍，然后在2年内增长50%，之后你只获得典型的上市公司增长率，我们称之为8%。[1] 假设财富税门槛是5000万美元。现在政府拿走多少股票？\n财富税 政府拿走 0.1% 5% 0.5% 23% 1.0% 41% 2.0% 65% 3.0% 79% 4.0% 88% 5.0% 93% 起初似乎令人惊讶的是，如此明显的小税率会产生如此戏剧性的效果。2%的财富税加上5000万美元的门槛拿走了成功创始人大约三分之二的股票。\n财富税有如此戏剧性效果的原因是它们一次又一次地应用于相同的钱。收入税每年发生，但只适用于那一年的收入。而如果你在获得某些资产后生活60年，财富税将对相同的资产征税60次。财富税是复合的。\n注释 [1] 在实践中，最终这8%的一部分会以股息形式出现，股息在发放时作为收入征税，所以这个模型实际上代表了创始人最乐观的情况。\n"
  },{
    "title": "欢迎来到Lisp",
    "url": "/paul_graham/essays_zh/acl2txtt1748944359/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n欢迎来到Lisp 本章旨在让你尽快开始编程。到本章结束时，你将了解足够的Common Lisp知识来开始编写程序。\n2.1 形式 对于Lisp来说尤其如此，你通过使用它来学习它，因为Lisp是一种交互式语言。任何Lisp系统都包含一个称为toplevel的交互式前端。你将Lisp表达式输入到toplevel中，系统会显示它们的值。Lisp通常会显示一个提示符来告诉你它在等待你输入内容。许多Common Lisp实现使用\u0026gt;作为toplevel提示符。这就是我们在这里要使用的。\n最简单的Lisp表达式之一是整数。如果我们在提示符后输入1，\n\u0026gt; 1 1 \u0026gt; 系统将打印它的值，然后是另一个提示符，表示它准备好接受更多输入。在这种情况下，显示的值与我们输入的相同。像1这样的数字被称为求值为自身。\n当我们输入需要一些工作来求值的表达式时，生活变得更加有趣。例如，如果我们想要将两个数字相加，我们输入类似这样的内容：\n\u0026gt; (+ 2 3) 5 在表达式(+ 2 3)中，+被称为运算符，数字2和3被称为参数。在日常生活中，我们会将这个表达式写为2 + 3，但在Lisp中，我们将+运算符放在前面，后面跟着参数，整个表达式用一对括号括起来：(+ 2 3)。这被称为前缀表示法，因为运算符在前。\n这种写表达式的方式起初可能看起来很奇怪，但实际上这种表示法是Lisp最棒的特点之一。例如，如果我们想要将三个数字相加，在普通表示法中我们必须使用+两次，2 + 3 + 4，而在Lisp中我们只需添加另一个参数：(+ 2 3 4)\n我们通常使用+的方式是，它必须恰好有两个参数：一个在左边，一个在右边。前缀表示法的灵活性意味着，在Lisp中，+可以接受任意数量的参数，包括无参数：\n\u0026gt; (+) 0 \u0026gt; (+ 2) 2 \u0026gt; (+ 2 3) 5 \u0026gt; (+ 2 3 4) 9 \u0026gt; (+ 2 3 4 5) 14 因为运算符可以接受不同数量的参数，我们需要括号来表示表达式的开始和结束。表达式可以嵌套。也就是说，表达式中的参数本身可能是复杂的表达式：\n\u0026gt; (/ (- 7 1) (- 4 2)) 3 用英语来说，这是七减一，除以四减二。\n",
    "description": "",
    "tags": ["lisp","编程","教程","学习","技术"],
    "categories": [],
    "content": "→ English Version\n欢迎来到Lisp 本章旨在让你尽快开始编程。到本章结束时，你将了解足够的Common Lisp知识来开始编写程序。\n2.1 形式 对于Lisp来说尤其如此，你通过使用它来学习它，因为Lisp是一种交互式语言。任何Lisp系统都包含一个称为toplevel的交互式前端。你将Lisp表达式输入到toplevel中，系统会显示它们的值。Lisp通常会显示一个提示符来告诉你它在等待你输入内容。许多Common Lisp实现使用\u0026gt;作为toplevel提示符。这就是我们在这里要使用的。\n最简单的Lisp表达式之一是整数。如果我们在提示符后输入1，\n\u0026gt; 1 1 \u0026gt; 系统将打印它的值，然后是另一个提示符，表示它准备好接受更多输入。在这种情况下，显示的值与我们输入的相同。像1这样的数字被称为求值为自身。\n当我们输入需要一些工作来求值的表达式时，生活变得更加有趣。例如，如果我们想要将两个数字相加，我们输入类似这样的内容：\n\u0026gt; (+ 2 3) 5 在表达式(+ 2 3)中，+被称为运算符，数字2和3被称为参数。在日常生活中，我们会将这个表达式写为2 + 3，但在Lisp中，我们将+运算符放在前面，后面跟着参数，整个表达式用一对括号括起来：(+ 2 3)。这被称为前缀表示法，因为运算符在前。\n这种写表达式的方式起初可能看起来很奇怪，但实际上这种表示法是Lisp最棒的特点之一。例如，如果我们想要将三个数字相加，在普通表示法中我们必须使用+两次，2 + 3 + 4，而在Lisp中我们只需添加另一个参数：(+ 2 3 4)\n我们通常使用+的方式是，它必须恰好有两个参数：一个在左边，一个在右边。前缀表示法的灵活性意味着，在Lisp中，+可以接受任意数量的参数，包括无参数：\n\u0026gt; (+) 0 \u0026gt; (+ 2) 2 \u0026gt; (+ 2 3) 5 \u0026gt; (+ 2 3 4) 9 \u0026gt; (+ 2 3 4 5) 14 因为运算符可以接受不同数量的参数，我们需要括号来表示表达式的开始和结束。表达式可以嵌套。也就是说，表达式中的参数本身可能是复杂的表达式：\n\u0026gt; (/ (- 7 1) (- 4 2)) 3 用英语来说，这是七减一，除以四减二。\nLisp表示法的另一个美妙之处是：这就是全部了。所有Lisp表达式要么是原子，比如1，要么是列表，由零个或多个用括号括起来的表达式组成。这些都是有效的Lisp表达式：\n2 (+ 2 3) (+ 2 3 4) (/ (- 7 1) (- 4 2)) 正如我们将看到的，所有Lisp代码都采用这种形式。像C这样的语言有更复杂的语法：算术表达式使用中缀表示法；函数调用使用一种前缀表示法，参数用逗号分隔；表达式用分号分隔；代码块用大括号分隔。在Lisp中，我们使用单一的表示法来表达所有这些概念。\n2.2 求值 在上一节中，我们将表达式输入到toplevel中，Lisp显示了它们的值。在本节中，我们更仔细地看看表达式是如何求值的。\n在Lisp中，+是一个函数，像(+ 2 3)这样的表达式是一个函数调用。当Lisp求值函数调用时，它分两步进行：\n首先从左到右求值参数。在这种情况下，每个参数都求值为自身，所以参数的值分别是2和3。 参数的值被传递给由运算符命名的函数。在这种情况下，它是+函数，返回5。 如果任何参数本身是函数调用，它们会根据相同的规则求值。所以当(/ (- 7 1) (- 4 2))被求值时，会发生以下情况：\nLisp求值(- 7 1)：7求值为7，1求值为1。这些值被传递给函数-，返回6。 Lisp求值(- 4 2)：4求值为4，2求值为2。这些值被传递给函数-，返回2。 值6和2被发送给函数/，返回3。 并非Common Lisp中的所有运算符都是函数，但大多数都是。函数调用总是以这种方式求值。参数从左到右求值，它们的值被传递给函数，函数返回整个表达式的值。这被称为Common Lisp的求值规则。\n一个不遵循Common Lisp求值规则的运算符是quote。quote运算符是一个特殊运算符，意味着它有自己独特的求值规则。规则是：什么都不做。quote运算符接受一个参数，只是原样返回它：\n\u0026gt; (quote (+ 3 5)) (+ 3 5) 为了方便起见，Common Lisp将\u0026rsquo;定义为quote的缩写。你可以通过在任何表达式前面加上\u0026rsquo;来获得调用quote的效果：\n\u0026gt; \u0026#39;(+ 3 5) (+ 3 5) 使用缩写比写出整个quote表达式要常见得多。Lisp提供quote作为保护表达式不被求值的一种方式。下一节将解释这种保护如何有用。\n注意：这是ANSI Common Lisp的第2章，涵盖了基本的Lisp语 …"
  },{
    "title": "正确的固执",
    "url": "/paul_graham/essays_zh/persistence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n正确的固执 2024年7月\n成功的人往往很执着。新想法一开始往往行不通，但他们不会被吓倒。他们不断尝试，最终找到可行的方法。\n另一方面，单纯的固执是失败的根源。固执的人很讨厌。他们不听劝告。他们撞得头破血流却一事无成。\n但这两者之间真的有什么区别吗？执着的人和固执的人实际上行为不同吗？还是他们做着同样的事情，我们只是根据他们最终是否正确而将其标记为执着或固执？\n如果这是唯一的区别，那么这种区分就没有什么可学的。告诉某人要执着而不是固执，只是告诉他们要正确而不是错误，他们已经知道这一点。而如果执着和固执实际上是不同类型的行为，那么将它们区分开来就很有价值。[1]\n我和很多有决心的人交谈过，在我看来，他们是不同类型的行为。我经常在谈话后离开时想着\u0026quot;哇，那个人真有决心\u0026quot;或者\u0026quot;该死，那个人真固执\u0026quot;，我不认为我只是在谈论他们是否看起来正确。这是其中的一部分，但不是全部。\n固执的人有一些恼人的特质，不仅仅是因为犯了错误。他们不听劝告。而这对所有有决心的人来说并不都是如此。我想不出有谁比科利森兄弟更有决心，当你向他们指出问题时，他们不仅会听，而且带着一种近乎掠夺性的强度倾听。他们的船底有洞吗？可能没有，但如果有，他们想知道。\n大多数成功人士也是如此。当你不同意他们时，他们从未如此投入。而固执的人不想听你说话。当你指出问题时，他们的目光呆滞，回答听起来像在讨论教义的教条主义者。[2]\n执着和固执之所以看起来相似，是因为他们都很难被阻止。但他们在不同的意义上很难被阻止。执着的人就像引擎无法减速的船。固执的人就像舵无法转动的船。[3]\n在退化的情况下，它们无法区分：当解决问题只有一种方法时，你唯一的选择是是否放弃，执着和固执都说不。这大概就是为什么这两种情况在流行文化中经常被混淆。它假设问题很简单。但随着问题变得更加复杂，我们可以看出它们之间的区别。执着的人更看重决策树中高处的要点，而不是下方的次要要点，而固执的人则在整个树上 indiscriminately 地喷洒\u0026quot;不要放弃\u0026quot;。\n执着的人执着于目标。固执的人执着于他们如何实现目标的想法。\n更糟糕的是，这意味着他们往往会执着于最初解决问题的想法，尽管这些想法最少受到解决问题经验的影响。所以固执的人不仅仅是执着于细节，而且不成比例地可能执着于错误的细节。\n他们为什么会这样？固执的人为什么会固执？一种可能是他们不知所措。他们能力不强。他们接手了一个难题。他们立即陷入了困境。所以他们就像在摇晃的船只甲板上的人一样抓住最近的手柄。\n这是我最初的理论，但经过检验，它站不住脚。如果固执仅仅是因为不知所措的结果，你可以通过让执着的人解决更难的问题来让他们变得固执。但事实并非如此。如果你给科利森兄弟一个极其困难的问题来解决，他们不会变得固执。如果有什么变化，他们会变得不那么固执。他们会知道必须对任何事情持开放态度。\n同样，如果固执是由情况引起的，固执的人在解决更简单的问题时会停止固执。但他们不会。如果固执不是由情况引起的，那么它一定来自内心。它必须是一个人性格的特征。\n固执是对改变自己想法的反射性抵抗。这与愚蠢并不完全相同，但它们密切相关。随着相反证据的增加，对自己想法的反射性抵抗变成一种诱发的愚蠢。固执是一种不放弃的形式，容易被愚蠢的人实践。你不必考虑复杂的权衡；你只需站稳脚跟。它在一定程度上是有效的。\n固执对简单问题有效这一事实是一个重要线索。执着和固执不是对立面。它们之间的关系更像我们可以进行的两种呼吸类型之间的关系：有氧呼吸，以及我们从最遥远祖先那里继承的无氧呼吸。无氧呼吸是一个更原始的过程，但它有其用途。当你突然从威胁中跳开时，你使用的就是这个。\n固执的最佳量不是零。如果你对挫折的最初反应是不假思索的\u0026quot;我不会放弃\u0026quot;，这可能是好事，因为这有助于防止恐慌。但不假思索只能带你走这么远。一个人越向固执的连续体发展，解决难题的可能性就越小。[4]\n固执是一件简单的事情。动物也有。但事实证明，执着有一个相当复杂的内部结构。\n区分执着者的一个特质是他们的精力。冒着过于强调词语的风险，他们执着而不仅仅是抵抗。他们不断尝试事物。这意味着执着的人也必须有想象力。要不断尝试事物，你必须不断想出要尝试的事物。\n精力和想象力是一个美妙的组合。各自都能从对方那里得到最好的东西。精力为想象力产生的想法创造了需求，从而产生更多，而想象力为精力提供了去处。[5]\n仅仅拥有精力和想象力是相当罕见的。但要解决难题，你还需要另外三个品质：韧性、良好的判断力和对某种目标的专注。\n韧性意味着不会因挫折而摧毁士气。一旦问题达到一定规模，挫折是不可避免的，所以如果你不能从中恢复，你只能在小规模上做好工作。但韧性与固执不同。韧性意味着挫折不能改变你的士气，而不是它们不能改变你的想法。\n事实上，执着经常要求一个人改变自己的想法。这就是良好判断力的用武之地。执着的人相当理性。他们专注于期望值。正是这一点，而不是鲁莽，让他们能够在不太可能成功的事情上工作。\n不过，执着者在一个点上经常是非理性的：在决策树的顶端。当他们在两个期望值大致相等的问题之间选择时，选择通常归结为个人偏好。事实上，他们经常将项目故意分为很宽的期望值带，以确保他们想要工作的项目仍然符合条件。\n经验上，这似乎不是问题。在决策树顶端非理性是可以的。一个原因是我们人类会在我们喜欢的问题上更努力地工作。但还有一个更微妙的因素：我们对问题的偏好不是随机的。当我们喜欢一个其他人不喜欢的问题时，往往是因为我们潜意识地注意到它比他们意识到的更重要。\n这 leads to 我们的第五个品质：需要有一些总体目标。如果你像我一样，小时候只是想要做一些伟大的事情。理论上这应该是最强大的动力，因为它包括所有可能做的事情。但实际上它不太有用，正是因为它包括太多。它没有告诉你现在要做什么。\n所以在实践中，你的精力和想象力、韧性和良好判断力必须指向一些相当具体的目标。不要太具体，否则你可能会错过你正在寻找的附近的一个伟大发现，但也不要太一般，否则它不会起激励作用。[6]\n当你看执着的内部结构时，它根本不像固执。它要复杂得多。五个不同的品质——精力、想象力、韧性、良好的判断力和对目标的专注——结合起来产生一种现象，在导致你不放弃的意义上有点像固执。但你不放弃的方式完全不同。你不是仅仅抵抗变化，而是被精力和韧性驱动向目标，通过想象力发现的路径并由判断力优化。如果决策树中低处的任何点的期望值下降足够，你会在那点上让步，但精力和韧性不断推动你向你在更高处选择的任何方向前进。\n考虑到它的构成，正确的固执比错误的固执罕见得多，或者说它获得的结果好得多，这并不奇怪。任何人都可以固执。事实上，孩子、醉汉和傻瓜最擅长。而很少有足够多的人拥有产生正确固执的所有五个品质，但当他们拥有时，结果就是神奇的。\n注释\n[1] 我将用\u0026quot;执着\u0026quot;表示好的固执，用\u0026quot;固执\u0026quot;表示坏的固执，但我不能声称我只是遵循当前的用法。传统观点几乎不区分好的和坏的固执，用法相应地不严格。我可以为好的类型发明一个新词，但似乎只是扩展\u0026quot;执着\u0026quot;更好。\n[2] 在某些领域，人们可以通过固执而成功。一些政治领导人因此而臭名昭著。但这在需要通过外部测试的情况下行不通。事实上，以固执著称的政治领导人以获得权力而闻名，而不是以善用权力而闻名。\n[3] 执着者的舵会有一些阻力，因为改变方向有成本。\n[4] 固执的人有时确实成功解决了难题。一种方式是通过运气：就像停走的时钟一天对两次，他们抓住一些任意的想法，结果证明是正确的。另一种是当他们的固执抵消了其他形式的错误时。例如，如果一个领导者有过度谨慎的下属，他们对成功可能性的估计总是偏向同一个方向。所以如果他在每个边界情况下盲目地说\u0026quot;无论如何都要推进\u0026quot;，他通常会证明是正确的。\n[5] 如果你停在那里，只有精力和想象力，你会得到艺术家或诗人的传统漫画。\n[6] 从小的一侧开始犯错。如果你没有经验，你不可避免地会在一侧或另一侧犯错，如果你在使目标太宽的一侧犯错，你将一事无成。而如果你在小的一侧犯错，你至少会向前移动。然后，一旦你开始移动，就扩大目标。\n感谢 特雷弗·布莱克威尔、杰西卡·利文斯顿、杰基·麦克多诺、考特尼·皮普金、哈尔吉·塔加尔和加里·谭阅读草稿。\n",
    "description": "",
    "tags": ["毅力","决心","成功","心态","决策"],
    "categories": [],
    "content": "→ English Version\n正确的固执 2024年7月\n成功的人往往很执着。新想法一开始往往行不通，但他们不会被吓倒。他们不断尝试，最终找到可行的方法。\n另一方面，单纯的固执是失败的根源。固执的人很讨厌。他们不听劝告。他们撞得头破血流却一事无成。\n但这两者之间真的有什么区别吗？执着的人和固执的人实际上行为不同吗？还是他们做着同样的事情，我们只是根据他们最终是否正确而将其标记为执着或固执？\n如果这是唯一的区别，那么这种区分就没有什么可学的。告诉某人要执着而不是固执，只是告诉他们要正确而不是错误，他们已经知道这一点。而如果执着和固执实际上是不同类型的行为，那么将它们区分开来就很有价值。[1]\n我和很多有决心的人交谈过，在我看来，他们是不同类型的行为。我经常在谈话后离开时想着\u0026quot;哇，那个人真有决心\u0026quot;或者\u0026quot;该死，那个人真固执\u0026quot;，我不认为我只是在谈论他们是否看起来正确。这是其中的一部分，但不是全部。\n固执的人有一些恼人的特质，不仅仅是因为犯了错误。他们不听劝告。而这对所有有决心的人来说并不都是如此。我想不出有谁比科利森兄弟更有决心，当你向他们指出问题时，他们不仅会听，而且带着一种近乎掠夺性的强度倾听。他们的船底有洞吗？可能没有，但如果有，他们想知道。\n大多数成功人士也是如此。当你不同意他们时，他们从未如此投入。而固执的人不想听你说话。当你指出问题时，他们的目光呆滞，回答听起来像在讨论教义的教条主义者。[2]\n执着和固执之所以看起来相似，是因为他们都很难被阻止。但他们在不同的意义上很难被阻止。执着的人就像引擎无法减速的船。固执的人就像舵无法转动的船。[3]\n在退化的情况下，它们无法区分：当解决问题只有一种方法时，你唯一的选择是是否放弃，执着和固执都说不。这大概就是为什么这两种情况在流行文化中经常被混淆。它假设问题很简单。但随着问题变得更加复杂，我们可以看出它们之间的区别。执着的人更看重决策树中高处的要点，而不是下方的次要要点，而固执的人则在整个树上 indiscriminately 地喷洒\u0026quot;不要放弃\u0026quot;。\n执着的人执着于目标。固执的人执着于他们如何实现目标的想法。\n更糟糕的是，这意味着他们往往会执着于最初解决问题的想法，尽管这些想法最少受到解决问题经验的影响。所以固执的人不仅仅是执着于细节，而且不成比例地可能执着于错误的细节。\n他们为什么会这样？固执的人为什么会固执？一种可能是他们不知所措。他们能力不强。他们接手了一个难题。他们立即陷入了困境。所以他们就像在摇晃的船只甲板上的人一样抓住最近的手柄。\n这是我最初的理论，但经过检验，它站不住脚。如果固执仅仅是因为不知所措的结果，你可以通过让执着的人解决更难的问题来让他们变得固执。但事实并非如此。如果你给科利森兄弟一个极其困难的问题来解决，他们不会变得固执。如果有什么变化，他们会变得不那么固执。他们会知道必须对任何事情持开放态度。\n同样，如果固执是由情况引起的，固执的人在解决更简单的问题时会停止固执。但他们不会。如果固执不是由情况引起的，那么它一定来自内心。它必须是一个人性格的特征。\n固执是对改变自己想法的反射性抵抗。这与愚蠢并不完全相同，但它们密切相关。随着相反证据的增加，对自己想法的反射性抵抗变成一种诱发的愚蠢。固执是一种不放弃的形式，容易被愚蠢的人实践。你不必考虑复杂的权衡；你只需站稳脚跟。它在一定程度上是有效的。\n固执对简单问题有效这一事实是一个重要线索。执着和固执不是对立面。它们之间的关系更像我们可以进行的两种呼吸类型之间的关系：有氧呼吸，以及我们从最遥远祖先那里继承的无氧呼吸。无氧呼吸是一个更原始的过程，但它有其用途。当你突然从威胁中跳开时，你使用的就是这个。\n固执的最佳量不是零。如果你对挫折的最初反应是不假思索的\u0026quot;我不会放弃\u0026quot;，这可能是好事，因为这有助于防止恐慌。但不假思索只能带你走这么远。一个人越向固执的连续体发展，解决难题的可能性就越小。[4]\n固执是一件简单的事情。动物也有。但事实证明，执着有一个相当复杂的内部结构。\n区分执着者的一个特质是他们的精力。冒着过于强调词语的风险，他们执着而不仅仅是抵抗。他们不断尝试事物。这意味着执着的人也必须有想象力。要不断尝试事物，你必须不断想出要尝试的事物。\n精力和想象力是一个美妙的组合。各自都能从对方那里得到最好的东西。精力为想象力产生的想法创造了需求，从而产生更多，而想象力为精力提供了去处。[5]\n仅仅拥有精力和想象力是相当罕见的。但要解决难题，你还需要另外三个品质：韧性、良好的判断力和对某种目标的专注。\n韧性意味着不会因挫折而摧毁士气。一旦问题达到一定规模，挫折是不可避免的，所以如果你不能从中恢复，你只能在小规模上做好工作。但韧性与固执不同。韧性意味着挫 …"
  },{
    "title": "正统特权",
    "url": "/paul_graham/essays_zh/orth/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n正统特权 2020年7月\n\u0026ldquo;很少有人能够平静地表达与他们的社会环境偏见不同的意见。大多数人甚至无法形成这样的意见。\u0026quot;——爱因斯坦\n最近有很多关于特权的讨论。虽然这个概念被过度使用，但其中确实有道理，特别是特权会让你盲目这个观点——你无法看到那些生活与你非常不同的人能够看到的事情。\n但这种盲目性最普遍的例子之一是我没有看到被明确提到的。我称之为正统特权：一个人的思想越传统，他们就越觉得每个人都表达自己的意见是安全的。\n他们表达意见是安全的，因为他们意见的来源是目前可以接受的信念。所以在他们看来，对每个人都必须是安全的。他们真的无法想象会有真实的陈述会让你陷入麻烦。\n然而，在历史的每一个时刻，都有真实的事情说出来会让你陷入麻烦。我们是第一个不是这样的时代吗？那将是多么令人惊讶的巧合。\n当然，至少应该默认假设我们的时代并不独特，现在有你不能说真实的事情，就像一直以来一样。你会这么想。但即使面对如此压倒性的历史证据，大多数人还是会在这个问题上凭直觉行事。\n在最极端的情况下，患有正统特权的人不仅否认有任何你不能说真实的事情，而且仅仅因为你这样说就会指责你为异端。虽然如果你的时代有不止一个异端，这些指控会奇怪地不确定：你要么是x主义者，要么是y主义者。\n与这些人打交道令人沮丧，但重要的是要意识到他们是认真的。他们不是假装认为一个想法既不正统又真实是不可能的。世界在他们看来确实是这样。\n事实上，这是一种特别顽固的特权形式。人们可以通过更多地了解他们所不了解的东西来克服大多数形式特权引起的盲目性。但他们不能仅仅通过学习更多来克服正统特权。他们必须变得更加独立思考。如果这真的发生，也不会在一次对话的时间范围内发生。\n也许有可能说服一些人相信正统特权必须存在，即使他们感觉不到，就像一个人可以说暗物质一样。也许有些人可以说服，例如，认为这是历史上第一个没有什么你不能说真实的事情的时点是非常不可能的，即使他们无法想象具体的例子。\n但总的来说，我认为对这种特权说\u0026quot;检查你的特权\u0026quot;是行不通的，因为处于这种特权人口中的人没有意识到他们处于其中。在传统思想的人看来，他们并不是传统思想的人。在他们看来，他们只是对的。事实上，他们往往特别确定这一点。\n也许解决方案是诉诸礼貌。如果有人说他们能听到你听不到的高音噪音，相信他们的话才是礼貌的，而不是要求不可能产生的证据，或者干脆否认他们听到任何东西。想象那会显得多么无礼。同样，如果有人说他们能想到真实但不能说的事情，即使你自己想不出任何例子，相信他们的话才是礼貌的。\n感谢Sam Altman、Trevor Blackwell、Patrick Collison、Antonio Garcia-Martinez、Jessica Livingston、Robert Morris、Michael Nielsen、Geoff Ralston、Max Roser和Harj Taggar阅读本文草稿。\n",
    "description": "",
    "tags": ["特权","从众","独立思考","社会规范","争议","言论自由"],
    "categories": [],
    "content": "→ English Version\n正统特权 2020年7月\n\u0026ldquo;很少有人能够平静地表达与他们的社会环境偏见不同的意见。大多数人甚至无法形成这样的意见。\u0026quot;——爱因斯坦\n最近有很多关于特权的讨论。虽然这个概念被过度使用，但其中确实有道理，特别是特权会让你盲目这个观点——你无法看到那些生活与你非常不同的人能够看到的事情。\n但这种盲目性最普遍的例子之一是我没有看到被明确提到的。我称之为正统特权：一个人的思想越传统，他们就越觉得每个人都表达自己的意见是安全的。\n他们表达意见是安全的，因为他们意见的来源是目前可以接受的信念。所以在他们看来，对每个人都必须是安全的。他们真的无法想象会有真实的陈述会让你陷入麻烦。\n然而，在历史的每一个时刻，都有真实的事情说出来会让你陷入麻烦。我们是第一个不是这样的时代吗？那将是多么令人惊讶的巧合。\n当然，至少应该默认假设我们的时代并不独特，现在有你不能说真实的事情，就像一直以来一样。你会这么想。但即使面对如此压倒性的历史证据，大多数人还是会在这个问题上凭直觉行事。\n在最极端的情况下，患有正统特权的人不仅否认有任何你不能说真实的事情，而且仅仅因为你这样说就会指责你为异端。虽然如果你的时代有不止一个异端，这些指控会奇怪地不确定：你要么是x主义者，要么是y主义者。\n与这些人打交道令人沮丧，但重要的是要意识到他们是认真的。他们不是假装认为一个想法既不正统又真实是不可能的。世界在他们看来确实是这样。\n事实上，这是一种特别顽固的特权形式。人们可以通过更多地了解他们所不了解的东西来克服大多数形式特权引起的盲目性。但他们不能仅仅通过学习更多来克服正统特权。他们必须变得更加独立思考。如果这真的发生，也不会在一次对话的时间范围内发生。\n也许有可能说服一些人相信正统特权必须存在，即使他们感觉不到，就像一个人可以说暗物质一样。也许有些人可以说服，例如，认为这是历史上第一个没有什么你不能说真实的事情的时点是非常不可能的，即使他们无法想象具体的例子。\n但总的来说，我认为对这种特权说\u0026quot;检查你的特权\u0026quot;是行不通的，因为处于这种特权人口中的人没有意识到他们处于其中。在传统思想的人看来，他们并不是传统思想的人。在他们看来，他们只是对的。事实上，他们往往特别确定这一点。\n也许解决方案是诉诸礼貌。如果有人说他们能听到你听不到的高音噪音，相信他们的话才是礼貌的，而不是要求不可能产生的证据，或者干脆否认他们听到任何东西。想象那会显得多么无礼。同样，如果有人说他们能想到真实但不能说的事情，即使你自己想不出任何例子，相信他们的话才是礼貌的。\n感谢Sam Altman、Trevor Blackwell、Patrick Collison、Antonio Garcia-Martinez、Jessica Livingston、Robert Morris、Michael Nielsen、Geoff Ralston、Max Roser和Harj Taggar阅读本文草稿。\n"
  },{
    "title": "泡沫的正确之处",
    "url": "/paul_graham/essays_zh/bubble/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n泡沫的正确之处 2004年9月\n（本文源自ICFP 2004的特邀演讲。）\n我在互联网泡沫中有一排前排座位，因为我在1998年和1999年在雅虎工作。有一天，当股票交易在200美元左右时，我坐下来计算我认为价格应该是多少。我得到的答案是12美元。我走到下一个隔间告诉我的朋友Trevor。\u0026ldquo;十二！\u0026ldquo;他说。他试图听起来愤怒，但没有完全做到。他知道我们的估值是疯狂的。\n雅虎是一个特例。不仅仅是我们的市盈率是假的。我们一半的收益也是假的。当然不是安然那种方式。财务人员在报告收益方面似乎一丝不苟。使我们的收益虚假的是，雅虎实际上是庞氏骗局的中心。投资者看着雅虎的收益，对自己说，这里证明互联网公司可以赚钱。所以他们投资于承诺成为下一个雅虎的新创业公司。一旦这些创业公司拿到钱，他们用钱做什么？在雅虎上购买数百万美元的广告来推广他们的品牌。结果：本季度对创业公司的资本投资在下季度显示为雅虎收益——刺激了新一轮的创业公司投资。\n就像在庞氏骗局中一样，这个系统似乎的回报只是对它的最新一轮投资。使它不是庞氏骗局的是它是无意的。至少，我认为是。风险投资行业相当乱伦， presumably有一些人处于能够意识到发生了什么并从中获利的位置。\n一年后游戏结束了。从2000年1月开始，雅虎的股价开始崩溃，最终失去了95%的价值。\n但请注意，即使市值被削减了所有脂肪，雅虎仍然价值连城。即使在2001年3月和4月的宿醉估值中，雅虎的人还是在短短六年内创建了一家价值约80亿美元的公司。\n事实是，尽管我们在泡沫期间听到的关于\u0026quot;新经济\u0026quot;的种种胡言乱语，但有一个核心的真理。要得到一个真正的大泡沫，你需要这个：在中心有坚实的东西，这样即使是聪明人也会被吸引进来。（艾萨克·牛顿和乔纳森·斯威夫特都在1720年的南海泡沫中赔了钱。）\n现在钟摆已经摆向另一边。现在任何在泡沫期间变得时髦的东西都不合时宜。但这是一个错误——比相信1999年每个人说的话更大的错误。从长远来看，泡沫正确的地方将比它错误的地方更重要。\n1. 零售风险投资 在泡沫的过度之后，现在在公司有收益之前将其上市被认为是可疑的。但这个想法本身并没有什么内在错误。在早期阶段将公司上市只是零售风险投资：不是去风险投资公司寻求最后一轮融资，而是去公开市场。\n到泡沫结束时，没有收益就上市的公司被嘲笑为\u0026quot;概念股\u0026rdquo;，好像投资它们本质上是愚蠢的。但投资概念并不愚蠢；这是风险投资家所做的，其中最好的远非愚蠢。\n还没有收益的公司股票是有价值的。市场可能需要一段时间来学习如何评估这类公司，就像它在20世纪初必须学习如何评估普通股票一样。但市场擅长解决这类问题。如果市场最终做得比现在的风险投资家更好，我不会感到惊讶。\n早期上市不会是每个公司的正确计划。当然，它可能会造成破坏——分散管理层的注意力，或者让早期员工突然变富。但就像市场将学习如何评估创业公司一样，创业公司将学习如何最小化上市的损害。\n2. 互联网 互联网确实是一件大事。这是即使聪明人也被泡沫愚弄的原因之一。显然它将产生巨大影响。足以在两年内使纳斯达克公司的价值翻三倍？事实证明，没有。但在当时很难确定。[1]\n同样的事情发生在密西西比和南海泡沫期间。驱动它们的是有组织公共金融的发明（南海公司，尽管其名称，实际上是英格兰银行的竞争对手）。从长远来看，这确实是一件大事。\n认识到一个重要趋势比弄清楚如何从中获利更容易。投资者似乎总是犯的错误是过于字面地理解趋势。由于互联网是新的重要事物，投资者认为公司越互联网化越好。因此出现了Pets.Com这样的笑话。\n事实上，从大趋势中赚到的大部分钱都是间接赚的。在铁路繁荣期间赚钱最多的不是铁路本身，而是两边的公司，比如卡内基的钢铁厂，它制造铁轨，以及标准石油，它使用铁路将石油运到东海岸，在那里可以运往欧洲。\n我认为互联网将产生巨大影响，而且到目前为止我们所见到的与即将到来的相比根本不算什么。但大多数赢家只会间接是互联网公司；每有一个谷歌，就会有十个捷蓝航空。\n3. 选择 为什么互联网会产生巨大影响？一般论点是新的沟通方式总是会产生巨大影响。它们很少发生（直到工业时代只有语言、写作和印刷），但当它们发生时，它们总会引起大轰动。\n具体论点之一，或者其中之一，是互联网给我们更多选择。在\u0026quot;旧\u0026quot;经济中，向人们展示信息的高成本意味着他们只有狭窄的选择范围。通往消费者的微小、昂贵的管道被恰当地称为\u0026quot;渠道\u0026rdquo;。控制渠道，你就可以按照你的条件喂给他们你想给的东西。而且不仅仅是依赖这一原则的大公司。同样，工会、传统新闻媒体以及艺术和文学机构也是如此。获胜不取决于做好工作，而取决于获得对某些瓶颈的控制。\n有迹象表明这种情况正在改变。谷歌每月有超过8200万独立用户，年收入约30亿美元。[2] 然而，你见过谷歌广告吗？这里有些事情正在发生。\n诚然，谷歌是一个极端案例。人们很容易转向新的搜索引擎。尝试一个新的搜索引擎需要很少的努力，不需要花钱，而且很容易看出结果是否更好。所以谷歌不必做广告。在他们这样的业务中，做到最好就足够了。\n互联网令人兴奋的是它正在将一切朝那个方向转变。如果你想通过制造最好的东西来获胜，困难的部分是开始。最终每个人都会通过口碑了解到你是最好的，但你如何活到那个时候？而正是在这个关键阶段，互联网的影响最大。首先，互联网让任何人几乎零成本找到你。其次，它极大地加速了口碑传播声誉的速度。总之，这意味着在许多领域，规则将是：建造它，他们就会来。制造伟大的东西并把它放在网上。这与上个世纪的获胜秘诀有很大的不同。\n4. 青年 互联网泡沫方面，新闻媒体似乎最着迷的是一些创业创始人的年轻。这也是一个将持续的趋势。26岁的人之间有巨大的标准差。有些人只适合入门级工作，但有些人已经准备好统治世界，如果他们能找到人处理文书工作。\n26岁的人可能不太擅长管理人员或处理SEC事务。那些需要经验。但那些也是商品，可以交给某个副手。CEO最重要的素质是他对公司未来的愿景。他们下一步将建造什么？而在那方面，有26岁的人可以与任何人竞争。\n1970年，公司总裁意味着至少五十多岁的人。如果他有技术人员为他工作，他们被对待就像赛马场：珍贵，但没有权力。但随着技术变得越来越重要，极客的力量也随之增长以反映这一点。现在，CEO有一个聪明人可以咨询技术事务是不够的。 increasingly，他自己必须是那个人。\n像往常一样，商业 clinging to old forms. 风险投资家似乎仍然想安装一个看起来合法的发言者作为CEO。但 increasingly公司的创始人是真正的权力，而风险投资家安装的灰头发人更像音乐团体的经理而不是将军。\n5. 非正式 在纽约，泡沫产生了戏剧性的后果：西装过时了。它们使人显得老。所以在1998年，强大的纽约类型突然穿着开领衬衫、卡其裤和椭圆形金属丝眼镜，就像圣克拉拉的家伙。\n钟摆摆回了一点，部分是由于服装行业的恐慌反应。但我赌开领衬衫。这不像看起来那么 frivolous 一个问题。衣服很重要，所有极客都能感觉到，尽管他们可能没有意识地意识到。\n如果你是一个极客，你可以通过问自己如何感觉关于一个让你穿西装打领带去工作的公司来理解衣服有多重要。这个主意听起来很可怕，不是吗？事实上，可怕的程度远远超过穿这种衣服的 mere 不适。一个让程序员穿西装的公司会有一些 deeply 错误的地方。\n而错误的地方在于一个人的外表表现比一个人的想法质量更重要。这就是形式主义的问题。打扮本身并不那么坏。问题是它绑定的受体：打扮不可避免地成为好想法的替代品。技术上无能的商业类型被称为\u0026quot;西装\u0026quot;并非巧合。\n极客不只是碰巧穿着非正式。他们做得太一致了。有意识或无意识地，他们穿着非正式作为防止愚蠢的预防措施。\n6. 极客 服装只是反形式主义战争中最可见的战场。极客倾向于避免任何形式的 formality。他们对工作头衔，例如，或任何其他权威的附属物不感兴趣。\n事实上，这几乎就是极客的定义。我最近发现自己在和一个来自好莱坞的人交谈，他正在策划一个关于极客的节目。我认为如果我解释什么是极客会有用。我想出的是：一个不在营销自己上花费任何精力的人。\n换句话说，极客是专注于实质内容的人。那么极客和技术之间有什么联系？大致是你无法愚弄自然。在技术问题上，你必须得到正确的答案。如果你的软件错误计算了太空探测器的路径，你无法通过说你的代码是爱国的，或前卫的，或人们在非技术领域使用的任何其他遁词来摆脱困境。\n随着技术在经济中变得越来越重要，极客文化也随之兴起。极客已经比我小时候酷多了。当我在1980年代中期上大学时，\u0026ldquo;极客\u0026quot;仍然是一种侮辱。主修计算机科学的人通常试图隐瞒这一点。现在女性问我她们在哪里可以遇到极客。（脑海中浮现的答案是\u0026quot;Usenix\u0026rdquo;，但这就像从消防栓喝水一样。）\n我对为什么极客文化变得越来越被接受没有幻想。不是因为人们意识到实质比营销更重要。是因为极客变得富有。但这不会改变。\n7. 期权 使极客富有的通常是股票期权。现在有一些动向使公司更难授予期权。如果有一些真正的会计滥用正在进行，当然要纠正它。但不要杀死金鹅。股权是驱动技术创新的燃料。\n",
    "description": "",
    "tags": ["泡沫","互联网","创业","技术","商业","经济"],
    "categories": [],
    "content": "→ English Version\n泡沫的正确之处 2004年9月\n（本文源自ICFP 2004的特邀演讲。）\n我在互联网泡沫中有一排前排座位，因为我在1998年和1999年在雅虎工作。有一天，当股票交易在200美元左右时，我坐下来计算我认为价格应该是多少。我得到的答案是12美元。我走到下一个隔间告诉我的朋友Trevor。\u0026ldquo;十二！\u0026ldquo;他说。他试图听起来愤怒，但没有完全做到。他知道我们的估值是疯狂的。\n雅虎是一个特例。不仅仅是我们的市盈率是假的。我们一半的收益也是假的。当然不是安然那种方式。财务人员在报告收益方面似乎一丝不苟。使我们的收益虚假的是，雅虎实际上是庞氏骗局的中心。投资者看着雅虎的收益，对自己说，这里证明互联网公司可以赚钱。所以他们投资于承诺成为下一个雅虎的新创业公司。一旦这些创业公司拿到钱，他们用钱做什么？在雅虎上购买数百万美元的广告来推广他们的品牌。结果：本季度对创业公司的资本投资在下季度显示为雅虎收益——刺激了新一轮的创业公司投资。\n就像在庞氏骗局中一样，这个系统似乎的回报只是对它的最新一轮投资。使它不是庞氏骗局的是它是无意的。至少，我认为是。风险投资行业相当乱伦， presumably有一些人处于能够意识到发生了什么并从中获利的位置。\n一年后游戏结束了。从2000年1月开始，雅虎的股价开始崩溃，最终失去了95%的价值。\n但请注意，即使市值被削减了所有脂肪，雅虎仍然价值连城。即使在2001年3月和4月的宿醉估值中，雅虎的人还是在短短六年内创建了一家价值约80亿美元的公司。\n事实是，尽管我们在泡沫期间听到的关于\u0026quot;新经济\u0026quot;的种种胡言乱语，但有一个核心的真理。要得到一个真正的大泡沫，你需要这个：在中心有坚实的东西，这样即使是聪明人也会被吸引进来。（艾萨克·牛顿和乔纳森·斯威夫特都在1720年的南海泡沫中赔了钱。）\n现在钟摆已经摆向另一边。现在任何在泡沫期间变得时髦的东西都不合时宜。但这是一个错误——比相信1999年每个人说的话更大的错误。从长远来看，泡沫正确的地方将比它错误的地方更重要。\n1. 零售风险投资 在泡沫的过度之后，现在在公司有收益之前将其上市被认为是可疑的。但这个想法本身并没有什么内在错误。在早期阶段将公司上市只是零售风险投资：不是去风险投资公司寻求最后一轮融资，而是去公开市场。\n到泡沫结束时，没有收益就上市的公司被嘲笑为\u0026quot;概念股\u0026rdquo;，好像投资它们本质上是愚蠢的。但投资概念并不愚蠢；这是风险投资家所做的，其中最好的远非愚蠢。\n还没有收益的公司股票是有价值的。市场可能需要一段时间来学习如何评估这类公司，就像它在20世纪初必须学习如何评估普通股票一样。但市场擅长解决这类问题。如果市场最终做得比现在的风险投资家更好，我不会感到惊讶。\n早期上市不会是每个公司的正确计划。当然，它可能会造成破坏——分散管理层的注意力，或者让早期员工突然变富。但就像市场将学习如何评估创业公司一样，创业公司将学习如何最小化上市的损害。\n2. 互联网 互联网确实是一件大事。这是即使聪明人也被泡沫愚弄的原因之一。显然它将产生巨大影响。足以在两年内使纳斯达克公司的价值翻三倍？事实证明，没有。但在当时很难确定。[1]\n同样的事情发生在密西西比和南海泡沫期间。驱动它们的是有组织公共金融的发明（南海公司，尽管其名称，实际上是英格兰银行的竞争对手）。从长远来看，这确实是一件大事。\n认识到一个重要趋势比弄清楚如何从中获利更容易。投资者似乎总是犯的错误是过于字面地理解趋势。由于互联网是新的重要事物，投资者认为公司越互联网化越好。因此出现了Pets.Com这样的笑话。\n事实上，从大趋势中赚到的大部分钱都是间接赚的。在铁路繁荣期间赚钱最多的不是铁路本身，而是两边的公司，比如卡内基的钢铁厂，它制造铁轨，以及标准石油，它使用铁路将石油运到东海岸，在那里可以运往欧洲。\n我认为互联网将产生巨大影响，而且到目前为止我们所见到的与即将到来的相比根本不算什么。但大多数赢家只会间接是互联网公司；每有一个谷歌，就会有十个捷蓝航空。\n3. 选择 为什么互联网会产生巨大影响？一般论点是新的沟通方式总是会产生巨大影响。它们很少发生（直到工业时代只有语言、写作和印刷），但当它们发生时，它们总会引起大轰动。\n具体论点之一，或者其中之一，是互联网给我们更多选择。在\u0026quot;旧\u0026quot;经济中，向人们展示信息的高成本意味着他们只有狭窄的选择范围。通往消费者的微小、昂贵的管道被恰当地称为\u0026quot;渠道\u0026rdquo;。控制渠道，你就可以按照你的条件喂给他们你想给的东西。而且不仅仅是依赖这一原则的大公司。同样，工会、传统新闻媒体以及艺术和文学机构也是如此。获胜不取决于做好工作，而取决于获得对某些瓶颈的控制。\n有迹象表明这种情况正在 …"
  },{
    "title": "注意差距",
    "url": "/paul_graham/essays_zh/gap/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n注意差距 2004年5月\n当人们对某件事足够在意并努力把它做好时，做得最好的人往往会远远超过其他人。莱昂纳多和二流的同时代人如博尔戈尼奥之间存在巨大差距。你可以看到雷蒙德·钱德勒和普通侦探小说作家之间的同样差距。顶级职业棋手可以与普通俱乐部棋手下万局比赛而不输一局。\n像下棋、绘画或写小说一样，赚钱是一项非常专业的技能。但出于某种原因，我们以不同的方式对待这项技能。当少数人在下棋或写小说方面超越其他人时，没有人抱怨，但当少数人赚的钱比其他人多时，我们就会看到社论说这是错误的。\n为什么？这种变化模式似乎与其他任何技能没有什么不同。是什么导致人们在技能是赚钱时反应如此强烈？\n我认为我们将赚钱视为不同的原因有三个：我们童年时期学到的误导性财富模型；直到最近，大多数财富积累的方式不光彩；以及对收入巨大差异对社会有害的担忧。据我所知，第一个是错误的，第二个已经过时，第三个经证明是错误的。难道在现代社会中，收入差异实际上是健康的标志吗？\n财富的爸爸模型 我五岁时认为电是由插座创造的。我没有意识到外面有发电站在发电。同样，大多数孩子没有意识到财富是必须创造的东西。它似乎是从父母那里流出来的东西。\n由于遇到财富的环境，孩子们往往会误解财富。他们把财富和金钱混淆。他们认为财富的数量是固定的。他们认为财富是由权威机构分配的（因此应该平均分配），而不是必须创造的东西（可能是不平等地创造）。\n事实上，财富不是金钱。金钱只是一种方便的交易方式，将一种形式的财富换成另一种。财富是潜在的东西——我们购买的商品和服务。当你旅行到一个富有或贫穷的国家时，你不必查看人们的银行账户来判断你在哪种国家。你可以看到财富——在建筑和街道中，在人们的衣服和健康中。\n财富从哪里来？人们创造它。当大多数人生活在农场时，这更容易理解，他们用自己的双手制造许多他们想要的东西。然后你可以在房屋、畜群和谷仓中看到每个家庭创造的财富。当时也很明显，世界的财富不是像派片一样必须分享的固定数量。如果你想要更多财富，你可以创造它。\n今天仍然如此，尽管很少有人直接为自己创造财富（除了一些残余的家务劳动）。我们大多为其他人创造财富以换取金钱，然后用这些金钱换取我们想要的财富形式。[1]\n因为孩子们无法创造财富，所以他们拥有的一切都必须被给予他们。当财富是被给予的东西时，当然它似乎应该被平均分配。[2] 在大多数家庭中确实如此。孩子们确保这一点。当一个兄弟姐妹得到比另一个多时，他们会哭喊\u0026quot;不公平\u0026quot;。\n在现实世界中，你不能一直靠父母生活。如果你想要什么，你要么必须制造它，要么为别人做同等价值的事情，以便让他们给你足够的钱来购买它。在现实世界中，财富（除了像小偷和投机者这样的少数专家）是你必须创造的东西，而不是爸爸分配的东西。而且由于创造财富的能力和欲望因人而异，财富的创造并不平等。\n你通过做或制造人们想要的东西来获得报酬，那些赚更多钱的人通常只是更擅长做人们想要的事情。顶级演员比B级演员赚的钱多得多。B级演员可能几乎同样有魅力，但当人们去剧院查看上映的电影列表时，他们想要大牌明星拥有的那种额外的魅力。\n做人们想要的事情当然不是赚钱的唯一方法。你也可以抢劫银行，或索取贿赂，或建立垄断。这些伎俩造成了财富的一些变化，实际上也造成了一些最大的个人财富，但它们不是收入变化的根本原因。收入变化的根本原因，如奥卡姆剃刀所示，与所有其他人类技能变化的根本原因相同。\n在美国，大型上市公司的CEO的收入大约是普通人的100倍。[3] 篮球运动员的收入大约是128倍，棒球运动员是72倍。社论以惊恐的语气引用这种统计数据。但我毫不怀疑一个人可能比另一个人多100倍的生产力。在古罗马，奴隶的价格根据他们的技能相差50倍。[4] 这还没有考虑到动机，或者你可以从现代技术获得的额外生产力杠杆。\n关于运动员或CEO薪水的社论让我想起早期的基督教作家，他们从第一原则争论地球是否是圆的，而他们可以走出去查看。[5] 某人的工作价值多少不是一个政策问题。这是市场已经决定的东西。\n\u0026ldquo;他们真的值我们100个人吗？\u0026ldquo;社论作者问。取决于你所说的价值是什么意思。如果你的意思是人们会为他们的技能付多少钱，答案显然是肯定的。\n一些CEO的收入反映了一些不当行为。但是不是还有其他人的收入真正反映了他们创造的财富？史蒂夫·乔布斯拯救了一个处于末期衰落的公司。而且不仅仅是转型专家那样通过削减成本；他必须决定苹果的下一个产品应该是什么。几乎没有人能够做到这一点。而且无论CEO的情况如何，很难看出任何人如何能够争辩说职业篮球运动员的薪水不反映供求关系。\n原则上，一个人真的可能比另一个人创造更多的财富，这似乎不太可能。这个谜团的关键是重新审视那个问题，他们真的值我们100个人吗？篮球队会用他们的一个球员换取100个随机的人吗？如果你用100个随机的人组成的委员会取代史蒂夫·乔布斯，苹果的下一个产品会是什么样子？[6] 这些事情不是线性扩展的。也许CEO或职业运动员只有普通人的十倍（无论这意味着什么）技能和决心。但它集中在一个个体身上，这就是全部区别。\n当说一种工作报酬过高而另一种报酬过低时，我们到底在说什么？在自由市场中，价格由买家想要什么决定。人们比诗歌更喜欢棒球，所以棒球运动员比诗人赚得多。因此，说某种工作报酬过低就等同于说人们想要错误的东西。\n当然，人们想要错误的东西。对此感到惊讶似乎很奇怪。说某种工作报酬过薄是不公正的，这似乎更奇怪。[7] 那么你就是在说人们想要错误的东西是不公正的。人们更喜欢真人秀和玉米狗而不是莎士比亚和蒸蔬菜，这是可悲的，但不公正吗？这似乎像说蓝色是重的，或者说向上是圆的。\n\u0026ldquo;不公正\u0026quot;这个词在这里的出现是爸爸模型 unmistakable 光谱特征。否则这个想法为什么会出现在这个奇怪的语境中？而如果说话者仍然在爸爸模型下运作，将财富视为从共同来源流出并必须分享的东西，而不是通过做其他人想要的事情产生的东西，这正是在注意到一些人比其他人赚得多时你会得到的。\n当我们谈论\u0026quot;收入不平等分配\u0026quot;时，我们也应该问，这些收入来自哪里？[8] 谁创造了它所代表的财富？因为在收入仅仅根据人们创造多少财富而变化的程度上，分配可能是不平等的，但几乎不是不公正的。\n偷窃它 我们倾向于发现巨大财富差距令人担忧的第二个原因是，在人类历史的大部分时间里，积累财富的通常方式是偷窃它：在牧业社会中通过掠夺牲畜；在农业社会中通过在战争时期夺取他人的财产，在和平时期向他们征税。\n在冲突中，获胜一方会收到从失败一方没收的财产。在1060年代的英格兰，当征服者威廉将 defeated 盎格鲁-撒克逊贵族的财产分配给他的追随者时，冲突是军事的。到1530年代，当亨利八世将修道院的财产分配给他的追随者时，这主要是政治性的。[9] 但原则是相同的。确实，同样的原则现在在津巴布韦也在起作用。\n在更有组织的社会，如中国，统治者和他的官员使用征税而不是没收。但在这里我们也看到同样的原则：致富的方式不是创造财富，而是服务于一个足够强大可以占有财富的统治者。\n随着中产阶级的兴起，这开始在欧洲改变。现在我们认为中产阶级是既不富也不穷的人，但最初他们是一个独特的群体。在封建社会，只有两个阶级：战士贵族和为他们工作的农奴。中产阶级是一个新的第三群体，他们住在城镇，通过制造业和贸易维持生计。\n从十世纪和十一世纪开始，小贵族和前农奴在城镇中联合起来，这些城镇逐渐变得足够强大，可以无视当地的封建领主。[10] 像农奴一样，中产阶级主要通过创造财富谋生。（在热那亚和比萨这样的港口城市，他们也从事海盗活动。）但与农奴不同，他们有创造大量财富的动力。农奴创造的任何财富都属于他的主人。制造比你能够隐藏的更多的财富没有多大意义。而城镇居民的独立性使他们能够保留他们创造的任何财富。\n一旦通过创造财富致富成为可能，整个社会开始变得非常富裕。我们拥有的一切几乎都是由中产阶级创造的。确实，在工业社会中，其他两个阶级已经有效地消失，他们的名字被赋予了中产阶级的两端。（在词的原始意义上，比尔·盖茨是中产阶级。）\n但直到工业革命，财富创造才明确地取代腐败成为致富的最佳方式。至少在英格兰，只有当有其他、更快的致富方式开始出现时，腐败才变得不合时尚（并且实际上才开始被称为\u0026quot;腐败\u0026rdquo;）。\n十七世纪的英格兰很像今天的第三世界，政府职位是公认的致富途径。那个时期的巨大财富更多地来源于我们现在称之为腐败的东西，而不是商业。[11] 到十九世纪，这种情况发生了变化。贿赂仍然存在，就像到处都有一样，但政治那时已经留给了那些更多地由虚荣心而不是贪婪驱动的人。技术使得创造财富比偷窃财富更快。十九世纪富人的原型不是朝臣，而是工业家。\n随着中产阶级的兴起，财富不再是零和游戏。乔布斯和沃兹尼亚克不必让我们变穷来使自己变富。恰恰相反：他们创造了使我们的生活在物质上更丰富的东西。他们必须这样做，否则我们不会为他们付钱。\n但由于世界历史的大部分时间致富的主要途径是偷窃它，我们倾向于怀疑富人。理想主义的大学生发现他们无意识保存的童年财富模型得到了过去著名作家的证实。这是错误与过时的结合。\n\u0026ldquo;每一笔巨大财富背后，都有一桩犯罪，\u0026ldquo;巴尔扎克写道。但他没有。他实际上说的是，没有明显原因的巨大财富可能是由于执行得足够好而被遗忘的犯罪。如果我们谈论的是1000年的欧洲，或者今天大部分第三世界，标准的错误引用就会完全正确。但巴尔扎克生活在十九世纪的法国，那里的工业革命已经进展顺利。他知道你可以在不偷窃的情况下致富。毕竟，他自己作为一个受欢迎的小说家就是这样做的。[12]\n只有少数国家（绝非巧合，也是那些最富有的国家）达到了这个阶段。在大多数国家，腐败仍然占上风。在大多数国家，致富的最快途径是偷窃它。因此当我们在一个富国看到收入差异增加时，有一种担忧它正在滑向成为另一个委内瑞拉的倾向。我认为相反的情况正在发生。我认为你看到的是一个领先委内瑞拉整整一步的国家。\n技术的杠杆 技术会增加贫富差距吗？它肯定会增加生产者和不生产者之间的差距。这就是技术的全部意义所在。有了拖拉机，一个精力充沛的农民一天可以耕种的土地是他用一组马可以耕种的六倍。但前提是他掌握了一种新的农业。\n我在自己的时代亲眼看到技术的杠杆作用明显增长。在高中时，我通过修剪草坪和在巴斯金-罗宾斯舀冰淇淋来赚钱。这是当时唯一可用的那种工作。现在高中生可以编写软件或设计网站。但只有一些人会；其他人仍然会舀冰淇淋。\n我非常清楚地记得1985年改进的技术使我有可能购买自己的电脑。几个月内，我使用它作为自由程序员来赚钱。几年前，我不能做到这一点。几年前，没有自由程序员这样的东西。但苹果创造了财富，以强大、廉价的计算机形式，程序员立即开始使用它来创造更多。\n正如这个例子所暗示的，技术提高我们生产能力的速度可能是指数级的，而不是线性的。所以我们应该预期随着时间推移，个人生产力的变化会不断增加。这会增加贫富差距吗？取决于你指的是哪个差距。\n技术应该增加收入差距，但它似乎会减少其他差距。一百年前，富人的生活与普通人不同。他们住在满是仆人的房子里，穿着精心制作的不舒服的衣服，乘坐由需要自己的房子和仆人的马队拉的马车旅行。现在，由于技术，富人的生活更像普通人。\n汽车就是为什么的一个好例子。有可能购买价值数十万美元的昂贵手工汽车。但没有多大意义。公司通过制造大量普通汽车比制造少量昂贵汽车赚更多钱。因此，制造大批量汽车的公司可以在其设计上花费更多。如果你购买定制汽车，总会有些东西在坏。现在购买定制汽车的唯一目的是广告你能买得起。\n或者考虑手表。五十年前，花很多钱买手表你可以获得更好的性能。当手表有机芯时，昂贵的手表走时更准。现在不再是这样了。自从石英机芯发明以来，普通的天美时表比价值数十万美元的百达翡丽更准确。[13] 确实，像昂贵的汽车一样，如果你决心花很多钱买手表，你必须忍受一些不便：除了走时不准，机械手表还必须上弦。\n技术唯一不能便宜化的是品牌。这正是为什么我们越来越多地听到它的原因。品牌是随着富人和穷人之间的实质性差异蒸发而留下的残留物。但你东西上的标签是什么比起拥有它和不拥有它来说是小得多的事情。在1900年，如果你保持一辆马车，没有人问它是哪一年或什么品牌。如果你有一辆，你就是富人。如果你不富有，你就坐公共汽车或步行。现在即使是最贫穷的美国人也开车汽车，只有因为我们被广告训练得如此好，我们甚至能够识别特别昂贵的。[14]\n同样的模式在一个又一个行业中上演。如果对某物有足够的需求，技术将使它足够便宜以大量销售，大批量生产的版本即使不是更好，至少更方便。[15] 富人最喜欢的没有比便利更的东西了。我认识的富人驾驶同样的汽车，穿同样的衣服，有同样类型的家具，吃与我其他朋友同样的食物。他们的房子在不同的社区，或者如果在同一社区，大小不同，但在里面生活是相似的。房子使用相同的建筑技术建造，包含几乎相同的物品。做昂贵和定制的事情不方便。\n富人也更像其他人一样度过他们的时间。伯特里·伍斯特似乎早已消失。现在，大多数足够富有不工作的人无论如何都工作。不仅仅是社会压力让他们这样做；无所事事是孤独和令人沮丧的。\n我们也没有一百年前的社会区别。那个时期的小说和礼仪手册现在读起来像描述一些奇怪的部落社会。\u0026ldquo;关于友谊的延续\u0026hellip;\u0026ldquo;比顿的《家庭管理手册》(1880)暗示，\u0026ldquo;在某些情况下，主妇在承担家庭责任时可能有必要放弃在她生活早期开始的许多友谊。\u0026ldquo;嫁给富人的女人被期望放弃没有的朋友。如果你今天那样做，你似乎是个野蛮人。你也会有一个非常无聊的生活。人们仍然倾向于某种程度的自我隔离，但更多地是基于教育而不是财富。[16]\n在物质和社会方面，技术似乎正在缩小富人和穷人之间的差距，而不是扩大它。如果列宁在雅虎、英特尔或思科这样的公司的办公室走动，他会认为共产主义已经获胜。每个人都穿着同样的衣服，有同样类型的办公室（或者更确切地说，隔间）和同样的家具，用名字而不是尊称称呼对方。一切似乎完全如他所预测的那样，直到他查看他们的银行账户。哎呀。\n如果技术增加那个差距是个问题吗？到目前为止似乎不是。虽然它增加了收入差距，但它似乎减少了大多数其他差距。\n",
    "description": "",
    "tags": ["财富","收入","不平等","技术","社会","经济学"],
    "categories": [],
    "content": "→ English Version\n注意差距 2004年5月\n当人们对某件事足够在意并努力把它做好时，做得最好的人往往会远远超过其他人。莱昂纳多和二流的同时代人如博尔戈尼奥之间存在巨大差距。你可以看到雷蒙德·钱德勒和普通侦探小说作家之间的同样差距。顶级职业棋手可以与普通俱乐部棋手下万局比赛而不输一局。\n像下棋、绘画或写小说一样，赚钱是一项非常专业的技能。但出于某种原因，我们以不同的方式对待这项技能。当少数人在下棋或写小说方面超越其他人时，没有人抱怨，但当少数人赚的钱比其他人多时，我们就会看到社论说这是错误的。\n为什么？这种变化模式似乎与其他任何技能没有什么不同。是什么导致人们在技能是赚钱时反应如此强烈？\n我认为我们将赚钱视为不同的原因有三个：我们童年时期学到的误导性财富模型；直到最近，大多数财富积累的方式不光彩；以及对收入巨大差异对社会有害的担忧。据我所知，第一个是错误的，第二个已经过时，第三个经证明是错误的。难道在现代社会中，收入差异实际上是健康的标志吗？\n财富的爸爸模型 我五岁时认为电是由插座创造的。我没有意识到外面有发电站在发电。同样，大多数孩子没有意识到财富是必须创造的东西。它似乎是从父母那里流出来的东西。\n由于遇到财富的环境，孩子们往往会误解财富。他们把财富和金钱混淆。他们认为财富的数量是固定的。他们认为财富是由权威机构分配的（因此应该平均分配），而不是必须创造的东西（可能是不平等地创造）。\n事实上，财富不是金钱。金钱只是一种方便的交易方式，将一种形式的财富换成另一种。财富是潜在的东西——我们购买的商品和服务。当你旅行到一个富有或贫穷的国家时，你不必查看人们的银行账户来判断你在哪种国家。你可以看到财富——在建筑和街道中，在人们的衣服和健康中。\n财富从哪里来？人们创造它。当大多数人生活在农场时，这更容易理解，他们用自己的双手制造许多他们想要的东西。然后你可以在房屋、畜群和谷仓中看到每个家庭创造的财富。当时也很明显，世界的财富不是像派片一样必须分享的固定数量。如果你想要更多财富，你可以创造它。\n今天仍然如此，尽管很少有人直接为自己创造财富（除了一些残余的家务劳动）。我们大多为其他人创造财富以换取金钱，然后用这些金钱换取我们想要的财富形式。[1]\n因为孩子们无法创造财富，所以他们拥有的一切都必须被给予他们。当财富是被给予的东西时，当然它似乎应该被平均分配。[2] 在大多数家庭中确实如此。孩子们确保这一点。当一个兄弟姐妹得到比另一个多时，他们会哭喊\u0026quot;不公平\u0026quot;。\n在现实世界中，你不能一直靠父母生活。如果你想要什么，你要么必须制造它，要么为别人做同等价值的事情，以便让他们给你足够的钱来购买它。在现实世界中，财富（除了像小偷和投机者这样的少数专家）是你必须创造的东西，而不是爸爸分配的东西。而且由于创造财富的能力和欲望因人而异，财富的创造并不平等。\n你通过做或制造人们想要的东西来获得报酬，那些赚更多钱的人通常只是更擅长做人们想要的事情。顶级演员比B级演员赚的钱多得多。B级演员可能几乎同样有魅力，但当人们去剧院查看上映的电影列表时，他们想要大牌明星拥有的那种额外的魅力。\n做人们想要的事情当然不是赚钱的唯一方法。你也可以抢劫银行，或索取贿赂，或建立垄断。这些伎俩造成了财富的一些变化，实际上也造成了一些最大的个人财富，但它们不是收入变化的根本原因。收入变化的根本原因，如奥卡姆剃刀所示，与所有其他人类技能变化的根本原因相同。\n在美国，大型上市公司的CEO的收入大约是普通人的100倍。[3] 篮球运动员的收入大约是128倍，棒球运动员是72倍。社论以惊恐的语气引用这种统计数据。但我毫不怀疑一个人可能比另一个人多100倍的生产力。在古罗马，奴隶的价格根据他们的技能相差50倍。[4] 这还没有考虑到动机，或者你可以从现代技术获得的额外生产力杠杆。\n关于运动员或CEO薪水的社论让我想起早期的基督教作家，他们从第一原则争论地球是否是圆的，而他们可以走出去查看。[5] 某人的工作价值多少不是一个政策问题。这是市场已经决定的东西。\n\u0026ldquo;他们真的值我们100个人吗？\u0026ldquo;社论作者问。取决于你所说的价值是什么意思。如果你的意思是人们会为他们的技能付多少钱，答案显然是肯定的。\n一些CEO的收入反映了一些不当行为。但是不是还有其他人的收入真正反映了他们创造的财富？史蒂夫·乔布斯拯救了一个处于末期衰落的公司。而且不仅仅是转型专家那样通过削减成本；他必须决定苹果的下一个产品应该是什么。几乎没有人能够做到这一点。而且无论CEO的情况如何，很难看出任何人如何能够争辩说职业篮球运动员的薪水不反映供求关系。\n原则上，一个人真的可能比另一个人创造更多的财富，这似乎不太可能。这个谜团的关键是重新审视那个问题，他们真的值我们100个人吗？篮球 …"
  },{
    "title": "洗衣",
    "url": "/paul_graham/essays_zh/laundry/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n洗衣 2004年10月\n这是\u0026quot;散文时代\u0026quot;的早期草稿。我保留了它以显示散文如何演变——红色文本是最终保留的内容，灰色是被删除的内容。\n[这篇文章最终成为《散文的时代》。]\n红色文本（保留内容） 在英语课程中学到的东西的一个令人沮丧的方面是，散文与散文之间的相似之处如此之少。高中老师希望你写一篇组织良好的五段文章。大学老师希望你展示你掌握了这个主题，即把所有事实都放在那里，不要太多原创想法。学术期刊的编辑希望你遵循一种形式，其中引言用一段总结你将要说的内容，正文详细说明，结论总结你所说的内容。\n如果你问一个随机的英语老师\u0026quot;什么是散文？\u0026quot;，最可能的答案会是\u0026quot;一种表达你想法的书面作品\u0026quot;，但这个答案是如此模糊，以至于毫无用处。我们使用这个词的频率太高，不能让它如此模糊。我怀疑大多数人会说，他们在高中和大学写作课程中学到的写作类型与他们在杂志中读到的散文类型之间没有太大关系。\n散文这个词的意思是\u0026quot;尝试\u0026quot;。散文是你试图找出某事的书面记录。一篇散文不一定有固定的形式。它更像是一次谈话，但这次你有机会思考你说的话，可以修改它们以使它们尽可能准确。\n在蒙田的时代，这个词的意思更接近现在的\u0026quot;实验\u0026quot;。但蒙田是那种在实验过程中会告诉你他在想什么的科学家。你会看到他尝试不同的方法，有时会犯错误。这会让现代读者感到不安，因为现代散文作者很少这样公开他们的写作过程。他们就像已经完成实验的科学家，正在告诉你结果。\n散文最接近的比喻可能是非虚构作品。但散文不是非虚构作品。散文可以包含任何内容。它可以包含故事、个人经历、事实、观点等等。唯一的要求是它应该尝试弄清楚某事。\n如果你问人们为什么写作，他们可能会说\u0026quot;为了表达自己\u0026quot;。但这是一个相当空洞的答案。你为什么想表达自己？表达自己的哪一部分？你选择表达自己而不是沉默或用棍子击打某人的原因是什么？\n我认为一个更好的答案可能是\u0026quot;为了弄清楚我在想什么\u0026quot;。写作是思考的一种形式。你不是已经有想法然后写下来；你通过写作来弄清楚你的想法。\n大多数人在写作时并没有完全意识到这一点。他们被教导写作是关于\u0026quot;表达自己\u0026quot;，但他们从未被教导这到底意味着什么。\n散文不是你写下来的东西；它是你通过写作发现的东西。\n如果你把散文看作是思考的一种形式，而不是表达你已经思考过的东西，那么很多事情都会变得清晰。例如，为什么散文往往如此个人化？因为思考是非常个人化的。为什么它们往往如此随意？因为思考是随意的。\n学校教授的写作与真实写作之间的主要区别在于，学校教授的写作是\u0026quot;表达你自己\u0026quot;的表演，而真实写作是思考的过程。\n在学校里，你被教导写作是为了展示你已经知道的东西。你被教导要有一个论点，然后用证据支持它。但真实写作不是关于展示你已经知道的东西；它是关于发现你不知道的东西。\n散文的真正目的不是说服；而是探索。如果你探索得足够好，说服可能会随之而来，但那只是副产品。\n散文的另一个特点是它们往往相当长。这是有原因的。思考需要时间。你不能期望在几段内真正探索一个复杂的话题。你需要时间尝试不同的方法，犯错误，然后纠正它们。\n灰色文本（删除内容） 写作课程教授的散文类型实际上是一种相当新的发明。它始于19世纪后期，当时大学开始更多地重视研究。教授们需要一种方式来评估学生是否完成了他们的阅读作业，所以他们发明了这种形式的写作，主要目的是展示你阅读了材料。\n这种写作形式如此成功，以至于它成为了写作教学的标准。但它与散文的传统几乎没有关系。\n在蒙田的时代，散文是你对某个话题的想法的记录。它不一定有固定的形式。它可能包含故事、事实、引用、个人经历，任何有助于你理解该话题的内容。\n现代学术文章与此完全相反。它有严格的形式规则，并且只关心事实和逻辑。个人经历被严格禁止。\n我认为这两种写作都有其用途。学术文章在科学和其他需要客观性的领域很有用。但散文在探索复杂话题方面更有用，特别是那些涉及人类经验的话题。\n问题是学校只教授一种类型的写作，然后期望学生用这种形式写所有内容。\n这就像教人只用锤子，然后期望他们建造房子。锤子很有用，但你还需要其他工具。\n散文写作工具箱应该包含许多不同的工具：故事、事实、个人经历、引用、问题、想法等等。\n但最重要的是，散文应该允许思考的过程可见。读者应该看到作家尝试不同的方法，犯错误，然后纠正他们。\n这要求一种学校不鼓励的脆弱性。在学校里，你被教导要自信，要有一个论点，然后用证据支持它。展示不确定或犯错误是弱点的表现。\n但在真正的散文写作中，不确定和犯错误是过程的一部分。事实上，它们是必不可少的。如果你不犯错误，你可能没有真正探索话题。\n我想这就是为什么散文如此个人化的原因。思考是非常个人化的。没有两个人会以完全相同的方式思考同一个话题。所以当你写一篇散文时，你本质上是在邀请读者见证你的思考过程。\n当然，这要求作者对自己的思考过程感到舒适。很多人不习惯这样做。他们被教导要隐藏他们的思考过程，只展示最终结果。\n但最终，我认为真正的散文写作比学术写作更有价值，因为它更接近真实的思考方式。\n注：这篇文章包含了蒙田关于散文写作的一些观点，以及我对现代写作教育的批评。\n",
    "description": "",
    "tags": ["写作","散文","教育","蒙田","重写","创意","学习"],
    "categories": [],
    "content": "→ English Version\n洗衣 2004年10月\n这是\u0026quot;散文时代\u0026quot;的早期草稿。我保留了它以显示散文如何演变——红色文本是最终保留的内容，灰色是被删除的内容。\n[这篇文章最终成为《散文的时代》。]\n红色文本（保留内容） 在英语课程中学到的东西的一个令人沮丧的方面是，散文与散文之间的相似之处如此之少。高中老师希望你写一篇组织良好的五段文章。大学老师希望你展示你掌握了这个主题，即把所有事实都放在那里，不要太多原创想法。学术期刊的编辑希望你遵循一种形式，其中引言用一段总结你将要说的内容，正文详细说明，结论总结你所说的内容。\n如果你问一个随机的英语老师\u0026quot;什么是散文？\u0026quot;，最可能的答案会是\u0026quot;一种表达你想法的书面作品\u0026quot;，但这个答案是如此模糊，以至于毫无用处。我们使用这个词的频率太高，不能让它如此模糊。我怀疑大多数人会说，他们在高中和大学写作课程中学到的写作类型与他们在杂志中读到的散文类型之间没有太大关系。\n散文这个词的意思是\u0026quot;尝试\u0026quot;。散文是你试图找出某事的书面记录。一篇散文不一定有固定的形式。它更像是一次谈话，但这次你有机会思考你说的话，可以修改它们以使它们尽可能准确。\n在蒙田的时代，这个词的意思更接近现在的\u0026quot;实验\u0026quot;。但蒙田是那种在实验过程中会告诉你他在想什么的科学家。你会看到他尝试不同的方法，有时会犯错误。这会让现代读者感到不安，因为现代散文作者很少这样公开他们的写作过程。他们就像已经完成实验的科学家，正在告诉你结果。\n散文最接近的比喻可能是非虚构作品。但散文不是非虚构作品。散文可以包含任何内容。它可以包含故事、个人经历、事实、观点等等。唯一的要求是它应该尝试弄清楚某事。\n如果你问人们为什么写作，他们可能会说\u0026quot;为了表达自己\u0026quot;。但这是一个相当空洞的答案。你为什么想表达自己？表达自己的哪一部分？你选择表达自己而不是沉默或用棍子击打某人的原因是什么？\n我认为一个更好的答案可能是\u0026quot;为了弄清楚我在想什么\u0026quot;。写作是思考的一种形式。你不是已经有想法然后写下来；你通过写作来弄清楚你的想法。\n大多数人在写作时并没有完全意识到这一点。他们被教导写作是关于\u0026quot;表达自己\u0026quot;，但他们从未被教导这到底意味着什么。\n散文不是你写下来的东西；它是你通过写作发现的东西。\n如果你把散文看作是思考的一种形式，而不是表达你已经思考过的东西，那么很多事情都会变得清晰。例如，为什么散文往往如此个人化？因为思考是非常个人化的。为什么它们往往如此随意？因为思考是随意的。\n学校教授的写作与真实写作之间的主要区别在于，学校教授的写作是\u0026quot;表达你自己\u0026quot;的表演，而真实写作是思考的过程。\n在学校里，你被教导写作是为了展示你已经知道的东西。你被教导要有一个论点，然后用证据支持它。但真实写作不是关于展示你已经知道的东西；它是关于发现你不知道的东西。\n散文的真正目的不是说服；而是探索。如果你探索得足够好，说服可能会随之而来，但那只是副产品。\n散文的另一个特点是它们往往相当长。这是有原因的。思考需要时间。你不能期望在几段内真正探索一个复杂的话题。你需要时间尝试不同的方法，犯错误，然后纠正它们。\n灰色文本（删除内容） 写作课程教授的散文类型实际上是一种相当新的发明。它始于19世纪后期，当时大学开始更多地重视研究。教授们需要一种方式来评估学生是否完成了他们的阅读作业，所以他们发明了这种形式的写作，主要目的是展示你阅读了材料。\n这种写作形式如此成功，以至于它成为了写作教学的标准。但它与散文的传统几乎没有关系。\n在蒙田的时代，散文是你对某个话题的想法的记录。它不一定有固定的形式。它可能包含故事、事实、引用、个人经历，任何有助于你理解该话题的内容。\n现代学术文章与此完全相反。它有严格的形式规则，并且只关心事实和逻辑。个人经历被严格禁止。\n我认为这两种写作都有其用途。学术文章在科学和其他需要客观性的领域很有用。但散文在探索复杂话题方面更有用，特别是那些涉及人类经验的话题。\n问题是学校只教授一种类型的写作，然后期望学生用这种形式写所有内容。\n这就像教人只用锤子，然后期望他们建造房子。锤子很有用，但你还需要其他工具。\n散文写作工具箱应该包含许多不同的工具：故事、事实、个人经历、引用、问题、想法等等。\n但最重要的是，散文应该允许思考的过程可见。读者应该看到作家尝试不同的方法，犯错误，然后纠正他们。\n这要求一种学校不鼓励的脆弱性。在学校里，你被教导要自信，要有一个论点，然后用证据支持它。展示不确定或犯错误是弱点的表现。\n但在真正的散文写作中，不确定和犯错误是过程的一部分。事实上，它们是必不可少的。如果你不犯错误，你可能没有真正探索话题。\n我想这 …"
  },{
    "title": "清醒文化的起源",
    "url": "/paul_graham/essays_zh/woke/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n清醒文化的起源 2025年1月\n\u0026ldquo;prig\u0026quot;这个词现在不是很常见，但如果你查一下定义，听起来会很熟悉。谷歌的定义不错：一个自以为是的道德主义者，表现得好像比别人优越。这个词的这种意思起源于18世纪，它的年龄是一个重要线索：它表明虽然清醒文化是一个相对较新的现象，但它是一个更古老现象的实例。\n有某种人被吸引到一种肤浅、苛刻的道德纯洁，并通过攻击任何打破规则的人来证明他的纯洁。每个社会都有这样的人。唯一改变的是他们执行的规则。在维多利亚时代的英国，这是基督教美德。在斯大林的俄罗斯，这是正统的马克思列宁主义。对于清醒文化的人来说，这是社会正义。\n所以如果你想理解清醒文化，要问的问题不是人们为什么会这样行事。每个社会都有自以为是的人。要问的是为什么我们的自以为是者在这个时刻对这些想法表现得如此自以为是。为了回答这个问题，我们必须问清醒文化何时何地开始。\n第一个问题的答案是1980年代。清醒文化是政治正确的第二次、更具侵略性的浪潮，它始于1980年代后期，在1990年代后期消退，然后在2010年代初带着复仇心理回归，最终在2020年骚乱后达到顶峰。\n政治正确到底是什么？经常有人要求我定义这个术语和清醒文化，他们认为这些是无意义的标签，所以我会定义。它们都有相同的定义：一种激进的表现性对社会正义的关注。换句话说，人们在社会正义方面表现得自以为是。而真正的问题是——表现性，而不是社会正义。[0]\n例如，种族主义是一个真正的问题。不是清醒文化所认为的那种规模的问题，但确实是一个真正的问题。我认为任何合理的人都不会否认这一点。政治正确的问题不在于它关注边缘化群体，而在于它这样做的方式肤浅且激进。政治正确的人没有走出去安静地帮助边缘化群体的成员，而是专注于让人们因为用错误的词语谈论他们而陷入麻烦。\n至于政治正确从哪里开始，如果你想一想，你可能已经知道答案了。它是在大学之外开始然后从外部传播到大学的吗？显然不是；它在大学中一直最为极端。那么在大学的哪里开始呢？它是在数学、硬科学或工程学中开始，然后从那里传播到人文和社会科学吗？这些是令人发笑的图像，但不，显然它是在人文和社会科学中开始的。\n为什么在那里？为什么是那个时候？1980年代人文和社会科学发生了什么？\n一个成功的政治正确起源理论必须能够解释为什么它没有更早发生。例如，为什么它没有在1960年代的抗议运动中发生？它们关注的是几乎相同的问题。[1]\n1960年代学生抗议没有导致政治正确的恰恰是——它们是学生运动。它们没有任何真正的权力。学生们可能一直在谈论妇女解放和黑人权力，但这不是他们在课堂上被教导的内容。还不是。\n但在1970年代初，1960年代的学生抗议者开始完成他们的论文并被聘为教授。起初他们既不强大也不众多。但随着更多的同龄人加入他们，前一代的教授开始退休，他们逐渐变得既强大又众多。\n政治正确在人文和社会科学中开始的原因是这些领域为政治的注入提供了更多空间。一个1960年代的激进分子如果获得物理学教授的工作，仍然可以参加抗议，但他的政治信仰不会影响他的工作。而社会学和现代文学的研究可以变得像你希望的那样政治化。[2]\n我看到政治正确的兴起。当我在1982年开始上大学时，这还不是一件事。如果有人说出他们认为性别歧视的话，女学生可能会反对，但没有人因此被举报。当我在1986年开始读研究生时，这仍然不是一件事。但到了1988年，这肯定是一件事，到了1990年代初，它似乎充斥着校园生活。\n发生了什么？抗议是如何变成惩罚的？为什么1980年代后期是对男性沙文主义（当时被称为）的抗议演变成对大学当局关于性别歧视的正式投诉的转折点？基本上，1960年代的激进分子获得了终身职位。他们成为了他们二十年前抗议的建制派。现在他们处于不仅可以表达他们的想法，而且可以执行它们的位置。\n一套新的道德规则要执行对某种学生来说是令人兴奋的消息。特别令人兴奋的是他们被允许攻击教授。我记得当时注意到了政治正确的这个方面。它不仅仅是一个草根学生运动。它是教职员工鼓励学生攻击其他教职员工。在这方面它很像文化大革命。那也不是一场草根运动；那是毛泽东将年轻一代释放到他的政治对手身上。事实上，当罗德里克·麦克法夸尔在1980年代后期开始在哈佛教授一门关于文化大革命的课程时，许多人认为这是对当前事件的评论。我不知道它是否真的是，但人们认为是，这意味着相似之处是显而易见的。[3]\n大学生会进行角色扮演。这是他们的天性。这通常是无害的。但角色扮演道德被证明是一种有毒的组合。结果是一种道德礼仪，肤浅但非常复杂。想象一下，你必须向一个善意的来自外星球的访客解释为什么使用\u0026quot;有色人种\u0026quot;这个短语被认为特别开明，而说\u0026quot;有色人\u0026quot;会让你被解雇。为什么现在不应该使用\u0026quot;黑人\u0026quot;这个词，尽管马丁·路德·金在他的演讲中经常使用它。没有基本原则。你只能给他一长串规则要记住。[4]\n这些规则的危险不仅在于它们为不知情的人制造了地雷，而且在于它们的复杂性使它们成为美德的有效替代品。每当一个社会有异端和正统的概念时，正统就成为美德的替代品。你可以成为世界上最糟糕的人，但只要你正统，你就比所有不正统的人更好。这使得正统对坏人非常有吸引力。\n但要使它作为美德的替代品起作用，正统必须是困难的。如果你要做的就是正统，穿某种衣服或避免说某个词，每个人都知道要这样做，而显得比别人更有美德的唯一方法就是真正有美德。政治正确的肤浅、复杂和频繁变化的规则使其成为实际美德的完美替代品。结果是一个世界，在这个世界里，不了解当前道德时尚的好人被那些如果你能看到他们的性格会让你恐惧地退缩的人打倒。\n政治正确兴起的一个很大因素是缺乏其他可以道德纯洁的东西。以前几代的自以为是者大多在宗教和性方面表现得自以为是。但在文化精英中，到1980年代这些都是最过时的东西；如果你是宗教徒或处女，这是你倾向于隐瞒而不是广告的事情。所以那些喜欢做道德执行者的人已经变得缺乏执行的东西。一套新的规则正是他们一直在等待的。\n奇怪的是，1960年代左派的宽容方面帮助创造了不容忍方面占主导地位的条件。老派、随意的嬉皮左派倡导的宽松社会规则成为主导，至少在精英中是这样，这为天生不容忍的人留下不容忍的空间。\n另一个可能的促成因素是苏联帝国的衰落。在政治正确作为竞争者出现之前，马克思主义一直是左派道德纯洁的流行焦点，但东欧国家的民主运动使其失去了大部分光彩。特别是1989年柏林墙的倒塌。你不可能站在斯塔西一边。我记得在1980年代后期看着剑桥一家二手书店里奄奄一息的苏联研究区，想着\u0026quot;那些人现在会谈论什么？\u0026ldquo;结果答案就在我眼皮底下。\n我当时注意到政治正确第一阶段的一个特点是它比男性更受女性欢迎。正如许多作家（也许最有说服力的是乔治·奥威尔）所观察到的，女性似乎比男性更倾向于成为道德执行者的想法。但女性倾向于成为政治正确的执行者还有另一个更具体的原因。当时对性骚扰有很大的强烈反对；1980年代中期是性骚扰的定义从明确的性骚扰扩展到创造\u0026quot;敌对环境\u0026quot;的时期。在大学内，经典的指控形式是（女性）学生说教授让她\u0026quot;感到不舒服\u0026rdquo;。但这种指控的模糊性使得禁止行为的半径扩大到包括谈论异端思想。那些也让人感到不舒服。[5]\n提出达尔文的更大男性变异性假说可能解释人类表现的一些差异是否是性别歧视？显然足以让拉里·萨默斯被赶下哈佛校长的位置。一个听到他提到这个想法的演讲的女性说这让她\u0026quot;身体不适\u0026rdquo;，她不得不在中途离开。如果敌对环境的检验是它如何让人感觉，这确实听起来像一个。然而，更大男性变异性确实似乎解释了人类表现的一些差异。那么应该占上风的是舒适还是真理？当然，如果真理应该在任何地方占上风，它应该是在大学里；据说是他们的专长；但从1980年代后期开始的几十年里，政治正确的人试图假装这种冲突不存在。[6]\n政治正确似乎在1990年代后半期燃尽。一个原因，也许是主要原因，是它确实成了一个笑话。它为喜剧演员提供了丰富的素材，他们对其进行了通常的消毒作用。幽默是对任何类型的自以为是最强大的武器之一，因为自以为是的人缺乏幽默感，无法以同样的方式回应。幽默是击败维多利亚时代虚伪的东西，到2000年，它似乎对政治正确也做了同样的事情。\n不幸的是，这是一种幻觉。在大学内，政治正确的余烬仍然在明亮地燃烧。毕竟，创造它的力量仍然存在。开始它的教授现在成为院长和系主任。除了他们的系之外，现在还有一堆新的系明确专注于社会正义。学生仍然渴望有东西可以道德纯洁。大学管理员的数量爆炸式增长，其中许多人的工作涉及执行各种形式的政治正确。\n在2010年代初，政治正确的余烬重新燃起火焰。这个新阶段与原始阶段有几个不同之处。它更具毒性。它进一步传播到现实世界，尽管它在大学内仍然最为炽热。它关注更广泛的罪恶。在政治正确的第一阶段，人们真正被指控的只有三件事：性别歧视、种族主义和同性恋恐惧症（当时是为这个目的创造的新词）。但在那时和2010年之间，很多人花了很多时间试图发明新的-主义和-恐惧症，看看哪些能够坚持下去。\n第二阶段在多种意义上是政治正确的转移。它为什么在那个时候发生？我的猜测是由于社交媒体的兴起，特别是Tumblr和Twitter，因为政治正确第二波最显著的特征之一是取消暴民：一群愤怒的人在社交媒体上联合起来让某人被排斥或解雇。事实上，这第二波政治正确最初被称为\u0026quot;取消文化\u0026quot;；直到2020年代才开始被称为\u0026quot;清醒文化\u0026quot;。\n社交媒体的一个方面起初几乎让每个人都感到惊讶的是愤怒的流行。用户似乎喜欢愤怒。我们现在太习惯这个想法了，认为理所当然，但这确实很奇怪。愤怒不是一种愉快的感觉。你不会期望人们去寻求它。但他们确实如此。最重要的是，他们想要分享它。我碰巧在2007年到2014年运营一个论坛，所以我实际上可以量化他们想要分享它的程度：我们的用户如果被某事激怒，大约有三倍的可能性会点赞它。\n这种向愤怒的倾斜不是由于清醒文化。它是社交媒体的一个固有特征，或者至少是这一代的特征。但它确实使社交媒体成为煽动清醒文化火焰的完美机制。[7]\n不仅仅是公共社交网络推动了清醒文化的兴起。群聊应用程序也很关键，特别是在最后一步，取消。想象一下，如果一群试图让某人被解雇的员工只能使用电子邮件来做这件事。组织暴民会很困难。但一旦你有群聊，暴民就会自然形成。\n政治正确第二波的另一个促成因素是新闻界两极分化的急剧增加。在印刷时代，报纸被约束为，或者至少显得，政治中立。在《纽约时报》上做广告的百货公司想要到达该地区的每个人，无论是自由派还是保守派，所以《时报》必须服务于双方。但《时报》并不认为这种中立是强加给他们的。他们将其接受为作为记录报纸的职责——作为旨在成为时代编年史的大报纸之一，从中立的角度报道每个足够重要的故事。\n当我长大时，记录报纸似乎是不朽的、几乎是神圣的机构。像《纽约时报》和《华盛顿邮报》这样的报纸拥有巨大的声望，部分是因为其他新闻来源有限，但也因为他们确实做了一些努力来保持中立。\n不幸的是，事实证明记录报纸主要是印刷约束的产物。[8] 当你的市场由地理决定时，你必须保持中立。但在线出版使——实际上可能迫使——报纸切换到由意识形态而非地理定义的市场。大多数仍然经营的机构倒向它们已经倾斜的方向：左派。2020年10月11日，《纽约时报》宣布\u0026quot;该报正在从古板的记录报纸演变为一系列精彩叙事的果汁集合。\u0026quot;[9] 同时，某种记者也出现了为右派服务。因此新闻业，在前一个时代曾是伟大的集中力量之一，现在成为伟大的两极分化力量之一。\n社交媒体的兴起和新闻业日益增长的两极分化相互强化。事实上，出现了一种新型的新闻业，涉及通过社交媒体的循环。有人在社交媒体上说一些有争议的话。几小时内，它就成为新闻故事。愤怒的读者然后在社交媒体上发布故事的链接，推动进一步的在线争论。这是可以想象的最便宜的点击来源。你不必维持海外新闻局或支付为期一个月的调查费用。你所要做的就是观看Twitter上的有争议言论，并在你的网站上重新发布它们，加上一些额外的评论来进一步激怒读者。\n对于新闻界来说，清醒文化中有钱。但他们不是唯一的人。这是政治正确两波之间最大的区别之一：第一波几乎完全由业余爱好者驱动，但第二波通常由专业人士驱动。对一些人来说，这是他们的全部工作。到2010年，出现了一个新的管理员阶层，他们的工作基本上是执行清醒文化。他们扮演的角色类似于苏联中附着在军事和工业组织上的政治委员：他们不直接参与组织工作的流程，而是在一旁观察以确保在做这件事时没有发生不当行为。这些新管理员通常可以通过他们头衔中的\u0026quot;包容\u0026quot;一词来识别。在机构内，这是清醒文化的首选委婉说法；例如，新的禁用词列表通常被称为\u0026quot;包容性语言指南\u0026quot;。[10]\n这个新的官僚阶层追求清醒文化的议程，好像他们的工作取决于它，因为确实如此。如果你雇佣人们监视特定类型的问题，他们会找到它，否则就没有存在的理由。[11] 但这些官僚也代表了第二个甚至更大的危险。许多人参与招聘，并在可能时试图确保他们的雇主只雇佣那些与他们有相同政治信仰的人。最恶劣的情况是一些大学开始要求教师候选人写\u0026quot;DEI声明\u0026quot;，证明他们对清醒文化的承诺。一些大学将这些陈述作为初始过滤器，只考虑得分足够高的候选人。那样你雇佣的不是爱因斯坦；想象一下你得到的是什么。\n清醒文化兴起的另一个因素是\u0026quot;黑人的命也是命\u0026quot;运动，该运动始于2013年，当时一名白人在佛罗里达州杀死一名黑人青少年后被宣告无罪。但这并没有发起清醒文化；到2013年它已经很好地进行了。\n同样对于\u0026quot;我也是运动\u0026quot;，该运动在2017年关于哈维·温斯坦强奸女性历史的第一篇新闻报道后起飞。它加速了清醒文化，但没有像80年代版本在发起政治正确时那样发挥相同的作用。\n唐纳德·特朗普在2016年的选举也加速了清醒文化，特别是在新闻界，愤怒现在意味着流量。特朗普让《纽约时报》赚了很多钱：他第一届政府期间的头条新闻提到他名字的速度大约是前任总统的四倍。\n2020年我们看到了最大的加速剂，在一名白人警察在视频上窒息一名黑人嫌疑人之后。此时，比喻性的火焰变成了字面意义上的火焰，因为暴力抗议在美国各地爆发。但回想起来，这结果证明是清醒文化的顶峰，或接近顶峰。根据我所见到的每一个衡量标准，清醒文化在2020年或2021年达到顶峰。\n清醒文化有时被描述为一种精神病毒。使其具有病毒性的是它定义了新的不当行为类型。大多数人都害怕不当行为；他们永远不确定社会规则是什么，或者他们可能违反哪些规则。特别是如果规则迅速变化。而且由于大多数人已经担心他们可能违反他们不知道的规则，如果你告诉他们他们违反了规则，他们的默认反应是相信你。特别是如果多个人告诉他们。这反过来又是指数增长的配方。狂热者发明了一些新的不当行为来避免。第一批采用它的是 fellow 狂热者，渴望新的方式来表明他们的美德。如果有足够多的这样的人，初始的狂热者群体后面跟着一个更大的群体，由恐惧驱动。他们不是在试图表明美德；他们只是试图避免陷入麻烦。此时新的不当行为现在牢固地建立起来了。此外，它的成功增加了社会规则变化的速度，记住，这是人们对他们可能违反哪些规则感到紧张的原因之一。所以循环加速了。[12]\n对个人如此的东西对组织更是如此。特别是没有强大领导者的组织。这样的组织一切都基于\u0026quot;最佳实践\u0026quot;。没有更高的权威；如果一些新的\u0026quot;最佳实践\u0026quot;达到临界质量，他们必须采用它。在这种情况下，组织不能做它通常在不确定时做的事情：延迟。它可能正在犯不当行为！所以一小群狂热者通过描述它可能犯的新的不当行为来捕获这种类型的组织是惊人地容易。[13]\n这种循环如何结束？最终它导致灾难，人们开始说够了就是够了。2020年的过度行为让很多人这么说。\n从那时起，清醒文化一直在逐渐但持续地退缩。公司CEO，从布莱恩·阿姆斯特朗开始，已经公开拒绝了它。大学，由芝加哥大学和麻省理工学院领导，已经明确确认了他们对言论自由的承诺。Twitter，可以说是清醒文化的中心，被埃隆·马斯克购买以中和它，他似乎已经成功了——而且，顺便说一句，不是通过像Twitter过去审查右翼用户那样审查左翼用户，而是两者都不审查。[14] 消费者 emphatically 拒绝了那些过于深入清醒文化的品牌。百威品牌可能因此受到永久损害。我不打算声称特朗普在2024年的第二次胜利是对清醒文化的全民公投；我认为他赢了，就像总统候选人通常做的那样，因为他更有魅力；但选民对清醒文化的厌恶肯定有所帮助。\n那么我们现在做什么？清醒文化已经在退却了。显然我们应该帮助它继续。最好的方法是什么？更重要的是，我们如何避免第三次爆发？毕竟，它似乎已经死过一次，但又回来得更糟糕。\n事实上，还有一个更雄心勃勃的目标：有没有办法防止未来任何类似的激进表现性道德主义爆发——不仅仅是政治正确的第三次爆发，而是类似它的下一件事？因为会有下一件事。自以为是者天生就是自以为是者。他们需要规则来遵守和执行，现在达尔文已经切断了他们传统的规则供应，他们不断地渴望新的规则。他们所需要的只是有人在中途与他们会面，定义一种新的道德纯洁方式，我们将再次看到同样的现象。\n让我们从更简单的问题开始。有没有一种简单、有原则的方法来处理清醒文化？我认为有：使用我们已有的处理宗教的习俗。清醒文化实际上是一种宗教，只是用被保护的群体取代了上帝。它甚至不是第一种这类宗教；马克思主义有类似的形式，用群众取代了上帝。[15] 而且我们已经有完善的习俗来在组织内处理宗教。你可以表达你自己的宗教身份并解释你的信仰，但你不能如果你的同事不同意就称他们为异教徒，或试图禁止他们说与其教义相矛盾的话，或坚持组织采用你的作为其官方宗教。\n如果我们不确定如何处理清醒文化的任何特定表现，想象我们在处理其他宗教，比如基督教。我们应该有组织内的人的工作是强制执行清醒文化的正统观念吗？不，因为我们不会有人 whose jobs were to enforce Christian orthodoxy。我们应该审查其工作与清醒文化教义相矛盾的作家或科学家吗？不，因为我们不会对那些其工作与基督教教义相矛盾的人这样做。求职者应该被要求写DEI声明吗？当然不；想象一下雇主要求证明一个人的宗教信仰。学生和员工应该被迫参加清醒文化灌输会议，在会议上他们被要求回答关于他们信仰的问题以确保合规吗？不，因为我们不会梦想以这种方式对他们进行宗教教义问答。[16]\n一个人不应该因为不想看清醒文化的电影而感到难过，就像不想听基督教摇滚乐而感到难过一样。在我二十多岁时，我几次开车穿越美国，听当地的广播电台。偶尔我会转动拨盘听到一些新歌。但一旦有人提到耶稣，我就会再次转动拨盘。即使是最微小的说教也足以让我失去兴趣。\n但同样，我们不应该自动拒绝清醒文化信徒所相信的一切。我不是基督徒，但我能看到许多基督教原则是好的。仅仅因为不分享 espouses 它们的宗教就丢弃所有这些将是一个错误。这将是一个宗教狂热者会做的事情。\n",
    "description": "",
    "tags": ["清醒文化","政治正确","社会正义","文化","社会"],
    "categories": [],
    "content": "→ English Version\n清醒文化的起源 2025年1月\n\u0026ldquo;prig\u0026quot;这个词现在不是很常见，但如果你查一下定义，听起来会很熟悉。谷歌的定义不错：一个自以为是的道德主义者，表现得好像比别人优越。这个词的这种意思起源于18世纪，它的年龄是一个重要线索：它表明虽然清醒文化是一个相对较新的现象，但它是一个更古老现象的实例。\n有某种人被吸引到一种肤浅、苛刻的道德纯洁，并通过攻击任何打破规则的人来证明他的纯洁。每个社会都有这样的人。唯一改变的是他们执行的规则。在维多利亚时代的英国，这是基督教美德。在斯大林的俄罗斯，这是正统的马克思列宁主义。对于清醒文化的人来说，这是社会正义。\n所以如果你想理解清醒文化，要问的问题不是人们为什么会这样行事。每个社会都有自以为是的人。要问的是为什么我们的自以为是者在这个时刻对这些想法表现得如此自以为是。为了回答这个问题，我们必须问清醒文化何时何地开始。\n第一个问题的答案是1980年代。清醒文化是政治正确的第二次、更具侵略性的浪潮，它始于1980年代后期，在1990年代后期消退，然后在2010年代初带着复仇心理回归，最终在2020年骚乱后达到顶峰。\n政治正确到底是什么？经常有人要求我定义这个术语和清醒文化，他们认为这些是无意义的标签，所以我会定义。它们都有相同的定义：一种激进的表现性对社会正义的关注。换句话说，人们在社会正义方面表现得自以为是。而真正的问题是——表现性，而不是社会正义。[0]\n例如，种族主义是一个真正的问题。不是清醒文化所认为的那种规模的问题，但确实是一个真正的问题。我认为任何合理的人都不会否认这一点。政治正确的问题不在于它关注边缘化群体，而在于它这样做的方式肤浅且激进。政治正确的人没有走出去安静地帮助边缘化群体的成员，而是专注于让人们因为用错误的词语谈论他们而陷入麻烦。\n至于政治正确从哪里开始，如果你想一想，你可能已经知道答案了。它是在大学之外开始然后从外部传播到大学的吗？显然不是；它在大学中一直最为极端。那么在大学的哪里开始呢？它是在数学、硬科学或工程学中开始，然后从那里传播到人文和社会科学吗？这些是令人发笑的图像，但不，显然它是在人文和社会科学中开始的。\n为什么在那里？为什么是那个时候？1980年代人文和社会科学发生了什么？\n一个成功的政治正确起源理论必须能够解释为什么它没有更早发生。例如，为什么它没有在1960年代的抗议运动中发生？它们关注的是几乎相同的问题。[1]\n1960年代学生抗议没有导致政治正确的恰恰是——它们是学生运动。它们没有任何真正的权力。学生们可能一直在谈论妇女解放和黑人权力，但这不是他们在课堂上被教导的内容。还不是。\n但在1970年代初，1960年代的学生抗议者开始完成他们的论文并被聘为教授。起初他们既不强大也不众多。但随着更多的同龄人加入他们，前一代的教授开始退休，他们逐渐变得既强大又众多。\n政治正确在人文和社会科学中开始的原因是这些领域为政治的注入提供了更多空间。一个1960年代的激进分子如果获得物理学教授的工作，仍然可以参加抗议，但他的政治信仰不会影响他的工作。而社会学和现代文学的研究可以变得像你希望的那样政治化。[2]\n我看到政治正确的兴起。当我在1982年开始上大学时，这还不是一件事。如果有人说出他们认为性别歧视的话，女学生可能会反对，但没有人因此被举报。当我在1986年开始读研究生时，这仍然不是一件事。但到了1988年，这肯定是一件事，到了1990年代初，它似乎充斥着校园生活。\n发生了什么？抗议是如何变成惩罚的？为什么1980年代后期是对男性沙文主义（当时被称为）的抗议演变成对大学当局关于性别歧视的正式投诉的转折点？基本上，1960年代的激进分子获得了终身职位。他们成为了他们二十年前抗议的建制派。现在他们处于不仅可以表达他们的想法，而且可以执行它们的位置。\n一套新的道德规则要执行对某种学生来说是令人兴奋的消息。特别令人兴奋的是他们被允许攻击教授。我记得当时注意到了政治正确的这个方面。它不仅仅是一个草根学生运动。它是教职员工鼓励学生攻击其他教职员工。在这方面它很像文化大革命。那也不是一场草根运动；那是毛泽东将年轻一代释放到他的政治对手身上。事实上，当罗德里克·麦克法夸尔在1980年代后期开始在哈佛教授一门关于文化大革命的课程时，许多人认为这是对当前事件的评论。我不知道它是否真的是，但人们认为是，这意味着相似之处是显而易见的。[3]\n大学生会进行角色扮演。这是他们的天性。这通常是无害的。但角色扮演道德被证明是一种有毒的组合。结果是一种道德礼仪，肤浅但非常复杂。想象一下，你必须向一个善意的来自外星球的访客解释为什么使用\u0026quot;有色人种\u0026quot;这个短语被认为特别开明，而说\u0026quot;有色人\u0026quot;会让你被解雇。为什么现在不 …"
  },{
    "title": "温和派",
    "url": "/paul_graham/essays_zh/mod/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n温和派 两种温和派 2019年12月\n成为政治温和派有两种截然不同的方式：有意为之和偶然使然。有意为之的温和派是骑墙派，故意选择介于左右极端之间的中间立场。偶然的温和派平均而言最终处于中间位置，因为他们对每个问题都独立思考，而极右和极左几乎是同等错误的。\n你可以通过他们意见的分布来区分有意为之和偶然使然的温和派。如果在某个问题上极左的意见是0，极右的意见是100，那么有意为之的温和派在每个问题上的意见都将接近50。而偶然的温和派的意见将散布在一个广泛的范围内，但与有意为之的温和派一样，平均约为50。\n有意为之的温和派与极左和极右的人相似，因为他们的意见在某种意义上不是自己的。思想家的决定性特征，无论是左派还是右派，都是批量获取意见。你不能挑挑拣拣。你对税收的意见可以从你对性的意见中预测出来。虽然有意为之的温和派似乎与思想家相反，但他们的信念（尽管在这种情况下\u0026quot;立场\u0026quot;这个词可能更准确）也是批量获得的。如果中间意见向右或向左转变，有意为之的温和派必须随之转变。否则他们就不再是温和派了。\n另一方面，偶然的温和派不仅选择自己的答案，还选择自己的问题。他们可能根本不在乎左右两派都认为非常重要的问题。因此，你只能从偶然温和派关心的问题和左右两派关心的问题的交集来衡量他们的政治立场，而这个交集有时可能小到可以忽略不计。\n说\u0026quot;如果你不支持我们，你就是反对我们\u0026quot;不仅仅是一种操纵性的修辞技巧，而且常常是错误的。\n温和派有时被贬斥为懦夫，特别是被极左派。但是，虽然称有意为之的温和派为懦夫可能是准确的，但公开成为偶然的温和派需要最大的勇气，因为你会受到左右两派的攻击，而且你没有作为大团体正统成员的安慰来支持你。\n我认识的最令人印象深刻的人几乎都是偶然的温和派。如果我认识很多职业运动员或娱乐界人士，情况可能不同。站在极左或极右不会影响你跑得有多快或唱得有多好。但从事思想工作的人必须独立思考才能做好工作。\n或者更准确地说，你必须对你使用的思想独立思考。你可能在政治上盲目教条，但仍然是一个优秀的数学家。在20世纪，很多非常聪明的人是马克思主义者——只是没有人在马克思主义涉及的学科上是聪明的。但如果你在工作中使用的思想与你时代的政治相交，你有两个选择：成为偶然的温和派，或者平庸。\n注释 [1] 理论上，一方完全正确而另一方完全错误是可能的。事实上，思想家必须始终相信情况就是如此。但历史上很少如此。\n[2] 出于某种原因，极右派倾向于忽视温和派，而不是像鄙视叛教者那样鄙视他们。我不确定为什么。也许这意味着极右派不如极左派意识形态化。或者他们更自信，或更顺从，或者只是更无组织。我只是不知道。\n[3] 持有异端意见并不意味着你必须公开表达它们。如果你不表达，可能更容易持有它们。\n感谢 Austen Allred、Trevor Blackwell、Patrick Collison、Jessica Livingston、Amjad Masad、Ryan Petersen 和 Harj Taggar 阅读本文的草稿。\n日语翻译",
    "description": "",
    "tags": ["政治","温和","独立思考","意识形态","勇气"],
    "categories": [],
    "content": "→ English Version\n温和派 两种温和派 2019年12月\n成为政治温和派有两种截然不同的方式：有意为之和偶然使然。有意为之的温和派是骑墙派，故意选择介于左右极端之间的中间立场。偶然的温和派平均而言最终处于中间位置，因为他们对每个问题都独立思考，而极右和极左几乎是同等错误的。\n你可以通过他们意见的分布来区分有意为之和偶然使然的温和派。如果在某个问题上极左的意见是0，极右的意见是100，那么有意为之的温和派在每个问题上的意见都将接近50。而偶然的温和派的意见将散布在一个广泛的范围内，但与有意为之的温和派一样，平均约为50。\n有意为之的温和派与极左和极右的人相似，因为他们的意见在某种意义上不是自己的。思想家的决定性特征，无论是左派还是右派，都是批量获取意见。你不能挑挑拣拣。你对税收的意见可以从你对性的意见中预测出来。虽然有意为之的温和派似乎与思想家相反，但他们的信念（尽管在这种情况下\u0026quot;立场\u0026quot;这个词可能更准确）也是批量获得的。如果中间意见向右或向左转变，有意为之的温和派必须随之转变。否则他们就不再是温和派了。\n另一方面，偶然的温和派不仅选择自己的答案，还选择自己的问题。他们可能根本不在乎左右两派都认为非常重要的问题。因此，你只能从偶然温和派关心的问题和左右两派关心的问题的交集来衡量他们的政治立场，而这个交集有时可能小到可以忽略不计。\n说\u0026quot;如果你不支持我们，你就是反对我们\u0026quot;不仅仅是一种操纵性的修辞技巧，而且常常是错误的。\n温和派有时被贬斥为懦夫，特别是被极左派。但是，虽然称有意为之的温和派为懦夫可能是准确的，但公开成为偶然的温和派需要最大的勇气，因为你会受到左右两派的攻击，而且你没有作为大团体正统成员的安慰来支持你。\n我认识的最令人印象深刻的人几乎都是偶然的温和派。如果我认识很多职业运动员或娱乐界人士，情况可能不同。站在极左或极右不会影响你跑得有多快或唱得有多好。但从事思想工作的人必须独立思考才能做好工作。\n或者更准确地说，你必须对你使用的思想独立思考。你可能在政治上盲目教条，但仍然是一个优秀的数学家。在20世纪，很多非常聪明的人是马克思主义者——只是没有人在马克思主义涉及的学科上是聪明的。但如果你在工作中使用的思想与你时代的政治相交，你有两个选择：成为偶然的温和派，或者平庸。\n注释 [1] 理论上，一方完全正确而另一方完全错误是可能的。事实上，思想家必须始终相信情况就是如此。但历史上很少如此。\n[2] 出于某种原因，极右派倾向于忽视温和派，而不是像鄙视叛教者那样鄙视他们。我不确定为什么。也许这意味着极右派不如极左派意识形态化。或者他们更自信，或更顺从，或者只是更无组织。我只是不知道。\n[3] 持有异端意见并不意味着你必须公开表达它们。如果你不表达，可能更容易持有它们。\n感谢 Austen Allred、Trevor Blackwell、Patrick Collison、Jessica Livingston、Amjad Masad、Ryan Petersen 和 Harj Taggar 阅读本文的草稿。\n日语翻译 "
  },{
    "title": "潜水艇",
    "url": "/paul_graham/essays_zh/submarine/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n潜水艇 2005年4月\n\u0026ldquo;西装在企业界卷土重来，\u0026quot;《纽约时报》说。为什么这听起来很熟悉？也许是因为西装在2005年2月、2004年9月、2004年6月、2004年3月、2003年9月、2002年11月、2002年4月和2002年2月也都回来了。为什么媒体不断刊登说西装回来的故事？因为公关公司告诉他们这样做。在我短暂的商业生涯中发现的最令人惊讶的事情之一是公关行业的存在，像一艘巨大的、安静的潜水艇一样潜伏在新闻之下。你在传统媒体上读到的非政治、犯罪或灾难的故事中，超过一半可能来自公关公司。\n我知道，因为我花了多年时间寻找这样的\u0026quot;媒体曝光\u0026rdquo;。我们的创业公司把整个营销预算都花在公关上：在那时我们自己组装电脑以省钱，我们却每月给公关公司支付16,000美元。而且他们值得这个价钱。公关是新闻中相当于搜索引擎优化的东西；你不是购买读者会忽略的广告，而是让自己直接被插入到故事中。[1]\n我们的公关公司是业内最好的之一。在18个月内，他们在60多家不同的出版物中获得了媒体曝光。而且我们不是他们为之做伟大工作的唯一客户。1997年，我接到另一个创业公司创始人的电话，他考虑雇佣他们来推广他的公司。我告诉他们他们是公关之神，他们离谱的费用每一分钱都值得。但我记得当时觉得他公司的名字很奇怪。为什么把拍卖网站叫\u0026quot;eBay\u0026quot;？\n共生 公关不诚实。不完全是。事实上，最好的公关公司如此有效的原因恰恰是它们不诚实。它们给记者真正有价值的信息。好的公关公司不会因为客户告诉他们就去骚扰记者；他们努力在记者中建立信誉，他们不想通过向他们提供纯粹的宣传来破坏它。\n如果说有人不诚实，那是记者。公关公司存在的主要原因是记者懒惰。或者，更温和地说，是工作过度。他们真的应该出去为自己挖掘故事。但坐在办公室里让公关公司把故事带给他们是如此诱人。毕竟，他们知道好的公关公司不会对他们撒谎。\n好的奉承者不说谎，而是告诉受害者选择性的真相（你的眼睛颜色真好看）。好的公关公司使用相同的策略：他们给记者真实的故事，但真相有利于他们的客户。\n例如，我们的公关公司经常推销关于网络如何让小商家与大商家竞争的故事。这是完全真实的。但记者最终写关于这个特定真相而不是其他真相的故事的原因是，小商家是我们的目标市场，而我们正在付钱。\n不同出版物对公关公司的依赖程度差异很大。在底层的是行业媒体，他们的大部分收入来自广告，如果广告商允许，他们会免费赠送杂志。[2] 一般的行业出版物是一堆广告，用足够的文章粘合在一起，使其看起来像一本杂志。他们对\u0026quot;内容\u0026quot;如此绝望，以至于如果你费心写新闻稿使其读起来像文章，一些会几乎逐字印刷你的新闻稿。\n另一个极端是像《纽约时报》和《华尔街日报》这样的出版物。他们的记者确实出去寻找自己的故事，至少有时候是这样。他们会听公关公司的话，但简短而怀疑。我们设法在几乎每家我们想要的出版物中获得了媒体曝光，但我们从未设法打入《纽约时报》的印刷版。[3]\n顶级记者的弱点不是懒惰，而是虚荣。你不向他们推销故事。你必须接近他们，好像你是他们全视显微镜下的标本，并让他们觉得你想要他们运行的故事是他们自己想到的。\n我们最大的公关政变是一个两部分的。我们基于一些相当不正式的数学估计，网络上大约有5000家商店。我们让一家报纸印刷这个数字，这似乎足够中立。但一旦这个\u0026quot;事实\u0026quot;在那里印刷出来，我们可以向其他出版物引用它，并声称有1000个用户，我们拥有在线商店市场的20%。\n这大致是真实的。我们确实拥有在线商店市场的最大份额，5000是我们对其规模的最好猜测。但故事在媒体中出现的方式听起来要确定得多。\n记者喜欢确定的陈述。例如，许多关于Jeremy Jaynes定罪的故事说他是十大垃圾邮件发送者之一。这个\u0026quot;事实\u0026quot;起源于Spamhaus的ROKSO名单，我认为即使是Spamhaus也会承认这是对顶级垃圾邮件发送者的粗略估计。关于Jaynes的早期故事引用了这个来源，但现在它只是被重复，好像它是起诉书的一部分。[4]\n关于Jaynes你唯一可以确定的是他是一个相当大的垃圾邮件发送者。但记者不想打印像\u0026quot;相当大\u0026quot;这样模糊的东西。他们想要有冲击力的陈述，比如\u0026quot;前十名\u0026quot;。而公关公司给他们想要的东西。我们被告知，穿西装会使我们的生产力提高3.6%。\n传播 公关公司的工作真正变得故意误导的地方是在制造\u0026quot;传播\u0026quot;时。他们通常同时向几家不同的出版物提供相同的故事。当读者在多个地方看到类似的故事时，他们认为有一些重要的趋势正在进行。这正是他们应该想的。\n当Windows 95发布时，人们在午夜在商店外排队购买第一批拷贝。如果没有公关公司，他们不会在那里，公关公司在新闻媒体中制造了如此大的传播，以至于它变得自我强化，就像核连锁反应一样。\n我怀疑公关公司是否意识到这一点，但网络使得跟踪它们的工作成为可能。如果你搜索明显的短语，你会发现多年来几次尝试放置关于西装回归的故事。例如，2004年9月被《今日美国》转载的路透社文章。\u0026ldquo;西装回来了，\u0026ldquo;它开始说。\n像这样的趋势文章几乎总是公关公司的工作。一旦你知道如何阅读它们，就很容易找出谁是客户。对于趋势故事，公关公司通常安排一个或多个\u0026quot;专家\u0026quot;来一般性地谈论行业。在这个案例中，我们得到三个：NPD集团，《GQ》的创意总监，和Smith Barney的研究总监。[5] 当你到达专家的末尾时，寻找客户。瞧，就是它：The Men\u0026rsquo;s Wearhouse。\n不奇怪，考虑到The Men\u0026rsquo;s Wearhouse当时正在运行广告说\u0026quot;西装回来了\u0026rdquo;。谈到成功的媒体曝光——一篇通讯社文章的第一句话是你自己的广告文案。\n从特定推介中找到其他媒体曝光的秘密是意识到它们都从公关公司的同一份文件开始。搜索几个关键短语以及客户和专家的名字，你会发现这个故事的其他变体。\n\u0026ldquo;休闲星期五已经过时，着装规范回来了，\u0026ldquo;Diane E. Lewis在《波士顿环球报》中写道。一个显著的巧合是，Lewis女士的行业联系人也包括《GQ》的创意总监。\n\u0026ldquo;破洞牛仔裤和T恤已经过时了，\u0026ldquo;Mary Kathleen Flynn在《美国新闻与世界报道》中写道。她也认识《GQ》的创意总监。\n\u0026ldquo;男士西装回来了，\u0026ldquo;Nicole Ford在Sexbuzz.Com上写道（\u0026ldquo;终极男士娱乐杂志\u0026rdquo;）。\n\u0026ldquo;随着男士在办公室穿西装，休闲着装失去吸引力，\u0026quot;《底特律新闻》的Tenisha Mercer写道。\n既然现在这么多新闻文章在线，我怀疑你可以为大多数公关公司放置的趋势故事找到类似的模式。我建议我们称这项新运动为\u0026quot;公关潜水\u0026rdquo;，我相信那里有比这五个故事群更引人注目的例子。\n在线 在追赶了多年之后，现在对我来说，识别媒体曝光的本质已经成了第二天性。但在我们雇佣公关公司之前，我不知道主流媒体的文章来自哪里。我可以说很多都是垃圾，但我不知道为什么。\n还记得你在学校做过的批判性阅读练习吗，你必须看一篇写作，退后一步，问作者是否在告诉全部真相？如果你真的想成为一个批判性的读者，事实证明你必须再退后一步，不仅问作者是否在说真话，还要问为什么他首先写这个主题。\n在线上，答案往往简单得多。大多数在线发布的人写他们写的东西是因为他们想要写。你不能像在许多印刷出版物中那样在文章上看到公关公司的指纹——这是读者比《商业周刊》更信任博客的原因之一，尽管他们可能没有意识地意识到这一点。\n我最近和一个在大报社工作的朋友交谈。他认为印刷媒体有严重麻烦，而且他们大多仍然否认这一点。\u0026ldquo;他们认为这种下降是周期性的，\u0026ldquo;他说。\u0026ldquo;实际上它是结构性的。\u0026rdquo;\n换句话说，读者正在离开，他们不会回来。为什么？我认为主要原因是在线写作更诚实。想象一下，如果你在博客中读到《纽约时报》关于西装的文章，它听起来会多么不协调：\u0026ldquo;看起来像企业的冲动——光滑、威严、谨慎，但在你剪裁良好的袖子上有一丝傲慢——在商业耻辱的时代是一个意外的发展。\u0026ldquo;这篇文章的问题不仅仅是它起源于公关公司。整个语调都是虚假的。这是对读者居高临下的写作语调。\n无论有什么缺陷，你在网上找到的写作是真实的。它不是由推介信和新闻稿的碎片烹制而成，并压制成活泼的新闻语的神秘肉。它是人们写他们所想的。\n直到有了替代品，我才意识到主流媒体的大部分写作是多么人为。我不是说我过去相信在《时代》和《新闻周刊》上读到的东西。至少从高中起，我就认为这样的杂志更多地作为普通人被指导思考的指南，而不是信息来源。但直到近几年我才意识到为出版物写作不意味着那样写作。我没有意识到你可以像写给朋友一样坦率和随意地写作。\n注意到这一变化的不仅仅是读者。公关行业也注意到了。美国公关协会网站上的一篇搞笑文章抓住了问题的核心：\u0026ldquo;博主对成为其他组织和公司的喉舌很敏感，这是他们首先开始写博客的原因。\u0026ldquo;公关人士害怕博主的原因与读者喜欢他们的原因相同。这意味着未来可能有斗争。随着这种新型写作把读者从传统媒体拉走，我们应该为公关变异成任何补偿形式做好准备。当我想起公关公司多么努力在传统媒体中获得媒体曝光时，我无法想象如果他们能弄明白如何向博主提供故事，他们会不努力去做。\n注释 [1] 公关至少有一个有益的特点：它有利于小公司。如果公关不起作用，唯一的替代方案将是广告，只有大公司才能负担得起。\n[2] 广告商在免费出版物上为广告支付较少的费用，因为他们假设读者会忽略他们免费得到的东西。这就是为什么这么多行业出版物名义上有封面价格，却如此随意地免费赠送订阅。\n[3] 《纽约时报》的不同部分标准差异如此之大，以至于它们实际上是不同的报纸。 whoever向时尚版记者提供这个西装回来的故事的人，会被常规新闻记者打发走。\n[4] 我知道的这种类型的最引人注目的例子是1988年互联网蠕虫感染6000台计算机的\u0026quot;事实\u0026rdquo;。当时我在那里，这是配方：有人猜测互联网上连接了大约60,000台计算机，蠕虫可能感染了其中的10%。\n实际上没有人知道蠕虫感染了多少台计算机，因为补救措施是重新启动它们，这销毁了所有痕迹。但人们喜欢数字。所以这个现在在整个互联网上复制，像自己的小蠕虫。\n[5] 不一定都是由公关公司提供的。记者有时会自己打电话给几个额外的来源，就像有人给一罐汤添加一些新鲜蔬菜。\n感谢Ingrid Basset、Trevor Blackwell、Sarah Harlin、Jessica Livingston、Jackie McDonough、Robert Morris和Aaron Swartz（他也发现了PRSA文章）阅读本文的草稿。\n",
    "description": "",
    "tags": ["公关","媒体","新闻","博客","真理","写作"],
    "categories": [],
    "content": "→ English Version\n潜水艇 2005年4月\n\u0026ldquo;西装在企业界卷土重来，\u0026quot;《纽约时报》说。为什么这听起来很熟悉？也许是因为西装在2005年2月、2004年9月、2004年6月、2004年3月、2003年9月、2002年11月、2002年4月和2002年2月也都回来了。为什么媒体不断刊登说西装回来的故事？因为公关公司告诉他们这样做。在我短暂的商业生涯中发现的最令人惊讶的事情之一是公关行业的存在，像一艘巨大的、安静的潜水艇一样潜伏在新闻之下。你在传统媒体上读到的非政治、犯罪或灾难的故事中，超过一半可能来自公关公司。\n我知道，因为我花了多年时间寻找这样的\u0026quot;媒体曝光\u0026rdquo;。我们的创业公司把整个营销预算都花在公关上：在那时我们自己组装电脑以省钱，我们却每月给公关公司支付16,000美元。而且他们值得这个价钱。公关是新闻中相当于搜索引擎优化的东西；你不是购买读者会忽略的广告，而是让自己直接被插入到故事中。[1]\n我们的公关公司是业内最好的之一。在18个月内，他们在60多家不同的出版物中获得了媒体曝光。而且我们不是他们为之做伟大工作的唯一客户。1997年，我接到另一个创业公司创始人的电话，他考虑雇佣他们来推广他的公司。我告诉他们他们是公关之神，他们离谱的费用每一分钱都值得。但我记得当时觉得他公司的名字很奇怪。为什么把拍卖网站叫\u0026quot;eBay\u0026quot;？\n共生 公关不诚实。不完全是。事实上，最好的公关公司如此有效的原因恰恰是它们不诚实。它们给记者真正有价值的信息。好的公关公司不会因为客户告诉他们就去骚扰记者；他们努力在记者中建立信誉，他们不想通过向他们提供纯粹的宣传来破坏它。\n如果说有人不诚实，那是记者。公关公司存在的主要原因是记者懒惰。或者，更温和地说，是工作过度。他们真的应该出去为自己挖掘故事。但坐在办公室里让公关公司把故事带给他们是如此诱人。毕竟，他们知道好的公关公司不会对他们撒谎。\n好的奉承者不说谎，而是告诉受害者选择性的真相（你的眼睛颜色真好看）。好的公关公司使用相同的策略：他们给记者真实的故事，但真相有利于他们的客户。\n例如，我们的公关公司经常推销关于网络如何让小商家与大商家竞争的故事。这是完全真实的。但记者最终写关于这个特定真相而不是其他真相的故事的原因是，小商家是我们的目标市场，而我们正在付钱。\n不同出版物对公关公司的依赖程度差异很大。在底层的是行业媒体，他们的大部分收入来自广告，如果广告商允许，他们会免费赠送杂志。[2] 一般的行业出版物是一堆广告，用足够的文章粘合在一起，使其看起来像一本杂志。他们对\u0026quot;内容\u0026quot;如此绝望，以至于如果你费心写新闻稿使其读起来像文章，一些会几乎逐字印刷你的新闻稿。\n另一个极端是像《纽约时报》和《华尔街日报》这样的出版物。他们的记者确实出去寻找自己的故事，至少有时候是这样。他们会听公关公司的话，但简短而怀疑。我们设法在几乎每家我们想要的出版物中获得了媒体曝光，但我们从未设法打入《纽约时报》的印刷版。[3]\n顶级记者的弱点不是懒惰，而是虚荣。你不向他们推销故事。你必须接近他们，好像你是他们全视显微镜下的标本，并让他们觉得你想要他们运行的故事是他们自己想到的。\n我们最大的公关政变是一个两部分的。我们基于一些相当不正式的数学估计，网络上大约有5000家商店。我们让一家报纸印刷这个数字，这似乎足够中立。但一旦这个\u0026quot;事实\u0026quot;在那里印刷出来，我们可以向其他出版物引用它，并声称有1000个用户，我们拥有在线商店市场的20%。\n这大致是真实的。我们确实拥有在线商店市场的最大份额，5000是我们对其规模的最好猜测。但故事在媒体中出现的方式听起来要确定得多。\n记者喜欢确定的陈述。例如，许多关于Jeremy Jaynes定罪的故事说他是十大垃圾邮件发送者之一。这个\u0026quot;事实\u0026quot;起源于Spamhaus的ROKSO名单，我认为即使是Spamhaus也会承认这是对顶级垃圾邮件发送者的粗略估计。关于Jaynes的早期故事引用了这个来源，但现在它只是被重复，好像它是起诉书的一部分。[4]\n关于Jaynes你唯一可以确定的是他是一个相当大的垃圾邮件发送者。但记者不想打印像\u0026quot;相当大\u0026quot;这样模糊的东西。他们想要有冲击力的陈述，比如\u0026quot;前十名\u0026quot;。而公关公司给他们想要的东西。我们被告知，穿西装会使我们的生产力提高3.6%。\n传播 公关公司的工作真正变得故意误导的地方是在制造\u0026quot;传播\u0026quot;时。他们通常同时向几家不同的出版物提供相同的故事。当读者在多个地方看到类似的故事时，他们认为有一些重要的趋势正在进行。这正是他们应该想的。\n当Windows 95发布时，人们在午夜在商店外排队购买第一 …"
  },{
    "title": "物品",
    "url": "/paul_graham/essays_zh/stuff/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n物品 2007年7月\n我有太多物品。美国的大多数人也是如此。事实上，人越穷，他们似乎拥有的物品越多。几乎没有人穷得买不起满院子旧车。\n过去不总是这样。物品曾经是稀有和有价值的。如果你寻找，仍然可以看到证据。例如，我在剑桥的房子建于1876年，卧室没有衣柜。在那个时代，人们的物品可以装在一个五斗柜里。即使在几十年前，物品也要少得多。当我回顾70年代的照片时，我对房子看起来如此空旷感到惊讶。作为一个孩子，我以为我拥有庞大的玩具车队，但与我侄子们的玩具数量相比，它们相形见绌。我的火柴盒小车和Corgi玩具总共只占了我床面的三分之一。在我侄子们的房间里，床是唯一清晰的空间。\n物品变得便宜多了，但我们对它的态度没有相应改变。我们高估了物品。\n当我没有钱时，这对我来说是个大问题。我觉得自己很穷，物品似乎很有价值，所以我几乎本能地积累物品。朋友们搬家时会留下一些东西，或者我在垃圾夜走在街上时会看到一些东西（小心任何你自己描述为\u0026quot;完全好用\u0026quot;的东西），或者在庭院拍卖中以零售价十分之一的价格找到几乎全新的东西。砰，更多的物品。\n事实上，这些免费或几乎免费的东西并不划算，因为它们的价值比它们的成本还低。我积累的大多数物品都是没有价值的，因为我不需要它们。\n我不明白的是，新获得物品的价值不是它的零售价与我支付的价格之间的差异。是我从中获得的价值。物品是极不流动的资产。除非你对那个便宜得到的有价值物品有出售计划，它的\u0026quot;价值\u0026quot;有什么区别？你能够从中提取价值的唯一方法是使用它。如果你没有任何直接用途，你可能永远不会。\n出售物品的公司花了巨额资金训练我们认为物品仍然有价值。但把物品视为无价值会更接近真相。\n事实上，比无价值更糟糕，因为一旦你积累了大量物品，它们开始拥有你，而不是你拥有它们。我知道有一对夫妇无法搬到他们更喜欢的小镇，因为他们负担不起那里足够大的地方来放所有他们的物品。他们的房子不是他们的；是他们物品的。\n而且，除非你极其有条理，满屋子的物品可能会让人非常沮丧。杂乱的房间耗尽人的精神。显然，原因之一是满屋物品的房间里没有太多空间给人。但还有更多事情发生。我认为人类不断扫描他们的环境，以构建周围事物的心理模型。而一个场景越难解析，留给有意识思考的能量就越少。杂乱的房间确实让人筋疲力尽。\n（这可以解释为什么杂物似乎不像困扰成年人那样困扰孩子。孩子感知能力较差。他们构建周围环境的粗略模型，这消耗较少的能量。）\n我第一次意识到物品的无价值是在意大利生活一年时。我随身带的只有一大背包的物品。其余的我留在了美国房东的阁楼里。你知道吗？我只怀念一些书。到年底时，我甚至不记得我在那个阁楼里还存了什么。\n然而当我回来时，我连一箱都没有丢弃。扔掉一个完全好用的旋转电话？我有一天可能会需要它。\n真正痛苦的是，不仅是我积累了所有这些无用的物品，而且我经常把迫切需要的钱花在我不需要的物品上。\n我为什么会这样做？因为那些工作就是向你出售物品的人真的很擅长。25岁的人平均无法与那些花了数年时间 figuring out如何让你在物品上花钱的公司抗衡。他们使购买物品的体验如此愉快，以至于\u0026quot;购物\u0026quot;成为一种休闲活动。\n你如何保护自己免受这些人伤害？这不容易。我是一个相当多疑的人，他们的伎俩对我一直有效到三十多岁。但可能有效的一个方法是在购买东西之前问自己，\u0026ldquo;这会让我的生活明显更好吗？\u0026rdquo;\n我的一位朋友通过在购买任何东西之前问自己\u0026quot;我会一直穿这个吗？\u0026ldquo;治愈了自己购买衣服的习惯。如果她无法说服自己，她正在考虑购买的东西会成为她一直穿的少数东西之一，她就不会买它。我认为这对任何类型的购买都有效。在你购买任何东西之前，问自己：这会是我不断使用的东西吗？还是只是一个好东西？或者更糟的，仅仅是个便宜货？\n在这方面最糟糕的物品可能是你不太使用的，因为它太好用了。没有什么像易碎物品那样拥有你。例如，许多家庭拥有的\u0026quot;好瓷器\u0026rdquo;，其定义质量不是使用起来有趣，而是必须特别小心不要打破它。\n抵制获得物品的另一个方法是考虑拥有它的总体成本。购买价格只是开始。你将不得不为那个东西考虑多年——也许是一生。你拥有的每件物品都从你身上带走能量。有些给予的比带走的多。那些是唯一值得拥有的东西。\n我现在已经停止积累物品。除了书——但书是不同的。书更像流体而不是个别物体。拥有几千本书并不特别不方便，而如果你拥有几千件随机财产，你会成为当地名人。但除了书，我现在主动避免物品。如果我想在某种享受上花钱，我会选择服务而不是商品。\n我并不是声称这是因为我达到了某种对物质事物的禅意超脱。我在谈论更平凡的事情。历史性变化已经发生，我现在已经意识到了。物品曾经是有价值的，现在不是了。\n在工业化国家，二十世纪中期食物也发生了同样的事情。随着食物变得更便宜（或我们变得更富有；它们无法区分），吃得太多开始成为比吃得太少更大的危险。我们现在在物品方面已经达到了那个点。对大多数人来说，无论贫富，物品已经成为负担。\n好消息是，如果你在不知情的情况下背负负担，你的生活可能比你意识到的更好。想象一下，多年来戴着五磅重的脚踝重量走路，然后突然把它们取下来。\n西班牙语翻译\n俄语翻译\n意大利语翻译\n波兰语翻译\n土耳其语翻译\n法语翻译\n斯洛伐克语翻译\n罗马尼亚语翻译\n德语翻译\n",
    "description": "",
    "tags": ["物质主义","消费主义","极简主义","财产","生活方式"],
    "categories": [],
    "content": "→ English Version\n物品 2007年7月\n我有太多物品。美国的大多数人也是如此。事实上，人越穷，他们似乎拥有的物品越多。几乎没有人穷得买不起满院子旧车。\n过去不总是这样。物品曾经是稀有和有价值的。如果你寻找，仍然可以看到证据。例如，我在剑桥的房子建于1876年，卧室没有衣柜。在那个时代，人们的物品可以装在一个五斗柜里。即使在几十年前，物品也要少得多。当我回顾70年代的照片时，我对房子看起来如此空旷感到惊讶。作为一个孩子，我以为我拥有庞大的玩具车队，但与我侄子们的玩具数量相比，它们相形见绌。我的火柴盒小车和Corgi玩具总共只占了我床面的三分之一。在我侄子们的房间里，床是唯一清晰的空间。\n物品变得便宜多了，但我们对它的态度没有相应改变。我们高估了物品。\n当我没有钱时，这对我来说是个大问题。我觉得自己很穷，物品似乎很有价值，所以我几乎本能地积累物品。朋友们搬家时会留下一些东西，或者我在垃圾夜走在街上时会看到一些东西（小心任何你自己描述为\u0026quot;完全好用\u0026quot;的东西），或者在庭院拍卖中以零售价十分之一的价格找到几乎全新的东西。砰，更多的物品。\n事实上，这些免费或几乎免费的东西并不划算，因为它们的价值比它们的成本还低。我积累的大多数物品都是没有价值的，因为我不需要它们。\n我不明白的是，新获得物品的价值不是它的零售价与我支付的价格之间的差异。是我从中获得的价值。物品是极不流动的资产。除非你对那个便宜得到的有价值物品有出售计划，它的\u0026quot;价值\u0026quot;有什么区别？你能够从中提取价值的唯一方法是使用它。如果你没有任何直接用途，你可能永远不会。\n出售物品的公司花了巨额资金训练我们认为物品仍然有价值。但把物品视为无价值会更接近真相。\n事实上，比无价值更糟糕，因为一旦你积累了大量物品，它们开始拥有你，而不是你拥有它们。我知道有一对夫妇无法搬到他们更喜欢的小镇，因为他们负担不起那里足够大的地方来放所有他们的物品。他们的房子不是他们的；是他们物品的。\n而且，除非你极其有条理，满屋子的物品可能会让人非常沮丧。杂乱的房间耗尽人的精神。显然，原因之一是满屋物品的房间里没有太多空间给人。但还有更多事情发生。我认为人类不断扫描他们的环境，以构建周围事物的心理模型。而一个场景越难解析，留给有意识思考的能量就越少。杂乱的房间确实让人筋疲力尽。\n（这可以解释为什么杂物似乎不像困扰成年人那样困扰孩子。孩子感知能力较差。他们构建周围环境的粗略模型，这消耗较少的能量。）\n我第一次意识到物品的无价值是在意大利生活一年时。我随身带的只有一大背包的物品。其余的我留在了美国房东的阁楼里。你知道吗？我只怀念一些书。到年底时，我甚至不记得我在那个阁楼里还存了什么。\n然而当我回来时，我连一箱都没有丢弃。扔掉一个完全好用的旋转电话？我有一天可能会需要它。\n真正痛苦的是，不仅是我积累了所有这些无用的物品，而且我经常把迫切需要的钱花在我不需要的物品上。\n我为什么会这样做？因为那些工作就是向你出售物品的人真的很擅长。25岁的人平均无法与那些花了数年时间 figuring out如何让你在物品上花钱的公司抗衡。他们使购买物品的体验如此愉快，以至于\u0026quot;购物\u0026quot;成为一种休闲活动。\n你如何保护自己免受这些人伤害？这不容易。我是一个相当多疑的人，他们的伎俩对我一直有效到三十多岁。但可能有效的一个方法是在购买东西之前问自己，\u0026ldquo;这会让我的生活明显更好吗？\u0026rdquo;\n我的一位朋友通过在购买任何东西之前问自己\u0026quot;我会一直穿这个吗？\u0026ldquo;治愈了自己购买衣服的习惯。如果她无法说服自己，她正在考虑购买的东西会成为她一直穿的少数东西之一，她就不会买它。我认为这对任何类型的购买都有效。在你购买任何东西之前，问自己：这会是我不断使用的东西吗？还是只是一个好东西？或者更糟的，仅仅是个便宜货？\n在这方面最糟糕的物品可能是你不太使用的，因为它太好用了。没有什么像易碎物品那样拥有你。例如，许多家庭拥有的\u0026quot;好瓷器\u0026rdquo;，其定义质量不是使用起来有趣，而是必须特别小心不要打破它。\n抵制获得物品的另一个方法是考虑拥有它的总体成本。购买价格只是开始。你将不得不为那个东西考虑多年——也许是一生。你拥有的每件物品都从你身上带走能量。有些给予的比带走的多。那些是唯一值得拥有的东西。\n我现在已经停止积累物品。除了书——但书是不同的。书更像流体而不是个别物体。拥有几千本书并不特别不方便，而如果你拥有几千件随机财产，你会成为当地名人。但除了书，我现在主动避免物品。如果我想在某种享受上花钱，我会选择服务而不是商品。\n我并不是声称这是因为我达到了某种对物质事物的禅意超脱。我在谈论更平凡的事情。历史性变化已经发生，我现在已经意识到了。物品曾经是有价值的，现在不 …"
  },{
    "title": "猛烈的极客",
    "url": "/paul_graham/essays_zh/fn/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n猛烈的极客 2021年5月\n大多数人认为极客是安静、谦逊的人。在普通的社交场合中他们确实如此——就像明星四分卫发现自己身处物理学研讨会中一样安静谦逊。原因也是一样的：他们是离水的鱼。但极客表面上的谦逊是一种错觉，这是因为当非极客观察他们时，通常是在普通的社交场合。事实上，一些极客相当猛烈。\n猛烈的极客是一个小而有趣的群体。他们通常极具竞争性——我想说，比极具竞争性的非极客还要更具竞争性。竞争对他们来说更个人化。部分原因可能是他们情感上不够成熟，无法与竞争保持距离，但也因为他们参与的竞争种类中随机性较少，因此他们更有理由将结果个人化。\n猛烈的极客也往往有些过于自信，尤其是在年轻时。看起来对自己的能力产生误判可能是个缺点，但经验表明并非如此。在一定程度上，自信是自我实现的预言。\n你在大多数猛烈极客身上发现的另一个品质是智慧。不是所有极客都聪明，但猛烈的极客至少都是中等聪明的。如果不是这样，他们就不会有成为猛烈极客的信心。[1]\n极客特质和独立思维之间也有天然的联系。如果不有些社交笨拙，就很难有独立思维，因为传统信念经常是错误的，或者至少是任意的。任何既有独立思维又有雄心的人都不会浪费精力去适应。而猛烈极客的独立思维显然是积极型而非消极型的：他们会被规则惹恼，而不是梦幻般地 unaware of them.\n我不太确定为什么猛烈极客缺乏耐心，但大多数人似乎都是。你首先在对话中注意到这一点，他们倾向于打断你。这只是令人讨厌的，但在更有前途的猛烈极客中，这与对解决问题更深层次的不耐心有关。也许猛烈极客的竞争性和不耐心不是分离的品质，而是单一内在驱动力的两种表现。\n当你以足够数量结合所有这些品质时，结果相当可怕。猛烈极客行动中最生动的例子可能是詹姆斯·沃森的《双螺旋》。书的第一句话是\u0026quot;我从未见过弗朗西斯·克里克保持谦虚的态度\u0026quot;，他接着描绘的克里克形象是典型的猛烈极客：聪明、社交笨拙、竞争性强、独立思维、过于自信。但他隐含地描绘的自己也是如此。事实上，他缺乏社交意识使两幅画像更加真实，因为他直言不讳地陈述了各种圆滑的人会隐藏的意见和动机。而且从故事中可以清楚地看出，克里克和沃森的猛烈极客特质对他们的成功至关重要。他们的独立思维使他们考虑大多数人忽略的方法，他们的过度自信让他们从事只理解一半的问题（他们实际上被一位著名的内部人士描述为\u0026quot;小丑\u0026quot;），而他们的不耐心和竞争性使他们比其他两个小组抢先找到了答案，否则那些小组会在下一年，如果不是下几个月的话找到答案。[2]\n可能存在猛烈极客这个想法对许多普通人来说是陌生的，甚至对一些年轻的极客也是如此。特别是在早期，极客在普通社交场合花费太多时间，而做真正工作的时间太少，以至于他们获得的关于自己笨拙的证据比关于自己力量的证据多得多。因此，有些人读到对猛烈极客的描述时会意识到\u0026quot;嗯，那是我\u0026quot;。而我现在要转向的就是你，年轻的猛烈极客。\n我有一些好消息，也有一些坏消息。好消息是，你的猛烈特质将在解决难题方面给你很大帮助。不仅仅是极客传统上解决的科学和技术问题。随着世界进步，通过获得正确答案而赢得胜利的事情数量增加了。最近变富成为了其中之一：美国最富有的8个人中有7个现在是猛烈的极客。\n事实上，在商业中成为猛烈极客可能比在极客传统学术领域更有帮助。在那里，猛烈似乎是可选的。例如，达尔文似乎并不特别猛烈。而在没有猛烈特质的情况下，不可能成为超过一定规模公司的CEO，所以既然极客可以在商业中获胜，猛烈的极客将越来越垄断真正的大成功。\n坏消息是，如果不加以运用，你的猛烈特质将变成苦涩，你将成为知识游乐场恶霸：暴躁的系统管理员、论坛喷子、黑粉、新思想的扼杀者。\n如何避免这种命运？从事雄心勃勃的项目。如果你成功，它会带来一种中和苦涩的满足感。但你不需要成功就能感受到这一点；仅仅从事困难的项目就给大多数猛烈极客某种满足感。而对那些没有感觉的人，至少让他们忙碌。[3]\n另一个解决方案可能是以某种方式关闭你的猛烈特质，通过致力于冥想或心理治疗之类的事情。也许这对某些人来说是正确的答案。我不知道。但这对我来说似乎不是最优解决方案。如果你得到一把锋利的刀，在我看来最好是使用它，而不是为了割伤自己而钝化它的边缘。\n如果你确实选择雄心勃勃的路线，你将有顺风推动你。从来没有比现在更好的成为极客的时机。在过去的一个世纪里，我们看到了权力从交易者到技术人员的持续转移——从有魅力到有能力的转移——我没有看到任何会结束这种转移的迹象。至少不会直到极客自己通过带来技术奇点而结束它。\n注释 [1] 成为极客就是社交笨拙，有两种不同的方式：玩和每个人一样的游戏，但玩得很差，或者玩不同的游戏。聪明的极客是后一种类型。\n[2] 使猛烈极客如此有效的品质也可能使他们非常令人讨厌。猛烈的极客最好记住这一点，并且（a）尽量控制它，（b）寻找那些获得正确答案比保持社会和谐更重要的组织和工作类型。实际上这意味着在困难问题上工作的小组。幸运的是，这是最有趣的环境类型。\n[3] 如果成功中和了苦涩，为什么有些至少中等成功的人仍然相当苦涩？因为人们潜在的苦涩程度取决于他们性格中自然的苦涩程度和他们的雄心程度：天生非常苦涩的人在成功中和了其中一些后仍然剩下很多，而非常有雄心的人需要比例上更多的成功来满足那种雄心。\n所以最坏的情况是某人既天生苦涩又极具雄心，却只是中等成功。\n感谢特雷弗·布莱克威尔、史蒂夫·布兰克、帕特里克·克里森、杰西卡·利文斯顿、阿姆贾德·马萨德和罗伯特·莫里斯阅读本文的草稿。\n",
    "description": "",
    "tags": ["极客","成功","个性","技术","竞争"],
    "categories": [],
    "content": "→ English Version\n猛烈的极客 2021年5月\n大多数人认为极客是安静、谦逊的人。在普通的社交场合中他们确实如此——就像明星四分卫发现自己身处物理学研讨会中一样安静谦逊。原因也是一样的：他们是离水的鱼。但极客表面上的谦逊是一种错觉，这是因为当非极客观察他们时，通常是在普通的社交场合。事实上，一些极客相当猛烈。\n猛烈的极客是一个小而有趣的群体。他们通常极具竞争性——我想说，比极具竞争性的非极客还要更具竞争性。竞争对他们来说更个人化。部分原因可能是他们情感上不够成熟，无法与竞争保持距离，但也因为他们参与的竞争种类中随机性较少，因此他们更有理由将结果个人化。\n猛烈的极客也往往有些过于自信，尤其是在年轻时。看起来对自己的能力产生误判可能是个缺点，但经验表明并非如此。在一定程度上，自信是自我实现的预言。\n你在大多数猛烈极客身上发现的另一个品质是智慧。不是所有极客都聪明，但猛烈的极客至少都是中等聪明的。如果不是这样，他们就不会有成为猛烈极客的信心。[1]\n极客特质和独立思维之间也有天然的联系。如果不有些社交笨拙，就很难有独立思维，因为传统信念经常是错误的，或者至少是任意的。任何既有独立思维又有雄心的人都不会浪费精力去适应。而猛烈极客的独立思维显然是积极型而非消极型的：他们会被规则惹恼，而不是梦幻般地 unaware of them.\n我不太确定为什么猛烈极客缺乏耐心，但大多数人似乎都是。你首先在对话中注意到这一点，他们倾向于打断你。这只是令人讨厌的，但在更有前途的猛烈极客中，这与对解决问题更深层次的不耐心有关。也许猛烈极客的竞争性和不耐心不是分离的品质，而是单一内在驱动力的两种表现。\n当你以足够数量结合所有这些品质时，结果相当可怕。猛烈极客行动中最生动的例子可能是詹姆斯·沃森的《双螺旋》。书的第一句话是\u0026quot;我从未见过弗朗西斯·克里克保持谦虚的态度\u0026quot;，他接着描绘的克里克形象是典型的猛烈极客：聪明、社交笨拙、竞争性强、独立思维、过于自信。但他隐含地描绘的自己也是如此。事实上，他缺乏社交意识使两幅画像更加真实，因为他直言不讳地陈述了各种圆滑的人会隐藏的意见和动机。而且从故事中可以清楚地看出，克里克和沃森的猛烈极客特质对他们的成功至关重要。他们的独立思维使他们考虑大多数人忽略的方法，他们的过度自信让他们从事只理解一半的问题（他们实际上被一位著名的内部人士描述为\u0026quot;小丑\u0026quot;），而他们的不耐心和竞争性使他们比其他两个小组抢先找到了答案，否则那些小组会在下一年，如果不是下几个月的话找到答案。[2]\n可能存在猛烈极客这个想法对许多普通人来说是陌生的，甚至对一些年轻的极客也是如此。特别是在早期，极客在普通社交场合花费太多时间，而做真正工作的时间太少，以至于他们获得的关于自己笨拙的证据比关于自己力量的证据多得多。因此，有些人读到对猛烈极客的描述时会意识到\u0026quot;嗯，那是我\u0026quot;。而我现在要转向的就是你，年轻的猛烈极客。\n我有一些好消息，也有一些坏消息。好消息是，你的猛烈特质将在解决难题方面给你很大帮助。不仅仅是极客传统上解决的科学和技术问题。随着世界进步，通过获得正确答案而赢得胜利的事情数量增加了。最近变富成为了其中之一：美国最富有的8个人中有7个现在是猛烈的极客。\n事实上，在商业中成为猛烈极客可能比在极客传统学术领域更有帮助。在那里，猛烈似乎是可选的。例如，达尔文似乎并不特别猛烈。而在没有猛烈特质的情况下，不可能成为超过一定规模公司的CEO，所以既然极客可以在商业中获胜，猛烈的极客将越来越垄断真正的大成功。\n坏消息是，如果不加以运用，你的猛烈特质将变成苦涩，你将成为知识游乐场恶霸：暴躁的系统管理员、论坛喷子、黑粉、新思想的扼杀者。\n如何避免这种命运？从事雄心勃勃的项目。如果你成功，它会带来一种中和苦涩的满足感。但你不需要成功就能感受到这一点；仅仅从事困难的项目就给大多数猛烈极客某种满足感。而对那些没有感觉的人，至少让他们忙碌。[3]\n另一个解决方案可能是以某种方式关闭你的猛烈特质，通过致力于冥想或心理治疗之类的事情。也许这对某些人来说是正确的答案。我不知道。但这对我来说似乎不是最优解决方案。如果你得到一把锋利的刀，在我看来最好是使用它，而不是为了割伤自己而钝化它的边缘。\n如果你确实选择雄心勃勃的路线，你将有顺风推动你。从来没有比现在更好的成为极客的时机。在过去的一个世纪里，我们看到了权力从交易者到技术人员的持续转移——从有魅力到有能力的转移——我没有看到任何会结束这种转移的迹象。至少不会直到极客自己通过带来技术奇点而结束它。\n注释 [1] 成为极客就是社交笨拙，有两种不同的方式：玩和每个人一样的游戏，但玩得很差，或者玩不同的游戏。聪明的极客是后一种类型。\n[2] 使猛烈极客如此有效的品质也可能使他 …"
  },{
    "title": "现在人们如何变富",
    "url": "/paul_graham/essays_zh/richnow/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n现在人们如何变富 2021年4月\n从1982年开始，《福布斯》杂志每年都会发布美国最富有人士名单。如果我们将1982年的100位最富有人士与2020年的100位最富有人士进行比较，我们会注意到一些巨大差异。\n1982年，最常见的财富来源是继承。在最富有的100人中，有60人是从祖先那里继承的。光是杜邦家族的继承人就有10位。到2020年，继承人的数量已经减半，仅占最大100笔财富中的27笔。\n为什么继承人的比例会下降？不是因为继承税增加了。事实上，在这段时间内，继承税显著减少。继承人比例下降的原因不是继承大财富的人少了，而是靠自己创造财富的人多了。\n人们如何创造这些新财富？大约3/4是通过创办公司，1/4是通过投资。在2020年的73笔新财富中，56笔来自创始人或早期员工的股权（52位创始人，2位早期员工，和2位创始人妻子），17笔来自管理投资基金。\n1982年的100位最富有的美国人中没有基金经理。对冲基金和私募股权公司在1982年就存在，但它们的创始人都没有足够富裕进入前100名。有两件事发生了变化：基金经理发现了产生高回报的新方法，并且更多投资者愿意信任他们并把钱交给他们。[1]\n但现在新财富的主要来源是创办公司，当你看数据时，你会发现那里也有很大变化。人们现在通过创办公司比1982年时获得更多财富，因为这些公司做的事情不同。\n1982年，有两个主要的财富来源：石油和房地产。在1982年的40笔新财富中，至少24笔主要是由于石油或房地产。现在只有少数是：在2020年的73笔新财富中，4笔是由于房地产，只有2笔是由于石油。\n到2020年，最大的新财富来源是所谓的\u0026quot;科技\u0026quot;公司。在73笔新财富中，大约30笔来自这类公司。这些在最富有的人中特别常见：2020年前10名财富中有8笔是这类新财富。\n可以说，把科技作为一个类别有点误导。亚马逊真的不是零售商，特斯拉也不是汽车制造商吗？既是又不是。也许在50年后，当我们称之为科技的东西被认为是理所当然的，把这两家企业放在同一类别可能就不合适了。但至少在目前，它们确实有某种共同点使它们与众不同。哪个零售商会启动AWS？哪个汽车制造商是由同时拥有火箭公司的人经营的？\n前100名财富背后的科技公司也形成了一个差异化的群体，因为它们都是风险投资家愿意投资的公司，而其他大部分都不是。这样做是有原因的：这些大多是依靠更好的技术获胜的公司，而不仅仅是有一个真正有动力和擅长做交易的CEO。\n在某种程度上，科技公司的崛起代表了一种质的变化。1982年《福布斯》400富豪榜中的石油和房地产大亨们不是通过更好的技术获胜的。他们是通过真正有动力和擅长做交易而获胜的。[2] 事实上，这种致富方式如此古老，甚至早于工业革命。在16和17世纪，在欧洲王室（名义上）服务中致富的朝臣们通常也是真正有动力和擅长做交易的。\n那些只看基尼系数而不深入了解的人回顾1982年的世界，把它当作美好的旧时光，因为那时致富的人没有现在那么富有。但如果你深入了解他们是如何致富的，旧时光看起来就不那么好了。在1982年，最富有的100人中有84%是通过继承、开采自然资源或做房地产交易致富的。这真的比最富有的人通过创办科技公司致富的世界好吗？\n为什么人们创办的新公司比以前多得多，而且他们从中致富这么多？第一个问题的答案，奇怪的是，这个问题本身表述不当。我们不应该问人们为什么要创办公司，而是问为什么他们又开始创办公司了。[3]\n1892年，《纽约先驱论坛报》编制了美国所有百万富翁的名单。他们找到了4047位。那时有多少人是继承财富的？只有大约20%，比今天继承人的比例还少。当你调查新财富的来源时，1892年看起来更像今天。休·罗科夫发现\u0026quot;许多最富有的人\u0026hellip;\u0026hellip;从大规模生产的新技术中获得了最初的优势\u0026quot;。[4]\n所以这里的异常不是2020年，而是1982年。真正的问题是为什么1982年很少有人通过创办公司致富。答案是，即使在《先驱论坛报》名单编制时，一股整合浪潮正在席卷美国经济。在19世纪末和20世纪初，像J.P.摩根这样的金融家将数千家较小的公司合并成几家具有巨大规模经济优势的巨型公司。正如迈克尔·林德所写，到第二次世界大战结束时，\u0026ldquo;经济的主要部门要么被组织成政府支持的卡特尔，要么被少数寡头垄断企业主导。\u0026quot;[5]\n1960年，现在创办创业公司的大多数人会去这些公司工作。在1890年和2020年，你可以通过创办自己的公司致富，但在1960年，这真的不是一个可行的选择。你无法打破寡头垄断来接触市场。所以1960年的有声望的道路不是创办自己的公司，而是在现有公司的企业阶梯上向上爬。[6]\n让每个人都成为公司员工减少了经济不平等（以及每一种其他变化），但如果你把20世纪中期作为正常的模型，在这方面你会得到一个非常误导的模型。J.P.摩根的经济结果只是一个阶段，从1970年代开始，它开始解体。\n为什么会解体？部分原因是衰老。那些在1930年看起来是规模和效率典范的大公司，到1970年已经变得松散和臃肿。到1970年，经济的刚性结构充满了各种群体建造的舒适巢穴，以保护自己免受市场力量影响。在卡特政府期间，联邦政府意识到有些不对劲，并开始在一个称为\u0026quot;放松管制\u0026quot;的过程中，废除支持寡头垄断的政策。\n但是，解体J.P.摩根经济的不仅仅是内部衰退。还有来自外部的压力，以新技术的形式，特别是微电子学。设想所发生的事情的最好方式是想象一个顶部有一层冰的池塘。最初，从底部到表面的唯一途径是绕过边缘。但随着冰层变弱，你开始能够直接从中部突破。\n池塘的边缘是纯粹的科技：那些实际上自称从事电子或软件业务的公司。当你在1990年使用\u0026quot;创业公司\u0026quot;这个词时，你指的就是这个意思。但现在创业公司正在直接从冰层中部突破，取代像零售商、电视网络和汽车公司这样的现有企业。[7]\n但是，尽管J.P.摩根经济的解体在技术意义上创造了一个新世界，但在社会意义上，这是回归常态。如果你只追溯到20世纪中期，人们通过创办自己的公司致富似乎是一个近期现象。但如果你看得更远，你会意识到这实际上是默认情况。所以我们在未来应该期望的更多相同情况。事实上，我们应该期望创始人的数量和财富都会增长，因为每十年创办创业公司都变得更容易。\n创办创业公司变得更容易的部分原因是社会。社会正在（重新）接受这个概念。如果你现在创办一个，你的父母不会像一代前那样惊慌，关于如何做的知识也广泛得多。但现在创办创业公司更容易的主要原因是它更便宜。技术已经降低了构建产品和获取客户的成本。\n创办创业公司成本的降低反过来改变了创始人和投资者之间的力量平衡。过去，创办创业公司意味着建造工厂，你需要投资者的许可才能做。但现在投资者比创始人更需要创始人，加上可用风险资本数量的增加，这推高了估值。[8]\n因此，创办创业公司成本的降低通过两种方式增加了富人的数量：这意味着更多的人创办它们，而且那些能够以更好条件筹集资金的人。\n但还有第三个因素在起作用：公司本身更有价值，因为新成立的公司比过去增长得更快。技术不仅使构建和分销东西变得更便宜，而且也变得更快。\n这个趋势已经运行了很长时间。IBM，成立于1896年，用了45年才达到10亿美元（2020年价值）的收入。惠普，成立于1939年，用了25年。微软，成立于1975年，用了13年。现在快速增长公司的标准是7或8年。[9]\n快速增长对创始人股票的价值有双重影响。公司的价值是其收入和增长率的函数。所以如果公司增长更快，你不仅更早达到10亿美元收入，而且当达到那个点时，公司比如果增长较慢时更有价值。\n这就是为什么创始人现在有时如此年轻就如此富有。创办创业公司的低初始成本意味着创始人可以年轻开始，而今天公司的快速增长意味着如果他们成功，几年后他们可能会令人惊讶地富有。\n现在创办和发展公司比以往任何时候都更容易。这意味着更多的人创办它们，那些这样做的人从投资者那里获得更好的条件，由此产生的公司变得更有价值。一旦你理解了这些机制是如何运作的，以及创业公司在20世纪大部分时间被压制，你就不必求助于一些模糊的里根时期国家右转来解释为什么美国的基尼系数在增加。当然基尼系数在增加。有更多的人创办更有价值的公司，怎么可能不增加呢？\n注释 [1] 投资公司在1978年劳工部的一项监管变更允许养老基金投资于它们后迅速增长，但这种增长的影响在1982年的前100名财富中还没有显现出来。\n[2] 乔治·米切尔值得一提作为一个例外。尽管他确实有动力且擅长做交易，他还是第一个想出如何使用水力压裂从页岩中获取天然气的人。\n[3] 当我说人们创办更多公司时，我指的是那种旨在变得非常大的公司。实际上，在过去几十年中，新公司的总数有所下降。但绝大多数公司是小型零售和服务企业。所以关于新企业数量减少的统计数据意味着人们开办的鞋店和理发店减少了。\n当人们看到一个标记为\u0026quot;创业公司\u0026quot;的图表在下降时，他们有时会感到困惑，因为\u0026quot;创业公司\u0026quot;这个词有两种意思：（1）创立公司，（2）一种设计为快速增长的特殊类型公司。统计数据指的是第一种意思的创业公司，而不是第二种。\n[4] 罗科夫，休。\u0026ldquo;镀金时代的巨大财富。\u0026ldquo;NBER工作文件14555，2008年。\n[5] 林德，迈克尔。《应许之地》。哈珀柯林斯，2012年。\n20世纪中期的高税率也可能阻止了人们创办自己的公司。创办自己的公司是有风险的，当风险没有得到回报时，人们选择安全。\n但这不仅仅是因果关系。20世纪中期的寡头垄断和高税率是一体的。较低的税收不仅仅是企业家精神的原因，也是结果：20世纪中期通过房地产和石油勘探致富的人游说并获得巨大的税收漏洞，使他们的有效税率低得多，并且如果通过新技术发展大公司更常见，做这些事的人可能也会为自己的漏洞游说。\n[6] 这就是为什么20世纪中期确实致富的人经常从石油勘探或房地产致富的原因。那是经济中不易于整合的两个大领域。\n[7] 纯科技公司曾经被称为\u0026quot;高科技\u0026quot;创业公司。但现在创业公司可以从冰层中部突破，我们不需要为边缘起一个单独的名字，而\u0026quot;高科技\u0026quot;这个词具有明显的复古声音。\n[8] 较高的估值意味着你要么出售较少的股票来获得一定数量的钱，要么为一定数量的股票获得更多的钱。典型的创业公司两者都会做一些。显然，如果你保留更多股票，你会更富有，但如果你筹集更多钱，你也应该更富有，因为（a）它应该使公司更成功，（b）你应该能够在下一轮之前持续更长时间，或者甚至不需要一轮。注意所有这些\u0026quot;应该\u0026rdquo;。在实践中，很多钱从这些漏洞中溜走。\n似乎现在创业公司筹集的大额融资轮与创办它变得更便宜的说法相矛盾。但这里没有矛盾；筹集最多资金的创业公司是那些出于选择而这样做的人，目的是增长更快，而不是那些因为需要钱生存而这样做的人。没有什么比不需要钱更能让人们把钱给你了。\n你可能会想，在近两个世纪里一直站在劳动一方与资本斗争后，极左会对劳动最终胜利感到高兴。但他们似乎没有人感到高兴。你几乎可以听到他们说\u0026quot;不，不，不是那样。\u0026rdquo;\n[9] IBM于1911年通过合并三家公司创建，其中最重要的是赫尔曼·霍尔瑞斯的制表机公司，成立于1896年。1941年其收入为6000万美元。\n惠普1964年的收入为1.25亿美元。\n微软1988年的收入为5.9亿美元。\n感谢特雷弗·布莱克威尔、杰西卡·利文斯顿、鲍勃·莱斯科、罗伯特·莫里斯、拉斯·罗伯茨和亚历克斯·塔巴罗克阅读本文草稿，以及乔恩·埃里希曼提供增长数据。\n",
    "description": "",
    "tags": ["财富","企业家精神","技术","经济","不平等","创业"],
    "categories": [],
    "content": "→ English Version\n现在人们如何变富 2021年4月\n从1982年开始，《福布斯》杂志每年都会发布美国最富有人士名单。如果我们将1982年的100位最富有人士与2020年的100位最富有人士进行比较，我们会注意到一些巨大差异。\n1982年，最常见的财富来源是继承。在最富有的100人中，有60人是从祖先那里继承的。光是杜邦家族的继承人就有10位。到2020年，继承人的数量已经减半，仅占最大100笔财富中的27笔。\n为什么继承人的比例会下降？不是因为继承税增加了。事实上，在这段时间内，继承税显著减少。继承人比例下降的原因不是继承大财富的人少了，而是靠自己创造财富的人多了。\n人们如何创造这些新财富？大约3/4是通过创办公司，1/4是通过投资。在2020年的73笔新财富中，56笔来自创始人或早期员工的股权（52位创始人，2位早期员工，和2位创始人妻子），17笔来自管理投资基金。\n1982年的100位最富有的美国人中没有基金经理。对冲基金和私募股权公司在1982年就存在，但它们的创始人都没有足够富裕进入前100名。有两件事发生了变化：基金经理发现了产生高回报的新方法，并且更多投资者愿意信任他们并把钱交给他们。[1]\n但现在新财富的主要来源是创办公司，当你看数据时，你会发现那里也有很大变化。人们现在通过创办公司比1982年时获得更多财富，因为这些公司做的事情不同。\n1982年，有两个主要的财富来源：石油和房地产。在1982年的40笔新财富中，至少24笔主要是由于石油或房地产。现在只有少数是：在2020年的73笔新财富中，4笔是由于房地产，只有2笔是由于石油。\n到2020年，最大的新财富来源是所谓的\u0026quot;科技\u0026quot;公司。在73笔新财富中，大约30笔来自这类公司。这些在最富有的人中特别常见：2020年前10名财富中有8笔是这类新财富。\n可以说，把科技作为一个类别有点误导。亚马逊真的不是零售商，特斯拉也不是汽车制造商吗？既是又不是。也许在50年后，当我们称之为科技的东西被认为是理所当然的，把这两家企业放在同一类别可能就不合适了。但至少在目前，它们确实有某种共同点使它们与众不同。哪个零售商会启动AWS？哪个汽车制造商是由同时拥有火箭公司的人经营的？\n前100名财富背后的科技公司也形成了一个差异化的群体，因为它们都是风险投资家愿意投资的公司，而其他大部分都不是。这样做是有原因的：这些大多是依靠更好的技术获胜的公司，而不仅仅是有一个真正有动力和擅长做交易的CEO。\n在某种程度上，科技公司的崛起代表了一种质的变化。1982年《福布斯》400富豪榜中的石油和房地产大亨们不是通过更好的技术获胜的。他们是通过真正有动力和擅长做交易而获胜的。[2] 事实上，这种致富方式如此古老，甚至早于工业革命。在16和17世纪，在欧洲王室（名义上）服务中致富的朝臣们通常也是真正有动力和擅长做交易的。\n那些只看基尼系数而不深入了解的人回顾1982年的世界，把它当作美好的旧时光，因为那时致富的人没有现在那么富有。但如果你深入了解他们是如何致富的，旧时光看起来就不那么好了。在1982年，最富有的100人中有84%是通过继承、开采自然资源或做房地产交易致富的。这真的比最富有的人通过创办科技公司致富的世界好吗？\n为什么人们创办的新公司比以前多得多，而且他们从中致富这么多？第一个问题的答案，奇怪的是，这个问题本身表述不当。我们不应该问人们为什么要创办公司，而是问为什么他们又开始创办公司了。[3]\n1892年，《纽约先驱论坛报》编制了美国所有百万富翁的名单。他们找到了4047位。那时有多少人是继承财富的？只有大约20%，比今天继承人的比例还少。当你调查新财富的来源时，1892年看起来更像今天。休·罗科夫发现\u0026quot;许多最富有的人\u0026hellip;\u0026hellip;从大规模生产的新技术中获得了最初的优势\u0026quot;。[4]\n所以这里的异常不是2020年，而是1982年。真正的问题是为什么1982年很少有人通过创办公司致富。答案是，即使在《先驱论坛报》名单编制时，一股整合浪潮正在席卷美国经济。在19世纪末和20世纪初，像J.P.摩根这样的金融家将数千家较小的公司合并成几家具有巨大规模经济优势的巨型公司。正如迈克尔·林德所写，到第二次世界大战结束时，\u0026ldquo;经济的主要部门要么被组织成政府支持的卡特尔，要么被少数寡头垄断企业主导。\u0026quot;[5]\n1960年，现在创办创业公司的大多数人会去这些公司工作。在1890年和2020年，你可以通过创办自己的公司致富，但在1960年，这真的不是一个可行的选择。你无法打破寡头垄断来接触市场。所以1960年的有声望的道路不是创办自己的公司，而是在现有公司的企业阶梯上向上爬。[6]\n让每个人都成为公司员工减少了经济不平等（以及 …"
  },{
    "title": "用13句话讲清楚创业",
    "url": "/paul_graham/essays_zh/13sentences/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n用13句话讲清楚创业 想创业吗？申请Y Combinator融资。观看本文的写作过程。2009年2月\n我经常告诉创业者一个我从Paul Buchheit那里学到的原则：让少数人非常满意，比让很多人半满意要好。最近我告诉一个记者，如果我只能告诉创业者10件事，这会是其中之一。然后我想：其他9件会是什么？\n当我列出清单时，发现有13条：\n选择好的联合创始人。 联合创始人对创业公司来说，就像位置对房地产一样。你可以改变房子的任何方面，除了它的位置。在创业公司中，你可以轻易改变你的想法，但改变联合创始人很难。[1] 而创业公司的成功几乎总是其创始人的函数。\n快速发布。 快速发布的原因并不是说尽早将产品推向市场至关重要，而是直到你发布，你才真正开始着手处理它。发布教会你本应该构建什么。在你明白之前，你都在浪费时间。所以无论你用什么发布，其主要价值都是作为吸引用户的借口。\n让你的想法进化。 这是快速发布的第二部分。快速发布并迭代。把创业公司当作仅仅是实现某个绝妙初始想法的事情是个大错误。就像写文章一样，大多数想法都是在实现过程中出现的。\n理解你的用户。 你可以将创业公司创造的财富想象成一个矩形，一边是用户数量，另一边是你改善他们生活的程度。[2] 第二个维度是你最能控制的。实际上，第一个维度的增长将取决于你在第二个维度上做得如何。就像在科学中，困难的部分不是回答问题，而是提出问题：困难的部分是看到用户缺乏的新东西。你越了解他们，做到这一点的机会就越大。这就是为什么这么多成功的创业公司都制造了创始人自己需要的东西。\n最好让少数用户喜欢你，而不是让很多人无感。 理想情况下，你希望让大量用户喜欢你，但你不能指望一蹴而就。最初你必须在满足所有潜在用户子集的需求，或满足所有潜在用户需求子集之间做出选择。选择前者。在用户数量上扩展比在满意度上扩展更容易。也许更重要的是，你更难欺骗自己。如果你认为你距离好产品还有85%的路要走，你怎么知道不是70%？或者10%？而知道你有多少用户是很容易的。\n提供令人惊讶的好客户服务。 客户习惯于被虐待。他们打交道的大多数公司都是准垄断企业，能够逃脱糟糕的客户服务。你对可能性的看法已经被这些经历无意识地降低了。尝试使你的客户服务不仅好，而且令人惊讶的好。想方设法让人们快乐。他们会感到惊喜的；你会看到的。在创业公司的最早阶段，提供难以扩展的客户服务是值得的，因为这是了解用户的一种方式。\n你会得到你衡量的东西。 这是我从Joe Kraus那里学到的。[3] 仅仅衡量某件事就有一种不可思议的改善它的倾向。如果你想让你的用户数量增加，在你的墙上贴一大张纸，每天标出用户数量。当它上升时你会感到高兴，下降时会失望。很快你就会开始注意到是什么让数字上升，你会开始做更多这样的事情。推论：小心你衡量什么。\n少花钱。 我无法强调创业公司保持廉价有多么重要。大多数创业公司在制造出人们想要的东西之前就失败了，最常见的失败形式是资金耗尽。所以保持廉价与快速迭代（几乎）是可以互换的。[4] 但这不仅仅是这些。廉价文化就像锻炼保持人们年轻一样，能让公司保持年轻。\n实现拉面盈利。 \u0026ldquo;拉面盈利\u0026quot;意味着创业公司的收入刚好足以支付创始人的生活费用。这不是商业模式的快速原型（尽管它可以是），而更像是一种黑客投资过程的方式。一旦你实现拉面盈利，你与投资者的关系就完全改变了。这对士气也很棒。\n避免分心。 没有什么比分心更能扼杀创业公司了。最糟糕的类型是那些付钱的：日常工作、咨询、有利可图的副项目。创业公司可能具有更多的长期潜力，但你总是会中断在它上面的工作，去接那些现在付钱给你的人的电话。矛盾的是，融资就是这种类型的分心，所以也要尽量减少它。\n不要气馁。 虽然创业公司直接死亡的原因往往是资金耗尽，但根本原因通常是缺乏专注。要么公司由愚蠢的人经营（这无法通过建议修复），要么人们聪明但变得气馁。开始创业公司是一个巨大的精神负担。理解这一点，并有意识地努力不被它压垮，就像你在拿起重箱子时要小心弯曲膝盖一样。\n不要放弃。 即使你气馁了，也不要放弃。仅仅通过不放弃，你就能走得比你想象的远得多。这在所有领域都不成立。有很多人无论坚持多久都无法成为优秀的数学家。但创业公司不是这样的。纯粹的努力通常就足够了，只要你不断调整你的想法。\n交易会失败。 我们从Viaweb学到的最有用的技能之一是不抱太大希望。我们可能有20个各种类型的交易失败了。在前10个左右之后，我们学会将交易视为我们应该忽略直到它们终止的后台进程。开始依赖交易完成对士气来说是非常危险的，不仅因为它们经常不完成，而且因为这使它们更不可能完成。\n当把它缩减到13句话时，我问自己如果只能保留一个，我会选择哪一个。\n理解你的用户。这就是关键。创业公司的基本任务是创造财富；你最能控制的财富维度是你改善用户生活的程度；而其中最难的部分是知道为他们制造什么。一旦你知道要制造什么，制造它就只是努力的问题，大多数像样的黑客都有能力做到。\n理解你的用户是这个清单中一半原则的一部分。这就是要早期发布，以了解你的用户。发展你的想法是理解你的用户的体现。很好地理解你的用户会倾向于推动你制造让少数人深度满意的东西。拥有令人惊讶的好客户服务的最重要原因是它帮助你理解你的用户。而理解你的用户甚至会确保你的士气，因为当其他一切都崩溃时，只要有十个用户喜欢你，你就会继续前进。\n注释 [1] 严格来说，没有时间机器是不可能的。\n[2] 实际上，它更像一个参差不齐的梳子。\n[3] Joe认为是惠普的创始人之一首先说的，但他不记得是哪一个。\n[4] 如果市场停滞不前，它们是可互换的。既然不是，工作速度快一倍比拥有两倍时间更好。\n",
    "description": "",
    "tags": ["创业","联合创始人","用户","发布","建议"],
    "categories": [],
    "content": "→ English Version\n用13句话讲清楚创业 想创业吗？申请Y Combinator融资。观看本文的写作过程。2009年2月\n我经常告诉创业者一个我从Paul Buchheit那里学到的原则：让少数人非常满意，比让很多人半满意要好。最近我告诉一个记者，如果我只能告诉创业者10件事，这会是其中之一。然后我想：其他9件会是什么？\n当我列出清单时，发现有13条：\n选择好的联合创始人。 联合创始人对创业公司来说，就像位置对房地产一样。你可以改变房子的任何方面，除了它的位置。在创业公司中，你可以轻易改变你的想法，但改变联合创始人很难。[1] 而创业公司的成功几乎总是其创始人的函数。\n快速发布。 快速发布的原因并不是说尽早将产品推向市场至关重要，而是直到你发布，你才真正开始着手处理它。发布教会你本应该构建什么。在你明白之前，你都在浪费时间。所以无论你用什么发布，其主要价值都是作为吸引用户的借口。\n让你的想法进化。 这是快速发布的第二部分。快速发布并迭代。把创业公司当作仅仅是实现某个绝妙初始想法的事情是个大错误。就像写文章一样，大多数想法都是在实现过程中出现的。\n理解你的用户。 你可以将创业公司创造的财富想象成一个矩形，一边是用户数量，另一边是你改善他们生活的程度。[2] 第二个维度是你最能控制的。实际上，第一个维度的增长将取决于你在第二个维度上做得如何。就像在科学中，困难的部分不是回答问题，而是提出问题：困难的部分是看到用户缺乏的新东西。你越了解他们，做到这一点的机会就越大。这就是为什么这么多成功的创业公司都制造了创始人自己需要的东西。\n最好让少数用户喜欢你，而不是让很多人无感。 理想情况下，你希望让大量用户喜欢你，但你不能指望一蹴而就。最初你必须在满足所有潜在用户子集的需求，或满足所有潜在用户需求子集之间做出选择。选择前者。在用户数量上扩展比在满意度上扩展更容易。也许更重要的是，你更难欺骗自己。如果你认为你距离好产品还有85%的路要走，你怎么知道不是70%？或者10%？而知道你有多少用户是很容易的。\n提供令人惊讶的好客户服务。 客户习惯于被虐待。他们打交道的大多数公司都是准垄断企业，能够逃脱糟糕的客户服务。你对可能性的看法已经被这些经历无意识地降低了。尝试使你的客户服务不仅好，而且令人惊讶的好。想方设法让人们快乐。他们会感到惊喜的；你会看到的。在创业公司的最早阶段，提供难以扩展的客户服务是值得的，因为这是了解用户的一种方式。\n你会得到你衡量的东西。 这是我从Joe Kraus那里学到的。[3] 仅仅衡量某件事就有一种不可思议的改善它的倾向。如果你想让你的用户数量增加，在你的墙上贴一大张纸，每天标出用户数量。当它上升时你会感到高兴，下降时会失望。很快你就会开始注意到是什么让数字上升，你会开始做更多这样的事情。推论：小心你衡量什么。\n少花钱。 我无法强调创业公司保持廉价有多么重要。大多数创业公司在制造出人们想要的东西之前就失败了，最常见的失败形式是资金耗尽。所以保持廉价与快速迭代（几乎）是可以互换的。[4] 但这不仅仅是这些。廉价文化就像锻炼保持人们年轻一样，能让公司保持年轻。\n实现拉面盈利。 \u0026ldquo;拉面盈利\u0026quot;意味着创业公司的收入刚好足以支付创始人的生活费用。这不是商业模式的快速原型（尽管它可以是），而更像是一种黑客投资过程的方式。一旦你实现拉面盈利，你与投资者的关系就完全改变了。这对士气也很棒。\n避免分心。 没有什么比分心更能扼杀创业公司了。最糟糕的类型是那些付钱的：日常工作、咨询、有利可图的副项目。创业公司可能具有更多的长期潜力，但你总是会中断在它上面的工作，去接那些现在付钱给你的人的电话。矛盾的是，融资就是这种类型的分心，所以也要尽量减少它。\n不要气馁。 虽然创业公司直接死亡的原因往往是资金耗尽，但根本原因通常是缺乏专注。要么公司由愚蠢的人经营（这无法通过建议修复），要么人们聪明但变得气馁。开始创业公司是一个巨大的精神负担。理解这一点，并有意识地努力不被它压垮，就像你在拿起重箱子时要小心弯曲膝盖一样。\n不要放弃。 即使你气馁了，也不要放弃。仅仅通过不放弃，你就能走得比你想象的远得多。这在所有领域都不成立。有很多人无论坚持多久都无法成为优秀的数学家。但创业公司不是这样的。纯粹的努力通常就足够了，只要你不断调整你的想法。\n交易会失败。 我们从Viaweb学到的最有用的技能之一是不抱太大希望。我们可能有20个各种类型的交易失败了。在前10个左右之后，我们学会将交易视为我们应该忽略直到它们终止的后台进程。开始依赖交易完成对士气来说是非常危险的，不仅因为它们经常不完成，而且因为这使它们更不可能完成。\n当把它缩减到13句话时，我问自己如果只能保留一个，我会选择哪一个。\n理解你的用户。这就是关键。创业公司的基本任务是创 …"
  },{
    "title": "疯狂的新想法",
    "url": "/paul_graham/essays_zh/newideas/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n疯狂的新想法 2021年5月\n有一种观点我非常害怕在公开场合表达。如果我认识的某个既是领域专家又是通情达理的人提出了一个听起来荒谬的想法，我会非常不愿意说\u0026quot;这永远不会成功\u0026quot;。\n任何研究过思想史，特别是科学史的人都知道，大事就是这样开始的。有人提出了一个听起来疯狂的想法，大多数人 dismiss 它，然后它逐渐占领了世界。\n大多数听起来荒谬的想法事实上是坏的，可以安全地 dismiss。但当它们是由通情达理的领域专家提出时就不是了。如果提出这个想法的人是通情达理的，那么他们知道这听起来多么荒谬。然而他们还是提出了它。这表明他们知道一些你不知道的事情。如果他们有深厚的领域专业知识，那很可能就是来源。[1]\n这样的想法不仅仅不能安全地 dismiss，而且特别可能是有趣的。当普通人提出一个听起来荒谬的想法时，它的荒谬性是他们无能的证据。但当一个通情达理的领域专家这样做时，情况就相反了。这里有一种类似有效市场的东西：平均来说，看起来最疯狂的想法，如果正确，将产生最大的影响。所以如果你能消除提出荒谬想法的人是无能的理论，它的荒谬性就从它很无聊的证据变成了它很令人兴奋的证据。[2]\n这样的想法并不保证成功。但它们不必成功。它们只需要是足够好的赌注——具有足够高的期望值。我认为平均来说它们是。我认为如果你赌上所有由通情达理的领域专家提出的听起来荒谬的想法，你最终会净赚。\n原因是每个人都太保守了。\u0026ldquo;范式\u0026quot;这个词被过度使用了，但这是一个值得使用的情况。每个人都过于受当前范式的束缚。即使那些有新想法的人最初也低估了它们。这意味着在它们达到公开提出的阶段之前，它们已经经过了过于严格的过滤。[3]\n对这种想法的明智回应不是发表声明，而是提出问题，因为这里有一个真正的谜团。为什么这个聪明且通情达理的人提出了一个似乎如此错误的想法？是他们错了，还是你错了？你们中必须有一个。如果你是那个错了的人，那最好是知道这一点，因为这意味着你的世界观模型中有一个漏洞。但即使他们错了，了解为什么也应该是有趣的。专家陷入的陷阱是你也必须担心的。\n这一切似乎很明显。然而，显然有很多人不分享我对 dismiss 新想法的恐惧。他们为什么这样做？为什么现在看起来像个混蛋，以后看起来像个傻瓜，而不是仅仅保留判断？\n他们这样做的一个原因是嫉妒。如果你提出了一个激进的新想法并且它成功了，你的声誉（可能还有你的财富）将成比例地增加。如果这种情况发生，有些人会嫉妒，这种潜在的嫉妒会传播成一种你必须错误的信念。\n人们 dismiss 新想法的另一个原因是这是显得老练的简单方法。当一个新想法首次出现时，它通常看起来相当弱小。它只是一个刚孵化的小鸡。相比之下，公认的智慧是一只完全成熟的鹰。所以很容易对新想法发动毁灭性的攻击，任何这样做的人在那些不理解这种不对称性的人看来会很聪明。\n这种现象因从事新想法的人和攻击他们的人所获得的回报差异而加剧。从事新想法的回报是根据结果的价值来加权的。所以值得从事只有10%成功机会的事情，如果它能使事情变得好10倍以上。而攻击新想法的回报大致是恒定的；无论目标如何，这种攻击看起来大致同样聪明。\n当他们既得利益在旧想法中时，人们也会攻击新想法。例如，达尔文的一些最严厉的批评者是牧师，这并不奇怪。人们在某些想法上建立了整个职业生涯。当有人声称这些想法是错误或过时的，他们会感到受到威胁。\n最低级的 dismiss 是纯粹的派系主义：自动 dismiss 与反对派系相关的任何想法。最低级的是因为提出者是谁而 dismiss 一个想法。\n但导致通情达理的人 dismiss 新想法的主要事情，与阻止人们提出新想法的原因是一样的：当前范式的普遍存在。它不仅影响我们的思维方式；它是我们构建思想的乐高积木。跳出当前范式是只有少数人能做到的。即使他们通常也必须首先抑制他们的直觉，就像一个在云层中飞行的飞行员必须相信他的仪器而不是他的平衡感。[4]\n范式不仅定义我们现在的思维。它们还吸干了导致它们的面包屑痕迹，使我们对新想法的标准变得不可能高。当前范式对我们这些后代来说看起来如此完美，以至于我们想象它一定在被发现时就被完全接受了——无论教会对日心模型怎么看，天文学家一定在哥白尼提出它时就信服了。事实上，远非如此。哥白尼在1532年出版了日心模型，但直到17世纪中期科学舆论的天平才转向它。[5]\n很少有人理解新想法在首次出现时看起来多么弱小。所以如果你想自己有新想法，你能做的最有价值的事情之一就是了解它们在出生时的样子。阅读新想法是如何发生的，并试图让自己进入当时人们的头脑。当新想法只完成一半，甚至拥有它的人也只是半信半疑地认为它是正确的时候，事情对他们来说是什么样子的？\n但你不必停留在历史上。你现在可以观察到周围正在诞生的新想法。只要寻找一个通情达理的领域专家提出一些听起来错误的观点。\n如果你既善良又聪明，你不仅不会攻击这样的人，还会鼓励他们。拥有新想法是孤独的事情。只有尝试过的人才知道有多孤独。这些人需要你的帮助。如果你帮助他们，你很可能在这个过程中学到一些东西。\n笔记\n[1] 这种领域专业知识可能在另一个领域。事实上，这种交叉往往特别有希望。\n[2] 我并不声称这个原则在数学、工程和硬科学之外延伸很远。例如，在政治中，听起来疯狂的想法通常和听起来一样坏。虽然可以说这不是例外，因为提出它们的人实际上不是领域专家；政治家是政治策略的领域专家，比如如何当选和如何通过立法，而不是政策所作用的世界。也许没有人能是。\n[3] 这种\u0026quot;范式\u0026quot;的意义由Thomas Kuhn在他的《科学革命的结构》中定义，但我也推荐他的《哥白尼革命》，在那里你可以看到他在工作中发展这个想法。\n[4] 这是为什么有点阿斯伯格症的人可能在发现新想法方面有优势的一个原因。他们总是在靠仪器飞行。\n[5] Hall, Rupert. From Galileo to Newton. Collins, 1963. 这本书特别擅长进入同时代人的头脑。\n感谢 Trevor Blackwell, Patrick Collison, Suhail Doshi, Daniel Gackle, Jessica Livingston, and Robert Morris 阅读本文草稿。\n",
    "description": "",
    "tags": ["想法","创新","范式","创造力","思考","专家"],
    "categories": [],
    "content": "→ English Version\n疯狂的新想法 2021年5月\n有一种观点我非常害怕在公开场合表达。如果我认识的某个既是领域专家又是通情达理的人提出了一个听起来荒谬的想法，我会非常不愿意说\u0026quot;这永远不会成功\u0026quot;。\n任何研究过思想史，特别是科学史的人都知道，大事就是这样开始的。有人提出了一个听起来疯狂的想法，大多数人 dismiss 它，然后它逐渐占领了世界。\n大多数听起来荒谬的想法事实上是坏的，可以安全地 dismiss。但当它们是由通情达理的领域专家提出时就不是了。如果提出这个想法的人是通情达理的，那么他们知道这听起来多么荒谬。然而他们还是提出了它。这表明他们知道一些你不知道的事情。如果他们有深厚的领域专业知识，那很可能就是来源。[1]\n这样的想法不仅仅不能安全地 dismiss，而且特别可能是有趣的。当普通人提出一个听起来荒谬的想法时，它的荒谬性是他们无能的证据。但当一个通情达理的领域专家这样做时，情况就相反了。这里有一种类似有效市场的东西：平均来说，看起来最疯狂的想法，如果正确，将产生最大的影响。所以如果你能消除提出荒谬想法的人是无能的理论，它的荒谬性就从它很无聊的证据变成了它很令人兴奋的证据。[2]\n这样的想法并不保证成功。但它们不必成功。它们只需要是足够好的赌注——具有足够高的期望值。我认为平均来说它们是。我认为如果你赌上所有由通情达理的领域专家提出的听起来荒谬的想法，你最终会净赚。\n原因是每个人都太保守了。\u0026ldquo;范式\u0026quot;这个词被过度使用了，但这是一个值得使用的情况。每个人都过于受当前范式的束缚。即使那些有新想法的人最初也低估了它们。这意味着在它们达到公开提出的阶段之前，它们已经经过了过于严格的过滤。[3]\n对这种想法的明智回应不是发表声明，而是提出问题，因为这里有一个真正的谜团。为什么这个聪明且通情达理的人提出了一个似乎如此错误的想法？是他们错了，还是你错了？你们中必须有一个。如果你是那个错了的人，那最好是知道这一点，因为这意味着你的世界观模型中有一个漏洞。但即使他们错了，了解为什么也应该是有趣的。专家陷入的陷阱是你也必须担心的。\n这一切似乎很明显。然而，显然有很多人不分享我对 dismiss 新想法的恐惧。他们为什么这样做？为什么现在看起来像个混蛋，以后看起来像个傻瓜，而不是仅仅保留判断？\n他们这样做的一个原因是嫉妒。如果你提出了一个激进的新想法并且它成功了，你的声誉（可能还有你的财富）将成比例地增加。如果这种情况发生，有些人会嫉妒，这种潜在的嫉妒会传播成一种你必须错误的信念。\n人们 dismiss 新想法的另一个原因是这是显得老练的简单方法。当一个新想法首次出现时，它通常看起来相当弱小。它只是一个刚孵化的小鸡。相比之下，公认的智慧是一只完全成熟的鹰。所以很容易对新想法发动毁灭性的攻击，任何这样做的人在那些不理解这种不对称性的人看来会很聪明。\n这种现象因从事新想法的人和攻击他们的人所获得的回报差异而加剧。从事新想法的回报是根据结果的价值来加权的。所以值得从事只有10%成功机会的事情，如果它能使事情变得好10倍以上。而攻击新想法的回报大致是恒定的；无论目标如何，这种攻击看起来大致同样聪明。\n当他们既得利益在旧想法中时，人们也会攻击新想法。例如，达尔文的一些最严厉的批评者是牧师，这并不奇怪。人们在某些想法上建立了整个职业生涯。当有人声称这些想法是错误或过时的，他们会感到受到威胁。\n最低级的 dismiss 是纯粹的派系主义：自动 dismiss 与反对派系相关的任何想法。最低级的是因为提出者是谁而 dismiss 一个想法。\n但导致通情达理的人 dismiss 新想法的主要事情，与阻止人们提出新想法的原因是一样的：当前范式的普遍存在。它不仅影响我们的思维方式；它是我们构建思想的乐高积木。跳出当前范式是只有少数人能做到的。即使他们通常也必须首先抑制他们的直觉，就像一个在云层中飞行的飞行员必须相信他的仪器而不是他的平衡感。[4]\n范式不仅定义我们现在的思维。它们还吸干了导致它们的面包屑痕迹，使我们对新想法的标准变得不可能高。当前范式对我们这些后代来说看起来如此完美，以至于我们想象它一定在被发现时就被完全接受了——无论教会对日心模型怎么看，天文学家一定在哥白尼提出它时就信服了。事实上，远非如此。哥白尼在1532年出版了日心模型，但直到17世纪中期科学舆论的天平才转向它。[5]\n很少有人理解新想法在首次出现时看起来多么弱小。所以如果你想自己有新想法，你能做的最有价值的事情之一就是了解它们在出生时的样子。阅读新想法是如何发生的，并试图让自己进入当时人们的头脑。当新想法只完成一半，甚至拥有它的人也只是半信半疑地认为它是正确的时候，事情对他们来说是什么样子的？\n但你不必停留在历史上。你现在可以观察 …"
  },{
    "title": "百年编程语言",
    "url": "/paul_graham/essays_zh/hundred/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n百年编程语言 2003年4月\n（本文源于在PyCon 2003的主题演讲。）\n很难预测一百年后的生活会是什么样子。我们只能确定几件事。我们知道每个人都会驾驶飞行汽车，区划法律将会放宽以允许建造数百层高的建筑，大部分时间都会是黑暗的，女性都会接受武术训练。在这里，我想聚焦于这个图景中的一个细节。他们会用什么样的编程语言来编写控制那些飞行汽车的软件？\n思考这个问题之所以有价值，并不是因为我们真的能用到这些语言，而是因为，如果我们幸运的话，我们会使用从现在到那个时间点的路径上的语言。\n我认为，像物种一样，语言会形成进化树，到处都有死胡同分支。我们已经看到这种情况正在发生。Cobol尽管曾经流行，但似乎没有任何知识后代。它是一个进化死胡同——尼安德特人式的语言。\n我预测Java也会有类似的命运。人们有时给我写信说，\u0026ldquo;你怎么能说Java不会成为一种成功的语言？它已经是成功的语言了。\u0026ldquo;我承认它是，如果你用关于它的书籍所占用的书架空间（特别是关于它的单本书籍），或者相信必须学习它才能找到工作的本科生数量来衡量成功的话。当我说Java不会成为成功的语言时，我的意思更具体：Java将是一个进化死胡同，就像Cobol一样。\n这只是一个猜测。我可能是错的。我在这里的重点不是批评Java，而是提出进化树的问题，让人们思考，语言X在树的哪个位置？问这个问题的原因不仅仅是为了让我们的鬼魂在一百年后说我告诉过你这样。这是因为靠近主要分支是寻找现在适合编程的语言的有用启发式方法。\n在任何给定的时间，你可能最幸福地处于进化树的主要分支上。即使仍然有很多尼安德特人，成为其中的一员也一定很糟糕。克罗马农人会不断过来殴打你并偷走你的食物。\n我想知道一百年后语言会是什么样子，这样我就知道现在应该赌树的哪个分支。\n语言的进化与物种的进化不同，因为分支可以融合。例如，Fortran分支似乎正在与Algol的后代融合。理论上这对物种也是可能的，但不太可能发生在比细胞更大的生物上。\n语言更有可能融合，部分是因为可能性空间较小，部分是因为突变不是随机的。语言设计师有意地融合其他语言的思想。\n对于语言设计师来说，思考编程语言的进化可能导致的方向特别有用，因为他们可以相应地引导。在这种情况下，\u0026ldquo;停留在主分支上\u0026quot;不仅仅是选择好语言的方法。它成为做出正确语言设计决策的启发式方法。\n任何编程语言都可以分为两部分：一组扮演公理角色的基本运算符，以及语言的其余部分，原则上可以用这些基本运算符来编写。\n我认为基本运算符是语言长期生存的最重要因素。其余的你可以改变。这就像买房子的规则，你首先应该考虑位置。其他的一切你都可以稍后修复，但你不能修复位置。\n我认为不仅公理要选择得好，而且数量要少。数学家一直对公理有这样的感觉——越少越好——我认为他们抓住了要点。\n至少，仔细审视语言的核心，看看是否有任何可以剔除的公理，这必须是一个有用的练习。我在我作为一个邋遢人的漫长职业生涯中发现，冗余会产生冗余，我看到这种情况不仅发生在软件中，也发生在床下和房间角落。\n我有一种预感，进化树的主要分支通过那些具有最小、最干净核心的语言。你能在语言本身中编写的语言部分越多越好。\n当然，即使问一百年后编程语言会是什么样子，我也做出了一个很大的假设。一百年后我们还会编写程序吗？我们不会只是告诉计算机我们想要它们做什么吗？\n到目前为止，那个部门没有太多进展。我猜测一百年后人们仍会使用我们能识别的程序来告诉计算机做什么。可能有些我们现在通过编写程序来解决的问题，一百年后你不必编写程序来解决，但我认为仍会有大量我们今天所做的那种编程。\n认为任何人都能预测任何技术在一百年后会是什么样子可能显得 presumptuous。但请记住，我们背后已经有将近五十年的历史。当我们考虑到语言在过去五十年中进化得多么缓慢时，展望一百年是一个可以把握的想法。\n语言进化缓慢是因为它们并不是真正的技术。语言是符号。程序是你希望计算机为你解决问题的形式化描述。所以编程语言的进化速度更像数学符号的进化速度，而不是交通或通信的进化速度。数学符号确实在进化，但没有你在技术中看到的巨大飞跃。\n无论一百年后计算机由什么制成，似乎可以安全地预测它们会比现在快得多。如果摩尔定律继续发挥作用，它们将快74 quintillion（73,786,976,294,838,206,464）倍。这很难想象。事实上，速度部门最可能的预测可能是摩尔定律将停止工作。任何应该每十八个月翻一番的东西似乎最终都会遇到某种基本限制。但我毫不怀疑计算机会快得多。即使它们最终只快一百倍，这也应该大大改变编程语言的基本规则。除此之外，还会有更多空间给现在被认为是慢的语言，即那些不能产生非常高效代码的语言。\n然而，有些应用仍然需要速度。我们想用计算机解决的有些问题是计算机创造的；例如，你必须处理视频图像的速度取决于另一台计算机生成它们的速度。还有另一类问题本身就具有无限吸收计算周期的能力：图像渲染、密码学、模拟。\n如果一些应用可以变得越来越低效，而其他应用继续要求硬件能够提供的所有速度，更快的计算机将意味着语言必须覆盖更广泛的效率范围。我们已经看到这种情况正在发生。按照过去几十年的标准，一些流行新语言的当前实现惊人地浪费。\n这不仅仅是编程语言发生的事情。这是一个普遍的历史趋势。随着技术的改进，每一代人都能做前一代人认为是浪费的事情。三十年前的人会对我们如此随意地打长途电话感到惊讶。一百年前的人会更惊讶有一天一个包裹会通过孟菲斯从波士顿旅行到纽约。\n我已经可以告诉你未来一百年更快的硬件将给我们的所有额外周期会发生什么。它们几乎都会被浪费掉。\n我学习编程时计算机能力很稀缺。我记得取出我Basic程序中的所有空格，使它们能适合4K TRS-80的内存。想到所有这些惊人低效的软件一遍又一遍地烧掉周期做同样的事情，我觉得有点恶心。但我认为我的直觉在这里是错的。我就像一个长大的穷人，即使是为了重要的事情也不能忍受花钱，比如去看医生。\n有些浪费确实是令人厌恶的。例如，SUVs即使运行在永远不会耗尽且不产生污染的燃料上，也可能是令人厌恶的。SUVs之所以令人厌恶，是因为它们是一个令人厌恶的问题的解决方案。（如何使小型货车看起来更阳刚。）但并非所有浪费都是坏的。现在我们有了支持它的基础设施，计算你的长途通话分钟数开始显得吝啬。如果你有资源，更优雅的思考方式是把所有电话通话视为一类事情，无论对方在哪里。\n有好浪费，也有坏浪费。我对好浪费感兴趣——那种通过花费更多，我们可以获得更简单设计的浪费。我们将如何利用新、更快的硬件给我们带来的浪费周期的机会？\n对速度的渴望在我们这些拥有可怜计算机的人心中根深蒂固，以至于需要 conscious 努力来克服它。在语言设计中，我们应该有意识地寻找可以用效率换取哪怕是最小的便利增加的情况。\n大多数数据结构的存在是因为速度。例如，今天的许多语言既有字符串也有列表。在语义上，字符串或多或少是列表的一个子集，其中元素是字符。那么为什么你需要单独的数据类型呢？你真的不需要。字符串的存在仅仅是为了效率。但是用使程序运行得更快的hack来使语言的语义变得混乱是很蹩脚的。在语言中拥有字符串似乎是一个过早优化的例子。\n如果我们将语言的核心视为一组公理，那么仅仅为了效率而增加不增加表达能力的额外公理肯定是令人厌恶的。效率很重要，但我认为这不是获得它的正确方法。\n我认为解决这个问题的正确方法是将程序的含义与实现细节分开。不要同时拥有列表和字符串，只拥有列表，同时有某种方式给编译器优化建议，使其能够在必要时将字符串布置为连续的字节。\n由于速度在程序的大部分中都不重要，你通常不需要费心处理这种微观管理。随着计算机变得越来越快，这一点会越来越真实。\n少说实现细节也应该使程序更灵活。规范在程序编写过程中会改变，这不仅是不可避免的，而且是可取的。\n\u0026ldquo;essay\u0026quot;这个词来自法语动词\u0026quot;essayer\u0026rdquo;，意思是\u0026quot;尝试\u0026rdquo;。essay在原始意义上是你写来试图弄清楚某些东西的东西。这在软件中也会发生。我认为一些最好的程序是essay，从这个意义上说，作者们在开始时并不知道他们确切地想要写什么。\nLisp黑客们已经知道灵活使用数据结构的价值。我们倾向于编写程序的第一版本，使其用列表做所有事情。这些初始版本可能如此惊人地低效，以至于需要conscious努力不去思考它们在做什么，就像，至少对我而言，吃牛排需要conscious努力不去思考它来自哪里。\n一百年后的程序员最寻找的，最重要的是一种语言，你可以用最少的努力组合成一个令人难以置信的低效版本1程序。至少，这是我们现在会描述的方式。他们会说他们想要一种易于编程的语言。\n低效的软件并不令人厌恶。令人厌恶的是让程序员做不必要工作的语言。浪费程序员时间是真正的低效，而不是浪费机器时间。随着计算机变得越来越快，这一点会变得越来越清晰。\n我认为摆脱字符串已经是我们可以忍受思考的事情了。我们在Arc中这样做了，这似乎是一个胜利；一些用正则表达式描述会很尴尬的操作可以很容易地描述为递归函数。\n这种数据结构扁平化会走多远？我能想到甚至让我这个思想开明的人感到震惊的可能性。例如，我们会摆脱数组吗？毕竟，它们只是哈希表的一个子集，其中键是整数向量。我们会用列表替换哈希表本身吗？\n还有比这更令人震惊的前景。例如，McCarthy在1960年描述的Lisp没有数字。从逻辑上讲，你不需要有一个单独的数字概念，因为你可以用列表来表示它们：整数n可以表示为n个元素的列表。你可以用这种方式做数学。这只是令人难以忍受的低效。\n实际上没有人提议在实践中用列表实现数字。事实上，McCarthy的1960年论文在当时根本不打算实现。这是一个理论练习，试图创建一个更优雅的图灵机替代方案。当有人意外地拿走这篇论文并将其翻译成工作的Lisp解释器时，数字肯定不是用列表表示的；它们像所有其他语言一样用二进制表示。\n编程语言能否走得那么远，以至于摆脱数字作为基本数据类型？我问这个与其说是作为一个严肃的问题，不如说是作为一种与未来玩胆小鬼游戏的方式。这就像不可抗拒的力量遇到不可移动的物体的假设情况——这里，一个令人难以想象的低效实现遇到令人难以想象的巨大资源。我看不出为什么不。未来是相当长的。如果我们能做些什么来减少核心语言中公理的数量，那么随着t趋向无穷大，这似乎是值得押注的一方。如果这个想法在一百年后似乎仍然难以忍受，也许在一千年后不会。\n为了明确这一点，我并不是建议所有数值计算实际上都会使用列表进行。我建议核心语言，在关于实现的任何额外符号之前，应该这样定义。在实践中，任何想做任何数量数学的程序可能会用二进制表示数字，但这将是一种优化，而不是核心语言语义的一部分。\n燃烧周期的另一种方法是在应用程序和硬件之间拥有多层软件。这也是我们已经看到正在发生的趋势：许多最近的语言被编译成字节码。Bill Woods曾经告诉我，根据经验法则，每层解释成本在速度上要付出10倍的代价。这种额外的代价给你带来灵活性。\nArc的第一个版本就是这种多层次缓慢的极端情况，相应的好处。它是一个经典的\u0026quot;元循环\u0026quot;解释器，在Common Lisp之上编写，与McCarthy原始Lisp论文中定义的eval函数有明显的家族相似性。整个事情只有几百行代码，所以非常容易理解和改变。我们使用的Common Lisp，CLisp，本身在字节码解释器之上运行。所以我们有两层解释，其中一层（顶层）惊人地低效，而语言是可用的。我承认勉强可用，但是可用的。\n即使在应用程序内部，将软件编写为多层也是一种强大的技术。自底向上编程意味着将程序编写为一系列层，每一层都作为其上一层的语言。这种方法往往产生更小、更灵活的程序。它也是通往圣杯可重用性的最佳途径。语言按定义是可重用的。你能将应用程序的更多部分推入用于编写这类应用程序的语言中，你的软件就会有更多部分是可重用的。\n不知何故，可重用性的想法在20世纪80年代与面向对象编程联系在一起，似乎没有任何相反的证据能够动摇它。但是虽然一些面向对象的软件是可重用的，使其可重用的是其自底向上性，而不是其面向对象性。考虑库：它们是可重用的因为它们是语言，无论它们是否以面向对象风格编写。\n顺便说一下，我不预测面向对象编程的消亡。虽然我认为它对好的程序员没有太多提供，除了在某些特定领域，它对大组织来说是不可抗拒的。面向对象编程提供了一种可持续的方式来编写意大利面条式代码。它让你能够将程序累积为一系列补丁。大组织总是倾向于以这种方式开发软件，我期望一百年后也会如此。既然我们在谈论未来，我们最好谈谈并行计算，因为这是这个想法似乎存在的地方。也就是说，无论你什么时候谈论，并行计算似乎都是未来要发生的事情。\n未来会赶上它吗？人们谈论并行计算作为即将发生的事情至少有20年了，到目前为止它还没有太多影响编程实践。或者说有吗？芯片设计师现在必须考虑它，试图在多cpu计算机上编写系统软件的人也必须考虑。\n真正的问题是，抽象的阶梯上并行会走多远？一百年后它甚至会影响应用程序员吗？或者它会是编译器作者思考的事情，但在应用程序源代码中通常是不可见的？\n似乎很可能的一件事是，大多数并行机会被浪费。这是我对我们得到的大部分额外计算机能力将被浪费的更一般预测的一个特例。我期望，就像底层硬件的惊人速度一样，并行将是如果你明确要求它就可以使用的东西，但通常不被使用。这意味着我们一百年后拥有的那种并行不会，除非在特殊应用中，是大规模并行。我期望对于普通程序员来说，它更像是能够分叉出最终并行运行的进程。\n这将像要求数据结构的特定实现一样，是你对程序进行优化时相当晚才做的事情。版本1通常会忽略从并行计算中获得的任何优势，就像它们会忽略从数据的特定表示中获得的任何优势一样。\n除了特殊类型的应用程序，并行不会渗透到一百年后编写的程序中。如果确实如此，那将是过早优化。\n一百年后会有多少种编程语言？最近似乎有大量的新编程语言。部分原因是更快的硬件使程序员能够在速度和便利性之间做出不同的权衡，取决于应用。如果这是一个真正的趋势，我们一百年后拥有的硬件只会增加它。\n然而一百年后可能只有几种广泛使用的语言。我说这个的部分原因是乐观：似乎，如果你做得很好，你可以制作一种理想的语言来编写慢速版本1，然而通过给编译器正确的优化建议，也能在必要时产生非常快的代码。所以，既然我乐观，我预测尽管它们在可接受和最大效率之间会有巨大差距，一百年后的程序员将拥有能够跨越大部分差距的语言。\n随着这个差距扩大，性能分析器将变得越来越重要。现在对性能分析的关注很少。许多人似乎仍然相信获得快速应用程序的方法是编写生成快速代码的编译器。随着可接受和最大性能之间的差距扩大，获得快速应用程序的方法是拥有一个从可接受到最大的良好指南，这一点将变得越来越清晰。\n",
    "description": "",
    "tags": ["编程语言","未来","语言设计","进化","Lisp","软件开发"],
    "categories": [],
    "content": "→ English Version\n百年编程语言 2003年4月\n（本文源于在PyCon 2003的主题演讲。）\n很难预测一百年后的生活会是什么样子。我们只能确定几件事。我们知道每个人都会驾驶飞行汽车，区划法律将会放宽以允许建造数百层高的建筑，大部分时间都会是黑暗的，女性都会接受武术训练。在这里，我想聚焦于这个图景中的一个细节。他们会用什么样的编程语言来编写控制那些飞行汽车的软件？\n思考这个问题之所以有价值，并不是因为我们真的能用到这些语言，而是因为，如果我们幸运的话，我们会使用从现在到那个时间点的路径上的语言。\n我认为，像物种一样，语言会形成进化树，到处都有死胡同分支。我们已经看到这种情况正在发生。Cobol尽管曾经流行，但似乎没有任何知识后代。它是一个进化死胡同——尼安德特人式的语言。\n我预测Java也会有类似的命运。人们有时给我写信说，\u0026ldquo;你怎么能说Java不会成为一种成功的语言？它已经是成功的语言了。\u0026ldquo;我承认它是，如果你用关于它的书籍所占用的书架空间（特别是关于它的单本书籍），或者相信必须学习它才能找到工作的本科生数量来衡量成功的话。当我说Java不会成为成功的语言时，我的意思更具体：Java将是一个进化死胡同，就像Cobol一样。\n这只是一个猜测。我可能是错的。我在这里的重点不是批评Java，而是提出进化树的问题，让人们思考，语言X在树的哪个位置？问这个问题的原因不仅仅是为了让我们的鬼魂在一百年后说我告诉过你这样。这是因为靠近主要分支是寻找现在适合编程的语言的有用启发式方法。\n在任何给定的时间，你可能最幸福地处于进化树的主要分支上。即使仍然有很多尼安德特人，成为其中的一员也一定很糟糕。克罗马农人会不断过来殴打你并偷走你的食物。\n我想知道一百年后语言会是什么样子，这样我就知道现在应该赌树的哪个分支。\n语言的进化与物种的进化不同，因为分支可以融合。例如，Fortran分支似乎正在与Algol的后代融合。理论上这对物种也是可能的，但不太可能发生在比细胞更大的生物上。\n语言更有可能融合，部分是因为可能性空间较小，部分是因为突变不是随机的。语言设计师有意地融合其他语言的思想。\n对于语言设计师来说，思考编程语言的进化可能导致的方向特别有用，因为他们可以相应地引导。在这种情况下，\u0026ldquo;停留在主分支上\u0026quot;不仅仅是选择好语言的方法。它成为做出正确语言设计决策的启发式方法。\n任何编程语言都可以分为两部分：一组扮演公理角色的基本运算符，以及语言的其余部分，原则上可以用这些基本运算符来编写。\n我认为基本运算符是语言长期生存的最重要因素。其余的你可以改变。这就像买房子的规则，你首先应该考虑位置。其他的一切你都可以稍后修复，但你不能修复位置。\n我认为不仅公理要选择得好，而且数量要少。数学家一直对公理有这样的感觉——越少越好——我认为他们抓住了要点。\n至少，仔细审视语言的核心，看看是否有任何可以剔除的公理，这必须是一个有用的练习。我在我作为一个邋遢人的漫长职业生涯中发现，冗余会产生冗余，我看到这种情况不仅发生在软件中，也发生在床下和房间角落。\n我有一种预感，进化树的主要分支通过那些具有最小、最干净核心的语言。你能在语言本身中编写的语言部分越多越好。\n当然，即使问一百年后编程语言会是什么样子，我也做出了一个很大的假设。一百年后我们还会编写程序吗？我们不会只是告诉计算机我们想要它们做什么吗？\n到目前为止，那个部门没有太多进展。我猜测一百年后人们仍会使用我们能识别的程序来告诉计算机做什么。可能有些我们现在通过编写程序来解决的问题，一百年后你不必编写程序来解决，但我认为仍会有大量我们今天所做的那种编程。\n认为任何人都能预测任何技术在一百年后会是什么样子可能显得 presumptuous。但请记住，我们背后已经有将近五十年的历史。当我们考虑到语言在过去五十年中进化得多么缓慢时，展望一百年是一个可以把握的想法。\n语言进化缓慢是因为它们并不是真正的技术。语言是符号。程序是你希望计算机为你解决问题的形式化描述。所以编程语言的进化速度更像数学符号的进化速度，而不是交通或通信的进化速度。数学符号确实在进化，但没有你在技术中看到的巨大飞跃。\n无论一百年后计算机由什么制成，似乎可以安全地预测它们会比现在快得多。如果摩尔定律继续发挥作用，它们将快74 quintillion（73,786,976,294,838,206,464）倍。这很难想象。事实上，速度部门最可能的预测可能是摩尔定律将停止工作。任何应该每十八个月翻一番的东西似乎最终都会遇到某种基本限制。但我毫不怀疑计算机会快得多。即使它们最终只快一百倍，这也应该大大改变编程语言的基本规则。除此之外，还会有更多空间给现在被认为是慢的语言，即那些不能产生非常高效代码的语言。\n然而，有些 …"
  },{
    "title": "看见随机性",
    "url": "/paul_graham/essays_zh/randomness/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n看见随机性 2006年4月，修订于2009年8月\n柏拉图引用苏格拉底的话说\u0026quot;未经审视的生活不值得过。\u0026ldquo;他的部分意思是人类的适当角色是思考，正如食蚁兽的适当角色是将鼻子伸入蚁丘。\n许多古代哲学都具有这种特质——我不是在贬义——类似于大一新生深夜在公共休息室里的那种对话：我们的目的是什么？嗯，我们人类与其他动物明显不同，就像食蚁兽一样。在我们的情况下， distinguishing特征是理性思考的能力。所以显然这就是我们应该做的，一个不这样做的人就是没有做好做人的工作——还不如动物。现在我们会给出不同的答案。至少，苏格拉底那个年纪的人会。我们会问为什么我们甚至假设生活中有一个\u0026quot;目的\u0026rdquo;。我们可能比其他人更适合某些事情；我们做我们适应的事情可能会更快乐；但为什么要假设目的呢？\n思想史是逐渐抛弃一切都是关于我们的假设的历史。不，事实证明，地球不是宇宙的中心——甚至不是太阳系的中心。不，事实证明，人类不是以上帝的形象创造的；他们只是众多物种中的一个，不仅从猿类，而且从微生物进化而来。即使\u0026quot;我\u0026quot;的概念，如果你仔细审视，也会发现边缘模糊。\n我们是事物中心的想法很难抛弃。如此困难以至于可能还有更多可以抛弃的地方。理查德·道金斯在最近几十年中通过自私基因的概念朝这个方向又迈出了一步。不，事实证明，我们甚至不是主角：我们只是我们的基因建造来四处旅行的最新型号交通工具。而生孩子是我们的基因奔向救生艇。阅读那本书使我的大脑脱离了以前的思维方式，就像达尔文的《物种起源》首次出现时一定是那样。\n（现在很少有人能体验到达尔文同时代人在《物种起源》首次出版时的感受，因为现在每个人要么被教导接受进化论是理所当然的，要么将其视为异端。没有人作为成年人第一次遇到自然选择的想法。）\n所以如果你想发现迄今为止被忽视的事情，一个真正好的地方是我们的盲点：在我们自然的、天真的信念，即一切都是关于我们的。如果你这样做，准备好会遇到激烈的反对。\n相反，如果你必须在两个理论之间选择，选择那个不以你为中心的理论。\n这个原则不仅适用于重大思想。它在日常生活中也有效。例如，假设你在冰箱里保存了一块蛋糕，有一天你回家发现你的室友吃了它。两种可能的理论：\na) 你的室友故意这样做来让你不安。他知道你在保存那块蛋糕。\nb) 你的室友饿了。\n我选择b。没有人知道是谁说了\u0026quot;不要用恶意来解释可以用无能解释的事情\u0026quot;，但这是一个强大的思想。它更一般的版本是我们对希腊人的回答：不要在没有目的的地方看到目的。或者更好的是，积极版本：看见随机性。\n韩文翻译\n",
    "description": "",
    "tags": ["哲学","思考","随机性","思想","理性","进化","道金斯"],
    "categories": [],
    "content": "→ English Version\n看见随机性 2006年4月，修订于2009年8月\n柏拉图引用苏格拉底的话说\u0026quot;未经审视的生活不值得过。\u0026ldquo;他的部分意思是人类的适当角色是思考，正如食蚁兽的适当角色是将鼻子伸入蚁丘。\n许多古代哲学都具有这种特质——我不是在贬义——类似于大一新生深夜在公共休息室里的那种对话：我们的目的是什么？嗯，我们人类与其他动物明显不同，就像食蚁兽一样。在我们的情况下， distinguishing特征是理性思考的能力。所以显然这就是我们应该做的，一个不这样做的人就是没有做好做人的工作——还不如动物。现在我们会给出不同的答案。至少，苏格拉底那个年纪的人会。我们会问为什么我们甚至假设生活中有一个\u0026quot;目的\u0026rdquo;。我们可能比其他人更适合某些事情；我们做我们适应的事情可能会更快乐；但为什么要假设目的呢？\n思想史是逐渐抛弃一切都是关于我们的假设的历史。不，事实证明，地球不是宇宙的中心——甚至不是太阳系的中心。不，事实证明，人类不是以上帝的形象创造的；他们只是众多物种中的一个，不仅从猿类，而且从微生物进化而来。即使\u0026quot;我\u0026quot;的概念，如果你仔细审视，也会发现边缘模糊。\n我们是事物中心的想法很难抛弃。如此困难以至于可能还有更多可以抛弃的地方。理查德·道金斯在最近几十年中通过自私基因的概念朝这个方向又迈出了一步。不，事实证明，我们甚至不是主角：我们只是我们的基因建造来四处旅行的最新型号交通工具。而生孩子是我们的基因奔向救生艇。阅读那本书使我的大脑脱离了以前的思维方式，就像达尔文的《物种起源》首次出现时一定是那样。\n（现在很少有人能体验到达尔文同时代人在《物种起源》首次出版时的感受，因为现在每个人要么被教导接受进化论是理所当然的，要么将其视为异端。没有人作为成年人第一次遇到自然选择的想法。）\n所以如果你想发现迄今为止被忽视的事情，一个真正好的地方是我们的盲点：在我们自然的、天真的信念，即一切都是关于我们的。如果你这样做，准备好会遇到激烈的反对。\n相反，如果你必须在两个理论之间选择，选择那个不以你为中心的理论。\n这个原则不仅适用于重大思想。它在日常生活中也有效。例如，假设你在冰箱里保存了一块蛋糕，有一天你回家发现你的室友吃了它。两种可能的理论：\na) 你的室友故意这样做来让你不安。他知道你在保存那块蛋糕。\nb) 你的室友饿了。\n我选择b。没有人知道是谁说了\u0026quot;不要用恶意来解释可以用无能解释的事情\u0026quot;，但这是一个强大的思想。它更一般的版本是我们对希腊人的回答：不要在没有目的的地方看到目的。或者更好的是，积极版本：看见随机性。\n韩文翻译\n"
  },{
    "title": "真有好品味这回事吗？",
    "url": "/paul_graham/essays_zh/goodtaste/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n真有好品味这回事吗？ 2021年11月\n（本文源自剑桥联盟的一次演讲。）\n当我还是个孩子的时候，我会说没有这回事。我父亲这样告诉我。有些人喜欢某些东西，另一些人喜欢其他东西，谁说得对谁呢？\n不存在好品味这回事似乎如此明显，以至于我只是通过间接证据才意识到我父亲是错的。这就是我在这里要给你的：一个归谬法的证明。如果我们从不存在好品味这回事的前提开始，我们最终会得到明显错误的结论，因此前提一定是错的。\n我们最好先说清楚什么是好品味。有一个狭义的意义，指的是美学判断，还有一个更广泛的意义，指的是任何种类的偏好。最有力的证明将是展示品味在最狭义的意义上存在，所以我将要谈论艺术中的品味。如果你喜欢的艺术比我喜欢的艺术更好，那么你的品味比我好。\n如果不存在好品味这回事，那么也不存在好艺术这回事。因为如果存在好艺术这回事，很容易判断两个人中谁的品味更好。给他们看很多他们从未见过的艺术家的作品，要求他们选择最好的，谁选择了更好的艺术谁就有更好的品味。\n所以如果你想抛弃好品味的概念，你也必须抛弃好艺术的概念。这意味着你必须抛弃人们擅长创作艺术的可能性。这意味着艺术家无法擅长他们的工作。不仅是视觉艺术家，还有任何意义上的艺术家。你不可能有好演员，或者好小说家，或者好作曲家，或者好舞蹈家。你可以有受欢迎的小说家，但没有好的小说家。\n我们没有意识到如果抛弃好品味的概念我们必须走多远，因为我们甚至没有辩论最明显的情况。但这不仅意味着我们不能说两个著名画家中哪个更好。这意味着我们不能说任何画家比随机选择的八岁孩子更好。\n这就是我意识到我父亲错的方式。我开始学习绘画。这就像我做过的其他工作一样：你可以做得好，或者做得差，如果你努力，你可以变得更好。很明显，列奥纳多和贝利尼在这方面比我好得多。我们之间的差距不是想象的。他们是如此优秀。如果他们可以是优秀的，那么艺术可以是优秀的，毕竟还是存在好品味这回事。\n既然我已经解释了如何证明存在好品味这回事，我也应该解释为什么人们认为不存在。有两个原因。一个是关于品味总是有这么多分歧。大多数人对艺术的反应是一团未经验证的冲动。艺术家著名吗？主题吸引人吗？这是他们应该喜欢的艺术类型吗？它挂在著名的博物馆里，还是在一本昂贵的书中复制？在实践中，大多数人对艺术的反应被这样的外来因素主导。\n而那些声称有好品味的人经常是错误的。一代所谓专家赞赏的绘画与几代人后赞赏的经常如此不同。很容易得出结论认为那里根本没有真实的东西。只有当你隔离这种力量时，例如通过尝试绘画并将你的作品与贝利尼的比较，你才能看到它确实存在。\n人们怀疑艺术可以是好的另一个原因是，在艺术中似乎没有这种好的空间。论证是这样的。想象几个人在看一件艺术品并判断它有多好。如果好艺术真的是物体的一种属性，它应该以某种方式在物体中。但它似乎不在；它似乎发生在每个观察者的头脑中。如果他们意见不一致，你如何在他们之间选择？\n这个谜题的解决方案是意识到艺术的目的是作用于其人类观众，而人类有很多共同点。就物体作用的东西以同样方式反应的程度而言，这可以说是物体具有相应属性的意义。如果一个粒子相互作用的一切都表现得好像该粒子具有质量m，那么它就具有质量m。所以\u0026quot;客观\u0026quot;和\u0026quot;主观\u0026quot;的区别不是二元的，而是程度问题，取决于主体有多少共同点。相互作用的粒子在一个极端，但与艺术相互作用的人并不完全在另一个极端；他们的反应不是随机的。\n因为人们对艺术的反应不是随机的，艺术可以被设计用来作用于人，并且根据其效果好坏而好坏。就像疫苗一样。如果有人在谈论疫苗赋予免疫力的能力，反对说赋予免疫力实际上不是疫苗的属性，因为获得免疫力是发生在每个人免疫系统中的事情，这似乎非常轻率。当然，人们的免疫系统各不相同，在一个身上有效的疫苗可能在另一个人身上无效，但这并不意味着谈论疫苗的有效性是没有意义的。\n艺术的情况当然更混乱。你不能像对疫苗那样简单地通过投票来测量有效性。你必须想象具有深厚艺术知识、头脑足够清晰能够忽略艺术家名声等外来影响的主体的反应。即使那样你仍然会看到一些分歧。人们确实有差异，判断艺术很难，特别是当代艺术。作品或人们判断它们的能力都没有完全的顺序。但两者都同样明确有部分顺序。所以虽然不可能有完美的品味，但有可能有好品味。\n感谢剑桥联盟邀请我，感谢Trevor Blackwell、Jessica Livingston和Robert Morris阅读本文的草稿。\n",
    "description": "",
    "tags": ["品味","艺术","主观性","客观性","美学"],
    "categories": [],
    "content": "→ English Version\n真有好品味这回事吗？ 2021年11月\n（本文源自剑桥联盟的一次演讲。）\n当我还是个孩子的时候，我会说没有这回事。我父亲这样告诉我。有些人喜欢某些东西，另一些人喜欢其他东西，谁说得对谁呢？\n不存在好品味这回事似乎如此明显，以至于我只是通过间接证据才意识到我父亲是错的。这就是我在这里要给你的：一个归谬法的证明。如果我们从不存在好品味这回事的前提开始，我们最终会得到明显错误的结论，因此前提一定是错的。\n我们最好先说清楚什么是好品味。有一个狭义的意义，指的是美学判断，还有一个更广泛的意义，指的是任何种类的偏好。最有力的证明将是展示品味在最狭义的意义上存在，所以我将要谈论艺术中的品味。如果你喜欢的艺术比我喜欢的艺术更好，那么你的品味比我好。\n如果不存在好品味这回事，那么也不存在好艺术这回事。因为如果存在好艺术这回事，很容易判断两个人中谁的品味更好。给他们看很多他们从未见过的艺术家的作品，要求他们选择最好的，谁选择了更好的艺术谁就有更好的品味。\n所以如果你想抛弃好品味的概念，你也必须抛弃好艺术的概念。这意味着你必须抛弃人们擅长创作艺术的可能性。这意味着艺术家无法擅长他们的工作。不仅是视觉艺术家，还有任何意义上的艺术家。你不可能有好演员，或者好小说家，或者好作曲家，或者好舞蹈家。你可以有受欢迎的小说家，但没有好的小说家。\n我们没有意识到如果抛弃好品味的概念我们必须走多远，因为我们甚至没有辩论最明显的情况。但这不仅意味着我们不能说两个著名画家中哪个更好。这意味着我们不能说任何画家比随机选择的八岁孩子更好。\n这就是我意识到我父亲错的方式。我开始学习绘画。这就像我做过的其他工作一样：你可以做得好，或者做得差，如果你努力，你可以变得更好。很明显，列奥纳多和贝利尼在这方面比我好得多。我们之间的差距不是想象的。他们是如此优秀。如果他们可以是优秀的，那么艺术可以是优秀的，毕竟还是存在好品味这回事。\n既然我已经解释了如何证明存在好品味这回事，我也应该解释为什么人们认为不存在。有两个原因。一个是关于品味总是有这么多分歧。大多数人对艺术的反应是一团未经验证的冲动。艺术家著名吗？主题吸引人吗？这是他们应该喜欢的艺术类型吗？它挂在著名的博物馆里，还是在一本昂贵的书中复制？在实践中，大多数人对艺术的反应被这样的外来因素主导。\n而那些声称有好品味的人经常是错误的。一代所谓专家赞赏的绘画与几代人后赞赏的经常如此不同。很容易得出结论认为那里根本没有真实的东西。只有当你隔离这种力量时，例如通过尝试绘画并将你的作品与贝利尼的比较，你才能看到它确实存在。\n人们怀疑艺术可以是好的另一个原因是，在艺术中似乎没有这种好的空间。论证是这样的。想象几个人在看一件艺术品并判断它有多好。如果好艺术真的是物体的一种属性，它应该以某种方式在物体中。但它似乎不在；它似乎发生在每个观察者的头脑中。如果他们意见不一致，你如何在他们之间选择？\n这个谜题的解决方案是意识到艺术的目的是作用于其人类观众，而人类有很多共同点。就物体作用的东西以同样方式反应的程度而言，这可以说是物体具有相应属性的意义。如果一个粒子相互作用的一切都表现得好像该粒子具有质量m，那么它就具有质量m。所以\u0026quot;客观\u0026quot;和\u0026quot;主观\u0026quot;的区别不是二元的，而是程度问题，取决于主体有多少共同点。相互作用的粒子在一个极端，但与艺术相互作用的人并不完全在另一个极端；他们的反应不是随机的。\n因为人们对艺术的反应不是随机的，艺术可以被设计用来作用于人，并且根据其效果好坏而好坏。就像疫苗一样。如果有人在谈论疫苗赋予免疫力的能力，反对说赋予免疫力实际上不是疫苗的属性，因为获得免疫力是发生在每个人免疫系统中的事情，这似乎非常轻率。当然，人们的免疫系统各不相同，在一个身上有效的疫苗可能在另一个人身上无效，但这并不意味着谈论疫苗的有效性是没有意义的。\n艺术的情况当然更混乱。你不能像对疫苗那样简单地通过投票来测量有效性。你必须想象具有深厚艺术知识、头脑足够清晰能够忽略艺术家名声等外来影响的主体的反应。即使那样你仍然会看到一些分歧。人们确实有差异，判断艺术很难，特别是当代艺术。作品或人们判断它们的能力都没有完全的顺序。但两者都同样明确有部分顺序。所以虽然不可能有完美的品味，但有可能有好品味。\n感谢剑桥联盟邀请我，感谢Trevor Blackwell、Jessica Livingston和Robert Morris阅读本文的草稿。\n"
  },{
    "title": "真诚",
    "url": "/paul_graham/essays_zh/earnest/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n真诚 2020年12月\nJessica和我在谈论创业公司时有一些有特殊意义的词汇。我们能给创始人的最高赞美就是形容他们为\u0026quot;真诚\u0026quot;。这本身并不是成功的保证。你可能很真诚但没有能力。但当创始人既强大（我们的另一个词汇）又真诚时，他们就几乎势不可挡了。\n真诚听起来像是一个无聊的，甚至是维多利亚式的美德。硅谷的人们会关心这个似乎有点不合时宜。为什么这如此重要？\n当你说某人真诚时，你在陈述他们的动机。这意味着他们既是为了正确的理由做事，也在尽力而为。如果我们把动机想象成向量，这意味着方向和大小都是正确的。虽然这些当然是相关的：当人们为了正确的理由做事时，他们会更努力。[1]\n在硅谷动机如此重要的原因是那里有太多人动机不纯。创办一家成功的创业公司会让你富有和出名。所以很多试图创办创业公司的人是为了这些理由。那是为了什么？不是为了解决问题本身。这就是真诚的根源。[2]\n这也是极客的标志。确实，当人们形容自己是\u0026quot;x极客\u0026quot;时，他们的意思是他们因为x本身而对x感兴趣，而不是因为对x感兴趣很酷，或者因为他们能从中得到什么。他们在说他们如此关心x，以至于愿意为了x而牺牲显得很酷。\n对某事的真正兴趣是一个非常强大的动力源——对有些人来说，是最强大的动力源。[3] 这就是为什么Jessica和我在创始人中寻找这个的原因。但作为力量的源泉，它也是脆弱性的源泉。关心会限制你。真诚的人不容易以同样的方式回应嘲讽的玩笑，也不能摆出虚无的冷漠酷相。他们太关心了。他们注定要当那个老实人。这在你的青少年时期是一个真正的劣势，那时嘲讽的玩笑和虚无的冷漠往往占上风。但后来它变成了优势。\n现在人们普遍认为，高中时的极客孩子后来成了酷孩子的老板。但人们误解了为什么会这样。不仅仅是因为极客更聪明，还因为他们更真诚。当问题变得比高中时给的假问题更难时，关心它们就开始变得重要了。\n它总是重要吗？真诚的人总是赢吗？不总是。在政治中，在犯罪中，或者在类似于犯罪的某些类型商业中，如赌博、人身伤害法、专利流氓等，它可能不那么重要。在学术领域的虚假端也不重要。虽然我了解得不够多无法确定，但在某些类型的幽默中可能不重要：完全愤世嫉俗但仍然非常有趣可能是可能的。[4]\n看看我提到的领域列表，有一个明显的模式。除了幽默可能例外，这些都是我会像瘟疫一样避免的工作类型。所以这可以成为一个有用的启发式方法来决定在哪个领域工作：真诚有多重要？这反过来大概可以从顶层的极客数量推断出来。\n与\u0026quot;极客\u0026quot;一起，另一个往往与真诚相关的词是\u0026quot;天真\u0026quot;。真诚的人往往看起来天真。不仅仅是他们没有其他人那样的动机。他们往往没有完全理解这种动机的存在。或者他们可能知道这种动机存在，但因为感觉不到，就忘记了它们。[5]\n不仅在动机上略微天真是有效的，而且，信不信由你，在你正在处理的问题上也是如此。天真的乐观主义可以弥补快速变化对既定信念造成的位腐。你冲进某个问题说\u0026quot;这能有多难？\u0026quot;，然后在解决后你发现它直到最近还是无法解决的。\n天真对于任何想要显得老练的人来说都是一个障碍，这也是为什么准知识分子发现很难理解硅谷的原因之一。自从奥斯卡·王尔德在1895年写下《认真的重要性》以来，对这样的人来说，除了在引号中使用\u0026quot;真诚\u0026quot;这个词外，一直是不安全的。然而当你聚焦硅谷，直接进入Jessica Livingston的大脑时，她的X光视觉正在创始人中寻找的就是这个。真诚！谁能想到呢？当赚大钱的创始人说他们创办公司是为了让世界更美好时，记者们简直不敢相信。这种情况似乎就是为嘲笑而生的。这些创始人怎么能如此天真，没有意识到他们听起来多么不可信？\n虽然那些问这个问题的人没有意识到，但这不是修辞问题。\n当然，很多创始人都是在假装，特别是那些小人物，以及即将成为小人物的人。但不是所有人。有相当数量的创始人确实对他们正在解决的问题感兴趣，主要是为了问题本身。\n为什么不应该有呢？我们毫不怀疑人们会因为历史、数学甚至旧巴士票本身而对它们感兴趣。为什么不可能有因为自动驾驶汽车或社交网络本身而对它们感兴趣的人呢？当你从这一侧看问题时，显然会有这样的人。而且，对某事有深厚的兴趣是不是会成为巨大能量和韧性的源泉？在其他每个领域都是如此。\n问题其实是我们为什么对商业有盲点。如果你了解足够的历史，答案就很明显。在历史上大部分时间里，赚大钱并不是很有智力上的趣味性。在前工业时代，它离抢劫不远，商业的某些领域仍然保留着这种特征，只是使用律师而不是士兵。\n但在商业的其他领域，工作是真正有趣的。亨利·福特花了很多时间处理有趣的技术问题，在过去几十年里，这个方向的趋势一直在加速。现在通过做自己感兴趣的事情赚大钱比50年前容易多了。这可能才是创业公司代表的最重要变化，而不是它们增长的速度。虽然确实，工作真正有趣是它能如此快速完成的一个很大原因。[6]\n你能想象比智力好奇心和金钱之间的关系变化更重要的变化吗？这是世界上两个最强大的力量，在我的一生中，它们变得更加一致。看着这样的事情实时发生，你怎么能不被迷住呢？\n我本想写一篇关于真诚的一般性文章，现在我又开始谈论创业公司了。但我想至少它提供了一个在野外发现的x极客的例子。\n注释 [1] 不真诚的方式有很多种：巧妙地愤世嫉俗，表面上的才华横溢，显著的德行，酷，老练，正统，势利，欺凌，迎合，追逐利益。这种模式表明真诚不是一个连续体的一端，而是一个可以多维度达不到的目标。\n我注意到的关于这个列表的另一件事是它听起来像是人们在Twitter上行为方式的列表。无论社交媒体还有什么作用，它都是不真诚方式的生动目录。\n[2] 在硅谷，人们的动机和任何其他地方一样复杂。即使是主要受金钱驱动的创始人也往往对他们正在解决的问题至少有些兴趣，即使是最关心解决问题的创始人也喜欢变得富有的想法。但不同创始人的动机相对比例有很大差异。\n当我说\u0026quot;错误\u0026quot;动机时，我不是说道德上错误。为了赚钱而创办创业公司在道德上没有错。我只是说那些创业公司做得不好。\n[3] 对大多数人来说，最强大的动力可能是家庭。但对有些人来说，智力好奇心是第一位的。在他（精彩的）自传中，Paul Halmos明确表示，对数学家来说，数学必须先于任何其他事情，包括家庭。这至少暗示对他来说确实如此。\n[4] 有趣的是，正如\u0026quot;极客\u0026quot;这个词即使在作为隐喻使用时也暗示真诚，\u0026ldquo;政治\u0026quot;这个词暗示相反。不仅在现实政治中真诚似乎是个障碍，在办公室政治和学术政治中也是如此。\n[5] 在大多数欧洲国家，显得天真比在美国是个更大的社交错误，这可能是创业公司在那里不太常见的更微妙原因之一。创始人文化与老练的愤世嫉俗完全不相容。\n欧洲最真诚的部分是斯堪的纳维亚，不出所料，这也是人均成功创业公司数量最高的地区。\n[6] 商业中很多都是繁琐工作，而且可能永远如此。但即使是教授也很大程度上是繁琐工作。收集不同工作的繁琐比率统计会很有趣，但我怀疑它们很少低于30%。\n感谢Trevor Blackwell、Patrick Collison、Suhail Doshi、Jessica Livingston、Mattias Ljungman、Harj Taggar和Kyle Vogt阅读本文草稿。\n",
    "description": "",
    "tags": ["真诚","动机","创始人","创业公司","硅谷","极客","品格","成功"],
    "categories": [],
    "content": "→ English Version\n真诚 2020年12月\nJessica和我在谈论创业公司时有一些有特殊意义的词汇。我们能给创始人的最高赞美就是形容他们为\u0026quot;真诚\u0026quot;。这本身并不是成功的保证。你可能很真诚但没有能力。但当创始人既强大（我们的另一个词汇）又真诚时，他们就几乎势不可挡了。\n真诚听起来像是一个无聊的，甚至是维多利亚式的美德。硅谷的人们会关心这个似乎有点不合时宜。为什么这如此重要？\n当你说某人真诚时，你在陈述他们的动机。这意味着他们既是为了正确的理由做事，也在尽力而为。如果我们把动机想象成向量，这意味着方向和大小都是正确的。虽然这些当然是相关的：当人们为了正确的理由做事时，他们会更努力。[1]\n在硅谷动机如此重要的原因是那里有太多人动机不纯。创办一家成功的创业公司会让你富有和出名。所以很多试图创办创业公司的人是为了这些理由。那是为了什么？不是为了解决问题本身。这就是真诚的根源。[2]\n这也是极客的标志。确实，当人们形容自己是\u0026quot;x极客\u0026quot;时，他们的意思是他们因为x本身而对x感兴趣，而不是因为对x感兴趣很酷，或者因为他们能从中得到什么。他们在说他们如此关心x，以至于愿意为了x而牺牲显得很酷。\n对某事的真正兴趣是一个非常强大的动力源——对有些人来说，是最强大的动力源。[3] 这就是为什么Jessica和我在创始人中寻找这个的原因。但作为力量的源泉，它也是脆弱性的源泉。关心会限制你。真诚的人不容易以同样的方式回应嘲讽的玩笑，也不能摆出虚无的冷漠酷相。他们太关心了。他们注定要当那个老实人。这在你的青少年时期是一个真正的劣势，那时嘲讽的玩笑和虚无的冷漠往往占上风。但后来它变成了优势。\n现在人们普遍认为，高中时的极客孩子后来成了酷孩子的老板。但人们误解了为什么会这样。不仅仅是因为极客更聪明，还因为他们更真诚。当问题变得比高中时给的假问题更难时，关心它们就开始变得重要了。\n它总是重要吗？真诚的人总是赢吗？不总是。在政治中，在犯罪中，或者在类似于犯罪的某些类型商业中，如赌博、人身伤害法、专利流氓等，它可能不那么重要。在学术领域的虚假端也不重要。虽然我了解得不够多无法确定，但在某些类型的幽默中可能不重要：完全愤世嫉俗但仍然非常有趣可能是可能的。[4]\n看看我提到的领域列表，有一个明显的模式。除了幽默可能例外，这些都是我会像瘟疫一样避免的工作类型。所以这可以成为一个有用的启发式方法来决定在哪个领域工作：真诚有多重要？这反过来大概可以从顶层的极客数量推断出来。\n与\u0026quot;极客\u0026quot;一起，另一个往往与真诚相关的词是\u0026quot;天真\u0026quot;。真诚的人往往看起来天真。不仅仅是他们没有其他人那样的动机。他们往往没有完全理解这种动机的存在。或者他们可能知道这种动机存在，但因为感觉不到，就忘记了它们。[5]\n不仅在动机上略微天真是有效的，而且，信不信由你，在你正在处理的问题上也是如此。天真的乐观主义可以弥补快速变化对既定信念造成的位腐。你冲进某个问题说\u0026quot;这能有多难？\u0026quot;，然后在解决后你发现它直到最近还是无法解决的。\n天真对于任何想要显得老练的人来说都是一个障碍，这也是为什么准知识分子发现很难理解硅谷的原因之一。自从奥斯卡·王尔德在1895年写下《认真的重要性》以来，对这样的人来说，除了在引号中使用\u0026quot;真诚\u0026quot;这个词外，一直是不安全的。然而当你聚焦硅谷，直接进入Jessica Livingston的大脑时，她的X光视觉正在创始人中寻找的就是这个。真诚！谁能想到呢？当赚大钱的创始人说他们创办公司是为了让世界更美好时，记者们简直不敢相信。这种情况似乎就是为嘲笑而生的。这些创始人怎么能如此天真，没有意识到他们听起来多么不可信？\n虽然那些问这个问题的人没有意识到，但这不是修辞问题。\n当然，很多创始人都是在假装，特别是那些小人物，以及即将成为小人物的人。但不是所有人。有相当数量的创始人确实对他们正在解决的问题感兴趣，主要是为了问题本身。\n为什么不应该有呢？我们毫不怀疑人们会因为历史、数学甚至旧巴士票本身而对它们感兴趣。为什么不可能有因为自动驾驶汽车或社交网络本身而对它们感兴趣的人呢？当你从这一侧看问题时，显然会有这样的人。而且，对某事有深厚的兴趣是不是会成为巨大能量和韧性的源泉？在其他每个领域都是如此。\n问题其实是我们为什么对商业有盲点。如果你了解足够的历史，答案就很明显。在历史上大部分时间里，赚大钱并不是很有智力上的趣味性。在前工业时代，它离抢劫不远，商业的某些领域仍然保留着这种特征，只是使用律师而不是士兵。\n但在商业的其他领域，工作是真正有趣的。亨利·福特花了很多时间处理有趣的技术问题，在过去几十年里，这个方向的趋势一直在加速。现在通过做自己感兴趣的事情赚大钱比50年前容易多了。 …"
  },{
    "title": "硬件复兴",
    "url": "/paul_graham/essays_zh/hw/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n硬件复兴 想要创业？获得Y Combinator的投资。\n2012年10月\nY Combinator早期、广泛关注的优势之一是我们比大多数人更早看到趋势。而最近一批中最引人注目的趋势之一是大量硬件创业公司。在84家公司中，有7家在制造硬件。总的来说，它们比那些不是硬件公司的公司做得更好。\n它们当然面临投资者的抵制。投资者对硬件有根深蒂固的偏见。但投资者的意见是一个滞后指标。最好的创始人比最好的投资者更善于看到未来，因为最好的创始人正在创造未来。\n推动这一趋势的不是单一力量。硬件在众筹网站上表现出色。平板电脑的普及使得制造由它们控制甚至 incorporating 它们的新东西成为可能。电动机已经改进。各种类型的无线连接现在被认为是理所当然的。制造东西变得越来越直接。Arduinos、3D打印、激光切割机和更容易接触到的CNC铣床使硬件原型制作更容易。随着客户越来越多地在线购买，零售商的瓶颈作用减小。\n我能回答的一个问题是为什么硬件突然变得酷。它一直都很酷。物理的东西很棒。它们只是不像软件那样是创办快速增长业务的绝佳方式。但这个规则可能不是永久性的。它甚至没有那么古老；它只追溯到大约1990年。也许软件的优势将被证明是暂时的。黑客喜欢制造硬件，客户喜欢购买它。所以如果硬件发布的便利性即使接近软件发布的便利性，我们会看到更多的硬件创业公司。\n这不是第一次某个东西在不是坏主意之前一直是坏主意。这也不会是第一次投资者从创始人那里学到这个教训。\n所以如果你想从事硬件工作，不要因为担心投资者会歧视你而阻止你这样做。特别是，不要因为担心而阻止你向Y Combinator申请硬件创意，因为我们对硬件创业公司特别感兴趣。\n我们知道下一个史蒂夫·乔布斯有空间。但几乎可以肯定，第一个\u0026lt;你的名字\u0026gt;也有空间。\n感谢Sam Altman、Trevor Blackwell、David Cann、Sanjay Dastoor、Paul Gerhardt、Cameron Robertson、Harj Taggar和Garry Tan阅读本文草稿。\n在\u0026quot;软件吞噬世界\u0026quot;的同时的硬件复兴？\n",
    "description": "",
    "tags": ["硬件","创业公司","Y Combinator","创新","制造","众筹","技术趋势"],
    "categories": [],
    "content": "→ English Version\n硬件复兴 想要创业？获得Y Combinator的投资。\n2012年10月\nY Combinator早期、广泛关注的优势之一是我们比大多数人更早看到趋势。而最近一批中最引人注目的趋势之一是大量硬件创业公司。在84家公司中，有7家在制造硬件。总的来说，它们比那些不是硬件公司的公司做得更好。\n它们当然面临投资者的抵制。投资者对硬件有根深蒂固的偏见。但投资者的意见是一个滞后指标。最好的创始人比最好的投资者更善于看到未来，因为最好的创始人正在创造未来。\n推动这一趋势的不是单一力量。硬件在众筹网站上表现出色。平板电脑的普及使得制造由它们控制甚至 incorporating 它们的新东西成为可能。电动机已经改进。各种类型的无线连接现在被认为是理所当然的。制造东西变得越来越直接。Arduinos、3D打印、激光切割机和更容易接触到的CNC铣床使硬件原型制作更容易。随着客户越来越多地在线购买，零售商的瓶颈作用减小。\n我能回答的一个问题是为什么硬件突然变得酷。它一直都很酷。物理的东西很棒。它们只是不像软件那样是创办快速增长业务的绝佳方式。但这个规则可能不是永久性的。它甚至没有那么古老；它只追溯到大约1990年。也许软件的优势将被证明是暂时的。黑客喜欢制造硬件，客户喜欢购买它。所以如果硬件发布的便利性即使接近软件发布的便利性，我们会看到更多的硬件创业公司。\n这不是第一次某个东西在不是坏主意之前一直是坏主意。这也不会是第一次投资者从创始人那里学到这个教训。\n所以如果你想从事硬件工作，不要因为担心投资者会歧视你而阻止你这样做。特别是，不要因为担心而阻止你向Y Combinator申请硬件创意，因为我们对硬件创业公司特别感兴趣。\n我们知道下一个史蒂夫·乔布斯有空间。但几乎可以肯定，第一个\u0026lt;你的名字\u0026gt;也有空间。\n感谢Sam Altman、Trevor Blackwell、David Cann、Sanjay Dastoor、Paul Gerhardt、Cameron Robertson、Harj Taggar和Garry Tan阅读本文草稿。\n在\u0026quot;软件吞噬世界\u0026quot;的同时的硬件复兴？\n"
  },{
    "title": "简单写作",
    "url": "/paul_graham/essays_zh/simply/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n简单写作 2021年3月\n我尝试用普通的词汇和简单的句子写作。\n那种写作更容易阅读，而某种东西越容易阅读，读者就越会深入地参与其中。他们在你的散文上花费的精力越少，留给你的想法的精力就越多。\n而且他们会读得更远。大多数读者的精力在文章或散文的中途往往会减弱。如果阅读的摩擦力足够低，更多的人会一直读到最后。\n有一道意大利菜叫做saltimbocca，意思是\u0026quot;跳入嘴里\u0026quot;。我写作的目标可以称为saltintesta：想法跳入你的脑海，你几乎没有注意到把它们带到那里的词语。\n希望写作能成为纯粹的想法是太过分的。你甚至可能不希望它是这样。但对大多数作家来说，大多数时候，这是要瞄准的目标。大多数写作和纯粹想法之间的差距不是由诗歌填补的。\n此外，简单写作更体贴。当你用花哨的方式写作来给人留下深刻印象时，你让他们做额外的工作只是为了让你看起来很酷。这就像在你身后拖着一条长长的火车，读者必须携带。\n记住，如果你用英语写作，你的很多读者不会是母语为英语的人。他们对想法的理解可能远远领先于他们对英语的理解。所以你不能假设写一个困难的话题意味着你可以使用困难的词汇。\n当然，花哨的写作不仅掩盖想法。它也可以掩盖缺乏想法。这就是为什么有些人这样写作，以掩盖他们无话可说的事实。而简单写作让你诚实。如果你简单地说无话可说，这对每个人都是显而易见的，包括你自己。\n简单的写作也持续时间更长。未来阅读你作品的人将与今天来自其他国家阅读它的人处于非常相似的位置。文化和语言将会改变。关心这一点并不虚荣，就像木匠制造一把持久的椅子并不虚荣一样。\n确实，持久不仅仅是椅子或写作的偶然品质。这是你做好工作的标志。\n但是，虽然这些都是简单写作的真正优势，但都不是我这样做的原因。我简单写作的主要原因是，不这样做会冒犯我。当我写一个看起来太复杂的句子，或者使用不必要的智力词汇时，它对我来说并不显得花哨。它显得笨拙。\n当然，有时候你想使用复杂的句子或花哨的词汇来产生效果。但你永远不应该偶然这样做。\n我的写作最终变得简单的另一个原因是我做的方式。我快速写第一稿，然后花几天时间编辑它，试图让一切都恰到好处。很多编辑是删减，这使得简单的写作更加简单。\n",
    "description": "",
    "tags": ["写作","简洁","清晰","沟通","风格"],
    "categories": [],
    "content": "→ English Version\n简单写作 2021年3月\n我尝试用普通的词汇和简单的句子写作。\n那种写作更容易阅读，而某种东西越容易阅读，读者就越会深入地参与其中。他们在你的散文上花费的精力越少，留给你的想法的精力就越多。\n而且他们会读得更远。大多数读者的精力在文章或散文的中途往往会减弱。如果阅读的摩擦力足够低，更多的人会一直读到最后。\n有一道意大利菜叫做saltimbocca，意思是\u0026quot;跳入嘴里\u0026quot;。我写作的目标可以称为saltintesta：想法跳入你的脑海，你几乎没有注意到把它们带到那里的词语。\n希望写作能成为纯粹的想法是太过分的。你甚至可能不希望它是这样。但对大多数作家来说，大多数时候，这是要瞄准的目标。大多数写作和纯粹想法之间的差距不是由诗歌填补的。\n此外，简单写作更体贴。当你用花哨的方式写作来给人留下深刻印象时，你让他们做额外的工作只是为了让你看起来很酷。这就像在你身后拖着一条长长的火车，读者必须携带。\n记住，如果你用英语写作，你的很多读者不会是母语为英语的人。他们对想法的理解可能远远领先于他们对英语的理解。所以你不能假设写一个困难的话题意味着你可以使用困难的词汇。\n当然，花哨的写作不仅掩盖想法。它也可以掩盖缺乏想法。这就是为什么有些人这样写作，以掩盖他们无话可说的事实。而简单写作让你诚实。如果你简单地说无话可说，这对每个人都是显而易见的，包括你自己。\n简单的写作也持续时间更长。未来阅读你作品的人将与今天来自其他国家阅读它的人处于非常相似的位置。文化和语言将会改变。关心这一点并不虚荣，就像木匠制造一把持久的椅子并不虚荣一样。\n确实，持久不仅仅是椅子或写作的偶然品质。这是你做好工作的标志。\n但是，虽然这些都是简单写作的真正优势，但都不是我这样做的原因。我简单写作的主要原因是，不这样做会冒犯我。当我写一个看起来太复杂的句子，或者使用不必要的智力词汇时，它对我来说并不显得花哨。它显得笨拙。\n当然，有时候你想使用复杂的句子或花哨的词汇来产生效果。但你永远不应该偶然这样做。\n我的写作最终变得简单的另一个原因是我做的方式。我快速写第一稿，然后花几天时间编辑它，试图让一切都恰到好处。很多编辑是删减，这使得简单的写作更加简单。\n"
  },{
    "title": "简洁即力量",
    "url": "/paul_graham/essays_zh/power/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n简洁即力量 2002年5月\n\u0026ldquo;通过代数符号将大量意义压缩到一个小空间中，这是另一个有助于我们习惯性推理的因素。\u0026rdquo; - 查尔斯·巴贝奇，引自艾弗森的图灵奖演讲\n在LL1邮件列表上关于《书呆子的复仇》所提出问题的讨论中，保罗·普雷斯科德写了一些让我印象深刻的话。Python的目标是规范性和可读性，而不是简洁性。表面上看来，这对编程语言来说似乎是一个相当不利的评价。据我所知，简洁性=力量。如果是这样，那么替换后我们得到Python的目标是规范性和可读性，而不是力量。这似乎不是一个你想要做出的权衡（如果这确实是一个权衡的话）。这几乎等同于说Python的目标不是作为一种有效的编程语言。\n简洁性等于力量吗？在我看来，这是一个重要的问题，可能是对任何对语言设计感兴趣的人来说最重要的问题，直接面对这个问题会很有用。我还不确定答案是否是简单的\u0026quot;是\u0026quot;，但这似乎是一个很好的开始假设。\n假设 我的假设是简洁性就是力量，或者足够接近，除了在病态的例子中，你可以将它们视为相同。\n在我看来，简洁性就是编程语言的意义所在。计算机对于直接用机器语言被告知要做什么同样满意。我认为我们开发高级语言的主要原因是获得杠杆作用，这样我们就可以用高级语言的10行代码来表达（更重要的是思考）需要1000行机器语言才能完成的事情。换句话说，高级语言的主要目的是使源代码更小。\n如果更小的源代码是高级语言的目的，而某种东西的力量是它实现其目的的程度，那么编程语言力量的衡量标准就是它使你的程序变得多小。\n相反，不能使你的程序更小的语言在编程语言应该做的事情上做得不好，就像一把不好切的刀或难以辨认的印刷品。\n衡量标准 但是从什么意义上来说更小呢？代码大小最常见的衡量标准是代码行数。但我认为这个衡量标准最常见是因为它最容易测量。我不认为有人真正相信它是程序长度的真正测试。不同的语言对于在一行中放多少内容有不同的约定；在C语言中，很多行只有一个或两个分隔符。\n另一个简单的测试是程序中的字符数，但这也不是很好；一些语言（例如Perl）只是使用比其他语言更短的标识符。\n我认为程序大小的更好衡量标准是元素的数量，其中元素是如果你画一个表示源代码的树，会成为不同节点的任何东西。变量或函数的名称是一个元素；整数或浮点数是一个元素；一段字面文本是一个元素；模式元素或格式指令是一个元素；新块是一个元素。有一些边界情况（-5是两个元素还是一个？）但我认为大多数情况对每种语言都是相同的，所以它们不会对比较产生太大影响。\n这个衡量标准需要充实，在特定语言的情况下可能需要解释，但我认为它试图衡量正确的东西，即程序拥有的部分数量。我认为在这个练习中你会画的树就是你为了构思程序而必须在头脑中构建的东西，它的大小与你必须做的工作量成正比，无论是写还是读。\n设计 这种衡量标准可以让我们比较不同的语言，但至少对我而言，这不是它的主要价值。简洁性测试的主要价值是作为设计语言的指导。语言之间最有用的比较是同一种语言的两个潜在变体之间的比较。我能在语言中做什么来使程序更短？\n如果程序的概念负荷与其复杂性成正比，而给定的程序员可以容忍固定的概念负荷，那么这与问\u0026quot;我能做什么来让程序员完成最多工作？\u0026ldquo;是相同的。这在我看来与问\u0026quot;我如何设计一种好的语言？\u0026ldquo;是相同的。\n（顺便说一句，没有什么比设计语言更能明显地证明\u0026quot;所有语言都是等价的\u0026quot;这个老生常谈是错误的了。当你设计一种新语言时，你不断地比较两种语言——如果我做了x的语言，如果我没做x的语言——来决定哪个更好。如果这真是一个无意义的问题，你不妨抛硬币。）\n以简洁性为目标似乎是寻找新想法的好方法。如果你能做一些让许多不同程序更短的事情，这可能不是巧合：你可能发现了一个有用的新抽象。你甚至可以编写一个程序来帮助搜索源代码中的重复模式。在其他语言中，那些以简洁性著称的语言是寻找新想法的地方：Forth、Joy、Icon。\n比较 据我所知，第一个写这些相关文章的人是弗雷德·布鲁克斯在《人月神话》中。他写道，无论使用什么语言，程序员每天似乎生成大致相同数量的代码。我在二十出头第一次读到这个时，这是一个很大的惊喜，似乎有巨大的含义。这意味着（a）让软件写得更快的方法是使用更简洁的语言，（b）花功夫这样做的人可以把不这样做的竞争对手远远甩在后面。\n布鲁克斯的假设，如果它是真的，似乎处于黑客精神的核心。从那以后的几年里，我密切关注我能得到的关于这个问题的任何证据，从正式研究到个人项目的轶事。我没有看到任何与他相矛盾的证据。\n我还没有看到我认为决定性的证据，我也不期望看到。像卢茨·普雷克特尔对编程语言的比较这样的研究，虽然产生了我期望的那种结果，但往往使用太短的问题，无法成为有意义的测试。语言的更好测试是在需要一个月编写的程序中发生什么。而真正的测试，如果你像我一样相信语言的主要目的是为了便于思考（而不仅仅是在你思考完后告诉计算机要做什么），是你能用它写出什么新东西。所以任何需要满足预定义规范的语言比较都在测试稍微错误的东西。\n语言的真正测试是你发现和解决新问题的能力，而不是你用它解决别人已经制定的问题的能力。这是两个完全不同的标准。在艺术中，像刺绣和马赛克这样的媒介，如果你事先知道你想制作什么，效果很好，但如果你不知道，就绝对糟糕。当你想在制作过程中发现图像时——就像你必须处理像人物图像这样复杂的东西一样——你需要使用更流动的媒介，如铅笔、水墨或油画。实际上，挂毯和马赛克的制作方式是先制作一幅画，然后复制它。（\u0026ldquo;卡通\u0026quot;这个词最初用来描述用于这个目的的画。）\n这意味着我们永远不可能对编程语言的相对力量有准确的比较。我们会有精确的比较，但不会有准确的比较。特别是，为了比较语言而进行的明确研究，因为它们可能会使用小问题，并且必须使用预定义的问题，往往会低估更强大语言的力量。\n来自现场的报告，虽然它们必然不如\u0026quot;科学\u0026quot;研究精确，但可能更有意义。例如，爱立信的乌尔夫·维格进行了一项研究，结论是Erlang比C++简洁4-10倍，开发软件的速度也相应更快：爱立信内部开发项目之间的比较表明，包括软件开发的所有阶段在内的每行/小时生产力相似，几乎与使用的语言（Erlang、PLEX、C、C++或Java）无关。区分不同语言的成为源代码量。该研究还明确处理了布鲁克斯书中只是隐含的一点（因为他测量的是调试代码的行数）：用更强大语言编写的程序往往有更少的错误。这本身就成为一个目的，在网络交换机等应用中，可能比程序员的生产力更重要。\n味道测试 最终，我认为你必须凭直觉行事。用这种语言编程感觉如何？我认为找到（或设计）最好语言的方法是对语言让你思考的出色程度变得高度敏感，然后选择/设计感觉最好的语言。如果某些语言功能笨拙或限制性，别担心，你会知道的。\n这种高度敏感是有代价的。你会发现你无法忍受在笨拙的语言中编程。我觉得在没有宏的语言中编程是无法忍受的限制性，就像习惯动态类型的人发现必须回到必须声明每个变量类型、不能制作不同类型对象列表的语言中编程是无法忍受的限制性一样。我不是唯一一个这样的人。我知道许多Lisp黑客都经历过这种情况。事实上，编程语言相对力量的最准确衡量标准可能是了解该语言的人愿意接受任何使用该语言的工作的百分比，不管应用领域如何。\n限制性 我认为大多数黑客都知道语言感觉限制性是什么意思。当你有这种感觉时发生了什么？我认为这与当你想走的街道被封锁，你必须绕很长的路才能到达你想去的地方时的感觉相同。你有想说的话，但语言不允许你说。\n这里真正发生的事情，我认为，是限制性语言是一种不够简洁的语言。问题不仅仅是你不能说你计划说的话。而是语言让你绕的弯路更长。试试这个思维实验。假设你想写某个程序，语言不允许你按计划的方式表达它，而是强迫你用某种更短的方式写程序。至少对我来说，这不会感觉很有限制性。这就像你想走的街道被封锁，十字路口的警察给你指了一条捷径而不是绕路。太好了！\n我认为限制性的感觉大部分（百分之九十？）来自于被迫使你在语言中写的程序比你头脑中的更长。限制性主要是缺乏简洁性。所以当一种语言感觉有限制性时，这（大部分）意味着它不够简洁，而当一种语言不够简洁时，它会感觉有限制性。\n可读性 我开始引用的引言提到了另外两个品质，规范性和可读性。我不确定性规范性是什么，或者规范和可读的代码比仅仅可读的代码有什么优势，如果有的话。但我想我知道可读性是什么意思，我认为它也与简洁性有关。\n我们必须小心区分单行代码的可读性和整个程序的可读性。重要的是后者。我同意Basic的一行代码可能比Lisp的一行代码更易读。但用Basic编写的程序行数会比用Lisp编写的相同程序多（特别是当你进入格林斯彭之地时）。阅读Basic程序的总工作量肯定会更大。总工作量 = 每行工作量 × 行数\n我不像确信力量与简洁性成正比那样确信可读性与简洁性成正比，但简洁性肯定是可读性的一个因素（在数学意义上；见上面的公式）。所以，说语言的目标是可读性而不是简洁性可能甚至没有意义；这就像说目标是可读性，而不是可读性。\n每行可读性对第一次遇到语言的用户来说，意味着源代码看起来不具威胁性。所以每行可读性可能是一个好的营销决策，即使它是一个糟糕的设计决策。它与让人们分期付款的非常成功的技术同构：不是用高昂的前期价格吓唬他们，而是告诉他们低月付款。分期付款对买方来说是净亏损，而每行可读性对程序员来说可能也是如此。买方将进行很多很多低月付款；而程序员将阅读很多很多单独可读的行。\n这种权衡比编程语言更早。如果你习惯于阅读小说和报纸文章，你第一次阅读数学论文的经历可能会令人沮丧。阅读一页可能需要半小时。然而，我很确定符号不是问题，尽管感觉上可能是。数学论文难读是因为思想难。如果你用散文表达相同的思想（正如数学家在发展出简洁的符号之前必须做的那样），它们不会更容易读，因为论文会增长到一本书的大小。\n到什么程度？ 许多人拒绝了简洁性=力量的想法。我认为与其简单地争论它们相同或不同，不如问：简洁性在多大程度上等于力量？因为很明显，简洁性是高级语言重要目的的大部分。如果不是全部，那么它们还有什么其他目的，相对而言，这些其他功能有多重要？\n我提出这个不仅仅是为了让辩论更加文明。我真的想知道答案。如果有的话，语言什么时候会因为过于简洁而对自己不利？\n我开始的假设是，除了在病态的例子中，我认为简洁性可以被视为等同于力量。我的意思是，在任何任何人会设计的语言中，它们都是相同的，但如果有人想要设计一种语言来明确反驳这个假设，他们可能能够做到。实际上，我甚至不确定这一点。\n语言，而不是程序 我们应该清楚我们讨论的是语言的简洁性，而不是单个程序的简洁性。单个程序当然可能写得太密集。\n我在《On Lisp》中写过这个。一个复杂的宏可能需要节省自身长度的许多倍才能证明其合理性。如果编写某个复杂的宏每次使用都能为你节省十行代码，而宏本身是十行代码，那么如果你使用超过一次，你就会在行数上获得净节省。但这可能仍然是一个坏举动，因为宏定义比普通代码更难读。你可能需要使用宏十次或二十次才能在可读性上获得净改善。\n我确信每种语言都有这样的权衡（虽然我怀疑随着语言变得更强大，赌注会更高）。每个程序员肯定都见过一些聪明人使用可疑的编程技巧使代码略微缩短的例子。\n所以对此没有争论——至少，不是我争论。单个程序当然可能因为过于简洁而对自己不利。问题是，语言会吗？语言能强迫程序员编写在元素上很短但以整体可读性为代价的代码吗？\n很难想象语言过于简洁的一个原因是，如果有一些过于紧凑的方式来表达某些东西，可能也会有更长的表达方式。例如，如果你觉得使用大量宏或高阶函数的Lisp程序太密集，如果你愿意，你可以编写与Pascal同构的代码。如果你不想在Arc中将对高阶函数的调用表示为阶乘（rec zero 1 * 1-），你也可以写出递归定义：(rfn fact (x) (if (zero x) 1 (* x (fact (1- x)))))\n",
    "description": "",
    "tags": ["编程","语言设计","简洁性","软件开发"],
    "categories": [],
    "content": "→ English Version\n简洁即力量 2002年5月\n\u0026ldquo;通过代数符号将大量意义压缩到一个小空间中，这是另一个有助于我们习惯性推理的因素。\u0026rdquo; - 查尔斯·巴贝奇，引自艾弗森的图灵奖演讲\n在LL1邮件列表上关于《书呆子的复仇》所提出问题的讨论中，保罗·普雷斯科德写了一些让我印象深刻的话。Python的目标是规范性和可读性，而不是简洁性。表面上看来，这对编程语言来说似乎是一个相当不利的评价。据我所知，简洁性=力量。如果是这样，那么替换后我们得到Python的目标是规范性和可读性，而不是力量。这似乎不是一个你想要做出的权衡（如果这确实是一个权衡的话）。这几乎等同于说Python的目标不是作为一种有效的编程语言。\n简洁性等于力量吗？在我看来，这是一个重要的问题，可能是对任何对语言设计感兴趣的人来说最重要的问题，直接面对这个问题会很有用。我还不确定答案是否是简单的\u0026quot;是\u0026quot;，但这似乎是一个很好的开始假设。\n假设 我的假设是简洁性就是力量，或者足够接近，除了在病态的例子中，你可以将它们视为相同。\n在我看来，简洁性就是编程语言的意义所在。计算机对于直接用机器语言被告知要做什么同样满意。我认为我们开发高级语言的主要原因是获得杠杆作用，这样我们就可以用高级语言的10行代码来表达（更重要的是思考）需要1000行机器语言才能完成的事情。换句话说，高级语言的主要目的是使源代码更小。\n如果更小的源代码是高级语言的目的，而某种东西的力量是它实现其目的的程度，那么编程语言力量的衡量标准就是它使你的程序变得多小。\n相反，不能使你的程序更小的语言在编程语言应该做的事情上做得不好，就像一把不好切的刀或难以辨认的印刷品。\n衡量标准 但是从什么意义上来说更小呢？代码大小最常见的衡量标准是代码行数。但我认为这个衡量标准最常见是因为它最容易测量。我不认为有人真正相信它是程序长度的真正测试。不同的语言对于在一行中放多少内容有不同的约定；在C语言中，很多行只有一个或两个分隔符。\n另一个简单的测试是程序中的字符数，但这也不是很好；一些语言（例如Perl）只是使用比其他语言更短的标识符。\n我认为程序大小的更好衡量标准是元素的数量，其中元素是如果你画一个表示源代码的树，会成为不同节点的任何东西。变量或函数的名称是一个元素；整数或浮点数是一个元素；一段字面文本是一个元素；模式元素或格式指令是一个元素；新块是一个元素。有一些边界情况（-5是两个元素还是一个？）但我认为大多数情况对每种语言都是相同的，所以它们不会对比较产生太大影响。\n这个衡量标准需要充实，在特定语言的情况下可能需要解释，但我认为它试图衡量正确的东西，即程序拥有的部分数量。我认为在这个练习中你会画的树就是你为了构思程序而必须在头脑中构建的东西，它的大小与你必须做的工作量成正比，无论是写还是读。\n设计 这种衡量标准可以让我们比较不同的语言，但至少对我而言，这不是它的主要价值。简洁性测试的主要价值是作为设计语言的指导。语言之间最有用的比较是同一种语言的两个潜在变体之间的比较。我能在语言中做什么来使程序更短？\n如果程序的概念负荷与其复杂性成正比，而给定的程序员可以容忍固定的概念负荷，那么这与问\u0026quot;我能做什么来让程序员完成最多工作？\u0026ldquo;是相同的。这在我看来与问\u0026quot;我如何设计一种好的语言？\u0026ldquo;是相同的。\n（顺便说一句，没有什么比设计语言更能明显地证明\u0026quot;所有语言都是等价的\u0026quot;这个老生常谈是错误的了。当你设计一种新语言时，你不断地比较两种语言——如果我做了x的语言，如果我没做x的语言——来决定哪个更好。如果这真是一个无意义的问题，你不妨抛硬币。）\n以简洁性为目标似乎是寻找新想法的好方法。如果你能做一些让许多不同程序更短的事情，这可能不是巧合：你可能发现了一个有用的新抽象。你甚至可以编写一个程序来帮助搜索源代码中的重复模式。在其他语言中，那些以简洁性著称的语言是寻找新想法的地方：Forth、Joy、Icon。\n比较 据我所知，第一个写这些相关文章的人是弗雷德·布鲁克斯在《人月神话》中。他写道，无论使用什么语言，程序员每天似乎生成大致相同数量的代码。我在二十出头第一次读到这个时，这是一个很大的惊喜，似乎有巨大的含义。这意味着（a）让软件写得更快的方法是使用更简洁的语言，（b）花功夫这样做的人可以把不这样做的竞争对手远远甩在后面。\n布鲁克斯的假设，如果它是真的，似乎处于黑客精神的核心。从那以后的几年里，我密切关注我能得到的关于这个问题的任何证据，从正式研究到个人项目的轶事。我没有看到任何与他相矛盾的证据。\n我还没有看到我认为决定性的证据，我也不期望看到。像卢茨·普雷克特尔对编程语言的比较这样的研究，虽然产生了我期望的那种结果，但往往使用太短 …"
  },{
    "title": "精通",
    "url": "/paul_graham/essays_zh/ace/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n精通 精通 2020年12月\n当我决定接下来要写什么时，我惊讶地发现我计划写的两篇独立的文章实际上是同一篇。\n第一篇是关于如何在Y Combinator面试中表现出色。关于这个话题已经写了太多废话，我多年来一直想写点东西告诉创始人真相。\n第二篇是关于政客们有时说的一句话——成为亿万富翁的唯一方法就是剥削人——以及为什么这是错误的。\n继续读下去，你会同时学到这两点。\n我知道政客们是错的，因为我的工作就是预测哪些人会成为亿万富翁。我想我可以诚实地说，我对此的了解不亚于任何人。如果成为亿万富翁的关键——亿万富翁的定义特征——是剥削人，那么我作为一个专业的亿万富翁探员，肯定会意识到这一点，并寻找擅长此道的人，就像NFL探员在接球手中寻找速度一样。\n但是剥削人的能力根本不是Y Combinator所寻找的。事实上，这与他们寻找的相反。我会告诉你他们到底寻找什么，通过解释如何说服Y Combinator资助你，你可以亲眼看看。\nYC最重要的寻找的是了解某些用户群体并能制造他们想要的东西的创始人。这一点如此重要，以至于它是YC的座右铭：\u0026ldquo;制造人们想要的东西。\u0026rdquo;\n大公司可以在某种程度上向不愿意的客户强行推销不合适的产品，但创业公司没有这种能力。创业公司必须通过制造真正让客户满意的东西来谋生。否则它永远无法起步。\n事情在这里变得困难，无论对你作为创始人还是对试图决定是否资助你的YC合伙人来说都是如此。在市场经济中，制造人们想要但还没有的东西是困难的。这就是市场经济的伟大之处。如果其他人既知道这种需求又能够满足它，他们早就会去做了，你的创业公司就没有空间了。\n这意味着你在YC面试中的谈话必须是关于新事物的：要么是新需求，要么是满足需求的新方法。而且不仅仅是新的，还是不确定的。如果确定存在需求并且你能够满足它，这种确定性将反映在庞大且快速增长的收入中，你就不会寻求种子资金了。\n所以YC合伙人必须猜测你是否发现了真正的需求，以及你是否能够满足它。这就是他们在这个工作中的角色：专业的猜测者。他们有1001种启发式方法来做这件事，我不会告诉你所有方法，但我很乐意告诉你最重要的，因为这些无法伪造；\u0026ldquo;破解\u0026quot;它们的唯一方法是做你作为创始人应该做的事情。\n合伙人首先要弄清楚的通常是，你正在制造的东西是否会成为很多人想要的东西。它不一定是现在很多人想要的东西。产品和市场都会发展，并相互影响。但最终必须有巨大的市场。这就是合伙人试图弄清楚的：是否有通往巨大市场的路径？[1]\n有时很明显会有巨大市场。如果Boom能够成功制造出客机，国际航空公司将不得不购买它。但通常并不明显。通往巨大市场的道路通常是通过增长一个小市场。这个想法足够重要，值得为此创造一个术语，所以让我们称这些小但可增长的市场为\u0026quot;幼虫市场\u0026rdquo;。\n幼虫市场的完美例子可能是1976年苹果成立时的市场。1976年，没有多少人想要自己的电脑。但越来越多的人开始想要一个，直到现在地球上每个10岁的孩子都想要一台电脑（但称之为\u0026quot;手机\u0026quot;）。\n理想的组合是那些\u0026quot;生活在未来\u0026quot;的创始人群体，从某种变化的领先边缘意义上来说，并且正在建造他们自己想要的东西。大多数超级成功的创业公司都是这种类型。史蒂夫·沃兹尼亚克想要一台电脑。马克·扎克伯格想与他的大学朋友在线互动。拉里和谢尔盖想在网上找到东西。所有这些创始人都在制造他们和同伴想要的东西，而且他们处于变革领先边缘的事实意味着将来会有更多人想要这些东西。\n但虽然理想的幼虫市场是自己和同伴，但这不是唯一类型。幼虫市场也可能是区域性的，例如。你建造一些东西来服务一个地点，然后扩展到其他地方。\n初始市场的关键特征是它存在。这似乎是一个显而易见的点，但缺乏它是大多数创业想法的最大缺陷。必须有一些人现在就想要你正在建造的东西，如此迫切以至于他们愿意使用它，即使有错误，尽管你是一家他们从未听说过的小公司。不需要很多人，但必须有一些。只要你有一些用户，就有直接的方法获得更多：构建他们想要的新功能，寻找更多像他们一样的人，让他们把你推荐给朋友，等等。但这些技术都需要一些初始的用户群体。\n所以这是YC合伙人在面试中几乎肯定会深入探讨的一点。你的第一批用户会是谁，你怎么知道他们想要这个？如果我必须根据单个问题决定是否资助创业公司，那就是\u0026quot;你怎么知道人们想要这个？\u0026quot;\n最有说服力的回答是\u0026quot;因为我和我的朋友想要它。\u0026ldquo;当后面跟着你已经建立了一个原型的消息时更好，尽管它很粗糙，你的朋友正在使用它，而且它正在通过口碑传播。如果你能这样说并且没有撒谎，合伙人会从默认拒绝转向默认接受。意思是除非有一些其他不合格的缺陷，否则你就被录取了。\n然而，这是一个很难达到的标准。Airbnb没有达到。他们有第一部分。他们制造了自己想要的东西。但它没有传播。所以如果你没有达到这个令人信服的黄金标准，不要感到难过。如果Airbnb没有达到，那肯定太高了。\n在实践中，如果YC合伙人觉得你对用户需求有深刻的理解，他们会满意的。Airbnb确实做到了这一点。他们能够告诉我们所有关于主人和客人的动机。他们从第一手经验中知道，因为他们是第一批主人。我们问不出他们不知道答案的问题。我们自己作为用户对这个想法并不很兴奋，但我们知道这并不能证明什么，因为有很多成功的创业公司我们作为用户并不兴奋。我们能够对自己说：\u0026ldquo;他们似乎知道自己在说什么。也许他们发现了什么。它还没有增长，但也许他们能够在YC期间弄清楚如何让它增长。\u0026ldquo;他们确实做到了，大约在批次开始三周后。\n在YC面试中你能做的最好的事情就是教合伙人了解你的用户。所以如果你想为面试做准备，最好的方法之一就是去和你的用户交谈，确切地了解他们在想什么。这本来就是你应该做的事情。\n这听起来可能奇怪地轻信，但YC合伙人想依靠创始人告诉他们关于市场的事情。想想VC通常如何判断一个想法的潜在市场。他们自己通常不是领域专家，所以他们把这个想法转发给专家，征求他们的意见。YC没有时间这样做，但如果YC合伙人能够说服自己创始人既（a）知道自己在说什么又（b）没有撒谎，他们就不需要外部领域专家。他们在评估自己的想法时可以利用创始人自己作为领域专家。\n这就是为什么YC面试不是推销。为了让尽可能多的创始人有机会获得资助，我们把面试尽可能缩短：10分钟。合伙人没有足够的时间通过推销中的间接证据来弄清楚你是否知道自己在说什么并且没有撒谎。他们需要深入并问你问题。没有时间进行顺序访问。他们需要随机访问。[2]\n我听过的关于如何在YC面试中成功的最糟糕的建议是，你应该控制面试并确保传达你想要的信息。换句话说，把面试变成推销。〈详细的粗话〉。当人们试图这样做时真的很烦人。你问他们一个问题，他们不回答，而是传达一些明显是预先准备好的推销块。它很快就会吃掉10分钟。\n除了现任或前任YC合伙人，没有人能给你关于在YC面试中该做什么的准确建议。仅仅被面试过的人，即使成功了，也不知道这一点，但面试根据合伙人最想知道的事情采取各种不同的形式。有时完全是关于创始人的，有时完全是关于想法的。有时是想法的某个非常狭窄的方面。创始人有时离开面试时抱怨他们没有完全解释他们的想法。是的，但他们解释得足够了。\n由于YC面试由问题组成，做好它的方法就是很好地回答它们。其中一部分是坦率地回答它们。合伙人不期望你知道一切。但如果你不知道问题的答案，不要试图胡扯过关。合伙人像大多数经验丰富的投资者一样，是专业的胡扯探测器，而你（希望）是业余的胡扯者。如果你试图胡扯他们并失败，他们甚至可能不会告诉你你失败了。所以诚实比试图说服他们更好。如果你不知道问题的答案，说你不知道，告诉他们你会如何去找，或者告诉他们一些相关问题的答案。\n例如，如果你被问及什么可能出错，最糟糕的答案是\u0026quot;没有什么。\u0026ldquo;这不会让他们相信你的想法是无懈可击的，而是会让他们相信你是个傻瓜或骗子。最好详细说明可怕的细节。当你问什么可能出错时，专家就是这样做的。合伙人知道你的想法是有风险的。这就是在这个阶段一个好赌注的样子：巨大结果的微小概率。\n如果他们问竞争对手也是如此。竞争对手很少是杀死创业公司的原因。执行不力才是。但你应该知道你的竞争对手是谁，坦率地告诉YC合伙人你的相对优势和劣势。因为YC合伙人知道竞争对手不会杀死创业公司，他们不会因为竞争对手而对你太不利。然而，如果你似乎不知道竞争对手，或者最小化他们构成的威胁，他们会对你不利。他们可能不确定你是无知还是撒谎，但他们不需要确定。\n合伙人不期望你的想法是完美的。这是种子投资。在这个阶段，他们只能期望有希望的假设。但他们确实期望你深思熟虑和诚实。所以如果试图让你的想法显得完美让你显得油嘴滑舌或无知，你就为了不需要的东西牺牲了需要的东西。\n如果合伙人充分相信有通往大市场的路径，下一个问题是你是否能够找到它。这又取决于三件事：创始人的总体素质，他们在这个领域的专业知识，以及他们之间的关系。创始人有多坚定？他们擅长建造东西吗？他们是否足够坚韧，在出问题时继续前进？他们的友谊有多牢固？\n虽然Airbnb在想法方面只做得还行，但在这个方面做得非常出色。他们通过制造奥巴马和麦凯恩主题的早餐麦片为自己融资的故事是我们决定资助他们的最重要因素。当时他们没有意识到，但对他们来说似乎无关紧要的故事实际上是证明他们作为创始人素质的极好证据。这表明他们足智多谋、坚定，并且能够一起工作。\n不过，不仅仅是麦片故事显示了这一点。整个面试表明他们在乎。他们这样做不仅仅是为了钱，也不是因为创业公司很酷。他们如此努力在这家公司工作的原因是因为这是他们的项目。他们发现了一个有趣的新想法，就是无法放手。\n这听起来很平凡，但这是最强大的动力，不仅在创业公司中，而且在大多数雄心勃勃的事业中：对你正在建造的东西真正感兴趣。这才是真正驱动亿万富翁的，或者至少是通过创业成为亿万富翁的那些人。公司是他们的项目。\n关于亿万富翁，很少有人意识到的一点是，他们所有人本可以更早停止。他们可以被收购，或者找到其他人来运营公司。许多创始人确实这样做了。那些变得真正富有的是那些继续工作的人。让他们继续工作的不仅仅是钱。让他们继续工作的原因与任何其他人在如果愿意就可以停止时仍然工作的原因相同：没有其他他们更愿意做的事情。\n这才是成为亿万富翁的人的定义特征，而不是剥削人。所以这就是YC在创始人中寻找的：真实性。人们创办创业公司的动机通常是混合的。他们通常这样做是出于赚钱的欲望、想要看起来很酷、对问题真正感兴趣以及不愿意为别人工作的一些组合。后两者比前两者是更强大的动力。创始人想要赚钱或看起来很酷是可以的。大多数人都这样。但如果创始人似乎这样做只是为了赚钱或看起来很酷，他们不太可能在大规模上成功。为了钱而做的创始人会接受第一个足够大的收购要约，而为了看起来很酷而做的创始人会很快发现有很多不那么痛苦的方式看起来很酷。[3]\nY Combinator确实看到那些行事方式是剥削人的创始人。YC对他们来说是磁铁，因为他们想要YC品牌。但当YC合伙人发现这样的人时，他们会拒绝他们。如果坏人能成为好的创始人，YC合伙人将面临道德困境。幸运的是他们不会，因为坏人成为不好的创始人。这种剥削类型的创始人不会大规模成功，实际上甚至可能小规模也不成功，因为他们总是走捷径。他们认为YC本身就是一个捷径。\n他们的剥削通常从自己的联合创始人开始，这是灾难性的，因为联合创始人的关系是公司的基础。然后转移到用户身上，这也是灾难性的，因为成功的创业公司想要作为初始用户的早期采用者是最难愚弄的。这种创始人最好希望欺骗的大厦能摇摇晃晃地维持下去，直到某个收购者被欺骗购买它。但这种收购永远不会很大。[4]\n如果专业的亿万富翁探员知道剥削人不是要寻找的技能，为什么一些政客认为这是亿万富翁的定义特征？\n我认为他们从一种感觉开始，即一个人拥有比另一个人多得多的钱是错误的。这种感觉从何而来是可以理解的。它在我们的DNA中，甚至在其他物种的DNA中。\n如果他们只是说当一个人拥有比其他人多得多的钱时让他们感觉不好，谁会不同意呢？这让我也感觉不好，我认为赚很多钱的人有道义责任用它来造福公共利益。他们犯的错误是从感觉一些其他人比其他人富有得多跳到结论认为没有合法的方法赚非常多的钱。现在我们进入了不仅可证伪而且是错误的陈述。\n当然有一些人通过做坏事变得富有。但也有很多行为不良的人并没有从中赚那么多钱。你的行为有多恶劣和你赚多少钱之间没有相关性——事实上，可能是负相关。\n这种废话的最大危险可能甚至不是它使政策偏离方向，而是它误导了雄心勃勃的人。你能想象破坏社会流动性的更好方法吗？告诉贫困孩子致富的方法是剥削人，而富有的孩子从看着前一代人做中知道它是如何真正完成的。\n我会告诉你它是如何真正完成的，所以你至少可以告诉你的孩子真相。一切都是关于用户的。成为亿万富翁最可靠的方法是创办一家快速发展的公司，而快速发展的方法是制造用户想要的东西。新成立的创业公司别无选择，只能让用户满意，否则它们甚至无法起步。但这永远不会停止成为指引星，更大的公司忽视它会危及自身。停止让用户满意，最终其他人会这样做。\nYC面试中合伙人想知道的是关于用户的事情，当我和我们十年前资助的现在是亿万富翁的创始人交谈时我想知道的也是关于用户的事情。用户想要什么？你能为他们建造什么新东西？成为亿万富翁的创始人总是渴望谈论这个话题。这就是他们成为亿万富翁的方式。\n注释 [1] YC合伙人在这方面有如此多的实践，他们有时能看到创始人自己还没有看到的路径。合伙人不试图显得怀疑，就像交易中的买家经常做的那样以增加他们的杠杆作用。虽然创始人觉得他们的工作是说服合伙人他们想法的潜力，但这些角色并不经常颠倒，创始人离开面试时觉得他们的想法比他们意识到的有更多潜力。\n[2] 实际上，7分钟就足够了。你很少在第8分钟改变主意。但10分钟在社会上很方便。\n[3] 我自己在第一次创业公司中接受了第一个足够大的收购要约，所以我不责怪创始人这样做。为了赚钱而创办创业公司没有错。你需要以某种方式赚钱，对某些人来说创业公司是最有效的方法。我只是说这些不是真正变得很大的创业公司。\n[4] 无论如何，现在不是。互联网泡沫期间有一些大的，确实也有一些大的IPO。\n感谢特雷弗·布莱克威尔、杰西卡·利文斯顿、罗伯特·莫里斯、杰夫·拉尔斯顿和哈尔吉·塔加阅读本文的草稿。\n",
    "description": "",
    "tags": ["创业","yc","面试","亿万富翁","创始人","用户"],
    "categories": [],
    "content": "→ English Version\n精通 精通 2020年12月\n当我决定接下来要写什么时，我惊讶地发现我计划写的两篇独立的文章实际上是同一篇。\n第一篇是关于如何在Y Combinator面试中表现出色。关于这个话题已经写了太多废话，我多年来一直想写点东西告诉创始人真相。\n第二篇是关于政客们有时说的一句话——成为亿万富翁的唯一方法就是剥削人——以及为什么这是错误的。\n继续读下去，你会同时学到这两点。\n我知道政客们是错的，因为我的工作就是预测哪些人会成为亿万富翁。我想我可以诚实地说，我对此的了解不亚于任何人。如果成为亿万富翁的关键——亿万富翁的定义特征——是剥削人，那么我作为一个专业的亿万富翁探员，肯定会意识到这一点，并寻找擅长此道的人，就像NFL探员在接球手中寻找速度一样。\n但是剥削人的能力根本不是Y Combinator所寻找的。事实上，这与他们寻找的相反。我会告诉你他们到底寻找什么，通过解释如何说服Y Combinator资助你，你可以亲眼看看。\nYC最重要的寻找的是了解某些用户群体并能制造他们想要的东西的创始人。这一点如此重要，以至于它是YC的座右铭：\u0026ldquo;制造人们想要的东西。\u0026rdquo;\n大公司可以在某种程度上向不愿意的客户强行推销不合适的产品，但创业公司没有这种能力。创业公司必须通过制造真正让客户满意的东西来谋生。否则它永远无法起步。\n事情在这里变得困难，无论对你作为创始人还是对试图决定是否资助你的YC合伙人来说都是如此。在市场经济中，制造人们想要但还没有的东西是困难的。这就是市场经济的伟大之处。如果其他人既知道这种需求又能够满足它，他们早就会去做了，你的创业公司就没有空间了。\n这意味着你在YC面试中的谈话必须是关于新事物的：要么是新需求，要么是满足需求的新方法。而且不仅仅是新的，还是不确定的。如果确定存在需求并且你能够满足它，这种确定性将反映在庞大且快速增长的收入中，你就不会寻求种子资金了。\n所以YC合伙人必须猜测你是否发现了真正的需求，以及你是否能够满足它。这就是他们在这个工作中的角色：专业的猜测者。他们有1001种启发式方法来做这件事，我不会告诉你所有方法，但我很乐意告诉你最重要的，因为这些无法伪造；\u0026ldquo;破解\u0026quot;它们的唯一方法是做你作为创始人应该做的事情。\n合伙人首先要弄清楚的通常是，你正在制造的东西是否会成为很多人想要的东西。它不一定是现在很多人想要的东西。产品和市场都会发展，并相互影响。但最终必须有巨大的市场。这就是合伙人试图弄清楚的：是否有通往巨大市场的路径？[1]\n有时很明显会有巨大市场。如果Boom能够成功制造出客机，国际航空公司将不得不购买它。但通常并不明显。通往巨大市场的道路通常是通过增长一个小市场。这个想法足够重要，值得为此创造一个术语，所以让我们称这些小但可增长的市场为\u0026quot;幼虫市场\u0026rdquo;。\n幼虫市场的完美例子可能是1976年苹果成立时的市场。1976年，没有多少人想要自己的电脑。但越来越多的人开始想要一个，直到现在地球上每个10岁的孩子都想要一台电脑（但称之为\u0026quot;手机\u0026quot;）。\n理想的组合是那些\u0026quot;生活在未来\u0026quot;的创始人群体，从某种变化的领先边缘意义上来说，并且正在建造他们自己想要的东西。大多数超级成功的创业公司都是这种类型。史蒂夫·沃兹尼亚克想要一台电脑。马克·扎克伯格想与他的大学朋友在线互动。拉里和谢尔盖想在网上找到东西。所有这些创始人都在制造他们和同伴想要的东西，而且他们处于变革领先边缘的事实意味着将来会有更多人想要这些东西。\n但虽然理想的幼虫市场是自己和同伴，但这不是唯一类型。幼虫市场也可能是区域性的，例如。你建造一些东西来服务一个地点，然后扩展到其他地方。\n初始市场的关键特征是它存在。这似乎是一个显而易见的点，但缺乏它是大多数创业想法的最大缺陷。必须有一些人现在就想要你正在建造的东西，如此迫切以至于他们愿意使用它，即使有错误，尽管你是一家他们从未听说过的小公司。不需要很多人，但必须有一些。只要你有一些用户，就有直接的方法获得更多：构建他们想要的新功能，寻找更多像他们一样的人，让他们把你推荐给朋友，等等。但这些技术都需要一些初始的用户群体。\n所以这是YC合伙人在面试中几乎肯定会深入探讨的一点。你的第一批用户会是谁，你怎么知道他们想要这个？如果我必须根据单个问题决定是否资助创业公司，那就是\u0026quot;你怎么知道人们想要这个？\u0026quot;\n最有说服力的回答是\u0026quot;因为我和我的朋友想要它。\u0026ldquo;当后面跟着你已经建立了一个原型的消息时更好，尽管它很粗糙，你的朋友正在使用它，而且它正在通过口碑传播。如果你能这样说并且没有撒谎，合伙人会从默认拒绝转向默认接受。意思是除非有一些其他不合格的缺陷，否则你就被录取了。 …"
  },{
    "title": "经济不平等",
    "url": "/paul_graham/essays_zh/ineq/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n经济不平等 2016年1月\n自1970年代以来，美国的经济不平等急剧增加。特别是，富人变得富裕得多。几乎所有写这个话题的人都说经济不平等应该减少。\n我对这个问题感兴趣是因为我是一个名为Y Combinator的公司的创始人之一，该公司帮助人们创办创业公司。几乎根据定义，如果一个创业公司成功，其创始人就会变得富有。这意味着通过帮助创业公司创始人，我一直在帮助增加经济不平等。如果经济不平等应该减少，我就不应该帮助创始人。没有人应该。\n但这听起来不对。这里发生了什么？这里发生的是，虽然经济不平等是一个单一指标（或者更确切地说，是两个：收入变化和财富变化），但它有多种原因。其中许多原因是坏的，比如税收漏洞和药物成瘾。但有些是好的，比如拉里·佩奇和谢尔盖·布林创办了你用来在网上找东西的公司。\n如果你想理解经济不平等——更重要的是，如果你真的想修复它的坏方面——你必须剖析其组成部分。然而，几乎所有关于这个主题的写作趋势都是相反的：将经济不平等的所有方面挤压在一起，好像它是一个单一现象。\n有时这样做是出于意识形态原因。有时是因为作者只有非常高层次的数据，因此从中得出结论，就像 proverbial drunk 在路灯下寻找钥匙，而不是在他丢钥匙的地方，因为那里的光线更好。有时是因为作者不理解不平等的关键方面，比如技术在财富创造中的作用。很多时候，也许大多数时候，关于经济不平等的写作结合了所有三个方面。\n饼的错误 人们对经济不平等最常犯的错误是把它当作单一现象。其中最天真的版本是基于饼的错误：富人通过从穷人那里拿钱而变得富有。\n通常这是人们开始的假设，而不是通过检查证据得出的结论。有时饼的错误被明确表述：\u0026quot;\u0026hellip;\u0026hellip;顶层的人正在攫取国家收入中越来越大的份额——如此大的份额，以至于留给其他人的份额减少了\u0026hellip;\u0026hellip;\u0026quot;[1] 其他时候更无意识。但无意识的形式非常普遍。我认为这是因为我们在一个饼的错误实际上真实的世界中长大。对孩子来说，财富是一个固定的饼，被分享出去，如果一个人得到更多，那是以另一个人为代价的。需要有意识的努力来提醒自己现实世界不是那样运作的。\n在现实世界中，你既可以创造财富，也可以从他人那里夺取财富。木工创造财富。他做一把椅子，你愿意为此给他钱。高频交易者不会。他只有在交易的另一端有人亏损一美元时才赚一美元。\n如果一个社会中的富人通过从穷人那里夺取财富而变得富有，那么你就有了经济不平等的退化情况，其中贫困的原因与财富的原因相同。但不平等的实例不一定是退化情况的实例。如果一个木工做了5把椅子而另一个一个也没做，第二个木工会有更少的钱，但不是因为任何人从他那里拿走了任何东西。\n即使足够老练知道饼错误的人也被描述经济不平等为一个分位数收入或财富与另一个的比率的习惯引向它。很容易从谈论收入从一个分位数转移到另一个分位数，作为一种比喻，滑向相信这确实是正在发生的事情。\n除了在退化情况下，经济不平等不能用比率甚至曲线来描述。在一般情况下，它包括人们变穷的多种方式，以及人们变富的多种方式。这意味着要理解一个国家的经济不平等，你必须去寻找个别贫穷或富有的人，并找出原因。[2]\n理解变化 如果你想理解经济不平等的变化，你应该问那些人在情况不同时会做什么。这是我知道富人不是都通过某种将财富从其他人转移给他们的新系统而变得更富有的方法之一。当你对创业公司创始人使用\u0026quot;本会\u0026quot;方法时，你会发现大多数人在1960年经济不平等较低时会做什么，是加入大公司或成为教授。在马克·扎克伯格创办Facebook之前，他的默认期望是他最终会在微软工作。他和大多数其他创业公司创始人比20世纪中叶会更富有的原因不是因为国家在里根政府期间采取了某种右转，而是因为技术进步使得创办一个快速增长的新公司变得容易得多。\n传统经济学家似乎奇怪地不愿意研究个人人类。对他们来说似乎有一条规则，一切都必须从统计开始。所以他们给你关于财富和收入变化的非常精确的数字，然后接着是对根本原因的最天真推测。\n但是，虽然有许多人通过各种形式的寻租行为变富，有许多人通过玩零和游戏变富，但也有相当数量的人通过创造财富变富。而创造财富，作为经济不平等的来源，与夺取财富不同——不仅在道德上，而且在实践上也是如此，在它更难根除的意义上。一个原因是生产力变化正在加速。个人创造财富的速率取决于他们可用的技术，而技术呈指数级增长。创造财富是如此顽固的不平等来源的另一个原因是它可以扩展以容纳很多人。\n不平等的不可避免性 我完全支持关闭致富的歪门邪道。但这不会消除财富的巨大变化，因为只要你留开放通过创造财富致富的选择，想要致富的人就会这样做。\n大多数变富的人往往相当有驱动力。无论他们其他缺点如何，懒惰通常不是其中之一。假设新政策使在金融领域发财变得困难。那些目前进入金融领域发家致富的人会继续这样做，但对普通工资感到满足，这似乎合理吗？他们进入金融领域的原因不是因为他们热爱金融，而是因为他们想致富。如果剩下的致富唯一方式是创办创业公司，他们就会创办创业公司。他们在这方面也会做得很好，因为决心是创业公司成功的主要因素。[3] 虽然对于世界来说，如果想致富的人从玩零和游戏转向创造财富可能是一件好事，但这不仅不会消除财富的巨大变化，甚至可能加剧它们。在零和游戏中，上升至少有一个限制。此外，许多新的创业公司将创造进一步加速生产力变化的新技术。\n生产力变化远非经济不平等的唯一来源，但它是其不可减少的核心，在这个意义上，当你消除所有其他来源时，你会留下这个。如果你这样做，这个核心将会很大，因为它将扩展到包括所有难民的努力。此外，它周围将有一个巨大的鲍莫尔光晕：任何能够通过为自己创造财富而致富的人都必须得到足够的报酬以防止他们这样做。\n你不能在不阻止人们致富的情况下防止财富的巨大变化，而你不能在不阻止他们创办创业公司的情况下做到这一点。\n所以让我们明确这一点。消除财富的巨大变化意味着消除创业公司。这似乎不是一个明智的举动。特别是因为它只意味着你在自己的国家消除了创业公司。有抱负的人已经已经移动到世界各地以推进他们的职业生涯，而且创业公司现在可以在任何地方运营。所以如果你使在你的国家通过创造财富致富变得不可能，想要这样做的人只会离开并到其他地方做。这肯定会给你一个更低的基尼系数，以及一个关于小心你要求什么的教训。[4]\n我认为上升的经济不平等是那些不选择更糟事情的国家的必然命运。我们在20世纪中期有40年的时间说服了一些人 otherwise。但正如我在《重新碎片化》中解释的，那是一个反常现象——一种独特的情况组合，不仅在经济上而且在文化上压缩了美国社会。[5]\n虽然从那时起我们看到的一些经济不平等增长是由于各种不良行为，但个人创造财富的能力同时有了巨大增长。创业公司几乎完全是这个时期的产物。即使在创业公司世界，过去10年也发生了质的变化。技术使创办创业公司的成本降低了很多，以至于创始人现在对投资者有上风。创始人被稀释得更少，现在他们保留董事会控制权也很常见。两者都进一步增加了经济不平等，前者是因为创始人拥有更多股票，后者是因为，正如投资者所了解的，创始人往往比投资者更擅长运营他们的公司。\n虽然表面表现发生变化，但潜在力量非常非常古老。我们在硅谷看到的生产力加速已经发生了数千年。如果你看石器工具的历史，技术在中石器时代已经在加速。加速度太慢，在一个生命周期内无法察觉。这就是指数曲线最左部分的特点。但这是相同的曲线。\n你不想以与这条曲线不兼容的方式设计你的社会。技术的进化是历史上最强大的力量之一。\n路易斯·布兰代斯说\u0026quot;我们可以有民主，或者我们可以有财富集中在少数人手中，但我们不能两者兼得。\u0026ldquo;这听起来合理。但如果我必须在忽略他和忽略一个已经运行了数千年的指数曲线之间选择，我会赌这条曲线。忽略任何已经运行了数千年的趋势是危险的。但指数增长，尤其是，往往会咬你。\n与不平等共存 如果加速的生产力变化总是会产生经济不平等的一些基线增长，那么花一些时间思考那个未来会是一个好主意。你能有一个财富差异很大的健康社会吗？它会是什么样子？\n注意思考那个想法感觉多么新颖。到目前为止的公共对话专门集中在减少经济不平等的必要性上。我们几乎没有考虑如何与它共存。\n我有希望我们能够做到。布兰代斯是镀金时代的产物，从那以后情况发生了变化。现在更难隐藏不当行为了。而且现在变富你不必像铁路或石油大亨那样购买政客。[6] 我在硅谷周围看到的巨大财富集中似乎并没有破坏民主。\n美国有很多问题以经济不平等为症状。我们应该修复那些问题。在这个过程中我们可能会减少经济不平等。但我们不能从症状开始，并希望修复根本原因。[7]\n最明显的是贫困。我确信大多数想要减少经济不平等的人这样做主要是为了帮助穷人，而不是为了伤害富人。[8] 确实，有相当数量的人只是在说减少经济不平等时马虎，而他们的意思是减少贫困。但这种情况最好是精确地说明我们想要什么。贫困和经济不平等不是同一的。当城市因为你无法支付账单而关掉你的水时，拉里·佩奇的净资产与你的相比没有任何区别。他可能只比你富有几倍，而你的水被关掉仍然是一个同样大的问题。\n与贫困密切相关的是缺乏社会流动性。我自己看到过：你不必长大富有或甚至中上层阶级才能作为创业公司创始人变富，但很少有成功的创始人长大极度贫困。但再次，这里的问题不简单地是经济不平等。拉里·佩奇长大的家庭和成功的创业公司创始人家庭之间有巨大的财富差异，但这并没有阻止他加入他们的行列。阻碍社会流动性的不是经济不平等本身，而是孩子在长得足够贫穷时出错的一些特定组合。\n关注真正的问题 硅谷最重要的原则之一是\u0026quot;你衡量什么就得到什么。\u0026ldquo;这意味着如果你选择专注于某个数字，它往往会改善，但你必须选择正确的数字，因为只有你选择的那个会改善；另一个概念上看似相邻的可能不会。例如，如果你是一名大学校长，你决定专注于毕业率，那么你会提高毕业率。但只是毕业率，而不是学生学习多少。如果你为了提高毕业率而使课程更容易，学生可能会学得更少。\n经济不平等与以它为症状的各种问题相距足够远，以至于我们可能只会击中我们瞄准的两个中的哪一个。如果我们瞄准经济不平等，我们不会修复这些问题。所以我说让我们瞄准这些问题。\n例如，让我们攻击贫困，并在过程中必要时损害财富。这比攻击财富并希望你会因此修复贫困更有可能起作用。[9] 如果有人通过欺骗消费者或游说政府获得反竞争法规或税收漏洞而变富，那么让我们阻止他们。不是因为它造成经济不平等，而是因为这是偷窃。[10]\n如果你只有统计数据，似乎那就是你需要修复的东西。但在经济不平等这样广泛的统计措施背后，有些事情是好的，有些是坏的，有些是有巨大动量的历史趋势，其他是随机事故。如果我们想修复统计数据背后的世界，我们必须理解它，并将我们的努力集中在它们会做得最 good 的地方。\n注释 [1] 斯蒂格利茨，约瑟夫。《不平等的代价》。诺顿，2012年。第32页。\n[2] 特别是因为经济不平等是异常值的问题，而异常值不成比例地可能通过经济学家通常不考虑的事情方式到达他们那里的位置，比如工资和生产力，而是通过，比如说，最终站在\u0026quot;毒品战争\u0026quot;的错误一边。\n[3] 决心是决定成功与失败的最重要因素，在创业公司中成功与失败往往明显分化。但要创造一个极其成功的创业公司需要更多的决心。虽然大多数创始人对致富的想法开始时感到兴奋，但纯粹唯利是图的创始人通常会接受大多数成功创业公司在上升过程中获得的大型收购提议。进入下一阶段的创始人往往是由使命感驱动的。他们对公司的依恋就像艺术家或作家对其作品的依恋。但很难在一开始预测哪些创始人会这样做。这不简单地是他们初始态度的函数。创办公司改变了人。\n[4] 在阅读本文的草稿后，理查德·佛罗里达告诉我他曾如何与一群欧洲人交谈\u0026quot;他们说他们想让欧洲更具创业精神，更像硅谷。我说根据定义，这会给你们更多不平等。他们认为我疯了——他们无法处理这个。\u0026rdquo;\n[5] 经济不平等在全球范围内一直在减少。但这主要是由于以前统治所有较贫穷国家的盗贼统治的侵蚀。一旦政治上竞争环境更加公平，我们将看到经济不平等开始再次上升。美国是领头羊。我们在这里面临的情况，世界其他地方迟早也会面临。\n[6] 有些人仍然通过购买政客变富。我的观点是这不再是先决条件。\n[7] 除了以经济不平等为症状的问题外，还有那些以它为原因的问题。但在大多数如果不是所有情况下，经济不平等不是主要原因。通常有一些不公正允许经济不平等转化为其他形式的不平等，那种不公正是我们需要修复的。例如，美国的警察对待穷人比富人更差。但解决方案不是让人们更富有。是让警察更公平地对待人们。否则他们将继续虐待在其他方面软弱的人。\n",
    "description": "",
    "tags": ["经济不平等","财富","贫困","创业公司","经济学","社会流动性","技术"],
    "categories": [],
    "content": "→ English Version\n经济不平等 2016年1月\n自1970年代以来，美国的经济不平等急剧增加。特别是，富人变得富裕得多。几乎所有写这个话题的人都说经济不平等应该减少。\n我对这个问题感兴趣是因为我是一个名为Y Combinator的公司的创始人之一，该公司帮助人们创办创业公司。几乎根据定义，如果一个创业公司成功，其创始人就会变得富有。这意味着通过帮助创业公司创始人，我一直在帮助增加经济不平等。如果经济不平等应该减少，我就不应该帮助创始人。没有人应该。\n但这听起来不对。这里发生了什么？这里发生的是，虽然经济不平等是一个单一指标（或者更确切地说，是两个：收入变化和财富变化），但它有多种原因。其中许多原因是坏的，比如税收漏洞和药物成瘾。但有些是好的，比如拉里·佩奇和谢尔盖·布林创办了你用来在网上找东西的公司。\n如果你想理解经济不平等——更重要的是，如果你真的想修复它的坏方面——你必须剖析其组成部分。然而，几乎所有关于这个主题的写作趋势都是相反的：将经济不平等的所有方面挤压在一起，好像它是一个单一现象。\n有时这样做是出于意识形态原因。有时是因为作者只有非常高层次的数据，因此从中得出结论，就像 proverbial drunk 在路灯下寻找钥匙，而不是在他丢钥匙的地方，因为那里的光线更好。有时是因为作者不理解不平等的关键方面，比如技术在财富创造中的作用。很多时候，也许大多数时候，关于经济不平等的写作结合了所有三个方面。\n饼的错误 人们对经济不平等最常犯的错误是把它当作单一现象。其中最天真的版本是基于饼的错误：富人通过从穷人那里拿钱而变得富有。\n通常这是人们开始的假设，而不是通过检查证据得出的结论。有时饼的错误被明确表述：\u0026quot;\u0026hellip;\u0026hellip;顶层的人正在攫取国家收入中越来越大的份额——如此大的份额，以至于留给其他人的份额减少了\u0026hellip;\u0026hellip;\u0026quot;[1] 其他时候更无意识。但无意识的形式非常普遍。我认为这是因为我们在一个饼的错误实际上真实的世界中长大。对孩子来说，财富是一个固定的饼，被分享出去，如果一个人得到更多，那是以另一个人为代价的。需要有意识的努力来提醒自己现实世界不是那样运作的。\n在现实世界中，你既可以创造财富，也可以从他人那里夺取财富。木工创造财富。他做一把椅子，你愿意为此给他钱。高频交易者不会。他只有在交易的另一端有人亏损一美元时才赚一美元。\n如果一个社会中的富人通过从穷人那里夺取财富而变得富有，那么你就有了经济不平等的退化情况，其中贫困的原因与财富的原因相同。但不平等的实例不一定是退化情况的实例。如果一个木工做了5把椅子而另一个一个也没做，第二个木工会有更少的钱，但不是因为任何人从他那里拿走了任何东西。\n即使足够老练知道饼错误的人也被描述经济不平等为一个分位数收入或财富与另一个的比率的习惯引向它。很容易从谈论收入从一个分位数转移到另一个分位数，作为一种比喻，滑向相信这确实是正在发生的事情。\n除了在退化情况下，经济不平等不能用比率甚至曲线来描述。在一般情况下，它包括人们变穷的多种方式，以及人们变富的多种方式。这意味着要理解一个国家的经济不平等，你必须去寻找个别贫穷或富有的人，并找出原因。[2]\n理解变化 如果你想理解经济不平等的变化，你应该问那些人在情况不同时会做什么。这是我知道富人不是都通过某种将财富从其他人转移给他们的新系统而变得更富有的方法之一。当你对创业公司创始人使用\u0026quot;本会\u0026quot;方法时，你会发现大多数人在1960年经济不平等较低时会做什么，是加入大公司或成为教授。在马克·扎克伯格创办Facebook之前，他的默认期望是他最终会在微软工作。他和大多数其他创业公司创始人比20世纪中叶会更富有的原因不是因为国家在里根政府期间采取了某种右转，而是因为技术进步使得创办一个快速增长的新公司变得容易得多。\n传统经济学家似乎奇怪地不愿意研究个人人类。对他们来说似乎有一条规则，一切都必须从统计开始。所以他们给你关于财富和收入变化的非常精确的数字，然后接着是对根本原因的最天真推测。\n但是，虽然有许多人通过各种形式的寻租行为变富，有许多人通过玩零和游戏变富，但也有相当数量的人通过创造财富变富。而创造财富，作为经济不平等的来源，与夺取财富不同——不仅在道德上，而且在实践上也是如此，在它更难根除的意义上。一个原因是生产力变化正在加速。个人创造财富的速率取决于他们可用的技术，而技术呈指数级增长。创造财富是如此顽固的不平等来源的另一个原因是它可以扩展以容纳很多人。\n不平等的不可避免性 我完全支持关闭致富的歪门邪道。但这不会消除财富的巨大变化，因为只要你留开放通过创造财富致富的选择，想要致富的人就会这样做。\n大多数变富的人往往相当有驱动力。无论他们其他缺点如何，懒惰通常不是其 …"
  },{
    "title": "给足智多谋者的忠告",
    "url": "/paul_graham/essays_zh/word/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n给足智多谋者的忠告 2012年1月\n一年前，我注意到我们资助的最不成功的创业公司有一个模式：他们似乎都很难沟通。感觉我们之间有某种墙。我从来不能完全确定他们是否理解我的话。\n这引起了我的注意，因为之前我们已经注意到最成功的创业公司有一个模式，这似乎取决于不同的品质。我们发现表现最好的创业公司是那些我们会说\u0026quot;他们能够照顾自己\u0026quot;的创始人。表现最好的创业公司是那种\u0026quot;发射后不用管\u0026quot;的类型，你只需要给他们一个线索，他们就会完成交易，无论是什么类型的线索。例如，当他们融资时，你可以做初步的介绍，知道如果你想的话，你可以在此之后停止考虑这件事。你不需要监督这一轮以确保它发生。那种类型的创始人会带着钱回来；唯一的问题是多少钱，什么条件。\n奇怪的是，频谱两端的异常值可以通过看起来不相关的测试来检测。你可能会期望，如果一端的创始人以品质x为特征，另一端的创始人将以缺乏x为特征。足智多谋和难以沟通之间是否存在某种反向关系？\n事实证明确实存在，而谜题的关键是古老的谚语\u0026quot;对聪明人说一句话就足够了\u0026quot;。因为这句话不仅被过度使用，而且以间接的方式被过度使用（通过将主题前置到某些建议之前），大多数听过它的人不知道它的意思。它的意思是，如果某人是聪明的，你只需要对他们说一个词，他们就会立即理解。你不需要详细解释；他们会追寻所有的含义。\n就像你只需要给合适类型的创始人一个单行的风险投资介绍，他就会追寻资金一样。这就是联系。理解某人告诉你的所有含义——即使是不方便的含义——是足智多谋的一个子集。这是对话的足智多谋。\n就像现实世界的足智多谋一样，对话的足智多谋通常意味着做你不想做的事情。追寻别人告诉你的所有含义有时会导致不舒服的结论。描述失败的最好词可能是\u0026quot;否认\u0026quot;，尽管这似乎有点太窄了。描述这种情况的更好方法是说，不成功的创始人有那种来自弱点的保守主义。他们小心翼翼地在思想空间中穿行，就像一个非常年长的人在物理世界中穿行一样。[1]\n不成功的创始人并不愚蠢。在智力上，他们和成功的创始人一样能够遵循某人告诉他们的所有含义。他们只是不渴望这样做。\n所以难以沟通并不是杀死不成功创业公司的原因。它是潜在缺乏足智多谋的迹象。这才是杀死他们的原因。除了未能追寻告诉他们的含义外，不成功的创始人也会未能追寻资金、用户和新想法的来源。但我有最直接的证据表明有什么不对劲是我无法与他们交谈。\n注释 [1] 一位YC合作伙伴写道：\n我对那些不好的团队的感觉是，进入办公时间时，他们已经决定了要做什么，我说的每句话都在他们头脑中经过一个内部过程，这个过程要么拼命试图将我说的东西扭曲成符合他们决定的东西，要么直接驳回它并为这样做创建一个合理化。他们可能甚至没有意识到这个过程，但这就是我认为当你对不好的团队说些什么时他们会有那种茫然无神的样子。我不认为这是困惑或缺乏理解本身，而是这个内部过程在工作。\n对于好的团队，你可以看出你说的每句话都是用新鲜的眼光看待的，即使被驳回，也是因为一些逻辑原因，例如\u0026quot;我们已经尝试过了\u0026quot;或\u0026quot;从与我们的用户交谈来看，那不是他们想要的\u0026quot;等等。那些团队从来没有那种茫然无神的样子。\n感谢 感谢萨姆·奥特曼、帕特里克·克里森、亚伦·伊巴、杰西卡·利文斯顿、罗伯特·莫里斯、哈吉·塔加尔和加里·谭阅读草稿。\n",
    "description": "",
    "tags": ["创业公司","足智多谋","对话","建议","创始人"],
    "categories": [],
    "content": "→ English Version\n给足智多谋者的忠告 2012年1月\n一年前，我注意到我们资助的最不成功的创业公司有一个模式：他们似乎都很难沟通。感觉我们之间有某种墙。我从来不能完全确定他们是否理解我的话。\n这引起了我的注意，因为之前我们已经注意到最成功的创业公司有一个模式，这似乎取决于不同的品质。我们发现表现最好的创业公司是那些我们会说\u0026quot;他们能够照顾自己\u0026quot;的创始人。表现最好的创业公司是那种\u0026quot;发射后不用管\u0026quot;的类型，你只需要给他们一个线索，他们就会完成交易，无论是什么类型的线索。例如，当他们融资时，你可以做初步的介绍，知道如果你想的话，你可以在此之后停止考虑这件事。你不需要监督这一轮以确保它发生。那种类型的创始人会带着钱回来；唯一的问题是多少钱，什么条件。\n奇怪的是，频谱两端的异常值可以通过看起来不相关的测试来检测。你可能会期望，如果一端的创始人以品质x为特征，另一端的创始人将以缺乏x为特征。足智多谋和难以沟通之间是否存在某种反向关系？\n事实证明确实存在，而谜题的关键是古老的谚语\u0026quot;对聪明人说一句话就足够了\u0026quot;。因为这句话不仅被过度使用，而且以间接的方式被过度使用（通过将主题前置到某些建议之前），大多数听过它的人不知道它的意思。它的意思是，如果某人是聪明的，你只需要对他们说一个词，他们就会立即理解。你不需要详细解释；他们会追寻所有的含义。\n就像你只需要给合适类型的创始人一个单行的风险投资介绍，他就会追寻资金一样。这就是联系。理解某人告诉你的所有含义——即使是不方便的含义——是足智多谋的一个子集。这是对话的足智多谋。\n就像现实世界的足智多谋一样，对话的足智多谋通常意味着做你不想做的事情。追寻别人告诉你的所有含义有时会导致不舒服的结论。描述失败的最好词可能是\u0026quot;否认\u0026quot;，尽管这似乎有点太窄了。描述这种情况的更好方法是说，不成功的创始人有那种来自弱点的保守主义。他们小心翼翼地在思想空间中穿行，就像一个非常年长的人在物理世界中穿行一样。[1]\n不成功的创始人并不愚蠢。在智力上，他们和成功的创始人一样能够遵循某人告诉他们的所有含义。他们只是不渴望这样做。\n所以难以沟通并不是杀死不成功创业公司的原因。它是潜在缺乏足智多谋的迹象。这才是杀死他们的原因。除了未能追寻告诉他们的含义外，不成功的创始人也会未能追寻资金、用户和新想法的来源。但我有最直接的证据表明有什么不对劲是我无法与他们交谈。\n注释 [1] 一位YC合作伙伴写道：\n我对那些不好的团队的感觉是，进入办公时间时，他们已经决定了要做什么，我说的每句话都在他们头脑中经过一个内部过程，这个过程要么拼命试图将我说的东西扭曲成符合他们决定的东西，要么直接驳回它并为这样做创建一个合理化。他们可能甚至没有意识到这个过程，但这就是我认为当你对不好的团队说些什么时他们会有那种茫然无神的样子。我不认为这是困惑或缺乏理解本身，而是这个内部过程在工作。\n对于好的团队，你可以看出你说的每句话都是用新鲜的眼光看待的，即使被驳回，也是因为一些逻辑原因，例如\u0026quot;我们已经尝试过了\u0026quot;或\u0026quot;从与我们的用户交谈来看，那不是他们想要的\u0026quot;等等。那些团队从来没有那种茫然无神的样子。\n感谢 感谢萨姆·奥特曼、帕特里克·克里森、亚伦·伊巴、杰西卡·利文斯顿、罗伯特·莫里斯、哈吉·塔加尔和加里·谭阅读草稿。\n"
  },{
    "title": "编程语言修复了什么",
    "url": "/paul_graham/essays_zh/fix/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n编程语言修复了什么 凯文·凯勒her建议了一种比较编程语言的有趣方式：用每种语言所要解决的问题来描述它。令人惊讶的是，有多少语言可以用这种方式很好地描述。\nAlgol：汇编语言太底层了。\nPascal：Algol没有足够的数据类型。\nModula：Pascal对于系统编程来说太弱了。\nSimula：Algol在模拟方面不够好。\nSmalltalk：Simula中的一切都不是对象。\nFortran：汇编语言太底层了。\nCobol：Fortran太吓人了。\nPL/1：Fortran没有足够的数据类型。\nAda：每种现有语言都缺少某些东西。\nBasic：Fortran太吓人了。\nAPL：Fortran在操作数组方面不够好。\nJ：APL需要自己的字符集。\nC：汇编语言太底层了。\nC++：C太底层了。\nJava：C++是一个混乱的东西。而且微软要打压我们。\nC#：Java被Sun控制着。\nLisp：图灵机是描述计算的笨拙方式。\nScheme：MacLisp是一个混乱的东西。\nT：Scheme没有库。\nCommon Lisp：Lisp有太多方言。\nDylan：Scheme没有库，而且Lisp语法太吓人了。\nPerl：Shell脚本/awk/sed不够像编程语言。\nPython：Perl是一个混乱的东西。\nRuby：Perl是一个混乱的东西，而且Lisp语法太吓人了。\nProlog：编程不够像逻辑。\n",
    "description": "",
    "tags": ["编程","语言","软件","技术","开发"],
    "categories": [],
    "content": "→ English Version\n编程语言修复了什么 凯文·凯勒her建议了一种比较编程语言的有趣方式：用每种语言所要解决的问题来描述它。令人惊讶的是，有多少语言可以用这种方式很好地描述。\nAlgol：汇编语言太底层了。\nPascal：Algol没有足够的数据类型。\nModula：Pascal对于系统编程来说太弱了。\nSimula：Algol在模拟方面不够好。\nSmalltalk：Simula中的一切都不是对象。\nFortran：汇编语言太底层了。\nCobol：Fortran太吓人了。\nPL/1：Fortran没有足够的数据类型。\nAda：每种现有语言都缺少某些东西。\nBasic：Fortran太吓人了。\nAPL：Fortran在操作数组方面不够好。\nJ：APL需要自己的字符集。\nC：汇编语言太底层了。\nC++：C太底层了。\nJava：C++是一个混乱的东西。而且微软要打压我们。\nC#：Java被Sun控制着。\nLisp：图灵机是描述计算的笨拙方式。\nScheme：MacLisp是一个混乱的东西。\nT：Scheme没有库。\nCommon Lisp：Lisp有太多方言。\nDylan：Scheme没有库，而且Lisp语法太吓人了。\nPerl：Shell脚本/awk/sed不够像编程语言。\nPython：Perl是一个混乱的东西。\nRuby：Perl是一个混乱的东西，而且Lisp语法太吓人了。\nProlog：编程不够像逻辑。\n"
  },{
    "title": "网络创业公司的未来",
    "url": "/paul_graham/essays_zh/webstartups/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n网络创业公司的未来 2007年10月\n（本文源于2007年10月在FOWA的主题演讲。）\n现在有一些有趣的事情正在发生。创业公司正在经历与技术变得更便宜时相同的转变。\n我们在技术中一遍又一遍地看到这种模式。最初有一些非常昂贵且少量制造的设备。然后有人发现了如何廉价制造它们；更多的被制造出来；结果它们可以以新的方式使用。\n计算机是一个熟悉的例子。当我还是个孩子的时候，计算机是大型、昂贵的机器，一次制造一台。现在它们是商品。现在我们可以将计算机塞进所有东西里。\n这种模式非常古老。经济史上大多数转折点都是它的实例。它在1850年发生在钢铁上，在1780年发生在动力上。它在13世纪发生在布匹制造上，产生了后来带来文艺复兴的财富。农业本身也是这种模式的一个实例。\n现在创业公司不仅生产这种模式，这种模式也正在发生在创业公司身上。启动网络创业公司如此便宜，以至于更多的将被启动。如果这种模式成立，那应该会导致戏剧性的变化。\n1. 大量创业公司 所以我对网络创业公司未来的第一个预测相当简单：将会有很多。当启动创业公司很昂贵时，你必须得到投资者的许可才能这样做。现在唯一的门槛是勇气。\n甚至这个门槛也在降低，因为人们看着其他人冒险并生存下来。在我们资助的最近一批创业公司中，我们有几位创始人说他们之前想过申请，但不确定并找到了工作。只是在听到做过这件事的朋友的报告后，他们才决定自己尝试。\n启动创业公司很难，但朝九晚五的工作也很难，而且在某些方面是一种更糟糕的困难。在创业公司你有很多担忧，但你没有那种在大公司时生命正在飞逝的感觉。另外在创业公司你可以赚更多钱。\n随着创业公司有效的消息传播，这个数字可能会增长到现在看起来令人惊讶的地步。\n我们现在认为在公司工作很正常，但这只是最肤浅的历史表象。仅仅两三代人前，现在所谓的工业化国家的大多数人靠农业为生。所以虽然提议大量人改变他们的谋生方式可能看起来令人惊讶，但如果他们不这样做会更令人惊讶。\n2. 标准化 当技术使某种东西 dramatically 变便宜时，标准化总是随之而来。当你大量制造东西时，你倾向于标准化一切不需要改变的东西。\n在Y Combinator我们仍然只有四个人，所以我们试图标准化一切。我们可以雇用员工，但我们想被迫弄清楚如何扩大投资规模。\n我们经常告诉创业公司快速发布一个最小版本，然后让用户的需求决定下一步做什么。本质上，让市场设计产品。我们自己也是这样做的。我们认为我们正在开发的处理大量创业公司的技术就像软件。有时它确实是软件，比如Hacker News和我们的申请系统。\n我们一直在标准化的最重要的东西之一是投资条款。到现在为止投资条款都是个别协商的。这对创始人来说是个问题，因为它使筹集资金需要更长的时间并在法律费用上花费更多。所以我们不仅对我们做的每笔交易使用相同的文书工作，我们还委托了通用的天使文书工作，我们资助的所有创业公司都可以在未来几轮中使用。\n一些投资者仍然想要炮制自己的交易条款。A轮融资，你筹集一百万美元或更多，在可预见的未来将是定制交易。但我认为天使轮将开始主要用标准化协议完成。一个想要在协议中插入一堆复杂条款的天使可能不是你想要的。\n3. 对收购的新态度 我看到开始标准化的另一件事是收购。随着创业公司数量的增加，大公司将开始开发标准化的程序，使收购几乎不比雇用某人更多工作。\n谷歌在这方面是领导者，就像在技术的许多领域一样。他们收购了很多创业公司——比大多数人意识到的多，因为他们只宣布其中的一小部分。作为谷歌，他们正在弄清楚如何高效地做这件事。\n他们解决的一个问题是如何思考收购。对于大多数公司来说，收购仍然带有某种不足的污名。公司这样做是因为他们不得不这样做，但通常有一种感觉他们不应该不得不这样做——他们自己的程序员应该能够构建他们需要的一切。\n谷歌的例子应该治愈世界其他地方的这个想法。谷歌拥有比任何公开技术公司都好得多的程序员。如果他们做收购没有问题，其他人应该更没有问题。无论谷歌做多少，微软应该做十倍。\n谷歌做收购没有问题的一个原因是他们亲身知道他们能通过这种方式获得的人才质量。Larry和Sergey只有在周游搜索引擎试图出售他们的想法但找不到接受者之后才创办了谷歌。他们曾是走进大公司的人，所以他们知道谁可能坐在会议桌对面。\n4. 可能的风险策略 风险总是与回报成比例的。获得真正巨大回报的方法是做看起来疯狂的事情，比如在1998年创办一个新的搜索引擎，或者拒绝十亿美元的收购要约。\n这在风险投资中一直是个问题。创始人和投资者对风险有不同的态度。知道风险平均与回报成比例，投资者喜欢风险策略，而创始人，他们的样本量不够大，不在乎平均上什么是真的，往往更加保守。\n如果创业公司容易启动，这种冲突就消失了，因为创始人可以在更年轻的时候启动它们，那时承担更多风险是合理的，并且可以在他们的职业生涯中启动更多的创业公司。当创始人可以做很多创业公司时，他们可以开始像投资者一样以投资组合优化的方式看待世界。这意味着创造的财富总量可以更大，因为策略可以更有风险。\n5. 更年轻、更极客的创始人 如果创业公司变成便宜的商品，更多的人将能够拥有它们，就像微处理器使计算机便宜后更多的人可以拥有计算机一样。特别是，比以前更年轻和技术更强的创始人将能够启动创业公司。\n在启动创业公司成本很高的时候，你必须说服投资者让你做。而且这需要与实际做创业公司非常不同的技能。如果投资者是完美的判断者，两者将需要完全相同的技能。但不幸的是，大多数投资者都是糟糕的判断者。我知道是因为我看到了幕后筹集资金需要多少工作，一个行业中所需的销售量总是与买家的判断成反比。\n幸运的是，如果创业公司变得更便宜启动，有另一种方式来说服投资者。不是带着商业计划去找风险投资家并试图说服他们资助它，你可以用我们或你叔叔的几万美元种子钱启动一个产品，然后带着一个工作的公司而不是一个计划去找他们。那时你不必显得圆滑和自信，你只需把他们指向Alexa。\n这种说服投资者的方式更适合黑客，他们进入技术部分是因为他们觉得其他领域需要的不真实程度让他们不舒服。\n6. 创业中心将持续存在 如果启动创业公司变得便宜，似乎意味着像硅谷这样的创业中心的结束。如果你启动创业公司需要的只是房租钱，你应该能够在任何地方做。\n这在某种程度上是正确的，在某种程度上是错误的。你现在确实可以在任何地方启动创业公司。但你必须用创业公司做的不仅仅是启动它。你必须让它成功。而这在创业中心更可能发生。\n我对这个问题思考了很多，在我看来，网络创业公司越来越便宜将如果有的话会增加创业中心的重要性。创业中心的价值，像任何商业中心的中心一样，在于某种非常古老的东西：面对面会议。在不久的将来没有任何技术可以取代沿着大学大道行走并遇到一个朋友，他告诉你如何修复困扰你整个周末的错误，或者访问街对面朋友的创业公司并最终与他们的一个投资者交谈。\n是否在创业中心的问题就像是否接受外部投资的问题。问题不是你是否需要它，而是它是否带来任何优势。因为任何带来优势的东西，如果你的竞争对手做了而你没有，就会给他们带来比你更大的优势。所以如果你听到有人说\u0026quot;我们不需要在硅谷\u0026quot;，\u0026ldquo;需要\u0026quot;这个词的使用是他们甚至没有正确思考这个问题的标志。\n虽然创业中心像以往一样强大的磁铁，但启动创业公司越来越便宜意味着它们吸引的粒子变得越来越轻。现在的创业公司可以只是一对22岁的家伙。这样的公司可以比拥有10个人、其中一半有孩子的公司容易移动得多。\n我们知道因为我们让人们为Y Combinator搬家，这似乎不是问题。能够面对面工作三个月的优势超过了搬家的不便。问问任何做过这件事的人。\n种子阶段创业公司的流动性意味着种子投资是全国性的业务。我们收到的最常见的电子邮件之一是人们询问我们是否能帮助他们建立Y Combinator的本地克隆。但这根本行不通。种子投资不是区域性的，就像大型研究大学不是一样。\n种子投资不仅是全国性的，还是国际性的？有趣的问题。有迹象表明它可能是。我们有一连串来自美国以外的创始人，他们往往做得特别好，因为他们都是如此决心成功以至于愿意搬到另一个国家来实现它。\n创业公司越具有流动性，启动新的硅谷就越困难。如果创业公司是流动的，最好的本地人才会去真正的硅谷，他们在本地能得到的只会是那些没有精力搬家的人。\n顺便说一句，这不是一个民族主义的想法。是城市在竞争，不是国家。亚特兰大和慕尼黑一样完蛋。\n7. 需要更好的判断 如果创业公司的数量急剧增加，那么那些工作就是判断它们的人将必须在这方面做得更好。我特别想到的是投资者和收购者。我们现在每年收到大约1000份申请。如果我们收到10，000份怎么办？\n这实际上是一个令人担忧的想法。但我们会想出某种答案。我们必须。这可能涉及编写一些软件，但幸运的是我们可以做到。\n收购者也必须更擅长挑选赢家。他们通常比投资者做得更好，因为他们挑选得更晚，当有更多表现可以衡量时。但即使在最先进的收购者那里，识别要收购的公司也极其临时，完成收购通常涉及大量不必要的摩擦。\n我认为收购者最终可能会有首席收购官，他们将识别好的收购并促成交易发生。目前这两个功能是分开的。有前途的新创业公司通常由开发人员发现。如果有足够强大的人想要购买它们，交易就移交给公司发展人员进行谈判。如果两者结合在一个由具有技术背景和一些他们想要完成的事情愿景的人领导的组中会更好。也许未来大公司将既有负责内部开发技术的工程副总裁，也有负责从外部引进技术的CAO。\n目前，大公司内部没有人会因为以2亿美元收购一家创业公司而惹上麻烦，而他们本可以早以2000万美元收购。应该开始有人为此惹上麻烦。\n8. 大学将改变 如果最好的黑客在大学毕业后创办自己的公司而不是找工作，那将改变大学里发生的事情。这些变化大多会朝着更好的方向发展。我认为大学的体验被之后你将被潜在雇主评判的期望以一种不好的方式扭曲了。\n",
    "description": "",
    "tags": ["网络创业公司","未来","技术","标准化","收购","风险"],
    "categories": [],
    "content": "→ English Version\n网络创业公司的未来 2007年10月\n（本文源于2007年10月在FOWA的主题演讲。）\n现在有一些有趣的事情正在发生。创业公司正在经历与技术变得更便宜时相同的转变。\n我们在技术中一遍又一遍地看到这种模式。最初有一些非常昂贵且少量制造的设备。然后有人发现了如何廉价制造它们；更多的被制造出来；结果它们可以以新的方式使用。\n计算机是一个熟悉的例子。当我还是个孩子的时候，计算机是大型、昂贵的机器，一次制造一台。现在它们是商品。现在我们可以将计算机塞进所有东西里。\n这种模式非常古老。经济史上大多数转折点都是它的实例。它在1850年发生在钢铁上，在1780年发生在动力上。它在13世纪发生在布匹制造上，产生了后来带来文艺复兴的财富。农业本身也是这种模式的一个实例。\n现在创业公司不仅生产这种模式，这种模式也正在发生在创业公司身上。启动网络创业公司如此便宜，以至于更多的将被启动。如果这种模式成立，那应该会导致戏剧性的变化。\n1. 大量创业公司 所以我对网络创业公司未来的第一个预测相当简单：将会有很多。当启动创业公司很昂贵时，你必须得到投资者的许可才能这样做。现在唯一的门槛是勇气。\n甚至这个门槛也在降低，因为人们看着其他人冒险并生存下来。在我们资助的最近一批创业公司中，我们有几位创始人说他们之前想过申请，但不确定并找到了工作。只是在听到做过这件事的朋友的报告后，他们才决定自己尝试。\n启动创业公司很难，但朝九晚五的工作也很难，而且在某些方面是一种更糟糕的困难。在创业公司你有很多担忧，但你没有那种在大公司时生命正在飞逝的感觉。另外在创业公司你可以赚更多钱。\n随着创业公司有效的消息传播，这个数字可能会增长到现在看起来令人惊讶的地步。\n我们现在认为在公司工作很正常，但这只是最肤浅的历史表象。仅仅两三代人前，现在所谓的工业化国家的大多数人靠农业为生。所以虽然提议大量人改变他们的谋生方式可能看起来令人惊讶，但如果他们不这样做会更令人惊讶。\n2. 标准化 当技术使某种东西 dramatically 变便宜时，标准化总是随之而来。当你大量制造东西时，你倾向于标准化一切不需要改变的东西。\n在Y Combinator我们仍然只有四个人，所以我们试图标准化一切。我们可以雇用员工，但我们想被迫弄清楚如何扩大投资规模。\n我们经常告诉创业公司快速发布一个最小版本，然后让用户的需求决定下一步做什么。本质上，让市场设计产品。我们自己也是这样做的。我们认为我们正在开发的处理大量创业公司的技术就像软件。有时它确实是软件，比如Hacker News和我们的申请系统。\n我们一直在标准化的最重要的东西之一是投资条款。到现在为止投资条款都是个别协商的。这对创始人来说是个问题，因为它使筹集资金需要更长的时间并在法律费用上花费更多。所以我们不仅对我们做的每笔交易使用相同的文书工作，我们还委托了通用的天使文书工作，我们资助的所有创业公司都可以在未来几轮中使用。\n一些投资者仍然想要炮制自己的交易条款。A轮融资，你筹集一百万美元或更多，在可预见的未来将是定制交易。但我认为天使轮将开始主要用标准化协议完成。一个想要在协议中插入一堆复杂条款的天使可能不是你想要的。\n3. 对收购的新态度 我看到开始标准化的另一件事是收购。随着创业公司数量的增加，大公司将开始开发标准化的程序，使收购几乎不比雇用某人更多工作。\n谷歌在这方面是领导者，就像在技术的许多领域一样。他们收购了很多创业公司——比大多数人意识到的多，因为他们只宣布其中的一小部分。作为谷歌，他们正在弄清楚如何高效地做这件事。\n他们解决的一个问题是如何思考收购。对于大多数公司来说，收购仍然带有某种不足的污名。公司这样做是因为他们不得不这样做，但通常有一种感觉他们不应该不得不这样做——他们自己的程序员应该能够构建他们需要的一切。\n谷歌的例子应该治愈世界其他地方的这个想法。谷歌拥有比任何公开技术公司都好得多的程序员。如果他们做收购没有问题，其他人应该更没有问题。无论谷歌做多少，微软应该做十倍。\n谷歌做收购没有问题的一个原因是他们亲身知道他们能通过这种方式获得的人才质量。Larry和Sergey只有在周游搜索引擎试图出售他们的想法但找不到接受者之后才创办了谷歌。他们曾是走进大公司的人，所以他们知道谁可能坐在会议桌对面。\n4. 可能的风险策略 风险总是与回报成比例的。获得真正巨大回报的方法是做看起来疯狂的事情，比如在1998年创办一个新的搜索引擎，或者拒绝十亿美元的收购要约。\n这在风险投资中一直是个问题。创始人和投资者对风险有不同的态度。知道风险平均与回报成比例，投资者喜欢风险策略，而创始人，他们的样本量不够大，不在乎平均上什么是真的，往往更加保守。\n如果创业公司容易启动，这种冲突就消失了，因为创始人可以在更年轻的时候启动它 …"
  },{
    "title": "网络喷子",
    "url": "/paul_graham/essays_zh/trolls/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n网络喷子 2008年2月\nHacker News的一个用户最近发表了一条评论，让我开始思考：关于黑客文化，有一件事我总觉得不太舒服——那就是刻薄。\u0026hellip;\u0026hellip;我只是不明白为什么人们会像他们那样喷人。在过去的几年里，我思考了很多关于喷子的问题。这是一个老问题，和论坛一样古老，但我们仍在学习其原因以及如何解决它们。\n\u0026ldquo;喷子\u0026quot;这个词有两种含义。在最初的含义中，它指的是某人，通常是外人，通过说有争议的话在论坛中故意挑起争端。[1] 例如，某个不使用某种编程语言的人可能会去该语言用户的论坛，对其发表贬损评论，然后坐下来观看人们上钩。这种喷子本质上是个恶作剧，就像在一满屋子的人中放了一只蝙蝠。\n这个定义后来扩展到在论坛中表现得像混蛋的人，无论是否故意。现在当人们谈论喷子时，他们通常指的是这个词的更广泛含义。虽然在某种意义上这在历史上是不准确的，但在其他方面更准确，因为当某人表现得像混蛋时，通常甚至在他们自己的头脑中也不确定有多少是故意的。这可以说是混蛋的定义特征之一。\n我认为广义上的喷子有四个原因。最重要的是距离感。人们会在匿名论坛中说他们永远不敢当面说的话，就像他们在车里会做他们作为行人永远不会做的事情——比如尾随别人，或者按喇叭，或者切断他们的路。\n在与计算机相关的论坛中，喷子现象尤其严重，我认为这是由于你在那里找到的那类人。他们中的大多数人（包括我自己）处理抽象想法比处理人更舒服。黑客即使在当面也可能很唐突。把他们放在匿名论坛上，问题就更严重了。\n喷子的第三个原因是无能。如果你不同意某件事，说\u0026quot;你很烂\u0026quot;比弄清楚并准确解释你不同意什么要容易。这样你也可以免于反驳。在这方面，喷子很像涂鸦。涂鸦发生在雄心和无能的交叉点：人们想在世界留下自己的印记，但除了真正在世界上留下印记外没有其他方式。[2]\n最后一个促成因素是论坛的文化。喷子就像孩子（很多就是孩子），他们能够表现出广泛的行为，取决于他们认为什么会被容忍。在不允许无礼的地方，大多数人都可以有礼貌。反之亦然。\n有一种喷子的格雷欣法则：喷子愿意使用一个有很多有思想的人在里面的论坛，但有思想的人不愿意使用一个有很多喷子在里面的论坛。这意味着一旦喷子现象占据主导，它往往会成为主流文化。在我开始关注那里的评论线程时，这种情况已经在Slashdot和Digg上发生了，但我看着它在Reddit上发生。\nNews.YC在众多其他事情中是一个实验，看看是否可以避免这种命运。该网站的指南明确要求人们不要说他们不会当面说的话。如果某人开始无礼，其他用户会介入并告诉他们停止。当人们似乎在故意喷子时，我们无情地禁止他们。\n技术调整也可能有帮助。在Reddit上，对你评论的投票不会影响你的业力分数，但在News.YC上会。当人们可以看到自己在同行眼中的声誉在发表混蛋评论后流失时，这似乎确实会影响人们。用户常常会重新考虑并删除此类评论。\n人们可能会担心这会阻止人们表达有争议的想法，但经验上这似乎并没有发生。当人们说了一些实质性的东西并被降级时，他们固执地保留它。人们删除的是俏皮话，因为他们在其中投入的较少。\n到目前为止，这个实验似乎很成功。News.YC上的对话水平与我见过的任何论坛一样高。但我们每天仍然只有大约8,000个独立用户。Reddit在那么小的时候对话也很好。挑战是我们能否保持这种方式。\n我乐观地认为我们会的。我们不仅仅依赖技术技巧。News.YC的核心用户大多是被喷子占领的其他网站的难民。他们对喷子的感觉大致就像古巴或东欧的难民对独裁的感觉。所以有很多人在努力防止这种情况再次发生。\n注释\n[1] 我指的是交流意见场所的一般意义上的论坛。最初的互联网论坛不是网站而是Usenet新闻组。\n[2] 我在这里谈论的是日常涂鸦。有些涂鸦相当令人印象深刻（任何东西如果你做得足够好都会成为艺术），但普通的标签只是视觉垃圾。\n俄语翻译\n",
    "description": "",
    "tags": ["喷子","在线社区","黑客文化","行为","心理学","论坛"],
    "categories": [],
    "content": "→ English Version\n网络喷子 2008年2月\nHacker News的一个用户最近发表了一条评论，让我开始思考：关于黑客文化，有一件事我总觉得不太舒服——那就是刻薄。\u0026hellip;\u0026hellip;我只是不明白为什么人们会像他们那样喷人。在过去的几年里，我思考了很多关于喷子的问题。这是一个老问题，和论坛一样古老，但我们仍在学习其原因以及如何解决它们。\n\u0026ldquo;喷子\u0026quot;这个词有两种含义。在最初的含义中，它指的是某人，通常是外人，通过说有争议的话在论坛中故意挑起争端。[1] 例如，某个不使用某种编程语言的人可能会去该语言用户的论坛，对其发表贬损评论，然后坐下来观看人们上钩。这种喷子本质上是个恶作剧，就像在一满屋子的人中放了一只蝙蝠。\n这个定义后来扩展到在论坛中表现得像混蛋的人，无论是否故意。现在当人们谈论喷子时，他们通常指的是这个词的更广泛含义。虽然在某种意义上这在历史上是不准确的，但在其他方面更准确，因为当某人表现得像混蛋时，通常甚至在他们自己的头脑中也不确定有多少是故意的。这可以说是混蛋的定义特征之一。\n我认为广义上的喷子有四个原因。最重要的是距离感。人们会在匿名论坛中说他们永远不敢当面说的话，就像他们在车里会做他们作为行人永远不会做的事情——比如尾随别人，或者按喇叭，或者切断他们的路。\n在与计算机相关的论坛中，喷子现象尤其严重，我认为这是由于你在那里找到的那类人。他们中的大多数人（包括我自己）处理抽象想法比处理人更舒服。黑客即使在当面也可能很唐突。把他们放在匿名论坛上，问题就更严重了。\n喷子的第三个原因是无能。如果你不同意某件事，说\u0026quot;你很烂\u0026quot;比弄清楚并准确解释你不同意什么要容易。这样你也可以免于反驳。在这方面，喷子很像涂鸦。涂鸦发生在雄心和无能的交叉点：人们想在世界留下自己的印记，但除了真正在世界上留下印记外没有其他方式。[2]\n最后一个促成因素是论坛的文化。喷子就像孩子（很多就是孩子），他们能够表现出广泛的行为，取决于他们认为什么会被容忍。在不允许无礼的地方，大多数人都可以有礼貌。反之亦然。\n有一种喷子的格雷欣法则：喷子愿意使用一个有很多有思想的人在里面的论坛，但有思想的人不愿意使用一个有很多喷子在里面的论坛。这意味着一旦喷子现象占据主导，它往往会成为主流文化。在我开始关注那里的评论线程时，这种情况已经在Slashdot和Digg上发生了，但我看着它在Reddit上发生。\nNews.YC在众多其他事情中是一个实验，看看是否可以避免这种命运。该网站的指南明确要求人们不要说他们不会当面说的话。如果某人开始无礼，其他用户会介入并告诉他们停止。当人们似乎在故意喷子时，我们无情地禁止他们。\n技术调整也可能有帮助。在Reddit上，对你评论的投票不会影响你的业力分数，但在News.YC上会。当人们可以看到自己在同行眼中的声誉在发表混蛋评论后流失时，这似乎确实会影响人们。用户常常会重新考虑并删除此类评论。\n人们可能会担心这会阻止人们表达有争议的想法，但经验上这似乎并没有发生。当人们说了一些实质性的东西并被降级时，他们固执地保留它。人们删除的是俏皮话，因为他们在其中投入的较少。\n到目前为止，这个实验似乎很成功。News.YC上的对话水平与我见过的任何论坛一样高。但我们每天仍然只有大约8,000个独立用户。Reddit在那么小的时候对话也很好。挑战是我们能否保持这种方式。\n我乐观地认为我们会的。我们不仅仅依赖技术技巧。News.YC的核心用户大多是被喷子占领的其他网站的难民。他们对喷子的感觉大致就像古巴或东欧的难民对独裁的感觉。所以有很多人在努力防止这种情况再次发生。\n注释\n[1] 我指的是交流意见场所的一般意义上的论坛。最初的互联网论坛不是网站而是Usenet新闻组。\n[2] 我在这里谈论的是日常涂鸦。有些涂鸦相当令人印象深刻（任何东西如果你做得足够好都会成为艺术），但普通的标签只是视觉垃圾。\n俄语翻译\n"
  },{
    "title": "美国制造",
    "url": "/paul_graham/essays_zh/usa/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n美国制造 2004年11月\n（这是为《黑客与画家》日文版写的新文章。它试图解释为什么美国人有些事情做得好，有些事情做得差。）\n几年前，我的一个意大利朋友乘火车从波士顿到普罗维登斯。她在美国只待了几个星期，还没有看到多少这个国家。她到达时看起来很惊讶。\u0026ldquo;太丑了！\u0026rdquo;\n来自其他富裕国家的人几乎无法想象美国人为造部分的肮脏。在旅行书中，他们主要向你展示自然环境：大峡谷、激流漂流、田野里的马。如果你看到有人造东西的图片，要么是从谨慎距离拍摄的纽约天际线，要么是精心裁剪的缅因州海滨小镇的图像。\n这怎么可能，游客一定想知道。世界上最富有的国家怎么会看起来像这样？\n奇怪的是，这可能不是巧合。美国人有些事情做得好，有些事情做得差。我们擅长制作电影和软件，但不擅长制造汽车和城市建设。我想我们可能擅长我们擅长的事情的原因与我们不擅长我们不擅长的事情的原因相同。我们没有耐心。在美国，如果你想做某事，你不会担心它可能做得很差，或者打破微妙的社会平衡，或者人们可能认为你自视过高。如果你想做某事，就像耐克说的，只管去做。\n这在某些领域效果很好，在其他领域效果很差。我怀疑它在电影和软件中有效，因为它们都是混乱的过程。\u0026ldquo;系统性\u0026quot;是我用来描述优秀程序员编写软件方式的最后一个词。代码不是他们在精心规划后辛苦组装的东西，就像金字塔一样。它是他们投入其中的东西，工作得很快，不断改变想法，就像炭笔画一样。\n在软件中，听起来很矛盾，好的工艺意味着工作得很快。如果你工作缓慢而细致，你最终只会得到最初错误想法的非常精细的实现。工作缓慢而细致是过早优化。最好快速完成原型，看看它给你带来什么新想法。\n听起来制作电影很像制作软件。每部电影都是科学怪人，充满缺陷，通常与最初设想的完全不同。但很有趣，而且完成得相当快。我认为我们在电影和软件中能逃脱这一点，因为它们都是可塑性的媒介。大胆是有回报的。如果在最后一刻两个部分不太吻合，你可以想出一些技巧来至少掩盖问题。\n汽车或城市就不是这样了。它们都是太物理的了。如果汽车行业像软件或电影那样运作，你会通过制造一辆只有五十磅重的汽车，或者在你想停车时折叠成摩托车大小来超越竞争对手。但对于物理产品，有更多的约束。你不会通过戏剧性的创新获胜，而是通过良好的品味和对细节的关注。\n问题是，\u0026ldquo;品味\u0026quot;这个词在美国人耳中听起来有点可笑。它似乎很做作，或轻浮，甚至女性化。蓝州人认为这是\u0026quot;主观的\u0026rdquo;，红州人认为这是给懦夫的。所以在美国，任何真正关心设计的人都将是逆风而行的。\n二十年前，我们常常听到美国汽车行业的问题是工人。现在日本公司在美国建汽车，我们不再听到这种说法了。美国汽车的问题在于设计糟糕。你只要看一眼就能看出来。\nAMC Matador上所有额外的金属板不是工人加上的。这辆车的问题，和今天的美国汽车一样，是它是由营销人员而不是设计师设计的。\n为什么日本人比我们制造更好的汽车？有人说是因为他们的文化鼓励合作。这可能有关。但在这种情况下，他们的文化重视设计和工艺似乎更切中要害。\n几个世纪以来，日本人一直制造比我们在西方更精细的东西。当你看他们在1200年制造的剑时，你简直不敢相信标签上的日期是对的。推测他们的汽车比我们的装配更精确的原因和他们的木工一直如此的原因相同。他们痴迷于把事情做好。\n我们不是。当我们在美国制造东西时，我们的目标只是完成工作。一旦达到那个点，我们采取两条路线之一。我们可以停在那里，得到一些粗糙但可用的东西，就像老虎钳一样。或者我们可以改进它，这通常意味着给它镶嵌上无用的装饰。当我们想让汽车\u0026quot;更好\u0026quot;时，我们在上面加上尾鳍，或者让它更长，或者让窗户更小，取决于当前的时尚。\n房子也是如此。在美国，你要么有一个用两乘四和石膏板粗制滥造的脆弱盒子，要么是一个麦克豪宅——一个用两乘四和石膏板粗制滥造的脆弱盒子，但更大，看起来更戏剧性，充满了昂贵的配件。富人不会得到更好的设计或工艺；他们只是得到标准房子的更大、更显眼的版本。\n我们在这里并不特别珍视设计或工艺。我们喜欢的是速度，我们愿意用丑陋的方式做事来快速完成。在某些领域，比如软件或电影，这是一个净收益。但这不仅仅是因为软件和电影是可塑性的媒介。在这些业务中，设计师（尽管他们通常不这样称呼）有更多的权力。软件公司，至少成功的那些，倾向于由程序员经营。在电影行业，尽管制片人可能会质疑导演，但导演控制着屏幕上出现的大部分内容。因此，美国软件和电影，以及日本汽车，都有这个共同点：负责人关心设计——前者是因为设计师负责，后者是因为整个文化都关心设计。\n我认为大多数日本高管会对制造坏汽车的想法感到恐惧。而美国高管，在内心深处，仍然相信汽车最重要的是它投射的形象。制造好汽车？什么是\u0026quot;好\u0026rdquo;？这太主观了。如果你想知道如何设计汽车，问一个焦点小组。\n美国汽车公司没有依赖自己的内部设计指南针（像亨利·福特那样），而是试图制造营销人员认为消费者想要的东西。但这并不奏效。美国汽车继续失去市场份额。原因是客户不想要他们认为他们想要的东西。\n让焦点小组为你设计汽车只在短期内有效。从长远来看，押注于好设计是有回报的。焦点小组可能会说他们想要当天的虚假功能，但他们更想要的是模仿成熟的买家，他们虽然是少数，但确实关心好设计。最终皮条客和毒贩注意到医生和律师已经从凯迪拉克转向雷克萨斯，也这样做。\n苹果是对美国总体趋势的一个有趣的反例。如果你想买一个不错的CD播放器，你可能会买日本的。但如果你想买MP3播放器，你可能会买iPod。发生了什么？为什么索尼不主导MP3播放器？因为苹果现在进入了消费电子业务，与其他美国公司不同，他们痴迷于好设计。或者更准确地说，他们的CEO是。\n我刚刚得到了一个iPod，它不只是不错。它令人惊讶地好。为了让我感到惊讶，它必须满足我不知道自己拥有的期望。没有焦点小组会发现这些。只有伟大的设计师才能。\n汽车不是我们在美国制造的最糟糕的东西。just-do-it模式失败最戏剧性的地方是我们的城市——或者更准确地说，是远郊。如果房地产开发商在足够大的规模上运作，如果他们建造整个城镇，市场力量会迫使他们建造不会太糟糕的城镇。但他们一次只建造几栋办公楼或郊区街道，结果如此令人沮丧，以至于居民认为飞到欧洲花几周过那里人们的日常生活是一种极大的享受。[1]\n但just-do-it模式确实有优势。它似乎是创造财富和技术创新（几乎是同一件事）的明确赢家。我认为原因是速度。通过制造商品很难创造财富。真正的价值在于新事物，如果你想成为第一个制造某事物的人，快速工作有帮助。无论好坏，just-do-it模式都是快速的，无论你是丹·布里克林在一个周末内编写VisiCalc原型，还是房地产开发商在一个月内建造一整栋劣质公寓。\n如果我必须在just-do-it模式和谨慎模式之间选择，我可能会选择just-do-it。但我们必须选择吗？我们能两全其美吗？美国人能不能在拥有不错的生活场所的同时，不削弱让我们擅长软件的不耐烦、个人主义精神？其他国家能否在它们的技术公司和实验室中引入更多个人主义，而不会让它变成购物商场？我是乐观的。对其他国家来说更难说，但在美国，至少我认为我们可以两全其美。\n苹果是一个鼓舞人心的例子。他们设法保留了编写软件所需的不耐烦、黑客精神。然而，当你拿起一个新的苹果笔记本电脑时，嗯，它看起来不像美国制造的。它太完美了。看起来好像它一定是由瑞典或日本公司制造的。\n在许多技术中，第二代具有更高的分辨率。为什么在设计上一般不是这样？我认为我们将逐渐看到民族特征被职业特征所取代：日本的黑客将被允许表现出一种现在看起来不像日本的固执，而美国的产品将以一种现在看起来不像美国的对品味的坚持来设计。也许未来最成功的国家将是那些最愿意忽视现在被认为是民族特征的国家，并用最有效的方式做每种工作。比赛吧。\n",
    "description": "",
    "tags": ["美国文化","设计","制造业","创新","商业","比较"],
    "categories": [],
    "content": "→ English Version\n美国制造 2004年11月\n（这是为《黑客与画家》日文版写的新文章。它试图解释为什么美国人有些事情做得好，有些事情做得差。）\n几年前，我的一个意大利朋友乘火车从波士顿到普罗维登斯。她在美国只待了几个星期，还没有看到多少这个国家。她到达时看起来很惊讶。\u0026ldquo;太丑了！\u0026rdquo;\n来自其他富裕国家的人几乎无法想象美国人为造部分的肮脏。在旅行书中，他们主要向你展示自然环境：大峡谷、激流漂流、田野里的马。如果你看到有人造东西的图片，要么是从谨慎距离拍摄的纽约天际线，要么是精心裁剪的缅因州海滨小镇的图像。\n这怎么可能，游客一定想知道。世界上最富有的国家怎么会看起来像这样？\n奇怪的是，这可能不是巧合。美国人有些事情做得好，有些事情做得差。我们擅长制作电影和软件，但不擅长制造汽车和城市建设。我想我们可能擅长我们擅长的事情的原因与我们不擅长我们不擅长的事情的原因相同。我们没有耐心。在美国，如果你想做某事，你不会担心它可能做得很差，或者打破微妙的社会平衡，或者人们可能认为你自视过高。如果你想做某事，就像耐克说的，只管去做。\n这在某些领域效果很好，在其他领域效果很差。我怀疑它在电影和软件中有效，因为它们都是混乱的过程。\u0026ldquo;系统性\u0026quot;是我用来描述优秀程序员编写软件方式的最后一个词。代码不是他们在精心规划后辛苦组装的东西，就像金字塔一样。它是他们投入其中的东西，工作得很快，不断改变想法，就像炭笔画一样。\n在软件中，听起来很矛盾，好的工艺意味着工作得很快。如果你工作缓慢而细致，你最终只会得到最初错误想法的非常精细的实现。工作缓慢而细致是过早优化。最好快速完成原型，看看它给你带来什么新想法。\n听起来制作电影很像制作软件。每部电影都是科学怪人，充满缺陷，通常与最初设想的完全不同。但很有趣，而且完成得相当快。我认为我们在电影和软件中能逃脱这一点，因为它们都是可塑性的媒介。大胆是有回报的。如果在最后一刻两个部分不太吻合，你可以想出一些技巧来至少掩盖问题。\n汽车或城市就不是这样了。它们都是太物理的了。如果汽车行业像软件或电影那样运作，你会通过制造一辆只有五十磅重的汽车，或者在你想停车时折叠成摩托车大小来超越竞争对手。但对于物理产品，有更多的约束。你不会通过戏剧性的创新获胜，而是通过良好的品味和对细节的关注。\n问题是，\u0026ldquo;品味\u0026quot;这个词在美国人耳中听起来有点可笑。它似乎很做作，或轻浮，甚至女性化。蓝州人认为这是\u0026quot;主观的\u0026rdquo;，红州人认为这是给懦夫的。所以在美国，任何真正关心设计的人都将是逆风而行的。\n二十年前，我们常常听到美国汽车行业的问题是工人。现在日本公司在美国建汽车，我们不再听到这种说法了。美国汽车的问题在于设计糟糕。你只要看一眼就能看出来。\nAMC Matador上所有额外的金属板不是工人加上的。这辆车的问题，和今天的美国汽车一样，是它是由营销人员而不是设计师设计的。\n为什么日本人比我们制造更好的汽车？有人说是因为他们的文化鼓励合作。这可能有关。但在这种情况下，他们的文化重视设计和工艺似乎更切中要害。\n几个世纪以来，日本人一直制造比我们在西方更精细的东西。当你看他们在1200年制造的剑时，你简直不敢相信标签上的日期是对的。推测他们的汽车比我们的装配更精确的原因和他们的木工一直如此的原因相同。他们痴迷于把事情做好。\n我们不是。当我们在美国制造东西时，我们的目标只是完成工作。一旦达到那个点，我们采取两条路线之一。我们可以停在那里，得到一些粗糙但可用的东西，就像老虎钳一样。或者我们可以改进它，这通常意味着给它镶嵌上无用的装饰。当我们想让汽车\u0026quot;更好\u0026quot;时，我们在上面加上尾鳍，或者让它更长，或者让窗户更小，取决于当前的时尚。\n房子也是如此。在美国，你要么有一个用两乘四和石膏板粗制滥造的脆弱盒子，要么是一个麦克豪宅——一个用两乘四和石膏板粗制滥造的脆弱盒子，但更大，看起来更戏剧性，充满了昂贵的配件。富人不会得到更好的设计或工艺；他们只是得到标准房子的更大、更显眼的版本。\n我们在这里并不特别珍视设计或工艺。我们喜欢的是速度，我们愿意用丑陋的方式做事来快速完成。在某些领域，比如软件或电影，这是一个净收益。但这不仅仅是因为软件和电影是可塑性的媒介。在这些业务中，设计师（尽管他们通常不这样称呼）有更多的权力。软件公司，至少成功的那些，倾向于由程序员经营。在电影行业，尽管制片人可能会质疑导演，但导演控制着屏幕上出现的大部分内容。因此，美国软件和电影，以及日本汽车，都有这个共同点：负责人关心设计——前者是因为设计师负责，后者是因为整个文化都关心设计。\n我认为大多数日本高管会对制造坏汽车的想法感到恐惧。而美国高管，在内心深处，仍然相信汽车最重要的是它投射的形象。制造 …"
  },{
    "title": "股权方程式",
    "url": "/paul_graham/essays_zh/equity/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n股权方程式 2007年7月\n投资者想要给你钱来换取你创业公司的一定股份。你应该接受吗？你即将雇佣第一个员工。应该给他多少股票？\n这些是创始人面临的最难的问题之一。然而两个问题都有相同的答案：\n1/(1 - n)\n每当你在用公司的股票交换任何东西时，无论是金钱、员工还是与另一家公司的交易，决定是否进行的测试都是相同的。如果你用股票换取的东西能够足够改善你的平均结果，使得你剩下的(100 - n)%的股份比整个公司在交易前的价值还要高，那么你就应该放弃公司n%的股份。\n例如，如果一个投资者想购买你公司的一半股份，这项投资必须改善你的平均结果多少才能让你盈亏平衡？显然，它必须使公司价值翻倍：如果你用公司的一半股份换取某种能使公司平均结果翻倍以上的东西，你就净赚了。你拥有某个价值翻倍以上的东西的一半份额。\n在一般情况下，如果你放弃的公司比例是n，如果这项交易使公司的价值超过1/(1 - n)，那么这就是一个好交易。\n例如，假设Y Combinator提议资助你，换取你公司7%的股份。在这种情况下，n是.07，1/(1 - n)是1.075。所以如果你相信我们能使你的平均结果提高超过7.5%，你就应该接受这笔交易。如果我们使你的结果提高10%，你就净赚了，因为你持有的剩余.93股份价值.93 x 1.1 = 1.023。[1]\n股权方程式告诉我们的一件事是，至少在财务上，从顶级风险投资公司拿钱可以是一笔非常好的交易。Sequoia的Greg Mcadoo最近在YC晚宴上说，当Sequoia单独投资时，他们喜欢拿一家公司大约30%的股份。1/.7 = 1.43，这意味着如果他们能使你的结果提高超过43%，这笔交易就值得接受。对于一般的创业公司来说，这将是一个非凡的便宜交易。光是能够说他们得到了Sequoia的资助就能提高一般创业公司的前景超过43%，即使他们实际上从来没有拿到钱。\nSequoia之所以是这么好的交易，是因为他们拿取的公司比例人为地偏低。他们甚至不试图为他们的投资获得市场价格；他们限制他们的持股量，给创始人留下足够的股份，让他们觉得公司仍然是他们的。\n问题是Sequoia每年收到大约6000份商业计划，资助其中大约20份，所以获得这个好交易的机会是300分之1。那些通过的公司不是一般的创业公司。\n当然，在风险投资交易中还有其他因素需要考虑。它从来不仅仅是金钱和股票的直接交易。但如果是的话，从顶级公司拿钱通常会是便宜货。\n在给员工股票时，你可以使用相同的公式，但它以相反的方式运作。如果i是公司增加某个新人后的平均结果，那么他们价值n，使得i = 1/(1 - n)。这意味着n = (i - 1)/i。\n例如，假设你只有两个创始人，你想雇佣一个额外的黑客，他非常优秀，你觉得他会使整个公司的平均结果提高20%。n = (1.2 - 1)/1.2 = .167。所以如果你用公司16.7%的股份交换他，你就会盈亏平衡。\n这并不意味着16.7%是给他的正确股票数量。股票不是雇佣某人的唯一成本：通常还有工资和开销。如果公司在这笔交易中仅仅盈亏平衡，就没有理由这样做。\n我认为要把工资和开销转换为股票，你应该将年费率乘以大约1.5。大多数创业公司要么快速增长，要么死亡；如果你死亡，你不必付钱给这个人；如果你快速增长，你将用明年的估值支付明年的工资，那应该是今年的3倍。如果你的估值每年增长3倍，新员工的工资和开销的总股票成本是当前估值的1.5年成本。[2]\n公司需要多少额外的利润作为交易的\u0026quot;激活能\u0026quot;？因为这实际上是公司雇佣的利润，市场将决定这一点：如果你是一个热门机会，你可以收取更多。\n让我们通过一个例子。假设公司想在上述新雇佣上赚取50%的\u0026quot;利润\u0026quot;。所以从16.7%中减去三分之一，我们得到11.1%作为他的\u0026quot;零售\u0026quot;价格。进一步假设他每年的工资和开销成本是6万美元，x 1.5 = 9万美元总额。如果公司的估值是200万美元，9万美元是4.5%。11.1% - 4.5% = 6.6%的报价。\n顺便说一下，注意早期员工拿低工资是多么重要。这直接来自于本可以给他们的股票。\n显然，这些数字有很大的变化空间。我不是说股票赠与现在可以简化为公式。最终你总是要猜测。但至少知道你在猜测什么。如果你基于直觉选择一个数字，或者使用风险投资公司提供的典型赠与规模表格，理解这些是什么的估计。\n更一般地说，当你做出任何涉及股权的决定时，用1/(1 - n)来检验它是否有意义。交易股权后你应该总是感觉更富有。如果交易没有足够增加你剩余股份的价值使你净赚，你就不会（或不应该）做这笔交易。\n注释 [1] 这就是我们无法相信有人会认为Y Combinator是笔坏交易的原因。真的有人认为我们在三个月内无法将创业公司的前景提高7.5%吗？\n[2] 当前估值的明显选择是你上一轮融资的投后估值。然而，这可能低估了公司，因为（a）除非你的上一轮刚发生，公司可能价值更高，（b）早期融资的估值通常反映了投资者的其他一些贡献。\n感谢Sam Altman、Trevor Blackwell、Paul Buchheit、Hutch Fishman、David Hornik、Paul Kedrosky、Jessica Livingston、Gary Sabot和Joshua Schachter阅读本文草稿。\n",
    "description": "",
    "tags": ["股权","创业","融资","招聘","估值","投资者","员工","股票"],
    "categories": [],
    "content": "→ English Version\n股权方程式 2007年7月\n投资者想要给你钱来换取你创业公司的一定股份。你应该接受吗？你即将雇佣第一个员工。应该给他多少股票？\n这些是创始人面临的最难的问题之一。然而两个问题都有相同的答案：\n1/(1 - n)\n每当你在用公司的股票交换任何东西时，无论是金钱、员工还是与另一家公司的交易，决定是否进行的测试都是相同的。如果你用股票换取的东西能够足够改善你的平均结果，使得你剩下的(100 - n)%的股份比整个公司在交易前的价值还要高，那么你就应该放弃公司n%的股份。\n例如，如果一个投资者想购买你公司的一半股份，这项投资必须改善你的平均结果多少才能让你盈亏平衡？显然，它必须使公司价值翻倍：如果你用公司的一半股份换取某种能使公司平均结果翻倍以上的东西，你就净赚了。你拥有某个价值翻倍以上的东西的一半份额。\n在一般情况下，如果你放弃的公司比例是n，如果这项交易使公司的价值超过1/(1 - n)，那么这就是一个好交易。\n例如，假设Y Combinator提议资助你，换取你公司7%的股份。在这种情况下，n是.07，1/(1 - n)是1.075。所以如果你相信我们能使你的平均结果提高超过7.5%，你就应该接受这笔交易。如果我们使你的结果提高10%，你就净赚了，因为你持有的剩余.93股份价值.93 x 1.1 = 1.023。[1]\n股权方程式告诉我们的一件事是，至少在财务上，从顶级风险投资公司拿钱可以是一笔非常好的交易。Sequoia的Greg Mcadoo最近在YC晚宴上说，当Sequoia单独投资时，他们喜欢拿一家公司大约30%的股份。1/.7 = 1.43，这意味着如果他们能使你的结果提高超过43%，这笔交易就值得接受。对于一般的创业公司来说，这将是一个非凡的便宜交易。光是能够说他们得到了Sequoia的资助就能提高一般创业公司的前景超过43%，即使他们实际上从来没有拿到钱。\nSequoia之所以是这么好的交易，是因为他们拿取的公司比例人为地偏低。他们甚至不试图为他们的投资获得市场价格；他们限制他们的持股量，给创始人留下足够的股份，让他们觉得公司仍然是他们的。\n问题是Sequoia每年收到大约6000份商业计划，资助其中大约20份，所以获得这个好交易的机会是300分之1。那些通过的公司不是一般的创业公司。\n当然，在风险投资交易中还有其他因素需要考虑。它从来不仅仅是金钱和股票的直接交易。但如果是的话，从顶级公司拿钱通常会是便宜货。\n在给员工股票时，你可以使用相同的公式，但它以相反的方式运作。如果i是公司增加某个新人后的平均结果，那么他们价值n，使得i = 1/(1 - n)。这意味着n = (i - 1)/i。\n例如，假设你只有两个创始人，你想雇佣一个额外的黑客，他非常优秀，你觉得他会使整个公司的平均结果提高20%。n = (1.2 - 1)/1.2 = .167。所以如果你用公司16.7%的股份交换他，你就会盈亏平衡。\n这并不意味着16.7%是给他的正确股票数量。股票不是雇佣某人的唯一成本：通常还有工资和开销。如果公司在这笔交易中仅仅盈亏平衡，就没有理由这样做。\n我认为要把工资和开销转换为股票，你应该将年费率乘以大约1.5。大多数创业公司要么快速增长，要么死亡；如果你死亡，你不必付钱给这个人；如果你快速增长，你将用明年的估值支付明年的工资，那应该是今年的3倍。如果你的估值每年增长3倍，新员工的工资和开销的总股票成本是当前估值的1.5年成本。[2]\n公司需要多少额外的利润作为交易的\u0026quot;激活能\u0026quot;？因为这实际上是公司雇佣的利润，市场将决定这一点：如果你是一个热门机会，你可以收取更多。\n让我们通过一个例子。假设公司想在上述新雇佣上赚取50%的\u0026quot;利润\u0026quot;。所以从16.7%中减去三分之一，我们得到11.1%作为他的\u0026quot;零售\u0026quot;价格。进一步假设他每年的工资和开销成本是6万美元，x 1.5 = 9万美元总额。如果公司的估值是200万美元，9万美元是4.5%。11.1% - 4.5% = 6.6%的报价。\n顺便说一下，注意早期员工拿低工资是多么重要。这直接来自于本可以给他们的股票。\n显然，这些数字有很大的变化空间。我不是说股票赠与现在可以简化为公式。最终你总是要猜测。但至少知道你在猜测什么。如果你基于直觉选择一个数字，或者使用风险投资公司提供的典型赠与规模表格，理解这些是什么的估计。\n更一般地说，当你做出任何涉及股权的决定时，用1/(1 - n)来检验它是否有意义。交易股权后你应该总是感觉更富有。如果交易没有足够增加你剩余股份的价值使你净赚，你就不会（或不应该）做这笔交易。\n注释 [1] 这就是我们无法相信有人会认为Y Combinator是笔坏交易的原因。真的有人 …"
  },{
    "title": "自己的项目",
    "url": "/paul_graham/essays_zh/own/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n自己的项目 2021年6月\n几天前，在从学校回家的路上，我九岁的儿子告诉我他迫不及待想回家继续写他正在写的故事。这让我比听到他说的任何话都高兴——不仅因为他对自己的故事感到兴奋，还因为他发现了这种工作方式。做自己的项目与普通工作的不同，就像滑冰与行走的区别。它更有趣，但也更有效率。\n在这种意义上滑冰的人完成了多少伟大的工作？如果不是全部，那肯定是很大一部分。\n做自己的项目有特别之处。我不会说你更快乐。更好的词应该是兴奋或投入。当事情进展顺利时你很快乐，但通常不是。当我写散文时，大部分时间我都很担心和困惑：担心散文会写得很糟，困惑因为我在摸索一些我无法清楚看到的想法。我能用语言把它固定下来吗？最后通常可以，只要我花足够长的时间，但我从不确定；前几次尝试经常失败。\n当事情成功时你有快乐的时刻，但它们不会持续很久，因为然后你就要面对下一个问题。那么为什么要做呢？因为对于喜欢这种方式工作的人来说，没有其他感觉如此正确。你感觉自己像是栖息地里的动物，做着你注定要做的事情——不一定总是快乐，但清醒而充满活力。\n许多孩子体验了做自己的项目的兴奋。困难的部分是让这与成人后的工作汇合。我们的习俗使这变得更困难。我们对待\u0026quot;玩耍\u0026quot;和\u0026quot;爱好\u0026quot;与\u0026quot;工作\u0026quot;在质上不同。建树屋的孩子不清楚有一条（虽然很长的）从建筑或工程到树屋的直接路线。我们没有指出这条路线，而是隐藏它，通过含蓄地对待孩子做的事情与真实工作不同。[1]\n我们没有告诉孩子他们的树屋可能在通往成人工作的道路上，而是告诉他们道路通过学校。不幸的是，学校工作往往与做自己的项目非常不同。它通常既不是项目，也不是自己的。所以随着学校变得更严肃，做自己的项目即使能幸存，也只是旁边的一条细线。\n想到所有的高中生转身背弃建造树屋，乖乖坐在教室里学习达尔文或牛顿以通过考试，有点可悲，而使达尔文和牛顿出名的工作实际上在精神上更接近建造树屋而不是为考试学习。\n如果我必须选择我的孩子获得好成绩和做自己的雄心勃勃的项目之间，我会选择项目。不是因为我是溺爱的父母，而是因为我经历过另一端，我知道哪个更有预测价值。当我为Y Combinator挑选初创公司时，我不关心申请人的成绩。但如果他们做过自己的项目，我想了解那些项目的一切。[2]\n学校可能是现在的样子不可避免。我不是说我们必须重新设计它（虽然我不是说我们不），只是我们应该理解它对我们工作态度的影响——它引导我们走向尽责的埋头苦干式工作，经常用竞争作为诱饵，远离滑冰。\n偶尔学校工作会成为自己的项目。每当我必须写论文时，那就会成为我自己的项目——讽刺的是，除了英语课，因为英语课必须写的东西太虚假了。当我上大学开始上计算机科学课时，我必须写的程序成为我自己的项目。每当我在写作或编程时，我通常都在滑冰，从那时起一直如此。\n那么自己的项目的边界到底在哪里？这是一个有趣的问题，部分因为答案如此复杂，部分因为利害关系如此之大。工作可以是自己的有两种意义：1）你是自愿做，而不是仅仅因为有人告诉你做，2）你独立做。\n前者的边界相当清晰。非常关心自己工作的人通常对拉和被推之间的区别非常敏感，工作往往属于一类或另一类。但测试不仅仅是是否有人告诉你做某事。你可以选择做被告知做的事情。实际上，你可以比告诉你做的人更彻底地拥有它。\n例如，数学作业对大多数人来说是被告知做的事情。但对我父亲来说，他是个数学家，不是。我们大多数人认为数学书中的问题是测试或发展我们对每节解释的材料知识的方法。但对我父亲来说，问题是重要的部分，文本只是一种注释。每当他得到一本新的数学书时，对他来说就像得到了一个谜题：这是一套新的要解决的问题，他会立即开始解决所有问题。\n项目是自己的另一种意义——独立做——有更柔和的边界。它逐渐过渡到协作。有趣的是，它以两种不同方式过渡到协作。协作的一种方式是共享一个项目。例如，当两个数学家在一次对话中协作形成一个证明时。另一种方式是多个人做自己的独立项目，像拼图一样组合在一起。例如，当一个人写书的文本，另一个人做平面设计时。[3]\n这两条通向协作的路径当然可以结合。但在适当的条件下，做自己的项目的兴奋感可以保持相当长时间，才在大组织的湍急工作流中瓦解。实际上，成功组织的历史部分是保留这种兴奋感技术的历史。[4]\n制造原始Macintosh的团队是这种现象的很好例子。像Burrell Smith、Andy Hertzfeld、Bill Atkinson和Susan Kare这样的人不仅仅是听从命令。他们不是Steve Jobs打出的网球球，而是Steve Jobs释放的火箭。他们之间有很多协作，但他们似乎都 individually 感受到了做自己的项目的兴奋感。\n在Andy Hertzfeld关于Macintosh的书中，他描述了他们如何在晚餐后回到办公室，工作到深夜。从未经历过对他们兴奋的项目的工作 thrill 的人无法区分这种长时间工作与血汗工厂和锅炉房发生的工作，但它们处于光谱的两端。这就是为什么教条地坚持\u0026quot;工作/生活平衡\u0026quot;是错误的。实际上，\u0026ldquo;工作/生活\u0026quot;这个表达本身就体现了错误：它假设工作和生活是不同的。对于那些\u0026quot;工作\u0026quot;一词自动意味着尽责的埋头苦干式的人来说，它们确实如此。但对于滑冰者来说，工作和生活的关系用连字符比斜杠更好地表示。我不想做任何我不想让它占据我生活的工作。\n当然，当你制造像Macintosh这样的东西时，更容易达到这种动机水平。新事物很容易感觉像你自己的项目。这就是程序员倾向于重写不需要重写的东西，以及编写已经存在的东西的自己的版本的趋势的原因之一。这有时让经理们惊慌，按打字的总字符数衡量，这很少是最佳解决方案。但它不总是仅仅由傲慢或无知驱动。从头开始写代码也更有回报——如此有回报，以至于好的程序员最终净领先，尽管字符的惊人浪费。实际上，这可能是资本主义的优势之一，它鼓励这种重写。需要软件做某事的公司不能使用另一家公司已经写的来做这件事的软件，因此必须写自己的，这通常结果更好。[5]\n滑冰和解决新问题之间的自然对齐是初创公司回报如此之高的原因之一。未解决问题的市场价格不仅更高，你在解决它们时还能获得生产力折扣。实际上，你获得生产力的双重增加：当你在做clean-sheet设计时，更容易招募滑冰者，他们可以把所有时间都花在滑冰上。\nSteve Jobs从观察Steve Wozniak中知道一两件关于滑冰者的事情。如果你能找到合适的人，你只需要告诉他们在最高层次做什么。他们会处理细节。实际上，他们坚持这样。要让项目感觉像你自己的，你必须有足够的自主权。你不能按订单工作，或被官僚主义拖慢。\n确保自主权的一种方法是根本没有老板。有两种方法：自己做老板，以及在下班时间做项目。虽然它们在财务上处于规模的两端，但初创公司和开源项目有很多共同点，包括它们通常由滑冰者运营。实际上，从规模的一端到另一端有一个虫洞：发现初创公司想法的最好方法之一就是为了好玩而做项目。\n如果你的项目是赚钱的那种，很容易在它们上面工作。当它们不是时更难。通常最困难的部分是士气。这就是成年人比孩子更难的地方。孩子只是跳进去建造他们的树屋，不担心是否在浪费时间，或与其他树屋相比如何。坦率地说，我们可以从这里的孩子身上学到很多。大多数成年人为\u0026quot;真实\u0026quot;工作设定的高标准并不总是对我们有利。\n自己项目最重要的阶段在开始时：当你从认为做x可能很酷到实际做x。在这一点上，高标准不仅无用而且有害。有少数人开始太多新项目，但我怀疑更多的人因为害怕失败而不开始那些如果开始就会成功的项目。\n但如果我们作为孩子不能从我们的树屋在通往成人项目道路上的知识中受益，我们至少可以作为成年人从我们的项目在延伸回树屋的道路上受益。记得你作为孩子开始新事物时那种无所谓的自信吗？那将是重新获得的强大东西。\n如果作为成年人保留那种自信更难，我们至少往往更清楚我们在做什么。孩子从一种工作跳到或被赶到另一种工作，几乎没有意识到发生在他们身上的事情。而我们更了解不同类型的工作，对做什么有更多控制。理想情况下，我们可以两全其美：故意选择做自己的项目，并在开始新项目时无所谓的自信。\n注释 [1] \u0026ldquo;Hobby\u0026quot;是个奇怪的词。现在它意味着不是真实工作的工作——不会被评判的工作——但最初它只是意味着一种相当一般意义上的痴迷（甚至是政治观点），一个人隐喻地骑着一个儿童骑的木马。很难说它最近、更窄的意义是变好还是变坏。肯定有很多误报——很多最终变得重要但最初被视为仅仅是爱好的项目。但另一方面，这个概念为早期丑小鸭阶段的项目提供了宝贵的掩护。\n[2] 虎爸虎妈，就像父母经常做的那样，在打上一场战争。在旧时代，当成功的道路是在攀登某些预定义梯子时获得证书，成绩更重要。但他们的策略专注于成绩也好。如果他们入侵项目领域，从而通过强迫孩子做这种工作给他们带来对这种工作的厌恶，那将是多么可怕。成绩已经是一个 grim、虚假的世界，父母干涉不会造成太大伤害，但做自己的项目是更微妙、更私密的事情，很容易被损坏。\n[3] 在自己的项目上工作与与他人协作之间的复杂、逐渐的边界是关于\u0026quot;孤独天才\u0026quot;的想法有如此多分歧的原因之一。在实践中，人们以各种不同方式协作（或不协作），但孤独天才的想法绝对不是神话。它有一个与某种工作方式相关的核心真理。\n[4] 协作也很强大。最佳组织将以对彼此造成最小损害的方式结合协作和所有权。有趣的是，公司和大学部门从相反的方向接近这个理想：公司坚持协作，偶尔也设法既招募滑冰者又允许他们滑冰，大学部门坚持独立研究的能力（按惯例被视为滑冰，无论是否），他们雇佣的人按他们选择的程度协作。\n[5] 如果一家公司能以这样的方式设计其软件，使最好的新来的程序员总是得到clean sheet，它可以有一种永恒的青春。这可能不是不可能的。如果你有一个定义游戏规则足够清晰的软件骨架，个别程序员可以写自己的玩家。\n感谢Trevor Blackwell、Paul Buchheit、Andy Hertzfeld、Jessica Livingston和Peter Norvig阅读本文草稿。\n",
    "description": "",
    "tags": ["项目","创造力","动机","工作","热情","独立性","教育"],
    "categories": [],
    "content": "→ English Version\n自己的项目 2021年6月\n几天前，在从学校回家的路上，我九岁的儿子告诉我他迫不及待想回家继续写他正在写的故事。这让我比听到他说的任何话都高兴——不仅因为他对自己的故事感到兴奋，还因为他发现了这种工作方式。做自己的项目与普通工作的不同，就像滑冰与行走的区别。它更有趣，但也更有效率。\n在这种意义上滑冰的人完成了多少伟大的工作？如果不是全部，那肯定是很大一部分。\n做自己的项目有特别之处。我不会说你更快乐。更好的词应该是兴奋或投入。当事情进展顺利时你很快乐，但通常不是。当我写散文时，大部分时间我都很担心和困惑：担心散文会写得很糟，困惑因为我在摸索一些我无法清楚看到的想法。我能用语言把它固定下来吗？最后通常可以，只要我花足够长的时间，但我从不确定；前几次尝试经常失败。\n当事情成功时你有快乐的时刻，但它们不会持续很久，因为然后你就要面对下一个问题。那么为什么要做呢？因为对于喜欢这种方式工作的人来说，没有其他感觉如此正确。你感觉自己像是栖息地里的动物，做着你注定要做的事情——不一定总是快乐，但清醒而充满活力。\n许多孩子体验了做自己的项目的兴奋。困难的部分是让这与成人后的工作汇合。我们的习俗使这变得更困难。我们对待\u0026quot;玩耍\u0026quot;和\u0026quot;爱好\u0026quot;与\u0026quot;工作\u0026quot;在质上不同。建树屋的孩子不清楚有一条（虽然很长的）从建筑或工程到树屋的直接路线。我们没有指出这条路线，而是隐藏它，通过含蓄地对待孩子做的事情与真实工作不同。[1]\n我们没有告诉孩子他们的树屋可能在通往成人工作的道路上，而是告诉他们道路通过学校。不幸的是，学校工作往往与做自己的项目非常不同。它通常既不是项目，也不是自己的。所以随着学校变得更严肃，做自己的项目即使能幸存，也只是旁边的一条细线。\n想到所有的高中生转身背弃建造树屋，乖乖坐在教室里学习达尔文或牛顿以通过考试，有点可悲，而使达尔文和牛顿出名的工作实际上在精神上更接近建造树屋而不是为考试学习。\n如果我必须选择我的孩子获得好成绩和做自己的雄心勃勃的项目之间，我会选择项目。不是因为我是溺爱的父母，而是因为我经历过另一端，我知道哪个更有预测价值。当我为Y Combinator挑选初创公司时，我不关心申请人的成绩。但如果他们做过自己的项目，我想了解那些项目的一切。[2]\n学校可能是现在的样子不可避免。我不是说我们必须重新设计它（虽然我不是说我们不），只是我们应该理解它对我们工作态度的影响——它引导我们走向尽责的埋头苦干式工作，经常用竞争作为诱饵，远离滑冰。\n偶尔学校工作会成为自己的项目。每当我必须写论文时，那就会成为我自己的项目——讽刺的是，除了英语课，因为英语课必须写的东西太虚假了。当我上大学开始上计算机科学课时，我必须写的程序成为我自己的项目。每当我在写作或编程时，我通常都在滑冰，从那时起一直如此。\n那么自己的项目的边界到底在哪里？这是一个有趣的问题，部分因为答案如此复杂，部分因为利害关系如此之大。工作可以是自己的有两种意义：1）你是自愿做，而不是仅仅因为有人告诉你做，2）你独立做。\n前者的边界相当清晰。非常关心自己工作的人通常对拉和被推之间的区别非常敏感，工作往往属于一类或另一类。但测试不仅仅是是否有人告诉你做某事。你可以选择做被告知做的事情。实际上，你可以比告诉你做的人更彻底地拥有它。\n例如，数学作业对大多数人来说是被告知做的事情。但对我父亲来说，他是个数学家，不是。我们大多数人认为数学书中的问题是测试或发展我们对每节解释的材料知识的方法。但对我父亲来说，问题是重要的部分，文本只是一种注释。每当他得到一本新的数学书时，对他来说就像得到了一个谜题：这是一套新的要解决的问题，他会立即开始解决所有问题。\n项目是自己的另一种意义——独立做——有更柔和的边界。它逐渐过渡到协作。有趣的是，它以两种不同方式过渡到协作。协作的一种方式是共享一个项目。例如，当两个数学家在一次对话中协作形成一个证明时。另一种方式是多个人做自己的独立项目，像拼图一样组合在一起。例如，当一个人写书的文本，另一个人做平面设计时。[3]\n这两条通向协作的路径当然可以结合。但在适当的条件下，做自己的项目的兴奋感可以保持相当长时间，才在大组织的湍急工作流中瓦解。实际上，成功组织的历史部分是保留这种兴奋感技术的历史。[4]\n制造原始Macintosh的团队是这种现象的很好例子。像Burrell Smith、Andy Hertzfeld、Bill Atkinson和Susan Kare这样的人不仅仅是听从命令。他们不是Steve Jobs打出的网球球，而是Steve Jobs释放的火箭。他们之间有很多协作，但他们似乎都 individually 感受到了做自己的项目的兴奋感。\n在Andy Hertzfeld …"
  },{
    "title": "致命的困境",
    "url": "/paul_graham/essays_zh/pinch/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n致命的困境 2014年12月\n许多创业公司在死亡前几个月都会经历这样一个阶段：虽然银行里有相当可观的资金，但每月也在大量亏损，收入增长要么不存在，要么平庸。公司有，比如说，6个月的运营资金。或者更残酷地说，6个月后就要破产。他们期望通过从投资者那里筹集更多资金来避免这种情况。[1]\n最后一句话是致命的。\n可能没有什么比创始人更容易自我欺骗的事情了，那就是投资者会有多大兴趣给他们额外资金。第一次说服投资者也很困难，但创始人预料到了这一点。第二次困扰他们的是三种力量的汇合：公司现在比第一次筹集资金时花费更多。投资者对已经筹集过资金的公司要求高得多。公司现在开始被视为失败。第一次筹集资金时，它既不是成功也不是失败；问这个问题为时过早。现在可以问这个问题了，而默认答案是失败，因为此时这是默认结果。\n我将把第一段描述的情况称为\u0026quot;致命的困境\u0026quot;。我尽量避免创造新词，但为这种情况起个名字可能会让创始人突然意识到自己正处于其中。\n致命困境如此危险的原因之一是它是自我强化的。创始人高估筹集更多资金的机会，因此对达到盈利松懈，这进一步降低了他们筹集资金的机会。\n既然你知道了致命困境，如何避免它？Y Combinator告诉筹集资金的创始人要表现得好像这是他们最后能得到的资金。因为这种情况的自我强化性质也反方向起作用：你越不需要进一步投资，就越容易获得。\n如果你已经陷入致命困境怎么办？第一步是重新评估筹集更多资金的可能性。现在，我将通过惊人的洞察力为你做这件事：可能性是零。[2]\n剩下三个选择：你可以关闭公司，你可以增加收入，你可以减少支出。\n如果你确信无论做什么公司都会失败，你应该关闭公司。那样至少你可以退还剩余的资金，并省去你本会花费在看着公司倒闭上的几个月时间。\n不过公司很少必须失败。我在这里真正做的是给你承认你已经放弃的选择。\n如果你不想关闭公司，那就剩下增加收入和减少支出。在大多数创业公司中，支出=人，减少支出=解雇人。[3] 决定解雇人通常很困难，但有一种情况不应该困难：当你已经知道应该解雇某些人但自己不愿承认时。如果是这样，现在就是时候了。\n如果这让你盈利，或者能够让你在剩余资金支持下达到盈利，你已经避免了直接危险。\n否则你有三个选择：你要么解雇优秀员工，要么让部分或所有员工暂时减薪，要么增加收入。\n让员工减薪是一个弱解决方案，只有在问题不太严重时才有效。如果你目前的轨迹几乎无法让你达到盈利，但通过略微减薪可以跨越门槛，你也许能够向大家说明这样做的理由。否则你可能只是在推迟问题，这对那些你提议减薪的人来说会很明显。[4]\n剩下两个选择，解雇优秀员工和赚更多钱。在试图平衡它们时，记住最终目标：成为一家成功的产品公司，即拥有大量人使用的单一产品。\n如果你的困境源于过度招聘，你应该更倾向于解雇人。如果你在甚至不知道要构建什么之前就雇佣了15个人，你创造了一个有缺陷的公司。你需要弄清楚你要构建什么，而用几个人而不是15个人来做可能更容易。另外，这15个人可能甚至不是你最终构建所需产品的人。所以解决方案可能是先收缩，然后确定成长方向。毕竟，如果你带着这15个人一起将公司开向地面，你并没有为他们做什么好事。他们最终都会失去工作，以及他们在这个注定失败的创业公司上花费的所有时间。\n而如果你只有几个人，最好专注于尝试赚更多钱。建议创业公司赚更多钱可能显得轻率，好像可以轻而易举地做到。通常创业公司已经在尽可能努力地销售其产品。我在这里建议的不是更努力地赚钱，而是尝试以不同方式赚钱。例如，如果你只有一个人在销售，其余人在写代码，考虑让所有人都从事销售。当你破产时，更多代码对你有什么用？如果你必须写代码来完成某笔交易，继续做；这源于所有人都从事销售。但只从事能最快获得最多收入的工作。\n另一种不同赚钱方式是销售不同的东西，特别是做更多咨询类工作。我说咨询类是因为从制作产品到纯咨询有一个长长的滑坡，你不必走很远就能开始为客户提供真正有吸引力的东西。虽然你的产品可能还不很有吸引力，但如果你是创业公司，你的程序员通常比客户拥有的程序员优秀得多。或者你可能拥有客户不理解的新领域专业知识。所以如果你将销售对话从\u0026quot;你想买我们的产品吗？\u0026ldquo;稍微改变为\u0026quot;你需要什么愿意付高价的？\u0026ldquo;你可能会发现突然从客户那里获得收入容易多了。\n不过，当你开始这样做时要毫不留情地唯利是图。你正在努力拯救公司免于死亡，所以要让客户大量快速付款。并在尽可能范围内避免咨询的最坏陷阱。理想情况可能是你为客户构建了精确定义的产品衍生版本，否则就是直接产品销售。你保留知识产权，不按小时计费。\n在最好的情况下，这种咨询类工作可能不仅仅是生存的手段，而可能成为定义你公司的那个无法扩展的东西。不要期望它会是这样，但当你深入了解个别用户需求时，要留意那些背后有广阔前景的狭窄机会。\n通常对定制工作的需求如此之大，除非你真的无能，否则在咨询滑坡的某个点上你总能生存。但我不是偶然使用\u0026quot;滑坡\u0026quot;这个词；客户对定制工作的无止境需求总会将你推向底部。所以虽然你可能生存，但现在的问题变成以最小损失和干扰生存。\n好消息是，许多成功的创业公司都经历了濒死体验并继续蓬勃发展。你只需要及时意识到自己濒临死亡。如果你处于致命困境中，你确实濒临死亡。\n注释\n[1] 有少数公司在前一两年无法合理期望赚钱，因为他们构建的产品需要很长时间。对于这些公司，用\u0026quot;进展\u0026quot;代替\u0026quot;收入增长\u0026rdquo;。除非你的初始投资者事先同意你是这样的公司，否则你不是这些公司之一。坦率地说，即使是这些公司也希望自己不是，因为\u0026quot;进展\u0026quot;的非流动性使他们任由投资者摆布。\n[2] 致命困境有一个变体，你的现有投资者通过承诺投资更多来帮助你。或者说，你将他们解读为承诺投资更多，而他们认为他们只是在提到可能性。如果你有8个月或更少的运营资金，解决这个问题的方法是尝试现在就获得资金。那样你要么得到资金，在这种情况下（直接）问题解决，或者至少防止你的投资者帮助你继续对融资前景保持否认。\n[3] 显然，如果你有除了工资外的重要支出可以消除，现在就做。\n[4] 当然，除非问题的根源是你们给自己支付高工资。如果通过将创始人的工资削减到所需最低限度，你可以达到盈利，你应该这样做。但如果你需要读这篇文章才意识到这一点，这是个坏迹象。\n感谢山姆·奥特曼、保罗·布赫海特、杰西卡·利文斯顿和杰夫·拉尔斯顿阅读草稿。\n阿拉伯语翻译\n",
    "description": "",
    "tags": ["创业公司","融资","失败","现金流","生存","企业家精神"],
    "categories": [],
    "content": "→ English Version\n致命的困境 2014年12月\n许多创业公司在死亡前几个月都会经历这样一个阶段：虽然银行里有相当可观的资金，但每月也在大量亏损，收入增长要么不存在，要么平庸。公司有，比如说，6个月的运营资金。或者更残酷地说，6个月后就要破产。他们期望通过从投资者那里筹集更多资金来避免这种情况。[1]\n最后一句话是致命的。\n可能没有什么比创始人更容易自我欺骗的事情了，那就是投资者会有多大兴趣给他们额外资金。第一次说服投资者也很困难，但创始人预料到了这一点。第二次困扰他们的是三种力量的汇合：公司现在比第一次筹集资金时花费更多。投资者对已经筹集过资金的公司要求高得多。公司现在开始被视为失败。第一次筹集资金时，它既不是成功也不是失败；问这个问题为时过早。现在可以问这个问题了，而默认答案是失败，因为此时这是默认结果。\n我将把第一段描述的情况称为\u0026quot;致命的困境\u0026quot;。我尽量避免创造新词，但为这种情况起个名字可能会让创始人突然意识到自己正处于其中。\n致命困境如此危险的原因之一是它是自我强化的。创始人高估筹集更多资金的机会，因此对达到盈利松懈，这进一步降低了他们筹集资金的机会。\n既然你知道了致命困境，如何避免它？Y Combinator告诉筹集资金的创始人要表现得好像这是他们最后能得到的资金。因为这种情况的自我强化性质也反方向起作用：你越不需要进一步投资，就越容易获得。\n如果你已经陷入致命困境怎么办？第一步是重新评估筹集更多资金的可能性。现在，我将通过惊人的洞察力为你做这件事：可能性是零。[2]\n剩下三个选择：你可以关闭公司，你可以增加收入，你可以减少支出。\n如果你确信无论做什么公司都会失败，你应该关闭公司。那样至少你可以退还剩余的资金，并省去你本会花费在看着公司倒闭上的几个月时间。\n不过公司很少必须失败。我在这里真正做的是给你承认你已经放弃的选择。\n如果你不想关闭公司，那就剩下增加收入和减少支出。在大多数创业公司中，支出=人，减少支出=解雇人。[3] 决定解雇人通常很困难，但有一种情况不应该困难：当你已经知道应该解雇某些人但自己不愿承认时。如果是这样，现在就是时候了。\n如果这让你盈利，或者能够让你在剩余资金支持下达到盈利，你已经避免了直接危险。\n否则你有三个选择：你要么解雇优秀员工，要么让部分或所有员工暂时减薪，要么增加收入。\n让员工减薪是一个弱解决方案，只有在问题不太严重时才有效。如果你目前的轨迹几乎无法让你达到盈利，但通过略微减薪可以跨越门槛，你也许能够向大家说明这样做的理由。否则你可能只是在推迟问题，这对那些你提议减薪的人来说会很明显。[4]\n剩下两个选择，解雇优秀员工和赚更多钱。在试图平衡它们时，记住最终目标：成为一家成功的产品公司，即拥有大量人使用的单一产品。\n如果你的困境源于过度招聘，你应该更倾向于解雇人。如果你在甚至不知道要构建什么之前就雇佣了15个人，你创造了一个有缺陷的公司。你需要弄清楚你要构建什么，而用几个人而不是15个人来做可能更容易。另外，这15个人可能甚至不是你最终构建所需产品的人。所以解决方案可能是先收缩，然后确定成长方向。毕竟，如果你带着这15个人一起将公司开向地面，你并没有为他们做什么好事。他们最终都会失去工作，以及他们在这个注定失败的创业公司上花费的所有时间。\n而如果你只有几个人，最好专注于尝试赚更多钱。建议创业公司赚更多钱可能显得轻率，好像可以轻而易举地做到。通常创业公司已经在尽可能努力地销售其产品。我在这里建议的不是更努力地赚钱，而是尝试以不同方式赚钱。例如，如果你只有一个人在销售，其余人在写代码，考虑让所有人都从事销售。当你破产时，更多代码对你有什么用？如果你必须写代码来完成某笔交易，继续做；这源于所有人都从事销售。但只从事能最快获得最多收入的工作。\n另一种不同赚钱方式是销售不同的东西，特别是做更多咨询类工作。我说咨询类是因为从制作产品到纯咨询有一个长长的滑坡，你不必走很远就能开始为客户提供真正有吸引力的东西。虽然你的产品可能还不很有吸引力，但如果你是创业公司，你的程序员通常比客户拥有的程序员优秀得多。或者你可能拥有客户不理解的新领域专业知识。所以如果你将销售对话从\u0026quot;你想买我们的产品吗？\u0026ldquo;稍微改变为\u0026quot;你需要什么愿意付高价的？\u0026ldquo;你可能会发现突然从客户那里获得收入容易多了。\n不过，当你开始这样做时要毫不留情地唯利是图。你正在努力拯救公司免于死亡，所以要让客户大量快速付款。并在尽可能范围内避免咨询的最坏陷阱。理想情况可能是你为客户构建了精确定义的产品衍生版本，否则就是直接产品销售。你保留知识产权，不按小时计费。\n在最好的情况下，这种咨询类工作可能不仅仅是生存的手段，而可能成为定义你公司的那个无法扩展的东西。不要期望它会是这样，但当你 …"
  },{
    "title": "艺术如何能够优秀",
    "url": "/paul_graham/essays_zh/goodart/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n艺术如何能够优秀 2006年12月\n我从小就相信品味只是个人偏好的问题。每个人都有自己喜欢的东西，但没有人的偏好比其他人的更好。没有所谓的品味好这回事。\n就像我从小相信的很多事情一样，这结果是错误的，我将试图解释为什么。\n说没有品味好这回事的一个问题是，这也意味着没有好艺术这回事。如果存在好艺术，那么喜欢它的人就比不喜欢的人有更好的品味。所以如果你抛弃品味的概念，你也必须抛弃艺术是好作品的概念，以及艺术家擅长创作艺术的概念。\n正是扯动了这根线，解开了我对相对主义的童年信仰。当你试图创作东西时，品味就成为一个实际问题。你必须决定下一步该做什么。如果我改变那部分，画作会变得更好吗？如果没有更好这回事，那么你做什么都无所谓。事实上，你画不画都无所谓。你完全可以出去买一个现成的空白画布。如果没有好这回事，那将和西斯廷教堂的天花板一样伟大的成就。当然不那么费力，但如果你能用更少的努力达到同样的表现水平，肯定那更令人印象深刻，而不是更少。\n然而这似乎不太对，是吗？\n观众 我认为这个谜题的关键是记住艺术有观众。艺术有目的，这个目的就是吸引其观众。好艺术（像任何好东西一样）是特别能实现其目的的艺术。\u0026ldquo;吸引\u0026quot;的含义可以变化。有些艺术作品旨在震撼，有些旨在取悦；有些旨在突然出现在你面前，有些则安静地坐在背景中。但所有艺术都必须作用于观众，而且——这里是关键点——观众成员有共同点。\n例如，几乎所有人类都发现人脸引人入胜。这似乎是天生的。婴儿几乎从出生起就能识别人脸。事实上，人脸似乎与我们对它们的兴趣共同进化；脸是身体的广告牌。所以在其他条件相同的情况下，有人脸的绘画比没有人脸的更引人入胜。[1]\n人们容易相信品味仅仅是个人偏好的一个原因是，如果不是这样，你如何挑选出品味更好的人？有数十亿人，每个人都有自己的看法；你有什么理由更喜欢一个而不是另一个？[2]\n但如果观众有很多共同点，你就不必从随机的个人偏见集合中选择一个，因为这个集合不是随机的。所有人都发现人脸引人入胜——几乎可以说是定义如此：人脸识别在我们的DNA中。因此，拥有好艺术的概念，即做好本职工作的艺术，并不需要你挑选出几个人并将他们的意见标记为正确。无论你挑选谁，他们都会发现人脸引人入胜。\n当然，太空外星人可能不会发现人脸引人入胜。但他们可能有与我们共同的其他东西。最常见的例子来源是数学。我期望太空外星人在判断两个证明哪个更好时，大多数时间会与我们意见一致。Erdos这么认为。他把最优雅的证明称为来自上帝之书的东西，而上帝之书显然是普适的。[3]\n一旦你开始谈论观众，你就不必简单地争论品味标准是否存在或不存在。相反，品味是一系列同心圆，就像池塘中的涟漪。有些东西会吸引你和你的朋友，有些会吸引你这个年龄段的大多数人，有些会吸引大多数人，也许还有些会吸引大多数有感知能力的生物（无论这意味着什么）。\n图景比这稍微复杂一些，因为在池塘中间有重叠的涟漪集合。例如，可能有些东西特别吸引男性，或者来自某种文化的人。\n如果好艺术是吸引其观众的艺术，那么当你谈论艺术是好是坏时，你也必须说是为哪个观众。那么，简单地谈论艺术好或坏是没有意义的吗？不，因为一个观众是所有可能的人类集合。我认为当人们说一件艺术作品好时，他们隐含谈论的就是这个观众：他们的意思是它会吸引任何人类。[4]\n这是一个有意义的测试，因为虽然像任何日常概念一样，\u0026ldquo;人类\u0026quot;在边缘上是模糊的，但几乎所有人类都有很多共同点。除了我们对人脸的兴趣外，对我们几乎所有人来说，原色都有特别之处，因为它是我们眼睛工作方式的产物。大多数人类也会发现3D物体的图像引人入胜，因为这似乎也内置在我们的视觉感知中。[5] 在这之下还有边缘检测，这使得具有明确形状的图像比模糊的图像更引人入胜。\n当然，人类的共同点远不止这些。我的目标不是编一份完整的清单，只是表明这里有坚实的基础。人们的偏好不是随机的。所以一个在绘画上工作的艺术家试图决定是否改变某些部分时，不需要想\u0026quot;何必呢？我也可以抛硬币。\u0026ldquo;相反，他可以问\u0026quot;什么会让这幅画对人们更有趣？\u0026ldquo;而你无法通过出去买一个空白画布来等同于米开朗基罗的原因是西斯廷教堂的天花板对人们更有趣。\n许多哲学家很难相信艺术可能存在客观标准。似乎很明显，例如美是观察者头脑中发生的事情，而不是物体的一种属性。因此它是\u0026quot;主观的\u0026quot;而不是\u0026quot;客观的\u0026rdquo;。但事实上，如果你将美的定义缩小到在人类身上以某种方式起作用的东西，并且你观察到人类有多少共同点，结果证明它仍然是物体的一种属性。如果主体都反应相似，你就不必选择某种东西是主体的属性还是客体的属性。好艺术因此是物体的一种属性，就像对人类有毒是物体的一种属性一样：如果它以某种方式一致地影响人类，它就是好艺术。\n错误 那么我们能通过投票来找出最好的艺术是什么吗？毕竟，如果吸引人类是测试标准，我们应该能够直接问他们，对吗？\n嗯，不完全是。对于自然产品，这可能有效。我愿意吃世界人口投票认为最美味的苹果，我可能也愿意去参观他们投票认为最美丽的海滩，但不得不看他们投票认为最好的绘画将是一场冒险。\n人造东西是不同的。首先，艺术家不像苹果树，经常故意试图欺骗我们。有些技巧相当微妙。例如，任何艺术作品都通过其完成程度来设定期望。你不期望在看起来像快速素描的东西中有照片般的准确性。所以一个广泛使用的技巧，特别是在插画家中间，是故意使绘画或素描看起来比实际完成的更快。普通人看到它并想：多么惊人的技巧。这就像在谈话中说些聪明的话，仿佛是你临时想到的，而事实上你前一天就已经想好了。\n另一个远不那么微妙的影响是品牌。如果你去看蒙娜丽莎，你可能会失望，因为它被厚厚的玻璃墙隐藏着，周围是一群疯狂的人群在它前面自拍。你最多只能像在拥挤聚会上看到房间对面的朋友那样看到它。卢浮宫不妨用复制品代替它；没人能分辨出来。然而蒙娜丽莎是一幅小而暗的画。如果你找到从未见过它图像的人，让他们去一个博物馆，它和其他画挂在一起，标签上标着十五世纪未知艺术家的肖像，大多数人会走过而不多看一眼。\n对于普通人来说，品牌在艺术判断中主导所有其他因素。看到他们在复制品中认识的绘画是如此压倒性的，以至于他们作为对一幅绘画的反应被淹没了。\n当然，还有人们对自己玩的把戏。大多数成年人看艺术时担心如果他们不喜欢应该喜欢的东西，会被认为没有文化。这不仅影响他们声称喜欢什么；他们实际上让自己喜欢应该喜欢的东西。\n这就是为什么你不能只是投票。虽然吸引人们是一个有意义的测试，但在实践中你无法测量它，就像你不能在有磁铁坐在旁边的情况下用指南针找到北方一样。有如此强大的错误来源，如果你投票，你测量的只是错误。\n然而，我们可以从另一个方向接近我们的目标，就是使用我们自己作为实验对象。你是人类。如果你想知道人们对一件艺术品的基本反应会是什么，你至少可以通过消除自己判断中的错误来源来接近这一点。\n例如，虽然任何人最初对一幅著名绘画的反应都会被其名声扭曲，但有方法减少其影响。一个是反复回到这幅绘画前。几天后名声消逝，你可以开始把它看作一幅画。另一个是站近。从复制品中熟悉的绘画从十英尺外看更熟悉；靠近时你会看到在复制品中丢失的细节，因此你是第一次看到它们。\n有两种主要错误阻碍我们看到一件艺术作品：你从自己环境中带来的偏见，以及艺术家玩的把戏。把戏是容易纠正的。仅仅意识到它们通常就阻止它们起作用。例如，当我十岁时，我曾对看起来像闪亮金属的喷绘字母印象很深。但一旦你研究它是如何做的，你就会看到这是个相当蹩脚的把戏——属于那种依靠强烈推几个视觉按钮来暂时压倒观众的那种。这就像试图通过向某人喊叫来说服他们。\n不容易受把戏影响的方法是明确寻找并分类它们。当你注意到某种艺术有一丝不诚实气息时，停下来弄清楚发生了什么。当某人明显在迎合容易被欺骗的观众时，无论是制作闪亮东西来给十岁孩子留下印象的人，还是制作明显前卫东西来给准知识分子留下印象的人，学习他们如何做。一旦你看到足够多特定类型把戏的例子，你就开始成为把戏鉴赏家，就像专业魔术师一样。\n什么算作把戏？大致来说，这是以蔑视观众的方式做的事情。例如，1950年代设计法拉利的人可能是在设计他们自己欣赏的汽车。而我怀疑在通用汽车，营销人员告诉设计师：\u0026ldquo;买SUV的大多数人这样做是为了显得男子气，而不是为了越野驾驶。所以不用担心悬挂系统；只要让那家伙看起来尽可能大和强悍。\u0026rdquo; [6]\n我认为通过一些努力，你可以让自己几乎不受把戏影响。更难逃脱自己环境的影响，但你至少可以向那个方向移动。方法是在时间和空间上广泛旅行。如果你去看其他文化中人们喜欢的所有不同种类东西，并了解过去人们喜欢的所有不同东西，你可能会发现它改变了你喜欢的东西。我怀疑你是否能让自己成为一个完全普适的人，仅仅因为你只能在一个时间方向上旅行。但如果你发现一件艺术作品同样会吸引你的朋友、尼泊尔人和古希腊人，你可能找到了什么东西。\n我的主要观点不是如何拥有好品味，而是甚至可能存在这样的事情。而且我认为我已经证明了这一点。存在好艺术这回事。它是吸引人类观众的艺术，由于人类有很多共同点，他们感兴趣的东西不是随机的。既然存在好艺术，也就存在好品味这回事，就是识别它的能力。\n如果我们谈论的是苹果的品味，我会同意品味只是个人偏好。有些人喜欢某些种类的苹果，其他人喜欢其他种类的，但你如何说一种是对的，另一种是错的？[7]\n问题是，艺术不是苹果。艺术是人造的。它带有大量的文化包袱，此外，创作它的人经常试图欺骗我们。大多数人对艺术的判断被这些外来因素主导；他们就像试图在由等量苹果和墨西哥辣椒制成的菜中判断苹果的味道。他们尝到的只是辣椒。所以事实证明你可以挑选出一些人说他们比其他人有更好的品味：他们是那些真正尝到艺术像苹果的人。\n或者更平淡地说，他们是那些（a）难以欺骗，（b）不只是喜欢他们长大的环境中的东西的人。如果你能找到消除了所有这些判断影响的人，你可能仍然看到他们喜欢的东西有变化。但因为人类有这么多共同点，你也会发现他们同意很多事情。他们几乎都会更喜欢西斯廷教堂的天花板而不是空白画布。\n创造它 我写这篇文章是因为我厌倦了听到\u0026quot;品味是主观的\u0026rdquo;，想要一劳永逸地推翻它。任何创作东西的人凭直觉都知道这不是真的。当你试图创作艺术时，懒惰的诱惑和任何其他工作一样大。当然做好工作很重要。然而你可以看到\u0026quot;品味是主观的\u0026quot;即使在艺术界也有多么大的影响力，通过它让人们谈论艺术好或坏时多么紧张。那些工作要求他们判断艺术的人，如策展人，大多使用委婉语，如\u0026quot;重要的\u0026quot;或\u0026quot;有意义的\u0026quot;或（危险地接近）\u0026ldquo;实现完善的\u0026rdquo;。[8]\n我并不幻想能够谈论艺术好或坏会导致谈论它的人说出更有用的话。事实上，\u0026ldquo;品味是主观的\u0026quot;找到如此受欢迎观众的一个原因是，历史上人们关于好品味所说的一般都是胡说八道。\n我想要解放好艺术的想法不是为了那些谈论艺术的人，而是为了那些创作它的人。现在，有抱负的孩子去艺术学校碰壁。他们到达时期望有一天能像他们在书中看到的著名艺术家一样好，而他们学到的第一件事是好的概念已经被退休了。相反，每个人都应该探索自己的个人愿景。[9]\n当我在艺术学校时，有一天我们在看一幅伟大十五世纪绘画的幻灯片，一个学生问\u0026quot;为什么艺术家现在不像那样绘画？\u0026ldquo;房间突然安静下来。虽然很少大声问出来，这个问题不舒服地潜伏在每个艺术学生的脑海后面。就像有人在菲利普莫里斯公司会议上提出肺癌话题一样。\n\u0026ldquo;嗯，\u0026ldquo;教授回答，\u0026ldquo;我们现在感兴趣的是不同的问题。\u0026ldquo;他是个相当不错的人，但在当时我不禁希望我能把他送回十五世纪的佛罗伦萨，向列奥纳多和他的同伴们亲自解释我们已经超越了他们早期、有限的艺术概念。想象一下那个对话。\n事实上，十五世纪佛罗伦萨艺术家创作如此伟大作品的原因之一是他们相信你能创作伟大的作品。[10] 他们竞争激烈，总是试图超越对方，就像今天的数学家或物理学家——也许就像任何真正擅长做任何事情的人。\n你能创作伟大作品的想法不仅仅是有用的错觉。他们实际上是对的。所以认识到可能存在好艺术的最重要后果是它解放艺术家去尝试创作它。对于今年到达艺术学校有抱负的孩子，希望有一天创作伟大作品，我说：当他们告诉你这是天真过时的抱负时不要相信。存在好艺术这回事，如果你尝试创作它，会有人注意的。\n注释 [1] 当然，这并不是说好画必须有人脸，只是每个人的视觉钢琴上都有那个键。在某些情况下你想避免人脸，正是因为它们吸引如此多的注意力。但你可以通过人脸在广告中的普遍性来看它们普遍起作用。\n[2] 它容易相信的另一个原因是它让人们感觉良好。对孩子来说，这个想法就像毒品。在其他所有方面他们不断被告知他们有很多要学的东西。但在这点上他们是完美的。他们的意见和任何成年人一样有分量。你可能应该质疑你小时候相信的任何你如此想相信的东西。\n[3] 证明的优雅性可能是可量化的，意思是可能存在某种正式度量，结果与数学家的判断一致。也许值得尝试为证明制作一种形式语言，其中被认为更优雅的证明持续地更短（可能在宏扩展或编译之后）。\n[4] 也许有可能创作会吸引太空外星人的艺术，但我不会深入讨论，因为（a）太难回答，（b）如果我能确立好艺术是人类观众有意义的概念，我就满意了。\n[5] 如果早期抽象绘画似乎比后期的更有趣，可能是因为第一个抽象画家受过写生训练，因此他们的手倾向于做出用于表现物理事物的手势。实际上他们在说\u0026quot;scaramara\u0026quot;而不是\u0026quot;uebfgbsb\u0026rdquo;。\n[6] 这稍微复杂一些，因为有时艺术家通过模仿有把戏的艺术来无意识地使用把戏。\n[7] 我用苹果的味道来表述，因为如果人们能看到苹果，他们可以被欺骗。当我还是个孩子时，大多数苹果是一种叫红 Delicious 的品种，被培育成在商店里看起来吸引人，但味道不是很好。\n[8] 公平地说，策展人处境困难。如果他们处理当代艺术，他们必须在展览中包括他们认为坏的东西。这是因为什么被包括在展览中的测试基本上是市场价格，而对于当代艺术，这主要由成功的商人和他们的妻子决定。所以并不总是知识上的不诚实使策展人和经销商使用中性语言。\n[9] 实践中发生的是每个人都变得非常擅长谈论艺术。随着艺术本身变得更加随机，原本会投入到工作中的努力反而投入到听起来知识性理论中。\u0026ldquo;我的作品代表了城市环境中性别和性取向的探索\u0026quot;等等。不同的人在那个游戏中获胜。\n",
    "description": "",
    "tags": ["品味","艺术","主观性","观众","标准"],
    "categories": [],
    "content": "→ English Version\n艺术如何能够优秀 2006年12月\n我从小就相信品味只是个人偏好的问题。每个人都有自己喜欢的东西，但没有人的偏好比其他人的更好。没有所谓的品味好这回事。\n就像我从小相信的很多事情一样，这结果是错误的，我将试图解释为什么。\n说没有品味好这回事的一个问题是，这也意味着没有好艺术这回事。如果存在好艺术，那么喜欢它的人就比不喜欢的人有更好的品味。所以如果你抛弃品味的概念，你也必须抛弃艺术是好作品的概念，以及艺术家擅长创作艺术的概念。\n正是扯动了这根线，解开了我对相对主义的童年信仰。当你试图创作东西时，品味就成为一个实际问题。你必须决定下一步该做什么。如果我改变那部分，画作会变得更好吗？如果没有更好这回事，那么你做什么都无所谓。事实上，你画不画都无所谓。你完全可以出去买一个现成的空白画布。如果没有好这回事，那将和西斯廷教堂的天花板一样伟大的成就。当然不那么费力，但如果你能用更少的努力达到同样的表现水平，肯定那更令人印象深刻，而不是更少。\n然而这似乎不太对，是吗？\n观众 我认为这个谜题的关键是记住艺术有观众。艺术有目的，这个目的就是吸引其观众。好艺术（像任何好东西一样）是特别能实现其目的的艺术。\u0026ldquo;吸引\u0026quot;的含义可以变化。有些艺术作品旨在震撼，有些旨在取悦；有些旨在突然出现在你面前，有些则安静地坐在背景中。但所有艺术都必须作用于观众，而且——这里是关键点——观众成员有共同点。\n例如，几乎所有人类都发现人脸引人入胜。这似乎是天生的。婴儿几乎从出生起就能识别人脸。事实上，人脸似乎与我们对它们的兴趣共同进化；脸是身体的广告牌。所以在其他条件相同的情况下，有人脸的绘画比没有人脸的更引人入胜。[1]\n人们容易相信品味仅仅是个人偏好的一个原因是，如果不是这样，你如何挑选出品味更好的人？有数十亿人，每个人都有自己的看法；你有什么理由更喜欢一个而不是另一个？[2]\n但如果观众有很多共同点，你就不必从随机的个人偏见集合中选择一个，因为这个集合不是随机的。所有人都发现人脸引人入胜——几乎可以说是定义如此：人脸识别在我们的DNA中。因此，拥有好艺术的概念，即做好本职工作的艺术，并不需要你挑选出几个人并将他们的意见标记为正确。无论你挑选谁，他们都会发现人脸引人入胜。\n当然，太空外星人可能不会发现人脸引人入胜。但他们可能有与我们共同的其他东西。最常见的例子来源是数学。我期望太空外星人在判断两个证明哪个更好时，大多数时间会与我们意见一致。Erdos这么认为。他把最优雅的证明称为来自上帝之书的东西，而上帝之书显然是普适的。[3]\n一旦你开始谈论观众，你就不必简单地争论品味标准是否存在或不存在。相反，品味是一系列同心圆，就像池塘中的涟漪。有些东西会吸引你和你的朋友，有些会吸引你这个年龄段的大多数人，有些会吸引大多数人，也许还有些会吸引大多数有感知能力的生物（无论这意味着什么）。\n图景比这稍微复杂一些，因为在池塘中间有重叠的涟漪集合。例如，可能有些东西特别吸引男性，或者来自某种文化的人。\n如果好艺术是吸引其观众的艺术，那么当你谈论艺术是好是坏时，你也必须说是为哪个观众。那么，简单地谈论艺术好或坏是没有意义的吗？不，因为一个观众是所有可能的人类集合。我认为当人们说一件艺术作品好时，他们隐含谈论的就是这个观众：他们的意思是它会吸引任何人类。[4]\n这是一个有意义的测试，因为虽然像任何日常概念一样，\u0026ldquo;人类\u0026quot;在边缘上是模糊的，但几乎所有人类都有很多共同点。除了我们对人脸的兴趣外，对我们几乎所有人来说，原色都有特别之处，因为它是我们眼睛工作方式的产物。大多数人类也会发现3D物体的图像引人入胜，因为这似乎也内置在我们的视觉感知中。[5] 在这之下还有边缘检测，这使得具有明确形状的图像比模糊的图像更引人入胜。\n当然，人类的共同点远不止这些。我的目标不是编一份完整的清单，只是表明这里有坚实的基础。人们的偏好不是随机的。所以一个在绘画上工作的艺术家试图决定是否改变某些部分时，不需要想\u0026quot;何必呢？我也可以抛硬币。\u0026ldquo;相反，他可以问\u0026quot;什么会让这幅画对人们更有趣？\u0026ldquo;而你无法通过出去买一个空白画布来等同于米开朗基罗的原因是西斯廷教堂的天花板对人们更有趣。\n许多哲学家很难相信艺术可能存在客观标准。似乎很明显，例如美是观察者头脑中发生的事情，而不是物体的一种属性。因此它是\u0026quot;主观的\u0026quot;而不是\u0026quot;客观的\u0026rdquo;。但事实上，如果你将美的定义缩小到在人类身上以某种方式起作用的东西，并且你观察到人类有多少共同点，结果证明它仍然是物体的一种属性。如果主体都反应相似，你就不必选择某种东西是主体的属性还是客体的属性。好艺术因此是物体的一种属性，就像对人类有毒是物体的一种属 …"
  },{
    "title": "苹果的错误",
    "url": "/paul_graham/essays_zh/apple/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n苹果的错误 2009年11月\n我认为苹果没有意识到App Store审批流程有多糟糕。或者说，我认为他们没有意识到这有多重要。\n苹果运营App Store的方式损害了他们在程序员中的声誉，超过了他们做过的任何其他事情。他们在程序员中的声誉曾经很好。过去你听到的关于苹果最常见的抱怨是，他们的粉丝盲目崇拜他们。App Store改变了这一点。现在很多程序员开始把苹果视为邪恶。\n苹果曾经与程序员之间的良好意愿有多少因为App Store而丧失了？三分之一？一半？而这还只是到目前为止。App Store是一个持续的因果报应泄露。\n苹果是如何陷入这个混乱局面的？ 他们的根本问题是他们不理解软件。\n他们对待iPhone应用就像对待他们通过iTunes销售的音乐一样。苹果是渠道；他们拥有用户；如果你想接触用户，你就必须按照他们的条件来做。唱片公司勉强同意了。但这种模式不适用于软件。中介拥有用户是行不通的。软件业在1980年代初期就认识到这一点，当时像VisiCorp这样的公司表明，虽然\u0026quot;软件\u0026quot;和\u0026quot;出版商\u0026quot;这两个词很契合，但基本概念并不契合。软件不像音乐或书籍。对于第三方来说，作为开发者和用户之间的中介太复杂了。然而，这正是苹果通过App Store试图成为的：软件出版商。而且是一个特别越界的出版商，有着挑剔的品味和严格执行的内部风格。\n如果软件出版在1980年行不通，那么在软件开发从少数大型发布演变为持续的小型发布流的今天，它就更行不通了。但苹果也不理解这一点。他们的产品开发模式来自硬件。他们工作直到认为产品完成，然后发布。对于硬件你必须这样做，但因为软件很容易改变，其设计可以从进化中受益。现在开发应用程序的标准方式是快速发布和迭代。这意味着每次发布新版本时都有漫长而随机的延迟是灾难性的。\n显然，苹果的态度是开发者在向App Store提交新版本时应该更加小心。他们会这么说。但尽管他们很强大，却不足以扭转技术的演变。程序员使用快速发布和迭代不是出于懒惰。他们使用它是因为它能产生最好的结果。通过阻碍这个过程，苹果让他们做糟糕的工作，程序员讨厌这一点，就像苹果自己讨厌一样。\n如果苹果在发现OS X中的严重错误时，不能立即发布软件更新，而是必须将代码提交给一个中介，这个中介将代码搁置一个月，然后因为它包含一个他们不喜欢的图标而拒绝它，苹果会喜欢吗？\n通过破坏软件开发，苹果得到了与他们意图相反的结果：当前在App Store中可用的应用版本往往是旧的和有错误的。一个开发者告诉我：\u0026ldquo;由于他们的流程，App Store充满了半成品应用程序。我几乎每天都制作一个新版本发布给测试用户。App Store上的版本感觉老旧和糟糕。\u0026rdquo;\n我相信很多开发者都有这种感觉：一种情绪是\u0026quot;我并不真正为App Store里的东西感到骄傲\u0026quot;，另一种情绪是\u0026quot;说真的，这是苹果的错。\u0026quot;\n另一个人写道：\u0026ldquo;我认为他们认为审批流程通过确保质量来帮助用户。实际上，像我们这样的错误总是能通过，然后需要4-8周才能让这个错误修复得到批准，让用户认为iPhone应用有时就是无法工作。对苹果来说更糟糕的是，这些应用在其他有即时审批流程的平台上工作得很好。\u0026rdquo;\n实际上，我认为苹果有第三个误解：所有关于App Store审批的抱怨都不是一个严重的问题。他们肯定听到开发者在抱怨。但合作伙伴和供应商总是在抱怨。如果他们不抱怨反而是个坏迹象；这意味着你对他们太宽松了。同时，iPhone的销售情况比以往任何时候都好。那么他们为什么需要修复任何东西呢？\n他们在短期内能够虐待开发者，是因为他们制造了如此出色的硬件。几天前我刚买了一台新的27英寸iMac。它很棒。屏幕太亮了，磁盘出奇地响，但它如此美丽，让你无法让自己在意。\n所以我买了它，但这次是带着疑虑买的。我感觉就像购买一个人权记录不佳的国家制造的东西时的感觉。这是新的。过去我从苹果买东西时是一种纯粹的快乐。哦，天啊！他们制造了这么棒的东西。这次感觉像是浮士德式的交易。他们制造了这么棒的东西，但他们却是如此混蛋。我真的想支持这家公司吗？\n苹果应该关心像我这样的人的想法吗？ 如果他们疏远了一小部分用户，这有什么区别？\n有几个原因他们应该关心。一个是这些用户是他们想要作为员工的人。如果你的公司看起来邪恶，最好的程序员不会为你工作。从90年代开始，这对微软伤害很大。程序员开始为在那里工作感到尴尬。感觉像是出卖自己。当微软的人和其他程序员交谈并提到他们工作的地方时，有很多关于\u0026quot;投靠黑暗面\u0026quot;的自嘲笑话。\n但对微软来说真正的问题不是他们雇用的人的尴尬。而是他们从未得到的人。你知道谁得到了他们吗？谷歌和苹果。如果微软是帝国，他们就是反抗军联盟。谷歌和苹果今天比微软做得好得多，很大程度上是因为他们得到了更多最好的人才。\n为什么程序员对雇主的道德如此挑剔？部分原因是他们有能力挑剔。最好的程序员可以在任何他们想的地方工作。他们不必为他们有疑虑的公司工作。\n但我认为程序员挑剔的另一个原因是邪恶滋生愚蠢。一个通过行使权力获胜的组织开始失去通过做更好的工作获胜的能力。对于一个聪明人来说，在一个最好的想法不是获胜的想法的地方工作并不有趣。我认为谷歌如此热衷于\u0026quot;不作恶\u0026quot;的原因，与其说是为了给外界留下印象，不如说是为了预防自己变得傲慢。\n迄今为止，这对谷歌有效。他们变得更加官僚化，但除此之外，他们似乎坚持了原来的原则。苹果似乎不太如此。当你现在看著名的1984年广告时，更容易想象苹果是屏幕上的独裁者，而不是拿着锤子的女人。事实上，如果你阅读独裁者的演讲，它听起来与App Store的预言惊人地相似：\u0026ldquo;我们已经战胜了无原则的事实传播。我们已经在历史上第一次创造了一个纯粹思想的花园，每个工人都可以在那里不受矛盾和混乱真理的害虫侵扰而安全地绽放。\u0026rdquo;\n苹果应该关心程序员对他们的看法的另一个原因是，当你销售一个平台时，开发者决定你的成败。如果说有谁应该知道这一点，那应该是苹果。VisiCalc成就了Apple II。\n程序员为他们使用的平台构建应用程序。大多数应用程序——大多数创业公司，可能——都源自个人项目。苹果本身就是这样。苹果制造微型计算机是因为史蒂夫·沃兹尼亚克自己想要一个。他买不起小型计算机。微软同样开始为微型计算机制作解释器，因为比尔·盖茨和保罗·艾伦有兴趣使用它们。不构建创始人使用的东西的创业公司是罕见的。\n有这么多iPhone应用的主要原因是这么多程序员有iPhone。他们可能从文章中知道黑莓有这样那样的市场份额。但实际上就好像RIM不存在一样。如果他们要构建什么东西，他们希望自己能够使用它，这意味着构建iPhone应用。\n所以程序员继续开发iPhone应用，尽管苹果继续虐待他们。他们就像陷入虐待关系中的人。他们被iPhone如此吸引，无法离开。但他们在寻找出路。一个人写道：\u0026ldquo;虽然我确实很享受为iPhone开发，但他们在App Store上施加的控制并没有给我开发应用程序的动力。事实上，除非绝对必要，否则我不打算再制作任何iPhone应用程序。\u0026rdquo;\n有什么能打破这个循环吗？ 到目前为止我见过的设备都不能。Palm和RIM没有希望。唯一可信的竞争者是Android。但Android是个孤儿；谷歌并不真正关心它，不像苹果关心iPhone那样。苹果关心iPhone就像谷歌关心搜索一样。\n手持设备的未来是由苹果锁定的吗？ 这是一个令人担忧的前景。会有另一个像我们在1990年代那样的沉闷单一文化是件令人沮丧的事。1995年，为终端用户编写软件实际上等同于编写Windows应用程序。我们对这种前景的恐惧是推动我们开始构建Web应用程序的最大单一因素。\n至少我们现在知道要打破苹果的锁定需要什么。你必须让iPhone离开程序员的手。如果程序员使用其他设备进行移动网络访问，他们会开始为该设备开发应用程序。\n你如何制造一个比iPhone更受程序员喜爱的设备？你不可能制造出设计更好的设备。苹果在这方面没有留下空间。所以这个替代设备可能无法通过普遍吸引力获胜。它必须凭借对程序员特有的某种吸引力获胜。\n吸引程序员的一种方式是通过软件。如果你能想出一个程序员必须有但在iPhone受限制世界中不可能的应用程序，你大概能让他们转换。\n如果程序员开始使用手持设备作为开发机器，这肯定会发生——如果手持设备像笔记本电脑取代台式电脑一样取代笔记本电脑。你对开发机器需要的控制比苹果会让你对iPhone的控制更多。\n有人能制造一个你可以像手机一样放在口袋里，但同时又能作为开发机器工作的设备吗？很难想象它会是什么样子。但我已经学到了永远不要对技术说永远。按现在的标准，一个能作为开发机器工作的手机大小的设备并不比按1995年的标准iPhone本身看起来更神奇。\n我现在的开发机器是一台MacBook Air，我在办公室里用它连接外接显示器和键盘，旅行时单独使用。如果有半个大小的版本我会更喜欢。那仍然不足以像手机一样随身携带到处带着，但我们还在4倍左右的差距内。当然这个差距是可以弥合的。\n事实上，让我们把它变成一个RFS（需求说明书）。寻人：拿锤子的女人。\n注释 [1] 当谷歌采用\u0026quot;不作恶\u0026quot;时，他们还如此之小，以至于没有人会期望他们如此。\n[2] 顺便说一句，1984年广告中的独裁者不是微软；是IBM。IBM在那些日子里看起来可怕得多，但他们比现在的苹果对开发者更友好。\n[3] 他甚至买不起显示器。这就是为什么Apple I使用电视机作为显示器。\n[4] 我交谈的几个人提到他们多么喜欢iPhone SDK。问题不是苹果的产品，而是他们的政策。幸运的是政策是软件；如果他们愿意，苹果可以立即改变它们。很方便，不是吗？\n感谢Sam Altman、Trevor Blackwell、Ross Boucher、James Bracy、Gabor Cselle、Patrick Collison、Jason Freedman、John Gruber、Joe Hewitt、Jessica Livingston、Robert Morris、Teng Siong Ong、Nikhil Pandit、Savraj Singh和Jared Tame阅读本文草稿。\n",
    "description": "",
    "tags": ["苹果","应用商店","开发者","iPhone","软件"],
    "categories": [],
    "content": "→ English Version\n苹果的错误 2009年11月\n我认为苹果没有意识到App Store审批流程有多糟糕。或者说，我认为他们没有意识到这有多重要。\n苹果运营App Store的方式损害了他们在程序员中的声誉，超过了他们做过的任何其他事情。他们在程序员中的声誉曾经很好。过去你听到的关于苹果最常见的抱怨是，他们的粉丝盲目崇拜他们。App Store改变了这一点。现在很多程序员开始把苹果视为邪恶。\n苹果曾经与程序员之间的良好意愿有多少因为App Store而丧失了？三分之一？一半？而这还只是到目前为止。App Store是一个持续的因果报应泄露。\n苹果是如何陷入这个混乱局面的？ 他们的根本问题是他们不理解软件。\n他们对待iPhone应用就像对待他们通过iTunes销售的音乐一样。苹果是渠道；他们拥有用户；如果你想接触用户，你就必须按照他们的条件来做。唱片公司勉强同意了。但这种模式不适用于软件。中介拥有用户是行不通的。软件业在1980年代初期就认识到这一点，当时像VisiCorp这样的公司表明，虽然\u0026quot;软件\u0026quot;和\u0026quot;出版商\u0026quot;这两个词很契合，但基本概念并不契合。软件不像音乐或书籍。对于第三方来说，作为开发者和用户之间的中介太复杂了。然而，这正是苹果通过App Store试图成为的：软件出版商。而且是一个特别越界的出版商，有着挑剔的品味和严格执行的内部风格。\n如果软件出版在1980年行不通，那么在软件开发从少数大型发布演变为持续的小型发布流的今天，它就更行不通了。但苹果也不理解这一点。他们的产品开发模式来自硬件。他们工作直到认为产品完成，然后发布。对于硬件你必须这样做，但因为软件很容易改变，其设计可以从进化中受益。现在开发应用程序的标准方式是快速发布和迭代。这意味着每次发布新版本时都有漫长而随机的延迟是灾难性的。\n显然，苹果的态度是开发者在向App Store提交新版本时应该更加小心。他们会这么说。但尽管他们很强大，却不足以扭转技术的演变。程序员使用快速发布和迭代不是出于懒惰。他们使用它是因为它能产生最好的结果。通过阻碍这个过程，苹果让他们做糟糕的工作，程序员讨厌这一点，就像苹果自己讨厌一样。\n如果苹果在发现OS X中的严重错误时，不能立即发布软件更新，而是必须将代码提交给一个中介，这个中介将代码搁置一个月，然后因为它包含一个他们不喜欢的图标而拒绝它，苹果会喜欢吗？\n通过破坏软件开发，苹果得到了与他们意图相反的结果：当前在App Store中可用的应用版本往往是旧的和有错误的。一个开发者告诉我：\u0026ldquo;由于他们的流程，App Store充满了半成品应用程序。我几乎每天都制作一个新版本发布给测试用户。App Store上的版本感觉老旧和糟糕。\u0026rdquo;\n我相信很多开发者都有这种感觉：一种情绪是\u0026quot;我并不真正为App Store里的东西感到骄傲\u0026quot;，另一种情绪是\u0026quot;说真的，这是苹果的错。\u0026quot;\n另一个人写道：\u0026ldquo;我认为他们认为审批流程通过确保质量来帮助用户。实际上，像我们这样的错误总是能通过，然后需要4-8周才能让这个错误修复得到批准，让用户认为iPhone应用有时就是无法工作。对苹果来说更糟糕的是，这些应用在其他有即时审批流程的平台上工作得很好。\u0026rdquo;\n实际上，我认为苹果有第三个误解：所有关于App Store审批的抱怨都不是一个严重的问题。他们肯定听到开发者在抱怨。但合作伙伴和供应商总是在抱怨。如果他们不抱怨反而是个坏迹象；这意味着你对他们太宽松了。同时，iPhone的销售情况比以往任何时候都好。那么他们为什么需要修复任何东西呢？\n他们在短期内能够虐待开发者，是因为他们制造了如此出色的硬件。几天前我刚买了一台新的27英寸iMac。它很棒。屏幕太亮了，磁盘出奇地响，但它如此美丽，让你无法让自己在意。\n所以我买了它，但这次是带着疑虑买的。我感觉就像购买一个人权记录不佳的国家制造的东西时的感觉。这是新的。过去我从苹果买东西时是一种纯粹的快乐。哦，天啊！他们制造了这么棒的东西。这次感觉像是浮士德式的交易。他们制造了这么棒的东西，但他们却是如此混蛋。我真的想支持这家公司吗？\n苹果应该关心像我这样的人的想法吗？ 如果他们疏远了一小部分用户，这有什么区别？\n有几个原因他们应该关心。一个是这些用户是他们想要作为员工的人。如果你的公司看起来邪恶，最好的程序员不会为你工作。从90年代开始，这对微软伤害很大。程序员开始为在那里工作感到尴尬。感觉像是出卖自己。当微软的人和其他程序员交谈并提到他们工作的地方时，有很多关于\u0026quot;投靠黑暗面\u0026quot;的自嘲笑话。\n但对微软来说真正的问题不是他们雇用的人的尴尬。而是他们从未得到的人。你知道谁得到了他们吗？谷 …"
  },{
    "title": "融资生存指南",
    "url": "/paul_graham/essays_zh/fundraising/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English version\n融资生存指南 2008年8月\n融资是创业的第二难事。最难的事情是做出人们想要的东西：大多数死亡的创业公司都是因为没有做到这一点而死亡。但第二大死亡原因可能是融资的困难。融资是残酷的。\n它如此残酷的一个原因仅仅是市场的残酷性。一生中大部分时间都在学校或大公司度过的人可能没有接触过这一点。教授和老板通常对你有一定的责任感；如果你做出了英勇的努力但失败了，他们会给你一个机会。市场则不那么宽容。客户不关心你工作多努力，只关心你是否解决了他们的问题。\n投资者评估创业公司的方式是客户评估产品的方式，而不是老板评估员工的方式。如果你做出了英勇的努力但失败了，也许他们会投资你的下一个创业公司，但不会是这个。\n但从投资者那里融资比向客户销售更难，因为投资者太少了。没有什么比得上有效的市场。你不太可能有超过10个感兴趣的投资者；很难与更多的人交谈。所以任何一个投资者的行为随机性真的会影响到你。\n问题3：投资者非常随机。所有投资者，包括我们在内，按照普通标准都是不称职的。我们不断地对我们不理解的事情做出决定，而且往往是错的。\n然而，风险很大。不同类型投资者投资的金额从五千美元到五千万美元不等，但对于任何类型的投资者来说，这个金额通常看起来都很大。投资决策是大决策。\n这种组合——对他们不理解的事情做出重大决策——往往使投资者非常神经质。风险投资家以引导创始人而臭名昭著。一些更无耻的人是故意这样做的。但即使是最善意的投资者也可能表现出在日常生活中看起来疯狂的行为方式。有一天他们充满热情，似乎准备当场给你写支票；第二天他们就不回你的电话了。他们不是在和你玩游戏。他们只是下不了决心。[1]\n如果这还不够糟糕，这些 wildly fluctuating nodes 都连接在一起。创业投资者都相互认识，并且（尽管他们讨厌承认）他们对你的看法的最大因素是其他投资者的看法。[2] 谈论不稳定系统的配方。你得到了恐惧/贪婪平衡通常在市场中产生的阻尼的相反情况。没有人对一个因为其他人都讨厌而成为\u0026quot;便宜货\u0026quot;的创业公司感兴趣。\n所以因为玩家太少而导致的低效市场，因为他们行为不那么独立而加剧。结果是一个像某种原始的多细胞海洋生物的系统，在那里你刺激一个 extremity，整个东西都会猛烈收缩。\nY Combinator 正在努力解决这个问题。我们正在努力增加投资者的数量，就像我们增加创业公司的数量一样。我们希望随着两者数量的增加，我们会得到更像有效市场的东西。当 t 趋近于无穷大时，演示日趋近于拍卖会。\n不幸的是，t 仍然离无穷大很远。创业公司现在在我们居住的不完美世界中应该做什么？最重要的事情是不要让融资让你沮丧。创业公司生或死取决于士气。如果你让融资的困难摧毁你的士气，它将成为一个自我实现的预言。\n自力更生（= 咨询） 一些可能的创始人现在可能在想，为什么还要与投资者打交道？如果融资如此痛苦，为什么要这样做？\n一个答案是显而易见的：因为你需要钱来生活。用创业公司自己的收入来融资原则上是个好主意，但你不能创造即时客户。无论你制造什么，你必须销售一定数量才能收支平衡。将你的销售增长到那个点需要时间，而且在尝试之前很难预测需要多长时间。\n例如，我们不能自力更生地建立 Viaweb。我们的软件收费相当高——每个用户每月大约140美元——但至少一年后我们的收入才能覆盖我们微薄的成本。我们没有足够的积蓄维持一年。\n如果你排除那些实际上是由创始人通过储蓄或日常工作资助的\u0026quot;自力更生\u0026quot;公司，其余的要么（a）真的很幸运，这很难按需做到，或者（b）开始时是咨询公司，然后逐渐转变为产品公司。\n咨询是你可以依靠的唯一选择。但咨询远不是免费的钱。它可能不像从投资者那里融资那么痛苦，但痛苦会分散在更长的时间段内。可能是几年。对于许多类型的创业公司来说，这种延迟可能是致命的。如果你正在处理如此独特以至于没有其他人可能想到的事情，你可以慢慢来。Joshua Schachter 在华尔街工作时逐渐在业余时间建立了 Delicious。他逃脱了惩罚，因为没有其他人意识到这是个好主意。但如果你在 Viaweb 大约同一时间构建像在线商店软件这样明显必要的东西，而且你在业余时间工作，同时将大部分时间花在客户工作上，你并不处于有利位置。\n自力更生在原则上听起来很棒，但这个看似 verdant 的领域很少有创业公司能够活着出来。仅仅因为自力更生的创业公司因此而出名这一事实就应该敲响警钟。如果它工作得这么好，那就会是常态。[3] 自力更生可能会变得更容易，因为创办公司正变得越来越便宜。但我认为我们永远不会达到大多数创业公司可以不需要外部资金的地步。技术往往会大幅降价，但生活费用不会。\n结果是，你可以选择你的痛苦：要么是融资的短暂尖锐痛苦，要么是咨询的慢性疼痛。对于给定的总痛苦量，融资是更好的选择，因为新技术通常现在比以后更有价值。\n但是，虽然对于大多数创业公司来说，融资将是较小的邪恶，但它仍然是一个相当大的邪恶——大到足以轻易杀死你。不仅仅是因为如果你融资失败你可能不得不关闭公司这个显而易见的原因，还因为融资过程本身可以杀死你。\n为了生存，你需要一套与说服投资者使用的技术大部分正交的技术，就像登山者需要知道生存技术，而这些技术与实际上下山所使用的技术大部分正交一样。\n1. 保持低期望。 融资摧毁这么多创业公司士气的原因不仅仅是因为它很难，而是因为它比他们预期的要难得多。杀死你的是失望。你的期望越低，就越难感到失望。\n创业创始人往往是乐观的。这在技术中有时可能工作得很好，但这是接近融资的错误方式。最好假设投资者总会让你失望。收购方也是如此，顺便说一句。在 YC，我们的次要口头禅之一是\u0026quot;交易会失败\u0026quot;。无论你正在进行什么交易，都要假设它会失败。这个简单规则的预测能力是惊人的。\n随着交易的进展，会有一种倾向开始相信它会发生，然后依赖它发生。你必须抵抗这一点。把自己绑在桅杆上。这才是杀死你的原因。交易没有像大多数其他人类互动那样的轨迹，在那里共享计划随时间线性巩固。交易经常在最后一刻失败。通常对方直到最后一刻才真正思考他们想要什么。所以你不能使用你对共享计划的日常直觉作为指导。当涉及交易时，你必须有意识地关闭它们，变得病态地愤世嫉俗。\n这比听起来更难。当著名的投资者似乎有兴趣资助你时，这是非常令人高兴的。很容易开始相信融资会快速而直接。但几乎从来都不是这样。\n2. 继续在你的创业公司上工作。 在融资时继续在你的创业公司上工作，这听起来很明显。实际上这很难做到。大多数创业公司没有做到。\n融资有一种神秘的能力，可以吸走你所有的注意力。即使你每天只有一个与投资者的会议，不知何故那个会议会消耗你一整天。它不仅仅是实际会议的时间，还有往返的时间，之前准备的时间和之后思考的时间。\n在投资者会议上生存分心的最好方法可能是将公司分开：选择一个创始人处理投资者，而其他人让公司继续运转。当创业公司有3个创始人而不是2个时，这工作得更好，而且当公司的领导者不是首席开发人员时更好。在最好的情况下，公司继续以大约一半的速度前进。\n不过，那是最好的情况。公司往往在融资时陷入停顿。这对如此多的原因都是危险的。融资总是比预期需要更长的时间。看起来像是一个2周的中断变成了4个月的中断。这可能非常令人沮丧。更糟糕的是，它可能使你对投资者失去吸引力。他们想要投资于有活力的公司。一个4个月内没有做任何新事情的公司似乎没有活力，所以他们开始失去兴趣。投资者很少理解这一点，但当他们对创业公司失去兴趣时，他们所回应的大部分是他们自己 indecision 造成的损害。\n解决方案：把创业公司放在第一位。把与投资者的会议塞进你开发计划的空闲时刻，而不是在投资者会议之间的空闲时刻进行开发。如果你让公司继续前进——发布新功能，增加流量，做交易，被报道——那些投资者会议更有可能富有成效。不仅因为你的创业公司看起来更有活力，还因为它对你的士气更好，而士气是投资者评判你的主要方式之一。\n3. 保持保守。 随着情况变得更糟，最优策略变得更加保守。当事情进展顺利时，你可以冒险；当情况不好时，你想安全行事。\n我建议像总是进展不好一样接近融资。原因是在你欺骗自己的能力和你面对系统的 wildly unstable nature 之间，事情可能已经或者很容易变得比看起来糟糕得多。\n",
    "description": "",
    "tags": ["融资","创业公司","投资者","生存","士气"],
    "categories": [],
    "content": "→ English version\n融资生存指南 2008年8月\n融资是创业的第二难事。最难的事情是做出人们想要的东西：大多数死亡的创业公司都是因为没有做到这一点而死亡。但第二大死亡原因可能是融资的困难。融资是残酷的。\n它如此残酷的一个原因仅仅是市场的残酷性。一生中大部分时间都在学校或大公司度过的人可能没有接触过这一点。教授和老板通常对你有一定的责任感；如果你做出了英勇的努力但失败了，他们会给你一个机会。市场则不那么宽容。客户不关心你工作多努力，只关心你是否解决了他们的问题。\n投资者评估创业公司的方式是客户评估产品的方式，而不是老板评估员工的方式。如果你做出了英勇的努力但失败了，也许他们会投资你的下一个创业公司，但不会是这个。\n但从投资者那里融资比向客户销售更难，因为投资者太少了。没有什么比得上有效的市场。你不太可能有超过10个感兴趣的投资者；很难与更多的人交谈。所以任何一个投资者的行为随机性真的会影响到你。\n问题3：投资者非常随机。所有投资者，包括我们在内，按照普通标准都是不称职的。我们不断地对我们不理解的事情做出决定，而且往往是错的。\n然而，风险很大。不同类型投资者投资的金额从五千美元到五千万美元不等，但对于任何类型的投资者来说，这个金额通常看起来都很大。投资决策是大决策。\n这种组合——对他们不理解的事情做出重大决策——往往使投资者非常神经质。风险投资家以引导创始人而臭名昭著。一些更无耻的人是故意这样做的。但即使是最善意的投资者也可能表现出在日常生活中看起来疯狂的行为方式。有一天他们充满热情，似乎准备当场给你写支票；第二天他们就不回你的电话了。他们不是在和你玩游戏。他们只是下不了决心。[1]\n如果这还不够糟糕，这些 wildly fluctuating nodes 都连接在一起。创业投资者都相互认识，并且（尽管他们讨厌承认）他们对你的看法的最大因素是其他投资者的看法。[2] 谈论不稳定系统的配方。你得到了恐惧/贪婪平衡通常在市场中产生的阻尼的相反情况。没有人对一个因为其他人都讨厌而成为\u0026quot;便宜货\u0026quot;的创业公司感兴趣。\n所以因为玩家太少而导致的低效市场，因为他们行为不那么独立而加剧。结果是一个像某种原始的多细胞海洋生物的系统，在那里你刺激一个 extremity，整个东西都会猛烈收缩。\nY Combinator 正在努力解决这个问题。我们正在努力增加投资者的数量，就像我们增加创业公司的数量一样。我们希望随着两者数量的增加，我们会得到更像有效市场的东西。当 t 趋近于无穷大时，演示日趋近于拍卖会。\n不幸的是，t 仍然离无穷大很远。创业公司现在在我们居住的不完美世界中应该做什么？最重要的事情是不要让融资让你沮丧。创业公司生或死取决于士气。如果你让融资的困难摧毁你的士气，它将成为一个自我实现的预言。\n自力更生（= 咨询） 一些可能的创始人现在可能在想，为什么还要与投资者打交道？如果融资如此痛苦，为什么要这样做？\n一个答案是显而易见的：因为你需要钱来生活。用创业公司自己的收入来融资原则上是个好主意，但你不能创造即时客户。无论你制造什么，你必须销售一定数量才能收支平衡。将你的销售增长到那个点需要时间，而且在尝试之前很难预测需要多长时间。\n例如，我们不能自力更生地建立 Viaweb。我们的软件收费相当高——每个用户每月大约140美元——但至少一年后我们的收入才能覆盖我们微薄的成本。我们没有足够的积蓄维持一年。\n如果你排除那些实际上是由创始人通过储蓄或日常工作资助的\u0026quot;自力更生\u0026quot;公司，其余的要么（a）真的很幸运，这很难按需做到，或者（b）开始时是咨询公司，然后逐渐转变为产品公司。\n咨询是你可以依靠的唯一选择。但咨询远不是免费的钱。它可能不像从投资者那里融资那么痛苦，但痛苦会分散在更长的时间段内。可能是几年。对于许多类型的创业公司来说，这种延迟可能是致命的。如果你正在处理如此独特以至于没有其他人可能想到的事情，你可以慢慢来。Joshua Schachter 在华尔街工作时逐渐在业余时间建立了 Delicious。他逃脱了惩罚，因为没有其他人意识到这是个好主意。但如果你在 Viaweb 大约同一时间构建像在线商店软件这样明显必要的东西，而且你在业余时间工作，同时将大部分时间花在客户工作上，你并不处于有利位置。\n自力更生在原则上听起来很棒，但这个看似 verdant 的领域很少有创业公司能够活着出来。仅仅因为自力更生的创业公司因此而出名这一事实就应该敲响警钟。如果它工作得这么好，那就会是常态。[3] 自力更生可能会变得更容易，因为创办公司正变得越来越便宜。但我认为我们永远不会达到大多数创业公司可以不需要外部资金的地步。技术往往会大幅降价，但生活费用不会。\n结果是，你可以选择你的痛苦：要么是融资的短暂尖锐痛苦，要 …"
  },{
    "title": "让另外95%的优秀程序员进来",
    "url": "/paul_graham/essays_zh/95/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n让另外95%的优秀程序员进来 让另外95%的优秀程序员进来 2014年12月\n美国科技公司希望政府让移民更容易，因为它们说在美国找不到足够的程序员。反移民人士说，与其让外国人占据这些工作，我们应该培训更多的美国人成为程序员。谁是对的？\n科技公司是对的。反移民人士不理解的是，合格的程序员和杰出的程序员之间在能力上存在巨大差异，虽然你可以培训人们成为合格的程序员，但你无法培训他们成为杰出的程序员。杰出的程序员对编程有天生的才能和兴趣，这不仅仅是培训的产物。[1]\n美国占世界人口不到5%。这意味着如果使某人成为优秀程序员的特质是均匀分布的，那么95%的优秀程序员都出生在美国以外。\n反移民人士必须编造一些解释来说明科技公司为使移民更容易而付出的所有努力。所以他们声称这是因为它们想压低工资。但如果你与创业公司交谈，你会发现几乎所有达到一定规模的公司都经历了法律上的周折来让程序员进入美国，在那里他们支付给这些程序员的工资与支付给美国人的相同。为什么他们要为以相同价格获得程序员而额外费心？唯一的解释是他们在说实话：根本没有足够多的优秀程序员可供分配。[2]\n我问了一家拥有约70名程序员的创业公司的CEO，如果他能获得所有他想要的优秀程序员，他会再雇佣多少。他说\u0026quot;明天早上我们就会雇佣30名。\u0026ldquo;而这是一家总是在招聘战中获胜的热门创业公司。整个硅谷都是如此。创业公司在人才方面如此受限。\n如果更多的美国人接受编程培训那将是很好的，但没有任何培训能够改变95比5这样压倒性的比例。特别是由于其他国家也在培训程序员。除非发生灾难，否则大多数优秀程序员都出生在美国以外这一事实将永远成立。大多数在任何方面优秀的人都出生在美国以外这一事实也将永远成立。[3]\n卓越的表现意味着移民。一个只占世界人口百分之几的国家只有在某个领域有大量移民工作的情况下才能在该领域表现出色。\n但整个讨论都理所当然地认为：如果我们让更多的优秀程序员进入美国，他们会想要来。现在这是真的，我们没有意识到我们有多么幸运。如果我们想保持这个选择开放，最好的方法是利用它：世界上越多的优秀程序员在这里，其余的就会越想要来这里。\n如果我们不这样做，美国可能会彻底完蛋。我意识到这是强烈的措辞，但对此犹豫不决的人似乎没有意识到这里发挥作用的力量有多大。技术给最好的程序员带来了巨大的杠杆作用。程序员的世界市场似乎正在变得更加流动性。而且由于优秀的人喜欢优秀的同事，这意味着最好的程序员可能会聚集在少数几个中心。可能主要在一个中心。\n如果大多数优秀程序员聚集在一个中心，而那个中心不在这里怎么办？这个场景现在可能看起来不太可能，但如果未来50年的变化与过去50年一样大，它就不会不太可能了。\n我们有可能仅仅通过每年让几千名优秀程序员进入美国就确保美国保持技术超级大国的地位。让这个机会溜走将是一个多么巨大的错误。这很容易成为这一代美国政客后来出名的决定性错误。与该规模的其他潜在错误不同，修复它的成本为零。\n所以，请继续吧。\n注释 [1] 优秀程序员比普通程序员好多少？好到你甚至无法直接衡量差异。优秀程序员不仅仅是更快地完成相同的工作。优秀程序员会发明普通程序员甚至想不到的东西。这并不意味着优秀程序员的价值无限大，因为任何发明都有有限的市场价值。但很容易想象在某些情况下，优秀程序员可能会发明价值达到普通程序员工资100倍甚至1000倍的东西。\n[2] 有少数咨询公司出租大量通过H1-B签证带入的外国程序员。一定要打击这些。应该很容易写立法来区分它们，因为它们与技术公司如此不同。但反移民人士声称像谷歌和脸书这样的公司是由相同的动机驱动是不诚实的。廉价但平庸的程序员涌入是他们最不想要的事情；那会毁掉他们。\n[3] 虽然这篇文章谈论的是程序员，但我们需要引进的群体更广泛，从设计师到程序员再到电气工程师。作为通用术语，最好的可能是\u0026quot;数字人才\u0026rdquo;。似乎让论证过于狭窄比用新词混淆每个人要好。\n感谢萨姆·奥特曼、约翰·科利森、帕特里克·科利森、杰西卡·利文斯顿、杰夫·拉尔斯顿、弗雷德·威尔逊和卡萨尔·尤尼斯阅读本文的草稿。\n西班牙语翻译\n",
    "description": "",
    "tags": ["编程","移民","技术","人才","硅谷"],
    "categories": [],
    "content": "→ English Version\n让另外95%的优秀程序员进来 让另外95%的优秀程序员进来 2014年12月\n美国科技公司希望政府让移民更容易，因为它们说在美国找不到足够的程序员。反移民人士说，与其让外国人占据这些工作，我们应该培训更多的美国人成为程序员。谁是对的？\n科技公司是对的。反移民人士不理解的是，合格的程序员和杰出的程序员之间在能力上存在巨大差异，虽然你可以培训人们成为合格的程序员，但你无法培训他们成为杰出的程序员。杰出的程序员对编程有天生的才能和兴趣，这不仅仅是培训的产物。[1]\n美国占世界人口不到5%。这意味着如果使某人成为优秀程序员的特质是均匀分布的，那么95%的优秀程序员都出生在美国以外。\n反移民人士必须编造一些解释来说明科技公司为使移民更容易而付出的所有努力。所以他们声称这是因为它们想压低工资。但如果你与创业公司交谈，你会发现几乎所有达到一定规模的公司都经历了法律上的周折来让程序员进入美国，在那里他们支付给这些程序员的工资与支付给美国人的相同。为什么他们要为以相同价格获得程序员而额外费心？唯一的解释是他们在说实话：根本没有足够多的优秀程序员可供分配。[2]\n我问了一家拥有约70名程序员的创业公司的CEO，如果他能获得所有他想要的优秀程序员，他会再雇佣多少。他说\u0026quot;明天早上我们就会雇佣30名。\u0026ldquo;而这是一家总是在招聘战中获胜的热门创业公司。整个硅谷都是如此。创业公司在人才方面如此受限。\n如果更多的美国人接受编程培训那将是很好的，但没有任何培训能够改变95比5这样压倒性的比例。特别是由于其他国家也在培训程序员。除非发生灾难，否则大多数优秀程序员都出生在美国以外这一事实将永远成立。大多数在任何方面优秀的人都出生在美国以外这一事实也将永远成立。[3]\n卓越的表现意味着移民。一个只占世界人口百分之几的国家只有在某个领域有大量移民工作的情况下才能在该领域表现出色。\n但整个讨论都理所当然地认为：如果我们让更多的优秀程序员进入美国，他们会想要来。现在这是真的，我们没有意识到我们有多么幸运。如果我们想保持这个选择开放，最好的方法是利用它：世界上越多的优秀程序员在这里，其余的就会越想要来这里。\n如果我们不这样做，美国可能会彻底完蛋。我意识到这是强烈的措辞，但对此犹豫不决的人似乎没有意识到这里发挥作用的力量有多大。技术给最好的程序员带来了巨大的杠杆作用。程序员的世界市场似乎正在变得更加流动性。而且由于优秀的人喜欢优秀的同事，这意味着最好的程序员可能会聚集在少数几个中心。可能主要在一个中心。\n如果大多数优秀程序员聚集在一个中心，而那个中心不在这里怎么办？这个场景现在可能看起来不太可能，但如果未来50年的变化与过去50年一样大，它就不会不太可能了。\n我们有可能仅仅通过每年让几千名优秀程序员进入美国就确保美国保持技术超级大国的地位。让这个机会溜走将是一个多么巨大的错误。这很容易成为这一代美国政客后来出名的决定性错误。与该规模的其他潜在错误不同，修复它的成本为零。\n所以，请继续吧。\n注释 [1] 优秀程序员比普通程序员好多少？好到你甚至无法直接衡量差异。优秀程序员不仅仅是更快地完成相同的工作。优秀程序员会发明普通程序员甚至想不到的东西。这并不意味着优秀程序员的价值无限大，因为任何发明都有有限的市场价值。但很容易想象在某些情况下，优秀程序员可能会发明价值达到普通程序员工资100倍甚至1000倍的东西。\n[2] 有少数咨询公司出租大量通过H1-B签证带入的外国程序员。一定要打击这些。应该很容易写立法来区分它们，因为它们与技术公司如此不同。但反移民人士声称像谷歌和脸书这样的公司是由相同的动机驱动是不诚实的。廉价但平庸的程序员涌入是他们最不想要的事情；那会毁掉他们。\n[3] 虽然这篇文章谈论的是程序员，但我们需要引进的群体更广泛，从设计师到程序员再到电气工程师。作为通用术语，最好的可能是\u0026quot;数字人才\u0026rdquo;。似乎让论证过于狭窄比用新词混淆每个人要好。\n感谢萨姆·奥特曼、约翰·科利森、帕特里克·科利森、杰西卡·利文斯顿、杰夫·拉尔斯顿、弗雷德·威尔逊和卡萨尔·尤尼斯阅读本文的草稿。\n西班牙语翻译\n"
  },{
    "title": "设计与研究",
    "url": "/paul_graham/essays_zh/desres/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n设计与研究 2003年1月\n（本文源自2002年秋季NEPLS会议的主题演讲。）\n访问这个国家的人常常惊讶地发现，美国人喜欢以询问\u0026quot;你是做什么的？\u0026ldquo;来开始对话。我从来不喜欢这个问题。我很少有一个简洁的答案。但我想我终于解决了这个问题。现在，当有人问我做什么时，我会直视他们的眼睛说\u0026quot;我正在设计一种新的Lisp方言。\u0026ldquo;我推荐这个答案给任何不喜欢被问及做什么的人。对话会立即转向其他话题。\n我不认为自己在研究编程语言。我只是在设计一种，就像有人可能设计一座建筑、一把椅子或一种新字体一样。我不是在试图发现什么新东西。我只是想创造一种编程起来很舒服的语言。在某些方面，这个假设让生活轻松很多。\n设计和研究之间的区别似乎是一个新与好的问题。设计不一定要新，但一定要好。研究不一定要好，但一定要新。我认为这两条路在顶端汇合：最好的设计通过使用新思想超越其前人，而最好的研究解决的不仅是新的问题，而且是真正值得解决的问题。所以最终我们的目标是相同的目的地，只是从不同的方向接近。\n今天我要谈论的是从背面看你的目标是什么样子的。当你把编程语言视为设计问题而非研究课题时，你会做什么不同的事情？\n最大的区别是你更关注用户。设计始于问，这是为谁而做的，他们从中需要什么？例如，一个好的建筑师不是先创建一个设计然后强加给用户，而是通过研究预期用户并找出他们需要什么来开始。\n注意我说的是\u0026quot;他们需要的\u0026rdquo;，而不是\u0026quot;他们想要的\u0026rdquo;。我并不是说作为一名设计师工作意味着像快餐厨师一样工作，做客户告诉你的任何事情。这在艺术领域的各个领域都有所不同，但我不认为有任何领域是由那些完全按照客户要求做事的人做出最好的作品的。\n在衡量好设计的标准是它对用户有多好用这一点上，顾客永远是对的。如果你写了一本让所有人都感到无聊的小说，或者一把坐着极不舒服的椅子，那么你的工作就很糟糕，就是这样。说小说或椅子是根据最先进的理论原理设计的，这并不是辩解。\n然而，做出对用户有用的东西并不意味着简单地做用户告诉你做的事情。用户不知道所有的选择是什么，而且常常对他们真正想要的东西感到困惑。\n这个悖论的答案，我认为是你必须为用户设计，但必须设计用户需要的东西，而不是仅仅设计他们说他们想要的东西。这很像做医生。你不能仅仅治疗病人的症状。当病人告诉你他们的症状时，你必须找出真正的问题所在，并治疗那个。\n这种对用户的关注是一种公理，大多数好的设计实践都可以从中推导出来，大多数设计问题都围绕着它。\n如果好的设计必须满足用户的需求，那么用户是谁？当我说设计必须为用户时，我并不是说好的设计旨在某种最低标准。你可以选择任何你想要的用户群体。例如，如果你在设计一个工具，你可以为从初学者到专家的任何人设计，而针对一个群体的好设计对另一个群体可能是坏的设计。关键是，你必须选择某个用户群体。我认为除非参考某个预期用户，否则你甚至无法谈论好或坏的设计。\n如果预期用户包括设计师自己，你最有可能获得好的设计。当你为不包括你自己的群体设计东西时，它往往是为那些你认为比你不够复杂的人设计的，而不是更复杂的。\n这是一个问题，因为无论多么仁慈，居高临下地看待用户似乎不可避免地会腐蚀设计师。我怀疑美国很少有住房项目是由期望住在那里的建筑师设计的。你可以在编程语言中看到同样的现象。C、Lisp和Smalltalk是为它们自己的设计师使用而创建的。Cobol、Ada和Java是为其他人使用而创建的。\n如果你认为你在为白痴设计东西，那么很可能你设计的东西不够好，即使是对白痴来说。即使你为最复杂的用户设计东西，你仍然在为人类设计。在研究方面情况不同。在数学中，你选择抽象不是因为它们容易理解，而是因为它们能让证明更短。我认为这对科学大体上也是如此。科学思想并不是为了符合人体工程学。\n在艺术领域，情况非常不同。设计完全是关于人的。人体是个奇怪的东西，但当你设计一把椅子时，那就是你设计的对象，没有办法回避。所有艺术都必须迎合人类的兴趣和局限性。例如，在绘画中，在其他条件相同的情况下，有人的画比没有人的画更有趣。文艺复兴时期的伟大画作都充满了人，这不仅仅是历史的偶然。如果不是这样，绘画作为媒介就不会拥有它所拥有的声望。\n不管喜欢与否，编程语言也是为人类服务的，我怀疑人脑就像人体一样凹凸不平且特异。有些思想人们很容易掌握，有些则不然。例如，我们处理细节的能力似乎非常有限。正是这个事实使得编程语言一开始就是个好主意；如果我们能处理细节，我们可以直接用机器语言编程。\n还要记住，语言主要不是完成程序的形式，而是程序必须在其中开发的东西。任何艺术领域的人都会告诉你，你可能需要不同的媒介来处理这两种情况。例如，大理石是完成思想的漂亮、耐用的媒介，但对于开发新思想来说，它却是一种无可救药的僵化媒介。\n程序就像证明一样，是一棵树的修剪版本，这棵树过去到处都有错误的分支。所以语言的测试不仅仅是完成的程序在它里面看起来有多干净，而是到达完成程序的路径有多干净。一个能给你优雅完成程序的设计选择可能不会给你一个优雅的设计过程。例如，我写过几个定义宏的宏，充满了嵌套的反引号，现在看起来像小宝石，但写它们花费了数小时最丑陋的试错，而且坦率地说，我仍然不完全确定它们是正确的。\n我们常常表现得好像语言的测试是完成的程序在它里面看起来有多好。当你看到同一个程序用两种语言编写，一个版本短得多时，这似乎很有说服力。当你从艺术的角度接近这个问题时，你不太可能依赖这种测试。你不想最终得到一个像大理石一样的编程语言。\n例如，在软件开发中拥有一个交互式顶层（在Lisp中称为读取-求值-打印循环）是一个巨大的胜利。当你有一个这样的东西时，它对语言的设计有实际影响。它对于一个必须在使用前声明变量的语言来说效果不佳，例如。当你只是在顶层输入表达式时，你希望能够将x设置为某个值，然后开始对x做事情。你不想必须先声明x的类型。你可以对任何一个前提提出异议，但如果一个语言必须有顶层才能方便，而强制类型声明与顶层不兼容，那么任何强制类型声明的语言都不可能方便编程。\n在实践中，要获得好的设计，你必须接近并保持接近你的用户。你必须不断在实际用户上校准你的想法，尤其是在开始时。简·奥斯汀的小说如此之好的原因之一是她把它们大声读给家人听。这就是为什么她从不沉溺于自我放纵的风景描述或矫饰的哲学思考。（哲学在那里，但它被编织进故事中，而不是像标签一样粘贴在上面。）如果你打开一本普通的\u0026quot;文学\u0026quot;小说，想象把它作为你写的东西大声读给朋友听，你会敏锐地感觉到那种东西对读者来说是多么令人难以忍受。\n在软件世界，这个想法被称为\u0026quot;较差就是更好\u0026quot;。实际上，\u0026ldquo;较差就是更好\u0026quot;的概念中混合了几个想法，这就是为什么人们仍在争论较差是否真的更好。但这个混合中的主要思想之一是，如果你在构建新东西，你应该尽快将原型放到用户面前。\n另一种方法可能叫做\u0026quot;万福玛丽亚策略\u0026rdquo;。你不是快速拿出原型并逐步改进它，而是试图在一次长传触地中创建完整、完成的产品。据我所知，这是灾难的根源。无数创业公司在互联网泡沫期间这样自我毁灭。我从未听说过有成功的案例。\n软件世界之外的人可能没有意识到的是，\u0026ldquo;较差就是更好\u0026quot;的思想在整个艺术领域都有体现。例如，在绘画中，这个思想在文艺复兴时期被发现。现在几乎每个绘画老师都会告诉你，获得准确绘画的正确方法不是慢慢地围绕物体的轮廓工作，因为错误会累积，最后你会发现线条不相遇。相反，你应该在大致正确的地方画几条快速的线，然后逐渐完善这个初始草图。\n在大多数领域，传统上原型是用不同材料制作的。要切割成金属的字体最初是用刷子在纸上设计的。要铸成青铜的雕像是用蜡建模的。要在挂毯上刺绣的图案是用墨水在纸上绘制的。要用石头建造的建筑是在较小规模的木材上测试的。\n当油画在十五世纪首次流行时令人兴奋的原因是，你实际上可以从原型制作完成的作品。如果你愿意，可以做一个初步的绘图，但你不必受它约束；你可以在完成绘画时解决所有细节，甚至做重大改变。\n在软件中你也可以这样做。原型不一定只是一个模型；你可以将其精制成成品。我认为你应该在可能的时候总是这样做。它能让你利用一路上获得的新见解。但也许更重要的是，它对士气有好处。\n士气在设计中至关重要。我很惊讶人们不多谈论它。我的第一个绘画老师告诉我：当你画某样东西感到无聊时，画出来的东西看起来会很无聊。例如，假设你必须画一栋建筑，你决定单独画每一块砖。如果你愿意，你可以这样做，但如果你中途感到无聊并开始机械地画砖而不是观察每一块，那么画出来的效果会比仅仅暗示砖块要差。\n通过逐步完善原型来建造东西对士气有好处，因为它能让你保持投入。在软件中，我的规则是：始终有可工作的代码。如果你正在写一小时内可以测试的东西，那么你有立即获得奖励的前景来激励你。在艺术领域也是如此，特别是在油画中。大多数画家从模糊的草图开始，然后逐步完善。如果你这样工作，那么原则上你永远不必在一天结束时留下看起来确实未完成的东西。确实，画家之间甚至有句谚语：\u0026ldquo;一幅画永远不会完成，你只是停止在上面工作。\u0026ldquo;这个想法对任何做过软件的人来说都很熟悉。\n士气是难以设计给不够复杂用户的另一个原因。很难对自己不喜欢的东西保持兴趣。要做出好东西，你必须想\u0026quot;哇，这真的很棒\u0026rdquo;，而不是\u0026quot;这是什么垃圾；那些傻瓜会喜欢它\u0026rdquo;。\n设计意味着为人类制造东西。但不仅仅是用户是人。设计师也是人。\n注意这段时间我一直在谈论\u0026quot;设计师\u0026rdquo;。设计通常必须由单个人控制才能做好。然而，似乎几个人可以合作进行一个研究项目。这在我看来是研究和设计之间最有趣的区别之一。\n艺术领域有著名合作的例子，但它们大多数似乎是分子结合而不是核融合的情况。在歌剧中，通常由一个人写剧本，另一个人写音乐。在文艺复兴时期，来自北欧的工匠经常被雇佣来做意大利绘画背景中的风景。但这些不是真正的合作。它们更像是罗伯特·弗罗斯特\u0026quot;好篱笆造就好邻居\u0026quot;的例子。你可以把好的设计实例粘在一起，但在每个单独的项目中，一个人必须处于控制地位。\n我不是说好的设计要求一个人思考所有事情。没有什么比一个你信任其判断的人的建议更有价值了。但谈话结束后，关于做什么的决定必须由一个人来做。\n为什么研究可以由合作者完成而设计不能？这是一个有趣的问题。我不知道答案。也许，如果设计和研究汇合，最好的研究也是好的设计，而且实际上不能由合作者完成。许多最著名的科学家似乎都是独自工作的。但我了解得不够多，无法说这里是否有模式。这可能仅仅是因为许多著名科学家工作时合作不那么普遍。\n无论科学领域的情况如何，真正的合作在艺术领域似乎极为罕见。委员会设计是坏设计的同义词。为什么会这样？有什么方法可以克服这个限制吗？\n我倾向于认为没有——好的设计需要一个独裁者。一个原因是好的设计必须是一体的。设计不仅是为人类，而是为单个的人。如果一个设计代表的思想适合一个人的头脑，那么这个思想也会适合用户的头脑。\n相关链接：\n日语翻译 制造者的品味 罗马尼亚语翻译 西班牙语翻译 ",
    "description": "",
    "tags": ["设计","研究","编程语言","lisp","用户体验","软件开发","创造力"],
    "categories": [],
    "content": "→ English Version\n设计与研究 2003年1月\n（本文源自2002年秋季NEPLS会议的主题演讲。）\n访问这个国家的人常常惊讶地发现，美国人喜欢以询问\u0026quot;你是做什么的？\u0026ldquo;来开始对话。我从来不喜欢这个问题。我很少有一个简洁的答案。但我想我终于解决了这个问题。现在，当有人问我做什么时，我会直视他们的眼睛说\u0026quot;我正在设计一种新的Lisp方言。\u0026ldquo;我推荐这个答案给任何不喜欢被问及做什么的人。对话会立即转向其他话题。\n我不认为自己在研究编程语言。我只是在设计一种，就像有人可能设计一座建筑、一把椅子或一种新字体一样。我不是在试图发现什么新东西。我只是想创造一种编程起来很舒服的语言。在某些方面，这个假设让生活轻松很多。\n设计和研究之间的区别似乎是一个新与好的问题。设计不一定要新，但一定要好。研究不一定要好，但一定要新。我认为这两条路在顶端汇合：最好的设计通过使用新思想超越其前人，而最好的研究解决的不仅是新的问题，而且是真正值得解决的问题。所以最终我们的目标是相同的目的地，只是从不同的方向接近。\n今天我要谈论的是从背面看你的目标是什么样子的。当你把编程语言视为设计问题而非研究课题时，你会做什么不同的事情？\n最大的区别是你更关注用户。设计始于问，这是为谁而做的，他们从中需要什么？例如，一个好的建筑师不是先创建一个设计然后强加给用户，而是通过研究预期用户并找出他们需要什么来开始。\n注意我说的是\u0026quot;他们需要的\u0026rdquo;，而不是\u0026quot;他们想要的\u0026rdquo;。我并不是说作为一名设计师工作意味着像快餐厨师一样工作，做客户告诉你的任何事情。这在艺术领域的各个领域都有所不同，但我不认为有任何领域是由那些完全按照客户要求做事的人做出最好的作品的。\n在衡量好设计的标准是它对用户有多好用这一点上，顾客永远是对的。如果你写了一本让所有人都感到无聊的小说，或者一把坐着极不舒服的椅子，那么你的工作就很糟糕，就是这样。说小说或椅子是根据最先进的理论原理设计的，这并不是辩解。\n然而，做出对用户有用的东西并不意味着简单地做用户告诉你做的事情。用户不知道所有的选择是什么，而且常常对他们真正想要的东西感到困惑。\n这个悖论的答案，我认为是你必须为用户设计，但必须设计用户需要的东西，而不是仅仅设计他们说他们想要的东西。这很像做医生。你不能仅仅治疗病人的症状。当病人告诉你他们的症状时，你必须找出真正的问题所在，并治疗那个。\n这种对用户的关注是一种公理，大多数好的设计实践都可以从中推导出来，大多数设计问题都围绕着它。\n如果好的设计必须满足用户的需求，那么用户是谁？当我说设计必须为用户时，我并不是说好的设计旨在某种最低标准。你可以选择任何你想要的用户群体。例如，如果你在设计一个工具，你可以为从初学者到专家的任何人设计，而针对一个群体的好设计对另一个群体可能是坏的设计。关键是，你必须选择某个用户群体。我认为除非参考某个预期用户，否则你甚至无法谈论好或坏的设计。\n如果预期用户包括设计师自己，你最有可能获得好的设计。当你为不包括你自己的群体设计东西时，它往往是为那些你认为比你不够复杂的人设计的，而不是更复杂的。\n这是一个问题，因为无论多么仁慈，居高临下地看待用户似乎不可避免地会腐蚀设计师。我怀疑美国很少有住房项目是由期望住在那里的建筑师设计的。你可以在编程语言中看到同样的现象。C、Lisp和Smalltalk是为它们自己的设计师使用而创建的。Cobol、Ada和Java是为其他人使用而创建的。\n如果你认为你在为白痴设计东西，那么很可能你设计的东西不够好，即使是对白痴来说。即使你为最复杂的用户设计东西，你仍然在为人类设计。在研究方面情况不同。在数学中，你选择抽象不是因为它们容易理解，而是因为它们能让证明更短。我认为这对科学大体上也是如此。科学思想并不是为了符合人体工程学。\n在艺术领域，情况非常不同。设计完全是关于人的。人体是个奇怪的东西，但当你设计一把椅子时，那就是你设计的对象，没有办法回避。所有艺术都必须迎合人类的兴趣和局限性。例如，在绘画中，在其他条件相同的情况下，有人的画比没有人的画更有趣。文艺复兴时期的伟大画作都充满了人，这不仅仅是历史的偶然。如果不是这样，绘画作为媒介就不会拥有它所拥有的声望。\n不管喜欢与否，编程语言也是为人类服务的，我怀疑人脑就像人体一样凹凸不平且特异。有些思想人们很容易掌握，有些则不然。例如，我们处理细节的能力似乎非常有限。正是这个事实使得编程语言一开始就是个好主意；如果我们能处理细节，我们可以直接用机器语言编程。\n还要记住，语言主要不是完成程序的形式，而是程序必须在其中开发的东西。任何艺术领域的人都会告诉你，你可能需要不同的媒介来处理这两种情况。例如，大理石是完成思想的漂亮、耐用的媒介，但对于 …"
  },{
    "title": "证书之后",
    "url": "/paul_graham/essays_zh/credentials/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n证书之后 2008年12月\n几个月前，我读到一篇《纽约时报》关于韩国补习学校的文章，说进入合适的大学可以决定雄心勃勃的韩国年轻人的成败。一位家长补充说：\u0026ldquo;在我国，大学入学考试决定一个人未来的70%到80%。\u0026quot;。令人震惊的是这听起来多么老派。然而，当我在高中时，作为对美国的描述，这听起来并不过分。这意味着这里的情况一定发生了变化。\n现在，人们在美国的生活进程似乎比25年前更少地由证书决定，而更多地由表现决定。你上哪所大学仍然重要，但不像以前那样。\n发生了什么？\n根据学术证书判断人在当时是一种进步。这种做法似乎始于中国，从587年开始，帝国公务员候选人必须参加古典文学考试。[1] 这也是对财富的测试，因为它测试的知识如此专业化，通过需要多年的昂贵培训。虽然财富是通过的必要条件，但不是充分条件。按照587年世界其他地方的标准，中国的制度非常开明。欧洲直到十九世纪才引入正式的公务员考试，即使如此，他们似乎也受到了中国例子的影响。\n在证书之前，政府职位主要通过家庭影响力获得，如果不是赤裸裸的贿赂的话。通过测试表现来判断人是一个巨大的进步。但绝不是完美的解决方案。当你那样判断人时，你往往会得到补习学校——他们在中国明朝和十九世纪的英格兰就像在今天的韩国一样。\n补习学校实际上是密封中的漏洞。使用证书是试图封堵代际之间权力的直接传递，而补习学校代表权力找到密封中的漏洞。补习学校将一代人的财富转化为下一代人的证书。\n很难打败这种现象，因为学校会调整以适应测试测量的任何内容。当测试狭窄且可预测时，你会得到经典模式的补习学校，像那些为桑赫斯特（英国的西点军校）准备候选人的学校，或者美国学生现在为提高SAT分数而上的课程。但随着测试变得更广泛，学校也会如此。为中国帝国公务员考试准备候选人需要数年时间，就像今天的预科学校一样。但所有这些机构存在的理由都是一样的：击败制度。[2]\n历史表明，在其他条件相同的情况下，社会的繁荣程度与其防止父母直接影响子女成功的能力成正比。父母间接帮助子女是件好事——例如，帮助他们变得更聪明或更自律，这使他们更成功。问题出在父母使用直接方法时：当他们能够用自己的财富或权力替代子女的品质时。\n父母在能够做到时会倾向于这样做。父母会为子女而死，所以发现他们也会为子女把顾忌推到极限并不奇怪。特别是当其他父母也在这样做时。\n封堵这种力量有双重优势。社会不仅得到\u0026quot;最适合工作的人\u0026rdquo;，而且父母的雄心从直接方法转向间接方法——真正试图好好抚养子女。\n但我们应该期望很难遏制父母为子女获得不公平优势的努力。我们正在处理人性中最强大的力量之一。我们不应该期望天真的解决方案能奏效，就像我们不期望让海洛因远离监狱的天真解决方案能奏效一样。\n解决问题的明显方法是让证书更好。如果一个社会使用的测试目前可以被破解，我们可以研究人们击败它们的方式并尝试堵住漏洞。你可以利用补习学校向你显示大部分漏洞在哪里。它们还告诉你何时在修复它们方面取得成功：当补习学校变得不那么受欢迎时。\n更一般的解决方案是推动提高透明度，特别是在关键的社会瓶颈，如大学招生。在美国，这个过程仍然显示出许多腐败的外部迹象。例如，legacy招生。官方的说法是legacy地位没有太大权重，因为它所做的只是打破平局：申请人按能力分桶，legacy地位仅用于决定跨越截止线的桶中的申请人。但这意味着大学可以通过调整跨越截止线的桶的大小，使legacy地位具有或多或少的权重。\n通过逐渐削弱对证书的滥用，你可能会使它们更加严密。但这将是一场多么漫长的战斗。特别是当管理测试的机构并不真正希望它们严密时。\n幸运的是，有更好的方法来防止代际之间权力的直接传递。我们不仅可以让证书更难破解，还可以让它们变得不那么重要。\n让我们想想证书的用途。从功能上讲，它们是预测表现的一种方式。如果你能衡量实际表现，你就不需要它们。\n那么它们为什么会演化呢？为什么我们一直没有衡量实际表现？想想证书主义首次出现的地方：在为大组织选择候选人时。在大组织中，个人表现很难衡量，表现越难衡量，预测它就越重要。如果一个组织能够立即且廉价地衡量新人的表现，他们就不需要检查他们的证书。他们可以接纳每个人，只保留好的。\n大组织不能这样做。但市场中的一群小组织可以接近。市场接纳每个组织，只保留好的组织。随着组织变小，这接近于接纳每个人，只保留好的。因此，在其他条件相同的情况下，由更多、更小的组织组成的社会会更少关心证书。\n这就是在美国发生的事情。这就是为什么那些来自韩国的引述听起来如此老派的原因。他们谈论的是像几十年前美国那样的经济，由几家大公司主导。在这种环境中，雄心勃勃的人的路线是加入一个并爬到顶端。那时证书很重要。在大组织的文化中，精英血统成为自我实现的预言。\n这在小公司中不起作用。即使你的同事对你的证书印象深刻，如果你的表现不匹配，他们很快就会与你分开，因为公司会倒闭，人们会分散。\n在小公司的世界里，表现是任何人唯一关心的事情。为创业公司招聘的人不在乎你是否大学毕业，更不用说上哪所大学了。他们只关心你能做什么。事实上，即使在大组织中，这也是唯一应该重要的东西。证书之所以如此有威望，是因为长期以来社会中的大组织往往是最强大的。但至少在美国，它们不再拥有曾经拥有的权力垄断，正是因为它们无法衡量（从而奖励）个人表现。为什么要花二十年爬公司梯子，当你可以直接被市场奖励呢？\n我意识到我看到了比大多数人更夸张的变化版本。作为早期风险投资公司的合伙人，我像一个跳伞教练，把人们推出证书的旧世界，进入表现的新世界。我是我所看到的变化的推动者。但我不认为我在想象。25年前，雄心勃勃的人选择直接被市场判断并不那么容易。你必须通过老板，而他们受到你上过哪所大学的影响。\n什么使小组织在美国取得成功成为可能？我仍然不完全确定。创业公司当然是其中的重要部分。小组织可以比大组织更快地发展新想法，而新想法变得越来越有价值。\n但我不认为创业公司解释了从证书到衡量的所有转变。我的朋友Julian Weber告诉我，当他在1950年代去纽约一家律师事务所工作时，他们支付给 associates 的薪水远低于今天的公司。那时的律师事务所不假装根据人们所做工作的价值支付他们。薪水基于资历。年轻的员工正在支付他们的会费。他们以后会得到奖励。\n同样的原则在工业公司盛行。当我父亲在1970年代在西屋电气工作时，有为他工作的人比他赚得多，因为他们在那里时间更长。\n现在公司越来越多地必须为员工所做的工作支付市场价格。一个原因是员工不再信任公司提供延迟奖励：为什么在一个可能破产或被接管并所有隐性义务都被消除的公司工作来积累延迟奖励？另一个是一些公司打破了行列，开始向年轻员工支付大量金额。在咨询、法律和金融方面尤其如此，这导致了雅皮士现象。这个词现在很少使用，因为看到25岁有钱的人不再令人惊讶，但在1985年，一个25岁的专业人士能够买得起新的宝马是如此新颖，以至于催生了一个新词。\n经典的雅皮士为小组织工作。他不为通用小器具公司工作，而是为处理通用小器具公司收购的律师事务所或承销他们债券发行的投资银行工作。\n创业公司和雅皮士大约同时在1970年代末和1980年代初进入美国概念词汇。我不认为有因果关系。创业公司的发生是因为技术开始变化如此之快，以至于大公司不再能够控制较小的公司。我不认为雅皮士的兴起是受其启发；似乎更像是管理大公司运作方式的社会惯例（也许是法律）发生了变化。但这两种现象迅速融合产生了一个现在似乎显而易见的原则：按市场费率支付精力充沛的年轻人，并从中获得相应的高表现。\n大约在同一时间，美国经济摆脱了困扰其大部分1970年代的低迷。有联系吗？我知道得不够多，无法说，但当时感觉像是这样。释放了很多能量。\n担心竞争力的国家有理由关心国内创业公司的数量。但他们最好检查基本原则。他们是否让精力充沛的年轻人按市场费率获得他们所做工作的报酬？年轻人是测试，因为当人们不根据表现获得奖励时，他们总是根据资历获得奖励。\n在你的经济中，只需要几个按表现支付的滩头阵地。衡量像热量一样传播。如果社会的一个部分比其他部分更擅长衡量，它倾向于推动其他人做得更好。如果年轻但聪明和有动力的人通过创办自己的公司比为现有的公司工作赚得更多，现有的公司被迫支付更多来留住他们。因此市场费率逐渐渗透到每个组织，甚至是政府。[3]\n表现的衡量往往会促使甚至发行证书的组织也顺应。当我们是孩子时，我常常通过命令妹妹做我知道她无论如何都要做的事情来烦她。随着证书被表现所取代，类似的角色是前看门人所能期望的最好的。一旦颁发证书的机构不再从事自我实现的预言业务，他们将不得不更努力地预测未来。\n证书是贿赂和影响力的一步。但它们不是最后一步。有更好的方法来阻止代际之间权力的传递：鼓励向由更多、更小单位组成经济发展的趋势。然后你可以衡量证书仅仅预测的东西。\n没有人喜欢代际之间权力的传递——不是左派也不是右派。但右派所青睐的市场力量被证明是防止它的更好方法，而不是左派被迫依赖的证书。\n证书时代在二十世纪后期大组织的权力达到顶峰时开始结束。现在我们似乎正在进入一个基于衡量的新时代。新模型之所以如此迅速地推进，是因为它效果好得多。它没有放缓的迹象。\n注释 [1] 宫崎市定（Conrad Schirokauer译），《中国的考试地狱：中华帝国的科举考试》，耶鲁大学出版社，1981年。\n古埃及的抄写员参加考试，但它们更像是任何学徒都可能必须通过的熟练程度测试类型。\n[2] 当我说预科学校存在的理由是让孩子进入更好的大学时，我是在最狭隘的意义上说的。我不是说那是预科学校所做的一切，只是说如果它们对大学招生零影响，对它们的需求会少得多。\n[3] 然而，累进税率倾向于通过减少好和坏衡量者之间的差异来抑制这种效果。\n感谢Trevor Blackwell、Sarah Harlin、Jessica Livingston和David Sloo阅读本文的草稿。\n",
    "description": "",
    "tags": ["证书","教育","表现","精英管理","社会","职业","创业","衡量"],
    "categories": [],
    "content": "→ English Version\n证书之后 2008年12月\n几个月前，我读到一篇《纽约时报》关于韩国补习学校的文章，说进入合适的大学可以决定雄心勃勃的韩国年轻人的成败。一位家长补充说：\u0026ldquo;在我国，大学入学考试决定一个人未来的70%到80%。\u0026quot;。令人震惊的是这听起来多么老派。然而，当我在高中时，作为对美国的描述，这听起来并不过分。这意味着这里的情况一定发生了变化。\n现在，人们在美国的生活进程似乎比25年前更少地由证书决定，而更多地由表现决定。你上哪所大学仍然重要，但不像以前那样。\n发生了什么？\n根据学术证书判断人在当时是一种进步。这种做法似乎始于中国，从587年开始，帝国公务员候选人必须参加古典文学考试。[1] 这也是对财富的测试，因为它测试的知识如此专业化，通过需要多年的昂贵培训。虽然财富是通过的必要条件，但不是充分条件。按照587年世界其他地方的标准，中国的制度非常开明。欧洲直到十九世纪才引入正式的公务员考试，即使如此，他们似乎也受到了中国例子的影响。\n在证书之前，政府职位主要通过家庭影响力获得，如果不是赤裸裸的贿赂的话。通过测试表现来判断人是一个巨大的进步。但绝不是完美的解决方案。当你那样判断人时，你往往会得到补习学校——他们在中国明朝和十九世纪的英格兰就像在今天的韩国一样。\n补习学校实际上是密封中的漏洞。使用证书是试图封堵代际之间权力的直接传递，而补习学校代表权力找到密封中的漏洞。补习学校将一代人的财富转化为下一代人的证书。\n很难打败这种现象，因为学校会调整以适应测试测量的任何内容。当测试狭窄且可预测时，你会得到经典模式的补习学校，像那些为桑赫斯特（英国的西点军校）准备候选人的学校，或者美国学生现在为提高SAT分数而上的课程。但随着测试变得更广泛，学校也会如此。为中国帝国公务员考试准备候选人需要数年时间，就像今天的预科学校一样。但所有这些机构存在的理由都是一样的：击败制度。[2]\n历史表明，在其他条件相同的情况下，社会的繁荣程度与其防止父母直接影响子女成功的能力成正比。父母间接帮助子女是件好事——例如，帮助他们变得更聪明或更自律，这使他们更成功。问题出在父母使用直接方法时：当他们能够用自己的财富或权力替代子女的品质时。\n父母在能够做到时会倾向于这样做。父母会为子女而死，所以发现他们也会为子女把顾忌推到极限并不奇怪。特别是当其他父母也在这样做时。\n封堵这种力量有双重优势。社会不仅得到\u0026quot;最适合工作的人\u0026rdquo;，而且父母的雄心从直接方法转向间接方法——真正试图好好抚养子女。\n但我们应该期望很难遏制父母为子女获得不公平优势的努力。我们正在处理人性中最强大的力量之一。我们不应该期望天真的解决方案能奏效，就像我们不期望让海洛因远离监狱的天真解决方案能奏效一样。\n解决问题的明显方法是让证书更好。如果一个社会使用的测试目前可以被破解，我们可以研究人们击败它们的方式并尝试堵住漏洞。你可以利用补习学校向你显示大部分漏洞在哪里。它们还告诉你何时在修复它们方面取得成功：当补习学校变得不那么受欢迎时。\n更一般的解决方案是推动提高透明度，特别是在关键的社会瓶颈，如大学招生。在美国，这个过程仍然显示出许多腐败的外部迹象。例如，legacy招生。官方的说法是legacy地位没有太大权重，因为它所做的只是打破平局：申请人按能力分桶，legacy地位仅用于决定跨越截止线的桶中的申请人。但这意味着大学可以通过调整跨越截止线的桶的大小，使legacy地位具有或多或少的权重。\n通过逐渐削弱对证书的滥用，你可能会使它们更加严密。但这将是一场多么漫长的战斗。特别是当管理测试的机构并不真正希望它们严密时。\n幸运的是，有更好的方法来防止代际之间权力的直接传递。我们不仅可以让证书更难破解，还可以让它们变得不那么重要。\n让我们想想证书的用途。从功能上讲，它们是预测表现的一种方式。如果你能衡量实际表现，你就不需要它们。\n那么它们为什么会演化呢？为什么我们一直没有衡量实际表现？想想证书主义首次出现的地方：在为大组织选择候选人时。在大组织中，个人表现很难衡量，表现越难衡量，预测它就越重要。如果一个组织能够立即且廉价地衡量新人的表现，他们就不需要检查他们的证书。他们可以接纳每个人，只保留好的。\n大组织不能这样做。但市场中的一群小组织可以接近。市场接纳每个组织，只保留好的组织。随着组织变小，这接近于接纳每个人，只保留好的。因此，在其他条件相同的情况下，由更多、更小的组织组成的社会会更少关心证书。\n这就是在美国发生的事情。这就是为什么那些来自韩国的引述听起来如此老派的原因。他们谈论的是像几十年前美国那样的经济，由几家大公司主导。在这种环境中，雄心勃勃的人的路线是加入一个并爬到顶端。那时证书很重要。在大组织的文化中，精英血统成为自我实现的预言。\n这 …"
  },{
    "title": "该做什么",
    "url": "/paul_graham/essays_zh/do/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n该做什么 2025年3月\n一个人应该做什么？这可能看起来是个奇怪的问题，但它不是无意义或无法回答的。这是孩子们在学会不问大问题之前会问的那种问题。我只是在调查其他事情时偶然遇到了这个问题。但一旦我遇到了，我觉得我至少应该尝试回答它。\n那么一个人应该做什么？一个人应该帮助人们，照顾世界。这两点是显而易见的。但是还有其他事情吗？当我问这个问题时，弹出的答案是创造好的新事物。\n我无法证明一个人应该这样做，就像我无法证明一个人应该帮助人们或照顾世界一样。我们在这里谈论的是第一性原理。但我可以解释为什么这个原则是有道理的。人类能做的最令人印象深刻的事情是思考。这可能是能做的最令人印象深刻的事情。而最好的思考，或者更准确地说，一个人思考得最好的最好证明，就是创造好的新事物。\n我是在非常一般的意义上说新事物。牛顿的物理学就是一个好的新事物。实际上，这个原则的第一个版本是拥有好的新想法。但这似乎不够一般：它不包括创作艺术或音乐，除非它们体现了新想法。虽然它们可能体现新想法，但它们体现的不仅仅是新想法，除非你把\u0026quot;想法\u0026quot;这个词拉伸得如此无用以至于它包括了你神经系统中经过的一切。\n即使对于一个人有意识的想法，我更喜欢\u0026quot;创造好的新事物\u0026quot;这种说法。还有其他方式来描述最好的思考。例如，做出发现，或者比其他人更深入地理解某件事。但如果你不能为它制作模型或写文章，你对某件事的理解有多好呢？确实，试图表达你所理解的不仅是证明你理解它的方式，也是更好地理解它的方式。\n我喜欢这种说法的另一个原因是它让我们倾向于创造。它使我们更喜欢那些自然被视为制作东西的想法，而不是，比如说，对其他人制作的东西做出批判性观察。那些也是想法，有时是有价值的想法，但很容易欺骗自己相信它们比实际更有价值。批评看起来很复杂，而创造新事物常常看起来很笨拙，特别是在一开始；然而正是那些最初的步骤最稀有和最有价值。\n新事物的本质是什么？我认为是的。显然在科学中是本质的。如果你抄袭了别人的论文并作为自己的发表，这不仅不会令人印象深刻，而且是不诚实的。在艺术中也是如此。一幅好画的复制品可以是令人愉悦的东西，但它不像原作那样令人印象深刻。这反过来意味着一遍又一遍地做同样的事情不会令人印象深刻，无论做得多么好；你只是在复制自己。\n但请注意，我们用这个原则谈论的是不同种类的\u0026quot;应该\u0026quot;。照顾人们和世界是意义上的\u0026quot;应该\u0026quot;，因为它们是一个人的责任，但创造好的新事物是意义上的\u0026quot;应该\u0026quot;，因为这是如何充分实现一个人潜力的方式。历史上大多数关于如何生活的规则都是两种\u0026quot;应该\u0026quot;的混合，但通常前者比后者多。[1]\n在历史的大部分时间里，\u0026ldquo;一个人应该做什么？\u0026ldquo;这个问题在任何地方都得到大致相同的答案，无论你问西塞罗还是孔子。你应该明智、勇敢、诚实、节制和公正，维护传统，服务公共利益。有一段很长的时间，在世界某些地方，答案变成了\u0026quot;侍奉上帝\u0026rdquo;，但在实践中，被认为明智、勇敢、诚实、节制和公正，维护传统，服务公共利益仍然是好的。事实上，这个配方对大多数维多利亚时代的人来说似乎是对的。但其中没有关于照顾世界或创造新事物的东西，这有点令人担忧，因为这个问题似乎应该是永恒的。答案不应该有太大变化。\n传统答案没有提到照顾世界，我对此不太担心。显然，只有当人们清楚我们可以毁灭世界时，人们才开始关心这一点。但如果传统答案没有提到创造好的新事物，它怎么可能重要呢？\n传统答案是对一个稍微不同问题的回答。它们是对如何存在而不是做什么问题的回答。听众对做什么没有太多选择。直到最近几个世纪，听众是土地拥有阶级，也是政治阶级。他们不是在做物理学和写小说之间选择。他们的工作是注定的：管理他们的庄园，参与政治，必要时战斗。在业余时间做某些其他类型的工作是可以的，但理想情况下一个人没有任何业余时间。西塞罗的《论责任》是对如何生活这个问题的伟大古典回答之一，他在其中明确说，如果不是因为最近的政治动荡被排除在公共生活之外，他甚至不会写这本书。[2]\n当然有人们做我们现在称之为\u0026quot;原创工作\u0026quot;的事情，他们常常因此受到钦佩，但他们不被视为榜样。阿基米德知道他是第一个证明球体体积是其最小外接圆柱体体积的2/3的人，并且对此感到非常高兴。但你找不到古代作家敦促他们的读者效仿他。他们更多地将他视为神童而不是榜样。\n现在我们中的更多人可以遵循阿基米德的例子，将大部分注意力投入到一种工作中。他毕竟成为了一个榜样，还有其他一群人，他的同代人会觉得奇怪地将他们视为一个独特的群体，因为创造新事物的人群与社会等级制度成直角运行。\n什么样的事物算数？我宁愿把这个问题留给它们的创造者。试图定义任何种类的门槛将是一件有风险的事情，因为新类型的工作常常最初被鄙视。雷蒙德·钱德勒写的是字面意义上的低俗小说，现在他被公认为二十世纪最好的作家之一。确实，这种模式如此常见，你可以将其用作配方：如果你对某种不被认为有声望的工作感到兴奋，并且你能解释其他人对其忽视了什么，那么这不仅是一种可以去做的工作，而且是一种要寻求的工作。\n我不想定义任何门槛的另一个原因是我们不需要它们。创造好的新事物的人不需要规则来保持诚实。\n所以这是我对一套生活原则的猜测：照顾人们和世界，创造好的新事物。不同的人会在不同程度上做这些事情。大概会有很多人完全专注于照顾人们。会有少数人主要专注于创造新事物。但即使你是其中之一，你至少应该确保你创造的新事物不会对人们或世界造成净伤害。如果你进一步尝试创造帮助他们的东西，你可能会发现你在交易中领先了。你在能创造的东西上会更受限制，但你会用更多的精力创造它。\n另一方面，如果你创造了令人惊叹的东西，即使你不是故意的，你也常常会帮助人们或世界。牛顿是由好奇心和雄心驱动的，而不是由他工作可能产生的任何实际影响驱动的，然而他工作的实际影响是巨大的。这似乎是规则而不是例外。所以如果你认为你可以创造令人惊叹的东西，你可能应该直接去做。\n注释 [1] 我们可以通过说好好生活是一个人的责任来将所有三种视为同一种应该——例如，像一些基督徒所说的，充分利用上帝赐予的礼物是一个人的责任。但这似乎是人们为了逃避宗教的严格要求而发明的那种诡辩：花时间学习数学而不是祈祷或行善是允许的，因为否则你在拒绝上帝赐予你的礼物。无疑是有用的诡辩，但我们不需要它。\n我们也可以结合前两个原则，因为人是世界的一部分。为什么我们的物种应该得到特殊待遇？我不会试图为这个选择辩护，但我怀疑任何声称持不同想法的人实际上是否按照他们的原则生活。\n[2] 孔子在权力斗争失败后也被排除在公共生活之外，大概如果不是因为这段被迫的闲暇时间，他现在也不会如此著名。\n感谢Trevor Blackwell、Jessica Livingston和Robert Morris阅读本文草稿。\n",
    "description": "",
    "tags": ["哲学","伦理学","创造力","目的","意义","生活","原则","工作"],
    "categories": [],
    "content": "→ English Version\n该做什么 2025年3月\n一个人应该做什么？这可能看起来是个奇怪的问题，但它不是无意义或无法回答的。这是孩子们在学会不问大问题之前会问的那种问题。我只是在调查其他事情时偶然遇到了这个问题。但一旦我遇到了，我觉得我至少应该尝试回答它。\n那么一个人应该做什么？一个人应该帮助人们，照顾世界。这两点是显而易见的。但是还有其他事情吗？当我问这个问题时，弹出的答案是创造好的新事物。\n我无法证明一个人应该这样做，就像我无法证明一个人应该帮助人们或照顾世界一样。我们在这里谈论的是第一性原理。但我可以解释为什么这个原则是有道理的。人类能做的最令人印象深刻的事情是思考。这可能是能做的最令人印象深刻的事情。而最好的思考，或者更准确地说，一个人思考得最好的最好证明，就是创造好的新事物。\n我是在非常一般的意义上说新事物。牛顿的物理学就是一个好的新事物。实际上，这个原则的第一个版本是拥有好的新想法。但这似乎不够一般：它不包括创作艺术或音乐，除非它们体现了新想法。虽然它们可能体现新想法，但它们体现的不仅仅是新想法，除非你把\u0026quot;想法\u0026quot;这个词拉伸得如此无用以至于它包括了你神经系统中经过的一切。\n即使对于一个人有意识的想法，我更喜欢\u0026quot;创造好的新事物\u0026quot;这种说法。还有其他方式来描述最好的思考。例如，做出发现，或者比其他人更深入地理解某件事。但如果你不能为它制作模型或写文章，你对某件事的理解有多好呢？确实，试图表达你所理解的不仅是证明你理解它的方式，也是更好地理解它的方式。\n我喜欢这种说法的另一个原因是它让我们倾向于创造。它使我们更喜欢那些自然被视为制作东西的想法，而不是，比如说，对其他人制作的东西做出批判性观察。那些也是想法，有时是有价值的想法，但很容易欺骗自己相信它们比实际更有价值。批评看起来很复杂，而创造新事物常常看起来很笨拙，特别是在一开始；然而正是那些最初的步骤最稀有和最有价值。\n新事物的本质是什么？我认为是的。显然在科学中是本质的。如果你抄袭了别人的论文并作为自己的发表，这不仅不会令人印象深刻，而且是不诚实的。在艺术中也是如此。一幅好画的复制品可以是令人愉悦的东西，但它不像原作那样令人印象深刻。这反过来意味着一遍又一遍地做同样的事情不会令人印象深刻，无论做得多么好；你只是在复制自己。\n但请注意，我们用这个原则谈论的是不同种类的\u0026quot;应该\u0026quot;。照顾人们和世界是意义上的\u0026quot;应该\u0026quot;，因为它们是一个人的责任，但创造好的新事物是意义上的\u0026quot;应该\u0026quot;，因为这是如何充分实现一个人潜力的方式。历史上大多数关于如何生活的规则都是两种\u0026quot;应该\u0026quot;的混合，但通常前者比后者多。[1]\n在历史的大部分时间里，\u0026ldquo;一个人应该做什么？\u0026ldquo;这个问题在任何地方都得到大致相同的答案，无论你问西塞罗还是孔子。你应该明智、勇敢、诚实、节制和公正，维护传统，服务公共利益。有一段很长的时间，在世界某些地方，答案变成了\u0026quot;侍奉上帝\u0026rdquo;，但在实践中，被认为明智、勇敢、诚实、节制和公正，维护传统，服务公共利益仍然是好的。事实上，这个配方对大多数维多利亚时代的人来说似乎是对的。但其中没有关于照顾世界或创造新事物的东西，这有点令人担忧，因为这个问题似乎应该是永恒的。答案不应该有太大变化。\n传统答案没有提到照顾世界，我对此不太担心。显然，只有当人们清楚我们可以毁灭世界时，人们才开始关心这一点。但如果传统答案没有提到创造好的新事物，它怎么可能重要呢？\n传统答案是对一个稍微不同问题的回答。它们是对如何存在而不是做什么问题的回答。听众对做什么没有太多选择。直到最近几个世纪，听众是土地拥有阶级，也是政治阶级。他们不是在做物理学和写小说之间选择。他们的工作是注定的：管理他们的庄园，参与政治，必要时战斗。在业余时间做某些其他类型的工作是可以的，但理想情况下一个人没有任何业余时间。西塞罗的《论责任》是对如何生活这个问题的伟大古典回答之一，他在其中明确说，如果不是因为最近的政治动荡被排除在公共生活之外，他甚至不会写这本书。[2]\n当然有人们做我们现在称之为\u0026quot;原创工作\u0026quot;的事情，他们常常因此受到钦佩，但他们不被视为榜样。阿基米德知道他是第一个证明球体体积是其最小外接圆柱体体积的2/3的人，并且对此感到非常高兴。但你找不到古代作家敦促他们的读者效仿他。他们更多地将他视为神童而不是榜样。\n现在我们中的更多人可以遵循阿基米德的例子，将大部分注意力投入到一种工作中。他毕竟成为了一个榜样，还有其他一群人，他的同代人会觉得奇怪地将他们视为一个独特的群体，因为创造新事物的人群与社会等级制度成直角运行。\n什么样的事物算数？我宁愿把这个问题留给它们的创造 …"
  },{
    "title": "说服还是发现",
    "url": "/paul_graham/essays_zh/discover/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n说服还是发现 2009年9月\n当你遇到不太熟悉的人时，惯例是表现得特别友好。你会微笑着说\u0026quot;很高兴见到你\u0026quot;，无论你是否真的高兴。这并没有什么不诚实之处。每个人都知道这些小小的社交谎言不应该按字面意思理解，就像每个人都知道\u0026quot;能把盐递给我吗？\u0026ldquo;只是在语法上是一个问题。\n我非常愿意在遇到新的人时微笑着说\u0026quot;很高兴见到你\u0026rdquo;。但是，在文章中取悦读者有另一套惯例，这些惯例并不是那么无害。\n文章中取悦读者的惯例存在的原因是，大多数文章都是为了说服而写的。正如任何政治家都会告诉你的那样，说服人们的方法不仅仅是直截了当地陈述事实。你必须加一勺糖让药更容易下咽。\n例如，宣布取消政府项目的政治家不会只说\u0026quot;该项目被取消了。\u0026ldquo;那会显得无礼地简短。相反，他会花大部分时间谈论参与该项目的人们所做的崇高努力。\n这些惯例更危险的原因是它们与思想相互作用。说\u0026quot;很高兴见到你\u0026quot;只是你在对话前加上的一句话，但政治家添加的那种花言巧语则贯穿其中。我们开始从社交谎言转向真正的谎言。\n以下是我写的一篇关于工会的文章中的一个段落例子。按照写法，它往往会冒犯喜欢工会的人。认为劳工运动是英勇的工会组织者创造的人有一个问题需要解释：为什么工会现在在萎缩？他们最多只能求助于生活在堕落文明中人们的默认解释。我们的祖先是巨人。二十世纪初的工人一定具有当今所缺乏的道德勇气。\n现在这里是同一段落的重写，目的是取悦而不是冒犯他们：早期的工会组织者为改善工人的条件做出了英勇的牺牲。虽然工会现在在萎缩，但这并不是因为现在的工会领导人缺乏勇气。雇主今天不能逃脱雇佣暴徒殴打工会领导人的责任，但如果他们这样做了，我看不出有什么理由相信今天的工会领导人会回避挑战。因此，我认为将工会的衰落归因于运行工会的人的某种衰落是错误的。早期的工会领导人当然是英勇的，但我们应该不应该假设如果工会衰落了，是因为现在的工会领导人在某种程度上不如以前。原因一定是外部的。[1]\n它表达了相同的观点：不可能是早期工会组织者的个人品质使工会成功，而一定是某些外部因素，否则现在的工会领导人就必须是较差的人。但这样写似乎是在为现在的工会组织者辩护，而不是在攻击早期的工会组织者。这使得它对喜欢工会的人更有说服力，因为它似乎同情他们的事业。\n我相信我在第二版中写的每一句话。早期的工会领导人确实做出了英勇的牺牲。现在的工会领导人如果必要的话可能也会挺身而出。人们往往会这样；我对\u0026quot;最伟大的一代\u0026quot;的想法持怀疑态度。[2]\n如果我相信第二版中说的每一句话，我为什么不那样写呢？为什么要不必要地冒犯人？\n因为我宁愿冒犯人也不愿迎合人，如果你写有争议的话题，你必须选择其中一个。过去或现在工会领导人的勇气程度是次要的；对论点唯一重要的是他们是相同的。但如果你想取悦那些错误的人，你不能简单地告诉真相。你总是不得不添加某种填充物来保护他们的错误概念不与现实碰撞。\n大多数作家都这样写。大多数作家为了说服而写，即使只是出于习惯或礼貌。但我不是为了说服而写；我写是为了弄清楚。我为了说服一个假设的完全公正的读者而写。\n由于惯例是为说服实际读者而写，不这样做的人会显得傲慢。事实上，比傲慢更糟糕：因为读者习惯了试图取悦某人的文章，一篇在争议中使一方不快的文章读起来就像是在试图迎合另一方。对许多亲工会的读者来说，第一段听起来像是右翼电台脱口秀主持人为了煽动追随者而说的话。但事实并非如此。简洁地 contradicts 一个人信仰的东西可能与对它们的党派攻击很难区分，但尽管它们可能最终在同一个地方，但来源不同。\n添加几个额外的词让人们感觉更好会有那么糟糕吗？也许不会。也许我过分注重简洁。我写代码的方式和我写文章的方式一样，一遍又一遍地寻找任何可以削减的东西。但我有一个合理的理由这样做。在你把思想简化到最少的词语之前，你不知道这些思想是什么。[3]\n第二段的危险不仅仅是它更长。而是你开始对自己撒谎。思想开始与你添加的为了让他们通过读者错误概念的花言巧语混合在一起。\n我认为文章的目标应该是发现令人惊讶的事情。至少这是我的目标。最令人惊讶意味着与人们当前信仰最不同。因此，为了说服而写和为了发现而写是完全对立的。你的结论与读者当前信仰的分歧越大，你将不得不投入更多精力来销售你的思想而不是拥有它们。当你加速时，这种阻力增加，直到最终你达到一个点，100%的能量都用于克服它，你不能再走得更快。\n克服自己的错误概念已经够难了，而不必考虑如何让产生的思想通过其他人的错误概念。我担心如果我为了说服而写，我会开始不自觉地回避我知道难以销售的思想。当我注意到令人惊讶的事情时，它通常最初非常微弱。只有轻微的不安骚动。我不希望任何东西妨碍我意识地注意到它。\n注释 [1] 我有一种奇怪的感觉，好像回到了高中写这个。为了获得好成绩，你不仅要写那种期望的虔诚废话，而且还要显得写得有信念。解决方案是一种方法表演。滑回其中令人厌恶地熟悉。\n[2] 读者练习：重新表述那个思想，取悦第一版会冒犯的同样的人。\n[3] 想起来，我确实有一种方式故意迎合读者，因为它不改变词语数量：我切换人称。这种奉承的区别对普通读者来说如此自然，以至于即使我在句子中间切换他们可能不会注意到，尽管当做得像这样明显时你倾向于注意到。\n感谢杰西卡·利文斯顿和罗伯特·莫里斯阅读本文的草稿。\n注意：这篇文章的早期版本开始谈论为什么人们不喜欢迈克尔·阿灵顿。我现在相信那是错误的，大多数人不喜欢他的原因与我第一次见到他时不同，而仅仅是因为他写有争议的事情。\n",
    "description": "",
    "tags": ["写作","说服","发现","真理","散文","诚实","思想","哲学"],
    "categories": [],
    "content": "→ English Version\n说服还是发现 2009年9月\n当你遇到不太熟悉的人时，惯例是表现得特别友好。你会微笑着说\u0026quot;很高兴见到你\u0026quot;，无论你是否真的高兴。这并没有什么不诚实之处。每个人都知道这些小小的社交谎言不应该按字面意思理解，就像每个人都知道\u0026quot;能把盐递给我吗？\u0026ldquo;只是在语法上是一个问题。\n我非常愿意在遇到新的人时微笑着说\u0026quot;很高兴见到你\u0026rdquo;。但是，在文章中取悦读者有另一套惯例，这些惯例并不是那么无害。\n文章中取悦读者的惯例存在的原因是，大多数文章都是为了说服而写的。正如任何政治家都会告诉你的那样，说服人们的方法不仅仅是直截了当地陈述事实。你必须加一勺糖让药更容易下咽。\n例如，宣布取消政府项目的政治家不会只说\u0026quot;该项目被取消了。\u0026ldquo;那会显得无礼地简短。相反，他会花大部分时间谈论参与该项目的人们所做的崇高努力。\n这些惯例更危险的原因是它们与思想相互作用。说\u0026quot;很高兴见到你\u0026quot;只是你在对话前加上的一句话，但政治家添加的那种花言巧语则贯穿其中。我们开始从社交谎言转向真正的谎言。\n以下是我写的一篇关于工会的文章中的一个段落例子。按照写法，它往往会冒犯喜欢工会的人。认为劳工运动是英勇的工会组织者创造的人有一个问题需要解释：为什么工会现在在萎缩？他们最多只能求助于生活在堕落文明中人们的默认解释。我们的祖先是巨人。二十世纪初的工人一定具有当今所缺乏的道德勇气。\n现在这里是同一段落的重写，目的是取悦而不是冒犯他们：早期的工会组织者为改善工人的条件做出了英勇的牺牲。虽然工会现在在萎缩，但这并不是因为现在的工会领导人缺乏勇气。雇主今天不能逃脱雇佣暴徒殴打工会领导人的责任，但如果他们这样做了，我看不出有什么理由相信今天的工会领导人会回避挑战。因此，我认为将工会的衰落归因于运行工会的人的某种衰落是错误的。早期的工会领导人当然是英勇的，但我们应该不应该假设如果工会衰落了，是因为现在的工会领导人在某种程度上不如以前。原因一定是外部的。[1]\n它表达了相同的观点：不可能是早期工会组织者的个人品质使工会成功，而一定是某些外部因素，否则现在的工会领导人就必须是较差的人。但这样写似乎是在为现在的工会组织者辩护，而不是在攻击早期的工会组织者。这使得它对喜欢工会的人更有说服力，因为它似乎同情他们的事业。\n我相信我在第二版中写的每一句话。早期的工会领导人确实做出了英勇的牺牲。现在的工会领导人如果必要的话可能也会挺身而出。人们往往会这样；我对\u0026quot;最伟大的一代\u0026quot;的想法持怀疑态度。[2]\n如果我相信第二版中说的每一句话，我为什么不那样写呢？为什么要不必要地冒犯人？\n因为我宁愿冒犯人也不愿迎合人，如果你写有争议的话题，你必须选择其中一个。过去或现在工会领导人的勇气程度是次要的；对论点唯一重要的是他们是相同的。但如果你想取悦那些错误的人，你不能简单地告诉真相。你总是不得不添加某种填充物来保护他们的错误概念不与现实碰撞。\n大多数作家都这样写。大多数作家为了说服而写，即使只是出于习惯或礼貌。但我不是为了说服而写；我写是为了弄清楚。我为了说服一个假设的完全公正的读者而写。\n由于惯例是为说服实际读者而写，不这样做的人会显得傲慢。事实上，比傲慢更糟糕：因为读者习惯了试图取悦某人的文章，一篇在争议中使一方不快的文章读起来就像是在试图迎合另一方。对许多亲工会的读者来说，第一段听起来像是右翼电台脱口秀主持人为了煽动追随者而说的话。但事实并非如此。简洁地 contradicts 一个人信仰的东西可能与对它们的党派攻击很难区分，但尽管它们可能最终在同一个地方，但来源不同。\n添加几个额外的词让人们感觉更好会有那么糟糕吗？也许不会。也许我过分注重简洁。我写代码的方式和我写文章的方式一样，一遍又一遍地寻找任何可以削减的东西。但我有一个合理的理由这样做。在你把思想简化到最少的词语之前，你不知道这些思想是什么。[3]\n第二段的危险不仅仅是它更长。而是你开始对自己撒谎。思想开始与你添加的为了让他们通过读者错误概念的花言巧语混合在一起。\n我认为文章的目标应该是发现令人惊讶的事情。至少这是我的目标。最令人惊讶意味着与人们当前信仰最不同。因此，为了说服而写和为了发现而写是完全对立的。你的结论与读者当前信仰的分歧越大，你将不得不投入更多精力来销售你的思想而不是拥有它们。当你加速时，这种阻力增加，直到最终你达到一个点，100%的能量都用于克服它，你不能再走得更快。\n克服自己的错误概念已经够难了，而不必考虑如何让产生的思想通过其他人的错误概念。我担心如果我为了说服而写，我会开始不自觉地回避我知道难以销售的思想。当我注意到令人惊讶的事情时，它通常最初非常微弱。只有轻微的不安骚动。我不希望任何东西妨碍我意识 …"
  },{
    "title": "赛格威的麻烦",
    "url": "/paul_graham/essays_zh/segway/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n赛格威的麻烦 2009年7月\n赛格威没有实现其最初的承诺，说得客气一点。有几个原因，但一个是人们不想被看到骑着它们。骑赛格威的人看起来像个呆子。\n我的朋友特雷弗·布莱克韦尔建造了自己的赛格威，我们称之为Segwell。他还建造了一个单轮版本，Eunicycle，在你意识到骑手没有踩踏板之前，它看起来就像普通的独轮车。他曾骑着它们去山景城市中心买咖啡。当他骑Eunicycle时，人们对他微笑。但当他骑Segwell时，他们会从车里喊出侮辱的话：\u0026ldquo;太懒了不走路，你他妈的同性恋？\u0026rdquo;\n为什么赛格威会引发这种反应？骑赛格威看起来像呆子的原因是你看起来很自鸣得意。你似乎没有足够努力地工作。\n骑摩托车的人也没有更努力工作。但因为他跨坐在上面，他似乎在努力。当你骑赛格威时，你只是站在那里。而一个被带着走而似乎没有做任何工作的人——比如坐在轿子里的人——不可避免地看起来自鸣得意。\n试试这个思维实验，就会变得清楚：想象一个像赛格威一样工作的东西，但你像滑板一样一只脚在前一只脚在后地骑。那看起来就不会那么不酷了。\n所以可能有一种方法可以吸引更多赛格威希望达到的市场：制造一个看起来对骑手来说不那么容易的版本。如果造型遵循滑板或自行车的传统而不是医疗设备的传统，也会有所帮助。\n奇怪的是，让赛格威陷入这个问题的是公司本身就是一种赛格威。对他们来说太容易了；他们太成功地筹集资金了。如果他们必须通过向真实用户销售的几个版本来逐步发展公司，他们会很快意识到人们骑着它们看起来很愚蠢。相反，他们有足够的资金在秘密中工作。我敢肯定，他们有很多焦点小组，但他们没有从车里喊出侮辱的人。所以他们从未意识到他们正自信地冲进一条死胡同。\n",
    "description": "",
    "tags": ["赛格威","技术","设计","人类行为","创新"],
    "categories": [],
    "content": "→ English Version\n赛格威的麻烦 2009年7月\n赛格威没有实现其最初的承诺，说得客气一点。有几个原因，但一个是人们不想被看到骑着它们。骑赛格威的人看起来像个呆子。\n我的朋友特雷弗·布莱克韦尔建造了自己的赛格威，我们称之为Segwell。他还建造了一个单轮版本，Eunicycle，在你意识到骑手没有踩踏板之前，它看起来就像普通的独轮车。他曾骑着它们去山景城市中心买咖啡。当他骑Eunicycle时，人们对他微笑。但当他骑Segwell时，他们会从车里喊出侮辱的话：\u0026ldquo;太懒了不走路，你他妈的同性恋？\u0026rdquo;\n为什么赛格威会引发这种反应？骑赛格威看起来像呆子的原因是你看起来很自鸣得意。你似乎没有足够努力地工作。\n骑摩托车的人也没有更努力工作。但因为他跨坐在上面，他似乎在努力。当你骑赛格威时，你只是站在那里。而一个被带着走而似乎没有做任何工作的人——比如坐在轿子里的人——不可避免地看起来自鸣得意。\n试试这个思维实验，就会变得清楚：想象一个像赛格威一样工作的东西，但你像滑板一样一只脚在前一只脚在后地骑。那看起来就不会那么不酷了。\n所以可能有一种方法可以吸引更多赛格威希望达到的市场：制造一个看起来对骑手来说不那么容易的版本。如果造型遵循滑板或自行车的传统而不是医疗设备的传统，也会有所帮助。\n奇怪的是，让赛格威陷入这个问题的是公司本身就是一种赛格威。对他们来说太容易了；他们太成功地筹集资金了。如果他们必须通过向真实用户销售的几个版本来逐步发展公司，他们会很快意识到人们骑着它们看起来很愚蠢。相反，他们有足够的资金在秘密中工作。我敢肯定，他们有很多焦点小组，但他们没有从车里喊出侮辱的人。所以他们从未意识到他们正自信地冲进一条死胡同。\n"
  },{
    "title": "超线性回报",
    "url": "/paul_graham/essays_zh/superlinear/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n超线性回报 2023年10月\n我童年时对世界不了解的最重要事情之一是表现回报的超线性程度。\n老师和教练隐含地告诉我们回报是线性的。\u0026ldquo;你得到，\u0026ldquo;我听了上千次，\u0026ldquo;你投入的。\u0026ldquo;他们出于好意，但这很少是真的。如果你的产品只有竞争对手的一半好，你不会得到一半的顾客。你得不到顾客，你会倒闭。\n显然，商业中表现的回报是超线性的。有些人认为这是资本主义的缺陷，如果我们改变规则，它就会停止成真。但表现的超线性回报是世界的一个特征，不是我们发明的规则的产物。我们在名声、权力、军事胜利、知识，甚至对人类的利益中看到相同的模式。在所有这些中，富人变得更富有。[1]\n如果不理解超线性回报的概念，你就不可能理解世界。而如果你有雄心，你肯定应该理解，因为这将是你冲浪的浪潮。\n似乎有很多不同的情况具有超线性回报，但据我所知，它们归结为两个基本原因：指数增长和阈值。\n超线性回报最明显的情况是当你正在处理指数增长的东西时。例如，培养细菌培养物。当它们增长时，它们是指数增长。但它们培养起来很棘手。这意味着熟练的人和不熟练的人之间的结果差异非常大。\n创业公司也可以指数增长，我们在那里看到相同的模式。一些设法实现高增长率。大多数没有。结果你得到质上不同的结果：高增长率的公司往往变得非常有价值，而增长率较低的公司可能甚至无法生存。\nY Combinator鼓励创始人专注于增长率而不是绝对数字。这可以防止他们在绝对数字仍然很低时早期气馁。它还帮助他们决定专注于什么：你可以使用增长率作为指南针来告诉你如何发展公司。但主要优势是，通过专注于增长率，你倾向于获得指数增长的东西。\nYC没有明确告诉创始人增长率\u0026quot;你得到你投入的\u0026rdquo;，但这离真相不远。而如果增长率与表现成比例，那么时间t上表现p的奖励将与p^t成比例。\n即使在几十年思考这个之后，我发现这句话令人震惊。\n只要你做得如何取决于你之前做得如何，你就会得到指数增长。但我们的DNA和习俗都没有为此准备我们。没有人发现指数增长是自然的；每个孩子第一次听到时都感到惊讶，那个向国王第一天要求一粒米，之后每天加倍数量的人的故事。\n我们自然而然不理解的东西，我们发展习俗来处理，但我们也没有太多关于指数增长的习俗，因为人类历史中很少有这种情况。原则上牧业应该是一个：你拥有的动物越多，它们的后代就越多。但实际上放牧地是限制因素，而且没有计划使其指数增长。\n或者更准确地说，没有普遍适用的计划。有一种方法可以指数增长你的领土：通过征服。你控制的领土越多，你的军队变得越强大，征服新领土就越容易。这就是为什么历史上充满了帝国。但很少有人创建或经营帝国，他们的经历对习俗影响不大。皇帝是一个遥远而可怕的人物，不是一个人可以在自己生活中使用的教训来源。\n前工业时代最常见的指数增长情况可能是学术。你知道的越多，学习新东西就越容易。那时和现在的结果都是，一些人在某些主题上比其他人明显知识渊博得多。但这也没有很大影响习俗。虽然思想帝国可以重叠，因此可以有更多的皇帝，但在前工业时代，这种类型的帝国几乎没有实际效果。[2]\n这在过去几个世纪已经改变。现在思想的皇帝可以设计击败领土皇帝的炸弹。但这个现象仍然如此之新，以至于我们还没有完全吸收它。甚至很少有参与者意识到他们从指数增长中受益，或者询问他们可以从中学习什么。\n超线性回报的另一个来源体现在\u0026quot;赢家通吃\u0026quot;这个表达中。在体育比赛中，表现和回报之间的关系是一个阶跃函数：获胜的队伍获得一场胜利，无论他们做得好得多还是只是稍好一点。[3]\n阶跃函数的来源不是竞争本身。而是结果中有阈值。你不需要竞争来获得那些。在你是唯一参与者的情况下可以有阈值，比如证明定理或击中目标。\n具有一个超线性回报来源的情况也常常有另一个，这很了不起。跨越阈值导致指数增长：战斗中的获胜方通常遭受较少损害，这使他们在未来更有可能获胜。而指数增长帮助你跨越阈值：在具有网络效应的市场中，增长足够快的公司可以关闭潜在竞争对手。\n名声是一个有趣的现象例子，它结合了两种超线性回报来源。名声指数增长，因为现有粉丝给你带来新粉丝。但它如此集中的基本原因是阈值：普通人脑中A名单的空间只有那么多。\n结合两种超线性回报来源的最重要情况可能是学习。知识指数增长，但其中也有阈值。例如，学习骑自行车。其中一些阈值类似于机器工具：一旦你学会阅读，你能够更快地学习任何其他东西。但所有最重要的阈值是那些代表新发现的阈值。知识似乎在某种意义上是分形的，如果你努力推进一个知识领域的边界，你有时会发现一个全新的领域。如果你这样做，你将获得第一个机会探索其中所有新的发现。牛顿做到了，丢勒和达尔文也做到了。\n寻找具有超线性回报的情况有一般规则吗？最明显的一个是寻找复合的工作。\n工作可以复合有两种方式。它可以直接复合，在一个周期做得好导致下一个周期做得更好。例如，当你在建设基础设施，或增长受众或品牌时发生这种情况。或者工作可以通过教你而复合，因为学习是复合的。第二种情况很有趣，因为当它发生时你可能觉得自己做得不好。你可能没有实现你的直接目标。但如果你在学习很多，那么你实际上仍然在获得指数增长。\n这是硅谷对失败如此容忍的原因之一。硅谷的人不是盲目地容忍失败。只有当你从失败中学习时，他们才会继续下注你。但如果你是，你实际上是个好赌注：也许你的公司没有像你想要的那样增长，但你个人成长了，这最终应该产生结果。\n确实，不包含学习的指数增长形式经常与它交织在一起，以至于我们可能应该将其视为规则而不是例外。这产生另一个启发式：总是在学习。如果你不在学习，你可能不在导致超线性回报的路径上。\n但不要过度优化你学习的东西。不要将自己限制在已知有价值的学习上。你在学习；你还不确定什么会是有价值的，如果你太严格，你会去掉异常值。\n阶跃函数呢？是否有\u0026quot;寻找阈值\u0026quot;或\u0026quot;寻找竞争\u0026quot;形式的有用启发式？这里情况更棘手。阈值的存在并不保证游戏值得玩。如果你玩一轮俄罗斯轮盘赌，你当然会在阈值情况下，但在最好的情况下你不会更好。\u0026ldquo;寻找竞争\u0026quot;同样无用；如果奖品不值得竞争怎么办？足够快的指数增长保证了回报曲线的形状和大小——因为增长足够快的东西即使开始时微不足道也会变大——但阈值只保证形状。[4]\n利用阈值的原理必须包括一个测试以确保游戏值得玩。这里有一个：如果你遇到平庸但仍然受欢迎的东西，替换它可能是个好主意。例如，如果一家公司制造人们不喜欢但仍然购买的产品，那么如果你制造更好的替代品，他们可能会购买。[5]\n如果能有一种方法找到有希望的知识阈值就好了。有没有方法告诉哪些问题背后有全新的领域？我怀疑我们能否确定地预测这一点，但奖品如此有价值，以至于拥有比随机稍微好一点的预测器会很有用，而且有希望找到这些。我们可以在某种程度上预测一个研究问题什么时候不可能导致新发现：当它看起来合法但无聊时。而那种确实导致新发现的类型往往看起来非常神秘，但可能不重要。（如果它们神秘且明显重要，它们将是著名的开放问题，有很多人已经在研究它们。）所以这里的一个启发式是由好奇心而不是职业主义驱动——给你的好奇心自由发挥，而不是工作在你应该做的事情上。\n表现超线性回报的前景对有雄心的人来说是令人兴奋的。在这个部门有好消息：这个领域在两个方向上都在扩大。有更多类型的工作你可以获得超线性回报，而回报本身也在增长。\n这有两个原因，尽管它们如此紧密交织以至于更像一个半：技术进步和组织重要性的降低。\n五十年前，要成为组织的一部分来从事雄心勃勃的项目通常要必要得多。这是获得所需资源的唯一方式，拥有同事的唯一方式，以及获得分销的唯一方式。所以在1970年，你的声望在大多数情况下是你所属组织的声望。而声望是一个准确的预测器，因为如果你不是组织的一部分，你不太可能取得很大成就。有一些例外，最著名的是艺术家和作家，他们单独工作使用便宜的工具并拥有自己的品牌。但即使他们在接触受众方面也受组织摆布。[6]\n一个由组织主导的世界减缓了表现回报的变化。但在我的一生中，这个世界已经显著侵蚀。现在更多的人可以拥有艺术家和作家在20世纪拥有的自由。有许多雄心勃勃的项目不需要太多初始资金，有许多新的方式来学习、赚钱、寻找同事和接触受众。\n旧世界仍然有很多，但按历史标准，变化率是戏剧性的。特别是考虑到利害关系。很难想象比表现回报变化更根本的变化。\n没有机构的减缓效应，结果会有更多变化。这并不意味着每个人都会更好：做得好的人会做得更好，但做得不好的人会更糟。这是要记住的重要一点。让自己暴露于超线性回报并不适合每个人。大多数人会成为池子的一部分会更好。那么谁应该追求超线性回报？两种类型的有雄心的人：那些知道自己足够好，在变化更大的世界中净收益的人，以及那些，特别是年轻人，能够冒险尝试以找出答案的人。[7]\n离开机构的转变不会简单地是当前居民的大规模离开。许多新的赢家将是他们永远不会让进入的人。因此，由此产生的机会民主化将比机构自己可能策划的任何温和内部版本更大和更真实。不是每个人都对这种雄心壮志的大解锁感到高兴。它威胁到一些既得利益，违背一些意识形态。[8]但如果你是一个有雄心的个人，这对你是好消息。你应该如何利用它？\n利用表现超线性回报的最明显方式是做异常好的工作。在曲线的远端，增量努力是划算的。更如此的是因为远端竞争较少——不仅因为做好异常工作很明显困难，还因为人们发现前景如此令人畏惧，以至于很少有人甚至尝试。这意味着做异常工作不仅是划算的，甚至尝试也是划算的。\n有许多变量影响你的工作有多好，如果你想成为一个异常者，你需要让几乎所有变量都正确。例如，要做异常好的事情，你必须对它感兴趣。仅仅勤奋是不够的。所以在超线性回报的世界中，知道你感兴趣的是什么并找到方法在其上工作更有价值。[9]选择适合你环境的工作也很重要。例如，如果有一种工作本质上需要大量时间和精力支出，在你年轻还没有孩子时做它将越来越有价值。\n做伟大工作有惊人的大量技巧。不仅仅是努力尝试的问题。我将在一段话中尝试给出一个配方。\n选择你有自然才能和深层兴趣的工作。发展在你的项目上工作的习惯；它们是什么并不重要，只要你觉得它们令人兴奋地雄心勃勃。尽可能努力工作而不倦怠，这最终将带你到知识的一个前沿。从远处看它们平滑，但近看充满空白。注意并探索这样的空白，如果幸运，一个将扩展成全新的领域。承担你能负担的风险；如果你不偶尔失败，你可能太保守了。寻找最好的同事。发展良好的品味并向最好的例子学习。诚实，特别是对自己。锻炼，吃好，睡好，避免更危险的药物。有疑问时，跟随你的好奇心。它从不撒谎，它比你更知道什么值得注意。[10]\n当然，你还需要一件事：幸运。运气总是一个因素，但当你独立工作而不是作为组织的一部分时，它更是因素。虽然有一些关于运气是准备遇见机会等的正确格言，但也有一个你无能为力的真实机会成分。解决方案是多次尝试。这是另一个尽早开始冒险的原因。\n具有超线性回报领域的最好例子可能是科学。它有指数增长，以学习的形式，结合在表现极端边缘的阈值——字面上在知识的极限。\n结果是科学发现中的不平等水平，使即使是分层最严重社会的财富不平等看起来相形见绌。牛顿的发现可以说比他所有同时代人的发现加起来还要大。[11]\n这一点可能看起来明显，但也许值得明确说明。超线性回报意味着不平等。回报曲线越陡，结果变化越大。\n事实上，超线性回报和不平等之间的相关性如此强烈，以至于它产生了寻找这种类型工作的另一个启发式：寻找少数大赢家表现超过其他所有人的领域。每个人都做大约相同工作的领域不太可能是具有超线性回报的领域。\n少数大赢家表现超过其他所有人的领域是什么？这里有一些明显的：体育、政治、艺术、音乐、表演、导演、写作、数学、科学、创业公司和投资。在体育中，这种现象是由于外部强加的阈值；你只需要快百分之几就能赢得每场比赛。在政治中，权力的增长很像皇帝时代。而在其他一些领域（包括政治中），成功主要由名声驱动，名声有自己的超线性增长来源。但当我们排除体育和政治以及名声的影响时，出现了一个显著的模式：剩下的列表与那些需要独立思考才能成功的领域完全相同——在那里你的想法不仅要正确，还要新颖。[12]\n这在科学中显然是这种情况。你不能发表说其他人已经说过的话的论文。但例如在投资中同样如此。只有当大多数其他投资者不认为公司会做得好时，相信公司会做得好才有用；如果其他每个人都认为公司会做得好，那么其股票价格已经反映了这一点，没有赚钱的空间。\n我们还能从这些领域学到什么？在所有这些中，你必须投入初始努力。超线性回报起初看起来很小。以这个速度，你发现自己想，我永远不会到达任何地方。但因为奖励曲线在远端上升得如此陡峭，采取非凡措施到达那里是值得的。\n在创业世界，这个原则的名称是\u0026quot;做不扩展的事情。\u0026ldquo;如果你对你的初始小顾客群体支付荒谬的关注，理想情况下你将通过口碑启动指数增长。但这同样的原则适用于任何指数增长的东西。例如学习。当你开始学习某事时，你感到迷失。但做出初始努力获得立足点值得，因为你学得越多，它会变得越容易。\n在具有超线性回报的领域列表中还有另一个更微妙的教训：不要将工作与工作等同起来。在20世纪的大部分时间里，这对几乎每个人都是相同的，结果我们继承了一个将生产力与有工作等同的习俗。即使现在对大多数人来说\u0026quot;你的工作\u0026quot;这个短语意味着他们的工作。但对作家或艺术家或科学家来说，它意味着他们当前正在研究或创造的东西。对这样的人来说，他们的工作是他们从工作带到工作的东西，如果他们有工作的话。它可能为雇主做，但是他们作品集的一部分。\n进入少数大赢家表现超过其他所有人的领域是令人畏惧的前景。有些人故意这样做，但你不需要。如果你有足够的自然能力，并充分跟随你的好奇心，你最终会在一个。你的好奇心不会让你对无聊的问题感兴趣，而有趣的问题如果还不是现有领域的一部分，倾向于创造具有超线性回报的领域。\n超线性回报的领域绝不是静态的。事实上，最极端的回报来自扩展它。所以虽然雄心和好奇心都可以让你进入这个领域，但好奇心可能是两者中更强大的。雄心倾向于让你爬上现有的山峰，但如果你足够接近一个足够有趣的问题，它可能在你下面长成一座山。\n注释 你能在多大程度上区分努力、表现和回报是有限度的，因为它们在事实上不是明确区分的。对一个人算作回报的东西可能对另一个人是表现。虽然这些概念的边界模糊，但它们不是无意义的。我试图尽可能精确地写它们而不陷入错误。\n[1] 进化本身可能是表现超线性回报最普遍的例子。但这很难让我们感同身受，因为我们不是接受者；我们是回报。\n[2] 知识当然在工业革命前有实际效果。农业的发展完全改变了人类生活。但这种变化是技术广泛、渐进改进的结果，不是几个特别有学问的人的发现。\n[3] 将阶跃函数描述为超线性在数学上不正确，但从零开始的阶跃函数在描述理性行动者努力的奖励曲线时像超线性函数。如果它从零开始，那么阶跃前的部分低于任何线性增加的回报，阶跃后的部分必须高于那一点的必要回报，否则没有人会费心。\n[4] \u0026ldquo;寻找竞争\u0026quot;在某些人觉得它有激励的意义上可能是个好启发式。它也是对有希望问题的某种指南，因为它是其他人觉得它们有希望的迹象。但它是一个非常不完美的迹象：常常有一群喧嚣的人群追逐某个问题，而他们最终都被安静地研究另一个问题的人胜过。\n[5] 并不总是。你必须小心使用这个规则。当某物平庸却仍然受欢迎时，通常有隐藏的原因。也许垄断或监管使竞争困难。也许顾客品味差或有决定购买什么的有缺陷程序。由于这些原因存在大量平庸事物。\n[6] 我二十几岁时想成为艺术家，甚至去艺术学校学习绘画。主要是因为我喜欢艺术，但我动机的相当一部分来自艺术家似乎最少受组织摆布的事实。\n",
    "description": "",
    "tags": ["超线性","指数","表现","工作","成功","雄心","学习"],
    "categories": [],
    "content": "→ English Version\n超线性回报 2023年10月\n我童年时对世界不了解的最重要事情之一是表现回报的超线性程度。\n老师和教练隐含地告诉我们回报是线性的。\u0026ldquo;你得到，\u0026ldquo;我听了上千次，\u0026ldquo;你投入的。\u0026ldquo;他们出于好意，但这很少是真的。如果你的产品只有竞争对手的一半好，你不会得到一半的顾客。你得不到顾客，你会倒闭。\n显然，商业中表现的回报是超线性的。有些人认为这是资本主义的缺陷，如果我们改变规则，它就会停止成真。但表现的超线性回报是世界的一个特征，不是我们发明的规则的产物。我们在名声、权力、军事胜利、知识，甚至对人类的利益中看到相同的模式。在所有这些中，富人变得更富有。[1]\n如果不理解超线性回报的概念，你就不可能理解世界。而如果你有雄心，你肯定应该理解，因为这将是你冲浪的浪潮。\n似乎有很多不同的情况具有超线性回报，但据我所知，它们归结为两个基本原因：指数增长和阈值。\n超线性回报最明显的情况是当你正在处理指数增长的东西时。例如，培养细菌培养物。当它们增长时，它们是指数增长。但它们培养起来很棘手。这意味着熟练的人和不熟练的人之间的结果差异非常大。\n创业公司也可以指数增长，我们在那里看到相同的模式。一些设法实现高增长率。大多数没有。结果你得到质上不同的结果：高增长率的公司往往变得非常有价值，而增长率较低的公司可能甚至无法生存。\nY Combinator鼓励创始人专注于增长率而不是绝对数字。这可以防止他们在绝对数字仍然很低时早期气馁。它还帮助他们决定专注于什么：你可以使用增长率作为指南针来告诉你如何发展公司。但主要优势是，通过专注于增长率，你倾向于获得指数增长的东西。\nYC没有明确告诉创始人增长率\u0026quot;你得到你投入的\u0026rdquo;，但这离真相不远。而如果增长率与表现成比例，那么时间t上表现p的奖励将与p^t成比例。\n即使在几十年思考这个之后，我发现这句话令人震惊。\n只要你做得如何取决于你之前做得如何，你就会得到指数增长。但我们的DNA和习俗都没有为此准备我们。没有人发现指数增长是自然的；每个孩子第一次听到时都感到惊讶，那个向国王第一天要求一粒米，之后每天加倍数量的人的故事。\n我们自然而然不理解的东西，我们发展习俗来处理，但我们也没有太多关于指数增长的习俗，因为人类历史中很少有这种情况。原则上牧业应该是一个：你拥有的动物越多，它们的后代就越多。但实际上放牧地是限制因素，而且没有计划使其指数增长。\n或者更准确地说，没有普遍适用的计划。有一种方法可以指数增长你的领土：通过征服。你控制的领土越多，你的军队变得越强大，征服新领土就越容易。这就是为什么历史上充满了帝国。但很少有人创建或经营帝国，他们的经历对习俗影响不大。皇帝是一个遥远而可怕的人物，不是一个人可以在自己生活中使用的教训来源。\n前工业时代最常见的指数增长情况可能是学术。你知道的越多，学习新东西就越容易。那时和现在的结果都是，一些人在某些主题上比其他人明显知识渊博得多。但这也没有很大影响习俗。虽然思想帝国可以重叠，因此可以有更多的皇帝，但在前工业时代，这种类型的帝国几乎没有实际效果。[2]\n这在过去几个世纪已经改变。现在思想的皇帝可以设计击败领土皇帝的炸弹。但这个现象仍然如此之新，以至于我们还没有完全吸收它。甚至很少有参与者意识到他们从指数增长中受益，或者询问他们可以从中学习什么。\n超线性回报的另一个来源体现在\u0026quot;赢家通吃\u0026quot;这个表达中。在体育比赛中，表现和回报之间的关系是一个阶跃函数：获胜的队伍获得一场胜利，无论他们做得好得多还是只是稍好一点。[3]\n阶跃函数的来源不是竞争本身。而是结果中有阈值。你不需要竞争来获得那些。在你是唯一参与者的情况下可以有阈值，比如证明定理或击中目标。\n具有一个超线性回报来源的情况也常常有另一个，这很了不起。跨越阈值导致指数增长：战斗中的获胜方通常遭受较少损害，这使他们在未来更有可能获胜。而指数增长帮助你跨越阈值：在具有网络效应的市场中，增长足够快的公司可以关闭潜在竞争对手。\n名声是一个有趣的现象例子，它结合了两种超线性回报来源。名声指数增长，因为现有粉丝给你带来新粉丝。但它如此集中的基本原因是阈值：普通人脑中A名单的空间只有那么多。\n结合两种超线性回报来源的最重要情况可能是学习。知识指数增长，但其中也有阈值。例如，学习骑自行车。其中一些阈值类似于机器工具：一旦你学会阅读，你能够更快地学习任何其他东西。但所有最重要的阈值是那些代表新发现的阈值。知识似乎在某种意义上是分形的，如果你努力推进一个知识领域的边界，你有时会发现一个全新的领域。如果你这样做，你将获得第一个机会探索其中所有新的发现。牛顿做到了，丢勒和达尔文也做到了。\n寻找具有超线性回报的情况有一般规则吗？最明显的一个是寻找复合的工 …"
  },{
    "title": "超越平均水平",
    "url": "/paul_graham/essays_zh/avg/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n超越平均水平 2001年4月\n如果你想知道什么是编程的\u0026quot;秘密\u0026quot;，那么就是编程语言之间存在很大的差异。这不仅仅是理论问题。实际上，这会对创业公司产生很大影响。\n创业公司成功的可能性有多大？如果你考虑所有的创业公司，大多数都会失败。但如果你只考虑那些成功的创业公司，它们都有一个共同点：它们使用某种秘密武器。它们做了一些大公司无法做的事情。\n语言的差异 编程语言之间存在巨大差异。有些语言比其他语言强大得多。如果你使用一种强大的语言，你可以比使用较弱语言的程序员更快地完成工作。\n大多数程序员对编程语言之间的差异了解甚少。他们知道一些语言比其他语言更\u0026quot;高级\u0026quot;，但他们不理解这些差异有多大。他们不理解使用强大语言可以给你带来多大的优势。\n使用强大语言不仅仅是写代码更快的问题。它是关于你能做什么的问题。在较弱的语言中，有些事情根本做不了，或者做起来非常困难。在强大的语言中，这些事情很容易。\nLisp的优势 Lisp是最强大的编程语言之一。它比大多数其他语言强大得多。使用Lisp的程序员比使用其他语言的程序员有巨大的优势。\nLisp的优势不是微小的。它是巨大的。使用Lisp的团队可以比使用其他语言的团队小得多，但仍然完成更多的工作。\nViaweb就是一个例子。Viaweb是第一个基于Web的应用程序。它让用户可以在线构建商店。我们三个人使用Lisp构建了Viaweb。我们的竞争对手使用其他语言，如C++和Perl。他们需要更多的人来完成同样的工作。\n为什么更多的人不使用Lisp？ 如果Lisp如此强大，为什么更多的人不使用它？\n一个原因是Lisp与其他语言非常不同。大多数程序员习惯使用类似C的语言。Lisp看起来很奇怪。\n另一个原因是Lisp并不适合所有事情。它不是最好的系统编程语言。如果你正在编写设备驱动程序，C可能更好。\n但Lisp非常适合编写Web应用程序。这就是我们选择它用于Viaweb的原因。\n创业公司的优势 创业公司可以利用大公司无法使用的强大语言。大公司有太多惯性。它们使用特定的语言，因为它们总是使用这些语言。它们不能轻易改变。\n创业公司可以灵活得多。它们可以选择最适合工作的工具。\n这不仅仅是技术问题。这关乎竞争。如果你使用比竞争对手更强大的语言，你可以更快地移动。你可以做他们做不到的事情。\n实际例子 在Viaweb，我们能够快速添加新功能。我们的竞争对手需要几周才能完成的事情，我们可以在几天内完成。\n我们能够添加我们的竞争对手无法添加的功能。Lisp让我们能够做到这一点。\n例如，我们能够添加一个让用户编辑HTML的功能。我们的竞争对手无法做到这一点，因为他们的语言不够强大。\n学习曲线 Lisp有一个陡峭的学习曲线。大多数程序员需要一段时间才能习惯它。\n但这是值得的。一旦你学会了Lisp，你就会比其他程序员更有生产力。\n结论 编程语言之间存在巨大差异。这些差异对创业公司来说很重要。\n如果你正在创办一家创业公司，你应该考虑使用像Lisp这样的强大语言。它可以给你带来竞争优势。\n不要担心别人会怎么说。做你认为正确的事情。\n记住，创业公司的目标是成功。如果使用强大的语言帮助你成功，那就去做吧。\n这篇文章基于Paul Graham在2001年4月发表的原创作品，讨论了编程语言之间的差异以及它们对创业公司的重要性。\n",
    "description": "",
    "tags": ["lisp","编程","创业","技术","软件"],
    "categories": [],
    "content": "→ English Version\n超越平均水平 2001年4月\n如果你想知道什么是编程的\u0026quot;秘密\u0026quot;，那么就是编程语言之间存在很大的差异。这不仅仅是理论问题。实际上，这会对创业公司产生很大影响。\n创业公司成功的可能性有多大？如果你考虑所有的创业公司，大多数都会失败。但如果你只考虑那些成功的创业公司，它们都有一个共同点：它们使用某种秘密武器。它们做了一些大公司无法做的事情。\n语言的差异 编程语言之间存在巨大差异。有些语言比其他语言强大得多。如果你使用一种强大的语言，你可以比使用较弱语言的程序员更快地完成工作。\n大多数程序员对编程语言之间的差异了解甚少。他们知道一些语言比其他语言更\u0026quot;高级\u0026quot;，但他们不理解这些差异有多大。他们不理解使用强大语言可以给你带来多大的优势。\n使用强大语言不仅仅是写代码更快的问题。它是关于你能做什么的问题。在较弱的语言中，有些事情根本做不了，或者做起来非常困难。在强大的语言中，这些事情很容易。\nLisp的优势 Lisp是最强大的编程语言之一。它比大多数其他语言强大得多。使用Lisp的程序员比使用其他语言的程序员有巨大的优势。\nLisp的优势不是微小的。它是巨大的。使用Lisp的团队可以比使用其他语言的团队小得多，但仍然完成更多的工作。\nViaweb就是一个例子。Viaweb是第一个基于Web的应用程序。它让用户可以在线构建商店。我们三个人使用Lisp构建了Viaweb。我们的竞争对手使用其他语言，如C++和Perl。他们需要更多的人来完成同样的工作。\n为什么更多的人不使用Lisp？ 如果Lisp如此强大，为什么更多的人不使用它？\n一个原因是Lisp与其他语言非常不同。大多数程序员习惯使用类似C的语言。Lisp看起来很奇怪。\n另一个原因是Lisp并不适合所有事情。它不是最好的系统编程语言。如果你正在编写设备驱动程序，C可能更好。\n但Lisp非常适合编写Web应用程序。这就是我们选择它用于Viaweb的原因。\n创业公司的优势 创业公司可以利用大公司无法使用的强大语言。大公司有太多惯性。它们使用特定的语言，因为它们总是使用这些语言。它们不能轻易改变。\n创业公司可以灵活得多。它们可以选择最适合工作的工具。\n这不仅仅是技术问题。这关乎竞争。如果你使用比竞争对手更强大的语言，你可以更快地移动。你可以做他们做不到的事情。\n实际例子 在Viaweb，我们能够快速添加新功能。我们的竞争对手需要几周才能完成的事情，我们可以在几天内完成。\n我们能够添加我们的竞争对手无法添加的功能。Lisp让我们能够做到这一点。\n例如，我们能够添加一个让用户编辑HTML的功能。我们的竞争对手无法做到这一点，因为他们的语言不够强大。\n学习曲线 Lisp有一个陡峭的学习曲线。大多数程序员需要一段时间才能习惯它。\n但这是值得的。一旦你学会了Lisp，你就会比其他程序员更有生产力。\n结论 编程语言之间存在巨大差异。这些差异对创业公司来说很重要。\n如果你正在创办一家创业公司，你应该考虑使用像Lisp这样的强大语言。它可以给你带来竞争优势。\n不要担心别人会怎么说。做你认为正确的事情。\n记住，创业公司的目标是成功。如果使用强大的语言帮助你成功，那就去做吧。\n这篇文章基于Paul Graham在2001年4月发表的原创作品，讨论了编程语言之间的差异以及它们对创业公司的重要性。\n"
  },{
    "title": "超越聪明",
    "url": "/paul_graham/essays_zh/smart/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n超越聪明 2021年10月\n如果你问人们爱因斯坦有什么特别之处，大多数人会说他很聪明。即使是那些试图给你更复杂答案的人可能也会首先想到这一点。直到几年前，我自己也会给出同样的答案。但这并不是爱因斯坦特别之处。他的特别之处在于他有重要的新想法。非常聪明是拥有这些想法的必要前提，但两者并不相同。\n指出智慧与其后果并不相同可能看起来是吹毛求疵的区别，但事实并非如此。它们之间有很大的差距。任何在大学和研究实验室待过的人都知道这个差距有多大。有很多真正聪明的人并没有取得什么成就。\n我从小到大一直认为聪明是最值得拥有的东西。也许你也是。但我敢打赌，这不是你真正想要的。想象一下，你有两个选择：非常聪明但一无所获，或者不那么聪明但发现很多新想法。你肯定会选择后者。我会的。这个选择让我感到不舒服，但当你看到这两个选择明确摆出来时，哪个更好是显而易见的。\n这个选择让我不舒服的原因是，聪明仍然感觉上像是重要的事情，尽管我在理智上知道它不是。我花了这么多年认为它是。童年的环境是培养这种幻觉的完美风暴。智慧比新想法的价值容易测量得多，而且你不断地被它评判。而即使是那些最终会有新发现的孩子通常还没有在发现它们。对于有这种倾向的孩子来说，聪明是城里唯一的游戏。\n还有更微妙的原因，这些原因会持续到成年很久。智慧在对话中获胜，因此成为支配等级的基础。[1] 此外，拥有新想法在历史上是如此新鲜的事情，即使现在也只有很少人这样做，以至于社会还没有接受这样的事实：这才是真正的目的地，而智慧只是达到目的的手段。[2]\n为什么这么多聪明人没能发现任何新东西？从这个方向看，这个问题似乎相当令人沮丧。但还有一种看待它的方式，不仅更乐观，而且更有趣。显然，智慧并不是拥有新想法的唯一成分。其他成分是什么？它们是我们可以培养的东西吗？\n因为据说智慧的麻烦在于它主要是天生的。这方面的证据似乎相当有说服力，特别是考虑到我们大多数人都不希望这是真的，因此证据必须面对强烈的阻力。但我在这里不会深入探讨这个问题，因为我关心的是新想法中的其他成分，而且很明显其中许多是可以培养的。\n这意味着真相与我小时候听到的故事令人兴奋地不同。如果智慧是重要的，而且主要是天生的，那么自然的结果就是一种《美丽新世界》式的宿命论。你能做的最好的事情就是找出你对哪种工作有\u0026quot;天赋\u0026quot;，这样你天生的智慧至少能被充分利用，然后尽可能努力地工作。而如果智慧不重要，只是重要事情中的几个成分之一，而且其中许多不是天生的，事情就变得更有趣了。你有更多的控制权，但如何安排你生活的问题变得更加复杂。\n那么，拥有新想法的其他成分是什么？我甚至能提出这个问题就证明了我前面提出的观点——社会还没有接受不是智慧而是这个才是重要的事实。否则我们都会知道这样一个基本问题的答案。[3]\n我不打算在这里提供其他成分的完整目录。这是我第一次这样向自己提出这个问题，我认为可能需要一段时间来回答。但我最近写到了其中最重要的一个：对特定主题的痴迷兴趣。这绝对是可以培养的。\n发现新想法需要的另一个品质是独立思考。我不想声称这与智慧截然不同——我不愿意称一个不独立思考的人为聪明——但尽管主要是天生的，这种品质似乎可以在一定程度上培养。\n有拥有新想法的一般技巧——例如，如何处理自己的项目，如何克服早期工作面临的障碍——这些都可以学习。其中一些可以由社会学习。还有生成特定类型新想法的技巧集合，比如创业想法和论文主题。\n当然，发现新想法还有很多相当平凡的成分，比如努力工作、获得足够的睡眠、避免某些压力、拥有合适的同事，以及找到即使不在做应该做的工作时也能做自己想做的事情的技巧。任何阻止人们做伟大工作的事情都有一个相反的方面可以帮助他们。而且这类成分并不像最初看起来那么无聊。例如，拥有新想法通常与年轻人相关。但也许不是青春本身产生新想法，而是伴随青春而来的特定事情，比如健康良好和缺乏责任。研究这一点可能会产生帮助任何年龄的人有更好想法的策略。\n拥有新想法最令人惊讶的成分之一是写作能力。有一类新想法最好通过写论文和书籍来发现。这个\u0026quot;通过\u0026quot;是故意的：你不是先想到想法，然后只是写下来。有一种通过写作进行的思考，如果你写作笨拙，或者不喜欢这样做，当你尝试进行这种思考时，它会妨碍你。[4]\n我预测智慧和有新想法之间的差距将是一个有趣的地方。如果我们仅仅把这个差距视为未实现潜力的衡量标准，它就变成了一种荒原，我们试图匆忙走过而不敢直视。但如果我们翻转问题，开始探究新想法中它暗示必须存在的其他成分，我们可以从这个差距中挖掘出关于发现的发现。\n注释 [1] 对话中什么获胜取决于与谁交谈。从底层的纯粹攻击性，到中层的机智，到顶层的接近真实智慧，尽管可能总是带有一些机智的成分。\n[2] 正如智慧不是拥有新想法的唯一成分，拥有新想法也不是智慧唯一有用的地方。例如，它在诊断问题和找出如何解决它们方面也很有用。两者都与拥有新想法有重叠，但两者都有不涉及新想法的终点。\n那些使用智慧的方式比拥有新想法常见得多。在这种情况下，智慧与其后果更难区分。\n[3] 有些人会将智慧和拥有新想法之间的差异归因于\u0026quot;创造力\u0026quot;，但这似乎不是一个很有用的术语。除了相当模糊外，它偏离了我们关心的内容半步：它既不能与智慧分开，也不能对智慧和拥有新想法之间的所有差异负责。\n[4] 奇怪的是，这篇文章就是一个例子。它最初是关于写作能力的文章。但当我谈到智慧和拥有新想法之间的区别时，这似乎重要得多，所以我把原来的文章里外翻转，使其成为主题，而我原来的主题成为其中的一个要点。就像在许多其他领域一样，一旦你有了很多实践，这种程度的重写就更容易考虑。\n感谢特雷弗·布莱克韦尔、帕特里克·克里森、杰西卡·利文斯顿、罗伯特·莫里斯、迈克尔·尼尔森和丽莎·兰德尔阅读本文的草稿。\n",
    "description": "",
    "tags": ["智慧","新思想","创造力","独立思考","写作","创新"],
    "categories": [],
    "content": "→ English Version\n超越聪明 2021年10月\n如果你问人们爱因斯坦有什么特别之处，大多数人会说他很聪明。即使是那些试图给你更复杂答案的人可能也会首先想到这一点。直到几年前，我自己也会给出同样的答案。但这并不是爱因斯坦特别之处。他的特别之处在于他有重要的新想法。非常聪明是拥有这些想法的必要前提，但两者并不相同。\n指出智慧与其后果并不相同可能看起来是吹毛求疵的区别，但事实并非如此。它们之间有很大的差距。任何在大学和研究实验室待过的人都知道这个差距有多大。有很多真正聪明的人并没有取得什么成就。\n我从小到大一直认为聪明是最值得拥有的东西。也许你也是。但我敢打赌，这不是你真正想要的。想象一下，你有两个选择：非常聪明但一无所获，或者不那么聪明但发现很多新想法。你肯定会选择后者。我会的。这个选择让我感到不舒服，但当你看到这两个选择明确摆出来时，哪个更好是显而易见的。\n这个选择让我不舒服的原因是，聪明仍然感觉上像是重要的事情，尽管我在理智上知道它不是。我花了这么多年认为它是。童年的环境是培养这种幻觉的完美风暴。智慧比新想法的价值容易测量得多，而且你不断地被它评判。而即使是那些最终会有新发现的孩子通常还没有在发现它们。对于有这种倾向的孩子来说，聪明是城里唯一的游戏。\n还有更微妙的原因，这些原因会持续到成年很久。智慧在对话中获胜，因此成为支配等级的基础。[1] 此外，拥有新想法在历史上是如此新鲜的事情，即使现在也只有很少人这样做，以至于社会还没有接受这样的事实：这才是真正的目的地，而智慧只是达到目的的手段。[2]\n为什么这么多聪明人没能发现任何新东西？从这个方向看，这个问题似乎相当令人沮丧。但还有一种看待它的方式，不仅更乐观，而且更有趣。显然，智慧并不是拥有新想法的唯一成分。其他成分是什么？它们是我们可以培养的东西吗？\n因为据说智慧的麻烦在于它主要是天生的。这方面的证据似乎相当有说服力，特别是考虑到我们大多数人都不希望这是真的，因此证据必须面对强烈的阻力。但我在这里不会深入探讨这个问题，因为我关心的是新想法中的其他成分，而且很明显其中许多是可以培养的。\n这意味着真相与我小时候听到的故事令人兴奋地不同。如果智慧是重要的，而且主要是天生的，那么自然的结果就是一种《美丽新世界》式的宿命论。你能做的最好的事情就是找出你对哪种工作有\u0026quot;天赋\u0026quot;，这样你天生的智慧至少能被充分利用，然后尽可能努力地工作。而如果智慧不重要，只是重要事情中的几个成分之一，而且其中许多不是天生的，事情就变得更有趣了。你有更多的控制权，但如何安排你生活的问题变得更加复杂。\n那么，拥有新想法的其他成分是什么？我甚至能提出这个问题就证明了我前面提出的观点——社会还没有接受不是智慧而是这个才是重要的事实。否则我们都会知道这样一个基本问题的答案。[3]\n我不打算在这里提供其他成分的完整目录。这是我第一次这样向自己提出这个问题，我认为可能需要一段时间来回答。但我最近写到了其中最重要的一个：对特定主题的痴迷兴趣。这绝对是可以培养的。\n发现新想法需要的另一个品质是独立思考。我不想声称这与智慧截然不同——我不愿意称一个不独立思考的人为聪明——但尽管主要是天生的，这种品质似乎可以在一定程度上培养。\n有拥有新想法的一般技巧——例如，如何处理自己的项目，如何克服早期工作面临的障碍——这些都可以学习。其中一些可以由社会学习。还有生成特定类型新想法的技巧集合，比如创业想法和论文主题。\n当然，发现新想法还有很多相当平凡的成分，比如努力工作、获得足够的睡眠、避免某些压力、拥有合适的同事，以及找到即使不在做应该做的工作时也能做自己想做的事情的技巧。任何阻止人们做伟大工作的事情都有一个相反的方面可以帮助他们。而且这类成分并不像最初看起来那么无聊。例如，拥有新想法通常与年轻人相关。但也许不是青春本身产生新想法，而是伴随青春而来的特定事情，比如健康良好和缺乏责任。研究这一点可能会产生帮助任何年龄的人有更好想法的策略。\n拥有新想法最令人惊讶的成分之一是写作能力。有一类新想法最好通过写论文和书籍来发现。这个\u0026quot;通过\u0026quot;是故意的：你不是先想到想法，然后只是写下来。有一种通过写作进行的思考，如果你写作笨拙，或者不喜欢这样做，当你尝试进行这种思考时，它会妨碍你。[4]\n我预测智慧和有新想法之间的差距将是一个有趣的地方。如果我们仅仅把这个差距视为未实现潜力的衡量标准，它就变成了一种荒原，我们试图匆忙走过而不敢直视。但如果我们翻转问题，开始探究新想法中它暗示必须存在的其他成分，我们可以从这个差距中挖掘出关于发现的发现。\n注释 [1] 对话中什么获胜取决于与谁交谈。从底层的纯粹攻击性，到中层的机智，到顶层的接近真实智慧，尽管可能总是带有一些机智的成分。\n[2] 正如智慧不是拥有新想法的唯 …"
  },{
    "title": "软件专利是邪恶的吗？",
    "url": "/paul_graham/essays_zh/softwarepatents/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n软件专利是邪恶的吗？ 2006年3月\n（本文改编自在谷歌的一次演讲。）几周前，我惊讶地发现自己获得了四项专利。这更加令人惊讶，因为我只申请了三项。当然，这些专利不属于我。它们被转让给了Viaweb，在雅虎收购我们后成为雅虎的财产。但这个消息让我开始思考软件专利的普遍问题。\n专利是一个难题。我不得不为我们资助的大多数初创公司提供关于专利的建议，尽管有多年的经验，但我仍然不确定自己给出的建议是否正确。\n我相当确定的一件事是，如果你反对软件专利，你就是反对专利本身。我们的机器越来越多地由软件组成。过去用杠杆、凸轮和齿轮完成的事情现在用循环、树结构和闭包来完成。控制系统的物理实现没有什么特别之处应该使其可专利，而软件的等价物却不应该。\n不幸的是，专利法在这方面不一致。大多数国家的专利法规定算法不可专利。这条规则是遗留下来的，当时\u0026quot;算法\u0026quot;指的是像埃拉托斯特尼筛法那样的东西。在1800年，人们无法像我们今天这样清楚地看到，许多机械物体的专利实际上是对它们所体现的算法的专利。\n专利律师在申请算法专利时仍然必须假装他们在做其他事情。你不得在专利申请的标题中使用\u0026quot;算法\u0026quot;这个词，就像你不得在书名中使用\u0026quot;散文\u0026quot;这个词一样。如果你想为算法申请专利，你必须将其描述为执行该算法的计算机系统。然后它就是机械的了；呼。算法的默认委婉说法是\u0026quot;系统和方法\u0026quot;。试试用这个短语进行专利搜索，看看你能得到多少结果。\n既然软件专利与硬件专利没有什么不同，那么说\u0026quot;软件专利是邪恶的\u0026quot;的人就是在简单地说\u0026quot;专利是邪恶的\u0026quot;。那么为什么有这么多的人专门抱怨软件专利呢？\n我认为问题更多在于专利局，而不是软件专利的概念。每当软件遇到政府时，坏事就会发生，因为软件变化很快，而政府变化很慢。专利局已经被软件专利申请的数量和新颖性所淹没，结果他们犯了很多错误。\n最常见的是授予不应该授予的专利。要获得专利，发明必须不仅仅是新的。它还必须是非显而易见的。而这，正是美国专利商标局一直在失球的地方。Slashdot有一个图标生动地表达了这个问题：一把刀和叉，上面叠加着\u0026quot;专利申请中\u0026quot;的字样。\n可怕的是，这是他们唯一拥有的专利故事图标。Slashdot读者现在理所当然地认为，关于专利的故事将是关于虚假专利的。问题已经变得多么严重。\n例如，亚马逊臭名昭著的一键专利的问题不在于它是一个软件专利，而在于它是显而易见的。任何保留人们送货地址的在线商店都会实现这一点。亚马逊首先这样做的原因不是他们特别聪明，而是因为他们是最早有足够影响力的网站之一，能够强迫客户在购买前登录。[1]\n我们作为黑客，知道美国专利商标局正在让人们为我们世界中的刀叉申请专利。问题是，专利局不是黑客。他们可能擅长判断铸造钢铁或研磨镜头的新发明，但他们还不理解软件。\n在这一点上，乐观主义者会想要补充说\u0026quot;但他们最终会理解的\u0026quot;。不幸的是，这可能不是真的。软件专利问题是一个更普遍问题的实例：专利局需要一段时间才能理解新技术。如果是这样，这个问题只会变得更糟，因为技术变革的步伐似乎正在加快。三十年后，专利局可能会理解我们现在作为软件申请专利的那种东西，但会有其他类型的新发明他们理解得更少。\n申请专利是一种谈判。你通常申请比你认为会被授予的更广泛的专利，审查员通过驳回你的一些要求并授予其他要求来回应。所以我并不真正责怪亚马逊申请一键专利。大错误是专利局的，因为他们没有坚持要求更狭窄、具有真实技术内容的东西。通过授予这样一个过于宽泛的专利，美国专利商标局在第一次约会时就与亚马逊上床了。亚马逊应该说\u0026quot;不\u0026quot;吗？\n亚马逊走向黑暗面不是在申请专利时，而是在执行专利时。许多公司（例如微软）获得了大量荒谬的过于宽泛的专利，但它们主要用于防御目的。像核武器一样，大公司专利组合的主要作用是威胁任何攻击他们的人进行反诉。亚马逊对巴诺书店的诉讼因此相当于核先发制人打击。\n那场诉讼可能对亚马逊的伤害大于帮助。巴诺书店是一个蹩脚的网站；无论如何亚马逊都会击败他们。为了攻击一个他们可以忽视的竞争对手，亚马逊在自己的声誉上留下了永久的污点。即使现在，我认为如果你要求黑客自由联想关于亚马逊的事情，一键专利也会出现在前十个话题中。\n谷歌显然不觉得仅仅持有专利就是邪恶的。他们申请了很多专利。他们是伪君子吗？专利是邪恶的吗？\n这个问题实际上有两个变体，回答它的人往往不清楚自己在回答哪个。有一个狭隘的变体：在当前的法律体系下，申请专利是坏的吗？还有一个更广泛的变体：当前的法律体系允许专利是坏的吗？\n这是两个独立的问题。例如，在前工业化社会如中世纪欧洲，当有人攻击你时，你不会叫警察。没有警察。当被攻击时，你应该反击，并且有关于如何这样做的惯例。这是错误的吗？这是两个问题：自己主持正义是错误的吗？而不得不这样做是错误的吗？我们倾向于对第二个问题说是，但对第一个问题说不。如果没有其他人会保护你，你必须保护自己。[2]\n专利的情况类似。商业是一种仪式化的战争。实际上，它从真正的战争演变而来：大多数早期商人根据你看起来有多强而即时从商人转变为海盗。在商业中，有某些规则描述公司如何可以和不可以相互竞争，而决定要按自己的规则玩的人错过了重点。说\u0026quot;我不会仅仅因为其他人都在申请专利而申请专利\u0026quot;不像说\u0026quot;我不会仅仅因为其他人都在撒谎而撒谎\u0026quot;。这更像是说\u0026quot;我不会仅仅因为其他人都在使用TCP/IP而使用TCP/IP\u0026quot;。哦，是的，你会的。\n一个更接近的比较可能是第一次看到冰球比赛的人，震惊地意识到球员们故意相互碰撞，并决定自己在打冰球时绝不会如此无礼。\n冰球允许身体接触。这是比赛的一部分。如果你的团队拒绝这样做，你就会输掉。商业也是如此。在现行规则下，专利是游戏的一部分。\n这在实践中意味着什么？我们告诉我们资助的初创公司不要担心侵犯专利，因为初创公司很少因专利侵权而被起诉。有人起诉你只有两个原因：为了钱，或者为了防止你与他们竞争。初创公司太穷了，不值得为钱而被起诉。在实践中，他们似乎也不太被竞争对手起诉。他们不被其他初创公司起诉，因为（a）专利诉讼是一种昂贵的分心，（b）由于其他初创公司和它们一样年轻，它们的专利可能还没有发布。[3] 初创公司，至少在软件业务中，似乎也不太被成熟的竞争对手起诉。尽管微软持有这么多专利，我不知道他们有一个案例是因专利侵权而起诉初创公司的。像微软和甲骨文这样的公司不是通过赢得诉讼来获胜的。那太不确定了。他们通过将竞争对手排除在销售渠道之外来获胜。如果你确实威胁到他们，他们更可能收购你而不是起诉你。\n当你读到有关大公司对小公司提起专利诉讼时，通常是一家走下坡路的大公司在抓救命稻草。例如，Unisys试图执行其对LZW压缩的专利。当你看到一家大公司威胁专利诉讼时，卖掉它。当一家公司开始为知识产权而战时，这是一个迹象，表明他们已经输掉了真正的战斗，为了用户。\n一家因专利侵权而起诉竞争对手的公司就像一个被彻底击败的防守者，转而向裁判恳求。如果你还能触及球，你就不会这样做，即使你真的相信自己被犯规了。所以一家威胁专利诉讼的公司是陷入困境的公司。\n当我们在Viaweb工作时，电子商务业务中一家更大的公司获得了在线订购专利或类似的东西。我接到那里一位副总裁的电话，询问我们是否愿意授权。我回答说我认为该专利完全虚假，永远不会在法庭上成立。\u0026ldquo;好的，\u0026ldquo;他回答说。\u0026ldquo;那么，你们在招聘吗？\u0026rdquo;\n然而，如果你的初创公司发展得足够大，无论你做什么，你都会开始被起诉。例如，如果你上市，你会被多个专利流氓起诉，他们希望你付钱给他们让他们离开。更多关于他们的事情。\n换句话说，在你有钱之前，没有人会因专利侵权而起诉你，而一旦你有钱了，人们无论是否有理由都会起诉你。所以我建议宿命论。不要浪费担心专利侵权的时间。你每次系鞋带可能都在侵犯一项专利。至少在开始时，只担心做出伟大的东西并获得大量用户。如果你成长到任何人认为值得攻击你的程度，你做得很好。\n我们确实建议我们资助的公司申请专利，但不是为了让它们可以起诉竞争对手。成功的初创公司要么被收购，要么发展成大公司。如果初创公司想发展成大公司，它们应该申请专利来建立它们将需要的专利组合，以与其他大公司维持武装休战。如果它们想被收购，它们应该申请专利，因为专利是与收购者求偶的一部分。\n大多数成功的初创公司都是通过被收购成功的，而大多数收购者关心专利。初创公司的收购对收购者来说通常是一个自制与购买的决策。我们是应该购买这家小型初创公司还是自己建立？有两件事，特别是，使它们决定不自己建立：如果你已经有一个庞大且快速增长的用户群，并且你在软件的关键部分有相当坚实的专利申请。\n大公司应该更喜欢购买而不是自己建立的第三个原因是：如果他们自己建立，他们会搞砸。但很少有公司足够聪明，能够向自己承认这一点。通常被问到的公司工程师是公司自己建立有多难，他们高估了自己的能力。[4] 专利似乎改变了平衡。它给了收购者一个借口，承认他们无法复制你在做的事情。它也可能帮助他们理解你的技术的特别之处。\n坦率地说，专利在软件业务中扮演如此小的角色让我感到惊讶。考虑到专家们对软件专利扼杀创新的所有可怕说法，这有点讽刺，但是当仔细观察软件业务时，最引人注目的是专利似乎多么不重要。\n在其他领域，公司定期因专利侵权起诉竞争对手。例如，机场行李扫描业务多年来一直是InVision和L-3两家公司共享的舒适双头垄断。2002年，一家名为Reveal的初创公司出现了，他们拥有新技术，可以制造三分之一的扫描仪。他们甚至在发布产品之前就因专利侵权而被起诉。\n在我们的世界里很少听到这种故事。我发现的一个例子是，令人尴尬的是，雅虎，它在2005年对一家名为Xfire的游戏初创公司提起了专利诉讼。Xfire似乎不是什么大公司，很难说为什么雅虎感到威胁。Xfire的工程副总裁曾在雅虎从事类似的工作——事实上，他被列为雅虎起诉的专利的发明人——所以也许其中有一些个人因素。我的猜测是雅虎的某人搞错了。无论如何，他们都没有非常积极地推进诉讼。\n为什么专利在软件中扮演如此小的角色？我能想到三个可能的原因。\n一个是软件是如此复杂，以至于专利本身价值不大。我在这里可能诋毁了其他领域，但似乎在大多数类型的工程中，你可以将一些新技术的细节交给一组中高质量的人并获得期望的结果。例如，如果有人开发了一种新的冶炼矿石工艺，可以获得更好的产量，你召集一组合格的专家并告诉他们，他们将能够获得相同的产量。这在软件中似乎不起作用。软件是如此微妙和不可预测，以至于\u0026quot;合格的专家\u0026quot;并不能让你走得很远。\n这就是为什么我们在软件业务中很少听到\u0026quot;合格的专家\u0026quot;这样的短语。这种能力水平能让你做的，比如说，使你的软件与其他软件兼容——八个月后，以巨大的成本。要做更难的事情，你需要个人的才华。如果你召集一组合格的专家告诉他们制作一个新的基于网络的电子邮件程序，他们会被一个有灵感的十九岁年轻人组成的团队打败。\n专家可以实现，但他们不能设计。或者更确切地说，实现专业知识是大多数人，包括专家自己，可以衡量的唯一类型。[5]\n但设计是一种明确的技能。它不仅仅是空灵的无形之物。当你不理解它们时，事物似乎总是无形的。在1800年，电对大多数人来说似乎是空灵的无形之物。谁知道其中有多少知识可以了解？设计也是如此。有些人擅长它，有些人不擅长，他们擅长或不擅长的东西是非常有形的。\n设计在软件中如此重要的原因可能是物理上的约束更少。建造物理物品是昂贵和危险的。可能选择的空间更小；你倾向于不得不作为更大的团体的一部分工作；你受到很多法规的约束。如果你和几个朋友决定创建一个新的基于网络的应用程序，你没有任何这些。\n因为软件中设计的空间如此之大，一个成功的应用程序往往远远超过其专利的总和。保护小公司不被大竞争对手复制的不仅仅是它们的专利，还有大公司在尝试时会搞砸的一千个小事情。\n专利在我们的世界中不重要的第二个原因是初创公司很少像Reveal那样正面攻击大公司。在软件业务中，初创公司通过超越老牌公司来击败它们。初创公司不构建桌面文字处理程序与微软Word竞争。[6] 他们构建Writely。如果这个范式拥挤，只需等待下一个；他们在这条路线上运行得相当频繁。\n幸运的是，初创公司，大公司极其擅长否认。如果你费心从倾斜的角度攻击他们，他们会与你半途而遇，并机动地把你留在他们的盲点。起诉一家初创公司将意味着承认它是危险的，而这往往意味着看到大公司不想看到的事情。IBM过去经常起诉其大型机竞争对手，但他们不太关心微型计算机行业，因为他们不想看到它构成的威胁。构建基于网络的应用程序的公司也受到微软的类似保护，微软即使现在也不想想象一个Windows无关紧要的世界。\n专利在软件中似乎不太重要的第三个原因是公众舆论——或者更确切地说，是黑客舆论。在最近的一次采访中，史蒂夫·鲍尔默狡猾地留下了基于专利理由攻击Linux的可能性。但我怀疑微软是否会如此愚蠢。他们将面临所有抵制中最大的一次。而且不仅仅来自技术界的普遍人士；他们自己的很多人也会反抗。\n优秀的黑客非常关心原则问题，并且他们具有高度的流动性。如果一家公司开始行为不端，聪明的人不会在那里工作。出于某种原因，这在软件业务中似乎比其他业务更真实。我不认为这是因为黑客本质上具有更高的原则，而是因为他们的技能很容易转移。也许我们可以折中说，流动性给了黑客奢侈的以原则行事的能力。\n谷歌的\u0026quot;不作恶\u0026quot;政策因此可能是他们发现的最有价值的东西。在某些方面它非常具有约束力。如果谷歌确实做了邪恶的事情，他们会受到双重打击：一次是为了他们所做的任何事情，再次是因为虚伪。但我认为这是值得的。它帮助他们雇佣最好的人，而且，即使从纯粹自私的角度来看，受原则约束也比受愚蠢约束更好。\n（我希望有人能把这一点传达给现任政府。）\n我不确定前面三个成分的比例如何，但大公司之间的习俗似乎是不起诉小公司，而初创公司大多太忙太穷，无法相互起诉。所以尽管有大量的软件专利，但没有很多诉讼正在进行。有一个例外：专利流氓。\n专利流氓是主要由律师组成的公司，他们的全部业务是积累专利并威胁要起诉实际制造产品的公司。专利流氓，可以肯定地说，是邪恶的。我觉得说这话有点愚蠢，因为当你说理查德·斯托曼和比尔·盖茨都会同意的事情时，你一定危险地接近于同义反复。\nForgent，最臭名昭著的专利流氓之一的首席执行官说，他的公司所做的是\u0026quot;美国方式\u0026rdquo;。实际上这不是真的。美国方式是通过创造财富来赚钱，而不是通过起诉人们。[7] 像Forgent这样的公司所做的实际上是前工业时代的方式。在工业革命前夕，在像英国和法国这样的国家，一些最大的财富是由朝臣们通过从国王那里提取一些有利可图的权利——比如对丝绸进口征税的权利——然后利用这个向该行业的商人榨取金钱而获得的。所以当人们将专利流氓比作黑手党时，他们比他们知道的更正确，因为黑手党也不仅仅是坏的，而是在作为过时商业模式的意义上特别坏。\n专利流氓似乎让大公司措手不及。在过去几年里，他们从大公司那里榨取了数亿美元。专利流氓难以对抗恰恰是因为他们什么也不创造。大公司免受其他大公司的起诉，因为他们可以威胁反诉。但因为专利流氓不制造任何东西，没有什么可以起诉他们的。我预测这个漏洞将很快被堵上，至少按照法律标准。这明显是对系统的滥用，而受害者是有权势的。[8]\n但即使专利流氓是邪恶的，我不认为它们会扼杀太多创新。它们直到初创公司赚钱才起诉，到那时，产生它的创新已经发生了。我想不出有初创公司因为专利流氓而避免研究某个问题。\n就目前进行的比赛而言，冰球就是这样。关于没有身体接触的冰球是否会成为更好比赛的更理论问题呢？专利是鼓励还是阻碍创新？\n这是一个在一般情况下很难回答的问题。人们就这个主题写整本书。我的主要爱好之一是技术史，尽管我研究这个主题多年，但我需要几周的研究才能说专利总体上是否是净赢家。\n我能说的是，99.9%就这个主题表达意见的人不是基于这样的研究，而是基于一种宗教信念。至少，这是礼貌的说法；口语版本涉及来自不是为那个目的设计的器官的言语。\n无论它们是否鼓励创新，专利至少是为了鼓励创新而设立的。你不能免费获得专利。作为使用想法的专有权利的回报，你必须发布它，而很大程度上是为了鼓励这种开放性而建立了专利制度。\n在专利之前，人们通过保密来保护想法。有了专利，中央政府实际上说，如果你告诉每个人你的想法，我们会为你保护它。这与公民秩序的兴起有相似之处，这种情况大约在同一时间发生。在中央政府足够强大以执行秩序之前，富人拥有私人军队。随着政府变得更强大，他们逐渐迫使权贵放弃保护他们的大部分责任。（权贵仍然有保镖，但不再是为了保护他们免受其他权贵的伤害。）\n专利，像警察一样，涉及许多滥用行为。但在两种情况下，默认情况更糟糕。选择不是\u0026quot;专利还是自由？\u0026quot;，就像不是\u0026quot;警察还是自由？\u0026ldquo;一样。实际的问题分别是\u0026quot;专利还是保密？\u0026ldquo;和\u0026quot;警察还是帮派？\u0026rdquo;\n与帮派一样，我们对保密会有什么样子有一些了解，因为事情过去就是这样。中世纪欧洲的经济被分成小部落，每个部落都嫉妒地守护着自己的特权和秘密。在莎士比亚时代，\u0026ldquo;神秘\u0026quot;与\u0026quot;工艺\u0026quot;是同义词。即使在今天，我们也可以看到中世纪行会保密的回声，在现在毫无意义的共济会保密中。\n中世纪工业保密最令人难忘的例子可能是威尼斯，它禁止玻璃吹制工离开城市，并派刺客追捕那些试图离开的人。我们可能想认为我们不会走得那么远，但电影行业已经试图通过法律规定仅仅将电影放在公共网络上就判处三年监禁。想尝试一个可怕的思想实验吗？如果电影行业可以拥有他们想要的任何法律，他们会在哪里停止？假设除了死刑之外，但他们会有多接近？\n比惊人的滥用更糟糕的可能是伴随增加的保密而来的整体效率下降。任何与\u0026quot;需要知道\u0026quot;基础上运作的组织打过交道的人都可以证明，将信息分成小单元是非常低效的。\u0026ldquo;需要知道\u0026quot;原则的缺陷是你不知道谁需要知道什么。来自一个领域的想法可能会在另一个领域引发伟大的发现。但发现者不知道他需要知道它。\n如果保密是想法的唯一保护，公司不仅必须对其他公司保密；他们还必须在内部保密。这将鼓励已经是公司最坏特质的那些。\n我不是说保密会比专利更糟糕，只是说我们不能免费放弃专利。企业会变得更加保密来补偿，在某些领域这可能变得丑陋。我也不是在为当前的专利制度辩护。显然其中有很多破碎的地方。但这种破坏似乎对软件的影响小于大多数其他领域。\n",
    "description": "",
    "tags": ["专利","软件","创新","知识产权","商业","法律"],
    "categories": [],
    "content": "→ English Version\n软件专利是邪恶的吗？ 2006年3月\n（本文改编自在谷歌的一次演讲。）几周前，我惊讶地发现自己获得了四项专利。这更加令人惊讶，因为我只申请了三项。当然，这些专利不属于我。它们被转让给了Viaweb，在雅虎收购我们后成为雅虎的财产。但这个消息让我开始思考软件专利的普遍问题。\n专利是一个难题。我不得不为我们资助的大多数初创公司提供关于专利的建议，尽管有多年的经验，但我仍然不确定自己给出的建议是否正确。\n我相当确定的一件事是，如果你反对软件专利，你就是反对专利本身。我们的机器越来越多地由软件组成。过去用杠杆、凸轮和齿轮完成的事情现在用循环、树结构和闭包来完成。控制系统的物理实现没有什么特别之处应该使其可专利，而软件的等价物却不应该。\n不幸的是，专利法在这方面不一致。大多数国家的专利法规定算法不可专利。这条规则是遗留下来的，当时\u0026quot;算法\u0026quot;指的是像埃拉托斯特尼筛法那样的东西。在1800年，人们无法像我们今天这样清楚地看到，许多机械物体的专利实际上是对它们所体现的算法的专利。\n专利律师在申请算法专利时仍然必须假装他们在做其他事情。你不得在专利申请的标题中使用\u0026quot;算法\u0026quot;这个词，就像你不得在书名中使用\u0026quot;散文\u0026quot;这个词一样。如果你想为算法申请专利，你必须将其描述为执行该算法的计算机系统。然后它就是机械的了；呼。算法的默认委婉说法是\u0026quot;系统和方法\u0026quot;。试试用这个短语进行专利搜索，看看你能得到多少结果。\n既然软件专利与硬件专利没有什么不同，那么说\u0026quot;软件专利是邪恶的\u0026quot;的人就是在简单地说\u0026quot;专利是邪恶的\u0026quot;。那么为什么有这么多的人专门抱怨软件专利呢？\n我认为问题更多在于专利局，而不是软件专利的概念。每当软件遇到政府时，坏事就会发生，因为软件变化很快，而政府变化很慢。专利局已经被软件专利申请的数量和新颖性所淹没，结果他们犯了很多错误。\n最常见的是授予不应该授予的专利。要获得专利，发明必须不仅仅是新的。它还必须是非显而易见的。而这，正是美国专利商标局一直在失球的地方。Slashdot有一个图标生动地表达了这个问题：一把刀和叉，上面叠加着\u0026quot;专利申请中\u0026quot;的字样。\n可怕的是，这是他们唯一拥有的专利故事图标。Slashdot读者现在理所当然地认为，关于专利的故事将是关于虚假专利的。问题已经变得多么严重。\n例如，亚马逊臭名昭著的一键专利的问题不在于它是一个软件专利，而在于它是显而易见的。任何保留人们送货地址的在线商店都会实现这一点。亚马逊首先这样做的原因不是他们特别聪明，而是因为他们是最早有足够影响力的网站之一，能够强迫客户在购买前登录。[1]\n我们作为黑客，知道美国专利商标局正在让人们为我们世界中的刀叉申请专利。问题是，专利局不是黑客。他们可能擅长判断铸造钢铁或研磨镜头的新发明，但他们还不理解软件。\n在这一点上，乐观主义者会想要补充说\u0026quot;但他们最终会理解的\u0026quot;。不幸的是，这可能不是真的。软件专利问题是一个更普遍问题的实例：专利局需要一段时间才能理解新技术。如果是这样，这个问题只会变得更糟，因为技术变革的步伐似乎正在加快。三十年后，专利局可能会理解我们现在作为软件申请专利的那种东西，但会有其他类型的新发明他们理解得更少。\n申请专利是一种谈判。你通常申请比你认为会被授予的更广泛的专利，审查员通过驳回你的一些要求并授予其他要求来回应。所以我并不真正责怪亚马逊申请一键专利。大错误是专利局的，因为他们没有坚持要求更狭窄、具有真实技术内容的东西。通过授予这样一个过于宽泛的专利，美国专利商标局在第一次约会时就与亚马逊上床了。亚马逊应该说\u0026quot;不\u0026quot;吗？\n亚马逊走向黑暗面不是在申请专利时，而是在执行专利时。许多公司（例如微软）获得了大量荒谬的过于宽泛的专利，但它们主要用于防御目的。像核武器一样，大公司专利组合的主要作用是威胁任何攻击他们的人进行反诉。亚马逊对巴诺书店的诉讼因此相当于核先发制人打击。\n那场诉讼可能对亚马逊的伤害大于帮助。巴诺书店是一个蹩脚的网站；无论如何亚马逊都会击败他们。为了攻击一个他们可以忽视的竞争对手，亚马逊在自己的声誉上留下了永久的污点。即使现在，我认为如果你要求黑客自由联想关于亚马逊的事情，一键专利也会出现在前十个话题中。\n谷歌显然不觉得仅仅持有专利就是邪恶的。他们申请了很多专利。他们是伪君子吗？专利是邪恶的吗？\n这个问题实际上有两个变体，回答它的人往往不清楚自己在回答哪个。有一个狭隘的变体：在当前的法律体系下，申请专利是坏的吗？还有一个更广泛的变体：当前的法律体系允许专利是坏的吗？\n这是两个独立的问题。例如，在前工业化社会如中世纪欧洲，当有人攻击你时，你不会叫警察。 …"
  },{
    "title": "边缘的力量",
    "url": "/paul_graham/essays_zh/marginal/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n边缘的力量 2006年6月\n（本文源于在 Usenix 2006 和 Railsconf 2006 的演讲。）\n几年前，我的朋友 Trevor 和我一起去看了苹果的车库。当我们站在那里时，他说在萨斯喀彻温省长大的他曾经对乔布斯和沃兹尼亚克必须在车库里工作的奉献精神感到惊叹。\n\u0026ldquo;那些人一定冻坏了！\u0026rdquo;\n这就是加州隐藏的优势之一：温和的气候意味着有很多边缘空间。在寒冷的地方，那些边缘被修剪掉了。内外之间有更清晰的界限，只有那些得到正式批准的项目——由组织、父母、妻子，或者至少由自己批准——才能获得适当的室内空间。这提高了新想法的激活能量。你不能只是修补。你必须证明其合理性。\n硅谷一些最著名的公司始于车库：惠普在1938年，苹果在1976年，谷歌在1998年。在苹果的情况下，车库故事有点像都市传说。沃兹说他们在那里所做的一切就是组装一些计算机，而他在自己的公寓或惠普的隔间里完成了Apple I和Apple II的实际设计。[1] 这显然太边缘了，即使是苹果的公关人员也无法接受。\n按照传统标准，乔布斯和沃兹尼亚克也是边缘人物。显然他们很聪明，但他们在纸上看起来不可能很好。当时他们是一对大学辍学生，之间只有大约三年的学业，而且还是嬉皮士。他们之前的商业经验包括制造\u0026quot;蓝盒子\u0026quot;来入侵电话系统，这是一个具有罕见区别的业务：既非法又不盈利。\n局外人 现在，在硅谷的车库里运营的创业公司会感到自己是一个崇高传统的一部分，就像在阁楼里的诗人，或者负担不起加热工作室而不得不在室内戴贝雷帽的画家。但在1976年，这似乎并不那么酷。世界还没有意识到创办计算机公司与成为作家或画家属于同一类别。这种情况持续的时间不长。只有在过去几年中，硬件成本的急剧下降才允许局外人竞争。\n在1976年，每个人都看不起在车库里运营的公司，包括创始人。当他们得到一些钱时，乔布斯做的第一件事就是租用办公空间。他希望苹果看起来像一家真正的公司。\n他们已经拥有很少有真实公司拥有的东西：设计精良的产品。你会认为他们会有更多的信心。但我和很多创业公司创始人谈过，情况总是这样。他们建立了一些将要改变世界的东西，但他们担心的是没有像样的名片这样的小问题。\n这就是我想探讨的悖论：伟大的新事物往往来自边缘，然而发现它们的人被包括自己在内的所有人看不起。\n新事物来自边缘是一个老想法。我想检验它的内在结构。为什么伟大的想法来自边缘？什么样的想法？我们能做些什么来鼓励这个过程？\n内部人士 这么多好想法来自边缘的一个原因很简单：边缘太大了。如果内部人士意味着什么，那么局外人必须比内部人士多。如果局外人的数量巨大，即使人均很少，看起来也会有很多想法来自他们。但我认为还有更多的事情。成为内部人士有真正的缺点，在某些类型的工作中，这些缺点可能超过优点。\n想象一下，例如，如果政府决定委托某人写一部官方的《伟大的美国小说》。首先会有一场巨大的意识形态争论，争论选择谁。大多数最好的作家会因为冒犯了某一方而被排除。在剩下的人中，聪明的人会拒绝这样的工作，只剩下一些有错误野心的人。委员会会选择一个处于事业巅峰的人——也就是说，某人最好的工作已经过去——并移交项目，同时提供大量免费建议，说明这本书应该如何以积极的方式展示美国人民的力量和多样性等等。\n不幸的作家然后会坐下来工作，肩上承载着巨大的期望压力。不想搞砸这样一个公共委托，他会谨慎行事。这本书最好能赢得尊重，而确保这一点的方法是让它成为悲剧。观众必须被诱惑才能笑，但如果你杀人，他们会觉得必须认真对待你。众所周知，美国加上悲剧等于内战，所以那必须是关于什么的。十二年后最终完成时，这本书将是现有流行小说的900页拼贴——大致是《飘》加上《根》。但其体量和名人效应会使它成为几个月的畅销书，直到被脱口秀主持人的自传击败。这本书会被拍成电影然后被遗忘，除了那些更尖刻的评论家，在他们中间，它会成为虚假的代名词，就像米利·瓦尼利或《地球战场》。\n也许我有点被这个例子冲昏了头脑。然而，这难道不是这样的项目在每个点上都会展开的方式吗？政府比进入小说业务更了解情况，但在他们拥有自然垄断的其他领域，如核废料倾倒场、航空母舰和政权更迭，你会发现很多与这个项目同构的项目——实际上，还有很多不太成功的项目。\n这个小思想实验表明了内部人士项目的一些缺点：选择了错误类型的人，范围过大，无法承担风险，需要显得严肃，期望的重量，既得利益的力量，不具辨别力的观众，也许最危险的是，这种工作变成责任而不是娱乐的倾向。\n测试 一个有局外人和内部人士的世界意味着某种测试来区分他们。大多数选择精英的测试的问题在于，有两种方式通过它们：在他们试图测量的方面做得好，或者在测试本身方面做得好。\n因此，关于一个领域的第一个问题是其测试有多诚实，因为这告诉你成为局外人意味着什么。这告诉你当你与权威人士意见不一致时，应该多大程度上相信你的直觉，是否值得通过通常的渠道成为他们自己，也许你是否想在这个领域工作。\n当有一致的质量标准，并且运行测试的人真正关心其完整性时，测试最难被破解。例如，硬科学博士课程的录取相当诚实。教授将得到他们录取的人作为自己的研究生，所以他们努力选择好的人，并且他们有相当多的数据可以参考。而本科录取似乎更容易被破解。\n判断一个领域是否有一致标准的一种方法是领先从业者与在大学教授该学科的人之间的重叠。在规模的一端，你有数学和物理等领域，几乎所有的老师都是最好的从业者。中间是医学、法律、历史、建筑和计算机科学，其中很多是。底部是商业、文学和视觉艺术，教师和领先从业者之间几乎没有重叠。正是这一端产生了\u0026quot;不能做的人教\u0026quot;这样的短语。\n顺便说一句，这个规模在决定大学学习什么时可能很有帮助。当我在大学时，规则似乎是你应该学习你最感兴趣的东西。但回想起来，你最好与一个擅长的人一起学习中等有趣的东西，而不是与一个不擅长的人一起学习非常有趣的东西。你经常听到人们说你不应该在大学主修商业，但这实际上是一个更一般规则的实例：不要从不擅长它们的老师那里学习东西。\n你应该多担心成为局外人取决于内部人士的质量。如果你是一个业余数学家，认为自己解决了一个著名的开放问题，最好回去检查一下。当我在研究生院时，数学系的一个朋友的工作是回复那些寄来费马最后定理等证明的人，看起来他并不认为这是有价值的信息来源——更像是值守心理健康热线。而如果你写的东西似乎与英语教授感兴趣的不同，那不一定是问题。\n反测试 当选择精英的方法完全腐败时，大多数好人都会成为局外人。例如，在艺术中，贫穷、被误解的天才的形象不仅仅是一个可能的伟大艺术家形象：它是标准形象。顺便说一句，我并不是说这是正确的，但这个形象如此深入人心是很有启发性的。你不能让这样的说辞贴在数学或医学上。[2]\n如果足够腐败，测试就成为反测试，通过让人们做只有错误的人才会做的事情来过滤掉应该选择的人。高中受欢迎度似乎就是这样一个测试。在成人世界有很多类似的测试。例如，在普通大公司的等级制度中晋升需要关注政治，很少有深思熟虑的人能分心于此。[3] 像比尔·盖茨这样的人可以在他手下发展一家公司，但很难想象他有耐心在通用电气——或者实际上是微软——攀登公司阶梯。\n当你想到这一点时，这有点奇怪，因为苍蝇之王式的学校和官僚公司都是默认的。可能有很多人从一个到另一个，从未意识到整个世界并不是这样运作的。\n我认为这就是大公司经常被创业公司蒙蔽的一个原因。大公司的人没有意识到他们生活在一个环境中的程度，这个环境是一个大的、持续的测试，测试错误的品质。\n如果你是一个局外人，你击败内部人士的最佳机会显然是在腐败测试选择蹩脚精英的领域。但有一个陷阱：如果测试是腐败的，你的胜利将不会被认可，至少在你有生之年不会。你可能觉得你不需要那个，但历史表明，在腐败测试的领域工作是危险的。你可能击败了内部人士，但与在一个更诚实的领域相比，你所做的工作在绝对尺度上不会那么好。\n例如，艺术标准在十八世纪上半叶几乎与今天一样腐败。这是那些蓬松的理想化伯爵夫人与膝上狗肖像的时代。夏尔丹决定跳过所有这些，按照他看到的方式画普通事物。他现在被认为是那个时期最好的——但仍然不配与达芬奇、贝利尼或梅姆林相提并论，他们都拥有诚实标准的额外鼓励。\n然而，如果一个腐败的比赛之后是另一个不腐败的比赛，参与其中可能是值得的。例如，与一个能在营销上花费比你更多的公司竞争是值得的，只要你能在下一轮生存下来，届时客户会比较你的实际产品。同样，你不应该被相对腐败的大学入学测试所阻挠，因为它后面紧跟着不那么容易被破解的测试。[4]\n风险 即使在有诚实测试的领域，成为局外人仍然有优势。最明显的是局外人没有什么可失去的。他们可以做有风险的事情，如果失败了，那又怎样？几乎没有人会注意到。\n另一方面，杰出人士被他们的杰出地位所拖累。杰出就像一套西装：它给错误的人留下印象，它限制了穿着者。\n局外人应该意识到他们在这里拥有的优势。能够承担风险是极其有价值的。每个人都太重视安全，无论是默默无闻的人还是杰出人士。没有人想看起来像傻瓜。但能够看起来像傻瓜是非常有用的。如果你的大多数想法不愚蠢，你可能太保守了。你没有充分界定问题。\n阿克顿勋爵说我们应该在最佳状态评判才能，在最坏状态评判品格。例如，如果你写一本伟大的书和十本糟糕的书，你仍然算是一个伟大的作家——或者至少，比写了十一本仅仅是好书的作家更好。而如果你大多数时候是一个安静、守法的公民，但偶尔把人切碎并埋在后院，你是个坏人。\n几乎每个人都犯了一个错误，把想法当作品格的指标而不是才能的指标——好像有一个愚蠢的想法让你变得愚蠢。有巨大的传统重量建议我们谨慎行事。\u0026ldquo;即使愚人保持沉默，也被认为是智慧的，\u0026ldquo;旧约说（箴言 17:28）。\n嗯，对于青铜时代巴勒斯坦的一群牧羊人来说，这可能是很好的建议。那时保守主义会是当天的秩序。但时代变了。在政治问题上坚持旧约可能仍然是合理的，但在物质上，世界现在有更多的国家。传统的指导作用较小，不仅因为事物变化更快，而且因为可能性的空间如此之大。世界变得越复杂，愿意看起来像傻瓜就越有价值。\n委托 然而，人们越成功，如果他们搞砸了——甚至似乎搞砸了——他们受到的热度就越高。在这方面，以及许多其他方面，杰出人士是自己成功的囚犯。因此，理解成为局外人优势的最好方法可能是看看成为内部人士的缺点。\n如果你问杰出人士他们的生活有什么问题，他们会抱怨的第一件事是缺乏时间。我在谷歌的一个朋友在公司里相当高的位置，在谷歌上市很久之前就为他们工作了。换句话说，他现在足够富有，不必工作。我问他，既然他不必工作，他是否还能忍受拥有工作的烦恼。他说没有任何真正的烦恼，除了——当他说这话时，他带着渴望的表情——他收到了太多的电子邮件。\n杰出人士感觉就像每个人都想咬他们一口。这个问题如此普遍，以至于假装杰出的人通过假装过度劳累来做到这一点。\n杰出人士的生活变得有日程安排，这对思考不好。成为局外人的巨大优势之一是长的、不间断的时间块。这就是我对研究生院的记忆：似乎无穷无尽的时间供应，我花时间担心，但没有写，我的论文。默默无闻就像健康食品——可能不愉快，但对你有益。而名声往往像发酵产生的酒精。当达到一定浓度时，它会杀死产生它的酵母。\n杰出人士通常通过变成经理来应对时间短缺。他们没有时间工作。他们被周围应该帮助或监督的初级人员包围。明显的解决方案是让初级人员做工作。这样发生了一些好事，但有些问题不太适用：那种把所有事情都放在一个脑袋里有帮助的问题。\n例如，最近有人透露著名的玻璃艺术家戴尔·奇胡利已经27年没有真正吹制玻璃了。他有助手为他做工作。但视觉艺术中最有价值的想法来源之一是媒介的阻力。这就是为什么油画看起来与水彩如此不同。原则上你可以在任何媒介中做任何标记；实际上媒介引导你。如果你不再亲自做工作，你就停止从中学习。\n所以如果你想击败那些足够杰出以至于可以委托的人，一种方法是利用与媒介的直接接触。在艺术中，这很明显：吹你自己的玻璃，编辑你自己的电影，上演你自己的戏剧。在这个过程中密切注意事故和你即时产生的新想法。这种技术可以推广到任何类型的工作：如果你是一个局外人，不要被计划所统治。计划通常只是被迫于那些委托的人的弱点。\n有没有找到最好在一个脑袋中解决的问题的一般规则？嗯，你可以通过采取通常由多人完成的任何项目并尝试自己做来制造它们。沃兹尼亚克的工作是一个经典的例子：他自己做了一切，硬件和软件，结果是奇迹性的。他声称在Apple II中从未发现一个错误，无论是在硬件还是软件中。\n找到好问题在一个脑袋中解决的另一种方法是专注于巧克力棒中的凹槽——当任务在几个人之间分割时被分割的地方。如果你想击败委托，专注于垂直切片：例如，既是作家又是编辑，或者既是设计建筑又是建造它们。\n一个特别好的跨越凹槽是工具和用它们制造的东西之间的凹槽。例如，编程语言和应用程序通常由不同的人编写，这负责了编程语言中最严重的缺陷。我认为每种语言都应该同时用用它编写的大型应用程序来设计，就像C与Unix一样。\n与委托竞争的技术很好地转化为商业，因为委托在那里是地方性的。许多公司不把委托作为衰老的缺点来避免，而是把它作为成熟的标志来拥抱。在大公司中，软件通常由三种不同类型的人设计、实现和销售。在创业公司中，一个人可能必须做所有三件事。虽然这感觉压力很大，但这是创业公司获胜的原因之一。客户的需求和满足他们的手段都在一个脑袋中。\n",
    "description": "",
    "tags": ["边缘","局外人","创新","创造力","创业","技术","成功","工作","想法"],
    "categories": [],
    "content": "→ English Version\n边缘的力量 2006年6月\n（本文源于在 Usenix 2006 和 Railsconf 2006 的演讲。）\n几年前，我的朋友 Trevor 和我一起去看了苹果的车库。当我们站在那里时，他说在萨斯喀彻温省长大的他曾经对乔布斯和沃兹尼亚克必须在车库里工作的奉献精神感到惊叹。\n\u0026ldquo;那些人一定冻坏了！\u0026rdquo;\n这就是加州隐藏的优势之一：温和的气候意味着有很多边缘空间。在寒冷的地方，那些边缘被修剪掉了。内外之间有更清晰的界限，只有那些得到正式批准的项目——由组织、父母、妻子，或者至少由自己批准——才能获得适当的室内空间。这提高了新想法的激活能量。你不能只是修补。你必须证明其合理性。\n硅谷一些最著名的公司始于车库：惠普在1938年，苹果在1976年，谷歌在1998年。在苹果的情况下，车库故事有点像都市传说。沃兹说他们在那里所做的一切就是组装一些计算机，而他在自己的公寓或惠普的隔间里完成了Apple I和Apple II的实际设计。[1] 这显然太边缘了，即使是苹果的公关人员也无法接受。\n按照传统标准，乔布斯和沃兹尼亚克也是边缘人物。显然他们很聪明，但他们在纸上看起来不可能很好。当时他们是一对大学辍学生，之间只有大约三年的学业，而且还是嬉皮士。他们之前的商业经验包括制造\u0026quot;蓝盒子\u0026quot;来入侵电话系统，这是一个具有罕见区别的业务：既非法又不盈利。\n局外人 现在，在硅谷的车库里运营的创业公司会感到自己是一个崇高传统的一部分，就像在阁楼里的诗人，或者负担不起加热工作室而不得不在室内戴贝雷帽的画家。但在1976年，这似乎并不那么酷。世界还没有意识到创办计算机公司与成为作家或画家属于同一类别。这种情况持续的时间不长。只有在过去几年中，硬件成本的急剧下降才允许局外人竞争。\n在1976年，每个人都看不起在车库里运营的公司，包括创始人。当他们得到一些钱时，乔布斯做的第一件事就是租用办公空间。他希望苹果看起来像一家真正的公司。\n他们已经拥有很少有真实公司拥有的东西：设计精良的产品。你会认为他们会有更多的信心。但我和很多创业公司创始人谈过，情况总是这样。他们建立了一些将要改变世界的东西，但他们担心的是没有像样的名片这样的小问题。\n这就是我想探讨的悖论：伟大的新事物往往来自边缘，然而发现它们的人被包括自己在内的所有人看不起。\n新事物来自边缘是一个老想法。我想检验它的内在结构。为什么伟大的想法来自边缘？什么样的想法？我们能做些什么来鼓励这个过程？\n内部人士 这么多好想法来自边缘的一个原因很简单：边缘太大了。如果内部人士意味着什么，那么局外人必须比内部人士多。如果局外人的数量巨大，即使人均很少，看起来也会有很多想法来自他们。但我认为还有更多的事情。成为内部人士有真正的缺点，在某些类型的工作中，这些缺点可能超过优点。\n想象一下，例如，如果政府决定委托某人写一部官方的《伟大的美国小说》。首先会有一场巨大的意识形态争论，争论选择谁。大多数最好的作家会因为冒犯了某一方而被排除。在剩下的人中，聪明的人会拒绝这样的工作，只剩下一些有错误野心的人。委员会会选择一个处于事业巅峰的人——也就是说，某人最好的工作已经过去——并移交项目，同时提供大量免费建议，说明这本书应该如何以积极的方式展示美国人民的力量和多样性等等。\n不幸的作家然后会坐下来工作，肩上承载着巨大的期望压力。不想搞砸这样一个公共委托，他会谨慎行事。这本书最好能赢得尊重，而确保这一点的方法是让它成为悲剧。观众必须被诱惑才能笑，但如果你杀人，他们会觉得必须认真对待你。众所周知，美国加上悲剧等于内战，所以那必须是关于什么的。十二年后最终完成时，这本书将是现有流行小说的900页拼贴——大致是《飘》加上《根》。但其体量和名人效应会使它成为几个月的畅销书，直到被脱口秀主持人的自传击败。这本书会被拍成电影然后被遗忘，除了那些更尖刻的评论家，在他们中间，它会成为虚假的代名词，就像米利·瓦尼利或《地球战场》。\n也许我有点被这个例子冲昏了头脑。然而，这难道不是这样的项目在每个点上都会展开的方式吗？政府比进入小说业务更了解情况，但在他们拥有自然垄断的其他领域，如核废料倾倒场、航空母舰和政权更迭，你会发现很多与这个项目同构的项目——实际上，还有很多不太成功的项目。\n这个小思想实验表明了内部人士项目的一些缺点：选择了错误类型的人，范围过大，无法承担风险，需要显得严肃，期望的重量，既得利益的力量，不具辨别力的观众，也许最危险的是，这种工作变成责任而不是娱乐的倾向。\n测试 一个有局外人和内部人士的世界意味着某种测试来区分他们。大多数选择精英的测试的问题在于，有两种方式通过它们：在他们试图测量的方面做得好，或者在测试本身方面做得好。\n因此，关于一个领域的第一个问题是其测试有多诚实，因 …"
  },{
    "title": "这是哪个微软的Altair Basic？",
    "url": "/paul_graham/essays_zh/altair/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n这是哪个微软的Altair Basic？ 2015年2月\n如果你想了解初创公司，你可以尝试的最有价值的练习之一是看看最成功的公司，并解释为什么它们在刚推出时并不像看起来那么糟糕。因为实际上它们在刚开始时看起来都很糟糕。不仅仅是小，而是糟糕。不仅仅是登上大山的第一步。更像是踏入沼泽的第一步。\nAltair的Basic解释器？这怎么可能成长为一家大公司？人们在陌生人的公寓里睡气垫床？一个让大学生互相窥探的网站？一个使用电视作为显示器的爱好者用的弱小单板计算机？一个新的搜索引擎，当时已经有大约10个，而且它们都在试图淡化搜索？这些想法不仅看起来小。它们看起来是错的。它们是那种你不仅不能忽视，而且会嘲笑的想法。\n通常创始人自己也不知道为什么他们的想法有前途。他们被本能吸引到这些想法，因为他们生活在未来，并且感觉到缺少了什么。但他们无法用语言准确表达他们的丑小鸭将如何成长为美丽的大天鹅。\n大多数人在听到一个听起来糟糕的新初创公司想法时的第一反应是取笑它。即使是很多应该更了解情况的人也是如此。\n当我遇到一个想法听起来糟糕的初创公司时，我会问\u0026quot;这是哪个微软的Altair Basic？\u0026ldquo;现在这是一个谜题，解决它的责任在我身上。有时我想不出答案，特别是当想法是虚构的时候。但 remarkable 的是，经常确实有答案。通常这是创始人自己还没有看到的答案。\n有趣的是，有时有多个答案。几天前我和一家初创公司交谈，它可能成长为3个不同的微软。它们的大小可能会有数量级的差异。但你永远无法预测一个微软会有多大，所以在那种情况下，我鼓励创始人遵循哪条对他们来说最立即令人兴奋的道路。他们的本能让他们走到了这一步。为什么现在停止？\n",
    "description": "",
    "tags": ["创业","微软","想法","创新","远见"],
    "categories": [],
    "content": "→ English Version\n这是哪个微软的Altair Basic？ 2015年2月\n如果你想了解初创公司，你可以尝试的最有价值的练习之一是看看最成功的公司，并解释为什么它们在刚推出时并不像看起来那么糟糕。因为实际上它们在刚开始时看起来都很糟糕。不仅仅是小，而是糟糕。不仅仅是登上大山的第一步。更像是踏入沼泽的第一步。\nAltair的Basic解释器？这怎么可能成长为一家大公司？人们在陌生人的公寓里睡气垫床？一个让大学生互相窥探的网站？一个使用电视作为显示器的爱好者用的弱小单板计算机？一个新的搜索引擎，当时已经有大约10个，而且它们都在试图淡化搜索？这些想法不仅看起来小。它们看起来是错的。它们是那种你不仅不能忽视，而且会嘲笑的想法。\n通常创始人自己也不知道为什么他们的想法有前途。他们被本能吸引到这些想法，因为他们生活在未来，并且感觉到缺少了什么。但他们无法用语言准确表达他们的丑小鸭将如何成长为美丽的大天鹅。\n大多数人在听到一个听起来糟糕的新初创公司想法时的第一反应是取笑它。即使是很多应该更了解情况的人也是如此。\n当我遇到一个想法听起来糟糕的初创公司时，我会问\u0026quot;这是哪个微软的Altair Basic？\u0026ldquo;现在这是一个谜题，解决它的责任在我身上。有时我想不出答案，特别是当想法是虚构的时候。但 remarkable 的是，经常确实有答案。通常这是创始人自己还没有看到的答案。\n有趣的是，有时有多个答案。几天前我和一家初创公司交谈，它可能成长为3个不同的微软。它们的大小可能会有数量级的差异。但你永远无法预测一个微软会有多大，所以在那种情况下，我鼓励创始人遵循哪条对他们来说最立即令人兴奋的道路。他们的本能让他们走到了这一步。为什么现在停止？\n"
  },{
    "title": "阅读的必要",
    "url": "/paul_graham/essays_zh/read/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n阅读的必要 2022年11月\n在我小时候读的科幻小说中，阅读经常被某种更高效的知识获取方式所取代。神秘的\u0026quot;磁带\u0026quot;会像程序加载到计算机中一样将知识加载到人的大脑中。\n那种事情在近期不太可能发生。不仅因为建造阅读的替代品会很困难，而且即使存在这样的替代品，它也是不够的。阅读关于x的东西不仅教你关于x的知识，它还教你如何写作。[1]\n这有关系吗？如果我们取代了阅读，还有人需要擅长写作吗？\n这之所以重要是因为写作不仅是一种传达思想的方式，也是一种拥有思想的方式。\n好的作家不只是思考，然后写下他所想的，就像某种转录。好的作家几乎总会在写作过程中发现新事物。而且，据我所知，这种发现没有替代品。与他人谈论你的想法是发展它们的好方法。但即使这样做了，当你坐下来写作时，你仍然会发现新事物。有一种思考只能通过写作来完成。\n当然，有些思考可以不通过写作来完成。如果你不需要太深入地研究一个问题，你可以不通过写作来解决它。如果你在思考两个机械部件应该如何配合，写关于它的可能不会有太大帮助。当一个问题可以被形式化描述时，你有时可以在头脑中解决它。但如果你需要解决一个复杂的、定义不清的问题，写关于它几乎总是有帮助的。这反过来意味着一个不擅长写作的人在解决这类问题时几乎总是处于劣势。\n没有好的写作就不能有好的思考，没有好的阅读就不能有好的写作。我意思是最后那个\u0026quot;好\u0026quot;在两种意义上。你必须擅长阅读，并且阅读好的东西。[2]\n只想要信息的人可能会找到其他获取方式。但想要有思想的人负担不起不阅读的代价。\n注释 [1] 有声书可以给你好的写作例子，但让别人读给你你，不像你自己阅读那样能教你那么多关于写作的知识。\n[2] 我说\u0026quot;擅长阅读\u0026quot;不是指阅读的机械能力。你不必擅长从页面上提取单词，而是擅长从单词中提取意义。\n日语翻译\n中文翻译\n意大利语翻译\n法语翻译\n",
    "description": "",
    "tags": ["阅读","写作","思考","学习","知识","思想"],
    "categories": [],
    "content": "→ English Version\n阅读的必要 2022年11月\n在我小时候读的科幻小说中，阅读经常被某种更高效的知识获取方式所取代。神秘的\u0026quot;磁带\u0026quot;会像程序加载到计算机中一样将知识加载到人的大脑中。\n那种事情在近期不太可能发生。不仅因为建造阅读的替代品会很困难，而且即使存在这样的替代品，它也是不够的。阅读关于x的东西不仅教你关于x的知识，它还教你如何写作。[1]\n这有关系吗？如果我们取代了阅读，还有人需要擅长写作吗？\n这之所以重要是因为写作不仅是一种传达思想的方式，也是一种拥有思想的方式。\n好的作家不只是思考，然后写下他所想的，就像某种转录。好的作家几乎总会在写作过程中发现新事物。而且，据我所知，这种发现没有替代品。与他人谈论你的想法是发展它们的好方法。但即使这样做了，当你坐下来写作时，你仍然会发现新事物。有一种思考只能通过写作来完成。\n当然，有些思考可以不通过写作来完成。如果你不需要太深入地研究一个问题，你可以不通过写作来解决它。如果你在思考两个机械部件应该如何配合，写关于它的可能不会有太大帮助。当一个问题可以被形式化描述时，你有时可以在头脑中解决它。但如果你需要解决一个复杂的、定义不清的问题，写关于它几乎总是有帮助的。这反过来意味着一个不擅长写作的人在解决这类问题时几乎总是处于劣势。\n没有好的写作就不能有好的思考，没有好的阅读就不能有好的写作。我意思是最后那个\u0026quot;好\u0026quot;在两种意义上。你必须擅长阅读，并且阅读好的东西。[2]\n只想要信息的人可能会找到其他获取方式。但想要有思想的人负担不起不阅读的代价。\n注释 [1] 有声书可以给你好的写作例子，但让别人读给你你，不像你自己阅读那样能教你那么多关于写作的知识。\n[2] 我说\u0026quot;擅长阅读\u0026quot;不是指阅读的机械能力。你不必擅长从页面上提取单词，而是擅长从单词中提取意义。\n日语翻译\n中文翻译\n意大利语翻译\n法语翻译\n"
  },{
    "title": "雅虎发生了什么",
    "url": "/paul_graham/essays_zh/yahoo/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n雅虎发生了什么 2010年8月\n1998年雅虎收购了我的创业公司后，我去那里工作时，感觉那里就像世界的中心。它本应是下一个大事件。它本应成为谷歌最终成为的东西。\n出了什么问题？困扰雅虎的问题可以追溯到很久以前，几乎可以追溯到公司成立之初。1998年我到那里时，这些问题已经非常明显了。雅虎有两个谷歌没有的问题：容易赚到的钱，以及对作为技术公司的矛盾态度。\n金钱 我第一次见到杨致远时，我们以为见面的原因不同。他认为我们见面是为了让他收购之前亲自考察我们。我认为我们见面是为了向他展示我们的新技术，Revenue Loop。这是一种对购物搜索结果进行排序的方式。商家竞标销售流量的百分比，但结果不是按出价排序，而是按出价乘以用户平均购买金额来排序。这就像谷歌现在用来对广告进行排序的算法，但这是在1998年春天，谷歌成立之前。\nRevenue Loop是购物搜索的最佳排序方式，从某种意义上说，它是按照雅虎从每个链接中赚取的金额多少来排序的。但它不仅仅是在这个意义上是最优的。根据用户行为对搜索结果进行排名也会使搜索变得更好。用户训练搜索：你可以开始时仅仅基于文本相似性找到匹配，随着用户购买更多东西，搜索结果会变得越来越好。\n杰瑞似乎并不关心。我很困惑。我在向他展示从搜索流量中提取最大价值的技术，而他不关心？我不知道是我解释得不好，还是他只是面无表情。\n直到后来，我在雅虎工作后才意识到答案。这两个猜测都不是。雅虎不关心提取流量全部价值的技术原因是广告商已经在过度支付了。如果雅虎仅仅提取实际价值，他们赚的钱会更少。\n尽管现在很难相信，但当时的大钱来自于横幅广告。广告商愿意为横幅广告支付荒谬的金额。因此，雅虎的销售团队已经发展利用这种收入来源。在一位身材高大、令人敬畏的人物Anil Singh的领导下，雅虎的销售人员会飞往宝洁公司，带回数百万美元的横幅广告展示订单。\n与印刷品相比，价格似乎很便宜，这是广告商在没有任何其他参考的情况下比较的对象。但与它们的实际价值相比，它们很昂贵。因此，这些大而愚蠢的公司是一个危险的收入来源。但还有一个更危险的来源：其他互联网创业公司。\n到1998年，雅虎成为事实上的庞氏骗局的受益者。投资者对互联网感到兴奋。他们兴奋的一个原因是雅虎的收入增长。因此，他们投资新的互联网创业公司。然后，创业公司利用这些钱在雅虎上购买广告以获取流量。这导致雅虎的收入进一步增长，并进一步说服投资者互联网值得投资。当有一天我在我的小隔间里意识到这一点时，我像阿基米德在他的浴缸里一样跳了起来，只是我不是喊\u0026quot;Eureka！\u0026quot;，而是喊\u0026quot;Sell！\u0026quot;（卖！）\n互联网创业公司和宝洁公司都在做品牌广告。他们不关心定向。他们只希望很多人看到他们的广告。因此，流量成为在雅虎获取的东西。什么类型都无所谓。[1]\n不仅仅是雅虎。所有的搜索引擎都在这样做。这就是为什么他们试图让人们开始称他们为\u0026quot;门户\u0026quot;而不是\u0026quot;搜索引擎\u0026quot;。尽管\u0026quot;门户\u0026quot;一词的实际含义，他们指的是用户会在网站本身找到想要的东西的网站，而不是像在搜索引擎那样只是在前往其他目的地的路上经过。\n我记得在1998年底或1999年初告诉大卫·费罗，雅虎应该收购谷歌，因为我和公司里的大多数其他程序员都在使用它而不是雅虎进行搜索。他告诉我，这不值得担心。搜索只占我们流量的6%，而我们每月以10%的速度增长。做得更好不值得。\n我没有说\u0026quot;但搜索流量比其他流量更有价值！\u0026ldquo;我说\u0026quot;哦，好的。\u0026ldquo;因为我也没意识到搜索流量有多值钱。我甚至不确定拉里和谢尔盖当时是否知道。如果他们知道，谷歌大概就不会在企业搜索上投入任何精力了。\n如果情况不同，经营雅虎的人可能已经意识到搜索的重要性。但他们和真相之间有世界上最不透明的障碍：金钱。只要客户为横幅广告开出大额支票，就很难认真对待搜索。谷歌没有这种干扰。\n黑客 但雅虎也有另一个问题，使得难以改变方向。从一开始，他们对作为技术公司的矛盾态度就使他们失去了平衡。\n我在雅虎工作时最奇怪的事情之一是他们坚持称自己为\u0026quot;媒体公司\u0026rdquo;。如果你在他们的办公室里走动，看起来像一家软件公司。小隔间里充满了编写代码的程序员，思考功能列表和发货日期的产品经理，支持人员（是的，实际上有支持人员）告诉用户重新启动浏览器等等，就像一家软件公司。那么他们为什么称自己为媒体公司呢？\n一个原因是他们赚钱的方式：通过出售广告。1995年，很难想象一家技术公司会这样赚钱。技术公司通过向用户出售软件来赚钱。媒体公司出售广告。所以他们一定是一家媒体公司。\n另一个重要因素是对微软的恐惧。如果雅虎的任何人考虑过他们应该是一家技术公司的想法，下一个想法就是微软会粉碎他们。\n对于比我年轻得多的人来说，很难理解1995年微软仍然引起的恐惧。想象一家拥有谷歌现在几倍权力，但更恶劣的公司。害怕他们是完全合理的。雅虎看着他们粉碎了第一家热门互联网公司，网景。担心如果他们试图成为下一个网景，他们会遭受同样的命运是合理的。他们怎么知道网景会最终成为微软的最后一个受害者呢？\n假装成为一家媒体公司以迷惑微软会是一个聪明的举动。但不幸的是，雅虎实际上试图成为一家媒体公司，在某种程度上。例如，雅虎的项目经理被称为\u0026quot;制作人\u0026rdquo;，公司的不同部分被称为\u0026quot;资产\u0026quot;。但雅虎真正需要成为的是一家技术公司，通过试图成为其他东西，他们最终成为了不伦不类的东西。这就是为什么雅虎作为一家公司从来没有一个明确定义的身份。\n试图成为媒体公司的最严重后果是他们没有足够认真地对待编程。微软（当时）、谷歌和Facebook都有以黑客为中心的文化。但雅虎将编程视为一种商品。在雅虎，面向用户的软件由产品经理和设计师控制。程序员的工作只是将产品经理和设计师的工作翻译成代码的最后一步。\n这种做法的一个明显结果是，当雅虎构建东西时，它们通常不是很好。但这不是最糟糕的问题。最糟糕的问题是他们雇佣了糟糕的程序员。\n微软（当时）、谷歌和Facebook都一直痴迷于雇佣最好的程序员。雅虎不是。他们更喜欢好程序员而不是坏程序员，但他们没有那种专注的、几乎令人讨厌的精英主义专注于雇佣最聪明的人。而当你考虑到他们在泡沫时期雇佣程序员时有多少竞争时，他们的程序员质量参差不齐也就不足为奇了。\n在技术领域，一旦你有了糟糕的程序员，你就注定完蛋了。我想不出一家公司陷入技术平庸而恢复的例子。好程序员想与其他好程序员一起工作。因此，一旦你公司的程序员质量开始下降，你就进入了一个无法恢复的死亡螺旋。[2]\n在雅虎，这个死亡螺旋很早就开始了。如果雅虎曾经是谷歌式的人才磁铁，那么到1998年我到那里时就结束了。\n公司感觉过早地老化了。大多数技术公司最终都会被西装革履的人和中级经理接管。在雅虎，感觉他们有意加速了这个过程。他们不想成为一群黑客。他们想成为穿西装的人。媒体公司应该由穿西装的人经营。\n我第一次访问谷歌时，他们大约有500人，和我在雅虎工作时的人数相同。但情况看起来确实不同。它仍然是一个非常以黑客为中心的文化。我记得在自助餐厅和一些程序员讨论操纵搜索结果的问题（现在称为SEO），他们问\u0026quot;我们应该怎么做？\u0026ldquo;雅虎的程序员不会问这个问题。他们的任务不是问为什么；他们的任务是构建产品经理指定的东西。我记得离开谷歌时想\u0026quot;哇，它仍然是一家创业公司。\u0026rdquo;\n从雅虎的第一个致命缺陷中学到的东西不多。希望任何公司都能避免依赖虚假收入来源而受到损害可能太过分了。但创业公司可以从第二个中学到重要的一课。在软件业务中，你不能没有以黑客为中心的文化。\n可能我听到的对拥有以黑客为中心的文化最令人印象深刻的承诺来自马克·扎克伯格，2007年他在创业学校演讲时说。他说，在早期，Facebook甚至为通常不涉及编程的工作雇佣程序员，比如人力资源和营销。\n那么哪些公司需要有以黑客为中心的文化？在这个意义上，哪些公司是\u0026quot;从事软件业务的\u0026quot;？正如雅虎发现的，这个规则涵盖的领域比大多数人意识到的要大。答案是：任何需要有良好软件的公司。\n为什么优秀的程序员想为一家没有以黑客为中心文化的公司工作，只要还有其他公司有这样的文化？我可以想象两个原因：如果他们得到巨额报酬，或者如果领域很有趣，而且其中没有一家公司是以黑客为中心的。否则，你无法吸引好程序员在以西装为中心的文化中工作。没有好的程序员，你不会得到好的软件，无论你在任务上投入多少人，或者你建立多少程序来确保\u0026quot;质量\u0026quot;。\n黑客文化似乎有点不负责任。这就是为什么提议摧毁它的人使用\u0026quot;成人监督\u0026quot;这样的短语。这是他们在雅虎使用的短语。但还有比看似不负责任更糟糕的事情。例如，失败。\n注释 [1] 我在那里时，最接近定向的是当我们创建了pets.yahoo.com，以引发3家宠物用品创业公司之间为顶级赞助商位置的竞价战。\n[2] 理论上，你可以通过购买好程序员而不是雇佣他们来击败死亡螺旋。你可以通过购买他们的创业公司获得永远不会作为员工来为你工作的程序员。但到目前为止，唯一足够聪明这样做的公司是那些足够聪明不需要这样做的公司。\n感谢特雷弗·布莱克威尔、杰西卡·利文斯顿和杰夫·拉尔斯通阅读本文的草稿。\n",
    "description": "",
    "tags": ["雅虎","谷歌","创业公司","商业","技术","黑客文化"],
    "categories": [],
    "content": "→ English Version\n雅虎发生了什么 2010年8月\n1998年雅虎收购了我的创业公司后，我去那里工作时，感觉那里就像世界的中心。它本应是下一个大事件。它本应成为谷歌最终成为的东西。\n出了什么问题？困扰雅虎的问题可以追溯到很久以前，几乎可以追溯到公司成立之初。1998年我到那里时，这些问题已经非常明显了。雅虎有两个谷歌没有的问题：容易赚到的钱，以及对作为技术公司的矛盾态度。\n金钱 我第一次见到杨致远时，我们以为见面的原因不同。他认为我们见面是为了让他收购之前亲自考察我们。我认为我们见面是为了向他展示我们的新技术，Revenue Loop。这是一种对购物搜索结果进行排序的方式。商家竞标销售流量的百分比，但结果不是按出价排序，而是按出价乘以用户平均购买金额来排序。这就像谷歌现在用来对广告进行排序的算法，但这是在1998年春天，谷歌成立之前。\nRevenue Loop是购物搜索的最佳排序方式，从某种意义上说，它是按照雅虎从每个链接中赚取的金额多少来排序的。但它不仅仅是在这个意义上是最优的。根据用户行为对搜索结果进行排名也会使搜索变得更好。用户训练搜索：你可以开始时仅仅基于文本相似性找到匹配，随着用户购买更多东西，搜索结果会变得越来越好。\n杰瑞似乎并不关心。我很困惑。我在向他展示从搜索流量中提取最大价值的技术，而他不关心？我不知道是我解释得不好，还是他只是面无表情。\n直到后来，我在雅虎工作后才意识到答案。这两个猜测都不是。雅虎不关心提取流量全部价值的技术原因是广告商已经在过度支付了。如果雅虎仅仅提取实际价值，他们赚的钱会更少。\n尽管现在很难相信，但当时的大钱来自于横幅广告。广告商愿意为横幅广告支付荒谬的金额。因此，雅虎的销售团队已经发展利用这种收入来源。在一位身材高大、令人敬畏的人物Anil Singh的领导下，雅虎的销售人员会飞往宝洁公司，带回数百万美元的横幅广告展示订单。\n与印刷品相比，价格似乎很便宜，这是广告商在没有任何其他参考的情况下比较的对象。但与它们的实际价值相比，它们很昂贵。因此，这些大而愚蠢的公司是一个危险的收入来源。但还有一个更危险的来源：其他互联网创业公司。\n到1998年，雅虎成为事实上的庞氏骗局的受益者。投资者对互联网感到兴奋。他们兴奋的一个原因是雅虎的收入增长。因此，他们投资新的互联网创业公司。然后，创业公司利用这些钱在雅虎上购买广告以获取流量。这导致雅虎的收入进一步增长，并进一步说服投资者互联网值得投资。当有一天我在我的小隔间里意识到这一点时，我像阿基米德在他的浴缸里一样跳了起来，只是我不是喊\u0026quot;Eureka！\u0026quot;，而是喊\u0026quot;Sell！\u0026quot;（卖！）\n互联网创业公司和宝洁公司都在做品牌广告。他们不关心定向。他们只希望很多人看到他们的广告。因此，流量成为在雅虎获取的东西。什么类型都无所谓。[1]\n不仅仅是雅虎。所有的搜索引擎都在这样做。这就是为什么他们试图让人们开始称他们为\u0026quot;门户\u0026quot;而不是\u0026quot;搜索引擎\u0026quot;。尽管\u0026quot;门户\u0026quot;一词的实际含义，他们指的是用户会在网站本身找到想要的东西的网站，而不是像在搜索引擎那样只是在前往其他目的地的路上经过。\n我记得在1998年底或1999年初告诉大卫·费罗，雅虎应该收购谷歌，因为我和公司里的大多数其他程序员都在使用它而不是雅虎进行搜索。他告诉我，这不值得担心。搜索只占我们流量的6%，而我们每月以10%的速度增长。做得更好不值得。\n我没有说\u0026quot;但搜索流量比其他流量更有价值！\u0026ldquo;我说\u0026quot;哦，好的。\u0026ldquo;因为我也没意识到搜索流量有多值钱。我甚至不确定拉里和谢尔盖当时是否知道。如果他们知道，谷歌大概就不会在企业搜索上投入任何精力了。\n如果情况不同，经营雅虎的人可能已经意识到搜索的重要性。但他们和真相之间有世界上最不透明的障碍：金钱。只要客户为横幅广告开出大额支票，就很难认真对待搜索。谷歌没有这种干扰。\n黑客 但雅虎也有另一个问题，使得难以改变方向。从一开始，他们对作为技术公司的矛盾态度就使他们失去了平衡。\n我在雅虎工作时最奇怪的事情之一是他们坚持称自己为\u0026quot;媒体公司\u0026rdquo;。如果你在他们的办公室里走动，看起来像一家软件公司。小隔间里充满了编写代码的程序员，思考功能列表和发货日期的产品经理，支持人员（是的，实际上有支持人员）告诉用户重新启动浏览器等等，就像一家软件公司。那么他们为什么称自己为媒体公司呢？\n一个原因是他们赚钱的方式：通过出售广告。1995年，很难想象一家技术公司会这样赚钱。技术公司通过向用户出售软件来赚钱。媒体公司出售广告。所以他们一定是一家媒体公司。\n另一个重要因素是对微软的恐惧。如果雅虎的任何人考虑过他们应该是一家技术公司的想法，下 …"
  },{
    "title": "需要忘掉的一课",
    "url": "/paul_graham/essays_zh/lesson/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n需要忘掉的一课 2019年12月\n你在学校学到的最有害的东西，不是你在任何特定课程中学到的东西。而是学会如何获得好成绩。\n当我在大学时，一个特别认真的哲学研究生曾经告诉我，他从不关心在一门课中得到什么成绩，只关心从中学到了什么。这句话一直留在我脑海里，因为这是我唯一一次听到有人这么说。\n对我来说，就像大多数学生一样，对我所学东西的测量完全支配了我在大学的实际学习。我相当认真；我对上过的大多数课程都真正感兴趣，而且我很努力学习。然而，我学习最努力的时候是为考试而学习的时候。\n理论上，考试就像它们的名字所暗示的那样：对你课堂所学内容的测试。理论上，你不需要为一门课的考试做任何准备，就像你不需要为验血做准备一样。理论上，你通过上课、参加讲座、做阅读和/或作业来学习，之后的考试只是测量你学得有多好。\n实际上，正如阅读这篇文章的几乎每个人都会知道的，情况是如此不同，以至于听到这个关于课程和考试应该如何工作的解释就像听到一个意思已经完全改变的词的词源。实际上，\u0026ldquo;为考试而学习\u0026quot;这个短语几乎是多余的，因为那时才是真正学习的时候。勤奋和懒散的学生之间的区别在于前者努力学习考试，而后者不这样做。没有人在学期开始两周后就熬夜学习。\n尽管我是一个勤奋的学生，但我在学校做的几乎所有工作都是为了在某些事情上获得好成绩。\n对许多人来说，前一句话中有\u0026quot;尽管\u0026quot;这个词似乎很奇怪。我不是在陈述一个同义反复吗？勤奋学生不就是全优学生吗？这就是学习和成绩的混淆在多大程度上渗透了我们的文化。\n如果学习和成绩混为一谈，有那么糟糕吗？是的，很糟糕。直到大学毕业几十年后，当我运行Y Combinator时，我才意识到它有多糟糕。\n当我是学生时，我当然知道为考试学习和实际学习远非一回事。至少，你在考试前一天晚上塞进脑子的知识不会保留。但问题比这更糟。真正的问题是大多数考试远没有达到它们应该测量的东西。\n如果考试真的是学习的测试，情况就不会那么糟糕。获得好成绩和学习会趋于一致，只是晚了一点。问题是给学生的大多数考试都非常容易被\u0026quot;黑客攻击\u0026rdquo;。大多数获得好成绩的人都知道这一点，而且知道得太清楚，以至于他们甚至不再质疑这一点。当你意识到如果不这样做听起来多么天真时，你就会明白。\n假设你正在上一门中世纪历史的课程，期末考试即将来临。期末考试应该是对你中世纪历史知识的测试，对吧？所以如果现在和考试之间有几天时间，如果你想考试考得好，最好的利用时间方式肯定是阅读你能找到的关于中世纪历史的最好的书。然后你就会对此了解很多，并且在考试中表现很好。\n不，不，不，经验丰富的学生对自己说。如果你只是阅读关于中世纪历史的好书，你学到的大部分东西都不会出现在考试中。你想读的不是好书，而是这门课的讲义和指定阅读。而且即使大部分内容你也可以忽略，因为你只需要担心可能作为考试问题出现的那种东西。你在寻找明确定义的信息块。如果指定的阅读材料中有关于某个微妙点的有趣题外话，你可以安全地忽略它，因为那不是可能成为考试问题的那种东西。但如果教授告诉你1378年分裂有三个根本原因，或者黑死病有三个主要后果，你最好知道它们。而且它们是否确实是原因或后果并不重要。就这门课而言，它们就是。\n在大学里，通常有旧考试的副本流传，这些进一步缩小了你必须学习的范围。除了了解这位教授问什么类型的问题外，你通常还会得到实际的考试题目。许多教授会重复使用它们。教一门课10年后，很难不这样做，至少是不经意地。\n在某些课程中，你的教授会有某种政治观点要表达，如果是这样，你也必须表达。这种需求因课程而异。在数学或硬科学或工程学课程中，很少需要这样做，但在光谱的另一端，有些课程不这样做你就无法获得好成绩。\n在一门关于x的课程中获得好成绩与大量学习x是如此不同，以至于你必须选择其中一个，如果学生选择成绩，你不能责怪他们。每个人都用成绩来评判他们——研究生院、雇主、奖学金，甚至他们自己的父母。\n我喜欢学习，我真的很享受我在大学里写的一些论文和程序。但是，我是否曾经在某个班级交了论文后，坐下来为好玩而再写一篇？当然没有。我还有其他课程要交。如果必须在学习和成绩之间做出选择，我选择了成绩。我来上大学不是为了做得不好。\n任何关心获得好成绩的人都必须玩这个游戏，否则他们会被那些这样做的人超越。在精英大学，这意味着几乎每个人，因为不关心获得好成绩的人可能一开始就不会在那里。结果是学生们竞争最大化学习和获得好成绩之间的差距。\n为什么考试这么糟糕？更准确地说，为什么它们如此容易被\u0026quot;黑客攻击\u0026quot;？任何有经验的程序员都能回答这个问题。一个作者没有注意防止被黑客攻击的软件有多容易被黑客攻击？通常它就像漏勺一样多孔。\n对于任何由权威机构强加的测试，可被黑客攻击是默认设置。给你的考试如此一致地糟糕——如此一致地远离测量它们应该测量的东西——仅仅是因为创建它们的人没有做太多努力来防止它们被黑客攻击。\n但如果老师的考试可以被黑客攻击，你不能责怪他们。他们的工作是教学，而不是创建无法被黑客攻击的考试。真正的问题是成绩，或者更准确地说，是成绩被过度使用了。如果成绩只是老师告诉学生他们做对了什么做错了什么的一种方式，就像教练给运动员提建议一样，学生就不会被诱惑去黑客攻击考试。但不幸的是，过了某个年龄后，成绩不仅仅是建议。过了某个年龄，每当你在被教导时，你通常也在被评判。\n我用大学考试作为例子，但那些实际上是最不容易被黑客攻击的。大多数学生一生中参加的所有考试都至少同样糟糕，其中最引人注目的是让他们进入大学的考试。如果进入大学仅仅是让招生官像科学家测量物体质量一样测量你思维质量的问题，我们可以告诉青少年\u0026quot;多学习\u0026quot;然后就这样。你可以从这听起来有多不像高中来判断大学招生作为考试有多糟糕。实际上，雄心勃勃的孩子在高中必须做的那些怪异具体的事情与大学招生可被黑客攻击的程度成正比。你不关心的那些主要是记忆的课程，你必须参加的随机的\u0026quot;课外活动\u0026quot;以展示你\u0026quot;全面发展\u0026quot;，像国际象棋一样人为的标准化考试，你必须写的\u0026quot;论文\u0026quot;大概是想要达到某个非常特定的目标，但你没有被告诉是什么。\n除了对孩子做的坏事外，这个考试在非常容易被黑客攻击的意义上也很糟糕。如此容易被黑客攻击，以至于整个产业都成长起来去黑客攻击它。这就是考试准备公司和招生顾问的明确目的，但这也是私立学校功能的重要部分。\n为什么这个特定的考试如此容易被黑客攻击？我想是因为它在测量什么。尽管流行的说法是进入好大学的方法是真正聪明，但精英大学的招生官既不是，也不声称只是在寻找那个。他们在寻找什么？他们在寻找不仅仅是聪明，而是在某种更一般意义上令人钦佩的人。这种更一般的令人钦佩的品质是如何测量的？招生官感觉它。换句话说，他们接受他们喜欢的人。\n所以大学招生测试的是你是否适合某些群体的品味。嗯，当然这样的考试会很容易被黑客攻击。而且因为它既非常容易被黑客攻击，又有（被认为的）很大利害关系，所以它被黑客攻击的程度无与伦比。这就是为什么它在如此长的时间里如此扭曲你的生活。\n难怪高中生经常感到疏离。他们生活的形状完全是人为的。\n但浪费你的时间不是教育系统对你做的最糟糕的事情。最糟糕的事情是它训练你获胜的方式是通过黑客攻击糟糕的测试。这是一个更微妙的问题，直到我看到它发生在其他人身上时我才认识到。\n当我在Y Combinator开始建议创业创始人时，特别是年轻的创始人，我对他们总是似乎把事情弄得过于复杂的方式感到困惑。他们会问，你如何筹集资金？让风险投资家想投资你的技巧是什么？我会解释，让VC想投资你的最好方法是实际上成为一个好的投资。即使你能欺骗VC投资一个糟糕的创业公司，你也在欺骗自己。你在投资时间到同一个你要求他们投资钱的公司。如果这不是一个好投资，你为什么还要这样做？\n哦，他们会说，然后停顿一下消化这个启示后，他们会问：什么使创业公司成为一个好的投资？\n所以我会解释，使创业公司有前途的，不仅仅是在投资者眼中，而且实际上，是增长。理想情况下是收入，但如果不行，就是使用量。他们需要做的是获得大量用户。\n一个人如何获得大量用户？他们对此有各种想法。他们需要做一个能给他们带来\u0026quot;曝光\u0026quot;的大型发布。他们需要有影响力的人谈论他们。他们甚至知道他们需要在星期二发布，因为那时能得到最多的关注。\n不，我会解释，那不是获得大量用户的方法。你获得大量用户的方法是让产品真正优秀。然后人们不仅会使用它，还会向他们的朋友推荐，所以一旦你开始，你的增长将是指数级的。\n在这一点上，我已经告诉了创始人一些你认为会完全显而易见的事情：他们应该通过做出好的产品来做出好的公司。然而，他们的反应就像许多物理学家第一次听到相对论时的反应一样：对其明显天才感到惊讶，同时怀疑如此奇怪的东西不可能正确。好的，他们会尽职地说。你能把我们介绍给某某有影响力的人吗？记住，我们想在星期二发布。\n有时创始人需要几年时间才能掌握这些简单的教训。不是因为他们懒惰或愚蠢。他们似乎对眼前的事情视而不见。\n为什么，我问自己，他们总是把事情弄得如此复杂？然后有一天我意识到这不是一个修辞问题。\n为什么创始人在答案就在眼前的情况下却用错误的方式把自己搞得一团糟？因为那是他们被训练去做的事情。他们的教育教会他们获胜的方式是黑客攻击测试。甚至没有人告诉他们他们正在被训练这样做。年轻的，最近的毕业生，从未面对过非人为的测试。他们认为世界就是这样工作的：当你面对任何类型的挑战时，你要做的第一件事就是弄清楚黑客攻击测试的技巧是什么。这就是为什么对话总是从如何筹集资金开始，因为那读起来像是测试。它出现在YC的结尾。它有数字 attached，更高的数字似乎更好。它一定是测试。\n世界上肯定有大的部分，获胜的方式是通过黑客攻击测试。这种现象不限于学校。有些人，要么由于意识形态，要么由于无知，声称这对创业公司也是如此。但事实并非如此。事实上，关于创业公司最引人注目的事情之一是你通过简单地做好工作而获胜的程度。就像任何事情一样，有边缘情况，但总的来说，你通过获得用户而获胜，而用户关心的是产品是否做他们想要的事情。\n为什么我花了这么长时间才理解为什么创始人把创业公司搞得过于复杂？因为我没有明确地意识到学校训练我们通过黑客攻击糟糕的测试而获胜。不仅仅是他们，还有我！我也被训练去黑客攻击糟糕的测试，直到几十年后我才意识到。\n我活得好像意识到了这一点，但不知道为什么。例如，我避免为大公司工作。但如果你问为什么，我会说是因为它们虚假，或官僚。或者就是讨厌。我从未理解我对大公司的厌恶有多少是由于这样一个事实：你通过黑客攻击糟糕的测试而获胜。\n同样，测试无法被黑客攻击是吸引我进入创业公司的很大一部分原因。但同样，我没有明确地意识到这一点。\n我实际上通过逐次逼近实现了可能有闭式解决方案的东西。我逐渐消除了我在黑客攻击糟糕测试方面的训练，而不知道我正在这样做。刚出校门的人能仅仅通过知道恶魔的名字并说消失就驱逐这个恶魔吗？这似乎值得尝试。\n仅仅明确地谈论这种现象就可能使事情变得更好，因为它的大部分力量来自于我们想当然地认为它。在你注意到它之后，它似乎是房间里的大象，但这是一只伪装得相当好的大象。这种现象是如此古老，如此普遍。它只是疏忽的结果。没有人打算事情变成这样。这只是当你将学习与成绩、竞争和对不可被黑客攻击的天真假设结合在一起时发生的事情。\n意识到让我困惑最多的两件事——高中的虚假性，以及让创始人看到显而易见的事情的困难——都有相同的原因，这是令人震惊的。这么大的板块这么晚才到位是很少见的。\n通常当这种情况发生时，它在很多不同的领域都有含义，这个情况似乎也不例外。例如，它表明教育可以做得更好，以及你如何修复它。但它也似乎为所有大公司似乎都有的问题提供了一个潜在答案：我们如何才能更像创业公司？我现在不打算追究所有含义。我在这里想要关注的是它对个人的意义。\n首先，这意味着大多数雄心勃勃的大学毕业生有一些他们可能想要忘掉的东西。但它也改变了你看待世界的方式。除了看着人们做的所有不同类型的工作并将它们模糊地或多或少吸引人地思考外，你现在可以问一个非常具体的问题，这将以一种有趣的方式对它们进行排序：在这种工作中，你在多大程度上通过黑客攻击糟糕的测试而获胜？\n如果有一种方法能快速识别糟糕的测试会有所帮助。这里有模式吗？事实证明有。\n测试可以分为两种：由权威机构强加的测试，和不是的测试。不是由权威机构强加的测试本质上无法被黑客攻击，在没有人声称它们测试的不仅仅是它们实际测试的东西的意义上。例如，足球比赛只是测试谁获胜，而不是哪个球队更好。你可以从评论员事后有时说更好的球队获胜这一事实看出这一点。而由权威机构强加的测试通常是其他东西的代理。课程中的测试应该测量的不仅仅是你在这特定考试中做得如何，而是你在课程中学到了多少。虽然不是由权威机构强加的测试本质上无法被黑客攻击，但由权威机构强加的测试必须被设计得无法被黑客攻击。通常它们不是。所以作为第一近似，糟糕的测试大致相当于由权威机构强加的测试。\n你可能实际上喜欢通过黑客攻击糟糕的测试而获胜。想必有些人确实如此。但我打赌大多数发现自己做这种工作的人并不喜欢它。他们只是想当然地认为世界就是这样工作的，除非你想退出并成为某种嬉皮工匠。\n我怀疑许多人隐含地假设在一个有糟糕测试的领域工作是赚大钱的代价。但是，我可以告诉你，这是错误的。过去是真的。在二十世纪中期，当经济由寡头垄断组成时，通往顶层的唯一方式是玩他们的游戏。但现在不是真的。现在有通过做好工作而致富的方法，这也是人们对致富比过去兴奋得多的部分原因。当我还是个孩子时，你要么成为工程师制造很酷的东西，要么通过成为\u0026quot;高管\u0026quot;而赚大钱。现在你可以通过制造很酷的东西而赚大钱。\n随着工作与权威之间联系的侵蚀，黑客攻击糟糕的测试变得越来越不重要。这种联系的侵蚀是现在发生的最重要趋势之一，我们在人们做的几乎所有类型的工作中都看到它的影响。创业公司是最明显的例子之一，但我们在写作中看到几乎相同的事情。作家不再需要通过出版商和编辑来接触读者；现在他们可以直接去。\n我越思考这个问题，就越乐观。这似乎是我们没有意识到某件事在多大程度上阻碍了我们，直到它被消除的情况之一。我可以预见整个虚假的建筑 crumbling。想象一下，当越来越多的人开始问自己是否想通过黑客攻击糟糕的测试而获胜，并决定他们不想这样做时会发生什么。那些通过黑客攻击糟糕的测试而获胜的工作类型将会缺乏人才，而那些通过做好工作而获胜的工作类型将会看到最有雄心的人的涌入。随着黑客攻击糟糕的测试的重要性缩小，教育将进化到停止训练我们这样做。想象一下，如果这种情况发生，世界会是什么样子。\n这不仅是一个个人需要忘掉的教训，也是社会需要忘掉的教训，当我们这样做时，我们会对释放出来的能量感到惊讶。\n注释 [1] 如果仅使用测试来测量学习听起来像是不可能的乌托邦，那已经是Lambda School的工作方式了。Lambda School没有成绩。你要么毕业，要么不毕业。测试的唯一目的是在课程的每个阶段决定你是否可以继续到下一个阶段。所以实际上整个学校都是通过/不通过。\n[2] 如果期末考试由与教授的长时间对话组成，你可以通过阅读关于中世纪历史的好书来准备它。学校中考试的可被黑客攻击性很大程度上是由于同一个测试必须给大量学生参加这一事实。\n[3] 学习是获得好成绩的天真算法。\n[4] 黑客攻击有多种含义。有一种狭义的含义，意思是破坏某些东西。这就是一个人黑客攻击糟糕测试的意义。但还有另一种更一般的含义，意思是找到一个令人惊讶的问题解决方案，通常是通过以不同方式思考它。这种意义上的黑客攻击是一件美妙的事情。事实上，人们在糟糕测试上使用的一些黑客攻击技巧令人印象深刻地巧妙；问题不在于黑客攻击，而在于因为测试可被黑客攻击，它们不测试它们应该测试的东西。\n",
    "description": "",
    "tags": ["教育","学习","成绩","学校","教学","学生","测试","创业","哲学"],
    "categories": [],
    "content": "→ English Version\n需要忘掉的一课 2019年12月\n你在学校学到的最有害的东西，不是你在任何特定课程中学到的东西。而是学会如何获得好成绩。\n当我在大学时，一个特别认真的哲学研究生曾经告诉我，他从不关心在一门课中得到什么成绩，只关心从中学到了什么。这句话一直留在我脑海里，因为这是我唯一一次听到有人这么说。\n对我来说，就像大多数学生一样，对我所学东西的测量完全支配了我在大学的实际学习。我相当认真；我对上过的大多数课程都真正感兴趣，而且我很努力学习。然而，我学习最努力的时候是为考试而学习的时候。\n理论上，考试就像它们的名字所暗示的那样：对你课堂所学内容的测试。理论上，你不需要为一门课的考试做任何准备，就像你不需要为验血做准备一样。理论上，你通过上课、参加讲座、做阅读和/或作业来学习，之后的考试只是测量你学得有多好。\n实际上，正如阅读这篇文章的几乎每个人都会知道的，情况是如此不同，以至于听到这个关于课程和考试应该如何工作的解释就像听到一个意思已经完全改变的词的词源。实际上，\u0026ldquo;为考试而学习\u0026quot;这个短语几乎是多余的，因为那时才是真正学习的时候。勤奋和懒散的学生之间的区别在于前者努力学习考试，而后者不这样做。没有人在学期开始两周后就熬夜学习。\n尽管我是一个勤奋的学生，但我在学校做的几乎所有工作都是为了在某些事情上获得好成绩。\n对许多人来说，前一句话中有\u0026quot;尽管\u0026quot;这个词似乎很奇怪。我不是在陈述一个同义反复吗？勤奋学生不就是全优学生吗？这就是学习和成绩的混淆在多大程度上渗透了我们的文化。\n如果学习和成绩混为一谈，有那么糟糕吗？是的，很糟糕。直到大学毕业几十年后，当我运行Y Combinator时，我才意识到它有多糟糕。\n当我是学生时，我当然知道为考试学习和实际学习远非一回事。至少，你在考试前一天晚上塞进脑子的知识不会保留。但问题比这更糟。真正的问题是大多数考试远没有达到它们应该测量的东西。\n如果考试真的是学习的测试，情况就不会那么糟糕。获得好成绩和学习会趋于一致，只是晚了一点。问题是给学生的大多数考试都非常容易被\u0026quot;黑客攻击\u0026rdquo;。大多数获得好成绩的人都知道这一点，而且知道得太清楚，以至于他们甚至不再质疑这一点。当你意识到如果不这样做听起来多么天真时，你就会明白。\n假设你正在上一门中世纪历史的课程，期末考试即将来临。期末考试应该是对你中世纪历史知识的测试，对吧？所以如果现在和考试之间有几天时间，如果你想考试考得好，最好的利用时间方式肯定是阅读你能找到的关于中世纪历史的最好的书。然后你就会对此了解很多，并且在考试中表现很好。\n不，不，不，经验丰富的学生对自己说。如果你只是阅读关于中世纪历史的好书，你学到的大部分东西都不会出现在考试中。你想读的不是好书，而是这门课的讲义和指定阅读。而且即使大部分内容你也可以忽略，因为你只需要担心可能作为考试问题出现的那种东西。你在寻找明确定义的信息块。如果指定的阅读材料中有关于某个微妙点的有趣题外话，你可以安全地忽略它，因为那不是可能成为考试问题的那种东西。但如果教授告诉你1378年分裂有三个根本原因，或者黑死病有三个主要后果，你最好知道它们。而且它们是否确实是原因或后果并不重要。就这门课而言，它们就是。\n在大学里，通常有旧考试的副本流传，这些进一步缩小了你必须学习的范围。除了了解这位教授问什么类型的问题外，你通常还会得到实际的考试题目。许多教授会重复使用它们。教一门课10年后，很难不这样做，至少是不经意地。\n在某些课程中，你的教授会有某种政治观点要表达，如果是这样，你也必须表达。这种需求因课程而异。在数学或硬科学或工程学课程中，很少需要这样做，但在光谱的另一端，有些课程不这样做你就无法获得好成绩。\n在一门关于x的课程中获得好成绩与大量学习x是如此不同，以至于你必须选择其中一个，如果学生选择成绩，你不能责怪他们。每个人都用成绩来评判他们——研究生院、雇主、奖学金，甚至他们自己的父母。\n我喜欢学习，我真的很享受我在大学里写的一些论文和程序。但是，我是否曾经在某个班级交了论文后，坐下来为好玩而再写一篇？当然没有。我还有其他课程要交。如果必须在学习和成绩之间做出选择，我选择了成绩。我来上大学不是为了做得不好。\n任何关心获得好成绩的人都必须玩这个游戏，否则他们会被那些这样做的人超越。在精英大学，这意味着几乎每个人，因为不关心获得好成绩的人可能一开始就不会在那里。结果是学生们竞争最大化学习和获得好成绩之间的差距。\n为什么考试这么糟糕？更准确地说，为什么它们如此容易被\u0026quot;黑客攻击\u0026quot;？任何有经验的程序员都能回答这个问题。一个作者没有注意防止被黑客攻击的软件有多容易被黑客攻击？通常它就像漏勺一样多孔。\n对于任何由权威机构强加的测试，可被黑客攻 …"
  },{
    "title": "风险投资会成为经济衰退的牺牲品吗？",
    "url": "/paul_graham/essays_zh/divergence/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n风险投资会成为经济衰退的牺牲品吗？ 2008年12月\n（我最初是应一家制作创业报告的公司的要求写的这篇文章。不幸的是，他们在阅读后认为它太有争议性而决定不包含在内。）\n在当前的经济衰退期间，风险投资资金可能会像通常在困难时期一样有所减少。但这次的结果可能会有所不同。这次新创公司的数量可能不会减少。这对风险投资来说可能是危险的。\n当互联网泡沫后风险投资资金枯竭时，新创公司也消失了。2003年成立的新创公司并不多。但新创公司不再像10年前那样依赖风险投资。现在风险投资和新创公司有可能出现分歧。如果他们这样做了，一旦经济好转，他们可能不会重新融合。\n新创公司不再那么依赖风险投资的原因，是创业行业现在人人都知道的：创办新创公司的成本变得低得多。主要有四个原因：摩尔定律使硬件变得便宜；开源使软件免费；网络使营销和分销免费；更强大的编程语言意味着开发团队可以更小。这些变化将创办新创公司的成本推到了噪音水平。在许多新创公司中——可能是Y Combinator资助的大多数新创公司——最大的支出只是创始人的生活费用。我们有过月收入3000美元就能盈利的新创公司。\n3000美元作为收入来说是微不足道的。为什么会有人在意一个月收入3000美元的新创公司？因为，虽然作为收入微不足道，但这笔钱可以完全改变新创公司的融资状况。\n经营新创公司的人总是在心里计算他们有多少\u0026quot;跑道\u0026quot;——银行里的钱用完之前他们还有多长时间，他们要么必须盈利，要么筹集更多资金，要么倒闭。一旦你跨过盈利的门槛，无论多低，你的跑道就变得无限了。这是一种质的变化，就像企业号加速到曲速时星星变成线条并消失一样。一旦你盈利，你就不需要投资者的钱。而且因为互联网新创公司的运营成本变得如此之低，盈利的门槛可能非常低。这意味着许多互联网新创公司不再需要风险投资规模的资金。对许多新创公司来说，风险投资在风险投资的术语中已经从必备品变成了锦上添花。\n这种变化是在没有人注意的情况下发生的，其影响在很大程度上被掩盖了。正是在互联网泡沫后的低谷期间，创办新创公司变得非常便宜，但很少有人意识到这一点，因为新创公司已经过时了。当新创公司在2005年左右重新流行时，投资者又开始写支票了。虽然创始人可能不再像过去那样需要风险投资的钱，但如果提供，他们愿意接受——部分原因是新创公司接受风险投资资金的传统，部分原因是新创公司，像狗一样，有机会时倾向于进食。只要风险投资家在写支票，创始人就从未被迫探索他们对风险投资的需求有多小的极限。有少数新创公司因为其特殊环境而意外达到这些极限——最著名的是37signals，他们达到极限是因为他们从另一个方向进入新创公司领域：他们从咨询公司开始，所以他们在有产品之前就有收入。\n风险投资家和创始人就像曾经用螺栓连接在一起的两个组件。大约在2000年，螺栓被移除了。因为到目前为止，这些组件一直受到相同力的作用，它们似乎仍然连接在一起，但实际上一个只是放在另一个上面。剧烈的冲击会使它们飞散。而当前的经济衰退可能是那种冲击。\n由于Y Combinator在谱系极端端的位置，我们会是第一个看到创始人和投资者分离迹象的，而我们确实看到了。例如，虽然股市崩盘似乎确实使投资者更加谨慎，但它似乎并没有对想要创办新创公司的人数产生任何影响。我们每6个月接受一次资金申请。当前资金周期的申请在10月17日截止，那是在市场暴跌之后，即使如此，我们收到的申请数量创纪录，比一年前的同一周期增长了40%。\n如果经济继续恶化，一年后情况可能会有所不同，但到目前为止，潜在创始人的兴趣丝毫没有减弱。这与2001年的情况不同。那时潜在创始人中有一种普遍的感觉，认为新创公司时代已经结束，应该去读研究生。这次没有发生这种情况，部分原因是即使在糟糕的经济中，建立一个月收入3000美元的东西也不是那么难。如果投资者停止写支票，谁会在乎呢？\n在我们资助的现有新创公司的态度中，我们也看到了创始人和投资者之间分歧的迹象。我最近和一家公司交谈，他们在最后一刻因为投资者认为占上风时破坏交易的琐事而导致一轮融资失败——关于创始人是否正确提交了83(b)表格的不确定性，如果你能相信的话。然而，这家新创公司显然会成功：他们的流量和收入图表看起来就像一架起飞的喷气式飞机。所以我问他们是否希望我介绍他们给更多投资者。令我惊讶的是，他们说不用——他们刚刚花了四个月时间与投资者打交道，现在他们不必这样，实际上快乐得多。他们有一个朋友想用投资者的钱雇用，现在他们不得不推迟。但除此之外，他们觉得银行里有足够的资金可以支撑到盈利。为了确保，他们正在搬到一个更便宜的公寓。在这样的经济中，我敢打赌他们得到了不错的交易。\n我从最近交谈过的几位YC创始人那里检测到了这种\u0026quot;投资者不值得麻烦\u0026quot;的氛围。最近（夏季）周期的至少一家新创公司可能甚至不会筹集天使资金，更不用说风险投资。Ticketstumbler凭借Y Combinator的15,000美元投资实现了盈利，他们希望不需要更多。这甚至让我们都感到惊讶。虽然YC基于创办新创公司成本低的理念，但我们从未预料到创始人会仅凭YC资金就能成功发展新创公司。\n如果创始人认为风险投资不值得麻烦，这对风险投资家来说可能是坏事。当经济在几年后反弹，他们准备好再次写支票时，他们可能会发现创始人已经转向其他方向了。\n有一个创始人社区，就像有一个风险投资社区一样。他们都相互认识，技术在他们之间迅速传播。如果一个尝试新的编程语言或新的托管提供商并获得良好结果，6个月后一半的人都在使用它。融资也是如此。现在的创始人一代想从风险投资家那里筹集资金，特别是红杉资本，因为拉里和谢尔盖从风险投资家那里拿钱，特别是红杉资本。想象一下，如果下一个热门公司完全不接受风险投资，这会对风险投资业务造成什么影响。\n风险投资家认为他们在玩零和游戏。事实上，甚至不是那样。如果你把一笔交易输给了Benchmark，你就输了那笔交易，但风险投资作为一个行业仍然赢。如果你把一笔交易输给了None，所有风险投资家都输了。\n这次经济衰退可能与互联网泡沫后的那次不同。这次创始人可能会继续创办新创公司。如果他们这样做了，风险投资家将不得不继续写支票，否则他们可能变得无关紧要。\n感谢Sam Altman、Trevor Blackwell、David Hornik、Jessica Livingston、Robert Morris和Fred Wilson阅读本文草稿。\n相关链接：\n俄语翻译 ",
    "description": "",
    "tags": ["创业","vc","风险投资","融资","企业家精神","经济学","衰退","y combinator"],
    "categories": [],
    "content": "→ English Version\n风险投资会成为经济衰退的牺牲品吗？ 2008年12月\n（我最初是应一家制作创业报告的公司的要求写的这篇文章。不幸的是，他们在阅读后认为它太有争议性而决定不包含在内。）\n在当前的经济衰退期间，风险投资资金可能会像通常在困难时期一样有所减少。但这次的结果可能会有所不同。这次新创公司的数量可能不会减少。这对风险投资来说可能是危险的。\n当互联网泡沫后风险投资资金枯竭时，新创公司也消失了。2003年成立的新创公司并不多。但新创公司不再像10年前那样依赖风险投资。现在风险投资和新创公司有可能出现分歧。如果他们这样做了，一旦经济好转，他们可能不会重新融合。\n新创公司不再那么依赖风险投资的原因，是创业行业现在人人都知道的：创办新创公司的成本变得低得多。主要有四个原因：摩尔定律使硬件变得便宜；开源使软件免费；网络使营销和分销免费；更强大的编程语言意味着开发团队可以更小。这些变化将创办新创公司的成本推到了噪音水平。在许多新创公司中——可能是Y Combinator资助的大多数新创公司——最大的支出只是创始人的生活费用。我们有过月收入3000美元就能盈利的新创公司。\n3000美元作为收入来说是微不足道的。为什么会有人在意一个月收入3000美元的新创公司？因为，虽然作为收入微不足道，但这笔钱可以完全改变新创公司的融资状况。\n经营新创公司的人总是在心里计算他们有多少\u0026quot;跑道\u0026quot;——银行里的钱用完之前他们还有多长时间，他们要么必须盈利，要么筹集更多资金，要么倒闭。一旦你跨过盈利的门槛，无论多低，你的跑道就变得无限了。这是一种质的变化，就像企业号加速到曲速时星星变成线条并消失一样。一旦你盈利，你就不需要投资者的钱。而且因为互联网新创公司的运营成本变得如此之低，盈利的门槛可能非常低。这意味着许多互联网新创公司不再需要风险投资规模的资金。对许多新创公司来说，风险投资在风险投资的术语中已经从必备品变成了锦上添花。\n这种变化是在没有人注意的情况下发生的，其影响在很大程度上被掩盖了。正是在互联网泡沫后的低谷期间，创办新创公司变得非常便宜，但很少有人意识到这一点，因为新创公司已经过时了。当新创公司在2005年左右重新流行时，投资者又开始写支票了。虽然创始人可能不再像过去那样需要风险投资的钱，但如果提供，他们愿意接受——部分原因是新创公司接受风险投资资金的传统，部分原因是新创公司，像狗一样，有机会时倾向于进食。只要风险投资家在写支票，创始人就从未被迫探索他们对风险投资的需求有多小的极限。有少数新创公司因为其特殊环境而意外达到这些极限——最著名的是37signals，他们达到极限是因为他们从另一个方向进入新创公司领域：他们从咨询公司开始，所以他们在有产品之前就有收入。\n风险投资家和创始人就像曾经用螺栓连接在一起的两个组件。大约在2000年，螺栓被移除了。因为到目前为止，这些组件一直受到相同力的作用，它们似乎仍然连接在一起，但实际上一个只是放在另一个上面。剧烈的冲击会使它们飞散。而当前的经济衰退可能是那种冲击。\n由于Y Combinator在谱系极端端的位置，我们会是第一个看到创始人和投资者分离迹象的，而我们确实看到了。例如，虽然股市崩盘似乎确实使投资者更加谨慎，但它似乎并没有对想要创办新创公司的人数产生任何影响。我们每6个月接受一次资金申请。当前资金周期的申请在10月17日截止，那是在市场暴跌之后，即使如此，我们收到的申请数量创纪录，比一年前的同一周期增长了40%。\n如果经济继续恶化，一年后情况可能会有所不同，但到目前为止，潜在创始人的兴趣丝毫没有减弱。这与2001年的情况不同。那时潜在创始人中有一种普遍的感觉，认为新创公司时代已经结束，应该去读研究生。这次没有发生这种情况，部分原因是即使在糟糕的经济中，建立一个月收入3000美元的东西也不是那么难。如果投资者停止写支票，谁会在乎呢？\n在我们资助的现有新创公司的态度中，我们也看到了创始人和投资者之间分歧的迹象。我最近和一家公司交谈，他们在最后一刻因为投资者认为占上风时破坏交易的琐事而导致一轮融资失败——关于创始人是否正确提交了83(b)表格的不确定性，如果你能相信的话。然而，这家新创公司显然会成功：他们的流量和收入图表看起来就像一架起飞的喷气式飞机。所以我问他们是否希望我介绍他们给更多投资者。令我惊讶的是，他们说不用——他们刚刚花了四个月时间与投资者打交道，现在他们不必这样，实际上快乐得多。他们有一个朋友想用投资者的钱雇用，现在他们不得不推迟。但除此之外，他们觉得银行里有足够的资金可以支撑到盈利。为了确保，他们正在搬到一个更便宜的公寓。在这样的经济中，我敢打赌他们得到了不错的交易。\n我从最近交谈过的几位YC创始人那里检测到了这种\u0026quot;投资者不值得麻烦\u0026quot;的氛 …"
  },{
    "title": "风险投资糟糕性的统一理论",
    "url": "/paul_graham/essays_zh/venturecapital/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n风险投资糟糕性的统一理论 2005年3月\n几个月前，我收到一个招聘人员的电子邮件，问我是否有兴趣在一家新的风险投资基金担任\u0026quot;驻场技术专家\u0026quot;。我想这个想法是让风险投资家的乔治·布什扮演卡尔·罗夫的角色。\n我考虑了大约四秒钟。为风险投资基金工作？呃。\n我对我们初创公司最生动的记忆之一是去拜访著名波士顿风险投资公司Greylock。他们是我一生中遇到的最傲慢的人。而我见过很多傲慢的人。[1]\n当然，不是我一个人有这种感觉。甚至我的一位风险投资家朋友也不喜欢风险投资家。\u0026ldquo;混蛋，\u0026ldquo;他说。\n但最近我一直在了解更多关于风险投资世界如何运作的知识，几天前我突然意识到风险投资家之所以这样是有原因的。并不是说这个行业吸引混蛋，甚至不是他们掌握的权力腐蚀了他们。真正的问题在于他们的报酬方式。\n风险投资基金的问题在于它们是基金。像共同基金或对冲基金的管理者一样，风险投资家获得他们管理资金的百分比：每年约2%的管理费，加上收益的百分比。所以他们希望基金规模巨大——如果可能的话，数亿美元。但这意味着每个合伙人最终要负责投资大量资金。而且由于一个人只能管理那么多交易，每笔交易必须达到数百万美元。\n这结果解释了创始人讨厌的风险投资家的几乎所有特征。\n它解释了为什么风险投资家做决定需要那么长时间，以及为什么他们的尽职调查感觉像身体腔穴检查。[2] 由于风险如此之大，他们必须偏执。\n它解释了为什么他们偷你的想法。每个创始人都知道，如果风险投资家最终投资了你的竞争对手，他们会把你的秘密告诉竞争对手。风险投资家在没有意向资助你的时候与你见面，只是为了为竞争对手挖空你的心思，这并非 unheard of。这种前景让天真的创始人笨拙地保密。有经验的创始人将其视为做生意成本。无论哪种方式，这都很糟糕。但同样，风险投资家如此狡猾的唯一原因是他们做的巨额交易。由于风险如此之大，他们必须狡猾。\n它解释了为什么风险投资家倾向于干涉他们投资的公司。他们想进入你的董事会不仅仅是为了给你建议，也是为了监视你。他们甚至经常安装新的首席执行官。是的，他可能有丰富的商业经验。但他也是他们的人：这些新安装的首席执行官总是扮演红军部队中政治委员的角色。由于风险如此之大，风险投资家忍不住要微观管理你。\n巨额投资本身是创始人会不喜欢的东西，如果他们意识到它们可能造成的损害的话。风险投资家投资x百万美元不是因为那是你需要的金额，而是因为他们的业务结构要求他们投资那么多。像类固醇一样，这些突然的巨额投资可能弊大于利。谷歌之所以能承受巨额风险投资，是因为它能合法地吸收大量资金。他们必须购买大量服务器和大量带宽来爬取整个网络。不那么幸运的初创公司最终只是雇佣大批人开会。\n原则上，你可以接受巨额风险投资，把它放在国库券中，并继续节俭经营。你试试看。\n当然，巨额投资意味着巨额估值。它们必须如此，否则没有足够的股票留给创始人。你可能认为高估值是件好事。许多创始人确实这么认为。但你不能吃纸。除非你能以某种方式实现业内人士所说的\u0026quot;流动性事件\u0026rdquo;，否则你无法从高估值中受益，而你的估值越高，这样做的选择就越窄。许多创始人会愿意以1500万美元出售公司，但刚刚以800万美元pre-money估值投资的风险投资家不会同意。无论你喜欢与否，你又在掷骰子了。\n回到1997年，我们的一个竞争对手在一轮风险投资中筹集了2000万美元。这在当时超过了我们整个公司的估值。我担心吗？一点也不：我很高兴。这就像看着你追赶的汽车拐进一条你知道是死胡同的街道。\n在那时他们最聪明的举动应该是拿2000万美元的每一分钱用来收购我们。我们会卖的。他们的投资者当然会大发雷霆。但我认为他们从未考虑过这一点的主要原因是他们从未想过我们能如此便宜地被收购。他们可能假设我们在和他们乘坐同样的风险投资 gravy train。\n事实上，我们整个存在期间只花了大约200万美元。这给了我们灵活性。我们以5000万美元把自己卖给了雅虎，每个人都很高兴。如果我们的竞争对手那样做了，最后一轮投资者大概会赔钱。我假设他们可以否决这样的交易。但那些日子没有人比雅虎支付更多。所以除非他们的创始人能够进行IPO（有雅虎作为竞争对手会很难），他们别无选择，只能让事情恶化下去。\n在泡沫期间上市的那些膨胀的公司这样做不仅仅是因为他们被无良的投资银行家拉进去。大多数同样受到风险投资家从另一方面的推动，他们在高估值时投资，使IPO成为唯一的出路。唯一更愚蠢的是散户投资者。所以实际上是IPO或破产。或者更确切地说，IPO然后破产，或者就是破产。\n把风险投资家行为的所有证据加起来，结果的人格并不吸引人。事实上，这是典型的恶棍：时而胆小、贪婪、狡猾和专横。\n我曾经认为风险投资家就是这样。抱怨风险投资家是混蛋对我来说曾经似乎像抱怨用户不阅读参考手册一样天真。风险投资家当然是混蛋。怎么可能不是呢？\n但我现在意识到他们本质上不是混蛋。风险投资家像汽车销售员或官僚：他们工作的性质把他们变成了混蛋。\n我遇到过几个我喜欢的风险投资家。Mike Moritz 看起来是个好人。他甚至有幽默感，这在风险投资家中几乎是闻所未闻的。从我读到的关于 John Doerr 的内容来看，他听起来也是个好人，几乎像个黑客。但他们在最好的风险投资基金工作。我的理论解释了为什么他们往往会不同：就像最受欢迎的孩子不必迫害书呆子一样，最好的风险投资家不必表现得像风险投资家。他们能挑选所有最好的交易。所以他们不必那么偏执和狡猾，他们可以选择那些罕见的公司，比如谷歌，这些公司实际上会从他们被迫投资的巨额资金中受益。\n风险投资家经常抱怨他们的行业里钱太多追逐交易太少。很少有人意识到这也描述了单个公司层面资金运作方式的缺陷。\n也许这是我作为\u0026quot;驻场技术专家\u0026quot;应该提出的那种战略见解。如果是这样，好消息是他们免费得到了它。坏消息是这意味着如果你不是顶级的基金之一，你注定要成为坏人。\n注释\n[1] 在Greylock将创始人Philip Greenspun赶出ArsDigita后，他写了一篇既有趣且信息丰富的文章。\n[2] 由于大多数风险投资家不是技术出身，他们尽职调查的技术方面往往像一个对人体解剖知识有缺陷的人进行身体腔穴检查。一段时间后，我们对风险投资家试图探测我们不存在的数据库开口感到相当疼痛。不，我们不使用Oracle。我们只是把数据存储在文件中。我们的秘密是使用不会丢失我们数据的操作系统。哪个操作系统？FreeBSD。你为什么用它而不是Windows NT？因为它更好而且不花钱。什么，你在使用免费软件操作系统？\n这个对话重复了多少次。然后当我们到达雅虎时，我们发现他们也使用FreeBSD并把数据存储在文件中。\n中文翻译 日语翻译\n",
    "description": "",
    "tags": ["风险投资","风险投资家","融资","初创公司","商业","投资"],
    "categories": [],
    "content": "→ English Version\n风险投资糟糕性的统一理论 2005年3月\n几个月前，我收到一个招聘人员的电子邮件，问我是否有兴趣在一家新的风险投资基金担任\u0026quot;驻场技术专家\u0026quot;。我想这个想法是让风险投资家的乔治·布什扮演卡尔·罗夫的角色。\n我考虑了大约四秒钟。为风险投资基金工作？呃。\n我对我们初创公司最生动的记忆之一是去拜访著名波士顿风险投资公司Greylock。他们是我一生中遇到的最傲慢的人。而我见过很多傲慢的人。[1]\n当然，不是我一个人有这种感觉。甚至我的一位风险投资家朋友也不喜欢风险投资家。\u0026ldquo;混蛋，\u0026ldquo;他说。\n但最近我一直在了解更多关于风险投资世界如何运作的知识，几天前我突然意识到风险投资家之所以这样是有原因的。并不是说这个行业吸引混蛋，甚至不是他们掌握的权力腐蚀了他们。真正的问题在于他们的报酬方式。\n风险投资基金的问题在于它们是基金。像共同基金或对冲基金的管理者一样，风险投资家获得他们管理资金的百分比：每年约2%的管理费，加上收益的百分比。所以他们希望基金规模巨大——如果可能的话，数亿美元。但这意味着每个合伙人最终要负责投资大量资金。而且由于一个人只能管理那么多交易，每笔交易必须达到数百万美元。\n这结果解释了创始人讨厌的风险投资家的几乎所有特征。\n它解释了为什么风险投资家做决定需要那么长时间，以及为什么他们的尽职调查感觉像身体腔穴检查。[2] 由于风险如此之大，他们必须偏执。\n它解释了为什么他们偷你的想法。每个创始人都知道，如果风险投资家最终投资了你的竞争对手，他们会把你的秘密告诉竞争对手。风险投资家在没有意向资助你的时候与你见面，只是为了为竞争对手挖空你的心思，这并非 unheard of。这种前景让天真的创始人笨拙地保密。有经验的创始人将其视为做生意成本。无论哪种方式，这都很糟糕。但同样，风险投资家如此狡猾的唯一原因是他们做的巨额交易。由于风险如此之大，他们必须狡猾。\n它解释了为什么风险投资家倾向于干涉他们投资的公司。他们想进入你的董事会不仅仅是为了给你建议，也是为了监视你。他们甚至经常安装新的首席执行官。是的，他可能有丰富的商业经验。但他也是他们的人：这些新安装的首席执行官总是扮演红军部队中政治委员的角色。由于风险如此之大，风险投资家忍不住要微观管理你。\n巨额投资本身是创始人会不喜欢的东西，如果他们意识到它们可能造成的损害的话。风险投资家投资x百万美元不是因为那是你需要的金额，而是因为他们的业务结构要求他们投资那么多。像类固醇一样，这些突然的巨额投资可能弊大于利。谷歌之所以能承受巨额风险投资，是因为它能合法地吸收大量资金。他们必须购买大量服务器和大量带宽来爬取整个网络。不那么幸运的初创公司最终只是雇佣大批人开会。\n原则上，你可以接受巨额风险投资，把它放在国库券中，并继续节俭经营。你试试看。\n当然，巨额投资意味着巨额估值。它们必须如此，否则没有足够的股票留给创始人。你可能认为高估值是件好事。许多创始人确实这么认为。但你不能吃纸。除非你能以某种方式实现业内人士所说的\u0026quot;流动性事件\u0026rdquo;，否则你无法从高估值中受益，而你的估值越高，这样做的选择就越窄。许多创始人会愿意以1500万美元出售公司，但刚刚以800万美元pre-money估值投资的风险投资家不会同意。无论你喜欢与否，你又在掷骰子了。\n回到1997年，我们的一个竞争对手在一轮风险投资中筹集了2000万美元。这在当时超过了我们整个公司的估值。我担心吗？一点也不：我很高兴。这就像看着你追赶的汽车拐进一条你知道是死胡同的街道。\n在那时他们最聪明的举动应该是拿2000万美元的每一分钱用来收购我们。我们会卖的。他们的投资者当然会大发雷霆。但我认为他们从未考虑过这一点的主要原因是他们从未想过我们能如此便宜地被收购。他们可能假设我们在和他们乘坐同样的风险投资 gravy train。\n事实上，我们整个存在期间只花了大约200万美元。这给了我们灵活性。我们以5000万美元把自己卖给了雅虎，每个人都很高兴。如果我们的竞争对手那样做了，最后一轮投资者大概会赔钱。我假设他们可以否决这样的交易。但那些日子没有人比雅虎支付更多。所以除非他们的创始人能够进行IPO（有雅虎作为竞争对手会很难），他们别无选择，只能让事情恶化下去。\n在泡沫期间上市的那些膨胀的公司这样做不仅仅是因为他们被无良的投资银行家拉进去。大多数同样受到风险投资家从另一方面的推动，他们在高估值时投资，使IPO成为唯一的出路。唯一更愚蠢的是散户投资者。所以实际上是IPO或破产。或者更确切地说，IPO然后破产，或者就是破产。\n把风险投资家行为的所有证据加起来，结果的人格并不吸引人。事实上，这是典型的恶棍：时而胆小、贪婪、狡猾和专横。\n我曾经认为风险投资家就是这样。抱怨风险投 …"
  },{
    "title": "风险资本挤压",
    "url": "/paul_graham/essays_zh/vcsqueeze/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n风险资本挤压 2005年11月\n未来几年，风险投资基金将发现自己从四个方向受到挤压。他们已经陷入卖方市场，因为他们在泡沫结束时筹集的巨额资金仍未投资。这本身并不是世界末日。事实上，这只是风险投资业务常态的更极端版本：太多资金追逐太少交易。\n不幸的是，这些少数交易现在想要的钱越来越少，因为创办初创公司变得如此便宜。四个原因：开源，使软件免费；摩尔定律，使硬件在几何上更接近免费；网络，如果你做得好，推广是免费的；更好的语言，使开发成本低得多。\n1995年我们创办初创公司时，前三个是我们最大的开支。我们不得不支付5000美元购买Netscape Commerce Server，这是当时唯一支持安全http连接的软件。我们支付3000美元购买一台配备90 MHz处理器和32兆内存的服务器。我们支付了一家公关公司约30000美元来推广我们的发布。\n现在你可以免费获得所有这三样。你可以免费获得软件；人们扔掉比我们第一台服务器更强大的计算机；如果你做出了好东西，你可以通过在线口碑产生比我们第一家公关公司通过印刷媒体获得的流量多十倍。\n当然，普通初创公司的另一个重大变化是编程语言已经改进了——或者说，中位数语言已经改进了。十年前的大多数初创公司，软件开发意味着十个程序员用C++编写代码。现在同样的工作可能由一两个使用Python或Ruby的人完成。\n在泡沫期间，许多人预测初创公司会将开发外包到印度。我认为未来的一个更好模式是David Heinemeier Hansson，他将开发外包给了一种更强大的语言。许多知名的应用程序现在，比如BaseCamp，只由一个程序员编写。而且一个人比十个人便宜10倍以上，因为（a）他不会在会议上浪费任何时间，（b）由于他可能是创始人，他可以不付给自己工资。\n因为创办初创公司如此便宜，风险投资家现在常常想给初创公司比初创公司想要接受的钱更多的钱。风险投资家喜欢一次投资数百万。但正如一位风险投资家在他资助的一家初创公司只愿意接受大约五十万美元后告诉我的，\u0026ldquo;我不知道我们要做什么。也许我们不得不把一些钱还回去。\u0026ldquo;意思是把一些资金还给提供资金的机构投资者，因为不可能全部投资。\n在这个已经很糟糕的情况下，出现了第三个问题：萨班斯-奥克斯利法案。萨班斯-奥克斯利法案是泡沫后通过的一项法律，大幅增加了上市公司的监管负担。除了合规成本，每年至少两百万美元外，该法律还给公司高管带来了可怕的法律风险。我认识的一位经验丰富的首席财务官直截了当地说：\u0026ldquo;我现在不想成为上市公司的首席财务官。\u0026rdquo;\n你可能会认为负责任的公司治理是一个不能太过分的领域。但在任何法律中你都可能太过分，这句话让我相信萨班斯-奥克斯利法案肯定太过分了。这位首席财务官是我认识的最聪明、最正直的财务人员。如果萨班斯-奥克斯利法案阻止像他这样的人成为上市公司的首席财务官，这足以证明它已经坏了。\n很大程度上由于萨班斯-奥克斯利法案，现在很少有初创公司上市。实际上，成功现在等于被收购。这意味着风险投资家现在的业务是寻找有前途的小型2-3人初创公司，并将它们打造成需要1亿美元收购的公司。他们并不是故意从事这个业务的；这只是他们的业务演变成的样子。\n因此出现了第四个问题：收购者已经开始意识到他们可以批发购买。他们为什么要等风险投资家使他们想要的初创公司变得更昂贵？风险投资家增加的大部分东西，收购者无论如何都不想要。收购者已经有品牌知名度和人力资源部门。他们真正想要的是软件和开发人员，而这正是初创公司在早期阶段的本质：集中的软件和开发人员。\n谷歌，典型地，似乎是第一个意识到这一点的。\u0026ldquo;早点把你们的初创公司带给我们，\u0026ldquo;谷歌在初创学校的演讲者说。他们对此非常明确：他们喜欢在初创公司进行A轮融资的时候收购它们。（A轮融资是第一轮真正的风险投资资金；通常发生在第一年。）这是一个绝妙的策略，无疑其他大型技术公司会试图效仿。除非他们想要谷歌吃掉更多的午餐。\n当然，谷歌在收购初创公司方面有优势：那里的很多人都富有，或者期望在他们的期权归属时变得富有。普通员工很难推荐收购；看到一群二十岁的年轻人变得富有，而你还拿着工资工作，这太烦人了。即使这对你的公司来说是正确的做法。\n解决方案\n尽管现在情况看起来很糟糕，但风险投资家有一种自救的方法。他们需要做两件事，一件不会让他们惊讶，另一件会让他们觉得是禁忌。\n让我们从明显的一个开始：游说放松萨班斯-奥克斯利法案。这项法律的创建是为了防止未来的安然事件，而不是摧毁IPO市场。由于该法案通过时IPO市场几乎已经死亡，很少有人看到它会产生什么坏影响。但现在技术已经从上一次萧条中恢复，我们可以清楚地看到萨班斯-奥克斯利法案已经成为一个瓶颈。\n初创公司是脆弱的植物——实际上是幼苗。这些幼苗值得保护，因为它们长成经济的大树。经济增长的大部分是它们的增长。我认为大多数政治家都意识到这一点。但他们没有意识到初创公司有多么脆弱，以及它们多么容易成为旨在修复其他问题的法律的附带损害。\n更危险的是，当你摧毁初创公司时，它们几乎不会发出任何声音。如果你踩到煤炭行业的脚趾，你会听到它。但如果你无意中扼杀了初创公司行业，发生的只是下一批谷歌的创始人留在研究生院而不是创办公司。\n我的第二个建议会让风险投资家感到震惊：让创始人在A轮融资中部分套现。目前，当风险投资家投资初创公司时，他们获得的所有股票都是新发行的，所有资金都流向公司。他们也可以直接从创始人那里购买一些股票。\n大多数风险投资家几乎有宗教规则反对这样做。他们不希望创始人在公司出售或上市前得到一分钱。风险投资家痴迷于控制，他们担心如果创始人有钱，他们对创始人的影响力会减弱。\n这是一个愚蠢的计划。事实上，让创始人早期出售一点股票通常对公司更有好处，因为它会使创始人对风险的态度与风险投资家的一致。目前情况是，他们对风险的态度往往是截然相反的：创始人一无所有，宁愿100%的机会获得100万美元，而不是20%的机会获得1000万美元，而风险投资家能够\u0026quot;理性\u0026quot;并倾向于后者。\n无论他们说什么，创始人早期出售公司而不是进行A轮融资的原因是他们预先得到了报酬。第一个一百万比后续的一百万值钱得多。如果创始人能早期出售一点股票，他们会很乐意接受风险投资的钱，并把赌注押在更大的结果上。\n那么为什么不让创始人得到那一百万，或者至少五十万呢？风险投资家会得到相同数量的股票。那么如果一些钱流向创始人而不是公司又怎样呢？\n一些风险投资家会说这是不可想象的——他们希望所有的钱都用于发展公司。但事实是，当前风险投资投资的巨大规模是由风险投资基金的结构决定的，而不是初创公司的需求。这些大型投资往往经常被用来摧毁公司而不是发展公司。\n资助我们初创公司的天使投资人让创始人直接向他们出售了一些股票，这对每个人来说都是一笔好交易。天使投资人在那笔投资上获得了巨大回报，所以他们很高兴。对我们创始人来说，它减弱了初创公司令人恐惧的全有或全无性，其原始形式更多的是一种干扰而不是激励。\n如果风险投资家对让创始人部分套现的想法感到恐惧，让我告诉他们一些更可怕的事情：你们现在正在直接与谷歌竞争。感谢Trevor Blackwell、Sarah Harlin、Jessica Livingston和Robert Morris阅读本文的草稿。\n罗马尼亚翻译 希伯来翻译 日语翻译 如果你喜欢这个，你可能也喜欢《黑客与画家》。\n",
    "description": "",
    "tags": ["风险资本","初创公司","融资","技术","商业","创新"],
    "categories": [],
    "content": "→ English Version\n风险资本挤压 2005年11月\n未来几年，风险投资基金将发现自己从四个方向受到挤压。他们已经陷入卖方市场，因为他们在泡沫结束时筹集的巨额资金仍未投资。这本身并不是世界末日。事实上，这只是风险投资业务常态的更极端版本：太多资金追逐太少交易。\n不幸的是，这些少数交易现在想要的钱越来越少，因为创办初创公司变得如此便宜。四个原因：开源，使软件免费；摩尔定律，使硬件在几何上更接近免费；网络，如果你做得好，推广是免费的；更好的语言，使开发成本低得多。\n1995年我们创办初创公司时，前三个是我们最大的开支。我们不得不支付5000美元购买Netscape Commerce Server，这是当时唯一支持安全http连接的软件。我们支付3000美元购买一台配备90 MHz处理器和32兆内存的服务器。我们支付了一家公关公司约30000美元来推广我们的发布。\n现在你可以免费获得所有这三样。你可以免费获得软件；人们扔掉比我们第一台服务器更强大的计算机；如果你做出了好东西，你可以通过在线口碑产生比我们第一家公关公司通过印刷媒体获得的流量多十倍。\n当然，普通初创公司的另一个重大变化是编程语言已经改进了——或者说，中位数语言已经改进了。十年前的大多数初创公司，软件开发意味着十个程序员用C++编写代码。现在同样的工作可能由一两个使用Python或Ruby的人完成。\n在泡沫期间，许多人预测初创公司会将开发外包到印度。我认为未来的一个更好模式是David Heinemeier Hansson，他将开发外包给了一种更强大的语言。许多知名的应用程序现在，比如BaseCamp，只由一个程序员编写。而且一个人比十个人便宜10倍以上，因为（a）他不会在会议上浪费任何时间，（b）由于他可能是创始人，他可以不付给自己工资。\n因为创办初创公司如此便宜，风险投资家现在常常想给初创公司比初创公司想要接受的钱更多的钱。风险投资家喜欢一次投资数百万。但正如一位风险投资家在他资助的一家初创公司只愿意接受大约五十万美元后告诉我的，\u0026ldquo;我不知道我们要做什么。也许我们不得不把一些钱还回去。\u0026ldquo;意思是把一些资金还给提供资金的机构投资者，因为不可能全部投资。\n在这个已经很糟糕的情况下，出现了第三个问题：萨班斯-奥克斯利法案。萨班斯-奥克斯利法案是泡沫后通过的一项法律，大幅增加了上市公司的监管负担。除了合规成本，每年至少两百万美元外，该法律还给公司高管带来了可怕的法律风险。我认识的一位经验丰富的首席财务官直截了当地说：\u0026ldquo;我现在不想成为上市公司的首席财务官。\u0026rdquo;\n你可能会认为负责任的公司治理是一个不能太过分的领域。但在任何法律中你都可能太过分，这句话让我相信萨班斯-奥克斯利法案肯定太过分了。这位首席财务官是我认识的最聪明、最正直的财务人员。如果萨班斯-奥克斯利法案阻止像他这样的人成为上市公司的首席财务官，这足以证明它已经坏了。\n很大程度上由于萨班斯-奥克斯利法案，现在很少有初创公司上市。实际上，成功现在等于被收购。这意味着风险投资家现在的业务是寻找有前途的小型2-3人初创公司，并将它们打造成需要1亿美元收购的公司。他们并不是故意从事这个业务的；这只是他们的业务演变成的样子。\n因此出现了第四个问题：收购者已经开始意识到他们可以批发购买。他们为什么要等风险投资家使他们想要的初创公司变得更昂贵？风险投资家增加的大部分东西，收购者无论如何都不想要。收购者已经有品牌知名度和人力资源部门。他们真正想要的是软件和开发人员，而这正是初创公司在早期阶段的本质：集中的软件和开发人员。\n谷歌，典型地，似乎是第一个意识到这一点的。\u0026ldquo;早点把你们的初创公司带给我们，\u0026ldquo;谷歌在初创学校的演讲者说。他们对此非常明确：他们喜欢在初创公司进行A轮融资的时候收购它们。（A轮融资是第一轮真正的风险投资资金；通常发生在第一年。）这是一个绝妙的策略，无疑其他大型技术公司会试图效仿。除非他们想要谷歌吃掉更多的午餐。\n当然，谷歌在收购初创公司方面有优势：那里的很多人都富有，或者期望在他们的期权归属时变得富有。普通员工很难推荐收购；看到一群二十岁的年轻人变得富有，而你还拿着工资工作，这太烦人了。即使这对你的公司来说是正确的做法。\n解决方案\n尽管现在情况看起来很糟糕，但风险投资家有一种自救的方法。他们需要做两件事，一件不会让他们惊讶，另一件会让他们觉得是禁忌。\n让我们从明显的一个开始：游说放松萨班斯-奥克斯利法案。这项法律的创建是为了防止未来的安然事件，而不是摧毁IPO市场。由于该法案通过时IPO市场几乎已经死亡，很少有人看到它会产生什么坏影响。但现在技术已经从上一次萧条中恢复，我们可以清楚地看到萨班斯-奥克斯利法案已经成为一个瓶颈。\n初创公司是脆弱的植 …"
  },{
    "title": "骇客投资者指南",
    "url": "/paul_graham/essays_zh/guidetoinvestors/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n骇客投资者指南 2007年4月 （本文源自2007年在斯坦福大学ASES峰会的主旨演讲）\n对大多数骇客来说，投资者的世界是一个陌生的世界——部分原因是投资者与骇客如此不同，部分原因是他们倾向于秘密运作。我作为创始人和投资者已经在这个世界打拼多年，但我仍然没有完全理解它。\n在这篇文章中，我将列出一些我对投资者了解到的令人惊讶的事情。有些是我在过去一年才学到的。\n教骇客如何与投资者打交道，可能我们在Y Combinator做的第二重要的事情。对创业公司来说最重要的事情是做出好产品。但每个人都知道这很重要。投资者的危险之处在于骇客不知道他们对这个陌生世界的了解有多么少。\n1. 投资者是创业中心的核心 大约一年前，我试图弄清楚复制硅谷需要什么。我决定关键因素是有钱人和极客——投资者和创始人。人是你制造技术所需要的一切，其他所有的人都会跟进。\n如果我必须缩小范围，我会说投资者是限制因素。不是因为他们对创业公司的贡献更大，而仅仅是因为他们最不愿意移动。他们很有钱。他们不会仅仅因为阿尔伯克基有一些他们可以投资的聪明骇客就搬到那里去。而骇客会搬到湾区寻找投资者。\n2. 天使投资者是最关键的 有几种类型的投资者。两个主要类别是天使投资人和风险投资人（VC）：VC投资别人的钱，而天使投资人投资自己的钱。\n虽然他们不太出名，但天使投资人在创建硅谷方面可能是更关键的成分。VC投资的大多数公司如果天使投资人没有先投资，根本就不会走到那一步。VC说，在进行A轮融资的公司中，有一半到四分之三已经接受了一些外部投资。[1]\n天使投资人愿意资助比VC更风险的项目。他们也提供有价值的建议，因为（与VC不同）许多天使投资人自己本身就是创业公司的创始人。\n谷歌的故事显示了天使投资人扮演的关键角色。很多人知道谷歌从Kleiner和Sequoia那里筹集了资金。大多数人没有意识到的是那有多晚。那轮融资是B轮融资；投资前估值是7500万美元。在那时，谷歌已经是一家成功的公司。实际上，谷歌是用天使资金资助的。\n典型的硅谷创业公司是由天使投资人资助的，这似乎很奇怪，但这并不那么令人惊讶。风险总是与回报成正比。所以有史以来最成功的创业公司一开始似乎可能是一个非常危险的赌注，而这正是VC不会碰的那种。\n天使投资人从哪里来？来自其他创业公司。所以像硅谷这样的创业中心受益于类似市场效应的东西，但在时间上有所转移：创业公司在这里是因为创业公司曾经在这里。\n3. 天使投资人不喜欢宣传 如果天使投资人如此重要，为什么我们听到更多关于VC的事情？因为VC喜欢宣传。他们需要向那些作为他们\u0026quot;客户\u0026quot;的投资者营销——那些他们投资的捐赠基金、养老基金和富裕家庭——也向可能来找他们融资的创始人营销。\n天使投资人不需要向投资者营销自己，因为他们投资自己的钱。他们也不想向创始人营销自己：他们不希望随机的商业计划书来烦扰他们。实际上，VC也不想。天使投资人和VC几乎都通过个人介绍获得交易。[2]\nVC想要强大品牌的原因不是为了吸引更多的商业计划书，而是为了在与其它VC竞争时赢得交易。而天使投资人很少直接竞争，因为（a）他们做的交易更少，（b）他们很乐意分享交易，（c）他们在更广泛的阶段投资。\n4. 大多数投资者，特别是VC，不像创始人 一些天使投资人是或曾经是骇客。但大多数VC是不同类型的人：他们是交易撮合者。\n如果你是一个骇客，这里有一个思想实验可以帮助你理解为什么基本上没有骇客VC：你想要一份永远不能制造任何东西，而是花所有时间听别人推销（大多是糟糕的）项目，决定是否资助他们，如果资助了就坐在他们董事会上的工作吗？这对大多数骇客来说不会很有趣。骇客喜欢制造东西。这就像做一个管理员。\n因为大多数VC是与创始人不同种类的人，很难知道他们在想什么。如果你是一个骇客，上次你不得不和这些人打交道是在高中时。也许在大学里，你在去实验室的路上经过他们的兄弟会。但不要低估他们。他们在自己的世界里和你一样专业。他们擅长的是读人，并让交易对他们有利。在试图在这方面击败他们之前要三思。\n5. 大多数投资者是动量投资者 因为大多数投资者是交易撮合者而不是技术专家，他们通常不理解你在做什么。我作为创始人知道大多数VC不懂技术。我也知道有些人赚了很多钱。然而直到最近我才把这两个想法放在一起问：\u0026ldquo;VC如何通过投资他们不理解的东西赚钱？\u0026rdquo;\n答案是他们像动量投资者。你可以（或者曾经可以）通过注意到股票价格的突然变化来赚很多钱。当股票向上跳时，你买入，当它突然下跌时，你卖出。实际上你在做内幕交易，而不知道你知道什么。你只是知道有人知道一些事情，而这正是推动股票移动的原因。\n这就是大多数风险投资者运作的方式。他们不试图观察某事物并预测它是否会起飞。他们通过比别人早一点注意到某事物正在起飞而获胜。这产生的回报几乎与实际能够挑选赢家一样好。他们可能必须比在最开始进入时支付多一点，但只是一点点。\n投资者总是说他们真正关心的是团队。实际上他们最关心的是你的流量，然后是其他投资者的看法，然后才是团队。如果你还没有任何流量，他们退回到第二点，其他投资者的看法。而这，正如你可以想象的，会导致创业公司\u0026quot;股价\u0026quot;的剧烈波动。一周每个人都想要你，他们恳求不要被排除在交易之外。但只要一个大投资者对你失去兴趣，下一周就没人会回你电话。我们经常有创业公司在几天内从热门变冷门或从冷门变热门，而实际上什么都没有改变。\n有两种方法处理这种现象。如果你感觉真的很自信，你可以尝试驾驭它。你可以从向一个相对低级的VC要一小笔钱开始，然后在产生兴趣后，向更有声望的VC要更大金额，掀起一股炒作的高潮，然后在\u0026quot;顶部\u0026quot;\u0026ldquo;卖出\u0026rdquo;。这是极其冒险的，即使成功也需要几个月。我不会自己尝试。我的建议是倾向于安全：当有人给你一个像样的交易时，就接受它并继续建立公司。创业公司成败取决于他们产品的质量，而不是融资交易的质量。\n6. 大多数投资者在寻找大赢家 风险投资者喜欢可以上市的公司。那里有大回报。他们知道任何个别创业公司上市的几率很小，但他们想投资那些至少有机会上市的公司。\n目前VC似乎运作的方式是投资一堆公司，大多数都失败了，其中一个是谷歌。那几个大赢家弥补了他们在其他投资上的损失。这意味着大多数VC只会在你是一个潜在的谷歌时才投资你。他们不关心那些安全地被收购2000万美元的公司。需要有一个机会，无论多小，让公司变得真正巨大。\n天使投资人在这方面不同。他们很乐意投资一个最可能的结果是被收购2000万美元的公司，如果他们能够以足够低的估值进行投资。但当然他们也喜欢可以上市的公司。所以有一个雄心勃勃的长期计划会让每个人都高兴。\n如果你接受VC的钱，你必须认真对待，因为VC交易的结构阻止了早期收购。如果你接受VC的钱，他们不会让你早期出售。\n7. VC想要投资大金额 他们在运营投资基金的事实使得VC想要投资大金额。一个典型的VC基金现在是数亿美元。如果4亿美元必须由10个合伙人投资，他们每人必须投资4000万美元。VC通常坐在他们资助的公司的董事会。如果平均交易规模是100万美元，每个合伙人将不得不坐在40个董事会上，这不会很有趣。所以他们喜欢更大的交易，可以一次性投入大量资金。\n如果你不需要很多钱，VC不会认为你是一个便宜货。这甚至可能让你不那么有吸引力，因为这意味着他们的投资为竞争对手创造了更少的进入障碍。\n天使投资人在不同的位置，因为他们投资自己的钱。他们很乐意投资小额——有时少至2万美元——只要潜在回报看起来足够好。所以如果你在做一些 inexpensive 的事情，去找天使投资人。\n8. 估值是虚构的 VC承认估值是人为制造的。他们决定你需要多少钱和他们想要公司的多少股份，这两个约束产生一个估值。\n估值随着投资的规模而增加。一个天使投资人愿意以100万美元估值投资5万美元的公司不能以那个估值从VC那里获得600万美元。那将留给创始人之间不到七分之一的股份（因为期权池也将从那七分之一中扣除）。大多数VC不会想要那个，这就是为什么你从未听说过VC以100万美元投资前估值投资600万美元的交易。\n如果估值随着投资金额而改变，这表明它们离反映公司的任何价值有多远。\n既然估值是编造的，创始人不应该太在意它们。那不是需要关注的部分。实际上，高估值可能是一件坏事。如果你以1000万美元的投资前估值获得融资，你不会为20美元出售公司。你必须以超过50的价格出售，VC才能获得甚至5倍的回报，这对他们来说很低。更可能他们会希望你坚持100。但需要获得高价降低了被收购的机会；许多公司可以以1000万美元收购你，但只有少数几个可以以100收购。而且因为创业公司对创始人来说像一门及格/不及格的课程，你想要优化的是获得好结果的机会，而不是你保留的公司股份比例。\n那么为什么创始人追求高估值？他们被错位的野心所欺骗。如果他们获得更高的估值，他们觉得他们取得了更多成就。他们通常认识其他创始人，如果他们获得更高的估值，他们可以说\u0026quot;我的比你的大\u0026quot;。但融资不是真正的考验。真正的考验是创始人的最终结果，获得太高的估值可能只是让好结果的可能性降低。\n高估值的一个优势是你获得较少的稀释。但有一个不那么性感的方法可以实现：只拿更少的钱。\n9. 投资者寻找像当前明星一样的创始人 十年前投资者在寻找下一个比尔·盖茨。这是一个错误，因为微软是一个非常反常的创业公司。他们几乎作为一个合同编程操作开始，他们变得巨大的原因是IBM碰巧把PC标准扔进了他们的怀里。\n现在所有的VC都在寻找下一个拉里和谢尔盖。这是一个好趋势，因为拉里和谢尔盖更接近理想的创业公司创始人。\n历史上投资者认为创始人成为商业专家很重要。所以他们愿意资助MBA团队，他们计划用钱来支付程序员为他们构建产品。这就像资助史蒂夫·鲍尔默，希望他雇用的程序员是比尔·盖茨——有点倒退，正如泡沫事件所示。现在大多数VC知道他们应该资助技术专家。在最顶级的基金中这更明显；较差的基金仍然想要资助MBA。\n如果你是一个骇客，投资者在寻找拉里和谢尔盖是个好消息。坏消息是，唯一能够正确做到的投资者是那些当他们还是一对计算机科学研究生时认识他们的人，而不是他们今天成为自信的媒体明星的时候。投资者仍然没有理解的是伟大的创始人在刚开始时可能看起来多么无知和犹豫不决。\n10. 投资者的贡献往往被低估 投资者为创业公司做的不仅仅是给他们钱。他们在做交易和安排介绍方面很有帮助，一些更聪明的投资者，特别是天使投资人，可以给产品提供好的建议。\n实际上，我认为区分伟大和普通投资者的是他们建议的质量。大多数投资者都给建议，但顶级投资者给好建议。\n投资者给创业公司的任何帮助都往往被低估。让世界认为创始人想到了一切对每个人都有利。投资者的目标是让公司变得有价值，如果似乎所有好想法都来自内部，公司似乎更有价值。\n",
    "description": "",
    "tags": ["投资者","风险投资","天使投资人","融资","创业公司"],
    "categories": [],
    "content": "→ English Version\n骇客投资者指南 2007年4月 （本文源自2007年在斯坦福大学ASES峰会的主旨演讲）\n对大多数骇客来说，投资者的世界是一个陌生的世界——部分原因是投资者与骇客如此不同，部分原因是他们倾向于秘密运作。我作为创始人和投资者已经在这个世界打拼多年，但我仍然没有完全理解它。\n在这篇文章中，我将列出一些我对投资者了解到的令人惊讶的事情。有些是我在过去一年才学到的。\n教骇客如何与投资者打交道，可能我们在Y Combinator做的第二重要的事情。对创业公司来说最重要的事情是做出好产品。但每个人都知道这很重要。投资者的危险之处在于骇客不知道他们对这个陌生世界的了解有多么少。\n1. 投资者是创业中心的核心 大约一年前，我试图弄清楚复制硅谷需要什么。我决定关键因素是有钱人和极客——投资者和创始人。人是你制造技术所需要的一切，其他所有的人都会跟进。\n如果我必须缩小范围，我会说投资者是限制因素。不是因为他们对创业公司的贡献更大，而仅仅是因为他们最不愿意移动。他们很有钱。他们不会仅仅因为阿尔伯克基有一些他们可以投资的聪明骇客就搬到那里去。而骇客会搬到湾区寻找投资者。\n2. 天使投资者是最关键的 有几种类型的投资者。两个主要类别是天使投资人和风险投资人（VC）：VC投资别人的钱，而天使投资人投资自己的钱。\n虽然他们不太出名，但天使投资人在创建硅谷方面可能是更关键的成分。VC投资的大多数公司如果天使投资人没有先投资，根本就不会走到那一步。VC说，在进行A轮融资的公司中，有一半到四分之三已经接受了一些外部投资。[1]\n天使投资人愿意资助比VC更风险的项目。他们也提供有价值的建议，因为（与VC不同）许多天使投资人自己本身就是创业公司的创始人。\n谷歌的故事显示了天使投资人扮演的关键角色。很多人知道谷歌从Kleiner和Sequoia那里筹集了资金。大多数人没有意识到的是那有多晚。那轮融资是B轮融资；投资前估值是7500万美元。在那时，谷歌已经是一家成功的公司。实际上，谷歌是用天使资金资助的。\n典型的硅谷创业公司是由天使投资人资助的，这似乎很奇怪，但这并不那么令人惊讶。风险总是与回报成正比。所以有史以来最成功的创业公司一开始似乎可能是一个非常危险的赌注，而这正是VC不会碰的那种。\n天使投资人从哪里来？来自其他创业公司。所以像硅谷这样的创业中心受益于类似市场效应的东西，但在时间上有所转移：创业公司在这里是因为创业公司曾经在这里。\n3. 天使投资人不喜欢宣传 如果天使投资人如此重要，为什么我们听到更多关于VC的事情？因为VC喜欢宣传。他们需要向那些作为他们\u0026quot;客户\u0026quot;的投资者营销——那些他们投资的捐赠基金、养老基金和富裕家庭——也向可能来找他们融资的创始人营销。\n天使投资人不需要向投资者营销自己，因为他们投资自己的钱。他们也不想向创始人营销自己：他们不希望随机的商业计划书来烦扰他们。实际上，VC也不想。天使投资人和VC几乎都通过个人介绍获得交易。[2]\nVC想要强大品牌的原因不是为了吸引更多的商业计划书，而是为了在与其它VC竞争时赢得交易。而天使投资人很少直接竞争，因为（a）他们做的交易更少，（b）他们很乐意分享交易，（c）他们在更广泛的阶段投资。\n4. 大多数投资者，特别是VC，不像创始人 一些天使投资人是或曾经是骇客。但大多数VC是不同类型的人：他们是交易撮合者。\n如果你是一个骇客，这里有一个思想实验可以帮助你理解为什么基本上没有骇客VC：你想要一份永远不能制造任何东西，而是花所有时间听别人推销（大多是糟糕的）项目，决定是否资助他们，如果资助了就坐在他们董事会上的工作吗？这对大多数骇客来说不会很有趣。骇客喜欢制造东西。这就像做一个管理员。\n因为大多数VC是与创始人不同种类的人，很难知道他们在想什么。如果你是一个骇客，上次你不得不和这些人打交道是在高中时。也许在大学里，你在去实验室的路上经过他们的兄弟会。但不要低估他们。他们在自己的世界里和你一样专业。他们擅长的是读人，并让交易对他们有利。在试图在这方面击败他们之前要三思。\n5. 大多数投资者是动量投资者 因为大多数投资者是交易撮合者而不是技术专家，他们通常不理解你在做什么。我作为创始人知道大多数VC不懂技术。我也知道有些人赚了很多钱。然而直到最近我才把这两个想法放在一起问：\u0026ldquo;VC如何通过投资他们不理解的东西赚钱？\u0026rdquo;\n答案是他们像动量投资者。你可以（或者曾经可以）通过注意到股票价格的突然变化来赚很多钱。当股票向上跳时，你买入，当它突然下跌时，你卖出。实际上你在做内幕交易，而不知道你知道什么。你只是知道有人知道一些事情，而这正是推动股票移动的原因。\n这就是大多数风险投资者运作的方式。他们不试图观察某事物并预测它是否会起飞。他们通过比别人早 …"
  },{
    "title": "高分辨率社会",
    "url": "/paul_graham/essays_zh/highres/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n高分辨率社会 2008年12月\n在几乎整个历史中，一个社会的成功与其组建大型和有纪律的组织能力成正比。那些押注规模经济的人通常获胜，这意味着最大的组织是最成功的。\n事物已经发生了如此大的变化，以至于我们难以相信，但直到几十年前，最大的组织往往是最进步的。1960年，一个雄心勃勃的大学毕业生想在福特、通用电气或NASA巨大而光鲜的办公室工作。小意味着小打小闹。1960年的小并不意味着一个酷酷的小型创业公司。它意味着希德叔叔的鞋店。\n当我在1970年代长大时，\u0026ldquo;公司阶梯\u0026quot;的概念仍然非常活跃。标准计划是努力进入一所好大学，然后被征召到某个组织，然后逐渐上升到责任越来越大的职位。更有雄心的人只是希望更快地爬上同一个阶梯。[1]\n但在二十世纪晚期，某些事情发生了变化。事实证明，规模经济并不是唯一起作用的力量。特别是在技术领域，从小团体获得的更高速度开始超越规模的优势。\n未来被证明与我们1970年预期的不同。我们预期的圆顶城市和飞行汽车未能实现。但幸运的是，带有标明我们专业和等级徽章的连体服也未能实现。经济现在看起来不是由少数几个巨大的树形组织主导，而是一个由较小独立单位组成的流动网络。\n并不是说大组织停止了工作。没有证据表明像罗马军队或英国东印度公司这样著名成功的组织比今天同规模的组织少受繁文缛节和政治的困扰。但他们的对手是那些不能通过发现新技术来即时改变规则的人。现在事实证明，\u0026ldquo;大型和有纪律的组织获胜\u0026quot;这个规则需要附加一个限定条件：\u0026ldquo;在变化缓慢的游戏中\u0026rdquo;。在变化达到足够速度之前，没有人知道这一点。\n不过，大组织现在将开始做得更差，因为历史上第一次他们不再获得最优秀的人才。现在雄心勃勃的大学毕业生不想为大公司工作。他们想为正在迅速成长为大公司的热门创业公司工作。如果他们真的有雄心，他们想自己创业。[2]\n这并不意味着大公司会消失。说创业公司会成功意味着大公司将存在，因为成功的创业公司要么成为大公司，要么被它们收购。[3] 但大型组织可能永远不会再次扮演它们在二十世纪末以前所扮演的主导角色。\n一个持续如此之久的趋势竟然会耗尽，这有点令人惊讶。一个规则工作了数千年然后改变极性，这种情况多久发生一次？\n\u0026ldquo;越大越好\u0026quot;的千年运行给我们留下了许多现在已经过时但极其根深蒂固的传统。这意味着雄心勃勃的人现在可以对其进行套利。准确理解要保留哪些想法，哪些现在可以丢弃，将非常有价值。\n观察的地方是小规模传播开始的地方：创业公司的世界。\n一直有偶尔的案例，特别是在美国，雄心勃勃的人在自己下面成长阶梯而不是爬上去。但直到最近，这是一条异常的路线，往往只有局外人才会走。十九世纪伟大的实业家如此缺乏正规教育并非巧合。无论他们的公司最终变得多大，他们最初基本上都是机械师和店主。没有大学教育的人如果能避免的话，是不会走这一步的。直到技术创业公司，特别是互联网创业公司的兴起，受过教育的人自己创业是非常不寻常的。\n离开肖克利半导体创立仙童半导体的八个人，最初的硅谷创业公司，最初甚至没有试图创业。他们只是在寻找一家愿意雇佣他们作为团队的公司。然后他们中一个人的父母介绍他们给一家小型投资银行，后者提出为他们创业融资，所以他们就这样做了。但创业对他们来说是一个陌生的想法；他们是不小心走到这一步的。[4]\n现在我想，几乎所有会编程的斯坦福或伯克利本科生都至少考虑过创业的想法。东海岸的大学并不落后，英国大学只比他们落后一点点。这种模式表明，斯坦福和伯克利的态度不是异常，而是领先指标。这就是世界发展的方向。\n当然，互联网创业公司仍然只是世界经济的一小部分。基于它们的趋势能有那么强大吗？\n我认为是的。没有理由假设这个领域可以完成的工作量有任何限制。像科学一样，财富似乎以分形方式扩展。当瓦特开始研究蒸汽动力时，它只是英国经济的很小一部分。但他的工作导致了更多的工作，直到这一部分扩展到比最初所属的整个经济更大的东西。\n互联网也可能发生同样的事情。如果互联网创业公司为雄心勃勃的人提供了最好的机会，那么很多雄心勃勃的人会创办它们，这部分经济会以通常的分形方式膨胀。\n即使与互联网相关的应用程序只成为世界经济的十分之一，这个组成部分也会为其他部分定下基调。经济中最活跃的部分总是如此，从薪资到着装标准。不仅仅是因为它的声望，还因为经济中最活跃部分所依据的原则往往是行之有效的原则。\n对于未来，押注的趋势似乎是个体绩效衡量的、小型自治团体组成的网络。获胜的社会将是那些阻碍最小的社会。\n就像最初的工业革命一样，一些社会将比其他社会更擅长这个。在英国诞生的一代内，工业革命传播到欧洲大陆和北美。但它并没有传播到任何地方。这种新的做事方式只能在为此做好准备的地方扎根。它只能传播到已经有活力中产阶级的地方。\n1960年代在硅谷开始的变革有类似的社会组成部分。那里开发了两种新技术：建造集成电路的技术，以及建造一种通过创造新技术来快速成长的新型公司的技术。建造集成电路的技术迅速传播到其他国家。但建造创业公司的技术没有。五十年后，创业公司在硅谷无处不在，在美国其他少数几个城市也很常见，但在世界大部分地区仍然是异常现象。\n创业公司没有像工业革命那样广泛传播的部分原因——可能主要是社会破坏性。尽管工业革命带来了许多社会变化，但它并没有与\u0026quot;越大越好\u0026quot;的原则作斗争。恰恰相反：两者完美地契合。新的工业公司适应了像军队和公务员这样现有大组织的习俗，产生的混合体运作良好。\u0026ldquo;工业领袖\u0026quot;向\u0026quot;工人军队\u0026quot;发布命令，每个人都知道他们应该做什么。\n创业公司在社会上似乎更逆流而上。它们很难在重视等级制度和稳定性的社会中繁荣，就像工业化很难在被随意从商人阶级偷窃的人统治的社会中繁荣一样。但在工业革命发生时，已经有少数几个国家度过了那个阶段。这次似乎没有那么多准备好的国家。\n注释 [1] 这个模式的一个奇怪后果是，通常赚更多钱的方法是成为经理。这是创业公司解决的问题之一。\n[2] 美国汽车公司一直比日本汽车公司做得差得多有很多原因，但至少其中一个是乐观的原因：美国毕业生有更多选择。\n[3] 公司有一天可能在收入上做大而在人员规模上不做大是有可能的，但我们在这个趋势上还没有走得很远。\n[4] Lecuyer, Christophe, 《制造硅谷》，MIT出版社，2006年。\n感谢特雷弗·布莱克韦尔、保罗·布赫海特、杰西卡·利文斯顿和罗伯特·莫里斯阅读本文的草稿。\n",
    "description": "",
    "tags": ["创业公司","技术","社会","未来","创新","经济学"],
    "categories": [],
    "content": "→ English Version\n高分辨率社会 2008年12月\n在几乎整个历史中，一个社会的成功与其组建大型和有纪律的组织能力成正比。那些押注规模经济的人通常获胜，这意味着最大的组织是最成功的。\n事物已经发生了如此大的变化，以至于我们难以相信，但直到几十年前，最大的组织往往是最进步的。1960年，一个雄心勃勃的大学毕业生想在福特、通用电气或NASA巨大而光鲜的办公室工作。小意味着小打小闹。1960年的小并不意味着一个酷酷的小型创业公司。它意味着希德叔叔的鞋店。\n当我在1970年代长大时，\u0026ldquo;公司阶梯\u0026quot;的概念仍然非常活跃。标准计划是努力进入一所好大学，然后被征召到某个组织，然后逐渐上升到责任越来越大的职位。更有雄心的人只是希望更快地爬上同一个阶梯。[1]\n但在二十世纪晚期，某些事情发生了变化。事实证明，规模经济并不是唯一起作用的力量。特别是在技术领域，从小团体获得的更高速度开始超越规模的优势。\n未来被证明与我们1970年预期的不同。我们预期的圆顶城市和飞行汽车未能实现。但幸运的是，带有标明我们专业和等级徽章的连体服也未能实现。经济现在看起来不是由少数几个巨大的树形组织主导，而是一个由较小独立单位组成的流动网络。\n并不是说大组织停止了工作。没有证据表明像罗马军队或英国东印度公司这样著名成功的组织比今天同规模的组织少受繁文缛节和政治的困扰。但他们的对手是那些不能通过发现新技术来即时改变规则的人。现在事实证明，\u0026ldquo;大型和有纪律的组织获胜\u0026quot;这个规则需要附加一个限定条件：\u0026ldquo;在变化缓慢的游戏中\u0026rdquo;。在变化达到足够速度之前，没有人知道这一点。\n不过，大组织现在将开始做得更差，因为历史上第一次他们不再获得最优秀的人才。现在雄心勃勃的大学毕业生不想为大公司工作。他们想为正在迅速成长为大公司的热门创业公司工作。如果他们真的有雄心，他们想自己创业。[2]\n这并不意味着大公司会消失。说创业公司会成功意味着大公司将存在，因为成功的创业公司要么成为大公司，要么被它们收购。[3] 但大型组织可能永远不会再次扮演它们在二十世纪末以前所扮演的主导角色。\n一个持续如此之久的趋势竟然会耗尽，这有点令人惊讶。一个规则工作了数千年然后改变极性，这种情况多久发生一次？\n\u0026ldquo;越大越好\u0026quot;的千年运行给我们留下了许多现在已经过时但极其根深蒂固的传统。这意味着雄心勃勃的人现在可以对其进行套利。准确理解要保留哪些想法，哪些现在可以丢弃，将非常有价值。\n观察的地方是小规模传播开始的地方：创业公司的世界。\n一直有偶尔的案例，特别是在美国，雄心勃勃的人在自己下面成长阶梯而不是爬上去。但直到最近，这是一条异常的路线，往往只有局外人才会走。十九世纪伟大的实业家如此缺乏正规教育并非巧合。无论他们的公司最终变得多大，他们最初基本上都是机械师和店主。没有大学教育的人如果能避免的话，是不会走这一步的。直到技术创业公司，特别是互联网创业公司的兴起，受过教育的人自己创业是非常不寻常的。\n离开肖克利半导体创立仙童半导体的八个人，最初的硅谷创业公司，最初甚至没有试图创业。他们只是在寻找一家愿意雇佣他们作为团队的公司。然后他们中一个人的父母介绍他们给一家小型投资银行，后者提出为他们创业融资，所以他们就这样做了。但创业对他们来说是一个陌生的想法；他们是不小心走到这一步的。[4]\n现在我想，几乎所有会编程的斯坦福或伯克利本科生都至少考虑过创业的想法。东海岸的大学并不落后，英国大学只比他们落后一点点。这种模式表明，斯坦福和伯克利的态度不是异常，而是领先指标。这就是世界发展的方向。\n当然，互联网创业公司仍然只是世界经济的一小部分。基于它们的趋势能有那么强大吗？\n我认为是的。没有理由假设这个领域可以完成的工作量有任何限制。像科学一样，财富似乎以分形方式扩展。当瓦特开始研究蒸汽动力时，它只是英国经济的很小一部分。但他的工作导致了更多的工作，直到这一部分扩展到比最初所属的整个经济更大的东西。\n互联网也可能发生同样的事情。如果互联网创业公司为雄心勃勃的人提供了最好的机会，那么很多雄心勃勃的人会创办它们，这部分经济会以通常的分形方式膨胀。\n即使与互联网相关的应用程序只成为世界经济的十分之一，这个组成部分也会为其他部分定下基调。经济中最活跃的部分总是如此，从薪资到着装标准。不仅仅是因为它的声望，还因为经济中最活跃部分所依据的原则往往是行之有效的原则。\n对于未来，押注的趋势似乎是个体绩效衡量的、小型自治团体组成的网络。获胜的社会将是那些阻碍最小的社会。\n就像最初的工业革命一样，一些社会将比其他社会更擅长这个。在英国诞生的一代内，工业革命传播到欧洲大陆和北美。但它并没有传播到任何地方。这种新的做事方式只能在为此做好准备的地方扎根。它只能传播到已经有活 …"
  },{
    "title": "高分辨率融资",
    "url": "/paul_graham/essays_zh/hiresfund/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n高分辨率融资 2010年9月\n创业公司在天使轮中使用更多可转换票据的原因是它们使交易更快完成。通过使创业公司更容易为不同的投资者提供不同的价格，它们帮助打破当所有投资者都等待看谁将投资时发生的僵局。\n迄今为止，对投资者关于创业公司意见的最大影响是其他投资者的意见。很少有投资者完全自己做决定。任何创业公司创始人都会告诉你，他们从投资者那里听到的最常见的问题不是关于创始人或产品，而是\u0026quot;还有谁在投资？\u0026quot;\n这往往会导致僵局。筹集旧式的固定规模股权轮可能需要数周时间，因为所有天使投资者都坐在那里等待其他人承诺，就像自行车冲刺比赛中的竞争者在开始时故意缓慢骑行，以便跟随第一个突破的人。\n可转换票据让创业公司通过给愿意先行动的投资者更低（有效）估值的奖励来打破这种僵局。他们应得这个，因为他们承担更多风险。投资罗恩·康威已经投资的创业公司要安全得多；在他之后来的人应该支付更高的价格。\n可转换票据允许价格上更大灵活性的原因是估值上限不是实际估值，而且票据便宜且容易做。所以你可以进行高分辨率融资：如果你愿意，可以为每个投资者提供具有不同上限的单独票据。\n这个上限不必单调上升。创业公司也可以给期望帮助他们最多的投资者更好的交易。关键是不同的投资者，无论是因为他们提供的帮助还是他们承诺的意愿，对创业公司有不同的价值，他们的条款应该反映这一点。\n为不同投资者提供不同条款显然是未来的方式。市场总是向更高分辨率发展。你可能不需要使用可转换票据来做到这一点。使用足够轻量级的标准化股权条款（以及对投资者和律师对股权轮期望的一些改变），你可能能够用股权而不是债务做同样的事情。创业公司对两者都可以接受，只要他们能够轻松改变估值。\n僵局并不是固定规模股权轮的唯一问题。另一个问题是创业公司必须提前决定筹集多少资金。我认为创业公司确定一个具体数字是错误的。如果投资者容易说服，创业公司现在应该筹集更多，如果投资者怀疑，创业公司应该接受较小的金额，并使用它使公司达到更有说服力的程度。\n期望创业公司提前选择最佳融资规模是不合理的，因为这取决于投资者的反应，而这些反应是无法预测的。\n固定规模、多投资者的天使轮对创业公司来说是个如此糟糕的主意，以至于人们想知道为什么事情会那样做。一种可能性是，这种习惯反映了投资者在能够逃脱时喜欢串通的方式。但我认为实际的解释没那么险恶。我认为天使投资者（和他们的律师）这样做轮次是无意识地模仿VC A轮。在A轮中，有领投的固定规模股权轮是有意义的，因为通常只有一个大投资者，他明确是领投。固定规模的A轮已经是高分辨率的。但是一轮中投资者越多，每个人都得到相同价格的意义就越小。\n这里最有趣的问题可能是高分辨率融资将对投资者世界做什么。更大胆的投资者现在将获得更低价格的奖励。但更重要的是，在一个受点击驱动的业务中，他们能够进入他们想要交易。而\u0026quot;还有谁在投资？\u0026ldquo;类型的投资者不仅会支付更高的价格，而且可能根本无法进入最好的交易。\n感谢伊玛德·阿洪德、萨姆·奥特曼、约翰·包蒂斯塔、皮特·库门、杰西卡·利文斯顿、丹·西罗克、哈吉·塔加和弗雷德·威尔逊阅读本文的草稿。\n",
    "description": "",
    "tags": ["融资","天使投资","可转换票据","创业公司","风险投资","估值"],
    "categories": [],
    "content": "→ English Version\n高分辨率融资 2010年9月\n创业公司在天使轮中使用更多可转换票据的原因是它们使交易更快完成。通过使创业公司更容易为不同的投资者提供不同的价格，它们帮助打破当所有投资者都等待看谁将投资时发生的僵局。\n迄今为止，对投资者关于创业公司意见的最大影响是其他投资者的意见。很少有投资者完全自己做决定。任何创业公司创始人都会告诉你，他们从投资者那里听到的最常见的问题不是关于创始人或产品，而是\u0026quot;还有谁在投资？\u0026quot;\n这往往会导致僵局。筹集旧式的固定规模股权轮可能需要数周时间，因为所有天使投资者都坐在那里等待其他人承诺，就像自行车冲刺比赛中的竞争者在开始时故意缓慢骑行，以便跟随第一个突破的人。\n可转换票据让创业公司通过给愿意先行动的投资者更低（有效）估值的奖励来打破这种僵局。他们应得这个，因为他们承担更多风险。投资罗恩·康威已经投资的创业公司要安全得多；在他之后来的人应该支付更高的价格。\n可转换票据允许价格上更大灵活性的原因是估值上限不是实际估值，而且票据便宜且容易做。所以你可以进行高分辨率融资：如果你愿意，可以为每个投资者提供具有不同上限的单独票据。\n这个上限不必单调上升。创业公司也可以给期望帮助他们最多的投资者更好的交易。关键是不同的投资者，无论是因为他们提供的帮助还是他们承诺的意愿，对创业公司有不同的价值，他们的条款应该反映这一点。\n为不同投资者提供不同条款显然是未来的方式。市场总是向更高分辨率发展。你可能不需要使用可转换票据来做到这一点。使用足够轻量级的标准化股权条款（以及对投资者和律师对股权轮期望的一些改变），你可能能够用股权而不是债务做同样的事情。创业公司对两者都可以接受，只要他们能够轻松改变估值。\n僵局并不是固定规模股权轮的唯一问题。另一个问题是创业公司必须提前决定筹集多少资金。我认为创业公司确定一个具体数字是错误的。如果投资者容易说服，创业公司现在应该筹集更多，如果投资者怀疑，创业公司应该接受较小的金额，并使用它使公司达到更有说服力的程度。\n期望创业公司提前选择最佳融资规模是不合理的，因为这取决于投资者的反应，而这些反应是无法预测的。\n固定规模、多投资者的天使轮对创业公司来说是个如此糟糕的主意，以至于人们想知道为什么事情会那样做。一种可能性是，这种习惯反映了投资者在能够逃脱时喜欢串通的方式。但我认为实际的解释没那么险恶。我认为天使投资者（和他们的律师）这样做轮次是无意识地模仿VC A轮。在A轮中，有领投的固定规模股权轮是有意义的，因为通常只有一个大投资者，他明确是领投。固定规模的A轮已经是高分辨率的。但是一轮中投资者越多，每个人都得到相同价格的意义就越小。\n这里最有趣的问题可能是高分辨率融资将对投资者世界做什么。更大胆的投资者现在将获得更低价格的奖励。但更重要的是，在一个受点击驱动的业务中，他们能够进入他们想要交易。而\u0026quot;还有谁在投资？\u0026ldquo;类型的投资者不仅会支付更高的价格，而且可能根本无法进入最好的交易。\n感谢伊玛德·阿洪德、萨姆·奥特曼、约翰·包蒂斯塔、皮特·库门、杰西卡·利文斯顿、丹·西罗克、哈吉·塔加和弗雷德·威尔逊阅读本文的草稿。\n"
  },{
    "title": "黑天鹅养殖",
    "url": "/paul_graham/essays_zh/swan/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n黑天鹅养殖 2012年9月\n这些年来我做过几种类型的工作，但我不知道有哪种像创业投资那样违反直觉。\n作为一项业务，关于创业投资需要理解的两件最重要的事情是（1）实际上所有回报都集中在几个大赢家身上，（2）最好的想法最初看起来像坏想法。\n第一条规则我在智力上知道，但直到它发生在我们身上才真正掌握。我们资助的公司总价值大约100亿，上下几亿。但只有两家公司，Dropbox和Airbnb，占了大约四分之三。\n在创业公司中，大赢家的程度违反了我们对变化的期望。我不知道这些期望是天生的还是习得的，但无论原因是什么，我们就是没有为创业投资中发现的1000倍结果变化做好准备。\n这产生了各种奇怪的后果。例如，在纯粹财务方面，每个YC批次中可能最多只有一家公司会对我们的回报有重大影响，其余的只是做生意的成本。[1] 我还没有真正吸收这个事实，部分原因是它是如此违反直觉，部分原因是我们这样做不仅仅是出于财务原因；如果我们每批次只有一家公司，YC将是一个相当孤独的地方。然而这是真的。\n要在违反你直觉的领域取得成功，你需要能够像飞行员在云中飞行时那样关闭它们。[2] 你需要做你智力上知道是正确的事情，即使它感觉是错的。\n这对我们来说是一场持续的战斗。我们很难让自己承担足够的风险。当你面试一家创业公司并认为\u0026quot;他们似乎可能成功\u0026quot;时，很难不资助他们。然而，至少在财务上，只有一种成功：他们要么成为真正的大赢家之一，要么不是，如果不是，资助他们并不重要，因为即使他们成功，对你的回报的影响也是微不足道的。在同一天面试中，你可能会遇到一些聪明的19岁孩子，他们甚至不确定想要做什么。他们成功的机会似乎很小。但再次，重要的不是他们成功的机会，而是他们真正成功的机会。任何群体真正成功的机会是微小的，但那些19岁孩子的机会可能比其他更安全群体的机会高。\n创业公司真正成功的概率不仅仅是它们完全成功概率的恒定分数。如果是这样，你可以资助每个看起来可能成功的人，你会得到那个分数的大赢家。不幸的是，挑选赢家比那更难。你必须忽略面前的大象，他们成功的可能性，而是专注于另一个几乎无形无形的问题：他们是否会真正成功。\n更难 最好的创业想法最初似乎像坏想法这一事实使这更加困难。我以前写过这个：如果一个好想法明显好，其他人已经做了。所以最成功的创始人倾向于做除了他们以外很少有人意识到是好的想法。这离疯狂不远了，直到你看到结果。\nPeter Thiel第一次在YC演讲时画了一个维恩图，完美地说明了这种情况。他画了两个相交的圆，一个标记为\u0026quot;似乎像坏想法\u0026quot;，另一个\u0026quot;是好想法\u0026quot;。交集是创业公司的最佳点。\n这个概念很简单，但将其视为维恩图是有启发性的。它提醒你有一个交集——有看似坏的好主意。它也提醒你，绝大多数看似坏的想法确实是坏的。\n最好想法看起来像坏想法的事实使得识别大赢家更加困难。这意味着创业公司真正成功的概率不仅仅是成功概率的恒定分数，而且高概率有前者的创业公司似乎有不成比例的低概率有后者。\n历史往往被大成功重写，所以回想起来，它们似乎明显会变得很大。因此，我最宝贵的记忆之一是当我第一次听说Facebook时它听起来多么蹩脚。一个让大学生浪费时间的地方？它似乎是一个完美的坏主意：一个（1）针对小众市场（2）没有钱（3）做不重要事情的地方。\n人们可以用完全相同的术语描述微软和苹果。[3]\n更难了 等等，情况更糟。你不仅要解决这个难题，而且要在没有任何成功迹象的情况下这样做。当你挑选一个大赢家时，你两年内都不会知道。\n与此同时，唯一你能衡量的东西是危险的误导。我们能够精确跟踪的唯一事情是每批次创业公司在演示日后融资做得如何。但我们知道那是错误的指标。能够融资的创业公司百分比与财务上重要的指标之间没有相关性，即该批次创业公司是否包含大赢家。\n除了一个反相关的。那是可怕的事情：融资不仅是一个无用的指标，而且是积极的误导。我们从事的业务需要挑选看起来没有希望的异常者，成功的巨大规模意味着我们可以非常广泛地撒网。大赢家可以产生10,000倍的回报。这意味着每个大赢家我们可以挑选1000家回报为零的公司，仍然最终领先10倍。\n如果我们达到资助的创业公司100%能够在演示日后融资的程度，那几乎肯定意味着我们太保守了。[4]\n有意识的努力不要这样做。在15个为投资者准备创业公司然后观察它们表现周期后，我现在可以通过演示日投资者的眼睛看待我们正在面试的群体。但那些是错误的眼睛！\n我们能够承担至少比演示日投资者多10倍的风险。由于风险通常与回报成比例，如果你能承担更多风险，你应该。承担比演示日投资者多10倍的风险意味着什么？我们不得不愿意资助比他们多10倍的创业公司。这意味着即使我们对自己慷慨，假设YC平均可以三倍创业公司的期望价值，如果只有30%的创业公司能够在演示日后获得重要融资，我们将承担正确数量的风险。\n我不知道目前它们中多少在演示日后融资更多。我故意避免计算那个数字，因为如果你开始测量某物，你开始优化它，而我知道这是错误的东西。[5] 但百分比肯定远高于30%。坦率地说，30%的融资成功率想法让我胃部收缩。只有30%的创业公司可融资的演示日将是混乱的。每个人都会同意YC已经 jumped the shark。我们自己也会觉得YC已经 jumped the shark。然而我们都错了。\n无论好坏，这永远只是一个思想实验。我们永远无法忍受。这违反直觉怎么样？我可以列出我知道是正确的事情，但仍然不做。我可以编造各种看似合理的理由。如果我们投资大量失败的有风险创业公司，会伤害YC的品牌（至少在数学不好的人中）。它可能稀释校友网络的价值。也许最有说服力的是，对我们来说一直失败到下巴是令人沮丧的。但我知道我们如此保守的真正原因是我们还没有吸收回报1000倍变化的事实。\n我们可能永远无法让自己承担与这个业务中回报成比例的风险。我们最好的希望是，当我们面试一个群体并发现自己认为\u0026quot;他们似乎像好创始人，但投资者会认为这个疯狂想法怎么样？\u0026ldquo;时，我们将能够继续说\u0026quot;谁在乎投资者怎么想？\u0026ldquo;这就是我们对Airbnb的想法，如果我们想资助更多Airbnbs，我们必须保持擅长这样思考。\n注释 [1] 我不是说大赢家是唯一重要的事情，只是说它们对投资者来说财务上是唯一重要的事情。由于我们做YC主要不是出于财务原因，大赢家对我们来说不是唯一重要的事情。例如，我们很高兴资助了Reddit。尽管我们从中赚得相对较少，Reddit对世界有很大影响，它向我们介绍了Steve Huffman和Alexis Ohanian，两人都成为了好朋友。\n我们也不会强迫创始人试图成为大赢家，如果他们不想的话。我们在自己的创业公司（Viaweb，以5000万美元被收购）中没有\u0026rdquo; swing for the fences\u0026rdquo;，强迫创始人做我们没有做的事情会感觉相当虚假。我们的规则是这取决于创始人。有些人想要接管世界，有些人只想要前几百万。但我们投资这么多公司，我们不必为任何一个结果出汗。事实上，我们不必担心创业公司是否有退出。财务上唯一重要的是最大的退出，那些是有保证的，因为如果公司变得足够大，其股票市场将不可避免地出现。由于剩余结果对回报没有重大影响，如果创始人想以少量早期出售，或缓慢增长从不出售（即成为所谓的生活方式业务），甚至关闭公司，对我们来说都可以。当我们有很高期望的创业公司做得不好时，我们有时会失望，但这种失望主要是任何人发生这种情况时感到的普通类型。\n[2] 没有视觉线索（例如地平线）你无法区分重力和加速度。这意味着如果你在云中飞行，你无法告诉飞机的姿态是什么。你可能觉得你在直线水平飞行，而实际上你在螺旋下降。解决方案是忽略你身体告诉你的，只听你的仪器。但结果证明忽略你身体告诉你的非常困难。每个飞行员都知道这个问题，但它仍然是事故的主要原因。\n[3] 并不是所有大赢家都遵循这个模式。Google似乎是个坏主意的原因是已经有大量搜索引擎，似乎没有另一个的空间。\n[4] 创业公司融资成功是两件事的函数：他们在卖什么以及他们卖得多好。虽然我们可以教创业公司很多关于如何吸引投资者，但即使最有说服力的推销也不能卖出投资者不喜欢的想法。我确实担心Airbnb，例如，无法在演示日后融资。我无法说服Fred Wilson资助他们。他们可能根本没有融到钱，但巧合的是，我们在Sequoia的联系Greg McAdoo是少数理解度假租赁业务的风险投资家之一，他在过去两年中大部分时间调查它。\n[5] 我在2010年夏季一组投资者开始自动向我们资助的每个创业公司提供投资之前的上一批计算过一次。当时是94%（35家尝试融资的公司中有33家成功，一家没有尝试，因为他们已经盈利）。现在可能更低，因为那个投资；过去是演示日后融资或死亡。\n感谢Sam Altman、Paul Buchheit、Patrick Collison、Jessica Livingston、Geoff Ralston和Harj Taggar阅读本文的草稿。\n",
    "description": "",
    "tags": ["创业投资","风险","回报","YC","黑天鹅"],
    "categories": [],
    "content": "→ English Version\n黑天鹅养殖 2012年9月\n这些年来我做过几种类型的工作，但我不知道有哪种像创业投资那样违反直觉。\n作为一项业务，关于创业投资需要理解的两件最重要的事情是（1）实际上所有回报都集中在几个大赢家身上，（2）最好的想法最初看起来像坏想法。\n第一条规则我在智力上知道，但直到它发生在我们身上才真正掌握。我们资助的公司总价值大约100亿，上下几亿。但只有两家公司，Dropbox和Airbnb，占了大约四分之三。\n在创业公司中，大赢家的程度违反了我们对变化的期望。我不知道这些期望是天生的还是习得的，但无论原因是什么，我们就是没有为创业投资中发现的1000倍结果变化做好准备。\n这产生了各种奇怪的后果。例如，在纯粹财务方面，每个YC批次中可能最多只有一家公司会对我们的回报有重大影响，其余的只是做生意的成本。[1] 我还没有真正吸收这个事实，部分原因是它是如此违反直觉，部分原因是我们这样做不仅仅是出于财务原因；如果我们每批次只有一家公司，YC将是一个相当孤独的地方。然而这是真的。\n要在违反你直觉的领域取得成功，你需要能够像飞行员在云中飞行时那样关闭它们。[2] 你需要做你智力上知道是正确的事情，即使它感觉是错的。\n这对我们来说是一场持续的战斗。我们很难让自己承担足够的风险。当你面试一家创业公司并认为\u0026quot;他们似乎可能成功\u0026quot;时，很难不资助他们。然而，至少在财务上，只有一种成功：他们要么成为真正的大赢家之一，要么不是，如果不是，资助他们并不重要，因为即使他们成功，对你的回报的影响也是微不足道的。在同一天面试中，你可能会遇到一些聪明的19岁孩子，他们甚至不确定想要做什么。他们成功的机会似乎很小。但再次，重要的不是他们成功的机会，而是他们真正成功的机会。任何群体真正成功的机会是微小的，但那些19岁孩子的机会可能比其他更安全群体的机会高。\n创业公司真正成功的概率不仅仅是它们完全成功概率的恒定分数。如果是这样，你可以资助每个看起来可能成功的人，你会得到那个分数的大赢家。不幸的是，挑选赢家比那更难。你必须忽略面前的大象，他们成功的可能性，而是专注于另一个几乎无形无形的问题：他们是否会真正成功。\n更难 最好的创业想法最初似乎像坏想法这一事实使这更加困难。我以前写过这个：如果一个好想法明显好，其他人已经做了。所以最成功的创始人倾向于做除了他们以外很少有人意识到是好的想法。这离疯狂不远了，直到你看到结果。\nPeter Thiel第一次在YC演讲时画了一个维恩图，完美地说明了这种情况。他画了两个相交的圆，一个标记为\u0026quot;似乎像坏想法\u0026quot;，另一个\u0026quot;是好想法\u0026quot;。交集是创业公司的最佳点。\n这个概念很简单，但将其视为维恩图是有启发性的。它提醒你有一个交集——有看似坏的好主意。它也提醒你，绝大多数看似坏的想法确实是坏的。\n最好想法看起来像坏想法的事实使得识别大赢家更加困难。这意味着创业公司真正成功的概率不仅仅是成功概率的恒定分数，而且高概率有前者的创业公司似乎有不成比例的低概率有后者。\n历史往往被大成功重写，所以回想起来，它们似乎明显会变得很大。因此，我最宝贵的记忆之一是当我第一次听说Facebook时它听起来多么蹩脚。一个让大学生浪费时间的地方？它似乎是一个完美的坏主意：一个（1）针对小众市场（2）没有钱（3）做不重要事情的地方。\n人们可以用完全相同的术语描述微软和苹果。[3]\n更难了 等等，情况更糟。你不仅要解决这个难题，而且要在没有任何成功迹象的情况下这样做。当你挑选一个大赢家时，你两年内都不会知道。\n与此同时，唯一你能衡量的东西是危险的误导。我们能够精确跟踪的唯一事情是每批次创业公司在演示日后融资做得如何。但我们知道那是错误的指标。能够融资的创业公司百分比与财务上重要的指标之间没有相关性，即该批次创业公司是否包含大赢家。\n除了一个反相关的。那是可怕的事情：融资不仅是一个无用的指标，而且是积极的误导。我们从事的业务需要挑选看起来没有希望的异常者，成功的巨大规模意味着我们可以非常广泛地撒网。大赢家可以产生10,000倍的回报。这意味着每个大赢家我们可以挑选1000家回报为零的公司，仍然最终领先10倍。\n如果我们达到资助的创业公司100%能够在演示日后融资的程度，那几乎肯定意味着我们太保守了。[4]\n有意识的努力不要这样做。在15个为投资者准备创业公司然后观察它们表现周期后，我现在可以通过演示日投资者的眼睛看待我们正在面试的群体。但那些是错误的眼睛！\n我们能够承担至少比演示日投资者多10倍的风险。由于风险通常与回报成比例，如果你能承担更多风险，你应该。承担比演示日投资者多10倍的风险意味着什么？我们不得不愿意资助比他们多10倍的创业公司。这意味着即使我们对自己慷慨，假设YC平均可以三倍创业 …"
  },{
    "title": "黑客与画家",
    "url": "/paul_graham/essays_zh/hp/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n黑客与画家 2003年5月\n（本文源于在哈佛大学的一次客座讲座，该讲座整合了之前在东北大学的一次演讲。）\n当我完成计算机科学研究生学业后，我去艺术学院学习绘画。很多人似乎对感兴趣于计算机的人也会对绘画感兴趣感到惊讶。他们似乎认为黑客和绘画是截然不同的工作类型——黑客工作是冷酷、精确、有条理的，而绘画则是某种原始冲动的狂热表达。\n这两种形象都是错误的。黑客和绘画有很多共同之处。事实上，在我认识的所有不同类型的人中，黑客和画家是最相似的。\n黑客和画家的共同点是他们都是创造者。与作曲家、建筑师和作家一样，黑客和画家试图做的是创造好东西。他们本身并不是在做研究，尽管在试图创造好东西的过程中他们发现了一些新技术，那就更好了。\n我从来不喜欢\u0026quot;计算机科学\u0026quot;这个词。我不喜欢它的主要原因是没有这样的东西。计算机科学是一堆关系不大的领域的拼凑，因历史的偶然而被组合在一起，就像南斯拉夫一样。一端是实际上是数学家的人，但他们称自己做的事情为计算机科学，以便获得DARPA资助。中间是从事类似计算机自然史工作的人——例如研究通过网络路由数据的算法行为。然后在另一端是黑客，他们试图编写有趣的软件，对他们来说，计算机只是表达媒介，就像对建筑师来说是混凝土，对画家来说是颜料一样。这就像是数学家、物理学家和建筑师都必须在同一个系里一样。\n有时黑客所做的事情被称为\u0026quot;软件工程\u0026quot;，但这个术语同样具有误导性。优秀的软件设计师并不比建筑师更像工程师。建筑和工程之间的界限并没有明确界定，但它是存在的。它在于做什么和如何做之间：建筑师决定做什么，工程师弄清楚如何做。\n做什么和如何做不应过于分离。如果你试图在不知道如何做的情况下决定做什么，那是在自找麻烦。但黑客工作绝不仅仅是决定如何实现某个规范。在最好的情况下，它是创建规范——但事实证明做到这一点的最好方法是实现它。\n也许有一天\u0026quot;计算机科学\u0026quot;会像南斯拉夫一样被分解成其组成部分。这可能是件好事。特别是如果这意味着我自己的领域——黑客的独立。\n将所有这些不同类型的工作捆绑在一个部门可能在行政上很方便，但在智力上是混乱的。这是我不喜欢\u0026quot;计算机科学\u0026quot;这个名字的另一个原因。可以说，中间的人在做类似实验科学的事情。但两端的人，黑客和数学家，实际上并不是在做科学。\n数学家似乎并不为此困扰。他们很高兴地开始证明定理，就像数学系的数学家一样，并且很快就会停止注意到他们工作的建筑外面写着\u0026quot;计算机科学\u0026quot;。但对黑客来说，这个标签是个问题。如果他们所做的事情被称为科学，这让他们觉得他们应该表现得科学。因此，大学和研究实验室里的黑客不做他们真正想做的事情，即设计美丽的软件，而是觉得他们应该写研究论文。\n在最好的情况下，论文只是一种形式。黑客编写很酷的软件，然后写一篇关于它的论文，论文就成为了软件所代表成就的代理。但这种不匹配经常导致问题。很容易从创造美丽的东西转向创造丑陋的东西，而这些东西更适合作为研究论文的题材。\n不幸的是，美丽的东西并不总是最好的论文主题。首先，研究必须是原创的——正如任何写过博士论文的人所知，确保你在探索未知领域的方法是占据一块没有人想要的地盘。其次，研究必须是实质性的——笨拙的系统会产生更丰富的论文，因为你可以写为了完成工作而必须克服的障碍。没有什么比从错误假设开始更能产生丰富的问题了。大多数人工智能都是这个规则的例子；如果你假设知识可以表示为谓词逻辑表达式的列表，其参数代表抽象概念，你将有很多论文要写关于如何使其工作。正如里奇·里卡多常说的：\u0026ldquo;露西，你有很多解释要做。\u0026rdquo;\n创造美丽东西的方法往往是对现有事物进行微妙的调整，或者以稍新的方式组合现有的想法。这种工作很难在研究论文中传达。\n那么为什么大学和研究实验室继续用出版物来判断黑客呢？原因与\u0026quot;学术能力\u0026quot;用简单的标准化测试衡量，或者程序员的生产力用代码行数衡量是一样的。这些测试很容易应用，没有什么比一个勉强有效的简单测试更诱人的了。\n衡量黑客真正试图做的事情，设计美丽的软件，会困难得多。你需要良好的设计感来判断好的设计。人们识别好设计的能力与他们对自己能做到的信心之间没有任何相关性，除了可能是负相关。\n唯一的外部测试是时间。随着时间的推移，美丽的东西往往会繁荣，丑陋的东西往往会被抛弃。不幸的是，所涉及的时间可能比人类寿命还长。塞缪尔·约翰逊说，作家的声誉需要一百年才能收敛。你必须等待作家有影响力的朋友死去，然后他们所有的追随者都死去。\n我认为黑客只能接受自己声誉中有很大的随机成分。在这方面，他们与其他创造者没有什么不同。事实上，相比之下，他们是幸运的。时尚在黑客中的影响力远不如在绘画中那么大。\n有比被人误解你的作品更糟糕的事情。更危险的是你会自己误解你的作品。相关领域是你寻找想法的地方。如果你发现自己身处计算机科学系，自然会有一种诱惑，例如认为黑客是理论计算机科学理论的应用版本。我在研究生院的整个时间里，脑海中总有一种不安的感觉，觉得我应该知道更多理论，而且在期末考试后三周内忘记所有东西是非常疏忽的。\n现在我意识到我错了。黑客需要了解计算理论的程度，与画家需要了解颜料化学的程度差不多。你需要知道如何计算时间和空间复杂性以及图灵完备性。你可能还想记住至少状态机的概念，以防你不得不编写解析器或正则表达式库。事实上，画家必须记住的颜料化学知识比这多得多。\n我发现，最好的想法来源不是名字中有\u0026quot;计算机\u0026quot;一词的其他领域，而是创造者居住的其他领域。绘画比计算理论是更丰富的想法来源。\n例如，我在大学里学到的是，一个人应该在完全接触计算机之前在纸上完整地构思一个程序。我发现我不是这样编程的。我发现我喜欢坐在计算机前编程，而不是在纸上。更糟糕的是，我不是耐心地写出完整的程序并确保它是正确的，而是倾向于只是喷出完全没有希望的代码，然后逐渐把它塑造成形。我学到的是，调试是一种最后阶段，你捕捉打字错误和疏忽。按照我的工作方式，编程似乎就是由调试组成的。\n很长时间以来，我对此感觉很糟糕，就像我曾经因为小学时握铅笔的方式和他们教我的不一样而感到难过一样。如果我看过其他创造者，画家或建筑师，我会意识到我所做的事情有一个名字：素描。据我所知，他们在大学教我的编程方法完全是错的。你应该在编写程序时构思程序，就像作家、画家和建筑师所做的那样。\n意识到这一点对软件设计有实际意义。这意味着编程语言最重要的特性应该是可塑的。编程语言是用来思考程序的，而不是表达你已经想好的程序。它应该是一支铅笔，而不是一支钢笔。如果人们真的像他们在大学教我的那样写程序，静态类型会是个好主意。但这不是我认识的任何黑客写程序的方式。我们需要一种让我们能够涂鸦、涂抹和弄脏的语言，而不是一种你必须用一杯类型平衡在膝盖上与严格的老婶婶编译器礼貌交谈的语言。\n既然我们在讨论静态类型，认同创造者将使我们免于困扰科学的另一个问题：数学嫉妒。科学界的每个人都秘密认为数学家比他们聪明。我认为数学家也相信这一点。无论如何，结果是科学家倾向于使他们的工作看起来尽可能数学化。在像物理学这样的领域，这可能不会造成太大伤害，但离自然科学越远，这个问题就越大。\n一页公式看起来非常令人印象深刻。（提示：为了更加令人印象深刻，使用希腊变量。）因此，有很大的诱惑去做你可以正式处理的问题，而不是那些重要的，比如说，重要的问题。\n如果黑客认同其他创造者，比如作家和画家，他们就不会感到诱惑去做这种事情。作家和画家不遭受数学嫉妒。他们觉得他们在做完全不相关的事情。我认为黑客也是如此。\n如果大学和研究实验室阻止黑客做他们想做的工作，也许他们的位置是在公司。不幸的是，大多数公司也不会让黑客做他们想做的事情。大学和研究实验室强迫黑客成为科学家，公司强迫他们成为工程师。\n我自己直到最近才发现这一点。当雅虎收购Viaweb时，他们问我想做什么。我从来不太喜欢商业方面，说我只想黑客。当我到雅虎时，我发现黑客对他们来说意味着实现软件，而不是设计它。程序员被视为技术人员，将产品经理的愿景（如果那算是的话）翻译成代码。\n这似乎是大公司的默认计划。他们这样做是因为它减少了结果的标准差。只有一小部分黑客能够真正设计软件，公司经营者很难挑选出这些人。因此，大多数公司不将软件的未来委托给一个才华横溢的黑客，而是设置成由委员会设计，黑客只实现设计。\n如果你想赚钱，记住这一点，因为这是创业公司获胜的原因之一。大公司希望减少设计结果的标准差，因为他们想避免灾难。但当你抑制波动时，你既失去了高点，也失去了低点。这对大公司来说不是问题，因为他们不是靠做出伟大的产品获胜的。大公司靠比其他大公司少些糟糕获胜。\n所以如果你能找到一种方法与一家大公司进行设计战争，大到其软件是由产品经理设计的，他们将永远无法跟上你。不过，这些机会并不容易找到。很难让大公司参与设计战争，就像很难让城堡内的对手进行肉搏战一样。例如，编写一个比微软Word更好的文字处理器会很容易，但微软在其操作系统垄断的城堡内，即使你做到了，可能甚至不会注意到。\n进行设计战争的地方是新市场，在那里还没有人设法建立任何防御工事。在那里，你可以通过大胆的设计方法，以及让同样的人既设计又实现产品而大获全胜。微软自己一开始就是这样做的。苹果也是如此。惠普也是如此。我怀疑几乎所有成功的创业公司都是如此。\n所以构建伟大软件的一种方法是创办自己的创业公司。然而，这有两个问题。一是在创业公司，你必须做很多编程以外的事情。在Viaweb，如果我能有四分之一的时间黑客，我就觉得自己很幸运。我在其他四分之三的时间里不得不做的事情从乏味到可怕不等。我对此有一个基准，因为我曾经不得不离开董事会会议去补牙。我记得坐在牙医的椅子上，等待钻头，感觉就像在度假。\n创业公司的另一个问题是，赚钱的软件和有趣的软件之间没有太多重叠。编程语言写起来很有趣，微软的第一个产品确实是，但现在没有人会为编程语言付钱。如果你想赚钱，你往往被迫从事对任何人来说都太麻烦而无法免费解决的问题。\n所有创造者都面临这个问题。价格由供求关系决定，对有趣工作的需求不如解决个人客户日常问题的需求多。在外百老汇戏剧中表演不如在贸易展上穿着大猩猩服装在别人的展位工作赚钱。写小说不如为垃圾处理器写广告文案赚钱。黑客编程语言不如想办法将某公司的遗留数据库连接到他们的Web服务器赚钱。\n我认为这个问题的答案，在软件的情况下，是一个几乎所有创造者都知道的概念：日常工作。这个词始于音乐家，他们晚上表演。更一般地说，这意味着你做一种工作是为了钱，做另一种是为了爱。\n几乎所有创造者在职业生涯早期都有日常工作。画家和作家尤其如此。如果你幸运，你可以找到与你真正工作密切相关的日常工作。音乐家似乎经常在唱片店工作。从事某种编程语言或操作系统工作的黑客同样可能能够使用它获得日常工作。[1]\n当我说答案是为黑客提供日常工作，并在业余时间从事美丽软件工作时，我并不是在提出一个新想法。这就是开源黑客的全部内容。我要说的是，开源可能是正确的模式，因为它已经被所有其他创造者独立证实。\n任何雇主都不愿让黑客从事开源项目，这让我感到惊讶。在Viaweb，我们不愿意雇佣任何不这样做的人。当我们面试程序员时，我们主要关心的是他们在业余时间编写什么样的软件。除非你热爱它，否则你不能真正做好任何事情，如果你热爱黑客，你将不可避免地从事自己的项目。[2]\n因为黑客是创造者而不是科学家，寻找隐喻的正确地方不是科学，而是其他类型的创造者。绘画还能教给我们什么关于黑客的知识？\n我们可以从绘画的例子中学到的一件事，或者至少确认的是，如何学习黑客。你主要通过做来学习绘画。黑客也是如此。大多数黑客不是通过上大学编程课程来学习黑客的。他们在十三岁时通过编写自己的程序来学习黑客。即使在大学课程中，你也主要通过黑客来学习黑客。[3]\n因为画家在他们身后留下了作品的痕迹，你可以看着他们通过做来学习。如果你按时间顺序看一位画家的作品，你会发现每幅画都建立在以前画中学到的东西的基础上。当一幅画中有某个东西效果很好时，你通常可以在一些早期绘画中以较小的形式找到它的版本1。\n我认为大多数创造者都是这样工作的。作家和建筑师似乎也是如此。也许黑客应该更像画家，定期从头开始，而不是继续在一个项目上工作多年，并试图将他们以后的想法作为修订纳入其中。\n黑客通过做来学习黑客这一事实是黑客与科学不同的另一个标志。科学家不是通过做科学来学习科学，而是通过做实验和解决问题集。科学家开始做的工作是完美的，在这个意义上说，他们只是试图重现别人已经为他们做过的工作。最终，他们达到可以做原创工作的地步。而黑客从一开始就在做原创工作；只是非常糟糕。所以黑客从原创开始，然后变好，科学家从好开始，然后变原创。\n创造者学习的另一种方式是通过例子。对画家来说，博物馆是技术参考图书馆。数百年来，复制大师作品一直是画家传统教育的一部分，因为复制迫使你仔细审视绘画的制作方式。\n作家也这样做。本杰明·富兰克林通过总结艾迪生和斯蒂尔散文中的观点，然后尝试重现它们来学习写作。雷蒙德·钱德勒对侦探故事做了同样的事情。\n同样，黑客可以通过看好的程序来学习编程——不仅看它们做什么，还看源代码。开源运动不太公开的好处之一是它使学习编程变得更容易。当我学习编程时，我们主要依靠书中的例子。当时可用的一大块代码是Unix，但即使这不是开源的。大多数阅读源代码的人是通过约翰·莱昂斯书的非法影印本来阅读的，这本书虽然写于1977年，但直到1996年才被允许出版。\n我们可以从绘画中借鉴的另一个例子是绘画是通过渐进改进而创造的。绘画通常从素描开始。逐渐地，细节被填入。但这不仅仅是填入的过程。有时原来的计划被证明是错误的。无数的绘画，当你用X光看时，发现肢体被移动了或面部特征被重新调整了。\n这里有一个我们可以从绘画中学习的例子。我认为黑客也应该这样工作。期望程序的规格说明是完美的是不现实的。如果你提前承认这一点，并以允许规格说明在运行中更改的方式编写程序，你会更好。\n（大公司的结构使他们很难做到这一点，所以这是创业公司有优势的另一个地方。）\n现在大概每个人都知道过早优化的危险。我认为我们应该同样担心过早设计——过早决定程序应该做什么。\n正确的工具可以帮助我们避免这种危险。一个好的编程语言应该像油画一样，使你容易改变主意。动态类型在这里是个优势，因为你不必预先承诺特定的数据表示。但我认为灵活性的关键是使语言非常抽象。最容易更改的程序是非常短的程序。这听起来像是一个悖论，但一幅伟大的绘画必须比它必须的要更好。例如，当莱昂纳多在华盛顿国家美术馆画吉内薇拉·德·班奇的肖像时，她在她头后放了一棵杜松树。他在其中仔细地画了每一片叶子。许多画家可能认为，这只是放在背景中框住她头部的东西。没有人会那么仔细地看它。\n不是莱昂纳多。他在画的一部分上工作的努力程度完全不取决于他期望任何人看它的程度。他像迈克尔·乔丹。无情。\n无情获胜是因为，总的来说，看不见的细节变得可见。当人们走过吉内薇拉·德·班奇的肖像时，他们的注意力常常立即被它吸引，甚至在他们看标签并注意到它说莱昂纳多·达·芬奇之前。所有那些看不见的细节结合在一起产生了一些令人惊叹的东西，就像一千个几乎听不见的声音都在和谐地歌唱。\n伟大的软件同样需要对美的狂热奉献。如果你看好的软件内部，你会发现那些永远不应该被看见的部分也是美丽的。我不声称我写伟大的软件，但我知道当涉及到代码时，我的行为方式如果用在日常生活中会让我有资格获得处方药。看到缩进糟糕的代码或使用丑陋变量名的代码会让我发疯。\n如果黑客只是一个实现者，将规范变成代码，那么他就可以像挖沟的人一样从一端到另一端完成工作。但如果黑客是创造者，我们必须考虑灵感。\n黑客像绘画一样，工作是周期性的。有时你对某个新项目感到兴奋，一天想工作十六个小时。有时似乎没有什么有趣的。\n要做好工作，你必须考虑这些周期，因为它们受到你对他们反应的影响。当你在山坡上驾驶手动变速器汽车时，你必须有时松开离合器以避免熄火。松开同样可以防止雄心熄火。在绘画和黑客中，有些任务是令人恐惧的雄心勃勃的，有些则是令人安慰的常规。留一些容易的任务给那些否则会停滞的时刻是个好主意。\n在黑客中，这实际上可能意味着保存错误。我喜欢调试：这是黑客像人们认为的那样直截了当的唯一一次。你有一个完全受限的问题，你只需要解决它。你的程序应该做x。相反它做y。它哪里出错了？你知道你最终会赢。这就像刷墙一样放松。\n绘画的例子不仅可以教我们如何管理自己的工作，还可以教我们如何一起工作。许多过去的伟大艺术是多人之手的作品，尽管博物馆墙上可能只有一个名字。莱昂纳多是维罗基奥工作室的学徒，画了他的《基督受洗》中的一个天使。这种事情是规则，而不是例外。米开朗基罗因为坚持亲自绘制西斯廷教堂天花板上的所有人物而被认为特别专注。\n据我所知，当画家一起在一幅画上工作时，他们从不工作的相同部分。大师画主要人物，助手画其他人物和背景是常见的。但你从来没有一个人在另一个人的作品上绘画。\n我认为这是软件协作的正确模式。不要推得太远。当一段代码被三四个不同的人黑客攻击，没有人真正拥有它时，它最终会像一个公共休息室。它往往会感觉荒凉和被遗弃，并积累无用之物。我认为协作的正确方法是将项目分成明确定义的模块，每个模块都有明确的拥有者，它们之间的接口尽可能精心设计，如果可能的话，像编程语言一样明确。\n像绘画一样，大多数软件是为人类受众准备的。因此，像画家一样，黑客必须有同理心才能做真正伟大的工作。你必须能够从用户的角度看问题。\n当我还是个孩子的时候，我总是被告知要从别人的角度看问题。这在实践中总是意味着做别人想要的事情，而不是我想要的事情。这当然给同理心一个坏名声，我故意不培养它。\n哦，我错了。事实证明，从别人的角度看问题实际上是成功的秘密。这不一定意味着自我牺牲。远非如此。理解别人如何看待事物并不意味着你会为他的利益行事；在某些情况下——例如，在战争中——你想做的恰恰相反。[4]\n大多数创造者为人类受众制造东西。要吸引受众，你必须理解他们需要什么。例如，几乎所有最伟大的绘画都是人物画，因为人对人感兴趣。\n",
    "description": "",
    "tags": ["黑客","绘画","编程","软件设计","计算机科学","创造力","艺术"],
    "categories": [],
    "content": "→ English Version\n黑客与画家 2003年5月\n（本文源于在哈佛大学的一次客座讲座，该讲座整合了之前在东北大学的一次演讲。）\n当我完成计算机科学研究生学业后，我去艺术学院学习绘画。很多人似乎对感兴趣于计算机的人也会对绘画感兴趣感到惊讶。他们似乎认为黑客和绘画是截然不同的工作类型——黑客工作是冷酷、精确、有条理的，而绘画则是某种原始冲动的狂热表达。\n这两种形象都是错误的。黑客和绘画有很多共同之处。事实上，在我认识的所有不同类型的人中，黑客和画家是最相似的。\n黑客和画家的共同点是他们都是创造者。与作曲家、建筑师和作家一样，黑客和画家试图做的是创造好东西。他们本身并不是在做研究，尽管在试图创造好东西的过程中他们发现了一些新技术，那就更好了。\n我从来不喜欢\u0026quot;计算机科学\u0026quot;这个词。我不喜欢它的主要原因是没有这样的东西。计算机科学是一堆关系不大的领域的拼凑，因历史的偶然而被组合在一起，就像南斯拉夫一样。一端是实际上是数学家的人，但他们称自己做的事情为计算机科学，以便获得DARPA资助。中间是从事类似计算机自然史工作的人——例如研究通过网络路由数据的算法行为。然后在另一端是黑客，他们试图编写有趣的软件，对他们来说，计算机只是表达媒介，就像对建筑师来说是混凝土，对画家来说是颜料一样。这就像是数学家、物理学家和建筑师都必须在同一个系里一样。\n有时黑客所做的事情被称为\u0026quot;软件工程\u0026quot;，但这个术语同样具有误导性。优秀的软件设计师并不比建筑师更像工程师。建筑和工程之间的界限并没有明确界定，但它是存在的。它在于做什么和如何做之间：建筑师决定做什么，工程师弄清楚如何做。\n做什么和如何做不应过于分离。如果你试图在不知道如何做的情况下决定做什么，那是在自找麻烦。但黑客工作绝不仅仅是决定如何实现某个规范。在最好的情况下，它是创建规范——但事实证明做到这一点的最好方法是实现它。\n也许有一天\u0026quot;计算机科学\u0026quot;会像南斯拉夫一样被分解成其组成部分。这可能是件好事。特别是如果这意味着我自己的领域——黑客的独立。\n将所有这些不同类型的工作捆绑在一个部门可能在行政上很方便，但在智力上是混乱的。这是我不喜欢\u0026quot;计算机科学\u0026quot;这个名字的另一个原因。可以说，中间的人在做类似实验科学的事情。但两端的人，黑客和数学家，实际上并不是在做科学。\n数学家似乎并不为此困扰。他们很高兴地开始证明定理，就像数学系的数学家一样，并且很快就会停止注意到他们工作的建筑外面写着\u0026quot;计算机科学\u0026quot;。但对黑客来说，这个标签是个问题。如果他们所做的事情被称为科学，这让他们觉得他们应该表现得科学。因此，大学和研究实验室里的黑客不做他们真正想做的事情，即设计美丽的软件，而是觉得他们应该写研究论文。\n在最好的情况下，论文只是一种形式。黑客编写很酷的软件，然后写一篇关于它的论文，论文就成为了软件所代表成就的代理。但这种不匹配经常导致问题。很容易从创造美丽的东西转向创造丑陋的东西，而这些东西更适合作为研究论文的题材。\n不幸的是，美丽的东西并不总是最好的论文主题。首先，研究必须是原创的——正如任何写过博士论文的人所知，确保你在探索未知领域的方法是占据一块没有人想要的地盘。其次，研究必须是实质性的——笨拙的系统会产生更丰富的论文，因为你可以写为了完成工作而必须克服的障碍。没有什么比从错误假设开始更能产生丰富的问题了。大多数人工智能都是这个规则的例子；如果你假设知识可以表示为谓词逻辑表达式的列表，其参数代表抽象概念，你将有很多论文要写关于如何使其工作。正如里奇·里卡多常说的：\u0026ldquo;露西，你有很多解释要做。\u0026rdquo;\n创造美丽东西的方法往往是对现有事物进行微妙的调整，或者以稍新的方式组合现有的想法。这种工作很难在研究论文中传达。\n那么为什么大学和研究实验室继续用出版物来判断黑客呢？原因与\u0026quot;学术能力\u0026quot;用简单的标准化测试衡量，或者程序员的生产力用代码行数衡量是一样的。这些测试很容易应用，没有什么比一个勉强有效的简单测试更诱人的了。\n衡量黑客真正试图做的事情，设计美丽的软件，会困难得多。你需要良好的设计感来判断好的设计。人们识别好设计的能力与他们对自己能做到的信心之间没有任何相关性，除了可能是负相关。\n唯一的外部测试是时间。随着时间的推移，美丽的东西往往会繁荣，丑陋的东西往往会被抛弃。不幸的是，所涉及的时间可能比人类寿命还长。塞缪尔·约翰逊说，作家的声誉需要一百年才能收敛。你必须等待作家有影响力的朋友死去，然后他们所有的追随者都死去。\n我认为黑客只能接受自己声誉中有很大的随机成分。在这方面，他们与其他创造者没有什么不同。事实上，相比之下，他们是幸运的。时尚在黑客中的影响力远不如在绘画中那么大。\n有比被人误 …"
  },{
    "title": "黑客这个词",
    "url": "/paul_graham/essays_zh/gba/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n黑客这个词 2004年4月\n对大众媒体来说，\u0026ldquo;黑客\u0026quot;意味着闯入计算机的人。在程序员中，它意味着一个好的程序员。但这两种含义是相连的。对程序员来说，\u0026ldquo;黑客\u0026quot;在最字面的意义上意味着精通：能够让计算机做他想要的事情的人——不管计算机是否愿意。\n更令人困惑的是，名词\u0026quot;hack\u0026quot;也有两种含义。它可以是赞美，也可以是侮辱。当你用丑陋的方式做某事时，这被称为hack。但当你做某事如此聪明以至于你以某种方式击败了系统时，那也被称为hack。这个词在前一种含义中比后一种更常用，可能是因为丑陋的解决方案比 brilliant 的更常见。\n信不信由你，\u0026ldquo;hack\u0026quot;的两种含义也是相连的。丑陋和富有想象力的解决方案有共同之处：它们都打破了规则。在仅仅丑陋的违规（用胶带把东西 attach 到你的自行车上）和 brilliantly 富有想象力的违规（丢弃欧几里得空间）之间存在一个逐渐的连续谱。\n黑客文化比计算机更早。当理查德·费曼在曼哈顿计划工作时，他常常通过闯入包含秘密文件的保险箱来娱乐自己。这个传统今天仍在继续。当我们读研究生时，我的一位在MIT周围花了太多时间的黑客朋友有自己的开锁工具包。（他现在经营对冲基金，这不是一个无关的企业。）\n有时候很难向当局解释为什么有人会想做这种事情。我的另一个朋友曾经因为闯入计算机而与政府惹上麻烦。这最近才被宣布为犯罪，FBI发现他们通常的调查技术不起作用。警察调查显然是从动机开始的。通常的动机很少：毒品、金钱、性、复仇。智力好奇心不在FBI的动机清单上。确实，整个概念对他们来说似乎很陌生。\n当权者往往对黑客普遍的不服从态度感到恼火。但这种不服从是使他们成为优秀程序员的品质的副产品。当CEO用通用的企业新闻发言时，他们可能会嘲笑他，但他们也会嘲笑告诉他们某个问题无法解决的人。压制一个，你就压制了另一个。\n这种态度有时是装出来的。有时年轻的程序员注意到著名黑客的怪癖，并决定采用一些自己的怪癖，以便看起来更聪明。虚假版本不仅令人讨厌；这些伪装者的 prickly 态度实际上会减慢创新过程。\n但即使考虑到他们令人讨厌的怪癖，黑客的不服从态度也是一个净胜利。我希望它的优势能被更好地理解。\n例如，我怀疑好莱坞的人们对黑客对版权的态度感到困惑。它们是Slashdot上激烈讨论的 perennial 话题。但是，为什么编程的人们应该如此关心版权，在所有事情中？\n部分原因是有些公司使用机制来防止复制。向任何黑客展示一把锁，他的第一个念头是如何打开它。但黑客对版权和专利等措施感到警惕有更深层次的原因。他们将 increasingly 激进的措施保护\u0026quot;知识产权\u0026quot;视为对他们工作所需的 intellectual freedom 的威胁。他们是对的。\n正是通过在当前技术内部探查，黑客才获得了下一代的想法。不，谢谢，知识产权所有者可能会说，我们不需要任何外部帮助。但他们错了。下一代计算机技术经常——或许比不是更经常——是由外人开发的。\n1977年，毫无疑问IBM内部有一些团体正在开发他们期望成为下一代商业计算机的东西。他们错了。下一代商业计算机正在由两个名叫史蒂夫的长发男人在洛斯阿尔托斯的车库里以完全不同的线路开发。大约在同一时间，当权者正在合作开发官方的下一代操作系统Multics。但两个认为Multics过于复杂的家伙离开去写自己的系统。他们给它起了一个对Multics开玩笑的名字：Unix。\n最新的知识产权法律对导致新想法的那种探查施加了前所未有的限制。在过去，竞争对手可能使用专利来阻止你销售他们制造的东西的副本，但他们不能阻止你拆开一个来看它是如何工作的。最新的法律使这成为犯罪。如果我们不能研究当前技术来弄清楚如何改进它，我们如何开发新技术？\n具有讽刺意味的是，黑客自己招致了这一点。计算机是造成问题的原因。机器内的控制系统过去是物理的：齿轮、杠杆和凸轮。 increasingly，产品的大脑（从而价值）在软件中。我指的是一般意义上的软件：即数据。LP上的歌曲是物理压印在塑料中的。iPod磁盘上的歌曲只是存储在上面。\n数据根据定义很容易复制。互联网使副本容易分发。所以公司害怕不足为奇。但是，像经常发生的那样，恐惧模糊了他们的判断。政府用严酷的法律来保护知识产权。他们可能是好意的。但他们可能没有意识到这样的法律弊大于利。\n为什么程序员如此强烈地反对这些法律？如果我是一个立法者，我会对这个谜团感兴趣——出于同样的原因，如果我是一个农民，突然一天晚上听到很多咯咯声来自我的鸡舍，我会想要出去调查。黑客不笨，而这个世界上 unanimity 很罕见。所以如果他们都在咯咯叫，也许有什么不对劲。\n难道这样的法律，虽然意图保护美国，但实际上会伤害它吗？想想看。费曼在曼哈顿计划期间闯入保险箱有一些非常美国化的东西。很难想象当时的德国当局对这类事情有幽默感。也许这不是巧合。\n黑客是不守规矩的。这就是黑客的本质。这也是美国精神的本质。硅谷在美国，而不是法国、德国、英国或日本，这绝非偶然。在那些国家，人们在 lines 内着色。\n我在佛罗伦萨住了一段时间。但在那里呆了几个月后，我意识到我无意识希望在那里找到的东西 back 在我刚刚离开的地方。佛罗伦萨著名的原因是，在1450年，它是纽约。在1450年，它充满了你现在在美国发现的那种动荡和雄心勃勃的人。（所以我回到了美国。）\n美国的一个巨大优势是它为正确的那种不守规矩提供了宜人的氛围——它不仅是聪明人的家园，也是 smart-alecks 的家园。黑客 invariably 是 smart-alecks。如果我们有一个国定假日，那将是4月1日。我们对 brilliant 或可怕 cheesy 的解决方案使用同一个词，这充分说明了我们的工作。当我们炮制出一个时，我们不总是100%确定它是哪种。但只要它有正确的错误类型，那就是一个有希望的迹象。人们认为编程是精确和有条理的，这很奇怪。计算机是精确和有条理的。黑客是你在开怀大笑时做的事情。\n在我们的世界中，一些最具特征的解决方案与恶作剧相去不远。IBM无疑对DOS许可证协议的后果感到相当惊讶，就像假设的\u0026quot;对手\u0026quot;在迈克尔·拉宾通过将问题重新定义为更容易解决的问题来解决问题时必须感到的那样。\nSmart-alecks 必须 develop 对他们能逃脱多少的敏锐感觉。最近黑客已经感觉到气氛的变化。最近黑客精神似乎相当不被人看好。\n对黑客来说，最近公民自由的收缩似乎特别不祥。这也一定让外人感到困惑。为什么我们应该特别关心公民自由？为什么程序员比牙医、推销员或园林设计师更关心？\n让我用政府官员会欣赏的术语来说明这个 case。公民自由不仅仅是一种装饰，或一种古怪的 American 传统。公民自由使国家富裕。如果你绘制人均GNP与公民自由的图表，你会注意到一个明确的趋势。公民自由真的可能是一个原因，而不仅仅是一个结果？我认为是的。我认为一个人们可以做和说他们想做的事情的社会也倾向于一个最有效的解决方案获胜的社会，而不是那些最有影响力的人赞助的解决方案。威权国家变得腐败；腐败国家变得贫穷；贫穷国家是弱小的。在我看来，政府权力有一条拉弗曲线，就像税收收入一样。至少，这似乎足够可能，以至于尝试实验并发现会是愚蠢的。与高税率不同，如果证明是一个错误，你不能废除极权主义。\n这就是黑客担心的原因。政府监视人们并不会让程序员写更差的代码。它只是最终导致一个坏想法获胜的世界。因为这对黑客如此重要，他们对此特别敏感。他们能从远处感知极权主义的 approaching，就像动物能感知 approaching 雷暴一样。\n如果像黑客担心的那样，最近旨在保护国家安全和知识产权的措施被证明是一枚导弹，正好瞄准了使美国成功的东西，那将是讽刺的。但这不会是第一次在恐慌气氛中采取的措施产生了与预期相反的效果。\n",
    "description": "",
    "tags": ["黑客","编程","知识产权","创新","公民自由","技术"],
    "categories": [],
    "content": "→ English Version\n黑客这个词 2004年4月\n对大众媒体来说，\u0026ldquo;黑客\u0026quot;意味着闯入计算机的人。在程序员中，它意味着一个好的程序员。但这两种含义是相连的。对程序员来说，\u0026ldquo;黑客\u0026quot;在最字面的意义上意味着精通：能够让计算机做他想要的事情的人——不管计算机是否愿意。\n更令人困惑的是，名词\u0026quot;hack\u0026quot;也有两种含义。它可以是赞美，也可以是侮辱。当你用丑陋的方式做某事时，这被称为hack。但当你做某事如此聪明以至于你以某种方式击败了系统时，那也被称为hack。这个词在前一种含义中比后一种更常用，可能是因为丑陋的解决方案比 brilliant 的更常见。\n信不信由你，\u0026ldquo;hack\u0026quot;的两种含义也是相连的。丑陋和富有想象力的解决方案有共同之处：它们都打破了规则。在仅仅丑陋的违规（用胶带把东西 attach 到你的自行车上）和 brilliantly 富有想象力的违规（丢弃欧几里得空间）之间存在一个逐渐的连续谱。\n黑客文化比计算机更早。当理查德·费曼在曼哈顿计划工作时，他常常通过闯入包含秘密文件的保险箱来娱乐自己。这个传统今天仍在继续。当我们读研究生时，我的一位在MIT周围花了太多时间的黑客朋友有自己的开锁工具包。（他现在经营对冲基金，这不是一个无关的企业。）\n有时候很难向当局解释为什么有人会想做这种事情。我的另一个朋友曾经因为闯入计算机而与政府惹上麻烦。这最近才被宣布为犯罪，FBI发现他们通常的调查技术不起作用。警察调查显然是从动机开始的。通常的动机很少：毒品、金钱、性、复仇。智力好奇心不在FBI的动机清单上。确实，整个概念对他们来说似乎很陌生。\n当权者往往对黑客普遍的不服从态度感到恼火。但这种不服从是使他们成为优秀程序员的品质的副产品。当CEO用通用的企业新闻发言时，他们可能会嘲笑他，但他们也会嘲笑告诉他们某个问题无法解决的人。压制一个，你就压制了另一个。\n这种态度有时是装出来的。有时年轻的程序员注意到著名黑客的怪癖，并决定采用一些自己的怪癖，以便看起来更聪明。虚假版本不仅令人讨厌；这些伪装者的 prickly 态度实际上会减慢创新过程。\n但即使考虑到他们令人讨厌的怪癖，黑客的不服从态度也是一个净胜利。我希望它的优势能被更好地理解。\n例如，我怀疑好莱坞的人们对黑客对版权的态度感到困惑。它们是Slashdot上激烈讨论的 perennial 话题。但是，为什么编程的人们应该如此关心版权，在所有事情中？\n部分原因是有些公司使用机制来防止复制。向任何黑客展示一把锁，他的第一个念头是如何打开它。但黑客对版权和专利等措施感到警惕有更深层次的原因。他们将 increasingly 激进的措施保护\u0026quot;知识产权\u0026quot;视为对他们工作所需的 intellectual freedom 的威胁。他们是对的。\n正是通过在当前技术内部探查，黑客才获得了下一代的想法。不，谢谢，知识产权所有者可能会说，我们不需要任何外部帮助。但他们错了。下一代计算机技术经常——或许比不是更经常——是由外人开发的。\n1977年，毫无疑问IBM内部有一些团体正在开发他们期望成为下一代商业计算机的东西。他们错了。下一代商业计算机正在由两个名叫史蒂夫的长发男人在洛斯阿尔托斯的车库里以完全不同的线路开发。大约在同一时间，当权者正在合作开发官方的下一代操作系统Multics。但两个认为Multics过于复杂的家伙离开去写自己的系统。他们给它起了一个对Multics开玩笑的名字：Unix。\n最新的知识产权法律对导致新想法的那种探查施加了前所未有的限制。在过去，竞争对手可能使用专利来阻止你销售他们制造的东西的副本，但他们不能阻止你拆开一个来看它是如何工作的。最新的法律使这成为犯罪。如果我们不能研究当前技术来弄清楚如何改进它，我们如何开发新技术？\n具有讽刺意味的是，黑客自己招致了这一点。计算机是造成问题的原因。机器内的控制系统过去是物理的：齿轮、杠杆和凸轮。 increasingly，产品的大脑（从而价值）在软件中。我指的是一般意义上的软件：即数据。LP上的歌曲是物理压印在塑料中的。iPod磁盘上的歌曲只是存储在上面。\n数据根据定义很容易复制。互联网使副本容易分发。所以公司害怕不足为奇。但是，像经常发生的那样，恐惧模糊了他们的判断。政府用严酷的法律来保护知识产权。他们可能是好意的。但他们可能没有意识到这样的法律弊大于利。\n为什么程序员如此强烈地反对这些法律？如果我是一个立法者，我会对这个谜团感兴趣——出于同样的原因，如果我是一个农民，突然一天晚上听到很多咯咯声来自我的鸡舍，我会想要出去调查。黑客不笨，而这个世界上 unanimity 很罕见。所以如果他们都在咯咯叫，也许有什么不对劲。\n难道这样的法 …"
  },{
    "title": "黑粉",
    "url": "/paul_graham/essays_zh/fh/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n黑粉 2020年1月\n（我最初打算为创业创始人写这篇文章，创始人经常对他们公司成长过程中获得的关注感到惊讶，但这同样适用于任何变得出名的人。）\n如果你变得足够有名，你会获得一些过分喜欢你的粉丝。这些人有时被称为\u0026quot;脑残粉\u0026quot;，虽然我不喜欢这个词，但我不得不在这里使用它。我们需要一个词来称呼他们，因为这与单纯喜欢你的作品是不同的现象。\n脑残粉是痴迷且不加批判的。喜欢你成为他们身份的一部分，他们在自己心中创造了一个你的形象，这个形象比现实好得多。你所做的一切都是好的，因为你做了。如果你做了坏事，他们会想办法把它看成好的。而且他们对你的爱通常不是安静、私人的。他们想让每个人都知道你有多棒。\n好吧，你可能会想，我可以没有这种痴迷的粉丝，但我知道世界上有各种各样的人，如果这是名声最坏的后果，那还不算太糟。\n不幸的是，这不是名声最坏的后果。除了脑残粉，你还会遇到黑粉。\n黑粉是痴迷且不加批判的。不喜欢你成为他们身份的一部分，他们在自己心中创造了一个你的形象，这个形象比现实差得多。你所做的一切都是坏的，因为你做了。如果你做了好事，他们会想办法把它看成坏的。而且他们对你的不喜欢通常不是安静、私人的。他们想让每个人都知道你有多糟糕。\n如果你想检查，我替你省了麻烦。第二段和第五段除了\u0026quot;好\u0026quot;被换成\u0026quot;坏\u0026quot;等等之外是相同的。\n我花了几年时间思考黑粉。他们是什么，他们从哪里来？然后有一天我突然明白了。黑粉只是符号位翻转的脑残粉。\n注意，我说的黑粉，不仅仅是指喷子。我不是指那些说了你坏话然后继续前进的人。我说的是更小的一群人，对他们来说这变成了一种痴迷，他们在很长一段时间内反复这样做。\n和粉丝一样，黑粉似乎是名声的自动后果。任何足够有名的人都会有黑粉。和粉丝一样，黑粉因他们所恨的人的名声而精力充沛。他们听到某个流行歌手的歌。他们不太喜欢。如果歌手是个无名小卒，他们就会忘记它。但他们不断听到她的名字，这似乎让一些人发疯。每个人都在谈论这个歌手，但她并不好！她是个骗子！\n\u0026ldquo;骗子\u0026quot;这个词很重要。将仇恨对象视为骗子是黑粉的光谱特征。他们不能否认他们的名声。事实上，他们的名声在黑粉心中被夸大了。他们注意到歌手名字的每一次提及，因为每一次提及都让他们更愤怒。在他们自己的心中，他们既夸大了歌手的名声，又夸大了她缺乏才华，调和这两个想法的唯一方法是得出结论：她欺骗了所有人。\n什么样的人会成为黑粉？任何人都能成为黑粉吗？我不确定这个，但我注意到一些模式。黑粉在非常特定的意义上一般是失败者：虽然他们偶尔有才华，但他们从未取得多大成就。确实，任何足够成功、获得重要名声的人不太可能仅仅因为这个原因而将另一个名人视为骗子，因为任何有名的人都知道名声是多么随机。\n但黑粉并不总是彻底的失败者。他们并不总是住在妈妈地下室里的传说中的人。许多是的，但有些人有一定的才华。事实上，我怀疑一种受挫的才华感是驱使一些人成为黑粉的原因。他们不仅仅在说\u0026quot;某某出名是不公平的\u0026rdquo;，而是\u0026quot;某某出名，而不是我，这是不公平的\u0026quot;。\n如果一个黑粉取得了令人印象深刻的成就，他能被治愈吗？我的猜测这是一个有争议的问题，因为他们永远不会。我已经观察了足够长的时间，我相当确信这个模式在两个方向上都有效：不仅做伟大工作的人永远不会成为黑粉，黑粉也永远不会做伟大的工作。\n虽然我不喜欢\u0026quot;脑残粉\u0026quot;这个词，但它暗示了关于黑粉和脑残粉的重要事情。这意味着脑残粉在崇拜方面如此可预测地奴性，以至于他被贬低了，他不像个男人。\n黑粉似乎更加被贬低。我可以想象成为一个脑残粉。我能想到一些人的作品我如此钦佩，以至于我可以出于纯粹的感激在他们面前卑躬屈膝。如果P.G.伍德豪斯还活着，我可以想象自己成为一个伍德豪斯脑残粉。但我无法想象成为一个黑粉。\n知道黑粉只是符号位翻转的脑残粉，使得与他们打交道容易得多。我们不需要单独的黑粉理论。我们只能使用现有的技术来处理痴迷的粉丝。\n其中最重要的是不要多想他们。如果你像大多数变得足够有名而获得黑粉的人一样，你的初始反应会是困惑。为什么这家伙似乎对我怀恨在心？他的痴迷能量来自哪里，什么让他如此令人讨厌地恶心？我做了什么让他生气？这是我能修复的吗？\n这里的错误是将黑粉视为与你发生争执的人。当你与某人发生争执时，通常最好试图理解他们为什么生气，然后如果可以的话修复问题。争执是分散注意力的。但将黑粉视为与你发生争执的人是错误的类比。如果你以前从未遇到过黑粉，这是一个可以理解的错误。但当你意识到你正在处理黑粉，以及黑粉是什么时，很明显即使是思考他们也是浪费时间。如果你有痴迷的粉丝，你会花时间思考是什么让他们如此爱你吗？不，你只是想\u0026quot;有些人有点疯狂\u0026quot;，就这样了。\n既然黑粉等同于脑残粉，那么对待他们的方式也是如此。可能有某些事情引发了他们。但这不是会引发正常人的事情，所以没有理由花时间思考它。不是你的问题，是他们的问题。\n注释 [1] 当然有一些人是真正的骗子。如何区分x因为x是黑粉而称y是骗子，以及因为y是骗子而称y是骗子？看看中立的看法。真正的骗子通常相当引人注目。有思想的人很少被他们欺骗。所以如果有一些有思想的人喜欢y，你通常可以假设y不是骗子。\n[2] 我会对青少年例外，他们有时以如此极端的方式行事，以至于他们字面上不是自己。我可以想象一个青少年成为黑粉然后长大脱离这种情况。但任何超过25岁的人都不会。\n[3] 我对不当行为的记忆比我妻子杰西卡差得多，她是性格鉴赏家，但我不希望它更好。即使你是对的，大多数争执也是浪费时间，如果你不记得为什么对他们生气，很容易与他们和解。\n[4] 一个有能力的黑粉不仅会单独攻击你，还会试图让暴民追捕你。在某些情况下，你可能想驳斥他们为了这样做而提出的任何虚假主张。但倾向于不这样做，因为最终可能无关紧要。\n感谢Austen Allred、Trevor Blackwell、Patrick Collison、Christine Ford、Daniel Gackle、Jessica Livingston、Robert Morris、Elon Musk、Harj Taggar和Peter Thiel阅读了本文的草稿。\n",
    "description": "",
    "tags": ["名声","心理学","批评","成功","心态"],
    "categories": [],
    "content": "→ English Version\n黑粉 2020年1月\n（我最初打算为创业创始人写这篇文章，创始人经常对他们公司成长过程中获得的关注感到惊讶，但这同样适用于任何变得出名的人。）\n如果你变得足够有名，你会获得一些过分喜欢你的粉丝。这些人有时被称为\u0026quot;脑残粉\u0026quot;，虽然我不喜欢这个词，但我不得不在这里使用它。我们需要一个词来称呼他们，因为这与单纯喜欢你的作品是不同的现象。\n脑残粉是痴迷且不加批判的。喜欢你成为他们身份的一部分，他们在自己心中创造了一个你的形象，这个形象比现实好得多。你所做的一切都是好的，因为你做了。如果你做了坏事，他们会想办法把它看成好的。而且他们对你的爱通常不是安静、私人的。他们想让每个人都知道你有多棒。\n好吧，你可能会想，我可以没有这种痴迷的粉丝，但我知道世界上有各种各样的人，如果这是名声最坏的后果，那还不算太糟。\n不幸的是，这不是名声最坏的后果。除了脑残粉，你还会遇到黑粉。\n黑粉是痴迷且不加批判的。不喜欢你成为他们身份的一部分，他们在自己心中创造了一个你的形象，这个形象比现实差得多。你所做的一切都是坏的，因为你做了。如果你做了好事，他们会想办法把它看成坏的。而且他们对你的不喜欢通常不是安静、私人的。他们想让每个人都知道你有多糟糕。\n如果你想检查，我替你省了麻烦。第二段和第五段除了\u0026quot;好\u0026quot;被换成\u0026quot;坏\u0026quot;等等之外是相同的。\n我花了几年时间思考黑粉。他们是什么，他们从哪里来？然后有一天我突然明白了。黑粉只是符号位翻转的脑残粉。\n注意，我说的黑粉，不仅仅是指喷子。我不是指那些说了你坏话然后继续前进的人。我说的是更小的一群人，对他们来说这变成了一种痴迷，他们在很长一段时间内反复这样做。\n和粉丝一样，黑粉似乎是名声的自动后果。任何足够有名的人都会有黑粉。和粉丝一样，黑粉因他们所恨的人的名声而精力充沛。他们听到某个流行歌手的歌。他们不太喜欢。如果歌手是个无名小卒，他们就会忘记它。但他们不断听到她的名字，这似乎让一些人发疯。每个人都在谈论这个歌手，但她并不好！她是个骗子！\n\u0026ldquo;骗子\u0026quot;这个词很重要。将仇恨对象视为骗子是黑粉的光谱特征。他们不能否认他们的名声。事实上，他们的名声在黑粉心中被夸大了。他们注意到歌手名字的每一次提及，因为每一次提及都让他们更愤怒。在他们自己的心中，他们既夸大了歌手的名声，又夸大了她缺乏才华，调和这两个想法的唯一方法是得出结论：她欺骗了所有人。\n什么样的人会成为黑粉？任何人都能成为黑粉吗？我不确定这个，但我注意到一些模式。黑粉在非常特定的意义上一般是失败者：虽然他们偶尔有才华，但他们从未取得多大成就。确实，任何足够成功、获得重要名声的人不太可能仅仅因为这个原因而将另一个名人视为骗子，因为任何有名的人都知道名声是多么随机。\n但黑粉并不总是彻底的失败者。他们并不总是住在妈妈地下室里的传说中的人。许多是的，但有些人有一定的才华。事实上，我怀疑一种受挫的才华感是驱使一些人成为黑粉的原因。他们不仅仅在说\u0026quot;某某出名是不公平的\u0026rdquo;，而是\u0026quot;某某出名，而不是我，这是不公平的\u0026quot;。\n如果一个黑粉取得了令人印象深刻的成就，他能被治愈吗？我的猜测这是一个有争议的问题，因为他们永远不会。我已经观察了足够长的时间，我相当确信这个模式在两个方向上都有效：不仅做伟大工作的人永远不会成为黑粉，黑粉也永远不会做伟大的工作。\n虽然我不喜欢\u0026quot;脑残粉\u0026quot;这个词，但它暗示了关于黑粉和脑残粉的重要事情。这意味着脑残粉在崇拜方面如此可预测地奴性，以至于他被贬低了，他不像个男人。\n黑粉似乎更加被贬低。我可以想象成为一个脑残粉。我能想到一些人的作品我如此钦佩，以至于我可以出于纯粹的感激在他们面前卑躬屈膝。如果P.G.伍德豪斯还活着，我可以想象自己成为一个伍德豪斯脑残粉。但我无法想象成为一个黑粉。\n知道黑粉只是符号位翻转的脑残粉，使得与他们打交道容易得多。我们不需要单独的黑粉理论。我们只能使用现有的技术来处理痴迷的粉丝。\n其中最重要的是不要多想他们。如果你像大多数变得足够有名而获得黑粉的人一样，你的初始反应会是困惑。为什么这家伙似乎对我怀恨在心？他的痴迷能量来自哪里，什么让他如此令人讨厌地恶心？我做了什么让他生气？这是我能修复的吗？\n这里的错误是将黑粉视为与你发生争执的人。当你与某人发生争执时，通常最好试图理解他们为什么生气，然后如果可以的话修复问题。争执是分散注意力的。但将黑粉视为与你发生争执的人是错误的类比。如果你以前从未遇到过黑粉，这是一个可以理解的错误。但当你意识到你正在处理黑粉，以及黑粉是什么时，很明显即使是思考他们也是浪费时间。如果你有痴迷的粉丝，你会花时间思考是什么让他们如此爱你吗？不，你只是想\u0026quot;有些人有点 …"
  },{
    "title": "默认生存还是默认死亡？",
    "url": "/paul_graham/essays_zh/aord/",
    "section": "paul_graham",
    "date": "0001-01-01",
    "summary": "→ English Version\n默认生存还是默认死亡？ 2015年10月\n当我和一家已经运营了8、9个月以上的创业公司交谈时，我想要知道的第一件事几乎总是相同的。假设他们的支出保持不变，收入增长是过去几个月的水平，他们能凭借剩余的资金实现盈利吗？或者更戏剧性地说，默认情况下他们会生存还是会死亡？\n令人震惊的是，创始人自己往往不知道。我交谈的创始人中有一半不知道自己是默认生存还是默认死亡。\n如果你也在其中，Trevor Blackwell制作了一个方便的计算器，你可以用它来找出答案。\n我首先想知道一家创业公司是默认生存还是默认死亡的原因是，接下来的对话取决于这个答案。如果公司是默认生存的，我们可以谈论他们可能做的雄心勃勃的新事情。如果是默认死亡的，我们可能需要讨论如何拯救它。我们知道当前的轨迹会很糟糕。他们如何摆脱这个轨迹？\n为什么很少有创始人知道自己是否是默认生存还是默认死亡？主要原因是，他们不习惯问这个问题。早期问这个问题没有意义，就像问一个3岁的孩子打算如何养活自己一样。但随着公司年龄的增长，这个问题从无意义变成了关键。这种转变往往让人们措手不及。\n我提出以下解决方案：不要等到太晚才开始问自己是默认生存还是默认死亡，而是太早就开始问。很难确定这个问题什么时候会发生极性转变。但过早开始担心默认死亡可能并不那么危险，而太晚开始担心则非常危险。\n原因是我之前写过的现象：致命的夹击。致命的夹击就是默认死亡+增长缓慢+没有足够的时间来修复。而创始人陷入这种情况的原因是他们没有意识到自己正朝那个方向前进。\n创始人不问自己是否是默认生存还是默认死亡的另一个原因是：他们假设筹集更多资金会很容易。但这个假设往往是错误的，更糟糕的是，你越是依赖它，它就越不真实。\n也许把事实和希望分开会有所帮助。不要用模糊的乐观来思考未来，而是明确地分开各个组成部分。说\u0026quot;我们是默认死亡，但我们指望投资者拯救我们。\u0026ldquo;也许当你这么说时，它会在你的头脑中触发和我一样的警报。如果你足够早地触发警报，你也许能够避免致命的夹击。\n如果你能指望投资者拯救你，那么处于默认死亡状态是安全的。通常他们的兴趣是增长的函数。如果你有陡峭的收入增长，比如每年超过5倍，即使你没有盈利，你也可以开始指望投资者感兴趣。[1] 但投资者如此善变，你永远只能开始指望他们。有时候你的业务的一些方面会吓跑投资者，即使你的增长很棒。所以无论你的增长有多好，你永远不能安全地把融资当作计划A以外的任何东西。你也应该有计划B：你应该确切地知道（写下）如果筹集不到更多资金需要做什么才能生存，以及如果计划A不起作用，你什么时候必须切换到计划B。\n无论如何，快速增长与廉价运营远非许多创始人认为的那种尖锐对立。在实践中，创业公司的支出与增长速度之间的联系出人意料地少。当创业公司快速增长时，通常是因为产品击中了要害，在某种意义上直接击中了一些巨大的需求。当创业公司花费很多时，通常是因为产品开发或销售成本高，或者仅仅因为他们浪费。\n如果你注意到了，这时你不仅要问如何避免致命的夹击，还要问如何避免默认死亡。那个很容易：不要招聘太快。招聘太快是迄今为止融资创业公司最大的杀手。[2]\n创始人告诉自己他们需要招聘才能增长。但大多数人都高估了这种需求，而不是低估。为什么？部分原因是工作太多。天真的创始人认为，只要雇足够的人，一切都会完成。部分原因是成功的创业公司有很多员工，所以看起来要成功就应该这样做。事实上，成功创业公司的大量员工更可能是增长的结果，而不是原因。部分原因是当创始人增长缓慢时，他们不想面对通常真正的原因：产品不够有吸引力。\n此外，刚筹集到资金的创始人通常被资助他们的VC鼓励过度招聘。要么杀死要么治愈的策略对VC来说是最优的，因为他们受到投资组合效应的保护。VC想要吹捧你，在这个词的一种或另一种意义上。但作为创始人，你的动机不同。你最想生存。[3]\n创业公司死亡的一个常见方式是：他们制造了中等吸引力的产品，有不错的初始增长。他们相当容易地筹集了第一轮资金，因为创始人看起来聪明，想法听起来合理。但因为产品只有中等吸引力，增长还行但不棒。创始人说服自己招聘一群人是提升增长的方式。他们的投资者同意。但是（因为产品只有中等吸引力）增长永远不会到来。现在他们的资金迅速耗尽。他们希望进一步的投资能拯救他们。但因为他们有高支出和缓慢增长，他们对投资者不再有吸引力。他们无法筹集更多资金，公司死亡。\n公司应该做的是解决基本问题：产品只有中等吸引力。招聘人员很少是解决这个问题的方法。更多时候它使情况变得更糟。在这个早期阶段，产品需要的是进化，而不是\u0026quot;构建\u0026rdquo;，而用更少的人通常更容易做到这一点。[4]\n询问自己是默认生存还是默认死亡可能会拯救你免于此。也许它触发的警报能够抵消推动你过度招聘的力量。相反，你将被迫寻求其他增长方式。例如，通过做那些无法扩展的事情，或者通过只有创始人能做到的方式重新设计产品。对于许多（如果不是大多数）创业公司来说，这些增长路径实际上是最有效的。\nAirbnb在Y Combinator结束时筹集资金后等了4个月才雇佣第一名员工。在此期间，创始人严重超负荷工作。但他们是在超负荷工作，将Airbnb发展成为现在这个惊人成功的有机体。\n注释 [1] 陡峭的使用增长也会让投资者感兴趣。收入最终将是使用的一个恒定倍数，所以x%的使用增长预测x%的收入增长。但在实践中，投资者打折了仅仅是预测的收入，所以如果你在衡量使用，你需要更高的增长率来打动投资者。\n[2] 没有筹集资金的创业公司因无法负担而免于招聘过快。但这并不意味着你应该为了避免这个问题而避免筹集资金，就像完全禁欲不是避免成为酗酒者的唯一方式一样。\n[3] 我不会惊讶VC倾向于推动创始人过度招聘甚至不符合他们自己的利益。他们不知道那些因过度支出而死亡的创业公司中，有多少如果生存下来会做得很好。我猜数量相当可观。\n[4] 阅读草稿后，Sam Altman写道：\n\u0026ldquo;我认为你应该更加强调招聘的观点。我认为大致准确地说，YC最成功的公司从来都不是招聘最快的，而伟大创始人的标志之一是能够抵制这种冲动。\u0026rdquo;\nPaul Buchheit补充道：\n\u0026ldquo;我看到很多相关的问题是过早扩大规模——创始人拿一个不太真正有效的小企业（通常是糟糕的单位经济），然后为了给人留下深刻印象的增长数字而扩大规模。这类似于过度招聘，因为它使业务一旦变大就更难修复，而且他们确实在快速流失现金。\u0026rdquo;\n",
    "description": "",
    "tags": ["创业","生存","增长","招聘","融资"],
    "categories": [],
    "content": "→ English Version\n默认生存还是默认死亡？ 2015年10月\n当我和一家已经运营了8、9个月以上的创业公司交谈时，我想要知道的第一件事几乎总是相同的。假设他们的支出保持不变，收入增长是过去几个月的水平，他们能凭借剩余的资金实现盈利吗？或者更戏剧性地说，默认情况下他们会生存还是会死亡？\n令人震惊的是，创始人自己往往不知道。我交谈的创始人中有一半不知道自己是默认生存还是默认死亡。\n如果你也在其中，Trevor Blackwell制作了一个方便的计算器，你可以用它来找出答案。\n我首先想知道一家创业公司是默认生存还是默认死亡的原因是，接下来的对话取决于这个答案。如果公司是默认生存的，我们可以谈论他们可能做的雄心勃勃的新事情。如果是默认死亡的，我们可能需要讨论如何拯救它。我们知道当前的轨迹会很糟糕。他们如何摆脱这个轨迹？\n为什么很少有创始人知道自己是否是默认生存还是默认死亡？主要原因是，他们不习惯问这个问题。早期问这个问题没有意义，就像问一个3岁的孩子打算如何养活自己一样。但随着公司年龄的增长，这个问题从无意义变成了关键。这种转变往往让人们措手不及。\n我提出以下解决方案：不要等到太晚才开始问自己是默认生存还是默认死亡，而是太早就开始问。很难确定这个问题什么时候会发生极性转变。但过早开始担心默认死亡可能并不那么危险，而太晚开始担心则非常危险。\n原因是我之前写过的现象：致命的夹击。致命的夹击就是默认死亡+增长缓慢+没有足够的时间来修复。而创始人陷入这种情况的原因是他们没有意识到自己正朝那个方向前进。\n创始人不问自己是否是默认生存还是默认死亡的另一个原因是：他们假设筹集更多资金会很容易。但这个假设往往是错误的，更糟糕的是，你越是依赖它，它就越不真实。\n也许把事实和希望分开会有所帮助。不要用模糊的乐观来思考未来，而是明确地分开各个组成部分。说\u0026quot;我们是默认死亡，但我们指望投资者拯救我们。\u0026ldquo;也许当你这么说时，它会在你的头脑中触发和我一样的警报。如果你足够早地触发警报，你也许能够避免致命的夹击。\n如果你能指望投资者拯救你，那么处于默认死亡状态是安全的。通常他们的兴趣是增长的函数。如果你有陡峭的收入增长，比如每年超过5倍，即使你没有盈利，你也可以开始指望投资者感兴趣。[1] 但投资者如此善变，你永远只能开始指望他们。有时候你的业务的一些方面会吓跑投资者，即使你的增长很棒。所以无论你的增长有多好，你永远不能安全地把融资当作计划A以外的任何东西。你也应该有计划B：你应该确切地知道（写下）如果筹集不到更多资金需要做什么才能生存，以及如果计划A不起作用，你什么时候必须切换到计划B。\n无论如何，快速增长与廉价运营远非许多创始人认为的那种尖锐对立。在实践中，创业公司的支出与增长速度之间的联系出人意料地少。当创业公司快速增长时，通常是因为产品击中了要害，在某种意义上直接击中了一些巨大的需求。当创业公司花费很多时，通常是因为产品开发或销售成本高，或者仅仅因为他们浪费。\n如果你注意到了，这时你不仅要问如何避免致命的夹击，还要问如何避免默认死亡。那个很容易：不要招聘太快。招聘太快是迄今为止融资创业公司最大的杀手。[2]\n创始人告诉自己他们需要招聘才能增长。但大多数人都高估了这种需求，而不是低估。为什么？部分原因是工作太多。天真的创始人认为，只要雇足够的人，一切都会完成。部分原因是成功的创业公司有很多员工，所以看起来要成功就应该这样做。事实上，成功创业公司的大量员工更可能是增长的结果，而不是原因。部分原因是当创始人增长缓慢时，他们不想面对通常真正的原因：产品不够有吸引力。\n此外，刚筹集到资金的创始人通常被资助他们的VC鼓励过度招聘。要么杀死要么治愈的策略对VC来说是最优的，因为他们受到投资组合效应的保护。VC想要吹捧你，在这个词的一种或另一种意义上。但作为创始人，你的动机不同。你最想生存。[3]\n创业公司死亡的一个常见方式是：他们制造了中等吸引力的产品，有不错的初始增长。他们相当容易地筹集了第一轮资金，因为创始人看起来聪明，想法听起来合理。但因为产品只有中等吸引力，增长还行但不棒。创始人说服自己招聘一群人是提升增长的方式。他们的投资者同意。但是（因为产品只有中等吸引力）增长永远不会到来。现在他们的资金迅速耗尽。他们希望进一步的投资能拯救他们。但因为他们有高支出和缓慢增长，他们对投资者不再有吸引力。他们无法筹集更多资金，公司死亡。\n公司应该做的是解决基本问题：产品只有中等吸引力。招聘人员很少是解决这个问题的方法。更多时候它使情况变得更糟。在这个早期阶段，产品需要的是进化，而不是\u0026quot;构建\u0026rdquo;，而用更少的人通常更容易做到这一点。[4]\n询问自己是默认生存还是默认死亡可能会拯救你免于此。也许它触发的警报能够抵消推动你过度招聘的 …"
  }]
