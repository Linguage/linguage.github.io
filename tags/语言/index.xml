<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言 on Linguista</title>
    <link>https://linguage.github.io/tags/%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 语言 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>将思想转化为文字</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/words/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/words/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/words/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/words.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/words.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/words.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;将思想转化为文字&#34;&gt;将思想转化为文字&lt;/h1&gt;&#xA;&lt;p&gt;2022年2月&lt;/p&gt;&#xA;&lt;p&gt;写关于某件事的文章，即使是你很了解的事情，通常表明你并不像你想象的那样了解它。将思想转化为文字是一个严峻的考验。你选择的第一句话通常是错误的；你必须一遍又一遍地重写句子，使它们完全正确。而且你的思想不仅会不精确，还会不完整。最终出现在文章中的一半思想是你在写作过程中想到的。事实上，这就是我写作的原因。&lt;/p&gt;&#xA;&lt;p&gt;一旦你发表了什么东西，惯例就是你写的是你在写作之前所想的。这些是你的想法，现在你已经表达了它们。但你知道这不是真的。你知道把你的思想转化为文字改变了它们。不仅仅是那些你发表了的思想。大概还有其他思想被证明太破碎而无法修复，那些你反而丢弃了。&lt;/p&gt;&#xA;&lt;p&gt;使写作如此严格的不仅仅是要将你的思想承诺给特定的词语。真正的考验是阅读你所写的内容。你必须假装是一个中立的读者，只知道你写的内容，不知道你脑中的内容。当他阅读你所写的内容时，看起来是否正确？看起来是否完整？如果你努力，你可以像完全陌生的人一样阅读你的写作，当你这样做时，消息通常是坏的。在我能够让文章通过陌生人之前需要很多次循环。但陌生人是理性的，所以如果你问他需要什么，你总是可以做到。如果他不满意是因为你没有提到x或者没有充分限定某个句子，那么你提到x或添加更多限定条件。现在满意了吗？这可能会让你失去一些好句子，但你必须对此表示认命。你只能让它们尽可能好，同时仍然满足陌生人的要求。&lt;/p&gt;&#xA;&lt;p&gt;我认为，这一点不会那么有争议。我认为这与任何试图写关于任何重要事情的人的经历相符。可能存在一些人的思想如此完美地形成，它们直接流入文字。但我从未认识过能够做到这一点的人，如果我遇到有人说他们能够做到，这似乎是他们的局限性的证据，而不是他们的能力。事实上，这是电影中的套路：那个声称有做某件困难事情的计划的人，当进一步被质疑时，他拍拍脑袋说&amp;quot;一切都在这里&amp;quot;。看电影的人都知道这意味着什么。最好的情况是计划是模糊和不完整的。很可能有一些未发现的缺陷使其完全无效。最好的情况是计划的计划。&lt;/p&gt;&#xA;&lt;p&gt;在精确定义的领域中，可以在你的头脑中形成完整的想法。例如，人们可以在脑中下棋。数学家可以在脑中做一些数学运算，尽管他们在写下证明之前似乎对一定长度的证明没有把握。但这似乎只有在你能用形式语言表达的想法中才有可能。[1] 可以说，这样的人正在将思想转化为头脑中的文字。我可以在某种程度上在脑中写文章。有时我会在走路或躺在床上时想出一个段落，最终版本几乎没有变化。但实际上我在这样做时是在写作。我正在做写作的心理部分；只是我的手指在我这样做时没有移动。[2]&lt;/p&gt;&#xA;&lt;p&gt;你可以在不写关于某件事情的情况下对它了解很多。你能否了解得如此之多，以至于你不会从试图解释你所知道的中学到更多？我不这么认为。我至少写了两件我了解的事情——Lisp黑客技术和创业公司——在这两种情况下，我从写作中学到了很多东西。在这两种情况下，都有一些我直到必须解释它们时才意识到的事情。而且我不认为我的经验是异常的。大量的知识是无意识的，专家无意识知识的比例如果不比初学者更高的话，至少也是一样的。&lt;/p&gt;&#xA;&lt;p&gt;我不是说写作是探索所有想法的最好方式。如果你有关于建筑的想法，大概最好的探索方式是建造实际的建筑物。我是说，无论你从以其他方式探索想法中学到多少，你仍然会从写作中学习新东西。&lt;/p&gt;&#xA;&lt;p&gt;将思想转化为文字当然不意味着写作，当然。你也可以用旧的方式，通过谈话来做到。但根据我的经验，写作是更严格的考验。你必须承诺一个单一的、最佳的词语序列。当你没有语气来承载意义时，更少的东西可以不说不。而且你可以以一种在对话中似乎过度的方式来集中注意力。我经常在一篇文章上花费2周时间，并重读草稿50次。如果你在对话中这样做，这似乎是某种精神障碍的证据。当然，如果你是懒惰的，写作和谈话都同样无用。但如果你想推动自己把事情做对，写作是更陡峭的山。[3]&lt;/p&gt;&#xA;&lt;p&gt;我花了这么长时间建立这个相当明显的观点的原因是，它引导出另一个许多人会发现令人震惊的观点。如果你的想法总是变得更精确、更完整，那么没有写过关于某个主题的人不会有完全形成的想法。而从不写作的人对任何重要的事情都没有完全形成的想法。&lt;/p&gt;&#xA;&lt;p&gt;对他们来说，感觉他们确实有，特别是如果他们没有批判性地审视自己思考的习惯。想法可以感觉完整。只有当你试图将它们转化为文字时，你才发现它们不是。所以如果你从不使你的思想经受那个测试，你不仅永远不会拥有完全形成的思想，而且永远不会意识到这一点。&lt;/p&gt;&#xA;&lt;p&gt;将思想转化为文字当然不能保证它们是正确的。远非如此。但虽然这不是充分条件，但它是一个必要条件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 机械和电路是形式语言。&lt;/p&gt;&#xA;&lt;p&gt;[2] 我在帕洛阿尔托街上走时想到了这句话。&lt;/p&gt;&#xA;&lt;p&gt;[3] 与某人谈话有两种意义：一种是严格的意义，即对话是语言的；一种是更一般的意义，它可以采取任何形式，包括写作。在极限情况下（例如塞内卡的信件），后一种意义上的对话变成了文章写作。&lt;/p&gt;&#xA;&lt;p&gt;在你写作时，与他人谈话（在任一意义上）可能非常有用。但言语对话永远不会比你在谈论你正在写作的事情时更严格。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克威尔、帕特里克·克里森和罗伯特·莫里斯阅读草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>编程语言修复了什么</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/fix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/fix/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/fix/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/fix.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/fix.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/fix.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;编程语言修复了什么&#34;&gt;编程语言修复了什么&lt;/h1&gt;&#xA;&lt;p&gt;凯文·凯勒her建议了一种比较编程语言的有趣方式：用每种语言所要解决的问题来描述它。令人惊讶的是，有多少语言可以用这种方式很好地描述。&lt;/p&gt;&#xA;&lt;p&gt;Algol：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Pascal：Algol没有足够的数据类型。&lt;/p&gt;&#xA;&lt;p&gt;Modula：Pascal对于系统编程来说太弱了。&lt;/p&gt;&#xA;&lt;p&gt;Simula：Algol在模拟方面不够好。&lt;/p&gt;&#xA;&lt;p&gt;Smalltalk：Simula中的一切都不是对象。&lt;/p&gt;&#xA;&lt;p&gt;Fortran：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Cobol：Fortran太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;PL/1：Fortran没有足够的数据类型。&lt;/p&gt;&#xA;&lt;p&gt;Ada：每种现有语言都缺少某些东西。&lt;/p&gt;&#xA;&lt;p&gt;Basic：Fortran太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;APL：Fortran在操作数组方面不够好。&lt;/p&gt;&#xA;&lt;p&gt;J：APL需要自己的字符集。&lt;/p&gt;&#xA;&lt;p&gt;C：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;C++：C太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Java：C++是一个混乱的东西。而且微软要打压我们。&lt;/p&gt;&#xA;&lt;p&gt;C#：Java被Sun控制着。&lt;/p&gt;&#xA;&lt;p&gt;Lisp：图灵机是描述计算的笨拙方式。&lt;/p&gt;&#xA;&lt;p&gt;Scheme：MacLisp是一个混乱的东西。&lt;/p&gt;&#xA;&lt;p&gt;T：Scheme没有库。&lt;/p&gt;&#xA;&lt;p&gt;Common Lisp：Lisp有太多方言。&lt;/p&gt;&#xA;&lt;p&gt;Dylan：Scheme没有库，而且Lisp语法太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;Perl：Shell脚本/awk/sed不够像编程语言。&lt;/p&gt;&#xA;&lt;p&gt;Python：Perl是一个混乱的东西。&lt;/p&gt;&#xA;&lt;p&gt;Ruby：Perl是一个混乱的东西，而且Lisp语法太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;Prolog：编程不够像逻辑。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
