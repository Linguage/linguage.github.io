<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>历史 on Linguage</title>
    <link>https://linguage.github.io/tags/%E5%8E%86%E5%8F%B2/</link>
    <description>Recent content in 历史 on Linguage</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E5%8E%86%E5%8F%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lisp的不同之处</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/diff/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/diff/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;lisp的不同之处&#34;&gt;Lisp的不同之处&lt;/h1&gt;&#xA;&lt;p&gt;2001年12月（修订于2002年5月）&lt;/p&gt;&#xA;&lt;p&gt;（本文是回应LL1邮件列表上一些问题而产生的。现在已收录在《书呆子的复仇》中。）&lt;/p&gt;&#xA;&lt;p&gt;当McCarthy在1950年代末设计Lisp时，它是对现有语言的彻底突破，其中最重要的是Fortran。&lt;/p&gt;&#xA;&lt;p&gt;Lisp体现了九个新思想：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;条件语句。&lt;/strong&gt; 条件语句是if-then-else结构。现在我们认为这是理所当然的。它们是McCarthy在开发Lisp过程中发明的。（当时的Fortran只有条件goto，紧密基于底层硬件的分支指令。）McCarthy是Algol委员会的成员，他将条件语句引入Algol，随后传播到大多数其他语言。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;函数类型。&lt;/strong&gt; 在Lisp中，函数是一等对象——它们是一种数据类型，就像整数、字符串等，并且有字面表示，可以存储在变量中，可以作为参数传递，等等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;递归。&lt;/strong&gt; 递归当然在Lisp之前作为数学概念存在，但Lisp是第一个支持递归的编程语言。（可以说这在使函数成为一等对象中是隐含的。）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;变量的新概念。&lt;/strong&gt; 在Lisp中，所有变量实际上都是指针。具有类型的是值，而不是变量，赋值或绑定变量意味着复制指针，而不是它们指向的内容。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;垃圾回收。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;由表达式组成的程序。&lt;/strong&gt; Lisp程序是表达式的树，每个表达式都返回一个值。（在某些Lisp中，表达式可以返回多个值。）这与Fortran和大多数后续语言形成对比，后者区分表达式和语句。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在Fortran中有这种区别是很自然的，因为（在输入格式为打孔卡的语言中不足为奇）该语言是面向行的。你不能嵌套语句。因此，虽然你需要表达式来进行数学运算，但让其他任何东西返回值都没有意义，因为不可能有任何东西在等待它。&lt;/p&gt;&#xA;&lt;p&gt;随着块结构语言的出现，这个限制消失了，但那时已经太晚了。表达式和语句的区别已经根深蒂固。它从Fortran传播到Algol，然后传播到它们的后代。&lt;/p&gt;&#xA;&lt;p&gt;当一种语言完全由表达式构成时，你可以任意组合表达式。你可以说（使用Arc语法）&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(if foo (= x 1) (= x 2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(= x (if foo 1 2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;符号类型。&lt;/strong&gt; 符号与字符串的不同在于你可以通过比较指针来测试相等性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用符号树表示代码的记号。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;整个语言始终可用。&lt;/strong&gt; 读取时间、编译时间和运行时间之间没有真正的区别。你可以在读取时编译或运行代码，在编译时读取或运行代码，在运行时读取或编译代码。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在读取时运行代码允许用户重新编程Lisp的语法；在编译时运行代码是宏的基础；在运行时编译是Lisp用作扩展语言的基础，如在Emacs等程序中；在运行时读取使程序能够使用s表达式进行通信，这个想法最近被重新发明为XML。&lt;/p&gt;&#xA;&lt;p&gt;当Lisp首次发明时，所有这些想法都与当时的普通编程实践相去甚远，后者主要由1950年代末可用的硬件决定。&lt;/p&gt;&#xA;&lt;p&gt;随着时间的推移，体现在一系列流行语言中的默认语言逐渐向Lisp演变。1-5现在已经广泛传播。6开始出现在主流中。Python具有7的一种形式，尽管似乎没有任何语法支持它。8（与9一起）是使Lisp宏成为可能的特性，到目前为止仍然是Lisp独有的，也许是因为（a）它需要那些括号，或者同样糟糕的东西，（b）如果你添加这最后的力量增量，你不能再声称发明了一种新语言，而只是设计了一种新的Lisp方言 ;-)&lt;/p&gt;&#xA;&lt;p&gt;虽然对当今的程序员有用，但通过描述Lisp与其他语言采用的随机权宜之计的差异来描述它是很奇怪的。这可能不是McCarthy对它的看法。Lisp不是设计来修复Fortran中的错误；它更像是试图将计算公理化的副产品。&lt;/p&gt;&#xA;&lt;p&gt;相关链接：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/what_made_lisp_different_japanese.htm&#34;&gt;日语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Lisp的根源</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/rootsoflisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/rootsoflisp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/rootsoflisp/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;lisp的根源&#34;&gt;Lisp的根源&lt;/h1&gt;&#xA;&lt;p&gt;2001年5月&lt;/p&gt;&#xA;&lt;p&gt;（我写这篇文章是为了帮助自己准确理解McCarthy的发现。你不需要知道这些东西来用Lisp编程，但对于想要理解Lisp本质的人来说——无论是从起源还是语义核心的角度——这应该是有帮助的。Lisp拥有这样一个核心是其区别于其他语言的特征之一，也是为什么与其他语言不同，Lisp有方言的原因。）&lt;/p&gt;&#xA;&lt;p&gt;1960年，John McCarthy发表了一篇非凡的论文，他在编程领域做了类似于欧几里得对几何学所做的事情。他展示了，给定一些简单的操作符和函数表示法，如何构建一个完整的编程语言。他称这种语言为Lisp，即&amp;quot;列表处理&amp;quot;，因为他的一个关键想法是使用一种称为列表的简单数据结构来同时表示代码和数据。&lt;/p&gt;&#xA;&lt;p&gt;值得理解McCarthy的发现，不仅作为计算机史上的里程碑，而且作为我们时代编程发展方向的模型。在我看来，迄今为止有两个真正干净、一致的编程模型：C模型和Lisp模型。这两个模型似乎像是高地，之间是沼泽般的低地。随着计算机变得越来越强大，正在开发的新语言一直在稳步向Lisp模型移动。过去20年来，新编程语言的一个流行配方是采用C计算模型，然后零散地添加从Lisp模型中提取的部分，如运行时类型和垃圾收集。&lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中，我将尝试用最简单的术语解释McCarthy的发现。重点不仅仅是了解某人40年前想出的一个有趣的理论结果，而是展示语言的发展方向。Lisp的不寻常之处——事实上，Lisp的定义性特征——是它可以用自身来编写。要理解McCarthy的意思，我们将追溯他的步骤，将他的数学表示法转换为运行的Common Lisp代码。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;注意：这似乎是一篇较长文章的介绍或摘要。全文可能作为PostScript文件提供，在原始来源中链接为&amp;quot;Complete Article (Postscript)&amp;quot;。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;相关链接：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What Made Lisp Different&lt;/li&gt;&#xA;&lt;li&gt;The Code&lt;/li&gt;&#xA;&lt;li&gt;中文翻译&lt;/li&gt;&#xA;&lt;li&gt;日语翻译&lt;/li&gt;&#xA;&lt;li&gt;葡萄牙语翻译&lt;/li&gt;&#xA;&lt;li&gt;韩语翻译&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Y Combinator 的创立故事</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/ycstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/ycstart/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/ycstart/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;y-combinator-的创立故事&#34;&gt;Y Combinator 的创立故事&lt;/h1&gt;&#xA;&lt;p&gt;2012年3月&lt;/p&gt;&#xA;&lt;p&gt;Y Combinator的7岁生日是3月11日。像往常一样，我们太忙了，直到几天后才注意到。我想我们从来没有能在生日当天记住我们的生日。&lt;/p&gt;&#xA;&lt;p&gt;2005年3月11日，杰西卡和我在哈佛广场吃完晚饭走回家。杰西卡当时在一家投资银行工作，但她不太喜欢，所以她面试了波士顿一家风险投资基金的市场总监职位。这家风险投资基金正在做现在看来对风险投资基金来说喜剧性地熟悉的事情：花很长时间做决定。&lt;/p&gt;&#xA;&lt;p&gt;与此同时，我一直在告诉杰西卡他们应该改变风险投资业务的所有方面——基本上是现在支撑Y Combinator的理念：投资者应该做更多、更小的投资，他们应该资助黑客而不是西装革履的人，他们应该愿意资助更年轻的创始人，等等。&lt;/p&gt;&#xA;&lt;p&gt;当时我一直在考虑做一些天使投资。我刚刚在哈佛大学的本科生计算机俱乐部做了一次关于如何创办创业公司的演讲，之后我突然意识到，尽管我一直打算做天使投资，但自从我有足够钱做这件事已经过去了7年，我还没有开始。我也一直在考虑再次与罗伯特·莫里斯和特雷弗·布莱克威尔合作的方法。几小时前我给他们发了一封电子邮件，试图弄清楚我们能一起做什么。&lt;/p&gt;&#xA;&lt;p&gt;在哈佛广场和我的家之间，这个想法成型了。我们将创办自己的投资公司，杰西卡可以为那家公司工作。当我们转到沃克街时，我们决定这样做。我同意向新基金投入10万美元，杰西卡同意辞职为它工作。在接下来的几天里，我招募了罗伯特和特雷弗，他们各投入了另外5万美元。所以YC以20万美元开始。&lt;/p&gt;&#xA;&lt;p&gt;杰西卡非常高兴能够辞职创办自己的公司，以至于到家时我给她拍了张照片。&lt;/p&gt;&#xA;&lt;p&gt;公司当时还不叫Y Combinator。起初我们称之为剑桥种子。但这个名字从未见光，因为几天后当我们宣布时，我们已经把名字改为Y Combinator。我们很早就意识到我们所做的工作可能具有全国范围的影响力，我们不想要一个将我们束缚在一个地方的名字。&lt;/p&gt;&#xA;&lt;p&gt;最初我们只有部分想法。我们要做标准化条款的种子资金。在YC之前，种子资金非常随意。你会从你朋友的富叔叔那里得到第一笔1万美元。交易条款往往是灾难性的；通常投资者、创始人和律师都不知道文件应该是什么样的。Facebook作为佛罗里达有限责任公司的早期历史显示了当时事情是多么随意。&lt;/p&gt;&#xA;&lt;p&gt;我们将成为前所未有的事物：标准的种子资金来源。&lt;/p&gt;&#xA;&lt;p&gt;我们根据我们自己创办Viaweb时获得的种子资金来设计YC。我们用从朋友朱利安·韦伯那里得到的1万美元开始了Viaweb，朱利安是伊德尔·韦伯的丈夫，我在哈佛读研究生时上了伊德尔的绘画课。朱利安了解商业，但你不会说他是个西装革履的人。除其他外，他还曾担任国家讽刺剧的主席。他也是一名律师，把我们所有的文书工作都正确设置。&lt;/p&gt;&#xA;&lt;p&gt;作为回报，朱利安获得Viaweb 10%的股份，以换取1万美元，帮我们成立公司，教我们商业知识，以及在危机时刻保持冷静。我记得曾经想过朱利安得到了多么好的交易。但一秒钟后我意识到，没有朱利安，Viaweb永远不会成功。所以即使这对他是好交易，对我们也是好交易。这就是为什么我知道像Y Combinator这样的东西有存在的空间。&lt;/p&gt;&#xA;&lt;p&gt;最初我们没有后来证明是最重要的想法：同步资助创业公司，而不是像以前那样异步资助。或者更确切地说，我们有这个想法，但我们没有意识到它的重要性。我们很早就决定，我们要做的第一件事是在即将到来的夏天资助一批创业公司。但我们最初没有意识到这将是我们进行所有投资的方式。&lt;/p&gt;&#xA;&lt;p&gt;我们一开始同时资助一批创业公司的原因不是我们认为这将是资助创业公司的更好方式，而仅仅是因为我们想学习如何成为天使投资者，而为本科生举办的夏季项目似乎是最快的方法。没有人那么认真地对待暑期工作。一群本科生花一个夏天在创业公司上工作的机会成本足够低，我们不会感到内疚鼓励他们这样做。&lt;/p&gt;&#xA;&lt;p&gt;我们知道学生已经在为夏天做计划了，所以我们做了我们经常告诉创业公司要做的事情：我们快速启动。这里是当时被称为夏季创始人计划的初始公告和描述。&lt;/p&gt;&#xA;&lt;p&gt;我们很幸运，夏季项目的长度和结构对我们做的事情来说证明是完美的。YC周期的结构仍然几乎与第一个夏天完全相同。&lt;/p&gt;&#xA;&lt;p&gt;我们在第一批创始人是谁方面也很幸运。我们从未期望从第一批中获得任何利润。我们认为我们投资的钱是教育费用和慈善捐赠的结合。但第一批的创始人证明出人意料地好。而且他们也是很棒的人。直到今天，我们还和他们中的很多人是朋友。&lt;/p&gt;&#xA;&lt;p&gt;现在人们很难意识到YC在当时看起来多么微不足道。我不能责怪那些没有认真对待我们的人，因为我们自己在一开始也没有非常认真地对待第一个夏季项目。但随着夏天的进展，我们对创业公司的表现越来越印象深刻。其他人也开始印象深刻。杰西卡和我发明了一个术语，&amp;ldquo;Y Combinator效应&amp;rdquo;，用来描述某人意识到YC并非完全糟糕的那一刻。当人们第一次夏天来到YC在晚宴上演讲时，他们的精神状态就像来向童子军部队发表讲话的人一样。当他们离开大楼时，他们都在说&amp;quot;哇，这些公司实际上可能会成功&amp;quot;的某种变体。&lt;/p&gt;&#xA;&lt;p&gt;现在YC足够知名，当我们资助的公司是合法的时人们不再感到惊讶，但声誉赶上现实需要一段时间。这就是我们特别喜欢资助可能被dismissed为&amp;quot;玩具&amp;quot;的想法的原因之一——因为YC本身最初也被dismissed为一个。&lt;/p&gt;&#xA;&lt;p&gt;当我们看到同步资助公司效果很好时，我们决定继续这样做。我们将每年资助两批创业公司。我们在硅谷资助了第二批。这是一个最后一刻的决定。回想起来，我认为让我下定决心的是那年秋天去Foo Camp。湾区的创业公司人口密度比波士顿大得多，天气也这么好。我从90年代住在那里时记得这一点。另外，我不想让别人复制我们并将其描述为硅谷的Y Combinator。我希望YC成为硅谷的Y Combinator。所以在加州做冬季批次似乎是那种自我放纵的选择和雄心勃勃的选择相同的罕见情况之一。&lt;/p&gt;&#xA;&lt;p&gt;如果我们有足够的时间做我们想做的事情，Y Combinator会在伯克利。那是我们最喜欢的湾区地区。但我们没有时间在伯克利找大楼。我们没有时间在任何地方找我们自己的大楼。及时获得足够空间的唯一方法是说服特雷弗让我们接管他在山景城（当时看来）巨大的建筑的一部分。&lt;/p&gt;&#xA;&lt;p&gt;我们又一次运气好，因为山景城证明是放置像YC这样的东西的理想地点。但即使如此，我们也勉强做到了。在加州的第一次晚宴上，我们不得不警告所有创始人不要碰墙壁，因为油漆还是湿的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>发现的风险</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/disc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/disc/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/disc/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;发现的风险&#34;&gt;发现的风险&lt;/h1&gt;&#xA;&lt;p&gt;2017年1月&lt;/p&gt;&#xA;&lt;p&gt;因为著名科学家的传记往往删去他们的错误，我们低估了他们愿意承担的风险程度。而且因为著名科学家所做的任何不是错误的事情现在可能已经成为传统智慧，这些选择似乎也不具风险。&lt;/p&gt;&#xA;&lt;p&gt;例如，牛顿的传记 understandably 更关注物理学而不是炼金术或神学。我们得到的印象是他无误的判断力直接引导他走向了别人没有注意到的真理。如何解释他在炼金术和神学上花费的所有时间？嗯，聪明人往往有点疯狂。&lt;/p&gt;&#xA;&lt;p&gt;但也许有一个更简单的解释。也许聪明和疯狂并不像我们想象的那么分离。物理学对我们来说似乎是一个有前途的工作领域，而炼金术和神学明显是浪费时间。但那是因为我们知道事情的结果。在牛顿的时代，这三个问题似乎大致同样有前途。还没有人知道发明我们现在称之为物理学的东西会有什么回报；如果他们知道，就会有更多的人在做它。而炼金术和神学在当时仍然属于Marc Andreessen所描述的&amp;quot;巨大，如果为真&amp;quot;的范畴。&lt;/p&gt;&#xA;&lt;p&gt;牛顿下了三个赌注。其中一个成功了。但它们都是有风险的。&lt;/p&gt;&#xA;&lt;p&gt;相关链接：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/the_risk_of_discovery_japanese.htm&#34;&gt;日语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>工会的另一种理论</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/unions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/unions/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/unions/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;工会的另一种理论&#34;&gt;工会的另一种理论&lt;/h1&gt;&#xA;&lt;p&gt;2007年5月&lt;/p&gt;&#xA;&lt;p&gt;那些担心贫富差距不断扩大的人，通常会把二十世纪中期视为黄金时代。在那个时代，我们有大量高薪的工会制造业工作，提高了中位数收入。我不会完全把高薪工会工作称为神话，但我认为那些纠结于此的人过于解读它了。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，正是与创业公司一起工作的经历让我明白了高薪工会工作的来源。在快速增长的市场中，你不会太担心效率。更重要的是快速成长。如果有一些普通的问题阻碍了你，有一个简单但有点昂贵的解决方案，那就接受它，继续处理更重要的事情。eBay并不是通过为服务器支付比竞争对手更少的费用而获胜的。&lt;/p&gt;&#xA;&lt;p&gt;尽管现在可能很难想象，但在二十世纪中期，制造业是一个成长型行业。这是一个从汽车到糖果等各种小公司被整合成具有全国影响力和巨大规模经济的新式公司的时代。你必须快速成长，否则就会死亡。工人对这些公司来说，就像互联网创业公司的服务器一样。可靠的供应比低成本更重要。&lt;/p&gt;&#xA;&lt;p&gt;如果你看一个1950年代汽车高管的头脑，态度一定是：当然，给他们任何他们要求的，只要新车型不被延迟就行。&lt;/p&gt;&#xA;&lt;p&gt;换句话说，那些工人并没有得到他们工作价值的报酬。在当时的情况下，公司坚持支付他们那么少的工资会很愚蠢。&lt;/p&gt;&#xA;&lt;p&gt;如果你想要这个现象的一个争议较小的例子，问问任何在互联网泡沫期间作为顾问建设网站的人。在九十年代末，你可以为建造最微不足道的东西获得巨额报酬。然而，当时在那里的人是否期待那些日子会回来？我怀疑。当然，每个人都意识到那只是一个暂时的异常。&lt;/p&gt;&#xA;&lt;p&gt;工会时代似乎是同类异常，只是持续时间更长，并且混合了大量意识形态，阻止人们像对待泡沫期间的咨询那样冷静地看待它。&lt;/p&gt;&#xA;&lt;p&gt;基本上，工会只是Razorfish。&lt;/p&gt;&#xA;&lt;p&gt;那些认为劳工运动是由英勇的工会组织者创造的人有一个问题需要解释：为什么工会现在在萎缩？他们最多只能退回到生活在堕落文明中的人们的默认解释。我们的祖先是巨人。二十世纪初期的工人一定具有今天所缺乏的道德勇气。&lt;/p&gt;&#xA;&lt;p&gt;事实上，有一个更简单的解释。二十世纪初只是一个快速增长中的创业公司为基础设施过度付费。而我们现在不是一个堕落的人民，放弃了那些产生高薪工会工作的神秘崇高原则。我们只是生活在一个快速增长公司在不同事情上过度花费的时代。&lt;/p&gt;</description>
    </item>
    <item>
      <title>快照：Viaweb，1998年6月</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/vw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/vw/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/vw/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;快照viaweb1998年6月&#34;&gt;快照：Viaweb，1998年6月&lt;/h1&gt;&#xA;&lt;p&gt;2012年1月&lt;/p&gt;&#xA;&lt;p&gt;在雅虎收购宣布前几个小时，我拍下了Viaweb网站的快照。我想有一天看看可能会很有趣。&lt;/p&gt;&#xA;&lt;p&gt;首先注意到的是页面是多么小。1998年的屏幕要小得多。如果我没记错的话，我们的首页刚好能适应人们当时通常使用的窗口大小。&lt;/p&gt;&#xA;&lt;p&gt;那时的浏览器（IE6还要3年才会出现）字体很少，而且没有抗锯齿。如果你想让页面看起来好看，你必须将显示文本渲染为图像。&lt;/p&gt;&#xA;&lt;p&gt;你可能会注意到Viaweb和Y Combinator的标志之间有某种相似之处。当我们创办YC时，我们这样做是为了开个内部玩笑。考虑到红色圆圈是多么基础的东西，当我们创办Viaweb时，我很惊讶其他使用红色圆圈作为标志的公司如此之少。稍后我明白了原因。&lt;/p&gt;&#xA;&lt;p&gt;在公司页面上，你会注意到一个名叫John McArtyem的神秘人物。Robert Morris（又名Rtm）在蠕虫事件后如此厌恶 publicity，以至于他不想让自己的名字出现在网站上。我设法让他同意妥协：我们可以使用他的简介，但不能使用他的名字。从那时起，他在这一点上稍微放松了一些。&lt;/p&gt;&#xA;&lt;p&gt;Trevor大约在收购完成时毕业，所以在4天的时间里，他从身无分文的研究生变成了百万富翁博士。我作为新闻稿撰写者的职业生涯 culminating 是一篇庆祝他毕业的新闻稿，配有一张我在会议期间为他画的插图。&lt;/p&gt;&#xA;&lt;p&gt;（Trevor也在我们的网页设计师目录中作为Trevino Bagwell出现，这些设计师是商家可以雇佣来为他们建造商店的。我们在其中安插了一个托儿，以防有竞争对手试图向我们的网页设计师发送垃圾邮件。我们假设他的标志会阻止任何真正的客户，但事实并非如此。）&lt;/p&gt;&#xA;&lt;p&gt;回到90年代，为了获得用户，你必须在杂志和报纸上被提及。当时没有像现在这样的在线被发现的方式。所以我们过去每月支付一家公关公司16,000美元让我们在新闻中被提及。幸运的是，记者们喜欢我们。&lt;/p&gt;&#xA;&lt;p&gt;在我们关于从搜索引擎获得流量的建议中（我认为SEO这个词还没有被创造出来），我们说只有7个重要的：Yahoo、AltaVista、Excite、WebCrawler、InfoSeek、Lycos和HotBot。注意到少了什么吗？谷歌那年9月才成立。&lt;/p&gt;&#xA;&lt;p&gt;我们通过一家名为Cybercash的公司支持在线交易，因为如果我们缺乏这个功能，我们会在产品比较中被 beaten up。但Cybercash是如此糟糕，而且大多数商店的订单量如此之低，以至于商家像处理电话订单一样处理订单会更好。我们网站上有一个页面试图说服商家不要进行实时授权。&lt;/p&gt;&#xA;&lt;p&gt;整个网站像一个漏斗一样组织，引导人们进行试驾。能够在线试用软件是件新奇事。我们在动态url中放入cgi-bin来欺骗竞争对手关于我们的软件如何工作。&lt;/p&gt;&#xA;&lt;p&gt;我们有一些知名用户。不用说，好莱坞的Frederick&amp;rsquo;s获得了最多的流量。我们对大商店收取每月300美元的固定费用，所以拥有大量流量的用户有点令人担忧。我曾经计算过Frederick&amp;rsquo;s在带宽上花了我们多少钱，大约是每月300美元。&lt;/p&gt;&#xA;&lt;p&gt;由于我们托管所有商店，这些商店在1998年6月每月总共获得超过1000万次页面浏览，我们消耗了在当时看起来相当多的带宽。我们的办公室有2条T1线路（3 Mb/sec）。在那个时代没有AWS。甚至将服务器托管似乎也太冒险了，考虑到它们经常出问题。所以我们的服务器在办公室里。或者更准确地说，在Trevor的办公室里。作为与没有其他人共享他办公室的独特特权，他必须与6台尖叫的塔式服务器共享。他的办公室因为它们产生的热量而被戏称为&amp;quot;热水浴缸&amp;quot;。大多数日子，他的一堆窗式空调还能应付。&lt;/p&gt;&#xA;&lt;p&gt;为了描述页面，我们有一种叫做RTML的模板语言，据说代表某种东西，但事实上我是以Rtm的名字命名的。RTML是Common Lisp，通过一些宏和库增强，并隐藏在一个结构编辑器后面，使它看起来好像有语法。&lt;/p&gt;&#xA;&lt;p&gt;由于我们持续发布，我们的软件实际上没有版本。但在那些日子里，行业媒体期望有版本，所以我们就编造了一些。如果我们想获得大量关注，我们把版本号设为整数。那个&amp;quot;4.0版本&amp;quot;图标顺便说一句是由我们自己的按钮生成器生成的。整个Viaweb网站都是用我们的软件制作的，尽管它不是一个在线商店，因为我们想体验我们的用户的感受。&lt;/p&gt;&#xA;&lt;p&gt;1997年底，我们发布了一个叫做Shopfind的通用购物搜索引擎。在当时它相当先进。它有一个可编程的爬虫，可以爬取网上大多数不同的商店并挑选出产品。&lt;/p&gt;</description>
    </item>
    <item>
      <title>散文的时代</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/essay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/essay/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/essay/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;散文的时代&#34;&gt;散文的时代&lt;/h1&gt;&#xA;&lt;p&gt;2004年9月&lt;/p&gt;&#xA;&lt;p&gt;还记得你在高中时必须写的散文吗？主题句，引言段，支持段落，结论。结论比如说，白鲸记中的亚哈是一个基督式的人物。&lt;/p&gt;&#xA;&lt;p&gt;唉。所以我将试图给出故事的另一面：散文真正是什么，以及如何写散文。或者至少，我是如何写散文的。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;修正&#34;&gt;修正&lt;/h2&gt;&#xA;&lt;p&gt;真正的散文与学校里必须写的东西之间最明显的区别是，真正的散文不仅仅局限于英国文学。当然，学校应该教学生如何写作。但由于一系列历史偶然事件，写作教学与文学研究混在了一起。因此全国各地的学生都不是在写预算很少的棒球队如何与洋基队竞争，或者色彩在时尚中的作用，或者什么构成好的甜点，而是在写狄更斯作品中的象征主义。&lt;/p&gt;&#xA;&lt;p&gt;结果写作被弄得无聊而无意义。谁在乎狄更斯作品中的象征主义？狄更斯本人会对关于色彩或棒球的散文更感兴趣。&lt;/p&gt;&#xA;&lt;p&gt;事情怎么会变成这样？要回答这个问题，我们必须回到将近一千年前。大约在1100年，欧洲在几个世纪的混乱后终于开始喘息，一旦他们有了好奇的奢侈，他们就重新发现了我们称之为&amp;quot;经典&amp;quot;的东西。效果就好像我们被来自另一个太阳系的生物访问过一样。这些早期文明如此复杂，以至于在接下来的几个世纪里，欧洲学者在几乎所有领域的主要工作都是吸收他们所知道的东西。&lt;/p&gt;&#xA;&lt;p&gt;在这个时期，研究古代文本获得了巨大的声望。这似乎是学者所做工作的本质。随着欧洲学术获得势头，它变得越来越不重要；到1350年，想要学习科学的人可以找到比亚里士多德时代更好的老师。[1] 但学校的变化比学术慢。在19世纪，研究古代文本仍然是课程的主干。&lt;/p&gt;&#xA;&lt;p&gt;那么问题的时机成熟了：如果研究古代文本是学术的合法领域，为什么不是现代文本？答案当然是，古典学术的最初存在理由是一种不需要对当代作者进行的智力考古学。但出于明显的原因，没有人想给出那个答案。考古工作基本完成，这意味着研究古典的人如果不是在浪费时间，至少是在处理次要问题。&lt;/p&gt;&#xA;&lt;p&gt;于是现代文学研究开始了。起初有很大的阻力。第一批英国文学课程似乎是由较新的学院提供的，特别是美国的学院。达特茅斯学院、佛蒙特大学、阿默斯特学院和伦敦大学学院在1820年代教授英国文学。但哈佛直到1876年才有英国文学教授，牛津直到1885年才有。（牛津在设立英国文学教授职位之前就有了中文教授。）[2]&lt;/p&gt;&#xA;&lt;p&gt;打破平衡的，至少在美国，似乎是教授不仅应该教书还应该做研究的想法。这个想法（连同博士学位、系，以及整个现代大学的概念）在19世纪末从德国进口。从1876年在约翰霍普金斯大学开始，新模式迅速传播。&lt;/p&gt;&#xA;&lt;p&gt;写作是受害者之一。学院长期以来一直教授英语写作。但你如何对写作进行研究？教数学的教授可以被要求做原创数学，教历史的教授可以被要求写关于历史的学术文章，但教修辞学或写作的教授呢？他们应该研究什么？最接近的似乎是英国文学。[3]&lt;/p&gt;&#xA;&lt;p&gt;因此在19世纪末，写作教学被英语教授继承。这有两个缺点：(a) 文学专家本人不一定是好作家，就像艺术史学家不一定是好画家一样，(b) 写作的题目现在往往是文学，因为那是教授感兴趣的。&lt;/p&gt;&#xA;&lt;p&gt;高中模仿大学。我们痛苦的高中经历是在1892年播下的种子，当时全国教育协会&amp;quot;正式建议将文学和写作在高中课程中统一。&amp;quot;[4] 3R中的写作部分后来变成了英语，产生了奇怪的后果，即高中生现在必须写关于英国文学的文章——在不知不觉中，模仿几十年前英语教授在期刊上发表的任何东西。&lt;/p&gt;&#xA;&lt;p&gt;如果这对学生来说似乎是无意义的练习，也就不足为奇了，因为我们现在离真正的工作有三步之遥：学生在模仿英语教授，英语教授在模仿古典学者，而古典学者仅仅是传统的继承者，这个传统源自700年前迷人且迫切需要的工作。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;无需辩护&#34;&gt;无需辩护&lt;/h2&gt;&#xA;&lt;p&gt;真正的散文与学校让你写的东西之间的另一个大区别是，真正的散文不会采取一个立场然后为它辩护。这个原则，就像我们应该写关于文学的想法一样，结果是一个早已被遗忘的起源的知识遗留物。&lt;/p&gt;&#xA;&lt;p&gt;人们常常错误地认为中世纪的大学大多是神学院。实际上它们更像法学院。至少在我们的传统中，律师是倡导者，被训练来为争论的任何一方辩护，并尽可能为那个立场辩护。无论是原因还是结果，这种精神弥漫在早期大学中。修辞学研究，即有说服力地争论的艺术，占本科课程的三分之一。[5] 讲座后最常见的讨论形式是辩论。这至少名义上保存在我们今天的论文答辩中：大多数人把论文和 dissertation 这两个词当作可以互换的，但最初，至少论文是采取的立场，而 dissertation 是为它辩护的论点。&lt;/p&gt;&#xA;&lt;p&gt;在法律纠纷中辩护可能是必要的邪恶，但这不是获得真理的最佳方式，我想律师会第一个承认。不仅仅是你这样会错过微妙之处。真正的问题是你不能改变问题。&lt;/p&gt;&#xA;&lt;p&gt;然而这个原则被内置在他们在高中教你写的东西的 very 结构中。主题句是你的论点，预先选择，支持段落是你在冲突中打击的 blows，而结论——呃，结论是什么？我在高中时从来不确定。似乎我们应该只是用足够不同的词语重述我们在第一段说的话，以至于没有人能分辨出来。何必呢？但当你理解了这种&amp;quot;散文&amp;quot;的起源，你就能看到结论来自哪里。这是对陪审团的 concluding remarks。&lt;/p&gt;&#xA;&lt;p&gt;好的写作应该有说服力，当然，但它应该有说服力是因为你得到了正确的答案，而不是因为你做得很好。当我把散文的草稿给朋友时，我想知道两件事：哪些部分让他们感到无聊，哪些似乎没有说服力。无聊的部分通常可以通过删减来修复。但我不会试图通过更聪明地争论来修复没有说服力的部分。我需要讨论这个问题。&lt;/p&gt;&#xA;&lt;p&gt;至少我一定把某件事解释得很糟糕。在这种情况下，在谈话过程中我将被迫想出一个更清晰的解释，我可以直接把它纳入散文中。我常常也不得不说的话。但目的从来不是 per se 有说服力。随着读者变得更聪明，有说服力和真实变得相同，所以如果我能说服聪明的读者，我一定接近真理。&lt;/p&gt;&#xA;&lt;p&gt;试图说服的写作可能是一种有效的（或至少不可避免的）形式，但称之为散文在历史上是不准确的。散文是别的东西。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;尝试&#34;&gt;尝试&lt;/h2&gt;&#xA;&lt;p&gt;要理解真正的散文是什么，我们必须再次回到历史，虽然这次不那么远。回到米歇尔·德·蒙田，他在1580年出版了一本他称之为&amp;quot;essais&amp;quot;的书。他做的事情与律师做的事情完全不同，差异体现在名称中。Essayer 是法语动词，意思是&amp;quot;尝试&amp;quot;，而 essai 是一次尝试。散文是你写来试图弄清楚某事的东西。&lt;/p&gt;&#xA;&lt;p&gt;弄清楚什么？你还不知道。所以你不能以论点开始，因为你没有，可能永远不会有一个。散文不以陈述开始，而是以问题开始。在真正的散文中，你不采取立场并辩护。你注意到一扇半开的门，你打开它走进去看看里面是什么。&lt;/p&gt;&#xA;&lt;p&gt;如果你想做的只是弄清楚事情，为什么要写任何东西呢？为什么不只是坐着思考？嗯，这正是蒙田的伟大发现。表达想法有助于形成它们。事实上，帮助这个词太弱了。我散文中最终出现的大部分内容只有当我坐下来写它们时才想到。这就是为什么我写它们。&lt;/p&gt;&#xA;&lt;p&gt;你在学校写的东西，理论上，你只是在向读者解释自己。在真正的散文中，你为自己写作。你在大声思考。&lt;/p&gt;&#xA;&lt;p&gt;但不太一样。就像邀请人们来迫使你清理公寓一样，写别人会读的东西迫使你思考得好。所以有听众确实很重要。我只为自己写的东西不好。它们往往会 peter out。当我遇到困难时，我发现我以几个模糊的问题结束，然后 drift off 去喝杯茶。&lt;/p&gt;&#xA;&lt;p&gt;许多已发表的散文以同样的方式 peter out。特别是新闻杂志 staff writers 写的那种。外部作家倾向于提供辩护立场的社论，这种社论直线走向激动人心（且预先注定）的结论。但 staff writers 感觉有义务写一些&amp;quot;平衡&amp;quot;的东西。因为他们为流行杂志写作，他们从最具放射性争议的问题开始，然后——因为他们为流行杂志写作——他们接着惊恐地退缩。堕胎，支持还是反对？这个团体说一件事。那个团体说另一件事。有一件事是确定的：问题是一个复杂的。（但不要生我们的气。我们没有得出任何结论。）&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;河流&#34;&gt;河流&lt;/h2&gt;&#xA;&lt;p&gt;问题还不够。散文必须提供答案。当然，它们并不总是如此。有时你从一个有希望的问题开始，却一无所获。但那些你不会发表。那些就像得到不确定结果的实验。你发表的散文应该告诉读者一些他还不知道的事情。&lt;/p&gt;&#xA;&lt;p&gt;但你告诉他的事情不重要，只要有趣。我有时被指责为 meandering。在辩护立场的写作中，这将是一个缺陷。在那里你不关心真理。你已经知道你要去哪里，你想直接去那里，blustering 通过障碍物，hand-waving 你走过沼泽地的方式。但这不是你在散文中试图做的。散文应该是寻找真理。如果它不 meander 就会令人怀疑。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
