<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基于网络的软件 on Linguista</title>
    <link>http://localhost:1355/tags/%E5%9F%BA%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%9A%84%E8%BD%AF%E4%BB%B6/</link>
    <description>Recent content in 基于网络的软件 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1355/tags/%E5%9F%BA%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%9A%84%E8%BD%AF%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>另一条道路</title>
      <link>http://localhost:1355/paul_graham/essays_zh/road/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/road/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/road/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;另一条道路&#34;&gt;另一条道路&lt;/h1&gt;&#xA;&lt;p&gt;2001年9月&lt;/p&gt;&#xA;&lt;p&gt;（本文解释了为什么下一代软件的大部分可能是基于服务器的，这对程序员意味着什么，以及这种新型软件为什么是创业公司的绝佳机会。本文源自在BBN实验室的一次演讲。）&lt;/p&gt;&#xA;&lt;p&gt;1995年夏天，我的朋友Robert Morris和我决定创办一家创业公司。当时，围绕Netscape IPO的公关活动正如火如荼地进行，媒体上有很多关于电子商务的讨论。那时网络上可能只有三十家实际的商店，都是手工制作的。如果将来会有很多在线商店，就需要制作它们的软件，所以我们决定写一些这样的软件。&lt;/p&gt;&#xA;&lt;p&gt;在最初的一周左右，我们打算将其制作成一个普通的桌面应用程序。然后有一天我们想到让软件在我们的Web服务器上运行，使用浏览器作为界面。我们尝试重写软件使其在Web上工作，很明显这是正确的方法。如果我们编写的软件在服务器上运行，对用户和我们自己都会容易得多。&lt;/p&gt;&#xA;&lt;p&gt;结果证明这是一个好计划。现在，作为Yahoo Store，这个软件是最受欢迎的在线商店构建器，拥有约14,000个用户。&lt;/p&gt;&#xA;&lt;p&gt;当我们开始Viaweb时，几乎没有人理解我们说软件在服务器上运行是什么意思。直到一年后Hotmail推出，人们才开始理解。现在每个人都知道这是一个有效的方法。我们现在所做的事情有了一个名字：应用服务提供商，或ASP。&lt;/p&gt;&#xA;&lt;p&gt;我认为下一代软件的大部分都将按照这个模型编写。即使是损失最大的微软，似乎也看到将一些东西移出桌面是不可避免的。如果软件从桌面移到服务器上，对开发者来说将意味着一个完全不同的世界。本文描述了我们作为这个新世界的首批访客所看到的令人惊讶的事情。就软件确实转移到服务器上的程度而言，我在这里描述的就是未来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;下一件大事&#34;&gt;下一件大事？&lt;/h2&gt;&#xA;&lt;p&gt;当我们回顾桌面软件时代时，我想我们会惊叹于人们忍受的不便，就像我们现在惊叹于早期车主忍受的不便一样。在最初的二三十年里，你必须是一个汽车专家才能拥有汽车。但汽车是一个如此巨大的进步，以至于很多不是汽车专家的人也想拥有它们。&lt;/p&gt;&#xA;&lt;p&gt;计算机现在正处于这个阶段。当你拥有桌面计算机时，你最终会学到比你想要知道的更多关于其内部情况的知识。但超过一半的美国家庭都拥有一台。我母亲有一台计算机，她用它来收发邮件和记账。大约一年前，她收到Apple的一封信，为她提供新操作系统的折扣，这让她感到担忧。当一个65岁的女性只想用计算机来收发邮件和记账时，却不得不考虑安装新的操作系统，这就有问题了。普通用户甚至不应该知道&amp;quot;操作系统&amp;quot;这个词，更不用说&amp;quot;设备驱动程序&amp;quot;或&amp;quot;补丁&amp;quot;了。&lt;/p&gt;&#xA;&lt;p&gt;现在有另一种交付软件的方式可以拯救用户免于成为系统管理员。基于Web的应用程序是在Web服务器上运行并使用Web页面作为用户界面的程序。对于普通用户来说，这种新型软件将比桌面软件更容易、更便宜、更便携、更可靠，而且通常更强大。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的软件，大多数用户除了他们使用的应用程序外，不必考虑任何其他事情。所有混乱、变化的东西都将位于某处的服务器上，由擅长这种事情的人维护。因此，你通常不需要特定的计算机来使用软件。你只需要一个带有键盘、屏幕和Web浏览器的东西。也许它会有无线互联网接入。也许它也会是你的手机。无论它是什么，都将是消费电子产品：价格约200美元，人们主要根据外观选择的东西。你将在互联网服务上花费比硬件更多的钱，就像你现在对电话所做的那样。[1]&lt;/p&gt;&#xA;&lt;p&gt;点击到达服务器并返回需要大约十分之一秒，所以重度交互软件的用户，如Photoshop，仍然希望计算在桌面上进行。但如果你看大多数人使用计算机做的那种事情，十分之一秒的延迟不会成为问题。我母亲真的不需要桌面计算机，有很多像她这样的人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;用户的胜利&#34;&gt;用户的胜利&lt;/h2&gt;&#xA;&lt;p&gt;我家附近有一辆车，保险杠上贴着&amp;quot;死也不愿不便&amp;quot;。大多数人，在大多数时候，会选择需要最少工作的选择。如果基于Web的软件获胜，那将是因为它更方便。对于用户和开发者来说，它似乎都会更方便。&lt;/p&gt;&#xA;&lt;p&gt;使用纯基于Web的应用程序，你只需要一个连接到互联网的浏览器。所以你可以在任何地方使用基于Web的应用程序。当你在桌面计算机上安装软件时，你只能在该计算机上使用它。更糟糕的是，你的文件被困在那台计算机上。随着人们习惯网络，这种模式的不便越来越明显。&lt;/p&gt;&#xA;&lt;p&gt;这里的开端是基于Web的电子邮件。现在数百万人意识到，无论你在哪里，都应该能够访问电子邮件。如果你能看到你的邮件，为什么不能看到你的日历？如果你能和同事讨论文档，为什么不能编辑它？为什么你的任何数据都应该被困在某个远处桌子的计算机上？&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;你的计算机&amp;quot;的整个概念正在消失，被&amp;quot;你的数据&amp;quot;所取代。你应该能够从任何计算机访问你的数据。或者更确切地说，任何客户端，而客户端不一定是计算机。&lt;/p&gt;&#xA;&lt;p&gt;客户端不应该存储数据；它们应该像电话一样。事实上，它们可能会变成电话，或者反之亦然。随着客户端变小，你有另一个理由不在它们上保存数据：随身携带的东西可能会丢失或被盗。把PDA留在出租车里就像磁盘崩溃，只是你的数据交给了别人而不是被蒸发掉了。&lt;/p&gt;&#xA;&lt;p&gt;使用纯基于Web的软件，你的数据和应用程序都不会保存在客户端上。所以你不需要安装任何东西来使用它。当没有安装时，你不必担心安装出错。应用程序和你的操作系统之间不可能存在不兼容性，因为软件不在你的操作系统上运行。&lt;/p&gt;&#xA;&lt;p&gt;因为它不需要安装，所以在你&amp;quot;购买&amp;quot;之前尝试基于Web的软件将是容易且常见的。你应该期望能够免费试用任何基于Web的应用程序，只需访问提供它的网站即可。在Viaweb，我们的整个网站就像一个大箭头，指向用户试驾。&lt;/p&gt;&#xA;&lt;p&gt;试驾后，注册服务只需要填写一个简短的表格（越简短越好）。这应该是用户必须做的最后工作。有了基于Web的软件，你应该无需额外付费、做任何工作，甚至可能无需知道就能获得新版本。&lt;/p&gt;&#xA;&lt;p&gt;升级不会像现在那样令人震惊。随着时间的推移，应用程序将悄然变得更强大。这需要开发者付出一些努力。他们必须设计软件，使其能够在不使用户困惑的情况下更新。这是一个新问题，但有解决方法。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的应用程序，每个人都使用相同的版本，错误一旦发现就可以修复。所以基于Web的软件应该比桌面软件的错误少得多。在Viaweb，我怀疑我们任何时候有过十个已知的错误。这比桌面软件好几个数量级。&lt;/p&gt;&#xA;&lt;p&gt;基于Web的应用程序可以同时被多个人使用。这对于协作应用程序来说显然是一个优势，但我敢打赌，一旦用户意识到这是可能的，他们会开始在大多数应用程序中想要这个功能。例如，让两个人编辑同一个文档通常是有用的。Viaweb允许多个用户同时编辑一个站点，更多是因为这是编写软件的正确方式，而不是因为我们期望用户想要这样做，但结果证明很多人确实这样做了。&lt;/p&gt;&#xA;&lt;p&gt;当你使用基于Web的应用程序时，你的数据会更安全。磁盘崩溃不会成为过去的事情，但用户不会再听到它们。它们将发生在服务器集群中。提供基于Web应用程序的公司实际上会进行备份——不仅因为他们会有真正的系统管理员担心这些事情，而且因为丢失用户数据的ASP将陷入巨大的麻烦。当人们在自己的磁盘崩溃中丢失数据时，他们不会太生气，因为他们只能生自己的气。当公司为他们丢失数据时，他们会更生气。&lt;/p&gt;&#xA;&lt;p&gt;最后，基于Web的软件应该对病毒不那么脆弱。如果客户端除了浏览器外不运行任何东西，运行病毒的机会就更少，本地也没有数据可以损坏。攻击服务器本身的程序会发现它们防御得很好。[2]&lt;/p&gt;&#xA;&lt;p&gt;对于用户来说，基于Web的软件压力会更小。我认为如果你查看普通Windows用户的内心，你会发现对符合这种描述的软件有着巨大且基本未被利用的渴望。释放出来，它可能是一股强大的力量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;代码之城&#34;&gt;代码之城&lt;/h2&gt;&#xA;&lt;p&gt;对于开发者来说，基于Web和桌面软件之间最显著的区别是，基于Web的应用程序不是单一的代码片段。它将是不同类型程序的集合，而不是单一的大二进制文件。因此设计基于Web的软件更像设计城市而不是建筑：除了建筑物，你还需要道路、路标、公用设施、警察和消防部门，以及增长和各种灾难的计划。&lt;/p&gt;&#xA;&lt;p&gt;在Viaweb，软件包括相当大的应用程序，用户直接与之对话；这些程序使用的程序；在后台持续运行寻找问题的程序；如果出现问题尝试重新启动事物的程序；偶尔运行以编译统计信息或构建搜索索引的程序；我们明确运行以垃圾收集资源或移动或恢复数据的程序；假装是用户的程序（以测量性能或暴露错误）；诊断网络问题的程序；进行备份的程序；外部服务的接口；驱动令人印象深刻的表盘集合显示实时服务器统计的软件（对访客来说很受欢迎，但对我们来说也是不可或缺的）；对开源软件的修改（包括错误修复）；以及大量的配置文件和设置。在我们被Yahoo收购后，Trevor Blackwell编写了一个精彩的程序，可以在不关闭商店的情况下将商店迁移到全国的新服务器。程序通过传呼机呼叫我们，向用户发送传真和电子邮件，与信用卡处理商进行交易，并通过套接字、管道、http请求、ssh、udp数据包、共享内存和文件相互交谈。Viaweb的一部分甚至由程序的缺失组成，因为Unix安全的关键之一是不运行人们可能用来闯入服务器的不必要实用程序。&lt;/p&gt;&#xA;&lt;p&gt;这并不以软件结束。我们花了很多时间思考服务器配置。我们自己从组件构建服务器——部分是为了省钱，部分是为了得到我们想要的东西。我们必须考虑我们的上游ISP是否与所有骨干网有足够快的连接。我们与RAID供应商连续约会。&lt;/p&gt;&#xA;&lt;p&gt;但硬件不仅仅是要担心的事情。当你控制它时，你可以为用户做更多。对于桌面应用程序，你可以指定某些最低硬件要求，但你不能添加更多。如果你管理服务器，你可以一步让所有用户能够传呼别人，或发送传真，或通过电话发送命令，或处理信用卡等，只需安装相关硬件即可。我们总是寻找用硬件添加功能的新方法，不仅因为它让用户高兴，而且作为将自己与竞争对手区分开来的方式——竞争对手要么因为他们销售桌面软件，要么通过ISP转售基于Web的应用程序，不能直接控制硬件。&lt;/p&gt;&#xA;&lt;p&gt;因为基于Web应用程序中的软件将是程序的集合而不是单一的二进制文件，它可以用多种不同的语言编写。当你编写桌面软件时，你实际上被迫用与底层操作系统相同的语言编写应用程序——即C和C++。因此，这些语言（尤其是在非技术人员如经理和风险投资家中）被认为是&amp;quot;严肃&amp;quot;软件开发的语言。但这只是桌面软件必须交付方式的人工产物。对于基于服务器的软件，你可以使用任何你想要的语言。[3] 今天，许多顶级黑客使用远离C和C++的语言：Perl、Python，甚至Lisp。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，没有人能告诉你使用什么语言，因为你控制整个系统，一直到硬件。不同的语言适合不同的任务。你可以为每个任务使用最适合的语言。当你有竞争对手时，&amp;ldquo;你可以&amp;quot;意味着&amp;quot;你必须&amp;rdquo;（我们稍后会回到这一点），因为如果你不利用这种可能性，你的竞争对手会。&lt;/p&gt;&#xA;&lt;p&gt;我们的大多数竞争对手使用C和C++，这使得他们的软件明显 inferior，因为（除其他外），他们无法解决CGI脚本的无状态性问题。如果你要改变什么，所有的改变都必须在一个页面上发生，底部有一个更新按钮。正如我在其他地方写过的，通过使用许多人仍然认为是研究语言的Lisp，我们能够让Viaweb编辑器的行为更像桌面软件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;&#xA;&lt;p&gt;在这个新世界中最重要的变化之一是你进行发布的方式。在桌面软件业务中，进行发布是一个巨大的创伤，整个公司都在努力推出一个单一的、巨大的代码片段。明显的比较会让人联想到这个过程和最终产品。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，你可以像为自己编写的程序那样几乎实时地进行更改。你以一系列增量更改而不是偶尔的大爆炸形式发布软件。一个典型的桌面软件公司可能一年进行一两次发布。在Viaweb，我们通常一天进行三到五次发布。&lt;/p&gt;&#xA;&lt;p&gt;当你切换到这个新模式时，你会意识到软件开发受到发布方式的影响有多大。你在桌面软件业务中看到的一些最令人讨厌的问题是由于发布的灾难性性质造成的。&lt;/p&gt;&#xA;&lt;p&gt;当你每年只发布一个新版本时，你倾向于批量处理错误。在发布日期之前的某个时间，你组装一个新版本，其中一半的代码被撕掉并替换，引入了无数错误。然后一队QA人员介入并开始计算它们，程序员们处理这个列表，修复它们。他们通常不会到达列表的末尾，事实上，没有人确定末尾在哪里。这就像从池塘里捞碎石。你永远不知道软件内部发生了什么。充其量你最终得到一种统计上的正确性。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，大多数更改都是小而增量的。这本身就不太可能引入错误。这也意味着当你准备发布软件时，你知道最需要仔细测试什么：你最后改变的东西。你对代码的控制要牢固得多。作为一个一般规则，你确实知道它内部发生了什么。当然你没有记住源代码，但当你阅读源代码时，你这样做就像飞行员扫描仪表盘，而不是像侦探试图解开一些谜团。&lt;/p&gt;&#xA;&lt;p&gt;桌面软件培养了对错误的某种宿命论。你知道你正在发布充满错误的东西，你甚至建立了补偿机制（例如补丁发布）。那么为什么还要担心几个更多的错误呢？很快你就会发布你知道有问题的整个功能。苹果今年早些时候就这样做了。他们感到压力要发布他们的新操作系统，其发布日期已经四次推迟，但一些软件（对CD和DVD的支持）还没有准备好。解决方案？他们在没有完成部分的情况下发布了操作系统，用户将不得不稍后安装它们。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的软件，你永远不必在软件能够工作之前发布它，你可以一旦它能够工作就发布它。&lt;/p&gt;&#xA;&lt;p&gt;行业资深人士可能会想，说你在软件能够工作之前永远不必发布软件听起来是个好主意，但当你承诺在某个日期之前交付软件的新版本时会发生什么？有了基于Web的软件，你不会做出这样的承诺，因为没有版本。你的软件逐渐而持续地变化。一些变化可能比其他变化更大，但版本的概念自然不适合基于Web的软件。&lt;/p&gt;&#xA;&lt;p&gt;如果有人记得Viaweb，这可能听起来很奇怪，因为我们总是在宣布新版本。这完全是为了公关目的。我们了解到，行业媒体是以版本号思考的。他们会为主要版本提供主要报道，意思是版本号的新第一位数字，而对于点版本，通常最多只有一个段落，意思是小数点后的新数字。&lt;/p&gt;&#xA;&lt;p&gt;我们的一些竞争对手提供桌面软件，实际上有版本号。对于这些发布，仅仅这个事实在我们看来就是他们落后的证据，他们会获得各种宣传。我们不想错过，所以我们也开始给我们的软件版本号。当我们想要一些宣传时，我们会列出自上次&amp;quot;发布&amp;quot;以来我们添加的所有功能，在软件上贴上一个新版本号，并发布新闻稿说新版本立即可用。令人惊讶的是，从来没有人指责我们这样做。&lt;/p&gt;&#xA;&lt;p&gt;到我们被收购时，我们已经这样做了三次，所以我们处于版本4。如果我没记错的话，是版本4.1。在Viaweb成为Yahoo Store后，不再如此迫切需要宣传，所以尽管软件继续发展，版本号的整个概念被悄然放弃了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;错误&#34;&gt;错误&lt;/h2&gt;&#xA;&lt;p&gt;基于Web软件的另一个主要技术优势是你可以重现大多数错误。用户的数据就在你的磁盘上。如果有人破坏了你的软件，你不必像桌面软件那样猜测发生了什么：你应该能够在他们在电话上与你交谈时重现错误。如果你在应用程序中内置了注意错误的代码，你甚至可能已经知道它。&lt;/p&gt;&#xA;&lt;p&gt;基于Web的软件全天候使用，所以你所做的一切都会立即受到考验。错误很快就会出现。&lt;/p&gt;&#xA;&lt;p&gt;软件公司有时被指控让用户调试他们的软件。而这正是我所倡导的。对于基于Web的软件，这实际上是一个好计划，因为错误更少且短暂。当你逐渐发布软件时，一开始你得到的错误会少得多。当你能够重现错误并立即发布更改时，你可以在大多数错误出现时找到并修复它们。我们任何时候都没有足够的错误需要正式的错误跟踪系统。&lt;/p&gt;&#xA;&lt;p&gt;当然，你应该在发布之前测试更改，所以不应该发布主要错误。那些不可避免地漏掉的少数错误将涉及边界情况，并且只会在有人打电话抱怨之前影响少数遇到它们的用户。只要你立即修复错误，对于普通用户来说，净效果是错误少得多。我怀疑普通Viaweb用户曾经看到过错误。&lt;/p&gt;&#xA;&lt;p&gt;修复新错误比修复旧错误更容易。在你刚刚编写的代码中找到错误通常相当快。当它出现时，你往往在查看源代码之前就知道哪里错了，因为你已经在潜意识中担心它了。修复六个月前编写的代码中的错误（如果你一年发布一次，这是平均情况）要多花很多工作。而且由于你对代码的理解不够，你更有可能以丑陋的方式修复它，甚至引入更多错误。[4]&lt;/p&gt;&#xA;&lt;p&gt;当你及早发现错误时，你也会得到更少的复合错误。复合错误是两个相互作用的独立错误：你下楼时绊倒，当你伸手抓住栏杆时，它从你手中脱落。在软件中，这种错误是最难发现的，而且往往具有最严重的后果。[5] 传统的&amp;quot;打破一切然后过滤错误&amp;quot;方法本质上会产生很多复合错误。而以一系列小更改发布的软件本质上不会这样。地板不断被清扫干净，任何可能后来卡在什么东西里的松散物体。&lt;/p&gt;&#xA;&lt;p&gt;如果你使用一种称为函数式编程的技术，这会有所帮助。函数式编程意味着避免副作用。你更可能在研究论文中看到它，而不是商业软件，但对于基于Web的应用程序，它结果非常有用。将整个程序写成纯函数式代码很难，但你可以用这种方式编写实质性的部分。它使你软件的这些部分更容易测试，因为它们没有状态，在你不断制作和测试小修改的情况下，这非常方便。我用这种风格编写了Viaweb编辑器的大部分，我们使我们的脚本语言RTML成为一种纯函数式语言。&lt;/p&gt;&#xA;&lt;p&gt;来自桌面软件业务的人会发现这难以置信，但在Viaweb，错误几乎成了一种游戏。由于大多数发布的错误都涉及边界情况，遇到它们的用户可能是高级用户，他们在测试极限。高级用户对错误更宽容，特别是因为你可能是在添加他们要求的功能时引入了它们的。事实上，因为错误很少，你必须做复杂的事情才能看到它们，高级用户常常为抓住一个而感到自豪。他们会怀着更多是胜利而不是愤怒的精神致电支持，好像他们从我们这里得分了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;&#xA;&lt;p&gt;当你能够重现错误时，它改变了你处理客户支持的方法。在大多数软件公司，支持作为让客户感觉更好的方式提供。他们要么是关于一个已知错误打电话给你，要么是他们做错了什么，你必须弄清楚是什么。在任何一种情况下，你都从他们那里学不到太多东西。所以你倾向于将支持电话视为一个令人讨厌的事情，你希望尽可能将其与开发者隔离。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
