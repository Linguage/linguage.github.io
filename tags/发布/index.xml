<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>发布 on Linguista</title>
    <link>https://linguage.github.io/tags/%E5%8F%91%E5%B8%83/</link>
    <description>Recent content in 发布 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E5%8F%91%E5%B8%83/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>&#34;艺术家要发布&#34;的另一面</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/artistsship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/artistsship/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/artistsship/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;艺术家要发布的另一面&#34;&gt;&amp;ldquo;艺术家要发布&amp;quot;的另一面&lt;/h1&gt;&#xA;&lt;p&gt;2008年11月&lt;/p&gt;&#xA;&lt;p&gt;大公司与创业公司之间的区别之一是，大公司往往已经制定了防止犯错的程序。创业公司走路就像幼儿，不断撞到东西，跌倒。大公司则更加谨慎。&lt;/p&gt;&#xA;&lt;p&gt;组织中审核的逐渐积累是一种学习，基于发生在自己或类似组织身上的灾难。例如，在与一个破产并无法交付的供应商签订合同后，公司可能会要求所有供应商在投标前证明自己有偿付能力。&lt;/p&gt;&#xA;&lt;p&gt;随着公司的发展，他们不可避免地会有更多这样的审核，要么是为了应对他们遭受的灾难，要么（可能更常见的是）通过从更大的公司雇佣带来新灾难防范习惯的人。&lt;/p&gt;&#xA;&lt;p&gt;组织从错误中学习是自然的。问题是，提出新审核的人几乎从不考虑审核本身有成本。&lt;/p&gt;&#xA;&lt;h2 id=&#34;每个审核都有成本&#34;&gt;每个审核都有成本。&lt;/h2&gt;&#xA;&lt;p&gt;例如，考虑让供应商验证其偿付能力的情况。这难道不是仅仅谨慎吗？但实际上它可能有巨大成本。显然，双方提供和检查供应商偿付能力证明的人有直接的时间成本。但真正的成本是你从未听说过的：本会是最佳供应商的公司，但因为无法腾出精力进行验证而没有投标。或者本会是最佳供应商的公司，但偿付能力却刚好低于门槛——当然这个门槛会被定得偏高，因为没有明显的提高成本。&lt;/p&gt;&#xA;&lt;p&gt;每当组织中有人提议添加新审核时，他们应该不仅解释收益，还要解释成本。无论他们分析得多么糟糕，这个元审核至少会提醒每个人必须存在成本，并让他们去寻找它。&lt;/p&gt;&#xA;&lt;p&gt;如果公司开始这样做，他们会发现一些意外。Joel Spolsky最近在Y Combinator谈到向企业客户销售软件。他说，在大多数公司中，成本高达约1000美元的软件可以由个人经理无需任何额外批准购买。超过这个门槛，软件购买通常必须由委员会批准。但是为软件供应商处理这个过程如此昂贵，以至于收费少于50000美元没有意义。这意味着如果你制造了一个本来可能收费5000美元的东西，你必须以50000美元的价格出售。&lt;/p&gt;&#xA;&lt;p&gt;委员会的目的是确保公司不浪费钱。然而结果是公司支付了10倍的价格。&lt;/p&gt;&#xA;&lt;p&gt;购买审核总是昂贵的，因为向你销售东西越困难，它就必须成本越高。而且不是线性的。如果你足够难以销售，最擅长制造东西的人根本不想费心。唯一会向你销售的是专门向你销售的公司。那么你已经陷入了全新的低效率水平。市场机制不再保护你，因为好的供应商已经不在市场上了。&lt;/p&gt;&#xA;&lt;p&gt;这样的事情不断发生在所有最大的组织中，政府。但政府实施的审核可能导致的问题不仅仅是多付钱。政府实施的审核可能破坏整个国家的经济。直到大约1400年，中国比欧洲更富有，技术更先进。欧洲超越的一个原因是中国政府限制了长途贸易航行。因此欧洲人开始探索并最终主导世界其他地区，包括中国。&lt;/p&gt;&#xA;&lt;p&gt;在更近的时代，《萨班斯-奥克斯利法案》实际上摧毁了美国IPO市场。这不是立法者的意图。他们只是想为上市公司添加更多审核。但他们忘记了考虑成本。他们忘记了即将上市的公司通常相当紧张，而对通用电气来说可能容易承受的几个额外审核的重量，足以阻止年轻公司上市。&lt;/p&gt;&#xA;&lt;p&gt;一旦你开始思考审核的成本，你就可以开始问其他有趣的问题。成本是在增加还是减少？在某些地区是否比其他地区高？哪里会不连续地增加？如果大型组织开始问这样的问题，他们会学到一些令人恐惧的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;我认为审核的成本实际上可能在增加&#34;&gt;我认为审核的成本实际上可能在增加。&lt;/h2&gt;&#xA;&lt;p&gt;原因是软件在公司中扮演着越来越重要的角色，而编写软件的人特别受到审核的伤害。&lt;/p&gt;&#xA;&lt;p&gt;程序员与许多类型的工人不同，最好的程序员实际上更愿意努力工作。在大多数类型的工作中似乎并非如此。当我在快餐店工作时，我们并不喜欢繁忙时段。当我过去修剪草坪时，我绝对不喜欢一周下雨后草长得很长的时候。&lt;/p&gt;&#xA;&lt;p&gt;然而，程序员在写更多代码时更喜欢。或者更准确地说，在发布更多代码时更喜欢。程序员喜欢做出改变。好的程序员，无论如何。&lt;/p&gt;&#xA;&lt;p&gt;对于好的程序员来说，为创业公司工作的最大好处之一是发布的审核很少。在真正的创业公司中，根本没有外部审核。如果你早上有一个新功能的想法，你可以在午餐前编写它并将其推送到生产服务器。当你能做到这一点时，你会有更多想法。&lt;/p&gt;&#xA;&lt;p&gt;在大公司，软件必须经过各种批准才能发布。这样做的成本可能是巨大的——实际上是不连续的。最近我和三个程序员交谈，他们的创业公司几年前被一家大公司收购。当他们独立时，他们可以立即发布更改。现在，他们说，他们能在生产服务器上发布代码的最快速度是两周。&lt;/p&gt;&#xA;&lt;p&gt;这不仅让他们生产力降低。这让他们讨厌为收购者工作。&lt;/p&gt;&#xA;&lt;p&gt;这里是程序员多么喜欢能够努力工作的一个迹象：这些人会付钱来立即发布代码，像过去那样。我问他们是否愿意用收购价的10%来换取立即发布代码的能力，三个人立即说愿意。然后我问他们愿意用收购价的最大百分比来换取它。他们说他们不想思考，因为他们不想知道自己会多高，但我得到的印象可能高达一半。&lt;/p&gt;&#xA;&lt;p&gt;他们会牺牲数十万，也许是数百万美元，只是为了能够向用户交付更多软件。你知道吗？让他们这样做是完全安全的。事实上，收购者会更好；这些人不仅不会破坏任何东西，他们会完成更多工作。所以收购者实际上以更高的成本获得了更差的绩效。就像批准软件购买的委员会一样。&lt;/p&gt;&#xA;&lt;p&gt;正如难以销售的最大危险不是你多付钱，而是最好的供应商甚至不会向你销售，对程序员应用太多审核的最大危险不是你会让他们不高效，而是好的程序员甚至不想为你工作。&lt;/p&gt;&#xA;&lt;p&gt;史蒂夫·乔布斯著名的格言&amp;quot;艺术家要发布&amp;quot;有两个方面。艺术家不仅能够发布。他们坚持要发布。所以如果你不让人发布，你就不会有任何艺术家。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用13句话讲清楚创业</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/13sentences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/13sentences/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/13sentences/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;用13句话讲清楚创业&#34;&gt;用13句话讲清楚创业&lt;/h1&gt;&#xA;&lt;p&gt;想创业吗？申请Y Combinator融资。观看本文的写作过程。2009年2月&lt;/p&gt;&#xA;&lt;p&gt;我经常告诉创业者一个我从Paul Buchheit那里学到的原则：让少数人非常满意，比让很多人半满意要好。最近我告诉一个记者，如果我只能告诉创业者10件事，这会是其中之一。然后我想：其他9件会是什么？&lt;/p&gt;&#xA;&lt;p&gt;当我列出清单时，发现有13条：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;选择好的联合创始人。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;联合创始人对创业公司来说，就像位置对房地产一样。你可以改变房子的任何方面，除了它的位置。在创业公司中，你可以轻易改变你的想法，但改变联合创始人很难。[1] 而创业公司的成功几乎总是其创始人的函数。&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;快速发布。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;快速发布的原因并不是说尽早将产品推向市场至关重要，而是直到你发布，你才真正开始着手处理它。发布教会你本应该构建什么。在你明白之前，你都在浪费时间。所以无论你用什么发布，其主要价值都是作为吸引用户的借口。&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;让你的想法进化。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这是快速发布的第二部分。快速发布并迭代。把创业公司当作仅仅是实现某个绝妙初始想法的事情是个大错误。就像写文章一样，大多数想法都是在实现过程中出现的。&lt;/p&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;理解你的用户。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;你可以将创业公司创造的财富想象成一个矩形，一边是用户数量，另一边是你改善他们生活的程度。[2] 第二个维度是你最能控制的。实际上，第一个维度的增长将取决于你在第二个维度上做得如何。就像在科学中，困难的部分不是回答问题，而是提出问题：困难的部分是看到用户缺乏的新东西。你越了解他们，做到这一点的机会就越大。这就是为什么这么多成功的创业公司都制造了创始人自己需要的东西。&lt;/p&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;最好让少数用户喜欢你，而不是让很多人无感。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;理想情况下，你希望让大量用户喜欢你，但你不能指望一蹴而就。最初你必须在满足所有潜在用户子集的需求，或满足所有潜在用户需求子集之间做出选择。选择前者。在用户数量上扩展比在满意度上扩展更容易。也许更重要的是，你更难欺骗自己。如果你认为你距离好产品还有85%的路要走，你怎么知道不是70%？或者10%？而知道你有多少用户是很容易的。&lt;/p&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;提供令人惊讶的好客户服务。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;客户习惯于被虐待。他们打交道的大多数公司都是准垄断企业，能够逃脱糟糕的客户服务。你对可能性的看法已经被这些经历无意识地降低了。尝试使你的客户服务不仅好，而且令人惊讶的好。想方设法让人们快乐。他们会感到惊喜的；你会看到的。在创业公司的最早阶段，提供难以扩展的客户服务是值得的，因为这是了解用户的一种方式。&lt;/p&gt;&#xA;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;你会得到你衡量的东西。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这是我从Joe Kraus那里学到的。[3] 仅仅衡量某件事就有一种不可思议的改善它的倾向。如果你想让你的用户数量增加，在你的墙上贴一大张纸，每天标出用户数量。当它上升时你会感到高兴，下降时会失望。很快你就会开始注意到是什么让数字上升，你会开始做更多这样的事情。推论：小心你衡量什么。&lt;/p&gt;&#xA;&lt;ol start=&#34;8&#34;&gt;&#xA;&lt;li&gt;少花钱。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;我无法强调创业公司保持廉价有多么重要。大多数创业公司在制造出人们想要的东西之前就失败了，最常见的失败形式是资金耗尽。所以保持廉价与快速迭代（几乎）是可以互换的。[4] 但这不仅仅是这些。廉价文化就像锻炼保持人们年轻一样，能让公司保持年轻。&lt;/p&gt;&#xA;&lt;ol start=&#34;9&#34;&gt;&#xA;&lt;li&gt;实现拉面盈利。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&amp;ldquo;拉面盈利&amp;quot;意味着创业公司的收入刚好足以支付创始人的生活费用。这不是商业模式的快速原型（尽管它可以是），而更像是一种黑客投资过程的方式。一旦你实现拉面盈利，你与投资者的关系就完全改变了。这对士气也很棒。&lt;/p&gt;&#xA;&lt;ol start=&#34;10&#34;&gt;&#xA;&lt;li&gt;避免分心。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;没有什么比分心更能扼杀创业公司了。最糟糕的类型是那些付钱的：日常工作、咨询、有利可图的副项目。创业公司可能具有更多的长期潜力，但你总是会中断在它上面的工作，去接那些现在付钱给你的人的电话。矛盾的是，融资就是这种类型的分心，所以也要尽量减少它。&lt;/p&gt;&#xA;&lt;ol start=&#34;11&#34;&gt;&#xA;&lt;li&gt;不要气馁。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;虽然创业公司直接死亡的原因往往是资金耗尽，但根本原因通常是缺乏专注。要么公司由愚蠢的人经营（这无法通过建议修复），要么人们聪明但变得气馁。开始创业公司是一个巨大的精神负担。理解这一点，并有意识地努力不被它压垮，就像你在拿起重箱子时要小心弯曲膝盖一样。&lt;/p&gt;&#xA;&lt;ol start=&#34;12&#34;&gt;&#xA;&lt;li&gt;不要放弃。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;即使你气馁了，也不要放弃。仅仅通过不放弃，你就能走得比你想象的远得多。这在所有领域都不成立。有很多人无论坚持多久都无法成为优秀的数学家。但创业公司不是这样的。纯粹的努力通常就足够了，只要你不断调整你的想法。&lt;/p&gt;&#xA;&lt;ol start=&#34;13&#34;&gt;&#xA;&lt;li&gt;交易会失败。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;我们从Viaweb学到的最有用的技能之一是不抱太大希望。我们可能有20个各种类型的交易失败了。在前10个左右之后，我们学会将交易视为我们应该忽略直到它们终止的后台进程。开始依赖交易完成对士气来说是非常危险的，不仅因为它们经常不完成，而且因为这使它们更不可能完成。&lt;/p&gt;&#xA;&lt;p&gt;当把它缩减到13句话时，我问自己如果只能保留一个，我会选择哪一个。&lt;/p&gt;&#xA;&lt;p&gt;理解你的用户。这就是关键。创业公司的基本任务是创造财富；你最能控制的财富维度是你改善用户生活的程度；而其中最难的部分是知道为他们制造什么。一旦你知道要制造什么，制造它就只是努力的问题，大多数像样的黑客都有能力做到。&lt;/p&gt;&#xA;&lt;p&gt;理解你的用户是这个清单中一半原则的一部分。这就是要早期发布，以了解你的用户。发展你的想法是理解你的用户的体现。很好地理解你的用户会倾向于推动你制造让少数人深度满意的东西。拥有令人惊讶的好客户服务的最重要原因是它帮助你理解你的用户。而理解你的用户甚至会确保你的士气，因为当其他一切都崩溃时，只要有十个用户喜欢你，你就会继续前进。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 严格来说，没有时间机器是不可能的。&lt;/p&gt;&#xA;&lt;p&gt;[2] 实际上，它更像一个参差不齐的梳子。&lt;/p&gt;&#xA;&lt;p&gt;[3] Joe认为是惠普的创始人之一首先说的，但他不记得是哪一个。&lt;/p&gt;&#xA;&lt;p&gt;[4] 如果市场停滞不前，它们是可互换的。既然不是，工作速度快一倍比拥有两倍时间更好。&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
  </channel>
</rss>
