<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>软件 on Linguista</title>
    <link>http://localhost:1355/tags/%E8%BD%AF%E4%BB%B6/</link>
    <description>Recent content in 软件 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1355/tags/%E8%BD%AF%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mac的回归</title>
      <link>http://localhost:1355/paul_graham/essays_zh/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/mac/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/mac/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mac的回归&#34;&gt;Mac的回归&lt;/h1&gt;&#xA;&lt;p&gt;2005年3月&lt;/p&gt;&#xA;&lt;p&gt;我认识的所有最好的黑客都在逐渐转向Mac。我的朋友Robert说，他在MIT的整个研究小组最近都给自己买了Powerbook。这些人不是90年代中期苹果低谷时期购买Mac的图形设计师和祖母们。他们是你能找到的最核心的OS黑客。&lt;/p&gt;&#xA;&lt;p&gt;原因当然是OS X。Powerbook设计精美，运行FreeBSD。你还需要知道什么？&lt;/p&gt;&#xA;&lt;p&gt;我在去年年底买了一台Powerbook。当我的IBM Thinkpad的硬盘很快损坏后，它成了我唯一的笔记本电脑。当我的朋友Trevor最近出现在我家时，他拿着一台与我相同的Powerbook。&lt;/p&gt;&#xA;&lt;p&gt;对我们大多数人来说，这不是转向苹果，而是回归。尽管在90年代中期很难相信，但Mac在其时代是典型的黑客计算机。&lt;/p&gt;&#xA;&lt;p&gt;1983年秋天，我大学的一门CS课教授站起来，像先知一样宣布，很快将有一种计算机具有半MIPS的处理能力，可以放在飞机座位下，价格如此便宜，我们可以从暑假工作中节省足够的钱来买一台。整个房间都倒吸了一口气。当Mac出现时，它甚至比我们希望的还要好。它如承诺的那样小、强大和便宜。但它也是我们从未想过计算机能成为的东西：设计精美。&lt;/p&gt;&#xA;&lt;p&gt;我必须拥有一台。我不是一个人。在80年代中后期，我认识的所有黑客都在为Mac编写软件，或者想要这样做。剑桥的每个沙发床垫上似乎都躺着一本相同的胖白皮书。如果你把它翻过来，上面写着&amp;quot;Inside Macintosh&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;然后是Linux和FreeBSD，黑客们跟随最强大的OS wherever it leads，发现自己转向了Intel盒子。如果你关心设计，你可以买一台Thinkpad，如果你能把Intel和Microsoft的标签从前面撕掉，它至少不会 actively 令人反感。[1]&lt;/p&gt;&#xA;&lt;p&gt;随着OS X的出现，黑客们回来了。当我走进剑桥的苹果商店时，就像回家一样。很多东西都变了，但空气中仍然有那种苹果的酷炫感，感觉表演是由真正关心的人运营的，而不是随机的公司交易者。&lt;/p&gt;&#xA;&lt;p&gt;那又怎样，商界可能会说。谁在乎黑客是否再次喜欢苹果？毕竟，黑客市场有多大？&lt;/p&gt;&#xA;&lt;p&gt;相当小，但相对于其规模来说很重要。当涉及计算机时，黑客现在正在做的事情，十年后每个人都会做。几乎所有的技术，从Unix到位图显示到Web，都是在CS部门和研究实验室中首先流行的，然后逐渐传播到世界其他地方。&lt;/p&gt;&#xA;&lt;p&gt;我记得1986年告诉我父亲，有一种叫做Sun的新型计算机，它是一台严肃的Unix机器，但如此小和便宜，你可以拥有一个自己坐在前面，而不是坐在连接到单个中央Vax的VT100前面。我建议，也许他应该买一些这家公司的股票。我想他真的希望他听了。&lt;/p&gt;&#xA;&lt;p&gt;1994年，我的朋友Koling想和他在台湾的女朋友交谈，为了节省长途账单，他写了一些软件，将声音转换为可以通过互联网发送的数据包。当时我们不确定这是否是互联网的适当用途，互联网当时仍然是一个准政府实体。他现在做的事情被称为VoIP，它是一个巨大且快速增长的业务。&lt;/p&gt;&#xA;&lt;p&gt;如果你想知道十年后普通人会用计算机做什么，只需在一个好大学的CS部门走一圈。无论他们在做什么，你都会做。&lt;/p&gt;&#xA;&lt;p&gt;在&amp;quot;平台&amp;quot;问题上，这种趋势更加明显，因为新颖的软件源自伟大的黑客，他们倾向于首先为他们个人使用的任何计算机编写它。软件销售硬件。Apple II的初始销售中，如果不是大多数的话，很多来自购买它来运行VisiCalc的人。为什么Bricklin和Frankston为Apple II编写VisiCalc？因为他们个人喜欢它。他们可以选择任何机器使其成为明星。&lt;/p&gt;&#xA;&lt;p&gt;如果你想吸引黑客编写销售你的硬件的软件，你必须使它成为他们自己使用的东西。仅仅使其&amp;quot;开放&amp;quot;是不够的。它必须开放且好。&lt;/p&gt;&#xA;&lt;p&gt;而开放且好正是Macs再次成为的。中间的几年创造了一种据我所知前所未有的情况：苹果在低端和高端都很受欢迎，但在中间不。我七十岁的母亲有一台Mac笔记本电脑。我拥有计算机科学博士学位的朋友都有Mac笔记本电脑。[2] 然而苹果的整体市场份额仍然很小。&lt;/p&gt;&#xA;&lt;p&gt;尽管前所未有，但我预测这种情况也是暂时的。&lt;/p&gt;&#xA;&lt;p&gt;所以爸爸，有家叫苹果的公司。他们制造一种新型计算机，设计得像Bang &amp;amp; Olufsen音响系统一样好，下面是你能买到的最好的Unix机器。是的，市盈率有点高，但我想很多人会想要这些。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 这些可怕的标签很像前Google搜索引擎上流行的侵入性广告。它们对客户说：你不重要。我们关心Intel和Microsoft，而不是你。&lt;/p&gt;&#xA;&lt;p&gt;[2] Y Combinator（我们希望）主要被黑客访问。操作系统的比例是：Windows 66.4%，Macintosh 18.8%，Linux 11.4%，FreeBSD 1.5%。Mac数字与五年前相比是一个很大的变化。&lt;/p&gt;&#xA;&lt;h2 id=&#34;意大利语翻译&#34;&gt;意大利语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;俄语翻译&#34;&gt;俄语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;中文翻译&#34;&gt;中文翻译&lt;/h2&gt;</description>
    </item>
    <item>
      <title>伟大的黑客</title>
      <link>http://localhost:1355/paul_graham/essays_zh/gh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/gh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/gh/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;伟大的黑客&#34;&gt;伟大的黑客&lt;/h1&gt;&#xA;&lt;p&gt;2004年7月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自2004年Oscon大会的演讲。）&lt;/p&gt;&#xA;&lt;p&gt;几个月前我完成了一本新书，在评论中我不断注意到诸如&amp;quot;挑衅性&amp;quot;和&amp;quot;争议性&amp;quot;的词语。更不用说&amp;quot;白痴&amp;quot;了。&lt;/p&gt;&#xA;&lt;p&gt;我并不是想让这本书具有争议性。我试图让它高效。我不想浪费人们的时间告诉他们他们已经知道的事情。更高效的方法只是给他们差异。但我想这必然会产生一本令人担忧的书。&lt;/p&gt;&#xA;&lt;h2 id=&#34;爱迪生们&#34;&gt;爱迪生们&lt;/h2&gt;&#xA;&lt;p&gt;最具争议的想法是：财富的差异可能并不像我们想象的那么大问题。&lt;/p&gt;&#xA;&lt;p&gt;我在书中没有说财富差异本身就是好事。我说在某些情况下它可能是好事的标志。剧烈的头痛不是好事，但它可能是好事的标志——例如，你被击中头部后正在恢复意识。&lt;/p&gt;&#xA;&lt;p&gt;财富差异可能是生产力差异的标志。（在一个人的社会中，它们是相同的。）这几乎肯定是好事：如果你的社会没有生产力差异，可能不是因为每个人都是托马斯·爱迪生。而是因为你没有托马斯·爱迪生。&lt;/p&gt;&#xA;&lt;p&gt;在低技术社会中，你看不到太多的生产力差异。如果你有一群游牧民族为火收集木棍，最好的木棍收集者比最差的能多收集多少？两倍？而当你给人们一个像电脑这样的复杂工具时，他们能用它做的事情的差异是巨大的。&lt;/p&gt;&#xA;&lt;p&gt;这不是一个新想法。Fred Brooks在1974年写过这个，他引用的研究发表于1968年。但我认为他低估了程序员之间的差异。他写了代码行数方面的生产力：最好的程序员可以在十分之一的时间内解决给定问题。但如果问题没有给定呢？在编程中，就像在许多领域一样，困难的部分不是解决问题，而是决定要解决什么问题。想象力很难衡量，但在实践中它主导着以代码行数衡量的那种生产力。&lt;/p&gt;&#xA;&lt;p&gt;生产力在任何领域都有变化，但很少有领域变化如此之大。程序员之间的差异如此之大，以至于成为一种质的差异。我不认为这是编程固有的，但在每个领域，技术都放大了生产力的差异。我认为编程中发生的事情只是因为我们有很多技术杠杆。但在每个领域，杠杆都在变长，所以我们看到的差异是随着时间的推移，越来越多的领域都会看到的。公司和国家的成功将越来越取决于他们如何应对这个问题。&lt;/p&gt;&#xA;&lt;p&gt;如果生产力的差异随着技术而增加，那么最有生产力个体的贡献不仅会不成比例地大，而且会随着时间的推移而实际增长。当你达到一个群体的90%产出由其1%的成员创造的地步时，如果有什么（无论是维京袭击，还是中央计划）将他们的生产力拖到平均水平，你就会损失惨重。&lt;/p&gt;&#xA;&lt;p&gt;如果我们想充分利用他们，我们需要了解这些特别有生产力的人。什么激励他们？他们需要什么来做他们的工作？你如何认识他们？你如何让他们来为你工作？然后当然还有这个问题，你如何成为其中一员？&lt;/p&gt;&#xA;&lt;h2 id=&#34;不仅仅是金钱&#34;&gt;不仅仅是金钱&lt;/h2&gt;&#xA;&lt;p&gt;我认识一些超级黑客，所以我坐下来思考他们有什么共同点。他们的决定性品质可能是他们真的喜欢编程。普通程序员写代码是为了付账单。伟大的黑客认为这是他们为了乐趣而做的事情，并且很高兴发现有人会为此付钱。&lt;/p&gt;&#xA;&lt;p&gt;伟大的程序员有时被认为对金钱漠不关心。这不完全正确。确实，他们真正关心的只是做有趣的工作。但如果你赚了足够的钱，你就可以做任何你想做的工作，因此黑客被赚取巨额金钱的想法所吸引。但只要他们还必须每天上班工作，他们更关心在那里做什么，而不是得到多少报酬。&lt;/p&gt;&#xA;&lt;p&gt;从经济学上讲，这是最重要的事实，因为这意味着你不必支付伟大的黑客接近他们价值的报酬。一个伟大的程序员可能比普通程序员生产力高十倍或一百倍，但他会认为能获得三倍报酬就很幸运了。正如我稍后要解释的，这部分是因为伟大的黑客不知道他们有多好。但也是因为金钱不是他们主要想要的东西。&lt;/p&gt;&#xA;&lt;p&gt;黑客想要什么？像所有工匠一样，黑客喜欢好工具。事实上，这低估了。好的黑客发现无法忍受使用坏工具。他们会拒绝在错误基础设施的项目上工作。&lt;/p&gt;&#xA;&lt;p&gt;在我曾经工作过的一家创业公司，我们公告板上钉着的一张东西是IBM的广告。那是一张AS400的图片，标题写着，我认为，&amp;ldquo;黑客鄙视它。&amp;quot;[1]&lt;/p&gt;&#xA;&lt;p&gt;当你决定为项目使用什么基础设施时，你不仅在做出技术决定。你还在做出社会决定，而这可能是两者中更重要的。例如，如果你的公司想写一些软件，用Java写似乎是一个谨慎的选择。但当你选择一种语言时，你也在选择一个社区。你能雇佣来在Java项目上工作的程序员不会像你能雇佣来在Python项目上工作的那样聪明。而你的黑客的质量可能比你选择的语言更重要。虽然，坦率地说，好的黑客更喜欢Python而不是Java这一事实应该告诉你这些语言的相对优点。&lt;/p&gt;&#xA;&lt;p&gt;商业类型更喜欢最流行的语言，因为他们将语言视为标准。他们不想在公司上下注Betamax。但语言的问题是，它们不仅仅是标准。如果你必须通过网络传输比特，务必使用TCP/IP。但编程语言不仅仅是格式。编程语言是一种表达媒介。&lt;/p&gt;&#xA;&lt;p&gt;我读到Java刚刚超过Cobol成为最流行的语言。作为标准，你不能期望更多。但作为表达媒介，你可以做得更好。在我能想到的所有伟大程序员中，我只知道一个会自愿用Java编程。而在我能想到的所有不为Sun工作的伟大程序员中，在Java方面，我一个也不知道。&lt;/p&gt;&#xA;&lt;p&gt;伟大的黑客通常也坚持使用开源软件。不仅仅是因为它更好，还因为它给他们更多控制权。好的黑客坚持控制权。这是使他们成为好黑客的部分原因：当某些东西坏了时，他们需要修复它。你希望他们对你为他们编写的软件有这种感觉。当他们对操作系统有同样的感觉时，你不应该感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;几年前，一个风险投资家朋友告诉我他参与的一家新创业公司。听起来很有希望。但下次我和他交谈时，他们说他们决定在Windows NT上构建软件，并刚刚聘请了一位非常有经验的NT开发者担任首席技术官。当我听到这个时，我想，这些人注定要失败。第一，CTO不可能是第一流黑客，因为要成为杰出的NT开发者，他必须自愿多次使用NT，我无法想象一个伟大的黑客会这样做；第二，即使他很好，如果项目必须在NT上构建，他也很难雇佣到优秀的人才。[2]&lt;/p&gt;&#xA;&lt;h2 id=&#34;最后的边疆&#34;&gt;最后的边疆&lt;/h2&gt;&#xA;&lt;p&gt;除了软件，黑客最重要的工具可能是他的办公室。大公司认为办公室空间的功能是表达等级。但黑客不仅仅为此使用办公室：他们将办公室作为思考的地方。如果你是一家技术公司，他们的思想就是你的产品。所以让黑客在嘈杂、分散注意力的环境中工作，就像在油漆厂空气中充满烟尘。&lt;/p&gt;&#xA;&lt;p&gt;连环漫画Dilbert有很多关于隔间的说法，这是有充分理由的。我认识的所有黑客都鄙视它们。仅仅被中断的前景就足以阻止黑客处理困难问题。如果你想在有隔间的办公室里完成真正的工作，你只有两个选择：在家工作，或在别人不在的时候早点来、晚点来或周末来。公司没有意识到这是出了问题的标志吗？办公室环境应该是有助于你工作的东西，而不是你尽管如此才工作的东西。&lt;/p&gt;&#xA;&lt;p&gt;像思科这样的公司为每个人都有一间隔间而自豪，即使是CEO。但他们不像他们想象的那么先进；显然他们仍然将办公室空间视为等级的标志。还要注意，思科以很少在内部进行产品开发而闻名。他们通过收购创造新技术的创业公司来获得新技术——大概在那里黑客确实有安静的工作地方。&lt;/p&gt;&#xA;&lt;p&gt;一家理解黑客需求的大公司是微软。我曾经看到过微软的招聘广告，有一张门的大图片。为我们工作，前提是，我们会给你一个可以真正完成工作的地方。而且你知道，微软在大公司中之所以非凡，是因为他们能够在内部开发软件。也许不太好，但足够好。&lt;/p&gt;&#xA;&lt;p&gt;如果公司希望黑客有生产力，他们应该看看他们在家里做什么。在家里，黑客可以自己安排事情，以便完成最多的工作。当黑客在家工作时，他们不在嘈杂、开放的空间工作；他们在有门的房间里工作。他们在舒适、社区化的地方工作，周围有人，需要思考时可以散步，而不是在停车场英亩的玻璃盒子里。他们有可以在感到疲倦时小睡的沙发，而不是坐在桌前昏迷，假装工作。没有吸尘器人员在每晚黑客黄金时间呼啸而过。没有会议，或者，天哪，公司静修或团队建设练习。当你看他们在电脑上做什么时，你会发现它强化了我之前关于工具的说法。他们在工作时可能必须使用Java和Windows，但在家里，当他们可以自由选择时，你更可能发现他们使用Perl和Linux。&lt;/p&gt;&#xA;&lt;p&gt;事实上，这些关于Cobol或Java是最流行语言的统计数据可能会产生误导。如果我们想知道什么工具最好，我们应该看的是黑客在可以自由选择时选择什么——也就是说，在他们自己的项目中。当你问这个问题时，你会发现开源操作系统已经占据了主导市场份额，排名第一的语言可能是Perl。&lt;/p&gt;&#xA;&lt;h2 id=&#34;有趣&#34;&gt;有趣&lt;/h2&gt;&#xA;&lt;p&gt;除了好工具，黑客想要有趣的项目。什么使项目有趣？嗯，显然像隐形飞机或特效软件那样明显性感的应用程序会很有趣。但任何应用程序如果提出新颖的技术挑战，都可能很有趣。所以很难预测黑客会喜欢哪些问题，因为有些只有在工作的人发现新的解决方案时才变得有趣。在ITA（编写Orbitz内部软件的公司）之前，从事机票价格搜索的人可能认为这是可以想象的最无聊的应用程序。但ITA通过以更雄心勃勃的方式重新定义问题使其变得有趣。&lt;/p&gt;&#xA;&lt;p&gt;我认为谷歌也发生了同样的事情。当谷歌成立时，所谓门户网站的传统看法是搜索很无聊且不重要。但谷歌的人不认为搜索无聊，这就是为什么他们做得这么好。&lt;/p&gt;&#xA;&lt;p&gt;这是管理者可以有所作为的领域。就像父母对孩子说，我打赌你不能在十分钟内清理整个房间，一个好的管理者有时可以将问题重新定义为更有趣的问题。史蒂夫·乔布斯似乎特别擅长这个，部分原因只是因为他有高标准。在Mac之前有很多小型、便宜的电脑。他将问题重新定义为：制造一个漂亮的。这可能比任何胡萝卜或大棒更能驱动开发者。&lt;/p&gt;&#xA;&lt;p&gt;他们确实做到了。当Mac首次出现时，你甚至不必打开它就知道它会很好；你可以从机箱上看出来。几周前我在剑桥的街上走，在某个人的垃圾里我看到了一个似乎是Mac手提箱的东西。我往里看，里面有一台Mac SE。我带回家插上电，它启动了。快乐的Macintosh脸，然后是finder。我的天，它是如此简单。就像&amp;hellip;&amp;hellip;谷歌。&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢为有高标准的人工作。但仅仅精确是不够的。你必须坚持正确的事情。这通常意味着你必须自己是一个黑客。我偶尔看到过关于如何管理程序员的文章。真的应该有两篇文章：一篇是关于如果你自己是程序员该做什么，另一篇是关于如果你不是该做什么。而第二篇可能可以浓缩成两个词：放弃。&lt;/p&gt;&#xA;&lt;p&gt;问题不在于日常管理。真正好的黑客几乎是自我管理的。问题是，如果你不是黑客，你无法分辨谁是好黑客。一个类似的问题解释了为什么美国汽车如此丑陋。我称之为设计悖论。你可能认为你可以通过雇佣伟大的设计师来设计产品而使产品美丽。但如果你自己没有好品味，你如何认识好设计师？根据定义，你无法从他的作品集中判断。你也不能看他获得的奖项或工作，因为在设计领域，就像在大多数领域一样，这些往往是由时尚和交际驱动的，而实际能力排在第三位。没有办法：你无法在不知道什么是美丽的情况下管理一个旨在生产美丽的过程。美国汽车丑陋是因为美国汽车公司由品味差的人经营。&lt;/p&gt;&#xA;&lt;p&gt;这个国家的许多人认为品味是难以捉摸的，甚至是轻浮的。它都不是。要推动设计，管理者必须是公司产品最苛刻的用户。如果你真的有好品味，你可以像史蒂夫·乔布斯那样，使满足你成为好人喜欢解决的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;讨厌的小问题&#34;&gt;讨厌的小问题&lt;/h2&gt;&#xA;&lt;p&gt;很容易说什么样的问题不是有趣的：那些你必须解决很多讨厌小问题，而不是解决几个大的、清晰的问题。最糟糕的项目之一是为充满错误的软件编写接口。另一个是当你必须为个别客户的复杂和定义不清的需求定制东西。对黑客来说，这类项目是千刀万剐的死亡。&lt;/p&gt;&#xA;&lt;p&gt;讨厌小问题的区别特征是你从中学不到任何东西。编写编译器很有趣，因为它教你什么是编译器。但为有错误的软件编写接口教不了你任何东西，因为错误是随机的。[3] 所以不仅仅是挑剔使好黑客避免讨厌的小问题。这更多是自我保护的问题。处理讨厌的小问题会让你变笨。好黑客避免它就像模特避免奶酪汉堡一样。&lt;/p&gt;&#xA;&lt;p&gt;当然，有些问题固有这种特征。由于供需关系，它们报酬特别高。所以找到方法让伟大黑客处理繁琐问题的公司会非常成功。你会怎么做？&lt;/p&gt;&#xA;&lt;p&gt;这种情况发生的一个地方是创业公司。在我们的创业公司，我们有Robert Morris担任系统管理员。这就像让滚石乐队在犹太成年礼上演奏。你雇佣不到那种人才。但人们会为他们创始人的公司做任何艰苦的工作。[4]&lt;/p&gt;&#xA;&lt;p&gt;大公司通过分割公司来解决这个问题。他们通过建立独立的研发部门来吸引聪明的人为他们工作，员工不必直接处理客户讨厌的小问题。[5] 在这个模型中，研发部门的功能就像矿山。他们产生新想法；也许公司其余部分能够使用它们。&lt;/p&gt;&#xA;&lt;p&gt;你可能不必走到这种极端。自底向上编程提供了另一种分割公司的方法：让聪明的人作为工具制造者工作。如果你的公司制造做x的软件，让一个组构建用于编写这类软件的工具，另一个组使用这些工具编写应用程序。这样你可能能够让聪明的人写99%的代码，但仍然让他们像在传统研发部门那样与用户几乎隔离。工具制造者会有用户，但他们只是公司自己的开发者。[6]&lt;/p&gt;&#xA;&lt;p&gt;如果微软使用这种方法，他们的软件就不会充满安全漏洞，因为编写实际应用程序的较不聪明的人不会做分配内存这样的低级工作。他们不会直接用C编写Word，而是将Word语言的大型乐高积木拼在一起。（Duplo，我相信是技术术语。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;聚集&#34;&gt;聚集&lt;/h2&gt;&#xA;&lt;p&gt;除了有趣的问题，好黑客喜欢的还有其他好黑客。伟大的黑客倾向于聚集在一起——有时如此壮观，就像在施乐帕洛阿尔托研究中心。所以你不会以线性比例吸引好黑客，因为你为他们创造的环境有多好。聚集的倾向意味着它更像是环境的平方。所以赢家通吃。在任何给定时间，只有大约十个或二十个黑客最想工作的地方，如果你不是其中之一，你不仅会有更少的伟大黑客，你会是零。&lt;/p&gt;&#xA;&lt;p&gt;拥有伟大的黑客本身并不足以使公司成功。这对谷歌和ITA很有效，它们是现在的两个热点，但它没有帮助思维机器或施乐。Sun曾经有一段好时光，但他们的商业模式是下降电梯。在这种情况下，即使最好的黑客也救不了你。&lt;/p&gt;&#xA;&lt;p&gt;不过，我认为，在其他条件相同的情况下，能够吸引伟大黑客的公司将具有巨大优势。有人会不同意这一点。当我们在1990年代走访风险投资公司时，几家告诉我们软件公司不是通过编写伟大的软件获胜，而是通过品牌、主导渠道和做正确的交易。&lt;/p&gt;&#xA;&lt;p&gt;他们似乎真的相信这一点，我想我知道为什么。我认为许多风险投资家寻找的，至少在无意识中，是下一个微软。当然，如果微软是你的模型，你不应该寻找希望通过编写伟大软件获胜的公司。但风险投资家寻找下一个微软是错误的，因为没有创业公司能成为下一个微软，除非其他公司准备在恰到好处的时刻弯腰成为下一个IBM。&lt;/p&gt;&#xA;&lt;p&gt;使用微软作为模型是错误的，因为他们的整个文化源自那一次幸运的突破。微软是一个坏的数据点。如果你把他们扔出去，你会发现好产品确实倾向于在市场上获胜。风险投资家应该寻找的是下一个苹果，或下一个谷歌。&lt;/p&gt;&#xA;&lt;p&gt;我想比尔·盖茨知道这一点。谷歌让他担心的不是他们品牌的力量，而是他们有更好的黑客。[7]&lt;/p&gt;&#xA;&lt;h2 id=&#34;认可&#34;&gt;认可&lt;/h2&gt;&#xA;&lt;p&gt;那么谁是伟大的黑客？你遇到时如何知道？结果证明这非常困难。即使是黑客也说不出来。我现在很确定我的朋友Trevor Blackwell是一个伟大的黑客。你可能读过Slashdot上关于他如何制作自己的Segway的报道。这个项目的显著之处是他在一天内写了所有软件（顺便说一句，用Python）。&lt;/p&gt;&#xA;&lt;p&gt;对Trevor来说，这是家常便饭。但当我第一次遇到他时，我认为他是个十足的白痴。他站在Robert Morris的办公室里对他喋喋不休地说着什么，我记得我站在他身后向Robert做疯狂的手势，把这个疯子赶出办公室，这样我们就可以去吃午饭了。Robert说他一开始也误判了Trevor。显然当Robert第一次遇到他时，Trevor刚刚开始一个新计划，涉及在一堆索引卡上写下他生活各方面的所有内容，他随身携带。他也刚从加拿大来，有浓重的加拿大口音和mullet发型。&lt;/p&gt;&#xA;&lt;p&gt;由于黑客尽管有社交迟钝的声誉，有时却花费很大努力让自己看起来聪明，这使问题更加复杂。当我在研究生院时，我偶尔会在MIT AI实验室闲逛。起初有点吓人。那里的每个人都说话这么快。但过了一会儿我学会了快速说话的技巧。你不必思考得更快；只是用两倍的词说所有事情。信号中有这么多噪音，遇到好黑客时很难分辨。我现在也分辨不出。你也无法从他们的简历中看出来。似乎判断黑客的唯一方法是和他一起处理某个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于Web应用的Lisp</title>
      <link>http://localhost:1355/paul_graham/essays_zh/lwba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/lwba/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/lwba/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;基于web应用的lisp&#34;&gt;基于Web应用的Lisp&lt;/h1&gt;&#xA;&lt;p&gt;在《击败平均值》的链接被发布在slashdot上之后，一些读者希望更详细地了解我们在Viaweb中使用Lisp获得的具体技术优势。对于那些感兴趣的人，以下是我2001年4月在剑桥BBN实验室的演讲节选。&lt;/p&gt;&#xA;&lt;p&gt;BBN演讲节选（ASCII）&lt;/p&gt;</description>
    </item>
    <item>
      <title>平板电脑</title>
      <link>http://localhost:1355/paul_graham/essays_zh/tablets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/tablets/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/tablets/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;平板电脑&#34;&gt;平板电脑&lt;/h1&gt;&#xA;&lt;p&gt;2010年12月&lt;/p&gt;&#xA;&lt;p&gt;我最近在想，没有一个通用术语来称呼iPhone、iPad和运行Android的相应东西是多么不便。最接近通用术语的似乎是&amp;quot;移动设备&amp;quot;，但这（a）适用于任何手机，（b）并没有真正捕捉到iPad的独特之处。&lt;/p&gt;&#xA;&lt;p&gt;几秒钟后我突然想到，我们最终会称这些东西为平板电脑。我们甚至考虑称它们为&amp;quot;移动设备&amp;quot;的唯一原因是iPhone先于iPad。如果iPad先出来，我们不会认为iPhone是手机；我们会认为它是小到可以举到耳边的平板电脑。&lt;/p&gt;&#xA;&lt;p&gt;iPhone与其说是手机，不如说是手机的替代品。这是一个重要的区别，因为它将成为一个常见模式的早期实例。我们周围的许多（如果不是大多数）专用物品将被运行在平板电脑上的应用程序替代。&lt;/p&gt;&#xA;&lt;p&gt;在GPS、音乐播放器和相机等情况中这已经很清楚了。但我认为会有多少东西被替代会让人们感到惊讶。我们资助了一家正在替代钥匙的创业公司。你可以轻松改变字体大小的事实意味着iPad有效地替代了阅读眼镜。如果我通过用加速度计玩一些聪明的技巧甚至能替代浴室秤，我不会感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;在单个设备上用软件做事的优势如此之大，以至于任何能变成软件的东西都会。所以在接下来几年里，创业公司的好方法将是环顾四周，寻找人们尚未意识到可以通过平板电脑应用变得不必要的东西。&lt;/p&gt;&#xA;&lt;p&gt;1938年，巴克敏斯特·富勒创造了ephemeralization这个词来描述物理机械越来越被我们现在称为软件所取代的趋势。平板电脑将接管世界的原因不是（仅仅）史蒂夫·乔布斯和公司是工业设计巫师，而是因为他们背后有这股力量。iPhone和iPad有效地钻了一个洞，将使ephemeralization流入许多新领域。任何研究过技术历史的人都不会想低估这股力量。&lt;/p&gt;&#xA;&lt;p&gt;我担心苹果背后有这股力量可能拥有的权力。我不想看到另一个像80年代和90年代微软那样的客户端单一文化时代。但如果ephemeralization是驱动平板电脑传播的主要力量之一，那表明了一种与苹果竞争的方法：成为它的更好平台。&lt;/p&gt;&#xA;&lt;p&gt;事实证明，苹果平板电脑中有加速度计是一件好事。开发人员以苹果从未想象过的方式使用加速度计。这就是平台的本质。工具越多功能，你就越无法预测人们如何使用它。所以平板电脑制造商应该思考：我们还能在里面放什么？不仅仅是硬件，还有软件。我们还能给开发人员访问什么？给黑客一英寸，他们会带你一英里。&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、Paul Buchheit、Jessica Livingston和Robert Morris阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微软已死</title>
      <link>http://localhost:1355/paul_graham/essays_zh/microsoft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/microsoft/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/microsoft/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;微软已死&#34;&gt;微软已死&lt;/h1&gt;&#xA;&lt;p&gt;2007年4月&lt;/p&gt;&#xA;&lt;p&gt;几天前我突然意识到微软已经死了。我正在和一个年轻的创业公司创始人谈论谷歌与雅虎的不同。我说雅虎从一开始就被对微软的恐惧所扭曲。这就是为什么他们将自己定位为&amp;quot;媒体公司&amp;quot;而不是&amp;quot;技术公司&amp;quot;。然后我看着他的脸，意识到他并不理解。这就像我告诉他80年代中期女孩们多么喜欢巴里·马尼洛一样。巴里谁？微软？他什么也没说，但我能看出他不相信有人会害怕他们。&lt;/p&gt;&#xA;&lt;p&gt;从80年代末开始，微软在软件界投下阴影将近20年。我能记得在他们之前是IBM。我大多忽略了这阴影。我从不使用微软软件，所以它只间接影响我——例如，我从僵尸网络收到的垃圾邮件。因为我没有注意，所以我没有注意到阴影何时消失。&lt;/p&gt;&#xA;&lt;p&gt;但现在它已经消失了。我能感觉到。再也没有人害怕微软了。他们仍然赚很多钱——IBM也是如此。但他们并不危险。&lt;/p&gt;&#xA;&lt;p&gt;微软什么时候死的，死于什么？我知道他们在2001年时似乎还很危险，因为我当时写了一篇论文，说他们没有看起来那么危险。我猜他们在2005年就死了。我知道当我们创办Y Combinator时，我们并不担心微软会与我们资助的创业公司竞争。事实上，我们甚至从未邀请他们参加我们为创业公司向投资者展示而组织的演示日。我们邀请雅虎、谷歌和其他一些互联网公司，但我们从未费心邀请微软。那里也从未有人给我们发过邮件。他们在不同的世界。&lt;/p&gt;&#xA;&lt;p&gt;是什么杀死了他们？我认为是四件事，都发生在2000年代中期。&lt;/p&gt;&#xA;&lt;p&gt;最明显的是谷歌。镇上只能有一个大佬，而他们显然就是。谷歌现在是迄今为止最危险的公司，无论从好的还是坏的意义上来说。微软最多只能 afterward 蹒跚而行。&lt;/p&gt;&#xA;&lt;p&gt;谷歌什么时候领先？人们会倾向于将其推回到2004年8月的IPO，但那时他们并没有设定辩论的条款。我认为他们在2005年领先。Gmail是让他们越过边缘的事情之一。Gmail表明他们能做的不仅仅是搜索。&lt;/p&gt;&#xA;&lt;p&gt;Gmail还展示了如果你利用后来被称为&amp;quot;Ajax&amp;quot;的技术，基于网络的软件能做多少事情。这是微软死亡的第二个原因：每个人都能看到桌面已经结束。现在应用程序似乎不可避免地会在网络上生存——不仅仅是电子邮件，而是一切，直到Photoshop。甚至微软现在也看到了这一点。&lt;/p&gt;&#xA;&lt;p&gt;具有讽刺意味的是，微软无意中帮助创造了Ajax。Ajax中的x来自XMLHttpRequest对象，它让浏览器在显示页面的同时在后台与服务器通信。（最初与服务器通信的唯一方式是请求新页面。）XMLHttpRequest是微软在90年代末创建的，因为他们需要它用于Outlook。他们没有意识到的是，它对很多其他人也有用——事实上，对任何想要让网络应用程序像桌面应用程序一样工作的人都有用。&lt;/p&gt;&#xA;&lt;p&gt;Ajax的另一个关键组件是Javascript，这种在浏览器中运行的编程语言。微软看到了Javascript的危险，并试图尽可能长时间地保持其损坏。[1] 但最终开源世界赢了，通过产生Javascript库，这些库就像树长在铁丝网上一样，覆盖了浏览器的缺陷。&lt;/p&gt;&#xA;&lt;p&gt;微软死亡的第三个原因是宽带互联网。现在任何关心的人都可以拥有快速的网络接入。连接到服务器的管道越大，你对桌面的需求就越少。&lt;/p&gt;&#xA;&lt;p&gt;棺材上的最后一颗钉子来自苹果。感谢OS X，苹果以在技术界极为罕见的方式死而复生。[2] 他们的胜利如此彻底，以至于当我遇到运行Windows的计算机时，我现在感到惊讶。我们在Y Combinator资助的几乎所有人都使用苹果笔记本电脑。在创业学校的观众中也是如此。现在所有计算机人员都使用Mac或Linux。Windows是给祖母用的，就像90年代的Mac一样。所以不仅桌面不再重要，关心计算机的人也没有人使用微软的了。&lt;/p&gt;&#xA;&lt;p&gt;当然，苹果在音乐方面也让微软节节败退，电视和手机也在路上。&lt;/p&gt;&#xA;&lt;p&gt;我很高兴微软死了。他们像尼禄或康茂德——邪恶得只有继承的权力才能让你如此。因为记住，微软的垄断不是从微软开始的。他们是从IBM那里得到的。软件业务从大约1950年代中期到大约2005年一直被垄断所笼罩。也就是说，几乎它的整个存在时间。&amp;ldquo;Web 2.0&amp;quot;之所以如此兴高采烈，原因之一就是这种感觉，无论是有意识还是无意识的，这个垄断时代可能终于结束了。&lt;/p&gt;&#xA;&lt;p&gt;当然，作为一个黑客，我禁不住思考如何修复一些损坏的东西。微软有什么方法可以东山再起吗？原则上，是的。要看看如何做到，想象两件事：（a）微软现在手头的现金量，以及（b）拉里和谢尔盖十年前在所有搜索引擎中奔波，试图以100万美元出售谷歌的想法，但被每个人拒绝。&lt;/p&gt;&#xA;&lt;p&gt;令人惊讶的事实是，按照像微软这样富有的公司的标准， brilliant hackers——危险地brilliant的hackers——可以非常便宜地得到。他们再也无法雇佣聪明的人了，但他们可以购买他们想要的数量，只需多一个数量级的钱。所以如果他们想再次成为竞争者，他们可以这样做：购买所有好的&amp;quot;Web 2.0&amp;quot;创业公司。他们可以用比必须为Facebook支付的少的钱获得几乎所有这些公司。把它们都放在硅谷的一栋楼里，用铅屏蔽包围它们，保护它们不受雷德蒙德的任何接触。我建议这个很安全，因为他们永远不会这样做。微软最大的弱点是他们仍然没有意识到他们有多么糟糕。他们仍然认为他们可以在内部编写软件。也许他们可以，按照桌面世界的标准。但那个世界几年前就结束了。&lt;/p&gt;&#xA;&lt;p&gt;我已经知道人们对这篇论文的反应会是什么。一半的读者会说微软仍然是一家利润极其丰厚的公司，我应该更小心，不要基于我们与世隔绝的&amp;quot;Web 2.0&amp;quot;小泡泡中少数人的想法得出结论。另一半，年轻的一半，会抱怨这是旧闻。&lt;/p&gt;&#xA;&lt;p&gt;另见：微软已死：Cliffs Notes&lt;/p&gt;&#xA;&lt;p&gt;注释&lt;/p&gt;&#xA;&lt;p&gt;[1] 制作不兼容的软件不需要有意识的努力。你所要做的就是不太努力地修复错误——如果你是一家大公司，你会产生大量的错误。这种情况类似于&amp;quot;文学理论家&amp;quot;的写作。大多数人不试图晦涩；他们只是不努力做到清晰。这不会带来回报。&lt;/p&gt;&#xA;&lt;p&gt;[2] 部分原因是史蒂夫·乔布斯被约翰·斯卡利推走，这在技术公司中是罕见的。如果苹果的董事会没有犯那个错误，他们就不必反弹。&lt;/p&gt;&#xA;&lt;p&gt;葡萄牙语翻译&lt;/p&gt;&#xA;&lt;p&gt;简体中文翻译&lt;/p&gt;&#xA;&lt;p&gt;韩语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>编程语言修复了什么</title>
      <link>http://localhost:1355/paul_graham/essays_zh/fix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/fix/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/fix/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;编程语言修复了什么&#34;&gt;编程语言修复了什么&lt;/h1&gt;&#xA;&lt;p&gt;凯文·凯勒her建议了一种比较编程语言的有趣方式：用每种语言所要解决的问题来描述它。令人惊讶的是，有多少语言可以用这种方式很好地描述。&lt;/p&gt;&#xA;&lt;p&gt;Algol：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Pascal：Algol没有足够的数据类型。&lt;/p&gt;&#xA;&lt;p&gt;Modula：Pascal对于系统编程来说太弱了。&lt;/p&gt;&#xA;&lt;p&gt;Simula：Algol在模拟方面不够好。&lt;/p&gt;&#xA;&lt;p&gt;Smalltalk：Simula中的一切都不是对象。&lt;/p&gt;&#xA;&lt;p&gt;Fortran：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Cobol：Fortran太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;PL/1：Fortran没有足够的数据类型。&lt;/p&gt;&#xA;&lt;p&gt;Ada：每种现有语言都缺少某些东西。&lt;/p&gt;&#xA;&lt;p&gt;Basic：Fortran太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;APL：Fortran在操作数组方面不够好。&lt;/p&gt;&#xA;&lt;p&gt;J：APL需要自己的字符集。&lt;/p&gt;&#xA;&lt;p&gt;C：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;C++：C太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Java：C++是一个混乱的东西。而且微软要打压我们。&lt;/p&gt;&#xA;&lt;p&gt;C#：Java被Sun控制着。&lt;/p&gt;&#xA;&lt;p&gt;Lisp：图灵机是描述计算的笨拙方式。&lt;/p&gt;&#xA;&lt;p&gt;Scheme：MacLisp是一个混乱的东西。&lt;/p&gt;&#xA;&lt;p&gt;T：Scheme没有库。&lt;/p&gt;&#xA;&lt;p&gt;Common Lisp：Lisp有太多方言。&lt;/p&gt;&#xA;&lt;p&gt;Dylan：Scheme没有库，而且Lisp语法太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;Perl：Shell脚本/awk/sed不够像编程语言。&lt;/p&gt;&#xA;&lt;p&gt;Python：Perl是一个混乱的东西。&lt;/p&gt;&#xA;&lt;p&gt;Ruby：Perl是一个混乱的东西，而且Lisp语法太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;Prolog：编程不够像逻辑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>苹果的错误</title>
      <link>http://localhost:1355/paul_graham/essays_zh/apple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/apple/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/apple/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;苹果的错误&#34;&gt;苹果的错误&lt;/h1&gt;&#xA;&lt;p&gt;2009年11月&lt;/p&gt;&#xA;&lt;p&gt;我认为苹果没有意识到App Store审批流程有多糟糕。或者说，我认为他们没有意识到这有多重要。&lt;/p&gt;&#xA;&lt;p&gt;苹果运营App Store的方式损害了他们在程序员中的声誉，超过了他们做过的任何其他事情。他们在程序员中的声誉曾经很好。过去你听到的关于苹果最常见的抱怨是，他们的粉丝盲目崇拜他们。App Store改变了这一点。现在很多程序员开始把苹果视为邪恶。&lt;/p&gt;&#xA;&lt;p&gt;苹果曾经与程序员之间的良好意愿有多少因为App Store而丧失了？三分之一？一半？而这还只是到目前为止。App Store是一个持续的因果报应泄露。&lt;/p&gt;&#xA;&lt;h2 id=&#34;苹果是如何陷入这个混乱局面的&#34;&gt;苹果是如何陷入这个混乱局面的？&lt;/h2&gt;&#xA;&lt;p&gt;他们的根本问题是他们不理解软件。&lt;/p&gt;&#xA;&lt;p&gt;他们对待iPhone应用就像对待他们通过iTunes销售的音乐一样。苹果是渠道；他们拥有用户；如果你想接触用户，你就必须按照他们的条件来做。唱片公司勉强同意了。但这种模式不适用于软件。中介拥有用户是行不通的。软件业在1980年代初期就认识到这一点，当时像VisiCorp这样的公司表明，虽然&amp;quot;软件&amp;quot;和&amp;quot;出版商&amp;quot;这两个词很契合，但基本概念并不契合。软件不像音乐或书籍。对于第三方来说，作为开发者和用户之间的中介太复杂了。然而，这正是苹果通过App Store试图成为的：软件出版商。而且是一个特别越界的出版商，有着挑剔的品味和严格执行的内部风格。&lt;/p&gt;&#xA;&lt;p&gt;如果软件出版在1980年行不通，那么在软件开发从少数大型发布演变为持续的小型发布流的今天，它就更行不通了。但苹果也不理解这一点。他们的产品开发模式来自硬件。他们工作直到认为产品完成，然后发布。对于硬件你必须这样做，但因为软件很容易改变，其设计可以从进化中受益。现在开发应用程序的标准方式是快速发布和迭代。这意味着每次发布新版本时都有漫长而随机的延迟是灾难性的。&lt;/p&gt;&#xA;&lt;p&gt;显然，苹果的态度是开发者在向App Store提交新版本时应该更加小心。他们会这么说。但尽管他们很强大，却不足以扭转技术的演变。程序员使用快速发布和迭代不是出于懒惰。他们使用它是因为它能产生最好的结果。通过阻碍这个过程，苹果让他们做糟糕的工作，程序员讨厌这一点，就像苹果自己讨厌一样。&lt;/p&gt;&#xA;&lt;p&gt;如果苹果在发现OS X中的严重错误时，不能立即发布软件更新，而是必须将代码提交给一个中介，这个中介将代码搁置一个月，然后因为它包含一个他们不喜欢的图标而拒绝它，苹果会喜欢吗？&lt;/p&gt;&#xA;&lt;p&gt;通过破坏软件开发，苹果得到了与他们意图相反的结果：当前在App Store中可用的应用版本往往是旧的和有错误的。一个开发者告诉我：&amp;ldquo;由于他们的流程，App Store充满了半成品应用程序。我几乎每天都制作一个新版本发布给测试用户。App Store上的版本感觉老旧和糟糕。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;我相信很多开发者都有这种感觉：一种情绪是&amp;quot;我并不真正为App Store里的东西感到骄傲&amp;quot;，另一种情绪是&amp;quot;说真的，这是苹果的错。&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;另一个人写道：&amp;ldquo;我认为他们认为审批流程通过确保质量来帮助用户。实际上，像我们这样的错误总是能通过，然后需要4-8周才能让这个错误修复得到批准，让用户认为iPhone应用有时就是无法工作。对苹果来说更糟糕的是，这些应用在其他有即时审批流程的平台上工作得很好。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;实际上，我认为苹果有第三个误解：所有关于App Store审批的抱怨都不是一个严重的问题。他们肯定听到开发者在抱怨。但合作伙伴和供应商总是在抱怨。如果他们不抱怨反而是个坏迹象；这意味着你对他们太宽松了。同时，iPhone的销售情况比以往任何时候都好。那么他们为什么需要修复任何东西呢？&lt;/p&gt;&#xA;&lt;p&gt;他们在短期内能够虐待开发者，是因为他们制造了如此出色的硬件。几天前我刚买了一台新的27英寸iMac。它很棒。屏幕太亮了，磁盘出奇地响，但它如此美丽，让你无法让自己在意。&lt;/p&gt;&#xA;&lt;p&gt;所以我买了它，但这次是带着疑虑买的。我感觉就像购买一个人权记录不佳的国家制造的东西时的感觉。这是新的。过去我从苹果买东西时是一种纯粹的快乐。哦，天啊！他们制造了这么棒的东西。这次感觉像是浮士德式的交易。他们制造了这么棒的东西，但他们却是如此混蛋。我真的想支持这家公司吗？&lt;/p&gt;&#xA;&lt;h2 id=&#34;苹果应该关心像我这样的人的想法吗&#34;&gt;苹果应该关心像我这样的人的想法吗？&lt;/h2&gt;&#xA;&lt;p&gt;如果他们疏远了一小部分用户，这有什么区别？&lt;/p&gt;&#xA;&lt;p&gt;有几个原因他们应该关心。一个是这些用户是他们想要作为员工的人。如果你的公司看起来邪恶，最好的程序员不会为你工作。从90年代开始，这对微软伤害很大。程序员开始为在那里工作感到尴尬。感觉像是出卖自己。当微软的人和其他程序员交谈并提到他们工作的地方时，有很多关于&amp;quot;投靠黑暗面&amp;quot;的自嘲笑话。&lt;/p&gt;&#xA;&lt;p&gt;但对微软来说真正的问题不是他们雇用的人的尴尬。而是他们从未得到的人。你知道谁得到了他们吗？谷歌和苹果。如果微软是帝国，他们就是反抗军联盟。谷歌和苹果今天比微软做得好得多，很大程度上是因为他们得到了更多最好的人才。&lt;/p&gt;&#xA;&lt;p&gt;为什么程序员对雇主的道德如此挑剔？部分原因是他们有能力挑剔。最好的程序员可以在任何他们想的地方工作。他们不必为他们有疑虑的公司工作。&lt;/p&gt;&#xA;&lt;p&gt;但我认为程序员挑剔的另一个原因是邪恶滋生愚蠢。一个通过行使权力获胜的组织开始失去通过做更好的工作获胜的能力。对于一个聪明人来说，在一个最好的想法不是获胜的想法的地方工作并不有趣。我认为谷歌如此热衷于&amp;quot;不作恶&amp;quot;的原因，与其说是为了给外界留下印象，不如说是为了预防自己变得傲慢。&lt;/p&gt;&#xA;&lt;p&gt;迄今为止，这对谷歌有效。他们变得更加官僚化，但除此之外，他们似乎坚持了原来的原则。苹果似乎不太如此。当你现在看著名的1984年广告时，更容易想象苹果是屏幕上的独裁者，而不是拿着锤子的女人。事实上，如果你阅读独裁者的演讲，它听起来与App Store的预言惊人地相似：&amp;ldquo;我们已经战胜了无原则的事实传播。我们已经在历史上第一次创造了一个纯粹思想的花园，每个工人都可以在那里不受矛盾和混乱真理的害虫侵扰而安全地绽放。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;苹果应该关心程序员对他们的看法的另一个原因是，当你销售一个平台时，开发者决定你的成败。如果说有谁应该知道这一点，那应该是苹果。VisiCalc成就了Apple II。&lt;/p&gt;&#xA;&lt;p&gt;程序员为他们使用的平台构建应用程序。大多数应用程序——大多数创业公司，可能——都源自个人项目。苹果本身就是这样。苹果制造微型计算机是因为史蒂夫·沃兹尼亚克自己想要一个。他买不起小型计算机。微软同样开始为微型计算机制作解释器，因为比尔·盖茨和保罗·艾伦有兴趣使用它们。不构建创始人使用的东西的创业公司是罕见的。&lt;/p&gt;&#xA;&lt;p&gt;有这么多iPhone应用的主要原因是这么多程序员有iPhone。他们可能从文章中知道黑莓有这样那样的市场份额。但实际上就好像RIM不存在一样。如果他们要构建什么东西，他们希望自己能够使用它，这意味着构建iPhone应用。&lt;/p&gt;&#xA;&lt;p&gt;所以程序员继续开发iPhone应用，尽管苹果继续虐待他们。他们就像陷入虐待关系中的人。他们被iPhone如此吸引，无法离开。但他们在寻找出路。一个人写道：&amp;ldquo;虽然我确实很享受为iPhone开发，但他们在App Store上施加的控制并没有给我开发应用程序的动力。事实上，除非绝对必要，否则我不打算再制作任何iPhone应用程序。&amp;rdquo;&lt;/p&gt;&#xA;&lt;h2 id=&#34;有什么能打破这个循环吗&#34;&gt;有什么能打破这个循环吗？&lt;/h2&gt;&#xA;&lt;p&gt;到目前为止我见过的设备都不能。Palm和RIM没有希望。唯一可信的竞争者是Android。但Android是个孤儿；谷歌并不真正关心它，不像苹果关心iPhone那样。苹果关心iPhone就像谷歌关心搜索一样。&lt;/p&gt;&#xA;&lt;h2 id=&#34;手持设备的未来是由苹果锁定的吗&#34;&gt;手持设备的未来是由苹果锁定的吗？&lt;/h2&gt;&#xA;&lt;p&gt;这是一个令人担忧的前景。会有另一个像我们在1990年代那样的沉闷单一文化是件令人沮丧的事。1995年，为终端用户编写软件实际上等同于编写Windows应用程序。我们对这种前景的恐惧是推动我们开始构建Web应用程序的最大单一因素。&lt;/p&gt;&#xA;&lt;p&gt;至少我们现在知道要打破苹果的锁定需要什么。你必须让iPhone离开程序员的手。如果程序员使用其他设备进行移动网络访问，他们会开始为该设备开发应用程序。&lt;/p&gt;&#xA;&lt;p&gt;你如何制造一个比iPhone更受程序员喜爱的设备？你不可能制造出设计更好的设备。苹果在这方面没有留下空间。所以这个替代设备可能无法通过普遍吸引力获胜。它必须凭借对程序员特有的某种吸引力获胜。&lt;/p&gt;&#xA;&lt;p&gt;吸引程序员的一种方式是通过软件。如果你能想出一个程序员必须有但在iPhone受限制世界中不可能的应用程序，你大概能让他们转换。&lt;/p&gt;&#xA;&lt;p&gt;如果程序员开始使用手持设备作为开发机器，这肯定会发生——如果手持设备像笔记本电脑取代台式电脑一样取代笔记本电脑。你对开发机器需要的控制比苹果会让你对iPhone的控制更多。&lt;/p&gt;&#xA;&lt;p&gt;有人能制造一个你可以像手机一样放在口袋里，但同时又能作为开发机器工作的设备吗？很难想象它会是什么样子。但我已经学到了永远不要对技术说永远。按现在的标准，一个能作为开发机器工作的手机大小的设备并不比按1995年的标准iPhone本身看起来更神奇。&lt;/p&gt;&#xA;&lt;p&gt;我现在的开发机器是一台MacBook Air，我在办公室里用它连接外接显示器和键盘，旅行时单独使用。如果有半个大小的版本我会更喜欢。那仍然不足以像手机一样随身携带到处带着，但我们还在4倍左右的差距内。当然这个差距是可以弥合的。&lt;/p&gt;&#xA;&lt;p&gt;事实上，让我们把它变成一个RFS（需求说明书）。寻人：拿锤子的女人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 当谷歌采用&amp;quot;不作恶&amp;quot;时，他们还如此之小，以至于没有人会期望他们如此。&lt;/p&gt;&#xA;&lt;p&gt;[2] 顺便说一句，1984年广告中的独裁者不是微软；是IBM。IBM在那些日子里看起来可怕得多，但他们比现在的苹果对开发者更友好。&lt;/p&gt;&#xA;&lt;p&gt;[3] 他甚至买不起显示器。这就是为什么Apple I使用电视机作为显示器。&lt;/p&gt;&#xA;&lt;p&gt;[4] 我交谈的几个人提到他们多么喜欢iPhone SDK。问题不是苹果的产品，而是他们的政策。幸运的是政策是软件；如果他们愿意，苹果可以立即改变它们。很方便，不是吗？&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、Trevor Blackwell、Ross Boucher、James Bracy、Gabor Cselle、Patrick Collison、Jason Freedman、John Gruber、Joe Hewitt、Jessica Livingston、Robert Morris、Teng Siong Ong、Nikhil Pandit、Savraj Singh和Jared Tame阅读本文草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>超越平均水平</title>
      <link>http://localhost:1355/paul_graham/essays_zh/avg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/avg/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/avg/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;超越平均水平&#34;&gt;超越平均水平&lt;/h1&gt;&#xA;&lt;p&gt;2001年4月&lt;/p&gt;&#xA;&lt;p&gt;如果你想知道什么是编程的&amp;quot;秘密&amp;quot;，那么就是编程语言之间存在很大的差异。这不仅仅是理论问题。实际上，这会对创业公司产生很大影响。&lt;/p&gt;&#xA;&lt;p&gt;创业公司成功的可能性有多大？如果你考虑所有的创业公司，大多数都会失败。但如果你只考虑那些成功的创业公司，它们都有一个共同点：它们使用某种秘密武器。它们做了一些大公司无法做的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;语言的差异&#34;&gt;语言的差异&lt;/h2&gt;&#xA;&lt;p&gt;编程语言之间存在巨大差异。有些语言比其他语言强大得多。如果你使用一种强大的语言，你可以比使用较弱语言的程序员更快地完成工作。&lt;/p&gt;&#xA;&lt;p&gt;大多数程序员对编程语言之间的差异了解甚少。他们知道一些语言比其他语言更&amp;quot;高级&amp;quot;，但他们不理解这些差异有多大。他们不理解使用强大语言可以给你带来多大的优势。&lt;/p&gt;&#xA;&lt;p&gt;使用强大语言不仅仅是写代码更快的问题。它是关于你能做什么的问题。在较弱的语言中，有些事情根本做不了，或者做起来非常困难。在强大的语言中，这些事情很容易。&lt;/p&gt;&#xA;&lt;h2 id=&#34;lisp的优势&#34;&gt;Lisp的优势&lt;/h2&gt;&#xA;&lt;p&gt;Lisp是最强大的编程语言之一。它比大多数其他语言强大得多。使用Lisp的程序员比使用其他语言的程序员有巨大的优势。&lt;/p&gt;&#xA;&lt;p&gt;Lisp的优势不是微小的。它是巨大的。使用Lisp的团队可以比使用其他语言的团队小得多，但仍然完成更多的工作。&lt;/p&gt;&#xA;&lt;p&gt;Viaweb就是一个例子。Viaweb是第一个基于Web的应用程序。它让用户可以在线构建商店。我们三个人使用Lisp构建了Viaweb。我们的竞争对手使用其他语言，如C++和Perl。他们需要更多的人来完成同样的工作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么更多的人不使用lisp&#34;&gt;为什么更多的人不使用Lisp？&lt;/h2&gt;&#xA;&lt;p&gt;如果Lisp如此强大，为什么更多的人不使用它？&lt;/p&gt;&#xA;&lt;p&gt;一个原因是Lisp与其他语言非常不同。大多数程序员习惯使用类似C的语言。Lisp看起来很奇怪。&lt;/p&gt;&#xA;&lt;p&gt;另一个原因是Lisp并不适合所有事情。它不是最好的系统编程语言。如果你正在编写设备驱动程序，C可能更好。&lt;/p&gt;&#xA;&lt;p&gt;但Lisp非常适合编写Web应用程序。这就是我们选择它用于Viaweb的原因。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创业公司的优势&#34;&gt;创业公司的优势&lt;/h2&gt;&#xA;&lt;p&gt;创业公司可以利用大公司无法使用的强大语言。大公司有太多惯性。它们使用特定的语言，因为它们总是使用这些语言。它们不能轻易改变。&lt;/p&gt;&#xA;&lt;p&gt;创业公司可以灵活得多。它们可以选择最适合工作的工具。&lt;/p&gt;&#xA;&lt;p&gt;这不仅仅是技术问题。这关乎竞争。如果你使用比竞争对手更强大的语言，你可以更快地移动。你可以做他们做不到的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;实际例子&#34;&gt;实际例子&lt;/h2&gt;&#xA;&lt;p&gt;在Viaweb，我们能够快速添加新功能。我们的竞争对手需要几周才能完成的事情，我们可以在几天内完成。&lt;/p&gt;&#xA;&lt;p&gt;我们能够添加我们的竞争对手无法添加的功能。Lisp让我们能够做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;例如，我们能够添加一个让用户编辑HTML的功能。我们的竞争对手无法做到这一点，因为他们的语言不够强大。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习曲线&#34;&gt;学习曲线&lt;/h2&gt;&#xA;&lt;p&gt;Lisp有一个陡峭的学习曲线。大多数程序员需要一段时间才能习惯它。&lt;/p&gt;&#xA;&lt;p&gt;但这是值得的。一旦你学会了Lisp，你就会比其他程序员更有生产力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;&#xA;&lt;p&gt;编程语言之间存在巨大差异。这些差异对创业公司来说很重要。&lt;/p&gt;&#xA;&lt;p&gt;如果你正在创办一家创业公司，你应该考虑使用像Lisp这样的强大语言。它可以给你带来竞争优势。&lt;/p&gt;&#xA;&lt;p&gt;不要担心别人会怎么说。做你认为正确的事情。&lt;/p&gt;&#xA;&lt;p&gt;记住，创业公司的目标是成功。如果使用强大的语言帮助你成功，那就去做吧。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;这篇文章基于Paul Graham在2001年4月发表的原创作品，讨论了编程语言之间的差异以及它们对创业公司的重要性。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>软件专利是邪恶的吗？</title>
      <link>http://localhost:1355/paul_graham/essays_zh/softwarepatents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/softwarepatents/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/softwarepatents/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;软件专利是邪恶的吗&#34;&gt;软件专利是邪恶的吗？&lt;/h1&gt;&#xA;&lt;p&gt;2006年3月&lt;/p&gt;&#xA;&lt;p&gt;（本文改编自在谷歌的一次演讲。）几周前，我惊讶地发现自己获得了四项专利。这更加令人惊讶，因为我只申请了三项。当然，这些专利不属于我。它们被转让给了Viaweb，在雅虎收购我们后成为雅虎的财产。但这个消息让我开始思考软件专利的普遍问题。&lt;/p&gt;&#xA;&lt;p&gt;专利是一个难题。我不得不为我们资助的大多数初创公司提供关于专利的建议，尽管有多年的经验，但我仍然不确定自己给出的建议是否正确。&lt;/p&gt;&#xA;&lt;p&gt;我相当确定的一件事是，如果你反对软件专利，你就是反对专利本身。我们的机器越来越多地由软件组成。过去用杠杆、凸轮和齿轮完成的事情现在用循环、树结构和闭包来完成。控制系统的物理实现没有什么特别之处应该使其可专利，而软件的等价物却不应该。&lt;/p&gt;&#xA;&lt;p&gt;不幸的是，专利法在这方面不一致。大多数国家的专利法规定算法不可专利。这条规则是遗留下来的，当时&amp;quot;算法&amp;quot;指的是像埃拉托斯特尼筛法那样的东西。在1800年，人们无法像我们今天这样清楚地看到，许多机械物体的专利实际上是对它们所体现的算法的专利。&lt;/p&gt;&#xA;&lt;p&gt;专利律师在申请算法专利时仍然必须假装他们在做其他事情。你不得在专利申请的标题中使用&amp;quot;算法&amp;quot;这个词，就像你不得在书名中使用&amp;quot;散文&amp;quot;这个词一样。如果你想为算法申请专利，你必须将其描述为执行该算法的计算机系统。然后它就是机械的了；呼。算法的默认委婉说法是&amp;quot;系统和方法&amp;quot;。试试用这个短语进行专利搜索，看看你能得到多少结果。&lt;/p&gt;&#xA;&lt;p&gt;既然软件专利与硬件专利没有什么不同，那么说&amp;quot;软件专利是邪恶的&amp;quot;的人就是在简单地说&amp;quot;专利是邪恶的&amp;quot;。那么为什么有这么多的人专门抱怨软件专利呢？&lt;/p&gt;&#xA;&lt;p&gt;我认为问题更多在于专利局，而不是软件专利的概念。每当软件遇到政府时，坏事就会发生，因为软件变化很快，而政府变化很慢。专利局已经被软件专利申请的数量和新颖性所淹没，结果他们犯了很多错误。&lt;/p&gt;&#xA;&lt;p&gt;最常见的是授予不应该授予的专利。要获得专利，发明必须不仅仅是新的。它还必须是非显而易见的。而这，正是美国专利商标局一直在失球的地方。Slashdot有一个图标生动地表达了这个问题：一把刀和叉，上面叠加着&amp;quot;专利申请中&amp;quot;的字样。&lt;/p&gt;&#xA;&lt;p&gt;可怕的是，这是他们唯一拥有的专利故事图标。Slashdot读者现在理所当然地认为，关于专利的故事将是关于虚假专利的。问题已经变得多么严重。&lt;/p&gt;&#xA;&lt;p&gt;例如，亚马逊臭名昭著的一键专利的问题不在于它是一个软件专利，而在于它是显而易见的。任何保留人们送货地址的在线商店都会实现这一点。亚马逊首先这样做的原因不是他们特别聪明，而是因为他们是最早有足够影响力的网站之一，能够强迫客户在购买前登录。[1]&lt;/p&gt;&#xA;&lt;p&gt;我们作为黑客，知道美国专利商标局正在让人们为我们世界中的刀叉申请专利。问题是，专利局不是黑客。他们可能擅长判断铸造钢铁或研磨镜头的新发明，但他们还不理解软件。&lt;/p&gt;&#xA;&lt;p&gt;在这一点上，乐观主义者会想要补充说&amp;quot;但他们最终会理解的&amp;quot;。不幸的是，这可能不是真的。软件专利问题是一个更普遍问题的实例：专利局需要一段时间才能理解新技术。如果是这样，这个问题只会变得更糟，因为技术变革的步伐似乎正在加快。三十年后，专利局可能会理解我们现在作为软件申请专利的那种东西，但会有其他类型的新发明他们理解得更少。&lt;/p&gt;&#xA;&lt;p&gt;申请专利是一种谈判。你通常申请比你认为会被授予的更广泛的专利，审查员通过驳回你的一些要求并授予其他要求来回应。所以我并不真正责怪亚马逊申请一键专利。大错误是专利局的，因为他们没有坚持要求更狭窄、具有真实技术内容的东西。通过授予这样一个过于宽泛的专利，美国专利商标局在第一次约会时就与亚马逊上床了。亚马逊应该说&amp;quot;不&amp;quot;吗？&lt;/p&gt;&#xA;&lt;p&gt;亚马逊走向黑暗面不是在申请专利时，而是在执行专利时。许多公司（例如微软）获得了大量荒谬的过于宽泛的专利，但它们主要用于防御目的。像核武器一样，大公司专利组合的主要作用是威胁任何攻击他们的人进行反诉。亚马逊对巴诺书店的诉讼因此相当于核先发制人打击。&lt;/p&gt;&#xA;&lt;p&gt;那场诉讼可能对亚马逊的伤害大于帮助。巴诺书店是一个蹩脚的网站；无论如何亚马逊都会击败他们。为了攻击一个他们可以忽视的竞争对手，亚马逊在自己的声誉上留下了永久的污点。即使现在，我认为如果你要求黑客自由联想关于亚马逊的事情，一键专利也会出现在前十个话题中。&lt;/p&gt;&#xA;&lt;p&gt;谷歌显然不觉得仅仅持有专利就是邪恶的。他们申请了很多专利。他们是伪君子吗？专利是邪恶的吗？&lt;/p&gt;&#xA;&lt;p&gt;这个问题实际上有两个变体，回答它的人往往不清楚自己在回答哪个。有一个狭隘的变体：在当前的法律体系下，申请专利是坏的吗？还有一个更广泛的变体：当前的法律体系允许专利是坏的吗？&lt;/p&gt;&#xA;&lt;p&gt;这是两个独立的问题。例如，在前工业化社会如中世纪欧洲，当有人攻击你时，你不会叫警察。没有警察。当被攻击时，你应该反击，并且有关于如何这样做的惯例。这是错误的吗？这是两个问题：自己主持正义是错误的吗？而不得不这样做是错误的吗？我们倾向于对第二个问题说是，但对第一个问题说不。如果没有其他人会保护你，你必须保护自己。[2]&lt;/p&gt;&#xA;&lt;p&gt;专利的情况类似。商业是一种仪式化的战争。实际上，它从真正的战争演变而来：大多数早期商人根据你看起来有多强而即时从商人转变为海盗。在商业中，有某些规则描述公司如何可以和不可以相互竞争，而决定要按自己的规则玩的人错过了重点。说&amp;quot;我不会仅仅因为其他人都在申请专利而申请专利&amp;quot;不像说&amp;quot;我不会仅仅因为其他人都在撒谎而撒谎&amp;quot;。这更像是说&amp;quot;我不会仅仅因为其他人都在使用TCP/IP而使用TCP/IP&amp;quot;。哦，是的，你会的。&lt;/p&gt;&#xA;&lt;p&gt;一个更接近的比较可能是第一次看到冰球比赛的人，震惊地意识到球员们故意相互碰撞，并决定自己在打冰球时绝不会如此无礼。&lt;/p&gt;&#xA;&lt;p&gt;冰球允许身体接触。这是比赛的一部分。如果你的团队拒绝这样做，你就会输掉。商业也是如此。在现行规则下，专利是游戏的一部分。&lt;/p&gt;&#xA;&lt;p&gt;这在实践中意味着什么？我们告诉我们资助的初创公司不要担心侵犯专利，因为初创公司很少因专利侵权而被起诉。有人起诉你只有两个原因：为了钱，或者为了防止你与他们竞争。初创公司太穷了，不值得为钱而被起诉。在实践中，他们似乎也不太被竞争对手起诉。他们不被其他初创公司起诉，因为（a）专利诉讼是一种昂贵的分心，（b）由于其他初创公司和它们一样年轻，它们的专利可能还没有发布。[3] 初创公司，至少在软件业务中，似乎也不太被成熟的竞争对手起诉。尽管微软持有这么多专利，我不知道他们有一个案例是因专利侵权而起诉初创公司的。像微软和甲骨文这样的公司不是通过赢得诉讼来获胜的。那太不确定了。他们通过将竞争对手排除在销售渠道之外来获胜。如果你确实威胁到他们，他们更可能收购你而不是起诉你。&lt;/p&gt;&#xA;&lt;p&gt;当你读到有关大公司对小公司提起专利诉讼时，通常是一家走下坡路的大公司在抓救命稻草。例如，Unisys试图执行其对LZW压缩的专利。当你看到一家大公司威胁专利诉讼时，卖掉它。当一家公司开始为知识产权而战时，这是一个迹象，表明他们已经输掉了真正的战斗，为了用户。&lt;/p&gt;&#xA;&lt;p&gt;一家因专利侵权而起诉竞争对手的公司就像一个被彻底击败的防守者，转而向裁判恳求。如果你还能触及球，你就不会这样做，即使你真的相信自己被犯规了。所以一家威胁专利诉讼的公司是陷入困境的公司。&lt;/p&gt;&#xA;&lt;p&gt;当我们在Viaweb工作时，电子商务业务中一家更大的公司获得了在线订购专利或类似的东西。我接到那里一位副总裁的电话，询问我们是否愿意授权。我回答说我认为该专利完全虚假，永远不会在法庭上成立。&amp;ldquo;好的，&amp;ldquo;他回答说。&amp;ldquo;那么，你们在招聘吗？&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;然而，如果你的初创公司发展得足够大，无论你做什么，你都会开始被起诉。例如，如果你上市，你会被多个专利流氓起诉，他们希望你付钱给他们让他们离开。更多关于他们的事情。&lt;/p&gt;&#xA;&lt;p&gt;换句话说，在你有钱之前，没有人会因专利侵权而起诉你，而一旦你有钱了，人们无论是否有理由都会起诉你。所以我建议宿命论。不要浪费担心专利侵权的时间。你每次系鞋带可能都在侵犯一项专利。至少在开始时，只担心做出伟大的东西并获得大量用户。如果你成长到任何人认为值得攻击你的程度，你做得很好。&lt;/p&gt;&#xA;&lt;p&gt;我们确实建议我们资助的公司申请专利，但不是为了让它们可以起诉竞争对手。成功的初创公司要么被收购，要么发展成大公司。如果初创公司想发展成大公司，它们应该申请专利来建立它们将需要的专利组合，以与其他大公司维持武装休战。如果它们想被收购，它们应该申请专利，因为专利是与收购者求偶的一部分。&lt;/p&gt;&#xA;&lt;p&gt;大多数成功的初创公司都是通过被收购成功的，而大多数收购者关心专利。初创公司的收购对收购者来说通常是一个自制与购买的决策。我们是应该购买这家小型初创公司还是自己建立？有两件事，特别是，使它们决定不自己建立：如果你已经有一个庞大且快速增长的用户群，并且你在软件的关键部分有相当坚实的专利申请。&lt;/p&gt;&#xA;&lt;p&gt;大公司应该更喜欢购买而不是自己建立的第三个原因是：如果他们自己建立，他们会搞砸。但很少有公司足够聪明，能够向自己承认这一点。通常被问到的公司工程师是公司自己建立有多难，他们高估了自己的能力。[4] 专利似乎改变了平衡。它给了收购者一个借口，承认他们无法复制你在做的事情。它也可能帮助他们理解你的技术的特别之处。&lt;/p&gt;&#xA;&lt;p&gt;坦率地说，专利在软件业务中扮演如此小的角色让我感到惊讶。考虑到专家们对软件专利扼杀创新的所有可怕说法，这有点讽刺，但是当仔细观察软件业务时，最引人注目的是专利似乎多么不重要。&lt;/p&gt;&#xA;&lt;p&gt;在其他领域，公司定期因专利侵权起诉竞争对手。例如，机场行李扫描业务多年来一直是InVision和L-3两家公司共享的舒适双头垄断。2002年，一家名为Reveal的初创公司出现了，他们拥有新技术，可以制造三分之一的扫描仪。他们甚至在发布产品之前就因专利侵权而被起诉。&lt;/p&gt;&#xA;&lt;p&gt;在我们的世界里很少听到这种故事。我发现的一个例子是，令人尴尬的是，雅虎，它在2005年对一家名为Xfire的游戏初创公司提起了专利诉讼。Xfire似乎不是什么大公司，很难说为什么雅虎感到威胁。Xfire的工程副总裁曾在雅虎从事类似的工作——事实上，他被列为雅虎起诉的专利的发明人——所以也许其中有一些个人因素。我的猜测是雅虎的某人搞错了。无论如何，他们都没有非常积极地推进诉讼。&lt;/p&gt;&#xA;&lt;p&gt;为什么专利在软件中扮演如此小的角色？我能想到三个可能的原因。&lt;/p&gt;&#xA;&lt;p&gt;一个是软件是如此复杂，以至于专利本身价值不大。我在这里可能诋毁了其他领域，但似乎在大多数类型的工程中，你可以将一些新技术的细节交给一组中高质量的人并获得期望的结果。例如，如果有人开发了一种新的冶炼矿石工艺，可以获得更好的产量，你召集一组合格的专家并告诉他们，他们将能够获得相同的产量。这在软件中似乎不起作用。软件是如此微妙和不可预测，以至于&amp;quot;合格的专家&amp;quot;并不能让你走得很远。&lt;/p&gt;&#xA;&lt;p&gt;这就是为什么我们在软件业务中很少听到&amp;quot;合格的专家&amp;quot;这样的短语。这种能力水平能让你做的，比如说，使你的软件与其他软件兼容——八个月后，以巨大的成本。要做更难的事情，你需要个人的才华。如果你召集一组合格的专家告诉他们制作一个新的基于网络的电子邮件程序，他们会被一个有灵感的十九岁年轻人组成的团队打败。&lt;/p&gt;&#xA;&lt;p&gt;专家可以实现，但他们不能设计。或者更确切地说，实现专业知识是大多数人，包括专家自己，可以衡量的唯一类型。[5]&lt;/p&gt;&#xA;&lt;p&gt;但设计是一种明确的技能。它不仅仅是空灵的无形之物。当你不理解它们时，事物似乎总是无形的。在1800年，电对大多数人来说似乎是空灵的无形之物。谁知道其中有多少知识可以了解？设计也是如此。有些人擅长它，有些人不擅长，他们擅长或不擅长的东西是非常有形的。&lt;/p&gt;&#xA;&lt;p&gt;设计在软件中如此重要的原因可能是物理上的约束更少。建造物理物品是昂贵和危险的。可能选择的空间更小；你倾向于不得不作为更大的团体的一部分工作；你受到很多法规的约束。如果你和几个朋友决定创建一个新的基于网络的应用程序，你没有任何这些。&lt;/p&gt;&#xA;&lt;p&gt;因为软件中设计的空间如此之大，一个成功的应用程序往往远远超过其专利的总和。保护小公司不被大竞争对手复制的不仅仅是它们的专利，还有大公司在尝试时会搞砸的一千个小事情。&lt;/p&gt;&#xA;&lt;p&gt;专利在我们的世界中不重要的第二个原因是初创公司很少像Reveal那样正面攻击大公司。在软件业务中，初创公司通过超越老牌公司来击败它们。初创公司不构建桌面文字处理程序与微软Word竞争。[6] 他们构建Writely。如果这个范式拥挤，只需等待下一个；他们在这条路线上运行得相当频繁。&lt;/p&gt;&#xA;&lt;p&gt;幸运的是，初创公司，大公司极其擅长否认。如果你费心从倾斜的角度攻击他们，他们会与你半途而遇，并机动地把你留在他们的盲点。起诉一家初创公司将意味着承认它是危险的，而这往往意味着看到大公司不想看到的事情。IBM过去经常起诉其大型机竞争对手，但他们不太关心微型计算机行业，因为他们不想看到它构成的威胁。构建基于网络的应用程序的公司也受到微软的类似保护，微软即使现在也不想想象一个Windows无关紧要的世界。&lt;/p&gt;&#xA;&lt;p&gt;专利在软件中似乎不太重要的第三个原因是公众舆论——或者更确切地说，是黑客舆论。在最近的一次采访中，史蒂夫·鲍尔默狡猾地留下了基于专利理由攻击Linux的可能性。但我怀疑微软是否会如此愚蠢。他们将面临所有抵制中最大的一次。而且不仅仅来自技术界的普遍人士；他们自己的很多人也会反抗。&lt;/p&gt;&#xA;&lt;p&gt;优秀的黑客非常关心原则问题，并且他们具有高度的流动性。如果一家公司开始行为不端，聪明的人不会在那里工作。出于某种原因，这在软件业务中似乎比其他业务更真实。我不认为这是因为黑客本质上具有更高的原则，而是因为他们的技能很容易转移。也许我们可以折中说，流动性给了黑客奢侈的以原则行事的能力。&lt;/p&gt;&#xA;&lt;p&gt;谷歌的&amp;quot;不作恶&amp;quot;政策因此可能是他们发现的最有价值的东西。在某些方面它非常具有约束力。如果谷歌确实做了邪恶的事情，他们会受到双重打击：一次是为了他们所做的任何事情，再次是因为虚伪。但我认为这是值得的。它帮助他们雇佣最好的人，而且，即使从纯粹自私的角度来看，受原则约束也比受愚蠢约束更好。&lt;/p&gt;&#xA;&lt;p&gt;（我希望有人能把这一点传达给现任政府。）&lt;/p&gt;&#xA;&lt;p&gt;我不确定前面三个成分的比例如何，但大公司之间的习俗似乎是不起诉小公司，而初创公司大多太忙太穷，无法相互起诉。所以尽管有大量的软件专利，但没有很多诉讼正在进行。有一个例外：专利流氓。&lt;/p&gt;&#xA;&lt;p&gt;专利流氓是主要由律师组成的公司，他们的全部业务是积累专利并威胁要起诉实际制造产品的公司。专利流氓，可以肯定地说，是邪恶的。我觉得说这话有点愚蠢，因为当你说理查德·斯托曼和比尔·盖茨都会同意的事情时，你一定危险地接近于同义反复。&lt;/p&gt;&#xA;&lt;p&gt;Forgent，最臭名昭著的专利流氓之一的首席执行官说，他的公司所做的是&amp;quot;美国方式&amp;rdquo;。实际上这不是真的。美国方式是通过创造财富来赚钱，而不是通过起诉人们。[7] 像Forgent这样的公司所做的实际上是前工业时代的方式。在工业革命前夕，在像英国和法国这样的国家，一些最大的财富是由朝臣们通过从国王那里提取一些有利可图的权利——比如对丝绸进口征税的权利——然后利用这个向该行业的商人榨取金钱而获得的。所以当人们将专利流氓比作黑手党时，他们比他们知道的更正确，因为黑手党也不仅仅是坏的，而是在作为过时商业模式的意义上特别坏。&lt;/p&gt;&#xA;&lt;p&gt;专利流氓似乎让大公司措手不及。在过去几年里，他们从大公司那里榨取了数亿美元。专利流氓难以对抗恰恰是因为他们什么也不创造。大公司免受其他大公司的起诉，因为他们可以威胁反诉。但因为专利流氓不制造任何东西，没有什么可以起诉他们的。我预测这个漏洞将很快被堵上，至少按照法律标准。这明显是对系统的滥用，而受害者是有权势的。[8]&lt;/p&gt;&#xA;&lt;p&gt;但即使专利流氓是邪恶的，我不认为它们会扼杀太多创新。它们直到初创公司赚钱才起诉，到那时，产生它的创新已经发生了。我想不出有初创公司因为专利流氓而避免研究某个问题。&lt;/p&gt;&#xA;&lt;p&gt;就目前进行的比赛而言，冰球就是这样。关于没有身体接触的冰球是否会成为更好比赛的更理论问题呢？专利是鼓励还是阻碍创新？&lt;/p&gt;&#xA;&lt;p&gt;这是一个在一般情况下很难回答的问题。人们就这个主题写整本书。我的主要爱好之一是技术史，尽管我研究这个主题多年，但我需要几周的研究才能说专利总体上是否是净赢家。&lt;/p&gt;&#xA;&lt;p&gt;我能说的是，99.9%就这个主题表达意见的人不是基于这样的研究，而是基于一种宗教信念。至少，这是礼貌的说法；口语版本涉及来自不是为那个目的设计的器官的言语。&lt;/p&gt;&#xA;&lt;p&gt;无论它们是否鼓励创新，专利至少是为了鼓励创新而设立的。你不能免费获得专利。作为使用想法的专有权利的回报，你必须发布它，而很大程度上是为了鼓励这种开放性而建立了专利制度。&lt;/p&gt;&#xA;&lt;p&gt;在专利之前，人们通过保密来保护想法。有了专利，中央政府实际上说，如果你告诉每个人你的想法，我们会为你保护它。这与公民秩序的兴起有相似之处，这种情况大约在同一时间发生。在中央政府足够强大以执行秩序之前，富人拥有私人军队。随着政府变得更强大，他们逐渐迫使权贵放弃保护他们的大部分责任。（权贵仍然有保镖，但不再是为了保护他们免受其他权贵的伤害。）&lt;/p&gt;&#xA;&lt;p&gt;专利，像警察一样，涉及许多滥用行为。但在两种情况下，默认情况更糟糕。选择不是&amp;quot;专利还是自由？&amp;quot;，就像不是&amp;quot;警察还是自由？&amp;ldquo;一样。实际的问题分别是&amp;quot;专利还是保密？&amp;ldquo;和&amp;quot;警察还是帮派？&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;与帮派一样，我们对保密会有什么样子有一些了解，因为事情过去就是这样。中世纪欧洲的经济被分成小部落，每个部落都嫉妒地守护着自己的特权和秘密。在莎士比亚时代，&amp;ldquo;神秘&amp;quot;与&amp;quot;工艺&amp;quot;是同义词。即使在今天，我们也可以看到中世纪行会保密的回声，在现在毫无意义的共济会保密中。&lt;/p&gt;&#xA;&lt;p&gt;中世纪工业保密最令人难忘的例子可能是威尼斯，它禁止玻璃吹制工离开城市，并派刺客追捕那些试图离开的人。我们可能想认为我们不会走得那么远，但电影行业已经试图通过法律规定仅仅将电影放在公共网络上就判处三年监禁。想尝试一个可怕的思想实验吗？如果电影行业可以拥有他们想要的任何法律，他们会在哪里停止？假设除了死刑之外，但他们会有多接近？&lt;/p&gt;&#xA;&lt;p&gt;比惊人的滥用更糟糕的可能是伴随增加的保密而来的整体效率下降。任何与&amp;quot;需要知道&amp;quot;基础上运作的组织打过交道的人都可以证明，将信息分成小单元是非常低效的。&amp;ldquo;需要知道&amp;quot;原则的缺陷是你不知道谁需要知道什么。来自一个领域的想法可能会在另一个领域引发伟大的发现。但发现者不知道他需要知道它。&lt;/p&gt;&#xA;&lt;p&gt;如果保密是想法的唯一保护，公司不仅必须对其他公司保密；他们还必须在内部保密。这将鼓励已经是公司最坏特质的那些。&lt;/p&gt;&#xA;&lt;p&gt;我不是说保密会比专利更糟糕，只是说我们不能免费放弃专利。企业会变得更加保密来补偿，在某些领域这可能变得丑陋。我也不是在为当前的专利制度辩护。显然其中有很多破碎的地方。但这种破坏似乎对软件的影响小于大多数其他领域。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
