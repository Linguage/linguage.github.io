<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>错误 on Linguista</title>
    <link>https://linguage.github.io/tags/%E9%94%99%E8%AF%AF/</link>
    <description>Recent content in 错误 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E9%94%99%E8%AF%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>杀死创业公司的18个错误</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/startupmistakes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/startupmistakes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/startupmistakes/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;杀死创业公司的18个错误&#34;&gt;杀死创业公司的18个错误&lt;/h1&gt;&#xA;&lt;p&gt;2006年10月&lt;/p&gt;&#xA;&lt;p&gt;在最近一次演讲后的问答环节，有人问是什么导致创业公司失败。我在那里呆呆地站了几秒钟后才意识到，这其实是个有点诡计性的问题。这相当于问如何让创业公司成功——如果你避免了所有失败的原因，你就会成功——而这个问题太大，无法即兴回答。&lt;/p&gt;&#xA;&lt;p&gt;后来我意识到，从这个角度来看问题可能会有所帮助。如果你有一份所有不应该做的事情的清单，你就可以通过否定这些来变成成功的秘诀。而且这种形式的清单在实践中可能更有用。抓住自己做了不该做的事情，比总是记得要做应该做的事情要容易。[1]&lt;/p&gt;&#xA;&lt;p&gt;从某种意义上说，只有一个错误会杀死创业公司：没有做出用户想要的东西。如果你做出了用户想要的东西，无论你做了什么或没做什么，你可能会没事。而如果你没有做出用户想要的东西，那么无论你做了什么或没做什么，你都死定了。所以实际上，这是18个导致创业公司无法做出用户想要的东西的因素列表。几乎所有的失败都是通过这个漏斗的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-单一创始人&#34;&gt;1. 单一创始人&lt;/h2&gt;&#xA;&lt;p&gt;你有没有注意到成功的创业公司很少是由一个人创立的？即使是你认为只有一个创始人的公司，比如Oracle，通常也有多个创始人。这不太可能是巧合。&lt;/p&gt;&#xA;&lt;p&gt;只有一个创始人有什么问题？首先，这是不信任票。这可能意味着创始人无法说服他的任何一个朋友和他一起创业公司。这相当令人担忧，因为他的朋友是最了解他的人。&lt;/p&gt;&#xA;&lt;p&gt;但即使创始人的朋友都错了，公司是个好赌注，他仍然处于劣势。创业公司对一个人来说太难了。即使你能自己完成所有工作，你也需要同事一起集思广益，说服你放弃愚蠢的决定，并在事情出错时让你振作起来。&lt;/p&gt;&#xA;&lt;p&gt;最后一点可能是最重要的。创业公司的低谷是如此之低，几乎没有人能够独自承受。当你有多个创始人时，团队精神将他们联系在一起，这似乎违反了守恒定律。每个人都在想&amp;quot;我不能让我的朋友们失望。&amp;ldquo;这是人性中最强大的力量之一，而只有一个创始人时，这种力量就缺失了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-糟糕的地理位置&#34;&gt;2. 糟糕的地理位置&lt;/h2&gt;&#xA;&lt;p&gt;创业公司在一些地方繁荣，而在其他地方则不然。硅谷占主导地位，其次是波士顿，然后是西雅图、奥斯汀、丹佛和纽约。在那之后就不多了。即使在纽约，人均创业公司数量可能只有硅谷的二十分之一。在休斯顿、芝加哥和底特律这样的城镇里，这个数量小到无法测量。&lt;/p&gt;&#xA;&lt;p&gt;为什么下降如此之快？可能与其他行业的原因相同。美国第六大时尚中心是什么？第六大石油、金融或出版中心？无论它们是什么，它们可能离顶峰太远了，甚至称它们为中心都是误导的。&lt;/p&gt;&#xA;&lt;p&gt;城市为何成为创业中心是个有趣的问题，但创业公司在那里繁荣的原因可能与其他行业相同：那就是专家所在的地方。标准更高；人们更同情你所做的事情；你想要雇用的人想住在那里；配套产业在那里；你在偶然会议中遇到的人从事同一个行业。谁知道这些因素如何结合来促进硅谷的创业公司并压制底特律的创业公司，但从每个地区的人均创业公司数量来看，很明显它们确实在起作用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-边缘利基&#34;&gt;3. 边缘利基&lt;/h2&gt;&#xA;&lt;p&gt;申请Y Combinator的大多数小组都有一个共同的问题：选择一个小的、模糊的利基市场，希望能避免竞争。&lt;/p&gt;&#xA;&lt;p&gt;如果你看小孩子玩运动，你会注意到在某个年龄以下，他们害怕球。当球接近他们时，他们的本能是避开它。作为一个八岁的外野手，我没有接住多少球，因为每当一个高飞球飞向我这边时，我过去常常闭上眼睛，举起手套更多是为了保护，而不是希望能抓住它。&lt;/p&gt;&#xA;&lt;p&gt;选择边缘项目相当于我八岁时处理高飞球的策略。如果你做出任何好东西，你都会有竞争对手，所以你最好面对这一点。你只能通过避免好主意来避免竞争。&lt;/p&gt;&#xA;&lt;p&gt;我认为这种从大问题上退缩大多是无意识的。这并不是人们想到宏伟的想法但决定追求较小的想法，因为它们似乎更安全。你的无意识甚至不会让你想到宏伟的想法。所以解决方案可能是思考想法而不涉及自己。对其他人来说，作为创业公司，什么是个好主意？&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-衍生想法&#34;&gt;4. 衍生想法&lt;/h2&gt;&#xA;&lt;p&gt;我们收到的许多申请都是模仿某些现有公司的。这是想法的一个来源，但不是最好的。如果你看成功创业公司的起源，很少有是模仿其他创业公司开始的。他们的想法从哪里来？通常来自创始人识别的某些具体、未解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;我们的创业公司为制作在线商店制作软件。当我们开始时，还没有；你可以订购的少数几个网站是由网络顾问以巨大成本手工制作的。我们知道，如果网上购物真正起飞，这些网站将必须由软件生成，所以我们写了一些。相当直接。&lt;/p&gt;&#xA;&lt;p&gt;看起来最好的要解决的问题是对你个人有影响的问题。苹果公司的发生是因为Steve Wozniak想要一台电脑，谷歌是因为Larry和Sergey在网上找不到东西，Hotmail是因为Sabeer Bhatia和Jack Smith无法在工作中交换电子邮件。&lt;/p&gt;&#xA;&lt;p&gt;所以不要复制Facebook，加上一些Facebook理应忽略的变化，而是从另一个方向寻找想法。不要从公司开始，回溯到他们解决的问题，而是寻找问题，想象可能解决它们的创业公司。[2] 人们抱怨什么？你希望有什么东西存在？&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-顽固&#34;&gt;5. 顽固&lt;/h2&gt;&#xA;&lt;p&gt;在某些领域，成功的方法是对你想要实现的目标有愿景，无论遇到什么挫折都坚持到底。创业公司不是其中之一。坚持愿景的方法适用于赢得奥运金牌之类的事情，那里的问题定义明确。创业公司更像是科学，你需要跟随线索走到哪里。&lt;/p&gt;&#xA;&lt;p&gt;所以不要太执着于你原来的计划，因为它很可能是错的。大多数成功的创业公司最终做的事情与他们最初打算的大不相同——通常如此不同，以至于甚至不像是同一家公司。你必须准备好在更好的想法出现时看到它。而最困难的部分通常是放弃你的旧想法。&lt;/p&gt;&#xA;&lt;p&gt;但对新思想的开放性必须调整得恰到好处。每周切换到一个新想法同样致命。是否有某种你可以使用的外部测试？一个是询问这些想法是否代表某种进展。如果在每个新想法中，你能够重用为前几个想法构建的大部分内容，那么你可能处在一个收敛的过程中。而如果你不断从头开始，那是个坏迹象。&lt;/p&gt;&#xA;&lt;p&gt;幸运的是，有一个人你可以寻求建议：你的用户。如果你正在考虑转向某个新方向，而你的用户似乎对此感到兴奋，这可能是个好赌注。&lt;/p&gt;&#xA;&lt;h2 id=&#34;6-雇佣糟糕的程序员&#34;&gt;6. 雇佣糟糕的程序员&lt;/h2&gt;&#xA;&lt;p&gt;我忘记在早期版本中包含这一点，因为我认识的几乎所有创始人都是程序员。这对他们来说不是严重的问题。他们可能意外地雇佣了不好的人，但这不会杀死公司。在紧要关头，他们自己可以做任何需要的事情。&lt;/p&gt;&#xA;&lt;p&gt;但当我考虑90年代电子商务业务中杀死大多数创业公司的是什么时，是糟糕的程序员。许多这些公司是由商人创办的，他们认为创业公司的工作方式是你有聪明的想法，然后雇佣程序员来实现它。这实际上比听起来难得多——几乎不可能，因为商人无法分辨哪些是好的程序员。他们甚至没有机会接触到最好的，因为没有人真正优秀的人愿意去实现商人愿景的工作。&lt;/p&gt;&#xA;&lt;p&gt;在实践中，发生的是商人选择他们认为的好程序员（他的简历上说他是微软认证开发人员），但事实并非如此。然后他们困惑地发现他们的创业公司像二战轰炸机一样蹒跚而行，而他们的竞争对手像喷气式战斗机一样呼啸而过。这种创业公司与大公司处于相同的位置，但没有优势。&lt;/p&gt;&#xA;&lt;p&gt;那么如果你不是程序员，如何选择好的程序员？我认为没有答案。我本想说你必须找到一个好程序员来帮助你雇佣人。但如果你不能识别好的程序员，你甚至怎么做？&lt;/p&gt;&#xA;&lt;h2 id=&#34;7-选择错误的平台&#34;&gt;7. 选择错误的平台&lt;/h2&gt;&#xA;&lt;p&gt;一个相关的问题（因为它往往是由糟糕的程序员完成的）是选择错误的平台。例如，我认为泡沫期间的许多创业公司因为决定在Windows上构建基于服务器的应用程序而杀死了自己。Hotmail在微软收购后仍然在FreeBSD上运行了多年，大概是因为Windows无法处理负载。如果Hotmail的创始人选择使用Windows，他们就会被淹没。&lt;/p&gt;&#xA;&lt;p&gt;PayPal只是勉强避开了这个子弹。在与X.com合并后，新CEO想切换到Windows——即使在PayPal联合创始人Max Levchin表明他们的软件在Windows上的扩展效果只有Unix的1%之后。幸运的是，PayPal更换了CEO而不是平台。&lt;/p&gt;&#xA;&lt;p&gt;平台是一个模糊的词。它可能意味着操作系统，或编程语言，或在编程语言之上构建的&amp;quot;框架&amp;rdquo;。它暗示着既支持又限制的东西，就像房子的基础。&lt;/p&gt;&#xA;&lt;p&gt;平台可怕的是，总有一些对外人来说似乎是好的、负责任的选择，然而，就像90年代的Windows一样，如果你选择它们，它们会摧毁你。Java小程序可能是最引人注目的例子。这被认为是交付应用程序的新方式。大概它杀死了几乎所有相信这一点的创业公司100%。&lt;/p&gt;&#xA;&lt;p&gt;你如何选择正确的平台？通常的方法是雇佣好的程序员并让他们选择。但如果你不是程序员，你可以使用一个技巧：访问顶尖的计算机科学系，看看他们在研究项目中使用什么。&lt;/p&gt;&#xA;&lt;h2 id=&#34;8-发布缓慢&#34;&gt;8. 发布缓慢&lt;/h2&gt;&#xA;&lt;p&gt;各种规模的公司都很难完成软件。这是媒介固有的；软件总是85%完成。需要努力才能推动这一点并将某些东西发布给用户。[3]&lt;/p&gt;&#xA;&lt;p&gt;创业公司为延迟发布找各种借口。大多数都等同于人们在日常生活中拖延时使用的借口。有需要先发生的事情。也许。但如果软件100%完成并准备在按钮按下时发布，他们还会在等待吗？&lt;/p&gt;&#xA;&lt;p&gt;快速发布的一个原因是它迫使你实际完成一定量的工作。直到发布，任何东西都没有真正完成；你可以从发布任何东西时总是涉及的工作热潮中看到这一点，无论你认为它完成得多好。你需要发布的另一个原因是，只有通过将你的想法与用户碰撞，你才能完全理解它。&lt;/p&gt;&#xA;&lt;p&gt;几个不同的问题表现为发布延迟：工作太慢；没有真正理解问题；害怕必须处理用户；害怕被评判；处理太多不同的事情；过度完美主义。幸运的是，你可以通过强制自己相当快速地发布一些东西的简单权宜之计来对抗所有这些。&lt;/p&gt;&#xA;&lt;h2 id=&#34;9-发布太早&#34;&gt;9. 发布太早&lt;/h2&gt;&#xA;&lt;p&gt;发布缓慢可能杀死的创业公司比发布太快的多一百倍，但确实可能发布得太快。这里的危险是你毁了你的声誉。你发布一些东西，早期采用者试用它，如果它不好，他们可能永远不会回来。&lt;/p&gt;&#xA;&lt;p&gt;那么发布需要的最低限度是什么？我们建议创业公司思考他们计划做什么，识别一个既(a)本身有用又(b)可以增量扩展到整个项目的核心，然后尽快完成它。&lt;/p&gt;&#xA;&lt;p&gt;这与我（和许多其他程序员）用来编写软件的方法相同。考虑总体目标，然后从编写做任何有用事情的最小子集开始。如果它是一个子集，你无论如何都必须编写它，所以在最坏的情况下你不会浪费你的时间。但更有可能的是，你会发现实现一个工作子集既有利于士气，也帮助你更清楚地看到其余部分应该做什么。&lt;/p&gt;&#xA;&lt;p&gt;你需要给留下深刻印象的早期采用者相当宽容。他们不期望新发布的产品做所有事情；它只需要做某件事。&lt;/p&gt;&#xA;&lt;h2 id=&#34;10-没有特定的用户在脑海&#34;&gt;10. 没有特定的用户在脑海&lt;/h2&gt;&#xA;&lt;p&gt;如果你不理解用户，你就无法建立用户喜欢的东西。我之前提到最成功的创业公司似乎都是从试图解决创始人遇到的问题开始的。也许这里有个规则：也许你创造的财富与你对要解决的问题的理解程度成正比，而你理解最好的问题是你自己的。[4]&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
