<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计 on Linguista</title>
    <link>https://linguage.github.io/tags/%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in 设计 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java的外衣</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/javacover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/javacover/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/javacover/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;java的外衣&#34;&gt;Java的外衣&lt;/h1&gt;&#xA;&lt;p&gt;2001年4月&lt;/p&gt;&#xA;&lt;p&gt;这篇文章源于我与几位程序员关于Java为何气味可疑的对话。这不是对Java的批判！这是黑客雷达的一个案例研究。&lt;/p&gt;&#xA;&lt;p&gt;随着时间的推移，黑客对好（和坏）技术培养出了一种嗅觉。我想试着写下是什么让Java对我来说似乎可疑，这可能会很有趣。&lt;/p&gt;&#xA;&lt;p&gt;一些读过这篇文章的人认为这是试图以前所未有的方式写一些有趣的事情。其他人说我将因为看起来写我不理解的东西而陷入麻烦。所以，以防万一有任何好处，让我澄清我在这里不是在写Java（我从未使用过），而是在写黑客雷达（我对此思考很多）。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;不能凭封面判断一本书&amp;quot;这句格言起源于书籍用普通纸板封面出售的时代，由每个购买者根据自己的品味装订。在那个时代，你不能凭封面判断一本书。但出版业从那时起进步了：现在的出版商努力使封面成为你可以判断一本书的依据。&lt;/p&gt;&#xA;&lt;p&gt;我花了很多时间在书店，我觉得我现在已经学会理解出版商想要告诉我关于一本书的一切，可能还有更多。我没有在书店度过的时间主要花在电脑前，我觉得我在某种程度上已经学会了通过封面来判断技术。这可能只是运气，但我已经让自己避免了一些最终被证明是真正糟糕的技术。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，Java对我来说似乎很糟糕。我从未写过Java程序，从未看过关于它的参考书，但我有一个预感，它不会是一种非常成功的语言。我可能被证明是错的；对技术做出预测是危险的事情。但作为某种时间胶囊，就其价值而言，这就是为什么我不喜欢Java的外观：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它被如此热情地炒作。真正的标准不需要被推广。没有人需要推广C、Unix或HTML。真正的标准在大多数人听到它之前就已经建立了。在黑客雷达屏幕上，Perl和Java一样大，或者更大，仅仅是凭借自身的优点。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它的目标很低。在最初的Java白皮书中，Gosling明确表示Java的设计对习惯C的程序员来说不会太困难。它被设计成另一个C++：C加上一些从更高级语言中借来的想法。就像情景喜剧、垃圾食品或包价旅游的创造者一样，Java的设计者有意识地为不如他们聪明的人设计产品。历史上，为他人使用而设计的语言都很糟糕：Cobol、PL/I、Pascal、Ada、C++。好的语言是那些为自己的设计者设计的：C、Perl、Smalltalk、Lisp。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它有不可告人的动机。有人说过，如果人们只在有话要说时才写书，而不是因为想写书，世界会变得更美好。同样，我们一直听到Java的原因不是因为它对编程语言有什么要说的。我们听到Java作为Sun公司削弱微软计划的一部分。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;没有人喜欢它。C、Perl、Python、Smalltalk和Lisp程序员都喜欢他们的语言。我从未听任何人说过他们喜欢Java。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;人们被迫使用它。我认识的许多使用Java的人使用它是因为他们觉得必须这样做。要么是他们觉得为了获得资助必须这样做，要么是他们认为客户会想要，要么是管理层告诉他们要这样做。这些都是聪明人；如果技术好，他们会自愿使用它。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它有太多的厨师。最好的编程语言是由小团体开发的。Java似乎是由一个委员会管理的。如果它最终成为一种好语言，这将是历史上委员会第一次设计出好语言。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是官僚主义的。据我对Java的一点点了解，似乎有很多做事的协议。真正的好语言不是那样的。它们让你做你想做的事，然后让路。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是伪时髦的。Sun现在假装Java是一种像Perl或Python那样的草根、开源语言努力。这个恰好由一家大公司控制。所以这种语言很可能具有与大公司生产的任何东西相同的单调笨重。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是为大型组织设计的。大型组织的目标与黑客不同。他们想要适合大型平庸程序员团队使用的语言——具有像U-Haul卡车中的限速器那样的功能，防止傻瓜造成太大损害。黑客不喜欢对他们居高临下的语言。黑客只想要力量。历史上，为大型组织设计的语言（PL/I、Ada）都失败了，而黑客语言（C、Perl）获胜了。原因：今天的青少年黑客是明天的CTO。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;错误的人喜欢它。我最钦佩的程序员整体上没有被Java迷住。谁喜欢Java？西装革履的人，不知道一种语言与另一种的区别，但知道他们在媒体上不断听到Java；大公司的程序员，惊讶地发现还有比C++更好的东西；以及即插即用的本科生，准备好喜欢任何可能让他们找到工作的东西（这会考试吗？）。这些人的意见随风而变。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它的爸爸陷入困境。Sun的商业模式正受到两方面的侵蚀。与台式机相同类型的廉价Intel处理器现在对服务器来说已经足够快了。而且FreeBSD似乎至少与Solaris一样适合作为服务器操作系统。Sun的广告暗示你需要Sun服务器用于工业级应用程序。如果这是真的，Yahoo会第一个排队购买Sun；但当我在那里工作时，服务器都是运行FreeBSD的Intel盒子。这对Sun的未来是个坏兆头。如果Sun遇到麻烦，他们可能会把Java拖下水。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;国防部喜欢它。国防部鼓励开发者使用Java。这在我看来是最 damning 的迹象。国防部的国防工作做得很好（虽然昂贵），但他们喜欢计划、程序和协议。他们的文化与黑客文化相反；在软件问题上他们往往会下错注。国防部最后一次真正喜欢一种编程语言是Ada。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;请记住，这不是对Java的批判，而是对其外衣的批判。我对Java的了解还不足以喜欢或不喜欢它。这只是为什么我不觉得急于学习它的解释。&lt;/p&gt;&#xA;&lt;p&gt;在尝试用一种语言编写程序之前就将其 dismissed 可能看起来 cavalier。但这是所有程序员都必须做的事情。外面的技术太多了，无法全部学习。你必须学会通过外部迹象来判断哪些值得你花时间。我同样 cavalier 地 dismissed 了Cobol、Ada、Visual Basic、IBM AS400、VRML、ISO 9000、SET协议、VMS、Novell Netware和CORBA等。它们只是气味不对。&lt;/p&gt;&#xA;&lt;p&gt;在Java的情况下我可能错了。可能一种由一家大公司推广以削弱另一家大公司、由委员会为&amp;quot;主流&amp;quot;受众设计、被炒作到天际、国防部喜欢的语言，碰巧是一种我会喜欢编程的干净、美丽、强大的语言。可能，但这似乎非常不可能。&lt;/p&gt;&#xA;&lt;p&gt;Trevor Re: Java&amp;rsquo;s Cover | Berners-Lee Re: Java | Being Popular | Sun Internal Memo | 2005: BusinessWeek Agrees&lt;/p&gt;&#xA;&lt;p&gt;日语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>创造新事物的六个原则</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/newthings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/newthings/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/newthings/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;创造新事物的六个原则&#34;&gt;创造新事物的六个原则&lt;/h1&gt;&#xA;&lt;p&gt;2008年2月&lt;/p&gt;&#xA;&lt;p&gt;Arc 发布引发的激烈反应有一个意想不到的后果：它让我意识到我有一种设计哲学。那些更有条理的批评者主要抱怨的是 Arc 看起来太脆弱了。经过多年的工作，我所能展示的只有几千行宏？为什么我没有从事更实质性的问题？&lt;/p&gt;&#xA;&lt;p&gt;当我思考这些评论时，突然意识到它们看起来多么熟悉。这正是人们一开始对 Viaweb、Y Combinator 和我大多数文章所说的那种话。&lt;/p&gt;&#xA;&lt;p&gt;当我们推出 Viaweb 时，在风险投资家和电子商务&amp;quot;专家&amp;quot;看来这似乎很可笑。我们只是公寓里的几个人，这在1995年并不像现在那样酷。而我们所构建的东西，在他们看来，甚至不是软件。对他们来说，软件等于大型的 Windows 应用程序。由于 Viaweb 是他们见到的第一个基于网络的应用程序，它似乎仅仅是一个网站。当他们发现 Viaweb 不处理信用卡交易时（我们第一年确实没有处理），他们更加轻视。交易处理在他们看来就是电子商务的全部。这听起来严肃且困难。&lt;/p&gt;&#xA;&lt;p&gt;然而，神秘的是，Viaweb 最终碾压了所有竞争对手。&lt;/p&gt;&#xA;&lt;p&gt;对 Y Combinator 的最初反应几乎完全相同。它看起来轻得可笑。创业融资意味着 A 轮融资：在数月的严肃、商业化的会议后，给予少数由有资历的人创立的初创公司数百万美元，条件在一英尺厚的文件中描述。Y Combinator 似乎微不足道。现在说 Y Combinator 是否会像 Viaweb 那样成功还为时过早，但从模仿的数量来看，很多人似乎认为我们抓住了重点。&lt;/p&gt;&#xA;&lt;p&gt;我无法衡量我的文章是否成功，除了页面浏览量，但对它们的反应至少与我开始时不同。起初，Slashdot 上的巨魔的默认反应是（翻译成有条理的话）：&amp;ldquo;这家伙是谁，他有什么权威写这些话题？我还没读过这篇文章，但这么短、以如此非正式风格写的东西，在相关学科的专家已经写了很多厚书的情况下，不可能对某个话题有任何有用的见解。&amp;ldquo;现在在新一代网站上有新一代的巨魔，但他们至少已经开始省略最初的&amp;quot;这家伙是谁？&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;现在人们对 Arc 说着与一开始对 Viaweb、Y Combinator 和我大多数文章相同的话。为什么会有这种模式？答案，我意识到，是我对这四者的操作方式都是相同的。&lt;/p&gt;&#xA;&lt;p&gt;这就是：我喜欢找到（a）简单的解决方案（b）来解决被忽视的问题（c）这些问题确实需要解决，并且（d）尽可能非正式地交付它们，（e）从一个非常粗糙的第1版开始，然后（f）快速迭代。&lt;/p&gt;&#xA;&lt;p&gt;当我第一次明确列出这些原则时，我注意到一些引人注目的事情：这几乎是产生轻蔑初始反应的配方。虽然简单的解决方案更好，但它们看起来不像复杂的解决方案那样令人印象深刻。被忽视的问题按定义就是大多数人认为不重要的问题。非正式地交付解决方案意味着人们不能通过呈现方式来判断某些东西，而必须实际理解它，这需要更多工作。而从一个粗糙的第1版开始意味着你的初始努力总是小而不完整的。&lt;/p&gt;&#xA;&lt;p&gt;我当然注意到，人们似乎从来没有在第一时间掌握新想法。我以为这只是因为大多数人都很愚蠢。现在我看到了更多的原因。像一个逆向投资基金，遵循这种策略的人几乎总是在做普通人看来错误的事情。&lt;/p&gt;&#xA;&lt;p&gt;与逆向投资策略一样，这正是重点。这种技术是成功的（长期来看），因为它给了你所有其他人为了显得合法而放弃的优势。如果你处理被忽视的问题，你更有可能发现新事物，因为你的竞争更少。如果你非正式地交付解决方案，你（a）节省了所有本要花费让它们看起来令人印象深刻的努力，（b）避免了欺骗自己以及观众的危险。如果你发布一个粗糙的第1版然后迭代，你的解决方案可以从自然的想象力中受益，正如费曼指出的，这比你自己的更强大。&lt;/p&gt;&#xA;&lt;p&gt;以 Viaweb 为例，简单的解决方案是让软件在服务器上运行。被忽视的问题是自动生成网站；1995年，在线商店都是人工设计师手工制作的，但我们知道这无法扩展。真正重要的是图形设计，而不是交易处理。非正式的交付机制是我，穿着牛仔裤和T恤出现在某个零售商的办公室。而粗糙的第1版，如果我没记错的话，我们发布时不到一万行代码。&lt;/p&gt;&#xA;&lt;p&gt;这种技术的力量超出了初创公司、编程语言和文章的范围。它可能扩展到任何类型的创造性工作。当然它可以用于绘画：这正是塞尚和克利所做的。&lt;/p&gt;&#xA;&lt;p&gt;在 Y Combinator，我们把钱押在上面，从这个意义上说，我们鼓励我们资助的初创公司以这种方式工作。好想法总是在你的眼皮底下。所以要寻找其他人忽视的简单事物——人们后来会声称&amp;quot;显而易见&amp;quot;的事物——特别是当他们被过时的惯例误导，或者试图做表面上令人印象深刻的事情时。弄清楚真正的问题是什么，并确保你解决了这个问题。不要担心试图看起来像公司；产品才是长期获胜的关键。尽可能快地发布，这样你就开始从用户那里学习你应该制作什么。&lt;/p&gt;&#xA;&lt;p&gt;Reddit 是这种方法的一个经典例子。当 Reddit 首次发布时，似乎没什么内容。对那些图形设计不成熟的人来说，它故意极简的设计似乎根本不像设计。但 Reddit 解决了真正的问题，即告诉人们什么是新的，其他方面不要干扰。结果它变得非常成功。现在传统观念赶上了它，这似乎是显而易见的。人们看着 Reddit 认为创始人是幸运的。像所有这样的事情，它比看起来更难。Reddit 们如此用力地逆流而上以至于扭转了它；现在看起来他们只是在顺流而下。&lt;/p&gt;&#xA;&lt;p&gt;所以当你看着像 Reddit 这样的东西并想&amp;quot;我希望我能想到这样的想法&amp;quot;时，记住：这样的想法都在你周围。但你忽略了它们，因为它们看起来是错误的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>创造者的品味</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/taste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/taste/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/taste/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;创造者的品味&#34;&gt;创造者的品味&lt;/h1&gt;&#xA;&lt;p&gt;2002年2月&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;&amp;hellip;哥白尼对[等分点]的美学反对，成为他拒绝托勒密系统的一个重要动机&amp;hellip;&amp;hellip;&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;托马斯·库恩，《哥白尼革命》&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&amp;ldquo;我们所有人都被凯利·约翰逊训练过，并且狂热地相信他的坚持：看起来美丽的飞机也会以同样的方式飞行。&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本·里奇，《臭鼬工厂》&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&amp;ldquo;美是第一个测试：在这个世界上，丑陋的数学没有永久的地位。&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;G·H·哈代，《一个数学家的辩解》&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我最近和一个在麻省理工学院教书的朋友交谈。他的领域现在很热门，每年他都被大量想成为研究生的申请淹没。&amp;ldquo;他们中许多人看起来很聪明，&amp;ldquo;他说。&amp;ldquo;我无法判断的是他们是否有任何品味。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;品味。你现在很少听到这个词。然而我们仍然需要这个基本概念，无论我们称之为什么。我的朋友的意思是，他想要的学生不仅仅是好的技术人员，而是那些能够运用他们的技术知识来设计美丽事物的人。&lt;/p&gt;&#xA;&lt;p&gt;数学家称好作品为&amp;quot;美丽的&amp;rdquo;，科学家、工程师、音乐家、建筑师、设计师、作家和画家过去或现在也是如此。他们使用同一个词只是巧合，还是他们所指的东西有重叠？如果有重叠，我们能否利用一个领域关于美的发现来帮助另一个领域？&lt;/p&gt;&#xA;&lt;p&gt;对于我们这些设计事物的人来说，这些不仅仅是理论问题。如果确实有美这样的东西，我们需要能够识别它。我们需要好的品味来做出好的东西。不要把美当作一个空泛的抽象概念，根据你对空泛抽象概念的感觉来要么夸夸其谈要么回避，让我们尝试把它当作一个实际问题来考虑：你如何做出好的东西？&lt;/p&gt;&#xA;&lt;p&gt;如果你现在提到品味，很多人会告诉你&amp;quot;品味是主观的。&amp;ldquo;他们相信这一点是因为对他们来说确实如此。当他们喜欢某样东西时，他们不知道为什么。可能是因为它美丽，或者因为他们母亲有一个，或者因为他们在杂志上看到电影明星有一个，或者因为他们知道它很贵。他们的思想是一团未经过审视的冲动。&lt;/p&gt;&#xA;&lt;p&gt;我们大多数人在童年时都被鼓励不要审视这团乱麻。如果你嘲笑你的小弟弟在涂色书中把人涂成绿色，你母亲可能会告诉你一些类似&amp;quot;你喜欢用你的方式做，他喜欢用他的方式&amp;quot;的话。&lt;/p&gt;&#xA;&lt;p&gt;在这一点上，你母亲并不是试图教你关于美学的重要真理。她是想让你们两个停止争吵。&lt;/p&gt;&#xA;&lt;p&gt;就像许多成年人告诉我们的半真相一样，这与他们告诉我们的其他事情相矛盾。在向你灌输品味只是个人偏好的事情之后，他们带你去博物馆，告诉你应该注意，因为莱昂纳多是伟大的艺术家。&lt;/p&gt;&#xA;&lt;p&gt;此时孩子脑中想的是什么？他认为&amp;quot;伟大艺术家&amp;quot;是什么意思？在被教导多年认为每个人都只是喜欢用自己的方式做事之后，他不太可能直接得出伟大艺术家是作品比其他人更好的人的结论。在他的托勒密宇宙模型中，一个更可能的理论是，伟大艺术家是对你有好处的某种东西，就像西兰花一样，因为有人在一本书里这样说。&lt;/p&gt;&#xA;&lt;p&gt;说品味只是个人偏好是防止争执的好方法。问题是，这不是真的。当你开始设计事物时，你会感觉到这一点。&lt;/p&gt;&#xA;&lt;p&gt;无论人们做什么工作，他们都自然地想做得更好。足球运动员喜欢赢得比赛。CEO喜欢增加收益。在工作中变得更好是自尊的事情，也是一种真正的快乐。但如果你的工作是设计事物，而没有美这样的东西，那么你就不可能在工作中变得更好。如果品味只是个人偏好，那么每个人的品味都已经完美：你喜欢你所喜欢的，就这样。&lt;/p&gt;&#xA;&lt;p&gt;和在任何工作中一样，当你继续设计事物时，你会做得更好。你的品味会改变。而且，像任何在工作中变得更好的人一样，你会知道你正在变得更好。如果是这样，你旧的品味不仅仅是不同，而是更差。品味不能错的公理就不成立了。&lt;/p&gt;&#xA;&lt;p&gt;相对主义现在很时髦，这可能会阻碍你思考品味问题，即使你的品味在成长。但如果你走出衣柜，至少对自己承认有好设计和坏设计这样的东西，那么你就可以开始详细研究好设计。你的品味如何改变？当你犯错误时，是什么导致你犯错误？其他人从设计中学到了什么？&lt;/p&gt;&#xA;&lt;p&gt;一旦你开始审视这个问题，不同领域关于美的想法有多少共同之处是令人惊讶的。好的设计原则一次又一次地出现。&lt;/p&gt;&#xA;&lt;p&gt;好的设计是简单的。你从数学到绘画都听到这个。在数学中，这意味着较短的证明往往是较好的证明。特别是在公理方面，少即是多。在编程中这意味着大致相同的事情。对于建筑师和设计师来说，这意味着美应该依赖于几个精心选择的结构元素，而不是大量表面装饰。（装饰本身并不坏，只有当它是乏味形式的伪装时才坏。）同样，在绘画中，几个精心观察和坚实建模物体的静物往往比比如花边领的华丽但重复乏味的绘画更有趣。在写作中，这意味着：说出你的意思并简短地说。&lt;/p&gt;&#xA;&lt;p&gt;必须强调简单似乎很奇怪。你会认为简单应该是默认的。华丽需要更多工作。但当人们试图变得有创意时，似乎发生了某种变化。初学写作的作者采用一种浮夸的语气，听起来一点也不像他们说话的方式。试图艺术的设计者求助于曲线和卷曲。画家发现他们是表现主义者。这都是逃避。在长单词或&amp;quot;表现性&amp;quot;笔触下面，没有太多实质性内容，那是可怕的。&lt;/p&gt;&#xA;&lt;p&gt;当你被迫简单时，你被迫面对真正的问题。当你不能提供装饰时，你必须提供实质。&lt;/p&gt;&#xA;&lt;p&gt;好的设计是永恒的。在数学中，每个证明都是永恒的，除非它包含错误。那么哈代说丑陋的数学没有永久地位是什么意思？他的意思和凯利·约翰逊的意思一样：如果某物丑陋，它不可能是最佳解决方案。一定有更好的一个，最终有人会发现它。&lt;/p&gt;&#xA;&lt;p&gt;目标是永恒是让你自己找到最佳答案的一种方式：如果你能想象有人超越你，你应该自己这样做。一些最伟大的大师做得如此之好，以至于给后来者留下很小的空间。自从丢勒以来的每个雕刻家都不得不生活在他的阴影下。&lt;/p&gt;&#xA;&lt;p&gt;目标是永恒也是逃避时尚掌控的一种方式。时尚几乎根据定义随时间变化，所以如果你能做出在未来很久看起来仍然很好的东西，那么它的吸引力必然更多来自优点而不是时尚。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，如果你想制作吸引后代的东西，一种方法是尝试吸引前代。很难猜测未来会是什么样子，但我们可以确定它会像过去一样不在乎现在的时尚。所以如果你能制作吸引今天人们的东西，也能吸引1500年的人们，那么它很可能吸引2500年的人们。&lt;/p&gt;&#xA;&lt;p&gt;好的设计解决正确的问题。典型的炉子有四个排列成方形的燃烧器，和一个控制每个的旋钮。你如何安排旋钮？最简单的答案是把它们排成一排。但这是对错误问题的简单答案。旋钮是给人类使用的，如果你把它们排成一排，不幸的人类必须每次停下来思考哪个旋钮匹配哪个燃烧器。最好把旋钮像燃烧器一样排列成方形。&lt;/p&gt;&#xA;&lt;p&gt;很多坏设计是勤奋但误入歧途的。在二十世纪中期，有一种用无衬线字体排文本的时尚。这些字体更接近纯粹、潜在的字母形式。但在文本中，这不是你试图解决的问题。为了易读性，字母容易区分更重要。它可能看起来维多利亚式，但Times Roman小写g很容易与小写y区分。&lt;/p&gt;&#xA;&lt;p&gt;问题和解决方案都可以改进。在软件中，一个棘手的问题通常可以被一个容易解决的等效问题替代。物理学随着问题变得预测可观察行为，而不是与经文协调而进展更快。&lt;/p&gt;&#xA;&lt;p&gt;好的设计是暗示性的。简·奥斯汀的小说几乎不包含描述；她不告诉你一切看起来如何，而是如此好地讲述她的故事，让你自己想象场景。同样，暗示的绘画通常比直接告知的更吸引人。每个人都为《蒙娜丽莎》编造自己的故事。&lt;/p&gt;&#xA;&lt;p&gt;在建筑和设计中，这个原则意味着建筑或物体应该让你以你想要的方式使用它：一个好的建筑，例如，将作为人们在其中想要过任何生活的背景，而不是让他们生活得像在执行建筑师编写的程序一样。&lt;/p&gt;&#xA;&lt;p&gt;在软件中，这意味着你应该给用户一些基本元素，他们可以按照自己的意愿组合，像乐高一样。在数学中，一个成为大量新工作基础的证明比一个困难但不导致未来发现的证明更可取；在科学中，引用通常被认为是价值的粗略指标。&lt;/p&gt;&#xA;&lt;p&gt;好的设计通常是有点滑稽的。这一点可能并不总是正确。但丢勒的雕刻、沙里宁的子宫椅、万神殿和原版保时捷911在我看来都有点滑稽。哥德尔不完备定理看起来像一个恶作剧。&lt;/p&gt;&#xA;&lt;p&gt;我认为这是因为幽默与力量有关。有幽默感就是强大：保持幽默感是摆脱不幸，而失去幽默感是被它们伤害。因此力量——或至少是特权——的标志是不把自己太当回事。自信的人常常，像燕子一样，似乎在稍微嘲弄整个过程，就像希区柯克在他的电影中或勃鲁盖尔在他的画中——或者莎士比亚，就此而言。&lt;/p&gt;&#xA;&lt;p&gt;好的设计不一定非得滑稽，但很难想象被称为没有幽默感的东西同时是好设计。&lt;/p&gt;&#xA;&lt;p&gt;好的设计是困难的。如果你看看那些做了伟大工作的人，他们似乎都有一个共同点，就是他们工作非常努力。如果你不努力工作，你可能是在浪费你的时间。&lt;/p&gt;&#xA;&lt;p&gt;难题需要巨大的努力。在数学中，困难的证明需要巧妙的解决方案，而那些往往是有趣的。工程学也是如此。&lt;/p&gt;&#xA;&lt;p&gt;当你必须爬一座山时，你把不必要的东西扔出背包。因此，不得不在困难地点或小预算上建造的建筑师会发现他被迫产生优雅的设计。时尚和华饰被解决问题的困难业务推到一边。&lt;/p&gt;&#xA;&lt;p&gt;不是每种困难都是好的。有好的痛苦和坏的痛苦。你想要跑步得到的痛苦，而不是踩到钉子得到的痛苦。困难的问题对设计师可能是好的，但善变的客户或不可靠的材料不是。&lt;/p&gt;&#xA;&lt;p&gt;在艺术中，传统上最高位置被给予人物画。这个传统有些道理，不仅是因为面部图片能按下我们大脑中其他图片不能按下的按钮。我们如此擅长看脸，以至于我们迫使任何画它们的人努力工作来满足我们。如果你画一棵树，改变树枝的角度五度，没人会知道。当你改变某人眼睛的角度五度时，人们会注意到。&lt;/p&gt;&#xA;&lt;p&gt;当包豪斯设计师采用沙利文的&amp;quot;形式追随功能&amp;quot;时，他们的意思是形式应该追随功能。如果功能足够困难，形式被迫追随它，因为没有精力用于错误。野生动物是美丽的，因为它们生活艰难。&lt;/p&gt;&#xA;&lt;p&gt;好的设计看起来容易。像伟大的运动员一样，伟大的设计师让它看起来容易。大部分这是一种错觉。好的写作的轻松、谈话式的语调只在第八次重写时出现。&lt;/p&gt;&#xA;&lt;p&gt;在科学和工程中，一些最伟大的发现看起来如此简单，以至于你对自己说，我本可以想到那个。发现者有权回答，那你为什么不呢？&lt;/p&gt;&#xA;&lt;p&gt;一些莱昂纳多头部只是几条线。你看着它们想，你只需要把八到十条线放在正确的位置，你就做出了这个美丽的肖像。是的，但你必须把它们放在绝对正确的位置。最小的错误会让整个事情崩溃。&lt;/p&gt;&#xA;&lt;p&gt;线条画实际上是最困难的视觉媒介，因为它们要求接近完美。用数学术语，它们是闭式解；较差的艺术家字面上通过逐次近似解决相同的问题。孩子在大约十岁时放弃绘画的原因之一是他们决定开始像成年人一样绘画，而他们尝试的第一件事之一是脸的线条画。砰！&lt;/p&gt;&#xA;&lt;p&gt;在大多数领域，容易的外表似乎来自练习。也许练习的作用是训练你的潜意识处理过去需要有意识思考的任务。在某些情况下，你字面上训练你的身体。专家钢琴家可以比大脑向手发送信号更快地弹奏音符。同样，艺术家过一段时间后，可以让视觉感知从眼睛流入，从手流出，就像某人用脚打拍子一样自动。&lt;/p&gt;&#xA;&lt;p&gt;当人们谈论处于&amp;quot;状态&amp;quot;时，我认为他们的意思是脊髓控制了情况。你的脊髓较少犹豫，它让有意识思考处理难题。&lt;/p&gt;&#xA;&lt;p&gt;好的设计使用对称。我认为对称可能只是实现简单的一种方式，但它重要到足以单独提及。自然界大量使用它，这是好迹象。&lt;/p&gt;&#xA;&lt;p&gt;有两种对称，重复和递归。递归意味着在子元素中重复，像叶子的脉络图案。&lt;/p&gt;&#xA;&lt;p&gt;对称现在在某些领域不时髦，是对过去过度的一种反应。建筑师在维多利亚时代开始有意识地使建筑不对称，到1920年代不对称是现代主义建筑的明确前提。但即使这些建筑也只是倾向于在主要轴上不对称；有数百个小对称。&lt;/p&gt;&#xA;&lt;p&gt;在写作中，你在每个层次都发现对称，从句子中的短语到小说的情节。你在音乐和艺术中发现相同的东西。马赛克（和一些塞尚作品）通过用相同的原子构成整个图画获得额外的视觉冲击力。构图对称产生了一些最令人难忘的绘画，特别是当两半相互反应时，如《创造亚当》或《美国哥特式》。&lt;/p&gt;&#xA;&lt;p&gt;在数学和工程中，递归尤其是一个巨大的胜利。归纳证明非常简短。在软件中，可以用递归解决的问题几乎总是最好那样解决。埃菲尔铁塔看起来令人印象深刻，部分是因为它是一个递归解决方案，塔上之塔。&lt;/p&gt;&#xA;&lt;p&gt;对称的危险，特别是重复的危险，是它可以被用作思想的替代。&lt;/p&gt;&#xA;&lt;p&gt;好的设计类似自然。类似自然本身并不内在地好，而是自然界有很长时间解决这个问题。当你的答案类似自然界的时，是好迹象。&lt;/p&gt;&#xA;&lt;p&gt;复制不是作弊。很少有人会否认故事应该像生活。在生活中工作也是绘画中的宝贵工具，尽管它的作用经常被误解。目的不仅仅是制作记录。从生活中绘画的要点是它给你的思想提供咀嚼的东西：当你的眼睛看着某物时，你的手会做更有趣的工作。&lt;/p&gt;&#xA;&lt;p&gt;模仿自然在工程学中也有效。长期以来，船有像动物胸腔一样的脊柱和肋骨。在某些情况下，我们可能必须等待更好的技术：早期飞机设计师错误地设计看起来像鸟的飞机，因为他们没有足够轻的材料或动力源（莱特兄弟的发动机重152磅，只产生12马力。）或足够复杂的控制系统让机器像鸟一样飞，但我可以想象五十年后像鸟一样飞的小型无人侦察机。&lt;/p&gt;&#xA;&lt;p&gt;既然我们有足够的计算机能力，我们可以模仿自然的方法以及结果。遗传算法可能让我们创造出太复杂而无法在通常意义上设计的东西。&lt;/p&gt;&#xA;&lt;p&gt;好的设计是重新设计。第一次就做对是罕见的。专家期望抛弃一些早期工作。他们计划让计划改变。&lt;/p&gt;&#xA;&lt;p&gt;抛弃工作需要信心。你必须能够想，那里还有更多。例如，当人们开始绘画时，他们常常不愿意重做不对的部分；他们觉得自己已经走这么远很幸运，如果他们尝试重做某物，结果会更糟。相反，他们说服自己图画并不是那么糟糕，真的——事实上，也许他们有意让它看起来那样。&lt;/p&gt;&#xA;&lt;p&gt;危险领域，那个；如果有的话，你应该培养不满。在莱昂纳多的绘画中，经常有五到六次尝试把一条线画对。保时捷911独特的后部只在一个笨拙原型的重新设计中出现。在赖特对古根海姆的早期计划中，右半边是一个金字形神塔；他把它倒置得到现在的形状。&lt;/p&gt;&#xA;&lt;p&gt;错误是自然的。不要把它们当作灾难，而是让它们容易承认和容易修复。莱昂纳多或多或少发明了素描，作为一种让绘画承担更多探索重量的方式。开源软件有较少的错误，因为它承认错误的可能性。&lt;/p&gt;&#xA;&lt;p&gt;有一个使变化容易的媒介是有帮助的。当油画在十五世纪取代蛋彩时，它帮助画家处理像人物这样困难的题材，因为与蛋彩不同，油可以混合和覆盖。&lt;/p&gt;&#xA;&lt;p&gt;好的设计可以复制。对复制的态度常常绕了一圈。新手无意识地模仿；接下来他试图有意识地原创；最后，他决定正确比原创更重要。&lt;/p&gt;&#xA;&lt;p&gt;无意识的模仿几乎坏设计的配方。如果你不知道你的想法来自哪里，你可能是在模仿模仿者。拉斐尔如此渗透十九世纪中期的品味，以至于任何试图绘画的人都在模仿他，通常经过几次 remove。这，而不是拉斐尔自己的作品，是困扰前拉斐尔派的东西。&lt;/p&gt;</description>
    </item>
    <item>
      <title>美国制造</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/usa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/usa/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/usa/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;美国制造&#34;&gt;美国制造&lt;/h1&gt;&#xA;&lt;p&gt;2004年11月&lt;/p&gt;&#xA;&lt;p&gt;（这是为《黑客与画家》日文版写的新文章。它试图解释为什么美国人有些事情做得好，有些事情做得差。）&lt;/p&gt;&#xA;&lt;p&gt;几年前，我的一个意大利朋友乘火车从波士顿到普罗维登斯。她在美国只待了几个星期，还没有看到多少这个国家。她到达时看起来很惊讶。&amp;ldquo;太丑了！&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;来自其他富裕国家的人几乎无法想象美国人为造部分的肮脏。在旅行书中，他们主要向你展示自然环境：大峡谷、激流漂流、田野里的马。如果你看到有人造东西的图片，要么是从谨慎距离拍摄的纽约天际线，要么是精心裁剪的缅因州海滨小镇的图像。&lt;/p&gt;&#xA;&lt;p&gt;这怎么可能，游客一定想知道。世界上最富有的国家怎么会看起来像这样？&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，这可能不是巧合。美国人有些事情做得好，有些事情做得差。我们擅长制作电影和软件，但不擅长制造汽车和城市建设。我想我们可能擅长我们擅长的事情的原因与我们不擅长我们不擅长的事情的原因相同。我们没有耐心。在美国，如果你想做某事，你不会担心它可能做得很差，或者打破微妙的社会平衡，或者人们可能认为你自视过高。如果你想做某事，就像耐克说的，只管去做。&lt;/p&gt;&#xA;&lt;p&gt;这在某些领域效果很好，在其他领域效果很差。我怀疑它在电影和软件中有效，因为它们都是混乱的过程。&amp;ldquo;系统性&amp;quot;是我用来描述优秀程序员编写软件方式的最后一个词。代码不是他们在精心规划后辛苦组装的东西，就像金字塔一样。它是他们投入其中的东西，工作得很快，不断改变想法，就像炭笔画一样。&lt;/p&gt;&#xA;&lt;p&gt;在软件中，听起来很矛盾，好的工艺意味着工作得很快。如果你工作缓慢而细致，你最终只会得到最初错误想法的非常精细的实现。工作缓慢而细致是过早优化。最好快速完成原型，看看它给你带来什么新想法。&lt;/p&gt;&#xA;&lt;p&gt;听起来制作电影很像制作软件。每部电影都是科学怪人，充满缺陷，通常与最初设想的完全不同。但很有趣，而且完成得相当快。我认为我们在电影和软件中能逃脱这一点，因为它们都是可塑性的媒介。大胆是有回报的。如果在最后一刻两个部分不太吻合，你可以想出一些技巧来至少掩盖问题。&lt;/p&gt;&#xA;&lt;p&gt;汽车或城市就不是这样了。它们都是太物理的了。如果汽车行业像软件或电影那样运作，你会通过制造一辆只有五十磅重的汽车，或者在你想停车时折叠成摩托车大小来超越竞争对手。但对于物理产品，有更多的约束。你不会通过戏剧性的创新获胜，而是通过良好的品味和对细节的关注。&lt;/p&gt;&#xA;&lt;p&gt;问题是，&amp;ldquo;品味&amp;quot;这个词在美国人耳中听起来有点可笑。它似乎很做作，或轻浮，甚至女性化。蓝州人认为这是&amp;quot;主观的&amp;rdquo;，红州人认为这是给懦夫的。所以在美国，任何真正关心设计的人都将是逆风而行的。&lt;/p&gt;&#xA;&lt;p&gt;二十年前，我们常常听到美国汽车行业的问题是工人。现在日本公司在美国建汽车，我们不再听到这种说法了。美国汽车的问题在于设计糟糕。你只要看一眼就能看出来。&lt;/p&gt;&#xA;&lt;p&gt;AMC Matador上所有额外的金属板不是工人加上的。这辆车的问题，和今天的美国汽车一样，是它是由营销人员而不是设计师设计的。&lt;/p&gt;&#xA;&lt;p&gt;为什么日本人比我们制造更好的汽车？有人说是因为他们的文化鼓励合作。这可能有关。但在这种情况下，他们的文化重视设计和工艺似乎更切中要害。&lt;/p&gt;&#xA;&lt;p&gt;几个世纪以来，日本人一直制造比我们在西方更精细的东西。当你看他们在1200年制造的剑时，你简直不敢相信标签上的日期是对的。推测他们的汽车比我们的装配更精确的原因和他们的木工一直如此的原因相同。他们痴迷于把事情做好。&lt;/p&gt;&#xA;&lt;p&gt;我们不是。当我们在美国制造东西时，我们的目标只是完成工作。一旦达到那个点，我们采取两条路线之一。我们可以停在那里，得到一些粗糙但可用的东西，就像老虎钳一样。或者我们可以改进它，这通常意味着给它镶嵌上无用的装饰。当我们想让汽车&amp;quot;更好&amp;quot;时，我们在上面加上尾鳍，或者让它更长，或者让窗户更小，取决于当前的时尚。&lt;/p&gt;&#xA;&lt;p&gt;房子也是如此。在美国，你要么有一个用两乘四和石膏板粗制滥造的脆弱盒子，要么是一个麦克豪宅——一个用两乘四和石膏板粗制滥造的脆弱盒子，但更大，看起来更戏剧性，充满了昂贵的配件。富人不会得到更好的设计或工艺；他们只是得到标准房子的更大、更显眼的版本。&lt;/p&gt;&#xA;&lt;p&gt;我们在这里并不特别珍视设计或工艺。我们喜欢的是速度，我们愿意用丑陋的方式做事来快速完成。在某些领域，比如软件或电影，这是一个净收益。但这不仅仅是因为软件和电影是可塑性的媒介。在这些业务中，设计师（尽管他们通常不这样称呼）有更多的权力。软件公司，至少成功的那些，倾向于由程序员经营。在电影行业，尽管制片人可能会质疑导演，但导演控制着屏幕上出现的大部分内容。因此，美国软件和电影，以及日本汽车，都有这个共同点：负责人关心设计——前者是因为设计师负责，后者是因为整个文化都关心设计。&lt;/p&gt;&#xA;&lt;p&gt;我认为大多数日本高管会对制造坏汽车的想法感到恐惧。而美国高管，在内心深处，仍然相信汽车最重要的是它投射的形象。制造好汽车？什么是&amp;quot;好&amp;rdquo;？这太主观了。如果你想知道如何设计汽车，问一个焦点小组。&lt;/p&gt;&#xA;&lt;p&gt;美国汽车公司没有依赖自己的内部设计指南针（像亨利·福特那样），而是试图制造营销人员认为消费者想要的东西。但这并不奏效。美国汽车继续失去市场份额。原因是客户不想要他们认为他们想要的东西。&lt;/p&gt;&#xA;&lt;p&gt;让焦点小组为你设计汽车只在短期内有效。从长远来看，押注于好设计是有回报的。焦点小组可能会说他们想要当天的虚假功能，但他们更想要的是模仿成熟的买家，他们虽然是少数，但确实关心好设计。最终皮条客和毒贩注意到医生和律师已经从凯迪拉克转向雷克萨斯，也这样做。&lt;/p&gt;&#xA;&lt;p&gt;苹果是对美国总体趋势的一个有趣的反例。如果你想买一个不错的CD播放器，你可能会买日本的。但如果你想买MP3播放器，你可能会买iPod。发生了什么？为什么索尼不主导MP3播放器？因为苹果现在进入了消费电子业务，与其他美国公司不同，他们痴迷于好设计。或者更准确地说，他们的CEO是。&lt;/p&gt;&#xA;&lt;p&gt;我刚刚得到了一个iPod，它不只是不错。它令人惊讶地好。为了让我感到惊讶，它必须满足我不知道自己拥有的期望。没有焦点小组会发现这些。只有伟大的设计师才能。&lt;/p&gt;&#xA;&lt;p&gt;汽车不是我们在美国制造的最糟糕的东西。just-do-it模式失败最戏剧性的地方是我们的城市——或者更准确地说，是远郊。如果房地产开发商在足够大的规模上运作，如果他们建造整个城镇，市场力量会迫使他们建造不会太糟糕的城镇。但他们一次只建造几栋办公楼或郊区街道，结果如此令人沮丧，以至于居民认为飞到欧洲花几周过那里人们的日常生活是一种极大的享受。[1]&lt;/p&gt;&#xA;&lt;p&gt;但just-do-it模式确实有优势。它似乎是创造财富和技术创新（几乎是同一件事）的明确赢家。我认为原因是速度。通过制造商品很难创造财富。真正的价值在于新事物，如果你想成为第一个制造某事物的人，快速工作有帮助。无论好坏，just-do-it模式都是快速的，无论你是丹·布里克林在一个周末内编写VisiCalc原型，还是房地产开发商在一个月内建造一整栋劣质公寓。&lt;/p&gt;&#xA;&lt;p&gt;如果我必须在just-do-it模式和谨慎模式之间选择，我可能会选择just-do-it。但我们必须选择吗？我们能两全其美吗？美国人能不能在拥有不错的生活场所的同时，不削弱让我们擅长软件的不耐烦、个人主义精神？其他国家能否在它们的技术公司和实验室中引入更多个人主义，而不会让它变成购物商场？我是乐观的。对其他国家来说更难说，但在美国，至少我认为我们可以两全其美。&lt;/p&gt;&#xA;&lt;p&gt;苹果是一个鼓舞人心的例子。他们设法保留了编写软件所需的不耐烦、黑客精神。然而，当你拿起一个新的苹果笔记本电脑时，嗯，它看起来不像美国制造的。它太完美了。看起来好像它一定是由瑞典或日本公司制造的。&lt;/p&gt;&#xA;&lt;p&gt;在许多技术中，第二代具有更高的分辨率。为什么在设计上一般不是这样？我认为我们将逐渐看到民族特征被职业特征所取代：日本的黑客将被允许表现出一种现在看起来不像日本的固执，而美国的产品将以一种现在看起来不像美国的对品味的坚持来设计。也许未来最成功的国家将是那些最愿意忽视现在被认为是民族特征的国家，并用最有效的方式做每种工作。比赛吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>设计与研究</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/desres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/desres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/desres/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;设计与研究&#34;&gt;设计与研究&lt;/h1&gt;&#xA;&lt;p&gt;2003年1月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自2002年秋季NEPLS会议的主题演讲。）&lt;/p&gt;&#xA;&lt;p&gt;访问这个国家的人常常惊讶地发现，美国人喜欢以询问&amp;quot;你是做什么的？&amp;ldquo;来开始对话。我从来不喜欢这个问题。我很少有一个简洁的答案。但我想我终于解决了这个问题。现在，当有人问我做什么时，我会直视他们的眼睛说&amp;quot;我正在设计一种新的Lisp方言。&amp;ldquo;我推荐这个答案给任何不喜欢被问及做什么的人。对话会立即转向其他话题。&lt;/p&gt;&#xA;&lt;p&gt;我不认为自己在研究编程语言。我只是在设计一种，就像有人可能设计一座建筑、一把椅子或一种新字体一样。我不是在试图发现什么新东西。我只是想创造一种编程起来很舒服的语言。在某些方面，这个假设让生活轻松很多。&lt;/p&gt;&#xA;&lt;p&gt;设计和研究之间的区别似乎是一个新与好的问题。设计不一定要新，但一定要好。研究不一定要好，但一定要新。我认为这两条路在顶端汇合：最好的设计通过使用新思想超越其前人，而最好的研究解决的不仅是新的问题，而且是真正值得解决的问题。所以最终我们的目标是相同的目的地，只是从不同的方向接近。&lt;/p&gt;&#xA;&lt;p&gt;今天我要谈论的是从背面看你的目标是什么样子的。当你把编程语言视为设计问题而非研究课题时，你会做什么不同的事情？&lt;/p&gt;&#xA;&lt;p&gt;最大的区别是你更关注用户。设计始于问，这是为谁而做的，他们从中需要什么？例如，一个好的建筑师不是先创建一个设计然后强加给用户，而是通过研究预期用户并找出他们需要什么来开始。&lt;/p&gt;&#xA;&lt;p&gt;注意我说的是&amp;quot;他们需要的&amp;rdquo;，而不是&amp;quot;他们想要的&amp;rdquo;。我并不是说作为一名设计师工作意味着像快餐厨师一样工作，做客户告诉你的任何事情。这在艺术领域的各个领域都有所不同，但我不认为有任何领域是由那些完全按照客户要求做事的人做出最好的作品的。&lt;/p&gt;&#xA;&lt;p&gt;在衡量好设计的标准是它对用户有多好用这一点上，顾客永远是对的。如果你写了一本让所有人都感到无聊的小说，或者一把坐着极不舒服的椅子，那么你的工作就很糟糕，就是这样。说小说或椅子是根据最先进的理论原理设计的，这并不是辩解。&lt;/p&gt;&#xA;&lt;p&gt;然而，做出对用户有用的东西并不意味着简单地做用户告诉你做的事情。用户不知道所有的选择是什么，而且常常对他们真正想要的东西感到困惑。&lt;/p&gt;&#xA;&lt;p&gt;这个悖论的答案，我认为是你必须为用户设计，但必须设计用户需要的东西，而不是仅仅设计他们说他们想要的东西。这很像做医生。你不能仅仅治疗病人的症状。当病人告诉你他们的症状时，你必须找出真正的问题所在，并治疗那个。&lt;/p&gt;&#xA;&lt;p&gt;这种对用户的关注是一种公理，大多数好的设计实践都可以从中推导出来，大多数设计问题都围绕着它。&lt;/p&gt;&#xA;&lt;p&gt;如果好的设计必须满足用户的需求，那么用户是谁？当我说设计必须为用户时，我并不是说好的设计旨在某种最低标准。你可以选择任何你想要的用户群体。例如，如果你在设计一个工具，你可以为从初学者到专家的任何人设计，而针对一个群体的好设计对另一个群体可能是坏的设计。关键是，你必须选择某个用户群体。我认为除非参考某个预期用户，否则你甚至无法谈论好或坏的设计。&lt;/p&gt;&#xA;&lt;p&gt;如果预期用户包括设计师自己，你最有可能获得好的设计。当你为不包括你自己的群体设计东西时，它往往是为那些你认为比你不够复杂的人设计的，而不是更复杂的。&lt;/p&gt;&#xA;&lt;p&gt;这是一个问题，因为无论多么仁慈，居高临下地看待用户似乎不可避免地会腐蚀设计师。我怀疑美国很少有住房项目是由期望住在那里的建筑师设计的。你可以在编程语言中看到同样的现象。C、Lisp和Smalltalk是为它们自己的设计师使用而创建的。Cobol、Ada和Java是为其他人使用而创建的。&lt;/p&gt;&#xA;&lt;p&gt;如果你认为你在为白痴设计东西，那么很可能你设计的东西不够好，即使是对白痴来说。即使你为最复杂的用户设计东西，你仍然在为人类设计。在研究方面情况不同。在数学中，你选择抽象不是因为它们容易理解，而是因为它们能让证明更短。我认为这对科学大体上也是如此。科学思想并不是为了符合人体工程学。&lt;/p&gt;&#xA;&lt;p&gt;在艺术领域，情况非常不同。设计完全是关于人的。人体是个奇怪的东西，但当你设计一把椅子时，那就是你设计的对象，没有办法回避。所有艺术都必须迎合人类的兴趣和局限性。例如，在绘画中，在其他条件相同的情况下，有人的画比没有人的画更有趣。文艺复兴时期的伟大画作都充满了人，这不仅仅是历史的偶然。如果不是这样，绘画作为媒介就不会拥有它所拥有的声望。&lt;/p&gt;&#xA;&lt;p&gt;不管喜欢与否，编程语言也是为人类服务的，我怀疑人脑就像人体一样凹凸不平且特异。有些思想人们很容易掌握，有些则不然。例如，我们处理细节的能力似乎非常有限。正是这个事实使得编程语言一开始就是个好主意；如果我们能处理细节，我们可以直接用机器语言编程。&lt;/p&gt;&#xA;&lt;p&gt;还要记住，语言主要不是完成程序的形式，而是程序必须在其中开发的东西。任何艺术领域的人都会告诉你，你可能需要不同的媒介来处理这两种情况。例如，大理石是完成思想的漂亮、耐用的媒介，但对于开发新思想来说，它却是一种无可救药的僵化媒介。&lt;/p&gt;&#xA;&lt;p&gt;程序就像证明一样，是一棵树的修剪版本，这棵树过去到处都有错误的分支。所以语言的测试不仅仅是完成的程序在它里面看起来有多干净，而是到达完成程序的路径有多干净。一个能给你优雅完成程序的设计选择可能不会给你一个优雅的设计过程。例如，我写过几个定义宏的宏，充满了嵌套的反引号，现在看起来像小宝石，但写它们花费了数小时最丑陋的试错，而且坦率地说，我仍然不完全确定它们是正确的。&lt;/p&gt;&#xA;&lt;p&gt;我们常常表现得好像语言的测试是完成的程序在它里面看起来有多好。当你看到同一个程序用两种语言编写，一个版本短得多时，这似乎很有说服力。当你从艺术的角度接近这个问题时，你不太可能依赖这种测试。你不想最终得到一个像大理石一样的编程语言。&lt;/p&gt;&#xA;&lt;p&gt;例如，在软件开发中拥有一个交互式顶层（在Lisp中称为读取-求值-打印循环）是一个巨大的胜利。当你有一个这样的东西时，它对语言的设计有实际影响。它对于一个必须在使用前声明变量的语言来说效果不佳，例如。当你只是在顶层输入表达式时，你希望能够将x设置为某个值，然后开始对x做事情。你不想必须先声明x的类型。你可以对任何一个前提提出异议，但如果一个语言必须有顶层才能方便，而强制类型声明与顶层不兼容，那么任何强制类型声明的语言都不可能方便编程。&lt;/p&gt;&#xA;&lt;p&gt;在实践中，要获得好的设计，你必须接近并保持接近你的用户。你必须不断在实际用户上校准你的想法，尤其是在开始时。简·奥斯汀的小说如此之好的原因之一是她把它们大声读给家人听。这就是为什么她从不沉溺于自我放纵的风景描述或矫饰的哲学思考。（哲学在那里，但它被编织进故事中，而不是像标签一样粘贴在上面。）如果你打开一本普通的&amp;quot;文学&amp;quot;小说，想象把它作为你写的东西大声读给朋友听，你会敏锐地感觉到那种东西对读者来说是多么令人难以忍受。&lt;/p&gt;&#xA;&lt;p&gt;在软件世界，这个想法被称为&amp;quot;较差就是更好&amp;quot;。实际上，&amp;ldquo;较差就是更好&amp;quot;的概念中混合了几个想法，这就是为什么人们仍在争论较差是否真的更好。但这个混合中的主要思想之一是，如果你在构建新东西，你应该尽快将原型放到用户面前。&lt;/p&gt;&#xA;&lt;p&gt;另一种方法可能叫做&amp;quot;万福玛丽亚策略&amp;rdquo;。你不是快速拿出原型并逐步改进它，而是试图在一次长传触地中创建完整、完成的产品。据我所知，这是灾难的根源。无数创业公司在互联网泡沫期间这样自我毁灭。我从未听说过有成功的案例。&lt;/p&gt;&#xA;&lt;p&gt;软件世界之外的人可能没有意识到的是，&amp;ldquo;较差就是更好&amp;quot;的思想在整个艺术领域都有体现。例如，在绘画中，这个思想在文艺复兴时期被发现。现在几乎每个绘画老师都会告诉你，获得准确绘画的正确方法不是慢慢地围绕物体的轮廓工作，因为错误会累积，最后你会发现线条不相遇。相反，你应该在大致正确的地方画几条快速的线，然后逐渐完善这个初始草图。&lt;/p&gt;&#xA;&lt;p&gt;在大多数领域，传统上原型是用不同材料制作的。要切割成金属的字体最初是用刷子在纸上设计的。要铸成青铜的雕像是用蜡建模的。要在挂毯上刺绣的图案是用墨水在纸上绘制的。要用石头建造的建筑是在较小规模的木材上测试的。&lt;/p&gt;&#xA;&lt;p&gt;当油画在十五世纪首次流行时令人兴奋的原因是，你实际上可以从原型制作完成的作品。如果你愿意，可以做一个初步的绘图，但你不必受它约束；你可以在完成绘画时解决所有细节，甚至做重大改变。&lt;/p&gt;&#xA;&lt;p&gt;在软件中你也可以这样做。原型不一定只是一个模型；你可以将其精制成成品。我认为你应该在可能的时候总是这样做。它能让你利用一路上获得的新见解。但也许更重要的是，它对士气有好处。&lt;/p&gt;&#xA;&lt;p&gt;士气在设计中至关重要。我很惊讶人们不多谈论它。我的第一个绘画老师告诉我：当你画某样东西感到无聊时，画出来的东西看起来会很无聊。例如，假设你必须画一栋建筑，你决定单独画每一块砖。如果你愿意，你可以这样做，但如果你中途感到无聊并开始机械地画砖而不是观察每一块，那么画出来的效果会比仅仅暗示砖块要差。&lt;/p&gt;&#xA;&lt;p&gt;通过逐步完善原型来建造东西对士气有好处，因为它能让你保持投入。在软件中，我的规则是：始终有可工作的代码。如果你正在写一小时内可以测试的东西，那么你有立即获得奖励的前景来激励你。在艺术领域也是如此，特别是在油画中。大多数画家从模糊的草图开始，然后逐步完善。如果你这样工作，那么原则上你永远不必在一天结束时留下看起来确实未完成的东西。确实，画家之间甚至有句谚语：&amp;ldquo;一幅画永远不会完成，你只是停止在上面工作。&amp;ldquo;这个想法对任何做过软件的人来说都很熟悉。&lt;/p&gt;&#xA;&lt;p&gt;士气是难以设计给不够复杂用户的另一个原因。很难对自己不喜欢的东西保持兴趣。要做出好东西，你必须想&amp;quot;哇，这真的很棒&amp;rdquo;，而不是&amp;quot;这是什么垃圾；那些傻瓜会喜欢它&amp;rdquo;。&lt;/p&gt;&#xA;&lt;p&gt;设计意味着为人类制造东西。但不仅仅是用户是人。设计师也是人。&lt;/p&gt;&#xA;&lt;p&gt;注意这段时间我一直在谈论&amp;quot;设计师&amp;rdquo;。设计通常必须由单个人控制才能做好。然而，似乎几个人可以合作进行一个研究项目。这在我看来是研究和设计之间最有趣的区别之一。&lt;/p&gt;&#xA;&lt;p&gt;艺术领域有著名合作的例子，但它们大多数似乎是分子结合而不是核融合的情况。在歌剧中，通常由一个人写剧本，另一个人写音乐。在文艺复兴时期，来自北欧的工匠经常被雇佣来做意大利绘画背景中的风景。但这些不是真正的合作。它们更像是罗伯特·弗罗斯特&amp;quot;好篱笆造就好邻居&amp;quot;的例子。你可以把好的设计实例粘在一起，但在每个单独的项目中，一个人必须处于控制地位。&lt;/p&gt;&#xA;&lt;p&gt;我不是说好的设计要求一个人思考所有事情。没有什么比一个你信任其判断的人的建议更有价值了。但谈话结束后，关于做什么的决定必须由一个人来做。&lt;/p&gt;&#xA;&lt;p&gt;为什么研究可以由合作者完成而设计不能？这是一个有趣的问题。我不知道答案。也许，如果设计和研究汇合，最好的研究也是好的设计，而且实际上不能由合作者完成。许多最著名的科学家似乎都是独自工作的。但我了解得不够多，无法说这里是否有模式。这可能仅仅是因为许多著名科学家工作时合作不那么普遍。&lt;/p&gt;&#xA;&lt;p&gt;无论科学领域的情况如何，真正的合作在艺术领域似乎极为罕见。委员会设计是坏设计的同义词。为什么会这样？有什么方法可以克服这个限制吗？&lt;/p&gt;&#xA;&lt;p&gt;我倾向于认为没有——好的设计需要一个独裁者。一个原因是好的设计必须是一体的。设计不仅是为人类，而是为单个的人。如果一个设计代表的思想适合一个人的头脑，那么这个思想也会适合用户的头脑。&lt;/p&gt;&#xA;&lt;p&gt;相关链接：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/design_and_research_japanese.htm&#34;&gt;日语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/taste/&#34;&gt;制造者的品味&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.cs.kent.ac.uk/people/staff/srk21/research/papers/graham/design_and_research_romanian.pdf&#34;&gt;罗马尼亚语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.barrahome.org/blog/articulos/diseno_e_investigacion&#34;&gt;西班牙语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>赛格威的麻烦</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/segway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/segway/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/segway/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;赛格威的麻烦&#34;&gt;赛格威的麻烦&lt;/h1&gt;&#xA;&lt;p&gt;2009年7月&lt;/p&gt;&#xA;&lt;p&gt;赛格威没有实现其最初的承诺，说得客气一点。有几个原因，但一个是人们不想被看到骑着它们。骑赛格威的人看起来像个呆子。&lt;/p&gt;&#xA;&lt;p&gt;我的朋友特雷弗·布莱克韦尔建造了自己的赛格威，我们称之为Segwell。他还建造了一个单轮版本，Eunicycle，在你意识到骑手没有踩踏板之前，它看起来就像普通的独轮车。他曾骑着它们去山景城市中心买咖啡。当他骑Eunicycle时，人们对他微笑。但当他骑Segwell时，他们会从车里喊出侮辱的话：&amp;ldquo;太懒了不走路，你他妈的同性恋？&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;为什么赛格威会引发这种反应？骑赛格威看起来像呆子的原因是你看起来很自鸣得意。你似乎没有足够努力地工作。&lt;/p&gt;&#xA;&lt;p&gt;骑摩托车的人也没有更努力工作。但因为他跨坐在上面，他似乎在努力。当你骑赛格威时，你只是站在那里。而一个被带着走而似乎没有做任何工作的人——比如坐在轿子里的人——不可避免地看起来自鸣得意。&lt;/p&gt;&#xA;&lt;p&gt;试试这个思维实验，就会变得清楚：想象一个像赛格威一样工作的东西，但你像滑板一样一只脚在前一只脚在后地骑。那看起来就不会那么不酷了。&lt;/p&gt;&#xA;&lt;p&gt;所以可能有一种方法可以吸引更多赛格威希望达到的市场：制造一个看起来对骑手来说不那么容易的版本。如果造型遵循滑板或自行车的传统而不是医疗设备的传统，也会有所帮助。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，让赛格威陷入这个问题的是公司本身就是一种赛格威。对他们来说太容易了；他们太成功地筹集资金了。如果他们必须通过向真实用户销售的几个版本来逐步发展公司，他们会很快意识到人们骑着它们看起来很愚蠢。相反，他们有足够的资金在秘密中工作。我敢肯定，他们有很多焦点小组，但他们没有从车里喊出侮辱的人。所以他们从未意识到他们正自信地冲进一条死胡同。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
