<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>专注 on Linguage</title>
    <link>https://linguage.github.io/tags/%E4%B8%93%E6%B3%A8/</link>
    <description>Recent content in 专注 on Linguage</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E4%B8%93%E6%B3%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>你脑海中最主要的想法</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/top/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/top/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;你脑海中最主要的想法&#34;&gt;你脑海中最主要的想法&lt;/h1&gt;&#xA;&lt;p&gt;2010年7月&lt;/p&gt;&#xA;&lt;p&gt;我最近意识到，早晨洗澡时思考的东西比我想象的更重要。我知道那是产生想法的好时机。现在我要进一步说：对于任何你洗澡时不会思考的事情，你都很难真正做好。&lt;/p&gt;&#xA;&lt;p&gt;每个解决过难题的人可能都熟悉这种现象：努力思考想要弄明白某件事，失败了，然后在做其他事情时突然看到了答案。有一种思考是你不需要努力就去做的。我越来越确信，这种思考方式不仅对解决难题有帮助，而且是必要的。棘手的部分是，你只能间接地控制它。[1]&lt;/p&gt;&#xA;&lt;p&gt;我认为大多数人在任何特定时间都有一个最主要的想法。那就是当他们被允许自由漂移时思绪会漂向的想法。而这个想法往往会获得这种思考的所有好处，而其他想法则被剥夺了。这意味着让错误的想法成为你脑海中的主要想法是一场灾难。&lt;/p&gt;&#xA;&lt;p&gt;让我明白这一点的是，我有两个很长的时期，有一个我不希望成为主要想法的想法。&lt;/p&gt;&#xA;&lt;p&gt;我注意到创业公司在开始融资时完成的任务要少得多，但直到我们自己融资时我才明白为什么。问题不在于与投资者会面所花费的实际时间。问题在于，一旦你开始融资，融资就成为你脑海中的主要想法。那就是你早晨洗澡时会思考的事情。这意味着其他问题都不是。&lt;/p&gt;&#xA;&lt;p&gt;当我运行Viaweb时，我讨厌融资，但我忘记了为什么我如此讨厌它。当我们为Y Combinator融资时，我想起来了。金钱问题特别容易成为你脑海中的主要想法。原因是它们必须如此。很难获得金钱。这不是那种默认会发生的事情。除非你让它成为你洗澡时思考的事情，否则它不会发生。然后你在其他宁愿做的事情上就进展甚微。[2]&lt;/p&gt;&#xA;&lt;p&gt;（我听到从事教授工作的朋友有类似的抱怨。现在的教授似乎已经成了专业筹款人，顺便做一点研究。也许是时候解决这个问题了。）&lt;/p&gt;&#xA;&lt;p&gt;这件事给我如此强烈冲击的原因是，在之前的10年里，我大部分时间都能思考我想思考的事情。所以当我不能时的对比很鲜明。但我不认为这个问题只有我有，因为我看到的几乎每个创业公司在开始融资时都会陷入停顿——或者在与收购者交谈时。&lt;/p&gt;&#xA;&lt;p&gt;你不能直接控制你的思绪漂向哪里。如果你在控制它们，它们就不是在漂移。但你可以通过控制让自己陷入的情境来间接地控制它们。这对我是个教训：小心你让什么变得对你至关重要。努力让自己陷入最紧迫的问题是你想要思考的情境中。&lt;/p&gt;&#xA;&lt;p&gt;当然，你没有完全的控制权。紧急情况可能会把其他想法推出你的脑海。但除了紧急情况，你对什么成为你脑海中的主要想法有很大的间接控制权。&lt;/p&gt;&#xA;&lt;p&gt;我发现有两种想法特别值得避免——它们就像尼罗河鲈鱼一样推出更有趣的想法。我已经提到过一种：关于金钱的想法。获得金钱几乎就定义了是一个注意力陷阱。另一个是争议。这些也以错误的方式引人入胜：它们具有与真正有趣的想法相同的魔术贴形状，但没有实质内容。所以如果你想完成真正的工作，就要避免争议。[3]&lt;/p&gt;&#xA;&lt;p&gt;就连牛顿也陷入了这种陷阱。1672年发表他的色彩理论后，他发现自己多年来被争议分散了注意力，最终得出结论，唯一的解决方案是停止发表：我发现自己成了哲学的奴隶，但如果我能摆脱莱纳斯先生的事情，我将坚决地永远告别它，除非我为自己的私满足所做的事情，或者留待我身后发表。因为我看到一个人必须要么决心不发表任何新东西，要么成为捍卫它的奴隶。[4] 列日大学的莱纳斯和他的学生是那些更顽固的批评者之一。牛顿的传记作者韦斯特福尔似乎觉得他反应过度：回想一下，在他写作的时候，牛顿的&amp;quot;奴役&amp;quot;包括在一年内给列日写了五封回信，总共十四页印刷页。我对牛顿更有同情心。问题不在于这14页，而在于这个愚蠢的争议不断地被重新引入作为一个渴望思考其他事情的心灵中的主要想法所带来的痛苦。&lt;/p&gt;&#xA;&lt;p&gt;转过另一边脸被证明有自私的好处。伤害你的人伤害你两次：第一次是伤害本身，第二次是事后花时间思考它。如果你学会忽视伤害，你至少可以避免第二次伤害。我发现我可以通过告诉自己：这不值得占据我头脑中的空间，从而在某种程度上避免思考人们对我的恶意行为。我总是很高兴发现自己忘记了争议的细节，因为那意味着我没有在思考它们。我的妻子认为我比她更宽容，但我的动机纯粹是自私的。&lt;/p&gt;&#xA;&lt;p&gt;我怀疑很多人不确定在任何特定时间他们脑海中的主要想法是什么。我经常对此判断错误。我倾向于认为它是我希望成为主要想法的想法，而不是实际上的那个。但弄清楚这一点很容易：洗个澡就是了。你的思绪不断回到什么话题？如果这不是你想要思考的，你可能想要改变一些事情。&lt;/p&gt;&#xA;&lt;p&gt;注释&lt;/p&gt;&#xA;&lt;p&gt;[1] 毫无疑问，这种思考类型已经有名字了，但我称之为&amp;quot;环境思考&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;[2] 在我们的情况下这一点特别明显，因为我们筹集的两笔资金都不困难，但在这两种情况下，过程都拖了几个月。转移大量资金从来不是人们会随意对待的事情。所需的注意力随金额增加——可能不是线性的，但绝对是单调的。&lt;/p&gt;&#xA;&lt;p&gt;[3] 推论：避免成为管理者，否则你的工作将 consist 处理金钱和争议。&lt;/p&gt;&#xA;&lt;p&gt;[4] 致奥尔登堡的信，引自韦斯特福尔，理查德，《艾萨克·牛顿的生活》，第107页。&lt;/p&gt;&#xA;&lt;p&gt;感谢萨姆·奥特曼、帕特里克·克里森、杰西卡·利文斯顿和罗伯特·莫里斯阅读草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分心</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/distraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/distraction/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/distraction/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;分心&#34;&gt;分心&lt;/h1&gt;&#xA;&lt;p&gt;2008年5月&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;断开分心说明：本文结尾描述的策略没有奏效。它会工作一段时间，然后我会逐渐发现自己在工作电脑上使用互联网。我现在正在尝试其他策略，但我想这次我会等到确定它们有效之后再写。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;拖延症依赖分心而存在。大多数人发现只是坐着什么都不做很不舒服；你通过做其他事情来避免工作。&lt;/p&gt;&#xA;&lt;p&gt;因此，克服拖延症的一种方法是让它缺少分心。但这并不像听起来那么简单，因为有人努力让你分心。分心不是你避免的静态障碍，就像你可能避免路上的岩石一样。分心会主动找到你。&lt;/p&gt;&#xA;&lt;p&gt;切斯特菲尔德将污垢描述为错位的物质。同样，分心是在错误时间出现的有吸引力的事物。技术不断被改进以产生越来越多有吸引力的事物。这意味着当我们学会避免一类分心时，新的分心会不断出现，就像耐药细菌一样。&lt;/p&gt;&#xA;&lt;p&gt;例如，电视经过50年的改进，已经达到了视觉鸦片的程度。我13岁时就意识到电视会上瘾，所以我停止观看。但我最近读到，美国人平均每天看4小时电视。他们生命的四分之一。&lt;/p&gt;&#xA;&lt;p&gt;现在电视正在衰落，但只是因为人们找到了更令人上瘾的浪费时间方式。特别危险的是，许多发生在你的电脑上。这并非偶然。越来越多的办公室职员坐在连接到互联网的电脑前，而分心总是向拖延者进化。&lt;/p&gt;&#xA;&lt;p&gt;我记得当电脑至少对我来说 exclusively 用于工作时。我偶尔会拨号服务器获取邮件或ftp文件，但大部分时间我都是离线的。我只能做的是写作和编程。现在我感觉好像有人偷偷把电视放到了我的桌子上。非常令人上瘾的东西只需点击一下即可。在工作中遇到障碍？嗯，我想知道网上有什么新鲜事。最好检查一下。&lt;/p&gt;&#xA;&lt;p&gt;在多年仔细避免像电视、游戏和Usenet这样的经典时间消耗者之后，我仍然成为分心的牺牲品，因为我没有意识到它会进化。曾经安全的东西，使用互联网，逐渐变得越来越危险。有些天我醒来，喝杯茶，查看新闻，然后检查邮件，然后再次查看新闻，然后回复几封邮件，然后突然发现快到午饭时间了，我还没有完成任何真正的工作。而且这种情况开始越来越多地发生。&lt;/p&gt;&#xA;&lt;p&gt;我花了很长的时间才意识到互联网变得多么令人分心，因为问题是间歇性的。我忽略了它，就像你让自己忽略一个只间歇性出现的错误一样。当我在项目中间时，分心并不是真正的问题。当我完成一个项目并决定下一步做什么时，它们总是会咬我。&lt;/p&gt;&#xA;&lt;p&gt;很难注意到这种新型分心的危险的另一个原因是社会习俗还没有赶上它。如果我在沙发上坐了一整个上午看电视，我会很快注意到。这是一个已知的危险信号，就像独自喝酒一样。但使用互联网看起来和感觉上仍然很像工作。&lt;/p&gt;&#xA;&lt;p&gt;然而，最终很明显互联网变得如此令人分心，以至于我必须开始以不同的方式对待它。基本上，我必须在我的已知时间消耗者列表中添加一个新应用程序：Firefox。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;这个问题很难解决，因为大多数人仍然需要互联网来做一些事情。如果你喝得太多，你可以通过完全停止来解决这个问题。但你不能通过停止进食来解决暴饮暴食的问题。我不能完全避免互联网，就像我对以前的时间消耗者所做的那样。&lt;/p&gt;&#xA;&lt;p&gt;起初我尝试规则。例如，我告诉自己每天只会使用互联网两次。但这些方案从来没有长期有效。最终会出现一些事情，需要我更多地使用它。然后我会逐渐滑回我的老路。&lt;/p&gt;&#xA;&lt;p&gt;令人上瘾的东西必须被当作有知觉的对手来对待——就好像你脑子里有个小人总是为你想要停止做的事情编造最合理的论据。如果你给它的留一条路，他会找到它。&lt;/p&gt;&#xA;&lt;p&gt;关键似乎是可见性。大多数坏习惯的最大成分是否认。所以你必须确保你不会仅仅滑入你试图避免的事情中。它必须触发警报。&lt;/p&gt;&#xA;&lt;p&gt;也许从长远来看，处理互联网分心的正确答案将是监视和控制它们的软件。但与此同时，我找到了一个更激烈的解决方案，确实有效：设置一台单独的电脑来使用互联网。&lt;/p&gt;&#xA;&lt;p&gt;我现在在主电脑上保持wifi关闭，除非我需要传输文件或编辑网页，我在房间的另一边有一台单独的笔记本电脑，用来检查邮件或浏览网页。（具有讽刺意味的是，这是Steve Huffman编写Reddit的电脑。当Steve和Alexis为了慈善拍卖他们的旧笔记本电脑时，我为Y Combinator博物馆购买了它们。）&lt;/p&gt;&#xA;&lt;p&gt;我的规则是，我可以花尽可能多的时间上网，只要我在那台电脑上做。事实证明这已经足够了。当我必须坐在房间的另一边检查邮件或浏览网页时，我会更加意识到它。至少在我的情况下，足够意识到每天很难花超过大约一小时上网。&lt;/p&gt;&#xA;&lt;p&gt;而我的主电脑现在 freed 用于工作。如果你尝试这个技巧，当你的电脑断开互联网连接时，你可能会对它的不同感觉感到震惊。对我来说，坐在一台只能用于工作的电脑前是多么陌生，这让我警醒，因为它显示了我一定浪费了多少时间。&lt;/p&gt;&#xA;&lt;p&gt;哇。我在这台电脑上能做的只是工作。好吧，那我最好工作。&lt;/p&gt;&#xA;&lt;p&gt;这是好的部分。你旧有的坏习惯现在帮助你工作。你已经习惯了一连几个小时坐在那台电脑前。但现在你不能浏览网页或检查邮件。你打算怎么办？你不能只是坐在那里。所以你开始工作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;好的和坏的拖延&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;相关链接：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_spanish.htm&#34;&gt;西班牙语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_arabic.htm&#34;&gt;阿拉伯语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_catalan.htm&#34;&gt;加泰罗尼亚语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_russian.htm&#34;&gt;俄语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>将程序装在脑中</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/head/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/head/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;将程序装在脑中&#34;&gt;将程序装在脑中&lt;/h1&gt;&#xA;&lt;p&gt;2007年8月&lt;/p&gt;&#xA;&lt;p&gt;一个优秀的程序员密集地工作在他自己的代码上时，可以像数学家把持一个他在解决的问题那样把持它。数学家不像学校教的那样在纸上工作来回答问题。他们在脑子里做得更多：他们试图充分理解问题空间，能够像漫步在你成长房屋的记忆中那样漫步其中。在最佳状态下，编程也是如此。你把整个程序装在脑中，你可以随意操纵它。&lt;/p&gt;&#xA;&lt;p&gt;这在项目开始时特别有价值，因为最初最重要的是能够改变你正在做的事情。不仅仅是以不同的方式解决问题，而是改变你正在解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;你的代码是你对你正在探索的问题的理解。所以只有当你把代码装在脑中时，你才真正理解这个问题。&lt;/p&gt;&#xA;&lt;p&gt;把程序装进脑中并不容易。如果你离开一个项目几个月，当你回到它时，可能需要几天才能真正再次理解它。即使你在积极地处理一个程序，每天开始工作时也需要半小时才能把它装进脑中。这是最好的情况。在典型办公条件下工作的普通程序员永远不会进入这种模式。或者更戏剧性地说，在典型办公条件下工作的普通程序员永远不会真正理解他们正在解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;即使是最优秀的程序员并不总是把他们正在处理的整个程序都装在脑中。但你可以做一些事情来帮助：&lt;/p&gt;&#xA;&lt;h2 id=&#34;避免干扰&#34;&gt;避免干扰。&lt;/h2&gt;&#xA;&lt;p&gt;干扰对许多类型的工作都是有害的，但对编程尤其有害，因为程序员倾向于在他们能处理的细节极限上运作。&lt;/p&gt;&#xA;&lt;p&gt;干扰的危险不在于它持续多久，而在于它使你的大脑混乱的程度。程序员可以离开办公室去吃个三明治而不会失去脑中的代码。但错误的干扰可以在30秒内抹去你的大脑。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，有计划的干扰可能比没有计划的干扰更糟。如果你知道一小时后有个会议，你甚至不会开始处理困难的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;长时间工作&#34;&gt;长时间工作。&lt;/h2&gt;&#xA;&lt;p&gt;因为每次开始处理一个程序都有固定成本，所以在几个长时段中工作比在许多短时段中工作更有效率。当然，总会有一个点，因为你累了而变得愚蠢。这因人而异。我听说过人们连续36小时编程，但我能管理的最多只有18小时左右，而且我在不超过12小时的块中工作效果最好。&lt;/p&gt;&#xA;&lt;p&gt;最佳状态不是你身体能忍受的极限。分解项目既有优势也有成本。有时当你在休息后回到问题时，你会发现你的潜意识留下了答案等着你。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用简洁的语言&#34;&gt;使用简洁的语言。&lt;/h2&gt;&#xA;&lt;p&gt;更强大的编程语言使程序更短。程序员似乎至少部分地用他们用来编写程序的语言来思考程序。语言越简洁，程序越短，就越容易装进脑中并保持在那里。&lt;/p&gt;&#xA;&lt;p&gt;你可以通过使用一种称为自底向上编程的风格来增强强大语言的效果，在这种风格中，你编写多层程序，较低的层作为其上层的编程语言。如果你正确地这样做，你只需要把最顶层装在脑中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;不断重写你的程序&#34;&gt;不断重写你的程序。&lt;/h2&gt;&#xA;&lt;p&gt;重写程序通常会得到更清晰的设计。但即使不会，它也有优势：你必须完全理解一个程序才能重写它，所以没有更好的方法把它装进脑中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;写可重读的代码&#34;&gt;写可重读的代码。&lt;/h2&gt;&#xA;&lt;p&gt;所有程序员都知道写可读代码是好的。但你自己是最重要的读者。特别是在开始时；原型是与自己的对话。当为自己写作时，你有不同的优先事项。如果为别人写作，你可能不想让代码太密集。程序的某些部分可能最容易读，如果你把东西摊开，像一本入门教科书。而如果你写代码是为了让它容易重新装进脑中，最好追求简洁。&lt;/p&gt;&#xA;&lt;h2 id=&#34;小组工作&#34;&gt;小组工作。&lt;/h2&gt;&#xA;&lt;p&gt;当你在脑中操纵一个程序时，你的视野倾向于停在你拥有的代码边缘。其他部分你理解得不够好，更重要的是，不能随意处理。所以程序员数量越少，项目就能越完全地变异。如果只有一个程序员，通常开始时是这样，你可以做全面重新设计。&lt;/p&gt;&#xA;&lt;h2 id=&#34;不要让多个人编辑同一段代码&#34;&gt;不要让多个人编辑同一段代码。&lt;/h2&gt;&#xA;&lt;p&gt;你永远不会像理解自己的代码那样理解别人的代码。无论你多么彻底地读过它，你只是读了它，而不是写了它。所以如果一段代码由多个作者编写，他们中没有人像单个作者那样理解它。&lt;/p&gt;&#xA;&lt;p&gt;当然你不能安全地重新设计别人正在处理的东西。不仅仅是你必须请求许可。你甚至不让自己考虑这样的事情。重新设计有几个作者的代码就像改变法律；重新设计你独自控制的代码就像看到模糊图像的另一种解释。&lt;/p&gt;&#xA;&lt;p&gt;如果你想让几个人在一个项目上工作，把它分成组件，每个给一个人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;从小开始&#34;&gt;从小开始。&lt;/h2&gt;&#xA;&lt;p&gt;随着你对程序越来越熟悉，它变得更容易装在脑中。一旦你确信你已经完全探索了某些部分，你就可以开始把它们当作黑盒处理。但当你开始处理一个项目时，你被迫看到一切。如果你开始的问题太大，你可能永远无法完全把握它。所以如果你需要写一个大的、复杂的程序，开始的最佳方式可能不是为它写规范，而是写一个解决子集问题的原型。无论计划有什么优势，它们往往被能够把程序装在脑中的优势所抵消。&lt;/p&gt;&#xA;&lt;p&gt;程序员们经常偶然做到这八点，这很引人注目。有人有了一个新项目的想法，但因为不是正式批准的，他必须在下班时间做——结果证明更有生产力，因为没有干扰。受到他对新项目的热情驱使，他连续工作许多小时。因为它最初只是一个实验，他使用的是&amp;quot;脚本&amp;quot;语言而不是&amp;quot;生产&amp;quot;语言——实际上它强大得多。他完全重写程序几次；这对正式项目是不合理的，但这是爱的劳动，他想要它完美。而且因为除了他没有人会看到它，他省略了除笔记类型外的任何注释。他被迫在小团队中工作，因为他要么还没有告诉任何人这个想法，要么它看起来如此无望以至于不允许其他人在其上工作。即使有一个团队，他们也不能让多个人编辑同一段代码，因为它变化太快，那是不可能的。项目从小开始是因为想法一开始很小；他只是有一些很酷的黑客技巧想试试。&lt;/p&gt;&#xA;&lt;p&gt;更引人注目的是有多少正式批准的项目设法把这八件事都做错了。事实上，如果你看看大多数组织中软件编写的方式，几乎就像他们在故意做错事情。在某种意义上，他们确实如此。自从有组织以来，其定义性品质之一就是把个人当作可互换的部件。这对更可并行化的任务很有效，比如打仗。在历史上大部分时间里，一支训练有素的专业士兵军队可以指望打败一群个人战士，无论多么勇敢。但拥有想法不是很可并行化的。而程序就是：想法。&lt;/p&gt;&#xA;&lt;p&gt;组织不喜欢依赖个人天才的想法不仅仅是真的，它是同义反复。不这样做是组织定义的一部分。至少是我们当前组织概念的一部分。&lt;/p&gt;&#xA;&lt;p&gt;也许我们可以定义一种新型的组织，结合个人的努力而不要求他们可互换。可以说市场就是这种形式的组织，尽管把市场描述为退化情况可能更准确——当组织不可能时默认得到的情况。&lt;/p&gt;&#xA;&lt;p&gt;可能我们能做到的最好的是某种hack，比如让一个组织的编程部分以不同于其他部分的方式工作。也许最佳解决方案是大公司甚至不尝试内部开发想法，而只是购买它们。但无论解决方案是什么，第一步是意识到存在问题。&amp;ldquo;软件公司&amp;quot;这个短语本身就有矛盾。这两个词在相反的方向上拉扯。任何大型组织中的优秀程序员都会与之冲突，因为组织的设计是为了防止程序员追求的目标。&lt;/p&gt;&#xA;&lt;p&gt;优秀的程序员无论如何都能完成很多事情。但这往往需要对雇佣他们的组织进行实际上反抗的行为。如果更多的人理解程序员的行为方式是由他们工作的需求驱动的，这可能会有所帮助。他们长时间工作，期间推掉所有其他义务，直接投入编程而不是先写规范，重写已经工作的代码，这不是因为他们不负责任。他们更喜欢独自工作，或者对探头说你好的人咆哮，这不是因为他们不友好。这个表面上随机的令人讨厌习惯集合有一个单一的解释：将程序装在脑中的力量。&lt;/p&gt;&#xA;&lt;p&gt;无论理解这一点是否能帮助大型组织，它肯定能帮助他们的竞争对手。大公司的最弱点是他们不让个别程序员做出伟大的工作。所以如果你是一个小创业公司，这是攻击他们的地方。接手那些必须在一个大脑中解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、David Greenspan、Aaron Iba、Jessica Livingston、Robert Morris、Peter Norvig、Lisa Randall、Emmett Shear、Sergei Tsarev和Stephen Wolfram阅读本文的草稿。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
