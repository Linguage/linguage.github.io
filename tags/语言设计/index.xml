<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言设计 on Linguista</title>
    <link>https://linguage.github.io/tags/%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in 语言设计 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于语言设计的五个问题</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/langdes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/langdes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/langdes/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/langdes.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/langdes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/langdes.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;关于语言设计的五个问题&#34;&gt;关于语言设计的五个问题&lt;/h1&gt;&#xA;&lt;p&gt;2001年5月&lt;/p&gt;&#xA;&lt;p&gt;（这些是我在2001年5月10日MIT编程语言设计小组讨论会上所做的笔记。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-编程语言是为人设计的&#34;&gt;1. 编程语言是为人设计的。&lt;/h2&gt;&#xA;&lt;p&gt;编程语言是人们与计算机交流的方式。计算机对于任何无歧义的语言都会同样满意。我们有高级语言的原因是因为人们无法处理机器语言。编程语言的要点是防止我们可怜脆弱的人类大脑被大量细节所淹没。&lt;/p&gt;&#xA;&lt;p&gt;建筑师知道某些设计问题比其他问题更具个人性。最干净、最抽象的设计问题之一是设计桥梁。在那里，你的工作主要是用最少的材料跨越给定的距离。光谱的另一端是设计椅子。椅子设计师必须花时间思考人类的臀部。&lt;/p&gt;&#xA;&lt;p&gt;软件也是如此。设计网络数据路由算法是一个很好的抽象问题，就像设计桥梁。而设计编程语言就像设计椅子：这完全是关于处理人类弱点的问题。&lt;/p&gt;&#xA;&lt;p&gt;我们大多数人都讨厌承认这一点。设计具有数学优雅性的系统对我们大多数人来说比迎合人类弱点听起来更有吸引力。数学优雅确实有作用：某些优雅性使程序更容易理解。但优雅本身不是目的。&lt;/p&gt;&#xA;&lt;p&gt;当我说语言必须设计得适合人类弱点时，我并不是说语言必须为糟糕的程序员设计。事实上我认为你应该为最好的程序员设计，但即使是最好的程序员也有局限性。我认为没有人会喜欢在所有变量都是带整数下标的字母x的语言中编程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-为自己和你的朋友设计&#34;&gt;2. 为自己和你的朋友设计。&lt;/h2&gt;&#xA;&lt;p&gt;如果你看看编程语言的历史，很多最好的语言都是为其作者自己使用的语言设计的，而很多最差的语言是为其他人使用而设计的。&lt;/p&gt;&#xA;&lt;p&gt;当语言为其他人设计时，总是特定的一群其他人：没有语言设计师聪明的人。所以你得到一种居高临下的语言。Cobol是最极端的例子，但很多语言都充斥着这种精神。&lt;/p&gt;&#xA;&lt;p&gt;这与语言的抽象程度无关。C是相当低级的，但它是为其作者使用而设计的，这就是为什么黑客喜欢它。&lt;/p&gt;&#xA;&lt;p&gt;为糟糕的程序员设计语言的论点是糟糕的程序员比好程序员多。可能是这样。但是那些少数好程序员编写了不成比例的大量软件。&lt;/p&gt;&#xA;&lt;p&gt;我对这个问题很感兴趣，你如何设计一种最好的黑客会喜欢的语言？我碰巧认为这与如何设计一种好的编程语言是同一个问题，但即使不是，它至少是一个有趣的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-给程序员尽可能多的控制权&#34;&gt;3. 给程序员尽可能多的控制权。&lt;/h2&gt;&#xA;&lt;p&gt;许多语言（特别是为其他人设计的语言）都有保姆的态度：它们试图阻止你做它们认为对你不好的事情。我喜欢相反的方法：给程序员尽可能多的控制权。&lt;/p&gt;&#xA;&lt;p&gt;当我第一次学习Lisp时，我最喜欢的是它把我当作平等的伙伴。在我之前学习的其他语言中，有语言本身和用该语言写的我的程序，两者非常分离。但在Lisp中，我编写的函数和宏就像构成语言本身的那些一样。如果我想，我可以重写语言。它有着与开源软件相同的吸引力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-追求简洁&#34;&gt;4. 追求简洁。&lt;/h2&gt;&#xA;&lt;p&gt;简洁被低估甚至被鄙视。但如果你深入了解黑客的内心，你会发现他们真的很喜欢它。你有多少次听到黑客深情地谈到，比如说，在APL中，他们只需几行代码就能做出惊人的事情？我认为任何真正聪明的人真正喜欢的东西都值得注意。&lt;/p&gt;&#xA;&lt;p&gt;我认为几乎任何能让程序更短的事情都是好的。应该有很多库函数；任何可以隐含的东西都应该；语法应该简洁到极致；甚至事物的名称都应该简短。&lt;/p&gt;&#xA;&lt;p&gt;不仅程序应该简短。手册也应该薄。手册的很大部分被用于澄清、保留、警告和特殊情况。如果你强迫自己缩短手册，在最好的情况下，你会通过修复语言中需要这么多解释的东西来实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-承认黑客的本质&#34;&gt;5. 承认黑客的本质。&lt;/h2&gt;&#xA;&lt;p&gt;很多人希望黑客是数学，或者至少是类似自然科学的东西。我认为黑客更像是建筑。建筑与物理学有关，因为建筑师必须设计不会倒塌的建筑，但建筑师的真正目标是建造伟大的建筑，而不是做出关于静力学的发现。&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢做的是编写伟大的程序。而且我认为，至少在我们自己的心中，我们必须记住，编写伟大的程序是一件令人钦佩的事情，即使这项工作不容易转化为研究论文的传统智力货币。在智力上，设计程序员会喜欢的语言与设计一个包含你可以发表论文的某些想法的糟糕语言同样有价值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开放性问题&#34;&gt;开放性问题&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-如何组织大型库&#34;&gt;1. 如何组织大型库？&lt;/h3&gt;&#xA;&lt;p&gt;库正在成为编程语言越来越重要的组成部分。它们也在变得更大，这可能很危险。如果找到能做你想要的事情的库函数比你自己编写它需要更长的时间，那么所有这些代码只是在让你的手册变厚。（Symbolics手册就是一个例子。）所以我认为我们必须研究组织库的方法。理想的情况是设计它们，使程序员能够猜测哪个库调用会做正确的事情。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-人们真的害怕前缀语法吗&#34;&gt;2. 人们真的害怕前缀语法吗？&lt;/h3&gt;&#xA;&lt;p&gt;这是一个开放性问题，在这个意义上我多年来一直在思考它，但仍然不知道答案。前缀语法对我来说似乎完全自然，可能除了数学。但Lisp不受欢迎可能只是因为它有陌生的语法。如果这是真的，是否要对此做些什么是另一个问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-基于服务器的软件需要什么&#34;&gt;3. 基于服务器的软件需要什么？&lt;/h3&gt;&#xA;&lt;p&gt;我认为未来二十年内编写的最令人兴奋的新应用程序中，很多将是基于Web的应用程序，意味着程序位于服务器上并通过Web浏览器与你交谈。而编写这类程序我们可能需要一些新东西。&lt;/p&gt;&#xA;&lt;p&gt;我们需要的一件事是支持基于服务器的应用程序发布的新方式。不像桌面软件那样每年有一两个大的发布版本，基于服务器的应用程序作为一系列小变化发布。你一天可能有五到十个发布版本。而且作为规则，每个人都会总是使用最新版本。&lt;/p&gt;&#xA;&lt;p&gt;你知道你可以设计程序以便调试吗？嗯，基于服务器的软件同样必须设计成可改变的。你必须能够轻松地改变它，或者至少知道什么是小的改变，什么是重大的改变。&lt;/p&gt;&#xA;&lt;p&gt;另一个可能对基于服务器的软件有用的东西，令人惊讶的是，是continuations。在基于Web的软件中，你可以使用类似continuation-passing style的东西来在Web会话本质上无状态的世界中获得子程序的效果。如果不太昂贵，拥有实际的continuations可能是值得的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-还有什么新的抽象有待发现&#34;&gt;4. 还有什么新的抽象有待发现？&lt;/h3&gt;&#xA;&lt;p&gt;我不确定这个希望有多合理，但我个人真的很想做的一件事是发现一个新的抽象——某种能像拥有一等函数或递归甚至关键字参数那样产生巨大影响的东西。这可能是一个不可能实现的梦想。这些东西并不经常被发现。但我一直在寻找。&lt;/p&gt;&#xA;&lt;h2 id=&#34;预测&#34;&gt;预测&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-你可以使用任何你想要的语言&#34;&gt;1. 你可以使用任何你想要的语言。&lt;/h3&gt;&#xA;&lt;p&gt;编写应用程序过去意味着编写桌面软件。在桌面软件中，有很大的偏向于使用与操作系统相同的语言编写应用程序。所以十年前，编写软件几乎意味着用C编写软件。最终形成了一个传统：应用程序不能用不寻常的语言编写。而这个传统有很长时间发展，以至于像经理和风险投资家这样的非技术人员也学会了它。&lt;/p&gt;&#xA;&lt;p&gt;基于服务器的软件彻底打破了这一模式。使用基于服务器的软件，你可以使用任何你想要的语言。几乎没有人理解这一点（特别是经理和风险投资家）。一些黑客理解它，这就是为什么我们甚至听到像Perl和Python这样的新的独立语言。我们听到Perl和Python不是因为人们用它们编写Windows应用程序。&lt;/p&gt;&#xA;&lt;p&gt;作为对设计编程语言感兴趣的人，这对我们意味着我们的工作现在可能有真正的受众。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-速度来自分析器&#34;&gt;2. 速度来自分析器。&lt;/h3&gt;&#xA;&lt;p&gt;语言设计师，或者至少语言实现者，喜欢编写生成快速代码的编译器。但我不认为这是使语言对用户来说快速的原因。Knuth很久以前就指出，速度只在几个关键瓶颈中重要。任何尝试过的人都知道你无法猜测这些瓶颈在哪里。分析器是答案。&lt;/p&gt;&#xA;&lt;p&gt;语言设计师在解决错误的问题。用户不需要基准测试运行得快。他们需要的是一种能够显示他们自己程序的哪些部分需要重写的语言。这就是实践中速度的来源。所以也许如果语言实现者把他们本来会花在编译器优化上的一半时间用来编写一个好的分析器，这会是一个净收益。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-你需要一个应用程序来推动语言的设计&#34;&gt;3. 你需要一个应用程序来推动语言的设计。&lt;/h3&gt;&#xA;&lt;p&gt;这可能不是一个绝对的规则，但似乎最好的语言都是与它们被用来编写的某个应用程序一起演化的。C是由需要它进行系统编程的人编写的。Lisp的开发部分是为了进行符号微分，McCarthy如此急于开始，甚至在1960年第一篇关于Lisp的论文中就在编写微分程序。&lt;/p&gt;&#xA;&lt;p&gt;如果你的应用程序解决一些新问题，那就特别好。这将倾向于推动你的语言拥有程序员需要的新特性。我个人对编写一种适合编写基于服务器的应用程序的语言感兴趣。&lt;/p&gt;&#xA;&lt;p&gt;[在小组讨论中，Guy Steele也提出了这一点，并补充建议应用程序不应该包括为你语言编写编译器，除非你的语言碰巧是用于编写编译器的。]&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-语言必须适合编写一次性程序&#34;&gt;4. 语言必须适合编写一次性程序。&lt;/h3&gt;&#xA;&lt;p&gt;你知道什么是一次性程序：你为某些有限任务快速编写的东西。我认为如果你环顾四周，你会发现很多大的、严肃的程序开始时是一次性程序。如果大多数程序开始时是一次性程序，我不会感到惊讶。所以如果你想制造一种适合一般软件编写的好语言，它必须适合编写一次性程序，因为这是大多数软件的幼虫阶段。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何变得流行</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/popular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/popular/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/popular/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/popular.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/popular.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/popular.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;如何变得流行&#34;&gt;如何变得流行&lt;/h1&gt;&#xA;&lt;p&gt;2001年5月&lt;/p&gt;&#xA;&lt;p&gt;（本文是作为一种新语言的商业计划书而写的。因此它缺少（因为想当然）一个好的编程语言最重要的特征：非常强大的抽象能力。）&lt;/p&gt;&#xA;&lt;p&gt;我有一个朋友曾经告诉一位著名的操作系统专家，他想设计一种真正好的编程语言。专家告诉他，这将是浪费时间，编程语言不会因为其优点而变得流行或不流行，所以无论他的语言有多好，都没人会使用。至少，这是他设计的语言所发生的情况。&lt;/p&gt;&#xA;&lt;p&gt;到底是什么让一种语言变得流行？流行的语言是否配得上它们的流行度？试图定义一个好的编程语言是否值得？你会怎么做？&lt;/p&gt;&#xA;&lt;p&gt;我认为这些问题的答案可以通过观察黑客并了解他们想要什么来找到。编程语言是为黑客而设计的，而编程语言作为编程语言（而不是，比如说，作为指称语义练习或编译器设计练习）是好的，当且仅当黑客喜欢它。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-流行的机制&#34;&gt;1 流行的机制&lt;/h2&gt;&#xA;&lt;p&gt;当然，大多数人在选择编程语言时并不仅仅基于它们的优点。大多数程序员被告知要使用什么语言。然而我认为这些外部因素对编程语言流行度的影响并不像人们有时认为的那么大。我认为更大的问题是黑客对好的编程语言的想法与大多数语言设计者的想法不同。&lt;/p&gt;&#xA;&lt;p&gt;在这两者之间，黑客的意见才是重要的。编程语言不是定理。它们是工具，为人们设计的，必须像鞋子必须为人类的脚设计一样，适合人类的优点和缺点。如果鞋子穿上时夹脚，那它就是一双坏鞋，无论它作为雕塑品多么优雅。&lt;/p&gt;&#xA;&lt;p&gt;可能是大多数程序员无法区分好语言和坏语言。但这与其他工具没有什么不同。这并不意味着尝试设计好语言是浪费时间。专家黑客在看到好语言时能够识别出来，他们会使用它。诚然，专家黑客是极少数，但这个极少数群体编写了所有好的软件，他们的影响力使得其他程序员倾向于使用他们使用的任何语言。通常，这不仅仅是影响，而是命令：专家黑客通常就是那些作为老板或导师告诉其他程序员使用什么语言的人。&lt;/p&gt;&#xA;&lt;p&gt;专家黑客的意见并不是决定编程语言相对流行度的唯一力量——遗留软件（Cobol）和炒作（Ada、Java）也起作用——但我认为它是长期内最强大的力量。考虑到初始的关键质量和足够的时间，编程语言可能会变得与其应得的流行度相当。而流行度进一步将好语言与坏语言分开，因为来自真实用户的反馈总是导致改进。看看任何流行语言在其生命周期中发生了多大变化。Perl和Fortran是极端的例子，但即使是Lisp也发生了很大变化。例如，Lisp 1.5没有宏；这些是后来发展的，在麻省理工学院的黑客花了几年时间使用Lisp编写真实程序之后。[1]&lt;/p&gt;&#xA;&lt;p&gt;所以无论一种语言是否必须好才能流行，我认为一种语言必须流行才能好。它必须保持流行才能保持好。编程语言的工艺水平不会停滞不前。然而我们今天拥有的Lisp几乎与麻省理工学院在1980年代中期的Lisp相同，因为那是Lisp最后一次拥有足够大和要求高的用户群的时候。&lt;/p&gt;&#xA;&lt;p&gt;当然，黑客在使用语言之前必须了解它。他们如何听到？从其他黑客那里。但必须有一些初始的黑客群体使用该语言，其他人才能听到。我想知道这个群体必须多大；多少用户构成关键质量？我随口一说，二十个。如果一种语言有二十个独立的用户，意味着二十个用户自己决定使用它，我会认为它是真实的。&lt;/p&gt;&#xA;&lt;p&gt;达到那里并不容易。如果从零到二十比从二十到一千更难，我不会感到惊讶。获得那初始二十个用户的最好方法可能是使用特洛伊木马：给人们一个他们想要的应用程序，而这个应用程序恰好是用新语言编写的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-外部因素&#34;&gt;2 外部因素&lt;/h2&gt;&#xA;&lt;p&gt;让我们首先承认一个确实影响编程语言流行度的外部因素。要变得流行，编程语言必须是流行系统的脚本语言。Fortran和Cobol是早期IBM大型机的脚本语言。C是Unix的脚本语言，后来Perl也是。Tcl是Tk的脚本语言。Java和Javascript旨在成为Web浏览器的脚本语言。&lt;/p&gt;&#xA;&lt;p&gt;Lisp不是一个大规模流行的语言，因为它不是大规模流行系统的脚本语言。它保留的流行度可以追溯到1960年代和1970年代，当时它是麻省理工学院的脚本语言。当时的许多伟大程序员都在某个时期与麻省理工学院有关联。在1970年代初期，在C之前，麻省理工学院的Lisp方言MacLisp是严肃黑客想要使用的唯一编程语言之一。&lt;/p&gt;&#xA;&lt;p&gt;今天，Lisp是两个适度流行系统的脚本语言，Emacs和Autocad，因此我怀疑今天大部分Lisp编程都是在Emacs Lisp或AutoLisp中完成的。&lt;/p&gt;&#xA;&lt;p&gt;编程语言不是孤立存在的。Hack是一个及物动词——黑客通常在hack某物——在实践中，语言是相对于它们用来hack的任何东西来评判的。所以如果你想设计一种流行的语言，你要么必须提供比语言更多的东西，要么你必须设计你的语言来取代某个现有系统的脚本语言。&lt;/p&gt;&#xA;&lt;p&gt;Common Lisp不受欢迎的部分原因是因为它是一个孤儿。它确实伴随着一个要hack的系统：Lisp Machine。但Lisp Machines（以及并行计算机）在1980年代被通用处理器日益增长的力量压垮了。如果Common Lisp是Unix的好脚本语言，它可能会保持流行。唉，它是一个非常糟糕的脚本语言。&lt;/p&gt;&#xA;&lt;p&gt;描述这种情况的一种方法是说语言不是根据其自身的优点来评判的。另一种观点是，编程语言除非也是某物的脚本语言，否则就不是真正的编程语言。如果这让人感到意外，这似乎不公平。我认为这并不比期望编程语言有实现更不公平。这只是编程语言的一部分。&lt;/p&gt;&#xA;&lt;p&gt;当然，编程语言需要好的实现，而且这必须是免费的。公司会为软件付费，但个人黑客不会，而你需要吸引的是黑客。&lt;/p&gt;&#xA;&lt;p&gt;语言也需要有一本关于它的书。这本书应该是薄的、写得好的，充满了好的例子。K&amp;amp;R是这里的理想。目前我几乎会说一种语言必须有一本O&amp;rsquo;Reilly出版的书。这正成为对黑客重要性的测试。&lt;/p&gt;&#xA;&lt;p&gt;也应该有在线文档。事实上，书可以作为在线文档开始。但我不认为物理书已经过时了。它们的格式方便，出版商施加的事实审查是一种有用的、虽然不完美的过滤器。书店是学习新语言的最重要地方之一。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-简洁&#34;&gt;3 简洁&lt;/h2&gt;&#xA;&lt;p&gt;假设你能提供任何语言需要的三个东西——一个免费的实现、一本书、以及要hack的东西——你如何制造一种黑客会喜欢的语言？&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢的一件事是简洁。黑客是懒惰的，与数学家和现代主义建筑师是懒惰的方式相同：他们讨厌任何多余的东西。说一个即将编写程序的黑客基于他必须键入的字符总数来选择使用什么语言，至少是潜意识的，这离真相不远。如果这不是黑客思考的精确方式，语言设计者最好表现得好像是这样。&lt;/p&gt;&#xA;&lt;p&gt;试图用冗长的表达来宠用户，这些表达旨在类似英语，是错误的。Cobol因此缺陷而臭名昭著。黑客会认为被要求写&lt;/p&gt;&#xA;&lt;p&gt;add x to y giving z&lt;/p&gt;&#xA;&lt;p&gt;而不是&lt;/p&gt;&#xA;&lt;p&gt;z = x+y&lt;/p&gt;&#xA;&lt;p&gt;是介于对他智力的侮辱和对上帝的罪之间。&lt;/p&gt;&#xA;&lt;p&gt;有时有人说Lisp应该使用first和rest而不是car和cdr，因为这将使程序更容易阅读。可能是最初的几个小时。但黑客可以很快学会car意味着列表的第一个元素，cdr意味着其余的。使用first和rest意味着多50%的输入。而且它们的长度也不同，这意味着参数在调用时不会对齐，而car和cdr经常在连续行中这样使用。我发现代码在页面上的对齐方式非常重要。当Lisp代码以可变宽度字体设置时，我几乎无法阅读，朋友们说这对其他语言也是如此。&lt;/p&gt;&#xA;&lt;p&gt;简洁是强类型语言失败的一个地方。在所有其他条件相同的情况下，没有人想以一堆声明开始程序。任何可以隐含的东西，都应该是。&lt;/p&gt;&#xA;&lt;p&gt;单个标记也应该简短。Perl和Common Lisp在这个问题上占据相反的极端。Perl程序几乎可以神秘地密集，而内置Common Lisp操作符的名称则可笑地长。Common Lisp的设计者可能期望用户有文本编辑器为他们键入这些长名称。但长名称的成本不仅仅是键入它的成本。还有阅读它的成本，以及它在屏幕上占用空间的成本。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-可hack性&#34;&gt;4 可Hack性&lt;/h2&gt;&#xA;&lt;p&gt;对黑客来说，有一件事比简洁更重要：能够做你想做的事。在编程语言的历史中，令人惊讶的是，大量的努力都用于防止程序员做被认为不合适的事情。这是一个危险傲慢的计划。语言设计师如何知道程序员将要需要做什么？我认为语言设计师最好将他们的目标用户视为天才，他们将需要做设计师从未预料到的事情，而不是需要保护自己免受自己的伤害的笨蛋。笨蛋无论如何都会伤到自己的脚。你可能阻止他引用另一个包中的变量，但你无法阻止他编写一个设计不良的程序来解决错误的问题，并且永远花时间做这件事。&lt;/p&gt;&#xA;&lt;p&gt;好的程序员经常想做危险和不雅的事情。我所说的不雅是指超越语言试图呈现的任何语义门面的东西：例如，获取某些高级抽象的内部表示。黑客喜欢hack，而hack意味着进入事物内部并重新猜测原始设计师。&lt;/p&gt;&#xA;&lt;p&gt;让自己被重新猜测。当你制造任何工具时，人们以你未曾打算的方式使用它，这对于高度复杂的工具如编程语言尤其如此。许多黑客想要以你从未想象过的方式调整你的语义模型。我说，让他们吧；在不危害运行时系统如垃圾收集器的情况下，给予程序员尽可能多的内部东西访问权限。&lt;/p&gt;&#xA;&lt;p&gt;在Common Lisp中，我经常想要迭代结构的字段——例如，梳理对已删除对象的引用，或找到未初始化的字段。我知道结构在底层只是向量。然而我无法编写一个可以在任何结构上调用的通用函数。我只能通过名称访问字段，因为这就是结构应该意味着的意思。&lt;/p&gt;&#xA;&lt;p&gt;黑客可能只想在一个大程序中一两次颠覆事物的预期模型。但能够这样做会产生多大的不同。这可能不仅仅是解决问题的问题。这里也有一种乐趣。黑客分享外科医生秘密的探索内脏的乐趣，青少年秘密的挤痘痘的乐趣。[2] 至少对于男孩来说，某些类型的恐怖是迷人的。Maxim杂志每年出版一卷照片，包含美女写真和可怕事故的混合。他们了解他们的观众。&lt;/p&gt;&#xA;&lt;p&gt;从历史上看，Lisp在让黑客为所欲为方面一直很好。Common Lisp的政治正确性是一种异常。早期的Lisp让你可以接触到一切。幸运的是，这种精神的大部分在宏中得以保留。能够对源代码进行任意转换，这是一件多么美妙的事情。&lt;/p&gt;&#xA;&lt;p&gt;经典的宏是真正的黑客工具——简单、强大和危险。理解它们的作用是如此简单：你调用一个函数在宏的参数上，无论它返回什么都被插入到宏调用的地方。卫生宏体现了相反的原则。它们试图保护你理解它们在做什么。我从未听过卫生宏用一句话解释过。它们是决定程序员被允许想要什么危险的经典例子。卫生宏旨在保护我免受变量捕获等问题的影响，但变量捕获正是在某些宏中我想要的东西。&lt;/p&gt;&#xA;&lt;p&gt;真正好的语言应该是既干净又肮脏的：干净地设计，具有少量良好理解和高度正交的操作符核心，但肮脏在它让黑客为所欲为的意义上。C就是这样。早期的Lisp也是。真正的黑客语言总是有一种稍微放荡不羁的特征。&lt;/p&gt;</description>
    </item>
    <item>
      <title>百年编程语言</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/hundred/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/hundred/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/hundred/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/hundred.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/hundred.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/hundred.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;百年编程语言&#34;&gt;百年编程语言&lt;/h1&gt;&#xA;&lt;p&gt;2003年4月&lt;/p&gt;&#xA;&lt;p&gt;（本文源于在PyCon 2003的主题演讲。）&lt;/p&gt;&#xA;&lt;p&gt;很难预测一百年后的生活会是什么样子。我们只能确定几件事。我们知道每个人都会驾驶飞行汽车，区划法律将会放宽以允许建造数百层高的建筑，大部分时间都会是黑暗的，女性都会接受武术训练。在这里，我想聚焦于这个图景中的一个细节。他们会用什么样的编程语言来编写控制那些飞行汽车的软件？&lt;/p&gt;&#xA;&lt;p&gt;思考这个问题之所以有价值，并不是因为我们真的能用到这些语言，而是因为，如果我们幸运的话，我们会使用从现在到那个时间点的路径上的语言。&lt;/p&gt;&#xA;&lt;p&gt;我认为，像物种一样，语言会形成进化树，到处都有死胡同分支。我们已经看到这种情况正在发生。Cobol尽管曾经流行，但似乎没有任何知识后代。它是一个进化死胡同——尼安德特人式的语言。&lt;/p&gt;&#xA;&lt;p&gt;我预测Java也会有类似的命运。人们有时给我写信说，&amp;ldquo;你怎么能说Java不会成为一种成功的语言？它已经是成功的语言了。&amp;ldquo;我承认它是，如果你用关于它的书籍所占用的书架空间（特别是关于它的单本书籍），或者相信必须学习它才能找到工作的本科生数量来衡量成功的话。当我说Java不会成为成功的语言时，我的意思更具体：Java将是一个进化死胡同，就像Cobol一样。&lt;/p&gt;&#xA;&lt;p&gt;这只是一个猜测。我可能是错的。我在这里的重点不是批评Java，而是提出进化树的问题，让人们思考，语言X在树的哪个位置？问这个问题的原因不仅仅是为了让我们的鬼魂在一百年后说我告诉过你这样。这是因为靠近主要分支是寻找现在适合编程的语言的有用启发式方法。&lt;/p&gt;&#xA;&lt;p&gt;在任何给定的时间，你可能最幸福地处于进化树的主要分支上。即使仍然有很多尼安德特人，成为其中的一员也一定很糟糕。克罗马农人会不断过来殴打你并偷走你的食物。&lt;/p&gt;&#xA;&lt;p&gt;我想知道一百年后语言会是什么样子，这样我就知道现在应该赌树的哪个分支。&lt;/p&gt;&#xA;&lt;p&gt;语言的进化与物种的进化不同，因为分支可以融合。例如，Fortran分支似乎正在与Algol的后代融合。理论上这对物种也是可能的，但不太可能发生在比细胞更大的生物上。&lt;/p&gt;&#xA;&lt;p&gt;语言更有可能融合，部分是因为可能性空间较小，部分是因为突变不是随机的。语言设计师有意地融合其他语言的思想。&lt;/p&gt;&#xA;&lt;p&gt;对于语言设计师来说，思考编程语言的进化可能导致的方向特别有用，因为他们可以相应地引导。在这种情况下，&amp;ldquo;停留在主分支上&amp;quot;不仅仅是选择好语言的方法。它成为做出正确语言设计决策的启发式方法。&lt;/p&gt;&#xA;&lt;p&gt;任何编程语言都可以分为两部分：一组扮演公理角色的基本运算符，以及语言的其余部分，原则上可以用这些基本运算符来编写。&lt;/p&gt;&#xA;&lt;p&gt;我认为基本运算符是语言长期生存的最重要因素。其余的你可以改变。这就像买房子的规则，你首先应该考虑位置。其他的一切你都可以稍后修复，但你不能修复位置。&lt;/p&gt;&#xA;&lt;p&gt;我认为不仅公理要选择得好，而且数量要少。数学家一直对公理有这样的感觉——越少越好——我认为他们抓住了要点。&lt;/p&gt;&#xA;&lt;p&gt;至少，仔细审视语言的核心，看看是否有任何可以剔除的公理，这必须是一个有用的练习。我在我作为一个邋遢人的漫长职业生涯中发现，冗余会产生冗余，我看到这种情况不仅发生在软件中，也发生在床下和房间角落。&lt;/p&gt;&#xA;&lt;p&gt;我有一种预感，进化树的主要分支通过那些具有最小、最干净核心的语言。你能在语言本身中编写的语言部分越多越好。&lt;/p&gt;&#xA;&lt;p&gt;当然，即使问一百年后编程语言会是什么样子，我也做出了一个很大的假设。一百年后我们还会编写程序吗？我们不会只是告诉计算机我们想要它们做什么吗？&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，那个部门没有太多进展。我猜测一百年后人们仍会使用我们能识别的程序来告诉计算机做什么。可能有些我们现在通过编写程序来解决的问题，一百年后你不必编写程序来解决，但我认为仍会有大量我们今天所做的那种编程。&lt;/p&gt;&#xA;&lt;p&gt;认为任何人都能预测任何技术在一百年后会是什么样子可能显得 presumptuous。但请记住，我们背后已经有将近五十年的历史。当我们考虑到语言在过去五十年中进化得多么缓慢时，展望一百年是一个可以把握的想法。&lt;/p&gt;&#xA;&lt;p&gt;语言进化缓慢是因为它们并不是真正的技术。语言是符号。程序是你希望计算机为你解决问题的形式化描述。所以编程语言的进化速度更像数学符号的进化速度，而不是交通或通信的进化速度。数学符号确实在进化，但没有你在技术中看到的巨大飞跃。&lt;/p&gt;&#xA;&lt;p&gt;无论一百年后计算机由什么制成，似乎可以安全地预测它们会比现在快得多。如果摩尔定律继续发挥作用，它们将快74 quintillion（73,786,976,294,838,206,464）倍。这很难想象。事实上，速度部门最可能的预测可能是摩尔定律将停止工作。任何应该每十八个月翻一番的东西似乎最终都会遇到某种基本限制。但我毫不怀疑计算机会快得多。即使它们最终只快一百倍，这也应该大大改变编程语言的基本规则。除此之外，还会有更多空间给现在被认为是慢的语言，即那些不能产生非常高效代码的语言。&lt;/p&gt;&#xA;&lt;p&gt;然而，有些应用仍然需要速度。我们想用计算机解决的有些问题是计算机创造的；例如，你必须处理视频图像的速度取决于另一台计算机生成它们的速度。还有另一类问题本身就具有无限吸收计算周期的能力：图像渲染、密码学、模拟。&lt;/p&gt;&#xA;&lt;p&gt;如果一些应用可以变得越来越低效，而其他应用继续要求硬件能够提供的所有速度，更快的计算机将意味着语言必须覆盖更广泛的效率范围。我们已经看到这种情况正在发生。按照过去几十年的标准，一些流行新语言的当前实现惊人地浪费。&lt;/p&gt;&#xA;&lt;p&gt;这不仅仅是编程语言发生的事情。这是一个普遍的历史趋势。随着技术的改进，每一代人都能做前一代人认为是浪费的事情。三十年前的人会对我们如此随意地打长途电话感到惊讶。一百年前的人会更惊讶有一天一个包裹会通过孟菲斯从波士顿旅行到纽约。&lt;/p&gt;&#xA;&lt;p&gt;我已经可以告诉你未来一百年更快的硬件将给我们的所有额外周期会发生什么。它们几乎都会被浪费掉。&lt;/p&gt;&#xA;&lt;p&gt;我学习编程时计算机能力很稀缺。我记得取出我Basic程序中的所有空格，使它们能适合4K TRS-80的内存。想到所有这些惊人低效的软件一遍又一遍地烧掉周期做同样的事情，我觉得有点恶心。但我认为我的直觉在这里是错的。我就像一个长大的穷人，即使是为了重要的事情也不能忍受花钱，比如去看医生。&lt;/p&gt;&#xA;&lt;p&gt;有些浪费确实是令人厌恶的。例如，SUVs即使运行在永远不会耗尽且不产生污染的燃料上，也可能是令人厌恶的。SUVs之所以令人厌恶，是因为它们是一个令人厌恶的问题的解决方案。（如何使小型货车看起来更阳刚。）但并非所有浪费都是坏的。现在我们有了支持它的基础设施，计算你的长途通话分钟数开始显得吝啬。如果你有资源，更优雅的思考方式是把所有电话通话视为一类事情，无论对方在哪里。&lt;/p&gt;&#xA;&lt;p&gt;有好浪费，也有坏浪费。我对好浪费感兴趣——那种通过花费更多，我们可以获得更简单设计的浪费。我们将如何利用新、更快的硬件给我们带来的浪费周期的机会？&lt;/p&gt;&#xA;&lt;p&gt;对速度的渴望在我们这些拥有可怜计算机的人心中根深蒂固，以至于需要 conscious 努力来克服它。在语言设计中，我们应该有意识地寻找可以用效率换取哪怕是最小的便利增加的情况。&lt;/p&gt;&#xA;&lt;p&gt;大多数数据结构的存在是因为速度。例如，今天的许多语言既有字符串也有列表。在语义上，字符串或多或少是列表的一个子集，其中元素是字符。那么为什么你需要单独的数据类型呢？你真的不需要。字符串的存在仅仅是为了效率。但是用使程序运行得更快的hack来使语言的语义变得混乱是很蹩脚的。在语言中拥有字符串似乎是一个过早优化的例子。&lt;/p&gt;&#xA;&lt;p&gt;如果我们将语言的核心视为一组公理，那么仅仅为了效率而增加不增加表达能力的额外公理肯定是令人厌恶的。效率很重要，但我认为这不是获得它的正确方法。&lt;/p&gt;&#xA;&lt;p&gt;我认为解决这个问题的正确方法是将程序的含义与实现细节分开。不要同时拥有列表和字符串，只拥有列表，同时有某种方式给编译器优化建议，使其能够在必要时将字符串布置为连续的字节。&lt;/p&gt;&#xA;&lt;p&gt;由于速度在程序的大部分中都不重要，你通常不需要费心处理这种微观管理。随着计算机变得越来越快，这一点会越来越真实。&lt;/p&gt;&#xA;&lt;p&gt;少说实现细节也应该使程序更灵活。规范在程序编写过程中会改变，这不仅是不可避免的，而且是可取的。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;essay&amp;quot;这个词来自法语动词&amp;quot;essayer&amp;rdquo;，意思是&amp;quot;尝试&amp;rdquo;。essay在原始意义上是你写来试图弄清楚某些东西的东西。这在软件中也会发生。我认为一些最好的程序是essay，从这个意义上说，作者们在开始时并不知道他们确切地想要写什么。&lt;/p&gt;&#xA;&lt;p&gt;Lisp黑客们已经知道灵活使用数据结构的价值。我们倾向于编写程序的第一版本，使其用列表做所有事情。这些初始版本可能如此惊人地低效，以至于需要conscious努力不去思考它们在做什么，就像，至少对我而言，吃牛排需要conscious努力不去思考它来自哪里。&lt;/p&gt;&#xA;&lt;p&gt;一百年后的程序员最寻找的，最重要的是一种语言，你可以用最少的努力组合成一个令人难以置信的低效版本1程序。至少，这是我们现在会描述的方式。他们会说他们想要一种易于编程的语言。&lt;/p&gt;&#xA;&lt;p&gt;低效的软件并不令人厌恶。令人厌恶的是让程序员做不必要工作的语言。浪费程序员时间是真正的低效，而不是浪费机器时间。随着计算机变得越来越快，这一点会变得越来越清晰。&lt;/p&gt;&#xA;&lt;p&gt;我认为摆脱字符串已经是我们可以忍受思考的事情了。我们在Arc中这样做了，这似乎是一个胜利；一些用正则表达式描述会很尴尬的操作可以很容易地描述为递归函数。&lt;/p&gt;&#xA;&lt;p&gt;这种数据结构扁平化会走多远？我能想到甚至让我这个思想开明的人感到震惊的可能性。例如，我们会摆脱数组吗？毕竟，它们只是哈希表的一个子集，其中键是整数向量。我们会用列表替换哈希表本身吗？&lt;/p&gt;&#xA;&lt;p&gt;还有比这更令人震惊的前景。例如，McCarthy在1960年描述的Lisp没有数字。从逻辑上讲，你不需要有一个单独的数字概念，因为你可以用列表来表示它们：整数n可以表示为n个元素的列表。你可以用这种方式做数学。这只是令人难以忍受的低效。&lt;/p&gt;&#xA;&lt;p&gt;实际上没有人提议在实践中用列表实现数字。事实上，McCarthy的1960年论文在当时根本不打算实现。这是一个理论练习，试图创建一个更优雅的图灵机替代方案。当有人意外地拿走这篇论文并将其翻译成工作的Lisp解释器时，数字肯定不是用列表表示的；它们像所有其他语言一样用二进制表示。&lt;/p&gt;&#xA;&lt;p&gt;编程语言能否走得那么远，以至于摆脱数字作为基本数据类型？我问这个与其说是作为一个严肃的问题，不如说是作为一种与未来玩胆小鬼游戏的方式。这就像不可抗拒的力量遇到不可移动的物体的假设情况——这里，一个令人难以想象的低效实现遇到令人难以想象的巨大资源。我看不出为什么不。未来是相当长的。如果我们能做些什么来减少核心语言中公理的数量，那么随着t趋向无穷大，这似乎是值得押注的一方。如果这个想法在一百年后似乎仍然难以忍受，也许在一千年后不会。&lt;/p&gt;&#xA;&lt;p&gt;为了明确这一点，我并不是建议所有数值计算实际上都会使用列表进行。我建议核心语言，在关于实现的任何额外符号之前，应该这样定义。在实践中，任何想做任何数量数学的程序可能会用二进制表示数字，但这将是一种优化，而不是核心语言语义的一部分。&lt;/p&gt;&#xA;&lt;p&gt;燃烧周期的另一种方法是在应用程序和硬件之间拥有多层软件。这也是我们已经看到正在发生的趋势：许多最近的语言被编译成字节码。Bill Woods曾经告诉我，根据经验法则，每层解释成本在速度上要付出10倍的代价。这种额外的代价给你带来灵活性。&lt;/p&gt;&#xA;&lt;p&gt;Arc的第一个版本就是这种多层次缓慢的极端情况，相应的好处。它是一个经典的&amp;quot;元循环&amp;quot;解释器，在Common Lisp之上编写，与McCarthy原始Lisp论文中定义的eval函数有明显的家族相似性。整个事情只有几百行代码，所以非常容易理解和改变。我们使用的Common Lisp，CLisp，本身在字节码解释器之上运行。所以我们有两层解释，其中一层（顶层）惊人地低效，而语言是可用的。我承认勉强可用，但是可用的。&lt;/p&gt;&#xA;&lt;p&gt;即使在应用程序内部，将软件编写为多层也是一种强大的技术。自底向上编程意味着将程序编写为一系列层，每一层都作为其上一层的语言。这种方法往往产生更小、更灵活的程序。它也是通往圣杯可重用性的最佳途径。语言按定义是可重用的。你能将应用程序的更多部分推入用于编写这类应用程序的语言中，你的软件就会有更多部分是可重用的。&lt;/p&gt;&#xA;&lt;p&gt;不知何故，可重用性的想法在20世纪80年代与面向对象编程联系在一起，似乎没有任何相反的证据能够动摇它。但是虽然一些面向对象的软件是可重用的，使其可重用的是其自底向上性，而不是其面向对象性。考虑库：它们是可重用的因为它们是语言，无论它们是否以面向对象风格编写。&lt;/p&gt;&#xA;&lt;p&gt;顺便说一下，我不预测面向对象编程的消亡。虽然我认为它对好的程序员没有太多提供，除了在某些特定领域，它对大组织来说是不可抗拒的。面向对象编程提供了一种可持续的方式来编写意大利面条式代码。它让你能够将程序累积为一系列补丁。大组织总是倾向于以这种方式开发软件，我期望一百年后也会如此。既然我们在谈论未来，我们最好谈谈并行计算，因为这是这个想法似乎存在的地方。也就是说，无论你什么时候谈论，并行计算似乎都是未来要发生的事情。&lt;/p&gt;&#xA;&lt;p&gt;未来会赶上它吗？人们谈论并行计算作为即将发生的事情至少有20年了，到目前为止它还没有太多影响编程实践。或者说有吗？芯片设计师现在必须考虑它，试图在多cpu计算机上编写系统软件的人也必须考虑。&lt;/p&gt;&#xA;&lt;p&gt;真正的问题是，抽象的阶梯上并行会走多远？一百年后它甚至会影响应用程序员吗？或者它会是编译器作者思考的事情，但在应用程序源代码中通常是不可见的？&lt;/p&gt;&#xA;&lt;p&gt;似乎很可能的一件事是，大多数并行机会被浪费。这是我对我们得到的大部分额外计算机能力将被浪费的更一般预测的一个特例。我期望，就像底层硬件的惊人速度一样，并行将是如果你明确要求它就可以使用的东西，但通常不被使用。这意味着我们一百年后拥有的那种并行不会，除非在特殊应用中，是大规模并行。我期望对于普通程序员来说，它更像是能够分叉出最终并行运行的进程。&lt;/p&gt;&#xA;&lt;p&gt;这将像要求数据结构的特定实现一样，是你对程序进行优化时相当晚才做的事情。版本1通常会忽略从并行计算中获得的任何优势，就像它们会忽略从数据的特定表示中获得的任何优势一样。&lt;/p&gt;&#xA;&lt;p&gt;除了特殊类型的应用程序，并行不会渗透到一百年后编写的程序中。如果确实如此，那将是过早优化。&lt;/p&gt;&#xA;&lt;p&gt;一百年后会有多少种编程语言？最近似乎有大量的新编程语言。部分原因是更快的硬件使程序员能够在速度和便利性之间做出不同的权衡，取决于应用。如果这是一个真正的趋势，我们一百年后拥有的硬件只会增加它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>简洁即力量</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/power/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/power/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/power/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/power.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/power.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/power.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;简洁即力量&#34;&gt;简洁即力量&lt;/h1&gt;&#xA;&lt;p&gt;2002年5月&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;通过代数符号将大量意义压缩到一个小空间中，这是另一个有助于我们习惯性推理的因素。&amp;rdquo; - 查尔斯·巴贝奇，引自艾弗森的图灵奖演讲&lt;/p&gt;&#xA;&lt;p&gt;在LL1邮件列表上关于《书呆子的复仇》所提出问题的讨论中，保罗·普雷斯科德写了一些让我印象深刻的话。Python的目标是规范性和可读性，而不是简洁性。表面上看来，这对编程语言来说似乎是一个相当不利的评价。据我所知，简洁性=力量。如果是这样，那么替换后我们得到Python的目标是规范性和可读性，而不是力量。这似乎不是一个你想要做出的权衡（如果这确实是一个权衡的话）。这几乎等同于说Python的目标不是作为一种有效的编程语言。&lt;/p&gt;&#xA;&lt;p&gt;简洁性等于力量吗？在我看来，这是一个重要的问题，可能是对任何对语言设计感兴趣的人来说最重要的问题，直接面对这个问题会很有用。我还不确定答案是否是简单的&amp;quot;是&amp;quot;，但这似乎是一个很好的开始假设。&lt;/p&gt;&#xA;&lt;h2 id=&#34;假设&#34;&gt;假设&lt;/h2&gt;&#xA;&lt;p&gt;我的假设是简洁性就是力量，或者足够接近，除了在病态的例子中，你可以将它们视为相同。&lt;/p&gt;&#xA;&lt;p&gt;在我看来，简洁性就是编程语言的意义所在。计算机对于直接用机器语言被告知要做什么同样满意。我认为我们开发高级语言的主要原因是获得杠杆作用，这样我们就可以用高级语言的10行代码来表达（更重要的是思考）需要1000行机器语言才能完成的事情。换句话说，高级语言的主要目的是使源代码更小。&lt;/p&gt;&#xA;&lt;p&gt;如果更小的源代码是高级语言的目的，而某种东西的力量是它实现其目的的程度，那么编程语言力量的衡量标准就是它使你的程序变得多小。&lt;/p&gt;&#xA;&lt;p&gt;相反，不能使你的程序更小的语言在编程语言应该做的事情上做得不好，就像一把不好切的刀或难以辨认的印刷品。&lt;/p&gt;&#xA;&lt;h2 id=&#34;衡量标准&#34;&gt;衡量标准&lt;/h2&gt;&#xA;&lt;p&gt;但是从什么意义上来说更小呢？代码大小最常见的衡量标准是代码行数。但我认为这个衡量标准最常见是因为它最容易测量。我不认为有人真正相信它是程序长度的真正测试。不同的语言对于在一行中放多少内容有不同的约定；在C语言中，很多行只有一个或两个分隔符。&lt;/p&gt;&#xA;&lt;p&gt;另一个简单的测试是程序中的字符数，但这也不是很好；一些语言（例如Perl）只是使用比其他语言更短的标识符。&lt;/p&gt;&#xA;&lt;p&gt;我认为程序大小的更好衡量标准是元素的数量，其中元素是如果你画一个表示源代码的树，会成为不同节点的任何东西。变量或函数的名称是一个元素；整数或浮点数是一个元素；一段字面文本是一个元素；模式元素或格式指令是一个元素；新块是一个元素。有一些边界情况（-5是两个元素还是一个？）但我认为大多数情况对每种语言都是相同的，所以它们不会对比较产生太大影响。&lt;/p&gt;&#xA;&lt;p&gt;这个衡量标准需要充实，在特定语言的情况下可能需要解释，但我认为它试图衡量正确的东西，即程序拥有的部分数量。我认为在这个练习中你会画的树就是你为了构思程序而必须在头脑中构建的东西，它的大小与你必须做的工作量成正比，无论是写还是读。&lt;/p&gt;&#xA;&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;&#xA;&lt;p&gt;这种衡量标准可以让我们比较不同的语言，但至少对我而言，这不是它的主要价值。简洁性测试的主要价值是作为设计语言的指导。语言之间最有用的比较是同一种语言的两个潜在变体之间的比较。我能在语言中做什么来使程序更短？&lt;/p&gt;&#xA;&lt;p&gt;如果程序的概念负荷与其复杂性成正比，而给定的程序员可以容忍固定的概念负荷，那么这与问&amp;quot;我能做什么来让程序员完成最多工作？&amp;ldquo;是相同的。这在我看来与问&amp;quot;我如何设计一种好的语言？&amp;ldquo;是相同的。&lt;/p&gt;&#xA;&lt;p&gt;（顺便说一句，没有什么比设计语言更能明显地证明&amp;quot;所有语言都是等价的&amp;quot;这个老生常谈是错误的了。当你设计一种新语言时，你不断地比较两种语言——如果我做了x的语言，如果我没做x的语言——来决定哪个更好。如果这真是一个无意义的问题，你不妨抛硬币。）&lt;/p&gt;&#xA;&lt;p&gt;以简洁性为目标似乎是寻找新想法的好方法。如果你能做一些让许多不同程序更短的事情，这可能不是巧合：你可能发现了一个有用的新抽象。你甚至可以编写一个程序来帮助搜索源代码中的重复模式。在其他语言中，那些以简洁性著称的语言是寻找新想法的地方：Forth、Joy、Icon。&lt;/p&gt;&#xA;&lt;h2 id=&#34;比较&#34;&gt;比较&lt;/h2&gt;&#xA;&lt;p&gt;据我所知，第一个写这些相关文章的人是弗雷德·布鲁克斯在《人月神话》中。他写道，无论使用什么语言，程序员每天似乎生成大致相同数量的代码。我在二十出头第一次读到这个时，这是一个很大的惊喜，似乎有巨大的含义。这意味着（a）让软件写得更快的方法是使用更简洁的语言，（b）花功夫这样做的人可以把不这样做的竞争对手远远甩在后面。&lt;/p&gt;&#xA;&lt;p&gt;布鲁克斯的假设，如果它是真的，似乎处于黑客精神的核心。从那以后的几年里，我密切关注我能得到的关于这个问题的任何证据，从正式研究到个人项目的轶事。我没有看到任何与他相矛盾的证据。&lt;/p&gt;&#xA;&lt;p&gt;我还没有看到我认为决定性的证据，我也不期望看到。像卢茨·普雷克特尔对编程语言的比较这样的研究，虽然产生了我期望的那种结果，但往往使用太短的问题，无法成为有意义的测试。语言的更好测试是在需要一个月编写的程序中发生什么。而真正的测试，如果你像我一样相信语言的主要目的是为了便于思考（而不仅仅是在你思考完后告诉计算机要做什么），是你能用它写出什么新东西。所以任何需要满足预定义规范的语言比较都在测试稍微错误的东西。&lt;/p&gt;&#xA;&lt;p&gt;语言的真正测试是你发现和解决新问题的能力，而不是你用它解决别人已经制定的问题的能力。这是两个完全不同的标准。在艺术中，像刺绣和马赛克这样的媒介，如果你事先知道你想制作什么，效果很好，但如果你不知道，就绝对糟糕。当你想在制作过程中发现图像时——就像你必须处理像人物图像这样复杂的东西一样——你需要使用更流动的媒介，如铅笔、水墨或油画。实际上，挂毯和马赛克的制作方式是先制作一幅画，然后复制它。（&amp;ldquo;卡通&amp;quot;这个词最初用来描述用于这个目的的画。）&lt;/p&gt;&#xA;&lt;p&gt;这意味着我们永远不可能对编程语言的相对力量有准确的比较。我们会有精确的比较，但不会有准确的比较。特别是，为了比较语言而进行的明确研究，因为它们可能会使用小问题，并且必须使用预定义的问题，往往会低估更强大语言的力量。&lt;/p&gt;&#xA;&lt;p&gt;来自现场的报告，虽然它们必然不如&amp;quot;科学&amp;quot;研究精确，但可能更有意义。例如，爱立信的乌尔夫·维格进行了一项研究，结论是Erlang比C++简洁4-10倍，开发软件的速度也相应更快：爱立信内部开发项目之间的比较表明，包括软件开发的所有阶段在内的每行/小时生产力相似，几乎与使用的语言（Erlang、PLEX、C、C++或Java）无关。区分不同语言的成为源代码量。该研究还明确处理了布鲁克斯书中只是隐含的一点（因为他测量的是调试代码的行数）：用更强大语言编写的程序往往有更少的错误。这本身就成为一个目的，在网络交换机等应用中，可能比程序员的生产力更重要。&lt;/p&gt;&#xA;&lt;h2 id=&#34;味道测试&#34;&gt;味道测试&lt;/h2&gt;&#xA;&lt;p&gt;最终，我认为你必须凭直觉行事。用这种语言编程感觉如何？我认为找到（或设计）最好语言的方法是对语言让你思考的出色程度变得高度敏感，然后选择/设计感觉最好的语言。如果某些语言功能笨拙或限制性，别担心，你会知道的。&lt;/p&gt;&#xA;&lt;p&gt;这种高度敏感是有代价的。你会发现你无法忍受在笨拙的语言中编程。我觉得在没有宏的语言中编程是无法忍受的限制性，就像习惯动态类型的人发现必须回到必须声明每个变量类型、不能制作不同类型对象列表的语言中编程是无法忍受的限制性一样。我不是唯一一个这样的人。我知道许多Lisp黑客都经历过这种情况。事实上，编程语言相对力量的最准确衡量标准可能是了解该语言的人愿意接受任何使用该语言的工作的百分比，不管应用领域如何。&lt;/p&gt;&#xA;&lt;h2 id=&#34;限制性&#34;&gt;限制性&lt;/h2&gt;&#xA;&lt;p&gt;我认为大多数黑客都知道语言感觉限制性是什么意思。当你有这种感觉时发生了什么？我认为这与当你想走的街道被封锁，你必须绕很长的路才能到达你想去的地方时的感觉相同。你有想说的话，但语言不允许你说。&lt;/p&gt;&#xA;&lt;p&gt;这里真正发生的事情，我认为，是限制性语言是一种不够简洁的语言。问题不仅仅是你不能说你计划说的话。而是语言让你绕的弯路更长。试试这个思维实验。假设你想写某个程序，语言不允许你按计划的方式表达它，而是强迫你用某种更短的方式写程序。至少对我来说，这不会感觉很有限制性。这就像你想走的街道被封锁，十字路口的警察给你指了一条捷径而不是绕路。太好了！&lt;/p&gt;&#xA;&lt;p&gt;我认为限制性的感觉大部分（百分之九十？）来自于被迫使你在语言中写的程序比你头脑中的更长。限制性主要是缺乏简洁性。所以当一种语言感觉有限制性时，这（大部分）意味着它不够简洁，而当一种语言不够简洁时，它会感觉有限制性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;可读性&#34;&gt;可读性&lt;/h2&gt;&#xA;&lt;p&gt;我开始引用的引言提到了另外两个品质，规范性和可读性。我不确定性规范性是什么，或者规范和可读的代码比仅仅可读的代码有什么优势，如果有的话。但我想我知道可读性是什么意思，我认为它也与简洁性有关。&lt;/p&gt;&#xA;&lt;p&gt;我们必须小心区分单行代码的可读性和整个程序的可读性。重要的是后者。我同意Basic的一行代码可能比Lisp的一行代码更易读。但用Basic编写的程序行数会比用Lisp编写的相同程序多（特别是当你进入格林斯彭之地时）。阅读Basic程序的总工作量肯定会更大。总工作量 = 每行工作量 × 行数&lt;/p&gt;&#xA;&lt;p&gt;我不像确信力量与简洁性成正比那样确信可读性与简洁性成正比，但简洁性肯定是可读性的一个因素（在数学意义上；见上面的公式）。所以，说语言的目标是可读性而不是简洁性可能甚至没有意义；这就像说目标是可读性，而不是可读性。&lt;/p&gt;&#xA;&lt;p&gt;每行可读性对第一次遇到语言的用户来说，意味着源代码看起来不具威胁性。所以每行可读性可能是一个好的营销决策，即使它是一个糟糕的设计决策。它与让人们分期付款的非常成功的技术同构：不是用高昂的前期价格吓唬他们，而是告诉他们低月付款。分期付款对买方来说是净亏损，而每行可读性对程序员来说可能也是如此。买方将进行很多很多低月付款；而程序员将阅读很多很多单独可读的行。&lt;/p&gt;&#xA;&lt;p&gt;这种权衡比编程语言更早。如果你习惯于阅读小说和报纸文章，你第一次阅读数学论文的经历可能会令人沮丧。阅读一页可能需要半小时。然而，我很确定符号不是问题，尽管感觉上可能是。数学论文难读是因为思想难。如果你用散文表达相同的思想（正如数学家在发展出简洁的符号之前必须做的那样），它们不会更容易读，因为论文会增长到一本书的大小。&lt;/p&gt;&#xA;&lt;h2 id=&#34;到什么程度&#34;&gt;到什么程度？&lt;/h2&gt;&#xA;&lt;p&gt;许多人拒绝了简洁性=力量的想法。我认为与其简单地争论它们相同或不同，不如问：简洁性在多大程度上等于力量？因为很明显，简洁性是高级语言重要目的的大部分。如果不是全部，那么它们还有什么其他目的，相对而言，这些其他功能有多重要？&lt;/p&gt;&#xA;&lt;p&gt;我提出这个不仅仅是为了让辩论更加文明。我真的想知道答案。如果有的话，语言什么时候会因为过于简洁而对自己不利？&lt;/p&gt;&#xA;&lt;p&gt;我开始的假设是，除了在病态的例子中，我认为简洁性可以被视为等同于力量。我的意思是，在任何任何人会设计的语言中，它们都是相同的，但如果有人想要设计一种语言来明确反驳这个假设，他们可能能够做到。实际上，我甚至不确定这一点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;语言而不是程序&#34;&gt;语言，而不是程序&lt;/h2&gt;&#xA;&lt;p&gt;我们应该清楚我们讨论的是语言的简洁性，而不是单个程序的简洁性。单个程序当然可能写得太密集。&lt;/p&gt;&#xA;&lt;p&gt;我在《On Lisp》中写过这个。一个复杂的宏可能需要节省自身长度的许多倍才能证明其合理性。如果编写某个复杂的宏每次使用都能为你节省十行代码，而宏本身是十行代码，那么如果你使用超过一次，你就会在行数上获得净节省。但这可能仍然是一个坏举动，因为宏定义比普通代码更难读。你可能需要使用宏十次或二十次才能在可读性上获得净改善。&lt;/p&gt;&#xA;&lt;p&gt;我确信每种语言都有这样的权衡（虽然我怀疑随着语言变得更强大，赌注会更高）。每个程序员肯定都见过一些聪明人使用可疑的编程技巧使代码略微缩短的例子。&lt;/p&gt;&#xA;&lt;p&gt;所以对此没有争论——至少，不是我争论。单个程序当然可能因为过于简洁而对自己不利。问题是，语言会吗？语言能强迫程序员编写在元素上很短但以整体可读性为代价的代码吗？&lt;/p&gt;&#xA;&lt;p&gt;很难想象语言过于简洁的一个原因是，如果有一些过于紧凑的方式来表达某些东西，可能也会有更长的表达方式。例如，如果你觉得使用大量宏或高阶函数的Lisp程序太密集，如果你愿意，你可以编写与Pascal同构的代码。如果你不想在Arc中将对高阶函数的调用表示为阶乘（rec zero 1 * 1-），你也可以写出递归定义：(rfn fact (x) (if (zero x) 1 (* x (fact (1- x)))))&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
