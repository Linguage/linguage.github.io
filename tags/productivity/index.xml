<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Productivity on Linguista</title>
    <link>https://linguage.github.io/tags/productivity/</link>
    <description>Recent content in Productivity on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 May 2007 19:05:48 +0000</lastBuildDate>
    <atom:link href="https://linguage.github.io/tags/productivity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write down what you’ve done</title>
      <link>https://linguage.github.io/terencetao/career-advice/orig/write-down-what-youve-done/</link>
      <pubDate>Sun, 06 May 2007 19:05:48 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/career-advice/orig/write-down-what-youve-done/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/write-down-what-youve-done.zh/&#34;&gt;中文版本&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/career-advice/write-down-what-youve-done/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;write-down-what-youve-done&#34;&gt;Write down what you’ve done&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Every composer knows the anguish and despair occasioned by forgetting ideas which one had no time to write down.&#xA;— Hector Berlioz&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;There were many occasions early in my career when I read, heard about, or stumbled upon some neat mathematical trick or argument, and thought I understood it well enough that I didn&amp;rsquo;t need to write it down; and then, say six months later, when I actually needed to recall that trick, I couldn&amp;rsquo;t reconstruct it at all. Eventually I resolved to write down (preferably on a computer) a sketch of any interesting argument I came across – not necessarily at a publication level of quality, but detailed enough that I could then safely forget about the details, and readily recover the argument from the sketch whenever the need arises.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distraction</title>
      <link>https://linguage.github.io/paul_graham/essays_en/distraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/distraction/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/distraction/&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;distraction&#34;&gt;Distraction&lt;/h1&gt;&#xA;&lt;p&gt;May 2008&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Disconnecting Distraction Note: The strategy described at the end of this essay didn&amp;rsquo;t work. It would work for a while, and then I&amp;rsquo;d gradually find myself using the Internet on my work computer. I&amp;rsquo;m trying other strategies now, but I think this time I&amp;rsquo;ll wait till I&amp;rsquo;m sure they work before writing about them.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Procrastination feeds on distractions. Most people find it uncomfortable just to sit and do nothing; you avoid work by doing something else.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Good and Bad Procrastination</title>
      <link>https://linguage.github.io/paul_graham/essays_en/procrastination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/procrastination/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/procrastination/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;good-and-bad-procrastination&#34;&gt;Good and Bad Procrastination&lt;/h1&gt;&#xA;&lt;p&gt;December 2005&lt;/p&gt;&#xA;&lt;p&gt;The most impressive people I know are all terrible procrastinators. So could it be that procrastination isn&amp;rsquo;t always bad?&lt;/p&gt;&#xA;&lt;p&gt;Most people who write about procrastination write about how to cure it. But this is, strictly speaking, impossible. There are an infinite number of things you could be doing. No matter what you work on, you&amp;rsquo;re not working on everything else. So the question is not how to avoid procrastination, but how to procrastinate well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Great Hackers</title>
      <link>https://linguage.github.io/paul_graham/essays_en/gh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/gh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/gh/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;great-hackers&#34;&gt;Great Hackers&lt;/h1&gt;&#xA;&lt;p&gt;July 2004&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at Oscon 2004.)&lt;/p&gt;&#xA;&lt;p&gt;A few months ago I finished a new book, and in reviews I keep noticing words like &amp;ldquo;provocative&amp;rsquo;&amp;rsquo; and &amp;ldquo;controversial.&amp;rsquo;&amp;rsquo; To say nothing of &amp;ldquo;idiotic.&#39;&#39;&lt;/p&gt;&#xA;&lt;p&gt;I didn&amp;rsquo;t mean to make the book controversial. I was trying to make it efficient. I didn&amp;rsquo;t want to waste people&amp;rsquo;s time telling them things they already knew. It&amp;rsquo;s more efficient just to give them the diffs. But I suppose that&amp;rsquo;s bound to yield an alarming book.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Holding a Program in One&#39;s Head</title>
      <link>https://linguage.github.io/paul_graham/essays_en/head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/head/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/head/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;holding-a-program-in-ones-head&#34;&gt;Holding a Program in One&amp;rsquo;s Head&lt;/h1&gt;&#xA;&lt;p&gt;August 2007&lt;/p&gt;&#xA;&lt;p&gt;A good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he&amp;rsquo;s working on. Mathematicians don&amp;rsquo;t answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head, and you can manipulate it at will.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Lose Time and Money</title>
      <link>https://linguage.github.io/paul_graham/essays_en/selfindulgence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/selfindulgence/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/selfindulgence/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-lose-time-and-money&#34;&gt;How to Lose Time and Money&lt;/h1&gt;&#xA;&lt;p&gt;July 2010&lt;/p&gt;&#xA;&lt;p&gt;When we sold our startup in 1998 I suddenly got a lot of money. I now had to think about something I hadn&amp;rsquo;t had to think about before: how not to lose it. I knew it was possible to go from rich to poor, just as it was possible to go from poor to rich. But while I&amp;rsquo;d spent a lot of the past several years studying the paths from poor to rich, I knew practically nothing about the paths from rich to poor. Now, in order to avoid them, I had to learn where they were.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Work Hard</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hwh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hwh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/hwh/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-work-hard&#34;&gt;How to Work Hard&lt;/h1&gt;&#xA;&lt;p&gt;June 2021&lt;/p&gt;&#xA;&lt;p&gt;It might not seem there&amp;rsquo;s much to learn about how to work hard. Anyone who&amp;rsquo;s been to school knows what it entails, even if they chose not to do it. There are 12 year olds who work amazingly hard. And yet when I ask if I know more about working hard now than when I was in school, the answer is definitely yes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning from Founders</title>
      <link>https://linguage.github.io/paul_graham/essays_en/foundersatwork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/foundersatwork/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/foundersatwork/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;learning-from-founders&#34;&gt;Learning from Founders&lt;/h1&gt;&#xA;&lt;p&gt;January 2007&lt;/p&gt;&#xA;&lt;p&gt;(Foreword to Jessica Livingston&amp;rsquo;s Founders at Work.)&lt;/p&gt;&#xA;&lt;p&gt;Apparently sprinters reach their highest speed right out of the blocks, and spend the rest of the race slowing down. The winners slow down the least. It&amp;rsquo;s that way with most startups too. The earliest phase is usually the most productive. That&amp;rsquo;s when they have the really big ideas. Imagine what Apple was like when 100% of its employees were either Steve Jobs or Steve Wozniak.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maker&#39;s Schedule, Manager&#39;s Schedule</title>
      <link>https://linguage.github.io/paul_graham/essays_en/makersschedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/makersschedule/</guid>
      <description>&lt;h1 id=&#34;makers-schedule-managers-schedule&#34;&gt;Maker&amp;rsquo;s Schedule, Manager&amp;rsquo;s Schedule&lt;/h1&gt;&#xA;&lt;p&gt;July 2009&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;&amp;hellip;the mere consciousness of an engagement will sometimes worry a whole day.&amp;rdquo;&#xA;– Charles Dickens&lt;/p&gt;&#xA;&lt;p&gt;One reason programmers dislike meetings so much is that they&amp;rsquo;re on a different type of schedule from other people. Meetings cost them more.&lt;/p&gt;&#xA;&lt;p&gt;There are two types of schedule, which I&amp;rsquo;ll call the manager&amp;rsquo;s schedule and the maker&amp;rsquo;s schedule. The manager&amp;rsquo;s schedule is for bosses. It&amp;rsquo;s embodied in the traditional appointment book, with each day cut into one hour intervals. You can block off several hours for a single task if you need to, but by default you change what you&amp;rsquo;re doing every hour.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Top Idea in Your Mind</title>
      <link>https://linguage.github.io/paul_graham/essays_en/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/top/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/top/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-top-idea-in-your-mind&#34;&gt;The Top Idea in Your Mind&lt;/h1&gt;&#xA;&lt;p&gt;July 2010&lt;/p&gt;&#xA;&lt;p&gt;I realized recently that what one thinks about in the shower in the morning is more important than I&amp;rsquo;d thought. I knew it was a good time to have ideas. Now I&amp;rsquo;d go further: now I&amp;rsquo;d say it&amp;rsquo;s hard to do a really good job on anything you don&amp;rsquo;t think about in the shower.&lt;/p&gt;&#xA;&lt;p&gt;Everyone who&amp;rsquo;s worked on difficult problems is probably familiar with the phenomenon of working hard to figure something out, failing, and then suddenly seeing the answer a bit later while doing something else. There&amp;rsquo;s a kind of thinking you do without trying to. I&amp;rsquo;m increasingly convinced this type of thinking is not merely helpful in solving hard problems, but necessary. The tricky part is, you can only control it indirectly. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Business Can Learn from Open Source</title>
      <link>https://linguage.github.io/paul_graham/essays_en/opensource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/opensource/</guid>
      <description>&lt;h1 id=&#34;what-business-can-learn-from-open-source&#34;&gt;What Business Can Learn from Open Source&lt;/h1&gt;&#xA;&lt;p&gt;August 2005&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at Oscon 2005.)&lt;/p&gt;&#xA;&lt;p&gt;Lately companies have been paying more attention to open source. Ten years ago there seemed a real danger Microsoft would extend its monopoly to servers. It seems safe to say now that open source has prevented that. A recent survey found 52% of companies are replacing Windows servers with Linux servers. [1]&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
