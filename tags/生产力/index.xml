<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生产力 on Linguista</title>
    <link>https://linguage.github.io/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/</link>
    <description>Recent content in 生产力 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Feb 2020 15:06:50 +0000</lastBuildDate>
    <atom:link href="https://linguage.github.io/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>不快乐是极其低效的</title>
      <link>https://linguage.github.io/naval/zh/being-unhappy-is-extremely-inefficient.zh/</link>
      <pubDate>Mon, 17 Feb 2020 15:06:50 +0000</pubDate>
      <guid>https://linguage.github.io/naval/zh/being-unhappy-is-extremely-inefficient.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/naval/orig/being-unhappy-is-extremely-inefficient/&#34;&gt;原文(English)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;grid grid-cols-2 gap-4 md:grid-cols-2&#34;&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://nav.al/inefficient&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://nav.al/inefficient&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://nav.al/inefficient&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://x.com/naval/status/1002103360646823936&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://x.com/naval/status/1002103360646823936&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://x.com/naval/status/1002103360646823936&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;h1 id=&#34;不快乐是极其低效的&#34;&gt;不快乐是极其低效的&lt;/h1&gt;&#xA;&lt;p&gt;2020年2月17日&lt;/p&gt;&#xA;&lt;p&gt;平静的头脑能做出更好的决定&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Naval:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;除了&amp;quot;我太聪明了不需要它&amp;quot;之外，另一个反对意见是，&amp;ldquo;我不想它降低我的生产力。我不想减少欲望或工作伦理。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;对此的事实核查是：确实如此。你越快乐、越平静，就越不可能冲出去改变世界。但同时，不快乐是非常低效的。一个平静的人头脑中不会有杂念。如果你是一个有动力但不快乐的人，你的大脑会24/7不停地运转。&lt;/p&gt;&#xA;&lt;h2 id=&#34;不快乐的人没有良好的判断力&#34;&gt;不快乐的人没有良好的判断力&lt;/h2&gt;&#xA;&lt;p&gt;这会导致什么后果？你睡眠不好。你更可能愤怒反应，把自己挖进一个必须爬出来的坑里。你的决定是情绪化和冲动的。你更可能陷入忙碌陷阱——总是忙个不停，从一件事跑到另一件事，因为你无法在心理上确定优先级。&lt;/p&gt;&#xA;&lt;p&gt;当你内心不平静时，很难做出判断，因为你头脑中有太多思绪。你没有时间专注于做出那些判断。&lt;/p&gt;&#xA;&lt;p&gt;这是一个权衡。如果你明天成为佛陀，你不太可能像埃隆·马斯克那样发射火箭到月球。另一方面，有很多成功、乐观的科学家、创新者和其他领导者——特别是随着年龄增长。快乐的人并不总是效率低下。&lt;/p&gt;&#xA;&lt;h2 id=&#34;平静的头脑能做出更好的决定&#34;&gt;平静的头脑能做出更好的决定&lt;/h2&gt;&#xA;&lt;p&gt;当我生活中变得更快乐时，我变得高效得多——尽管我不像以前那样努力工作。我能够与那些在我生命早期因为各种先入为主的观念而保持距离的人建立关系。&lt;/p&gt;&#xA;&lt;p&gt;我现在能更清晰地做决定，因为我能看到长期结果。我直接切入主题，不会试图在这里或那里多谈判20%——因为我知道从长远来看这会使我不快乐，使对方不快乐，并使交易更不稳定。&lt;/p&gt;&#xA;&lt;p&gt;即使我不像以前那样努力工作，我也变得更有生产力，因为我做出了更好的决定。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为世界创造丰盛</title>
      <link>https://linguage.github.io/naval/zh/make-abundance-for-the-world.zh/</link>
      <pubDate>Sun, 03 Mar 2019 17:05:06 +0000</pubDate>
      <guid>https://linguage.github.io/naval/zh/make-abundance-for-the-world.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/naval/orig/make-abundance-for-the-world/&#34;&gt;原文(English)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;grid grid-cols-2 gap-4 md:grid-cols-2&#34;&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://nav.al/ethical-wealth&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://nav.al/ethical-wealth&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://nav.al/ethical-wealth&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://x.com/naval/status/1002103360646823936&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://x.com/naval/status/1002103360646823936&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://x.com/naval/status/1002103360646823936&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;h1 id=&#34;为世界创造丰盛&#34;&gt;为世界创造丰盛&lt;/h1&gt;&#xA;&lt;p&gt;2019年3月3日&lt;/p&gt;&#xA;&lt;p&gt;财富并非从他人那里夺取&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Naval:&lt;/strong&gt;&#xA;我认为存在这样一种观念，即赚钱是邪恶的，对吗？这可以一直追溯到&amp;quot;金钱是万恶之源&amp;quot;。人们认为银行家偷走了我们的钱。这在某种程度上是真实的，因为在世界许多地方，盗窃行为一直在发生。&lt;/p&gt;&#xA;&lt;p&gt;在某种意义上，世界的历史就是创造者与索取者之间的捕食者/猎物关系。有些人走出去创造事物，建造事物，并为之努力工作。&lt;/p&gt;&#xA;&lt;p&gt;然后有些人带着剑、枪、税收、裙带资本主义、共产主义或其他什么方式出现。有各种各样的盗窃方法。&lt;/p&gt;&#xA;&lt;p&gt;即使在自然界中，寄生生物也比非寄生生物多。你体内有大量寄生生物，它们靠你生存。较好的那些是共生的，它们会回馈一些东西。但也有很多只是在索取。这就是任何复杂系统构建的方式。&lt;/p&gt;&#xA;&lt;p&gt;我关注的是真正的财富创造。这不是关于赚钱。这不是关于从别人那里夺取什么。而是关于创造丰盛。&lt;/p&gt;&#xA;&lt;p&gt;显然，工作数量不是有限的，财富也不是有限的。否则我们仍然会坐在洞穴里，想着如何分配柴火和偶尔的死鹿。&lt;/p&gt;&#xA;&lt;p&gt;文明中的大部分财富，实际上是全部财富，都是被创造出来的。它从某个地方被创造出来。它由人们创造。它由技术创造。它由生产力创造。它由努力工作创造。认为财富是被偷来的这种想法，是那些试图获得地位的人玩的可怕的零和游戏。&lt;/p&gt;&#xA;&lt;h2 id=&#34;每个人都可以富有&#34;&gt;每个人都可以富有&lt;/h2&gt;&#xA;&lt;p&gt;但现实是每个人都可以富有。我们可以通过观察第一世界来看到这一点，那里的每个人都基本上比200年前活着的任何人都富有。&lt;/p&gt;&#xA;&lt;p&gt;200年前没有人有抗生素。没有人有汽车。没有人有电。没有人有iPhone。所有这些发明都使我们作为一个物种更加富有。&lt;/p&gt;&#xA;&lt;p&gt;今天，我宁愿成为第一世界国家的穷人，也不愿成为路易十四时代法国的富人。我宁愿成为今天的穷人，也不愿成为当时的贵族。这是因为财富创造。&lt;/p&gt;&#xA;&lt;p&gt;技术的引擎是科学，它被应用于创造丰盛的目的。所以，我认为从根本上说每个人都可以富有。&lt;/p&gt;&#xA;&lt;p&gt;我希望你思考的这个思想实验是：想象如果每个人都拥有优秀软件工程师和优秀硬件工程师的知识。如果你能走出去，建造机器人、计算机、桥梁，并对它们进行编程。假设每个人都知道如何做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;你认为20年后社会会是什么样子？我的猜测是，我们将建造机器人、机器、软件和硬件来做所有事情。我们都将生活在巨大的丰盛之中。&lt;/p&gt;&#xA;&lt;p&gt;从某种意义上说，我们基本上都会退休，因为我们都不必为任何基本需求工作。我们甚至会有机器人护士。我们将有机器驱动的医院。我们将有自动驾驶汽车。我们将有100%自动化的农场。我们将有清洁能源。&lt;/p&gt;&#xA;&lt;p&gt;到那时，我们可以利用技术突破来获得我们想要的一切。如果那时还有人工作，他们工作是为了表达他们的创造力。他们工作是因为他们内心想要贡献、建造和设计事物。&lt;/p&gt;&#xA;&lt;p&gt;我不认为资本主义是邪恶的。资本主义实际上是好的。只是它被劫持了。它被外部性的不当定价劫持。它被不当收益劫持，那里存在腐败或垄断。&lt;/p&gt;</description>
    </item>
    <item>
      <title>伟大的黑客</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/gh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/gh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/gh/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/gh.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/gh.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/gh.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;伟大的黑客&#34;&gt;伟大的黑客&lt;/h1&gt;&#xA;&lt;p&gt;2004年7月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自2004年Oscon大会的演讲。）&lt;/p&gt;&#xA;&lt;p&gt;几个月前我完成了一本新书，在评论中我不断注意到诸如&amp;quot;挑衅性&amp;quot;和&amp;quot;争议性&amp;quot;的词语。更不用说&amp;quot;白痴&amp;quot;了。&lt;/p&gt;&#xA;&lt;p&gt;我并不是想让这本书具有争议性。我试图让它高效。我不想浪费人们的时间告诉他们他们已经知道的事情。更高效的方法只是给他们差异。但我想这必然会产生一本令人担忧的书。&lt;/p&gt;&#xA;&lt;h2 id=&#34;爱迪生们&#34;&gt;爱迪生们&lt;/h2&gt;&#xA;&lt;p&gt;最具争议的想法是：财富的差异可能并不像我们想象的那么大问题。&lt;/p&gt;&#xA;&lt;p&gt;我在书中没有说财富差异本身就是好事。我说在某些情况下它可能是好事的标志。剧烈的头痛不是好事，但它可能是好事的标志——例如，你被击中头部后正在恢复意识。&lt;/p&gt;&#xA;&lt;p&gt;财富差异可能是生产力差异的标志。（在一个人的社会中，它们是相同的。）这几乎肯定是好事：如果你的社会没有生产力差异，可能不是因为每个人都是托马斯·爱迪生。而是因为你没有托马斯·爱迪生。&lt;/p&gt;&#xA;&lt;p&gt;在低技术社会中，你看不到太多的生产力差异。如果你有一群游牧民族为火收集木棍，最好的木棍收集者比最差的能多收集多少？两倍？而当你给人们一个像电脑这样的复杂工具时，他们能用它做的事情的差异是巨大的。&lt;/p&gt;&#xA;&lt;p&gt;这不是一个新想法。Fred Brooks在1974年写过这个，他引用的研究发表于1968年。但我认为他低估了程序员之间的差异。他写了代码行数方面的生产力：最好的程序员可以在十分之一的时间内解决给定问题。但如果问题没有给定呢？在编程中，就像在许多领域一样，困难的部分不是解决问题，而是决定要解决什么问题。想象力很难衡量，但在实践中它主导着以代码行数衡量的那种生产力。&lt;/p&gt;&#xA;&lt;p&gt;生产力在任何领域都有变化，但很少有领域变化如此之大。程序员之间的差异如此之大，以至于成为一种质的差异。我不认为这是编程固有的，但在每个领域，技术都放大了生产力的差异。我认为编程中发生的事情只是因为我们有很多技术杠杆。但在每个领域，杠杆都在变长，所以我们看到的差异是随着时间的推移，越来越多的领域都会看到的。公司和国家的成功将越来越取决于他们如何应对这个问题。&lt;/p&gt;&#xA;&lt;p&gt;如果生产力的差异随着技术而增加，那么最有生产力个体的贡献不仅会不成比例地大，而且会随着时间的推移而实际增长。当你达到一个群体的90%产出由其1%的成员创造的地步时，如果有什么（无论是维京袭击，还是中央计划）将他们的生产力拖到平均水平，你就会损失惨重。&lt;/p&gt;&#xA;&lt;p&gt;如果我们想充分利用他们，我们需要了解这些特别有生产力的人。什么激励他们？他们需要什么来做他们的工作？你如何认识他们？你如何让他们来为你工作？然后当然还有这个问题，你如何成为其中一员？&lt;/p&gt;&#xA;&lt;h2 id=&#34;不仅仅是金钱&#34;&gt;不仅仅是金钱&lt;/h2&gt;&#xA;&lt;p&gt;我认识一些超级黑客，所以我坐下来思考他们有什么共同点。他们的决定性品质可能是他们真的喜欢编程。普通程序员写代码是为了付账单。伟大的黑客认为这是他们为了乐趣而做的事情，并且很高兴发现有人会为此付钱。&lt;/p&gt;&#xA;&lt;p&gt;伟大的程序员有时被认为对金钱漠不关心。这不完全正确。确实，他们真正关心的只是做有趣的工作。但如果你赚了足够的钱，你就可以做任何你想做的工作，因此黑客被赚取巨额金钱的想法所吸引。但只要他们还必须每天上班工作，他们更关心在那里做什么，而不是得到多少报酬。&lt;/p&gt;&#xA;&lt;p&gt;从经济学上讲，这是最重要的事实，因为这意味着你不必支付伟大的黑客接近他们价值的报酬。一个伟大的程序员可能比普通程序员生产力高十倍或一百倍，但他会认为能获得三倍报酬就很幸运了。正如我稍后要解释的，这部分是因为伟大的黑客不知道他们有多好。但也是因为金钱不是他们主要想要的东西。&lt;/p&gt;&#xA;&lt;p&gt;黑客想要什么？像所有工匠一样，黑客喜欢好工具。事实上，这低估了。好的黑客发现无法忍受使用坏工具。他们会拒绝在错误基础设施的项目上工作。&lt;/p&gt;&#xA;&lt;p&gt;在我曾经工作过的一家创业公司，我们公告板上钉着的一张东西是IBM的广告。那是一张AS400的图片，标题写着，我认为，&amp;ldquo;黑客鄙视它。&amp;quot;[1]&lt;/p&gt;&#xA;&lt;p&gt;当你决定为项目使用什么基础设施时，你不仅在做出技术决定。你还在做出社会决定，而这可能是两者中更重要的。例如，如果你的公司想写一些软件，用Java写似乎是一个谨慎的选择。但当你选择一种语言时，你也在选择一个社区。你能雇佣来在Java项目上工作的程序员不会像你能雇佣来在Python项目上工作的那样聪明。而你的黑客的质量可能比你选择的语言更重要。虽然，坦率地说，好的黑客更喜欢Python而不是Java这一事实应该告诉你这些语言的相对优点。&lt;/p&gt;&#xA;&lt;p&gt;商业类型更喜欢最流行的语言，因为他们将语言视为标准。他们不想在公司上下注Betamax。但语言的问题是，它们不仅仅是标准。如果你必须通过网络传输比特，务必使用TCP/IP。但编程语言不仅仅是格式。编程语言是一种表达媒介。&lt;/p&gt;&#xA;&lt;p&gt;我读到Java刚刚超过Cobol成为最流行的语言。作为标准，你不能期望更多。但作为表达媒介，你可以做得更好。在我能想到的所有伟大程序员中，我只知道一个会自愿用Java编程。而在我能想到的所有不为Sun工作的伟大程序员中，在Java方面，我一个也不知道。&lt;/p&gt;&#xA;&lt;p&gt;伟大的黑客通常也坚持使用开源软件。不仅仅是因为它更好，还因为它给他们更多控制权。好的黑客坚持控制权。这是使他们成为好黑客的部分原因：当某些东西坏了时，他们需要修复它。你希望他们对你为他们编写的软件有这种感觉。当他们对操作系统有同样的感觉时，你不应该感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;几年前，一个风险投资家朋友告诉我他参与的一家新创业公司。听起来很有希望。但下次我和他交谈时，他们说他们决定在Windows NT上构建软件，并刚刚聘请了一位非常有经验的NT开发者担任首席技术官。当我听到这个时，我想，这些人注定要失败。第一，CTO不可能是第一流黑客，因为要成为杰出的NT开发者，他必须自愿多次使用NT，我无法想象一个伟大的黑客会这样做；第二，即使他很好，如果项目必须在NT上构建，他也很难雇佣到优秀的人才。[2]&lt;/p&gt;&#xA;&lt;h2 id=&#34;最后的边疆&#34;&gt;最后的边疆&lt;/h2&gt;&#xA;&lt;p&gt;除了软件，黑客最重要的工具可能是他的办公室。大公司认为办公室空间的功能是表达等级。但黑客不仅仅为此使用办公室：他们将办公室作为思考的地方。如果你是一家技术公司，他们的思想就是你的产品。所以让黑客在嘈杂、分散注意力的环境中工作，就像在油漆厂空气中充满烟尘。&lt;/p&gt;&#xA;&lt;p&gt;连环漫画Dilbert有很多关于隔间的说法，这是有充分理由的。我认识的所有黑客都鄙视它们。仅仅被中断的前景就足以阻止黑客处理困难问题。如果你想在有隔间的办公室里完成真正的工作，你只有两个选择：在家工作，或在别人不在的时候早点来、晚点来或周末来。公司没有意识到这是出了问题的标志吗？办公室环境应该是有助于你工作的东西，而不是你尽管如此才工作的东西。&lt;/p&gt;&#xA;&lt;p&gt;像思科这样的公司为每个人都有一间隔间而自豪，即使是CEO。但他们不像他们想象的那么先进；显然他们仍然将办公室空间视为等级的标志。还要注意，思科以很少在内部进行产品开发而闻名。他们通过收购创造新技术的创业公司来获得新技术——大概在那里黑客确实有安静的工作地方。&lt;/p&gt;&#xA;&lt;p&gt;一家理解黑客需求的大公司是微软。我曾经看到过微软的招聘广告，有一张门的大图片。为我们工作，前提是，我们会给你一个可以真正完成工作的地方。而且你知道，微软在大公司中之所以非凡，是因为他们能够在内部开发软件。也许不太好，但足够好。&lt;/p&gt;&#xA;&lt;p&gt;如果公司希望黑客有生产力，他们应该看看他们在家里做什么。在家里，黑客可以自己安排事情，以便完成最多的工作。当黑客在家工作时，他们不在嘈杂、开放的空间工作；他们在有门的房间里工作。他们在舒适、社区化的地方工作，周围有人，需要思考时可以散步，而不是在停车场英亩的玻璃盒子里。他们有可以在感到疲倦时小睡的沙发，而不是坐在桌前昏迷，假装工作。没有吸尘器人员在每晚黑客黄金时间呼啸而过。没有会议，或者，天哪，公司静修或团队建设练习。当你看他们在电脑上做什么时，你会发现它强化了我之前关于工具的说法。他们在工作时可能必须使用Java和Windows，但在家里，当他们可以自由选择时，你更可能发现他们使用Perl和Linux。&lt;/p&gt;&#xA;&lt;p&gt;事实上，这些关于Cobol或Java是最流行语言的统计数据可能会产生误导。如果我们想知道什么工具最好，我们应该看的是黑客在可以自由选择时选择什么——也就是说，在他们自己的项目中。当你问这个问题时，你会发现开源操作系统已经占据了主导市场份额，排名第一的语言可能是Perl。&lt;/p&gt;&#xA;&lt;h2 id=&#34;有趣&#34;&gt;有趣&lt;/h2&gt;&#xA;&lt;p&gt;除了好工具，黑客想要有趣的项目。什么使项目有趣？嗯，显然像隐形飞机或特效软件那样明显性感的应用程序会很有趣。但任何应用程序如果提出新颖的技术挑战，都可能很有趣。所以很难预测黑客会喜欢哪些问题，因为有些只有在工作的人发现新的解决方案时才变得有趣。在ITA（编写Orbitz内部软件的公司）之前，从事机票价格搜索的人可能认为这是可以想象的最无聊的应用程序。但ITA通过以更雄心勃勃的方式重新定义问题使其变得有趣。&lt;/p&gt;&#xA;&lt;p&gt;我认为谷歌也发生了同样的事情。当谷歌成立时，所谓门户网站的传统看法是搜索很无聊且不重要。但谷歌的人不认为搜索无聊，这就是为什么他们做得这么好。&lt;/p&gt;&#xA;&lt;p&gt;这是管理者可以有所作为的领域。就像父母对孩子说，我打赌你不能在十分钟内清理整个房间，一个好的管理者有时可以将问题重新定义为更有趣的问题。史蒂夫·乔布斯似乎特别擅长这个，部分原因只是因为他有高标准。在Mac之前有很多小型、便宜的电脑。他将问题重新定义为：制造一个漂亮的。这可能比任何胡萝卜或大棒更能驱动开发者。&lt;/p&gt;&#xA;&lt;p&gt;他们确实做到了。当Mac首次出现时，你甚至不必打开它就知道它会很好；你可以从机箱上看出来。几周前我在剑桥的街上走，在某个人的垃圾里我看到了一个似乎是Mac手提箱的东西。我往里看，里面有一台Mac SE。我带回家插上电，它启动了。快乐的Macintosh脸，然后是finder。我的天，它是如此简单。就像&amp;hellip;&amp;hellip;谷歌。&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢为有高标准的人工作。但仅仅精确是不够的。你必须坚持正确的事情。这通常意味着你必须自己是一个黑客。我偶尔看到过关于如何管理程序员的文章。真的应该有两篇文章：一篇是关于如果你自己是程序员该做什么，另一篇是关于如果你不是该做什么。而第二篇可能可以浓缩成两个词：放弃。&lt;/p&gt;&#xA;&lt;p&gt;问题不在于日常管理。真正好的黑客几乎是自我管理的。问题是，如果你不是黑客，你无法分辨谁是好黑客。一个类似的问题解释了为什么美国汽车如此丑陋。我称之为设计悖论。你可能认为你可以通过雇佣伟大的设计师来设计产品而使产品美丽。但如果你自己没有好品味，你如何认识好设计师？根据定义，你无法从他的作品集中判断。你也不能看他获得的奖项或工作，因为在设计领域，就像在大多数领域一样，这些往往是由时尚和交际驱动的，而实际能力排在第三位。没有办法：你无法在不知道什么是美丽的情况下管理一个旨在生产美丽的过程。美国汽车丑陋是因为美国汽车公司由品味差的人经营。&lt;/p&gt;&#xA;&lt;p&gt;这个国家的许多人认为品味是难以捉摸的，甚至是轻浮的。它都不是。要推动设计，管理者必须是公司产品最苛刻的用户。如果你真的有好品味，你可以像史蒂夫·乔布斯那样，使满足你成为好人喜欢解决的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;讨厌的小问题&#34;&gt;讨厌的小问题&lt;/h2&gt;&#xA;&lt;p&gt;很容易说什么样的问题不是有趣的：那些你必须解决很多讨厌小问题，而不是解决几个大的、清晰的问题。最糟糕的项目之一是为充满错误的软件编写接口。另一个是当你必须为个别客户的复杂和定义不清的需求定制东西。对黑客来说，这类项目是千刀万剐的死亡。&lt;/p&gt;&#xA;&lt;p&gt;讨厌小问题的区别特征是你从中学不到任何东西。编写编译器很有趣，因为它教你什么是编译器。但为有错误的软件编写接口教不了你任何东西，因为错误是随机的。[3] 所以不仅仅是挑剔使好黑客避免讨厌的小问题。这更多是自我保护的问题。处理讨厌的小问题会让你变笨。好黑客避免它就像模特避免奶酪汉堡一样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>你脑海中最主要的想法</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/top/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/top/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/top.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/top.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/top.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;你脑海中最主要的想法&#34;&gt;你脑海中最主要的想法&lt;/h1&gt;&#xA;&lt;p&gt;2010年7月&lt;/p&gt;&#xA;&lt;p&gt;我最近意识到，早晨洗澡时思考的东西比我想象的更重要。我知道那是产生想法的好时机。现在我要进一步说：对于任何你洗澡时不会思考的事情，你都很难真正做好。&lt;/p&gt;&#xA;&lt;p&gt;每个解决过难题的人可能都熟悉这种现象：努力思考想要弄明白某件事，失败了，然后在做其他事情时突然看到了答案。有一种思考是你不需要努力就去做的。我越来越确信，这种思考方式不仅对解决难题有帮助，而且是必要的。棘手的部分是，你只能间接地控制它。[1]&lt;/p&gt;&#xA;&lt;p&gt;我认为大多数人在任何特定时间都有一个最主要的想法。那就是当他们被允许自由漂移时思绪会漂向的想法。而这个想法往往会获得这种思考的所有好处，而其他想法则被剥夺了。这意味着让错误的想法成为你脑海中的主要想法是一场灾难。&lt;/p&gt;&#xA;&lt;p&gt;让我明白这一点的是，我有两个很长的时期，有一个我不希望成为主要想法的想法。&lt;/p&gt;&#xA;&lt;p&gt;我注意到创业公司在开始融资时完成的任务要少得多，但直到我们自己融资时我才明白为什么。问题不在于与投资者会面所花费的实际时间。问题在于，一旦你开始融资，融资就成为你脑海中的主要想法。那就是你早晨洗澡时会思考的事情。这意味着其他问题都不是。&lt;/p&gt;&#xA;&lt;p&gt;当我运行Viaweb时，我讨厌融资，但我忘记了为什么我如此讨厌它。当我们为Y Combinator融资时，我想起来了。金钱问题特别容易成为你脑海中的主要想法。原因是它们必须如此。很难获得金钱。这不是那种默认会发生的事情。除非你让它成为你洗澡时思考的事情，否则它不会发生。然后你在其他宁愿做的事情上就进展甚微。[2]&lt;/p&gt;&#xA;&lt;p&gt;（我听到从事教授工作的朋友有类似的抱怨。现在的教授似乎已经成了专业筹款人，顺便做一点研究。也许是时候解决这个问题了。）&lt;/p&gt;&#xA;&lt;p&gt;这件事给我如此强烈冲击的原因是，在之前的10年里，我大部分时间都能思考我想思考的事情。所以当我不能时的对比很鲜明。但我不认为这个问题只有我有，因为我看到的几乎每个创业公司在开始融资时都会陷入停顿——或者在与收购者交谈时。&lt;/p&gt;&#xA;&lt;p&gt;你不能直接控制你的思绪漂向哪里。如果你在控制它们，它们就不是在漂移。但你可以通过控制让自己陷入的情境来间接地控制它们。这对我是个教训：小心你让什么变得对你至关重要。努力让自己陷入最紧迫的问题是你想要思考的情境中。&lt;/p&gt;&#xA;&lt;p&gt;当然，你没有完全的控制权。紧急情况可能会把其他想法推出你的脑海。但除了紧急情况，你对什么成为你脑海中的主要想法有很大的间接控制权。&lt;/p&gt;&#xA;&lt;p&gt;我发现有两种想法特别值得避免——它们就像尼罗河鲈鱼一样推出更有趣的想法。我已经提到过一种：关于金钱的想法。获得金钱几乎就定义了是一个注意力陷阱。另一个是争议。这些也以错误的方式引人入胜：它们具有与真正有趣的想法相同的魔术贴形状，但没有实质内容。所以如果你想完成真正的工作，就要避免争议。[3]&lt;/p&gt;&#xA;&lt;p&gt;就连牛顿也陷入了这种陷阱。1672年发表他的色彩理论后，他发现自己多年来被争议分散了注意力，最终得出结论，唯一的解决方案是停止发表：我发现自己成了哲学的奴隶，但如果我能摆脱莱纳斯先生的事情，我将坚决地永远告别它，除非我为自己的私满足所做的事情，或者留待我身后发表。因为我看到一个人必须要么决心不发表任何新东西，要么成为捍卫它的奴隶。[4] 列日大学的莱纳斯和他的学生是那些更顽固的批评者之一。牛顿的传记作者韦斯特福尔似乎觉得他反应过度：回想一下，在他写作的时候，牛顿的&amp;quot;奴役&amp;quot;包括在一年内给列日写了五封回信，总共十四页印刷页。我对牛顿更有同情心。问题不在于这14页，而在于这个愚蠢的争议不断地被重新引入作为一个渴望思考其他事情的心灵中的主要想法所带来的痛苦。&lt;/p&gt;&#xA;&lt;p&gt;转过另一边脸被证明有自私的好处。伤害你的人伤害你两次：第一次是伤害本身，第二次是事后花时间思考它。如果你学会忽视伤害，你至少可以避免第二次伤害。我发现我可以通过告诉自己：这不值得占据我头脑中的空间，从而在某种程度上避免思考人们对我的恶意行为。我总是很高兴发现自己忘记了争议的细节，因为那意味着我没有在思考它们。我的妻子认为我比她更宽容，但我的动机纯粹是自私的。&lt;/p&gt;&#xA;&lt;p&gt;我怀疑很多人不确定在任何特定时间他们脑海中的主要想法是什么。我经常对此判断错误。我倾向于认为它是我希望成为主要想法的想法，而不是实际上的那个。但弄清楚这一点很容易：洗个澡就是了。你的思绪不断回到什么话题？如果这不是你想要思考的，你可能想要改变一些事情。&lt;/p&gt;&#xA;&lt;p&gt;注释&lt;/p&gt;&#xA;&lt;p&gt;[1] 毫无疑问，这种思考类型已经有名字了，但我称之为&amp;quot;环境思考&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;[2] 在我们的情况下这一点特别明显，因为我们筹集的两笔资金都不困难，但在这两种情况下，过程都拖了几个月。转移大量资金从来不是人们会随意对待的事情。所需的注意力随金额增加——可能不是线性的，但绝对是单调的。&lt;/p&gt;&#xA;&lt;p&gt;[3] 推论：避免成为管理者，否则你的工作将 consist 处理金钱和争议。&lt;/p&gt;&#xA;&lt;p&gt;[4] 致奥尔登堡的信，引自韦斯特福尔，理查德，《艾萨克·牛顿的生活》，第107页。&lt;/p&gt;&#xA;&lt;p&gt;感谢萨姆·奥特曼、帕特里克·克里森、杰西卡·利文斯顿和罗伯特·莫里斯阅读草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分心</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/distraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/distraction/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/distraction/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/distraction.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/distraction.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/distraction.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;分心&#34;&gt;分心&lt;/h1&gt;&#xA;&lt;p&gt;2008年5月&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;断开分心说明：本文结尾描述的策略没有奏效。它会工作一段时间，然后我会逐渐发现自己在工作电脑上使用互联网。我现在正在尝试其他策略，但我想这次我会等到确定它们有效之后再写。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;拖延症依赖分心而存在。大多数人发现只是坐着什么都不做很不舒服；你通过做其他事情来避免工作。&lt;/p&gt;&#xA;&lt;p&gt;因此，克服拖延症的一种方法是让它缺少分心。但这并不像听起来那么简单，因为有人努力让你分心。分心不是你避免的静态障碍，就像你可能避免路上的岩石一样。分心会主动找到你。&lt;/p&gt;&#xA;&lt;p&gt;切斯特菲尔德将污垢描述为错位的物质。同样，分心是在错误时间出现的有吸引力的事物。技术不断被改进以产生越来越多有吸引力的事物。这意味着当我们学会避免一类分心时，新的分心会不断出现，就像耐药细菌一样。&lt;/p&gt;&#xA;&lt;p&gt;例如，电视经过50年的改进，已经达到了视觉鸦片的程度。我13岁时就意识到电视会上瘾，所以我停止观看。但我最近读到，美国人平均每天看4小时电视。他们生命的四分之一。&lt;/p&gt;&#xA;&lt;p&gt;现在电视正在衰落，但只是因为人们找到了更令人上瘾的浪费时间方式。特别危险的是，许多发生在你的电脑上。这并非偶然。越来越多的办公室职员坐在连接到互联网的电脑前，而分心总是向拖延者进化。&lt;/p&gt;&#xA;&lt;p&gt;我记得当电脑至少对我来说 exclusively 用于工作时。我偶尔会拨号服务器获取邮件或ftp文件，但大部分时间我都是离线的。我只能做的是写作和编程。现在我感觉好像有人偷偷把电视放到了我的桌子上。非常令人上瘾的东西只需点击一下即可。在工作中遇到障碍？嗯，我想知道网上有什么新鲜事。最好检查一下。&lt;/p&gt;&#xA;&lt;p&gt;在多年仔细避免像电视、游戏和Usenet这样的经典时间消耗者之后，我仍然成为分心的牺牲品，因为我没有意识到它会进化。曾经安全的东西，使用互联网，逐渐变得越来越危险。有些天我醒来，喝杯茶，查看新闻，然后检查邮件，然后再次查看新闻，然后回复几封邮件，然后突然发现快到午饭时间了，我还没有完成任何真正的工作。而且这种情况开始越来越多地发生。&lt;/p&gt;&#xA;&lt;p&gt;我花了很长的时间才意识到互联网变得多么令人分心，因为问题是间歇性的。我忽略了它，就像你让自己忽略一个只间歇性出现的错误一样。当我在项目中间时，分心并不是真正的问题。当我完成一个项目并决定下一步做什么时，它们总是会咬我。&lt;/p&gt;&#xA;&lt;p&gt;很难注意到这种新型分心的危险的另一个原因是社会习俗还没有赶上它。如果我在沙发上坐了一整个上午看电视，我会很快注意到。这是一个已知的危险信号，就像独自喝酒一样。但使用互联网看起来和感觉上仍然很像工作。&lt;/p&gt;&#xA;&lt;p&gt;然而，最终很明显互联网变得如此令人分心，以至于我必须开始以不同的方式对待它。基本上，我必须在我的已知时间消耗者列表中添加一个新应用程序：Firefox。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;这个问题很难解决，因为大多数人仍然需要互联网来做一些事情。如果你喝得太多，你可以通过完全停止来解决这个问题。但你不能通过停止进食来解决暴饮暴食的问题。我不能完全避免互联网，就像我对以前的时间消耗者所做的那样。&lt;/p&gt;&#xA;&lt;p&gt;起初我尝试规则。例如，我告诉自己每天只会使用互联网两次。但这些方案从来没有长期有效。最终会出现一些事情，需要我更多地使用它。然后我会逐渐滑回我的老路。&lt;/p&gt;&#xA;&lt;p&gt;令人上瘾的东西必须被当作有知觉的对手来对待——就好像你脑子里有个小人总是为你想要停止做的事情编造最合理的论据。如果你给它的留一条路，他会找到它。&lt;/p&gt;&#xA;&lt;p&gt;关键似乎是可见性。大多数坏习惯的最大成分是否认。所以你必须确保你不会仅仅滑入你试图避免的事情中。它必须触发警报。&lt;/p&gt;&#xA;&lt;p&gt;也许从长远来看，处理互联网分心的正确答案将是监视和控制它们的软件。但与此同时，我找到了一个更激烈的解决方案，确实有效：设置一台单独的电脑来使用互联网。&lt;/p&gt;&#xA;&lt;p&gt;我现在在主电脑上保持wifi关闭，除非我需要传输文件或编辑网页，我在房间的另一边有一台单独的笔记本电脑，用来检查邮件或浏览网页。（具有讽刺意味的是，这是Steve Huffman编写Reddit的电脑。当Steve和Alexis为了慈善拍卖他们的旧笔记本电脑时，我为Y Combinator博物馆购买了它们。）&lt;/p&gt;&#xA;&lt;p&gt;我的规则是，我可以花尽可能多的时间上网，只要我在那台电脑上做。事实证明这已经足够了。当我必须坐在房间的另一边检查邮件或浏览网页时，我会更加意识到它。至少在我的情况下，足够意识到每天很难花超过大约一小时上网。&lt;/p&gt;&#xA;&lt;p&gt;而我的主电脑现在 freed 用于工作。如果你尝试这个技巧，当你的电脑断开互联网连接时，你可能会对它的不同感觉感到震惊。对我来说，坐在一台只能用于工作的电脑前是多么陌生，这让我警醒，因为它显示了我一定浪费了多少时间。&lt;/p&gt;&#xA;&lt;p&gt;哇。我在这台电脑上能做的只是工作。好吧，那我最好工作。&lt;/p&gt;&#xA;&lt;p&gt;这是好的部分。你旧有的坏习惯现在帮助你工作。你已经习惯了一连几个小时坐在那台电脑前。但现在你不能浏览网页或检查邮件。你打算怎么办？你不能只是坐在那里。所以你开始工作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;好的和坏的拖延&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;相关链接：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_spanish.htm&#34;&gt;西班牙语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_arabic.htm&#34;&gt;阿拉伯语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_catalan.htm&#34;&gt;加泰罗尼亚语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_russian.htm&#34;&gt;俄语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>创造者的日程表，管理者的日程表</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/makersschedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/makersschedule/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/makersschedule/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/makersschedule.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/makersschedule.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/makersschedule.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;创造者的日程表管理者的日程表&#34;&gt;创造者的日程表，管理者的日程表&lt;/h1&gt;&#xA;&lt;p&gt;2009年7月&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;&amp;hellip;仅仅意识到有约会，有时就会困扰一整天。&amp;rdquo;&#xA;– 查尔斯·狄更斯&lt;/p&gt;&#xA;&lt;p&gt;程序员如此讨厌会议的一个原因是，他们与其他人的日程表类型不同。会议对他们来说成本更高。&lt;/p&gt;&#xA;&lt;p&gt;有两种类型的日程表，我称之为管理者的日程表和创造者的日程表。管理者的日程表是为老板设计的。它体现在传统的约会簿中，每天被划分为一小时的时间段。如果需要，你可以为单个任务屏蔽几个小时，但默认情况下你每小时都会改变正在做的事情。&lt;/p&gt;&#xA;&lt;p&gt;当你这样使用时间时，与某人会面只是一个实际问题。在你的日程表中找一个空闲的时间段，预约他们，就完成了。&lt;/p&gt;&#xA;&lt;p&gt;大多数有权力的人都在管理者的日程表上。这是指挥的日程表。但还有一种使用时间的方式在创造事物的人中很常见，比如程序员和作家。他们通常更喜欢至少以半天为单位使用时间。你无法在一小时的时间内很好地写作或编程。那 barely 是足够开始的时间。&lt;/p&gt;&#xA;&lt;p&gt;当你按照创造者的日程表工作时，会议是灾难性的。一个会议可以毁掉整个下午，因为它把下午分成两部分，每部分都太小，无法做任何困难的事情。而且你必须记得去参加会议。这对于管理者的日程表上的人来说不是问题。下一个小时总是有事情；唯一的问题是什么。但当创造者的日程表上的人有会议时，他们必须考虑它。&lt;/p&gt;&#xA;&lt;p&gt;对于创造者日程表上的人来说，开会就像抛出异常。它不仅让你从一个任务切换到另一个任务；它改变了你工作的模式。&lt;/p&gt;&#xA;&lt;p&gt;我发现一个会议有时会影响一整天。一个会议通常会破坏至少半天，通过打乱上午或下午。此外，有时还有连锁效应。如果我知道下午会被打断，我在上午开始一些雄心勃勃的事情的可能性就会稍微降低。我知道这听起来可能过于敏感，但如果你是创造者，想想你自己的情况。当想到有一整天的时间可以工作，没有任何约会时，你的精神不会振奋吗？嗯，这意味着当你没有这样的时间时，你的精神会相应地低落。而雄心勃勃的项目按定义接近你能力的极限。士气的小幅下降就足以扼杀它们。&lt;/p&gt;&#xA;&lt;p&gt;每种类型的日程表本身都运作良好。当它们相遇时，问题就出现了。由于大多数有权力的人都在管理者的日程表上，他们有能力让每个人都按照他们的频率共振，如果他们想的话。但更聪明的人会克制自己，如果他们知道为他们工作的一些人需要大块的时间来工作。&lt;/p&gt;&#xA;&lt;p&gt;我们的情况是不寻常的。几乎所有的投资者，包括我认识的所有风险投资家，都在管理者的日程表上。但Y Combinator按照创造者的日程表运行。Rtm、Trevor和我这样做是因为我们一直如此，Jessica也主要是如此，因为她与我们同步。&lt;/p&gt;&#xA;&lt;p&gt;如果开始有更多像我们这样的公司，我不会感到惊讶。我怀疑创始人可能越来越能够抵抗，或至少推迟，转变为管理者，就像几十年前他们开始能够抵抗从牛仔裤换成西装一样。&lt;/p&gt;&#xA;&lt;p&gt;我们如何在创造者的日程表上为这么多创业公司提供建议？通过使用在创造者的日程表中模拟管理者日程表的经典设备：办公时间。我每周几次留出一大块时间来见我们资助的创始人。这些时间块是在我工作日的末尾，我写了一个注册程序，确保给定办公时间内的所有预约都集中在末尾。因为它们在我的一天结束时到来，这些会议从来不会中断。（除非他们的工作日与我的同时结束，会议可能会中断他们的，但既然他们预约了，对他们来说一定是值得的。）在繁忙时期，办公时间有时会变得足够长，以至于压缩了一天，但它们从不中断它。&lt;/p&gt;&#xA;&lt;p&gt;当我们在90年代为自己的创业公司工作时，我发展出了另一个划分一天的技巧。我每天从晚餐编程到大约凌晨3点，因为在晚上没有人能打断我。然后我会睡到大约上午11点，进来工作直到晚餐，我称之为&amp;quot;业务事情&amp;quot;。我从来没有用这些术语思考过，但实际上我每天都有两个工作日，一个在管理者的日程表上，一个在创造者的日程表上。&lt;/p&gt;&#xA;&lt;p&gt;当你按照管理者的日程表工作时，你可以做一些在创造者的日程表上永远不想做的事情：你可以进行试探性会议。你可以见某人只是为了互相认识。如果你的日程表有空闲的时间段，为什么不呢？也许结果你们可以在某种程度上互相帮助。&lt;/p&gt;&#xA;&lt;p&gt;硅谷的商界人士（实际上是整个世界）一直在进行试探性会议。如果你在管理者的日程表上，它们实际上是免费的。它们如此普遍，以至于有独特的语言来提议它们：例如，说你想要&amp;quot;喝杯咖啡&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;但是，如果你在创造者的日程表上，试探性会议的成本非常可怕。这使我们陷入某种困境。每个人都认为，像其他投资者一样，我们在管理者的日程表上运行。所以他们向我们介绍他们认为我们应该见面的人，或者给我们发邮件提议我们喝杯咖啡。在这一点上，我们有两个选择，都不好：我们可以与他们见面，失去半天的工作；或者我们可以尝试避免与他们见面，可能会冒犯他们。&lt;/p&gt;&#xA;&lt;p&gt;直到最近，我们自己对问题的根源还不清楚。我们只是想当然地认为我们必须要么破坏我们的日程表，要么冒犯人。但现在我意识到发生了什么，也许有第三种选择：写一些解释两种类型日程表的东西。也许最终，如果管理者的日程表和创造者的日程表之间的冲突开始被更广泛地理解，它会变得不那么成问题。&lt;/p&gt;&#xA;&lt;p&gt;我们这些在创造者日程表上的人愿意妥协。我们知道我们必须有一定数量的会议。我们只要求那些在管理者日程表上的人理解成本。&lt;/p&gt;&#xA;&lt;p&gt;感谢 Sam Altman、Trevor Blackwell、Paul Buchheit、Jessica Livingston 和 Robert Morris 阅读本文的草稿。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;相关：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如何做你喜欢的事&lt;/li&gt;&#xA;&lt;li&gt;好的和坏的拖延&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>向创始人学习</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/foundersatwork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/foundersatwork/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/foundersatwork/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/foundersatwork.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/foundersatwork.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/foundersatwork.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;向创始人学习&#34;&gt;向创始人学习&lt;/h1&gt;&#xA;&lt;p&gt;2007年1月&lt;/p&gt;&#xA;&lt;p&gt;（Jessica Livingston的《创业者访谈录》前言）&lt;/p&gt;&#xA;&lt;p&gt;显然，短跑运动员在起跑后就达到最高速度，然后其余时间都在减速。赢家减速最少。大多数创业公司也是如此。最早的阶段通常是最多产的。那是他们真正有大创意的时候。想象一下当苹果公司100%的员工都是Steve Jobs或Steve Wozniak时的样子。&lt;/p&gt;&#xA;&lt;p&gt;这个阶段的显著特点是，它与大多数人对商业的看法完全不同。如果你在人们的头脑（或图片库）中寻找代表&amp;quot;商业&amp;quot;的图像，你会得到人们穿着西装、坐在会议桌周围表情严肃的群体、Powerpoint演示文稿、人们为彼此阅读制作厚厚报告的图像。早期创业公司与此完全相反。然而，它们可能是整个经济中最有生产力的部分。&lt;/p&gt;&#xA;&lt;p&gt;为什么会有这种脱节？我认为这里有一个普遍原则在起作用：人们在表现上花费的精力越少，他们在外表上花费的精力就越多以补偿。通常，他们花在看起来令人印象深刻上的精力实际上使他们的表现更差。几年前我读了一篇文章，其中一家汽车杂志改装了某款量产车的&amp;quot;运动&amp;quot;型号，以获得最快可能的静止四分之一英里速度。你知道他们是怎么做的吗？他们切掉了制造商为了使车看起来快而安装在车上所有垃圾。&lt;/p&gt;&#xA;&lt;p&gt;商业就像那辆车一样被破坏了。花在看起来有生产力上的努力不仅是浪费的，而且实际上使组织的生产力降低。例如，西装。西装无助于人们更好地思考。我敢打赌，大多数大公司的高管在周日早上醒来，穿着浴袍下楼喝咖啡时思考得最好。那时你才有创意。想象一下，如果人们能在工作中思考得那么好，公司会是什么样子。在创业公司中人们确实能做到，至少有时如此。（一半时间你处于恐慌状态，因为你的服务器着火了，但另一半时间你的思考深度是大多数人在周日早上独自坐着时才能达到的。）&lt;/p&gt;&#xA;&lt;p&gt;创业公司与在大公司中被视为生产力的大多数其他差异也是如此。然而，传统的专业主义观念对我们的思想有如此强烈的控制，甚至创业创始人都受到影响。在我们的创业公司中，当外人来访时，我们努力显得&amp;quot;专业&amp;quot;。我们会清理办公室，穿更好的衣服，试着安排很多人在正常办公时间在那里。事实上，编程不是由穿着得体的人在干净办公桌前在办公时间内完成的。它是由穿着不得体的人（我因只穿着毛巾编程而臭名昭著）在凌晨2点在堆满垃圾的办公室里完成的。但没有一个访客会理解这一点。即使是投资者，他们应该能够在看到真正的生产力时认出它。甚至我们也受到了传统智慧的影响。我们把自己视为冒名顶替者，尽管完全不专业却成功了。就好像我们创造了一辆一级方程式赛车，但因为看起来不像汽车应该的样子而感到尴尬。&lt;/p&gt;&#xA;&lt;p&gt;在汽车界，至少有一些人知道高性能汽车看起来像一级方程式赛车，而不是带有巨大轮毂和假尾翼固定在行李箱上的轿车。为什么在商业界不是这样？可能是因为创业公司太小了。真正的戏剧性增长发生在创业公司只有三四个人时，所以只有三四个人看到这一点，而成千上万的人看到的是像波音或菲利普莫里斯那样的商业运作方式。&lt;/p&gt;&#xA;&lt;p&gt;这本书可以帮助解决这个问题，向每个人展示到目前为止只有少数人能看到的东西：创业公司第一年发生的事情。这就是真正生产力的样子。这是一级方程式赛车。它看起来很奇怪，但跑得很快。&lt;/p&gt;&#xA;&lt;p&gt;当然，大公司无法做到这些创业公司所做的一切。在大公司中，总会有更多的政治，个人决策的空间更少。但看到创业公司的真实情况至少会向其他组织展示目标是什么。很快的时候可能会到来，不是创业公司试图显得更像企业，而是企业试图显得更像创业公司。那将是一件好事。&lt;/p&gt;&#xA;&lt;p&gt;日文版《创业者访谈录》&lt;/p&gt;&#xA;&lt;p&gt;能够亲身体验成功创业公司第一个月发生的事情的人不会超过几千人。Jessica Livingston让他们告诉我们。所以尽管是访谈格式，但这真的是一本操作指南。它可能是创业创始人能读到的最有价值的单本书籍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>商业可以从开源中学到什么</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/opensource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/opensource/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/opensource/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/opensource.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/opensource.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/opensource.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;商业可以从开源中学到什么&#34;&gt;商业可以从开源中学到什么&lt;/h1&gt;&#xA;&lt;p&gt;2005年8月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自2005年Oscon大会的演讲。）&lt;/p&gt;&#xA;&lt;p&gt;最近，公司对开源的关注越来越多。十年前，微软似乎真的有可能将其垄断扩展到服务器领域。现在可以肯定地说，开源已经阻止了这种情况的发生。最近的一项调查发现，52%的公司正在用Linux服务器替换Windows服务器。[1]&lt;/p&gt;&#xA;&lt;p&gt;我认为，更重要的是这52%是哪些公司。在这一点上，任何提议在服务器上运行Windows的人都应该准备好解释他们对服务器的了解比Google、Yahoo和Amazon多什么。&lt;/p&gt;&#xA;&lt;p&gt;但商业可以从开源中学到的最重要的东西不是关于Linux或Firefox，而是关于产生它们的力量。最终，这些力量将影响的远不止你使用什么软件。&lt;/p&gt;&#xA;&lt;p&gt;我们或许可以通过开源和博客的三角定位来把握这些潜在力量。你可能已经注意到，它们有很多共同之处。&lt;/p&gt;&#xA;&lt;p&gt;像开源一样，博客是人们自己做、免费做、因为他们喜欢而做的事情。像开源黑客一样，博客作者与为钱工作的人竞争，而且经常获胜。确保质量的方法也是一样的：达尔文式的。公司通过防止员工搞砸的规则来确保质量。但当受众可以相互交流时，你就不需要那种规则了。人们只是生产他们想要的任何东西；好的东西传播开来，坏的则被忽视。在这两种情况下，受众的反馈都改进了最好的作品。&lt;/p&gt;&#xA;&lt;p&gt;博客和开源的另一个共同点是Web。人们总是愿意免费做伟大的工作，但在Web之前，接触受众或在项目上合作更加困难。&lt;/p&gt;&#xA;&lt;h2 id=&#34;业余爱好者&#34;&gt;业余爱好者&lt;/h2&gt;&#xA;&lt;p&gt;我认为商业必须学习的最重要新原则是，人们对自己喜欢的东西会工作得更努力。嗯，这对任何人来说都不是新闻。那么我怎么能说商业必须学习它呢？当我说商业不知道这一点时，我的意思是商业结构没有反映这一点。&lt;/p&gt;&#xA;&lt;p&gt;商业仍然反映了一个更古老的模式，以法语工作的词travailleur为例。它有一个英语表亲travail，它的意思是折磨。[2]&lt;/p&gt;&#xA;&lt;p&gt;然而，事实证明这不是关于工作的最后定论。随着社会变得越来越富裕，他们学到的一些关于工作的事情很像他们学到的一些关于饮食的事情。我们现在知道，最健康的饮食是我们的农民祖先因为贫穷而被迫吃的饮食。像丰富的食物一样，只有当你得不到足够的懒惰时，它才似乎令人向往。我认为我们被设计来工作，就像我们被设计吃一定量的纤维一样，如果我们不这样做，我们会感到不舒服。&lt;/p&gt;&#xA;&lt;p&gt;为爱而工作的人有一个名字：业余爱好者。这个词现在有如此坏的内涵，以至于我们忘记了它的词源，尽管它就在我们眼前。&amp;ldquo;Amateur&amp;quot;最初是一个相当恭维的词。但在二十世纪，要成为专业人士，而业余爱好者，根据定义，不是专业人士。&lt;/p&gt;&#xA;&lt;p&gt;这就是为什么商业界对开源的一个教训如此惊讶：为爱而工作的人经常超过为钱而工作的人。用户从Explorer切换到Firefox不是因为想要修改源代码。他们切换是因为它是更好的浏览器。&lt;/p&gt;&#xA;&lt;p&gt;不是微软不努力。他们知道控制浏览器是保持垄断的关键之一。他们面临的问题与他们在操作系统领域面临的问题相同：他们无法支付足够的钱让人们建造比一群有灵感的黑客免费建造的更好的东西。&lt;/p&gt;&#xA;&lt;p&gt;我怀疑专业化一直被高估了——不仅是从为钱工作的字面意义上，还包括形式和超然等内涵。不可思议的是，比如在1970年，我认为专业化主要是一种时尚，是由二十世纪存在的条件驱动的。&lt;/p&gt;&#xA;&lt;p&gt;其中最强大的是&amp;quot;渠道&amp;quot;的存在。引人注目的是，同样的术语用于产品和信息：有分销渠道，以及电视和广播频道。&lt;/p&gt;&#xA;&lt;p&gt;正是这种渠道的狭窄性使专业人士似乎比业余爱好者优越得多。例如，专业记者的工作职位很少，所以竞争确保了普通记者都相当不错。而任何人都可以在酒吧里表达对当前事件的看法。因此，在酒吧里表达意见的普通人与撰写这个主题的记者相比听起来像个白痴。&lt;/p&gt;&#xA;&lt;p&gt;在Web上，发布你想法的门槛甚至更低。你不需要买饮料，他们甚至让孩子进入。数百万人在线发布，他们写作的平均水平，正如你可能预期的，不是很好。这导致媒体中的一些人得出结论，博客不构成太大威胁——博客只是一种时尚。&lt;/p&gt;&#xA;&lt;p&gt;实际上，时尚的是&amp;quot;博客&amp;quot;这个词，至少是印刷媒体现在使用它的方式。他们所说的&amp;quot;博主&amp;quot;不是以网络日志格式发布的人，而是在线发布的任何人。随着Web成为默认的发布媒介，这将变成一个问题。所以我想为在线发布的人建议一个替代词。怎么样用&amp;quot;作家&amp;rdquo;？&lt;/p&gt;&#xA;&lt;p&gt;那些因为在线写作的平均质量低而忽视它的印刷媒体人士忽略了一个重要观点：没有人读普通的博客。在渠道的旧世界里，谈论平均质量是有意义的，因为不管你喜欢与否，你得到的就是那个。但现在你可以阅读任何你想要的作家。所以在线写作的平均质量不是印刷媒体竞争的对象。他们竞争的是在线最好的写作。而且，像微软一样，他们正在输。&lt;/p&gt;&#xA;&lt;p&gt;我从自己作为读者的经历知道这一点。虽然大多数印刷出版物都在线，但我可能在个人网站上读两三篇文章，才会在报纸或杂志的网站上读一篇。&lt;/p&gt;&#xA;&lt;p&gt;当我读，比如说，《纽约时报》的故事时，我从不通过《纽约时报》首页到达它们。我大多通过聚合器如Google News、Slashdot或Delicious找到它们。聚合器显示了你可以比渠道做得好多少。《纽约时报》首页是为《纽约时报》工作的人写的文章列表。Delicious是有趣的文章列表。只有现在你可以并排看到两者，你才注意到重叠是多么少。&lt;/p&gt;&#xA;&lt;p&gt;印刷媒体中的大多数文章都很无聊。例如，总统注意到大多数选民现在认为入侵伊拉克是个错误，所以他向全国发表演讲以争取支持。那有什么咬人的呢？我没有听演讲，但我可能可以准确告诉你他说了什么。像这样的演讲，从最字面的意义上说，不是新闻：里面没有什么新东西。[3]&lt;/p&gt;&#xA;&lt;p&gt;在大多数关于出错的&amp;quot;新闻&amp;quot;中，除了名字和地点，也没有什么新东西。一个孩子被绑架；有龙卷风；渡轮沉没；有人被鲨鱼咬伤；小型飞机坠毁。你从这些故事中学到了什么关于世界的事情？绝对没有。它们是离群的数据点；使它们引人入胜的东西也使它们变得无关紧要。&lt;/p&gt;&#xA;&lt;p&gt;就像在软件中一样，当专业人士生产这样的垃圾时，如果业余爱好者能做得更好，也就不足为奇了。成也渠道，败也渠道：如果你依赖寡头垄断，你会陷入难以克服的坏习惯，当你突然遇到竞争时。[4]&lt;/p&gt;&#xA;&lt;h2 id=&#34;工作场所&#34;&gt;工作场所&lt;/h2&gt;&#xA;&lt;p&gt;博客和开源软件的另一个共同点是它们通常是在家工作的人制作的。这可能看起来并不令人惊讶。但应该是。这相当于一架自制飞机击落F-18的建筑上的等价物。公司花费数百万建造办公楼，只为一个目的：作为工作场所。然而，在自己家里工作的人，他们的家甚至不是设计为工作场所的，最终却更有生产力。&lt;/p&gt;&#xA;&lt;p&gt;这证明了许多人怀疑的事情。普通办公室是完成工作的糟糕地方。使办公室变坏的很多东西恰恰是我们与专业化相关的品质。办公室的无菌性应该是为了暗示效率。但暗示效率和实际上有效率是不同的事情。&lt;/p&gt;&#xA;&lt;p&gt;普通工作场所的氛围对生产力来说就像画在汽车侧面的火焰对速度一样。而且不仅仅是办公室看起来很 bleak。人们的行为方式也同样糟糕。&lt;/p&gt;&#xA;&lt;p&gt;在初创公司中情况不同。初创公司通常从公寓开始。他们没有匹配的米色小隔间，而是有各种他们买来的二手家具。他们工作时间不规律，穿着最随意的衣服。他们看任何他们想在线看的东西，而不担心是否&amp;quot;工作安全&amp;quot;。办公室愉快、平淡的语言被邪恶的幽默所取代。你知道吗？公司在这个阶段可能是有史以来最有生产力的。&lt;/p&gt;&#xA;&lt;p&gt;也许这不是巧合。也许专业化的某些方面实际上是一个净损失。&lt;/p&gt;&#xA;&lt;p&gt;对我来说，传统办公室最令人沮丧的方面是你应该在特定时间在那里。公司里通常有几个人真的必须这样，但大多数员工工作时间固定是因为公司无法衡量他们的生产力。&lt;/p&gt;&#xA;&lt;p&gt;办公时间背后的基本想法是，如果你不能让人们工作，你至少可以防止他们玩乐。如果员工每天必须在建筑物里待一定数量的小时，并且在那里被禁止做非工作的事情，那么他们一定是在工作。理论上。在实践中，他们花费大量时间在无人地带，在那里他们既不工作也不玩乐。&lt;/p&gt;&#xA;&lt;p&gt;如果你能衡量人们做了多少工作，许多公司不需要任何固定的工作日。你可以说：这是你必须做的。无论何时何地，只要你喜欢就做。如果你的工作需要与公司里的其他人交谈，那么你可能需要在这里一定时间。否则我们不关心。&lt;/p&gt;&#xA;&lt;p&gt;这可能看起来乌托邦，但这就是我们告诉来为我们公司工作的人的话。没有固定的办公时间。我从不早于上午11点出现。但我们说这个不是为了仁慈。我们说：如果你在这里工作，我们期望你完成很多事情。不要试图仅仅通过多在这里来欺骗我们。&lt;/p&gt;&#xA;&lt;p&gt;面子时间模式的问题不仅令人沮丧，而且假装工作的人打断了实际工作的人。我确信面子时间模式是大型组织有这么多会议的主要原因。人均而言，大型组织完成的很少。然而所有这些人每天必须在现场至少八小时。当这么多时间进入一端而如此少的成就从另一端出来时，总会有所让步。而会议是填补松懈的主要机制。&lt;/p&gt;&#xA;&lt;p&gt;我曾经做了一份朝九晚五的常规工作，我记得很清楚会议期间 strange, cozy的感觉。因为新奇，我很清楚地意识到我正在为编程获得报酬。这似乎令人惊讶，好像我桌上有一台机器，无论我做什么，每两分钟吐出一美元纸币。即使我在浴室里！但因为想象中的机器一直在运行，我觉得我应该总是在工作。所以会议感觉令人愉快地放松。它们算作工作，就像编程一样，但它们容易得多。你只需要坐着看起来注意力集中。&lt;/p&gt;&#xA;&lt;p&gt;会议就像有网络效应的鸦片。电子邮件在较小程度上也是如此。除了时间的直接成本外，还有碎片化的成本——把人们的一天分解成太小而无法利用的碎片。&lt;/p&gt;&#xA;&lt;p&gt;你可以通过突然移除某些东西来看你对它有多依赖。所以对于大公司，我提议以下实验。留出一天禁止会议——每个人都必须整天坐在办公桌前，在没有中断的情况下工作，做他们可以在不与任何人交谈的情况下做的事情。大多数工作需要一定量的沟通，但我确信许多员工可以找到八小时的自己可以做的事情。你可以称之为&amp;quot;工作日&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;假装工作的另一个问题是它通常看起来比真实工作更好。当我写作或编程时，我花在思考上的时间和实际打字的时间一样多。一半的时间我坐着喝茶，或在附近散步。这是一个关键阶段——这是想法来源的地方——然而在大多数办公室里，我会感到内疚，因为其他人看起来都很忙。&lt;/p&gt;</description>
    </item>
    <item>
      <title>好坏拖延症</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/procrastination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/procrastination/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/procrastination/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/procrastination.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/procrastination.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/procrastination.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;好坏拖延症&#34;&gt;好坏拖延症&lt;/h1&gt;&#xA;&lt;p&gt;2005年12月&lt;/p&gt;&#xA;&lt;p&gt;我认识的最令人印象深刻的人都是糟糕的拖延症患者。那么拖延症难道不总是坏事吗？&lt;/p&gt;&#xA;&lt;p&gt;大多数写拖延症的人写的是如何治愈它。但严格来说，这是不可能的。你可以做无限多的事情。无论你在做什么，你都没有在做其他事情。所以问题不是如何避免拖延，而是如何拖延得好。&lt;/p&gt;&#xA;&lt;p&gt;拖延症有三种变体，取决于你做什么而不是工作：你可以做（a）什么也不做，（b）不太重要的事情，或（c）更重要的事情。我认为最后一种是好的拖延症。&lt;/p&gt;&#xA;&lt;p&gt;那就是&amp;quot;心不在焉的教授&amp;quot;，他在思考一些有趣问题时忘记刮胡子，忘记吃饭，甚至忘记看自己要去哪里。他的心不在日常世界，因为在另一个世界里努力工作。&lt;/p&gt;&#xA;&lt;p&gt;这就是为什么我认识的最令人印象深刻的人都是拖延症患者。他们是C型拖延症患者：他们推迟做小事情来做大事情。&lt;/p&gt;&#xA;&lt;p&gt;什么是&amp;quot;小事情？&amp;ldquo;大致来说，就是没有任何机会在你讣告中提到的工作。当时很难说什么最终会成为你最好的工作（会是你的关于苏美尔神庙建筑的杰作，还是你用笔名写的侦探小说？），但有一整类任务你可以安全地排除：刮胡子、洗衣服、打扫房子、写感谢信——任何可能被称为杂事的事情。&lt;/p&gt;&#xA;&lt;p&gt;好的拖延是避免杂事来做真正的工作。&lt;/p&gt;&#xA;&lt;p&gt;至少在某种意义上是好的。想要你做杂事的人不会认为这是好的。但如果你想做成任何事，你可能必须惹恼他们。看起来最温和的人，如果他们想做真正的工作，在避免杂事方面都有某种程度的无情。&lt;/p&gt;&#xA;&lt;p&gt;有些杂事，比如回信，如果你忽略它们就会消失（也许连朋友一起消失）。其他的，比如修剪草坪或提交纳税申报单，如果你推迟只会变得更糟。原则上推迟第二种杂事应该不起作用。你最终必须做任何事情。为什么不（如逾期通知总是说的）现在就做？&lt;/p&gt;&#xA;&lt;p&gt;即使推迟那些杂事也是有回报的，因为真正的工作需要两样杂事不需要的东西：大块的时间和正确的心情。如果你被某个项目所启发，把接下来几天应该做的一切都抛在一边去做它，可能是一个净胜利。是的，当你最终去做那些杂事时，它们可能会花费你更多时间。但如果你在那几天里完成了很多工作，你的净生产力会更高。&lt;/p&gt;&#xA;&lt;p&gt;事实上，这可能不是程度上的差异，而是种类上的差异。可能有些类型的工作只能在长期不间断的时间段内完成，当灵感来临时，而不是尽职地在安排好的小块时间里完成。经验上似乎是这样。当我想到我认识的做成伟大事情的人时，我不想象他们尽职地在待办事项清单上划掉项目。我想象他们偷偷溜去做一些新想法。&lt;/p&gt;&#xA;&lt;p&gt;相反，强迫某人同步执行杂事必然会限制他们的生产力。中断的成本不仅仅是它花费的时间，还在于它把两边的时间都切成两半。你可能一天只需要打断某人几次，他们就完全无法处理难题了。&lt;/p&gt;&#xA;&lt;p&gt;我一直在想为什么创业公司在最开始时最有效率，那时他们只是一对在公寓里的人。主要原因可能是还没有人打断他们。理论上，当创始人最终有足够的钱雇人帮他们做一些工作时是好的。但过度工作可能比被打断更好。一旦你用普通办公室员工稀释了创业公司——用B型拖延症患者——整个公司开始以他们的频率共振。他们是中断驱动的，很快你也是了。&lt;/p&gt;&#xA;&lt;p&gt;杂事在扼杀伟大项目方面如此有效，以至于很多人为此目的使用它们。例如，决定写小说的人会突然发现房子需要打扫。没能写出小说的人不是整天坐在白纸前什么都不写。他们通过喂猫、出去买公寓需要的东西、见朋友喝咖啡、检查电子邮件来做到这一点。&amp;ldquo;我没有时间工作，&amp;ldquo;他们说。他们确实没有；他们确保了这一点。&lt;/p&gt;&#xA;&lt;p&gt;（还有一种变体是没有人可以工作。解决方法是参观名人工作的地方，看看它们多么不合适。）&lt;/p&gt;&#xA;&lt;p&gt;我在某个时候或另一个时候都使用过这两个借口。在过去的20年里，我学到了很多让自己工作的技巧，但即使现在我也不能一直赢。有些天我做真正的工作。其他天被杂事吃掉。而且我知道这通常是我的错：我让杂事吃掉了一天，以避免面对一些难题。&lt;/p&gt;&#xA;&lt;p&gt;最危险的拖延形式是未被承认的B型拖延，因为它感觉不像拖延。你&amp;quot;在把事情做完。&amp;ldquo;只是错误的事情。&lt;/p&gt;&#xA;&lt;p&gt;任何关于拖延的建议，如果专注于在待办事项清单上划掉项目，而没有考虑待办事项清单本身可能是B型拖延的一种形式，那么它不仅不完整，而且是 positively 误导的。事实上，可能性这个词太弱了。几乎每个人的都是。除非你在做你能做的最大的事情，否则你就是在B型拖延，无论你完成了多少。&lt;/p&gt;&#xA;&lt;p&gt;在他著名的论文《你和你的研究》（我推荐给任何有抱负的人，无论他们在做什么）中，Richard Hamming 建议你问自己三个问题：你领域中最重要的问题是什么？你在做其中之一吗？为什么不？Hamming 在贝尔实验室时开始问这样的问题。原则上那里的任何人都应该能够在他们领域中最重要的问题上工作。也许不是每个人都能对世界产生同样显著的影响；我不知道；但无论你的能力如何，都有项目能扩展它们。所以Hamming的练习可以概括为：你能做的最好的事情是什么，你为什么不做？大多数人会回避这个问题。我自己也回避；我看到它在页面上，迅速移到下一句。Hamming 曾经四处真正问人们这个问题，这并没有让他受欢迎。但这是任何有抱负的人都应该面对的问题。&lt;/p&gt;&#xA;&lt;p&gt;问题是，你最终可能会用这个饵钩上一条非常大的鱼。要做好工作，你需要做的不仅仅是找到好项目。一旦你找到了它们，你必须让自己去工作，这可能很难。问题越大，越难让自己去工作。&lt;/p&gt;&#xA;&lt;p&gt;当然，人们发现很难在特定问题上工作的主要原因是他们不喜欢它。当你年轻的时候，特别是，你经常发现自己做的工作不是真正喜欢的——例如，因为它看起来令人印象深刻，或者因为你被分配去做它。大多数研究生被卡在他们不喜欢的大问题上工作，因此研究生院与拖延症同义。&lt;/p&gt;&#xA;&lt;p&gt;但即使你喜欢你所做的工作，让自己在小问题上工作也比在大问题上工作更容易。为什么？为什么在大问题上工作如此困难？一个原因是你在可预见的未来可能得不到任何回报。如果你做一些一两天就能完成的工作，你可以期望很快就有很好的成就感。如果回报在无限远的未来，它似乎不那么真实。&lt;/p&gt;&#xA;&lt;p&gt;人们不在大项目上工作的另一个原因是，具有讽刺意味的，害怕浪费时间。如果他们失败了怎么办？那么他们花在上面的所有时间都浪费了。（事实上可能不会，因为在困难项目上的工作几乎总会通向某个地方。）&lt;/p&gt;&#xA;&lt;p&gt;但大问题的麻烦不能只是它们承诺没有立即的回报，可能会让你浪费大量时间。如果只是那样，它们不会比去看姻亲更糟糕。比那更多。大问题是可怕的。面对它们有几乎身体的痛苦。就像把真空吸尘器接到你的想象力上。你所有的初始想法立即被吸走，你不再有更多了，然而真空吸尘器仍然在吸。&lt;/p&gt;&#xA;&lt;p&gt;你不能太直接地看大问题的眼睛。你必须有点斜向地接近它。但你必须把角度调整得正好：你必须足够直接地面对大问题，捕捉到从它辐射出的一些兴奋，但不能太多以至于它使你瘫痪。一旦你开始，就可以收紧角度，就像帆船一旦开始航行就可以更靠近风航行。&lt;/p&gt;&#xA;&lt;p&gt;如果你想做大事，你似乎必须欺骗自己去做。你必须做可能长成大事的小事情，或者做越来越大的事情，或者与合作者分担道德负担。依赖这样的技巧不是软弱的标志。最好的工作就是以这种方式完成的。&lt;/p&gt;&#xA;&lt;p&gt;当我谈到那些设法让自己在大问题上工作的人时，我发现他们都抛开杂事，都为此感到内疚。我不认为他们应该感到内疚。要做的事情比任何人能做的都多。所以做他们能做的最好工作的人必然会留下很多未完成的杂事。为此感到难过似乎是个错误。&lt;/p&gt;&#xA;&lt;p&gt;我认为&amp;quot;解决&amp;quot;拖延症问题的方法是让快乐拉着你，而不是让待办事项清单推着你。做一个你真正喜欢的有抱负的项目，尽可能靠近风航行，你会留下正确的事情未完成。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;感谢 Trevor Blackwell、Jessica Livingston 和 Robert Morris 阅读本文草稿。&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;罗马尼亚语翻译&lt;/strong&gt; | &lt;strong&gt;俄语翻译&lt;/strong&gt; | &lt;strong&gt;希伯来语翻译&lt;/strong&gt; | &lt;strong&gt;德语翻译&lt;/strong&gt; | &lt;strong&gt;葡萄牙语翻译&lt;/strong&gt; | &lt;strong&gt;意大利语翻译&lt;/strong&gt; | &lt;strong&gt;日语翻译&lt;/strong&gt; | &lt;strong&gt;西班牙语翻译&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何努力工作</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/hwh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/hwh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/hwh/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/hwh.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/hwh.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/hwh.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;如何努力工作&#34;&gt;如何努力工作&lt;/h1&gt;&#xA;&lt;p&gt;2021年6月&lt;/p&gt;&#xA;&lt;p&gt;似乎没有什么可学的关于如何努力工作的知识。任何上过学的人都知道这意味着什么，即使他们选择不这样做。有12岁的孩子工作得非常努力。然而，当我问我现在是否比在学校时更了解努力工作时，答案肯定是肯定的。&lt;/p&gt;&#xA;&lt;p&gt;我知道的一件事是，如果你想做伟大的事情，你必须非常努力地工作。我小时候并不确定这一点。功课的难度各不相同；人们不总是必须超级努力才能做得好。而且一些著名成年人所做的事情，他们似乎做得毫不费力。也许，有什么方法可以通过纯粹的才华来逃避努力工作？现在我知道那个问题的答案了。没有。&lt;/p&gt;&#xA;&lt;p&gt;某些科目似乎容易的原因是我的学校标准很低。著名成年人似乎毫不费力地做事情的原因是多年的练习；他们让它看起来很容易。&lt;/p&gt;&#xA;&lt;p&gt;当然，那些著名成年人通常也很有天赋。伟大的工作有三个要素：天赋、练习和努力。只有其中两个你可以做得相当好，但要做最好的工作你需要所有三个：你需要伟大的天赋，大量的练习，并且非常努力。[1]&lt;/p&gt;&#xA;&lt;p&gt;例如，比尔·盖茨是他那个时代商界最聪明的人之一，但他也是最努力工作的人之一。&amp;ldquo;我在二十多岁时从来没有休息过一天，&amp;ldquo;他说。&amp;ldquo;一天都没有。&amp;ldquo;莱昂内尔·梅西也是如此。他很有天赋，但当他的青少年教练谈论他时，他们记得的不是他的才华，而是他的奉献和获胜的欲望。如果必须选择，P.G.伍德豪斯可能会获得我对20世纪最佳英语作家的投票。当然没有人让这看起来更容易。但没有人比他更努力。74岁时，他写道&lt;/p&gt;&#xA;&lt;p&gt;对于我的每一本新书，我有，可以说，这次我在文学花园里挑了一个柠檬的感觉。真的，这是好事。我想。让一个人保持警觉，让一个人把每句话重写十次。或者在许多情况下二十次。&lt;/p&gt;&#xA;&lt;p&gt;听起来有点极端，你认为。然而比尔·盖茨听起来更极端。十年中没有一天休息？这两个人的天赋几乎和任何人可能拥有的一样多，然而他们也工作得和任何人可能努力的一样。你需要两者兼得。&lt;/p&gt;&#xA;&lt;p&gt;这似乎很明显，然而在实践中我们发现这有点难以把握。才华和努力工作之间有一种微妙的异或。这部分来自流行文化，在那里它似乎运行得很深，部分来自离群值如此罕见的事实。如果伟大的才华和伟大的动力都是罕见的，那么两者兼得的人就是罕见的平方。你遇到的大多数拥有大量其中一个的人会有较少的另一个。但如果你想成为离群值，你需要两者兼得。由于你无法真正改变你拥有多少天赋，在实践中，做伟大的工作，尽可能地说，归结为非常努力地工作。&lt;/p&gt;&#xA;&lt;p&gt;如果你有明确定义的、外部强加的目标，就像你在学校时那样，努力工作是直接的。这有一些技巧：你必须学会不对自己撒谎，不拖延（这是对自己撒谎的一种形式），不分心，在事情出错时不放弃。但这种纪律水平似乎相当小的孩子也能达到，如果他们想要的话。&lt;/p&gt;&#xA;&lt;p&gt;我从小孩时代学到现在的是如何朝着既不明确定义也不是外部强加的目标努力。如果你想做真正伟大的事情，你可能必须两者都学会。&lt;/p&gt;&#xA;&lt;p&gt;其中最基本的水平就是简单地觉得你应该在没有人告诉你的情况下工作。现在，当我不努力工作时，警钟就会响起。当我努力工作时，我不能确定我在取得进展，但当我不努力时，我可以确定我一事无成，这感觉很糟糕。[2]&lt;/p&gt;&#xA;&lt;p&gt;学习这一点没有一个单一的时刻。像大多数小孩子一样，我喜欢学习或做新事物时的成就感。随着我长大，这变成了当我没有取得任何成就时的一种厌恶感。我有一个可以精确确定日期的里程碑是我13岁时停止看电视。&lt;/p&gt;&#xA;&lt;p&gt;和我谈过的几个人记得在这个年龄左右开始认真对待工作。当我问帕特里克·克里森什么时候开始觉得闲散令人厌恶时，他说我想大约13或14岁。我有一个大约那时的清晰记忆，坐在客厅里，盯着外面，想知道为什么我在浪费我的暑假。也许青春期会发生一些变化。这是有道理的。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，认真对待工作的最大障碍可能是学校，它使工作（他们称之为工作）显得无聊和无意义。在能够全心全意地渴望做之前，我必须学会什么是真正的工作。这花了一段时间，因为即使在大学里，很多工作也是毫无意义的；有整个部门是毫无意义的。但当我了解到真正工作的形状时，我发现我对它的渴望就像它们彼此天生一对一样嵌入其中。&lt;/p&gt;&#xA;&lt;p&gt;我怀疑大多数人必须在爱工作之前学会什么是工作。哈代在《一个数学家的辩白》中雄辩地写道：&lt;/p&gt;&#xA;&lt;p&gt;我不记得作为一个男孩时对数学有任何热情，我可能有的关于数学家职业的观念远非高尚。我从考试和奖学金的角度思考数学：我想击败其他男孩，这似乎是我能最果断地做到这一点的方式。&lt;/p&gt;&#xA;&lt;p&gt;他直到大学中途读到乔丹的《分析教程》时才学会数学的真正含义。&lt;/p&gt;&#xA;&lt;p&gt;我永远不会忘记阅读那杰出著作时的惊讶，那是我这一代许多数学家的第一个灵感，并且在阅读它时第一次学会了数学的真正含义。&lt;/p&gt;&#xA;&lt;p&gt;为了理解什么是真正的工作，你需要学会忽略两种独立的虚假。一种是哈代在学校遇到的那种。当科目被调整教给孩子时会被扭曲——通常扭曲到与实际从业者所做的工作完全不同。[3] 另一种虚假是某些类型工作固有的。某些类型的工作本质上是虚假的，或者充其量只是忙碌的工作。&lt;/p&gt;&#xA;&lt;p&gt;真正的工作有一种实在性。并不都是写作《原理》，但都感觉是必要的。这是一个模糊的标准，但它是故意模糊的，因为它必须涵盖许多不同的类型。[4]&lt;/p&gt;&#xA;&lt;p&gt;一旦你了解真正工作的形状，你必须学会每天花多少小时在上面。你不能通过简单地醒着的每一刻都工作来解决这个问题，因为在许多类型的工作中，有一个点之后结果的质量会开始下降。&lt;/p&gt;&#xA;&lt;p&gt;这个限制取决于工作类型和个人。我做过几种不同的工作，每种的限制都不同。对于较难的写作或编程类型，我的限制是每天大约五小时。而当我经营创业公司时，我可以一直工作。至少在我做的那三年是这样；如果我继续更久，我可能需要偶尔休假。[5]&lt;/p&gt;&#xA;&lt;p&gt;找到限制的唯一方法是超越它。培养对你所做工作质量的敏感性，然后你会注意到它是否因为你工作太努力而下降。诚实在这里是关键的，在两个方向上：你必须注意你什么时候懒惰，但也要注意你什么时候工作太努力。如果你认为工作太努力有什么值得钦佩的，把那个想法从头脑中去掉。你不仅得到更差的结果，而且是因为你在炫耀而得到它们——如果不是对别人，那么是对自己。[6]&lt;/p&gt;&#xA;&lt;p&gt;找到努力工作的限制是一个持续的、正在进行的过程，不是你只做一次的事情。工作的难度和你做它的能力都可以随时变化，所以你需要不断判断你有多努力和你做得如何。&lt;/p&gt;&#xA;&lt;p&gt;然而，努力并不意味着不断推动自己去工作。也许有些人这样做，但我认为我的经历是相当典型的，我只需要偶尔在开始项目或遇到某种阻碍时推动自己。那是我有拖延危险的时候。但一旦我开始滚动，我倾向于继续前进。&lt;/p&gt;&#xA;&lt;p&gt;让我继续前进的动力取决于工作类型。当我在Viaweb工作时，我是被对失败的恐惧驱动的。那时我几乎没有拖延，因为总是有事情需要做，如果我能通过做它在我和追逐的野兽之间拉开更多距离，为什么要等？[7] 而现在驱动我写论文的是论文中的缺陷。在论文之间，我会烦恼几天，像一只狗在决定确切躺在哪里时绕圈。但一旦我开始一篇，我不必推动自己去工作，因为总是有一些错误或遗漏已经在推动我。&lt;/p&gt;&#xA;&lt;p&gt;我确实做了一些努力专注于重要话题。许多问题中心有一个硬核，周围是较容易的东西。努力工作意味着尽可能朝着中心瞄准。有些日子你可能不能；有些日子你只能处理较容易的、外围的东西。但你应该总是尽可能接近中心瞄准而不停滞。&lt;/p&gt;&#xA;&lt;p&gt;你人生要做什么这个更大的问题是这些有硬核的问题之一。中心有重要的问题，这些问题往往是困难的，边缘有不那么重要、较容易的问题。因此，除了处理特定问题涉及的小的、日常调整外，你偶尔必须做出大的、终身规模的调整，关于做哪种类型的工作。规则是相同的：努力工作意味着朝着中心瞄准——朝着最雄心勃勃的问题。&lt;/p&gt;&#xA;&lt;p&gt;然而，我所说的中心是指实际的中心，而不仅仅是当前关于中心的共识。关于哪些问题最重要的共识经常是错误的，无论是在一般意义上还是在特定领域内。如果你不同意它，而你是对的，这可能代表一个做新事情的宝贵机会。&lt;/p&gt;&#xA;&lt;p&gt;更雄心勃勃的工作类型通常会更难，但虽然你不应该对此否认，你也不应该把困难作为决定做什么的不谬指南。如果你发现某种雄心勃勃的工作对你来说是便宜的，意思是它比别人更容易，要么是因为你碰巧拥有的能力，要么是因为你发现的新方法，或者仅仅是因为你对它更兴奋，那么一定要做那个。一些最好的工作是由那些找到做困难事情的简单方法的人完成的。&lt;/p&gt;&#xA;&lt;p&gt;除了学习真正工作的形状外，你需要弄清楚你适合哪种类型。这不仅仅意味着弄清楚哪种类型最适合你的自然能力；这不意味着如果你7英尺高，你必须打篮球。你适合的不仅取决于你的才华，而且可能更重要的是你的兴趣。对一个话题的深层兴趣让人们比任何纪律都能让他们更努力地工作。&lt;/p&gt;&#xA;&lt;p&gt;发现你的兴趣可能比发现你的才华更难。才华的类型比兴趣少，它们在童年早期就开始被判断，而对一个话题的兴趣是一种微妙的东西，可能要到二十多岁，甚至更晚才能成熟。这个话题甚至可能更早不存在。另外有一些强大的错误来源你需要学会忽略。你真的对x感兴趣吗，还是你想做它因为你会赚很多钱，或者因为别人会对你印象深刻，或者因为你父母想要你做？[8]&lt;/p&gt;&#xA;&lt;p&gt;弄清楚做什么工作的难度因人而异。这是我从孩提时代起学到的关于工作的最重要的事情之一。作为一个孩子，你得到印象每个人都有一个使命，他们所要做的就是弄清楚它是什么。在电影中是这样，在给孩子的精简传记中也是这样。有时在现实生活中也是这样。有些人在孩童时就弄清楚要做什么并且就去做，像莫扎特。但其他人，像牛顿，不安分地从一种工作转向另一种。也许回顾中我们可以识别一个作为他们的使命——我们可以希望牛顿花更多时间在数学和物理上，更少时间在炼金术和神学上——但这是由后见之偏误引起的幻觉。没有他能听到的声音呼唤他。&lt;/p&gt;&#xA;&lt;p&gt;因此，虽然有些人的生活快速收敛，但会有其他人的生活永远不会收敛。对于这些人来说，弄清楚做什么工作与其说是努力工作的前奏，不如说是它的一个持续部分，像一组联立方程之一。对于这些人，我前面描述的过程有第三个组成部分：除了测量你工作多努力和你做得如何外，你必须思考是否应该继续在这个领域工作或切换到另一个。如果你工作努力但没有得到足够好的结果，你应该切换。这样表达听起来很简单，但在实践中非常困难。你不应该在第一天仅仅因为你工作努力但没有取得任何进展就放弃。你需要给自己时间开始。但多少时间？如果进行顺利的工作停止顺利，你应该做什么？那时你给自己多少时间？[9]&lt;/p&gt;&#xA;&lt;p&gt;什么甚至算作好结果？这可能真的很难决定。如果你在探索一个很少有人工作过的领域，你甚至可能不知道好结果是什么样子。历史充满了人们误判他们工作重要性的例子。&lt;/p&gt;&#xA;&lt;p&gt;检验做某事是否值得的最好标准是你是否觉得它有趣。这听起来像是一个危险的主观标准，但它可能是你能得到的最准确的。你是在这些东西上工作的人。谁比你处于更好的位置来判断它是否重要，什么比它是否有趣更好地预测它的重要性？&lt;/p&gt;&#xA;&lt;p&gt;然而，为了使这个检验有效，你必须对自己诚实。确实，这是关于努力工作整个问题最引人注目的事情：在每一点上它如何取决于对自己诚实。&lt;/p&gt;&#xA;&lt;p&gt;努力工作不仅仅是你拨到11的表盘。它是一个复杂的、动态的系统，必须在每一点都正确调整。你必须了解真正工作的形状，清楚地看到你最擅长哪种类型，尽可能接近它的真实核心瞄准，在每一刻准确判断你能够做什么和你做得如何，并且每天投入尽可能多的时间而不损害结果的质量。这个网络太复杂了而无法欺骗。但如果你始终诚实和有洞察力，它会自动呈现最佳形状，你会以很少有人具有的方式富有成效。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 在《天才的车票理论》中我说伟大工作的三个要素是天赋、决心和兴趣。这是前一阶段的公式；决心和兴趣产生练习和努力。&lt;/p&gt;&#xA;&lt;p&gt;[2] 我的意思是以天为分辨率，而不是小时。你经常在不工作的时候取得进展，意思是问题的解决方案在你淋浴时来到你，甚至在你睡觉时，但那只是因为你前一天在努力工作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何浪费时间和金钱</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/selfindulgence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/selfindulgence/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/selfindulgence/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/selfindulgence.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/selfindulgence.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/selfindulgence.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;如何浪费时间和金钱&#34;&gt;如何浪费时间和金钱&lt;/h1&gt;&#xA;&lt;p&gt;2010年7月&lt;/p&gt;&#xA;&lt;p&gt;当我们在1998年出售我们的创业公司时，我突然得到了很多钱。现在我必须考虑我以前不必考虑的事情：如何不失去它。我知道从富有到贫穷是可能的，就像从贫穷到富有是可能的。但是，虽然我过去几年花了很多时间研究从贫穷到富有的途径，但我对从富有到贫穷的途径几乎一无所知。现在，为了避免它们，我必须了解它们在哪里。&lt;/p&gt;&#xA;&lt;p&gt;所以我开始关注财富是如何失去的。如果你小时候问我富人如何变得贫穷，我会说是因为花光了所有的钱。这就是书籍和电影中的情况，因为这是色彩斑斓的方式。但事实上，大多数财富失去的方式不是通过过度支出，而是通过糟糕的投资。&lt;/p&gt;&#xA;&lt;p&gt;很难在不注意的情况下花掉一笔财富。一个品味普通的人会发现很难在不想&amp;quot;哇，我花了很多钱&amp;quot;的情况下花掉超过几万美元。而如果你开始交易衍生品，你可以在眨眼之间失去一百万美元（实际上是你想要的任何数量）。&lt;/p&gt;&#xA;&lt;p&gt;在大多数人的心目中，在奢侈品上花钱会引发警报，而投资不会。奢侈品似乎很自我放纵。除非你是通过继承或赢得彩票获得这笔钱，否则你已经彻底接受过自我放纵会导致麻烦的训练。投资绕过了这些警报。你不是在花钱；你只是把它从一个资产转移到另一个资产。这就是为什么试图向你推销昂贵东西的人说&amp;quot;这是一项投资&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;解决方案是开发新的警报。这可能是一个棘手的业务，因为虽然防止你过度支出的警报如此基本，甚至可能存在于我们的DNA中，但防止你做出糟糕投资的警报必须学习，有时相当违反直觉。&lt;/p&gt;&#xA;&lt;p&gt;几天前我意识到了令人惊讶的事情：时间的情况与金钱非常相似。失去时间的最危险方式不是花在娱乐上，而是花在做假工作上。当你花时间娱乐时，你知道你在自我放纵。警报很快就会开始响起。如果有一天早上我醒来坐在沙发上看了一整天电视，我会感觉有什么事情 terribly 错了。光是想到这个就让我畏缩。在沙发上看电视2小时后我就开始感到不舒服，更不用说一整天了。&lt;/p&gt;&#xA;&lt;p&gt;然而，我确实有过一些日子，我本可以整天坐在电视前——在这些日子的最后，如果我问自己那天完成了什么，答案会是：基本上，什么都没有。这些日子后我也感觉很糟糕，但不像我整天在沙发上看电视那样糟糕。如果我整天看电视，我会感觉自己在堕入地狱。但在那些我没有完成任何事情的日子里，同样的警报不会响起，因为我做的事情表面上看起来像是真正的工作。例如，处理电子邮件。你坐在办公桌前做这件事。这并不有趣。所以一定是工作。&lt;/p&gt;&#xA;&lt;p&gt;与金钱一样，避免享受不再足以保护你。这可能足以保护狩猎采集者，也许是所有前工业社会。所以自然和 nurture 结合起来让我们避免自我放纵。但世界变得更加复杂：现在最危险的陷阱是新的行为，它们通过模仿更良性的类型来绕过我们关于自我放纵的警报。最糟糕的是，它们甚至不好玩。&lt;/p&gt;&#xA;&lt;p&gt;感谢 Sam Altman、Trevor Blackwell、Patrick Collison、Jessica Livingston 和 Robert Morris 阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>将程序装在脑中</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/head/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/head/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/head.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/head.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/head.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;将程序装在脑中&#34;&gt;将程序装在脑中&lt;/h1&gt;&#xA;&lt;p&gt;2007年8月&lt;/p&gt;&#xA;&lt;p&gt;一个优秀的程序员密集地工作在他自己的代码上时，可以像数学家把持一个他在解决的问题那样把持它。数学家不像学校教的那样在纸上工作来回答问题。他们在脑子里做得更多：他们试图充分理解问题空间，能够像漫步在你成长房屋的记忆中那样漫步其中。在最佳状态下，编程也是如此。你把整个程序装在脑中，你可以随意操纵它。&lt;/p&gt;&#xA;&lt;p&gt;这在项目开始时特别有价值，因为最初最重要的是能够改变你正在做的事情。不仅仅是以不同的方式解决问题，而是改变你正在解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;你的代码是你对你正在探索的问题的理解。所以只有当你把代码装在脑中时，你才真正理解这个问题。&lt;/p&gt;&#xA;&lt;p&gt;把程序装进脑中并不容易。如果你离开一个项目几个月，当你回到它时，可能需要几天才能真正再次理解它。即使你在积极地处理一个程序，每天开始工作时也需要半小时才能把它装进脑中。这是最好的情况。在典型办公条件下工作的普通程序员永远不会进入这种模式。或者更戏剧性地说，在典型办公条件下工作的普通程序员永远不会真正理解他们正在解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;即使是最优秀的程序员并不总是把他们正在处理的整个程序都装在脑中。但你可以做一些事情来帮助：&lt;/p&gt;&#xA;&lt;h2 id=&#34;避免干扰&#34;&gt;避免干扰。&lt;/h2&gt;&#xA;&lt;p&gt;干扰对许多类型的工作都是有害的，但对编程尤其有害，因为程序员倾向于在他们能处理的细节极限上运作。&lt;/p&gt;&#xA;&lt;p&gt;干扰的危险不在于它持续多久，而在于它使你的大脑混乱的程度。程序员可以离开办公室去吃个三明治而不会失去脑中的代码。但错误的干扰可以在30秒内抹去你的大脑。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，有计划的干扰可能比没有计划的干扰更糟。如果你知道一小时后有个会议，你甚至不会开始处理困难的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;长时间工作&#34;&gt;长时间工作。&lt;/h2&gt;&#xA;&lt;p&gt;因为每次开始处理一个程序都有固定成本，所以在几个长时段中工作比在许多短时段中工作更有效率。当然，总会有一个点，因为你累了而变得愚蠢。这因人而异。我听说过人们连续36小时编程，但我能管理的最多只有18小时左右，而且我在不超过12小时的块中工作效果最好。&lt;/p&gt;&#xA;&lt;p&gt;最佳状态不是你身体能忍受的极限。分解项目既有优势也有成本。有时当你在休息后回到问题时，你会发现你的潜意识留下了答案等着你。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用简洁的语言&#34;&gt;使用简洁的语言。&lt;/h2&gt;&#xA;&lt;p&gt;更强大的编程语言使程序更短。程序员似乎至少部分地用他们用来编写程序的语言来思考程序。语言越简洁，程序越短，就越容易装进脑中并保持在那里。&lt;/p&gt;&#xA;&lt;p&gt;你可以通过使用一种称为自底向上编程的风格来增强强大语言的效果，在这种风格中，你编写多层程序，较低的层作为其上层的编程语言。如果你正确地这样做，你只需要把最顶层装在脑中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;不断重写你的程序&#34;&gt;不断重写你的程序。&lt;/h2&gt;&#xA;&lt;p&gt;重写程序通常会得到更清晰的设计。但即使不会，它也有优势：你必须完全理解一个程序才能重写它，所以没有更好的方法把它装进脑中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;写可重读的代码&#34;&gt;写可重读的代码。&lt;/h2&gt;&#xA;&lt;p&gt;所有程序员都知道写可读代码是好的。但你自己是最重要的读者。特别是在开始时；原型是与自己的对话。当为自己写作时，你有不同的优先事项。如果为别人写作，你可能不想让代码太密集。程序的某些部分可能最容易读，如果你把东西摊开，像一本入门教科书。而如果你写代码是为了让它容易重新装进脑中，最好追求简洁。&lt;/p&gt;&#xA;&lt;h2 id=&#34;小组工作&#34;&gt;小组工作。&lt;/h2&gt;&#xA;&lt;p&gt;当你在脑中操纵一个程序时，你的视野倾向于停在你拥有的代码边缘。其他部分你理解得不够好，更重要的是，不能随意处理。所以程序员数量越少，项目就能越完全地变异。如果只有一个程序员，通常开始时是这样，你可以做全面重新设计。&lt;/p&gt;&#xA;&lt;h2 id=&#34;不要让多个人编辑同一段代码&#34;&gt;不要让多个人编辑同一段代码。&lt;/h2&gt;&#xA;&lt;p&gt;你永远不会像理解自己的代码那样理解别人的代码。无论你多么彻底地读过它，你只是读了它，而不是写了它。所以如果一段代码由多个作者编写，他们中没有人像单个作者那样理解它。&lt;/p&gt;&#xA;&lt;p&gt;当然你不能安全地重新设计别人正在处理的东西。不仅仅是你必须请求许可。你甚至不让自己考虑这样的事情。重新设计有几个作者的代码就像改变法律；重新设计你独自控制的代码就像看到模糊图像的另一种解释。&lt;/p&gt;&#xA;&lt;p&gt;如果你想让几个人在一个项目上工作，把它分成组件，每个给一个人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;从小开始&#34;&gt;从小开始。&lt;/h2&gt;&#xA;&lt;p&gt;随着你对程序越来越熟悉，它变得更容易装在脑中。一旦你确信你已经完全探索了某些部分，你就可以开始把它们当作黑盒处理。但当你开始处理一个项目时，你被迫看到一切。如果你开始的问题太大，你可能永远无法完全把握它。所以如果你需要写一个大的、复杂的程序，开始的最佳方式可能不是为它写规范，而是写一个解决子集问题的原型。无论计划有什么优势，它们往往被能够把程序装在脑中的优势所抵消。&lt;/p&gt;&#xA;&lt;p&gt;程序员们经常偶然做到这八点，这很引人注目。有人有了一个新项目的想法，但因为不是正式批准的，他必须在下班时间做——结果证明更有生产力，因为没有干扰。受到他对新项目的热情驱使，他连续工作许多小时。因为它最初只是一个实验，他使用的是&amp;quot;脚本&amp;quot;语言而不是&amp;quot;生产&amp;quot;语言——实际上它强大得多。他完全重写程序几次；这对正式项目是不合理的，但这是爱的劳动，他想要它完美。而且因为除了他没有人会看到它，他省略了除笔记类型外的任何注释。他被迫在小团队中工作，因为他要么还没有告诉任何人这个想法，要么它看起来如此无望以至于不允许其他人在其上工作。即使有一个团队，他们也不能让多个人编辑同一段代码，因为它变化太快，那是不可能的。项目从小开始是因为想法一开始很小；他只是有一些很酷的黑客技巧想试试。&lt;/p&gt;&#xA;&lt;p&gt;更引人注目的是有多少正式批准的项目设法把这八件事都做错了。事实上，如果你看看大多数组织中软件编写的方式，几乎就像他们在故意做错事情。在某种意义上，他们确实如此。自从有组织以来，其定义性品质之一就是把个人当作可互换的部件。这对更可并行化的任务很有效，比如打仗。在历史上大部分时间里，一支训练有素的专业士兵军队可以指望打败一群个人战士，无论多么勇敢。但拥有想法不是很可并行化的。而程序就是：想法。&lt;/p&gt;&#xA;&lt;p&gt;组织不喜欢依赖个人天才的想法不仅仅是真的，它是同义反复。不这样做是组织定义的一部分。至少是我们当前组织概念的一部分。&lt;/p&gt;&#xA;&lt;p&gt;也许我们可以定义一种新型的组织，结合个人的努力而不要求他们可互换。可以说市场就是这种形式的组织，尽管把市场描述为退化情况可能更准确——当组织不可能时默认得到的情况。&lt;/p&gt;&#xA;&lt;p&gt;可能我们能做到的最好的是某种hack，比如让一个组织的编程部分以不同于其他部分的方式工作。也许最佳解决方案是大公司甚至不尝试内部开发想法，而只是购买它们。但无论解决方案是什么，第一步是意识到存在问题。&amp;ldquo;软件公司&amp;quot;这个短语本身就有矛盾。这两个词在相反的方向上拉扯。任何大型组织中的优秀程序员都会与之冲突，因为组织的设计是为了防止程序员追求的目标。&lt;/p&gt;&#xA;&lt;p&gt;优秀的程序员无论如何都能完成很多事情。但这往往需要对雇佣他们的组织进行实际上反抗的行为。如果更多的人理解程序员的行为方式是由他们工作的需求驱动的，这可能会有所帮助。他们长时间工作，期间推掉所有其他义务，直接投入编程而不是先写规范，重写已经工作的代码，这不是因为他们不负责任。他们更喜欢独自工作，或者对探头说你好的人咆哮，这不是因为他们不友好。这个表面上随机的令人讨厌习惯集合有一个单一的解释：将程序装在脑中的力量。&lt;/p&gt;&#xA;&lt;p&gt;无论理解这一点是否能帮助大型组织，它肯定能帮助他们的竞争对手。大公司的最弱点是他们不让个别程序员做出伟大的工作。所以如果你是一个小创业公司，这是攻击他们的地方。接手那些必须在一个大脑中解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、David Greenspan、Aaron Iba、Jessica Livingston、Robert Morris、Peter Norvig、Lisa Randall、Emmett Shear、Sergei Tsarev和Stephen Wolfram阅读本文的草稿。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
