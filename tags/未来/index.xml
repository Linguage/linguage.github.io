<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>未来 on Linguista</title>
    <link>https://linguage.github.io/tags/%E6%9C%AA%E6%9D%A5/</link>
    <description>Recent content in 未来 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E6%9C%AA%E6%9D%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>会写的人和不会写的人</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/writes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/writes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/writes/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/writes.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/writes.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/writes.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;会写的人和不会写的人&#34;&gt;会写的人和不会写的人&lt;/h1&gt;&#xA;&lt;p&gt;2024年10月&lt;/p&gt;&#xA;&lt;p&gt;我通常不愿意对技术做出预测，但我对这个预测相当有信心：再过几十年，不会有很多人能够写作。&lt;/p&gt;&#xA;&lt;p&gt;如果你是作家，你学到的最奇怪的事情之一是有多少人在写作方面有困难。医生知道有多少人有一颗他们担心的痣；擅长设置电脑的人知道有多少人不会设置；作家知道有多少人需要写作帮助。&lt;/p&gt;&#xA;&lt;p&gt;这么多人在写作方面有困难的原因是它从根本上就是困难的。要写得好你必须思考清楚，而思考清楚是困难的。&lt;/p&gt;&#xA;&lt;p&gt;然而写作渗透到许多工作中，而且工作越有声望，它往往要求越多的写作。&lt;/p&gt;&#xA;&lt;p&gt;这两个强大的对立力量，对写作的普遍期望和做它的不可减少的困难，创造了巨大的压力。这就是为什么杰出的教授经常被发现诉诸剽窃。在这些案件中，最令我震惊的是偷窃的琐碎性。他们偷窃的东西通常是最普通的套话——任何甚至还算过得去的作家都可以毫不费力地写出来的东西。这意味着他们甚至还不算过得去的作家。&lt;/p&gt;&#xA;&lt;p&gt;直到最近，对于这些对立力量创造的压力没有方便的 escape valve。你可以付钱让别人为你写作，像肯尼迪，或者剽窃，像马丁·路德·金，但如果你不能购买或偷窃文字，你必须自己写。因此，几乎所有被期望写作的人都必须学会如何写作。&lt;/p&gt;&#xA;&lt;p&gt;不再是了。AI已经打开了这个世界。几乎所有写作的压力都消散了。你可以让AI为你写作，无论在学校还是工作。&lt;/p&gt;&#xA;&lt;p&gt;结果将是一个分为会写的人和不会写的人的世界。仍然会有一些人能够写作。我们中的一些人喜欢它。但在擅长写作和完全不会写作的人之间的中间地带将会消失。而不是好作家、普通作家和不会写作的人，将只有好作家和不会写作的人。&lt;/p&gt;&#xA;&lt;p&gt;有那么糟糕吗？当技术使技能过时时，技能消失不是很常见吗？没有多少铁匠留下了，这似乎也不是问题。&lt;/p&gt;&#xA;&lt;p&gt;是的，这很糟糕。原因是我之前提到的事情：写作就是思考。事实上，有一种思考只能通过写作来完成。你无法比Leslie Lamport更好地表达这一点：如果你在写作之外思考，你只是在认为你在思考。所以一个分为会写的人和不会写的人的世界比听起来更危险。它将是一个有思考的人和不会思考的人的世界。我知道我想成为哪一半，我打赌你也是。&lt;/p&gt;&#xA;&lt;p&gt;这种情况并非前所未有。在前工业时代，大多数人的工作使他们强壮。现在如果你想强壮，你锻炼。所以仍然有强壮的人，但只有那些选择强壮的人。&lt;/p&gt;&#xA;&lt;p&gt;写作将是同样的情况。仍然会有聪明的人，但只有那些选择聪明的人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;p&gt;感谢杰西卡·利文斯顿、本·米勒和罗伯特·莫里斯阅读草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>创业公司融资的未来</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/future/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/future/&#34;&gt;English version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/future.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/future.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/future.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;创业公司融资的未来&#34;&gt;创业公司融资的未来&lt;/h1&gt;&#xA;&lt;p&gt;想创办创业公司？获得 Y Combinator 的资助。&lt;/p&gt;&#xA;&lt;p&gt;2010年8月&lt;/p&gt;&#xA;&lt;p&gt;两年前我写到了我称之为&amp;quot;创业公司融资中一个巨大的、未开发的机会&amp;quot;：风险投资者与他们当前商业模式要求他们投资大笔资金，以及一类需要比以前更少资金的大型创业公司之间日益增长的不匹配。越来越多的创业公司想要几十万美元，而不是几百万。[1]&lt;/p&gt;&#xA;&lt;p&gt;这个机会现在未开发的程度要小得多。投资者从两个方向涌入这个领域。风险投资者比一年前更可能进行天使规模的投资。与此同时，过去一年看到了新型投资者的急剧增加：超级天使，他们像天使一样运作，但使用其他人的钱，像风险投资者一样。&lt;/p&gt;&#xA;&lt;p&gt;虽然许多投资者正在进入这个领域，但仍有更多空间。投资者的分布应该反映创业公司的分布，这具有通常的幂律下降。所以投资几十万或几十万的人应该比投资几百万的人多得多。[2]&lt;/p&gt;&#xA;&lt;p&gt;事实上，有更多人进行天使规模的交易对天使投资者可能是好事，因为如果天使轮变得更合法，那么即使创业公司可以，如果他们愿意，从风险投资者那里筹集 A 轮融资，他们也可能开始选择天使轮。创业公司偏爱 A 轮融资的原因之一是它们更有声望。但如果天使投资者变得更加活跃和知名，他们将越来越多地能够在品牌上与风险投资者竞争。&lt;/p&gt;&#xA;&lt;p&gt;当然，声望不是偏爱 A 轮融资的主要原因。创业公司在 A 轮融资中可能会比在天使轮中得到投资者更多的关注。所以如果一个创业公司在天使轮和好的风险投资基金的 A 轮之间选择，我通常建议他们选择 A 轮。[3]&lt;/p&gt;&#xA;&lt;p&gt;但是，虽然 A 轮融资不会消失，我认为风险投资者应该比超级天使更担心，而不是相反。尽管他们的名字，超级天使实际上是迷你风险投资基金，他们显然把现有的风险投资者作为目标。&lt;/p&gt;&#xA;&lt;p&gt;他们似乎有历史站在他们这边。这里的模式似乎与创业公司和成熟公司进入新市场时我们看到的相同。在线视频成为可能，YouTube 直接冲进去，而现有媒体公司只是半心半意地接受它，更多的是由恐惧而不是希望驱动，更多的是为了保护自己的地盘而不是为用户做伟大的事情。PayPal 也是如此。这个模式重复了一遍又一遍，通常是入侵者获胜。在这种情况下，超级天使是入侵者。天使轮是他们的整个业务，就像在线视频对 YouTube 一样。而进行天使投资的风险投资者主要这样做是为了为 A 轮融资产生交易流。[4]&lt;/p&gt;&#xA;&lt;p&gt;另一方面，创业投资是一个非常奇怪的生意。几乎所有的回报都集中在几个大赢家身上。如果超级天使仅仅未能投资于（并在某种程度上产生）大赢家，即使他们投资于所有其他公司，他们也会倒闭。&lt;/p&gt;&#xA;&lt;h3 id=&#34;风险投资者&#34;&gt;风险投资者&lt;/h3&gt;&#xA;&lt;p&gt;为什么风险投资者不开始进行更小的 A 轮融资？症结在于董事会席位。在传统的 A 轮融资中，负责交易的合伙人会在创业公司的董事会中占有一席之地。如果我们假设平均创业公司运行6年，一个合伙人可以同时承受12个董事会席位，那么一个风险投资基金可以每年每个合伙人进行2笔 A 轮交易。&lt;/p&gt;&#xA;&lt;p&gt;在我看来，解决方案一直是担任更少的董事会席位。你不必在董事会中帮助创业公司。也许风险投资者觉得他们需要董事会成员带来的权力来确保他们的钱不被浪费。但他们检验过那个理论吗？除非他们尝试不担任董事会席位并发现他们的回报更低，否则他们没有解决这个问题。&lt;/p&gt;&#xA;&lt;p&gt;我不是说风险投资者不帮助创业公司。好的那些帮助他们很多。我所说的是，那种重要的帮助，你可能不必是董事会成员才能给予。[5]&lt;/p&gt;&#xA;&lt;p&gt;这一切将如何展开？一些风险投资者可能会适应，进行更多、更小的交易。如果他们简化选择过程并担任更少的董事会席位，风险投资基金可以进行2到3倍的 A 轮交易而不会质量下降，我不会感到惊讶。&lt;/p&gt;</description>
    </item>
    <item>
      <title>另一条道路</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/road/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/road/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/road/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/road.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/road.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/road.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;另一条道路&#34;&gt;另一条道路&lt;/h1&gt;&#xA;&lt;p&gt;2001年9月&lt;/p&gt;&#xA;&lt;p&gt;（本文解释了为什么下一代软件的大部分可能是基于服务器的，这对程序员意味着什么，以及这种新型软件为什么是创业公司的绝佳机会。本文源自在BBN实验室的一次演讲。）&lt;/p&gt;&#xA;&lt;p&gt;1995年夏天，我的朋友Robert Morris和我决定创办一家创业公司。当时，围绕Netscape IPO的公关活动正如火如荼地进行，媒体上有很多关于电子商务的讨论。那时网络上可能只有三十家实际的商店，都是手工制作的。如果将来会有很多在线商店，就需要制作它们的软件，所以我们决定写一些这样的软件。&lt;/p&gt;&#xA;&lt;p&gt;在最初的一周左右，我们打算将其制作成一个普通的桌面应用程序。然后有一天我们想到让软件在我们的Web服务器上运行，使用浏览器作为界面。我们尝试重写软件使其在Web上工作，很明显这是正确的方法。如果我们编写的软件在服务器上运行，对用户和我们自己都会容易得多。&lt;/p&gt;&#xA;&lt;p&gt;结果证明这是一个好计划。现在，作为Yahoo Store，这个软件是最受欢迎的在线商店构建器，拥有约14,000个用户。&lt;/p&gt;&#xA;&lt;p&gt;当我们开始Viaweb时，几乎没有人理解我们说软件在服务器上运行是什么意思。直到一年后Hotmail推出，人们才开始理解。现在每个人都知道这是一个有效的方法。我们现在所做的事情有了一个名字：应用服务提供商，或ASP。&lt;/p&gt;&#xA;&lt;p&gt;我认为下一代软件的大部分都将按照这个模型编写。即使是损失最大的微软，似乎也看到将一些东西移出桌面是不可避免的。如果软件从桌面移到服务器上，对开发者来说将意味着一个完全不同的世界。本文描述了我们作为这个新世界的首批访客所看到的令人惊讶的事情。就软件确实转移到服务器上的程度而言，我在这里描述的就是未来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;下一件大事&#34;&gt;下一件大事？&lt;/h2&gt;&#xA;&lt;p&gt;当我们回顾桌面软件时代时，我想我们会惊叹于人们忍受的不便，就像我们现在惊叹于早期车主忍受的不便一样。在最初的二三十年里，你必须是一个汽车专家才能拥有汽车。但汽车是一个如此巨大的进步，以至于很多不是汽车专家的人也想拥有它们。&lt;/p&gt;&#xA;&lt;p&gt;计算机现在正处于这个阶段。当你拥有桌面计算机时，你最终会学到比你想要知道的更多关于其内部情况的知识。但超过一半的美国家庭都拥有一台。我母亲有一台计算机，她用它来收发邮件和记账。大约一年前，她收到Apple的一封信，为她提供新操作系统的折扣，这让她感到担忧。当一个65岁的女性只想用计算机来收发邮件和记账时，却不得不考虑安装新的操作系统，这就有问题了。普通用户甚至不应该知道&amp;quot;操作系统&amp;quot;这个词，更不用说&amp;quot;设备驱动程序&amp;quot;或&amp;quot;补丁&amp;quot;了。&lt;/p&gt;&#xA;&lt;p&gt;现在有另一种交付软件的方式可以拯救用户免于成为系统管理员。基于Web的应用程序是在Web服务器上运行并使用Web页面作为用户界面的程序。对于普通用户来说，这种新型软件将比桌面软件更容易、更便宜、更便携、更可靠，而且通常更强大。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的软件，大多数用户除了他们使用的应用程序外，不必考虑任何其他事情。所有混乱、变化的东西都将位于某处的服务器上，由擅长这种事情的人维护。因此，你通常不需要特定的计算机来使用软件。你只需要一个带有键盘、屏幕和Web浏览器的东西。也许它会有无线互联网接入。也许它也会是你的手机。无论它是什么，都将是消费电子产品：价格约200美元，人们主要根据外观选择的东西。你将在互联网服务上花费比硬件更多的钱，就像你现在对电话所做的那样。[1]&lt;/p&gt;&#xA;&lt;p&gt;点击到达服务器并返回需要大约十分之一秒，所以重度交互软件的用户，如Photoshop，仍然希望计算在桌面上进行。但如果你看大多数人使用计算机做的那种事情，十分之一秒的延迟不会成为问题。我母亲真的不需要桌面计算机，有很多像她这样的人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;用户的胜利&#34;&gt;用户的胜利&lt;/h2&gt;&#xA;&lt;p&gt;我家附近有一辆车，保险杠上贴着&amp;quot;死也不愿不便&amp;quot;。大多数人，在大多数时候，会选择需要最少工作的选择。如果基于Web的软件获胜，那将是因为它更方便。对于用户和开发者来说，它似乎都会更方便。&lt;/p&gt;&#xA;&lt;p&gt;使用纯基于Web的应用程序，你只需要一个连接到互联网的浏览器。所以你可以在任何地方使用基于Web的应用程序。当你在桌面计算机上安装软件时，你只能在该计算机上使用它。更糟糕的是，你的文件被困在那台计算机上。随着人们习惯网络，这种模式的不便越来越明显。&lt;/p&gt;&#xA;&lt;p&gt;这里的开端是基于Web的电子邮件。现在数百万人意识到，无论你在哪里，都应该能够访问电子邮件。如果你能看到你的邮件，为什么不能看到你的日历？如果你能和同事讨论文档，为什么不能编辑它？为什么你的任何数据都应该被困在某个远处桌子的计算机上？&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;你的计算机&amp;quot;的整个概念正在消失，被&amp;quot;你的数据&amp;quot;所取代。你应该能够从任何计算机访问你的数据。或者更确切地说，任何客户端，而客户端不一定是计算机。&lt;/p&gt;&#xA;&lt;p&gt;客户端不应该存储数据；它们应该像电话一样。事实上，它们可能会变成电话，或者反之亦然。随着客户端变小，你有另一个理由不在它们上保存数据：随身携带的东西可能会丢失或被盗。把PDA留在出租车里就像磁盘崩溃，只是你的数据交给了别人而不是被蒸发掉了。&lt;/p&gt;&#xA;&lt;p&gt;使用纯基于Web的软件，你的数据和应用程序都不会保存在客户端上。所以你不需要安装任何东西来使用它。当没有安装时，你不必担心安装出错。应用程序和你的操作系统之间不可能存在不兼容性，因为软件不在你的操作系统上运行。&lt;/p&gt;&#xA;&lt;p&gt;因为它不需要安装，所以在你&amp;quot;购买&amp;quot;之前尝试基于Web的软件将是容易且常见的。你应该期望能够免费试用任何基于Web的应用程序，只需访问提供它的网站即可。在Viaweb，我们的整个网站就像一个大箭头，指向用户试驾。&lt;/p&gt;&#xA;&lt;p&gt;试驾后，注册服务只需要填写一个简短的表格（越简短越好）。这应该是用户必须做的最后工作。有了基于Web的软件，你应该无需额外付费、做任何工作，甚至可能无需知道就能获得新版本。&lt;/p&gt;&#xA;&lt;p&gt;升级不会像现在那样令人震惊。随着时间的推移，应用程序将悄然变得更强大。这需要开发者付出一些努力。他们必须设计软件，使其能够在不使用户困惑的情况下更新。这是一个新问题，但有解决方法。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的应用程序，每个人都使用相同的版本，错误一旦发现就可以修复。所以基于Web的软件应该比桌面软件的错误少得多。在Viaweb，我怀疑我们任何时候有过十个已知的错误。这比桌面软件好几个数量级。&lt;/p&gt;&#xA;&lt;p&gt;基于Web的应用程序可以同时被多个人使用。这对于协作应用程序来说显然是一个优势，但我敢打赌，一旦用户意识到这是可能的，他们会开始在大多数应用程序中想要这个功能。例如，让两个人编辑同一个文档通常是有用的。Viaweb允许多个用户同时编辑一个站点，更多是因为这是编写软件的正确方式，而不是因为我们期望用户想要这样做，但结果证明很多人确实这样做了。&lt;/p&gt;&#xA;&lt;p&gt;当你使用基于Web的应用程序时，你的数据会更安全。磁盘崩溃不会成为过去的事情，但用户不会再听到它们。它们将发生在服务器集群中。提供基于Web应用程序的公司实际上会进行备份——不仅因为他们会有真正的系统管理员担心这些事情，而且因为丢失用户数据的ASP将陷入巨大的麻烦。当人们在自己的磁盘崩溃中丢失数据时，他们不会太生气，因为他们只能生自己的气。当公司为他们丢失数据时，他们会更生气。&lt;/p&gt;&#xA;&lt;p&gt;最后，基于Web的软件应该对病毒不那么脆弱。如果客户端除了浏览器外不运行任何东西，运行病毒的机会就更少，本地也没有数据可以损坏。攻击服务器本身的程序会发现它们防御得很好。[2]&lt;/p&gt;&#xA;&lt;p&gt;对于用户来说，基于Web的软件压力会更小。我认为如果你查看普通Windows用户的内心，你会发现对符合这种描述的软件有着巨大且基本未被利用的渴望。释放出来，它可能是一股强大的力量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;代码之城&#34;&gt;代码之城&lt;/h2&gt;&#xA;&lt;p&gt;对于开发者来说，基于Web和桌面软件之间最显著的区别是，基于Web的应用程序不是单一的代码片段。它将是不同类型程序的集合，而不是单一的大二进制文件。因此设计基于Web的软件更像设计城市而不是建筑：除了建筑物，你还需要道路、路标、公用设施、警察和消防部门，以及增长和各种灾难的计划。&lt;/p&gt;&#xA;&lt;p&gt;在Viaweb，软件包括相当大的应用程序，用户直接与之对话；这些程序使用的程序；在后台持续运行寻找问题的程序；如果出现问题尝试重新启动事物的程序；偶尔运行以编译统计信息或构建搜索索引的程序；我们明确运行以垃圾收集资源或移动或恢复数据的程序；假装是用户的程序（以测量性能或暴露错误）；诊断网络问题的程序；进行备份的程序；外部服务的接口；驱动令人印象深刻的表盘集合显示实时服务器统计的软件（对访客来说很受欢迎，但对我们来说也是不可或缺的）；对开源软件的修改（包括错误修复）；以及大量的配置文件和设置。在我们被Yahoo收购后，Trevor Blackwell编写了一个精彩的程序，可以在不关闭商店的情况下将商店迁移到全国的新服务器。程序通过传呼机呼叫我们，向用户发送传真和电子邮件，与信用卡处理商进行交易，并通过套接字、管道、http请求、ssh、udp数据包、共享内存和文件相互交谈。Viaweb的一部分甚至由程序的缺失组成，因为Unix安全的关键之一是不运行人们可能用来闯入服务器的不必要实用程序。&lt;/p&gt;&#xA;&lt;p&gt;这并不以软件结束。我们花了很多时间思考服务器配置。我们自己从组件构建服务器——部分是为了省钱，部分是为了得到我们想要的东西。我们必须考虑我们的上游ISP是否与所有骨干网有足够快的连接。我们与RAID供应商连续约会。&lt;/p&gt;&#xA;&lt;p&gt;但硬件不仅仅是要担心的事情。当你控制它时，你可以为用户做更多。对于桌面应用程序，你可以指定某些最低硬件要求，但你不能添加更多。如果你管理服务器，你可以一步让所有用户能够传呼别人，或发送传真，或通过电话发送命令，或处理信用卡等，只需安装相关硬件即可。我们总是寻找用硬件添加功能的新方法，不仅因为它让用户高兴，而且作为将自己与竞争对手区分开来的方式——竞争对手要么因为他们销售桌面软件，要么通过ISP转售基于Web的应用程序，不能直接控制硬件。&lt;/p&gt;&#xA;&lt;p&gt;因为基于Web应用程序中的软件将是程序的集合而不是单一的二进制文件，它可以用多种不同的语言编写。当你编写桌面软件时，你实际上被迫用与底层操作系统相同的语言编写应用程序——即C和C++。因此，这些语言（尤其是在非技术人员如经理和风险投资家中）被认为是&amp;quot;严肃&amp;quot;软件开发的语言。但这只是桌面软件必须交付方式的人工产物。对于基于服务器的软件，你可以使用任何你想要的语言。[3] 今天，许多顶级黑客使用远离C和C++的语言：Perl、Python，甚至Lisp。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，没有人能告诉你使用什么语言，因为你控制整个系统，一直到硬件。不同的语言适合不同的任务。你可以为每个任务使用最适合的语言。当你有竞争对手时，&amp;ldquo;你可以&amp;quot;意味着&amp;quot;你必须&amp;rdquo;（我们稍后会回到这一点），因为如果你不利用这种可能性，你的竞争对手会。&lt;/p&gt;&#xA;&lt;p&gt;我们的大多数竞争对手使用C和C++，这使得他们的软件明显 inferior，因为（除其他外），他们无法解决CGI脚本的无状态性问题。如果你要改变什么，所有的改变都必须在一个页面上发生，底部有一个更新按钮。正如我在其他地方写过的，通过使用许多人仍然认为是研究语言的Lisp，我们能够让Viaweb编辑器的行为更像桌面软件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;&#xA;&lt;p&gt;在这个新世界中最重要的变化之一是你进行发布的方式。在桌面软件业务中，进行发布是一个巨大的创伤，整个公司都在努力推出一个单一的、巨大的代码片段。明显的比较会让人联想到这个过程和最终产品。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，你可以像为自己编写的程序那样几乎实时地进行更改。你以一系列增量更改而不是偶尔的大爆炸形式发布软件。一个典型的桌面软件公司可能一年进行一两次发布。在Viaweb，我们通常一天进行三到五次发布。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何在变化的世界中成为专家</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/ecw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/ecw/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/ecw/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/ecw.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/ecw.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/ecw.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;如何在变化的世界中成为专家&#34;&gt;如何在变化的世界中成为专家&lt;/h1&gt;&#xA;&lt;p&gt;2014年12月&lt;/p&gt;&#xA;&lt;p&gt;如果世界是静态的，我们可以对我们的信念有单调递增的信心。一个信念经历过的（更多样化的）经验越多，它错误的可能性就越小。大多数人对自己的观点隐含地相信类似的东西。对于那些变化不大的事物，比如人性，他们这样做是有道理的。但对于变化的事物，你不能以同样的方式信任你的观点，这可能包括几乎其他一切。&lt;/p&gt;&#xA;&lt;p&gt;当专家出错时，通常因为他们是早期世界版本的专家。&lt;/p&gt;&#xA;&lt;p&gt;有可能避免这种情况吗？你能保护自己免受过时信念的影响吗？在某种程度上，是的。我花了将近十年时间投资早期创业公司，奇怪的是，保护自己免受过时信念的影响正是你作为创业投资者必须做的。大多数真正好的创业想法一开始看起来像坏主意，其中许多看起来不好特别是因为世界的一些变化刚刚将它们从坏变成好。我花了很多时间学习识别这样的想法，我使用的技术可能适用于一般性的想法。&lt;/p&gt;&#xA;&lt;p&gt;第一步是对变化有明确的信念。那些陷入对观点单调递增信心的人隐含地得出结论世界是静态的。如果你有意识地提醒自己不是，你开始寻找变化。&lt;/p&gt;&#xA;&lt;p&gt;应该在哪里寻找？除了人性变化不大这个中等有用的概括外，不幸的事实是变化很难预测。这很大程度上是同义反复，但仍然值得记住：重要的变化通常来自不可预见的领域。&lt;/p&gt;&#xA;&lt;p&gt;所以我甚至不尝试预测它。当在采访中被要求预测未来时，我总是不得不努力即兴想出听起来合理的东西，就像一个没有为考试准备的学生。[1] 但我没有准备不是因为懒惰。在我看来，关于未来的信念很少是正确的，它们通常不值得它们强加的额外刚性，最好的策略就是保持积极开放的心态。不要试图将自己指向正确的方向，而是承认你不知道正确的方向是什么，而是尝试对变化的风向超级敏感。&lt;/p&gt;&#xA;&lt;p&gt;有工作假设是可以的，即使它们可能会限制你一些，因为它们也会激励你。追逐事物令人兴奋，尝试猜测答案也令人兴奋。但你必须自律，不要让你的假设变成更坚固的东西。[2]&lt;/p&gt;&#xA;&lt;p&gt;我相信这种被动的方法不仅适用于评估新想法，也适用于产生新想法。想出新想法的方法不是明确地尝试，而是尝试解决问题，并且在这个过程中不忽视你产生的奇怪预感。&lt;/p&gt;&#xA;&lt;p&gt;变化的风向源于领域专家的无意识思维。如果你在某个领域足够专业，你产生的任何奇怪想法或看似无关的问题本身就值得探索。[3] 在Y Combinator内部，当一个想法被描述为疯狂时，这是一种赞美——实际上，平均来说可能比当一个想法被描述为好时更高的赞美。&lt;/p&gt;&#xA;&lt;p&gt;创业投资者有非凡的动机来纠正过时的信念。如果他们能在其他投资者之前意识到某个看似无望的创业公司实际上并非如此，他们可以赚大钱。但动机不仅仅是财务上的。投资者的观点被明确测试：创业公司来找他们，他们必须说是或否，然后，相当快地，他们就知道自己是否猜对了。那些对Google说不的投资者（而且有几个人）将在余生中记住这一点。&lt;/p&gt;&#xA;&lt;p&gt;任何必须在某种意义上押注想法而不仅仅是评论想法的人都有类似的动机。这意味着任何想要这种动机的人都可以拥有它们，通过将他们的评论变成赌注：如果你以某种相当持久和公开的形式写一个话题，你会发现你比大多数人在随意对话中更担心把事情做对。[4]&lt;/p&gt;&#xA;&lt;p&gt;我发现的另一个保护自己免受过时信念影响的技巧是首先关注人而不是想法。虽然未来发现的本质很难预测，但我发现我能很好地预测什么样的人会做出这些发现。好的新想法来自真诚、精力充沛、独立思考的人。&lt;/p&gt;&#xA;&lt;p&gt;作为投资者，押注人而不是想法无数次拯救了我。例如，我们认为Airbnb是个坏主意。但我们能看出创始人是真诚、精力充沛、独立思考的。（确实，几乎是病态地如此。）所以我们暂停怀疑并资助了他们。&lt;/p&gt;&#xA;&lt;p&gt;这似乎也是一种应该普遍适用的技术。让自己周围环绕着那些能产生新想法的人。如果你想在自己的信念变得过时时快速注意到，没有什么比与那些发现会使它们过时的人做朋友更好的了。&lt;/p&gt;&#xA;&lt;p&gt;不成为自己专业知识的囚徒已经够难了，但只会变得更难，因为变化正在加速。这不是最近的趋势；自旧石器时代以来变化一直在加速。思想催生思想。我不期望那会改变。但我可能错了。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 我通常的技巧是谈论大多数人还没有注意到的当下方面。&lt;/p&gt;&#xA;&lt;p&gt;[2] 特别是当它们变得足够知名以至于人们开始将它们与你认同时。你必须对你想相信的事情保持额外的怀疑，一旦一个假设开始与你认同，它几乎肯定会开始属于那一类。&lt;/p&gt;&#xA;&lt;p&gt;[3] 在实践中，&amp;ldquo;足够专业&amp;quot;并不要求一个人被认可为专家——无论如何，这是一个滞后指标。在许多领域，一年的专注工作加上大量关心就足够了。&lt;/p&gt;&#xA;&lt;p&gt;[4] 虽然它们是公开的并且无限期地存在，但在论坛和Twitter等地方上的评论经验上似乎像随意对话一样运作。门槛可能在于你写的东西是否有标题。&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、Patrick Collison和Robert Morris阅读本文草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>百年编程语言</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/hundred/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/hundred/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/hundred/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/hundred.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/hundred.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/hundred.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;百年编程语言&#34;&gt;百年编程语言&lt;/h1&gt;&#xA;&lt;p&gt;2003年4月&lt;/p&gt;&#xA;&lt;p&gt;（本文源于在PyCon 2003的主题演讲。）&lt;/p&gt;&#xA;&lt;p&gt;很难预测一百年后的生活会是什么样子。我们只能确定几件事。我们知道每个人都会驾驶飞行汽车，区划法律将会放宽以允许建造数百层高的建筑，大部分时间都会是黑暗的，女性都会接受武术训练。在这里，我想聚焦于这个图景中的一个细节。他们会用什么样的编程语言来编写控制那些飞行汽车的软件？&lt;/p&gt;&#xA;&lt;p&gt;思考这个问题之所以有价值，并不是因为我们真的能用到这些语言，而是因为，如果我们幸运的话，我们会使用从现在到那个时间点的路径上的语言。&lt;/p&gt;&#xA;&lt;p&gt;我认为，像物种一样，语言会形成进化树，到处都有死胡同分支。我们已经看到这种情况正在发生。Cobol尽管曾经流行，但似乎没有任何知识后代。它是一个进化死胡同——尼安德特人式的语言。&lt;/p&gt;&#xA;&lt;p&gt;我预测Java也会有类似的命运。人们有时给我写信说，&amp;ldquo;你怎么能说Java不会成为一种成功的语言？它已经是成功的语言了。&amp;ldquo;我承认它是，如果你用关于它的书籍所占用的书架空间（特别是关于它的单本书籍），或者相信必须学习它才能找到工作的本科生数量来衡量成功的话。当我说Java不会成为成功的语言时，我的意思更具体：Java将是一个进化死胡同，就像Cobol一样。&lt;/p&gt;&#xA;&lt;p&gt;这只是一个猜测。我可能是错的。我在这里的重点不是批评Java，而是提出进化树的问题，让人们思考，语言X在树的哪个位置？问这个问题的原因不仅仅是为了让我们的鬼魂在一百年后说我告诉过你这样。这是因为靠近主要分支是寻找现在适合编程的语言的有用启发式方法。&lt;/p&gt;&#xA;&lt;p&gt;在任何给定的时间，你可能最幸福地处于进化树的主要分支上。即使仍然有很多尼安德特人，成为其中的一员也一定很糟糕。克罗马农人会不断过来殴打你并偷走你的食物。&lt;/p&gt;&#xA;&lt;p&gt;我想知道一百年后语言会是什么样子，这样我就知道现在应该赌树的哪个分支。&lt;/p&gt;&#xA;&lt;p&gt;语言的进化与物种的进化不同，因为分支可以融合。例如，Fortran分支似乎正在与Algol的后代融合。理论上这对物种也是可能的，但不太可能发生在比细胞更大的生物上。&lt;/p&gt;&#xA;&lt;p&gt;语言更有可能融合，部分是因为可能性空间较小，部分是因为突变不是随机的。语言设计师有意地融合其他语言的思想。&lt;/p&gt;&#xA;&lt;p&gt;对于语言设计师来说，思考编程语言的进化可能导致的方向特别有用，因为他们可以相应地引导。在这种情况下，&amp;ldquo;停留在主分支上&amp;quot;不仅仅是选择好语言的方法。它成为做出正确语言设计决策的启发式方法。&lt;/p&gt;&#xA;&lt;p&gt;任何编程语言都可以分为两部分：一组扮演公理角色的基本运算符，以及语言的其余部分，原则上可以用这些基本运算符来编写。&lt;/p&gt;&#xA;&lt;p&gt;我认为基本运算符是语言长期生存的最重要因素。其余的你可以改变。这就像买房子的规则，你首先应该考虑位置。其他的一切你都可以稍后修复，但你不能修复位置。&lt;/p&gt;&#xA;&lt;p&gt;我认为不仅公理要选择得好，而且数量要少。数学家一直对公理有这样的感觉——越少越好——我认为他们抓住了要点。&lt;/p&gt;&#xA;&lt;p&gt;至少，仔细审视语言的核心，看看是否有任何可以剔除的公理，这必须是一个有用的练习。我在我作为一个邋遢人的漫长职业生涯中发现，冗余会产生冗余，我看到这种情况不仅发生在软件中，也发生在床下和房间角落。&lt;/p&gt;&#xA;&lt;p&gt;我有一种预感，进化树的主要分支通过那些具有最小、最干净核心的语言。你能在语言本身中编写的语言部分越多越好。&lt;/p&gt;&#xA;&lt;p&gt;当然，即使问一百年后编程语言会是什么样子，我也做出了一个很大的假设。一百年后我们还会编写程序吗？我们不会只是告诉计算机我们想要它们做什么吗？&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，那个部门没有太多进展。我猜测一百年后人们仍会使用我们能识别的程序来告诉计算机做什么。可能有些我们现在通过编写程序来解决的问题，一百年后你不必编写程序来解决，但我认为仍会有大量我们今天所做的那种编程。&lt;/p&gt;&#xA;&lt;p&gt;认为任何人都能预测任何技术在一百年后会是什么样子可能显得 presumptuous。但请记住，我们背后已经有将近五十年的历史。当我们考虑到语言在过去五十年中进化得多么缓慢时，展望一百年是一个可以把握的想法。&lt;/p&gt;&#xA;&lt;p&gt;语言进化缓慢是因为它们并不是真正的技术。语言是符号。程序是你希望计算机为你解决问题的形式化描述。所以编程语言的进化速度更像数学符号的进化速度，而不是交通或通信的进化速度。数学符号确实在进化，但没有你在技术中看到的巨大飞跃。&lt;/p&gt;&#xA;&lt;p&gt;无论一百年后计算机由什么制成，似乎可以安全地预测它们会比现在快得多。如果摩尔定律继续发挥作用，它们将快74 quintillion（73,786,976,294,838,206,464）倍。这很难想象。事实上，速度部门最可能的预测可能是摩尔定律将停止工作。任何应该每十八个月翻一番的东西似乎最终都会遇到某种基本限制。但我毫不怀疑计算机会快得多。即使它们最终只快一百倍，这也应该大大改变编程语言的基本规则。除此之外，还会有更多空间给现在被认为是慢的语言，即那些不能产生非常高效代码的语言。&lt;/p&gt;&#xA;&lt;p&gt;然而，有些应用仍然需要速度。我们想用计算机解决的有些问题是计算机创造的；例如，你必须处理视频图像的速度取决于另一台计算机生成它们的速度。还有另一类问题本身就具有无限吸收计算周期的能力：图像渲染、密码学、模拟。&lt;/p&gt;&#xA;&lt;p&gt;如果一些应用可以变得越来越低效，而其他应用继续要求硬件能够提供的所有速度，更快的计算机将意味着语言必须覆盖更广泛的效率范围。我们已经看到这种情况正在发生。按照过去几十年的标准，一些流行新语言的当前实现惊人地浪费。&lt;/p&gt;&#xA;&lt;p&gt;这不仅仅是编程语言发生的事情。这是一个普遍的历史趋势。随着技术的改进，每一代人都能做前一代人认为是浪费的事情。三十年前的人会对我们如此随意地打长途电话感到惊讶。一百年前的人会更惊讶有一天一个包裹会通过孟菲斯从波士顿旅行到纽约。&lt;/p&gt;&#xA;&lt;p&gt;我已经可以告诉你未来一百年更快的硬件将给我们的所有额外周期会发生什么。它们几乎都会被浪费掉。&lt;/p&gt;&#xA;&lt;p&gt;我学习编程时计算机能力很稀缺。我记得取出我Basic程序中的所有空格，使它们能适合4K TRS-80的内存。想到所有这些惊人低效的软件一遍又一遍地烧掉周期做同样的事情，我觉得有点恶心。但我认为我的直觉在这里是错的。我就像一个长大的穷人，即使是为了重要的事情也不能忍受花钱，比如去看医生。&lt;/p&gt;&#xA;&lt;p&gt;有些浪费确实是令人厌恶的。例如，SUVs即使运行在永远不会耗尽且不产生污染的燃料上，也可能是令人厌恶的。SUVs之所以令人厌恶，是因为它们是一个令人厌恶的问题的解决方案。（如何使小型货车看起来更阳刚。）但并非所有浪费都是坏的。现在我们有了支持它的基础设施，计算你的长途通话分钟数开始显得吝啬。如果你有资源，更优雅的思考方式是把所有电话通话视为一类事情，无论对方在哪里。&lt;/p&gt;&#xA;&lt;p&gt;有好浪费，也有坏浪费。我对好浪费感兴趣——那种通过花费更多，我们可以获得更简单设计的浪费。我们将如何利用新、更快的硬件给我们带来的浪费周期的机会？&lt;/p&gt;&#xA;&lt;p&gt;对速度的渴望在我们这些拥有可怜计算机的人心中根深蒂固，以至于需要 conscious 努力来克服它。在语言设计中，我们应该有意识地寻找可以用效率换取哪怕是最小的便利增加的情况。&lt;/p&gt;&#xA;&lt;p&gt;大多数数据结构的存在是因为速度。例如，今天的许多语言既有字符串也有列表。在语义上，字符串或多或少是列表的一个子集，其中元素是字符。那么为什么你需要单独的数据类型呢？你真的不需要。字符串的存在仅仅是为了效率。但是用使程序运行得更快的hack来使语言的语义变得混乱是很蹩脚的。在语言中拥有字符串似乎是一个过早优化的例子。&lt;/p&gt;&#xA;&lt;p&gt;如果我们将语言的核心视为一组公理，那么仅仅为了效率而增加不增加表达能力的额外公理肯定是令人厌恶的。效率很重要，但我认为这不是获得它的正确方法。&lt;/p&gt;&#xA;&lt;p&gt;我认为解决这个问题的正确方法是将程序的含义与实现细节分开。不要同时拥有列表和字符串，只拥有列表，同时有某种方式给编译器优化建议，使其能够在必要时将字符串布置为连续的字节。&lt;/p&gt;&#xA;&lt;p&gt;由于速度在程序的大部分中都不重要，你通常不需要费心处理这种微观管理。随着计算机变得越来越快，这一点会越来越真实。&lt;/p&gt;&#xA;&lt;p&gt;少说实现细节也应该使程序更灵活。规范在程序编写过程中会改变，这不仅是不可避免的，而且是可取的。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;essay&amp;quot;这个词来自法语动词&amp;quot;essayer&amp;rdquo;，意思是&amp;quot;尝试&amp;rdquo;。essay在原始意义上是你写来试图弄清楚某些东西的东西。这在软件中也会发生。我认为一些最好的程序是essay，从这个意义上说，作者们在开始时并不知道他们确切地想要写什么。&lt;/p&gt;&#xA;&lt;p&gt;Lisp黑客们已经知道灵活使用数据结构的价值。我们倾向于编写程序的第一版本，使其用列表做所有事情。这些初始版本可能如此惊人地低效，以至于需要conscious努力不去思考它们在做什么，就像，至少对我而言，吃牛排需要conscious努力不去思考它来自哪里。&lt;/p&gt;&#xA;&lt;p&gt;一百年后的程序员最寻找的，最重要的是一种语言，你可以用最少的努力组合成一个令人难以置信的低效版本1程序。至少，这是我们现在会描述的方式。他们会说他们想要一种易于编程的语言。&lt;/p&gt;&#xA;&lt;p&gt;低效的软件并不令人厌恶。令人厌恶的是让程序员做不必要工作的语言。浪费程序员时间是真正的低效，而不是浪费机器时间。随着计算机变得越来越快，这一点会变得越来越清晰。&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络创业公司的未来</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/webstartups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/webstartups/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/webstartups/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/webstartups.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/webstartups.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/webstartups.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;网络创业公司的未来&#34;&gt;网络创业公司的未来&lt;/h1&gt;&#xA;&lt;p&gt;2007年10月&lt;/p&gt;&#xA;&lt;p&gt;（本文源于2007年10月在FOWA的主题演讲。）&lt;/p&gt;&#xA;&lt;p&gt;现在有一些有趣的事情正在发生。创业公司正在经历与技术变得更便宜时相同的转变。&lt;/p&gt;&#xA;&lt;p&gt;我们在技术中一遍又一遍地看到这种模式。最初有一些非常昂贵且少量制造的设备。然后有人发现了如何廉价制造它们；更多的被制造出来；结果它们可以以新的方式使用。&lt;/p&gt;&#xA;&lt;p&gt;计算机是一个熟悉的例子。当我还是个孩子的时候，计算机是大型、昂贵的机器，一次制造一台。现在它们是商品。现在我们可以将计算机塞进所有东西里。&lt;/p&gt;&#xA;&lt;p&gt;这种模式非常古老。经济史上大多数转折点都是它的实例。它在1850年发生在钢铁上，在1780年发生在动力上。它在13世纪发生在布匹制造上，产生了后来带来文艺复兴的财富。农业本身也是这种模式的一个实例。&lt;/p&gt;&#xA;&lt;p&gt;现在创业公司不仅生产这种模式，这种模式也正在发生在创业公司身上。启动网络创业公司如此便宜，以至于更多的将被启动。如果这种模式成立，那应该会导致戏剧性的变化。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-大量创业公司&#34;&gt;1. 大量创业公司&lt;/h2&gt;&#xA;&lt;p&gt;所以我对网络创业公司未来的第一个预测相当简单：将会有很多。当启动创业公司很昂贵时，你必须得到投资者的许可才能这样做。现在唯一的门槛是勇气。&lt;/p&gt;&#xA;&lt;p&gt;甚至这个门槛也在降低，因为人们看着其他人冒险并生存下来。在我们资助的最近一批创业公司中，我们有几位创始人说他们之前想过申请，但不确定并找到了工作。只是在听到做过这件事的朋友的报告后，他们才决定自己尝试。&lt;/p&gt;&#xA;&lt;p&gt;启动创业公司很难，但朝九晚五的工作也很难，而且在某些方面是一种更糟糕的困难。在创业公司你有很多担忧，但你没有那种在大公司时生命正在飞逝的感觉。另外在创业公司你可以赚更多钱。&lt;/p&gt;&#xA;&lt;p&gt;随着创业公司有效的消息传播，这个数字可能会增长到现在看起来令人惊讶的地步。&lt;/p&gt;&#xA;&lt;p&gt;我们现在认为在公司工作很正常，但这只是最肤浅的历史表象。仅仅两三代人前，现在所谓的工业化国家的大多数人靠农业为生。所以虽然提议大量人改变他们的谋生方式可能看起来令人惊讶，但如果他们不这样做会更令人惊讶。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-标准化&#34;&gt;2. 标准化&lt;/h2&gt;&#xA;&lt;p&gt;当技术使某种东西 dramatically 变便宜时，标准化总是随之而来。当你大量制造东西时，你倾向于标准化一切不需要改变的东西。&lt;/p&gt;&#xA;&lt;p&gt;在Y Combinator我们仍然只有四个人，所以我们试图标准化一切。我们可以雇用员工，但我们想被迫弄清楚如何扩大投资规模。&lt;/p&gt;&#xA;&lt;p&gt;我们经常告诉创业公司快速发布一个最小版本，然后让用户的需求决定下一步做什么。本质上，让市场设计产品。我们自己也是这样做的。我们认为我们正在开发的处理大量创业公司的技术就像软件。有时它确实是软件，比如Hacker News和我们的申请系统。&lt;/p&gt;&#xA;&lt;p&gt;我们一直在标准化的最重要的东西之一是投资条款。到现在为止投资条款都是个别协商的。这对创始人来说是个问题，因为它使筹集资金需要更长的时间并在法律费用上花费更多。所以我们不仅对我们做的每笔交易使用相同的文书工作，我们还委托了通用的天使文书工作，我们资助的所有创业公司都可以在未来几轮中使用。&lt;/p&gt;&#xA;&lt;p&gt;一些投资者仍然想要炮制自己的交易条款。A轮融资，你筹集一百万美元或更多，在可预见的未来将是定制交易。但我认为天使轮将开始主要用标准化协议完成。一个想要在协议中插入一堆复杂条款的天使可能不是你想要的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-对收购的新态度&#34;&gt;3. 对收购的新态度&lt;/h2&gt;&#xA;&lt;p&gt;我看到开始标准化的另一件事是收购。随着创业公司数量的增加，大公司将开始开发标准化的程序，使收购几乎不比雇用某人更多工作。&lt;/p&gt;&#xA;&lt;p&gt;谷歌在这方面是领导者，就像在技术的许多领域一样。他们收购了很多创业公司——比大多数人意识到的多，因为他们只宣布其中的一小部分。作为谷歌，他们正在弄清楚如何高效地做这件事。&lt;/p&gt;&#xA;&lt;p&gt;他们解决的一个问题是如何思考收购。对于大多数公司来说，收购仍然带有某种不足的污名。公司这样做是因为他们不得不这样做，但通常有一种感觉他们不应该不得不这样做——他们自己的程序员应该能够构建他们需要的一切。&lt;/p&gt;&#xA;&lt;p&gt;谷歌的例子应该治愈世界其他地方的这个想法。谷歌拥有比任何公开技术公司都好得多的程序员。如果他们做收购没有问题，其他人应该更没有问题。无论谷歌做多少，微软应该做十倍。&lt;/p&gt;&#xA;&lt;p&gt;谷歌做收购没有问题的一个原因是他们亲身知道他们能通过这种方式获得的人才质量。Larry和Sergey只有在周游搜索引擎试图出售他们的想法但找不到接受者之后才创办了谷歌。他们曾是走进大公司的人，所以他们知道谁可能坐在会议桌对面。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-可能的风险策略&#34;&gt;4. 可能的风险策略&lt;/h2&gt;&#xA;&lt;p&gt;风险总是与回报成比例的。获得真正巨大回报的方法是做看起来疯狂的事情，比如在1998年创办一个新的搜索引擎，或者拒绝十亿美元的收购要约。&lt;/p&gt;&#xA;&lt;p&gt;这在风险投资中一直是个问题。创始人和投资者对风险有不同的态度。知道风险平均与回报成比例，投资者喜欢风险策略，而创始人，他们的样本量不够大，不在乎平均上什么是真的，往往更加保守。&lt;/p&gt;&#xA;&lt;p&gt;如果创业公司容易启动，这种冲突就消失了，因为创始人可以在更年轻的时候启动它们，那时承担更多风险是合理的，并且可以在他们的职业生涯中启动更多的创业公司。当创始人可以做很多创业公司时，他们可以开始像投资者一样以投资组合优化的方式看待世界。这意味着创造的财富总量可以更大，因为策略可以更有风险。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-更年轻更极客的创始人&#34;&gt;5. 更年轻、更极客的创始人&lt;/h2&gt;&#xA;&lt;p&gt;如果创业公司变成便宜的商品，更多的人将能够拥有它们，就像微处理器使计算机便宜后更多的人可以拥有计算机一样。特别是，比以前更年轻和技术更强的创始人将能够启动创业公司。&lt;/p&gt;&#xA;&lt;p&gt;在启动创业公司成本很高的时候，你必须说服投资者让你做。而且这需要与实际做创业公司非常不同的技能。如果投资者是完美的判断者，两者将需要完全相同的技能。但不幸的是，大多数投资者都是糟糕的判断者。我知道是因为我看到了幕后筹集资金需要多少工作，一个行业中所需的销售量总是与买家的判断成反比。&lt;/p&gt;&#xA;&lt;p&gt;幸运的是，如果创业公司变得更便宜启动，有另一种方式来说服投资者。不是带着商业计划去找风险投资家并试图说服他们资助它，你可以用我们或你叔叔的几万美元种子钱启动一个产品，然后带着一个工作的公司而不是一个计划去找他们。那时你不必显得圆滑和自信，你只需把他们指向Alexa。&lt;/p&gt;&#xA;&lt;p&gt;这种说服投资者的方式更适合黑客，他们进入技术部分是因为他们觉得其他领域需要的不真实程度让他们不舒服。&lt;/p&gt;&#xA;&lt;h2 id=&#34;6-创业中心将持续存在&#34;&gt;6. 创业中心将持续存在&lt;/h2&gt;&#xA;&lt;p&gt;如果启动创业公司变得便宜，似乎意味着像硅谷这样的创业中心的结束。如果你启动创业公司需要的只是房租钱，你应该能够在任何地方做。&lt;/p&gt;</description>
    </item>
    <item>
      <title>高分辨率社会</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/highres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/highres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/highres/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/highres.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/highres.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/highres.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;高分辨率社会&#34;&gt;高分辨率社会&lt;/h1&gt;&#xA;&lt;p&gt;2008年12月&lt;/p&gt;&#xA;&lt;p&gt;在几乎整个历史中，一个社会的成功与其组建大型和有纪律的组织能力成正比。那些押注规模经济的人通常获胜，这意味着最大的组织是最成功的。&lt;/p&gt;&#xA;&lt;p&gt;事物已经发生了如此大的变化，以至于我们难以相信，但直到几十年前，最大的组织往往是最进步的。1960年，一个雄心勃勃的大学毕业生想在福特、通用电气或NASA巨大而光鲜的办公室工作。小意味着小打小闹。1960年的小并不意味着一个酷酷的小型创业公司。它意味着希德叔叔的鞋店。&lt;/p&gt;&#xA;&lt;p&gt;当我在1970年代长大时，&amp;ldquo;公司阶梯&amp;quot;的概念仍然非常活跃。标准计划是努力进入一所好大学，然后被征召到某个组织，然后逐渐上升到责任越来越大的职位。更有雄心的人只是希望更快地爬上同一个阶梯。[1]&lt;/p&gt;&#xA;&lt;p&gt;但在二十世纪晚期，某些事情发生了变化。事实证明，规模经济并不是唯一起作用的力量。特别是在技术领域，从小团体获得的更高速度开始超越规模的优势。&lt;/p&gt;&#xA;&lt;p&gt;未来被证明与我们1970年预期的不同。我们预期的圆顶城市和飞行汽车未能实现。但幸运的是，带有标明我们专业和等级徽章的连体服也未能实现。经济现在看起来不是由少数几个巨大的树形组织主导，而是一个由较小独立单位组成的流动网络。&lt;/p&gt;&#xA;&lt;p&gt;并不是说大组织停止了工作。没有证据表明像罗马军队或英国东印度公司这样著名成功的组织比今天同规模的组织少受繁文缛节和政治的困扰。但他们的对手是那些不能通过发现新技术来即时改变规则的人。现在事实证明，&amp;ldquo;大型和有纪律的组织获胜&amp;quot;这个规则需要附加一个限定条件：&amp;ldquo;在变化缓慢的游戏中&amp;rdquo;。在变化达到足够速度之前，没有人知道这一点。&lt;/p&gt;&#xA;&lt;p&gt;不过，大组织现在将开始做得更差，因为历史上第一次他们不再获得最优秀的人才。现在雄心勃勃的大学毕业生不想为大公司工作。他们想为正在迅速成长为大公司的热门创业公司工作。如果他们真的有雄心，他们想自己创业。[2]&lt;/p&gt;&#xA;&lt;p&gt;这并不意味着大公司会消失。说创业公司会成功意味着大公司将存在，因为成功的创业公司要么成为大公司，要么被它们收购。[3] 但大型组织可能永远不会再次扮演它们在二十世纪末以前所扮演的主导角色。&lt;/p&gt;&#xA;&lt;p&gt;一个持续如此之久的趋势竟然会耗尽，这有点令人惊讶。一个规则工作了数千年然后改变极性，这种情况多久发生一次？&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;越大越好&amp;quot;的千年运行给我们留下了许多现在已经过时但极其根深蒂固的传统。这意味着雄心勃勃的人现在可以对其进行套利。准确理解要保留哪些想法，哪些现在可以丢弃，将非常有价值。&lt;/p&gt;&#xA;&lt;p&gt;观察的地方是小规模传播开始的地方：创业公司的世界。&lt;/p&gt;&#xA;&lt;p&gt;一直有偶尔的案例，特别是在美国，雄心勃勃的人在自己下面成长阶梯而不是爬上去。但直到最近，这是一条异常的路线，往往只有局外人才会走。十九世纪伟大的实业家如此缺乏正规教育并非巧合。无论他们的公司最终变得多大，他们最初基本上都是机械师和店主。没有大学教育的人如果能避免的话，是不会走这一步的。直到技术创业公司，特别是互联网创业公司的兴起，受过教育的人自己创业是非常不寻常的。&lt;/p&gt;&#xA;&lt;p&gt;离开肖克利半导体创立仙童半导体的八个人，最初的硅谷创业公司，最初甚至没有试图创业。他们只是在寻找一家愿意雇佣他们作为团队的公司。然后他们中一个人的父母介绍他们给一家小型投资银行，后者提出为他们创业融资，所以他们就这样做了。但创业对他们来说是一个陌生的想法；他们是不小心走到这一步的。[4]&lt;/p&gt;&#xA;&lt;p&gt;现在我想，几乎所有会编程的斯坦福或伯克利本科生都至少考虑过创业的想法。东海岸的大学并不落后，英国大学只比他们落后一点点。这种模式表明，斯坦福和伯克利的态度不是异常，而是领先指标。这就是世界发展的方向。&lt;/p&gt;&#xA;&lt;p&gt;当然，互联网创业公司仍然只是世界经济的一小部分。基于它们的趋势能有那么强大吗？&lt;/p&gt;&#xA;&lt;p&gt;我认为是的。没有理由假设这个领域可以完成的工作量有任何限制。像科学一样，财富似乎以分形方式扩展。当瓦特开始研究蒸汽动力时，它只是英国经济的很小一部分。但他的工作导致了更多的工作，直到这一部分扩展到比最初所属的整个经济更大的东西。&lt;/p&gt;&#xA;&lt;p&gt;互联网也可能发生同样的事情。如果互联网创业公司为雄心勃勃的人提供了最好的机会，那么很多雄心勃勃的人会创办它们，这部分经济会以通常的分形方式膨胀。&lt;/p&gt;&#xA;&lt;p&gt;即使与互联网相关的应用程序只成为世界经济的十分之一，这个组成部分也会为其他部分定下基调。经济中最活跃的部分总是如此，从薪资到着装标准。不仅仅是因为它的声望，还因为经济中最活跃部分所依据的原则往往是行之有效的原则。&lt;/p&gt;&#xA;&lt;p&gt;对于未来，押注的趋势似乎是个体绩效衡量的、小型自治团体组成的网络。获胜的社会将是那些阻碍最小的社会。&lt;/p&gt;&#xA;&lt;p&gt;就像最初的工业革命一样，一些社会将比其他社会更擅长这个。在英国诞生的一代内，工业革命传播到欧洲大陆和北美。但它并没有传播到任何地方。这种新的做事方式只能在为此做好准备的地方扎根。它只能传播到已经有活力中产阶级的地方。&lt;/p&gt;&#xA;&lt;p&gt;1960年代在硅谷开始的变革有类似的社会组成部分。那里开发了两种新技术：建造集成电路的技术，以及建造一种通过创造新技术来快速成长的新型公司的技术。建造集成电路的技术迅速传播到其他国家。但建造创业公司的技术没有。五十年后，创业公司在硅谷无处不在，在美国其他少数几个城市也很常见，但在世界大部分地区仍然是异常现象。&lt;/p&gt;&#xA;&lt;p&gt;创业公司没有像工业革命那样广泛传播的部分原因——可能主要是社会破坏性。尽管工业革命带来了许多社会变化，但它并没有与&amp;quot;越大越好&amp;quot;的原则作斗争。恰恰相反：两者完美地契合。新的工业公司适应了像军队和公务员这样现有大组织的习俗，产生的混合体运作良好。&amp;ldquo;工业领袖&amp;quot;向&amp;quot;工人军队&amp;quot;发布命令，每个人都知道他们应该做什么。&lt;/p&gt;&#xA;&lt;p&gt;创业公司在社会上似乎更逆流而上。它们很难在重视等级制度和稳定性的社会中繁荣，就像工业化很难在被随意从商人阶级偷窃的人统治的社会中繁荣一样。但在工业革命发生时，已经有少数几个国家度过了那个阶段。这次似乎没有那么多准备好的国家。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 这个模式的一个奇怪后果是，通常赚更多钱的方法是成为经理。这是创业公司解决的问题之一。&lt;/p&gt;&#xA;&lt;p&gt;[2] 美国汽车公司一直比日本汽车公司做得差得多有很多原因，但至少其中一个是乐观的原因：美国毕业生有更多选择。&lt;/p&gt;&#xA;&lt;p&gt;[3] 公司有一天可能在收入上做大而在人员规模上不做大是有可能的，但我们在这个趋势上还没有走得很远。&lt;/p&gt;&#xA;&lt;p&gt;[4] Lecuyer, Christophe, 《制造硅谷》，MIT出版社，2006年。&lt;/p&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克韦尔、保罗·布赫海特、杰西卡·利文斯顿和罗伯特·莫里斯阅读本文的草稿。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
