<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黑客 on Linguista</title>
    <link>https://linguage.github.io/tags/%E9%BB%91%E5%AE%A2/</link>
    <description>Recent content in 黑客 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Apr 2024 18:08:18 +0800</lastBuildDate>
    <atom:link href="https://linguage.github.io/tags/%E9%BB%91%E5%AE%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>评论：《黑客与画家》</title>
      <link>https://linguage.github.io/post/comment_hacker_painter/</link>
      <pubDate>Mon, 22 Apr 2024 18:08:18 +0800</pubDate>
      <guid>https://linguage.github.io/post/comment_hacker_painter/</guid>
      <description>&lt;p&gt;本文将围绕Paul Graham的《黑客与画家》展开评论，探讨黑客与艺术家的共通之处，以及黑客在工程科学等领域中所面临的现实困境与生存之道。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mac的回归</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/mac/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/mac/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/mac.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/mac.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/mac.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;mac的回归&#34;&gt;Mac的回归&lt;/h1&gt;&#xA;&lt;p&gt;2005年3月&lt;/p&gt;&#xA;&lt;p&gt;我认识的所有最好的黑客都在逐渐转向Mac。我的朋友Robert说，他在MIT的整个研究小组最近都给自己买了Powerbook。这些人不是90年代中期苹果低谷时期购买Mac的图形设计师和祖母们。他们是你能找到的最核心的OS黑客。&lt;/p&gt;&#xA;&lt;p&gt;原因当然是OS X。Powerbook设计精美，运行FreeBSD。你还需要知道什么？&lt;/p&gt;&#xA;&lt;p&gt;我在去年年底买了一台Powerbook。当我的IBM Thinkpad的硬盘很快损坏后，它成了我唯一的笔记本电脑。当我的朋友Trevor最近出现在我家时，他拿着一台与我相同的Powerbook。&lt;/p&gt;&#xA;&lt;p&gt;对我们大多数人来说，这不是转向苹果，而是回归。尽管在90年代中期很难相信，但Mac在其时代是典型的黑客计算机。&lt;/p&gt;&#xA;&lt;p&gt;1983年秋天，我大学的一门CS课教授站起来，像先知一样宣布，很快将有一种计算机具有半MIPS的处理能力，可以放在飞机座位下，价格如此便宜，我们可以从暑假工作中节省足够的钱来买一台。整个房间都倒吸了一口气。当Mac出现时，它甚至比我们希望的还要好。它如承诺的那样小、强大和便宜。但它也是我们从未想过计算机能成为的东西：设计精美。&lt;/p&gt;&#xA;&lt;p&gt;我必须拥有一台。我不是一个人。在80年代中后期，我认识的所有黑客都在为Mac编写软件，或者想要这样做。剑桥的每个沙发床垫上似乎都躺着一本相同的胖白皮书。如果你把它翻过来，上面写着&amp;quot;Inside Macintosh&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;然后是Linux和FreeBSD，黑客们跟随最强大的OS wherever it leads，发现自己转向了Intel盒子。如果你关心设计，你可以买一台Thinkpad，如果你能把Intel和Microsoft的标签从前面撕掉，它至少不会 actively 令人反感。[1]&lt;/p&gt;&#xA;&lt;p&gt;随着OS X的出现，黑客们回来了。当我走进剑桥的苹果商店时，就像回家一样。很多东西都变了，但空气中仍然有那种苹果的酷炫感，感觉表演是由真正关心的人运营的，而不是随机的公司交易者。&lt;/p&gt;&#xA;&lt;p&gt;那又怎样，商界可能会说。谁在乎黑客是否再次喜欢苹果？毕竟，黑客市场有多大？&lt;/p&gt;&#xA;&lt;p&gt;相当小，但相对于其规模来说很重要。当涉及计算机时，黑客现在正在做的事情，十年后每个人都会做。几乎所有的技术，从Unix到位图显示到Web，都是在CS部门和研究实验室中首先流行的，然后逐渐传播到世界其他地方。&lt;/p&gt;&#xA;&lt;p&gt;我记得1986年告诉我父亲，有一种叫做Sun的新型计算机，它是一台严肃的Unix机器，但如此小和便宜，你可以拥有一个自己坐在前面，而不是坐在连接到单个中央Vax的VT100前面。我建议，也许他应该买一些这家公司的股票。我想他真的希望他听了。&lt;/p&gt;&#xA;&lt;p&gt;1994年，我的朋友Koling想和他在台湾的女朋友交谈，为了节省长途账单，他写了一些软件，将声音转换为可以通过互联网发送的数据包。当时我们不确定这是否是互联网的适当用途，互联网当时仍然是一个准政府实体。他现在做的事情被称为VoIP，它是一个巨大且快速增长的业务。&lt;/p&gt;&#xA;&lt;p&gt;如果你想知道十年后普通人会用计算机做什么，只需在一个好大学的CS部门走一圈。无论他们在做什么，你都会做。&lt;/p&gt;&#xA;&lt;p&gt;在&amp;quot;平台&amp;quot;问题上，这种趋势更加明显，因为新颖的软件源自伟大的黑客，他们倾向于首先为他们个人使用的任何计算机编写它。软件销售硬件。Apple II的初始销售中，如果不是大多数的话，很多来自购买它来运行VisiCalc的人。为什么Bricklin和Frankston为Apple II编写VisiCalc？因为他们个人喜欢它。他们可以选择任何机器使其成为明星。&lt;/p&gt;&#xA;&lt;p&gt;如果你想吸引黑客编写销售你的硬件的软件，你必须使它成为他们自己使用的东西。仅仅使其&amp;quot;开放&amp;quot;是不够的。它必须开放且好。&lt;/p&gt;&#xA;&lt;p&gt;而开放且好正是Macs再次成为的。中间的几年创造了一种据我所知前所未有的情况：苹果在低端和高端都很受欢迎，但在中间不。我七十岁的母亲有一台Mac笔记本电脑。我拥有计算机科学博士学位的朋友都有Mac笔记本电脑。[2] 然而苹果的整体市场份额仍然很小。&lt;/p&gt;&#xA;&lt;p&gt;尽管前所未有，但我预测这种情况也是暂时的。&lt;/p&gt;&#xA;&lt;p&gt;所以爸爸，有家叫苹果的公司。他们制造一种新型计算机，设计得像Bang &amp;amp; Olufsen音响系统一样好，下面是你能买到的最好的Unix机器。是的，市盈率有点高，但我想很多人会想要这些。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 这些可怕的标签很像前Google搜索引擎上流行的侵入性广告。它们对客户说：你不重要。我们关心Intel和Microsoft，而不是你。&lt;/p&gt;&#xA;&lt;p&gt;[2] Y Combinator（我们希望）主要被黑客访问。操作系统的比例是：Windows 66.4%，Macintosh 18.8%，Linux 11.4%，FreeBSD 1.5%。Mac数字与五年前相比是一个很大的变化。&lt;/p&gt;&#xA;&lt;h2 id=&#34;意大利语翻译&#34;&gt;意大利语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;俄语翻译&#34;&gt;俄语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;中文翻译&#34;&gt;中文翻译&lt;/h2&gt;</description>
    </item>
    <item>
      <title>一种新的风险投资动物</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/ycombinator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/ycombinator/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/ycombinator/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/ycombinator.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/ycombinator.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/ycombinator.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;一种新的风险投资动物&#34;&gt;一种新的风险投资动物&lt;/h1&gt;&#xA;&lt;p&gt;2008年3月，2013年5月修订&lt;/p&gt;&#xA;&lt;p&gt;（这篇文章源自我为自己写的东西，以弄清楚我们在做什么。尽管Y Combinator现在已经有3年历史了，我们仍在努力理解其含义。）&lt;/p&gt;&#xA;&lt;p&gt;我最近很恼火地读到一篇关于Y Combinator的描述，说&amp;quot;Y Combinator为创业公司提供种子资金&amp;quot;。特别恼人的是我写的。这并没有真正传达我们所做的事情。而它不准确的原因是，矛盾的是，为非常早期的创业公司提供资金并不是主要关于资金。&lt;/p&gt;&#xA;&lt;p&gt;说YC为创业公司提供种子资金是用早期模型来描述。就像把汽车称为无马马车一样。&lt;/p&gt;&#xA;&lt;p&gt;当你按比例缩放动物时，你不能只是按比例保持一切。例如，体积随着线性尺寸的立方增长，但表面积只随着平方增长。因此，当动物变大时，它们散热有困难。这就是为什么老鼠和兔子有毛皮，而大象和河马没有。你不能通过缩小大象来制造老鼠。&lt;/p&gt;&#xA;&lt;p&gt;YC代表了一种新的、更小的动物——小到所有规则都不同。&lt;/p&gt;&#xA;&lt;p&gt;在我们之前，创业资金业务中的大多数公司都是风险投资基金。VC通常资助比我们更晚阶段的公司。他们提供如此多的资金，以至于即使他们做的其他事情可能很有价值，但将VC视为资金来源并不那么不准确。好的VC是&amp;quot;聪明的钱&amp;quot;，但它们仍然是钱。&lt;/p&gt;&#xA;&lt;p&gt;所有好的投资者都提供资金和帮助的组合。但这些以不同方式扩展，就像体积和表面积一样。后期投资者提供巨额资金和相对较少的帮助：当一家即将上市的公司获得5000万美元的夹层融资时，交易几乎完全是关于资金。当你在风险投资过程中提前时，帮助与资金的比例增加，因为早期阶段的公司有不同的需求。早期阶段的公司需要更少的钱，因为它们更小且运行成本更低，但它们需要更多的帮助，因为它们的生活非常不稳定。因此，当VC进行200万美元的A轮融资时，他们通常期望在资金之外提供大量的帮助。&lt;/p&gt;&#xA;&lt;p&gt;Y Combinator占据了频谱的最早端。我们在VC融资之前至少有一步，通常有两步。（虽然一些创业公司直接从YC转到VC，但最常见的轨迹是先进行天使轮融资。）而在Y Combinator发生的事情与A轮融资中发生的事情的不同，就像A轮融资与夹层融资的不同一样。&lt;/p&gt;&#xA;&lt;p&gt;在我们这一端，资金几乎是一个微不足道的因素。创业公司通常只由创始人组成。他们的生活费用是公司的主要开支，而且由于大多数创始人不到30岁，他们的生活费用很低。但在这个早期阶段，公司需要很多帮助。实际上每个问题都还没有答案。我们资助的一些公司已经在他们的软件上工作了一年或更长时间，但其他公司还没有决定要做什么，甚至还没有决定创始人应该由谁组成。&lt;/p&gt;&#xA;&lt;p&gt;当公关人员和记者在创业公司变大后重述它们的历史时，他们总是低估最初的不确定性。他们不是故意误导。当你看像谷歌这样的公司时，很难想象它们曾经可能是渺小和无助的。当然，在某个时候它们只是车库里的几个人——但即使那时它们的伟大也是确定的，它们所要做的就是沿着命运的铁路轨道前进。&lt;/p&gt;&#xA;&lt;p&gt;远非如此。许多同样有希望开端的创业公司最终失败了。谷歌现在有如此大的势头，任何人要阻止它们都会很困难。但在开始时，只需要两名谷歌员工在六个月内专注于错误的事情，公司就可能死亡。&lt;/p&gt;&#xA;&lt;p&gt;我们知道，因为我们曾经经历过，创业公司在最早阶段是多么脆弱。奇怪的是，这就是创始人从它们中获得如此富有回报的原因。回报总是与风险成比例，而非常早期的创业公司风险极高。&lt;/p&gt;&#xA;&lt;p&gt;我们在Y Combinator真正做的是让创业公司直线启动。你可以为YC使用的许多比喻之一是航空母舰上的蒸汽弹射器。我们让创业公司升空。几乎刚刚升空，但足以让它们快速加速。&lt;/p&gt;&#xA;&lt;p&gt;当你发射飞机时，它们必须正确设置，否则你只是在发射抛射物。它们必须直指甲板；机翼必须正确调整；发动机必须全速运转；飞行员必须准备好。这些就是我们处理的问题。在我们资助创业公司后，我们与它们密切合作三个月——事实上如此密切以至于我们坚持它们搬到我们所在的地方。而我们在那三个月所做的是确保一切都为启动做好准备。如果联合创始人之间有紧张关系，我们帮助解决。我们将所有文件正确设置，以免以后出现 nasty 惊喜。如果创始人不确定首先关注什么，我们试图弄清楚。如果它们面前有障碍，我们要么试图移除它，要么将创业公司横向移动。目标是将所有干扰排除在外，以便创始人可以利用这段时间来构建（或完成构建）令人印象深刻的东西。然后在三个月即将结束时，我们按下蒸汽弹射器的按钮，以Demo Day的形式，当前一批创业公司向硅谷几乎每个投资者展示。&lt;/p&gt;&#xA;&lt;p&gt;启动公司与启动产品并不相同。虽然我们在产品启动策略上花了很多时间，但有些东西构建时间太长，创业公司无法在筹集下一轮融资之前启动它们。我们资助的一些最有前途的创业公司还没有启动它们的产品，但作为公司已经 definitely 启动了。&lt;/p&gt;&#xA;&lt;p&gt;在最早阶段，创业公司不仅有更多问题需要回答，而且它们往往是不同类型的问题。在后期创业公司中，问题涉及交易、招聘或组织。在最早期阶段，它们往往涉及技术和设计。你制造什么？这是要解决的第一个问题。这就是为什么我们的座右铭是&amp;quot;制造人们想要的东西&amp;quot;。这对公司来说总是一件好事，但在早期更重要，因为它为所有其他问题设定了界限。你雇佣谁，你筹集多少钱，你如何营销自己——它们都取决于你在制造什么。&lt;/p&gt;&#xA;&lt;p&gt;因为早期问题如此多地涉及技术和设计，你可能需要是黑客才能做我们所做的事情。虽然一些VC有技术背景，但我不知道还有谁仍在编写代码。他们的专业知识主要在商业方面——这是应该的，因为这是你在A轮和（如果你幸运的话）IPO之间阶段需要的专业知识类型。&lt;/p&gt;&#xA;&lt;p&gt;我们与VC如此不同，以至于我们真的是一种不同的动物。我们能否声称创始人因这种新型风险投资公司而处境更好？我很确定答案是肯定的，因为YC是我们创业公司所发生事情的改进版本，而我们的案例并不典型。我们用朋友朱利安提供的10,000美元种子资金开始了Viaweb。他是一名律师，安排了我们所有的文书工作，所以我们可以只是编码。我们花了三个月时间构建版本1，然后向投资者展示以筹集更多资金。听起来很熟悉，不是吗？但YC显著改善了这一点。朱利安对法律和商业了解很多，但他的建议仅止于此；他不是创业公司的人。所以我们早期犯了一些基本错误。当我们向投资者展示时，我们只向2个人展示，因为这是我们所认识的全部。如果我们有后来的自己来鼓励和建议我们，有Demo Day可以展示，我们的状况会好得多。我们可能能够以我们估值的3到5倍筹集资金。&lt;/p&gt;&#xA;&lt;p&gt;如果我们拿走我们资助公司7%的股份，创始人只需要在下一轮融资中做得好7.5%就能净收益领先。我们肯定能做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;那么我们的7%来自谁？如果创始人最终净收益领先，那不是来自他们。那么是来自后期投资者吗？嗯，他们最终确实支付了更多。但我认为他们支付更多是因为公司实际上更有价值。而后期投资者对此没有问题。VC基金的回报取决于他们投资公司的质量，而不是他们能多便宜地购买股票。&lt;/p&gt;&#xA;&lt;p&gt;如果我们所做的事情有用，为什么以前没有人做？对此有两个答案。一个是人们以前做过，只是零散地小规模做。在我们之前，种子资金主要来自个人天使投资者。例如，拉里和谢尔盖从太阳公司创始人之一安迪·贝托尔斯海姆那里获得了他们的种子资金。因为他是个创业公司的人，他可能给了他们有用的建议。但从天使投资者那里筹集资金是碰运气的事情。对大多数天使来说，这是一个副业，所以他们一年只做少数几笔交易，他们不会在他们投资的创业公司上花很多时间。而且他们很难联系到，因为他们不希望随机的创业公司用商业计划书烦扰他们。谷歌的伙计们很幸运，因为他们认识认识贝托尔斯海姆的人。与天使通常需要个人介绍。&lt;/p&gt;&#xA;&lt;p&gt;没有人做我们所做的事情的另一个原因是，直到最近，创办创业公司的成本要高得多。你会注意到我们没有资助任何生物技术创业公司。那仍然很昂贵。但进步的技术使网络创业公司如此便宜，以至于你真的可以用15,000美元让一家公司升空。如果你理解如何操作蒸汽弹射器的话。&lt;/p&gt;&#xA;&lt;p&gt;因此，实际上发生的情况是，一个新的生态位已经开放，而Y Combinator是进入它的新动物。我们不是风险投资基金的替代品。我们占据一个新的、相邻的生态位。而我们生态位的条件确实相当不同。不仅仅是我们面临的问题不同；整个业务结构都不同。VC在玩零和游戏。他们都在竞争固定数量&amp;quot;交易流&amp;quot;的一块，这解释了他们很多行为。而我们的模式是通过鼓励那些会找到工作的黑客转而创办自己的创业公司来创造新的交易流。我们更多地与雇主竞争，而不是VC。&lt;/p&gt;&#xA;&lt;p&gt;发生这样的事情并不令人惊讶。大多数领域随着发展变得更加专业化——更加细化，而创业公司当然是过去几十年中有很多发展的领域。风险投资业务目前的形式只有大约四十年历史。它会进化是合乎道理的。&lt;/p&gt;&#xA;&lt;p&gt;新的生态位最初会被描述，甚至被其居民用旧的术语来描述，这是自然的。但实际上Y Combinator并不从事创业融资业务。实际上，我们更像是一个小的、毛茸茸的蒸汽弹射器。&lt;/p&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克威尔、杰西卡·利文斯顿和罗伯特·莫里斯阅读本文的草稿。&lt;/p&gt;&#xA;&lt;p&gt;评论这篇文章。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么是YC</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/whyyc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/whyyc/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/whyyc/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/whyyc.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/whyyc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/whyyc.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;为什么是yc&#34;&gt;为什么是YC&lt;/h1&gt;&#xA;&lt;p&gt;2006年3月，修订于2009年8月&lt;/p&gt;&#xA;&lt;p&gt;昨天，我们资助的一位创始人问我为什么创办了Y Combinator。或者更准确地说，他问我们是否主要是为了好玩而创办YC。&lt;/p&gt;&#xA;&lt;p&gt;有点，但不完全是。能够再次与Rtm和Trevor一起工作是非常有趣的。在卖掉Viaweb后我怀念这种感觉，之后所有年我都有一个后台进程在运行，寻找我们可以一起做的事情。Y Combinator肯定有乐队重聚的成分。每隔几天我都会不小心叫它&amp;quot;Viaweb&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;我们创办Viaweb非常明确地是为了赚钱。我厌倦了从一个自由职业项目活到下一个项目，决定尽可能努力工作，直到我赚到足够的钱一劳永逸地解决这个问题。Viaweb有时很有趣，但它不是为了有趣而设计的，而且大多数时候并不有趣。如果有任何创业公司是有趣的，我会感到惊讶。所有创业公司大部分都是辛苦活。&lt;/p&gt;&#xA;&lt;p&gt;我们创办Y Combinator的真正原因既不是自私也不是高尚。我们创办它不是为了赚钱；我们不知道平均回报可能是什么，而且几年内都不会知道。我们创办YC也不是主要为了帮助年轻的准创始人，尽管我们确实喜欢这个想法，偶尔用这样的想法安慰自己：如果我们所有的投资都失败了，我们至少做了无私的事情。（这奇怪地是不确定的。）&lt;/p&gt;&#xA;&lt;p&gt;我们创办Y Combinator的真正原因可能只有黑客才能理解。我们这样做是因为它看起来是一个如此伟大的黑客手段。有成千上万聪明的人可以创办公司但没有创办，而在恰当的地方施加相对较小的力量，我们就可以为世界带来一股新的创业公司浪潮，而这些公司本可能不存在。&lt;/p&gt;&#xA;&lt;p&gt;在某种程度上这是高尚的，因为我认为创业公司是好事。但真正激励我们的是那种完全非道德的欲望，这种欲望会激励任何黑客，当他看着某个复杂的设备并意识到通过微小的调整他可以使它更高效地运行时。在这种情况下，这个设备是世界经济，而幸运的是它恰好是开源的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>伟大的黑客</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/gh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/gh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/gh/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/gh.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/gh.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/gh.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;伟大的黑客&#34;&gt;伟大的黑客&lt;/h1&gt;&#xA;&lt;p&gt;2004年7月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自2004年Oscon大会的演讲。）&lt;/p&gt;&#xA;&lt;p&gt;几个月前我完成了一本新书，在评论中我不断注意到诸如&amp;quot;挑衅性&amp;quot;和&amp;quot;争议性&amp;quot;的词语。更不用说&amp;quot;白痴&amp;quot;了。&lt;/p&gt;&#xA;&lt;p&gt;我并不是想让这本书具有争议性。我试图让它高效。我不想浪费人们的时间告诉他们他们已经知道的事情。更高效的方法只是给他们差异。但我想这必然会产生一本令人担忧的书。&lt;/p&gt;&#xA;&lt;h2 id=&#34;爱迪生们&#34;&gt;爱迪生们&lt;/h2&gt;&#xA;&lt;p&gt;最具争议的想法是：财富的差异可能并不像我们想象的那么大问题。&lt;/p&gt;&#xA;&lt;p&gt;我在书中没有说财富差异本身就是好事。我说在某些情况下它可能是好事的标志。剧烈的头痛不是好事，但它可能是好事的标志——例如，你被击中头部后正在恢复意识。&lt;/p&gt;&#xA;&lt;p&gt;财富差异可能是生产力差异的标志。（在一个人的社会中，它们是相同的。）这几乎肯定是好事：如果你的社会没有生产力差异，可能不是因为每个人都是托马斯·爱迪生。而是因为你没有托马斯·爱迪生。&lt;/p&gt;&#xA;&lt;p&gt;在低技术社会中，你看不到太多的生产力差异。如果你有一群游牧民族为火收集木棍，最好的木棍收集者比最差的能多收集多少？两倍？而当你给人们一个像电脑这样的复杂工具时，他们能用它做的事情的差异是巨大的。&lt;/p&gt;&#xA;&lt;p&gt;这不是一个新想法。Fred Brooks在1974年写过这个，他引用的研究发表于1968年。但我认为他低估了程序员之间的差异。他写了代码行数方面的生产力：最好的程序员可以在十分之一的时间内解决给定问题。但如果问题没有给定呢？在编程中，就像在许多领域一样，困难的部分不是解决问题，而是决定要解决什么问题。想象力很难衡量，但在实践中它主导着以代码行数衡量的那种生产力。&lt;/p&gt;&#xA;&lt;p&gt;生产力在任何领域都有变化，但很少有领域变化如此之大。程序员之间的差异如此之大，以至于成为一种质的差异。我不认为这是编程固有的，但在每个领域，技术都放大了生产力的差异。我认为编程中发生的事情只是因为我们有很多技术杠杆。但在每个领域，杠杆都在变长，所以我们看到的差异是随着时间的推移，越来越多的领域都会看到的。公司和国家的成功将越来越取决于他们如何应对这个问题。&lt;/p&gt;&#xA;&lt;p&gt;如果生产力的差异随着技术而增加，那么最有生产力个体的贡献不仅会不成比例地大，而且会随着时间的推移而实际增长。当你达到一个群体的90%产出由其1%的成员创造的地步时，如果有什么（无论是维京袭击，还是中央计划）将他们的生产力拖到平均水平，你就会损失惨重。&lt;/p&gt;&#xA;&lt;p&gt;如果我们想充分利用他们，我们需要了解这些特别有生产力的人。什么激励他们？他们需要什么来做他们的工作？你如何认识他们？你如何让他们来为你工作？然后当然还有这个问题，你如何成为其中一员？&lt;/p&gt;&#xA;&lt;h2 id=&#34;不仅仅是金钱&#34;&gt;不仅仅是金钱&lt;/h2&gt;&#xA;&lt;p&gt;我认识一些超级黑客，所以我坐下来思考他们有什么共同点。他们的决定性品质可能是他们真的喜欢编程。普通程序员写代码是为了付账单。伟大的黑客认为这是他们为了乐趣而做的事情，并且很高兴发现有人会为此付钱。&lt;/p&gt;&#xA;&lt;p&gt;伟大的程序员有时被认为对金钱漠不关心。这不完全正确。确实，他们真正关心的只是做有趣的工作。但如果你赚了足够的钱，你就可以做任何你想做的工作，因此黑客被赚取巨额金钱的想法所吸引。但只要他们还必须每天上班工作，他们更关心在那里做什么，而不是得到多少报酬。&lt;/p&gt;&#xA;&lt;p&gt;从经济学上讲，这是最重要的事实，因为这意味着你不必支付伟大的黑客接近他们价值的报酬。一个伟大的程序员可能比普通程序员生产力高十倍或一百倍，但他会认为能获得三倍报酬就很幸运了。正如我稍后要解释的，这部分是因为伟大的黑客不知道他们有多好。但也是因为金钱不是他们主要想要的东西。&lt;/p&gt;&#xA;&lt;p&gt;黑客想要什么？像所有工匠一样，黑客喜欢好工具。事实上，这低估了。好的黑客发现无法忍受使用坏工具。他们会拒绝在错误基础设施的项目上工作。&lt;/p&gt;&#xA;&lt;p&gt;在我曾经工作过的一家创业公司，我们公告板上钉着的一张东西是IBM的广告。那是一张AS400的图片，标题写着，我认为，&amp;ldquo;黑客鄙视它。&amp;quot;[1]&lt;/p&gt;&#xA;&lt;p&gt;当你决定为项目使用什么基础设施时，你不仅在做出技术决定。你还在做出社会决定，而这可能是两者中更重要的。例如，如果你的公司想写一些软件，用Java写似乎是一个谨慎的选择。但当你选择一种语言时，你也在选择一个社区。你能雇佣来在Java项目上工作的程序员不会像你能雇佣来在Python项目上工作的那样聪明。而你的黑客的质量可能比你选择的语言更重要。虽然，坦率地说，好的黑客更喜欢Python而不是Java这一事实应该告诉你这些语言的相对优点。&lt;/p&gt;&#xA;&lt;p&gt;商业类型更喜欢最流行的语言，因为他们将语言视为标准。他们不想在公司上下注Betamax。但语言的问题是，它们不仅仅是标准。如果你必须通过网络传输比特，务必使用TCP/IP。但编程语言不仅仅是格式。编程语言是一种表达媒介。&lt;/p&gt;&#xA;&lt;p&gt;我读到Java刚刚超过Cobol成为最流行的语言。作为标准，你不能期望更多。但作为表达媒介，你可以做得更好。在我能想到的所有伟大程序员中，我只知道一个会自愿用Java编程。而在我能想到的所有不为Sun工作的伟大程序员中，在Java方面，我一个也不知道。&lt;/p&gt;&#xA;&lt;p&gt;伟大的黑客通常也坚持使用开源软件。不仅仅是因为它更好，还因为它给他们更多控制权。好的黑客坚持控制权。这是使他们成为好黑客的部分原因：当某些东西坏了时，他们需要修复它。你希望他们对你为他们编写的软件有这种感觉。当他们对操作系统有同样的感觉时，你不应该感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;几年前，一个风险投资家朋友告诉我他参与的一家新创业公司。听起来很有希望。但下次我和他交谈时，他们说他们决定在Windows NT上构建软件，并刚刚聘请了一位非常有经验的NT开发者担任首席技术官。当我听到这个时，我想，这些人注定要失败。第一，CTO不可能是第一流黑客，因为要成为杰出的NT开发者，他必须自愿多次使用NT，我无法想象一个伟大的黑客会这样做；第二，即使他很好，如果项目必须在NT上构建，他也很难雇佣到优秀的人才。[2]&lt;/p&gt;&#xA;&lt;h2 id=&#34;最后的边疆&#34;&gt;最后的边疆&lt;/h2&gt;&#xA;&lt;p&gt;除了软件，黑客最重要的工具可能是他的办公室。大公司认为办公室空间的功能是表达等级。但黑客不仅仅为此使用办公室：他们将办公室作为思考的地方。如果你是一家技术公司，他们的思想就是你的产品。所以让黑客在嘈杂、分散注意力的环境中工作，就像在油漆厂空气中充满烟尘。&lt;/p&gt;&#xA;&lt;p&gt;连环漫画Dilbert有很多关于隔间的说法，这是有充分理由的。我认识的所有黑客都鄙视它们。仅仅被中断的前景就足以阻止黑客处理困难问题。如果你想在有隔间的办公室里完成真正的工作，你只有两个选择：在家工作，或在别人不在的时候早点来、晚点来或周末来。公司没有意识到这是出了问题的标志吗？办公室环境应该是有助于你工作的东西，而不是你尽管如此才工作的东西。&lt;/p&gt;&#xA;&lt;p&gt;像思科这样的公司为每个人都有一间隔间而自豪，即使是CEO。但他们不像他们想象的那么先进；显然他们仍然将办公室空间视为等级的标志。还要注意，思科以很少在内部进行产品开发而闻名。他们通过收购创造新技术的创业公司来获得新技术——大概在那里黑客确实有安静的工作地方。&lt;/p&gt;&#xA;&lt;p&gt;一家理解黑客需求的大公司是微软。我曾经看到过微软的招聘广告，有一张门的大图片。为我们工作，前提是，我们会给你一个可以真正完成工作的地方。而且你知道，微软在大公司中之所以非凡，是因为他们能够在内部开发软件。也许不太好，但足够好。&lt;/p&gt;&#xA;&lt;p&gt;如果公司希望黑客有生产力，他们应该看看他们在家里做什么。在家里，黑客可以自己安排事情，以便完成最多的工作。当黑客在家工作时，他们不在嘈杂、开放的空间工作；他们在有门的房间里工作。他们在舒适、社区化的地方工作，周围有人，需要思考时可以散步，而不是在停车场英亩的玻璃盒子里。他们有可以在感到疲倦时小睡的沙发，而不是坐在桌前昏迷，假装工作。没有吸尘器人员在每晚黑客黄金时间呼啸而过。没有会议，或者，天哪，公司静修或团队建设练习。当你看他们在电脑上做什么时，你会发现它强化了我之前关于工具的说法。他们在工作时可能必须使用Java和Windows，但在家里，当他们可以自由选择时，你更可能发现他们使用Perl和Linux。&lt;/p&gt;&#xA;&lt;p&gt;事实上，这些关于Cobol或Java是最流行语言的统计数据可能会产生误导。如果我们想知道什么工具最好，我们应该看的是黑客在可以自由选择时选择什么——也就是说，在他们自己的项目中。当你问这个问题时，你会发现开源操作系统已经占据了主导市场份额，排名第一的语言可能是Perl。&lt;/p&gt;&#xA;&lt;h2 id=&#34;有趣&#34;&gt;有趣&lt;/h2&gt;&#xA;&lt;p&gt;除了好工具，黑客想要有趣的项目。什么使项目有趣？嗯，显然像隐形飞机或特效软件那样明显性感的应用程序会很有趣。但任何应用程序如果提出新颖的技术挑战，都可能很有趣。所以很难预测黑客会喜欢哪些问题，因为有些只有在工作的人发现新的解决方案时才变得有趣。在ITA（编写Orbitz内部软件的公司）之前，从事机票价格搜索的人可能认为这是可以想象的最无聊的应用程序。但ITA通过以更雄心勃勃的方式重新定义问题使其变得有趣。&lt;/p&gt;&#xA;&lt;p&gt;我认为谷歌也发生了同样的事情。当谷歌成立时，所谓门户网站的传统看法是搜索很无聊且不重要。但谷歌的人不认为搜索无聊，这就是为什么他们做得这么好。&lt;/p&gt;&#xA;&lt;p&gt;这是管理者可以有所作为的领域。就像父母对孩子说，我打赌你不能在十分钟内清理整个房间，一个好的管理者有时可以将问题重新定义为更有趣的问题。史蒂夫·乔布斯似乎特别擅长这个，部分原因只是因为他有高标准。在Mac之前有很多小型、便宜的电脑。他将问题重新定义为：制造一个漂亮的。这可能比任何胡萝卜或大棒更能驱动开发者。&lt;/p&gt;&#xA;&lt;p&gt;他们确实做到了。当Mac首次出现时，你甚至不必打开它就知道它会很好；你可以从机箱上看出来。几周前我在剑桥的街上走，在某个人的垃圾里我看到了一个似乎是Mac手提箱的东西。我往里看，里面有一台Mac SE。我带回家插上电，它启动了。快乐的Macintosh脸，然后是finder。我的天，它是如此简单。就像&amp;hellip;&amp;hellip;谷歌。&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢为有高标准的人工作。但仅仅精确是不够的。你必须坚持正确的事情。这通常意味着你必须自己是一个黑客。我偶尔看到过关于如何管理程序员的文章。真的应该有两篇文章：一篇是关于如果你自己是程序员该做什么，另一篇是关于如果你不是该做什么。而第二篇可能可以浓缩成两个词：放弃。&lt;/p&gt;&#xA;&lt;p&gt;问题不在于日常管理。真正好的黑客几乎是自我管理的。问题是，如果你不是黑客，你无法分辨谁是好黑客。一个类似的问题解释了为什么美国汽车如此丑陋。我称之为设计悖论。你可能认为你可以通过雇佣伟大的设计师来设计产品而使产品美丽。但如果你自己没有好品味，你如何认识好设计师？根据定义，你无法从他的作品集中判断。你也不能看他获得的奖项或工作，因为在设计领域，就像在大多数领域一样，这些往往是由时尚和交际驱动的，而实际能力排在第三位。没有办法：你无法在不知道什么是美丽的情况下管理一个旨在生产美丽的过程。美国汽车丑陋是因为美国汽车公司由品味差的人经营。&lt;/p&gt;&#xA;&lt;p&gt;这个国家的许多人认为品味是难以捉摸的，甚至是轻浮的。它都不是。要推动设计，管理者必须是公司产品最苛刻的用户。如果你真的有好品味，你可以像史蒂夫·乔布斯那样，使满足你成为好人喜欢解决的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;讨厌的小问题&#34;&gt;讨厌的小问题&lt;/h2&gt;&#xA;&lt;p&gt;很容易说什么样的问题不是有趣的：那些你必须解决很多讨厌小问题，而不是解决几个大的、清晰的问题。最糟糕的项目之一是为充满错误的软件编写接口。另一个是当你必须为个别客户的复杂和定义不清的需求定制东西。对黑客来说，这类项目是千刀万剐的死亡。&lt;/p&gt;&#xA;&lt;p&gt;讨厌小问题的区别特征是你从中学不到任何东西。编写编译器很有趣，因为它教你什么是编译器。但为有错误的软件编写接口教不了你任何东西，因为错误是随机的。[3] 所以不仅仅是挑剔使好黑客避免讨厌的小问题。这更多是自我保护的问题。处理讨厌的小问题会让你变笨。好黑客避免它就像模特避免奶酪汉堡一样。&lt;/p&gt;&#xA;&lt;p&gt;当然，有些问题固有这种特征。由于供需关系，它们报酬特别高。所以找到方法让伟大黑客处理繁琐问题的公司会非常成功。你会怎么做？&lt;/p&gt;&#xA;&lt;p&gt;这种情况发生的一个地方是创业公司。在我们的创业公司，我们有Robert Morris担任系统管理员。这就像让滚石乐队在犹太成年礼上演奏。你雇佣不到那种人才。但人们会为他们创始人的公司做任何艰苦的工作。[4]&lt;/p&gt;&#xA;&lt;p&gt;大公司通过分割公司来解决这个问题。他们通过建立独立的研发部门来吸引聪明的人为他们工作，员工不必直接处理客户讨厌的小问题。[5] 在这个模型中，研发部门的功能就像矿山。他们产生新想法；也许公司其余部分能够使用它们。&lt;/p&gt;&#xA;&lt;p&gt;你可能不必走到这种极端。自底向上编程提供了另一种分割公司的方法：让聪明的人作为工具制造者工作。如果你的公司制造做x的软件，让一个组构建用于编写这类软件的工具，另一个组使用这些工具编写应用程序。这样你可能能够让聪明的人写99%的代码，但仍然让他们像在传统研发部门那样与用户几乎隔离。工具制造者会有用户，但他们只是公司自己的开发者。[6]&lt;/p&gt;&#xA;&lt;p&gt;如果微软使用这种方法，他们的软件就不会充满安全漏洞，因为编写实际应用程序的较不聪明的人不会做分配内存这样的低级工作。他们不会直接用C编写Word，而是将Word语言的大型乐高积木拼在一起。（Duplo，我相信是技术术语。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;聚集&#34;&gt;聚集&lt;/h2&gt;&#xA;&lt;p&gt;除了有趣的问题，好黑客喜欢的还有其他好黑客。伟大的黑客倾向于聚集在一起——有时如此壮观，就像在施乐帕洛阿尔托研究中心。所以你不会以线性比例吸引好黑客，因为你为他们创造的环境有多好。聚集的倾向意味着它更像是环境的平方。所以赢家通吃。在任何给定时间，只有大约十个或二十个黑客最想工作的地方，如果你不是其中之一，你不仅会有更少的伟大黑客，你会是零。&lt;/p&gt;&#xA;&lt;p&gt;拥有伟大的黑客本身并不足以使公司成功。这对谷歌和ITA很有效，它们是现在的两个热点，但它没有帮助思维机器或施乐。Sun曾经有一段好时光，但他们的商业模式是下降电梯。在这种情况下，即使最好的黑客也救不了你。&lt;/p&gt;&#xA;&lt;p&gt;不过，我认为，在其他条件相同的情况下，能够吸引伟大黑客的公司将具有巨大优势。有人会不同意这一点。当我们在1990年代走访风险投资公司时，几家告诉我们软件公司不是通过编写伟大的软件获胜，而是通过品牌、主导渠道和做正确的交易。&lt;/p&gt;&#xA;&lt;p&gt;他们似乎真的相信这一点，我想我知道为什么。我认为许多风险投资家寻找的，至少在无意识中，是下一个微软。当然，如果微软是你的模型，你不应该寻找希望通过编写伟大软件获胜的公司。但风险投资家寻找下一个微软是错误的，因为没有创业公司能成为下一个微软，除非其他公司准备在恰到好处的时刻弯腰成为下一个IBM。&lt;/p&gt;&#xA;&lt;p&gt;使用微软作为模型是错误的，因为他们的整个文化源自那一次幸运的突破。微软是一个坏的数据点。如果你把他们扔出去，你会发现好产品确实倾向于在市场上获胜。风险投资家应该寻找的是下一个苹果，或下一个谷歌。&lt;/p&gt;&#xA;&lt;p&gt;我想比尔·盖茨知道这一点。谷歌让他担心的不是他们品牌的力量，而是他们有更好的黑客。[7]&lt;/p&gt;&#xA;&lt;h2 id=&#34;认可&#34;&gt;认可&lt;/h2&gt;&#xA;&lt;p&gt;那么谁是伟大的黑客？你遇到时如何知道？结果证明这非常困难。即使是黑客也说不出来。我现在很确定我的朋友Trevor Blackwell是一个伟大的黑客。你可能读过Slashdot上关于他如何制作自己的Segway的报道。这个项目的显著之处是他在一天内写了所有软件（顺便说一句，用Python）。&lt;/p&gt;&#xA;&lt;p&gt;对Trevor来说，这是家常便饭。但当我第一次遇到他时，我认为他是个十足的白痴。他站在Robert Morris的办公室里对他喋喋不休地说着什么，我记得我站在他身后向Robert做疯狂的手势，把这个疯子赶出办公室，这样我们就可以去吃午饭了。Robert说他一开始也误判了Trevor。显然当Robert第一次遇到他时，Trevor刚刚开始一个新计划，涉及在一堆索引卡上写下他生活各方面的所有内容，他随身携带。他也刚从加拿大来，有浓重的加拿大口音和mullet发型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于语言设计的五个问题</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/langdes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/langdes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/langdes/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/langdes.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/langdes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/langdes.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;关于语言设计的五个问题&#34;&gt;关于语言设计的五个问题&lt;/h1&gt;&#xA;&lt;p&gt;2001年5月&lt;/p&gt;&#xA;&lt;p&gt;（这些是我在2001年5月10日MIT编程语言设计小组讨论会上所做的笔记。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-编程语言是为人设计的&#34;&gt;1. 编程语言是为人设计的。&lt;/h2&gt;&#xA;&lt;p&gt;编程语言是人们与计算机交流的方式。计算机对于任何无歧义的语言都会同样满意。我们有高级语言的原因是因为人们无法处理机器语言。编程语言的要点是防止我们可怜脆弱的人类大脑被大量细节所淹没。&lt;/p&gt;&#xA;&lt;p&gt;建筑师知道某些设计问题比其他问题更具个人性。最干净、最抽象的设计问题之一是设计桥梁。在那里，你的工作主要是用最少的材料跨越给定的距离。光谱的另一端是设计椅子。椅子设计师必须花时间思考人类的臀部。&lt;/p&gt;&#xA;&lt;p&gt;软件也是如此。设计网络数据路由算法是一个很好的抽象问题，就像设计桥梁。而设计编程语言就像设计椅子：这完全是关于处理人类弱点的问题。&lt;/p&gt;&#xA;&lt;p&gt;我们大多数人都讨厌承认这一点。设计具有数学优雅性的系统对我们大多数人来说比迎合人类弱点听起来更有吸引力。数学优雅确实有作用：某些优雅性使程序更容易理解。但优雅本身不是目的。&lt;/p&gt;&#xA;&lt;p&gt;当我说语言必须设计得适合人类弱点时，我并不是说语言必须为糟糕的程序员设计。事实上我认为你应该为最好的程序员设计，但即使是最好的程序员也有局限性。我认为没有人会喜欢在所有变量都是带整数下标的字母x的语言中编程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-为自己和你的朋友设计&#34;&gt;2. 为自己和你的朋友设计。&lt;/h2&gt;&#xA;&lt;p&gt;如果你看看编程语言的历史，很多最好的语言都是为其作者自己使用的语言设计的，而很多最差的语言是为其他人使用而设计的。&lt;/p&gt;&#xA;&lt;p&gt;当语言为其他人设计时，总是特定的一群其他人：没有语言设计师聪明的人。所以你得到一种居高临下的语言。Cobol是最极端的例子，但很多语言都充斥着这种精神。&lt;/p&gt;&#xA;&lt;p&gt;这与语言的抽象程度无关。C是相当低级的，但它是为其作者使用而设计的，这就是为什么黑客喜欢它。&lt;/p&gt;&#xA;&lt;p&gt;为糟糕的程序员设计语言的论点是糟糕的程序员比好程序员多。可能是这样。但是那些少数好程序员编写了不成比例的大量软件。&lt;/p&gt;&#xA;&lt;p&gt;我对这个问题很感兴趣，你如何设计一种最好的黑客会喜欢的语言？我碰巧认为这与如何设计一种好的编程语言是同一个问题，但即使不是，它至少是一个有趣的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-给程序员尽可能多的控制权&#34;&gt;3. 给程序员尽可能多的控制权。&lt;/h2&gt;&#xA;&lt;p&gt;许多语言（特别是为其他人设计的语言）都有保姆的态度：它们试图阻止你做它们认为对你不好的事情。我喜欢相反的方法：给程序员尽可能多的控制权。&lt;/p&gt;&#xA;&lt;p&gt;当我第一次学习Lisp时，我最喜欢的是它把我当作平等的伙伴。在我之前学习的其他语言中，有语言本身和用该语言写的我的程序，两者非常分离。但在Lisp中，我编写的函数和宏就像构成语言本身的那些一样。如果我想，我可以重写语言。它有着与开源软件相同的吸引力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-追求简洁&#34;&gt;4. 追求简洁。&lt;/h2&gt;&#xA;&lt;p&gt;简洁被低估甚至被鄙视。但如果你深入了解黑客的内心，你会发现他们真的很喜欢它。你有多少次听到黑客深情地谈到，比如说，在APL中，他们只需几行代码就能做出惊人的事情？我认为任何真正聪明的人真正喜欢的东西都值得注意。&lt;/p&gt;&#xA;&lt;p&gt;我认为几乎任何能让程序更短的事情都是好的。应该有很多库函数；任何可以隐含的东西都应该；语法应该简洁到极致；甚至事物的名称都应该简短。&lt;/p&gt;&#xA;&lt;p&gt;不仅程序应该简短。手册也应该薄。手册的很大部分被用于澄清、保留、警告和特殊情况。如果你强迫自己缩短手册，在最好的情况下，你会通过修复语言中需要这么多解释的东西来实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-承认黑客的本质&#34;&gt;5. 承认黑客的本质。&lt;/h2&gt;&#xA;&lt;p&gt;很多人希望黑客是数学，或者至少是类似自然科学的东西。我认为黑客更像是建筑。建筑与物理学有关，因为建筑师必须设计不会倒塌的建筑，但建筑师的真正目标是建造伟大的建筑，而不是做出关于静力学的发现。&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢做的是编写伟大的程序。而且我认为，至少在我们自己的心中，我们必须记住，编写伟大的程序是一件令人钦佩的事情，即使这项工作不容易转化为研究论文的传统智力货币。在智力上，设计程序员会喜欢的语言与设计一个包含你可以发表论文的某些想法的糟糕语言同样有价值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开放性问题&#34;&gt;开放性问题&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-如何组织大型库&#34;&gt;1. 如何组织大型库？&lt;/h3&gt;&#xA;&lt;p&gt;库正在成为编程语言越来越重要的组成部分。它们也在变得更大，这可能很危险。如果找到能做你想要的事情的库函数比你自己编写它需要更长的时间，那么所有这些代码只是在让你的手册变厚。（Symbolics手册就是一个例子。）所以我认为我们必须研究组织库的方法。理想的情况是设计它们，使程序员能够猜测哪个库调用会做正确的事情。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-人们真的害怕前缀语法吗&#34;&gt;2. 人们真的害怕前缀语法吗？&lt;/h3&gt;&#xA;&lt;p&gt;这是一个开放性问题，在这个意义上我多年来一直在思考它，但仍然不知道答案。前缀语法对我来说似乎完全自然，可能除了数学。但Lisp不受欢迎可能只是因为它有陌生的语法。如果这是真的，是否要对此做些什么是另一个问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-基于服务器的软件需要什么&#34;&gt;3. 基于服务器的软件需要什么？&lt;/h3&gt;&#xA;&lt;p&gt;我认为未来二十年内编写的最令人兴奋的新应用程序中，很多将是基于Web的应用程序，意味着程序位于服务器上并通过Web浏览器与你交谈。而编写这类程序我们可能需要一些新东西。&lt;/p&gt;&#xA;&lt;p&gt;我们需要的一件事是支持基于服务器的应用程序发布的新方式。不像桌面软件那样每年有一两个大的发布版本，基于服务器的应用程序作为一系列小变化发布。你一天可能有五到十个发布版本。而且作为规则，每个人都会总是使用最新版本。&lt;/p&gt;&#xA;&lt;p&gt;你知道你可以设计程序以便调试吗？嗯，基于服务器的软件同样必须设计成可改变的。你必须能够轻松地改变它，或者至少知道什么是小的改变，什么是重大的改变。&lt;/p&gt;&#xA;&lt;p&gt;另一个可能对基于服务器的软件有用的东西，令人惊讶的是，是continuations。在基于Web的软件中，你可以使用类似continuation-passing style的东西来在Web会话本质上无状态的世界中获得子程序的效果。如果不太昂贵，拥有实际的continuations可能是值得的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-还有什么新的抽象有待发现&#34;&gt;4. 还有什么新的抽象有待发现？&lt;/h3&gt;&#xA;&lt;p&gt;我不确定这个希望有多合理，但我个人真的很想做的一件事是发现一个新的抽象——某种能像拥有一等函数或递归甚至关键字参数那样产生巨大影响的东西。这可能是一个不可能实现的梦想。这些东西并不经常被发现。但我一直在寻找。&lt;/p&gt;&#xA;&lt;h2 id=&#34;预测&#34;&gt;预测&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-你可以使用任何你想要的语言&#34;&gt;1. 你可以使用任何你想要的语言。&lt;/h3&gt;&#xA;&lt;p&gt;编写应用程序过去意味着编写桌面软件。在桌面软件中，有很大的偏向于使用与操作系统相同的语言编写应用程序。所以十年前，编写软件几乎意味着用C编写软件。最终形成了一个传统：应用程序不能用不寻常的语言编写。而这个传统有很长时间发展，以至于像经理和风险投资家这样的非技术人员也学会了它。&lt;/p&gt;&#xA;&lt;p&gt;基于服务器的软件彻底打破了这一模式。使用基于服务器的软件，你可以使用任何你想要的语言。几乎没有人理解这一点（特别是经理和风险投资家）。一些黑客理解它，这就是为什么我们甚至听到像Perl和Python这样的新的独立语言。我们听到Perl和Python不是因为人们用它们编写Windows应用程序。&lt;/p&gt;&#xA;&lt;p&gt;作为对设计编程语言感兴趣的人，这对我们意味着我们的工作现在可能有真正的受众。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-速度来自分析器&#34;&gt;2. 速度来自分析器。&lt;/h3&gt;&#xA;&lt;p&gt;语言设计师，或者至少语言实现者，喜欢编写生成快速代码的编译器。但我不认为这是使语言对用户来说快速的原因。Knuth很久以前就指出，速度只在几个关键瓶颈中重要。任何尝试过的人都知道你无法猜测这些瓶颈在哪里。分析器是答案。&lt;/p&gt;&#xA;&lt;p&gt;语言设计师在解决错误的问题。用户不需要基准测试运行得快。他们需要的是一种能够显示他们自己程序的哪些部分需要重写的语言。这就是实践中速度的来源。所以也许如果语言实现者把他们本来会花在编译器优化上的一半时间用来编写一个好的分析器，这会是一个净收益。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-你需要一个应用程序来推动语言的设计&#34;&gt;3. 你需要一个应用程序来推动语言的设计。&lt;/h3&gt;&#xA;&lt;p&gt;这可能不是一个绝对的规则，但似乎最好的语言都是与它们被用来编写的某个应用程序一起演化的。C是由需要它进行系统编程的人编写的。Lisp的开发部分是为了进行符号微分，McCarthy如此急于开始，甚至在1960年第一篇关于Lisp的论文中就在编写微分程序。&lt;/p&gt;&#xA;&lt;p&gt;如果你的应用程序解决一些新问题，那就特别好。这将倾向于推动你的语言拥有程序员需要的新特性。我个人对编写一种适合编写基于服务器的应用程序的语言感兴趣。&lt;/p&gt;&#xA;&lt;p&gt;[在小组讨论中，Guy Steele也提出了这一点，并补充建议应用程序不应该包括为你语言编写编译器，除非你的语言碰巧是用于编写编译器的。]&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-语言必须适合编写一次性程序&#34;&gt;4. 语言必须适合编写一次性程序。&lt;/h3&gt;&#xA;&lt;p&gt;你知道什么是一次性程序：你为某些有限任务快速编写的东西。我认为如果你环顾四周，你会发现很多大的、严肃的程序开始时是一次性程序。如果大多数程序开始时是一次性程序，我不会感到惊讶。所以如果你想制造一种适合一般软件编写的好语言，它必须适合编写一次性程序，因为这是大多数软件的幼虫阶段。&lt;/p&gt;</description>
    </item>
    <item>
      <title>大学本科</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/college/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/college/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/college/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/college.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/college.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/college.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;大学本科&#34;&gt;大学本科&lt;/h1&gt;&#xA;&lt;p&gt;想要创业吗？获得Y Combinator的资助。2005年3月&lt;/p&gt;&#xA;&lt;p&gt;（本文的部分内容始于对给我写信提问的学生的回复。）&lt;/p&gt;&#xA;&lt;p&gt;最近我收到了几封计算机科学本科生的邮件，询问在大学应该做什么。我可能不是最好的建议来源，因为我在大学主修的是哲学。但我上了很多计算机科学的课程，以至于大多数计算机科学专业的学生都以为我是其中一员。我当然是个黑客，至少如此。&lt;/p&gt;&#xA;&lt;h2 id=&#34;黑客技术&#34;&gt;黑客技术&lt;/h2&gt;&#xA;&lt;p&gt;在大学里应该做什么才能成为一个优秀的黑客？你可以做两件主要的事情：在编程方面变得非常出色，并学习很多关于特定、酷炫问题的知识。这两件事被证明是等价的，因为每一件都会推动你去做另一件。&lt;/p&gt;&#xA;&lt;p&gt;在编程方面变得出色的方法是（a）大量地（b）解决难题。而让你自己解决难题的方法是从事一些非常引人入胜的项目。这个项目很可能不是课堂作业。我的朋友罗伯特在本科时通过编写网络软件学到了很多。他的一个项目是将哈佛连接到阿帕网；它曾经是最初的节点之一，但到1984年连接已经断开了。这项工作不仅不是为了课堂，而且因为他把所有时间都花在上面而忽视了学业，他被学校开除了一年。最终一切都平衡了，现在他是麻省理工学院的教授。但如果你不走那个极端，你可能会更快乐；这当时给他带来了很多担忧。&lt;/p&gt;&#xA;&lt;p&gt;在编程方面变得出色的另一种方法是找到其他擅长编程的人，学习他们的知识。程序员倾向于根据他们做的工作类型和他们使用的工具将自己分成部落，有些部落比其他部落更聪明。看看你周围，看看聪明的人似乎在做什么；通常都有原因。&lt;/p&gt;&#xA;&lt;p&gt;你周围一些最聪明的人是教授。所以找到有趣工作的一个方法是自愿担任研究助理。教授对那些能为他们解决繁琐的系统管理类型问题的人特别感兴趣，所以这是进门的一种方式。他们害怕的是那些不可靠和为了简历而工作的人。助理往往导致工作量净增加，这太常见了。所以你必须明确你会带来净减少。&lt;/p&gt;&#xA;&lt;p&gt;如果他们说不要，不要气馁。拒绝几乎总是比被拒绝者想象的要少个人色彩。继续下一个。（这也适用于约会。）&lt;/p&gt;&#xA;&lt;p&gt;小心，因为虽然大多数教授都很聪明，但并不是所有人都从事有趣的工作。教授必须发表新颖的结果才能推进他们的职业生涯，但在更有趣的研究领域竞争更激烈。所以那些不那么有抱负的教授所做的是发表一系列论文，这些论文的结论之所以新颖，是因为没有其他人关心它们。你最好避免这些。&lt;/p&gt;&#xA;&lt;p&gt;我从来没有当过研究助理，所以推荐那条路线我觉得有点不诚实。我通过写自己的东西学会了编程，特别是通过尝试逆向工程Winograd的SHRDLU。我对那个程序的痴迷就像母亲对新生婴儿一样。&lt;/p&gt;&#xA;&lt;p&gt;无论独自工作有什么缺点，优点是这个项目完全是你自己的。你永远不必妥协或询问任何人的许可，如果你有新的想法，你可以坐下来开始实现它。&lt;/p&gt;&#xA;&lt;p&gt;在你自己的项目中，你不必担心新颖性（像教授那样）或盈利能力（像企业那样）。唯一重要的是项目在技术上的难度，这与应用的性质没有相关性。像数据库这样的&amp;quot;严肃&amp;quot;应用在技术上往往是琐碎和枯燥的（如果你曾遭受失眠之苦，试试阅读关于数据库的技术文献），而像游戏这样的&amp;quot;琐碎&amp;quot;应用往往非常复杂。我确信有一些游戏公司正在开发的产品，其智力内容比大学计算机科学系底部十分之九的研究还要多。&lt;/p&gt;&#xA;&lt;p&gt;如果我现在在大学，我可能会从事图形学工作：例如，一个网络游戏，或者一个3D动画工具。当我是本科生时，没有足够的周期让图形学变得有趣，但现在很难想象有什么更有趣的工作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;数学&#34;&gt;数学&lt;/h2&gt;&#xA;&lt;p&gt;当我在大学时，很多教授相信（或至少希望）计算机科学是数学的一个分支。这种想法在哈佛最强烈，那里直到1980年代甚至没有计算机科学专业；在此之前，人们必须主修应用数学。但在康奈尔大学也几乎一样糟糕。当我告诉可怕的康威教授我对人工智能感兴趣（那时是个热门话题）时，他告诉我应该主修数学。我仍然不确定他认为人工智能需要数学，还是他认为人工智能是无稽之谈，主修一些严谨的学科会治愈我这种愚蠢的抱负。&lt;/p&gt;&#xA;&lt;p&gt;事实上，作为黑客，你需要的数学比大多数大学系愿意承认的要少得多。我认为你需要的除了高中数学加上计算理论的一些概念外，不需要太多。如果你想避免编写n²算法，你必须知道什么是n²算法。当然，除非你计划编写数学应用。例如，机器人技术全是数学。&lt;/p&gt;&#xA;&lt;p&gt;虽然对于大多数类型的黑客技术，你从字面上不需要数学，在知道1001个微分公式技巧的意义上，数学本身非常值得学习。它几乎是任何类型工作的宝贵隐喻来源。出于这个原因，我希望我在大学时学了更多数学。&lt;/p&gt;&#xA;&lt;p&gt;像许多人一样，我在童年时被数学虐待过。我学会将数学视为公式的集合，这些公式既不美丽，与我的生活也没有任何关系（尽管试图将它们翻译成&amp;quot;文字问题&amp;quot;），但必须记住以便在考试中取得好成绩。&lt;/p&gt;&#xA;&lt;p&gt;你在大学能做的最有价值的事情之一可能是了解数学的真正含义。这可能不容易，因为许多优秀的数学家都是糟糕的老师。虽然有许多关于数学的通俗书籍，但似乎很少有好的。我能想到的最好的是W.W.索耶的。当然还有欧几里得。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一切&#34;&gt;一切&lt;/h2&gt;&#xA;&lt;p&gt;托马斯·赫胥黎说&amp;quot;尝试了解一切的一些事情和一件事的一切。&amp;ldquo;大多数大学都以这个理想为目标。&lt;/p&gt;&#xA;&lt;p&gt;但什么是&amp;quot;一切&amp;rdquo;？对我来说，它意味着人们在诚实解决难题的过程中学到的一切。所有这样的工作往往是相关的，因为一个领域的想法和技术通常可以成功移植到其他领域。即使是那些看起来相当遥远的领域。例如，我写文章的方式和写软件的方式一样：我坐下来尽可能快地敲出一个蹩脚的版本1，然后花几周时间重写它。&lt;/p&gt;&#xA;&lt;p&gt;解决难题本身并不足够。中世纪的炼金术士在解决一个难题，但他们的方法是如此虚假，以至于研究它几乎学不到什么，除了可能关于人们欺骗自己的能力。不幸的是，我在大学尝试学习的那种人工智能有同样的缺陷：一个非常困难的问题，轻率地使用完全不足的技术来解决。大胆？更接近欺诈。社会科学也相当虚假，因为它们受到知识时尚的太大影响。如果一个物理学家遇到100年前的同事，他可以教他一些新东西；如果一个心理学家遇到100年前的同事，他们只会陷入意识形态争论。是的，当然，通过上心理学课你会学到一些东西。重点是，通过上另一个系的课，你会学到更多。&lt;/p&gt;&#xA;&lt;p&gt;在我看来，值得学习的系是数学、硬科学、工程、历史（特别是经济和社会历史，以及科学史）、建筑学和古典文学。艺术史概论课程可能是值得的。现代文学很重要，但了解它的方法就是阅读。我对音乐了解不够，无法发表意见。&lt;/p&gt;&#xA;&lt;p&gt;你可以跳过社会科学、哲学和最近为应对政治压力而创建的各个系。这些领域当然谈论重要问题。但它们谈论问题的方式是无用的。例如，哲学谈论我们对彼此的义务等；但你可以从一位明智的祖母或E.B.怀特那里学到更多关于这方面的知识，而不是从一位学术哲学家。&lt;/p&gt;&#xA;&lt;p&gt;我在这里是从经验出发说话。当人们嘲笑克林顿说&amp;quot;这取决于&amp;rsquo;是&amp;rsquo;这个词的含义是什么&amp;quot;时，我可能应该感到被冒犯。我在大学上了大约五门关于&amp;quot;是&amp;quot;这个词的含义的课。&lt;/p&gt;&#xA;&lt;p&gt;找出哪些领域值得学习的另一种方法是创建辍学图表。例如，我知道许多人从数学转向计算机科学，因为他们发现数学太难了，没有人做相反的事情。人们不会无缘无故地做困难的事情；除非一个问题相应地（或至少log(n)）更有回报，否则没有人会去解决更难的问题。所以可能数学比计算机科学更值得学习。通过类似的比较，你可以为大学中的所有系制作一个图表。在底部你会发现智力内容最少的科目。&lt;/p&gt;&#xA;&lt;p&gt;如果你使用这种方法，你会得到与我刚才给出的大致相同的答案。&lt;/p&gt;&#xA;&lt;p&gt;语言课程是一个异常。我认为它们更好地被视为课外活动，就像陶艺课程一样。当结合在讲这种语言的国家生活一段时间时，它们会更有用。我一时兴起在大一时学习了阿拉伯语。这是很多工作，唯一持久的好处是一种奇怪的能力来识别闪米特语词根，以及对人们如何识别单词的一些见解。&lt;/p&gt;&#xA;&lt;p&gt;工作室艺术和创意写作课程是变数。通常你不会被教太多：你只是在老师模糊的监督下做（或不做）你想做的任何事情，然后坐在一起为彼此的创作提供&amp;quot;批评&amp;quot;。但写作和艺术都是人们诚实解决的非常困难的问题，所以它们值得做，特别是如果你能找到一位好老师。&lt;/p&gt;&#xA;&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;&#xA;&lt;p&gt;当然，大学生必须考虑的不仅仅是学习。还有两个实际问题需要考虑：工作和研究生院。&lt;/p&gt;&#xA;&lt;p&gt;理论上，通识教育不应该提供职业培训。但每个人都知道这有点谎言。每所大学的黑客都学习实用技能，而且不是偶然的。&lt;/p&gt;&#xA;&lt;p&gt;为找工作而学习的内容取决于你想要的工作类型。如果你想在大公司工作，学习如何在Windows上编写Blub程序。如果你想在一家酷的小公司或研究实验室工作，学习在Linux上使用Ruby会更好。如果你想创办自己的公司，我认为这会越来越普遍，掌握你能找到的最强大的工具，因为你将要与竞争对手比赛，他们将是你的马。&lt;/p&gt;&#xA;&lt;p&gt;你应该在大学学习的技能和工作中使用的技能之间没有直接的相关性。在大学里你应该目标稍微高一些。&lt;/p&gt;&#xA;&lt;p&gt;在锻炼中，足球运动员可能卧推300磅，尽管在比赛过程中他可能永远不必施加类似的力量。同样，如果你的教授试图让你学习比工作中需要的更先进的东西，可能不仅仅是因为他们是学者，脱离现实世界。他们可能在试图用你的大脑举重。&lt;/p&gt;&#xA;&lt;p&gt;你在课堂上写的程序与你将在现实世界中写的程序在三个关键方面不同：它们很小；你可以从头开始；问题通常是人为的和预定的。在现实世界中，程序更大，往往涉及现有代码，通常需要你在解决问题之前弄清楚问题是什么。&lt;/p&gt;&#xA;&lt;p&gt;你不必等到离开（甚至进入）大学才学习这些技能。例如，如果你想学习如何处理现有代码，你可以为开源项目做贡献。你想要为之工作的雇主会对此印象深刻，就像课堂作业的好成绩一样。&lt;/p&gt;&#xA;&lt;p&gt;在现有的开源项目中，你在第三种技能上没有太多练习，即决定要解决什么问题。但没有什么能阻止你开始自己的新项目。好雇主会对这更印象深刻。&lt;/p&gt;&#xA;&lt;p&gt;你应该尝试解决什么类型的问题？回答这个问题的一种方法是询问你作为用户需要什么。例如，我偶然发现了一个很好的垃圾邮件过滤算法，因为我想停止接收垃圾邮件。现在我希望我有一个邮件阅读器，能以某种方式防止我的收件箱填满。我倾向于使用我的收件箱作为待办事项列表。但这就像用螺丝刀开瓶子；人们真正想要的是一个开瓶器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;研究生院&#34;&gt;研究生院&lt;/h2&gt;&#xA;&lt;p&gt;研究生院怎么样？你应该去吗？你如何进入一所好的研究生院？&lt;/p&gt;&#xA;&lt;p&gt;原则上，研究生院是研究的专业培训，除非你想把研究作为职业，否则你不应该去。然而，获得计算机科学博士学位的人中有一半没有进入研究界。我去研究生院不是为了成为教授。我去是因为我想学到更多。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你主要对黑客技术感兴趣并且你去研究生院，你会发现很多其他人在同样地不在他们的元素中。如果你周围有一半的人以同样的方式不在他们的元素中，你真的不在你的元素中吗？&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;计算机科学&amp;quot;中有一个根本问题，在这种情况下就显现出来了。没有人确定&amp;quot;研究&amp;quot;应该是什么。很多研究是黑客技术，不得不被塞进学术论文的形式以产生又一个出版量。&lt;/p&gt;&#xA;&lt;p&gt;所以问你是否会在研究生院如鱼得水有点误导性，因为很少有人真正在计算机科学中如鱼得水。整个领域在自己的皮肤中感到不舒服。所以你主要对黑客技术感兴趣这一事实不应该阻止你去研究生院。只是要警告你，你将不得不做很多你不喜欢的事情。&lt;/p&gt;&#xA;&lt;p&gt;第一将是你的论文。几乎每个人在完成时都讨厌他们的论文。这个过程往往会产生令人不快的结果，就像用全麦面粉制作并烘烤十二小时的蛋糕。很少有论文是被愉快地阅读的，尤其是它们的作者。&lt;/p&gt;&#xA;&lt;p&gt;但在你之前有成千上万的人忍受了写论文的痛苦。除此之外，研究生院接近天堂。许多人记得这是他们一生中最快乐的时光。几乎所有其余的人，包括我，记得如果他们不必写论文，这本来会是一段美好的时期。&lt;/p&gt;&#xA;&lt;p&gt;研究生院的危险在于你 upfront 看不到可怕的部分。博士计划开始作为大学第2部分，有几年的课程。所以当你面对写论文的恐怖时，你已经进入几年了。如果你现在退出，你将成为研究生院辍学生，你可能不会喜欢这个想法。当罗伯特因为编写1988年的互联网蠕虫而被研究生院开除时，我非常羡慕他找到了一种没有失败耻辱的退出方式。&lt;/p&gt;&#xA;&lt;p&gt;总体而言，研究生院可能比大多数选择更好。你会遇到很多聪明人，你忧郁的拖延至少会是一个强大的共同纽带。当然，最后你有一个博士学位。我忘记了那一点。我想那是值得的。&lt;/p&gt;&#xA;&lt;p&gt;博士学位的最大优势（当然，除了是学术界的工会卡）可能是它给你一些基线信心。例如，我家的霍尼韦尔恒温器有着最糟糕的用户界面。我的母亲有相同的型号，勤奋地花了一天时间阅读用户手册来学习如何操作它。她认为问题出在她身上。但我可以对自己说&amp;quot;如果拥有计算机科学博士学位的人都无法理解这个恒温器，那它一定是设计得很糟糕。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;在这个不温不火的推荐之后，如果你仍然想去研究生院，我可以给你关于如何进入的可靠建议。我的很多朋友现在是计算机科学教授，所以我有关于招生的内幕。这与大学完全不同。在大多数大学，招生官员决定谁被录取。对于博士计划，教授决定。他们努力做好这件事，因为他们录取的人将要为他们工作。&lt;/p&gt;&#xA;&lt;p&gt;显然，在最好的学校，只有推荐信真正重要。标准化测试毫无价值，成绩也很少价值。文章主要是通过说愚蠢的话来取消自己资格的机会。教授唯一信任的是推荐信，最好来自他们认识的人。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你想进入博士计划，关键是给教授留下印象。从我当教授的朋友那里，我知道什么给他们留下印象：不仅仅是试图给他们留下印象。他们对取得好成绩的学生或想成为他们的研究助理以便进入研究生院的学生不感兴趣。他们对取得好成绩并且想成为他们的研究助理的学生印象深刻，因为他们真正对这个话题感兴趣。&lt;/p&gt;&#xA;&lt;p&gt;所以你在大学能做的最好的事情，无论你想进入研究生院还是只想擅长黑客技术，是找出你真正喜欢的东西。很难欺骗教授让你进入研究生院，也不可能欺骗问题让你解决它们。大学是伪装停止工作的地方。从这一点开始，除非你想去大公司工作，这就像回到高中，前进的唯一方法是通过做你喜欢的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 似乎没有人介意，这表明阿帕网（后来成为互联网）在1984年是多么不重要。&lt;/p&gt;&#xA;&lt;p&gt;[2] 这就是为什么当我成为雇主时，我不关心GPA。事实上，我们积极寻找从学校辍学的人。我们曾经在哈佛周围张贴海报说&amp;quot;你是否因为把所有时间花在某个自己的项目上而在课堂上表现不佳而被踢出学校？来为我们工作吧！&amp;ldquo;我们设法找到了一个这样的人，他是个优秀的黑客。&lt;/p&gt;&#xA;&lt;p&gt;当哈佛将本科生开除一年时，他们必须找工作。想法是向他们展示现实世界是多么糟糕，这样他们会明白他们在大学里是多么幸运。这个计划在我们来找工作的那个家伙身上适得其反，因为他比在学校时更有趣，那年从股票期权中赚的钱比他任何教授的薪水都多。所以他没有在年底悔改地爬回来，而是又请了一年假去了欧洲。他最终大约在26岁毕业。&lt;/p&gt;</description>
    </item>
    <item>
      <title>黑客与画家</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/hp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/hp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/hp/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/hp.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/hp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/hp.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;黑客与画家&#34;&gt;黑客与画家&lt;/h1&gt;&#xA;&lt;p&gt;2003年5月&lt;/p&gt;&#xA;&lt;p&gt;（本文源于在哈佛大学的一次客座讲座，该讲座整合了之前在东北大学的一次演讲。）&lt;/p&gt;&#xA;&lt;p&gt;当我完成计算机科学研究生学业后，我去艺术学院学习绘画。很多人似乎对感兴趣于计算机的人也会对绘画感兴趣感到惊讶。他们似乎认为黑客和绘画是截然不同的工作类型——黑客工作是冷酷、精确、有条理的，而绘画则是某种原始冲动的狂热表达。&lt;/p&gt;&#xA;&lt;p&gt;这两种形象都是错误的。黑客和绘画有很多共同之处。事实上，在我认识的所有不同类型的人中，黑客和画家是最相似的。&lt;/p&gt;&#xA;&lt;p&gt;黑客和画家的共同点是他们都是创造者。与作曲家、建筑师和作家一样，黑客和画家试图做的是创造好东西。他们本身并不是在做研究，尽管在试图创造好东西的过程中他们发现了一些新技术，那就更好了。&lt;/p&gt;&#xA;&lt;p&gt;我从来不喜欢&amp;quot;计算机科学&amp;quot;这个词。我不喜欢它的主要原因是没有这样的东西。计算机科学是一堆关系不大的领域的拼凑，因历史的偶然而被组合在一起，就像南斯拉夫一样。一端是实际上是数学家的人，但他们称自己做的事情为计算机科学，以便获得DARPA资助。中间是从事类似计算机自然史工作的人——例如研究通过网络路由数据的算法行为。然后在另一端是黑客，他们试图编写有趣的软件，对他们来说，计算机只是表达媒介，就像对建筑师来说是混凝土，对画家来说是颜料一样。这就像是数学家、物理学家和建筑师都必须在同一个系里一样。&lt;/p&gt;&#xA;&lt;p&gt;有时黑客所做的事情被称为&amp;quot;软件工程&amp;quot;，但这个术语同样具有误导性。优秀的软件设计师并不比建筑师更像工程师。建筑和工程之间的界限并没有明确界定，但它是存在的。它在于做什么和如何做之间：建筑师决定做什么，工程师弄清楚如何做。&lt;/p&gt;&#xA;&lt;p&gt;做什么和如何做不应过于分离。如果你试图在不知道如何做的情况下决定做什么，那是在自找麻烦。但黑客工作绝不仅仅是决定如何实现某个规范。在最好的情况下，它是创建规范——但事实证明做到这一点的最好方法是实现它。&lt;/p&gt;&#xA;&lt;p&gt;也许有一天&amp;quot;计算机科学&amp;quot;会像南斯拉夫一样被分解成其组成部分。这可能是件好事。特别是如果这意味着我自己的领域——黑客的独立。&lt;/p&gt;&#xA;&lt;p&gt;将所有这些不同类型的工作捆绑在一个部门可能在行政上很方便，但在智力上是混乱的。这是我不喜欢&amp;quot;计算机科学&amp;quot;这个名字的另一个原因。可以说，中间的人在做类似实验科学的事情。但两端的人，黑客和数学家，实际上并不是在做科学。&lt;/p&gt;&#xA;&lt;p&gt;数学家似乎并不为此困扰。他们很高兴地开始证明定理，就像数学系的数学家一样，并且很快就会停止注意到他们工作的建筑外面写着&amp;quot;计算机科学&amp;quot;。但对黑客来说，这个标签是个问题。如果他们所做的事情被称为科学，这让他们觉得他们应该表现得科学。因此，大学和研究实验室里的黑客不做他们真正想做的事情，即设计美丽的软件，而是觉得他们应该写研究论文。&lt;/p&gt;&#xA;&lt;p&gt;在最好的情况下，论文只是一种形式。黑客编写很酷的软件，然后写一篇关于它的论文，论文就成为了软件所代表成就的代理。但这种不匹配经常导致问题。很容易从创造美丽的东西转向创造丑陋的东西，而这些东西更适合作为研究论文的题材。&lt;/p&gt;&#xA;&lt;p&gt;不幸的是，美丽的东西并不总是最好的论文主题。首先，研究必须是原创的——正如任何写过博士论文的人所知，确保你在探索未知领域的方法是占据一块没有人想要的地盘。其次，研究必须是实质性的——笨拙的系统会产生更丰富的论文，因为你可以写为了完成工作而必须克服的障碍。没有什么比从错误假设开始更能产生丰富的问题了。大多数人工智能都是这个规则的例子；如果你假设知识可以表示为谓词逻辑表达式的列表，其参数代表抽象概念，你将有很多论文要写关于如何使其工作。正如里奇·里卡多常说的：&amp;ldquo;露西，你有很多解释要做。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;创造美丽东西的方法往往是对现有事物进行微妙的调整，或者以稍新的方式组合现有的想法。这种工作很难在研究论文中传达。&lt;/p&gt;&#xA;&lt;p&gt;那么为什么大学和研究实验室继续用出版物来判断黑客呢？原因与&amp;quot;学术能力&amp;quot;用简单的标准化测试衡量，或者程序员的生产力用代码行数衡量是一样的。这些测试很容易应用，没有什么比一个勉强有效的简单测试更诱人的了。&lt;/p&gt;&#xA;&lt;p&gt;衡量黑客真正试图做的事情，设计美丽的软件，会困难得多。你需要良好的设计感来判断好的设计。人们识别好设计的能力与他们对自己能做到的信心之间没有任何相关性，除了可能是负相关。&lt;/p&gt;&#xA;&lt;p&gt;唯一的外部测试是时间。随着时间的推移，美丽的东西往往会繁荣，丑陋的东西往往会被抛弃。不幸的是，所涉及的时间可能比人类寿命还长。塞缪尔·约翰逊说，作家的声誉需要一百年才能收敛。你必须等待作家有影响力的朋友死去，然后他们所有的追随者都死去。&lt;/p&gt;&#xA;&lt;p&gt;我认为黑客只能接受自己声誉中有很大的随机成分。在这方面，他们与其他创造者没有什么不同。事实上，相比之下，他们是幸运的。时尚在黑客中的影响力远不如在绘画中那么大。&lt;/p&gt;&#xA;&lt;p&gt;有比被人误解你的作品更糟糕的事情。更危险的是你会自己误解你的作品。相关领域是你寻找想法的地方。如果你发现自己身处计算机科学系，自然会有一种诱惑，例如认为黑客是理论计算机科学理论的应用版本。我在研究生院的整个时间里，脑海中总有一种不安的感觉，觉得我应该知道更多理论，而且在期末考试后三周内忘记所有东西是非常疏忽的。&lt;/p&gt;&#xA;&lt;p&gt;现在我意识到我错了。黑客需要了解计算理论的程度，与画家需要了解颜料化学的程度差不多。你需要知道如何计算时间和空间复杂性以及图灵完备性。你可能还想记住至少状态机的概念，以防你不得不编写解析器或正则表达式库。事实上，画家必须记住的颜料化学知识比这多得多。&lt;/p&gt;&#xA;&lt;p&gt;我发现，最好的想法来源不是名字中有&amp;quot;计算机&amp;quot;一词的其他领域，而是创造者居住的其他领域。绘画比计算理论是更丰富的想法来源。&lt;/p&gt;&#xA;&lt;p&gt;例如，我在大学里学到的是，一个人应该在完全接触计算机之前在纸上完整地构思一个程序。我发现我不是这样编程的。我发现我喜欢坐在计算机前编程，而不是在纸上。更糟糕的是，我不是耐心地写出完整的程序并确保它是正确的，而是倾向于只是喷出完全没有希望的代码，然后逐渐把它塑造成形。我学到的是，调试是一种最后阶段，你捕捉打字错误和疏忽。按照我的工作方式，编程似乎就是由调试组成的。&lt;/p&gt;&#xA;&lt;p&gt;很长时间以来，我对此感觉很糟糕，就像我曾经因为小学时握铅笔的方式和他们教我的不一样而感到难过一样。如果我看过其他创造者，画家或建筑师，我会意识到我所做的事情有一个名字：素描。据我所知，他们在大学教我的编程方法完全是错的。你应该在编写程序时构思程序，就像作家、画家和建筑师所做的那样。&lt;/p&gt;&#xA;&lt;p&gt;意识到这一点对软件设计有实际意义。这意味着编程语言最重要的特性应该是可塑的。编程语言是用来思考程序的，而不是表达你已经想好的程序。它应该是一支铅笔，而不是一支钢笔。如果人们真的像他们在大学教我的那样写程序，静态类型会是个好主意。但这不是我认识的任何黑客写程序的方式。我们需要一种让我们能够涂鸦、涂抹和弄脏的语言，而不是一种你必须用一杯类型平衡在膝盖上与严格的老婶婶编译器礼貌交谈的语言。&lt;/p&gt;&#xA;&lt;p&gt;既然我们在讨论静态类型，认同创造者将使我们免于困扰科学的另一个问题：数学嫉妒。科学界的每个人都秘密认为数学家比他们聪明。我认为数学家也相信这一点。无论如何，结果是科学家倾向于使他们的工作看起来尽可能数学化。在像物理学这样的领域，这可能不会造成太大伤害，但离自然科学越远，这个问题就越大。&lt;/p&gt;&#xA;&lt;p&gt;一页公式看起来非常令人印象深刻。（提示：为了更加令人印象深刻，使用希腊变量。）因此，有很大的诱惑去做你可以正式处理的问题，而不是那些重要的，比如说，重要的问题。&lt;/p&gt;&#xA;&lt;p&gt;如果黑客认同其他创造者，比如作家和画家，他们就不会感到诱惑去做这种事情。作家和画家不遭受数学嫉妒。他们觉得他们在做完全不相关的事情。我认为黑客也是如此。&lt;/p&gt;&#xA;&lt;p&gt;如果大学和研究实验室阻止黑客做他们想做的工作，也许他们的位置是在公司。不幸的是，大多数公司也不会让黑客做他们想做的事情。大学和研究实验室强迫黑客成为科学家，公司强迫他们成为工程师。&lt;/p&gt;&#xA;&lt;p&gt;我自己直到最近才发现这一点。当雅虎收购Viaweb时，他们问我想做什么。我从来不太喜欢商业方面，说我只想黑客。当我到雅虎时，我发现黑客对他们来说意味着实现软件，而不是设计它。程序员被视为技术人员，将产品经理的愿景（如果那算是的话）翻译成代码。&lt;/p&gt;&#xA;&lt;p&gt;这似乎是大公司的默认计划。他们这样做是因为它减少了结果的标准差。只有一小部分黑客能够真正设计软件，公司经营者很难挑选出这些人。因此，大多数公司不将软件的未来委托给一个才华横溢的黑客，而是设置成由委员会设计，黑客只实现设计。&lt;/p&gt;&#xA;&lt;p&gt;如果你想赚钱，记住这一点，因为这是创业公司获胜的原因之一。大公司希望减少设计结果的标准差，因为他们想避免灾难。但当你抑制波动时，你既失去了高点，也失去了低点。这对大公司来说不是问题，因为他们不是靠做出伟大的产品获胜的。大公司靠比其他大公司少些糟糕获胜。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你能找到一种方法与一家大公司进行设计战争，大到其软件是由产品经理设计的，他们将永远无法跟上你。不过，这些机会并不容易找到。很难让大公司参与设计战争，就像很难让城堡内的对手进行肉搏战一样。例如，编写一个比微软Word更好的文字处理器会很容易，但微软在其操作系统垄断的城堡内，即使你做到了，可能甚至不会注意到。&lt;/p&gt;&#xA;&lt;p&gt;进行设计战争的地方是新市场，在那里还没有人设法建立任何防御工事。在那里，你可以通过大胆的设计方法，以及让同样的人既设计又实现产品而大获全胜。微软自己一开始就是这样做的。苹果也是如此。惠普也是如此。我怀疑几乎所有成功的创业公司都是如此。&lt;/p&gt;&#xA;&lt;p&gt;所以构建伟大软件的一种方法是创办自己的创业公司。然而，这有两个问题。一是在创业公司，你必须做很多编程以外的事情。在Viaweb，如果我能有四分之一的时间黑客，我就觉得自己很幸运。我在其他四分之三的时间里不得不做的事情从乏味到可怕不等。我对此有一个基准，因为我曾经不得不离开董事会会议去补牙。我记得坐在牙医的椅子上，等待钻头，感觉就像在度假。&lt;/p&gt;&#xA;&lt;p&gt;创业公司的另一个问题是，赚钱的软件和有趣的软件之间没有太多重叠。编程语言写起来很有趣，微软的第一个产品确实是，但现在没有人会为编程语言付钱。如果你想赚钱，你往往被迫从事对任何人来说都太麻烦而无法免费解决的问题。&lt;/p&gt;&#xA;&lt;p&gt;所有创造者都面临这个问题。价格由供求关系决定，对有趣工作的需求不如解决个人客户日常问题的需求多。在外百老汇戏剧中表演不如在贸易展上穿着大猩猩服装在别人的展位工作赚钱。写小说不如为垃圾处理器写广告文案赚钱。黑客编程语言不如想办法将某公司的遗留数据库连接到他们的Web服务器赚钱。&lt;/p&gt;&#xA;&lt;p&gt;我认为这个问题的答案，在软件的情况下，是一个几乎所有创造者都知道的概念：日常工作。这个词始于音乐家，他们晚上表演。更一般地说，这意味着你做一种工作是为了钱，做另一种是为了爱。&lt;/p&gt;&#xA;&lt;p&gt;几乎所有创造者在职业生涯早期都有日常工作。画家和作家尤其如此。如果你幸运，你可以找到与你真正工作密切相关的日常工作。音乐家似乎经常在唱片店工作。从事某种编程语言或操作系统工作的黑客同样可能能够使用它获得日常工作。[1]&lt;/p&gt;&#xA;&lt;p&gt;当我说答案是为黑客提供日常工作，并在业余时间从事美丽软件工作时，我并不是在提出一个新想法。这就是开源黑客的全部内容。我要说的是，开源可能是正确的模式，因为它已经被所有其他创造者独立证实。&lt;/p&gt;&#xA;&lt;p&gt;任何雇主都不愿让黑客从事开源项目，这让我感到惊讶。在Viaweb，我们不愿意雇佣任何不这样做的人。当我们面试程序员时，我们主要关心的是他们在业余时间编写什么样的软件。除非你热爱它，否则你不能真正做好任何事情，如果你热爱黑客，你将不可避免地从事自己的项目。[2]&lt;/p&gt;&#xA;&lt;p&gt;因为黑客是创造者而不是科学家，寻找隐喻的正确地方不是科学，而是其他类型的创造者。绘画还能教给我们什么关于黑客的知识？&lt;/p&gt;&#xA;&lt;p&gt;我们可以从绘画的例子中学到的一件事，或者至少确认的是，如何学习黑客。你主要通过做来学习绘画。黑客也是如此。大多数黑客不是通过上大学编程课程来学习黑客的。他们在十三岁时通过编写自己的程序来学习黑客。即使在大学课程中，你也主要通过黑客来学习黑客。[3]&lt;/p&gt;&#xA;&lt;p&gt;因为画家在他们身后留下了作品的痕迹，你可以看着他们通过做来学习。如果你按时间顺序看一位画家的作品，你会发现每幅画都建立在以前画中学到的东西的基础上。当一幅画中有某个东西效果很好时，你通常可以在一些早期绘画中以较小的形式找到它的版本1。&lt;/p&gt;&#xA;&lt;p&gt;我认为大多数创造者都是这样工作的。作家和建筑师似乎也是如此。也许黑客应该更像画家，定期从头开始，而不是继续在一个项目上工作多年，并试图将他们以后的想法作为修订纳入其中。&lt;/p&gt;&#xA;&lt;p&gt;黑客通过做来学习黑客这一事实是黑客与科学不同的另一个标志。科学家不是通过做科学来学习科学，而是通过做实验和解决问题集。科学家开始做的工作是完美的，在这个意义上说，他们只是试图重现别人已经为他们做过的工作。最终，他们达到可以做原创工作的地步。而黑客从一开始就在做原创工作；只是非常糟糕。所以黑客从原创开始，然后变好，科学家从好开始，然后变原创。&lt;/p&gt;&#xA;&lt;p&gt;创造者学习的另一种方式是通过例子。对画家来说，博物馆是技术参考图书馆。数百年来，复制大师作品一直是画家传统教育的一部分，因为复制迫使你仔细审视绘画的制作方式。&lt;/p&gt;&#xA;&lt;p&gt;作家也这样做。本杰明·富兰克林通过总结艾迪生和斯蒂尔散文中的观点，然后尝试重现它们来学习写作。雷蒙德·钱德勒对侦探故事做了同样的事情。&lt;/p&gt;&#xA;&lt;p&gt;同样，黑客可以通过看好的程序来学习编程——不仅看它们做什么，还看源代码。开源运动不太公开的好处之一是它使学习编程变得更容易。当我学习编程时，我们主要依靠书中的例子。当时可用的一大块代码是Unix，但即使这不是开源的。大多数阅读源代码的人是通过约翰·莱昂斯书的非法影印本来阅读的，这本书虽然写于1977年，但直到1996年才被允许出版。&lt;/p&gt;&#xA;&lt;p&gt;我们可以从绘画中借鉴的另一个例子是绘画是通过渐进改进而创造的。绘画通常从素描开始。逐渐地，细节被填入。但这不仅仅是填入的过程。有时原来的计划被证明是错误的。无数的绘画，当你用X光看时，发现肢体被移动了或面部特征被重新调整了。&lt;/p&gt;&#xA;&lt;p&gt;这里有一个我们可以从绘画中学习的例子。我认为黑客也应该这样工作。期望程序的规格说明是完美的是不现实的。如果你提前承认这一点，并以允许规格说明在运行中更改的方式编写程序，你会更好。&lt;/p&gt;&#xA;&lt;p&gt;（大公司的结构使他们很难做到这一点，所以这是创业公司有优势的另一个地方。）&lt;/p&gt;&#xA;&lt;p&gt;现在大概每个人都知道过早优化的危险。我认为我们应该同样担心过早设计——过早决定程序应该做什么。&lt;/p&gt;&#xA;&lt;p&gt;正确的工具可以帮助我们避免这种危险。一个好的编程语言应该像油画一样，使你容易改变主意。动态类型在这里是个优势，因为你不必预先承诺特定的数据表示。但我认为灵活性的关键是使语言非常抽象。最容易更改的程序是非常短的程序。这听起来像是一个悖论，但一幅伟大的绘画必须比它必须的要更好。例如，当莱昂纳多在华盛顿国家美术馆画吉内薇拉·德·班奇的肖像时，她在她头后放了一棵杜松树。他在其中仔细地画了每一片叶子。许多画家可能认为，这只是放在背景中框住她头部的东西。没有人会那么仔细地看它。&lt;/p&gt;&#xA;&lt;p&gt;不是莱昂纳多。他在画的一部分上工作的努力程度完全不取决于他期望任何人看它的程度。他像迈克尔·乔丹。无情。&lt;/p&gt;&#xA;&lt;p&gt;无情获胜是因为，总的来说，看不见的细节变得可见。当人们走过吉内薇拉·德·班奇的肖像时，他们的注意力常常立即被它吸引，甚至在他们看标签并注意到它说莱昂纳多·达·芬奇之前。所有那些看不见的细节结合在一起产生了一些令人惊叹的东西，就像一千个几乎听不见的声音都在和谐地歌唱。&lt;/p&gt;&#xA;&lt;p&gt;伟大的软件同样需要对美的狂热奉献。如果你看好的软件内部，你会发现那些永远不应该被看见的部分也是美丽的。我不声称我写伟大的软件，但我知道当涉及到代码时，我的行为方式如果用在日常生活中会让我有资格获得处方药。看到缩进糟糕的代码或使用丑陋变量名的代码会让我发疯。&lt;/p&gt;&#xA;&lt;p&gt;如果黑客只是一个实现者，将规范变成代码，那么他就可以像挖沟的人一样从一端到另一端完成工作。但如果黑客是创造者，我们必须考虑灵感。&lt;/p&gt;&#xA;&lt;p&gt;黑客像绘画一样，工作是周期性的。有时你对某个新项目感到兴奋，一天想工作十六个小时。有时似乎没有什么有趣的。&lt;/p&gt;&#xA;&lt;p&gt;要做好工作，你必须考虑这些周期，因为它们受到你对他们反应的影响。当你在山坡上驾驶手动变速器汽车时，你必须有时松开离合器以避免熄火。松开同样可以防止雄心熄火。在绘画和黑客中，有些任务是令人恐惧的雄心勃勃的，有些则是令人安慰的常规。留一些容易的任务给那些否则会停滞的时刻是个好主意。&lt;/p&gt;&#xA;&lt;p&gt;在黑客中，这实际上可能意味着保存错误。我喜欢调试：这是黑客像人们认为的那样直截了当的唯一一次。你有一个完全受限的问题，你只需要解决它。你的程序应该做x。相反它做y。它哪里出错了？你知道你最终会赢。这就像刷墙一样放松。&lt;/p&gt;&#xA;&lt;p&gt;绘画的例子不仅可以教我们如何管理自己的工作，还可以教我们如何一起工作。许多过去的伟大艺术是多人之手的作品，尽管博物馆墙上可能只有一个名字。莱昂纳多是维罗基奥工作室的学徒，画了他的《基督受洗》中的一个天使。这种事情是规则，而不是例外。米开朗基罗因为坚持亲自绘制西斯廷教堂天花板上的所有人物而被认为特别专注。&lt;/p&gt;&#xA;&lt;p&gt;据我所知，当画家一起在一幅画上工作时，他们从不工作的相同部分。大师画主要人物，助手画其他人物和背景是常见的。但你从来没有一个人在另一个人的作品上绘画。&lt;/p&gt;&#xA;&lt;p&gt;我认为这是软件协作的正确模式。不要推得太远。当一段代码被三四个不同的人黑客攻击，没有人真正拥有它时，它最终会像一个公共休息室。它往往会感觉荒凉和被遗弃，并积累无用之物。我认为协作的正确方法是将项目分成明确定义的模块，每个模块都有明确的拥有者，它们之间的接口尽可能精心设计，如果可能的话，像编程语言一样明确。&lt;/p&gt;&#xA;&lt;p&gt;像绘画一样，大多数软件是为人类受众准备的。因此，像画家一样，黑客必须有同理心才能做真正伟大的工作。你必须能够从用户的角度看问题。&lt;/p&gt;&#xA;&lt;p&gt;当我还是个孩子的时候，我总是被告知要从别人的角度看问题。这在实践中总是意味着做别人想要的事情，而不是我想要的事情。这当然给同理心一个坏名声，我故意不培养它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>黑客这个词</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/gba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/gba/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/gba/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/gba.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/gba.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/gba.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;黑客这个词&#34;&gt;黑客这个词&lt;/h1&gt;&#xA;&lt;p&gt;2004年4月&lt;/p&gt;&#xA;&lt;p&gt;对大众媒体来说，&amp;ldquo;黑客&amp;quot;意味着闯入计算机的人。在程序员中，它意味着一个好的程序员。但这两种含义是相连的。对程序员来说，&amp;ldquo;黑客&amp;quot;在最字面的意义上意味着精通：能够让计算机做他想要的事情的人——不管计算机是否愿意。&lt;/p&gt;&#xA;&lt;p&gt;更令人困惑的是，名词&amp;quot;hack&amp;quot;也有两种含义。它可以是赞美，也可以是侮辱。当你用丑陋的方式做某事时，这被称为hack。但当你做某事如此聪明以至于你以某种方式击败了系统时，那也被称为hack。这个词在前一种含义中比后一种更常用，可能是因为丑陋的解决方案比 brilliant 的更常见。&lt;/p&gt;&#xA;&lt;p&gt;信不信由你，&amp;ldquo;hack&amp;quot;的两种含义也是相连的。丑陋和富有想象力的解决方案有共同之处：它们都打破了规则。在仅仅丑陋的违规（用胶带把东西 attach 到你的自行车上）和 brilliantly 富有想象力的违规（丢弃欧几里得空间）之间存在一个逐渐的连续谱。&lt;/p&gt;&#xA;&lt;p&gt;黑客文化比计算机更早。当理查德·费曼在曼哈顿计划工作时，他常常通过闯入包含秘密文件的保险箱来娱乐自己。这个传统今天仍在继续。当我们读研究生时，我的一位在MIT周围花了太多时间的黑客朋友有自己的开锁工具包。（他现在经营对冲基金，这不是一个无关的企业。）&lt;/p&gt;&#xA;&lt;p&gt;有时候很难向当局解释为什么有人会想做这种事情。我的另一个朋友曾经因为闯入计算机而与政府惹上麻烦。这最近才被宣布为犯罪，FBI发现他们通常的调查技术不起作用。警察调查显然是从动机开始的。通常的动机很少：毒品、金钱、性、复仇。智力好奇心不在FBI的动机清单上。确实，整个概念对他们来说似乎很陌生。&lt;/p&gt;&#xA;&lt;p&gt;当权者往往对黑客普遍的不服从态度感到恼火。但这种不服从是使他们成为优秀程序员的品质的副产品。当CEO用通用的企业新闻发言时，他们可能会嘲笑他，但他们也会嘲笑告诉他们某个问题无法解决的人。压制一个，你就压制了另一个。&lt;/p&gt;&#xA;&lt;p&gt;这种态度有时是装出来的。有时年轻的程序员注意到著名黑客的怪癖，并决定采用一些自己的怪癖，以便看起来更聪明。虚假版本不仅令人讨厌；这些伪装者的 prickly 态度实际上会减慢创新过程。&lt;/p&gt;&#xA;&lt;p&gt;但即使考虑到他们令人讨厌的怪癖，黑客的不服从态度也是一个净胜利。我希望它的优势能被更好地理解。&lt;/p&gt;&#xA;&lt;p&gt;例如，我怀疑好莱坞的人们对黑客对版权的态度感到困惑。它们是Slashdot上激烈讨论的 perennial 话题。但是，为什么编程的人们应该如此关心版权，在所有事情中？&lt;/p&gt;&#xA;&lt;p&gt;部分原因是有些公司使用机制来防止复制。向任何黑客展示一把锁，他的第一个念头是如何打开它。但黑客对版权和专利等措施感到警惕有更深层次的原因。他们将 increasingly 激进的措施保护&amp;quot;知识产权&amp;quot;视为对他们工作所需的 intellectual freedom 的威胁。他们是对的。&lt;/p&gt;&#xA;&lt;p&gt;正是通过在当前技术内部探查，黑客才获得了下一代的想法。不，谢谢，知识产权所有者可能会说，我们不需要任何外部帮助。但他们错了。下一代计算机技术经常——或许比不是更经常——是由外人开发的。&lt;/p&gt;&#xA;&lt;p&gt;1977年，毫无疑问IBM内部有一些团体正在开发他们期望成为下一代商业计算机的东西。他们错了。下一代商业计算机正在由两个名叫史蒂夫的长发男人在洛斯阿尔托斯的车库里以完全不同的线路开发。大约在同一时间，当权者正在合作开发官方的下一代操作系统Multics。但两个认为Multics过于复杂的家伙离开去写自己的系统。他们给它起了一个对Multics开玩笑的名字：Unix。&lt;/p&gt;&#xA;&lt;p&gt;最新的知识产权法律对导致新想法的那种探查施加了前所未有的限制。在过去，竞争对手可能使用专利来阻止你销售他们制造的东西的副本，但他们不能阻止你拆开一个来看它是如何工作的。最新的法律使这成为犯罪。如果我们不能研究当前技术来弄清楚如何改进它，我们如何开发新技术？&lt;/p&gt;&#xA;&lt;p&gt;具有讽刺意味的是，黑客自己招致了这一点。计算机是造成问题的原因。机器内的控制系统过去是物理的：齿轮、杠杆和凸轮。 increasingly，产品的大脑（从而价值）在软件中。我指的是一般意义上的软件：即数据。LP上的歌曲是物理压印在塑料中的。iPod磁盘上的歌曲只是存储在上面。&lt;/p&gt;&#xA;&lt;p&gt;数据根据定义很容易复制。互联网使副本容易分发。所以公司害怕不足为奇。但是，像经常发生的那样，恐惧模糊了他们的判断。政府用严酷的法律来保护知识产权。他们可能是好意的。但他们可能没有意识到这样的法律弊大于利。&lt;/p&gt;&#xA;&lt;p&gt;为什么程序员如此强烈地反对这些法律？如果我是一个立法者，我会对这个谜团感兴趣——出于同样的原因，如果我是一个农民，突然一天晚上听到很多咯咯声来自我的鸡舍，我会想要出去调查。黑客不笨，而这个世界上 unanimity 很罕见。所以如果他们都在咯咯叫，也许有什么不对劲。&lt;/p&gt;&#xA;&lt;p&gt;难道这样的法律，虽然意图保护美国，但实际上会伤害它吗？想想看。费曼在曼哈顿计划期间闯入保险箱有一些非常美国化的东西。很难想象当时的德国当局对这类事情有幽默感。也许这不是巧合。&lt;/p&gt;&#xA;&lt;p&gt;黑客是不守规矩的。这就是黑客的本质。这也是美国精神的本质。硅谷在美国，而不是法国、德国、英国或日本，这绝非偶然。在那些国家，人们在 lines 内着色。&lt;/p&gt;&#xA;&lt;p&gt;我在佛罗伦萨住了一段时间。但在那里呆了几个月后，我意识到我无意识希望在那里找到的东西 back 在我刚刚离开的地方。佛罗伦萨著名的原因是，在1450年，它是纽约。在1450年，它充满了你现在在美国发现的那种动荡和雄心勃勃的人。（所以我回到了美国。）&lt;/p&gt;&#xA;&lt;p&gt;美国的一个巨大优势是它为正确的那种不守规矩提供了宜人的氛围——它不仅是聪明人的家园，也是 smart-alecks 的家园。黑客 invariably 是 smart-alecks。如果我们有一个国定假日，那将是4月1日。我们对 brilliant 或可怕 cheesy 的解决方案使用同一个词，这充分说明了我们的工作。当我们炮制出一个时，我们不总是100%确定它是哪种。但只要它有正确的错误类型，那就是一个有希望的迹象。人们认为编程是精确和有条理的，这很奇怪。计算机是精确和有条理的。黑客是你在开怀大笑时做的事情。&lt;/p&gt;&#xA;&lt;p&gt;在我们的世界中，一些最具特征的解决方案与恶作剧相去不远。IBM无疑对DOS许可证协议的后果感到相当惊讶，就像假设的&amp;quot;对手&amp;quot;在迈克尔·拉宾通过将问题重新定义为更容易解决的问题来解决问题时必须感到的那样。&lt;/p&gt;&#xA;&lt;p&gt;Smart-alecks 必须 develop 对他们能逃脱多少的敏锐感觉。最近黑客已经感觉到气氛的变化。最近黑客精神似乎相当不被人看好。&lt;/p&gt;&#xA;&lt;p&gt;对黑客来说，最近公民自由的收缩似乎特别不祥。这也一定让外人感到困惑。为什么我们应该特别关心公民自由？为什么程序员比牙医、推销员或园林设计师更关心？&lt;/p&gt;&#xA;&lt;p&gt;让我用政府官员会欣赏的术语来说明这个 case。公民自由不仅仅是一种装饰，或一种古怪的 American 传统。公民自由使国家富裕。如果你绘制人均GNP与公民自由的图表，你会注意到一个明确的趋势。公民自由真的可能是一个原因，而不仅仅是一个结果？我认为是的。我认为一个人们可以做和说他们想做的事情的社会也倾向于一个最有效的解决方案获胜的社会，而不是那些最有影响力的人赞助的解决方案。威权国家变得腐败；腐败国家变得贫穷；贫穷国家是弱小的。在我看来，政府权力有一条拉弗曲线，就像税收收入一样。至少，这似乎足够可能，以至于尝试实验并发现会是愚蠢的。与高税率不同，如果证明是一个错误，你不能废除极权主义。&lt;/p&gt;&#xA;&lt;p&gt;这就是黑客担心的原因。政府监视人们并不会让程序员写更差的代码。它只是最终导致一个坏想法获胜的世界。因为这对黑客如此重要，他们对此特别敏感。他们能从远处感知极权主义的 approaching，就像动物能感知 approaching 雷暴一样。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
