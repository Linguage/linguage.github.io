<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>怀疑态度 on Linguista</title>
    <link>https://linguage.github.io/tags/%E6%80%80%E7%96%91%E6%80%81%E5%BA%A6/</link>
    <description>Recent content in 怀疑态度 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 May 2007 18:57:36 +0000</lastBuildDate>
    <atom:link href="https://linguage.github.io/tags/%E6%80%80%E7%96%91%E6%80%81%E5%BA%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>对自己的工作保持怀疑态度</title>
      <link>https://linguage.github.io/terencetao/career-advice/zh/be-sceptical-of-your-own-work.zh/</link>
      <pubDate>Sun, 06 May 2007 18:57:36 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/career-advice/zh/be-sceptical-of-your-own-work.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/orig/be-sceptical-of-your-own-work/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://terrytao.wordpress.com/career-advice/be-sceptical-of-your-own-work/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://terrytao.wordpress.com/career-advice/be-sceptical-of-your-own-work/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://terrytao.wordpress.com/career-advice/be-sceptical-of-your-own-work/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;对自己的工作保持怀疑态度&#34;&gt;对自己的工作保持怀疑态度&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;专家就是在非常狭窄的领域内犯过所有可能错误的人。&#xA;——尼尔斯·玻尔&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果你意外地发现某个问题几乎毫不费力地自行解决了，而你却不太明白原因，你应该更加怀疑地分析你的解决方案。&lt;/p&gt;&#xA;&lt;p&gt;特别是，该方法可能还能够证明一些已知为错误的更强陈述，这将意味着该方法存在缺陷。&lt;/p&gt;&#xA;&lt;p&gt;本着类似的精神，如果你试图证明某个雄心勃勃的论断，你可以先尝试寻找反例；要么你找到一个反例，这会为你节省大量时间，并且很可能本身就值得发表，要么你遇到一些障碍，这应该能为你提供一些线索，告诉你需要做什么才能积极确立该论断（特别是，它可以&amp;quot;识别敌人&amp;quot;，即为了完成证明而必须克服的障碍）。&lt;/p&gt;&#xA;&lt;p&gt;实际上，将这种怀疑态度应用于其他数学家的论断也不是个坏主意；至少，它们可以让你了解该论断为何成立以及它的威力有多大。&lt;/p&gt;&#xA;&lt;p&gt;在处理已知困难的问题（这包括大多数&amp;quot;著名问题&amp;quot;）或超出你通常专业领域的问题时，&lt;strong&gt;尤其&lt;/strong&gt;应该对自己的工作保持怀疑态度。特别是，如果你对该问题的解决方案类似于以下过程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;将困难问题转化为另一个困难问题。&lt;/li&gt;&#xA;&lt;li&gt;再次将问题转化为另一个困难问题。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;再次将问题转化为另一个困难问题。&lt;/li&gt;&#xA;&lt;li&gt;再次转化问题。突然问题变得简单多了！&lt;/li&gt;&#xA;&lt;li&gt;将简单问题转化为另一个简单问题。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;再次将简单问题转化为另一个简单问题。&lt;/li&gt;&#xA;&lt;li&gt;解决最后一个简单问题。完成！&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;那么你的论证在第5步几乎肯定存在重大错误。（如果在第1-4步中，转化后问题的难度一直在&lt;strong&gt;增加&lt;/strong&gt;，这一点尤其正确。）至少，这个可疑的步骤应该被彻底检查和重新检查，该步骤附近的任何模糊论证都应该完整写出来，并且应该进行分析，以理解究竟是论证中的哪个决定性步骤戏剧性地简化了问题，以及该步骤如何能够如此强大地实现这种简化。&lt;/p&gt;&#xA;&lt;p&gt;以下是另一种常见的可疑论证类型：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;为了证明著名猜想X，使用反证法，并为了矛盾而假设X为假。&lt;/li&gt;&#xA;&lt;li&gt;进行一些与X有间接关联的随机计算。&lt;/li&gt;&#xA;&lt;li&gt;进行更多此类随机计算。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;进行另一次随机计算，但这次无意中犯了符号错误、除以零或类似错误。&lt;/li&gt;&#xA;&lt;li&gt;进行更多随机计算。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;注意到你的两次计算相互矛盾。&lt;/li&gt;&#xA;&lt;li&gt;恭喜——你得到了期望的矛盾。宣告胜利！&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;对这种错误论证进行压力测试的一个好方法是尝试&lt;strong&gt;不&lt;/strong&gt;使用X为假的初始假设来运行相同的论证。如果可以轻松修改论证再次导致矛盾，这表明问题不在于X——而在于论证本身。这里的一个经典例子是，一个&amp;quot;证明&amp;quot;声称方程 &lt;code&gt;a^n + b^n = c^n&lt;/code&gt; 存在非平凡自然数解会导致矛盾，但这个证明神秘地没有以任何重要方式使用 &lt;code&gt;n &amp;gt; 2&lt;/code&gt; 的假设，并且实际上（可能经过一些小的修改后）对于 &lt;code&gt;n = 2&lt;/code&gt; 也适用。另一个好做法是，将你最初使用反证法找到的论证尝试解开，创建一个避免使用反证法的更直接的证明。如果论证本质上是相当&amp;quot;线性&amp;quot;的，这应该会产生一个更简单、更精简的论证（这&lt;strong&gt;无论如何都是重写过程的一部分&lt;/strong&gt;），并且通常也能捕捉到上述第5步中的错误类型。&lt;/p&gt;&#xA;&lt;p&gt;另一个警告信号是，如果计算引导你越来越远离X本应处理的数学主题和联系（例如，一个黎曼假设的拟议证明几乎完全使用亚纯函数理论进行，几乎没有涉及整数、素数或其他基本数论概念；或者相反，一个完全通过处理整数进行的论证，几乎没有涉及zeta函数）。&lt;/p&gt;&#xA;&lt;p&gt;最后一个警告信号是，如果你的方法基于改编过去该领域许多专家频繁使用的方法，但添加了你自己的一些所有先前专家不知何故&amp;quot;错过&amp;quot;的额外技巧。在这种情况下，这个技巧很可能包含一个严重的技术缺陷，而先前的专家们已经意识到并避免了这种缺陷，在这种情况下尤其需要保持高度怀疑。&lt;/p&gt;&#xA;&lt;p&gt;相比之下，对一个重大问题的实际解决方案往往是通过更类似于以下的过程达成的（通常涉及多位数学家经过数年或数十年的努力，这里描述的许多中间步骤本身就是重要的可发表论文）：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;分离出主要问题X的一个玩具模型案例x。&lt;/li&gt;&#xA;&lt;li&gt;使用方法A解决模型案例x。&lt;/li&gt;&#xA;&lt;li&gt;尝试使用方法A解决完整问题X。&lt;/li&gt;&#xA;&lt;li&gt;这不成功，但方法A可以扩展以处理X的更多模型案例，如x&amp;rsquo;和x&amp;quot;。&lt;/li&gt;&#xA;&lt;li&gt;最终，意识到方法A关键依赖于性质P为真；这个性质对于x、x&amp;rsquo;和x&amp;quot;是已知的，从而解释了目前的进展。&lt;/li&gt;&#xA;&lt;li&gt;猜想性质P对于问题X的所有实例都成立。&lt;/li&gt;&#xA;&lt;li&gt;发现该猜想的一系列反例y、y&amp;rsquo;、y&amp;quot;……这表明要么需要修改方法A以避免依赖P，要么需要新方法。&lt;/li&gt;&#xA;&lt;li&gt;取该系列中最简单的反例y，尝试证明X在这个特殊情况下的成立。同时，尝试看看在缺乏P的情况下方法A是否可行。&lt;/li&gt;&#xA;&lt;li&gt;发现方法A失败的几个反例，其中失败原因可以明确追溯到P。放弃修改方法A的努力。&lt;/li&gt;&#xA;&lt;li&gt;意识到特殊情况y与数学另一个领域中的问题z相关（或至少类似）。查阅关于z的文献，并向该领域的专家请教对该问题的最新观点。&lt;/li&gt;&#xA;&lt;li&gt;了解到z在该领域已通过使用方法B成功攻克。尝试调整方法B来解决y。&lt;/li&gt;&#xA;&lt;li&gt;经过大量努力，开发出调整后的方法B&amp;rsquo;来解决y。&lt;/li&gt;&#xA;&lt;li&gt;用B&amp;rsquo;替换A重复上述步骤1-12（当然，结果可能与上述示例情节略有不同）。继续这样做几年，直到所有模型特殊情况都可以通过某种方法解决。&lt;/li&gt;&#xA;&lt;li&gt;最终，拥有一个方法阵列，可以对X给出部分结果，每种方法都有其优缺点。对于在何种情况下给定方法可能产生非平凡结果，获得了相当多的直觉。&lt;/li&gt;&#xA;&lt;li&gt;开始将这些方法结合起来，简化这些方法的执行，定位新的模型问题，和/或找到一个统一且澄清的框架，在该框架中许多先前的方法、见解、结果等成为特例。&lt;/li&gt;&#xA;&lt;li&gt;最终，意识到存在一个方法族A^&lt;em&gt;（其中A是最早被发现的），粗略地说，可以处理所有出现性质P^&lt;/em&gt;（性质P的现代推广）的情况。还有一个相当不同的方法族B^*，可以处理所有出现Q^*的情况。&lt;/li&gt;&#xA;&lt;li&gt;从之前关于这个问题的所有工作中，所有已知的模型例子都已知满足P^&lt;em&gt;或Q^&lt;/em&gt;。提出猜想C：问题X的所有情况都满足P^&lt;em&gt;或Q^&lt;/em&gt;。&lt;/li&gt;&#xA;&lt;li&gt;验证猜想C实际上蕴含该问题。这是一个重大的简化！&lt;/li&gt;&#xA;&lt;li&gt;重复步骤1-18，但将问题X替换为猜想C。（同样，情节可能与上述不同。）这个过程本身可能会迭代几次。&lt;/li&gt;&#xA;&lt;li&gt;最后，问题被提炼到最纯粹的本质：一个关键猜想K，它（至少在道德上）为已知方法A^*、B^*等提供了决定性输入，这些方法将解决猜想C从而解决问题X。&lt;/li&gt;&#xA;&lt;li&gt;一个突破：引入新方法Z来解决K的一个重要特殊情况。&lt;/li&gt;&#xA;&lt;li&gt;终局：利用所有直觉、经验和过去结果的全部力量，迅速发展和扩展方法Z，完全解决K，然后C，最后X。&lt;/li&gt;&#xA;&lt;li&gt;为解决主要问题X而开发的技术被调整用于解决该领域中其他相关问题。但现在出现了一个X的自然后继问题X&amp;rsquo;，它刚好超出了新开发工具的范围……然后我们回到第1步。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;另请参阅&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/learn-the-limitations-of-your-tools.zh/&#34;&gt;了解你的工具的局限性&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/ask-yourself-dumb-questions-and-answer-them.zh/&#34;&gt;问自己愚蠢的问题&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/think-ahead.zh/&#34;&gt;提前思考&lt;/a&gt;&amp;ldquo;和&amp;rdquo;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/use-the-wastebasket.zh/&#34;&gt;使用废纸篓&lt;/a&gt;&amp;quot;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>早期</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/early/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/early/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/early/&#34;&gt;English version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;link-card&#34; data-url=&#34;https://www.paulgraham.com/early.html&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://www.paulgraham.com/early.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://www.paulgraham.com/early.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;早期&#34;&gt;早期&lt;/h1&gt;&#xA;&lt;p&gt;2020年10月&lt;/p&gt;&#xA;&lt;p&gt;阻碍人们做出伟大工作的最大因素之一，就是害怕做出平庸的东西。这种恐惧并非没有道理。许多伟大的项目在早期阶段都会显得不太令人印象深刻，即使对它们的创造者来说也是如此。你必须经历这个阶段才能达到那之后更伟大的工作。但许多人没有做到。大多数人甚至没有达到做出让自己感到尴尬的成果的阶段，更不用说继续前进了。他们太害怕了，甚至不敢开始。&lt;/p&gt;&#xA;&lt;p&gt;想象一下，如果我们能够消除对做出平庸之物的恐惧。想象一下我们能够多做出多少成果。&lt;/p&gt;&#xA;&lt;p&gt;有没有希望消除这种恐惧？我认为有。我认为这里起作用的习惯并不深。&lt;/p&gt;&#xA;&lt;p&gt;创造新事物对我们这个物种来说本身就是一件新事物。这件事一直都在发生，但在过去的几个世纪里，它发生得太慢，以至于对个人来说几乎是看不见的。而且由于我们不需要处理新想法的习俗，我们也没有发展出任何习俗。&lt;/p&gt;&#xA;&lt;p&gt;我们对雄心勃勃项目的早期版本缺乏足够的经验，不知道如何应对它们。我们像对待更完成的工作或不太雄心勃勃的项目一样评判它们。我们没有意识到它们是特殊情况。&lt;/p&gt;&#xA;&lt;p&gt;或者至少，大多数人没有。我自信我们能做得更好的原因之一是，这已经开始发生了。在这方面已经有一些地方生活在未来之中。硅谷就是其中之一：一个不知名的人在研究一个听起来很奇怪的想法，不会像在家里那样自动被 dismissed。在硅谷，人们已经意识到这样做有多危险。&lt;/p&gt;&#xA;&lt;p&gt;处理新想法的正确方法是把它们视为对你想象力的挑战——不仅仅是降低标准，而是完全转换极性，从列举想法不可行的原因，转变为思考它可行的方式。这就是当我遇到有新想法的人时所做的。我已经相当擅长这个，但我有大量的练习。成为 Y Combinator 的合伙人意味着你几乎完全沉浸于由不知名人物提出的奇怪想法中。每六个月你都会面对成千上万的新想法，必须从中筛选，知道在一个结果呈幂律分布的世界里，如果你错过了这个干草堆中的针，将会非常明显。乐观变得紧迫。&lt;/p&gt;&#xA;&lt;p&gt;但我有希望的是，随着时间的推移，这种乐观态度可以变得足够普遍，成为一种社会习俗，而不仅仅是少数专家使用的技巧。毕竟，这是一个极其有利可图的技巧，而且那些 tends to spread quickly.&lt;/p&gt;&#xA;&lt;p&gt;当然，缺乏经验并不是人们对雄心勃勃项目的早期版本过于苛刻的唯一原因。他们这样做也是为了显得聪明。在一个新想法有风险的领域，比如初创公司，那些 dismiss 它们的人实际上更可能是对的。只是当他们的预测按结果加权时不是这样。&lt;/p&gt;&#xA;&lt;p&gt;但人们 dismiss 新想法还有另一个更阴险的原因。如果你尝试一些雄心勃勃的事情，你周围的许多人会有意识或无意识地希望你失败。他们担心如果你尝试一些雄心勃勃的事情并成功了，你会超过他们。在一些国家，这不仅仅是个人缺陷，而是民族文化的一部分。&lt;/p&gt;&#xA;&lt;p&gt;我不会声称硅谷的人们克服这些冲动是因为他们道德更高尚。[1] 许多人希望你成功的原因是他们希望与你一起上升。对投资者来说，这个激励特别明确。他们希望你成功，因为他们希望你在这个过程中让他们致富。但你遇到的许多其他人也可以从你的成功中以某种方式受益。至少，当你出名时，他们可以说他们很久以前就认识你了。&lt;/p&gt;&#xA;&lt;p&gt;但即使硅谷的鼓励态度植根于自身利益，但随着时间的推移，它实际上已经成长为一种善意。鼓励初创公司已经实践了很长时间，已经成为一种习俗。现在，这似乎就是对初创公司应该做的事情。&lt;/p&gt;&#xA;&lt;p&gt;也许硅谷太乐观了。也许它太容易被冒名顶替者愚弄。许多不太乐观的记者想要相信这一点。但他们引用的冒名顶替者名单 suspiciously 很短，而且充满了星号。[2] 如果你用收入作为标准，硅谷的乐观态度似乎比世界其他地方更准确。而且因为它有效，它会传播。&lt;/p&gt;&#xA;&lt;p&gt;当然，新想法不仅仅是新的初创公司想法。对做出平庸之物的恐惧在每个领域都阻碍着人们。但硅谷展示了习俗可以多快地发展以支持新想法。而这反过来又证明，dismiss 新想法并不是深深植根于人性中，以至于无法 unlearn。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;不幸的是，如果你想做新事情，你将面临一个比他人的怀疑更强大的力量：你自己的怀疑。你也会过于严厉地评判自己的早期工作。你如何避免这种情况？&lt;/p&gt;&#xA;&lt;p&gt;这是一个困难的问题，因为你不想完全消除对做出平庸之物的恐惧。正是这种恐惧引导你走向做好工作。你只是想暂时关闭它，就像止痛药暂时关闭疼痛一样。&lt;/p&gt;&#xA;&lt;p&gt;人们已经发现了几种有效的技术。哈代在《一个数学家的辩白》中提到了两个：好的工作不是由&amp;quot;谦逊&amp;quot;的人完成的。例如，在任何学科中，教授的首要职责之一是稍微夸大他的学科的重要性和他在其中的重要性。如果你高估了你正在从事的工作的重要性，那将弥补你对初始结果的错误严厉判断。如果你看着某个东西，它是一个价值100的目标的20%，然后得出结论说它是一个价值200的目标的10%，你对它的预期价值的估计是正确的，即使两个组成部分都是错误的。&lt;/p&gt;&#xA;&lt;p&gt;正如哈代所建议的，稍微过度自信也有帮助。我注意到在许多领域，最成功的人都稍微过度自信。从表面上看，这似乎不太可能。当然，对自己的能力有准确的估计是最优的。怎么可能成为一个错误的优势？因为这个错误补偿了其他来源的反向错误：稍微过度自信使你能够抵御他人的怀疑和你自己的怀疑。&lt;/p&gt;&#xA;&lt;p&gt;无知有类似的效果。如果你是一个足够宽松的完成作品的评判者，那么将早期工作错误地判断为完成工作是安全的。我怀疑培养这种无知是否可能，但经验上它是一个真正的优势，特别是对年轻人来说。&lt;/p&gt;&#xA;&lt;p&gt;度过雄心勃勃项目平庸阶段的另一种方法是与合适的人在一起——在社会逆风中创造一个漩涡。但仅仅收集总是鼓励你的人是不够的。你会学会 discount 那个。你需要能够真正区分丑小鸭和幼天鹅的同事。最能做到这一点的人是那些从事自己类似项目的人，这就是为什么大学部门和研究实验室工作得如此之好。你不需要机构来收集同事。他们自然会聚集，只要有机会。但通过寻找其他试图做新事情的人来加速这个过程是非常值得的。&lt;/p&gt;&#xA;&lt;p&gt;教师实际上是同事的一个特例。教师的工作既是看到早期工作的承诺，也是鼓励你继续。但不幸的是，擅长这个的教师相当稀少，所以如果你有机会向一个学习，抓住它。[3]&lt;/p&gt;&#xA;&lt;p&gt;对一些人来说，依靠纯粹的纪律可能有效：告诉自己你只需要按过初始的垃圾阶段，不要气馁。但像很多&amp;quot;告诉你自己&amp;quot;的建议一样，这比听起来更难。而且随着年龄增长，它会变得更难，因为你的标准会提高。老人确实有一个补偿优势：他们以前经历过这个。&lt;/p&gt;&#xA;&lt;p&gt;如果你少关注你现在的位置，多关注变化率，会有所帮助。如果你能看到它在改进，你就不会太担心做不好的工作。显然，它改进得越快，这越容易。所以当你开始新事物时，如果你能花很多时间在它上面是好的。这是年轻的另一个优势：你倾向于有更大的时间块。&lt;/p&gt;&#xA;&lt;p&gt;另一个常见的技巧是开始时认为新工作是不同类型、要求较低的类型。开始一幅画说它只是一个草图，或者一个新的软件说它只是一个快速的黑客行为。然后你用较低的标准评判你的初始结果。一旦项目滚动起来，你可以偷偷地把它转换成更多的东西。[4]&lt;/p&gt;&#xA;&lt;p&gt;如果你使用能让你快速工作并且不需要太多前期承诺的媒介，这会更容易。当你在笔记本上绘画时，比当你在雕刻石头时，更容易说服自己某物只是一个草图。而且你得到初始结果更快。[5][6]&lt;/p&gt;&#xA;&lt;p&gt;如果你把它视为一种学习方式而不仅仅是制作东西的方式，那么尝试一个有风险的项目会更容易。那么即使项目真的失败了，你仍然会从中获益。如果问题定义得足够尖锐，失败本身就是知识：如果你试图证明的定理结果证明是假的，或者你使用某种尺寸的结构构件，它在压力下失效了，你学到了一些东西，即使它不是你想学的东西。[7]&lt;/p&gt;&#xA;&lt;p&gt;一个对我来说特别有效的动机是好奇心。我喜欢尝试新事物，只是为了看看它们会变成什么样子。我们本着这种精神创立了 Y Combinator，这也是我在研究 Bel 时保持动力的主要因素之一。在长期使用各种方言的 Lisp 之后，我很好奇看到它的固有形状是什么：如果你完全遵循公理方法，你最终会得到什么。&lt;/p&gt;&#xA;&lt;p&gt;但为了不被看起来平庸的早期努力所气馁，你必须对自己玩心理游戏，这有点奇怪。你试图 trick 自己相信的东西实际上是事实。一个雄心勃勃项目的看起来平庸的早期版本确实比它看起来的更有价值。所以最终的解决方案可能是教自己认识到这一点。&lt;/p&gt;&#xA;&lt;p&gt;一种方法是研究做过伟大工作的人的历史。他们在早期在想什么？他们做的第一件事是什么？有时很难得到这个问题的准确答案，因为人们常常对自己的早期工作感到尴尬，并且很少努力发表它。（他们也错误地判断它。）但当你能够准确了解某人在通往某条伟大工作道路上迈出的第一步时，它们往往相当微弱。[8]&lt;/p&gt;&#xA;&lt;p&gt;也许如果你研究足够多的这样的案例，你可以教自己成为早期工作的更好评判者。那么你就能免疫于他人的怀疑和自己对做出平庸之物的恐惧。你会看到早期工作本身的本质。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，过于严厉地评判早期工作的问题的解决方案是意识到我们对它的态度本身就是早期工作。把一切都放在同一标准是一个粗略的第1版。我们已经在进化更好的习俗，我们已经能看到回报会有多大的迹象。&lt;/p&gt;&#xA;&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;&#xA;&lt;p&gt;[1] 这个假设可能过于保守。有一些证据表明，历史上湾区吸引的是不同类型的人，比如纽约市。&lt;/p&gt;&#xA;&lt;p&gt;[2] 他们最喜欢的一个是 Theranos。但 Theranos 股权表最显著的特征是硅谷公司的缺席。记者被 Theranos 愚弄了，但硅谷投资者没有。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
