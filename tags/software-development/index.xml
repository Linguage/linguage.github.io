<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Development on Linguage</title>
    <link>http://localhost:1326/tags/software-development/</link>
    <description>Recent content in Software Development on Linguage</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1326/tags/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design and Research</title>
      <link>http://localhost:1326/paul_graham/essays_en/desres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/desres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1326/paul_graham/essays_zh/desres/&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;design-and-research&#34;&gt;Design and Research&lt;/h1&gt;&#xA;&lt;p&gt;January 2003&lt;/p&gt;&#xA;&lt;p&gt;(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)&lt;/p&gt;&#xA;&lt;p&gt;Visitors to this country are often surprised to find that Americans like to begin a conversation by asking &amp;ldquo;what do you do?&amp;rdquo; I&amp;rsquo;ve never liked this question. I&amp;rsquo;ve rarely had a neat answer to it. But I think I have finally solved the problem. Now, when someone asks me what I do, I look them straight in the eye and say &amp;ldquo;I&amp;rsquo;m designing a new dialect of Lisp.&amp;rdquo; I recommend this answer to anyone who doesn&amp;rsquo;t like being asked what they do. The conversation will turn immediately to other topics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Holding a Program in One&#39;s Head</title>
      <link>http://localhost:1326/paul_graham/essays_en/head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/head/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1326/paul_graham/essays_zh/head/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;holding-a-program-in-ones-head&#34;&gt;Holding a Program in One&amp;rsquo;s Head&lt;/h1&gt;&#xA;&lt;p&gt;August 2007&lt;/p&gt;&#xA;&lt;p&gt;A good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he&amp;rsquo;s working on. Mathematicians don&amp;rsquo;t answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head, and you can manipulate it at will.&lt;/p&gt;</description>
    </item>
    <item>
      <title>If Lisp is So Great</title>
      <link>http://localhost:1326/paul_graham/essays_en/iflisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/iflisp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1326/paul_graham/essays_zh/iflisp/&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;if-lisp-is-so-great&#34;&gt;If Lisp is So Great&lt;/h1&gt;&#xA;&lt;p&gt;May 2003&lt;/p&gt;&#xA;&lt;p&gt;If Lisp is so great, why don&amp;rsquo;t more people use it? I was asked this question by a student in the audience at a talk I gave recently. Not for the first time, either.&lt;/p&gt;&#xA;&lt;p&gt;In languages, as in so many things, there&amp;rsquo;s not much correlation between popularity and quality. Why does John Grisham (King of Torts sales rank, 44) outsell Jane Austen (Pride and Prejudice sales rank, 6191)? Would even Grisham claim that it&amp;rsquo;s because he&amp;rsquo;s a better writer?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Revenge of the Nerds</title>
      <link>http://localhost:1326/paul_graham/essays_en/icad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/icad/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1326/paul_graham/essays_zh/icad/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;revenge-of-the-nerds&#34;&gt;Revenge of the Nerds&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;May 2002&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;We were after the C++ programmers. We managed to drag a lot of them about halfway to Lisp.&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Guy Steele, co-author of the Java spec&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. Everyone knows who the pointy-haired boss is, right? I think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Hundred-Year Language</title>
      <link>http://localhost:1326/paul_graham/essays_en/hundred/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/hundred/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1326/paul_graham/essays_zh/hundred/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-hundred-year-language&#34;&gt;The Hundred-Year Language&lt;/h1&gt;&#xA;&lt;p&gt;April 2003&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a keynote talk at PyCon 2003.)&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s hard to predict what life will be like in a hundred years. There are only a few things we can say with certainty. We know that everyone will drive flying cars, that zoning laws will be relaxed to allow buildings hundreds of stories tall, that it will be dark most of the time, and that women will all be trained in the martial arts. Here I want to zoom in on one detail of this picture. What kind of programming language will they use to write the software controlling those flying cars?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Other Road Ahead</title>
      <link>http://localhost:1326/paul_graham/essays_en/road/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/road/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1326/paul_graham/essays_zh/road/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-other-road-ahead&#34;&gt;The Other Road Ahead&lt;/h1&gt;&#xA;&lt;p&gt;September 2001&lt;/p&gt;&#xA;&lt;p&gt;(This article explains why much of the next generation of software may be server-based, what that will mean for programmers, and why this new kind of software is a great opportunity for startups. It&amp;rsquo;s derived from a talk at BBN Labs.)&lt;/p&gt;&#xA;&lt;p&gt;In the summer of 1995, my friend Robert Morris and I decided to start a startup. The PR campaign leading up to Netscape&amp;rsquo;s IPO was running full blast then, and there was a lot of talk in the press about online commerce. At the time there might have been thirty actual stores on the Web, all made by hand. If there were going to be a lot of online stores, there would need to be software for making them, so we decided to write some.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Paradox</title>
      <link>http://localhost:1326/paul_graham/essays_en/pypar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/pypar/</guid>
      <description>&lt;h1 id=&#34;the-python-paradox&#34;&gt;The Python Paradox&lt;/h1&gt;&#xA;&lt;p&gt;August 2004&lt;/p&gt;&#xA;&lt;p&gt;In a recent talk I said something that upset a lot of people: that you could get smarter programmers to work on a Python project than you could to work on a Java project.&lt;/p&gt;&#xA;&lt;p&gt;I didn&amp;rsquo;t mean by this that Java programmers are dumb. I meant that Python programmers are smart. It&amp;rsquo;s a lot of work to learn a new programming language. And people don&amp;rsquo;t learn Python because it will get them a job; they learn it because they genuinely like to program and aren&amp;rsquo;t satisfied with the languages they already know.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weird Languages</title>
      <link>http://localhost:1326/paul_graham/essays_en/weird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1326/paul_graham/essays_en/weird/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1326/paul_graham/essays_zh/weird/&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;weird-languages&#34;&gt;Weird Languages&lt;/h1&gt;&#xA;&lt;p&gt;August 2021&lt;/p&gt;&#xA;&lt;p&gt;When people say that in their experience all programming languages are basically equivalent, they&amp;rsquo;re making a statement not about languages but about the kind of programming they&amp;rsquo;ve done.&lt;/p&gt;&#xA;&lt;p&gt;99.5% of programming consists of gluing together calls to library functions. All popular languages are equally good at this. So one can easily spend one&amp;rsquo;s whole career operating in the intersection of popular programming languages.&lt;/p&gt;&#xA;&lt;p&gt;But the other .5% of programming is disproportionately interesting. If you want to learn what it consists of, the weirdness of weird languages is a good clue to follow.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
