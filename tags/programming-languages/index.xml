<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Languages on Linguista</title>
    <link>http://localhost:1355/tags/programming-languages/</link>
    <description>Recent content in Programming Languages on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1355/tags/programming-languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Being Popular</title>
      <link>http://localhost:1355/paul_graham/essays_en/popular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/popular/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/popular/&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;being-popular&#34;&gt;Being Popular&lt;/h1&gt;&#xA;&lt;p&gt;May 2001&lt;/p&gt;&#xA;&lt;p&gt;(This article was written as a kind of business plan for a new language. So it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.)&lt;/p&gt;&#xA;&lt;p&gt;A friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time, that programming languages don&amp;rsquo;t become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. At least, that was what had happened to the language he had designed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design and Research</title>
      <link>http://localhost:1355/paul_graham/essays_en/desres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/desres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/desres/&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;design-and-research&#34;&gt;Design and Research&lt;/h1&gt;&#xA;&lt;p&gt;January 2003&lt;/p&gt;&#xA;&lt;p&gt;(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)&lt;/p&gt;&#xA;&lt;p&gt;Visitors to this country are often surprised to find that Americans like to begin a conversation by asking &amp;ldquo;what do you do?&amp;rdquo; I&amp;rsquo;ve never liked this question. I&amp;rsquo;ve rarely had a neat answer to it. But I think I have finally solved the problem. Now, when someone asks me what I do, I look them straight in the eye and say &amp;ldquo;I&amp;rsquo;m designing a new dialect of Lisp.&amp;rdquo; I recommend this answer to anyone who doesn&amp;rsquo;t like being asked what they do. The conversation will turn immediately to other topics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>If Lisp is So Great</title>
      <link>http://localhost:1355/paul_graham/essays_en/iflisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/iflisp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/iflisp/&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;if-lisp-is-so-great&#34;&gt;If Lisp is So Great&lt;/h1&gt;&#xA;&lt;p&gt;May 2003&lt;/p&gt;&#xA;&lt;p&gt;If Lisp is so great, why don&amp;rsquo;t more people use it? I was asked this question by a student in the audience at a talk I gave recently. Not for the first time, either.&lt;/p&gt;&#xA;&lt;p&gt;In languages, as in so many things, there&amp;rsquo;s not much correlation between popularity and quality. Why does John Grisham (King of Torts sales rank, 44) outsell Jane Austen (Pride and Prejudice sales rank, 6191)? Would even Grisham claim that it&amp;rsquo;s because he&amp;rsquo;s a better writer?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Revenge of the Nerds</title>
      <link>http://localhost:1355/paul_graham/essays_en/icad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/icad/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/icad/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;revenge-of-the-nerds&#34;&gt;Revenge of the Nerds&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;May 2002&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;We were after the C++ programmers. We managed to drag a lot of them about halfway to Lisp.&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Guy Steele, co-author of the Java spec&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. Everyone knows who the pointy-haired boss is, right? I think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Hundred-Year Language</title>
      <link>http://localhost:1355/paul_graham/essays_en/hundred/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/hundred/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/hundred/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-hundred-year-language&#34;&gt;The Hundred-Year Language&lt;/h1&gt;&#xA;&lt;p&gt;April 2003&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a keynote talk at PyCon 2003.)&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s hard to predict what life will be like in a hundred years. There are only a few things we can say with certainty. We know that everyone will drive flying cars, that zoning laws will be relaxed to allow buildings hundreds of stories tall, that it will be dark most of the time, and that women will all be trained in the martial arts. Here I want to zoom in on one detail of this picture. What kind of programming language will they use to write the software controlling those flying cars?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Roots of Lisp</title>
      <link>http://localhost:1355/paul_graham/essays_en/rootsoflisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/rootsoflisp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/rootsoflisp/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-roots-of-lisp&#34;&gt;The Roots of Lisp&lt;/h1&gt;&#xA;&lt;p&gt;May 2001&lt;/p&gt;&#xA;&lt;p&gt;(I wrote this article to help myself understand exactly what McCarthy discovered. You don&amp;rsquo;t need to know this stuff to program in Lisp, but it should be helpful to anyone who wants to understand the essence of Lisp — both in the sense of its origins and its semantic core. The fact that it has such a core is one of Lisp&amp;rsquo;s distinguishing features, and the reason why, unlike other languages, Lisp has dialects.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weird Languages</title>
      <link>http://localhost:1355/paul_graham/essays_en/weird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/weird/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/weird/&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;weird-languages&#34;&gt;Weird Languages&lt;/h1&gt;&#xA;&lt;p&gt;August 2021&lt;/p&gt;&#xA;&lt;p&gt;When people say that in their experience all programming languages are basically equivalent, they&amp;rsquo;re making a statement not about languages but about the kind of programming they&amp;rsquo;ve done.&lt;/p&gt;&#xA;&lt;p&gt;99.5% of programming consists of gluing together calls to library functions. All popular languages are equally good at this. So one can easily spend one&amp;rsquo;s whole career operating in the intersection of popular programming languages.&lt;/p&gt;&#xA;&lt;p&gt;But the other .5% of programming is disproportionately interesting. If you want to learn what it consists of, the weirdness of weird languages is a good clue to follow.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Made Lisp Different</title>
      <link>http://localhost:1355/paul_graham/essays_en/diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/diff/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/diff/&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-made-lisp-different&#34;&gt;What Made Lisp Different&lt;/h1&gt;&#xA;&lt;p&gt;December 2001 (rev. May 2002)&lt;/p&gt;&#xA;&lt;p&gt;(This article came about in response to some questions on the LL1 mailing list. It is now incorporated in Revenge of the Nerds.)&lt;/p&gt;&#xA;&lt;p&gt;When McCarthy designed Lisp in the late 1950s, it was a radical departure from existing languages, the most important of which was Fortran.&lt;/p&gt;&#xA;&lt;p&gt;Lisp embodied nine new ideas:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Conditionals.&lt;/strong&gt; A conditional is an if-then-else construct. We take these for granted now. They were invented by McCarthy in the course of developing Lisp. (Fortran at that time only had a conditional goto, closely based on the branch instruction in the underlying hardware.) McCarthy, who was on the Algol committee, got conditionals into Algol, whence they spread to most other languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Arc Isn&#39;t Especially Object-Oriented</title>
      <link>http://localhost:1355/paul_graham/essays_en/noop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_en/noop/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_zh/noop/&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-arc-isnt-especially-object-oriented&#34;&gt;Why Arc Isn&amp;rsquo;t Especially Object-Oriented&lt;/h1&gt;&#xA;&lt;p&gt;There is a kind of mania for object-oriented programming at the moment, but some of the smartest programmers I know are some of the least excited about it.&lt;/p&gt;&#xA;&lt;p&gt;My own feeling is that object-oriented programming is a useful technique in some cases, but it isn&amp;rsquo;t something that has to pervade every program you write. You should be able to define new types, but you shouldn&amp;rsquo;t have to express every program as the definition of new types.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
