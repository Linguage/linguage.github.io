<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>问题解决 on Linguista</title>
    <link>https://linguage.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link>
    <description>Recent content in 问题解决 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 May 2007 19:02:26 +0000</lastBuildDate>
    <atom:link href="https://linguage.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>保持耐心</title>
      <link>https://linguage.github.io/terencetao/career-advice/zh/be-patient.zh/</link>
      <pubDate>Sun, 06 May 2007 19:02:26 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/career-advice/zh/be-patient.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/orig/be-patient/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/career-advice/be-patient/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;保持耐心&#34;&gt;保持耐心&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果我曾做出任何有价值的发现，那更多归功于耐心的关注，而非其他任何才能。&lt;/p&gt;&#xA;&lt;p&gt;— 艾萨克·牛顿&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;任何特定问题通常需要数月的努力才能取得令人满意的进展。虽然常规或意外简单的问题可能在几周内解决，但这只是例外而非常态。因此，数月过去却看不到明显进展并不罕见；然而，通过耐心地排除无果的攻关方向，你正在为突破的到来做好准备，一旦突破出现，就能在相对较短的时间内解决问题。（但对任何&amp;quot;过于容易&amp;quot;且神秘地未能解决关键困难的突破&lt;strong&gt;保持怀疑&lt;/strong&gt;。）&lt;/p&gt;&#xA;&lt;p&gt;在某些情况下，你（或整个数学领域）根本还没有准备好解决这个问题；在这种情况下，将其搁置（但&lt;strong&gt;不要完全忘记&lt;/strong&gt;），在其他相关问题&lt;strong&gt;上积累一些技能&lt;/strong&gt;，并在几年后回到原始问题，通常是最佳策略（特别是如果你的正规数学教育尚未完成）。对于任何&lt;strong&gt;真正著名的问题&lt;/strong&gt;，这种情况尤其可能发生。&lt;/p&gt;&#xA;&lt;p&gt;顺便说一句，大多数问题主要是通过这种耐心、深思熟虑的攻关方式解决的；在这个行业中，&amp;ldquo;尤里卡！&amp;ldquo;时刻出奇地少，如果它们没有神奇地出现在你面前，也不要气馁（它们肯定没有出现在我面前）。&lt;/p&gt;&#xA;&lt;p&gt;另请参阅&amp;rdquo;&lt;strong&gt;努力工作&lt;/strong&gt;&amp;ldquo;和&amp;rdquo;&lt;strong&gt;保持灵活&lt;/strong&gt;&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;这是&lt;a href=&#34;https://www.youtube.com/watch?v=3ResTHKVxf4&#34;&gt;艾拉·格拉斯制作的一个简短海报&lt;/a&gt;，在创意工作的背景下提出了一些相关观点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>对自己的工作保持怀疑态度</title>
      <link>https://linguage.github.io/terencetao/career-advice/zh/be-sceptical-of-your-own-work.zh/</link>
      <pubDate>Sun, 06 May 2007 18:57:36 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/career-advice/zh/be-sceptical-of-your-own-work.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/orig/be-sceptical-of-your-own-work/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/career-advice/be-sceptical-of-your-own-work/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;对自己的工作保持怀疑态度&#34;&gt;对自己的工作保持怀疑态度&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;专家就是在非常狭窄的领域内犯过所有可能错误的人。&#xA;——尼尔斯·玻尔&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果你意外地发现某个问题几乎毫不费力地自行解决了，而你却不太明白原因，你应该更加怀疑地分析你的解决方案。&lt;/p&gt;&#xA;&lt;p&gt;特别是，该方法可能还能够证明一些已知为错误的更强陈述，这将意味着该方法存在缺陷。&lt;/p&gt;&#xA;&lt;p&gt;本着类似的精神，如果你试图证明某个雄心勃勃的论断，你可以先尝试寻找反例；要么你找到一个反例，这会为你节省大量时间，并且很可能本身就值得发表，要么你遇到一些障碍，这应该能为你提供一些线索，告诉你需要做什么才能积极确立该论断（特别是，它可以&amp;quot;识别敌人&amp;quot;，即为了完成证明而必须克服的障碍）。&lt;/p&gt;&#xA;&lt;p&gt;实际上，将这种怀疑态度应用于其他数学家的论断也不是个坏主意；至少，它们可以让你了解该论断为何成立以及它的威力有多大。&lt;/p&gt;&#xA;&lt;p&gt;在处理已知困难的问题（这包括大多数&amp;quot;著名问题&amp;quot;）或超出你通常专业领域的问题时，&lt;strong&gt;尤其&lt;/strong&gt;应该对自己的工作保持怀疑态度。特别是，如果你对该问题的解决方案类似于以下过程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;将困难问题转化为另一个困难问题。&lt;/li&gt;&#xA;&lt;li&gt;再次将问题转化为另一个困难问题。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;再次将问题转化为另一个困难问题。&lt;/li&gt;&#xA;&lt;li&gt;再次转化问题。突然问题变得简单多了！&lt;/li&gt;&#xA;&lt;li&gt;将简单问题转化为另一个简单问题。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;再次将简单问题转化为另一个简单问题。&lt;/li&gt;&#xA;&lt;li&gt;解决最后一个简单问题。完成！&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;那么你的论证在第5步几乎肯定存在重大错误。（如果在第1-4步中，转化后问题的难度一直在&lt;strong&gt;增加&lt;/strong&gt;，这一点尤其正确。）至少，这个可疑的步骤应该被彻底检查和重新检查，该步骤附近的任何模糊论证都应该完整写出来，并且应该进行分析，以理解究竟是论证中的哪个决定性步骤戏剧性地简化了问题，以及该步骤如何能够如此强大地实现这种简化。&lt;/p&gt;&#xA;&lt;p&gt;以下是另一种常见的可疑论证类型：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;为了证明著名猜想X，使用反证法，并为了矛盾而假设X为假。&lt;/li&gt;&#xA;&lt;li&gt;进行一些与X有间接关联的随机计算。&lt;/li&gt;&#xA;&lt;li&gt;进行更多此类随机计算。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;进行另一次随机计算，但这次无意中犯了符号错误、除以零或类似错误。&lt;/li&gt;&#xA;&lt;li&gt;进行更多随机计算。&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;注意到你的两次计算相互矛盾。&lt;/li&gt;&#xA;&lt;li&gt;恭喜——你得到了期望的矛盾。宣告胜利！&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;对这种错误论证进行压力测试的一个好方法是尝试&lt;strong&gt;不&lt;/strong&gt;使用X为假的初始假设来运行相同的论证。如果可以轻松修改论证再次导致矛盾，这表明问题不在于X——而在于论证本身。这里的一个经典例子是，一个&amp;quot;证明&amp;quot;声称方程 &lt;code&gt;a^n + b^n = c^n&lt;/code&gt; 存在非平凡自然数解会导致矛盾，但这个证明神秘地没有以任何重要方式使用 &lt;code&gt;n &amp;gt; 2&lt;/code&gt; 的假设，并且实际上（可能经过一些小的修改后）对于 &lt;code&gt;n = 2&lt;/code&gt; 也适用。另一个好做法是，将你最初使用反证法找到的论证尝试解开，创建一个避免使用反证法的更直接的证明。如果论证本质上是相当&amp;quot;线性&amp;quot;的，这应该会产生一个更简单、更精简的论证（这&lt;strong&gt;无论如何都是重写过程的一部分&lt;/strong&gt;），并且通常也能捕捉到上述第5步中的错误类型。&lt;/p&gt;&#xA;&lt;p&gt;另一个警告信号是，如果计算引导你越来越远离X本应处理的数学主题和联系（例如，一个黎曼假设的拟议证明几乎完全使用亚纯函数理论进行，几乎没有涉及整数、素数或其他基本数论概念；或者相反，一个完全通过处理整数进行的论证，几乎没有涉及zeta函数）。&lt;/p&gt;&#xA;&lt;p&gt;最后一个警告信号是，如果你的方法基于改编过去该领域许多专家频繁使用的方法，但添加了你自己的一些所有先前专家不知何故&amp;quot;错过&amp;quot;的额外技巧。在这种情况下，这个技巧很可能包含一个严重的技术缺陷，而先前的专家们已经意识到并避免了这种缺陷，在这种情况下尤其需要保持高度怀疑。&lt;/p&gt;&#xA;&lt;p&gt;相比之下，对一个重大问题的实际解决方案往往是通过更类似于以下的过程达成的（通常涉及多位数学家经过数年或数十年的努力，这里描述的许多中间步骤本身就是重要的可发表论文）：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;分离出主要问题X的一个玩具模型案例x。&lt;/li&gt;&#xA;&lt;li&gt;使用方法A解决模型案例x。&lt;/li&gt;&#xA;&lt;li&gt;尝试使用方法A解决完整问题X。&lt;/li&gt;&#xA;&lt;li&gt;这不成功，但方法A可以扩展以处理X的更多模型案例，如x&amp;rsquo;和x&amp;quot;。&lt;/li&gt;&#xA;&lt;li&gt;最终，意识到方法A关键依赖于性质P为真；这个性质对于x、x&amp;rsquo;和x&amp;quot;是已知的，从而解释了目前的进展。&lt;/li&gt;&#xA;&lt;li&gt;猜想性质P对于问题X的所有实例都成立。&lt;/li&gt;&#xA;&lt;li&gt;发现该猜想的一系列反例y、y&amp;rsquo;、y&amp;quot;……这表明要么需要修改方法A以避免依赖P，要么需要新方法。&lt;/li&gt;&#xA;&lt;li&gt;取该系列中最简单的反例y，尝试证明X在这个特殊情况下的成立。同时，尝试看看在缺乏P的情况下方法A是否可行。&lt;/li&gt;&#xA;&lt;li&gt;发现方法A失败的几个反例，其中失败原因可以明确追溯到P。放弃修改方法A的努力。&lt;/li&gt;&#xA;&lt;li&gt;意识到特殊情况y与数学另一个领域中的问题z相关（或至少类似）。查阅关于z的文献，并向该领域的专家请教对该问题的最新观点。&lt;/li&gt;&#xA;&lt;li&gt;了解到z在该领域已通过使用方法B成功攻克。尝试调整方法B来解决y。&lt;/li&gt;&#xA;&lt;li&gt;经过大量努力，开发出调整后的方法B&amp;rsquo;来解决y。&lt;/li&gt;&#xA;&lt;li&gt;用B&amp;rsquo;替换A重复上述步骤1-12（当然，结果可能与上述示例情节略有不同）。继续这样做几年，直到所有模型特殊情况都可以通过某种方法解决。&lt;/li&gt;&#xA;&lt;li&gt;最终，拥有一个方法阵列，可以对X给出部分结果，每种方法都有其优缺点。对于在何种情况下给定方法可能产生非平凡结果，获得了相当多的直觉。&lt;/li&gt;&#xA;&lt;li&gt;开始将这些方法结合起来，简化这些方法的执行，定位新的模型问题，和/或找到一个统一且澄清的框架，在该框架中许多先前的方法、见解、结果等成为特例。&lt;/li&gt;&#xA;&lt;li&gt;最终，意识到存在一个方法族A^&lt;em&gt;（其中A是最早被发现的），粗略地说，可以处理所有出现性质P^&lt;/em&gt;（性质P的现代推广）的情况。还有一个相当不同的方法族B^*，可以处理所有出现Q^*的情况。&lt;/li&gt;&#xA;&lt;li&gt;从之前关于这个问题的所有工作中，所有已知的模型例子都已知满足P^&lt;em&gt;或Q^&lt;/em&gt;。提出猜想C：问题X的所有情况都满足P^&lt;em&gt;或Q^&lt;/em&gt;。&lt;/li&gt;&#xA;&lt;li&gt;验证猜想C实际上蕴含该问题。这是一个重大的简化！&lt;/li&gt;&#xA;&lt;li&gt;重复步骤1-18，但将问题X替换为猜想C。（同样，情节可能与上述不同。）这个过程本身可能会迭代几次。&lt;/li&gt;&#xA;&lt;li&gt;最后，问题被提炼到最纯粹的本质：一个关键猜想K，它（至少在道德上）为已知方法A^*、B^*等提供了决定性输入，这些方法将解决猜想C从而解决问题X。&lt;/li&gt;&#xA;&lt;li&gt;一个突破：引入新方法Z来解决K的一个重要特殊情况。&lt;/li&gt;&#xA;&lt;li&gt;终局：利用所有直觉、经验和过去结果的全部力量，迅速发展和扩展方法Z，完全解决K，然后C，最后X。&lt;/li&gt;&#xA;&lt;li&gt;为解决主要问题X而开发的技术被调整用于解决该领域中其他相关问题。但现在出现了一个X的自然后继问题X&amp;rsquo;，它刚好超出了新开发工具的范围……然后我们回到第1步。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;另请参阅&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/learn-the-limitations-of-your-tools.zh/&#34;&gt;了解你的工具的局限性&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/ask-yourself-dumb-questions-and-answer-them.zh/&#34;&gt;问自己愚蠢的问题&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/think-ahead.zh/&#34;&gt;提前思考&lt;/a&gt;&amp;ldquo;和&amp;rdquo;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/use-the-wastebasket.zh/&#34;&gt;使用废纸篓&lt;/a&gt;&amp;quot;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>学习和重新学习你的领域</title>
      <link>https://linguage.github.io/terencetao/career-advice/zh/learn-and-relearn-your-field.zh/</link>
      <pubDate>Sun, 06 May 2007 18:53:32 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/career-advice/zh/learn-and-relearn-your-field.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/orig/learn-and-relearn-your-field/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/career-advice/learn-and-relearn-your-field/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;学习和重新学习你的领域&#34;&gt;学习和重新学习你的领域&lt;/h1&gt;&#xA;&lt;p&gt;即使是相当优秀的学生，当他们得到问题的解并整洁地写下论证后，也会合上书本去寻找其他东西。这样做，他们就错过了工作中一个重要且富有启发性的阶段。……一位好老师应该理解并向学生强调这样的观点：没有任何问题是完全穷尽的。&lt;/p&gt;&#xA;&lt;p&gt;教师首要的职责之一，就是不要给学生留下数学问题之间联系甚少、与其他事物毫无联系的印象。当我们回顾问题的解时，就有了一个自然的机会来研究问题的联系。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;乔治·波利亚，《如何解题》&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在这个行业中，学习永远不会真正停止，即使是在你选择的专业领域也是如此；例如，在我完成该主题的论文十多年后，我仍然在学习关于基本调和分析的令人惊讶的东西。&lt;/p&gt;&#xA;&lt;p&gt;仅仅因为你知道了基本引理X的陈述和证明，你不应该认为这个引理是理所当然的；相反，你应该深入挖掘，直到你&lt;strong&gt;真正&lt;/strong&gt;理解这个引理的全部内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;你能找到替代证明吗？&lt;/li&gt;&#xA;&lt;li&gt;如果你知道该引理的两个证明，你是否知道这些证明在多大程度上是等价的？它们是否以不同的方式推广？这些证明有什么共同的主题？这两个证明的其他相对优势和劣势是什么？&lt;/li&gt;&#xA;&lt;li&gt;你知道每个假设为什么是必要的吗？&lt;/li&gt;&#xA;&lt;li&gt;已知/猜想/启发式的推广有哪些？&lt;/li&gt;&#xA;&lt;li&gt;是否有更弱更简单的版本可以满足某些应用？&lt;/li&gt;&#xA;&lt;li&gt;有哪些模型示例展示了该引理的作用？&lt;/li&gt;&#xA;&lt;li&gt;什么时候使用该引理是个好主意，什么时候不是？&lt;/li&gt;&#xA;&lt;li&gt;它能解决什么样的问题，什么样的问题超出了它的能力范围？&lt;/li&gt;&#xA;&lt;li&gt;该引理在数学的其他领域是否有类似物？&lt;/li&gt;&#xA;&lt;li&gt;该引理是否适合更广泛的范式或计划？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;对你的领域进行讲座，或&lt;strong&gt;撰写讲义或其他说明性材料&lt;/strong&gt;是特别有用的，即使只是供个人使用。你最终将能够使用高效的心理简写来内化甚至非常困难的结果；这不仅让你能够轻松地使用这些结果，并&lt;strong&gt;提高你在该领域的能力&lt;/strong&gt;，而且还释放了心理空间来学习更多材料。&lt;/p&gt;&#xA;&lt;p&gt;了解自己领域的另一个有用方法是，选取该领域的一篇关键论文，并对该论文进行引文搜索（即搜索引用该关键论文的其他论文）。如今有许多工具可以进行引文搜索；例如，&lt;a href=&#34;https://mathscinet.ams.org/mathscinet&#34;&gt;MathSciNet&lt;/a&gt; 提供此功能，甚至通用网络搜索引擎通常也能给出以前可能不知道的有用&amp;quot;命中&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;另见&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/ask-yourself-dumb-questions-and-answer-them.zh/&#34;&gt;问自己愚蠢的问题&lt;/a&gt;&amp;quot;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>不要基于光鲜或名声做出职业决定</title>
      <link>https://linguage.github.io/terencetao/career-advice/zh/dont-base-career-decisions-on-glamour-or-fame.zh/</link>
      <pubDate>Sun, 06 May 2007 18:52:58 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/career-advice/zh/dont-base-career-decisions-on-glamour-or-fame.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/orig/dont-base-career-decisions-on-glamour-or-fame/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/career-advice/dont-base-career-decisions-on-glamour-or-fame/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;不要基于光鲜或名声做出职业决定&#34;&gt;不要基于光鲜或名声做出职业决定&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;行名失己, 非士也 [追求名声而丧失自我的人，不是真正的学者]。&#xA;(&#xA;庄子 [Zhuangzi]&#xA;, &amp;quot;&#xA;大宗师 [The Grandmaster]&amp;quot;&#xA;)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;仅仅因为某个领域或部门看起来很光鲜就进入它，这不是一个好主意；同样，仅仅因为某个问题（或数学家）最著名就专注于它——老实说，数学总体上并没有那么多名声或光鲜，不值得把这些作为你的主要目标去追逐。任何光鲜的事物都可能是高度竞争的，只有那些拥有最扎实背景（特别是对该领域不那么光鲜的方面有丰富经验）的人才可能有所成就。&lt;/p&gt;&#xA;&lt;p&gt;一个著名的未解决问题几乎不可能&lt;em&gt;凭空&lt;/em&gt;解决。一个人必须首先花费大量时间和精力研究更简单（且远不那么著名）的模型问题，获取：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;技术&lt;/li&gt;&#xA;&lt;li&gt;直觉&lt;/li&gt;&#xA;&lt;li&gt;部分结果&lt;/li&gt;&#xA;&lt;li&gt;背景知识&lt;/li&gt;&#xA;&lt;li&gt;文献&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这才能在对该领域任何真正重大问题有任何实际解决机会之前，形成富有成效的方法并排除无效的方法。（偶尔，这些问题中会有一个相对容易地解决，仅仅是因为拥有合适工具集的合适人群之前没有机会研究这个问题，但对于那些被深入研究的问题——特别是那些已经有大量&amp;quot;不可行&amp;quot;定理和反例排除了整个攻击策略的问题——通常情况并非如此。）&lt;/p&gt;&#xA;&lt;p&gt;出于类似的原因，永远不要将奖项或认可作为追求数学的主要理由；从长远来看，更好的策略是仅仅产出&lt;strong&gt;好的数学&lt;/strong&gt;并为你的领域做出贡献，奖项和认可自然会随之而来（当它们最终出现时，也是应得的）。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，研究一个问题或数学家&lt;strong&gt;为什么&lt;/strong&gt;出名，或者一个机构或部门&lt;strong&gt;如何&lt;/strong&gt;获得其声望，可能是值得的；这些具体信息可以帮助你决定这个问题、数学家或部门是否会引起你的兴趣。另请参阅&amp;quot;&lt;a href=&#34;https://linguage.github.io/terencetao/career-advice/zh/which-universities-should-one-apply-to.zh/&#34;&gt;我应该申请哪些大学？&lt;/a&gt;&amp;quot;&lt;/p&gt;</description>
    </item>
    <item>
      <title>创业想法</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/ideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/ideas/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/ideas/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;创业想法&#34;&gt;创业想法&lt;/h1&gt;&#xA;&lt;p&gt;2005年10月&lt;/p&gt;&#xA;&lt;p&gt;Y Combinator的创始合伙人之一保罗·格雷厄姆撰写的关于如何为创业公司产生好想法的指南。&lt;/p&gt;&#xA;&lt;p&gt;想要创业？获得Y Combinator的投资。&lt;/p&gt;&#xA;&lt;p&gt;对于想要创办创业公司的人来说，最重要的问题之一是如何获得想法。Y Combinator申请表格中问的第一个问题是&amp;quot;你在做什么？&amp;ldquo;这实际上是问：你有什么想法？&lt;/p&gt;&#xA;&lt;p&gt;令人惊讶的是，申请表中的问题不是&amp;quot;你有什么想法？&amp;ldquo;而是&amp;quot;你在做什么？&amp;ldquo;这是因为我们意识到，大多数申请者实际上并没有想法。他们只是想创办创业公司。这就像想当作家但没有想到要写什么。&lt;/p&gt;&#xA;&lt;p&gt;但是没有想法，你如何创办创业公司？你可能会认为这是不可能的，但事实并非如此。我们资助的大多数初创公司在申请时并没有完全成形的想法。他们只是有一些想法，这些想法在Y Combinator的三个月中逐渐成形。&lt;/p&gt;&#xA;&lt;p&gt;这怎么可能？因为好想法不像大多数人认为的那样来自灵光一现。好想法来自于对问题的观察和解决。&lt;/p&gt;&#xA;&lt;h2 id=&#34;如何获得创业想法&#34;&gt;如何获得创业想法&lt;/h2&gt;&#xA;&lt;p&gt;创业想法不是凭空产生的。它们来自于解决你自己的问题。最好的创业想法是解决你自己遇到的问题。&lt;/p&gt;&#xA;&lt;p&gt;如果你和其他程序员一样，你每天都会遇到一些烦人的问题。大多数时候，你只是容忍它们。但是如果你开始把它们记下来，你会发现它们实际上是创业想法的金矿。&lt;/p&gt;&#xA;&lt;p&gt;当你解决自己的问题时，你就有了优势。你确切地知道问题是什么，因为你亲身经历过。你也知道解决方案是否有效，因为你就是用户。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创业想法的特征&#34;&gt;创业想法的特征&lt;/h2&gt;&#xA;&lt;p&gt;好的创业想法通常具有以下特征：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;它们解决了一个真实的问题&lt;/strong&gt;：不是虚构的问题，而是人们真正遇到的问题。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;它们看起来不像好主意&lt;/strong&gt;：最好的创业想法通常看起来很愚蠢。如果它们看起来像好主意，可能已经有人在做它们了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;它们是利基市场&lt;/strong&gt;：不要试图为所有人构建产品。从一个小的、特定的市场开始。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;它们可以从小开始&lt;/strong&gt;：你不需要在第一天就构建一个庞大的系统。从最小可行产品开始。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;它们具有可扩展性&lt;/strong&gt;：虽然它们从小开始，但它们有潜力变得很大。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;何时寻找想法&#34;&gt;何时寻找想法&lt;/h2&gt;&#xA;&lt;p&gt;很多人犯的错误是试图坐在那里产生想法。这很少有效。相反，你应该过你的生活，但保持敏锐的观察力。&lt;/p&gt;&#xA;&lt;p&gt;当你注意到有什么事情让你感到沮丧或烦恼时，把它记下来。当你发现自己在思考&amp;quot;应该有更好的方法来做这件事&amp;quot;时，把它写下来。&lt;/p&gt;&#xA;&lt;p&gt;想法往往在你忙于其他事情时出现。保持一个想法列表，定期回顾它。&lt;/p&gt;&#xA;&lt;h2 id=&#34;如何测试想法&#34;&gt;如何测试想法&lt;/h2&gt;&#xA;&lt;p&gt;一旦你有了一个想法，如何测试它是否好？以下是一些方法：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;构建它&lt;/strong&gt;：最好的测试是实际构建它并看看人们是否使用它。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;谈论它&lt;/strong&gt;：与他人讨论你的想法。但不要过度依赖他们的意见。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;研究竞争对手&lt;/strong&gt;：看看是否有人在解决类似的问题。他们的方法如何？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;问自己一些关键问题&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个问题有多普遍？&lt;/li&gt;&#xA;&lt;li&gt;人们愿意为解决方案付钱吗？&lt;/li&gt;&#xA;&lt;li&gt;市场有多大？&lt;/li&gt;&#xA;&lt;li&gt;你能否在竞争对手之前进入市场？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;常见错误&#34;&gt;常见错误&lt;/h2&gt;&#xA;&lt;p&gt;在寻找创业想法时，人们经常犯以下错误：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;试图追随潮流&lt;/strong&gt;：不要试图追逐最新的热潮。解决真实的问题。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;构建你自己的工具&lt;/strong&gt;：不要构建只有你想使用的东西。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;忽视小问题&lt;/strong&gt;：小问题可能看起来不重要，但它们往往是最好的起点。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;过早放弃&lt;/strong&gt;：好想法需要时间来发展。不要期望立即成功。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;&#xA;&lt;p&gt;创业想法不是凭空产生的。它们来自于解决真实的问题。通过保持敏锐的观察力并解决你自己的问题，你可以发现伟大的创业机会。&lt;/p&gt;&#xA;&lt;p&gt;记住，最好的想法往往看起来很愚蠢。如果它们看起来像好主意，可能已经有人在做它们了。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;注：这是Paul Graham关于创业想法的经典文章的中文翻译。原文发布于2005年10月，至今仍然是创业者的重要指南。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>创造新事物的六个原则</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/newthings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/newthings/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/newthings/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;创造新事物的六个原则&#34;&gt;创造新事物的六个原则&lt;/h1&gt;&#xA;&lt;p&gt;2008年2月&lt;/p&gt;&#xA;&lt;p&gt;Arc 发布引发的激烈反应有一个意想不到的后果：它让我意识到我有一种设计哲学。那些更有条理的批评者主要抱怨的是 Arc 看起来太脆弱了。经过多年的工作，我所能展示的只有几千行宏？为什么我没有从事更实质性的问题？&lt;/p&gt;&#xA;&lt;p&gt;当我思考这些评论时，突然意识到它们看起来多么熟悉。这正是人们一开始对 Viaweb、Y Combinator 和我大多数文章所说的那种话。&lt;/p&gt;&#xA;&lt;p&gt;当我们推出 Viaweb 时，在风险投资家和电子商务&amp;quot;专家&amp;quot;看来这似乎很可笑。我们只是公寓里的几个人，这在1995年并不像现在那样酷。而我们所构建的东西，在他们看来，甚至不是软件。对他们来说，软件等于大型的 Windows 应用程序。由于 Viaweb 是他们见到的第一个基于网络的应用程序，它似乎仅仅是一个网站。当他们发现 Viaweb 不处理信用卡交易时（我们第一年确实没有处理），他们更加轻视。交易处理在他们看来就是电子商务的全部。这听起来严肃且困难。&lt;/p&gt;&#xA;&lt;p&gt;然而，神秘的是，Viaweb 最终碾压了所有竞争对手。&lt;/p&gt;&#xA;&lt;p&gt;对 Y Combinator 的最初反应几乎完全相同。它看起来轻得可笑。创业融资意味着 A 轮融资：在数月的严肃、商业化的会议后，给予少数由有资历的人创立的初创公司数百万美元，条件在一英尺厚的文件中描述。Y Combinator 似乎微不足道。现在说 Y Combinator 是否会像 Viaweb 那样成功还为时过早，但从模仿的数量来看，很多人似乎认为我们抓住了重点。&lt;/p&gt;&#xA;&lt;p&gt;我无法衡量我的文章是否成功，除了页面浏览量，但对它们的反应至少与我开始时不同。起初，Slashdot 上的巨魔的默认反应是（翻译成有条理的话）：&amp;ldquo;这家伙是谁，他有什么权威写这些话题？我还没读过这篇文章，但这么短、以如此非正式风格写的东西，在相关学科的专家已经写了很多厚书的情况下，不可能对某个话题有任何有用的见解。&amp;ldquo;现在在新一代网站上有新一代的巨魔，但他们至少已经开始省略最初的&amp;quot;这家伙是谁？&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;现在人们对 Arc 说着与一开始对 Viaweb、Y Combinator 和我大多数文章相同的话。为什么会有这种模式？答案，我意识到，是我对这四者的操作方式都是相同的。&lt;/p&gt;&#xA;&lt;p&gt;这就是：我喜欢找到（a）简单的解决方案（b）来解决被忽视的问题（c）这些问题确实需要解决，并且（d）尽可能非正式地交付它们，（e）从一个非常粗糙的第1版开始，然后（f）快速迭代。&lt;/p&gt;&#xA;&lt;p&gt;当我第一次明确列出这些原则时，我注意到一些引人注目的事情：这几乎是产生轻蔑初始反应的配方。虽然简单的解决方案更好，但它们看起来不像复杂的解决方案那样令人印象深刻。被忽视的问题按定义就是大多数人认为不重要的问题。非正式地交付解决方案意味着人们不能通过呈现方式来判断某些东西，而必须实际理解它，这需要更多工作。而从一个粗糙的第1版开始意味着你的初始努力总是小而不完整的。&lt;/p&gt;&#xA;&lt;p&gt;我当然注意到，人们似乎从来没有在第一时间掌握新想法。我以为这只是因为大多数人都很愚蠢。现在我看到了更多的原因。像一个逆向投资基金，遵循这种策略的人几乎总是在做普通人看来错误的事情。&lt;/p&gt;&#xA;&lt;p&gt;与逆向投资策略一样，这正是重点。这种技术是成功的（长期来看），因为它给了你所有其他人为了显得合法而放弃的优势。如果你处理被忽视的问题，你更有可能发现新事物，因为你的竞争更少。如果你非正式地交付解决方案，你（a）节省了所有本要花费让它们看起来令人印象深刻的努力，（b）避免了欺骗自己以及观众的危险。如果你发布一个粗糙的第1版然后迭代，你的解决方案可以从自然的想象力中受益，正如费曼指出的，这比你自己的更强大。&lt;/p&gt;&#xA;&lt;p&gt;以 Viaweb 为例，简单的解决方案是让软件在服务器上运行。被忽视的问题是自动生成网站；1995年，在线商店都是人工设计师手工制作的，但我们知道这无法扩展。真正重要的是图形设计，而不是交易处理。非正式的交付机制是我，穿着牛仔裤和T恤出现在某个零售商的办公室。而粗糙的第1版，如果我没记错的话，我们发布时不到一万行代码。&lt;/p&gt;&#xA;&lt;p&gt;这种技术的力量超出了初创公司、编程语言和文章的范围。它可能扩展到任何类型的创造性工作。当然它可以用于绘画：这正是塞尚和克利所做的。&lt;/p&gt;&#xA;&lt;p&gt;在 Y Combinator，我们把钱押在上面，从这个意义上说，我们鼓励我们资助的初创公司以这种方式工作。好想法总是在你的眼皮底下。所以要寻找其他人忽视的简单事物——人们后来会声称&amp;quot;显而易见&amp;quot;的事物——特别是当他们被过时的惯例误导，或者试图做表面上令人印象深刻的事情时。弄清楚真正的问题是什么，并确保你解决了这个问题。不要担心试图看起来像公司；产品才是长期获胜的关键。尽可能快地发布，这样你就开始从用户那里学习你应该制作什么。&lt;/p&gt;&#xA;&lt;p&gt;Reddit 是这种方法的一个经典例子。当 Reddit 首次发布时，似乎没什么内容。对那些图形设计不成熟的人来说，它故意极简的设计似乎根本不像设计。但 Reddit 解决了真正的问题，即告诉人们什么是新的，其他方面不要干扰。结果它变得非常成功。现在传统观念赶上了它，这似乎是显而易见的。人们看着 Reddit 认为创始人是幸运的。像所有这样的事情，它比看起来更难。Reddit 们如此用力地逆流而上以至于扭转了它；现在看起来他们只是在顺流而下。&lt;/p&gt;&#xA;&lt;p&gt;所以当你看着像 Reddit 这样的东西并想&amp;quot;我希望我能想到这样的想法&amp;quot;时，记住：这样的想法都在你周围。但你忽略了它们，因为它们看起来是错误的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何获得创业想法</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/startupideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/startupideas/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/startupideas/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;如何获得创业想法&#34;&gt;如何获得创业想法&lt;/h1&gt;&#xA;&lt;p&gt;2012年11月&lt;/p&gt;&#xA;&lt;p&gt;获得创业想法的方法不是试图思考创业想法。而是寻找问题，最好是你自己遇到的问题。&lt;/p&gt;&#xA;&lt;p&gt;最好的创业想法往往有三个共同点：它们是创始人自己想要的东西，他们自己可以构建的东西，而且很少有人意识到值得做。微软、苹果、雅虎、谷歌和脸书都是以这种方式开始的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;&#xA;&lt;p&gt;为什么解决你遇到的问题如此重要？除其他原因外，它确保问题确实存在。说你应该只解决存在的问题，这听起来很明显。然而，迄今为止创业公司最常见的错误是解决没有人存在的问题。&lt;/p&gt;&#xA;&lt;p&gt;我自己也犯了这样的错误。1995年，我创办了一家将艺术画廊在线的公司。但画廊不想上线。这不是艺术业务的运作方式。那我为什么花了6个月时间在这个愚蠢的想法上？因为我没有关注用户。我发明了一个与现实不符的世界模型，并在此基础上工作。直到我试图说服用户为我们构建的东西付费时，我才注意到我的模型是错误的。即使那时，我也花了令人尴尬的长时间才明白。我对我世界模型很执着，而且我在软件上花了很多时间。他们必须想要它！&lt;/p&gt;&#xA;&lt;p&gt;为什么这么多创始人构建没有人想要的东西？因为他们从试图思考创业想法开始。这种方法双重危险：它不仅产生很少的好想法；它产生听起来足够合理以至于骗你为之工作的坏想法。&lt;/p&gt;&#xA;&lt;p&gt;在YC，我们称这些为&amp;quot;编造的&amp;quot;或&amp;quot;情景喜剧&amp;quot;创业想法。想象一个电视节目中的角色开始创业。编剧必须为它发明一些要做的事情。但想出好的创业想法很难。这不是你可以随随便便做的事情。所以（除非他们极其幸运）编剧会想出一个听起来合理但实际上很坏的想法。&lt;/p&gt;&#xA;&lt;p&gt;例如，一个宠物主人社交网络。听起来并不明显错误。数百万人有宠物。通常他们非常关心宠物并花很多钱在他们身上。当然，这些人中会有许多人喜欢一个可以与其他宠物主人交谈的网站。也许不是所有人，但如果只有2%或3%是常客，你可能拥有数百万用户。你可以为他们提供定向广告，也许为高级功能收费。[1]&lt;/p&gt;&#xA;&lt;p&gt;这种想法的危险在于，当你向你养宠物的朋友征求意见时，他们不会说&amp;quot;我永远不会用这个。&amp;ldquo;他们说&amp;quot;是的，也许我能看到使用类似的东西。&amp;ldquo;即使当创业公司推出时，它对很多人来说听起来仍然合理。他们自己不想使用它，至少现在不想，但他们可以想象其他人想要它。将这种反应汇总到整个人口，你就拥有零用户。[2]&lt;/p&gt;&#xA;&lt;h2 id=&#34;井&#34;&gt;井&lt;/h2&gt;&#xA;&lt;p&gt;当创业公司推出时，必须至少有一些用户真正需要他们正在制造的东西——不仅仅是那些可以想象有一天会使用它的人，而是迫切需要它的人。通常这个初始用户群体很小，原因很简单：如果有大量人们迫切需要并且可以用创业公司通常投入版本一的努力量构建的东西，它可能已经存在了。这意味着你必须在一个维度上妥协：你要么构建大量人想要一点的东西，要么构建少量人想要很多的东西。选择后者。并非所有这种类型的想法都是好的创业想法，但几乎所有好的创业想法都是这种类型。&lt;/p&gt;&#xA;&lt;p&gt;想象一个图表，其x轴代表所有可能想要你正在制造的东西的人，y轴代表他们想要它的程度。如果你反转y轴的比例，你可以将公司想象成坑洞。谷歌是一个巨大的陨石坑：数亿人使用它，而且他们非常需要它。一个刚刚起步的创业公司不能期望挖掘出那么大的体积。所以你对你开始时的坑洞形状有两种选择。你可以挖一个宽阔但浅的洞，或者一个狭窄而深的洞，像井一样。&lt;/p&gt;&#xA;&lt;p&gt;编造的创业想法通常是第一种类型。许多人对宠物主人社交网络有轻微兴趣。&lt;/p&gt;&#xA;&lt;p&gt;几乎所有好的创业想法都是第二种类型。微软在制作Altair Basic时是一口井。只有几千个Altair所有者，但没有这个软件他们在用机器语言编程。三十年后，脸书具有相同的形状。他们的第一个网站专门针对哈佛学生，只有几千人，但那几千个用户非常想要它。&lt;/p&gt;&#xA;&lt;p&gt;当你有创业想法时，问自己：谁现在想要这个？谁如此想要它以至于即使是一个他们从未听说过的两人创业公司制造的糟糕版本一，他们也会使用？如果你不能回答这个问题，这个想法可能很坏。[3]&lt;/p&gt;&#xA;&lt;p&gt;你本身并不需要井的狭窄性。你需要的是深度；你在优化深度（和速度）时获得狭窄性作为副产品但你几乎总是会得到它。在实践中，深度和狭窄性之间的联系如此强烈，以至于当你知道一个想法会对特定群体或类型的用户有强烈吸引力时，这是一个好迹象。&lt;/p&gt;&#xA;&lt;p&gt;但是，虽然形状像井的需求几乎是好创业想法的必要条件，但它不是充分条件。如果马克·扎克伯格构建的东西只能吸引哈佛学生，那不会是一个好创业想法。脸书是一个好想法，因为它从一个有快速出路的小市场开始。大学足够相似，如果你构建一个在哈佛有效的脸书，它将在任何大学都有效。所以你迅速在所有大学中传播。一旦你拥有所有大学生，你只需让其他人加入就能得到其他人。&lt;/p&gt;&#xA;&lt;p&gt;微软也是如此：Altair的Basic；其他机器的Basic；Basic之外的其他语言；操作系统；应用程序；IPO。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自我&#34;&gt;自我&lt;/h2&gt;&#xA;&lt;p&gt;你如何判断一个想法是否有出路？你如何判断某东西是巨型公司的萌芽，还是只是一个利基产品？通常你无法判断。Airbnb的创始人起初没有意识到他们正在挖掘的市场有多大。最初他们有一个更狭窄的想法。他们打算让主人在会议期间出租他们地板上的空间。他们没有预见到这个想法的扩展；它是逐渐强加给他们的。他们起初只知道他们发现了重要东西。这可能和比尔·盖茨或马克·扎克伯格起初知道的一样多。&lt;/p&gt;&#xA;&lt;p&gt;偶尔，从最初利基市场有出路从一开始就很明显。有时我可以看到一个不明显的出路；这是我们在YC的专长之一。但无论你有多少经验，这种做法的效果都是有限的。了解关于最初想法出路的最重要的元事实是这些很难看到。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你无法预测一个想法是否有出路，你如何在想法之间选择？事实令人失望但有趣：如果你是合适类型的人，你有合适的直觉。如果你处于一个快速变化领域的领先边缘，当你有直觉认为某事值得做时，你更可能是对的。&lt;/p&gt;&#xA;&lt;p&gt;在《禅与摩托车维修艺术》中，罗伯特·波西格说：你想知道如何画一幅完美的画吗？很容易。让自己变得完美，然后自然地绘画。我从高中读到这篇文章后就一直在思考它。我不确定他的建议对绘画具体有多大用处，但它很适合这种情况。从经验上看，拥有好创业想法的方法是成为拥有它们的那种人。&lt;/p&gt;&#xA;&lt;p&gt;处于一个领域的领先边缘并不意味着你必须成为推动它前进的人之一。你也可以作为用户处于领先边缘。Facebook对马克·扎克伯格来说似乎是个好主意，并不是因为他是个程序员，而是因为他如此频繁地使用电脑。如果你在2004年问大多数40岁的人是否愿意在互联网上半公开地发布他们的生活，他们对这个想法会感到恐惧。但马克已经生活在线；对他来说这似乎很自然。&lt;/p&gt;&#xA;&lt;p&gt;保罗·布赫海特说，处于快速变化领域领先边缘的人&amp;quot;生活在未来中&amp;rdquo;。将其与波西格结合，你得到：生活在未来中，然后构建缺失的东西。这描述了许多甚至大多数最大创业公司的起步方式。苹果、雅虎、谷歌和脸书最初甚至不应该成为公司。它们从创始人构建的东西中成长出来，因为世界上似乎有差距。&lt;/p&gt;&#xA;&lt;p&gt;如果你看看成功创始人如何获得他们的想法，通常是一些外部刺激击中准备好的心灵的结果。比尔·盖茨和保罗·艾伦听到Altair并想&amp;quot;我敢打赌我们可以为它编写一个Basic解释器。&amp;ldquo;德鲁·休斯顿意识到他忘了USB记忆棒并想&amp;quot;我真的需要让我的文件在线生活。&amp;ldquo;很多人听说过Altair。很多人忘了USB记忆棒。这些刺激导致那些创始人创办公司的原因是他们的经验使他们准备好注意到它们代表的机会。&lt;/p&gt;&#xA;&lt;p&gt;你想用创业想法来使用的动词不是&amp;quot;想出&amp;quot;而是&amp;quot;注意到&amp;rdquo;。在YC，我们称那些从创始人自己经历中自然成长出来的想法为&amp;quot;有机&amp;quot;创业想法。最成功的创业公司几乎都是以这种方式开始的。&lt;/p&gt;&#xA;&lt;p&gt;这可能不是你想听到的。你可能期待获得创业想法的秘诀，而我却告诉你关键是拥有以正确方式准备的心灵。但尽管令人失望，这是事实。而且这是一种秘诀，只是在最坏情况下需要一年而不是一个周末。&lt;/p&gt;&#xA;&lt;p&gt;如果你不处于某个快速变化领域的领先边缘，你可以达到那个位置。例如，任何相当聪明的人都可能在一年的时间里达到编程的边缘（例如构建移动应用程序）。由于成功的创业公司将消耗你至少3-5年的生命，一年的准备将是合理的投资。特别是如果你也在寻找联合创始人。[4]&lt;/p&gt;&#xA;&lt;p&gt;你不必学习编程才能处于快速变化领域的领先边缘。其他领域变化很快。但虽然学习黑客技术不是必要的，它在可预见的未来是充分的。正如马克·安德森所说，软件正在吞噬世界，而且这个趋势还有几十年的运行时间。&lt;/p&gt;&#xA;&lt;p&gt;知道如何黑客技术也意味着当你有想法时，你能够实现它们。这不是绝对必要的（杰夫·贝佐斯不能）但这是一个优势。当你考虑像将大学脸书在线这样的想法时，如果你不仅能想&amp;quot;那是个有趣的想法&amp;rdquo;，而是能想&amp;quot;那是个有趣的想法。我今晚会尝试构建一个初始版本&amp;rdquo;，这是一个很大的优势。当你既是程序员又是目标用户时更好，因为那样生成新版本并在用户上测试它们的循环可以在一个头脑内发生。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;&#xA;&lt;p&gt;一旦你在某些方面生活在未来中，注意创业想法的方法就是寻找似乎缺失的东西。如果你真正处于快速变化领域的领先边缘，将会有些明显缺失的东西。不会明显的是它们是创业想法。所以如果你想找到创业想法，不要只打开&amp;quot;什么缺失？&amp;ldquo;的过滤器。还要关闭每个其他过滤器，特别是&amp;quot;这能成为大公司吗？&amp;ldquo;以后有足够的时间应用那个测试。但如果你一开始就在想那个，它可能不仅过滤掉许多好想法，还会导致你专注于坏想法。&lt;/p&gt;&#xA;&lt;p&gt;大多数缺失的东西需要一些时间才能看到。你几乎必须欺骗自己看到周围的想法。&lt;/p&gt;&#xA;&lt;p&gt;但你知道想法就在那里。这不是那种可能没有答案的问题。技术进步恰好在这一刻停止的可能性极小。你可以肯定人们将在未来几年构建让你思考&amp;quot;我在x之前做什么？&amp;ldquo;的东西。&lt;/p&gt;&#xA;&lt;p&gt;当这些问题得到解决时，它们在回想起来可能会显得非常明显。你需要做的是关闭通常阻止你看到它们的过滤器。最强大的只是理所当然地接受世界的当前状态。即使是我们中最激进开明的人大多数都这样做。如果你停下来质疑一切，你无法从床上走到前门。&lt;/p&gt;&#xA;&lt;p&gt;但如果你在寻找创业想法，你可以牺牲一些理所当然地接受现状的效率，并开始质疑事物。为什么你的收件箱溢出？因为你收到很多邮件，还是因为很难将邮件移出收件箱？为什么你收到这么多邮件？人们通过给你发邮件试图解决什么问题？有没有更好的方法来解决它们？为什么很难将邮件移出收件箱？为什么你在读过邮件后还保留它们？收件箱是那个的最佳工具吗？&lt;/p&gt;&#xA;&lt;p&gt;特别注意那些让你烦恼的事情。理所当然地接受现状的优势不仅是它使生活（局部上）更有效率，而且它使生活更可容忍。如果你知道我们将在未来50年得到但尚未拥有的所有东西，你会发现现在的生活相当受限，就像现在的人如果被送回50年前的时间机器中一样。当某事让你烦恼时，可能因为你生活在未来中。&lt;/p&gt;&#xA;&lt;p&gt;当你找到合适类型的问题时，你应该能够将其描述为明显的，至少对你来说。当我们开始Viaweb时，所有在线商店都是手工构建的，由网页设计师制作单个HTML页面。我们作为程序员很明显这些网站必须由软件生成。[5]&lt;/p&gt;&#xA;&lt;p&gt;这意味着，奇怪的是，想出创业想法是一个看到明显事物的问题。这表明这个过程多么奇怪：你试图看到明显的东西，然而你却没看到。&lt;/p&gt;&#xA;&lt;p&gt;由于你需要在这里做的是放松你自己的心灵，最好不要对问题进行太多的正面直接攻击——即坐下来试图想出想法。最好的计划可能只是保持一个后台进程运行，寻找似乎缺失的东西。致力于难题，主要由好奇心驱动，但有第二个自我在你肩上看着，注意差距和异常。[6]&lt;/p&gt;&#xA;&lt;p&gt;给自己一些时间。你对你将自己变成准备好的心灵的速度有很多控制，但对刺激击中它时激发想法的控制较少。如果比尔·盖茨和保罗·艾伦限制自己一个月内想出创业想法，如果他们选择Altair出现前的一个月怎么办？他们可能已经在不太有希望的想法上工作了。德鲁·休斯顿在Dropbox之前确实在一个不太有希望的想法上工作：一个SAT备考创业公司。但Dropbox是一个好得多的想法，无论是在绝对意义上，还是作为与他技能的匹配。[7]&lt;/p&gt;&#xA;&lt;p&gt;欺骗自己注意到想法的一个好方法是从事看起来会很酷的项目。如果你这样做，你自然会倾向于构建缺失的东西。构建已经存在的东西似乎不那么有趣。&lt;/p&gt;&#xA;&lt;p&gt;正如试图思考创业想法往往产生坏想法一样，从事可能被 dismiss为&amp;quot;玩具&amp;quot;的事情往往产生好想法。当某物被描述为玩具时，意味着它拥有一个想法需要的一切，除了重要性。它很酷；用户喜欢它；它只是不重要。但如果你生活在未来中，你构建了用户喜欢的酷东西，它可能比外界认为的更重要。当苹果和微软开始工作时，微计算机似乎像玩具。我足够老，记得那个时代；拥有自己微计算机的人的通常术语是&amp;quot;爱好者&amp;rdquo;。BackRub似乎是个不起眼的项目。脸书只是本科生相互 stalk 的方式。&lt;/p&gt;&#xA;&lt;p&gt;在YC，当我们遇到从事我们认为论坛上的万事通可能会 dismiss为玩具的事情的创业公司时，我们很兴奋。对我们来说，那是一个想法好的积极证据。&lt;/p&gt;&#xA;&lt;p&gt;如果你能采取长远观点（而且可以说你不能负担不起不采取），你可以将&amp;quot;生活在未来中并构建缺失的东西&amp;quot;变成更好的东西：生活在未来中并构建看起来有趣的东西。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学校&#34;&gt;学校&lt;/h2&gt;&#xA;&lt;p&gt;这就是我建议大学生做的事情，而不是试图学习&amp;quot;企业家精神&amp;rdquo;。&amp;ldquo;企业家精神&amp;quot;是你通过做它学得最好的东西。最成功创始人的例子表明了这一点。你在大学应该花时间做的是将自己 ratchet 到未来中。大学是这样做的无与伦比的机会。牺牲解决创业公司难题的机会——成为能够拥有有机创业想法的那种人——而去学习容易的部分，多么浪费。特别是因为你甚至不会真正学到它，就像你在课堂上不会学到关于性一样。你学到的只是事物的词汇。&lt;/p&gt;&#xA;&lt;p&gt;领域的冲突是想法的一个特别丰富的来源。如果你对编程了解很多，并开始学习一些其他领域，你可能会看到软件可以解决的问题。事实上，你在另一个领域找到好问题的可能性是双倍的：(a) 那个领域的居民不像软件人那样可能已经用软件解决了他们的问题，(b) 由于你完全无知地进入新领域，你甚至不知道现状是什么以至于理所当然。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你是计算机科学专业，想创办创业公司，与其上企业家精神课程，不如上遗传学等课程。或者更好的是，去生物技术公司工作。计算机科学专业学生通常在计算机硬件或软件公司获得暑期工作。但如果你想找到创业想法，在某些无关领域获得暑期工作可能会做得更好。[8]&lt;/p&gt;&#xA;&lt;p&gt;或者不要上任何额外的课程，只是构建东西。微软和脸书都在一月起步并非巧合。在哈佛，那是（或曾经是）阅读期，学生没有课要上，因为他们应该为期末考试学习。[9]&lt;/p&gt;&#xA;&lt;p&gt;但不要觉得你必须构建将成为创业公司的东西。那是过早优化。只是构建东西。最好和其他学生一起。不仅仅是课程使大学成为将自己 ratchet 到未来中的如此好的地方。你也被试图做同样事情的其他人包围。如果你与他们一起在项目上合作，你最终不仅产生有机想法，而且产生有机有机团队的有机想法——而且，从经验上看，这是最好的组合。&lt;/p&gt;&#xA;&lt;p&gt;小心研究。如果一个本科生写了些东西所有他的朋友都开始使用，它很可能代表一个好的创业想法。而博士论文极不可能。出于某种原因，一个项目越需要算作研究，它越不可能成为可以变成创业公司的东西。[10] 我认为原因是算作研究的想法子集如此狭窄，以至于满足该约束的项目不可能也满足解决用户问题的正交约束。而当学生（或教授）构建东西作为副项目时，他们自动倾向于解决用户的问题——也许甚至有额外的能量来自从研究约束中解放出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;竞争&#34;&gt;竞争&lt;/h2&gt;&#xA;&lt;p&gt;因为好想法应该显得明显，当你有一个时你会倾向于觉得你迟了。不要让那阻止你。担心你迟了是好想法的标志之一。搜索网络十分钟通常就能解决这个问题。即使你发现其他人在从事同样的事情，你可能也不会太迟。创业公司被竞争对手杀死的情况极其罕见——如此罕见以至于你几乎可以忽略这种可能性。所以除非你发现一个拥有那种会阻止用户选择你的锁定效应的竞争对手，否则不要放弃这个想法。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
