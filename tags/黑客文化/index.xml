<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黑客文化 on Linguista</title>
    <link>https://linguage.github.io/tags/%E9%BB%91%E5%AE%A2%E6%96%87%E5%8C%96/</link>
    <description>Recent content in 黑客文化 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E9%BB%91%E5%AE%A2%E6%96%87%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java的外衣</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/javacover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/javacover/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/javacover/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/javacover.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/javacover.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/javacover.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;java的外衣&#34;&gt;Java的外衣&lt;/h1&gt;&#xA;&lt;p&gt;2001年4月&lt;/p&gt;&#xA;&lt;p&gt;这篇文章源于我与几位程序员关于Java为何气味可疑的对话。这不是对Java的批判！这是黑客雷达的一个案例研究。&lt;/p&gt;&#xA;&lt;p&gt;随着时间的推移，黑客对好（和坏）技术培养出了一种嗅觉。我想试着写下是什么让Java对我来说似乎可疑，这可能会很有趣。&lt;/p&gt;&#xA;&lt;p&gt;一些读过这篇文章的人认为这是试图以前所未有的方式写一些有趣的事情。其他人说我将因为看起来写我不理解的东西而陷入麻烦。所以，以防万一有任何好处，让我澄清我在这里不是在写Java（我从未使用过），而是在写黑客雷达（我对此思考很多）。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;不能凭封面判断一本书&amp;quot;这句格言起源于书籍用普通纸板封面出售的时代，由每个购买者根据自己的品味装订。在那个时代，你不能凭封面判断一本书。但出版业从那时起进步了：现在的出版商努力使封面成为你可以判断一本书的依据。&lt;/p&gt;&#xA;&lt;p&gt;我花了很多时间在书店，我觉得我现在已经学会理解出版商想要告诉我关于一本书的一切，可能还有更多。我没有在书店度过的时间主要花在电脑前，我觉得我在某种程度上已经学会了通过封面来判断技术。这可能只是运气，但我已经让自己避免了一些最终被证明是真正糟糕的技术。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，Java对我来说似乎很糟糕。我从未写过Java程序，从未看过关于它的参考书，但我有一个预感，它不会是一种非常成功的语言。我可能被证明是错的；对技术做出预测是危险的事情。但作为某种时间胶囊，就其价值而言，这就是为什么我不喜欢Java的外观：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它被如此热情地炒作。真正的标准不需要被推广。没有人需要推广C、Unix或HTML。真正的标准在大多数人听到它之前就已经建立了。在黑客雷达屏幕上，Perl和Java一样大，或者更大，仅仅是凭借自身的优点。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它的目标很低。在最初的Java白皮书中，Gosling明确表示Java的设计对习惯C的程序员来说不会太困难。它被设计成另一个C++：C加上一些从更高级语言中借来的想法。就像情景喜剧、垃圾食品或包价旅游的创造者一样，Java的设计者有意识地为不如他们聪明的人设计产品。历史上，为他人使用而设计的语言都很糟糕：Cobol、PL/I、Pascal、Ada、C++。好的语言是那些为自己的设计者设计的：C、Perl、Smalltalk、Lisp。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它有不可告人的动机。有人说过，如果人们只在有话要说时才写书，而不是因为想写书，世界会变得更美好。同样，我们一直听到Java的原因不是因为它对编程语言有什么要说的。我们听到Java作为Sun公司削弱微软计划的一部分。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;没有人喜欢它。C、Perl、Python、Smalltalk和Lisp程序员都喜欢他们的语言。我从未听任何人说过他们喜欢Java。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;人们被迫使用它。我认识的许多使用Java的人使用它是因为他们觉得必须这样做。要么是他们觉得为了获得资助必须这样做，要么是他们认为客户会想要，要么是管理层告诉他们要这样做。这些都是聪明人；如果技术好，他们会自愿使用它。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它有太多的厨师。最好的编程语言是由小团体开发的。Java似乎是由一个委员会管理的。如果它最终成为一种好语言，这将是历史上委员会第一次设计出好语言。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是官僚主义的。据我对Java的一点点了解，似乎有很多做事的协议。真正的好语言不是那样的。它们让你做你想做的事，然后让路。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是伪时髦的。Sun现在假装Java是一种像Perl或Python那样的草根、开源语言努力。这个恰好由一家大公司控制。所以这种语言很可能具有与大公司生产的任何东西相同的单调笨重。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是为大型组织设计的。大型组织的目标与黑客不同。他们想要适合大型平庸程序员团队使用的语言——具有像U-Haul卡车中的限速器那样的功能，防止傻瓜造成太大损害。黑客不喜欢对他们居高临下的语言。黑客只想要力量。历史上，为大型组织设计的语言（PL/I、Ada）都失败了，而黑客语言（C、Perl）获胜了。原因：今天的青少年黑客是明天的CTO。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;错误的人喜欢它。我最钦佩的程序员整体上没有被Java迷住。谁喜欢Java？西装革履的人，不知道一种语言与另一种的区别，但知道他们在媒体上不断听到Java；大公司的程序员，惊讶地发现还有比C++更好的东西；以及即插即用的本科生，准备好喜欢任何可能让他们找到工作的东西（这会考试吗？）。这些人的意见随风而变。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它的爸爸陷入困境。Sun的商业模式正受到两方面的侵蚀。与台式机相同类型的廉价Intel处理器现在对服务器来说已经足够快了。而且FreeBSD似乎至少与Solaris一样适合作为服务器操作系统。Sun的广告暗示你需要Sun服务器用于工业级应用程序。如果这是真的，Yahoo会第一个排队购买Sun；但当我在那里工作时，服务器都是运行FreeBSD的Intel盒子。这对Sun的未来是个坏兆头。如果Sun遇到麻烦，他们可能会把Java拖下水。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;国防部喜欢它。国防部鼓励开发者使用Java。这在我看来是最 damning 的迹象。国防部的国防工作做得很好（虽然昂贵），但他们喜欢计划、程序和协议。他们的文化与黑客文化相反；在软件问题上他们往往会下错注。国防部最后一次真正喜欢一种编程语言是Ada。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;请记住，这不是对Java的批判，而是对其外衣的批判。我对Java的了解还不足以喜欢或不喜欢它。这只是为什么我不觉得急于学习它的解释。&lt;/p&gt;&#xA;&lt;p&gt;在尝试用一种语言编写程序之前就将其 dismissed 可能看起来 cavalier。但这是所有程序员都必须做的事情。外面的技术太多了，无法全部学习。你必须学会通过外部迹象来判断哪些值得你花时间。我同样 cavalier 地 dismissed 了Cobol、Ada、Visual Basic、IBM AS400、VRML、ISO 9000、SET协议、VMS、Novell Netware和CORBA等。它们只是气味不对。&lt;/p&gt;&#xA;&lt;p&gt;在Java的情况下我可能错了。可能一种由一家大公司推广以削弱另一家大公司、由委员会为&amp;quot;主流&amp;quot;受众设计、被炒作到天际、国防部喜欢的语言，碰巧是一种我会喜欢编程的干净、美丽、强大的语言。可能，但这似乎非常不可能。&lt;/p&gt;&#xA;&lt;p&gt;Trevor Re: Java&amp;rsquo;s Cover | Berners-Lee Re: Java | Being Popular | Sun Internal Memo | 2005: BusinessWeek Agrees&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何变得流行</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/popular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/popular/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/popular/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/popular.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/popular.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/popular.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;如何变得流行&#34;&gt;如何变得流行&lt;/h1&gt;&#xA;&lt;p&gt;2001年5月&lt;/p&gt;&#xA;&lt;p&gt;（本文是作为一种新语言的商业计划书而写的。因此它缺少（因为想当然）一个好的编程语言最重要的特征：非常强大的抽象能力。）&lt;/p&gt;&#xA;&lt;p&gt;我有一个朋友曾经告诉一位著名的操作系统专家，他想设计一种真正好的编程语言。专家告诉他，这将是浪费时间，编程语言不会因为其优点而变得流行或不流行，所以无论他的语言有多好，都没人会使用。至少，这是他设计的语言所发生的情况。&lt;/p&gt;&#xA;&lt;p&gt;到底是什么让一种语言变得流行？流行的语言是否配得上它们的流行度？试图定义一个好的编程语言是否值得？你会怎么做？&lt;/p&gt;&#xA;&lt;p&gt;我认为这些问题的答案可以通过观察黑客并了解他们想要什么来找到。编程语言是为黑客而设计的，而编程语言作为编程语言（而不是，比如说，作为指称语义练习或编译器设计练习）是好的，当且仅当黑客喜欢它。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-流行的机制&#34;&gt;1 流行的机制&lt;/h2&gt;&#xA;&lt;p&gt;当然，大多数人在选择编程语言时并不仅仅基于它们的优点。大多数程序员被告知要使用什么语言。然而我认为这些外部因素对编程语言流行度的影响并不像人们有时认为的那么大。我认为更大的问题是黑客对好的编程语言的想法与大多数语言设计者的想法不同。&lt;/p&gt;&#xA;&lt;p&gt;在这两者之间，黑客的意见才是重要的。编程语言不是定理。它们是工具，为人们设计的，必须像鞋子必须为人类的脚设计一样，适合人类的优点和缺点。如果鞋子穿上时夹脚，那它就是一双坏鞋，无论它作为雕塑品多么优雅。&lt;/p&gt;&#xA;&lt;p&gt;可能是大多数程序员无法区分好语言和坏语言。但这与其他工具没有什么不同。这并不意味着尝试设计好语言是浪费时间。专家黑客在看到好语言时能够识别出来，他们会使用它。诚然，专家黑客是极少数，但这个极少数群体编写了所有好的软件，他们的影响力使得其他程序员倾向于使用他们使用的任何语言。通常，这不仅仅是影响，而是命令：专家黑客通常就是那些作为老板或导师告诉其他程序员使用什么语言的人。&lt;/p&gt;&#xA;&lt;p&gt;专家黑客的意见并不是决定编程语言相对流行度的唯一力量——遗留软件（Cobol）和炒作（Ada、Java）也起作用——但我认为它是长期内最强大的力量。考虑到初始的关键质量和足够的时间，编程语言可能会变得与其应得的流行度相当。而流行度进一步将好语言与坏语言分开，因为来自真实用户的反馈总是导致改进。看看任何流行语言在其生命周期中发生了多大变化。Perl和Fortran是极端的例子，但即使是Lisp也发生了很大变化。例如，Lisp 1.5没有宏；这些是后来发展的，在麻省理工学院的黑客花了几年时间使用Lisp编写真实程序之后。[1]&lt;/p&gt;&#xA;&lt;p&gt;所以无论一种语言是否必须好才能流行，我认为一种语言必须流行才能好。它必须保持流行才能保持好。编程语言的工艺水平不会停滞不前。然而我们今天拥有的Lisp几乎与麻省理工学院在1980年代中期的Lisp相同，因为那是Lisp最后一次拥有足够大和要求高的用户群的时候。&lt;/p&gt;&#xA;&lt;p&gt;当然，黑客在使用语言之前必须了解它。他们如何听到？从其他黑客那里。但必须有一些初始的黑客群体使用该语言，其他人才能听到。我想知道这个群体必须多大；多少用户构成关键质量？我随口一说，二十个。如果一种语言有二十个独立的用户，意味着二十个用户自己决定使用它，我会认为它是真实的。&lt;/p&gt;&#xA;&lt;p&gt;达到那里并不容易。如果从零到二十比从二十到一千更难，我不会感到惊讶。获得那初始二十个用户的最好方法可能是使用特洛伊木马：给人们一个他们想要的应用程序，而这个应用程序恰好是用新语言编写的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-外部因素&#34;&gt;2 外部因素&lt;/h2&gt;&#xA;&lt;p&gt;让我们首先承认一个确实影响编程语言流行度的外部因素。要变得流行，编程语言必须是流行系统的脚本语言。Fortran和Cobol是早期IBM大型机的脚本语言。C是Unix的脚本语言，后来Perl也是。Tcl是Tk的脚本语言。Java和Javascript旨在成为Web浏览器的脚本语言。&lt;/p&gt;&#xA;&lt;p&gt;Lisp不是一个大规模流行的语言，因为它不是大规模流行系统的脚本语言。它保留的流行度可以追溯到1960年代和1970年代，当时它是麻省理工学院的脚本语言。当时的许多伟大程序员都在某个时期与麻省理工学院有关联。在1970年代初期，在C之前，麻省理工学院的Lisp方言MacLisp是严肃黑客想要使用的唯一编程语言之一。&lt;/p&gt;&#xA;&lt;p&gt;今天，Lisp是两个适度流行系统的脚本语言，Emacs和Autocad，因此我怀疑今天大部分Lisp编程都是在Emacs Lisp或AutoLisp中完成的。&lt;/p&gt;&#xA;&lt;p&gt;编程语言不是孤立存在的。Hack是一个及物动词——黑客通常在hack某物——在实践中，语言是相对于它们用来hack的任何东西来评判的。所以如果你想设计一种流行的语言，你要么必须提供比语言更多的东西，要么你必须设计你的语言来取代某个现有系统的脚本语言。&lt;/p&gt;&#xA;&lt;p&gt;Common Lisp不受欢迎的部分原因是因为它是一个孤儿。它确实伴随着一个要hack的系统：Lisp Machine。但Lisp Machines（以及并行计算机）在1980年代被通用处理器日益增长的力量压垮了。如果Common Lisp是Unix的好脚本语言，它可能会保持流行。唉，它是一个非常糟糕的脚本语言。&lt;/p&gt;&#xA;&lt;p&gt;描述这种情况的一种方法是说语言不是根据其自身的优点来评判的。另一种观点是，编程语言除非也是某物的脚本语言，否则就不是真正的编程语言。如果这让人感到意外，这似乎不公平。我认为这并不比期望编程语言有实现更不公平。这只是编程语言的一部分。&lt;/p&gt;&#xA;&lt;p&gt;当然，编程语言需要好的实现，而且这必须是免费的。公司会为软件付费，但个人黑客不会，而你需要吸引的是黑客。&lt;/p&gt;&#xA;&lt;p&gt;语言也需要有一本关于它的书。这本书应该是薄的、写得好的，充满了好的例子。K&amp;amp;R是这里的理想。目前我几乎会说一种语言必须有一本O&amp;rsquo;Reilly出版的书。这正成为对黑客重要性的测试。&lt;/p&gt;&#xA;&lt;p&gt;也应该有在线文档。事实上，书可以作为在线文档开始。但我不认为物理书已经过时了。它们的格式方便，出版商施加的事实审查是一种有用的、虽然不完美的过滤器。书店是学习新语言的最重要地方之一。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-简洁&#34;&gt;3 简洁&lt;/h2&gt;&#xA;&lt;p&gt;假设你能提供任何语言需要的三个东西——一个免费的实现、一本书、以及要hack的东西——你如何制造一种黑客会喜欢的语言？&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢的一件事是简洁。黑客是懒惰的，与数学家和现代主义建筑师是懒惰的方式相同：他们讨厌任何多余的东西。说一个即将编写程序的黑客基于他必须键入的字符总数来选择使用什么语言，至少是潜意识的，这离真相不远。如果这不是黑客思考的精确方式，语言设计者最好表现得好像是这样。&lt;/p&gt;&#xA;&lt;p&gt;试图用冗长的表达来宠用户，这些表达旨在类似英语，是错误的。Cobol因此缺陷而臭名昭著。黑客会认为被要求写&lt;/p&gt;&#xA;&lt;p&gt;add x to y giving z&lt;/p&gt;&#xA;&lt;p&gt;而不是&lt;/p&gt;&#xA;&lt;p&gt;z = x+y&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络喷子</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/trolls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/trolls/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/trolls/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/trolls.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/trolls.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/trolls.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;网络喷子&#34;&gt;网络喷子&lt;/h1&gt;&#xA;&lt;p&gt;2008年2月&lt;/p&gt;&#xA;&lt;p&gt;Hacker News的一个用户最近发表了一条评论，让我开始思考：关于黑客文化，有一件事我总觉得不太舒服——那就是刻薄。&amp;hellip;&amp;hellip;我只是不明白为什么人们会像他们那样喷人。在过去的几年里，我思考了很多关于喷子的问题。这是一个老问题，和论坛一样古老，但我们仍在学习其原因以及如何解决它们。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;喷子&amp;quot;这个词有两种含义。在最初的含义中，它指的是某人，通常是外人，通过说有争议的话在论坛中故意挑起争端。[1] 例如，某个不使用某种编程语言的人可能会去该语言用户的论坛，对其发表贬损评论，然后坐下来观看人们上钩。这种喷子本质上是个恶作剧，就像在一满屋子的人中放了一只蝙蝠。&lt;/p&gt;&#xA;&lt;p&gt;这个定义后来扩展到在论坛中表现得像混蛋的人，无论是否故意。现在当人们谈论喷子时，他们通常指的是这个词的更广泛含义。虽然在某种意义上这在历史上是不准确的，但在其他方面更准确，因为当某人表现得像混蛋时，通常甚至在他们自己的头脑中也不确定有多少是故意的。这可以说是混蛋的定义特征之一。&lt;/p&gt;&#xA;&lt;p&gt;我认为广义上的喷子有四个原因。最重要的是距离感。人们会在匿名论坛中说他们永远不敢当面说的话，就像他们在车里会做他们作为行人永远不会做的事情——比如尾随别人，或者按喇叭，或者切断他们的路。&lt;/p&gt;&#xA;&lt;p&gt;在与计算机相关的论坛中，喷子现象尤其严重，我认为这是由于你在那里找到的那类人。他们中的大多数人（包括我自己）处理抽象想法比处理人更舒服。黑客即使在当面也可能很唐突。把他们放在匿名论坛上，问题就更严重了。&lt;/p&gt;&#xA;&lt;p&gt;喷子的第三个原因是无能。如果你不同意某件事，说&amp;quot;你很烂&amp;quot;比弄清楚并准确解释你不同意什么要容易。这样你也可以免于反驳。在这方面，喷子很像涂鸦。涂鸦发生在雄心和无能的交叉点：人们想在世界留下自己的印记，但除了真正在世界上留下印记外没有其他方式。[2]&lt;/p&gt;&#xA;&lt;p&gt;最后一个促成因素是论坛的文化。喷子就像孩子（很多就是孩子），他们能够表现出广泛的行为，取决于他们认为什么会被容忍。在不允许无礼的地方，大多数人都可以有礼貌。反之亦然。&lt;/p&gt;&#xA;&lt;p&gt;有一种喷子的格雷欣法则：喷子愿意使用一个有很多有思想的人在里面的论坛，但有思想的人不愿意使用一个有很多喷子在里面的论坛。这意味着一旦喷子现象占据主导，它往往会成为主流文化。在我开始关注那里的评论线程时，这种情况已经在Slashdot和Digg上发生了，但我看着它在Reddit上发生。&lt;/p&gt;&#xA;&lt;p&gt;News.YC在众多其他事情中是一个实验，看看是否可以避免这种命运。该网站的指南明确要求人们不要说他们不会当面说的话。如果某人开始无礼，其他用户会介入并告诉他们停止。当人们似乎在故意喷子时，我们无情地禁止他们。&lt;/p&gt;&#xA;&lt;p&gt;技术调整也可能有帮助。在Reddit上，对你评论的投票不会影响你的业力分数，但在News.YC上会。当人们可以看到自己在同行眼中的声誉在发表混蛋评论后流失时，这似乎确实会影响人们。用户常常会重新考虑并删除此类评论。&lt;/p&gt;&#xA;&lt;p&gt;人们可能会担心这会阻止人们表达有争议的想法，但经验上这似乎并没有发生。当人们说了一些实质性的东西并被降级时，他们固执地保留它。人们删除的是俏皮话，因为他们在其中投入的较少。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，这个实验似乎很成功。News.YC上的对话水平与我见过的任何论坛一样高。但我们每天仍然只有大约8,000个独立用户。Reddit在那么小的时候对话也很好。挑战是我们能否保持这种方式。&lt;/p&gt;&#xA;&lt;p&gt;我乐观地认为我们会的。我们不仅仅依赖技术技巧。News.YC的核心用户大多是被喷子占领的其他网站的难民。他们对喷子的感觉大致就像古巴或东欧的难民对独裁的感觉。所以有很多人在努力防止这种情况再次发生。&lt;/p&gt;&#xA;&lt;p&gt;注释&lt;/p&gt;&#xA;&lt;p&gt;[1] 我指的是交流意见场所的一般意义上的论坛。最初的互联网论坛不是网站而是Usenet新闻组。&lt;/p&gt;&#xA;&lt;p&gt;[2] 我在这里谈论的是日常涂鸦。有些涂鸦相当令人印象深刻（任何东西如果你做得足够好都会成为艺术），但普通的标签只是视觉垃圾。&lt;/p&gt;&#xA;&lt;p&gt;俄语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>雅虎发生了什么</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/yahoo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/yahoo/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/yahoo/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/yahoo.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/yahoo.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/yahoo.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;雅虎发生了什么&#34;&gt;雅虎发生了什么&lt;/h1&gt;&#xA;&lt;p&gt;2010年8月&lt;/p&gt;&#xA;&lt;p&gt;1998年雅虎收购了我的创业公司后，我去那里工作时，感觉那里就像世界的中心。它本应是下一个大事件。它本应成为谷歌最终成为的东西。&lt;/p&gt;&#xA;&lt;p&gt;出了什么问题？困扰雅虎的问题可以追溯到很久以前，几乎可以追溯到公司成立之初。1998年我到那里时，这些问题已经非常明显了。雅虎有两个谷歌没有的问题：容易赚到的钱，以及对作为技术公司的矛盾态度。&lt;/p&gt;&#xA;&lt;h2 id=&#34;金钱&#34;&gt;金钱&lt;/h2&gt;&#xA;&lt;p&gt;我第一次见到杨致远时，我们以为见面的原因不同。他认为我们见面是为了让他收购之前亲自考察我们。我认为我们见面是为了向他展示我们的新技术，Revenue Loop。这是一种对购物搜索结果进行排序的方式。商家竞标销售流量的百分比，但结果不是按出价排序，而是按出价乘以用户平均购买金额来排序。这就像谷歌现在用来对广告进行排序的算法，但这是在1998年春天，谷歌成立之前。&lt;/p&gt;&#xA;&lt;p&gt;Revenue Loop是购物搜索的最佳排序方式，从某种意义上说，它是按照雅虎从每个链接中赚取的金额多少来排序的。但它不仅仅是在这个意义上是最优的。根据用户行为对搜索结果进行排名也会使搜索变得更好。用户训练搜索：你可以开始时仅仅基于文本相似性找到匹配，随着用户购买更多东西，搜索结果会变得越来越好。&lt;/p&gt;&#xA;&lt;p&gt;杰瑞似乎并不关心。我很困惑。我在向他展示从搜索流量中提取最大价值的技术，而他不关心？我不知道是我解释得不好，还是他只是面无表情。&lt;/p&gt;&#xA;&lt;p&gt;直到后来，我在雅虎工作后才意识到答案。这两个猜测都不是。雅虎不关心提取流量全部价值的技术原因是广告商已经在过度支付了。如果雅虎仅仅提取实际价值，他们赚的钱会更少。&lt;/p&gt;&#xA;&lt;p&gt;尽管现在很难相信，但当时的大钱来自于横幅广告。广告商愿意为横幅广告支付荒谬的金额。因此，雅虎的销售团队已经发展利用这种收入来源。在一位身材高大、令人敬畏的人物Anil Singh的领导下，雅虎的销售人员会飞往宝洁公司，带回数百万美元的横幅广告展示订单。&lt;/p&gt;&#xA;&lt;p&gt;与印刷品相比，价格似乎很便宜，这是广告商在没有任何其他参考的情况下比较的对象。但与它们的实际价值相比，它们很昂贵。因此，这些大而愚蠢的公司是一个危险的收入来源。但还有一个更危险的来源：其他互联网创业公司。&lt;/p&gt;&#xA;&lt;p&gt;到1998年，雅虎成为事实上的庞氏骗局的受益者。投资者对互联网感到兴奋。他们兴奋的一个原因是雅虎的收入增长。因此，他们投资新的互联网创业公司。然后，创业公司利用这些钱在雅虎上购买广告以获取流量。这导致雅虎的收入进一步增长，并进一步说服投资者互联网值得投资。当有一天我在我的小隔间里意识到这一点时，我像阿基米德在他的浴缸里一样跳了起来，只是我不是喊&amp;quot;Eureka！&amp;quot;，而是喊&amp;quot;Sell！&amp;quot;（卖！）&lt;/p&gt;&#xA;&lt;p&gt;互联网创业公司和宝洁公司都在做品牌广告。他们不关心定向。他们只希望很多人看到他们的广告。因此，流量成为在雅虎获取的东西。什么类型都无所谓。[1]&lt;/p&gt;&#xA;&lt;p&gt;不仅仅是雅虎。所有的搜索引擎都在这样做。这就是为什么他们试图让人们开始称他们为&amp;quot;门户&amp;quot;而不是&amp;quot;搜索引擎&amp;quot;。尽管&amp;quot;门户&amp;quot;一词的实际含义，他们指的是用户会在网站本身找到想要的东西的网站，而不是像在搜索引擎那样只是在前往其他目的地的路上经过。&lt;/p&gt;&#xA;&lt;p&gt;我记得在1998年底或1999年初告诉大卫·费罗，雅虎应该收购谷歌，因为我和公司里的大多数其他程序员都在使用它而不是雅虎进行搜索。他告诉我，这不值得担心。搜索只占我们流量的6%，而我们每月以10%的速度增长。做得更好不值得。&lt;/p&gt;&#xA;&lt;p&gt;我没有说&amp;quot;但搜索流量比其他流量更有价值！&amp;ldquo;我说&amp;quot;哦，好的。&amp;ldquo;因为我也没意识到搜索流量有多值钱。我甚至不确定拉里和谢尔盖当时是否知道。如果他们知道，谷歌大概就不会在企业搜索上投入任何精力了。&lt;/p&gt;&#xA;&lt;p&gt;如果情况不同，经营雅虎的人可能已经意识到搜索的重要性。但他们和真相之间有世界上最不透明的障碍：金钱。只要客户为横幅广告开出大额支票，就很难认真对待搜索。谷歌没有这种干扰。&lt;/p&gt;&#xA;&lt;h2 id=&#34;黑客&#34;&gt;黑客&lt;/h2&gt;&#xA;&lt;p&gt;但雅虎也有另一个问题，使得难以改变方向。从一开始，他们对作为技术公司的矛盾态度就使他们失去了平衡。&lt;/p&gt;&#xA;&lt;p&gt;我在雅虎工作时最奇怪的事情之一是他们坚持称自己为&amp;quot;媒体公司&amp;rdquo;。如果你在他们的办公室里走动，看起来像一家软件公司。小隔间里充满了编写代码的程序员，思考功能列表和发货日期的产品经理，支持人员（是的，实际上有支持人员）告诉用户重新启动浏览器等等，就像一家软件公司。那么他们为什么称自己为媒体公司呢？&lt;/p&gt;&#xA;&lt;p&gt;一个原因是他们赚钱的方式：通过出售广告。1995年，很难想象一家技术公司会这样赚钱。技术公司通过向用户出售软件来赚钱。媒体公司出售广告。所以他们一定是一家媒体公司。&lt;/p&gt;&#xA;&lt;p&gt;另一个重要因素是对微软的恐惧。如果雅虎的任何人考虑过他们应该是一家技术公司的想法，下一个想法就是微软会粉碎他们。&lt;/p&gt;&#xA;&lt;p&gt;对于比我年轻得多的人来说，很难理解1995年微软仍然引起的恐惧。想象一家拥有谷歌现在几倍权力，但更恶劣的公司。害怕他们是完全合理的。雅虎看着他们粉碎了第一家热门互联网公司，网景。担心如果他们试图成为下一个网景，他们会遭受同样的命运是合理的。他们怎么知道网景会最终成为微软的最后一个受害者呢？&lt;/p&gt;&#xA;&lt;p&gt;假装成为一家媒体公司以迷惑微软会是一个聪明的举动。但不幸的是，雅虎实际上试图成为一家媒体公司，在某种程度上。例如，雅虎的项目经理被称为&amp;quot;制作人&amp;rdquo;，公司的不同部分被称为&amp;quot;资产&amp;quot;。但雅虎真正需要成为的是一家技术公司，通过试图成为其他东西，他们最终成为了不伦不类的东西。这就是为什么雅虎作为一家公司从来没有一个明确定义的身份。&lt;/p&gt;&#xA;&lt;p&gt;试图成为媒体公司的最严重后果是他们没有足够认真地对待编程。微软（当时）、谷歌和Facebook都有以黑客为中心的文化。但雅虎将编程视为一种商品。在雅虎，面向用户的软件由产品经理和设计师控制。程序员的工作只是将产品经理和设计师的工作翻译成代码的最后一步。&lt;/p&gt;&#xA;&lt;p&gt;这种做法的一个明显结果是，当雅虎构建东西时，它们通常不是很好。但这不是最糟糕的问题。最糟糕的问题是他们雇佣了糟糕的程序员。&lt;/p&gt;&#xA;&lt;p&gt;微软（当时）、谷歌和Facebook都一直痴迷于雇佣最好的程序员。雅虎不是。他们更喜欢好程序员而不是坏程序员，但他们没有那种专注的、几乎令人讨厌的精英主义专注于雇佣最聪明的人。而当你考虑到他们在泡沫时期雇佣程序员时有多少竞争时，他们的程序员质量参差不齐也就不足为奇了。&lt;/p&gt;&#xA;&lt;p&gt;在技术领域，一旦你有了糟糕的程序员，你就注定完蛋了。我想不出一家公司陷入技术平庸而恢复的例子。好程序员想与其他好程序员一起工作。因此，一旦你公司的程序员质量开始下降，你就进入了一个无法恢复的死亡螺旋。[2]&lt;/p&gt;&#xA;&lt;p&gt;在雅虎，这个死亡螺旋很早就开始了。如果雅虎曾经是谷歌式的人才磁铁，那么到1998年我到那里时就结束了。&lt;/p&gt;&#xA;&lt;p&gt;公司感觉过早地老化了。大多数技术公司最终都会被西装革履的人和中级经理接管。在雅虎，感觉他们有意加速了这个过程。他们不想成为一群黑客。他们想成为穿西装的人。媒体公司应该由穿西装的人经营。&lt;/p&gt;&#xA;&lt;p&gt;我第一次访问谷歌时，他们大约有500人，和我在雅虎工作时的人数相同。但情况看起来确实不同。它仍然是一个非常以黑客为中心的文化。我记得在自助餐厅和一些程序员讨论操纵搜索结果的问题（现在称为SEO），他们问&amp;quot;我们应该怎么做？&amp;ldquo;雅虎的程序员不会问这个问题。他们的任务不是问为什么；他们的任务是构建产品经理指定的东西。我记得离开谷歌时想&amp;quot;哇，它仍然是一家创业公司。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;从雅虎的第一个致命缺陷中学到的东西不多。希望任何公司都能避免依赖虚假收入来源而受到损害可能太过分了。但创业公司可以从第二个中学到重要的一课。在软件业务中，你不能没有以黑客为中心的文化。&lt;/p&gt;&#xA;&lt;p&gt;可能我听到的对拥有以黑客为中心的文化最令人印象深刻的承诺来自马克·扎克伯格，2007年他在创业学校演讲时说。他说，在早期，Facebook甚至为通常不涉及编程的工作雇佣程序员，比如人力资源和营销。&lt;/p&gt;&#xA;&lt;p&gt;那么哪些公司需要有以黑客为中心的文化？在这个意义上，哪些公司是&amp;quot;从事软件业务的&amp;quot;？正如雅虎发现的，这个规则涵盖的领域比大多数人意识到的要大。答案是：任何需要有良好软件的公司。&lt;/p&gt;&#xA;&lt;p&gt;为什么优秀的程序员想为一家没有以黑客为中心文化的公司工作，只要还有其他公司有这样的文化？我可以想象两个原因：如果他们得到巨额报酬，或者如果领域很有趣，而且其中没有一家公司是以黑客为中心的。否则，你无法吸引好程序员在以西装为中心的文化中工作。没有好的程序员，你不会得到好的软件，无论你在任务上投入多少人，或者你建立多少程序来确保&amp;quot;质量&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;黑客文化似乎有点不负责任。这就是为什么提议摧毁它的人使用&amp;quot;成人监督&amp;quot;这样的短语。这是他们在雅虎使用的短语。但还有比看似不负责任更糟糕的事情。例如，失败。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 我在那里时，最接近定向的是当我们创建了pets.yahoo.com，以引发3家宠物用品创业公司之间为顶级赞助商位置的竞价战。&lt;/p&gt;&#xA;&lt;p&gt;[2] 理论上，你可以通过购买好程序员而不是雇佣他们来击败死亡螺旋。你可以通过购买他们的创业公司获得永远不会作为员工来为你工作的程序员。但到目前为止，唯一足够聪明这样做的公司是那些足够聪明不需要这样做的公司。&lt;/p&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克威尔、杰西卡·利文斯顿和杰夫·拉尔斯通阅读本文的草稿。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
