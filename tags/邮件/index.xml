<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>邮件 on Linguista</title>
    <link>http://localhost:1355/tags/%E9%82%AE%E4%BB%B6/</link>
    <description>Recent content in 邮件 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1355/tags/%E9%82%AE%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>反击的过滤器</title>
      <link>http://localhost:1355/paul_graham/essays_zh/ffb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/ffb/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/ffb/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;反击的过滤器&#34;&gt;反击的过滤器&lt;/h1&gt;&#xA;&lt;p&gt;2003年8月&lt;/p&gt;&#xA;&lt;p&gt;我们也许能够通过让贝叶斯垃圾邮件过滤器跟踪链接来看看另一端等待什么来提高其准确性。death2spam的理查德·乔西现在在边界情况下这样做，并报告说效果很好。&lt;/p&gt;&#xA;&lt;p&gt;为什么只在边界情况下这样做？为什么只做一次？&lt;/p&gt;&#xA;&lt;p&gt;正如我在《过滤器会杀死垃圾邮件吗？》中提到的，跟踪垃圾邮件中的所有url会有一个有趣的副作用。如果流行的邮件客户端为了过滤垃圾邮件而这样做，垃圾邮件发送者的服务器将受到严重打击。我越想这个，越觉得这是个好主意。这不仅仅是有趣；很难想象有比这更精确地针对垃圾邮件发送者的反击。&lt;/p&gt;&#xA;&lt;p&gt;所以我想向那些正在研究垃圾邮件过滤器的人建议一个附加功能：&amp;ldquo;惩罚&amp;quot;模式，如果打开，将对可疑垃圾邮件中的每个url进行n次蜘蛛抓取，其中n可以由用户设置。[1]&lt;/p&gt;&#xA;&lt;p&gt;正如许多人指出的，当前邮件系统的问题之一是它太被动了。它做你告诉它做的一切。到目前为止，所有修复问题的建议似乎都涉及新协议。这个不会。&lt;/p&gt;&#xA;&lt;p&gt;如果广泛使用，自动检索垃圾邮件过滤器将使邮件系统反弹。垃圾邮件的大量数量，迄今为止一直对垃圾邮件发送者有利，现在将对他不利，就像树枝反弹在他脸上一样。自动检索垃圾邮件过滤器将提高垃圾邮件发送者的成本，并降低他的销售：他的带宽使用将飙升，他的服务器将在负载下停止运转，这将使它们对那些会响应垃圾邮件的人不可用。&lt;/p&gt;&#xA;&lt;p&gt;每小时发送一百万封邮件，每小时在你的服务器上获得一百万次点击。我们想确保这只对可疑的垃圾邮件进行。通常，发送给数百万人的任何url都可能是垃圾邮件url，因此提交每封邮件中的每个http请求几乎总是可以正常工作。但有几种情况这不是真的：例如，像Yahoo Mail和Hotmail这样的免费邮件服务发送的邮件底部的url。&lt;/p&gt;&#xA;&lt;p&gt;为了保护这样的站点，并防止滥用，自动检索应该与垃圾邮件推广站点的黑名单结合。只有黑名单上的站点才会被抓取，站点只有在经过人工检查后才会被列入黑名单。垃圾邮件的生命周期必须至少有几个小时，所以应该很容易及时更新这样的列表来干扰推广新站点的垃圾邮件。[2]&lt;/p&gt;&#xA;&lt;p&gt;大量自动检索只对高带宽连接的用户实用，但有足够的用户会给垃圾邮件发送者造成严重麻烦。实际上，这个解决方案巧妙地反映了问题。垃圾邮件的问题在于，为了到达少数易受骗的人，垃圾邮件发送者向每个人发送邮件。不易受骗的收件人只是附带损害。但不易受骗的多数人不会停止接收垃圾邮件，直到他们能够停止（或威胁停止）易受骗的人响应它。自动检索垃圾邮件过滤器为他们提供了一种方法来做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;这会杀死垃圾邮件吗？不完全是。最大的垃圾邮件发送者可能能够保护他们的服务器免受自动检索过滤器的影响。然而，对他们来说最简单、最便宜的方法是在邮件中包含有效的退订链接。这对于小鱼以及雇佣垃圾邮件发送者推广他们的&amp;quot;合法&amp;quot;站点来说将是必要的。因此，如果自动检索过滤器变得广泛，它们将成为自动退订过滤器。&lt;/p&gt;&#xA;&lt;p&gt;在这种情况下，垃圾邮件将像操作系统崩溃、病毒和弹出窗口一样，成为那些懒得使用正确软件的人所遭受的瘟疫之一。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 自动检索过滤器必须跟踪重定向，并在某些情况下（例如，只说&amp;quot;点击这里&amp;quot;的页面）跟踪多级链接。还要确保http请求与流行Web浏览器的请求无法区分，包括顺序和引用者。&lt;/p&gt;&#xA;&lt;p&gt;如果响应在x时间内没有返回，默认为相当高的垃圾邮件概率。&lt;/p&gt;&#xA;&lt;p&gt;与其使n恒定，不如使它成为提到该站点的垃圾邮件数量的函数，这可能是个好主意。这将增加对滥用和事故的进一步保护。&lt;/p&gt;&#xA;&lt;p&gt;[2] 本文的早期版本使用&amp;quot;白名单&amp;quot;而不是&amp;quot;黑名单&amp;quot;一词。虽然它们要像黑名单一样工作，我更喜欢称它们为白名单，因为这可能使它们不太容易受到法律攻击。然而，这似乎只是让读者感到困惑。&lt;/p&gt;&#xA;&lt;p&gt;应该可能有多个黑名单。单点故障既容易受到攻击也容易受到滥用。&lt;/p&gt;&#xA;&lt;p&gt;感谢布莱恩·伯顿、比尔·耶拉祖尼斯、丹·吉芬、埃里克·雷蒙德和理查德·乔西阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>更好的贝叶斯过滤</title>
      <link>http://localhost:1355/paul_graham/essays_zh/better/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1355/paul_graham/essays_zh/better/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1355/paul_graham/essays_en/better/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;更好的贝叶斯过滤&#34;&gt;更好的贝叶斯过滤&lt;/h1&gt;&#xA;&lt;p&gt;2003年1月&lt;/p&gt;&#xA;&lt;p&gt;（本文是在2003年垃圾邮件会议上的演讲。它描述了我在改进《垃圾邮件计划》中描述的算法性能方面所做的工作，以及我未来的计划。）&lt;/p&gt;&#xA;&lt;p&gt;我在这里要介绍的第一个发现是研究论文的懒惰评估算法。随便写你想写的内容，不要引用任何以前的工作，愤怒的读者会发送给你所有你应该引用的论文的参考文献。我在《垃圾邮件计划》[1]登上Slashdot后发现了这个算法。&lt;/p&gt;&#xA;&lt;p&gt;垃圾邮件过滤是文本分类的一个子集，这是一个已经成熟的领域，但是关于贝叶斯垃圾邮件过滤本身的第一篇论文似乎是在1998年同一会议上发表的两篇，一篇是Pantel和Lin的[2]，另一篇是微软研究院的一个小组[3]。&lt;/p&gt;&#xA;&lt;p&gt;当我听说这项工作时，我有点惊讶。如果人们在四年前就已经开始研究贝叶斯过滤，为什么不是每个人都在使用它呢？当我阅读这些论文时，我找到了原因。Pantel和Lin的过滤器是两个中更有效的，但它只捕获了92%的垃圾邮件，有1.16%的误报率。&lt;/p&gt;&#xA;&lt;p&gt;当我尝试编写贝叶斯垃圾邮件过滤器时，它捕获了99.5%的垃圾邮件，误报率低于0.03%[4]。当两个人尝试相同的实验得到截然不同的结果时，总是令人担忧。在这里尤其令人担忧，因为这两组数字可能会得出相反的结论。不同的用户有不同的要求，但我认为对于许多人来说，92%的过滤率和1.16%的误报率意味着过滤不是一个可接受的解决方案，而99.5%的过滤率和低于0.03%的误报率意味着它是可接受的。&lt;/p&gt;&#xA;&lt;p&gt;那么为什么我们会得到如此不同的数字呢？我没有尝试重现Pantel和Lin的结果，但是通过阅读论文，我看到了五个可能解释这种差异的原因。&lt;/p&gt;&#xA;&lt;p&gt;一个是他们用很少的数据训练他们的过滤器：160封垃圾邮件和466封非垃圾邮件。过滤器的性能在这么小的数据集上应该还在提升。所以他们的数字可能甚至不能准确衡量他们算法的性能，更不用说一般的贝叶斯垃圾邮件过滤了。&lt;/p&gt;&#xA;&lt;p&gt;但我认为最重要的区别可能是他们忽略了邮件头。对于任何从事垃圾邮件过滤工作的人来说，这似乎是一个错误的决定。然而，在我尝试编写的第一个过滤器中，我也忽略了邮件头。为什么？因为我想让问题保持整洁。那时我对邮件头了解不多，它们在我看来充满了随机的东西。这里有一个教训给过滤器编写者：不要忽略数据。你会觉得这个教训太明显了，不需要提及，但我已经不得不学习了好几次。&lt;/p&gt;&#xA;&lt;p&gt;第三，Pantel和Lin对词干进行了提取，意味着他们将例如&amp;quot;mailing&amp;quot;和&amp;quot;mailed&amp;quot;都简化为根词&amp;quot;mail&amp;quot;。他们可能觉得他们被迫这样做是因为他们的语料库很小，但如果是这样，这是一种过早的优化。&lt;/p&gt;&#xA;&lt;p&gt;第四，他们计算概率的方式不同。他们使用了所有的标记，而我只使用15个最显著的。如果你使用所有的标记，你往往会错过较长的垃圾邮件，就是那种有人告诉你他们的生活故事直到他们从某个多层次营销计划中致富的类型。而且这样的算法很容易被垃圾邮件发送者欺骗：只需添加一大块随机文本来平衡垃圾邮件术语。&lt;/p&gt;&#xA;&lt;p&gt;最后，他们没有针对误报进行偏置。我认为任何垃圾邮件过滤算法都应该有一个方便的旋钮，你可以转动它来降低误报率，代价是降低过滤率。我通过将非垃圾邮件语料库中标记的出现次数加倍来实现这一点。我认为将垃圾邮件过滤视为一个直接的文本分类问题是个坏主意。你可以使用文本分类技术，但解决方案可以也应该反映文本是邮件这一事实，特别是垃圾邮件。邮件不仅仅是文本；它有结构。垃圾邮件过滤不仅仅是分类，因为误报比漏报要糟糕得多，你应该将它们视为不同类型的错误。而且错误的来源不仅仅是随机变化，而是一个活跃的人类垃圾邮件发送者积极工作以击败你的过滤器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;标记&#34;&gt;标记&lt;/h2&gt;&#xA;&lt;p&gt;在Slashdot文章之后我听说的另一个项目是Bill Yerazunis的CRM114[5]。这证明了我刚才提到的设计原则的反例。它是一个直接的文本分类器，但它是如此惊人的有效，以至于它甚至不知道自己在做什么的情况下几乎完美地过滤垃圾邮件。&lt;/p&gt;&#xA;&lt;p&gt;一旦我理解了CRM114的工作原理，似乎我最终将不得不从基于单个词的过滤转向这样的方法。但是首先，我想，我会看看我用单个词能走多远。答案是，惊人的远。&lt;/p&gt;&#xA;&lt;p&gt;我主要在研究更智能的标记化。在当前的垃圾邮件上，我已经能够达到接近CRM114的过滤率。这些技术与Bill的技术大多是正交的；最优的解决方案可能包含两者。&lt;/p&gt;&#xA;&lt;p&gt;《垃圾邮件计划》使用了非常简单的标记定义。字母、数字、破折号、撇号和美元符号是组成字符，其他都是标记分隔符。我也忽略了大小写。&lt;/p&gt;&#xA;&lt;p&gt;现在我有一个更复杂的标记定义：保留大小写。感叹号是组成字符。句号和逗号如果出现在两个数字之间则是组成字符。这让我能够完整地获得IP地址和价格。像$20-25这样的价格范围产生两个标记，$20和$25。出现在To、From、Subject和Return-Path行中，或者url中的标记会相应地被标记。例如，Subject行中的&amp;quot;foo&amp;quot;变成&amp;quot;Subject*foo&amp;quot;。（星号可以是任何你不允许作为组成字符的字符。）这样的措施增加了过滤器的词汇量，使其更有区分力。例如，在当前的过滤器中，Subject行中的&amp;quot;free&amp;quot;有98%的垃圾邮件概率，而正文中的相同标记只有65%的垃圾邮件概率。&lt;/p&gt;&#xA;&lt;p&gt;以下是一些当前的概率[6]：&lt;/p&gt;&#xA;&lt;p&gt;Subject&lt;em&gt;FREE 0.9999&#xA;free!! 0.9999&#xA;To&lt;/em&gt;free 0.9998&#xA;Subject&lt;em&gt;free 0.9782&#xA;free! 0.9199&#xA;Free 0.9198&#xA;Url&lt;/em&gt;free 0.9091&#xA;FREE 0.8747&#xA;From*free 0.7636&#xA;free 0.6546&lt;/p&gt;&#xA;&lt;p&gt;在《垃圾邮件计划》过滤器中，所有这些标记都会有相同的概率，0.7602。那个过滤器识别了大约23,000个标记。当前的一个识别了大约187,000个。&lt;/p&gt;&#xA;&lt;p&gt;拥有更大的标记宇宙的缺点是有更多未命中的机会。将你的语料库分散到更多的标记上与使其变小的效果相同。例如，如果你将感叹号视为组成字符，那么你可能最终没有带有七个感叹号的free的垃圾邮件概率，即使你知道只有两个感叹号的free有99.99%的概率。&lt;/p&gt;&#xA;&lt;p&gt;对此的一个解决方案是我称之为退化的方法。如果你找不到标记的精确匹配，就将其视为不太具体的版本。我认为终端感叹号、大写字母以及出现在五个标记上下文中的任何一个使标记更具体。例如，如果我找不到&amp;quot;Subject&lt;em&gt;free!&amp;ldquo;的概率，我会查找&amp;quot;Subject&lt;/em&gt;free&amp;rdquo;、&amp;ldquo;free!&amp;ldquo;和&amp;quot;free&amp;quot;的概率，并取离0.5最远的那个。&lt;/p&gt;&#xA;&lt;p&gt;以下是过滤器在Subject行中看到&amp;quot;FREE!!!&amp;ldquo;且没有其概率时考虑的替代方案[7]：&lt;/p&gt;&#xA;&lt;p&gt;Subject&lt;em&gt;Free!!!&#xA;Subject&lt;/em&gt;free!!!&#xA;Subject&lt;em&gt;FREE!&#xA;Subject&lt;/em&gt;Free!&#xA;Subject&lt;em&gt;free!&#xA;Subject&lt;/em&gt;FREE&#xA;Subject&lt;em&gt;Free&#xA;Subject&lt;/em&gt;free&#xA;FREE!!!&#xA;Free!!!&#xA;free!!!&#xA;FREE!&#xA;Free!&#xA;free!&#xA;FREE&#xA;Free&#xA;free&lt;/p&gt;&#xA;&lt;p&gt;如果你这样做，一定要考虑首字母大写以及全大写和全小写的版本。垃圾邮件倾向于有更多的祈使语气句子，而在这些句子中，第一个词是动词。所以首字母大写的动词比全小写时有更高的垃圾邮件概率。在我的过滤器中，&amp;ldquo;Act&amp;quot;的垃圾邮件概率是98%，而&amp;quot;act&amp;quot;只有62%。&lt;/p&gt;&#xA;&lt;p&gt;如果你增加过滤器的词汇量，你可能会根据你旧的&amp;quot;相同&amp;quot;定义多次计算相同的词。从逻辑上讲，它们不再是相同的标记了。但如果这仍然困扰你，让我从经验补充，你似乎多次计算的词往往正是你想要的。&lt;/p&gt;&#xA;&lt;p&gt;更大词汇量的另一个影响是，当你查看传入的邮件时，你会发现更多有趣的标记，即那些概率远离0.5的标记。我使用15个最有趣的来决定邮件是否为垃圾邮件。但是当你使用这样的固定数字时，你可能会遇到问题。如果你发现很多最大有趣的标记，结果可能取决于决定同等有趣标记排序的随机因素。处理这个问题的一种方法是将一些视为比其他更有趣。&lt;/p&gt;&#xA;&lt;p&gt;例如，标记&amp;quot;dalco&amp;quot;在我的垃圾邮件语料库中出现3次，在我的合法邮件语料库中从未出现。标记&amp;quot;Url*optmails&amp;rdquo;（意思是url中的&amp;quot;optmails&amp;rdquo;）出现1223次。然而，按照我过去计算标记概率的方式，两者都会有相同的垃圾邮件概率，即0.99的阈值。&lt;/p&gt;&#xA;&lt;p&gt;这感觉不对。有理论论据支持给这两个标记显著不同的概率（Pantel和Lin这样做），但我还没有尝试过。但至少似乎如果我们发现超过15个标记只出现在一个语料库或另一个中，我们应该优先考虑出现次数多的。所以现在有两个阈值。对于只出现在垃圾邮件语料库中的标记，如果它们出现超过10次，概率是0.9999，否则是0.9998。在规模范围的另一端，对于只在合法邮件语料库中找到的标记也是如此。&lt;/p&gt;&#xA;&lt;p&gt;我以后可能会大幅缩放标记概率，但这少量的缩放至少确保标记以正确的方式排序。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
