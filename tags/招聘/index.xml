<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>招聘 on Linguista</title>
    <link>https://linguage.github.io/tags/%E6%8B%9B%E8%81%98/</link>
    <description>Recent content in 招聘 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E6%8B%9B%E8%81%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python悖论</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/pypar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/pypar/</guid>
      <description>&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/pypar.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/pypar.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/pypar.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;python悖论&#34;&gt;Python悖论&lt;/h1&gt;&#xA;&lt;p&gt;2004年8月&lt;/p&gt;&#xA;&lt;p&gt;在最近的一次演讲中，我说了一些让很多人不高兴的话：你可以让更聪明的程序员在Python项目上工作，而不是在Java项目上工作。&lt;/p&gt;&#xA;&lt;p&gt;我这样说并不是指Java程序员很笨。我的意思是Python程序员很聪明。学习一门新的编程语言需要很多工作。人们学习Python并不是因为它能给他们带来工作；他们学习它是因为他们真正喜欢编程，并且对已经知道的语言不满意。&lt;/p&gt;&#xA;&lt;p&gt;这使他们成为公司应该想要雇佣的那种程序员。因此，由于缺乏更好的名称，我称之为Python悖论：如果一个公司选择用相对冷门的语言编写其软件，他们将能够雇佣到更好的程序员，因为他们只会吸引那些足够关心它而去学习它的人。而对于程序员来说，这个悖论更加明显：如果你想找到一份好工作，应该学习的语言是那些人们不仅仅是为了找工作而学习的语言。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，只有少数公司足够聪明地意识到了这一点。但这里也有一种选择在进行：它们正是程序员最想为之工作的公司。例如，Google。当他们发布Java编程工作时，他们也希望有Python经验。&lt;/p&gt;&#xA;&lt;p&gt;我的一位朋友几乎知道所有广泛使用的语言，他在大多数项目中都使用Python。他说主要的原因是他喜欢源代码的外观。这可能是选择一种语言而不是另一种语言的轻率理由。但并没有听起来那么轻率：当你编程时，你花在阅读代码上的时间比写代码的时间多。你推着源代码团，就像雕塑家推着粘土团一样。因此，一种让源代码看起来丑陋的语言对于要求精确的程序员来说是令人发疯的，就像充满疙瘩的粘土对于雕塑家一样。&lt;/p&gt;&#xA;&lt;p&gt;提到丑陋的源代码，人们当然会想到Perl。但Perl表面的丑陋并不是我指的那种。真正的丑陋不是看起来刺耳的语法，而是不得不用错误的概念来构建程序。Perl可能看起来像一个骂人的卡通人物，但在某些情况下，它在概念上超越了Python。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，无论如何。当然，这两种语言都是不断发展的目标。但它们与Ruby（以及Icon、Joy、J、Lisp和Smalltalk）共享一个事实：它们都是由真正关心编程的人创建和使用的。而那些往往是做得好的人。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;如果你喜欢这篇文章，你可能也会喜欢&lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/hp/&#34;&gt;黑客与画家&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>两种判断</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/judgement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/judgement/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/judgement/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/judgement.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/judgement.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/judgement.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;两种判断&#34;&gt;两种判断&lt;/h1&gt;&#xA;&lt;p&gt;2007年4月&lt;/p&gt;&#xA;&lt;p&gt;人们有两种不同的方式来判断你。有时正确判断你是最终目标。但还有第二种更常见的判断类型，其中正确判断你不是目标。我们倾向于将所有对我们的判断视为第一种类型。如果我们意识到哪些是哪些不是，我们可能会更快乐。&lt;/p&gt;&#xA;&lt;p&gt;第一种判断类型，即判断你是最终目标的类型，包括法庭案件、课程成绩和大多数比赛。这样的判断当然可能是错误的，但因为目标是正确判断你，通常有某种上诉过程。如果你觉得自己被错误判断，你可以抗议自己受到了不公正对待。&lt;/p&gt;&#xA;&lt;p&gt;几乎所有对儿童做出的判断都是这种类型，所以我们很早就养成了认为所有判断都是这样的习惯。&lt;/p&gt;&#xA;&lt;p&gt;但事实上还有第二个更大的判断类别，其中判断你只是达到其他目的的手段。这些包括大学录取、招聘和投资决策，当然还有约会中的判断。这种判断并不是真正关于你。&lt;/p&gt;&#xA;&lt;p&gt;把自己置于为国家队选拔球员的位置。假设为了简单起见，这是一个没有位置的比赛，你必须选择20名球员。会有一些明显应该入选的明星球员，许多明显不应该入选的球员。你的判断唯一有影响的地方是在边界案例中。假设你搞砸了，低估了第20好的球员，导致他没有入选，他的位置被第21好的球员取代。你仍然选择了一个好球队。如果球员的能力分布正常，第21好的球员只会比第20好的球员稍微差一点。他们之间的差异可能小于测量误差。&lt;/p&gt;&#xA;&lt;p&gt;第20好的球员可能觉得自己被错误判断了。但你的目标不是提供估计人们能力的服务。而是选择一个球队，如果第20和第21好的球员之间的差异小于测量误差，你仍然最优地做到了。&lt;/p&gt;&#xA;&lt;p&gt;甚至用&amp;quot;不公正&amp;quot;这个词来描述这种错误判断也是错误的类比。它的目标不是产生对任何给定个人的正确估计，而是选择一个合理的最优集合。&lt;/p&gt;&#xA;&lt;p&gt;导致我们在这里误入歧途的一件事是选择者似乎处于权力地位。这使他看起来像法官。如果你把判断你的人视为顾客而不是法官，对公平的期望就消失了。一本好小说的作者不会抱怨读者更喜欢有艳丽封面的低俗小说是不公平的。愚蠢，也许，但不公平。&lt;/p&gt;&#xA;&lt;p&gt;我们早期的训练和自我中心结合起来使我们相信每一次对我们的判断都是关于我们。事实上大多数不是。这是一个罕见的例子，减少自我中心会使人们更自信。一旦你意识到大多数判断你的人多么不关心正确判断你——一旦你意识到由于大多数申请人池的正常分布，在判断最有影响的情况下，准确判断最不重要——你就不会那么个人化地对待拒绝。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，不那么个人化地对待拒绝可能帮助你更少地被拒绝。如果你认为判断你的人会努力正确判断你，你可以被动。但你越意识到大多数判断受到随机、无关因素的极大影响——大多数判断你的人更像善变的小说购买者而不是智慧有洞察力的地方官——你越意识到你可以做事情来影响结果。&lt;/p&gt;&#xA;&lt;p&gt;应用这个原则的一个好地方是大学申请。大多数申请大学的高中生以通常儿童的自卑和自我中心混合这样做：自卑在于他们假设招生委员会必须是全知的；自我中心在于他们假设招生委员会足够关心他们，深入挖掘他们的申请，弄清楚他们是否优秀。这些结合起来使申请人在申请时被动，在被拒绝时受伤。如果大学申请人意识到大多数选拔过程多么快速和非个人化，他们会更努力推销自己，不那么个人化地对待结果。&lt;/p&gt;&#xA;&lt;p&gt;西班牙语翻译 | 俄语翻译 | 阿拉伯语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>招聘已经过时</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/hiring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/hiring/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/hiring/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/hiring.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/hiring.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/hiring.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;招聘已经过时&#34;&gt;招聘已经过时&lt;/h1&gt;&#xA;&lt;p&gt;2005年5月&lt;/p&gt;&#xA;&lt;p&gt;（本文源于在伯克利CSUA的演讲。）&lt;/p&gt;&#xA;&lt;p&gt;现在互联网上的三大巨头是雅虎、谷歌和微软。他们创始人的平均年龄：24岁。所以现在已经很确定地建立了研究生可以创办成功公司的观念。如果研究生能做到，为什么本科生不能呢？&lt;/p&gt;&#xA;&lt;p&gt;像技术领域的一切一样，创办创业公司的成本已经急剧下降。现在它如此之低，以至于消失在了噪音中。创办基于网络的创业公司的主要成本是食物和房租。这意味着创办公司并不比做一个彻底的懒虫花费更多。如果你准备靠拉面生活，你很可能用一万美元的种子资金就可以创办一家创业公司。&lt;/p&gt;&#xA;&lt;p&gt;创办公司的成本越低，你需要投资者的许可来做的就越少。所以很多现在永远无法创办公司的人将能够创办公司。&lt;/p&gt;&#xA;&lt;p&gt;最有趣的子集可能是那些二十出头的人。我对拥有投资者想要的一切除了智力的创始人，或者除了精力以外的一切都不感兴趣的创始人并不那么兴奋。被新的更低门槛解放的最有前途的群体是那些拥有投资者想要的一切除了经验的人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;市场价格&#34;&gt;市场价格&lt;/h2&gt;&#xA;&lt;p&gt;我曾经声称书呆子在中学不受欢迎主要是因为他们有比全职追求受欢迎更重要的事情要做。有些人说我只是在告诉人们他们想听的话。好吧，我现在要以一种壮观的方式来这样做：我认为大学生被低估了。&lt;/p&gt;&#xA;&lt;p&gt;或者更准确地说，我认为很少有人意识到20岁人价值的巨大差异。有些，确实，不是很能干。但其他人比几乎所有30岁的人更能干。[1]&lt;/p&gt;&#xA;&lt;p&gt;直到现在，问题一直在于很难挑选出他们。世界上每个风险投资家，如果他们能回到过去，都会尝试投资微软。但当时会有谁投资？有多少人会意识到这个特定的19岁少年是比尔·盖茨？&lt;/p&gt;&#xA;&lt;p&gt;很难判断年轻人，因为（a）他们变化很快，（b）他们之间有很大差异，（c）他们个人前后不一致。最后一点是个大问题。当你年轻时，即使你很聪明，你偶尔也会说蠢话做蠢事。所以如果算法是过滤掉说蠢话的人，就像许多投资者和雇主无意识做的那样，你会得到很多误报。&lt;/p&gt;&#xA;&lt;p&gt;大多数刚从大学招聘人的组织只意识到22岁人的平均价值，这并不高。因此，二十世纪的大多数理念是每个人都必须从某种入门级工作的实习生开始。组织意识到进来的人流有很大差异，但他们没有追求这个想法，而是倾向于压制它，相信即使是最有前途的孩子从底层开始也是好的，这样他们就不会头脑膨胀。&lt;/p&gt;&#xA;&lt;p&gt;最有生产力的年轻人总是被大组织低估，因为年轻人还没有表现可以衡量，而且对他们能力的任何猜测错误都会趋向于平均值。&lt;/p&gt;&#xA;&lt;p&gt;一个特别有生产力的22岁人该做什么？你能做的一件事是绕过组织，直接到用户那里。任何雇佣你的公司，从经济上讲，都在作为顾客的代理。他们给你的薪酬率（尽管他们可能没有意识到这一点）是试图猜测你对用户的价值。但有一种方法可以上诉他们的判断。如果你愿意，你可以选择通过创办自己的公司来直接被用户估值。&lt;/p&gt;&#xA;&lt;p&gt;市场比任何雇主都要有洞察力得多。而且它是完全非歧视性的。在互联网上，没人知道你是一条狗。更重要的是，没人知道你22岁。用户关心的只是你的网站或软件是否给他们想要的东西。他们不关心背后的人是否是个高中生。&lt;/p&gt;&#xA;&lt;p&gt;如果你真的很有生产力，为什么不让雇主按市场价格付给你薪水？为什么去大公司做普通员工，而你可以创办创业公司让他们收购你来得到你？&lt;/p&gt;&#xA;&lt;p&gt;当大多数人听到&amp;quot;创业公司&amp;quot;这个词时，他们想到的是那些已经上市的名公司。但大多数成功的创业公司都是通过被收购成功的。而且通常收购者不仅想要技术，还想要创造它的人。&lt;/p&gt;&#xA;&lt;p&gt;大公司通常在创业公司盈利之前就收购它们。显然，在这种情况下，他们不是为了收入。他们想要的是开发团队和迄今为止他们构建的软件。当一家创业公司在六个月内被以200或300万美元收购时，这实际上更像是一种签约奖金而不是收购。&lt;/p&gt;&#xA;&lt;p&gt;我认为这种事情会越来越多发生，而且这对每个人都更好。显然，对创办创业公司的人来说更好，因为他们前期得到一大笔钱。但我认为对收购者来说也会更好。大公司的中心问题，也是他们比小公司生产力低得多的主要原因，是难以评估每个人的工作。购买萌芽阶段的创业公司为他们解决了这个问题：收购者在开发人员证明自己之前不用付款。收购者在下行方面受到保护，但仍然获得大部分上行收益。&lt;/p&gt;&#xA;&lt;h2 id=&#34;产品开发&#34;&gt;产品开发&lt;/h2&gt;&#xA;&lt;p&gt;购买创业公司还解决了困扰大公司的另一个问题：他们不能做产品开发。大公司擅长从现有产品中提取价值，但不擅长创造新产品。&lt;/p&gt;&#xA;&lt;p&gt;为什么？值得详细研究这种现象，因为这是创业公司存在的理由。&lt;/p&gt;&#xA;&lt;p&gt;首先，大多数大公司都有某种地盘要保护，这往往会扭曲他们的开发决策。例如，基于网络的应用程序现在很热门，但在微软内部肯定对它们有很多矛盾情绪，因为基于软件的整个想法威胁着桌面。所以微软最终得到的任何基于网络的应用程序，可能像Hotmail一样，是在公司外部开发的。&lt;/p&gt;&#xA;&lt;p&gt;大公司不擅长开发新产品的另一个原因是，做那种事情的人往往在大公司中没有多大权力（除非碰巧是CEO）。颠覆性技术是由颠覆性的人开发的。他们要么不为大公司工作，要么被唯唯诺诺的人智取，相比之下影响力很小。&lt;/p&gt;&#xA;&lt;p&gt;大公司还失败是因为他们通常每种东西只做一个。当你只有一个网络浏览器时，你不能用它做任何真正有风险的事情。如果十个不同的创业公司设计十个不同的网络浏览器，你选择最好的，你可能会得到更好的东西。&lt;/p&gt;&#xA;&lt;p&gt;这个问题更一般的版本是，对公司来说，新想法太多了，无法全部探索。现在可能有500家创业公司认为他们在制造微软可能购买的东西。即使是微软可能也无法管理500个内部开发项目。&lt;/p&gt;&#xA;&lt;p&gt;大公司也不以正确的方式付钱给人。在大公司开发新产品的人无论成功与否都得到大致相同的报酬。在创业公司的人期望如果产品成功就变得富有，如果失败就一无所获。[2] 所以很自然，创业公司的人工作努力得多。&lt;/p&gt;&#xA;&lt;p&gt;大公司的庞大规模本身就是个障碍。在创业公司，开发人员经常被迫直接与用户交谈，无论他们是否愿意，因为没有其他人做销售和支持。做销售很痛苦，但通过尝试向人们推销东西，你比阅读他们在焦点小组中所说的学到更多。&lt;/p&gt;&#xA;&lt;p&gt;然后当然，大公司在产品开发方面很糟糕，因为他们在一切方面都很糟糕。在大公司比小公司发生的一切都慢，而产品开发是必须快速发生的事情，因为你必须经过很多次迭代才能得到好东西。&lt;/p&gt;&#xA;&lt;h2 id=&#34;趋势&#34;&gt;趋势&lt;/h2&gt;&#xA;&lt;p&gt;我认为大公司购买创业公司的趋势只会加速。 remaining的最大障碍之一是骄傲。大多数公司，至少无意识地，觉得他们应该能够在内部开发东西，而购买创业公司在某种程度上是承认失败。因此，就像人们通常对待承认失败一样，他们尽可能推迟它。这使得收购在最终发生时非常昂贵。&lt;/p&gt;&#xA;&lt;p&gt;公司应该做的是在创业公司年轻时就发现它们，在风险投资家把它们膨胀成需要花费数亿美元收购的东西之前。风险投资家添加的大部分内容，收购者无论如何都不需要。&lt;/p&gt;&#xA;&lt;p&gt;为什么收购者不尝试预测他们将不得不以数亿美元收购的公司，并以十分之一或二十分之一的价格及早抓住它们？因为他们无法提前预测赢家？如果他们只支付二十分之一的价格，他们只需要预测到二十分之一那么好就行。他们肯定能做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;我认为收购技术的公司将逐渐学会追逐更早期的创业公司。他们不一定直接收购。解决方案可能是投资和收购的某种混合：例如，购买公司的一部分并获得以后购买其余部分的选择权。&lt;/p&gt;&#xA;&lt;p&gt;当公司购买创业公司时，他们有效地融合了招聘和产品开发。我认为这比分别做两件事更有效，因为你总是得到真正致力于他们所做事情的人。&lt;/p&gt;&#xA;&lt;p&gt;此外，这种方法产生了已经很好合作的开发团队。他们之间的任何冲突都在创业公司的火热考验中解决了。到收购者得到他们时，他们在互相完成对方的句子。这在软件中很有价值，因为如此多的错误发生在不同人代码之间的边界上。&lt;/p&gt;&#xA;&lt;h2 id=&#34;投资者&#34;&gt;投资者&lt;/h2&gt;&#xA;&lt;p&gt;创办公司越来越便宜不仅让黑客相对于雇主有更多权力。它也让他们相对于投资者有更多权力。&lt;/p&gt;&#xA;&lt;p&gt;风险投资家中的传统智慧是，不应该允许黑客经营自己的公司。创始人应该接受MBA作为他们的老板，自己承担某种首席技术官的头衔。可能有情况下这是个好主意。但我认为创始人将越来越能够就控制问题推回去，因为他们不再像过去那样需要投资者的钱。&lt;/p&gt;&#xA;&lt;p&gt;创业公司是一个相对较新的现象。仙童半导体被认为是第一家风险投资支持的创业公司，他们成立于1959年，不到五十年前。以社会变化的时间尺度衡量，我们现在拥有的还是测试版。所以我们不应该假设创业公司现在的工作方式就是它们必须工作的方式。&lt;/p&gt;&#xA;&lt;p&gt;仙童需要很多钱才能开始。他们必须建造实际的工厂。现在基于网络的创业公司的第一轮风险融资资金花在什么上？更多的钱不能让软件写得更快；设施不需要，因为现在那些可以相当便宜；钱真正能为你买到的只是销售和营销。我承认销售队伍是有价值的。但营销越来越无关紧要。在互联网上，任何真正好的东西都会通过口碑传播。&lt;/p&gt;&#xA;&lt;p&gt;投资者的权力来自金钱。当创业公司需要更少的钱时，投资者对他们的权力就更小。所以未来的创始人可能不必接受新的CEO，如果他们不想要的话。风险投资家将不得不被踢着尖叫地沿着这条路走，但就像许多人们必须被踢着尖叫着推向的事情一样，这可能实际上对他们有好处。&lt;/p&gt;&#xA;&lt;p&gt;谷歌是事情发展方向的一个标志。作为资助的条件，他们的投资者坚持他们雇佣一个有经验的老家伙作为CEO。但据我所知，创始人没有 just 屈服并接受风险投资家想要的任何人。他们推迟了整整一年，当他们最终接受CEO时，他们选择了一个拥有计算机科学博士学位的人。&lt;/p&gt;</description>
    </item>
    <item>
      <title>股权方程式</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/equity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/equity/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/equity/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/equity.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/equity.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/equity.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;股权方程式&#34;&gt;股权方程式&lt;/h1&gt;&#xA;&lt;p&gt;2007年7月&lt;/p&gt;&#xA;&lt;p&gt;投资者想要给你钱来换取你创业公司的一定股份。你应该接受吗？你即将雇佣第一个员工。应该给他多少股票？&lt;/p&gt;&#xA;&lt;p&gt;这些是创始人面临的最难的问题之一。然而两个问题都有相同的答案：&lt;/p&gt;&#xA;&lt;p&gt;1/(1 - n)&lt;/p&gt;&#xA;&lt;p&gt;每当你在用公司的股票交换任何东西时，无论是金钱、员工还是与另一家公司的交易，决定是否进行的测试都是相同的。如果你用股票换取的东西能够足够改善你的平均结果，使得你剩下的(100 - n)%的股份比整个公司在交易前的价值还要高，那么你就应该放弃公司n%的股份。&lt;/p&gt;&#xA;&lt;p&gt;例如，如果一个投资者想购买你公司的一半股份，这项投资必须改善你的平均结果多少才能让你盈亏平衡？显然，它必须使公司价值翻倍：如果你用公司的一半股份换取某种能使公司平均结果翻倍以上的东西，你就净赚了。你拥有某个价值翻倍以上的东西的一半份额。&lt;/p&gt;&#xA;&lt;p&gt;在一般情况下，如果你放弃的公司比例是n，如果这项交易使公司的价值超过1/(1 - n)，那么这就是一个好交易。&lt;/p&gt;&#xA;&lt;p&gt;例如，假设Y Combinator提议资助你，换取你公司7%的股份。在这种情况下，n是.07，1/(1 - n)是1.075。所以如果你相信我们能使你的平均结果提高超过7.5%，你就应该接受这笔交易。如果我们使你的结果提高10%，你就净赚了，因为你持有的剩余.93股份价值.93 x 1.1 = 1.023。[1]&lt;/p&gt;&#xA;&lt;p&gt;股权方程式告诉我们的一件事是，至少在财务上，从顶级风险投资公司拿钱可以是一笔非常好的交易。Sequoia的Greg Mcadoo最近在YC晚宴上说，当Sequoia单独投资时，他们喜欢拿一家公司大约30%的股份。1/.7 = 1.43，这意味着如果他们能使你的结果提高超过43%，这笔交易就值得接受。对于一般的创业公司来说，这将是一个非凡的便宜交易。光是能够说他们得到了Sequoia的资助就能提高一般创业公司的前景超过43%，即使他们实际上从来没有拿到钱。&lt;/p&gt;&#xA;&lt;p&gt;Sequoia之所以是这么好的交易，是因为他们拿取的公司比例人为地偏低。他们甚至不试图为他们的投资获得市场价格；他们限制他们的持股量，给创始人留下足够的股份，让他们觉得公司仍然是他们的。&lt;/p&gt;&#xA;&lt;p&gt;问题是Sequoia每年收到大约6000份商业计划，资助其中大约20份，所以获得这个好交易的机会是300分之1。那些通过的公司不是一般的创业公司。&lt;/p&gt;&#xA;&lt;p&gt;当然，在风险投资交易中还有其他因素需要考虑。它从来不仅仅是金钱和股票的直接交易。但如果是的话，从顶级公司拿钱通常会是便宜货。&lt;/p&gt;&#xA;&lt;p&gt;在给员工股票时，你可以使用相同的公式，但它以相反的方式运作。如果i是公司增加某个新人后的平均结果，那么他们价值n，使得i = 1/(1 - n)。这意味着n = (i - 1)/i。&lt;/p&gt;&#xA;&lt;p&gt;例如，假设你只有两个创始人，你想雇佣一个额外的黑客，他非常优秀，你觉得他会使整个公司的平均结果提高20%。n = (1.2 - 1)/1.2 = .167。所以如果你用公司16.7%的股份交换他，你就会盈亏平衡。&lt;/p&gt;&#xA;&lt;p&gt;这并不意味着16.7%是给他的正确股票数量。股票不是雇佣某人的唯一成本：通常还有工资和开销。如果公司在这笔交易中仅仅盈亏平衡，就没有理由这样做。&lt;/p&gt;</description>
    </item>
    <item>
      <title>默认生存还是默认死亡？</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/aord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/aord/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/aord/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div&#xA;  class=&#34;link-card group relative my-3 w-full overflow-hidden rounded-xl border border-[var(--lc-border,rgba(15,23,42,0.12))] bg-[var(--lc-bg,var(--card-bg,var(--surface,#ffffff))))] transition-shadow duration-150 hover:shadow-[var(--lc-shadow-hover,0_14px_30px_-18px_rgba(15,23,42,0.35))]&#34;&#xA;  data-url=&#34;https://www.paulgraham.com/aord.html&#34;&#xA;&gt;&#xA;  &lt;a&#xA;    class=&#34;link-card__fallback block px-4 py-3 text-sm font-medium text-[var(--lc-url,var(--link-color,#0e6a85))] underline-offset-4 hover:underline&#34;&#xA;    href=&#34;https://www.paulgraham.com/aord.html&#34;&#xA;    target=&#34;_blank&#34;&#xA;    rel=&#34;noopener&#34;&#xA;  &gt;&#xA;    https://www.paulgraham.com/aord.html&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;默认生存还是默认死亡&#34;&gt;默认生存还是默认死亡？&lt;/h1&gt;&#xA;&lt;p&gt;2015年10月&lt;/p&gt;&#xA;&lt;p&gt;当我和一家已经运营了8、9个月以上的创业公司交谈时，我想要知道的第一件事几乎总是相同的。假设他们的支出保持不变，收入增长是过去几个月的水平，他们能凭借剩余的资金实现盈利吗？或者更戏剧性地说，默认情况下他们会生存还是会死亡？&lt;/p&gt;&#xA;&lt;p&gt;令人震惊的是，创始人自己往往不知道。我交谈的创始人中有一半不知道自己是默认生存还是默认死亡。&lt;/p&gt;&#xA;&lt;p&gt;如果你也在其中，Trevor Blackwell制作了一个方便的计算器，你可以用它来找出答案。&lt;/p&gt;&#xA;&lt;p&gt;我首先想知道一家创业公司是默认生存还是默认死亡的原因是，接下来的对话取决于这个答案。如果公司是默认生存的，我们可以谈论他们可能做的雄心勃勃的新事情。如果是默认死亡的，我们可能需要讨论如何拯救它。我们知道当前的轨迹会很糟糕。他们如何摆脱这个轨迹？&lt;/p&gt;&#xA;&lt;p&gt;为什么很少有创始人知道自己是否是默认生存还是默认死亡？主要原因是，他们不习惯问这个问题。早期问这个问题没有意义，就像问一个3岁的孩子打算如何养活自己一样。但随着公司年龄的增长，这个问题从无意义变成了关键。这种转变往往让人们措手不及。&lt;/p&gt;&#xA;&lt;p&gt;我提出以下解决方案：不要等到太晚才开始问自己是默认生存还是默认死亡，而是太早就开始问。很难确定这个问题什么时候会发生极性转变。但过早开始担心默认死亡可能并不那么危险，而太晚开始担心则非常危险。&lt;/p&gt;&#xA;&lt;p&gt;原因是我之前写过的现象：致命的夹击。致命的夹击就是默认死亡+增长缓慢+没有足够的时间来修复。而创始人陷入这种情况的原因是他们没有意识到自己正朝那个方向前进。&lt;/p&gt;&#xA;&lt;p&gt;创始人不问自己是否是默认生存还是默认死亡的另一个原因是：他们假设筹集更多资金会很容易。但这个假设往往是错误的，更糟糕的是，你越是依赖它，它就越不真实。&lt;/p&gt;&#xA;&lt;p&gt;也许把事实和希望分开会有所帮助。不要用模糊的乐观来思考未来，而是明确地分开各个组成部分。说&amp;quot;我们是默认死亡，但我们指望投资者拯救我们。&amp;ldquo;也许当你这么说时，它会在你的头脑中触发和我一样的警报。如果你足够早地触发警报，你也许能够避免致命的夹击。&lt;/p&gt;&#xA;&lt;p&gt;如果你能指望投资者拯救你，那么处于默认死亡状态是安全的。通常他们的兴趣是增长的函数。如果你有陡峭的收入增长，比如每年超过5倍，即使你没有盈利，你也可以开始指望投资者感兴趣。[1] 但投资者如此善变，你永远只能开始指望他们。有时候你的业务的一些方面会吓跑投资者，即使你的增长很棒。所以无论你的增长有多好，你永远不能安全地把融资当作计划A以外的任何东西。你也应该有计划B：你应该确切地知道（写下）如果筹集不到更多资金需要做什么才能生存，以及如果计划A不起作用，你什么时候必须切换到计划B。&lt;/p&gt;&#xA;&lt;p&gt;无论如何，快速增长与廉价运营远非许多创始人认为的那种尖锐对立。在实践中，创业公司的支出与增长速度之间的联系出人意料地少。当创业公司快速增长时，通常是因为产品击中了要害，在某种意义上直接击中了一些巨大的需求。当创业公司花费很多时，通常是因为产品开发或销售成本高，或者仅仅因为他们浪费。&lt;/p&gt;&#xA;&lt;p&gt;如果你注意到了，这时你不仅要问如何避免致命的夹击，还要问如何避免默认死亡。那个很容易：不要招聘太快。招聘太快是迄今为止融资创业公司最大的杀手。[2]&lt;/p&gt;&#xA;&lt;p&gt;创始人告诉自己他们需要招聘才能增长。但大多数人都高估了这种需求，而不是低估。为什么？部分原因是工作太多。天真的创始人认为，只要雇足够的人，一切都会完成。部分原因是成功的创业公司有很多员工，所以看起来要成功就应该这样做。事实上，成功创业公司的大量员工更可能是增长的结果，而不是原因。部分原因是当创始人增长缓慢时，他们不想面对通常真正的原因：产品不够有吸引力。&lt;/p&gt;&#xA;&lt;p&gt;此外，刚筹集到资金的创始人通常被资助他们的VC鼓励过度招聘。要么杀死要么治愈的策略对VC来说是最优的，因为他们受到投资组合效应的保护。VC想要吹捧你，在这个词的一种或另一种意义上。但作为创始人，你的动机不同。你最想生存。[3]&lt;/p&gt;&#xA;&lt;p&gt;创业公司死亡的一个常见方式是：他们制造了中等吸引力的产品，有不错的初始增长。他们相当容易地筹集了第一轮资金，因为创始人看起来聪明，想法听起来合理。但因为产品只有中等吸引力，增长还行但不棒。创始人说服自己招聘一群人是提升增长的方式。他们的投资者同意。但是（因为产品只有中等吸引力）增长永远不会到来。现在他们的资金迅速耗尽。他们希望进一步的投资能拯救他们。但因为他们有高支出和缓慢增长，他们对投资者不再有吸引力。他们无法筹集更多资金，公司死亡。&lt;/p&gt;&#xA;&lt;p&gt;公司应该做的是解决基本问题：产品只有中等吸引力。招聘人员很少是解决这个问题的方法。更多时候它使情况变得更糟。在这个早期阶段，产品需要的是进化，而不是&amp;quot;构建&amp;rdquo;，而用更少的人通常更容易做到这一点。[4]&lt;/p&gt;&#xA;&lt;p&gt;询问自己是默认生存还是默认死亡可能会拯救你免于此。也许它触发的警报能够抵消推动你过度招聘的力量。相反，你将被迫寻求其他增长方式。例如，通过做那些无法扩展的事情，或者通过只有创始人能做到的方式重新设计产品。对于许多（如果不是大多数）创业公司来说，这些增长路径实际上是最有效的。&lt;/p&gt;&#xA;&lt;p&gt;Airbnb在Y Combinator结束时筹集资金后等了4个月才雇佣第一名员工。在此期间，创始人严重超负荷工作。但他们是在超负荷工作，将Airbnb发展成为现在这个惊人成功的有机体。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 陡峭的使用增长也会让投资者感兴趣。收入最终将是使用的一个恒定倍数，所以x%的使用增长预测x%的收入增长。但在实践中，投资者打折了仅仅是预测的收入，所以如果你在衡量使用，你需要更高的增长率来打动投资者。&lt;/p&gt;&#xA;&lt;p&gt;[2] 没有筹集资金的创业公司因无法负担而免于招聘过快。但这并不意味着你应该为了避免这个问题而避免筹集资金，就像完全禁欲不是避免成为酗酒者的唯一方式一样。&lt;/p&gt;&#xA;&lt;p&gt;[3] 我不会惊讶VC倾向于推动创始人过度招聘甚至不符合他们自己的利益。他们不知道那些因过度支出而死亡的创业公司中，有多少如果生存下来会做得很好。我猜数量相当可观。&lt;/p&gt;&#xA;&lt;p&gt;[4] 阅读草稿后，Sam Altman写道：&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;我认为你应该更加强调招聘的观点。我认为大致准确地说，YC最成功的公司从来都不是招聘最快的，而伟大创始人的标志之一是能够抵制这种冲动。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;Paul Buchheit补充道：&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;我看到很多相关的问题是过早扩大规模——创始人拿一个不太真正有效的小企业（通常是糟糕的单位经济），然后为了给人留下深刻印象的增长数字而扩大规模。这类似于过度招聘，因为它使业务一旦变大就更难修复，而且他们确实在快速流失现金。&amp;rdquo;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
