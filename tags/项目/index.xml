<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目 on Linguage</title>
    <link>http://localhost:1366/tags/%E9%A1%B9%E7%9B%AE/</link>
    <description>Recent content in 项目 on Linguage</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1366/tags/%E9%A1%B9%E7%9B%AE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何创建Google</title>
      <link>http://localhost:1366/paul_graham/essays_zh/google/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1366/paul_graham/essays_zh/google/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1366/paul_graham/essays_en/google/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;如何创建google&#34;&gt;如何创建Google&lt;/h1&gt;&#xA;&lt;p&gt;2024年3月&lt;/p&gt;&#xA;&lt;p&gt;（这是我对14岁和15岁的孩子们做的一次演讲，内容是如果他们以后想创业，现在应该做什么。很多学校认为他们应该告诉学生一些关于创业的事情。这就是我认为他们应该告诉学生的。）&lt;/p&gt;&#xA;&lt;p&gt;你们大多数人可能认为，当你们进入所谓的现实世界时，你们最终将不得不找某种工作。这不是真的，今天我要谈论一个你可以用来避免找工作的技巧。&lt;/p&gt;&#xA;&lt;p&gt;这个技巧就是创办自己的公司。所以这不是避免工作的技巧，因为如果你创办自己的公司，你会比有一份普通工作时更努力工作。但是你会避免工作中带来的许多烦人的事情，包括老板告诉你该做什么。&lt;/p&gt;&#xA;&lt;p&gt;从事自己的项目比从事别人的项目更令人兴奋。你也可以变得富有得多。事实上，这是真正致富的标准方法。如果你看看偶尔在媒体上发布的最富有的人名单，几乎所有人都是通过创办自己的公司做到的。&lt;/p&gt;&#xA;&lt;p&gt;创办自己的公司可以意味着从开理发店到创办Google的任何事情。我在这里要谈论的是这个连续体的一个极端端。我要告诉你如何创建Google。&lt;/p&gt;&#xA;&lt;p&gt;连续体的Google端的公司在年轻时被称为初创公司。我了解它们的原因是，我妻子杰西卡和我创办了一个名为Y Combinator的组织，它基本上是一个初创公司工厂。自2005年以来，Y Combinator已经资助了4000多家初创公司。所以我们确切地知道创办初创公司需要什么，因为我们过去19年来一直在帮助人们做这件事。&lt;/p&gt;&#xA;&lt;p&gt;你可能会认为我说要告诉你如何创建Google是在开玩笑。你可能在想&amp;quot;我们怎么能创建Google？&amp;ldquo;但这实际上就是创建Google的人在开始之前所想的。如果你告诉Google的创始人拉里·佩奇和谢尔盖·布林，他们即将创办的公司有一天会价值超过万亿美元，他们的大脑会爆炸。&lt;/p&gt;&#xA;&lt;p&gt;当你开始做初创公司时，你只能知道它似乎值得追求。你不知道它会变成一家价值数十亿美元的公司还是一家倒闭的公司。所以当我说我要告诉你如何创建Google时，我的意思是我要告诉你如何达到可以创办一家公司的程度，这家公司成为Google的机会与Google在开始时成为Google的机会一样多。[1]&lt;/p&gt;&#xA;&lt;p&gt;你如何从现在的位置达到可以创办成功初创公司的程度？你需要三样东西。你需要擅长某种技术，你需要一个关于你要构建什么的主意，你需要联合创始人来一起创办公司。&lt;/p&gt;&#xA;&lt;p&gt;你如何变得擅长技术？你如何选择要擅长哪种技术？这两个问题的答案原来是相同的：做你自己的项目。不要试图猜测基因编辑、大语言模型或火箭是否会成为最有价值的技术。没有人能预测这一点。只要做你最感兴趣的事情。你会对你感兴趣的事情比因为你认为应该做而做的事情更努力工作。&lt;/p&gt;&#xA;&lt;p&gt;如果你不确定要擅长哪种技术，那就擅长编程。这是过去30年普通初创公司的来源，而这在未来10年内可能不会改变。&lt;/p&gt;&#xA;&lt;p&gt;你们中那些在学校上计算机科学课程的人现在可能在想，好吧，我们已经搞定了。我们已经在学习所有关于编程的知识。但是抱歉，这还不够。你必须做你自己的项目，而不仅仅是在课堂上学习东西。你可以在计算机科学课程中取得好成绩，但从来没有真正学会编程。事实上，你可以从顶尖大学毕业，获得计算机科学学位，但仍然不擅长编程。这就是为什么所有科技公司都会让你参加编程测试才会雇佣你，不管你去过什么大学或在那里表现如何。他们知道成绩和考试成绩证明不了什么。&lt;/p&gt;&#xA;&lt;p&gt;如果你真的想学会编程，你必须做你自己的项目。那样你学得快得多。想象一下，你在写一个游戏，里面有你想做的事情，而你不知道怎么做。你会比我快得多地弄明白如何做，比你在课堂上学到任何东西都快。&lt;/p&gt;&#xA;&lt;p&gt;不过，你不必学习编程。如果你想知道什么算作技术，它实际上包括你可以用&amp;quot;制造&amp;quot;或&amp;quot;构建&amp;quot;这个词描述的一切。所以焊接算，制作衣服算，制作视频也算。无论你最感兴趣的是什么。关键的区别在于你是在生产还是在消费。你在写电脑游戏，还是在玩电脑游戏？这就是分界线。&lt;/p&gt;&#xA;&lt;p&gt;苹果公司的创始人史蒂夫·乔布斯在青少年时期花时间研究书法——你在中世纪手稿中看到的那种美丽书写。没有人，包括他自己，认为这会对他的职业生涯有帮助。他这样做只是因为他感兴趣。但结果证明这对他的帮助很大。让苹果真正变得伟大的计算机，Macintosh，恰恰在计算机变得足够强大可以制作像印刷书籍中的字母而不是你在8位游戏中看到的计算机式字母的时候问世。苹果在这方面击败了所有人，原因之一是史蒂夫是计算机行业中少数真正懂得图形设计的人之一。&lt;/p&gt;&#xA;&lt;p&gt;不要觉得你的项目必须是严肃的。它们可以像你喜欢的那样轻浮，只要你在构建你兴奋的东西。大概90%的程序员从构建游戏开始。他们和他们的朋友喜欢玩游戏。所以他们构建他们和他们的朋友想要的那种东西。如果你有一天想创办初创公司，这正是你15岁时应该做的事情。&lt;/p&gt;&#xA;&lt;p&gt;你不必只做一个项目。事实上，学习多种东西是好的。史蒂夫·乔布斯不仅学习了书法。他还学习了电子学，这更有价值。无论你最感兴趣的是什么。（你注意到这里的主题了吗？）&lt;/p&gt;&#xA;&lt;p&gt;所以这就是你需要的三个东西中的第一个，变得擅长某种或某些技术。你做这件事的方式和你变得擅长小提琴或足球的方式相同：练习。如果你在22岁创办初创公司，现在开始写你自己的程序，那么到创办公司时，你将至少花费7年时间练习编写代码，任何事情练习7年后你都可以变得相当擅长。&lt;/p&gt;&#xA;&lt;p&gt;假设你现在22岁并且已经成功了：你现在真的擅长某种技术。你如何获得初创公司的主意？这似乎可能是困难的部分。即使你是一个好的程序员，你如何获得创建Google的主意？&lt;/p&gt;&#xA;&lt;p&gt;实际上，一旦你擅长技术，获得初创公司的主意就很容易。一旦你擅长某种技术，当你看世界时，你会看到缺失事物周围的虚线轮廓。你开始能够看到技术本身缺失的东西，以及可以使用它修复的所有破损东西，而每一个都是潜在的初创公司。&lt;/p&gt;&#xA;&lt;p&gt;在我们家附近的小镇上有一家商店，门口有个标志警告门很难关上。这个标志已经存在好几年了。对商店里的人来说，门卡住一定看起来像这种神秘的自然现象，他们所能做的就是竖起一个标志警告顾客。但任何木匠看到这种情况都会想&amp;quot;为什么不把卡住的部分刨掉？&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;一旦你擅长编程，世界上所有缺失的软件开始变得像对木匠来说卡住的门一样明显。我给你一个真实的例子。回到20世纪，美国大学过去出版包含所有学生姓名和联系信息的印刷目录。当我告诉你这些目录被称为什么时，你会知道我在谈论哪个初创公司。它们被称为facebook，因为通常每个学生名字旁边都有一张照片。&lt;/p&gt;&#xA;&lt;p&gt;所以马克·扎克伯格2002年出现在哈佛，而大学仍然没有把facebook放到网上。每个单独的宿舍都有在线的facebook，但没有整个大学的。大学行政部门一直在努力开会讨论这个问题，大概再过十年左右可能会解决问题。大多数学生没有有意识地注意到有什么问题。但马克是个程序员。他看着这种情况想&amp;quot;嗯，这很愚蠢。我可以在一晚上写个程序来解决这个问题。只要让人们上传他们自己的照片，然后将数据组合成整个大学的新网站。&amp;ldquo;所以他做了。几乎一夜之间，他就有数千用户。&lt;/p&gt;&#xA;&lt;p&gt;当然Facebook当时还不是初创公司。它只是一个&amp;hellip;项目。又是这个词。项目不仅是学习技术的最佳方式。它们也是初创公司主意的最佳来源。&lt;/p&gt;&#xA;&lt;p&gt;Facebook在这方面并不不寻常。苹果和Google也是从项目开始的。苹果本不是为了成为一家公司。史蒂夫·沃兹尼亚克只是想建造自己的计算机。它只有在史蒂夫·乔布斯说&amp;quot;嘿，我想知道我们是否能向其他人销售这台计算机的计划&amp;quot;时才变成一家公司。苹果就是这样开始的。他们甚至没有销售计算机，只是销售计算机的计划。你能想象这家公司看起来多么蹩脚吗？&lt;/p&gt;&#xA;&lt;p&gt;Google也是如此。拉里和谢尔盖最初并不是试图创办公司。他们只是试图让搜索变得更好。在Google之前，大多数搜索引擎不尝试按重要性对它们给你的结果进行排序。如果你搜索&amp;quot;rugby&amp;rdquo;，它们只是给你包含&amp;quot;rugby&amp;quot;这个词的每个网页。1997年网络如此之小，这实际上有效！有点。可能只有20或30个包含&amp;quot;rugby&amp;quot;这个词的页面，但网络呈指数级增长，这意味着这种搜索方式变得指数级更加破损。大多数用户只是想，&amp;ldquo;哇，我肯定要查看很多搜索结果才能找到我想要的东西。&amp;ldquo;门卡住了。但和马克一样，拉里和谢尔盖是程序员。和马克一样，他们看着这种情况想&amp;quot;嗯，这很愚蠢。一些关于rugby的页面比其他页面更重要。让我们弄清楚哪些是更重要的，先显示它们。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;事后看来，这显然是一个很好的初创公司主意。当时并不明显。永远不会明显。如果创办苹果、Google或Facebook显然是个好主意，其他人早就已经做了。这就是为什么最好的初创公司成长自不打算成为初创公司的项目。你不是在试图创办公司。你只是在跟随你对什么有趣的直觉。如果你年轻且擅长技术，那么你对什么有趣的潜意识本能比你对什么会是好公司的有意识想法更好。&lt;/p&gt;&#xA;&lt;p&gt;所以，如果你是年轻的创始人，为你自己和你的朋友构建东西使用是至关重要的。年轻创始人犯的最大错误是为某些神秘的其他人群构建东西。但如果你能制作一些你和朋友真正想要使用的东西——你的朋友不是出于对你的忠诚才使用，如果你关闭它他们会非常伤心——那么你几乎肯定有一个好初创公司主意的萌芽。对你来说它可能不像初创公司。可能不清楚如何从中赚钱。但相信我，有办法。&lt;/p&gt;&#xA;&lt;p&gt;你在初创公司主意中需要的，而且是你唯一需要的，是你的朋友真正想要的东西。而一旦你擅长技术，这些主意并不难看到。到处都是卡住的门。[2]&lt;/p&gt;&#xA;&lt;p&gt;现在是你需要的第三样也是最后一样东西：一个联合创始人，或多个联合创始人。最佳的初创公司有两到三个创始人，所以你需要一到两个联合创始人。你如何找到他们？你能预测我接下来要说什么吗？是同样的东西：项目。你通过与他们一起做项目来找到联合创始人。你在联合创始人中需要的是擅长他们做的事情并且你和他们合作良好的人，而判断这一点的唯一方法是和他们一起做事情。&lt;/p&gt;&#xA;&lt;p&gt;在这一点上，我要告诉你一些你可能不想听到的事情。在你的课程中表现出色真的很重要，即使是那些只是记忆或对文学喋喋不休的课程，因为你需要在课程中表现出色才能进入好大学。如果你想创办初创公司，你应该努力进入你能进入的最好的大学，因为那是最好的联合创始人的地方。它也是最好的员工的地方。当拉里和谢尔盖创办Google时，他们开始只是雇佣他们从斯坦福认识的所有最聪明的人，这对他们来说是一个真正的优势。&lt;/p&gt;&#xA;&lt;p&gt;经验证据在这方面是明确的。如果你看看最大数量的成功初创公司来自哪里，它几乎与最挑剔的大学名单相同。&lt;/p&gt;&#xA;&lt;p&gt;我不认为是这些大学的声望导致了更多的好初创公司从它们那里出来。我也不认为这是因为教学质量更好。驱动这一点的只是进入的难度。你必须相当聪明和坚定才能进入MIT或剑桥，所以如果你确实设法进入了，你会发现其他学生包括很多聪明和坚定的人。[3]&lt;/p&gt;&#xA;&lt;p&gt;你不必和你在大学遇到的人一起创办初创公司。Twitch的创始人在七岁时就认识了。Stripe的创始人帕特里克和约翰·科利森在约翰出生时就认识了。但大学是联合创始人的主要来源。因为它们是联合创始人的地方，它们也是主意的地方，因为最好的主意成长自你与成为你联合创始人的人一起做的项目。&lt;/p&gt;&#xA;&lt;p&gt;所以从现在到开始初创公司你需要做的事情清单相当短。你需要变得擅长技术，而做到这一点的方法是做你自己的项目。你需要在学校尽可能表现好，这样你才能进入好大学，因为那是联合创始人和主意的地方。&lt;/p&gt;&#xA;&lt;p&gt;就是这样，只有两件事，构建东西并在学校表现出色。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 这句话中的修辞技巧是&amp;quot;Google&amp;quot;指的是不同的事物。我的意思是：一家最终变得像Google一样大的公司，其成长机会与拉里和谢尔盖在开始时可以合理预期Google本身的成长机会一样多。但我认为原版更简洁。&lt;/p&gt;&#xA;&lt;p&gt;[2] 为朋友做东西不是初创公司主意的唯一来源。它只是年轻创始人的最佳来源，他们对其他人想要的东西了解最少，他们自己的需求最能预测未来需求。&lt;/p&gt;&#xA;&lt;p&gt;[3] 奇怪的是，在像美国这样的国家，本科招生做得不好，这一点尤其如此。美国招生部门让申请者跳过许多与其智力能力无关的任意障碍。但测试越随意，它就越成为仅仅测试决心和足智多谋。而这两者是初创公司创始人最重要的品质。所以美国招生部门在选择创始人方面比他们在选择学生方面做得更好时更擅长。&lt;/p&gt;&#xA;&lt;p&gt;感谢贾里德·弗里德曼、卡罗琳·利维、杰西卡·利文斯顿、哈吉·塔加尔和加里·谭阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自己的项目</title>
      <link>http://localhost:1366/paul_graham/essays_zh/own/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1366/paul_graham/essays_zh/own/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;http://localhost:1366/paul_graham/essays_en/own/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;自己的项目&#34;&gt;自己的项目&lt;/h1&gt;&#xA;&lt;p&gt;2021年6月&lt;/p&gt;&#xA;&lt;p&gt;几天前，在从学校回家的路上，我九岁的儿子告诉我他迫不及待想回家继续写他正在写的故事。这让我比听到他说的任何话都高兴——不仅因为他对自己的故事感到兴奋，还因为他发现了这种工作方式。做自己的项目与普通工作的不同，就像滑冰与行走的区别。它更有趣，但也更有效率。&lt;/p&gt;&#xA;&lt;p&gt;在这种意义上滑冰的人完成了多少伟大的工作？如果不是全部，那肯定是很大一部分。&lt;/p&gt;&#xA;&lt;p&gt;做自己的项目有特别之处。我不会说你更快乐。更好的词应该是兴奋或投入。当事情进展顺利时你很快乐，但通常不是。当我写散文时，大部分时间我都很担心和困惑：担心散文会写得很糟，困惑因为我在摸索一些我无法清楚看到的想法。我能用语言把它固定下来吗？最后通常可以，只要我花足够长的时间，但我从不确定；前几次尝试经常失败。&lt;/p&gt;&#xA;&lt;p&gt;当事情成功时你有快乐的时刻，但它们不会持续很久，因为然后你就要面对下一个问题。那么为什么要做呢？因为对于喜欢这种方式工作的人来说，没有其他感觉如此正确。你感觉自己像是栖息地里的动物，做着你注定要做的事情——不一定总是快乐，但清醒而充满活力。&lt;/p&gt;&#xA;&lt;p&gt;许多孩子体验了做自己的项目的兴奋。困难的部分是让这与成人后的工作汇合。我们的习俗使这变得更困难。我们对待&amp;quot;玩耍&amp;quot;和&amp;quot;爱好&amp;quot;与&amp;quot;工作&amp;quot;在质上不同。建树屋的孩子不清楚有一条（虽然很长的）从建筑或工程到树屋的直接路线。我们没有指出这条路线，而是隐藏它，通过含蓄地对待孩子做的事情与真实工作不同。[1]&lt;/p&gt;&#xA;&lt;p&gt;我们没有告诉孩子他们的树屋可能在通往成人工作的道路上，而是告诉他们道路通过学校。不幸的是，学校工作往往与做自己的项目非常不同。它通常既不是项目，也不是自己的。所以随着学校变得更严肃，做自己的项目即使能幸存，也只是旁边的一条细线。&lt;/p&gt;&#xA;&lt;p&gt;想到所有的高中生转身背弃建造树屋，乖乖坐在教室里学习达尔文或牛顿以通过考试，有点可悲，而使达尔文和牛顿出名的工作实际上在精神上更接近建造树屋而不是为考试学习。&lt;/p&gt;&#xA;&lt;p&gt;如果我必须选择我的孩子获得好成绩和做自己的雄心勃勃的项目之间，我会选择项目。不是因为我是溺爱的父母，而是因为我经历过另一端，我知道哪个更有预测价值。当我为Y Combinator挑选初创公司时，我不关心申请人的成绩。但如果他们做过自己的项目，我想了解那些项目的一切。[2]&lt;/p&gt;&#xA;&lt;p&gt;学校可能是现在的样子不可避免。我不是说我们必须重新设计它（虽然我不是说我们不），只是我们应该理解它对我们工作态度的影响——它引导我们走向尽责的埋头苦干式工作，经常用竞争作为诱饵，远离滑冰。&lt;/p&gt;&#xA;&lt;p&gt;偶尔学校工作会成为自己的项目。每当我必须写论文时，那就会成为我自己的项目——讽刺的是，除了英语课，因为英语课必须写的东西太虚假了。当我上大学开始上计算机科学课时，我必须写的程序成为我自己的项目。每当我在写作或编程时，我通常都在滑冰，从那时起一直如此。&lt;/p&gt;&#xA;&lt;p&gt;那么自己的项目的边界到底在哪里？这是一个有趣的问题，部分因为答案如此复杂，部分因为利害关系如此之大。工作可以是自己的有两种意义：1）你是自愿做，而不是仅仅因为有人告诉你做，2）你独立做。&lt;/p&gt;&#xA;&lt;p&gt;前者的边界相当清晰。非常关心自己工作的人通常对拉和被推之间的区别非常敏感，工作往往属于一类或另一类。但测试不仅仅是是否有人告诉你做某事。你可以选择做被告知做的事情。实际上，你可以比告诉你做的人更彻底地拥有它。&lt;/p&gt;&#xA;&lt;p&gt;例如，数学作业对大多数人来说是被告知做的事情。但对我父亲来说，他是个数学家，不是。我们大多数人认为数学书中的问题是测试或发展我们对每节解释的材料知识的方法。但对我父亲来说，问题是重要的部分，文本只是一种注释。每当他得到一本新的数学书时，对他来说就像得到了一个谜题：这是一套新的要解决的问题，他会立即开始解决所有问题。&lt;/p&gt;&#xA;&lt;p&gt;项目是自己的另一种意义——独立做——有更柔和的边界。它逐渐过渡到协作。有趣的是，它以两种不同方式过渡到协作。协作的一种方式是共享一个项目。例如，当两个数学家在一次对话中协作形成一个证明时。另一种方式是多个人做自己的独立项目，像拼图一样组合在一起。例如，当一个人写书的文本，另一个人做平面设计时。[3]&lt;/p&gt;&#xA;&lt;p&gt;这两条通向协作的路径当然可以结合。但在适当的条件下，做自己的项目的兴奋感可以保持相当长时间，才在大组织的湍急工作流中瓦解。实际上，成功组织的历史部分是保留这种兴奋感技术的历史。[4]&lt;/p&gt;&#xA;&lt;p&gt;制造原始Macintosh的团队是这种现象的很好例子。像Burrell Smith、Andy Hertzfeld、Bill Atkinson和Susan Kare这样的人不仅仅是听从命令。他们不是Steve Jobs打出的网球球，而是Steve Jobs释放的火箭。他们之间有很多协作，但他们似乎都 individually 感受到了做自己的项目的兴奋感。&lt;/p&gt;&#xA;&lt;p&gt;在Andy Hertzfeld关于Macintosh的书中，他描述了他们如何在晚餐后回到办公室，工作到深夜。从未经历过对他们兴奋的项目的工作 thrill 的人无法区分这种长时间工作与血汗工厂和锅炉房发生的工作，但它们处于光谱的两端。这就是为什么教条地坚持&amp;quot;工作/生活平衡&amp;quot;是错误的。实际上，&amp;ldquo;工作/生活&amp;quot;这个表达本身就体现了错误：它假设工作和生活是不同的。对于那些&amp;quot;工作&amp;quot;一词自动意味着尽责的埋头苦干式的人来说，它们确实如此。但对于滑冰者来说，工作和生活的关系用连字符比斜杠更好地表示。我不想做任何我不想让它占据我生活的工作。&lt;/p&gt;&#xA;&lt;p&gt;当然，当你制造像Macintosh这样的东西时，更容易达到这种动机水平。新事物很容易感觉像你自己的项目。这就是程序员倾向于重写不需要重写的东西，以及编写已经存在的东西的自己的版本的趋势的原因之一。这有时让经理们惊慌，按打字的总字符数衡量，这很少是最佳解决方案。但它不总是仅仅由傲慢或无知驱动。从头开始写代码也更有回报——如此有回报，以至于好的程序员最终净领先，尽管字符的惊人浪费。实际上，这可能是资本主义的优势之一，它鼓励这种重写。需要软件做某事的公司不能使用另一家公司已经写的来做这件事的软件，因此必须写自己的，这通常结果更好。[5]&lt;/p&gt;&#xA;&lt;p&gt;滑冰和解决新问题之间的自然对齐是初创公司回报如此之高的原因之一。未解决问题的市场价格不仅更高，你在解决它们时还能获得生产力折扣。实际上，你获得生产力的双重增加：当你在做clean-sheet设计时，更容易招募滑冰者，他们可以把所有时间都花在滑冰上。&lt;/p&gt;&#xA;&lt;p&gt;Steve Jobs从观察Steve Wozniak中知道一两件关于滑冰者的事情。如果你能找到合适的人，你只需要告诉他们在最高层次做什么。他们会处理细节。实际上，他们坚持这样。要让项目感觉像你自己的，你必须有足够的自主权。你不能按订单工作，或被官僚主义拖慢。&lt;/p&gt;&#xA;&lt;p&gt;确保自主权的一种方法是根本没有老板。有两种方法：自己做老板，以及在下班时间做项目。虽然它们在财务上处于规模的两端，但初创公司和开源项目有很多共同点，包括它们通常由滑冰者运营。实际上，从规模的一端到另一端有一个虫洞：发现初创公司想法的最好方法之一就是为了好玩而做项目。&lt;/p&gt;&#xA;&lt;p&gt;如果你的项目是赚钱的那种，很容易在它们上面工作。当它们不是时更难。通常最困难的部分是士气。这就是成年人比孩子更难的地方。孩子只是跳进去建造他们的树屋，不担心是否在浪费时间，或与其他树屋相比如何。坦率地说，我们可以从这里的孩子身上学到很多。大多数成年人为&amp;quot;真实&amp;quot;工作设定的高标准并不总是对我们有利。&lt;/p&gt;&#xA;&lt;p&gt;自己项目最重要的阶段在开始时：当你从认为做x可能很酷到实际做x。在这一点上，高标准不仅无用而且有害。有少数人开始太多新项目，但我怀疑更多的人因为害怕失败而不开始那些如果开始就会成功的项目。&lt;/p&gt;&#xA;&lt;p&gt;但如果我们作为孩子不能从我们的树屋在通往成人项目道路上的知识中受益，我们至少可以作为成年人从我们的项目在延伸回树屋的道路上受益。记得你作为孩子开始新事物时那种无所谓的自信吗？那将是重新获得的强大东西。&lt;/p&gt;&#xA;&lt;p&gt;如果作为成年人保留那种自信更难，我们至少往往更清楚我们在做什么。孩子从一种工作跳到或被赶到另一种工作，几乎没有意识到发生在他们身上的事情。而我们更了解不同类型的工作，对做什么有更多控制。理想情况下，我们可以两全其美：故意选择做自己的项目，并在开始新项目时无所谓的自信。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] &amp;ldquo;Hobby&amp;quot;是个奇怪的词。现在它意味着不是真实工作的工作——不会被评判的工作——但最初它只是意味着一种相当一般意义上的痴迷（甚至是政治观点），一个人隐喻地骑着一个儿童骑的木马。很难说它最近、更窄的意义是变好还是变坏。肯定有很多误报——很多最终变得重要但最初被视为仅仅是爱好的项目。但另一方面，这个概念为早期丑小鸭阶段的项目提供了宝贵的掩护。&lt;/p&gt;&#xA;&lt;p&gt;[2] 虎爸虎妈，就像父母经常做的那样，在打上一场战争。在旧时代，当成功的道路是在攀登某些预定义梯子时获得证书，成绩更重要。但他们的策略专注于成绩也好。如果他们入侵项目领域，从而通过强迫孩子做这种工作给他们带来对这种工作的厌恶，那将是多么可怕。成绩已经是一个 grim、虚假的世界，父母干涉不会造成太大伤害，但做自己的项目是更微妙、更私密的事情，很容易被损坏。&lt;/p&gt;&#xA;&lt;p&gt;[3] 在自己的项目上工作与与他人协作之间的复杂、逐渐的边界是关于&amp;quot;孤独天才&amp;quot;的想法有如此多分歧的原因之一。在实践中，人们以各种不同方式协作（或不协作），但孤独天才的想法绝对不是神话。它有一个与某种工作方式相关的核心真理。&lt;/p&gt;&#xA;&lt;p&gt;[4] 协作也很强大。最佳组织将以对彼此造成最小损害的方式结合协作和所有权。有趣的是，公司和大学部门从相反的方向接近这个理想：公司坚持协作，偶尔也设法既招募滑冰者又允许他们滑冰，大学部门坚持独立研究的能力（按惯例被视为滑冰，无论是否），他们雇佣的人按他们选择的程度协作。&lt;/p&gt;&#xA;&lt;p&gt;[5] 如果一家公司能以这样的方式设计其软件，使最好的新来的程序员总是得到clean sheet，它可以有一种永恒的青春。这可能不是不可能的。如果你有一个定义游戏规则足够清晰的软件骨架，个别程序员可以写自己的玩家。&lt;/p&gt;&#xA;&lt;p&gt;感谢Trevor Blackwell、Paul Buchheit、Andy Hertzfeld、Jessica Livingston和Peter Norvig阅读本文草稿。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
