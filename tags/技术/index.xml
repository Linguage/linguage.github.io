<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Linguista</title>
    <link>https://linguage.github.io/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://linguage.github.io/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6,631,372</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/6631327/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/6631327/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/6631327/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;6631372&#34;&gt;6,631,372&lt;/h1&gt;&#xA;&lt;p&gt;6,631,372 2006年3月，修订于2009年8月&lt;/p&gt;&#xA;&lt;p&gt;几天前，我惊讶地发现我被授予了一项专利。它在2003年颁发，但没有人告诉我。如果不是几个月前访问雅虎时，我碰巧遇到了一个我在90年代末在那里工作时认识的大人物，我现在还不知道这件事。他提到了一个叫做收入循环（Revenue Loop）的东西，这是Viaweb在被他们收购时正在研发的东西。&lt;/p&gt;&#xA;&lt;p&gt;这个想法基本上是，你不按文本&amp;quot;相关性&amp;quot;（如搜索引擎当时那样）排序搜索结果，也不按广告商出价（如Overture那样）排序，而是按出价乘以交易数量来排序。通常你会对购物搜索这样做，但事实上，我们方案的一个特点是它会自动检测哪些搜索是购物搜索。&lt;/p&gt;&#xA;&lt;p&gt;如果你只按出价排序结果，你可能会使搜索结果变得无用，因为前面的结果可能被那些出价最高的蹩脚网站占据。但如果你按出价乘以交易数量排序，远不是出卖，你得到了一个更好的相关性衡量标准。还有什么比访问网站并购买某物更能表明某人对搜索结果满意呢？&lt;/p&gt;&#xA;&lt;p&gt;当然，这个算法自动最大化搜索引擎的收入。&lt;/p&gt;&#xA;&lt;p&gt;现在每个人都专注于这种方法，但在1998年很少有人这样做。1998年都是关于销售横幅广告。我们不知道这一点，所以当我们发现看起来是进行购物搜索的最佳方式时，我们非常兴奋。&lt;/p&gt;&#xA;&lt;p&gt;当雅虎考虑收购我们时，我们在纽约与杨致远见了面。我现在意识到，对他来说，这应该是那些会议之一，你去考察一个你已经基本决定收购的公司，只是确保他们是不错的人。我们被期望的不过是聊天，显得聪明和合理。当我跳到白板上开始展示我们令人兴奋的新技术时，他一定感到沮丧。&lt;/p&gt;&#xA;&lt;p&gt;当他看起来完全不在意时，我也同样沮丧。当时我想，&amp;ldquo;天哪，这家伙真是扑克脸。我们向他展示的必须是排序产品搜索结果的最佳方式，而他甚至不好奇。&amp;ldquo;直到很久以后我才明白他为什么不在意。1998年，广告商为网站广告支付的费用过高。1998年，如果广告商支付流量对他们的最大价值，雅虎的收入就会减少。&lt;/p&gt;&#xA;&lt;p&gt;当然，现在情况不同了。现在这种事情很流行。所以当几个月前在雅虎食堂遇到我从前的雅虎高管时，他记得的第一件事不是（幸运的是）我与他所有的争吵，而是收入循环。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;嗯，&amp;ldquo;我说，&amp;ldquo;我想我们确实为此申请了专利。我不确定我离开后申请发生了什么。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;真的吗？那将是一个重要的专利。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;所以有人调查了一下，果然，那项专利申请在之后的几年里继续进行，最终在2003年获得批准。&lt;/p&gt;&#xA;&lt;p&gt;实际上，阅读时让我感到震惊的主要是，律师在某个时候搞乱了我清晰明了的写作。某个聪明的拼写检查用户将其中一部分变成了禅宗般的不可理解：&lt;/p&gt;&#xA;&lt;p&gt;此外，常见的拼写错误将趋于修复。例如，如果搜索&amp;quot;compact disc player&amp;quot;的用户最终在提供compact disc players的网站上花费了大量金钱，那么这些页面对于该搜索短语将具有更高的相关性，即使短语&amp;quot;compact disc player&amp;quot;不存在于那些页面上。（那个&amp;quot;compat disc player&amp;quot;不是拼写错误，伙计们。）&lt;/p&gt;&#xA;&lt;p&gt;想要看到原始的优美散文，请参见1998年2月的临时申请，那时我们还是Viaweb，负担不起付钱给律师把每一个&amp;quot;a lot of&amp;quot;变成&amp;quot;considerable&amp;rdquo;。&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>ANSI Common Lisp 简介</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/acl1txtt1748944359/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/acl1txtt1748944359/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/acl1txtt1748944359/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ansi-common-lisp-简介&#34;&gt;ANSI Common Lisp 简介&lt;/h1&gt;&#xA;&lt;p&gt;ANSI Common Lisp 简介&lt;/p&gt;&#xA;&lt;p&gt;（这是Paul Graham的《ANSI Common Lisp》一书的第一章。版权1995年，Prentice-Hall。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;John McCarthy和他的学生于1958年开始在第一个Lisp实现上工作。除了Fortran之外，Lisp是仍在使用的最古老的语言。[1] 更值得注意的是，它仍然处于编程语言技术的前沿。了解Lisp的程序员会告诉你，这种语言有某种独特之处。&lt;/p&gt;&#xA;&lt;p&gt;Lisp的独特之处部分在于它被设计为可进化的。你可以使用Lisp来定义新的Lisp操作符。当新的抽象变得流行时（例如面向对象编程），事实证明在Lisp中实现它们总是很容易的。像DNA这样的语言不会过时。&lt;/p&gt;&#xA;&lt;h2 id=&#34;新工具&#34;&gt;新工具&lt;/h2&gt;&#xA;&lt;p&gt;为什么学习Lisp？因为它让你做其他语言做不到的事情。如果你只是想写一个返回小于n的数字之和的函数，在Lisp和C中看起来会非常相似：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; Lisp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun sum (n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((s &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (dotimes (i n s)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (incf s i))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* C */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你只需要做这样的简单事情，你使用哪种语言并不重要。假设相反，你想写一个函数，它接受一个数字n，并返回一个将n加到其参数上的函数：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; Lisp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun addn (n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;(lambda (x) (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; x n)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;addn在C中是什么样的？你根本写不出来。&lt;/p&gt;&#xA;&lt;p&gt;你可能会想知道，什么时候有人会想做这样的事情？编程语言教会你不要渴望它们不能提供的东西。你必须用一种语言思考才能用其编写程序，很难渴望你无法描述的东西。当我开始编写程序时——使用Basic——我不想念递归，因为我不知道有这样的东西。我用Basic思考。我只能构想迭代算法，为什么要想念递归？&lt;/p&gt;&#xA;&lt;p&gt;如果你不怀念词法闭包（这就是前面例子中制作的东西），暂时相信Lisp程序员一直使用它们。很难找到任何长度的Common Lisp程序不利用闭包。到第112页，你自己也会使用它们。而闭包只是我们在其他语言中找不到的抽象之一。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java的外衣</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/javacover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/javacover/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/javacover/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;java的外衣&#34;&gt;Java的外衣&lt;/h1&gt;&#xA;&lt;p&gt;2001年4月&lt;/p&gt;&#xA;&lt;p&gt;这篇文章源于我与几位程序员关于Java为何气味可疑的对话。这不是对Java的批判！这是黑客雷达的一个案例研究。&lt;/p&gt;&#xA;&lt;p&gt;随着时间的推移，黑客对好（和坏）技术培养出了一种嗅觉。我想试着写下是什么让Java对我来说似乎可疑，这可能会很有趣。&lt;/p&gt;&#xA;&lt;p&gt;一些读过这篇文章的人认为这是试图以前所未有的方式写一些有趣的事情。其他人说我将因为看起来写我不理解的东西而陷入麻烦。所以，以防万一有任何好处，让我澄清我在这里不是在写Java（我从未使用过），而是在写黑客雷达（我对此思考很多）。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;不能凭封面判断一本书&amp;quot;这句格言起源于书籍用普通纸板封面出售的时代，由每个购买者根据自己的品味装订。在那个时代，你不能凭封面判断一本书。但出版业从那时起进步了：现在的出版商努力使封面成为你可以判断一本书的依据。&lt;/p&gt;&#xA;&lt;p&gt;我花了很多时间在书店，我觉得我现在已经学会理解出版商想要告诉我关于一本书的一切，可能还有更多。我没有在书店度过的时间主要花在电脑前，我觉得我在某种程度上已经学会了通过封面来判断技术。这可能只是运气，但我已经让自己避免了一些最终被证明是真正糟糕的技术。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，Java对我来说似乎很糟糕。我从未写过Java程序，从未看过关于它的参考书，但我有一个预感，它不会是一种非常成功的语言。我可能被证明是错的；对技术做出预测是危险的事情。但作为某种时间胶囊，就其价值而言，这就是为什么我不喜欢Java的外观：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它被如此热情地炒作。真正的标准不需要被推广。没有人需要推广C、Unix或HTML。真正的标准在大多数人听到它之前就已经建立了。在黑客雷达屏幕上，Perl和Java一样大，或者更大，仅仅是凭借自身的优点。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它的目标很低。在最初的Java白皮书中，Gosling明确表示Java的设计对习惯C的程序员来说不会太困难。它被设计成另一个C++：C加上一些从更高级语言中借来的想法。就像情景喜剧、垃圾食品或包价旅游的创造者一样，Java的设计者有意识地为不如他们聪明的人设计产品。历史上，为他人使用而设计的语言都很糟糕：Cobol、PL/I、Pascal、Ada、C++。好的语言是那些为自己的设计者设计的：C、Perl、Smalltalk、Lisp。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它有不可告人的动机。有人说过，如果人们只在有话要说时才写书，而不是因为想写书，世界会变得更美好。同样，我们一直听到Java的原因不是因为它对编程语言有什么要说的。我们听到Java作为Sun公司削弱微软计划的一部分。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;没有人喜欢它。C、Perl、Python、Smalltalk和Lisp程序员都喜欢他们的语言。我从未听任何人说过他们喜欢Java。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;人们被迫使用它。我认识的许多使用Java的人使用它是因为他们觉得必须这样做。要么是他们觉得为了获得资助必须这样做，要么是他们认为客户会想要，要么是管理层告诉他们要这样做。这些都是聪明人；如果技术好，他们会自愿使用它。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它有太多的厨师。最好的编程语言是由小团体开发的。Java似乎是由一个委员会管理的。如果它最终成为一种好语言，这将是历史上委员会第一次设计出好语言。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是官僚主义的。据我对Java的一点点了解，似乎有很多做事的协议。真正的好语言不是那样的。它们让你做你想做的事，然后让路。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是伪时髦的。Sun现在假装Java是一种像Perl或Python那样的草根、开源语言努力。这个恰好由一家大公司控制。所以这种语言很可能具有与大公司生产的任何东西相同的单调笨重。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它是为大型组织设计的。大型组织的目标与黑客不同。他们想要适合大型平庸程序员团队使用的语言——具有像U-Haul卡车中的限速器那样的功能，防止傻瓜造成太大损害。黑客不喜欢对他们居高临下的语言。黑客只想要力量。历史上，为大型组织设计的语言（PL/I、Ada）都失败了，而黑客语言（C、Perl）获胜了。原因：今天的青少年黑客是明天的CTO。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;错误的人喜欢它。我最钦佩的程序员整体上没有被Java迷住。谁喜欢Java？西装革履的人，不知道一种语言与另一种的区别，但知道他们在媒体上不断听到Java；大公司的程序员，惊讶地发现还有比C++更好的东西；以及即插即用的本科生，准备好喜欢任何可能让他们找到工作的东西（这会考试吗？）。这些人的意见随风而变。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它的爸爸陷入困境。Sun的商业模式正受到两方面的侵蚀。与台式机相同类型的廉价Intel处理器现在对服务器来说已经足够快了。而且FreeBSD似乎至少与Solaris一样适合作为服务器操作系统。Sun的广告暗示你需要Sun服务器用于工业级应用程序。如果这是真的，Yahoo会第一个排队购买Sun；但当我在那里工作时，服务器都是运行FreeBSD的Intel盒子。这对Sun的未来是个坏兆头。如果Sun遇到麻烦，他们可能会把Java拖下水。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;国防部喜欢它。国防部鼓励开发者使用Java。这在我看来是最 damning 的迹象。国防部的国防工作做得很好（虽然昂贵），但他们喜欢计划、程序和协议。他们的文化与黑客文化相反；在软件问题上他们往往会下错注。国防部最后一次真正喜欢一种编程语言是Ada。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;请记住，这不是对Java的批判，而是对其外衣的批判。我对Java的了解还不足以喜欢或不喜欢它。这只是为什么我不觉得急于学习它的解释。&lt;/p&gt;&#xA;&lt;p&gt;在尝试用一种语言编写程序之前就将其 dismissed 可能看起来 cavalier。但这是所有程序员都必须做的事情。外面的技术太多了，无法全部学习。你必须学会通过外部迹象来判断哪些值得你花时间。我同样 cavalier 地 dismissed 了Cobol、Ada、Visual Basic、IBM AS400、VRML、ISO 9000、SET协议、VMS、Novell Netware和CORBA等。它们只是气味不对。&lt;/p&gt;&#xA;&lt;p&gt;在Java的情况下我可能错了。可能一种由一家大公司推广以削弱另一家大公司、由委员会为&amp;quot;主流&amp;quot;受众设计、被炒作到天际、国防部喜欢的语言，碰巧是一种我会喜欢编程的干净、美丽、强大的语言。可能，但这似乎非常不可能。&lt;/p&gt;&#xA;&lt;p&gt;Trevor Re: Java&amp;rsquo;s Cover | Berners-Lee Re: Java | Being Popular | Sun Internal Memo | 2005: BusinessWeek Agrees&lt;/p&gt;&#xA;&lt;p&gt;日语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lisp的不同之处</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/diff/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/diff/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;lisp的不同之处&#34;&gt;Lisp的不同之处&lt;/h1&gt;&#xA;&lt;p&gt;2001年12月（修订于2002年5月）&lt;/p&gt;&#xA;&lt;p&gt;（本文是回应LL1邮件列表上一些问题而产生的。现在已收录在《书呆子的复仇》中。）&lt;/p&gt;&#xA;&lt;p&gt;当McCarthy在1950年代末设计Lisp时，它是对现有语言的彻底突破，其中最重要的是Fortran。&lt;/p&gt;&#xA;&lt;p&gt;Lisp体现了九个新思想：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;条件语句。&lt;/strong&gt; 条件语句是if-then-else结构。现在我们认为这是理所当然的。它们是McCarthy在开发Lisp过程中发明的。（当时的Fortran只有条件goto，紧密基于底层硬件的分支指令。）McCarthy是Algol委员会的成员，他将条件语句引入Algol，随后传播到大多数其他语言。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;函数类型。&lt;/strong&gt; 在Lisp中，函数是一等对象——它们是一种数据类型，就像整数、字符串等，并且有字面表示，可以存储在变量中，可以作为参数传递，等等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;递归。&lt;/strong&gt; 递归当然在Lisp之前作为数学概念存在，但Lisp是第一个支持递归的编程语言。（可以说这在使函数成为一等对象中是隐含的。）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;变量的新概念。&lt;/strong&gt; 在Lisp中，所有变量实际上都是指针。具有类型的是值，而不是变量，赋值或绑定变量意味着复制指针，而不是它们指向的内容。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;垃圾回收。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;由表达式组成的程序。&lt;/strong&gt; Lisp程序是表达式的树，每个表达式都返回一个值。（在某些Lisp中，表达式可以返回多个值。）这与Fortran和大多数后续语言形成对比，后者区分表达式和语句。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在Fortran中有这种区别是很自然的，因为（在输入格式为打孔卡的语言中不足为奇）该语言是面向行的。你不能嵌套语句。因此，虽然你需要表达式来进行数学运算，但让其他任何东西返回值都没有意义，因为不可能有任何东西在等待它。&lt;/p&gt;&#xA;&lt;p&gt;随着块结构语言的出现，这个限制消失了，但那时已经太晚了。表达式和语句的区别已经根深蒂固。它从Fortran传播到Algol，然后传播到它们的后代。&lt;/p&gt;&#xA;&lt;p&gt;当一种语言完全由表达式构成时，你可以任意组合表达式。你可以说（使用Arc语法）&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(if foo (= x 1) (= x 2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(= x (if foo 1 2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;符号类型。&lt;/strong&gt; 符号与字符串的不同在于你可以通过比较指针来测试相等性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用符号树表示代码的记号。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;整个语言始终可用。&lt;/strong&gt; 读取时间、编译时间和运行时间之间没有真正的区别。你可以在读取时编译或运行代码，在编译时读取或运行代码，在运行时读取或编译代码。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在读取时运行代码允许用户重新编程Lisp的语法；在编译时运行代码是宏的基础；在运行时编译是Lisp用作扩展语言的基础，如在Emacs等程序中；在运行时读取使程序能够使用s表达式进行通信，这个想法最近被重新发明为XML。&lt;/p&gt;&#xA;&lt;p&gt;当Lisp首次发明时，所有这些想法都与当时的普通编程实践相去甚远，后者主要由1950年代末可用的硬件决定。&lt;/p&gt;&#xA;&lt;p&gt;随着时间的推移，体现在一系列流行语言中的默认语言逐渐向Lisp演变。1-5现在已经广泛传播。6开始出现在主流中。Python具有7的一种形式，尽管似乎没有任何语法支持它。8（与9一起）是使Lisp宏成为可能的特性，到目前为止仍然是Lisp独有的，也许是因为（a）它需要那些括号，或者同样糟糕的东西，（b）如果你添加这最后的力量增量，你不能再声称发明了一种新语言，而只是设计了一种新的Lisp方言 ;-)&lt;/p&gt;&#xA;&lt;p&gt;虽然对当今的程序员有用，但通过描述Lisp与其他语言采用的随机权宜之计的差异来描述它是很奇怪的。这可能不是McCarthy对它的看法。Lisp不是设计来修复Fortran中的错误；它更像是试图将计算公理化的副产品。&lt;/p&gt;&#xA;&lt;p&gt;相关链接：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/what_made_lisp_different_japanese.htm&#34;&gt;日语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Mac的回归</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/mac/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/mac/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mac的回归&#34;&gt;Mac的回归&lt;/h1&gt;&#xA;&lt;p&gt;2005年3月&lt;/p&gt;&#xA;&lt;p&gt;我认识的所有最好的黑客都在逐渐转向Mac。我的朋友Robert说，他在MIT的整个研究小组最近都给自己买了Powerbook。这些人不是90年代中期苹果低谷时期购买Mac的图形设计师和祖母们。他们是你能找到的最核心的OS黑客。&lt;/p&gt;&#xA;&lt;p&gt;原因当然是OS X。Powerbook设计精美，运行FreeBSD。你还需要知道什么？&lt;/p&gt;&#xA;&lt;p&gt;我在去年年底买了一台Powerbook。当我的IBM Thinkpad的硬盘很快损坏后，它成了我唯一的笔记本电脑。当我的朋友Trevor最近出现在我家时，他拿着一台与我相同的Powerbook。&lt;/p&gt;&#xA;&lt;p&gt;对我们大多数人来说，这不是转向苹果，而是回归。尽管在90年代中期很难相信，但Mac在其时代是典型的黑客计算机。&lt;/p&gt;&#xA;&lt;p&gt;1983年秋天，我大学的一门CS课教授站起来，像先知一样宣布，很快将有一种计算机具有半MIPS的处理能力，可以放在飞机座位下，价格如此便宜，我们可以从暑假工作中节省足够的钱来买一台。整个房间都倒吸了一口气。当Mac出现时，它甚至比我们希望的还要好。它如承诺的那样小、强大和便宜。但它也是我们从未想过计算机能成为的东西：设计精美。&lt;/p&gt;&#xA;&lt;p&gt;我必须拥有一台。我不是一个人。在80年代中后期，我认识的所有黑客都在为Mac编写软件，或者想要这样做。剑桥的每个沙发床垫上似乎都躺着一本相同的胖白皮书。如果你把它翻过来，上面写着&amp;quot;Inside Macintosh&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;然后是Linux和FreeBSD，黑客们跟随最强大的OS wherever it leads，发现自己转向了Intel盒子。如果你关心设计，你可以买一台Thinkpad，如果你能把Intel和Microsoft的标签从前面撕掉，它至少不会 actively 令人反感。[1]&lt;/p&gt;&#xA;&lt;p&gt;随着OS X的出现，黑客们回来了。当我走进剑桥的苹果商店时，就像回家一样。很多东西都变了，但空气中仍然有那种苹果的酷炫感，感觉表演是由真正关心的人运营的，而不是随机的公司交易者。&lt;/p&gt;&#xA;&lt;p&gt;那又怎样，商界可能会说。谁在乎黑客是否再次喜欢苹果？毕竟，黑客市场有多大？&lt;/p&gt;&#xA;&lt;p&gt;相当小，但相对于其规模来说很重要。当涉及计算机时，黑客现在正在做的事情，十年后每个人都会做。几乎所有的技术，从Unix到位图显示到Web，都是在CS部门和研究实验室中首先流行的，然后逐渐传播到世界其他地方。&lt;/p&gt;&#xA;&lt;p&gt;我记得1986年告诉我父亲，有一种叫做Sun的新型计算机，它是一台严肃的Unix机器，但如此小和便宜，你可以拥有一个自己坐在前面，而不是坐在连接到单个中央Vax的VT100前面。我建议，也许他应该买一些这家公司的股票。我想他真的希望他听了。&lt;/p&gt;&#xA;&lt;p&gt;1994年，我的朋友Koling想和他在台湾的女朋友交谈，为了节省长途账单，他写了一些软件，将声音转换为可以通过互联网发送的数据包。当时我们不确定这是否是互联网的适当用途，互联网当时仍然是一个准政府实体。他现在做的事情被称为VoIP，它是一个巨大且快速增长的业务。&lt;/p&gt;&#xA;&lt;p&gt;如果你想知道十年后普通人会用计算机做什么，只需在一个好大学的CS部门走一圈。无论他们在做什么，你都会做。&lt;/p&gt;&#xA;&lt;p&gt;在&amp;quot;平台&amp;quot;问题上，这种趋势更加明显，因为新颖的软件源自伟大的黑客，他们倾向于首先为他们个人使用的任何计算机编写它。软件销售硬件。Apple II的初始销售中，如果不是大多数的话，很多来自购买它来运行VisiCalc的人。为什么Bricklin和Frankston为Apple II编写VisiCalc？因为他们个人喜欢它。他们可以选择任何机器使其成为明星。&lt;/p&gt;&#xA;&lt;p&gt;如果你想吸引黑客编写销售你的硬件的软件，你必须使它成为他们自己使用的东西。仅仅使其&amp;quot;开放&amp;quot;是不够的。它必须开放且好。&lt;/p&gt;&#xA;&lt;p&gt;而开放且好正是Macs再次成为的。中间的几年创造了一种据我所知前所未有的情况：苹果在低端和高端都很受欢迎，但在中间不。我七十岁的母亲有一台Mac笔记本电脑。我拥有计算机科学博士学位的朋友都有Mac笔记本电脑。[2] 然而苹果的整体市场份额仍然很小。&lt;/p&gt;&#xA;&lt;p&gt;尽管前所未有，但我预测这种情况也是暂时的。&lt;/p&gt;&#xA;&lt;p&gt;所以爸爸，有家叫苹果的公司。他们制造一种新型计算机，设计得像Bang &amp;amp; Olufsen音响系统一样好，下面是你能买到的最好的Unix机器。是的，市盈率有点高，但我想很多人会想要这些。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 这些可怕的标签很像前Google搜索引擎上流行的侵入性广告。它们对客户说：你不重要。我们关心Intel和Microsoft，而不是你。&lt;/p&gt;&#xA;&lt;p&gt;[2] Y Combinator（我们希望）主要被黑客访问。操作系统的比例是：Windows 66.4%，Macintosh 18.8%，Linux 11.4%，FreeBSD 1.5%。Mac数字与五年前相比是一个很大的变化。&lt;/p&gt;&#xA;&lt;h2 id=&#34;意大利语翻译&#34;&gt;意大利语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;俄语翻译&#34;&gt;俄语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;中文翻译&#34;&gt;中文翻译&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Property</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/property/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/property/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;property&#34;&gt;Property&lt;/h1&gt;&#xA;&lt;p&gt;2012年3月&lt;/p&gt;&#xA;&lt;p&gt;小时候我读过一本关于十八世纪日本著名法官大冈忠相的故事书。他审理的一个案件是由一家食品店老板提起的。一个只能负担得起米饭的穷学生一边吃着米饭，一边享受着从食品店飘来的美味烹饪气味。店主想要学生为他享受的气味付费。&lt;/p&gt;&#xA;&lt;p&gt;这个学生在偷他的气味！&lt;/p&gt;&#xA;&lt;p&gt;每当我听到美国唱片工业协会和美国电影协会指控人们偷窃音乐和电影时，这个故事常常浮现在我的脑海中。&lt;/p&gt;&#xA;&lt;p&gt;对我们来说，将气味视为财产听起来很荒谬。但我可以想象一些可以收费的气味场景。想象我们生活在一个月球基地上，我们必须按升购买空气。我可以想象空气供应商额外收费添加香味。&lt;/p&gt;&#xA;&lt;p&gt;对我们来说，将气味视为财产之所以荒谬，是因为这样做行不通。但在月球基地上，这倒是可行的。&lt;/p&gt;&#xA;&lt;p&gt;什么被视为财产取决于什么可以有效地被视为财产。这不仅可以改变，而且已经改变了。人类可能总是（对于人类和总是的某种定义）将个人携带的小物品视为财产。但是狩猎采集者并没有像我们那样将土地视为财产。&lt;/p&gt;&#xA;&lt;p&gt;[1] 许多人认为财产具有单一不变定义的原因是，它的定义变化非常缓慢。&lt;/p&gt;&#xA;&lt;p&gt;[2] 但我们现在正处于这样的变化之中。唱片公司和电影工作室过去用来分发他们的作品就像月球基地上通过管道输送的空气一样。但随着网络的出现，我们仿佛搬到了一个有可呼吸大气层的行星上。现在数据像气味一样流动。通过一厢情愿和短期贪婪的结合，唱片公司和电影工作室使自己处于食品店老板的位置，指控我们都偷了他们的气味。&lt;/p&gt;&#xA;&lt;p&gt;（我说短期贪婪的原因是，唱片公司和电影工作室的根本问题是，经营它们的人是由奖金而不是股权驱动的。如果他们是由股权驱动的，他们会寻找利用技术变化的方法，而不是与之抗争。但是构建新事物需要太长时间。他们的奖金取决于今年的收入，而增加收入的最好方法是从他们已经做的事情中榨取更多钱。）&lt;/p&gt;&#xA;&lt;p&gt;那么这意味着什么？人们不应该能够为内容收费吗？这个问题没有一个单一的肯定或否定答案。人们应该能够在为内容收费有效时为内容收费。&lt;/p&gt;&#xA;&lt;p&gt;但我说&amp;quot;有效&amp;quot;时，指的是比&amp;quot;当他们能够逃脱时&amp;quot;更微妙的东西。我的意思是，人们能够为内容收费而不扭曲社会来实现这一点。毕竟，在月球基地销售香气的公司可以继续在地球上销售它们，如果他们成功游说要求我们所有人都继续通过管道呼吸的法律，即使我们不再需要这样做。&lt;/p&gt;&#xA;&lt;p&gt;唱片公司和电影工作室一直在采取的疯狂法律措施有很多这种味道。报纸和杂志同样处境艰难，但至少它们在优雅地衰落。如果可以的话，美国唱片工业协会和美国电影协会会让我们通过管道呼吸。&lt;/p&gt;&#xA;&lt;p&gt;最终这归结为常识。当你试图通过对随机选择的人使用大规模诉讼作为一种惩戒性惩罚来滥用法律系统，或者游说通过后会使互联网崩溃的法律时，这本身就证明你正在使用一个不起作用的财产定义。&lt;/p&gt;&#xA;&lt;p&gt;这就是拥有有效的民主制度和多个主权国家的有益之处。如果世界有一个单一的专制政府，唱片公司和电影工作室可以购买法律，使财产的定义成为他们想要的任何东西。但幸运的是，仍然有一些国家不是美国的版权殖民地，即使在美国，政治家们似乎仍然害怕足够数量的实际选民。&lt;/p&gt;&#xA;&lt;p&gt;[3] 管理美国的人可能不喜欢选民或其他国家拒绝屈从于他们的意愿，但最终，这对我们所有人都有利，因为试图扭曲法律以服务自己目的的人没有单一的攻击点。私有财产是一个极其有用的概念——可以说是我们最伟大的发明之一。迄今为止，它的每一个新定义都给我们带来了日益增长的物质财富。&lt;/p&gt;&#xA;&lt;p&gt;[4] 有理由假设最新的定义也会如此。如果我们都不得不因为一些有权势的人太懒于升级而继续运行过时的版本，那将是一场灾难。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 如果你想更多地了解狩猎采集者，我强烈推荐伊丽莎白·马歇尔·托马斯的《无害的人们》和《旧的方式》。&lt;/p&gt;&#xA;&lt;p&gt;[2] 然而，财产定义的变化主要是由技术进步驱动的，由于技术进步正在加速，财产定义的变化率可能也会加速。这意味着社会能够优雅地应对这些变化变得更加重要，因为它们将以越来越快的速度到来。&lt;/p&gt;&#xA;&lt;p&gt;[3] 据我所知，&amp;ldquo;版权殖民地&amp;quot;一词最早由迈尔斯·彼得森使用。&lt;/p&gt;&#xA;&lt;p&gt;[4] 技术状态不仅仅是财产定义的函数。它们相互制约。但既然如此，你不能干扰财产的定义而不影响（可能损害）技术状态。苏联的历史生动地说明了这一点。&lt;/p&gt;&#xA;&lt;p&gt;感谢萨姆·奥特曼和杰夫·拉尔斯通阅读本文草稿。&lt;/p&gt;&#xA;&lt;p&gt;日文翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python悖论</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/pypar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/pypar/</guid>
      <description>&lt;h1 id=&#34;python悖论&#34;&gt;Python悖论&lt;/h1&gt;&#xA;&lt;p&gt;2004年8月&lt;/p&gt;&#xA;&lt;p&gt;在最近的一次演讲中，我说了一些让很多人不高兴的话：你可以让更聪明的程序员在Python项目上工作，而不是在Java项目上工作。&lt;/p&gt;&#xA;&lt;p&gt;我这样说并不是指Java程序员很笨。我的意思是Python程序员很聪明。学习一门新的编程语言需要很多工作。人们学习Python并不是因为它能给他们带来工作；他们学习它是因为他们真正喜欢编程，并且对已经知道的语言不满意。&lt;/p&gt;&#xA;&lt;p&gt;这使他们成为公司应该想要雇佣的那种程序员。因此，由于缺乏更好的名称，我称之为Python悖论：如果一个公司选择用相对冷门的语言编写其软件，他们将能够雇佣到更好的程序员，因为他们只会吸引那些足够关心它而去学习它的人。而对于程序员来说，这个悖论更加明显：如果你想找到一份好工作，应该学习的语言是那些人们不仅仅是为了找工作而学习的语言。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，只有少数公司足够聪明地意识到了这一点。但这里也有一种选择在进行：它们正是程序员最想为之工作的公司。例如，Google。当他们发布Java编程工作时，他们也希望有Python经验。&lt;/p&gt;&#xA;&lt;p&gt;我的一位朋友几乎知道所有广泛使用的语言，他在大多数项目中都使用Python。他说主要的原因是他喜欢源代码的外观。这可能是选择一种语言而不是另一种语言的轻率理由。但并没有听起来那么轻率：当你编程时，你花在阅读代码上的时间比写代码的时间多。你推着源代码团，就像雕塑家推着粘土团一样。因此，一种让源代码看起来丑陋的语言对于要求精确的程序员来说是令人发疯的，就像充满疙瘩的粘土对于雕塑家一样。&lt;/p&gt;&#xA;&lt;p&gt;提到丑陋的源代码，人们当然会想到Perl。但Perl表面的丑陋并不是我指的那种。真正的丑陋不是看起来刺耳的语法，而是不得不用错误的概念来构建程序。Perl可能看起来像一个骂人的卡通人物，但在某些情况下，它在概念上超越了Python。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，无论如何。当然，这两种语言都是不断发展的目标。但它们与Ruby（以及Icon、Joy、J、Lisp和Smalltalk）共享一个事实：它们都是由真正关心编程的人创建和使用的。而那些往往是做得好的人。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;如果你喜欢这篇文章，你可能也会喜欢&lt;a href=&#34;https://linguage.github.io/paul_graham/essays_zh/hp/&#34;&gt;黑客与画家&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reddit创始人</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/reddits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/reddits/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/reddits/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;reddit创始人&#34;&gt;Reddit创始人&lt;/h1&gt;&#xA;&lt;p&gt;2024年3月&lt;/p&gt;&#xA;&lt;p&gt;我在我们甚至开始Y Combinator之前就认识了Reddit创始人。事实上，他们是我们开始创办它的原因之一。&lt;/p&gt;&#xA;&lt;p&gt;YC源于我在哈佛计算机协会（本科生计算机俱乐部）的一次关于如何创办创业公司的演讲。观众中的其他人可能都是本地人，但史蒂夫和亚历克西斯是从弗吉尼亚大学乘火车来的，他们是那里的高年级学生。既然他们来了这么远，我同意和他们见面喝咖啡。他们告诉我一个后来我们资助他们放弃的创业想法：一种在手机上订购快餐的方式。&lt;/p&gt;&#xA;&lt;p&gt;这是在智能手机之前的时代。他们必须与手机运营商和快餐连锁店达成协议才能推出。所以这是不可能实现的。即使在19年后的今天，这仍然不存在。但我对他们的智慧和能量印象深刻。事实上，我对他们以及我在那次演讲中遇到的其他一些人是如此印象深刻，以至于我决定创办一些东西来资助他们。几天后，我告诉史蒂夫和亚历克西斯我们正在创办Y Combinator，并鼓励他们申请。&lt;/p&gt;&#xA;&lt;p&gt;第一批我们没有任何方式来识别申请人，所以我们给他们起了绰号。Reddit创始人是&amp;quot;手机食物松饼&amp;quot;。&amp;ldquo;松饼&amp;quot;是杰西卡用来形容小狗和两岁小孩等事物的亲昵称呼。所以这让你对史蒂夫和亚历克西斯当时给人的印象有所了解。他们有着小鸟那种略带凌乱的惊讶表情。&lt;/p&gt;&#xA;&lt;p&gt;不过他们的想法很糟糕。而且由于那时我们认为我们是在资助想法而不是创始人，所以我们拒绝了他们。但我们对此感到不好。杰西卡因为我们拒绝了松饼而难过。对我来说，拒绝那些激励我们创办YC来资助的人似乎是错误的。&lt;/p&gt;&#xA;&lt;p&gt;我认为创业公司意义上的&amp;quot;转型&amp;quot;这个词还没有被发明出来，但我们想要资助史蒂夫和亚历克西斯，所以如果他们的想法不好，他们就必须研究其他东西。而且我知道是什么。那时候有一个叫Delicious的网站，你可以在那里保存链接。它有一个叫del.icio.us/popular的页面，列出了最多保存的链接，人们正在使用这个页面作为事实上的Reddit。我知道这一点是因为我网站的很多流量都来自它。需要有一个类似del.icio.us/popular的东西，但设计用于分享链接而不是作为保存链接的副产品。&lt;/p&gt;&#xA;&lt;p&gt;所以我打电话给史蒂夫和亚历克西斯，说我们喜欢他们，只是不喜欢他们的想法，所以如果他们研究其他东西，我们会资助他们。那时他们正在乘火车回弗吉尼亚的家。他们在下一站下车，登上了北上的下一班火车，到那天结束时，他们承诺致力于现在被称为Reddit的东西。&lt;/p&gt;&#xA;&lt;p&gt;他们本想叫它Snoo，就像&amp;quot;What snoo？&amp;ldquo;一样。但snoo.com太贵了，所以他们决定把吉祥物叫Snoo，并为网站选择一个未被注册的名字。早期Reddit只是一个临时名称，或者至少他们是这样告诉我的，但现在可能改不掉了。&lt;/p&gt;&#xA;&lt;p&gt;就像所有真正伟大的创业公司一样，公司和创始人之间有一种不寻常的紧密匹配。特别是史蒂夫。Reddit有一种特定的性格——好奇、怀疑、准备被娱乐——这种性格就是史蒂夫的性格。&lt;/p&gt;&#xA;&lt;p&gt;史蒂夫会对这个翻白眼，但他是一个知识分子；他对为了其自身而感兴趣的想法感兴趣。这就是他为什么会出现在剑桥的那个观众席上。他认识我是因为他对一种我写过的叫做Lisp的编程语言感兴趣，而Lisp是那种很少有人学习的语言之一，除非是出于智力好奇心。史蒂夫那种真空吸尘器式的好奇心正是你想要的那种，当你创办一个网站，它是一个包含任何有趣内容的链接列表。&lt;/p&gt;&#xA;&lt;p&gt;史蒂夫不是权威的粉丝，所以他也喜欢一个没有编辑的网站的想法。那时程序员的主要论坛是一个叫Slashdot的网站。它很像Reddit，只是首页上的故事是由人工版主选择的。虽然他们做得很好，但这一微小的差异被证明是一个巨大的差异。由用户提交驱动意味着Reddit比Slashdot更新。那里的新闻更新，用户总是会去最新的新闻所在的地方。&lt;/p&gt;&#xA;&lt;p&gt;我推动Reddit创始人快速发布。第一版不需要超过几百行代码。怎么需要一周多的时间来构建？他们确实发布得相对较快，大约在第一批YC批次开始后三周。第一批用户是史蒂夫、亚历克西斯、我，以及他们的一些YC同班同学和大学朋友。事实证明，你不需要那么多用户来收集一个像样的有趣链接列表，特别是如果你每个用户有多个账户。&lt;/p&gt;&#xA;&lt;p&gt;Reddit从他们的YC批次又得到了两个人：克里斯·斯洛和亚伦·斯沃茨，他们也异常聪明。克里斯刚刚完成他在哈佛的物理学博士学业。亚伦更年轻，一个大学新生，甚至比史蒂夫更反权威。将他描述为后来权威对他所做的事情的殉道者并不夸张。&lt;/p&gt;&#xA;&lt;p&gt;Reddit的流量缓慢但不可阻挡地增长。起初数字太小，很难与背景噪音区分开来。但在几周内，很明显有一个真正的用户核心定期返回网站。尽管Reddit公司在后来的年份里经历了各种各样的事情，但Reddit网站从未回头。&lt;/p&gt;&#xA;&lt;p&gt;Reddit网站（现在的应用程序）是一个如此根本有用的东西，几乎是不可摧毁的。这就是为什么，尽管在史蒂夫离开后很长一段时间里，管理策略从良性忽视到惊人的错误都有，但流量一直在增长。你不能对大多数公司这样做。大多数公司你把眼睛从球上移开六个月，你就会陷入深深的麻烦。但Reddit是特别的，当史蒂夫在2015年回来时，我知道世界将会感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;人们认为他们看透了Reddit：硅谷的参与者之一，但不是重要的参与者。但那些知道幕后发生的事情的人知道故事不止于此。如果Reddit能够在最多无害的管理下增长到它所达到的规模，如果史蒂夫回来，它能做什么？我们现在知道这个问题的答案。或者至少是答案的下限。史蒂夫还没有没有想法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web 2.0</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/web20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/web20/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/web20/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;web-20&#34;&gt;Web 2.0&lt;/h1&gt;&#xA;&lt;p&gt;2005年11月&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;Web 2.0&amp;quot;意味着什么吗？直到最近我还认为它不意味着什么，但事实证明情况更复杂。最初，是的，它是没有意义的。现在它似乎已经获得了一个含义。然而，那些不喜欢这个词的人可能是对的，因为如果它的意思是我认为的那个意思，我们就不需要它。&lt;/p&gt;&#xA;&lt;p&gt;我第一次听到&amp;quot;Web 2.0&amp;quot;这个词是在2004年Web 2.0会议的名称中。当时它本意是使用&amp;quot;网络作为平台&amp;rdquo;，我将其理解为基于网络的应用程序。[1]&lt;/p&gt;&#xA;&lt;p&gt;所以今年夏天当一个会议上Tim O&amp;rsquo;Reilly主持一个旨在找出&amp;quot;Web 2.0&amp;quot;定义的会议时，我感到惊讶。它不是已经意味着使用网络作为平台吗？如果它还没有意味着什么，我们为什么根本需要这个词？&lt;/p&gt;&#xA;&lt;h2 id=&#34;起源&#34;&gt;起源&lt;/h2&gt;&#xA;&lt;p&gt;Tim说&amp;quot;Web 2.0&amp;quot;这个词首次出现在&amp;quot;O&amp;rsquo;Reilly和Medialive International之间的头脑风暴会议&amp;quot;中。Medialive International是什么？根据他们的网站，他们是&amp;quot;技术贸易展览和会议的组织者&amp;quot;。所以大概这就是这次头脑风暴会议的内容。O&amp;rsquo;Reilly想要组织一个关于网络的会议，他们在考虑如何命名它。&lt;/p&gt;&#xA;&lt;p&gt;我认为没有任何故意的计划暗示网络有新版本。他们只是想要强调网络再次重要的观点。这是一种语义赤字支出：他们知道新事物即将到来，而&amp;quot;2.0&amp;quot;指的是那些可能最终会变成的东西。&lt;/p&gt;&#xA;&lt;p&gt;他们是对的。新事物即将到来。但新的版本号在短期内带来了一些尴尬。在开发第一个会议的宣传材料的过程中，有人必须决定他们最好试着解释那个&amp;quot;2.0&amp;quot;指的是什么。无论它意味着什么，&amp;ldquo;网络作为平台&amp;quot;至少不是太限制性。&lt;/p&gt;&#xA;&lt;p&gt;关于&amp;quot;Web 2.0&amp;quot;意味着网络作为平台的故事在第一个会议后并没有持续多久。到第二个会议时，&amp;ldquo;Web 2.0&amp;quot;似乎意味着的是关于民主的东西。至少，当人们在网上写它时是这样。会议本身看起来并不很草根。它花费2800美元，所以只有能够负担得起的风险投资家和大公司的人才能参加。&lt;/p&gt;&#xA;&lt;p&gt;然而，奇怪的是，Ryan Singel在《连线新闻》上关于这次会议的文章谈到了&amp;quot;一群极客&amp;rdquo;。当我的一个朋友向Ryan询问这件事时，这对他来说是新闻。他说他最初写的是类似&amp;quot;一群风险投资家和业务发展人员&amp;quot;的东西，但后来将其缩短为&amp;quot;一群&amp;rdquo;，而这一定又被编辑们扩展为&amp;quot;一群极客&amp;quot;。毕竟，Web 2.0会议应该充满极客，对吧？&lt;/p&gt;&#xA;&lt;p&gt;嗯，不对。大约有7个。甚至连Tim O&amp;rsquo;Reilly都穿着西装，这是一个如此陌生的景象，我一开始都无法理解。我看到他走过，对一个O&amp;rsquo;Reilly的人说&amp;quot;那个人看起来很像Tim。&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;哦，那是Tim。他买了一套西装。&amp;ldquo;我追上他，果然是他。他解释说他刚刚在泰国买的。&lt;/p&gt;&#xA;&lt;p&gt;2005年Web 2.0会议让我想起了泡沫时期的互联网贸易展览，充满了游荡的风险投资家寻找下一个热门创业公司。有那种由大量决心不错过任何机会的人创造的奇怪氛围。不错过什么？他们不知道。无论即将发生什么——无论Web 2.0最终变成什么。&lt;/p&gt;&#xA;&lt;p&gt;我不会仅仅因为风险投资家渴望再次投资就称之为&amp;quot;泡沫2.0&amp;rdquo;。互联网是真正的大事。崩溃和繁荣一样都是过度反应。可以预期，一旦我们开始走出崩溃，这个领域将会有大量增长，就像在大萧条前飙升最严重的行业一样。&lt;/p&gt;&#xA;&lt;p&gt;这不会变成第二次泡沫的原因是IPO市场已经消失。风险投资者是由退出策略驱动的。他们在90年代末后期资助所有那些可笑的创业公司的原因是他们希望能够将它们卖给轻率的零售投资者；他们希望能够一路笑着去银行。现在这条路已经关闭了。现在默认的退出策略是被收购，而收购者不像IPO投资者那样容易产生非理性繁荣。你最接近泡沫估值的是Rupert Murdoch为Myspace支付5.8亿美元。这只不过偏离了10倍左右。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-ajax&#34;&gt;1. Ajax&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;Web 2.0&amp;quot;现在是否意味着除了会议名称之外的更多东西？我不喜欢承认这一点，但它确实开始意味着什么了。当人们现在说&amp;quot;Web 2.0&amp;quot;时，我大致知道他们的意思。我既鄙视这个词又理解它的事实是它已经开始意味着什么的最可靠证明。&lt;/p&gt;&#xA;&lt;p&gt;其含义的一个组成部分当然是Ajax，我现在仍然只能勉强不带引号地使用它。基本上，&amp;ldquo;Ajax&amp;quot;的意思是&amp;quot;JavaScript现在能工作了&amp;rdquo;。这反过来意味着基于网络的应用程序现在可以做得更像桌面应用程序。&lt;/p&gt;&#xA;&lt;p&gt;当你读这篇文章时，整个新一代软件正在被编写以利用Ajax。自从微型计算机首次出现以来，还没有出现过这样的新应用浪潮。即使是微软也看到了这一点，但对它们来说太晚了，除了泄露&amp;quot;内部&amp;quot;文件以给人留下他们正掌握这一新趋势的印象外，它们做不了什么更多。&lt;/p&gt;&#xA;&lt;p&gt;事实上，新一代软件的编写速度太快了，微软甚至无法引导它，更不用说在内部编写自己的软件了。它们现在唯一的希望是在谷歌之前收购所有最好的Ajax创业公司。即使这将很困难，因为谷歌在收购微型创业公司方面拥有像几年前在搜索领域一样巨大的领先优势。毕竟，谷歌地图，典型的Ajax应用程序，是他们收购的一家创业公司的结果。&lt;/p&gt;&#xA;&lt;p&gt;所以讽刺的是，Web 2.0会议的原始描述被证明是部分正确的：基于网络的应用程序是Web 2.0的重要组成部分。但我相信他们是偶然做对的。Ajax热潮直到2005年初才开始，当时谷歌地图出现，&amp;ldquo;Ajax&amp;quot;这个词被创造出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-民主&#34;&gt;2. 民主&lt;/h2&gt;&#xA;&lt;p&gt;Web 2.0的第二个重要组成部分是民主。我们现在有几个例子证明，当业余爱好者有正确的系统来引导他们的努力时，他们可以超越专业人士。维基百科可能是最著名的。专家们对维基百科的评价平平，但他们错过了关键点：它已经足够好了。而且它是免费的，这意味着人们确实阅读它。在网上，你必须付费的文章几乎等于不存在。即使你愿意自己付费阅读它们，你也不能链接到它们。它们不是对话的一部分。&lt;/p&gt;&#xA;&lt;p&gt;民主似乎获胜的另一个地方是决定什么算作新闻。我现在只看Reddit新闻网站。[2] 我知道如果发生重大事件，或者有人写了一篇特别有趣的文章，它会在那里出现。为什么要费心查看任何特定报纸或杂志的首页？Reddit就像整个网络的RSS订阅源，带有质量过滤器。类似的网站包括Digg，一个技术新闻网站，其 popularity正在迅速接近Slashdot，以及del.icio.us，引发了&amp;quot;标签&amp;quot;运动的协作书签网络。而虽然维基百科的主要吸引力是它足够好且免费，但这些网站表明投票者在做的工作明显比人类编辑好。&lt;/p&gt;&#xA;&lt;p&gt;Web 2.0民主的最戏剧性例子不是在选择思想，而是在生产它们。我注意到有一段时间了，我在个人网站上读到的东西与我在报纸和杂志上读到的一样好或更好。现在我有独立的证据：Reddit上的热门链接通常是指向个人网站的链接，而不是杂志文章或新闻故事。&lt;/p&gt;&#xA;&lt;p&gt;我为杂志写作的经验提供了一个解释。编辑。他们控制你可以写的话题，他们通常可以重写你产生的任何内容。结果是压制极端情况。编辑产生的是95百分位的写作——95%的文章通过编辑得到改善，但5%被拖累了。5%的时间你会得到&amp;quot;一群极客&amp;rdquo;。&lt;/p&gt;&#xA;&lt;p&gt;在网上，人们可以发布任何他们想要的东西。几乎所有这些都不及印刷出版物中经过编辑压制的写作。但是作者池非常非常大。如果它足够大，缺乏压制意味着网上最好的写作应该超过印刷品中最好的。[3] 既然网络已经进化出选择好东西的机制，网络整体胜出。选择胜过压制，原因与市场经济胜过中央计划相同。&lt;/p&gt;&#xA;&lt;p&gt;即使是创业公司这次也不同。它们之于泡沫时期的创业公司，就像博客之于印刷媒体。在泡沫时期，创业公司意味着一家由MBA领导的公司，正在花费数百万美元的风险投资资金以最字面的意义&amp;quot;快速做大&amp;rdquo;。现在它意味着一个更小、更年轻、更技术化的团体，只是决定创造一些伟大的东西。他们稍后会决定是否要筹集风险投资规模的资金，如果他们接受，他们会按照自己的条件接受。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-不要虐待用户&#34;&gt;3. 不要虐待用户&lt;/h2&gt;&#xA;&lt;p&gt;我认为每个人都会同意民主和Ajax是&amp;quot;Web 2.0&amp;quot;的组成部分。我也看到了第三个：不要虐待用户。在泡沫时期，许多流行的网站对用户相当专横。不仅仅是在明显的方式上，比如让他们注册，或者让他们忍受烦人的广告。90年代末普通网站的设计本身就是一种滥用。许多最受欢迎的网站充斥着侵扰性的品牌，使它们加载缓慢，并向用户传递信息：这是我们的网站，不是你的。（在一些笔记本电脑上附带的英特尔和微软贴纸有物理上的类似之处。）&lt;/p&gt;&#xA;&lt;p&gt;我认为问题的根源在于网站觉得他们在免费赠送东西，直到最近，任何免费赠送东西的公司都可能对此相当专横。有时它达到了经济虐待的程度：网站所有者假设他们对用户造成的痛苦越多，对他们来说的好处就一定越多。这种模式最引人注目的残余可能是在salon.com，在那里你可以阅读故事的开头，但要获得其余部分，你必须坐着看完一部电影。&lt;/p&gt;&#xA;&lt;p&gt;在Y Combinator，我们建议我们资助的所有创业公司永远不要对用户发号施令。永远不要让用户注册，除非你需要为他们存储一些东西。如果你确实让用户注册，永远不要让他们等待电子邮件中的确认链接；事实上，除非你出于某种原因需要他们的电子邮件地址，否则甚至不要问他们。不要问他们任何不必要的问题。除非他们明确要求，否则永远不要给他们发送电子邮件。永远不要将你链接到的页面框架化，或者在新窗口中打开它们。如果你有免费版本和付费版本，不要让免费版本太受限制。如果你发现自己问&amp;quot;我们应该允许用户做x吗？&amp;ldquo;只要在你不确定的时候回答&amp;quot;是&amp;rdquo;。倾向于慷慨。&lt;/p&gt;&#xA;&lt;p&gt;在《如何创业》中，我建议创业公司永远不要让任何人从他们下面飞过，意思永远不要让任何其他公司提供更便宜、更简单的解决方案。低飞的另一种方式是给用户更多权力。让用户做他们想做的事。如果你不这样做而竞争对手做了，你就会陷入麻烦。&lt;/p&gt;&#xA;&lt;p&gt;iTunes在这个意义上是Web 2.0式的。终于你可以购买单曲而不必购买整张专辑。唱片行业讨厌这个想法，并尽可能长时间地抵制它。但用户想要什么很明显，所以苹果从唱片公司下面飞过。[4] 虽然实际上将iTunes描述为Web 1.5可能更好。应用于音乐的Web 2.0可能意味着个人乐队免费提供无DRM的歌曲。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一场本地革命？</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/revolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/revolution/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/revolution/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;一场本地革命&#34;&gt;一场本地革命？&lt;/h1&gt;&#xA;&lt;p&gt;2009年4月&lt;/p&gt;&#xA;&lt;p&gt;最近我意识到我脑中一直有两个想法，如果结合起来会爆炸。&lt;/p&gt;&#xA;&lt;p&gt;第一个是创业公司可能代表一个新的经济阶段，规模相当于工业革命。我不确定这一点，但似乎有相当大的可能性是真实的。作为创业公司的创始人或早期员工，人们的生产力要高得多——想象一下，如果拉里和谢尔盖去一家大公司工作，他们的成就会有多少减少——而那种规模的改进可以改变社会习俗。&lt;/p&gt;&#xA;&lt;p&gt;第二个想法是创业公司是一种在某些专门从事它的地方繁荣的企业类型——硅谷专门从事创业公司，就像洛杉矶专门从事电影，或纽约专门从事金融一样。[1]&lt;/p&gt;&#xA;&lt;p&gt;如果两个都是真的呢？如果创业公司既是一个新的经济阶段，又是一种只在某些中心繁荣的企业类型呢？&lt;/p&gt;&#xA;&lt;p&gt;如果是这样，这场革命将是特别革命性的。所有以前的革命都传播了。农业、城市和工业化都广泛传播。如果创业公司最终像电影业一样，只有少数几个中心和一个主导中心，那将产生新颖的后果。&lt;/p&gt;&#xA;&lt;p&gt;已经有迹象表明创业公司可能不会特别广泛传播。创业公司的传播似乎比工业革命的传播慢得多，尽管现在的通信速度快得多。&lt;/p&gt;&#xA;&lt;p&gt;在博尔顿与瓦特成立后的几十年内，蒸汽机散布在北欧和北美各地。工业化有一段时间没有传播到这些地区以外。它只传播到有强大中产阶级的地方——即私人公民可以发财而不被没收的国家。否则，投资工厂就不值得了。但在有强大中产阶级的国家，工业技术很容易扎根。单个矿山或工厂主可以决定安装蒸汽机，几年内他可能会找到当地的人来为他制造一个。所以蒸汽机传播很快。而且它们传播广泛，因为矿山和工厂的位置是由河流、港口和原材料来源等特征决定的。[2]&lt;/p&gt;&#xA;&lt;p&gt;创业公司似乎不那么容易传播，部分是因为它们更多是社会的而不是技术的现象，部分是因为它们不与地理相关。单个欧洲制造商可以进口工业技术，它们会工作得很好。但这似乎对创业公司不太有效：你需要一个专业知识的社区，就像你在电影业中一样。[3] 此外，没有相同的力量推动创业公司传播。一旦铁路或电网被发明，每个地区都必须拥有它们。没有铁路或电力的地区是一个丰富的潜在市场。但这对创业公司来说不是真的。不需要法国的微软或德国的谷歌。&lt;/p&gt;&#xA;&lt;p&gt;政府可能决定他们想在当地鼓励创业公司，但政府政策不能像真正的需求那样将它们召唤出来。&lt;/p&gt;&#xA;&lt;p&gt;这一切将如何发展？如果我现在必须预测，我会说创业公司会传播，但非常缓慢，因为它们的传播将不是由政府政策（不会起作用）或市场需求（不存在）驱动的，而是在它发生的程度上，由迄今为止导致创业文化传播的相同随机因素驱动。而这种随机因素将越来越被现有创业中心的吸引力所压倒。&lt;/p&gt;&#xA;&lt;p&gt;硅谷之所以在那里，是因为威廉·肖克利想搬回他长大的帕洛阿尔托，被他吸引到西部与他一起工作的专家们非常喜欢那里而留了下来。西雅图作为科技中心的地位很大程度上归功于同样的原因：盖茨和艾伦想回家。否则，阿尔伯克基可能会在排名中拥有西雅图的位置。波士顿是一个科技中心，因为它是美国乃至世界的知识之都。如果电池风险投资公司没有拒绝Facebook，波士顿现在在创业雷达屏幕上会大得多。&lt;/p&gt;&#xA;&lt;p&gt;但当然，Facebook在硅谷而不是波士顿获得资助并非巧合。硅谷比波士顿有更多更大胆的投资者，甚至本科生都知道这一点。&lt;/p&gt;&#xA;&lt;p&gt;波士顿的例子说明了在这个游戏的后期建立一个新的创业中心的困难。如果你想通过重现现有创业中心发生的方式来创建一个创业中心，方法是在一个如此美好的地方建立一流的研究大学，以至于富人想住在那里。那么这个城市将对两个你需要的群体都友好：创始人和投资者。这就是产生硅谷的组合。但硅谷没有硅谷与之竞争。如果你现在尝试在一个好地方建立一所伟大大学来创建创业中心，它会更难开始，因为它产生的许多最好的创业公司会被吸引到现有的创业中心。&lt;/p&gt;&#xA;&lt;p&gt;最近我提出了一个潜在的捷径：付钱让创业公司搬迁。一旦你有足够多的优秀创业公司在一个地方，它将创造一个自我维持的连锁反应。创始人会开始搬到那里而不需要付钱，因为那是他们的同行所在的地方，投资者也会出现，因为那是交易所在的地方。&lt;/p&gt;&#xA;&lt;p&gt;在实践中，我怀疑任何政府都有胆量尝试这个，或者有正确的头脑来做。我并不是作为一个实用的建议，而更多是对故意创建创业中心所需最低限度的探索。&lt;/p&gt;&#xA;&lt;p&gt;最可能的情况是（1）没有政府会成功建立创业中心，（2）创业文化的传播将因此由迄今为止驱动它的随机因素驱动，但是（3）这些因素将越来越被现有创业中心的吸引力所压倒。结果：这场革命，如果它是一场革命的话，将是异常本地化的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 有两种非常不同类型的创业公司：一种是自然演化的，另一种是为了&amp;quot;商业化&amp;quot;科学发现而被召唤出来的。大多数计算机/软件创业公司现在是第一种，大多数制药创业公司是第二种。当我在本文中谈论创业公司时，我指的是第一种创业公司。使第二种创业公司传播没有困难：你所要做的就是资助医学研究实验室；商业化专家们抛出的任何新发现就像建造一个新机场一样简单。第二种创业公司既不需要也不产生创业文化。但这意味着拥有第二种创业公司不会让你得到第一种创业公司。费城就是一个例子：很多第二种创业公司，但几乎没有第一种。&lt;/p&gt;&#xA;&lt;p&gt;顺便说一句，谷歌可能看起来像第二种创业公司的一个例子，但它不是。谷歌不是商业化的PageRank。他们可以使用另一种算法，一切都会是一样的。使谷歌成为谷歌的是他们在网络演化的关键时期关心做好搜索。&lt;/p&gt;&#xA;&lt;p&gt;[2] 瓦特没有发明蒸汽机。他的关键发明是一个使蒸汽机效率显著提高的改进：独立的冷凝器。但这简化了他的作用。他对问题有如此不同的态度，并以如此大的能量接近它，以至于他改变了这个领域。也许最准确的说法是瓦特重新发明了蒸汽机。&lt;/p&gt;&#xA;&lt;p&gt;[3] 这里最大的反例是Skype。如果你做的事情在美国会被关闭，那么位于别处就成为优势。这就是为什么Kazaa取代了Napster。创始人从运行Kazaa获得的专业知识和联系有助于确保Skype的成功。&lt;/p&gt;&#xA;&lt;p&gt;感谢帕特里克·科利森、杰西卡·利文斯顿和弗雷德·威尔逊阅读本文草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么在经济衰退时期创业</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/badeconomy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/badeconomy/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/badeconomy/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;为什么在经济衰退时期创业&#34;&gt;为什么在经济衰退时期创业&lt;/h1&gt;&#xA;&lt;p&gt;想要创业吗？获得Y Combinator的资助。&lt;/p&gt;&#xA;&lt;p&gt;2008年10月&lt;/p&gt;&#xA;&lt;p&gt;经济形势显然如此严峻，一些专家担心我们可能会迎来一个像七十年代中期那样糟糕的时期。当时微软和苹果公司成立。&lt;/p&gt;&#xA;&lt;p&gt;正如这些例子所示，经济衰退时期可能不是创业的坏时机。我并不是说这特别好。真相更无聊：经济状况其实并不那么重要。&lt;/p&gt;&#xA;&lt;p&gt;如果我们从资助这么多创业公司中学到了一件事，那就是它们的成功或失败取决于创始人的素质。经济当然有影响，但作为成功的预测因素，与创始人相比，它只是四舍五入的误差。&lt;/p&gt;&#xA;&lt;p&gt;这意味着重要的是你是谁，而不是你什么时候做。如果你是合适的人，即使在经济不好的时候你也会成功。如果你不是，好的经济也无法拯救你。那些认为&amp;quot;我最好现在不要创业，因为经济如此糟糕&amp;quot;的人，与在泡沫时期认为&amp;quot;我只需要创业，就会变得富有&amp;quot;的人犯了同样的错误。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你想提高机会，你应该更多地考虑你能招募谁作为联合创始人，而不是经济状况。如果你担心公司生存的威胁，不要在新闻中寻找它们。照照镜子。&lt;/p&gt;&#xA;&lt;p&gt;但对于任何给定的创始人团队，在经济好转之前等待跳跃不是更明智吗？如果你要开餐厅，也许吧，但如果你从事技术工作，就不是了。技术的发展或多或少独立于股票市场。所以对于任何给定的想法，在经济不好时快速行动的回报比等待更高。微软的第一个产品是Altair的Basic解释器。这正是1975年世界所需要的，但如果盖茨和艾伦决定等几年，那就太晚了。&lt;/p&gt;&#xA;&lt;p&gt;当然，你现在有的想法不会是你最后一个。总是有新的想法。但如果你有一个特定的想法想要付诸行动，现在就行动。&lt;/p&gt;&#xA;&lt;p&gt;这并不意味着你可以忽视经济。客户和投资者都会感到拮据。客户感到拮据不一定是问题：你甚至可能从中受益，通过制造省钱的东西。创业公司通常让东西更便宜，所以在这方面，它们比大公司更有条件在衰退中繁荣。&lt;/p&gt;&#xA;&lt;p&gt;投资者更多是个问题。创业公司通常需要筹集一定数量的外部资金，投资者往往在经济不好时不愿意投资。他们不应该这样。每个人都知道你应该在时机不好时买入，在时机好时卖出。但当然，投资如此违反直觉的原因是，在股权市场中，好时机被定义为每个人都认为是买入的时候。你必须是一个逆向投资者才能正确，根据定义，只有少数投资者可以。&lt;/p&gt;&#xA;&lt;p&gt;所以就像1999年的投资者们互相踩踏试图投资糟糕的创业公司一样，2009年的投资者们大概也会不愿意投资好的创业公司。&lt;/p&gt;&#xA;&lt;p&gt;你必须适应这一点。但这没什么新鲜的：创业公司总是必须适应投资者的反复无常。在任何经济条件下问任何创始人是否认为投资者善变，看看他们做的表情。去年你必须准备好解释你的创业公司如何病毒式传播。明年你必须解释它如何能够抵御衰退。&lt;/p&gt;&#xA;&lt;p&gt;（这两者都是很好的状态。投资者犯的错误不是他们使用的标准，而是他们总是倾向于关注一个而排除其他的。）&lt;/p&gt;&#xA;&lt;p&gt;幸运的是，让创业公司抵御衰退的方法就是做你无论如何都应该做的事情：尽可能便宜地运营它。多年来我一直告诉创始人，成功的最可靠途径成为企业界的蟑螂。创业公司死亡的直接原因总是资金耗尽。所以你的公司运营成本越低，就越难杀死它。幸运的是，运行创业公司的成本已经变得非常便宜。衰退会让它更便宜。&lt;/p&gt;&#xA;&lt;p&gt;如果真的来了核冬天，做蟑螂可能比保住工作更安全。如果客户不再负担得起你，他们可能会一个个离开，但你不会一下子失去他们；市场不会&amp;quot;减少人手&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;如果你辞职创业失败了，找不到另一份工作怎么办？如果你从事销售或市场营销，这可能是个问题。在这些领域，在经济不好时找新工作可能需要几个月。但黑客似乎更具流动性。好的黑客总能找到某种工作。可能不是你梦想的工作，但你不会饿死。&lt;/p&gt;&#xA;&lt;p&gt;坏时机的另一个优势是竞争更少。技术列车定期离站。如果其他人都在角落里发抖，你可能会有一整节车厢给自己。&lt;/p&gt;&#xA;&lt;p&gt;你也是投资者。作为创始人，你用工作购买股票：拉里和谢尔盖如此富有，与其说是他们做了价值数百亿美元的工作，不如说他们是谷歌的第一批投资者。像任何投资者一样，你应该在时机不好时买入。&lt;/p&gt;&#xA;&lt;p&gt;几段前当我谈到投资者不愿意在坏市场向创业公司投资时，即使那时他们理性上应该最愿意购买，你是否点头同意，认为&amp;quot;愚蠢的投资者&amp;quot;？嗯，创始人也好不到哪里去。时机不好时，黑客去读研究生。毫无疑问这次也会发生。事实上，让前一段话成真的是大多数读者不会相信它——至少不会到付诸行动的程度。&lt;/p&gt;&#xA;&lt;p&gt;所以也许经济衰退是创业的好时机。很难说像缺乏竞争这样的优势是否胜过像不情愿的投资者这样的劣势。但无论如何这不重要。重要的是人。对于给定的人在给定的技术上工作的时候总是现在。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么电视输了</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/convergence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/convergence/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/convergence/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;为什么电视输了&#34;&gt;为什么电视输了&lt;/h1&gt;&#xA;&lt;p&gt;2009年3月&lt;/p&gt;&#xA;&lt;p&gt;大约二十年前，人们注意到计算机和电视正在发生碰撞，并开始猜测它们融合时会产生什么。我们现在知道了答案：计算机。现在很清楚，即使使用&amp;quot;融合&amp;quot;这个词，我们也给了电视太多的信任。这与其说是融合，不如说是替代。人们可能仍然观看他们称之为&amp;quot;电视节目&amp;quot;的东西，但他们主要会在电脑上观看。&lt;/p&gt;&#xA;&lt;p&gt;是什么决定了计算机的胜利？四种力量，其中三种是可以预见的，一种则较难预见。&lt;/p&gt;&#xA;&lt;p&gt;一个可预见的胜利原因是互联网是一个开放平台。任何人都可以在上面构建任何他们想要的东西，市场选择胜者。因此，创新以黑客速度而非大公司速度发生。&lt;/p&gt;&#xA;&lt;p&gt;第二个是摩尔定律，它对互联网带宽发挥了通常的魔力。[1]&lt;/p&gt;&#xA;&lt;p&gt;计算机获胜的第三个原因是盗版。用户喜欢它不仅因为它是免费的，还因为它更方便。Bittorrent和YouTube已经训练了新一代观众，让他们知道观看节目的地方是在电脑屏幕上。[2]&lt;/p&gt;&#xA;&lt;p&gt;更令人惊讶的力量是一种特定类型的创新：社交应用。普通青少年孩子与朋友交谈的能力几乎是无限的。但他们不能一直与朋友在一起。我在高中的时候解决方案是电话。现在是社交网络、多人游戏和各种消息应用。接触它们所有的方式是通过计算机。[3]这意味着每个青少年孩子（a）想要一台连接互联网的计算机，（b）有动力学习如何使用它，（c）在它前面花费无数小时。&lt;/p&gt;&#xA;&lt;p&gt;这是最强大的力量。这就是让每个人都想要计算机的原因。技术迷们得到计算机是因为他们喜欢它们。然后游戏玩家们得到计算机来玩游戏。但让其他人都想要计算机的是与其他人联系：这就是让连奶奶和14岁女孩都想要计算机的原因。在几十年将静脉输液直接注入观众的过程中，娱乐行业的人们可以理解地将他们视为相当被动的。他们以为他们能够支配节目到达观众的方式。但他们低估了他们彼此联系的欲望的力量。&lt;/p&gt;&#xA;&lt;p&gt;Facebook杀死了电视。当然，这是极度简化的，但可能是你能用三个词得到的最接近真相的答案。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;电视网络似乎已经不情愿地看到事情的发展方向，并做出了回应，不情愿地将他们的内容放在网上。但他们仍在拖后腿。他们似乎仍然希望人们在电视上观看节目，就像把故事放在网上的报纸仍然似乎希望人们等到第二天早上阅读印刷在纸上的版本一样。他们都应该面对互联网是主要媒介的事实。&lt;/p&gt;&#xA;&lt;p&gt;如果他们早点这样做，他们会处于更有利的位置。当一个新的媒介出现，强大到足以让在位者感到紧张时，那么它可能强大到足以获胜，他们能做的最好的事情就是立即跳入。&lt;/p&gt;&#xA;&lt;p&gt;不管他们喜欢与否，重大的变化即将到来，因为互联网消解了广播媒体的两大基石：同步性和本地性。在互联网上，你不必向每个人发送相同的信号，也不必从本地源发送给他们。人们将在他们想要的时候观看他们想要的东西，并根据他们最强烈的共同兴趣进行分组。也许他们最强烈的共同兴趣将是他们的物理位置，但我猜不是。这意味着地方电视可能已经死了。它是旧技术施加的限制的产物。如果现在有人从头创建一个基于互联网的电视公司，他们可能有一些针对特定地区的节目的计划，但这不会是首要任务。&lt;/p&gt;&#xA;&lt;p&gt;同步性和本地性是联系在一起的。电视网络附属机构关心10点播放什么，因为这样可以给11点的本地新闻带来观众。然而，这种联系增加了更多的脆弱性而不是力量：人们不是在10点观看节目，因为他们想之后观看新闻。&lt;/p&gt;&#xA;&lt;p&gt;电视网络将对抗这些趋势，因为他们没有足够的灵活性来适应它们。他们受到地方附属机构的束缚，就像汽车公司受到经销商和工会的束缚一样。不可避免的是，运行网络的人将采取简单的路线，并试图让旧模式再运行几年，就像唱片公司所做的那样。&lt;/p&gt;&#xA;&lt;p&gt;《华尔街日报》最近的一篇文章描述了电视网络如何试图增加更多直播节目，部分原因是迫使观众同步观看电视，而不是在适合他们的时候观看录制的节目。他们不是提供观众想要的东西，而是试图强迫他们改变习惯以适应网络过时的商业模式。除非你有垄断或卡特尔来强制执行，否则这永远不会奏效，即使那样也只是暂时有效。&lt;/p&gt;&#xA;&lt;p&gt;网络喜欢直播节目的另一个原因是它们制作成本更低。在那里他们有正确的想法，但他们没有把它推到结论。直播内容可能比网络意识到的便宜得多，利用成本大幅下降的方法是增加数量。网络被看到这整个推理路线所阻止，因为他们仍然认为自己在广播业务中——向每个人发送一个信号。[4]&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;现在是创办任何与电视网络竞争的公司的好时机。这就是很多互联网初创公司在做的事情，尽管他们可能没有把这个作为明确的目标。人们每天只有这么多的休闲时间，而电视是以长时段为前提的（不像谷歌，以快速发送用户为荣），所以占用他们时间的任何东西都在与它竞争。但除了这样的间接竞争对手，我认为电视公司将面临越来越多的直接竞争对手。&lt;/p&gt;&#xA;&lt;p&gt;即使在有线电视中，长尾也被启动新频道必须跨越的门槛过早地截断了。在互联网上它会更长，并且在其中会有更多的流动性。在这个新世界中，现有的参与者将只拥有任何大公司在其市场中的优势。&lt;/p&gt;&#xA;&lt;p&gt;这将改变网络和节目制作人之间的权力平衡。网络曾经是守门人。他们分发你的作品，并在上面销售广告。现在制作节目的人可以自己分发。网络现在提供的主要价值是广告销售。这将使他们处于服务提供商而非出版商的位置。&lt;/p&gt;&#xA;&lt;p&gt;节目将发生更大的变化。在互联网上，没有理由保持他们当前的格式，甚至没有理由保持他们拥有单一格式的事实。确实，即将到来的更有趣的融合是在节目和游戏之间。但对于20年互联网上分发什么样的娱乐，我不敢做出任何预测，除了事情会变化很大。我们将得到最有想象力的人能创造出的任何东西。这就是互联网获胜的原因。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 感谢Trevor Blackwell提出这个观点。他补充说：&amp;ldquo;我记得在90年代初，电话公司高管在谈论融合时眼睛闪闪发光。他们认为大多数节目将按需提供，他们将实施它并赚很多钱。结果没有奏效。他们假设他们的本地网络基础设施对于视频点播至关重要，因为你不可能通过互联网从几个数据中心流式传输。当时（1992年）整个跨州互联网带宽都不足以支持一个视频流。但广域带宽比他们预期的增长更多，他们被iTunes和Hulu击败了。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;[2] 版权所有者倾向于关注他们看到的盗版方面，即收入损失。因此他们认为推动用户这样做的是免费获得某些东西的愿望。但iTunes表明，如果你让事情变得容易，人们会为在线内容付费。盗版的一个重要因素只是它提供了更好的用户体验。&lt;/p&gt;&#xA;&lt;p&gt;[3] 或者实际上是一台计算机的手机。我没有对将取代电视的设备大小做出任何预测，只是它将有一个浏览器并通过互联网获取数据。&lt;/p&gt;&#xA;&lt;p&gt;[4] Emmett Shear写道：&amp;ldquo;我认为体育的长尾可能比其他类型内容的长尾更大。任何人都可以广播一场对约10,000人有趣的高中橄榄球比赛，即使制作质量不是很好。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、Trevor Blackwell、Nancy Cook、Michael Seibel、Emmett Shear和Fred Wilson阅读本文的草稿。&lt;/p&gt;&#xA;&lt;h2 id=&#34;相关&#34;&gt;相关&lt;/h2&gt;&#xA;&lt;p&gt;日语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>书呆子的复仇</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/icad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/icad/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/icad/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;书呆子的复仇&#34;&gt;书呆子的复仇&lt;/h1&gt;&#xA;&lt;p&gt;想要创业？获得Y Combinator的投资。&lt;/p&gt;&#xA;&lt;p&gt;2002年5月&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;我们当时在追逐C++程序员。我们成功地将他们中的许多人拖到了Lisp的路上。&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Guy Steele，Java规范合著者&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在软件行业中，一直存在着一场持续的斗争，一方是尖脑袋的学者，另一方是同样强大的力量——尖头发的老板。大家都知道尖头发的老板是谁，对吧？我认为技术界的大多数人不仅认识这个卡通人物，而且知道他们公司中这个人物的原型是谁。&lt;/p&gt;&#xA;&lt;p&gt;尖头发的老板奇迹般地结合了两个各自常见但很少同时出现的品质：(a)他对技术一无所知，(b)他对技术有非常强烈的看法。&lt;/p&gt;&#xA;&lt;p&gt;假设，例如，你需要编写一个软件。尖头发的老板对这个软件应该如何工作一无所知，也无法区分一种编程语言和另一种，但他知道你应该用什么语言来编写它。完全正确。他认为你应该用Java来编写。&lt;/p&gt;&#xA;&lt;p&gt;他为什么这么认为？让我们来看看尖头发的老板的大脑里面在想什么。他在想的大概是这样的。Java是一个标准。我知道它一定是标准，因为我总是在媒体上看到它。既然它是标准，我使用它就不会惹上麻烦。这也意味着总会有很多Java程序员，所以如果现在为我工作的程序员辞职了——为我工作的程序员总是神秘地辞职——我可以很容易地替换他们。&lt;/p&gt;&#xA;&lt;p&gt;嗯，这听起来并不那么不合理。但这一切都基于一个未言明的假设，而这个假设结果是错误的。尖头发的老板认为所有编程语言都差不多是等价的。如果这是真的，那他完全正确。如果所有语言都等价，当然，使用其他人都在使用的语言。&lt;/p&gt;&#xA;&lt;p&gt;但并非所有语言都是等价的，我想我甚至不需要深入它们之间的差异就能向你证明这一点。如果你在1992年问尖头发的老板软件应该用什么语言编写，他会像今天一样毫不犹豫地回答。软件应该用C++编写。但如果所有语言都等价，为什么尖头发的老板的意见会改变？事实上，Java的开发者为什么要费心创建一种新语言？&lt;/p&gt;&#xA;&lt;p&gt;据推测，如果你创建一种新语言，那是因为你认为它在某些方面比人们已有的语言更好。事实上，Gosling在第一份Java白皮书中明确表示，Java被设计用来解决C++的一些问题。所以事情就是这样：语言并不都是等价的。如果你顺着尖头发的老板的大脑思路追踪到Java，然后再回溯Java的历史到它的起源，你最终会得到一个与你开始时的假设相矛盾的想法。&lt;/p&gt;&#xA;&lt;p&gt;那么，谁是对的？James Gosling，还是尖头发的老板？毫不奇怪，Gosling是对的。某些语言对于某些问题来说比其他语言更好。你知道，这引发了一些有趣的问题。Java被设计为在特定问题上比C++更好。什么问题？什么时候Java更好，什么时候C++更好？是否存在某些情况下其他语言比两者都更好？&lt;/p&gt;&#xA;&lt;p&gt;一旦你开始考虑这个问题，你就打开了一个真正的潘多拉盒子。如果尖头发的老板不得不以全部复杂性来思考这个问题，他的大脑会爆炸。只要他认为所有语言都等价，他所要做的就是选择一个似乎最有势头的语言，既然这更多是时尚问题而不是技术问题，即使他也可能得到正确的答案。但如果语言各不相同，他突然必须同时解两个方程，试图在他一无所知的两件事之间找到最佳平衡：解决他需要解决的问题的二十种左右主要语言的相对适用性，以及为每种语言找到程序员、库等的可能性。如果门后是这样的东西，尖头发的老板不想打开它也就不足为奇了。&lt;/p&gt;&#xA;&lt;p&gt;认为所有编程语言都等价的缺点是这不是真的。但优点是它让你的生活简单得多。我认为这是这个想法如此广泛传播的主要原因。这是一个令人舒适的想法。&lt;/p&gt;&#xA;&lt;p&gt;我们知道Java一定相当不错，因为它是酷的、新的编程语言。或者真是如此吗？如果你从远处看编程语言的世界，看起来Java是最新的事物。（从足够远的地方看，你只能看到Sun支付的大型闪烁广告牌。）但如果你近距离观察这个世界，你会发现酷的程度是不同的。在黑客亚文化中，有一种叫做Perl的语言被认为比Java酷得多。例如，Slashdot就是用Perl生成的。我想你不会发现那些家伙使用Java Server Pages。但还有另一种更新的语言叫做Python，它的用户倾向于看不起Perl，还有更多的语言在等待。&lt;/p&gt;&#xA;&lt;p&gt;如果你按顺序看这些语言，Java、Perl、Python，你会注意到一个有趣的模式。至少，如果你是Lisp黑客，你会注意到这种模式。每一种都比前一种更像Lisp。Python甚至复制了许多Lisp黑客认为是错误的特性。你可以将简单的Lisp程序逐行翻译成Python。现在是2002年，编程语言几乎赶上了1958年。&lt;/p&gt;&#xA;&lt;h2 id=&#34;追上数学&#34;&gt;追上数学&lt;/h2&gt;&#xA;&lt;p&gt;我的意思是，Lisp是John McCarthy在1958年首次发现的，而流行的编程语言现在才赶上他当时发展的想法。&lt;/p&gt;&#xA;&lt;p&gt;现在，这怎么可能是真的？计算机技术不是变化很快的东西吗？我的意思是，在1958年，计算机是冰箱大小的庞然大物，处理能力相当于手表。怎么可能有那么古老的技术仍然相关，更不用说比最新的发展更优越？&lt;/p&gt;&#xA;&lt;p&gt;我来告诉你原因。这是因为Lisp并不是真正被设计为一种编程语言，至少不是我们今天意义上的编程语言。我们所说的编程语言是我们用来告诉计算机做什么的东西。McCarthy最终确实打算发展这种意义上的编程语言，但我们实际得到的Lisp是基于他作为理论练习所做的另一件事——努力定义一个比图灵机更方便的替代方案。正如McCarthy后来所说，&lt;/p&gt;&#xA;&lt;p&gt;展示Lisp比图灵机更整洁的另一种方法是编写一个通用的Lisp函数，并证明它比通用图灵机的描述更简洁、更易理解。这就是Lisp函数eval&amp;hellip;&amp;hellip;它计算Lisp表达式的值&amp;hellip;&amp;hellip;编写eval需要发明一种表示Lisp函数作为Lisp数据的符号，这种符号是为了论文的目的而设计的，并没有想到它会用来实际表达Lisp程序。&lt;/p&gt;&#xA;&lt;p&gt;接下来发生的事情是，在1958年末的某个时候，Steve Russell，McCarthy的一个研究生，看着这个eval的定义，意识到如果将它翻译成机器语言，结果将是一个Lisp解释器。&lt;/p&gt;&#xA;&lt;p&gt;这在当时是一个很大的惊喜。以下是McCarthy后来在采访中对此的评论：&lt;/p&gt;&#xA;&lt;p&gt;Steve Russell说，看，为什么我不来编程这个eval&amp;hellip;&amp;hellip;，我对他说，呵，呵，你把理论和实践混淆了，这个eval是为了阅读，不是为了计算的。但他还是继续做了。也就是说，他把我论文中的eval编译成[IBM] 704机器码，修复了一些错误，然后将其宣传为Lisp解释器，它确实是。在那时，Lisp基本上就有了今天的形式。&lt;/p&gt;&#xA;&lt;p&gt;所以，我想在几周内，McCarthy发现他的理论练习转变为实际的编程语言——而且是一种比他预期更强大的语言。&lt;/p&gt;&#xA;&lt;p&gt;所以，这个1950年代的语言没有过时的简短解释是它不是技术而是数学，而数学不会过时。将Lisp比较的正确对象不是1950年代的硬件，而是，比如说，快速排序算法，它发现于1960年，至今仍然是最快的通用排序算法。&lt;/p&gt;&#xA;&lt;p&gt;1950年代还有另一种语言幸存下来，Fortran，它代表了语言设计的相反方法。Lisp是一段意想不到地转变为编程语言的理论。Fortran是故意被开发为一种编程语言的，但我们现在认为是一种非常低级的语言。&lt;/p&gt;&#xA;&lt;p&gt;1956年开发的Fortran I语言与现在的Fortran是完全不同的动物。Fortran I基本上是带有数学的汇编语言。在某些方面它比最近的汇编语言功能更弱；例如，没有子程序，只有分支。现在的Fortran可以说更接近Lisp而不是Fortran I。&lt;/p&gt;&#xA;&lt;p&gt;Lisp和Fortran是两个独立进化树的树干，一个根植于数学，一个根植于机器架构。这两棵树从那时起一直在收敛。Lisp开始时很强大，在接下来的二十年里变得快速。所谓的主流语言开始时很快，在接下来的四十年里逐渐变得更强大，直到现在它们中最先进的相当接近Lisp。接近，但仍然缺少一些东西。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使lisp不同的东西&#34;&gt;使Lisp不同的东西&lt;/h2&gt;&#xA;&lt;p&gt;当Lisp首次被开发时，它体现了九个新想法。其中一些我们现在认为是理所当然的，其他只在更先进的语言中看到，有两个仍然是Lisp独有的。这九个想法按主流采用的顺序排列，&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;条件语句&lt;/strong&gt;。条件语句是if-then-else结构。我们现在认为这是理所当然的，但Fortran I没有它们。它只有基于底层机器指令的条件goto。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;函数类型&lt;/strong&gt;。在Lisp中，函数是一种像整数或字符串一样的数据类型。它们有字面表示，可以存储在变量中，可以作为参数传递，等等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;递归&lt;/strong&gt;。Lisp是第一种支持递归的编程语言。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;动态类型&lt;/strong&gt;。在Lisp中，所有变量实际上都是指针。值才有类型，变量没有，赋值或绑定变量意味着复制指针，而不是它们指向的内容。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;垃圾回收&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;由表达式组成的程序&lt;/strong&gt;。Lisp程序是表达式的树，每个表达式都返回一个值。这与Fortran和大多数后续语言形成对比，它们区分表达式和语句。&lt;/p&gt;&#xA;&lt;p&gt;在Fortran I中很自然要有这种区别，因为你不能嵌套语句。所以虽然你需要表达式来进行数学运算，但没有必要让其他任何东西返回值，因为不可能有任何东西在等待它。&lt;/p&gt;&#xA;&lt;p&gt;随着块结构语言的出现，这种限制消失了，但那时已经太晚了。表达式和语句的区别已经根深蒂固。它从Fortran传播到Algol，然后传播到它们两者的后代。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;符号类型&lt;/strong&gt;。符号实际上是指向存储在哈希表中的字符串的指针。所以你可以通过比较指针来测试相等性，而不是比较每个字符。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用符号和常量树的代码表示法&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;整个语言一直存在&lt;/strong&gt;。读取时、编译时和运行时之间没有真正的区别。你可以在读取时编译或运行代码，在编译时读取或运行代码，在运行时读取或编译代码。&lt;/p&gt;&#xA;&lt;p&gt;在读取时运行代码允许用户重新编程Lisp的语法；在编译时运行代码是宏的基础；在运行时编译是Lisp在Emacs等程序中用作扩展语言的基础；在运行时读取使程序能够使用s表达式进行通信，这是一个最近重新发明的想法，称为XML。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;当Lisp首次出现时，这些想法与普通的编程实践相距甚远，这在很大程度上是由1950年代后期可用的硬件决定的。随着时间的推移，默认语言，体现在一系列流行语言中，逐渐向Lisp发展。想法1-5现在已经广泛传播。数字6开始出现在主流中。Python有7的形式，尽管似乎没有任何语法。&lt;/p&gt;&#xA;&lt;p&gt;至于数字8，这可能是最有趣的。想法8和9只是偶然成为Lisp的一部分，因为Steve Russell实现了McCarthy从未打算实现的东西。然而，这些想法结果要对Lisp的奇怪外观和其最独特的特征负责。Lisp看起来奇怪不是因为它有奇怪的语法，而是因为它没有语法；你直接在解析树中表达程序，当其他语言被解析时，这些解析树是在幕后构建的，而这些树是由列表组成的，列表是Lisp数据结构。&lt;/p&gt;&#xA;&lt;p&gt;用其自身的数据结构表达语言结果证明是一个非常强大的特性。想法8和9一起意味着你可以编写编写程序的程序。这可能听起来像是一个奇怪的想法，但在Lisp中这是日常的事情。最常见的方法是使用叫做宏的东西。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;宏&amp;quot;这个术语在Lisp中的含义与其他语言中的含义不同。Lisp宏可以是从缩写到新语言编译器的任何东西。如果你想真正理解Lisp，或者只是扩展你的编程视野，我会学习更多关于宏的知识。&lt;/p&gt;&#xA;&lt;p&gt;据我所知，Lisp意义上的宏仍然是Lisp独有的。这部分是因为为了拥有宏，你可能必须使你的语言看起来像Lisp一样奇怪。也可能是因为如果你确实添加了这最后的力量增量，你不能再声称你发明了一种新语言，只是一种新的Lisp方言。&lt;/p&gt;&#xA;&lt;p&gt;我提到这主要是作为一个笑话，但这是相当真实的。如果你定义一种具有car、cdr、cons、quote、cond、atom、eq和函数列表表示法的语言，那么你可以从中构建出所有其余的Lisp。这实际上是Lisp的定义品质：McCarthy给予Lisp现在的形状就是为了使这一点成为可能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;语言重要的地方&#34;&gt;语言重要的地方&lt;/h2&gt;&#xA;&lt;p&gt;所以假设Lisp确实代表了主流语言渐近接近的一种极限——这是否意味着你实际上应该使用它来编写软件？使用不太强大的语言你会失去多少？有时候，不处于创新的最前沿不是更明智吗？受欢迎度在某种程度上不是其自身的证明吗？例如，尖头发的老板想要使用一种他可以轻松雇到程序员的语言，难道不对吗？&lt;/p&gt;&#xA;&lt;p&gt;当然，有些项目编程语言的选择并不重要。通常，应用程序要求越高，使用强大语言获得的优势就越大。但很多项目根本不要求高。大多数编程可能包括编写小的粘合程序，对于小的粘合程序，你可以使用任何你已经熟悉的语言，并且对于你需要做的事情有好的库。如果你只需要将数据从一个Windows应用程序馈送到另一个，当然，使用Visual Basic。&lt;/p&gt;</description>
    </item>
    <item>
      <title>会写的人和不会写的人</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/writes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/writes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/writes/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;会写的人和不会写的人&#34;&gt;会写的人和不会写的人&lt;/h1&gt;&#xA;&lt;p&gt;2024年10月&lt;/p&gt;&#xA;&lt;p&gt;我通常不愿意对技术做出预测，但我对这个预测相当有信心：再过几十年，不会有很多人能够写作。&lt;/p&gt;&#xA;&lt;p&gt;如果你是作家，你学到的最奇怪的事情之一是有多少人在写作方面有困难。医生知道有多少人有一颗他们担心的痣；擅长设置电脑的人知道有多少人不会设置；作家知道有多少人需要写作帮助。&lt;/p&gt;&#xA;&lt;p&gt;这么多人在写作方面有困难的原因是它从根本上就是困难的。要写得好你必须思考清楚，而思考清楚是困难的。&lt;/p&gt;&#xA;&lt;p&gt;然而写作渗透到许多工作中，而且工作越有声望，它往往要求越多的写作。&lt;/p&gt;&#xA;&lt;p&gt;这两个强大的对立力量，对写作的普遍期望和做它的不可减少的困难，创造了巨大的压力。这就是为什么杰出的教授经常被发现诉诸剽窃。在这些案件中，最令我震惊的是偷窃的琐碎性。他们偷窃的东西通常是最普通的套话——任何甚至还算过得去的作家都可以毫不费力地写出来的东西。这意味着他们甚至还不算过得去的作家。&lt;/p&gt;&#xA;&lt;p&gt;直到最近，对于这些对立力量创造的压力没有方便的 escape valve。你可以付钱让别人为你写作，像肯尼迪，或者剽窃，像马丁·路德·金，但如果你不能购买或偷窃文字，你必须自己写。因此，几乎所有被期望写作的人都必须学会如何写作。&lt;/p&gt;&#xA;&lt;p&gt;不再是了。AI已经打开了这个世界。几乎所有写作的压力都消散了。你可以让AI为你写作，无论在学校还是工作。&lt;/p&gt;&#xA;&lt;p&gt;结果将是一个分为会写的人和不会写的人的世界。仍然会有一些人能够写作。我们中的一些人喜欢它。但在擅长写作和完全不会写作的人之间的中间地带将会消失。而不是好作家、普通作家和不会写作的人，将只有好作家和不会写作的人。&lt;/p&gt;&#xA;&lt;p&gt;有那么糟糕吗？当技术使技能过时时，技能消失不是很常见吗？没有多少铁匠留下了，这似乎也不是问题。&lt;/p&gt;&#xA;&lt;p&gt;是的，这很糟糕。原因是我之前提到的事情：写作就是思考。事实上，有一种思考只能通过写作来完成。你无法比Leslie Lamport更好地表达这一点：如果你在写作之外思考，你只是在认为你在思考。所以一个分为会写的人和不会写的人的世界比听起来更危险。它将是一个有思考的人和不会思考的人的世界。我知道我想成为哪一半，我打赌你也是。&lt;/p&gt;&#xA;&lt;p&gt;这种情况并非前所未有。在前工业时代，大多数人的工作使他们强壮。现在如果你想强壮，你锻炼。所以仍然有强壮的人，但只有那些选择强壮的人。&lt;/p&gt;&#xA;&lt;p&gt;写作将是同样的情况。仍然会有聪明的人，但只有那些选择聪明的人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;&#xA;&lt;p&gt;感谢杰西卡·利文斯顿、本·米勒和罗伯特·莫里斯阅读草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>伟大的黑客</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/gh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/gh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/gh/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;伟大的黑客&#34;&gt;伟大的黑客&lt;/h1&gt;&#xA;&lt;p&gt;2004年7月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自2004年Oscon大会的演讲。）&lt;/p&gt;&#xA;&lt;p&gt;几个月前我完成了一本新书，在评论中我不断注意到诸如&amp;quot;挑衅性&amp;quot;和&amp;quot;争议性&amp;quot;的词语。更不用说&amp;quot;白痴&amp;quot;了。&lt;/p&gt;&#xA;&lt;p&gt;我并不是想让这本书具有争议性。我试图让它高效。我不想浪费人们的时间告诉他们他们已经知道的事情。更高效的方法只是给他们差异。但我想这必然会产生一本令人担忧的书。&lt;/p&gt;&#xA;&lt;h2 id=&#34;爱迪生们&#34;&gt;爱迪生们&lt;/h2&gt;&#xA;&lt;p&gt;最具争议的想法是：财富的差异可能并不像我们想象的那么大问题。&lt;/p&gt;&#xA;&lt;p&gt;我在书中没有说财富差异本身就是好事。我说在某些情况下它可能是好事的标志。剧烈的头痛不是好事，但它可能是好事的标志——例如，你被击中头部后正在恢复意识。&lt;/p&gt;&#xA;&lt;p&gt;财富差异可能是生产力差异的标志。（在一个人的社会中，它们是相同的。）这几乎肯定是好事：如果你的社会没有生产力差异，可能不是因为每个人都是托马斯·爱迪生。而是因为你没有托马斯·爱迪生。&lt;/p&gt;&#xA;&lt;p&gt;在低技术社会中，你看不到太多的生产力差异。如果你有一群游牧民族为火收集木棍，最好的木棍收集者比最差的能多收集多少？两倍？而当你给人们一个像电脑这样的复杂工具时，他们能用它做的事情的差异是巨大的。&lt;/p&gt;&#xA;&lt;p&gt;这不是一个新想法。Fred Brooks在1974年写过这个，他引用的研究发表于1968年。但我认为他低估了程序员之间的差异。他写了代码行数方面的生产力：最好的程序员可以在十分之一的时间内解决给定问题。但如果问题没有给定呢？在编程中，就像在许多领域一样，困难的部分不是解决问题，而是决定要解决什么问题。想象力很难衡量，但在实践中它主导着以代码行数衡量的那种生产力。&lt;/p&gt;&#xA;&lt;p&gt;生产力在任何领域都有变化，但很少有领域变化如此之大。程序员之间的差异如此之大，以至于成为一种质的差异。我不认为这是编程固有的，但在每个领域，技术都放大了生产力的差异。我认为编程中发生的事情只是因为我们有很多技术杠杆。但在每个领域，杠杆都在变长，所以我们看到的差异是随着时间的推移，越来越多的领域都会看到的。公司和国家的成功将越来越取决于他们如何应对这个问题。&lt;/p&gt;&#xA;&lt;p&gt;如果生产力的差异随着技术而增加，那么最有生产力个体的贡献不仅会不成比例地大，而且会随着时间的推移而实际增长。当你达到一个群体的90%产出由其1%的成员创造的地步时，如果有什么（无论是维京袭击，还是中央计划）将他们的生产力拖到平均水平，你就会损失惨重。&lt;/p&gt;&#xA;&lt;p&gt;如果我们想充分利用他们，我们需要了解这些特别有生产力的人。什么激励他们？他们需要什么来做他们的工作？你如何认识他们？你如何让他们来为你工作？然后当然还有这个问题，你如何成为其中一员？&lt;/p&gt;&#xA;&lt;h2 id=&#34;不仅仅是金钱&#34;&gt;不仅仅是金钱&lt;/h2&gt;&#xA;&lt;p&gt;我认识一些超级黑客，所以我坐下来思考他们有什么共同点。他们的决定性品质可能是他们真的喜欢编程。普通程序员写代码是为了付账单。伟大的黑客认为这是他们为了乐趣而做的事情，并且很高兴发现有人会为此付钱。&lt;/p&gt;&#xA;&lt;p&gt;伟大的程序员有时被认为对金钱漠不关心。这不完全正确。确实，他们真正关心的只是做有趣的工作。但如果你赚了足够的钱，你就可以做任何你想做的工作，因此黑客被赚取巨额金钱的想法所吸引。但只要他们还必须每天上班工作，他们更关心在那里做什么，而不是得到多少报酬。&lt;/p&gt;&#xA;&lt;p&gt;从经济学上讲，这是最重要的事实，因为这意味着你不必支付伟大的黑客接近他们价值的报酬。一个伟大的程序员可能比普通程序员生产力高十倍或一百倍，但他会认为能获得三倍报酬就很幸运了。正如我稍后要解释的，这部分是因为伟大的黑客不知道他们有多好。但也是因为金钱不是他们主要想要的东西。&lt;/p&gt;&#xA;&lt;p&gt;黑客想要什么？像所有工匠一样，黑客喜欢好工具。事实上，这低估了。好的黑客发现无法忍受使用坏工具。他们会拒绝在错误基础设施的项目上工作。&lt;/p&gt;&#xA;&lt;p&gt;在我曾经工作过的一家创业公司，我们公告板上钉着的一张东西是IBM的广告。那是一张AS400的图片，标题写着，我认为，&amp;ldquo;黑客鄙视它。&amp;quot;[1]&lt;/p&gt;&#xA;&lt;p&gt;当你决定为项目使用什么基础设施时，你不仅在做出技术决定。你还在做出社会决定，而这可能是两者中更重要的。例如，如果你的公司想写一些软件，用Java写似乎是一个谨慎的选择。但当你选择一种语言时，你也在选择一个社区。你能雇佣来在Java项目上工作的程序员不会像你能雇佣来在Python项目上工作的那样聪明。而你的黑客的质量可能比你选择的语言更重要。虽然，坦率地说，好的黑客更喜欢Python而不是Java这一事实应该告诉你这些语言的相对优点。&lt;/p&gt;&#xA;&lt;p&gt;商业类型更喜欢最流行的语言，因为他们将语言视为标准。他们不想在公司上下注Betamax。但语言的问题是，它们不仅仅是标准。如果你必须通过网络传输比特，务必使用TCP/IP。但编程语言不仅仅是格式。编程语言是一种表达媒介。&lt;/p&gt;&#xA;&lt;p&gt;我读到Java刚刚超过Cobol成为最流行的语言。作为标准，你不能期望更多。但作为表达媒介，你可以做得更好。在我能想到的所有伟大程序员中，我只知道一个会自愿用Java编程。而在我能想到的所有不为Sun工作的伟大程序员中，在Java方面，我一个也不知道。&lt;/p&gt;&#xA;&lt;p&gt;伟大的黑客通常也坚持使用开源软件。不仅仅是因为它更好，还因为它给他们更多控制权。好的黑客坚持控制权。这是使他们成为好黑客的部分原因：当某些东西坏了时，他们需要修复它。你希望他们对你为他们编写的软件有这种感觉。当他们对操作系统有同样的感觉时，你不应该感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;几年前，一个风险投资家朋友告诉我他参与的一家新创业公司。听起来很有希望。但下次我和他交谈时，他们说他们决定在Windows NT上构建软件，并刚刚聘请了一位非常有经验的NT开发者担任首席技术官。当我听到这个时，我想，这些人注定要失败。第一，CTO不可能是第一流黑客，因为要成为杰出的NT开发者，他必须自愿多次使用NT，我无法想象一个伟大的黑客会这样做；第二，即使他很好，如果项目必须在NT上构建，他也很难雇佣到优秀的人才。[2]&lt;/p&gt;&#xA;&lt;h2 id=&#34;最后的边疆&#34;&gt;最后的边疆&lt;/h2&gt;&#xA;&lt;p&gt;除了软件，黑客最重要的工具可能是他的办公室。大公司认为办公室空间的功能是表达等级。但黑客不仅仅为此使用办公室：他们将办公室作为思考的地方。如果你是一家技术公司，他们的思想就是你的产品。所以让黑客在嘈杂、分散注意力的环境中工作，就像在油漆厂空气中充满烟尘。&lt;/p&gt;&#xA;&lt;p&gt;连环漫画Dilbert有很多关于隔间的说法，这是有充分理由的。我认识的所有黑客都鄙视它们。仅仅被中断的前景就足以阻止黑客处理困难问题。如果你想在有隔间的办公室里完成真正的工作，你只有两个选择：在家工作，或在别人不在的时候早点来、晚点来或周末来。公司没有意识到这是出了问题的标志吗？办公室环境应该是有助于你工作的东西，而不是你尽管如此才工作的东西。&lt;/p&gt;&#xA;&lt;p&gt;像思科这样的公司为每个人都有一间隔间而自豪，即使是CEO。但他们不像他们想象的那么先进；显然他们仍然将办公室空间视为等级的标志。还要注意，思科以很少在内部进行产品开发而闻名。他们通过收购创造新技术的创业公司来获得新技术——大概在那里黑客确实有安静的工作地方。&lt;/p&gt;&#xA;&lt;p&gt;一家理解黑客需求的大公司是微软。我曾经看到过微软的招聘广告，有一张门的大图片。为我们工作，前提是，我们会给你一个可以真正完成工作的地方。而且你知道，微软在大公司中之所以非凡，是因为他们能够在内部开发软件。也许不太好，但足够好。&lt;/p&gt;&#xA;&lt;p&gt;如果公司希望黑客有生产力，他们应该看看他们在家里做什么。在家里，黑客可以自己安排事情，以便完成最多的工作。当黑客在家工作时，他们不在嘈杂、开放的空间工作；他们在有门的房间里工作。他们在舒适、社区化的地方工作，周围有人，需要思考时可以散步，而不是在停车场英亩的玻璃盒子里。他们有可以在感到疲倦时小睡的沙发，而不是坐在桌前昏迷，假装工作。没有吸尘器人员在每晚黑客黄金时间呼啸而过。没有会议，或者，天哪，公司静修或团队建设练习。当你看他们在电脑上做什么时，你会发现它强化了我之前关于工具的说法。他们在工作时可能必须使用Java和Windows，但在家里，当他们可以自由选择时，你更可能发现他们使用Perl和Linux。&lt;/p&gt;&#xA;&lt;p&gt;事实上，这些关于Cobol或Java是最流行语言的统计数据可能会产生误导。如果我们想知道什么工具最好，我们应该看的是黑客在可以自由选择时选择什么——也就是说，在他们自己的项目中。当你问这个问题时，你会发现开源操作系统已经占据了主导市场份额，排名第一的语言可能是Perl。&lt;/p&gt;&#xA;&lt;h2 id=&#34;有趣&#34;&gt;有趣&lt;/h2&gt;&#xA;&lt;p&gt;除了好工具，黑客想要有趣的项目。什么使项目有趣？嗯，显然像隐形飞机或特效软件那样明显性感的应用程序会很有趣。但任何应用程序如果提出新颖的技术挑战，都可能很有趣。所以很难预测黑客会喜欢哪些问题，因为有些只有在工作的人发现新的解决方案时才变得有趣。在ITA（编写Orbitz内部软件的公司）之前，从事机票价格搜索的人可能认为这是可以想象的最无聊的应用程序。但ITA通过以更雄心勃勃的方式重新定义问题使其变得有趣。&lt;/p&gt;&#xA;&lt;p&gt;我认为谷歌也发生了同样的事情。当谷歌成立时，所谓门户网站的传统看法是搜索很无聊且不重要。但谷歌的人不认为搜索无聊，这就是为什么他们做得这么好。&lt;/p&gt;&#xA;&lt;p&gt;这是管理者可以有所作为的领域。就像父母对孩子说，我打赌你不能在十分钟内清理整个房间，一个好的管理者有时可以将问题重新定义为更有趣的问题。史蒂夫·乔布斯似乎特别擅长这个，部分原因只是因为他有高标准。在Mac之前有很多小型、便宜的电脑。他将问题重新定义为：制造一个漂亮的。这可能比任何胡萝卜或大棒更能驱动开发者。&lt;/p&gt;&#xA;&lt;p&gt;他们确实做到了。当Mac首次出现时，你甚至不必打开它就知道它会很好；你可以从机箱上看出来。几周前我在剑桥的街上走，在某个人的垃圾里我看到了一个似乎是Mac手提箱的东西。我往里看，里面有一台Mac SE。我带回家插上电，它启动了。快乐的Macintosh脸，然后是finder。我的天，它是如此简单。就像&amp;hellip;&amp;hellip;谷歌。&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢为有高标准的人工作。但仅仅精确是不够的。你必须坚持正确的事情。这通常意味着你必须自己是一个黑客。我偶尔看到过关于如何管理程序员的文章。真的应该有两篇文章：一篇是关于如果你自己是程序员该做什么，另一篇是关于如果你不是该做什么。而第二篇可能可以浓缩成两个词：放弃。&lt;/p&gt;&#xA;&lt;p&gt;问题不在于日常管理。真正好的黑客几乎是自我管理的。问题是，如果你不是黑客，你无法分辨谁是好黑客。一个类似的问题解释了为什么美国汽车如此丑陋。我称之为设计悖论。你可能认为你可以通过雇佣伟大的设计师来设计产品而使产品美丽。但如果你自己没有好品味，你如何认识好设计师？根据定义，你无法从他的作品集中判断。你也不能看他获得的奖项或工作，因为在设计领域，就像在大多数领域一样，这些往往是由时尚和交际驱动的，而实际能力排在第三位。没有办法：你无法在不知道什么是美丽的情况下管理一个旨在生产美丽的过程。美国汽车丑陋是因为美国汽车公司由品味差的人经营。&lt;/p&gt;&#xA;&lt;p&gt;这个国家的许多人认为品味是难以捉摸的，甚至是轻浮的。它都不是。要推动设计，管理者必须是公司产品最苛刻的用户。如果你真的有好品味，你可以像史蒂夫·乔布斯那样，使满足你成为好人喜欢解决的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;讨厌的小问题&#34;&gt;讨厌的小问题&lt;/h2&gt;&#xA;&lt;p&gt;很容易说什么样的问题不是有趣的：那些你必须解决很多讨厌小问题，而不是解决几个大的、清晰的问题。最糟糕的项目之一是为充满错误的软件编写接口。另一个是当你必须为个别客户的复杂和定义不清的需求定制东西。对黑客来说，这类项目是千刀万剐的死亡。&lt;/p&gt;&#xA;&lt;p&gt;讨厌小问题的区别特征是你从中学不到任何东西。编写编译器很有趣，因为它教你什么是编译器。但为有错误的软件编写接口教不了你任何东西，因为错误是随机的。[3] 所以不仅仅是挑剔使好黑客避免讨厌的小问题。这更多是自我保护的问题。处理讨厌的小问题会让你变笨。好黑客避免它就像模特避免奶酪汉堡一样。&lt;/p&gt;&#xA;&lt;p&gt;当然，有些问题固有这种特征。由于供需关系，它们报酬特别高。所以找到方法让伟大黑客处理繁琐问题的公司会非常成功。你会怎么做？&lt;/p&gt;&#xA;&lt;p&gt;这种情况发生的一个地方是创业公司。在我们的创业公司，我们有Robert Morris担任系统管理员。这就像让滚石乐队在犹太成年礼上演奏。你雇佣不到那种人才。但人们会为他们创始人的公司做任何艰苦的工作。[4]&lt;/p&gt;&#xA;&lt;p&gt;大公司通过分割公司来解决这个问题。他们通过建立独立的研发部门来吸引聪明的人为他们工作，员工不必直接处理客户讨厌的小问题。[5] 在这个模型中，研发部门的功能就像矿山。他们产生新想法；也许公司其余部分能够使用它们。&lt;/p&gt;&#xA;&lt;p&gt;你可能不必走到这种极端。自底向上编程提供了另一种分割公司的方法：让聪明的人作为工具制造者工作。如果你的公司制造做x的软件，让一个组构建用于编写这类软件的工具，另一个组使用这些工具编写应用程序。这样你可能能够让聪明的人写99%的代码，但仍然让他们像在传统研发部门那样与用户几乎隔离。工具制造者会有用户，但他们只是公司自己的开发者。[6]&lt;/p&gt;&#xA;&lt;p&gt;如果微软使用这种方法，他们的软件就不会充满安全漏洞，因为编写实际应用程序的较不聪明的人不会做分配内存这样的低级工作。他们不会直接用C编写Word，而是将Word语言的大型乐高积木拼在一起。（Duplo，我相信是技术术语。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;聚集&#34;&gt;聚集&lt;/h2&gt;&#xA;&lt;p&gt;除了有趣的问题，好黑客喜欢的还有其他好黑客。伟大的黑客倾向于聚集在一起——有时如此壮观，就像在施乐帕洛阿尔托研究中心。所以你不会以线性比例吸引好黑客，因为你为他们创造的环境有多好。聚集的倾向意味着它更像是环境的平方。所以赢家通吃。在任何给定时间，只有大约十个或二十个黑客最想工作的地方，如果你不是其中之一，你不仅会有更少的伟大黑客，你会是零。&lt;/p&gt;&#xA;&lt;p&gt;拥有伟大的黑客本身并不足以使公司成功。这对谷歌和ITA很有效，它们是现在的两个热点，但它没有帮助思维机器或施乐。Sun曾经有一段好时光，但他们的商业模式是下降电梯。在这种情况下，即使最好的黑客也救不了你。&lt;/p&gt;&#xA;&lt;p&gt;不过，我认为，在其他条件相同的情况下，能够吸引伟大黑客的公司将具有巨大优势。有人会不同意这一点。当我们在1990年代走访风险投资公司时，几家告诉我们软件公司不是通过编写伟大的软件获胜，而是通过品牌、主导渠道和做正确的交易。&lt;/p&gt;&#xA;&lt;p&gt;他们似乎真的相信这一点，我想我知道为什么。我认为许多风险投资家寻找的，至少在无意识中，是下一个微软。当然，如果微软是你的模型，你不应该寻找希望通过编写伟大软件获胜的公司。但风险投资家寻找下一个微软是错误的，因为没有创业公司能成为下一个微软，除非其他公司准备在恰到好处的时刻弯腰成为下一个IBM。&lt;/p&gt;&#xA;&lt;p&gt;使用微软作为模型是错误的，因为他们的整个文化源自那一次幸运的突破。微软是一个坏的数据点。如果你把他们扔出去，你会发现好产品确实倾向于在市场上获胜。风险投资家应该寻找的是下一个苹果，或下一个谷歌。&lt;/p&gt;&#xA;&lt;p&gt;我想比尔·盖茨知道这一点。谷歌让他担心的不是他们品牌的力量，而是他们有更好的黑客。[7]&lt;/p&gt;&#xA;&lt;h2 id=&#34;认可&#34;&gt;认可&lt;/h2&gt;&#xA;&lt;p&gt;那么谁是伟大的黑客？你遇到时如何知道？结果证明这非常困难。即使是黑客也说不出来。我现在很确定我的朋友Trevor Blackwell是一个伟大的黑客。你可能读过Slashdot上关于他如何制作自己的Segway的报道。这个项目的显著之处是他在一天内写了所有软件（顺便说一句，用Python）。&lt;/p&gt;&#xA;&lt;p&gt;对Trevor来说，这是家常便饭。但当我第一次遇到他时，我认为他是个十足的白痴。他站在Robert Morris的办公室里对他喋喋不休地说着什么，我记得我站在他身后向Robert做疯狂的手势，把这个疯子赶出办公室，这样我们就可以去吃午饭了。Robert说他一开始也误判了Trevor。显然当Robert第一次遇到他时，Trevor刚刚开始一个新计划，涉及在一堆索引卡上写下他生活各方面的所有内容，他随身携带。他也刚从加拿大来，有浓重的加拿大口音和mullet发型。&lt;/p&gt;&#xA;&lt;p&gt;由于黑客尽管有社交迟钝的声誉，有时却花费很大努力让自己看起来聪明，这使问题更加复杂。当我在研究生院时，我偶尔会在MIT AI实验室闲逛。起初有点吓人。那里的每个人都说话这么快。但过了一会儿我学会了快速说话的技巧。你不必思考得更快；只是用两倍的词说所有事情。信号中有这么多噪音，遇到好黑客时很难分辨。我现在也分辨不出。你也无法从他们的简历中看出来。似乎判断黑客的唯一方法是和他一起处理某个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于语言设计的五个问题</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/langdes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/langdes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/langdes/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;关于语言设计的五个问题&#34;&gt;关于语言设计的五个问题&lt;/h1&gt;&#xA;&lt;p&gt;2001年5月&lt;/p&gt;&#xA;&lt;p&gt;（这些是我在2001年5月10日MIT编程语言设计小组讨论会上所做的笔记。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-编程语言是为人设计的&#34;&gt;1. 编程语言是为人设计的。&lt;/h2&gt;&#xA;&lt;p&gt;编程语言是人们与计算机交流的方式。计算机对于任何无歧义的语言都会同样满意。我们有高级语言的原因是因为人们无法处理机器语言。编程语言的要点是防止我们可怜脆弱的人类大脑被大量细节所淹没。&lt;/p&gt;&#xA;&lt;p&gt;建筑师知道某些设计问题比其他问题更具个人性。最干净、最抽象的设计问题之一是设计桥梁。在那里，你的工作主要是用最少的材料跨越给定的距离。光谱的另一端是设计椅子。椅子设计师必须花时间思考人类的臀部。&lt;/p&gt;&#xA;&lt;p&gt;软件也是如此。设计网络数据路由算法是一个很好的抽象问题，就像设计桥梁。而设计编程语言就像设计椅子：这完全是关于处理人类弱点的问题。&lt;/p&gt;&#xA;&lt;p&gt;我们大多数人都讨厌承认这一点。设计具有数学优雅性的系统对我们大多数人来说比迎合人类弱点听起来更有吸引力。数学优雅确实有作用：某些优雅性使程序更容易理解。但优雅本身不是目的。&lt;/p&gt;&#xA;&lt;p&gt;当我说语言必须设计得适合人类弱点时，我并不是说语言必须为糟糕的程序员设计。事实上我认为你应该为最好的程序员设计，但即使是最好的程序员也有局限性。我认为没有人会喜欢在所有变量都是带整数下标的字母x的语言中编程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-为自己和你的朋友设计&#34;&gt;2. 为自己和你的朋友设计。&lt;/h2&gt;&#xA;&lt;p&gt;如果你看看编程语言的历史，很多最好的语言都是为其作者自己使用的语言设计的，而很多最差的语言是为其他人使用而设计的。&lt;/p&gt;&#xA;&lt;p&gt;当语言为其他人设计时，总是特定的一群其他人：没有语言设计师聪明的人。所以你得到一种居高临下的语言。Cobol是最极端的例子，但很多语言都充斥着这种精神。&lt;/p&gt;&#xA;&lt;p&gt;这与语言的抽象程度无关。C是相当低级的，但它是为其作者使用而设计的，这就是为什么黑客喜欢它。&lt;/p&gt;&#xA;&lt;p&gt;为糟糕的程序员设计语言的论点是糟糕的程序员比好程序员多。可能是这样。但是那些少数好程序员编写了不成比例的大量软件。&lt;/p&gt;&#xA;&lt;p&gt;我对这个问题很感兴趣，你如何设计一种最好的黑客会喜欢的语言？我碰巧认为这与如何设计一种好的编程语言是同一个问题，但即使不是，它至少是一个有趣的问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-给程序员尽可能多的控制权&#34;&gt;3. 给程序员尽可能多的控制权。&lt;/h2&gt;&#xA;&lt;p&gt;许多语言（特别是为其他人设计的语言）都有保姆的态度：它们试图阻止你做它们认为对你不好的事情。我喜欢相反的方法：给程序员尽可能多的控制权。&lt;/p&gt;&#xA;&lt;p&gt;当我第一次学习Lisp时，我最喜欢的是它把我当作平等的伙伴。在我之前学习的其他语言中，有语言本身和用该语言写的我的程序，两者非常分离。但在Lisp中，我编写的函数和宏就像构成语言本身的那些一样。如果我想，我可以重写语言。它有着与开源软件相同的吸引力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-追求简洁&#34;&gt;4. 追求简洁。&lt;/h2&gt;&#xA;&lt;p&gt;简洁被低估甚至被鄙视。但如果你深入了解黑客的内心，你会发现他们真的很喜欢它。你有多少次听到黑客深情地谈到，比如说，在APL中，他们只需几行代码就能做出惊人的事情？我认为任何真正聪明的人真正喜欢的东西都值得注意。&lt;/p&gt;&#xA;&lt;p&gt;我认为几乎任何能让程序更短的事情都是好的。应该有很多库函数；任何可以隐含的东西都应该；语法应该简洁到极致；甚至事物的名称都应该简短。&lt;/p&gt;&#xA;&lt;p&gt;不仅程序应该简短。手册也应该薄。手册的很大部分被用于澄清、保留、警告和特殊情况。如果你强迫自己缩短手册，在最好的情况下，你会通过修复语言中需要这么多解释的东西来实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-承认黑客的本质&#34;&gt;5. 承认黑客的本质。&lt;/h2&gt;&#xA;&lt;p&gt;很多人希望黑客是数学，或者至少是类似自然科学的东西。我认为黑客更像是建筑。建筑与物理学有关，因为建筑师必须设计不会倒塌的建筑，但建筑师的真正目标是建造伟大的建筑，而不是做出关于静力学的发现。&lt;/p&gt;&#xA;&lt;p&gt;黑客喜欢做的是编写伟大的程序。而且我认为，至少在我们自己的心中，我们必须记住，编写伟大的程序是一件令人钦佩的事情，即使这项工作不容易转化为研究论文的传统智力货币。在智力上，设计程序员会喜欢的语言与设计一个包含你可以发表论文的某些想法的糟糕语言同样有价值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开放性问题&#34;&gt;开放性问题&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-如何组织大型库&#34;&gt;1. 如何组织大型库？&lt;/h3&gt;&#xA;&lt;p&gt;库正在成为编程语言越来越重要的组成部分。它们也在变得更大，这可能很危险。如果找到能做你想要的事情的库函数比你自己编写它需要更长的时间，那么所有这些代码只是在让你的手册变厚。（Symbolics手册就是一个例子。）所以我认为我们必须研究组织库的方法。理想的情况是设计它们，使程序员能够猜测哪个库调用会做正确的事情。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-人们真的害怕前缀语法吗&#34;&gt;2. 人们真的害怕前缀语法吗？&lt;/h3&gt;&#xA;&lt;p&gt;这是一个开放性问题，在这个意义上我多年来一直在思考它，但仍然不知道答案。前缀语法对我来说似乎完全自然，可能除了数学。但Lisp不受欢迎可能只是因为它有陌生的语法。如果这是真的，是否要对此做些什么是另一个问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-基于服务器的软件需要什么&#34;&gt;3. 基于服务器的软件需要什么？&lt;/h3&gt;&#xA;&lt;p&gt;我认为未来二十年内编写的最令人兴奋的新应用程序中，很多将是基于Web的应用程序，意味着程序位于服务器上并通过Web浏览器与你交谈。而编写这类程序我们可能需要一些新东西。&lt;/p&gt;&#xA;&lt;p&gt;我们需要的一件事是支持基于服务器的应用程序发布的新方式。不像桌面软件那样每年有一两个大的发布版本，基于服务器的应用程序作为一系列小变化发布。你一天可能有五到十个发布版本。而且作为规则，每个人都会总是使用最新版本。&lt;/p&gt;&#xA;&lt;p&gt;你知道你可以设计程序以便调试吗？嗯，基于服务器的软件同样必须设计成可改变的。你必须能够轻松地改变它，或者至少知道什么是小的改变，什么是重大的改变。&lt;/p&gt;&#xA;&lt;p&gt;另一个可能对基于服务器的软件有用的东西，令人惊讶的是，是continuations。在基于Web的软件中，你可以使用类似continuation-passing style的东西来在Web会话本质上无状态的世界中获得子程序的效果。如果不太昂贵，拥有实际的continuations可能是值得的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-还有什么新的抽象有待发现&#34;&gt;4. 还有什么新的抽象有待发现？&lt;/h3&gt;&#xA;&lt;p&gt;我不确定这个希望有多合理，但我个人真的很想做的一件事是发现一个新的抽象——某种能像拥有一等函数或递归甚至关键字参数那样产生巨大影响的东西。这可能是一个不可能实现的梦想。这些东西并不经常被发现。但我一直在寻找。&lt;/p&gt;&#xA;&lt;h2 id=&#34;预测&#34;&gt;预测&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-你可以使用任何你想要的语言&#34;&gt;1. 你可以使用任何你想要的语言。&lt;/h3&gt;&#xA;&lt;p&gt;编写应用程序过去意味着编写桌面软件。在桌面软件中，有很大的偏向于使用与操作系统相同的语言编写应用程序。所以十年前，编写软件几乎意味着用C编写软件。最终形成了一个传统：应用程序不能用不寻常的语言编写。而这个传统有很长时间发展，以至于像经理和风险投资家这样的非技术人员也学会了它。&lt;/p&gt;&#xA;&lt;p&gt;基于服务器的软件彻底打破了这一模式。使用基于服务器的软件，你可以使用任何你想要的语言。几乎没有人理解这一点（特别是经理和风险投资家）。一些黑客理解它，这就是为什么我们甚至听到像Perl和Python这样的新的独立语言。我们听到Perl和Python不是因为人们用它们编写Windows应用程序。&lt;/p&gt;&#xA;&lt;p&gt;作为对设计编程语言感兴趣的人，这对我们意味着我们的工作现在可能有真正的受众。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-速度来自分析器&#34;&gt;2. 速度来自分析器。&lt;/h3&gt;&#xA;&lt;p&gt;语言设计师，或者至少语言实现者，喜欢编写生成快速代码的编译器。但我不认为这是使语言对用户来说快速的原因。Knuth很久以前就指出，速度只在几个关键瓶颈中重要。任何尝试过的人都知道你无法猜测这些瓶颈在哪里。分析器是答案。&lt;/p&gt;&#xA;&lt;p&gt;语言设计师在解决错误的问题。用户不需要基准测试运行得快。他们需要的是一种能够显示他们自己程序的哪些部分需要重写的语言。这就是实践中速度的来源。所以也许如果语言实现者把他们本来会花在编译器优化上的一半时间用来编写一个好的分析器，这会是一个净收益。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-你需要一个应用程序来推动语言的设计&#34;&gt;3. 你需要一个应用程序来推动语言的设计。&lt;/h3&gt;&#xA;&lt;p&gt;这可能不是一个绝对的规则，但似乎最好的语言都是与它们被用来编写的某个应用程序一起演化的。C是由需要它进行系统编程的人编写的。Lisp的开发部分是为了进行符号微分，McCarthy如此急于开始，甚至在1960年第一篇关于Lisp的论文中就在编写微分程序。&lt;/p&gt;&#xA;&lt;p&gt;如果你的应用程序解决一些新问题，那就特别好。这将倾向于推动你的语言拥有程序员需要的新特性。我个人对编写一种适合编写基于服务器的应用程序的语言感兴趣。&lt;/p&gt;&#xA;&lt;p&gt;[在小组讨论中，Guy Steele也提出了这一点，并补充建议应用程序不应该包括为你语言编写编译器，除非你的语言碰巧是用于编写编译器的。]&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-语言必须适合编写一次性程序&#34;&gt;4. 语言必须适合编写一次性程序。&lt;/h3&gt;&#xA;&lt;p&gt;你知道什么是一次性程序：你为某些有限任务快速编写的东西。我认为如果你环顾四周，你会发现很多大的、严肃的程序开始时是一次性程序。如果大多数程序开始时是一次性程序，我不会感到惊讶。所以如果你想制造一种适合一般软件编写的好语言，它必须适合编写一次性程序，因为这是大多数软件的幼虫阶段。&lt;/p&gt;&#xA;&lt;h3 id=&#34;5-语法与语义相连&#34;&gt;5. 语法与语义相连。&lt;/h3&gt;&#xA;&lt;p&gt;传统上认为语法和语义是完全分开的。这听起来很震惊，但它们可能不是。我认为你语言中想要的东西可能与你如何表达它有关。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分心</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/distraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/distraction/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/distraction/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;分心&#34;&gt;分心&lt;/h1&gt;&#xA;&lt;p&gt;2008年5月&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;断开分心说明：本文结尾描述的策略没有奏效。它会工作一段时间，然后我会逐渐发现自己在工作电脑上使用互联网。我现在正在尝试其他策略，但我想这次我会等到确定它们有效之后再写。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;拖延症依赖分心而存在。大多数人发现只是坐着什么都不做很不舒服；你通过做其他事情来避免工作。&lt;/p&gt;&#xA;&lt;p&gt;因此，克服拖延症的一种方法是让它缺少分心。但这并不像听起来那么简单，因为有人努力让你分心。分心不是你避免的静态障碍，就像你可能避免路上的岩石一样。分心会主动找到你。&lt;/p&gt;&#xA;&lt;p&gt;切斯特菲尔德将污垢描述为错位的物质。同样，分心是在错误时间出现的有吸引力的事物。技术不断被改进以产生越来越多有吸引力的事物。这意味着当我们学会避免一类分心时，新的分心会不断出现，就像耐药细菌一样。&lt;/p&gt;&#xA;&lt;p&gt;例如，电视经过50年的改进，已经达到了视觉鸦片的程度。我13岁时就意识到电视会上瘾，所以我停止观看。但我最近读到，美国人平均每天看4小时电视。他们生命的四分之一。&lt;/p&gt;&#xA;&lt;p&gt;现在电视正在衰落，但只是因为人们找到了更令人上瘾的浪费时间方式。特别危险的是，许多发生在你的电脑上。这并非偶然。越来越多的办公室职员坐在连接到互联网的电脑前，而分心总是向拖延者进化。&lt;/p&gt;&#xA;&lt;p&gt;我记得当电脑至少对我来说 exclusively 用于工作时。我偶尔会拨号服务器获取邮件或ftp文件，但大部分时间我都是离线的。我只能做的是写作和编程。现在我感觉好像有人偷偷把电视放到了我的桌子上。非常令人上瘾的东西只需点击一下即可。在工作中遇到障碍？嗯，我想知道网上有什么新鲜事。最好检查一下。&lt;/p&gt;&#xA;&lt;p&gt;在多年仔细避免像电视、游戏和Usenet这样的经典时间消耗者之后，我仍然成为分心的牺牲品，因为我没有意识到它会进化。曾经安全的东西，使用互联网，逐渐变得越来越危险。有些天我醒来，喝杯茶，查看新闻，然后检查邮件，然后再次查看新闻，然后回复几封邮件，然后突然发现快到午饭时间了，我还没有完成任何真正的工作。而且这种情况开始越来越多地发生。&lt;/p&gt;&#xA;&lt;p&gt;我花了很长的时间才意识到互联网变得多么令人分心，因为问题是间歇性的。我忽略了它，就像你让自己忽略一个只间歇性出现的错误一样。当我在项目中间时，分心并不是真正的问题。当我完成一个项目并决定下一步做什么时，它们总是会咬我。&lt;/p&gt;&#xA;&lt;p&gt;很难注意到这种新型分心的危险的另一个原因是社会习俗还没有赶上它。如果我在沙发上坐了一整个上午看电视，我会很快注意到。这是一个已知的危险信号，就像独自喝酒一样。但使用互联网看起来和感觉上仍然很像工作。&lt;/p&gt;&#xA;&lt;p&gt;然而，最终很明显互联网变得如此令人分心，以至于我必须开始以不同的方式对待它。基本上，我必须在我的已知时间消耗者列表中添加一个新应用程序：Firefox。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;这个问题很难解决，因为大多数人仍然需要互联网来做一些事情。如果你喝得太多，你可以通过完全停止来解决这个问题。但你不能通过停止进食来解决暴饮暴食的问题。我不能完全避免互联网，就像我对以前的时间消耗者所做的那样。&lt;/p&gt;&#xA;&lt;p&gt;起初我尝试规则。例如，我告诉自己每天只会使用互联网两次。但这些方案从来没有长期有效。最终会出现一些事情，需要我更多地使用它。然后我会逐渐滑回我的老路。&lt;/p&gt;&#xA;&lt;p&gt;令人上瘾的东西必须被当作有知觉的对手来对待——就好像你脑子里有个小人总是为你想要停止做的事情编造最合理的论据。如果你给它的留一条路，他会找到它。&lt;/p&gt;&#xA;&lt;p&gt;关键似乎是可见性。大多数坏习惯的最大成分是否认。所以你必须确保你不会仅仅滑入你试图避免的事情中。它必须触发警报。&lt;/p&gt;&#xA;&lt;p&gt;也许从长远来看，处理互联网分心的正确答案将是监视和控制它们的软件。但与此同时，我找到了一个更激烈的解决方案，确实有效：设置一台单独的电脑来使用互联网。&lt;/p&gt;&#xA;&lt;p&gt;我现在在主电脑上保持wifi关闭，除非我需要传输文件或编辑网页，我在房间的另一边有一台单独的笔记本电脑，用来检查邮件或浏览网页。（具有讽刺意味的是，这是Steve Huffman编写Reddit的电脑。当Steve和Alexis为了慈善拍卖他们的旧笔记本电脑时，我为Y Combinator博物馆购买了它们。）&lt;/p&gt;&#xA;&lt;p&gt;我的规则是，我可以花尽可能多的时间上网，只要我在那台电脑上做。事实证明这已经足够了。当我必须坐在房间的另一边检查邮件或浏览网页时，我会更加意识到它。至少在我的情况下，足够意识到每天很难花超过大约一小时上网。&lt;/p&gt;&#xA;&lt;p&gt;而我的主电脑现在 freed 用于工作。如果你尝试这个技巧，当你的电脑断开互联网连接时，你可能会对它的不同感觉感到震惊。对我来说，坐在一台只能用于工作的电脑前是多么陌生，这让我警醒，因为它显示了我一定浪费了多少时间。&lt;/p&gt;&#xA;&lt;p&gt;哇。我在这台电脑上能做的只是工作。好吧，那我最好工作。&lt;/p&gt;&#xA;&lt;p&gt;这是好的部分。你旧有的坏习惯现在帮助你工作。你已经习惯了一连几个小时坐在那台电脑前。但现在你不能浏览网页或检查邮件。你打算怎么办？你不能只是坐在那里。所以你开始工作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;好的和坏的拖延&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;相关链接：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_spanish.htm&#34;&gt;西班牙语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_arabic.htm&#34;&gt;阿拉伯语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_catalan.htm&#34;&gt;加泰罗尼亚语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.aoky.net/articles/paul_graham/distraction_russian.htm&#34;&gt;俄语翻译&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>反击的过滤器</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/ffb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/ffb/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/ffb/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;反击的过滤器&#34;&gt;反击的过滤器&lt;/h1&gt;&#xA;&lt;p&gt;2003年8月&lt;/p&gt;&#xA;&lt;p&gt;我们也许能够通过让贝叶斯垃圾邮件过滤器跟踪链接来看看另一端等待什么来提高其准确性。death2spam的理查德·乔西现在在边界情况下这样做，并报告说效果很好。&lt;/p&gt;&#xA;&lt;p&gt;为什么只在边界情况下这样做？为什么只做一次？&lt;/p&gt;&#xA;&lt;p&gt;正如我在《过滤器会杀死垃圾邮件吗？》中提到的，跟踪垃圾邮件中的所有url会有一个有趣的副作用。如果流行的邮件客户端为了过滤垃圾邮件而这样做，垃圾邮件发送者的服务器将受到严重打击。我越想这个，越觉得这是个好主意。这不仅仅是有趣；很难想象有比这更精确地针对垃圾邮件发送者的反击。&lt;/p&gt;&#xA;&lt;p&gt;所以我想向那些正在研究垃圾邮件过滤器的人建议一个附加功能：&amp;ldquo;惩罚&amp;quot;模式，如果打开，将对可疑垃圾邮件中的每个url进行n次蜘蛛抓取，其中n可以由用户设置。[1]&lt;/p&gt;&#xA;&lt;p&gt;正如许多人指出的，当前邮件系统的问题之一是它太被动了。它做你告诉它做的一切。到目前为止，所有修复问题的建议似乎都涉及新协议。这个不会。&lt;/p&gt;&#xA;&lt;p&gt;如果广泛使用，自动检索垃圾邮件过滤器将使邮件系统反弹。垃圾邮件的大量数量，迄今为止一直对垃圾邮件发送者有利，现在将对他不利，就像树枝反弹在他脸上一样。自动检索垃圾邮件过滤器将提高垃圾邮件发送者的成本，并降低他的销售：他的带宽使用将飙升，他的服务器将在负载下停止运转，这将使它们对那些会响应垃圾邮件的人不可用。&lt;/p&gt;&#xA;&lt;p&gt;每小时发送一百万封邮件，每小时在你的服务器上获得一百万次点击。我们想确保这只对可疑的垃圾邮件进行。通常，发送给数百万人的任何url都可能是垃圾邮件url，因此提交每封邮件中的每个http请求几乎总是可以正常工作。但有几种情况这不是真的：例如，像Yahoo Mail和Hotmail这样的免费邮件服务发送的邮件底部的url。&lt;/p&gt;&#xA;&lt;p&gt;为了保护这样的站点，并防止滥用，自动检索应该与垃圾邮件推广站点的黑名单结合。只有黑名单上的站点才会被抓取，站点只有在经过人工检查后才会被列入黑名单。垃圾邮件的生命周期必须至少有几个小时，所以应该很容易及时更新这样的列表来干扰推广新站点的垃圾邮件。[2]&lt;/p&gt;&#xA;&lt;p&gt;大量自动检索只对高带宽连接的用户实用，但有足够的用户会给垃圾邮件发送者造成严重麻烦。实际上，这个解决方案巧妙地反映了问题。垃圾邮件的问题在于，为了到达少数易受骗的人，垃圾邮件发送者向每个人发送邮件。不易受骗的收件人只是附带损害。但不易受骗的多数人不会停止接收垃圾邮件，直到他们能够停止（或威胁停止）易受骗的人响应它。自动检索垃圾邮件过滤器为他们提供了一种方法来做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;这会杀死垃圾邮件吗？不完全是。最大的垃圾邮件发送者可能能够保护他们的服务器免受自动检索过滤器的影响。然而，对他们来说最简单、最便宜的方法是在邮件中包含有效的退订链接。这对于小鱼以及雇佣垃圾邮件发送者推广他们的&amp;quot;合法&amp;quot;站点来说将是必要的。因此，如果自动检索过滤器变得广泛，它们将成为自动退订过滤器。&lt;/p&gt;&#xA;&lt;p&gt;在这种情况下，垃圾邮件将像操作系统崩溃、病毒和弹出窗口一样，成为那些懒得使用正确软件的人所遭受的瘟疫之一。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 自动检索过滤器必须跟踪重定向，并在某些情况下（例如，只说&amp;quot;点击这里&amp;quot;的页面）跟踪多级链接。还要确保http请求与流行Web浏览器的请求无法区分，包括顺序和引用者。&lt;/p&gt;&#xA;&lt;p&gt;如果响应在x时间内没有返回，默认为相当高的垃圾邮件概率。&lt;/p&gt;&#xA;&lt;p&gt;与其使n恒定，不如使它成为提到该站点的垃圾邮件数量的函数，这可能是个好主意。这将增加对滥用和事故的进一步保护。&lt;/p&gt;&#xA;&lt;p&gt;[2] 本文的早期版本使用&amp;quot;白名单&amp;quot;而不是&amp;quot;黑名单&amp;quot;一词。虽然它们要像黑名单一样工作，我更喜欢称它们为白名单，因为这可能使它们不太容易受到法律攻击。然而，这似乎只是让读者感到困惑。&lt;/p&gt;&#xA;&lt;p&gt;应该可能有多个黑名单。单点故障既容易受到攻击也容易受到滥用。&lt;/p&gt;&#xA;&lt;p&gt;感谢布莱恩·伯顿、比尔·耶拉祖尼斯、丹·吉芬、埃里克·雷蒙德和理查德·乔西阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>另一条道路</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/road/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/road/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/road/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;另一条道路&#34;&gt;另一条道路&lt;/h1&gt;&#xA;&lt;p&gt;2001年9月&lt;/p&gt;&#xA;&lt;p&gt;（本文解释了为什么下一代软件的大部分可能是基于服务器的，这对程序员意味着什么，以及这种新型软件为什么是创业公司的绝佳机会。本文源自在BBN实验室的一次演讲。）&lt;/p&gt;&#xA;&lt;p&gt;1995年夏天，我的朋友Robert Morris和我决定创办一家创业公司。当时，围绕Netscape IPO的公关活动正如火如荼地进行，媒体上有很多关于电子商务的讨论。那时网络上可能只有三十家实际的商店，都是手工制作的。如果将来会有很多在线商店，就需要制作它们的软件，所以我们决定写一些这样的软件。&lt;/p&gt;&#xA;&lt;p&gt;在最初的一周左右，我们打算将其制作成一个普通的桌面应用程序。然后有一天我们想到让软件在我们的Web服务器上运行，使用浏览器作为界面。我们尝试重写软件使其在Web上工作，很明显这是正确的方法。如果我们编写的软件在服务器上运行，对用户和我们自己都会容易得多。&lt;/p&gt;&#xA;&lt;p&gt;结果证明这是一个好计划。现在，作为Yahoo Store，这个软件是最受欢迎的在线商店构建器，拥有约14,000个用户。&lt;/p&gt;&#xA;&lt;p&gt;当我们开始Viaweb时，几乎没有人理解我们说软件在服务器上运行是什么意思。直到一年后Hotmail推出，人们才开始理解。现在每个人都知道这是一个有效的方法。我们现在所做的事情有了一个名字：应用服务提供商，或ASP。&lt;/p&gt;&#xA;&lt;p&gt;我认为下一代软件的大部分都将按照这个模型编写。即使是损失最大的微软，似乎也看到将一些东西移出桌面是不可避免的。如果软件从桌面移到服务器上，对开发者来说将意味着一个完全不同的世界。本文描述了我们作为这个新世界的首批访客所看到的令人惊讶的事情。就软件确实转移到服务器上的程度而言，我在这里描述的就是未来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;下一件大事&#34;&gt;下一件大事？&lt;/h2&gt;&#xA;&lt;p&gt;当我们回顾桌面软件时代时，我想我们会惊叹于人们忍受的不便，就像我们现在惊叹于早期车主忍受的不便一样。在最初的二三十年里，你必须是一个汽车专家才能拥有汽车。但汽车是一个如此巨大的进步，以至于很多不是汽车专家的人也想拥有它们。&lt;/p&gt;&#xA;&lt;p&gt;计算机现在正处于这个阶段。当你拥有桌面计算机时，你最终会学到比你想要知道的更多关于其内部情况的知识。但超过一半的美国家庭都拥有一台。我母亲有一台计算机，她用它来收发邮件和记账。大约一年前，她收到Apple的一封信，为她提供新操作系统的折扣，这让她感到担忧。当一个65岁的女性只想用计算机来收发邮件和记账时，却不得不考虑安装新的操作系统，这就有问题了。普通用户甚至不应该知道&amp;quot;操作系统&amp;quot;这个词，更不用说&amp;quot;设备驱动程序&amp;quot;或&amp;quot;补丁&amp;quot;了。&lt;/p&gt;&#xA;&lt;p&gt;现在有另一种交付软件的方式可以拯救用户免于成为系统管理员。基于Web的应用程序是在Web服务器上运行并使用Web页面作为用户界面的程序。对于普通用户来说，这种新型软件将比桌面软件更容易、更便宜、更便携、更可靠，而且通常更强大。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的软件，大多数用户除了他们使用的应用程序外，不必考虑任何其他事情。所有混乱、变化的东西都将位于某处的服务器上，由擅长这种事情的人维护。因此，你通常不需要特定的计算机来使用软件。你只需要一个带有键盘、屏幕和Web浏览器的东西。也许它会有无线互联网接入。也许它也会是你的手机。无论它是什么，都将是消费电子产品：价格约200美元，人们主要根据外观选择的东西。你将在互联网服务上花费比硬件更多的钱，就像你现在对电话所做的那样。[1]&lt;/p&gt;&#xA;&lt;p&gt;点击到达服务器并返回需要大约十分之一秒，所以重度交互软件的用户，如Photoshop，仍然希望计算在桌面上进行。但如果你看大多数人使用计算机做的那种事情，十分之一秒的延迟不会成为问题。我母亲真的不需要桌面计算机，有很多像她这样的人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;用户的胜利&#34;&gt;用户的胜利&lt;/h2&gt;&#xA;&lt;p&gt;我家附近有一辆车，保险杠上贴着&amp;quot;死也不愿不便&amp;quot;。大多数人，在大多数时候，会选择需要最少工作的选择。如果基于Web的软件获胜，那将是因为它更方便。对于用户和开发者来说，它似乎都会更方便。&lt;/p&gt;&#xA;&lt;p&gt;使用纯基于Web的应用程序，你只需要一个连接到互联网的浏览器。所以你可以在任何地方使用基于Web的应用程序。当你在桌面计算机上安装软件时，你只能在该计算机上使用它。更糟糕的是，你的文件被困在那台计算机上。随着人们习惯网络，这种模式的不便越来越明显。&lt;/p&gt;&#xA;&lt;p&gt;这里的开端是基于Web的电子邮件。现在数百万人意识到，无论你在哪里，都应该能够访问电子邮件。如果你能看到你的邮件，为什么不能看到你的日历？如果你能和同事讨论文档，为什么不能编辑它？为什么你的任何数据都应该被困在某个远处桌子的计算机上？&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;你的计算机&amp;quot;的整个概念正在消失，被&amp;quot;你的数据&amp;quot;所取代。你应该能够从任何计算机访问你的数据。或者更确切地说，任何客户端，而客户端不一定是计算机。&lt;/p&gt;&#xA;&lt;p&gt;客户端不应该存储数据；它们应该像电话一样。事实上，它们可能会变成电话，或者反之亦然。随着客户端变小，你有另一个理由不在它们上保存数据：随身携带的东西可能会丢失或被盗。把PDA留在出租车里就像磁盘崩溃，只是你的数据交给了别人而不是被蒸发掉了。&lt;/p&gt;&#xA;&lt;p&gt;使用纯基于Web的软件，你的数据和应用程序都不会保存在客户端上。所以你不需要安装任何东西来使用它。当没有安装时，你不必担心安装出错。应用程序和你的操作系统之间不可能存在不兼容性，因为软件不在你的操作系统上运行。&lt;/p&gt;&#xA;&lt;p&gt;因为它不需要安装，所以在你&amp;quot;购买&amp;quot;之前尝试基于Web的软件将是容易且常见的。你应该期望能够免费试用任何基于Web的应用程序，只需访问提供它的网站即可。在Viaweb，我们的整个网站就像一个大箭头，指向用户试驾。&lt;/p&gt;&#xA;&lt;p&gt;试驾后，注册服务只需要填写一个简短的表格（越简短越好）。这应该是用户必须做的最后工作。有了基于Web的软件，你应该无需额外付费、做任何工作，甚至可能无需知道就能获得新版本。&lt;/p&gt;&#xA;&lt;p&gt;升级不会像现在那样令人震惊。随着时间的推移，应用程序将悄然变得更强大。这需要开发者付出一些努力。他们必须设计软件，使其能够在不使用户困惑的情况下更新。这是一个新问题，但有解决方法。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的应用程序，每个人都使用相同的版本，错误一旦发现就可以修复。所以基于Web的软件应该比桌面软件的错误少得多。在Viaweb，我怀疑我们任何时候有过十个已知的错误。这比桌面软件好几个数量级。&lt;/p&gt;&#xA;&lt;p&gt;基于Web的应用程序可以同时被多个人使用。这对于协作应用程序来说显然是一个优势，但我敢打赌，一旦用户意识到这是可能的，他们会开始在大多数应用程序中想要这个功能。例如，让两个人编辑同一个文档通常是有用的。Viaweb允许多个用户同时编辑一个站点，更多是因为这是编写软件的正确方式，而不是因为我们期望用户想要这样做，但结果证明很多人确实这样做了。&lt;/p&gt;&#xA;&lt;p&gt;当你使用基于Web的应用程序时，你的数据会更安全。磁盘崩溃不会成为过去的事情，但用户不会再听到它们。它们将发生在服务器集群中。提供基于Web应用程序的公司实际上会进行备份——不仅因为他们会有真正的系统管理员担心这些事情，而且因为丢失用户数据的ASP将陷入巨大的麻烦。当人们在自己的磁盘崩溃中丢失数据时，他们不会太生气，因为他们只能生自己的气。当公司为他们丢失数据时，他们会更生气。&lt;/p&gt;&#xA;&lt;p&gt;最后，基于Web的软件应该对病毒不那么脆弱。如果客户端除了浏览器外不运行任何东西，运行病毒的机会就更少，本地也没有数据可以损坏。攻击服务器本身的程序会发现它们防御得很好。[2]&lt;/p&gt;&#xA;&lt;p&gt;对于用户来说，基于Web的软件压力会更小。我认为如果你查看普通Windows用户的内心，你会发现对符合这种描述的软件有着巨大且基本未被利用的渴望。释放出来，它可能是一股强大的力量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;代码之城&#34;&gt;代码之城&lt;/h2&gt;&#xA;&lt;p&gt;对于开发者来说，基于Web和桌面软件之间最显著的区别是，基于Web的应用程序不是单一的代码片段。它将是不同类型程序的集合，而不是单一的大二进制文件。因此设计基于Web的软件更像设计城市而不是建筑：除了建筑物，你还需要道路、路标、公用设施、警察和消防部门，以及增长和各种灾难的计划。&lt;/p&gt;&#xA;&lt;p&gt;在Viaweb，软件包括相当大的应用程序，用户直接与之对话；这些程序使用的程序；在后台持续运行寻找问题的程序；如果出现问题尝试重新启动事物的程序；偶尔运行以编译统计信息或构建搜索索引的程序；我们明确运行以垃圾收集资源或移动或恢复数据的程序；假装是用户的程序（以测量性能或暴露错误）；诊断网络问题的程序；进行备份的程序；外部服务的接口；驱动令人印象深刻的表盘集合显示实时服务器统计的软件（对访客来说很受欢迎，但对我们来说也是不可或缺的）；对开源软件的修改（包括错误修复）；以及大量的配置文件和设置。在我们被Yahoo收购后，Trevor Blackwell编写了一个精彩的程序，可以在不关闭商店的情况下将商店迁移到全国的新服务器。程序通过传呼机呼叫我们，向用户发送传真和电子邮件，与信用卡处理商进行交易，并通过套接字、管道、http请求、ssh、udp数据包、共享内存和文件相互交谈。Viaweb的一部分甚至由程序的缺失组成，因为Unix安全的关键之一是不运行人们可能用来闯入服务器的不必要实用程序。&lt;/p&gt;&#xA;&lt;p&gt;这并不以软件结束。我们花了很多时间思考服务器配置。我们自己从组件构建服务器——部分是为了省钱，部分是为了得到我们想要的东西。我们必须考虑我们的上游ISP是否与所有骨干网有足够快的连接。我们与RAID供应商连续约会。&lt;/p&gt;&#xA;&lt;p&gt;但硬件不仅仅是要担心的事情。当你控制它时，你可以为用户做更多。对于桌面应用程序，你可以指定某些最低硬件要求，但你不能添加更多。如果你管理服务器，你可以一步让所有用户能够传呼别人，或发送传真，或通过电话发送命令，或处理信用卡等，只需安装相关硬件即可。我们总是寻找用硬件添加功能的新方法，不仅因为它让用户高兴，而且作为将自己与竞争对手区分开来的方式——竞争对手要么因为他们销售桌面软件，要么通过ISP转售基于Web的应用程序，不能直接控制硬件。&lt;/p&gt;&#xA;&lt;p&gt;因为基于Web应用程序中的软件将是程序的集合而不是单一的二进制文件，它可以用多种不同的语言编写。当你编写桌面软件时，你实际上被迫用与底层操作系统相同的语言编写应用程序——即C和C++。因此，这些语言（尤其是在非技术人员如经理和风险投资家中）被认为是&amp;quot;严肃&amp;quot;软件开发的语言。但这只是桌面软件必须交付方式的人工产物。对于基于服务器的软件，你可以使用任何你想要的语言。[3] 今天，许多顶级黑客使用远离C和C++的语言：Perl、Python，甚至Lisp。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，没有人能告诉你使用什么语言，因为你控制整个系统，一直到硬件。不同的语言适合不同的任务。你可以为每个任务使用最适合的语言。当你有竞争对手时，&amp;ldquo;你可以&amp;quot;意味着&amp;quot;你必须&amp;rdquo;（我们稍后会回到这一点），因为如果你不利用这种可能性，你的竞争对手会。&lt;/p&gt;&#xA;&lt;p&gt;我们的大多数竞争对手使用C和C++，这使得他们的软件明显 inferior，因为（除其他外），他们无法解决CGI脚本的无状态性问题。如果你要改变什么，所有的改变都必须在一个页面上发生，底部有一个更新按钮。正如我在其他地方写过的，通过使用许多人仍然认为是研究语言的Lisp，我们能够让Viaweb编辑器的行为更像桌面软件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;&#xA;&lt;p&gt;在这个新世界中最重要的变化之一是你进行发布的方式。在桌面软件业务中，进行发布是一个巨大的创伤，整个公司都在努力推出一个单一的、巨大的代码片段。明显的比较会让人联想到这个过程和最终产品。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，你可以像为自己编写的程序那样几乎实时地进行更改。你以一系列增量更改而不是偶尔的大爆炸形式发布软件。一个典型的桌面软件公司可能一年进行一两次发布。在Viaweb，我们通常一天进行三到五次发布。&lt;/p&gt;&#xA;&lt;p&gt;当你切换到这个新模式时，你会意识到软件开发受到发布方式的影响有多大。你在桌面软件业务中看到的一些最令人讨厌的问题是由于发布的灾难性性质造成的。&lt;/p&gt;&#xA;&lt;p&gt;当你每年只发布一个新版本时，你倾向于批量处理错误。在发布日期之前的某个时间，你组装一个新版本，其中一半的代码被撕掉并替换，引入了无数错误。然后一队QA人员介入并开始计算它们，程序员们处理这个列表，修复它们。他们通常不会到达列表的末尾，事实上，没有人确定末尾在哪里。这就像从池塘里捞碎石。你永远不知道软件内部发生了什么。充其量你最终得到一种统计上的正确性。&lt;/p&gt;&#xA;&lt;p&gt;有了基于服务器的软件，大多数更改都是小而增量的。这本身就不太可能引入错误。这也意味着当你准备发布软件时，你知道最需要仔细测试什么：你最后改变的东西。你对代码的控制要牢固得多。作为一个一般规则，你确实知道它内部发生了什么。当然你没有记住源代码，但当你阅读源代码时，你这样做就像飞行员扫描仪表盘，而不是像侦探试图解开一些谜团。&lt;/p&gt;&#xA;&lt;p&gt;桌面软件培养了对错误的某种宿命论。你知道你正在发布充满错误的东西，你甚至建立了补偿机制（例如补丁发布）。那么为什么还要担心几个更多的错误呢？很快你就会发布你知道有问题的整个功能。苹果今年早些时候就这样做了。他们感到压力要发布他们的新操作系统，其发布日期已经四次推迟，但一些软件（对CD和DVD的支持）还没有准备好。解决方案？他们在没有完成部分的情况下发布了操作系统，用户将不得不稍后安装它们。&lt;/p&gt;&#xA;&lt;p&gt;有了基于Web的软件，你永远不必在软件能够工作之前发布它，你可以一旦它能够工作就发布它。&lt;/p&gt;&#xA;&lt;p&gt;行业资深人士可能会想，说你在软件能够工作之前永远不必发布软件听起来是个好主意，但当你承诺在某个日期之前交付软件的新版本时会发生什么？有了基于Web的软件，你不会做出这样的承诺，因为没有版本。你的软件逐渐而持续地变化。一些变化可能比其他变化更大，但版本的概念自然不适合基于Web的软件。&lt;/p&gt;&#xA;&lt;p&gt;如果有人记得Viaweb，这可能听起来很奇怪，因为我们总是在宣布新版本。这完全是为了公关目的。我们了解到，行业媒体是以版本号思考的。他们会为主要版本提供主要报道，意思是版本号的新第一位数字，而对于点版本，通常最多只有一个段落，意思是小数点后的新数字。&lt;/p&gt;&#xA;&lt;p&gt;我们的一些竞争对手提供桌面软件，实际上有版本号。对于这些发布，仅仅这个事实在我们看来就是他们落后的证据，他们会获得各种宣传。我们不想错过，所以我们也开始给我们的软件版本号。当我们想要一些宣传时，我们会列出自上次&amp;quot;发布&amp;quot;以来我们添加的所有功能，在软件上贴上一个新版本号，并发布新闻稿说新版本立即可用。令人惊讶的是，从来没有人指责我们这样做。&lt;/p&gt;&#xA;&lt;p&gt;到我们被收购时，我们已经这样做了三次，所以我们处于版本4。如果我没记错的话，是版本4.1。在Viaweb成为Yahoo Store后，不再如此迫切需要宣传，所以尽管软件继续发展，版本号的整个概念被悄然放弃了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;错误&#34;&gt;错误&lt;/h2&gt;&#xA;&lt;p&gt;基于Web软件的另一个主要技术优势是你可以重现大多数错误。用户的数据就在你的磁盘上。如果有人破坏了你的软件，你不必像桌面软件那样猜测发生了什么：你应该能够在他们在电话上与你交谈时重现错误。如果你在应用程序中内置了注意错误的代码，你甚至可能已经知道它。&lt;/p&gt;&#xA;&lt;p&gt;基于Web的软件全天候使用，所以你所做的一切都会立即受到考验。错误很快就会出现。&lt;/p&gt;&#xA;&lt;p&gt;软件公司有时被指控让用户调试他们的软件。而这正是我所倡导的。对于基于Web的软件，这实际上是一个好计划，因为错误更少且短暂。当你逐渐发布软件时，一开始你得到的错误会少得多。当你能够重现错误并立即发布更改时，你可以在大多数错误出现时找到并修复它们。我们任何时候都没有足够的错误需要正式的错误跟踪系统。&lt;/p&gt;&#xA;&lt;p&gt;当然，你应该在发布之前测试更改，所以不应该发布主要错误。那些不可避免地漏掉的少数错误将涉及边界情况，并且只会在有人打电话抱怨之前影响少数遇到它们的用户。只要你立即修复错误，对于普通用户来说，净效果是错误少得多。我怀疑普通Viaweb用户曾经看到过错误。&lt;/p&gt;&#xA;&lt;p&gt;修复新错误比修复旧错误更容易。在你刚刚编写的代码中找到错误通常相当快。当它出现时，你往往在查看源代码之前就知道哪里错了，因为你已经在潜意识中担心它了。修复六个月前编写的代码中的错误（如果你一年发布一次，这是平均情况）要多花很多工作。而且由于你对代码的理解不够，你更有可能以丑陋的方式修复它，甚至引入更多错误。[4]&lt;/p&gt;&#xA;&lt;p&gt;当你及早发现错误时，你也会得到更少的复合错误。复合错误是两个相互作用的独立错误：你下楼时绊倒，当你伸手抓住栏杆时，它从你手中脱落。在软件中，这种错误是最难发现的，而且往往具有最严重的后果。[5] 传统的&amp;quot;打破一切然后过滤错误&amp;quot;方法本质上会产生很多复合错误。而以一系列小更改发布的软件本质上不会这样。地板不断被清扫干净，任何可能后来卡在什么东西里的松散物体。&lt;/p&gt;&#xA;&lt;p&gt;如果你使用一种称为函数式编程的技术，这会有所帮助。函数式编程意味着避免副作用。你更可能在研究论文中看到它，而不是商业软件，但对于基于Web的应用程序，它结果非常有用。将整个程序写成纯函数式代码很难，但你可以用这种方式编写实质性的部分。它使你软件的这些部分更容易测试，因为它们没有状态，在你不断制作和测试小修改的情况下，这非常方便。我用这种风格编写了Viaweb编辑器的大部分，我们使我们的脚本语言RTML成为一种纯函数式语言。&lt;/p&gt;&#xA;&lt;p&gt;来自桌面软件业务的人会发现这难以置信，但在Viaweb，错误几乎成了一种游戏。由于大多数发布的错误都涉及边界情况，遇到它们的用户可能是高级用户，他们在测试极限。高级用户对错误更宽容，特别是因为你可能是在添加他们要求的功能时引入了它们的。事实上，因为错误很少，你必须做复杂的事情才能看到它们，高级用户常常为抓住一个而感到自豪。他们会怀着更多是胜利而不是愤怒的精神致电支持，好像他们从我们这里得分了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;支持&#34;&gt;支持&lt;/h2&gt;&#xA;&lt;p&gt;当你能够重现错误时，它改变了你处理客户支持的方法。在大多数软件公司，支持作为让客户感觉更好的方式提供。他们要么是关于一个已知错误打电话给你，要么是他们做错了什么，你必须弄清楚是什么。在任何一种情况下，你都从他们那里学不到太多东西。所以你倾向于将支持电话视为一个令人讨厌的事情，你希望尽可能将其与开发者隔离。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于Web应用的Lisp</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/lwba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/lwba/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/lwba/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;基于web应用的lisp&#34;&gt;基于Web应用的Lisp&lt;/h1&gt;&#xA;&lt;p&gt;在《击败平均值》的链接被发布在slashdot上之后，一些读者希望更详细地了解我们在Viaweb中使用Lisp获得的具体技术优势。对于那些感兴趣的人，以下是我2001年4月在剑桥BBN实验室的演讲节选。&lt;/p&gt;&#xA;&lt;p&gt;BBN演讲节选（ASCII）&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何创业</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/start/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/start/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;如何创业&#34;&gt;如何创业&lt;/h1&gt;&#xA;&lt;p&gt;想要创业？获得Y Combinator的资助。&lt;/p&gt;&#xA;&lt;p&gt;2005年3月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自哈佛计算机协会的一次演讲。）&lt;/p&gt;&#xA;&lt;p&gt;要创建一个成功的创业公司，你需要三样东西：优秀的人才、客户真正想要的产品，以及尽可能少地花钱。大多数失败的创业公司都在这三项中有一项失败。一个三项都做到的创业公司很可能会成功。&lt;/p&gt;&#xA;&lt;p&gt;想想这一点，这很令人兴奋，因为这三项都是可以做到的。困难，但可以做到。而且，既然一个成功的创业公司通常能让其创始人致富，这意味着致富也是可以做到的。困难，但可以做到。&lt;/p&gt;&#xA;&lt;p&gt;如果有一条关于创业公司的信息我想传达，那就是这个。没有哪一步需要魔法般的才华才能解决。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创意&#34;&gt;创意&lt;/h2&gt;&#xA;&lt;p&gt;特别是，你不需要一个绝妙的创意来开始创业。创业公司赚钱的方式是为人们提供比现有技术更好的技术。但人们现有的技术通常非常糟糕，以至于要做到更好并不需要什么才华。&lt;/p&gt;&#xA;&lt;p&gt;例如，谷歌的计划只是创建一个不会糟糕的搜索网站。他们有三个新想法：索引更多的网页，使用链接来对搜索结果进行排名，以及拥有干净、简单的网页和不显眼的基于关键词的广告。最重要的是，他们决心创建一个使用起来很棒的网站。毫无疑问，谷歌内部有很多伟大的技术技巧，但整体计划是 straightforward 的。虽然他们现在可能有更大的野心，但仅这一项每年就能为他们带来十亿美元的收入。[1]&lt;/p&gt;&#xA;&lt;p&gt;还有很多其他领域和谷歌出现之前的搜索一样落后。我可以想到几个为创业公司生成创意的经验法则，但大多数都归结为：观察人们正在尝试做的事情，然后想出如何以一种不会糟糕的方式来做。&lt;/p&gt;&#xA;&lt;p&gt;例如，约会网站现在的糟糕程度远超过谷歌出现之前的搜索。它们都使用同样简单的模式。它们似乎是通过思考如何进行数据库匹配来解决问题的，而不是思考现实世界中的约会是如何运作的。一个大学生可以作为一个课程项目构建更好的东西。而且有大量的资金处于危险之中。在线约会现在是一个有价值的业务，如果它能正常工作，价值可能是一百倍。&lt;/p&gt;&#xA;&lt;p&gt;然而，创业公司的创意仅仅是个开始。许多有抱负的创业公司创始人认为整个过程的关键是初始创意，从那时起你要做的就是执行。风险投资家们更清楚。如果你带着一个绝妙的创意去风险投资公司，告诉他们如果他们签署保密协议你就会告诉他们，大多数人会叫你滚蛋。这表明一个单纯的创意价值多少。市场价格低于签署保密协议的不便。&lt;/p&gt;&#xA;&lt;p&gt;另一个表明初始创意价值不高的迹象是改变计划的创业公司数量。微软的最初计划是通过出售编程语言来赚钱，天知道是些什么东西。他们现在的商业模式直到五年后IBM把它送到他们面前才出现。&lt;/p&gt;&#xA;&lt;p&gt;创业公司的创意当然有价值，但问题是，它们不可转移。它们不是你可以交给别人去执行的东西。它们的价值主要是作为起点：作为让拥有它们的人继续思考的问题。&lt;/p&gt;&#xA;&lt;p&gt;重要的不是创意，而是拥有创意的人。优秀的人可以修复糟糕的创意，但好的创意无法拯救糟糕的人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;人才&#34;&gt;人才&lt;/h2&gt;&#xA;&lt;p&gt;我说的优秀的人是什么意思？我在创业公司期间学到的最好技巧之一是决定雇用谁的标准。你能否把这个人形容为动物？这可能很难翻译成另一种语言，但我认为美国的每个人都明白这意味着什么。这意味着一个对自己的工作有点过于认真的人；一个把自己所做的事情做得非常好，以至于超越了专业，进入了痴迷状态的人。&lt;/p&gt;&#xA;&lt;p&gt;具体含义取决于工作：一个绝不会接受否定的销售人员；一个宁愿熬夜到凌晨4点也不愿带着有bug的代码上床睡觉的黑客；一个会主动给纽约时报记者的手机打电话的公关人员；一个当某物偏离两毫米时会感到身体痛苦的平面设计师。&lt;/p&gt;&#xA;&lt;p&gt;几乎所有为我们工作的人都是他们所做事情方面的动物。负责销售的女士非常顽强，我过去常常为和她通话的潜在客户感到遗憾。你能感觉到他们在钩子上挣扎，但你知道在他们签约之前不会有安宁。&lt;/p&gt;&#xA;&lt;p&gt;如果你想想你认识的人，你会发现动物测试很容易应用。在脑海中想象这个人的形象，想象&amp;quot;某某是个动物&amp;quot;这句话。如果你笑了，他们就不是。在大公司中你不需要或甚至不想要这种品质，但在创业公司中你需要。&lt;/p&gt;&#xA;&lt;p&gt;对于程序员，我们有三个额外的测试。这个人真的聪明吗？如果是，他们能真正完成事情吗？最后，因为一些优秀的黑客有令人难以忍受的性格，我们能忍受他们在身边吗？&lt;/p&gt;&#xA;&lt;p&gt;最后一个测试过滤掉的人出人意料地少。如果有人真的聪明，我们可以忍受任何程度的书呆子气。我们不能忍受的是有很多态度的人。但大多数人都不真正聪明，所以我们的第三个测试基本上是第一个测试的重述。&lt;/p&gt;&#xA;&lt;p&gt;当书呆子令人难以忍受时，通常是因为他们太努力地表现聪明。但他们越聪明，就越感觉不到表现聪明的压力。因此，作为一个规则，你可以通过他们说&amp;quot;我不知道&amp;quot;、&amp;ldquo;也许你是对的&amp;quot;和&amp;quot;我不太理解x&amp;quot;的能力来认识真正聪明的人。&lt;/p&gt;&#xA;&lt;p&gt;这种技术并不总是有效，因为人们可能受到环境的影响。在MIT计算机科学系，似乎有一种表现得像粗鲁自大狂的传统。有人告诉我这最终源于Marvin Minsky，就像经典的飞行员风格据说源自Chuck Yeager一样。即使真正聪明的人在那里也开始这样表现，所以你必须有所宽容。&lt;/p&gt;&#xA;&lt;p&gt;我们有Robert Morris很有帮助，他是我遇到的最愿意说&amp;quot;我不知道&amp;quot;的人之一。（至少，在他成为MIT教授之前是这样。）没有人敢在Robert面前摆架子，因为他显然比他们聪明，但自己却零架子。&lt;/p&gt;&#xA;&lt;p&gt;像大多数创业公司一样，我们的创始于一群朋友，我们雇用的人大部分是通过个人接触。这是创业公司和大公司之间的关键区别。和朋友相处几天，你会比公司通过面试能学到的更多。[2]&lt;/p&gt;&#xA;&lt;p&gt;创业公司在大学周围开始并非巧合，因为那是聪明人相遇的地方。不是人们在MIT和斯坦福的课堂上学到的东西使得技术公司在它们周围兴起。他们可以在班级里唱营火歌曲，只要招生工作正常。&lt;/p&gt;&#xA;&lt;p&gt;如果你开始创业公司，很可能与你从大学或研究生院认识的人一起。所以理论上你应该尽量在学校里与尽可能多的聪明人交朋友，对吗？嗯，不对。不要有意识地拉关系；这对黑客来说效果不好。&lt;/p&gt;&#xA;&lt;p&gt;你在大学里应该做的是做自己的项目。黑客应该这样做，即使他们不计划开始创业公司，因为这是学习如何编程的唯一真正方法。在某些情况下，你可能会与其他学生合作，这是了解优秀黑客的最佳方式。项目甚至可能发展成创业公司。但再次，我不会过于直接地针对任何一个目标。不要强求；只是和你喜欢的人一起做你喜欢的事情。&lt;/p&gt;&#xA;&lt;p&gt;理想情况下，你希望有两到四个创始人。只从一个开始会很难。一个人会觉得开始公司的道德负担难以承受。即使是比尔·盖茨，他似乎能够承受相当大的道德负担，也必须有一个联合创始人。但你不想有那么多创始人，以至于公司开始看起来像团体照。部分是因为你一开始不需要很多人，但主要是因为创始人越多，分歧就越大。当只有两三个创始人时，你知道你必须立即解决争议或灭亡。如果有七八个，分歧可能会持续并硬化成派系。你不想仅仅投票；你需要一致。&lt;/p&gt;&#xA;&lt;p&gt;在技术创业公司中，大多数创业公司都是如此，创始人应该包括技术人员。在互联网泡沫期间，有很多创业公司是由商业人士创立的，然后他们寻找黑客来为他们创建产品。这不太有效。商业人士不擅长决定如何处理技术，因为他们不知道选择是什么，或者哪些问题困难，哪些容易。当商业人士试图雇用黑客时，他们无法分辨哪些是好的。即使是其他黑客也很难做到这一点。对商业人士来说这是轮盘赌。&lt;/p&gt;&#xA;&lt;p&gt;创业公司的创始人是否必须包括商业人士？这取决于情况。当我们开始时，我们认为是这样，我们问了几个人说他们了解这个叫做&amp;quot;商业&amp;quot;的神秘事物，问他们是否愿意成为总裁。但他们都说不，所以我不得不自己做。我发现商业不是什么大秘密。它不像物理或医学那样需要广泛研究的东西。你只是试图让人们为你的东西付钱。&lt;/p&gt;&#xA;&lt;p&gt;我认为我对商业如此神秘的原因是我讨厌做这件事的想法。我想在软件纯粹的智力世界工作，而不是处理客户的世俗问题。不想被拖入某种工作的人常常对它产生一种保护性的无能。Paul Erdos特别擅长这个。似乎甚至不能将葡萄柚切成两半（更不用说去商店买一个），他强迫别人为他做这些事情，把所有时间都留给数学。Erdos是个极端的例子，但大多数丈夫在某种程度上使用相同的伎俩。&lt;/p&gt;&#xA;&lt;p&gt;一旦我被迫放弃我的保护性无能，我发现商业既不像我担心的那么难，也不那么无聊。商业中有些深奥的领域相当困难，比如税法或衍生品定价，但你在创业公司中不需要了解这些。经营创业公司所需的关于商业的所有知识，都是在商学院甚至大学出现之前人们就已经知道的常识。&lt;/p&gt;&#xA;&lt;p&gt;如果你在福布斯400强上逐个查看，在每个有MBA的人名字旁边做个标记，你会学到关于商学院的重要东西。在沃伦·巴菲特之后，你要到第22位才遇到另一个MBA，耐克的CEO菲尔·奈特。前50名中只有5个MBA。你在福布斯400强中注意到的是很多有技术背景的人。比尔·盖茨、史蒂夫·乔布斯、拉里·埃利森、迈克尔·戴尔、杰夫·贝佐斯、戈登·摩尔。技术业务的统治者往往来自技术，而不是商业。所以如果你想投资两年时间来帮助你在商业中成功，证据表明你最好学习如何破解而不是获得MBA。[3]&lt;/p&gt;&#xA;&lt;p&gt;有一个原因你可能想在创业公司中包括商业人士：因为你必须有至少一个愿意并能够专注于客户想要什么的人。有些人认为只有商业人士能做到这一点——黑客可以实现软件，但不能设计它。这是胡说。了解如何编程并不会阻止黑客理解用户，不了解编程也不会神奇地使商业人士能够理解他们。&lt;/p&gt;&#xA;&lt;p&gt;然而，如果你不能理解用户，你应该要么学习如何理解，要么找到一个能够理解用户的联合创始人。这是技术创业公司最重要的问题，也是比其他任何问题都更可能导致失败的原因。&lt;/p&gt;&#xA;&lt;h2 id=&#34;客户想要什么&#34;&gt;客户想要什么&lt;/h2&gt;&#xA;&lt;p&gt;不仅仅是创业公司必须担心这一点。我认为大多数失败的企业都是因为它们没有给客户想要的东西。看看餐馆。很大比例的失败，大约四分之一在第一年。但你能想到一个食物真正很好却倒闭的餐馆吗？&lt;/p&gt;&#xA;&lt;p&gt;无论怎样，食物很棒的餐馆似乎都很繁荣。一个食物很棒的餐馆可能昂贵、拥挤、嘈杂、昏暗、偏远，甚至服务很差，但人们会继续来。确实，食物平庸的餐馆有时可以通过花招吸引顾客。但这种方法非常冒险。更直接的方法是把食物做好。&lt;/p&gt;&#xA;&lt;p&gt;技术也是如此。你听到各种关于创业公司失败的原因。但你能想到一个产品非常受欢迎却仍然失败的吗？&lt;/p&gt;&#xA;&lt;p&gt;在几乎所有失败的创业公司中，真正的问题是客户不想要产品。对大多数来说，死亡原因列为&amp;quot;资金耗尽&amp;rdquo;，但这只是直接原因。为什么他们不能获得更多资金？可能是因为产品很差，或者似乎不可能完成，或者两者兼而有之。&lt;/p&gt;&#xA;&lt;p&gt;当我试图思考每个创业公司需要做的事情时，我几乎包括了第四项：尽快推出版本1。但我决定不这样做，因为这在制作客户想要的东西中是隐含的。制作客户想要的东西的唯一方法是把原型放在他们面前，并根据他们的反应进行完善。&lt;/p&gt;&#xA;&lt;p&gt;另一种方法是我所谓的&amp;quot;万福玛利亚&amp;quot;策略。你为产品制定详细计划，雇佣一个工程师团队来开发它（这样做的人倾向于称黑客为&amp;quot;工程师&amp;quot;），然后一年后发现你花了两百万美元开发没有人想要的东西。这在泡沫时期并不罕见，尤其是在由商业人士运营的公司中，他们认为软件开发是一件可怕的事情，因此必须仔细计划。&lt;/p&gt;&#xA;&lt;p&gt;我们甚至从未考虑过这种方法。作为一个Lisp黑客，我来自快速原型开发的传统。我不会声称（至少不是在这里）这是编写每个程序的正确方式，但它无疑是编写创业公司软件的正确方式。在创业公司中，你的初始计划几乎肯定在某些方面是错误的，你的第一优先事项应该是找出哪里错了。唯一的方法是尝试实现它们。&lt;/p&gt;&#xA;&lt;p&gt;像大多数创业公司一样，我们在即时改变了计划。起初我们期望我们的客户是网络顾问。但结果是他们不喜欢我们，因为我们的软件易于使用，我们托管网站。客户很容易解雇他们。我们也认为我们能够签约很多目录公司，因为在线销售是他们现有业务的自然延伸。但在1996年，这是一个很难销售的东西。我们在目录公司谈话的中层管理人员将网络视为不是机会，而是意味着更多的工作。&lt;/p&gt;&#xA;&lt;p&gt;我们确实签约了一些更冒险的目录公司。其中包括好莱坞的Frederick，它给了我们处理服务器上沉重负载的宝贵经验。但我们的大多数用户是看到网络作为建立业务机会的小型个体商人。有些人有零售店，但许多人只存在于网上。所以我们改变了方向，专注于这些用户。我们不再专注于网络顾问和目录公司想要的功能，而是努力使软件易于使用。&lt;/p&gt;&#xA;&lt;p&gt;我从中学到了有价值的东西。努力使技术易于使用是非常值得的。黑客如此习惯于计算机，他们不知道软件对普通人来说似乎多么可怕。斯蒂芬·霍金的编辑告诉他，他在书中包含的每一个方程都会使销量减半。当你努力使技术更容易使用时，你是在向上而不是向下走那条曲线。易用性提高10%不仅增加10%的销量。它更可能使你的销量翻倍。&lt;/p&gt;&#xA;&lt;p&gt;你如何弄清楚客户想要什么？观察他们。最好的地方之一是在贸易展览会上。贸易展览作为获得新客户的方式并不划算，但作为市场研究是值得的。我们在贸易展览会上不仅仅是做预制的演示。我们过去常常向人们展示如何构建真实、工作的商店。这意味着我们可以在他们使用我们的软件时观察，并与他们谈论他们需要什么。&lt;/p&gt;&#xA;&lt;p&gt;无论你开始什么类型的创业公司，对你来说，创始人，理解用户想要什么可能都是一种挑战。你可以在不研究用户的情况下构建的唯一软件是你作为典型用户的那种。但这只是那种倾向于开源的软件：操作系统、编程语言、编辑器等等。所以如果你为了钱开发技术，你可能不会为像你这样的人开发它。事实上，你可以用这个作为为创业公司生成创意的方法：不像你的人想要从技术中得到什么？&lt;/p&gt;&#xA;&lt;p&gt;当大多数人想到创业公司时，他们想到的是像苹果或谷歌这样的公司。每个人都知道这些，因为它们是大型消费品牌。但每一个这样的创业公司，就有二十个在利基市场运营或在基础设施中安静生活的公司。所以如果你开始一个成功的创业公司，很可能你会开始其中一个。&lt;/p&gt;&#xA;&lt;p&gt;换句话说，如果你试图开始那种必须成为大型消费品牌的创业公司，成功的几率更大。最好的机会在利基市场。由于创业公司通过为人们提供比现有更好的东西来赚钱，最好的机会是情况最糟糕的地方。很难找到比公司IT部门更糟糕的地方。你不会相信公司在软件上花费的金额，以及他们得到的垃圾。这种不平衡等于机会。&lt;/p&gt;&#xA;&lt;p&gt;如果你想要创业公司的创意，你能做的最有价值的事情之一是找到一家中型非技术公司，花几周时间观察他们用计算机做什么。大多数优秀的黑客对这些地方发生的恐怖行为毫无概念，就像富有的美国人对巴西贫民窟发生的事情毫无概念一样。&lt;/p&gt;&#xA;&lt;p&gt;从为小公司编写软件开始，因为向他们销售更容易。向大公司销售东西如此有价值，以至于向他们销售他们目前使用的垃圾的人花费大量时间和金钱来做这件事。虽然你只用一个额叶绑在背后就能破解Oracle，但你无法击败Oracle销售人员。所以如果你想通过更好的技术获胜，瞄准较小的客户。[4]&lt;/p&gt;&#xA;&lt;p&gt;无论如何，它们是市场上更具战略价值的部分。在技术中，低端总是吃掉高端。使廉价产品更强大比使强大产品更便宜更容易。所以开始作为廉价、简单选择的产品往往会逐渐变得更强大，直到像房间里的水一样上升，将&amp;quot;高端&amp;quot;产品挤压到天花板。Sun对大型机这样做，Intel正在对Sun这样做。Microsoft Word对像Interleaf和Framemaker这样的桌面出版软件这样做。大众市场数码相机对为专业人士制造的昂贵型号这样做。Avid对专业视频编辑系统制造商这样做，现在苹果正在对Avid这样做。亨利·福特对他之前的汽车制造商这样做。如果你构建简单、廉价的选择，你不仅会发现一开始更容易销售，而且你也将处于征服市场其余部分的最佳位置。&lt;/p&gt;&#xA;&lt;p&gt;让任何人在你下面飞行是非常危险的。如果你拥有最便宜、最简单的产品，你将拥有低端。而如果你没有，你就是那些拥有的人的靶子。&lt;/p&gt;&#xA;&lt;h2 id=&#34;融资&#34;&gt;融资&lt;/h2&gt;&#xA;&lt;p&gt;为了实现这一切，你需要资金。一些创业公司是自筹资金的——例如微软——但大多数不是。我认为从投资者那里拿钱是明智的。要自筹资金，你必须从咨询公司开始，而很难从咨询公司转向产品公司。&lt;/p&gt;&#xA;&lt;p&gt;在经济上，创业公司像一门及格/不及格的课程。从创业公司致富的方法是最大化公司成功的机会，而不是最大化你保留的股票数量。所以如果你可以用股票换取改善你机会的东西，这可能是明智的举动。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何创造财富</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/wealth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/wealth/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/wealth/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;如何创造财富&#34;&gt;如何创造财富&lt;/h1&gt;&#xA;&lt;p&gt;2004年5月&lt;/p&gt;&#xA;&lt;p&gt;（本文最初发表于《黑客与画家》。）&lt;/p&gt;&#xA;&lt;p&gt;想创业吗？获得Y Combinator的资助。&lt;/p&gt;&#xA;&lt;p&gt;如果你想变得富有，你会怎么做？我认为你最好的选择是创办或加入一家创业公司。几百年来，这一直是可靠的致富方式。&amp;ldquo;创业公司&amp;quot;这个词始于1960年代，但其中发生的事情与中世纪风险投资的贸易航行非常相似。&lt;/p&gt;&#xA;&lt;p&gt;创业公司通常涉及技术，以至于&amp;quot;高科技创业公司&amp;quot;这个短语几乎是多余的。创业公司是一家解决困难技术问题的小公司。&lt;/p&gt;&#xA;&lt;p&gt;很多人只知道这些就能变得富有。你不需要懂物理就能成为一名优秀的投手。但我认为理解基本原则可以给你优势。为什么创业公司必须很小？创业公司随着规模变大会不可避免地不再是创业公司吗？为什么他们经常致力于开发新技术？为什么有这么多创业公司销售新药或计算机软件，却没有销售玉米油或洗衣粉的？&lt;/p&gt;&#xA;&lt;h3 id=&#34;命题&#34;&gt;命题&lt;/h3&gt;&#xA;&lt;p&gt;从经济上讲，你可以把创业公司看作是将你整个工作生活压缩到几年的一种方式。你不再是低强度地工作四十年，而是尽你所能地努力工作四年。这在技术领域特别有利可图，因为在那里你为快速工作获得溢价。&lt;/p&gt;&#xA;&lt;p&gt;这是经济命题的简要概述。如果你是一个二十多岁的好黑客，你可以得到一份每年支付约80,000美元的工作。所以平均而言，这样的黑客每年必须为公司创造至少80,000美元的价值才能收支平衡。你可能会工作比公司员工多一倍的时间，而且如果你专注，你在一小时内完成的工作可能是他们的三倍。[1] 你应该再获得至少两倍的倍数，通过消除大公司中可能成为你老板的点发中层经理的阻力。还有一个倍数：你比你的职位描述期望的聪明多少？假设再有三倍。结合所有这些倍数，我声称你可以比你在普通公司工作中的预期效率高36倍。[2] 如果一个相当好的黑客在大公司值每年80,000美元，那么一个非常聪明、非常努力、没有任何公司废话拖慢他的黑客应该能够创造价值约每年300万美元的工作。&lt;/p&gt;&#xA;&lt;p&gt;像所有信封背面的计算一样，这个计算有很多摆动空间。我不会试图为实际数字辩护。但我坚持计算的结构。我并不是说倍数正好是36，但它肯定超过10，并且很少像100那样高。&lt;/p&gt;&#xA;&lt;p&gt;如果每年300万美元看起来很高，请记住我们谈论的是极限情况：你不仅没有休闲时间，而且确实如此努力工作以至于危及你的健康。&lt;/p&gt;&#xA;&lt;p&gt;创业公司不是魔法。它们不改变财富创造的规律。它们只代表了曲线远端的一个点。这里有一个守恒定律在起作用：如果你想赚一百万美元，你必须忍受价值一百万美元的痛苦。例如，赚一百万美元的一种方法是在邮局工作一生，并节省你工资的每一分钱。想象在邮局工作五十年的压力。在创业公司中，你将所有这些压力压缩到三四年中。如果你购买经济规模的痛苦，你确实会获得一定的批量折扣，但你无法逃避基本的守恒定律。如果创办创业公司很容易，每个人都会这么做。&lt;/p&gt;&#xA;&lt;h3 id=&#34;数百万而不是数十亿&#34;&gt;数百万，而不是数十亿&lt;/h3&gt;&#xA;&lt;p&gt;如果每年300万美元对某些人来说看起来很高，对其他人来说看起来会很低。三百万？我怎样才能像比尔·盖茨那样成为亿万富翁？&lt;/p&gt;&#xA;&lt;p&gt;所以让我们现在就把比尔·盖茨排除在外。使用著名的有钱人作为例子不是一个好主意，因为媒体只写最有钱的人，而这些往往是异常值。比尔·盖茨是一个聪明、坚定和勤奋的人，但你需要更多的东西才能赚到他那么多的钱。你还需要非常幸运。&lt;/p&gt;&#xA;&lt;p&gt;任何公司的成功都有很大的随机因素。所以你最终在报纸上读到的人是那些非常聪明、完全专注并且中奖的人。当然比尔是聪明和专注的，但微软碰巧也是商业史上最壮观错误之一的受益者：DOS的许可交易。毫无疑问，比尔做了他所能做的一切来引导IBM犯那个错误，并且他在利用它方面做得非常出色，但如果IBM方面有一个有头脑的人，微软的未来就会大不相同。在那个阶段，微软对IBM几乎没有影响力。他们实际上是一个组件供应商。如果IBM要求独家许可，他们应该这样做，微软仍然会签署协议。这对他们来说仍然意味着很多钱，而IBM可以很容易地从其他地方获得操作系统。&lt;/p&gt;&#xA;&lt;p&gt;相反，IBM最终利用其在市场的所有力量给予微软对PC标准的控制。从那时起，微软所要做的就是执行。他们从未不得不在大胆的决定上押注公司。他们所要做的就是与被许可人打硬球，并相当及时地复制更具创新性的产品。&lt;/p&gt;&#xA;&lt;p&gt;如果IBM没有犯这个错误，微软仍然会是一家成功的公司，但它不可能如此快速地发展壮大。比尔·盖茨会很富有，但他会在福布斯400强的底部附近，与他同龄的其他人在一起。&lt;/p&gt;&#xA;&lt;p&gt;有很多致富的方法，而本文只讨论其中一种。本文是关于通过创造财富并为此获得报酬来赚钱的。还有很多其他获得金钱的方法，包括机会、投机、婚姻、继承、盗窃、勒索、欺诈、垄断、贪污、游说、伪造和勘探。大多数巨大的财富可能涉及其中的几种。&lt;/p&gt;&#xA;&lt;p&gt;作为致富方式，创造财富的优势不仅在于它更合法（许多其他方法现在是非法的），而且在于它更直接。你只需要做人们想要的事情。&lt;/p&gt;&#xA;&lt;h3 id=&#34;货币不是财富&#34;&gt;货币不是财富&lt;/h3&gt;&#xA;&lt;p&gt;如果你想创造财富，理解它是什么会有帮助。财富与货币不是一回事。[3] 财富与人类历史一样古老。事实上，要古老得多；蚂蚁有财富。货币是相对较近的发明。&lt;/p&gt;&#xA;&lt;p&gt;财富是根本的东西。财富是我们想要的东西：食物、衣服、房子、汽车、小玩意儿、去有趣的地方旅行等等。你可以在没有钱的情况下拥有财富。如果你有一台魔术机器，可以按命令为你制造汽车或为你煮晚餐或为你洗衣服，或做任何你想要的事情，你就不需要钱。而如果你在南极洲中部，那里没有什么可买的，你有多少钱都无关紧要。&lt;/p&gt;&#xA;&lt;p&gt;财富是你想要的，而不是钱。但如果财富是重要的东西，为什么每个人都谈论赚钱？这是一种速记：货币是移动财富的一种方式，在实践中它们通常可以互换。但它们不是一回事，除非你计划通过造假来致富，否则谈论赚钱可能会让你更难理解如何赚钱。&lt;/p&gt;&#xA;&lt;p&gt;货币是专业化的副产品。在一个专业化的社会中，你需要的大部分东西，你自己不能制造。如果你想要一个土豆或一支铅笔或一个居住的地方，你必须从别人那里得到。&lt;/p&gt;&#xA;&lt;p&gt;你如何让种土豆的人给你一些？通过给他他想要的东西作为回报。但你不能通过直接与需要它们的人交易东西走得很远。如果你制造小提琴，而当地没有农民想要一个，你怎么吃饭？&lt;/p&gt;&#xA;&lt;p&gt;社会在变得更加专业化时找到的解决方案是将交易变成一个两步过程。你不是直接用小提琴交换土豆，而是用小提琴交换，比如说，银币，然后你可以再用银币交换你需要的任何其他东西。中间的东西——交换媒介——可以是任何稀有且便携的东西。历史上金属是最常见的，但最近我们一直在使用一种称为美元的交换媒介，它并不实际存在。然而，它作为交换媒介起作用，因为它的稀有性由美国政府保证。&lt;/p&gt;&#xA;&lt;p&gt;交换媒介的优势是它使贸易运作。缺点是它倾向于模糊贸易的真正含义。人们认为企业所做的是赚钱。但货币只是中间阶段——只是任何人们想要的东西的速记。大多数企业真正做的是创造财富。他们做人们想要的事情。[4]&lt;/p&gt;&#xA;&lt;h3 id=&#34;饼谬论&#34;&gt;饼谬论&lt;/h3&gt;&#xA;&lt;p&gt;令人惊讶的是，很多人从童年时代起就保留着世界上有固定数量财富的想法。在任何正常的家庭中，任何时刻都有固定数量的钱。但这不是一回事。&lt;/p&gt;&#xA;&lt;p&gt;当在这个语境中谈论财富时，它通常被描述为一张饼。&amp;ldquo;你不能把饼做得更大，&amp;ldquo;政客们说。当你谈论一个家庭银行账户中的资金数量，或政府从一年税收中可获得的数量时，这是真的。如果一个人得到更多，另一个人必须得到更少。&lt;/p&gt;&#xA;&lt;p&gt;我记得小时候相信，如果几个有钱人拥有所有的钱，留给其他人的就更少。许多人似乎继续相信类似的东西直到成年。当你听到有人谈论x%的人口拥有y%的财富时，这种谬论通常在背景中。如果你计划创办创业公司，那么无论你是否意识到，你都在计划证明饼谬论是错误的。&lt;/p&gt;&#xA;&lt;p&gt;在这里让人们误入歧途的是货币的抽象。货币不是财富。它只是我们用来移动财富的东西。所以尽管在某些特定时刻（比如你的家庭，这个月）可能有一定数量的钱可用于与其他人交易你想要的东西，但世界上没有固定数量的财富。你可以创造更多的财富。在整个人类历史中，财富一直在被创造和被破坏（但总体上是创造）。&lt;/p&gt;&#xA;&lt;p&gt;假设你拥有一辆破旧的老爷车。下个夏天你可以不坐在你的屁股上，而是花时间把你的车恢复到原始状态。在此过程中你创造了财富。世界——特别是你——多了一辆原始状态的旧车。而且不仅仅是在某种隐喻意义上。如果你卖掉你的车，你会得到更多的钱。&lt;/p&gt;&#xA;&lt;p&gt;在恢复你的旧车过程中，你让自己变得更富有。你没有让任何人变得更穷。所以显然没有一张固定的饼。事实上，当你这样看时，你会想知道为什么会有人认为有。[5]&lt;/p&gt;&#xA;&lt;h3 id=&#34;工匠&#34;&gt;工匠&lt;/h3&gt;&#xA;&lt;p&gt;最有可能理解财富可以被创造的人是那些擅长制造东西的人，工匠。他们的手工制品变成了商店里的商品。但随着工业化的兴起，工匠越来越少。最大的剩余群体之一是计算机程序员。&lt;/p&gt;&#xA;&lt;p&gt;程序员可以坐在计算机前创造财富。一个好的软件本身就是一个有价值的东西。没有制造来混淆这个问题。你输入的字符是一个完整的、成品。如果有人坐下来写一个不会很糟糕的网络浏览器（顺便说一句，这是个好主意），世界就会因此变得更富有。[5b]&lt;/p&gt;&#xA;&lt;p&gt;公司里的每个人一起工作以创造财富，在制造更多人们想要的东西的意义上。许多员工（例如邮件室或人事部门的人）在远离实际制造东西的地方工作。程序员不是。他们从字面上思考产品，一行一行地。所以对程序员来说更清楚的是，财富是被制造出来的，而不是像饼的切片一样由某种想象中的爸爸分配的。&lt;/p&gt;&#xA;&lt;p&gt;程序员也显然知道财富创造率有巨大的差异。在Viaweb，我们有一个程序员，他是一种生产力怪物。我记得看着他在一个漫长的日子里所做的工作，估计他为公司的市场价值增加了几十万美元。一个伟大的程序员，在状态好的时候，可以在几周内创造价值一百万美元的财富。一个普通的程序员在同一时期会产生零甚至负的财富（例如通过引入错误）。&lt;/p&gt;&#xA;&lt;p&gt;这就是为什么最好的程序员中有这么多是自由主义者。在我们的世界里，你要么沉浮，没有借口。当那些远离财富创造的人——本科生、记者、政客——听说最富有的5%的人拥有一半的总财富时，他们倾向于认为不公正！一个有经验的程序员更可能会想，就这样？最顶尖的5%的程序员可能编写了99%的好软件。&lt;/p&gt;&#xA;&lt;p&gt;财富可以在不被出售的情况下被创造。科学家，至少直到最近，有效地捐赠了他们创造的财富。因为知道了青霉素，我们所有人都更富有，因为我们不太可能死于感染。财富是人们想要的任何东西，而不死肯定是我们想要的东西。黑客经常通过编写任何人都可以免费使用的开源软件来捐赠他们的工作。我现在运行的计算机上的操作系统FreeBSD让我更富有，雅虎也是如此，他们在所有服务器上运行它。&lt;/p&gt;&#xA;&lt;h3 id=&#34;工作是什么&#34;&gt;工作是什么&lt;/h3&gt;&#xA;&lt;p&gt;在工业化国家，人们至少在二十多岁之前属于一个或另一个机构。在所有这些年之后，你习惯于属于一群人的想法，这群人都在早上起床，去某些建筑，做他们通常不喜欢做的事情。属于这样一个群体成为你身份的一部分：名字、年龄、角色、机构。如果你必须介绍自己，或者别人描述你，将会是这样的，约翰·史密斯，10岁，某某小学的学生，或者约翰·史密斯，20岁，某某学院的学生。&lt;/p&gt;&#xA;&lt;p&gt;当约翰·史密斯完成学业时，他预期要找一份工作。而找一份工作似乎意味着加入另一个机构。表面上这很像大学。你选择你想为之工作的公司并申请加入它们。如果一个公司喜欢你，你成为这个新群体的成员。你早上起床，去一组新的建筑，做你通常不喜欢做的事情。有几个不同之处：生活不那么有趣，而且你得到报酬，而不是像在大学时那样支付。但相似之处感觉大于不同之处。约翰·史密斯现在是约翰·史密斯，22岁，某某公司的软件开发人员。&lt;/p&gt;&#xA;&lt;p&gt;事实上，约翰·史密斯的生活比他意识到的变化更大。在社会上，公司看起来很像大学，但你越深入底层现实，就越不同。&lt;/p&gt;&#xA;&lt;p&gt;公司所做的，如果想要继续存在就必须做的事情，是赚钱。而大多数公司赚钱的方式是通过创造财富。公司可能如此专业化以至于这种相似性被掩盖，但创造财富的不仅仅是制造公司。财富的一个重要组成部分是位置。记得那台可以为你制造汽车和为你煮晚餐等等的魔术机器吗？如果它把你的晚餐运送到中亚的一个随机位置，它就不会那么有用。如果财富意味着人们想要的东西，那么移动东西的公司也创造财富。许多其他不制造任何实物产品的公司也是如此。几乎所有公司的存在都是为了做人们想要的事情。&lt;/p&gt;&#xA;&lt;p&gt;当你在为公司工作时，你也是如此。但这里有另一个倾向于掩盖底层现实的层次。在公司里，你所做的工作与很多人的工作平均在一起。你甚至可能没有意识到你正在做人们想要的事情。你的贡献可能是间接的。但公司作为一个整体必须给人们他们想要的东西，否则他们不会赚钱。如果他们每年支付你x美元，那么平均而言，你必须每年贡献至少价值x美元的工作，否则公司将会花费超过其收入，并且将会倒闭。&lt;/p&gt;&#xA;&lt;p&gt;一个大学毕业生认为，并且被告知，他需要找一份工作，好像重要的事情是成为一个机构的成员。更直接的说法是：你需要开始做人们想要的事情。你不需要加入公司来做到这一点。公司只是一群人一起工作以做人们想要的事情。做人们想要的事情才是重要的，而不是加入这个群体。[6]&lt;/p&gt;&#xA;&lt;p&gt;对大多数人来说，最好的计划可能是为一些现有的公司工作。但当你这样做时，理解正在发生的事情是个好主意。工作意味着做人们想要的事情，与那个公司的每个人平均在一起。&lt;/p&gt;&#xA;&lt;h3 id=&#34;更努力工作&#34;&gt;更努力工作&lt;/h3&gt;&#xA;&lt;p&gt;这种平均成为一个问题。我认为困扰大公司的最大问题是难以给每个人的工作分配价值。在大多数情况下他们回避。在大公司里，你为相当努力的工作获得相当可预测的薪水。你预期不要明显无能或懒惰，但你也不预期把你的一生都献给你的工作。&lt;/p&gt;&#xA;&lt;p&gt;然而，事实证明，你在工作上投入多少生命有规模经济。在合适的业务中，一个真正致力于工作的人可以创造比普通员工多十倍甚至一百倍的财富。例如，一个程序员，不是缓慢地维护和更新现有的软件，而是编写一个全新的软件，并借此创造一个新的收入来源。&lt;/p&gt;&#xA;&lt;p&gt;公司没有设置为奖励那些想要这样做的人。你不能去找你的老板说，我想开始工作十倍努力，所以请你付我十倍多的钱。一方面，官方的虚构是你已经在尽可能努力地工作。但更严重的问题是公司没有办法衡量你工作的价值。&lt;/p&gt;&#xA;&lt;p&gt;销售人员是个例外。很容易衡量他们产生多少收入，他们通常按收入的一定比例获得报酬。如果销售人员想更努力工作，他可以开始这样做，并且他会自动按比例获得更多报酬。&lt;/p&gt;&#xA;&lt;p&gt;除了销售之外，还有一个工作大公司可以雇佣一流人才：在高层管理工作中。出于同样的原因：他们的表现可以被衡量。高层管理人员对整个公司的表现负责。因为普通员工的表现通常无法衡量，所以他不被期望做超过坚实努力的事情。而高层管理人员，像销售人员一样，必须实际拿出数字。一个倒闭的首席执行官不能 plead 他付出了坚实的努力。如果公司做得不好，他做得不好。&lt;/p&gt;&#xA;&lt;p&gt;一个能够如此直接地支付所有员工薪酬的公司将会非常成功。许多员工如果能够为此获得报酬会更努力工作。更重要的是，这样的公司会吸引那些想要特别努力工作的人。它会压垮其竞争对手。&lt;/p&gt;&#xA;&lt;p&gt;不幸的是，公司不能像销售人员那样支付每个人。销售人员单独工作。大多数员工的工作纠缠在一起。假设一家公司制造某种消费小玩意。工程师建造一个具有各种新功能的可靠小玩意；工业设计师为它设计一个漂亮的外壳；然后营销人员说服每个人这是他们必须拥有的东西。你知道小玩意儿的销售有多少是由于每个群体的努力吗？或者，就此而言，有多少是由于创造了小玩意儿的过去给了公司质量声誉的创造者？没有办法解开他们所有的贡献。即使你能读懂消费者的思想，你会发现这些因素都模糊在一起。&lt;/p&gt;&#xA;&lt;p&gt;如果你想走得更快，让你的工作与大量其他人的工作纠缠在一起是个问题。在一个大群体中，你的表现不是单独可衡量的——而群体的其余部分会拖慢你。&lt;/p&gt;&#xA;&lt;h3 id=&#34;衡量和杠杆&#34;&gt;衡量和杠杆&lt;/h3&gt;&#xA;&lt;p&gt;要致富，你需要让自己处于有两种情况的环境中：衡量和杠杆。你需要处于一个你的表现可以被衡量的位置，否则没有方法通过做更多来获得更多报酬。你必须拥有杠杆，在某种意义上，你做出的决定有很大的影响。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如果Lisp这么好</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/iflisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/iflisp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/iflisp/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;如果lisp这么好&#34;&gt;如果Lisp这么好&lt;/h1&gt;&#xA;&lt;p&gt;2003年5月&lt;/p&gt;&#xA;&lt;p&gt;如果Lisp这么好，为什么没有更多人使用它？我最近在一次演讲中被听众中的一个学生问到了这个问题。而且不是第一次了。&lt;/p&gt;&#xA;&lt;p&gt;在语言方面，就像在许多事情中一样，流行度和质量之间没有太大关联。为什么约翰·格里沙姆（《诉讼之王》销售排名第44）比简·奥斯汀（《傲慢与偏见》销售排名第6191）卖得更好？即使是格里沙姆会声称这是因为他是更好的作家吗？&lt;/p&gt;&#xA;&lt;p&gt;这是《傲慢与偏见》的第一句话：&amp;ldquo;凡是有钱的单身汉，总想娶位太太，这已经成了一条举世公认的真理。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;举世公认的真理？&amp;rdquo; 对于一个爱情故事的第一句话来说，这些词太长了。&lt;/p&gt;&#xA;&lt;p&gt;就像简·奥斯汀的作品一样，Lisp看起来很难。它的语法，或者说缺乏语法，使它看起来完全不同于大多数人习惯的语言。在学习Lisp之前，我也害怕它。我最近发现了一本1983年的笔记本，我在上面写道：&amp;ldquo;我想我应该学习Lisp，但它看起来太陌生了。&amp;ldquo;幸运的是，我当时19岁，对学习新东西没有太多抵触。我非常无知，学习几乎任何东西都意味着学习新事物。&lt;/p&gt;&#xA;&lt;p&gt;被Lisp吓到的人们编造了其他不使用它的理由。当C是默认语言时，标准的借口是Lisp太慢。现在Lisp方言是可用语言中较快的之一，这个借口已经消失了。现在的标准借口是公开循环的：其他语言更流行。&lt;/p&gt;&#xA;&lt;p&gt;（小心这种推理。它会让你得到Windows。）&lt;/p&gt;&#xA;&lt;p&gt;流行度总是自我延续的，但在编程语言中尤其如此。为流行语言编写的库更多，这使它们更流行。程序经常必须与现有程序一起工作，如果它们用相同的语言编写，这会更容易，所以语言像病毒一样从程序传播到程序。管理者更喜欢流行的语言，因为它们给他们更多对开发者的控制力，开发者可以更容易被替换。&lt;/p&gt;&#xA;&lt;p&gt;确实，如果编程语言都或多或少等价，那么使用除最流行语言之外的任何语言都没有什么理由。但它们并不都等价，差远了。这就是为什么不那么流行的语言，像简·奥斯汀的小说，继续存在的原因。当其他人在阅读最新的约翰·格里沙姆小说时，总会有一小部分人在阅读简·奥斯汀。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;日语翻译 | 罗马尼亚语翻译 | 西班牙语翻译&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>微软已死</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/microsoft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/microsoft/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/microsoft/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;微软已死&#34;&gt;微软已死&lt;/h1&gt;&#xA;&lt;p&gt;2007年4月&lt;/p&gt;&#xA;&lt;p&gt;几天前我突然意识到微软已经死了。我正在和一个年轻的创业公司创始人谈论谷歌与雅虎的不同。我说雅虎从一开始就被对微软的恐惧所扭曲。这就是为什么他们将自己定位为&amp;quot;媒体公司&amp;quot;而不是&amp;quot;技术公司&amp;quot;。然后我看着他的脸，意识到他并不理解。这就像我告诉他80年代中期女孩们多么喜欢巴里·马尼洛一样。巴里谁？微软？他什么也没说，但我能看出他不相信有人会害怕他们。&lt;/p&gt;&#xA;&lt;p&gt;从80年代末开始，微软在软件界投下阴影将近20年。我能记得在他们之前是IBM。我大多忽略了这阴影。我从不使用微软软件，所以它只间接影响我——例如，我从僵尸网络收到的垃圾邮件。因为我没有注意，所以我没有注意到阴影何时消失。&lt;/p&gt;&#xA;&lt;p&gt;但现在它已经消失了。我能感觉到。再也没有人害怕微软了。他们仍然赚很多钱——IBM也是如此。但他们并不危险。&lt;/p&gt;&#xA;&lt;p&gt;微软什么时候死的，死于什么？我知道他们在2001年时似乎还很危险，因为我当时写了一篇论文，说他们没有看起来那么危险。我猜他们在2005年就死了。我知道当我们创办Y Combinator时，我们并不担心微软会与我们资助的创业公司竞争。事实上，我们甚至从未邀请他们参加我们为创业公司向投资者展示而组织的演示日。我们邀请雅虎、谷歌和其他一些互联网公司，但我们从未费心邀请微软。那里也从未有人给我们发过邮件。他们在不同的世界。&lt;/p&gt;&#xA;&lt;p&gt;是什么杀死了他们？我认为是四件事，都发生在2000年代中期。&lt;/p&gt;&#xA;&lt;p&gt;最明显的是谷歌。镇上只能有一个大佬，而他们显然就是。谷歌现在是迄今为止最危险的公司，无论从好的还是坏的意义上来说。微软最多只能 afterward 蹒跚而行。&lt;/p&gt;&#xA;&lt;p&gt;谷歌什么时候领先？人们会倾向于将其推回到2004年8月的IPO，但那时他们并没有设定辩论的条款。我认为他们在2005年领先。Gmail是让他们越过边缘的事情之一。Gmail表明他们能做的不仅仅是搜索。&lt;/p&gt;&#xA;&lt;p&gt;Gmail还展示了如果你利用后来被称为&amp;quot;Ajax&amp;quot;的技术，基于网络的软件能做多少事情。这是微软死亡的第二个原因：每个人都能看到桌面已经结束。现在应用程序似乎不可避免地会在网络上生存——不仅仅是电子邮件，而是一切，直到Photoshop。甚至微软现在也看到了这一点。&lt;/p&gt;&#xA;&lt;p&gt;具有讽刺意味的是，微软无意中帮助创造了Ajax。Ajax中的x来自XMLHttpRequest对象，它让浏览器在显示页面的同时在后台与服务器通信。（最初与服务器通信的唯一方式是请求新页面。）XMLHttpRequest是微软在90年代末创建的，因为他们需要它用于Outlook。他们没有意识到的是，它对很多其他人也有用——事实上，对任何想要让网络应用程序像桌面应用程序一样工作的人都有用。&lt;/p&gt;&#xA;&lt;p&gt;Ajax的另一个关键组件是Javascript，这种在浏览器中运行的编程语言。微软看到了Javascript的危险，并试图尽可能长时间地保持其损坏。[1] 但最终开源世界赢了，通过产生Javascript库，这些库就像树长在铁丝网上一样，覆盖了浏览器的缺陷。&lt;/p&gt;&#xA;&lt;p&gt;微软死亡的第三个原因是宽带互联网。现在任何关心的人都可以拥有快速的网络接入。连接到服务器的管道越大，你对桌面的需求就越少。&lt;/p&gt;&#xA;&lt;p&gt;棺材上的最后一颗钉子来自苹果。感谢OS X，苹果以在技术界极为罕见的方式死而复生。[2] 他们的胜利如此彻底，以至于当我遇到运行Windows的计算机时，我现在感到惊讶。我们在Y Combinator资助的几乎所有人都使用苹果笔记本电脑。在创业学校的观众中也是如此。现在所有计算机人员都使用Mac或Linux。Windows是给祖母用的，就像90年代的Mac一样。所以不仅桌面不再重要，关心计算机的人也没有人使用微软的了。&lt;/p&gt;&#xA;&lt;p&gt;当然，苹果在音乐方面也让微软节节败退，电视和手机也在路上。&lt;/p&gt;&#xA;&lt;p&gt;我很高兴微软死了。他们像尼禄或康茂德——邪恶得只有继承的权力才能让你如此。因为记住，微软的垄断不是从微软开始的。他们是从IBM那里得到的。软件业务从大约1950年代中期到大约2005年一直被垄断所笼罩。也就是说，几乎它的整个存在时间。&amp;ldquo;Web 2.0&amp;quot;之所以如此兴高采烈，原因之一就是这种感觉，无论是有意识还是无意识的，这个垄断时代可能终于结束了。&lt;/p&gt;&#xA;&lt;p&gt;当然，作为一个黑客，我禁不住思考如何修复一些损坏的东西。微软有什么方法可以东山再起吗？原则上，是的。要看看如何做到，想象两件事：（a）微软现在手头的现金量，以及（b）拉里和谢尔盖十年前在所有搜索引擎中奔波，试图以100万美元出售谷歌的想法，但被每个人拒绝。&lt;/p&gt;&#xA;&lt;p&gt;令人惊讶的事实是，按照像微软这样富有的公司的标准， brilliant hackers——危险地brilliant的hackers——可以非常便宜地得到。他们再也无法雇佣聪明的人了，但他们可以购买他们想要的数量，只需多一个数量级的钱。所以如果他们想再次成为竞争者，他们可以这样做：购买所有好的&amp;quot;Web 2.0&amp;quot;创业公司。他们可以用比必须为Facebook支付的少的钱获得几乎所有这些公司。把它们都放在硅谷的一栋楼里，用铅屏蔽包围它们，保护它们不受雷德蒙德的任何接触。我建议这个很安全，因为他们永远不会这样做。微软最大的弱点是他们仍然没有意识到他们有多么糟糕。他们仍然认为他们可以在内部编写软件。也许他们可以，按照桌面世界的标准。但那个世界几年前就结束了。&lt;/p&gt;&#xA;&lt;p&gt;我已经知道人们对这篇论文的反应会是什么。一半的读者会说微软仍然是一家利润极其丰厚的公司，我应该更小心，不要基于我们与世隔绝的&amp;quot;Web 2.0&amp;quot;小泡泡中少数人的想法得出结论。另一半，年轻的一半，会抱怨这是旧闻。&lt;/p&gt;&#xA;&lt;p&gt;另见：微软已死：Cliffs Notes&lt;/p&gt;&#xA;&lt;p&gt;注释&lt;/p&gt;&#xA;&lt;p&gt;[1] 制作不兼容的软件不需要有意识的努力。你所要做的就是不太努力地修复错误——如果你是一家大公司，你会产生大量的错误。这种情况类似于&amp;quot;文学理论家&amp;quot;的写作。大多数人不试图晦涩；他们只是不努力做到清晰。这不会带来回报。&lt;/p&gt;&#xA;&lt;p&gt;[2] 部分原因是史蒂夫·乔布斯被约翰·斯卡利推走，这在技术公司中是罕见的。如果苹果的董事会没有犯那个错误，他们就不必反弹。&lt;/p&gt;&#xA;&lt;p&gt;葡萄牙语翻译&lt;/p&gt;&#xA;&lt;p&gt;简体中文翻译&lt;/p&gt;&#xA;&lt;p&gt;韩语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>快照：Viaweb，1998年6月</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/vw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/vw/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/vw/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;快照viaweb1998年6月&#34;&gt;快照：Viaweb，1998年6月&lt;/h1&gt;&#xA;&lt;p&gt;2012年1月&lt;/p&gt;&#xA;&lt;p&gt;在雅虎收购宣布前几个小时，我拍下了Viaweb网站的快照。我想有一天看看可能会很有趣。&lt;/p&gt;&#xA;&lt;p&gt;首先注意到的是页面是多么小。1998年的屏幕要小得多。如果我没记错的话，我们的首页刚好能适应人们当时通常使用的窗口大小。&lt;/p&gt;&#xA;&lt;p&gt;那时的浏览器（IE6还要3年才会出现）字体很少，而且没有抗锯齿。如果你想让页面看起来好看，你必须将显示文本渲染为图像。&lt;/p&gt;&#xA;&lt;p&gt;你可能会注意到Viaweb和Y Combinator的标志之间有某种相似之处。当我们创办YC时，我们这样做是为了开个内部玩笑。考虑到红色圆圈是多么基础的东西，当我们创办Viaweb时，我很惊讶其他使用红色圆圈作为标志的公司如此之少。稍后我明白了原因。&lt;/p&gt;&#xA;&lt;p&gt;在公司页面上，你会注意到一个名叫John McArtyem的神秘人物。Robert Morris（又名Rtm）在蠕虫事件后如此厌恶 publicity，以至于他不想让自己的名字出现在网站上。我设法让他同意妥协：我们可以使用他的简介，但不能使用他的名字。从那时起，他在这一点上稍微放松了一些。&lt;/p&gt;&#xA;&lt;p&gt;Trevor大约在收购完成时毕业，所以在4天的时间里，他从身无分文的研究生变成了百万富翁博士。我作为新闻稿撰写者的职业生涯 culminating 是一篇庆祝他毕业的新闻稿，配有一张我在会议期间为他画的插图。&lt;/p&gt;&#xA;&lt;p&gt;（Trevor也在我们的网页设计师目录中作为Trevino Bagwell出现，这些设计师是商家可以雇佣来为他们建造商店的。我们在其中安插了一个托儿，以防有竞争对手试图向我们的网页设计师发送垃圾邮件。我们假设他的标志会阻止任何真正的客户，但事实并非如此。）&lt;/p&gt;&#xA;&lt;p&gt;回到90年代，为了获得用户，你必须在杂志和报纸上被提及。当时没有像现在这样的在线被发现的方式。所以我们过去每月支付一家公关公司16,000美元让我们在新闻中被提及。幸运的是，记者们喜欢我们。&lt;/p&gt;&#xA;&lt;p&gt;在我们关于从搜索引擎获得流量的建议中（我认为SEO这个词还没有被创造出来），我们说只有7个重要的：Yahoo、AltaVista、Excite、WebCrawler、InfoSeek、Lycos和HotBot。注意到少了什么吗？谷歌那年9月才成立。&lt;/p&gt;&#xA;&lt;p&gt;我们通过一家名为Cybercash的公司支持在线交易，因为如果我们缺乏这个功能，我们会在产品比较中被 beaten up。但Cybercash是如此糟糕，而且大多数商店的订单量如此之低，以至于商家像处理电话订单一样处理订单会更好。我们网站上有一个页面试图说服商家不要进行实时授权。&lt;/p&gt;&#xA;&lt;p&gt;整个网站像一个漏斗一样组织，引导人们进行试驾。能够在线试用软件是件新奇事。我们在动态url中放入cgi-bin来欺骗竞争对手关于我们的软件如何工作。&lt;/p&gt;&#xA;&lt;p&gt;我们有一些知名用户。不用说，好莱坞的Frederick&amp;rsquo;s获得了最多的流量。我们对大商店收取每月300美元的固定费用，所以拥有大量流量的用户有点令人担忧。我曾经计算过Frederick&amp;rsquo;s在带宽上花了我们多少钱，大约是每月300美元。&lt;/p&gt;&#xA;&lt;p&gt;由于我们托管所有商店，这些商店在1998年6月每月总共获得超过1000万次页面浏览，我们消耗了在当时看起来相当多的带宽。我们的办公室有2条T1线路（3 Mb/sec）。在那个时代没有AWS。甚至将服务器托管似乎也太冒险了，考虑到它们经常出问题。所以我们的服务器在办公室里。或者更准确地说，在Trevor的办公室里。作为与没有其他人共享他办公室的独特特权，他必须与6台尖叫的塔式服务器共享。他的办公室因为它们产生的热量而被戏称为&amp;quot;热水浴缸&amp;quot;。大多数日子，他的一堆窗式空调还能应付。&lt;/p&gt;&#xA;&lt;p&gt;为了描述页面，我们有一种叫做RTML的模板语言，据说代表某种东西，但事实上我是以Rtm的名字命名的。RTML是Common Lisp，通过一些宏和库增强，并隐藏在一个结构编辑器后面，使它看起来好像有语法。&lt;/p&gt;&#xA;&lt;p&gt;由于我们持续发布，我们的软件实际上没有版本。但在那些日子里，行业媒体期望有版本，所以我们就编造了一些。如果我们想获得大量关注，我们把版本号设为整数。那个&amp;quot;4.0版本&amp;quot;图标顺便说一句是由我们自己的按钮生成器生成的。整个Viaweb网站都是用我们的软件制作的，尽管它不是一个在线商店，因为我们想体验我们的用户的感受。&lt;/p&gt;&#xA;&lt;p&gt;1997年底，我们发布了一个叫做Shopfind的通用购物搜索引擎。在当时它相当先进。它有一个可编程的爬虫，可以爬取网上大多数不同的商店并挑选出产品。&lt;/p&gt;</description>
    </item>
    <item>
      <title>怪异语言</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/weird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/weird/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/weird/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;怪异语言&#34;&gt;怪异语言&lt;/h1&gt;&#xA;&lt;p&gt;2021年8月&lt;/p&gt;&#xA;&lt;p&gt;当人们说根据他们的经验所有编程语言基本上等价时，他们做出的不是关于语言的陈述，而是关于他们做过的编程类型的陈述。&lt;/p&gt;&#xA;&lt;p&gt;99.5%的编程包括将库函数调用粘合在一起。所有流行的语言在这方面都同样好。所以一个人可以很容易地花费整个职业生涯在流行编程语言的交集中操作。&lt;/p&gt;&#xA;&lt;p&gt;但另外0.5%的编程不成比例地有趣。如果你想了解它由什么组成，怪异语言的怪异性是一个很好的线索。&lt;/p&gt;&#xA;&lt;p&gt;怪异语言不是偶然怪异的。至少好的不是。好的怪异语言的怪异性通常暗示着存在某种不仅仅是通常的库函数调用的粘合的编程形式。&lt;/p&gt;&#xA;&lt;p&gt;一个具体的例子：Lisp宏。Lisp宏即使对许多Lisp程序员来说也显得怪异。它们不仅不在流行语言的交集中，而且它们的性质使得在语言中正确实现它们而不将其变成Lisp的方言会很困难。宏绝对证明超越了粘合编程的技术。例如，通过首先为该类型的问题编写一种语言，然后在其中编写你的特定应用程序来解决问题。这不是你用宏能做的全部；它只是程序操作技术空间中的一个区域，即使现在还远未被完全探索。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你想扩展你对编程可能性的概念，一种方法是学习怪异语言。选择一种大多数程序员认为怪异但其中位数用户聪明的语言，然后专注于这种语言与流行语言交集之间的差异。你能用这种语言说什么，而在其他语言中说会极其不便？在学习如何说你以前不能说的话的过程中，你可能会学习如何想你以前不能想的事。&lt;/p&gt;&#xA;&lt;p&gt;感谢Trevor Blackwell、Patrick Collison、Daniel Gackle、Amjad Masad和Robert Morris阅读草稿。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://paulgraham.com/weird.ja.html&#34;&gt;日语翻译&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>成瘾性</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/addiction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/addiction/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/addiction/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;成瘾性&#34;&gt;成瘾性&lt;/h1&gt;&#xA;&lt;p&gt;成瘾性的加速 2010年7月&lt;/p&gt;&#xA;&lt;p&gt;烈酒、香烟、海洛因和可卡因的共同点是，它们都是成瘾性较低的前身物质的更浓缩形式。我们描述为成瘾性的大多数（如果不是全部）事物都是如此。可怕的是，创造它们的过程正在加速。&lt;/p&gt;&#xA;&lt;p&gt;我们不想阻止它。这是治愈疾病的同一过程：技术进步。技术进步意味着让事物做更多我们想要的事情。当我们想要的事物是我们想要想要的事物时，我们认为技术进步是好的。如果某种新技术使太阳能电池的效率提高x%，那似乎绝对是更好的。当进步浓缩了我们不想要想要的东西——当它将鸦片变成海洛因时——它似乎变坏了。但这是同一过程在起作用。&lt;/p&gt;&#xA;&lt;p&gt;没有人怀疑这个过程正在加速，这意味着越来越多我们喜欢的事物将被变成我们过于喜欢的事物。&lt;/p&gt;&#xA;&lt;p&gt;据我所知，没有词来形容我们过于喜欢的事物。最接近的是&amp;quot;addictive&amp;quot;（成瘾的）的口语意义。在我的一生中，这种用法变得越来越普遍。原因很清楚：我们需要它的事物越来越多。在极端的一端是可卡因和冰毒。食物通过工厂化农业和食品加工创新的结合，变成了具有更直接冲击力的东西，你可以在美国的任何城镇看到结果。跳棋和纸牌已经被《魔兽世界》和《FarmVille》取代。电视变得更加引人入胜，即便如此，它也无法与Facebook竞争。&lt;/p&gt;&#xA;&lt;p&gt;现在的世界比40年前更容易让人上瘾。除非产生这些事物的技术进步形式受到与技术进步一般不同的法律约束，否则在未来40年里，世界将比过去40年变得更加容易让人上瘾。&lt;/p&gt;&#xA;&lt;p&gt;未来40年将给我们带来一些美妙的事物。我并不是暗示它们都应该被避免。酒精是一种危险的药物，但我宁愿生活在一个有葡萄酒的世界，而不是没有葡萄酒的世界。大多数人可以与酒精共存；但你必须小心。更多我们喜欢的事物将意味着更多我们必须小心的事物。&lt;/p&gt;&#xA;&lt;p&gt;不幸的是，大多数人都不会。这意味着随着世界变得更加容易让人上瘾，一个人可以过正常生活的两种意义将被进一步分开。&amp;ldquo;正常&amp;quot;的一种意义是统计上的正常：其他人都做的事情。另一种意义是当我们谈论机械的正常运行范围时的意义：效果最好的。&lt;/p&gt;&#xA;&lt;p&gt;这两种意义已经相距甚远。现在，任何试图好好生活的人在美国大部分地区都会显得异常节欲。这种现象只会变得更加明显。从现在开始，你可以把它作为一个经验法则：如果人们不认为你很奇怪，那么你生活得很糟糕。&lt;/p&gt;&#xA;&lt;p&gt;社会最终会对新的成瘾事物产生抗体。我在香烟身上看到了这种情况的发生。当香烟首次出现时，它们的传播方式就像传染病在以前隔离的人群中传播一样。吸烟迅速成为一种（统计上的）正常事物。到处都有烟灰缸。我还是孩子的时候，我们家里有烟灰缸，尽管我父母都不吸烟。你必须为客人准备。&lt;/p&gt;&#xA;&lt;p&gt;随着关于吸烟危险的知识传播，习俗改变了。在过去20年里，吸烟已经从看起来完全正常的事物变成了一种相当肮脏的习惯：从电影明星在宣传照中做的事情，变成了成瘾者小团体在办公楼门外做的事情。当然，很多变化是由于立法，但如果习俗没有改变，立法也不可能发生。&lt;/p&gt;&#xA;&lt;p&gt;然而，这花了一段时间——大约100年。除非社会抗体的进化速度能够加快，以匹配技术进步抛弃新的成瘾事物的加速速度，否则我们将越来越无法依赖习俗来保护我们。&lt;/p&gt;&#xA;&lt;p&gt;除非我们想成为每种新成瘾的煤矿中的金丝雀——那些悲惨的例子成为未来一代人教训的人——否则我们将必须自己弄清楚要避免什么以及如何避免。怀疑一切新事物实际上将成为一个合理的策略（或更合理的策略）。&lt;/p&gt;&#xA;&lt;p&gt;事实上，即使那样也不够。我们不仅要担心新事物，还要担心现有事物变得更加容易让人上瘾。这就是咬到我的东西。我避免了大多数成瘾，但互联网让我上瘾了，因为在我使用它的过程中它变得让人上瘾了。&lt;/p&gt;&#xA;&lt;p&gt;我认识的大多数人都有互联网成瘾问题。我们都在努力找出自己摆脱它的习俗。这就是为什么我没有iPhone的原因；我最不想要的就是互联网跟随我进入世界。&lt;/p&gt;&#xA;&lt;p&gt;我最新的技巧是长途徒步旅行。我曾经认为跑步比徒步是更好的锻炼形式，因为它花的时间更少。现在徒步旅行的缓慢性似乎成了一个优势，因为我在小径上花的时间越长，我有不受干扰的思考时间就越长。&lt;/p&gt;&#xA;&lt;p&gt;听起来很古怪，不是吗？当你试图解决没有习俗指导的问题时，总是会这样。也许我不能诉诸奥卡姆剃刀；也许我只是古怪。但如果我对成瘾性加速的看法是正确的，那么这种孤独的挣扎来避免它的方式将 increasingly 成为任何想要完成任务的人的命运。我们将越来越多地被我们说不的事情所定义。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 你能将技术进步限制在你想要的领域吗？只能在有限范围内，而不成为警察国家。即使那样，你的限制也会产生不良副作用。&amp;ldquo;好&amp;quot;和&amp;quot;坏&amp;quot;的技术进步没有明显区分，所以你会发现你不能在不减缓前者的同时减缓后者。而且，无论如何，正如禁酒令和&amp;quot;毒品战争&amp;quot;所显示的，禁令往往弊大于利。&lt;/p&gt;&#xA;&lt;p&gt;[2] 技术一直在加速。按照旧石器时代的标准，技术在新石器时代以惊人的速度发展。&lt;/p&gt;&#xA;&lt;p&gt;[3] 除非我们大规模生产社会习俗。我怀疑最近美国福音派基督教的复兴部分是对毒品的反应。在绝望中，人们伸手拿大锤；如果他们的孩子不听他们的话，也许他们会听上帝的。但那种解决方案比让孩子对毒品说不有更广泛的后果。你最终也对科学说不。我担心我们可能正在走向一个未来，只有少数人自己规划穿越禁区的行程，而其他人预订包价旅行。或者更糟的是，由政府为他们预订。&lt;/p&gt;&#xA;&lt;p&gt;[4] 人们通常用&amp;quot;拖延&amp;quot;这个词来描述他们在互联网上做什么。在我看来，将正在发生的事情仅仅描述为不工作太温和了。当有人喝醉而不是工作时，我们不会称之为拖延。&lt;/p&gt;&#xA;&lt;p&gt;[5] 几个人告诉我他们喜欢iPad，因为它让他们能将互联网带到笔记本电脑太显眼的情况下。换句话说，它是一个扁酒瓶。（当然，iPhone也是如此，但这个优势不那么明显，因为它读起来像电话，大家都习惯了。）&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、Patrick Collison、Jessica Livingston和Robert Morris阅读本文草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>更好的贝叶斯过滤</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/better/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/better/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/better/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;更好的贝叶斯过滤&#34;&gt;更好的贝叶斯过滤&lt;/h1&gt;&#xA;&lt;p&gt;2003年1月&lt;/p&gt;&#xA;&lt;p&gt;（本文是在2003年垃圾邮件会议上的演讲。它描述了我在改进《垃圾邮件计划》中描述的算法性能方面所做的工作，以及我未来的计划。）&lt;/p&gt;&#xA;&lt;p&gt;我在这里要介绍的第一个发现是研究论文的懒惰评估算法。随便写你想写的内容，不要引用任何以前的工作，愤怒的读者会发送给你所有你应该引用的论文的参考文献。我在《垃圾邮件计划》[1]登上Slashdot后发现了这个算法。&lt;/p&gt;&#xA;&lt;p&gt;垃圾邮件过滤是文本分类的一个子集，这是一个已经成熟的领域，但是关于贝叶斯垃圾邮件过滤本身的第一篇论文似乎是在1998年同一会议上发表的两篇，一篇是Pantel和Lin的[2]，另一篇是微软研究院的一个小组[3]。&lt;/p&gt;&#xA;&lt;p&gt;当我听说这项工作时，我有点惊讶。如果人们在四年前就已经开始研究贝叶斯过滤，为什么不是每个人都在使用它呢？当我阅读这些论文时，我找到了原因。Pantel和Lin的过滤器是两个中更有效的，但它只捕获了92%的垃圾邮件，有1.16%的误报率。&lt;/p&gt;&#xA;&lt;p&gt;当我尝试编写贝叶斯垃圾邮件过滤器时，它捕获了99.5%的垃圾邮件，误报率低于0.03%[4]。当两个人尝试相同的实验得到截然不同的结果时，总是令人担忧。在这里尤其令人担忧，因为这两组数字可能会得出相反的结论。不同的用户有不同的要求，但我认为对于许多人来说，92%的过滤率和1.16%的误报率意味着过滤不是一个可接受的解决方案，而99.5%的过滤率和低于0.03%的误报率意味着它是可接受的。&lt;/p&gt;&#xA;&lt;p&gt;那么为什么我们会得到如此不同的数字呢？我没有尝试重现Pantel和Lin的结果，但是通过阅读论文，我看到了五个可能解释这种差异的原因。&lt;/p&gt;&#xA;&lt;p&gt;一个是他们用很少的数据训练他们的过滤器：160封垃圾邮件和466封非垃圾邮件。过滤器的性能在这么小的数据集上应该还在提升。所以他们的数字可能甚至不能准确衡量他们算法的性能，更不用说一般的贝叶斯垃圾邮件过滤了。&lt;/p&gt;&#xA;&lt;p&gt;但我认为最重要的区别可能是他们忽略了邮件头。对于任何从事垃圾邮件过滤工作的人来说，这似乎是一个错误的决定。然而，在我尝试编写的第一个过滤器中，我也忽略了邮件头。为什么？因为我想让问题保持整洁。那时我对邮件头了解不多，它们在我看来充满了随机的东西。这里有一个教训给过滤器编写者：不要忽略数据。你会觉得这个教训太明显了，不需要提及，但我已经不得不学习了好几次。&lt;/p&gt;&#xA;&lt;p&gt;第三，Pantel和Lin对词干进行了提取，意味着他们将例如&amp;quot;mailing&amp;quot;和&amp;quot;mailed&amp;quot;都简化为根词&amp;quot;mail&amp;quot;。他们可能觉得他们被迫这样做是因为他们的语料库很小，但如果是这样，这是一种过早的优化。&lt;/p&gt;&#xA;&lt;p&gt;第四，他们计算概率的方式不同。他们使用了所有的标记，而我只使用15个最显著的。如果你使用所有的标记，你往往会错过较长的垃圾邮件，就是那种有人告诉你他们的生活故事直到他们从某个多层次营销计划中致富的类型。而且这样的算法很容易被垃圾邮件发送者欺骗：只需添加一大块随机文本来平衡垃圾邮件术语。&lt;/p&gt;&#xA;&lt;p&gt;最后，他们没有针对误报进行偏置。我认为任何垃圾邮件过滤算法都应该有一个方便的旋钮，你可以转动它来降低误报率，代价是降低过滤率。我通过将非垃圾邮件语料库中标记的出现次数加倍来实现这一点。我认为将垃圾邮件过滤视为一个直接的文本分类问题是个坏主意。你可以使用文本分类技术，但解决方案可以也应该反映文本是邮件这一事实，特别是垃圾邮件。邮件不仅仅是文本；它有结构。垃圾邮件过滤不仅仅是分类，因为误报比漏报要糟糕得多，你应该将它们视为不同类型的错误。而且错误的来源不仅仅是随机变化，而是一个活跃的人类垃圾邮件发送者积极工作以击败你的过滤器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;标记&#34;&gt;标记&lt;/h2&gt;&#xA;&lt;p&gt;在Slashdot文章之后我听说的另一个项目是Bill Yerazunis的CRM114[5]。这证明了我刚才提到的设计原则的反例。它是一个直接的文本分类器，但它是如此惊人的有效，以至于它甚至不知道自己在做什么的情况下几乎完美地过滤垃圾邮件。&lt;/p&gt;&#xA;&lt;p&gt;一旦我理解了CRM114的工作原理，似乎我最终将不得不从基于单个词的过滤转向这样的方法。但是首先，我想，我会看看我用单个词能走多远。答案是，惊人的远。&lt;/p&gt;&#xA;&lt;p&gt;我主要在研究更智能的标记化。在当前的垃圾邮件上，我已经能够达到接近CRM114的过滤率。这些技术与Bill的技术大多是正交的；最优的解决方案可能包含两者。&lt;/p&gt;&#xA;&lt;p&gt;《垃圾邮件计划》使用了非常简单的标记定义。字母、数字、破折号、撇号和美元符号是组成字符，其他都是标记分隔符。我也忽略了大小写。&lt;/p&gt;&#xA;&lt;p&gt;现在我有一个更复杂的标记定义：保留大小写。感叹号是组成字符。句号和逗号如果出现在两个数字之间则是组成字符。这让我能够完整地获得IP地址和价格。像$20-25这样的价格范围产生两个标记，$20和$25。出现在To、From、Subject和Return-Path行中，或者url中的标记会相应地被标记。例如，Subject行中的&amp;quot;foo&amp;quot;变成&amp;quot;Subject*foo&amp;quot;。（星号可以是任何你不允许作为组成字符的字符。）这样的措施增加了过滤器的词汇量，使其更有区分力。例如，在当前的过滤器中，Subject行中的&amp;quot;free&amp;quot;有98%的垃圾邮件概率，而正文中的相同标记只有65%的垃圾邮件概率。&lt;/p&gt;&#xA;&lt;p&gt;以下是一些当前的概率[6]：&lt;/p&gt;&#xA;&lt;p&gt;Subject&lt;em&gt;FREE 0.9999&#xA;free!! 0.9999&#xA;To&lt;/em&gt;free 0.9998&#xA;Subject&lt;em&gt;free 0.9782&#xA;free! 0.9199&#xA;Free 0.9198&#xA;Url&lt;/em&gt;free 0.9091&#xA;FREE 0.8747&#xA;From*free 0.7636&#xA;free 0.6546&lt;/p&gt;&#xA;&lt;p&gt;在《垃圾邮件计划》过滤器中，所有这些标记都会有相同的概率，0.7602。那个过滤器识别了大约23,000个标记。当前的一个识别了大约187,000个。&lt;/p&gt;&#xA;&lt;p&gt;拥有更大的标记宇宙的缺点是有更多未命中的机会。将你的语料库分散到更多的标记上与使其变小的效果相同。例如，如果你将感叹号视为组成字符，那么你可能最终没有带有七个感叹号的free的垃圾邮件概率，即使你知道只有两个感叹号的free有99.99%的概率。&lt;/p&gt;&#xA;&lt;p&gt;对此的一个解决方案是我称之为退化的方法。如果你找不到标记的精确匹配，就将其视为不太具体的版本。我认为终端感叹号、大写字母以及出现在五个标记上下文中的任何一个使标记更具体。例如，如果我找不到&amp;quot;Subject&lt;em&gt;free!&amp;ldquo;的概率，我会查找&amp;quot;Subject&lt;/em&gt;free&amp;rdquo;、&amp;ldquo;free!&amp;ldquo;和&amp;quot;free&amp;quot;的概率，并取离0.5最远的那个。&lt;/p&gt;&#xA;&lt;p&gt;以下是过滤器在Subject行中看到&amp;quot;FREE!!!&amp;ldquo;且没有其概率时考虑的替代方案[7]：&lt;/p&gt;&#xA;&lt;p&gt;Subject&lt;em&gt;Free!!!&#xA;Subject&lt;/em&gt;free!!!&#xA;Subject&lt;em&gt;FREE!&#xA;Subject&lt;/em&gt;Free!&#xA;Subject&lt;em&gt;free!&#xA;Subject&lt;/em&gt;FREE&#xA;Subject&lt;em&gt;Free&#xA;Subject&lt;/em&gt;free&#xA;FREE!!!&#xA;Free!!!&#xA;free!!!&#xA;FREE!&#xA;Free!&#xA;free!&#xA;FREE&#xA;Free&#xA;free&lt;/p&gt;&#xA;&lt;p&gt;如果你这样做，一定要考虑首字母大写以及全大写和全小写的版本。垃圾邮件倾向于有更多的祈使语气句子，而在这些句子中，第一个词是动词。所以首字母大写的动词比全小写时有更高的垃圾邮件概率。在我的过滤器中，&amp;ldquo;Act&amp;quot;的垃圾邮件概率是98%，而&amp;quot;act&amp;quot;只有62%。&lt;/p&gt;&#xA;&lt;p&gt;如果你增加过滤器的词汇量，你可能会根据你旧的&amp;quot;相同&amp;quot;定义多次计算相同的词。从逻辑上讲，它们不再是相同的标记了。但如果这仍然困扰你，让我从经验补充，你似乎多次计算的词往往正是你想要的。&lt;/p&gt;&#xA;&lt;p&gt;更大词汇量的另一个影响是，当你查看传入的邮件时，你会发现更多有趣的标记，即那些概率远离0.5的标记。我使用15个最有趣的来决定邮件是否为垃圾邮件。但是当你使用这样的固定数字时，你可能会遇到问题。如果你发现很多最大有趣的标记，结果可能取决于决定同等有趣标记排序的随机因素。处理这个问题的一种方法是将一些视为比其他更有趣。&lt;/p&gt;&#xA;&lt;p&gt;例如，标记&amp;quot;dalco&amp;quot;在我的垃圾邮件语料库中出现3次，在我的合法邮件语料库中从未出现。标记&amp;quot;Url*optmails&amp;rdquo;（意思是url中的&amp;quot;optmails&amp;rdquo;）出现1223次。然而，按照我过去计算标记概率的方式，两者都会有相同的垃圾邮件概率，即0.99的阈值。&lt;/p&gt;&#xA;&lt;p&gt;这感觉不对。有理论论据支持给这两个标记显著不同的概率（Pantel和Lin这样做），但我还没有尝试过。但至少似乎如果我们发现超过15个标记只出现在一个语料库或另一个中，我们应该优先考虑出现次数多的。所以现在有两个阈值。对于只出现在垃圾邮件语料库中的标记，如果它们出现超过10次，概率是0.9999，否则是0.9998。在规模范围的另一端，对于只在合法邮件语料库中找到的标记也是如此。&lt;/p&gt;&#xA;&lt;p&gt;我以后可能会大幅缩放标记概率，但这少量的缩放至少确保标记以正确的方式排序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>欢迎来到Lisp</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/acl2txtt1748944359/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/acl2txtt1748944359/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/acl2txtt1748944359/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;欢迎来到lisp&#34;&gt;欢迎来到Lisp&lt;/h1&gt;&#xA;&lt;p&gt;本章旨在让你尽快开始编程。到本章结束时，你将了解足够的Common Lisp知识来开始编写程序。&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-形式&#34;&gt;2.1 形式&lt;/h2&gt;&#xA;&lt;p&gt;对于Lisp来说尤其如此，你通过使用它来学习它，因为Lisp是一种交互式语言。任何Lisp系统都包含一个称为toplevel的交互式前端。你将Lisp表达式输入到toplevel中，系统会显示它们的值。Lisp通常会显示一个提示符来告诉你它在等待你输入内容。许多Common Lisp实现使用&amp;gt;作为toplevel提示符。这就是我们在这里要使用的。&lt;/p&gt;&#xA;&lt;p&gt;最简单的Lisp表达式之一是整数。如果我们在提示符后输入1，&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;系统将打印它的值，然后是另一个提示符，表示它准备好接受更多输入。在这种情况下，显示的值与我们输入的相同。像1这样的数字被称为求值为自身。&lt;/p&gt;&#xA;&lt;p&gt;当我们输入需要一些工作来求值的表达式时，生活变得更加有趣。例如，如果我们想要将两个数字相加，我们输入类似这样的内容：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (+ 2 3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在表达式(+ 2 3)中，+被称为运算符，数字2和3被称为参数。在日常生活中，我们会将这个表达式写为2 + 3，但在Lisp中，我们将+运算符放在前面，后面跟着参数，整个表达式用一对括号括起来：(+ 2 3)。这被称为前缀表示法，因为运算符在前。&lt;/p&gt;&#xA;&lt;p&gt;这种写表达式的方式起初可能看起来很奇怪，但实际上这种表示法是Lisp最棒的特点之一。例如，如果我们想要将三个数字相加，在普通表示法中我们必须使用+两次，2 + 3 + 4，而在Lisp中我们只需添加另一个参数：(+ 2 3 4)&lt;/p&gt;&#xA;&lt;p&gt;我们通常使用+的方式是，它必须恰好有两个参数：一个在左边，一个在右边。前缀表示法的灵活性意味着，在Lisp中，+可以接受任意数量的参数，包括无参数：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (+)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (+ 2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (+ 2 3)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (+ 2 3 4)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (+ 2 3 4 5)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为运算符可以接受不同数量的参数，我们需要括号来表示表达式的开始和结束。表达式可以嵌套。也就是说，表达式中的参数本身可能是复杂的表达式：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (/ (- 7 1) (- 4 2))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用英语来说，这是七减一，除以四减二。&lt;/p&gt;</description>
    </item>
    <item>
      <title>泡沫的正确之处</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/bubble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/bubble/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/bubble/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;泡沫的正确之处&#34;&gt;泡沫的正确之处&lt;/h1&gt;&#xA;&lt;p&gt;2004年9月&lt;/p&gt;&#xA;&lt;p&gt;（本文源自ICFP 2004的特邀演讲。）&lt;/p&gt;&#xA;&lt;p&gt;我在互联网泡沫中有一排前排座位，因为我在1998年和1999年在雅虎工作。有一天，当股票交易在200美元左右时，我坐下来计算我认为价格应该是多少。我得到的答案是12美元。我走到下一个隔间告诉我的朋友Trevor。&amp;ldquo;十二！&amp;ldquo;他说。他试图听起来愤怒，但没有完全做到。他知道我们的估值是疯狂的。&lt;/p&gt;&#xA;&lt;p&gt;雅虎是一个特例。不仅仅是我们的市盈率是假的。我们一半的收益也是假的。当然不是安然那种方式。财务人员在报告收益方面似乎一丝不苟。使我们的收益虚假的是，雅虎实际上是庞氏骗局的中心。投资者看着雅虎的收益，对自己说，这里证明互联网公司可以赚钱。所以他们投资于承诺成为下一个雅虎的新创业公司。一旦这些创业公司拿到钱，他们用钱做什么？在雅虎上购买数百万美元的广告来推广他们的品牌。结果：本季度对创业公司的资本投资在下季度显示为雅虎收益——刺激了新一轮的创业公司投资。&lt;/p&gt;&#xA;&lt;p&gt;就像在庞氏骗局中一样，这个系统似乎的回报只是对它的最新一轮投资。使它不是庞氏骗局的是它是无意的。至少，我认为是。风险投资行业相当乱伦， presumably有一些人处于能够意识到发生了什么并从中获利的位置。&lt;/p&gt;&#xA;&lt;p&gt;一年后游戏结束了。从2000年1月开始，雅虎的股价开始崩溃，最终失去了95%的价值。&lt;/p&gt;&#xA;&lt;p&gt;但请注意，即使市值被削减了所有脂肪，雅虎仍然价值连城。即使在2001年3月和4月的宿醉估值中，雅虎的人还是在短短六年内创建了一家价值约80亿美元的公司。&lt;/p&gt;&#xA;&lt;p&gt;事实是，尽管我们在泡沫期间听到的关于&amp;quot;新经济&amp;quot;的种种胡言乱语，但有一个核心的真理。要得到一个真正的大泡沫，你需要这个：在中心有坚实的东西，这样即使是聪明人也会被吸引进来。（艾萨克·牛顿和乔纳森·斯威夫特都在1720年的南海泡沫中赔了钱。）&lt;/p&gt;&#xA;&lt;p&gt;现在钟摆已经摆向另一边。现在任何在泡沫期间变得时髦的东西都不合时宜。但这是一个错误——比相信1999年每个人说的话更大的错误。从长远来看，泡沫正确的地方将比它错误的地方更重要。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-零售风险投资&#34;&gt;1. 零售风险投资&lt;/h2&gt;&#xA;&lt;p&gt;在泡沫的过度之后，现在在公司有收益之前将其上市被认为是可疑的。但这个想法本身并没有什么内在错误。在早期阶段将公司上市只是零售风险投资：不是去风险投资公司寻求最后一轮融资，而是去公开市场。&lt;/p&gt;&#xA;&lt;p&gt;到泡沫结束时，没有收益就上市的公司被嘲笑为&amp;quot;概念股&amp;rdquo;，好像投资它们本质上是愚蠢的。但投资概念并不愚蠢；这是风险投资家所做的，其中最好的远非愚蠢。&lt;/p&gt;&#xA;&lt;p&gt;还没有收益的公司股票是有价值的。市场可能需要一段时间来学习如何评估这类公司，就像它在20世纪初必须学习如何评估普通股票一样。但市场擅长解决这类问题。如果市场最终做得比现在的风险投资家更好，我不会感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;早期上市不会是每个公司的正确计划。当然，它可能会造成破坏——分散管理层的注意力，或者让早期员工突然变富。但就像市场将学习如何评估创业公司一样，创业公司将学习如何最小化上市的损害。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-互联网&#34;&gt;2. 互联网&lt;/h2&gt;&#xA;&lt;p&gt;互联网确实是一件大事。这是即使聪明人也被泡沫愚弄的原因之一。显然它将产生巨大影响。足以在两年内使纳斯达克公司的价值翻三倍？事实证明，没有。但在当时很难确定。[1]&lt;/p&gt;&#xA;&lt;p&gt;同样的事情发生在密西西比和南海泡沫期间。驱动它们的是有组织公共金融的发明（南海公司，尽管其名称，实际上是英格兰银行的竞争对手）。从长远来看，这确实是一件大事。&lt;/p&gt;&#xA;&lt;p&gt;认识到一个重要趋势比弄清楚如何从中获利更容易。投资者似乎总是犯的错误是过于字面地理解趋势。由于互联网是新的重要事物，投资者认为公司越互联网化越好。因此出现了Pets.Com这样的笑话。&lt;/p&gt;&#xA;&lt;p&gt;事实上，从大趋势中赚到的大部分钱都是间接赚的。在铁路繁荣期间赚钱最多的不是铁路本身，而是两边的公司，比如卡内基的钢铁厂，它制造铁轨，以及标准石油，它使用铁路将石油运到东海岸，在那里可以运往欧洲。&lt;/p&gt;&#xA;&lt;p&gt;我认为互联网将产生巨大影响，而且到目前为止我们所见到的与即将到来的相比根本不算什么。但大多数赢家只会间接是互联网公司；每有一个谷歌，就会有十个捷蓝航空。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-选择&#34;&gt;3. 选择&lt;/h2&gt;&#xA;&lt;p&gt;为什么互联网会产生巨大影响？一般论点是新的沟通方式总是会产生巨大影响。它们很少发生（直到工业时代只有语言、写作和印刷），但当它们发生时，它们总会引起大轰动。&lt;/p&gt;&#xA;&lt;p&gt;具体论点之一，或者其中之一，是互联网给我们更多选择。在&amp;quot;旧&amp;quot;经济中，向人们展示信息的高成本意味着他们只有狭窄的选择范围。通往消费者的微小、昂贵的管道被恰当地称为&amp;quot;渠道&amp;rdquo;。控制渠道，你就可以按照你的条件喂给他们你想给的东西。而且不仅仅是依赖这一原则的大公司。同样，工会、传统新闻媒体以及艺术和文学机构也是如此。获胜不取决于做好工作，而取决于获得对某些瓶颈的控制。&lt;/p&gt;&#xA;&lt;p&gt;有迹象表明这种情况正在改变。谷歌每月有超过8200万独立用户，年收入约30亿美元。[2] 然而，你见过谷歌广告吗？这里有些事情正在发生。&lt;/p&gt;&#xA;&lt;p&gt;诚然，谷歌是一个极端案例。人们很容易转向新的搜索引擎。尝试一个新的搜索引擎需要很少的努力，不需要花钱，而且很容易看出结果是否更好。所以谷歌不必做广告。在他们这样的业务中，做到最好就足够了。&lt;/p&gt;&#xA;&lt;p&gt;互联网令人兴奋的是它正在将一切朝那个方向转变。如果你想通过制造最好的东西来获胜，困难的部分是开始。最终每个人都会通过口碑了解到你是最好的，但你如何活到那个时候？而正是在这个关键阶段，互联网的影响最大。首先，互联网让任何人几乎零成本找到你。其次，它极大地加速了口碑传播声誉的速度。总之，这意味着在许多领域，规则将是：建造它，他们就会来。制造伟大的东西并把它放在网上。这与上个世纪的获胜秘诀有很大的不同。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-青年&#34;&gt;4. 青年&lt;/h2&gt;&#xA;&lt;p&gt;互联网泡沫方面，新闻媒体似乎最着迷的是一些创业创始人的年轻。这也是一个将持续的趋势。26岁的人之间有巨大的标准差。有些人只适合入门级工作，但有些人已经准备好统治世界，如果他们能找到人处理文书工作。&lt;/p&gt;&#xA;&lt;p&gt;26岁的人可能不太擅长管理人员或处理SEC事务。那些需要经验。但那些也是商品，可以交给某个副手。CEO最重要的素质是他对公司未来的愿景。他们下一步将建造什么？而在那方面，有26岁的人可以与任何人竞争。&lt;/p&gt;&#xA;&lt;p&gt;1970年，公司总裁意味着至少五十多岁的人。如果他有技术人员为他工作，他们被对待就像赛马场：珍贵，但没有权力。但随着技术变得越来越重要，极客的力量也随之增长以反映这一点。现在，CEO有一个聪明人可以咨询技术事务是不够的。 increasingly，他自己必须是那个人。&lt;/p&gt;&#xA;&lt;p&gt;像往常一样，商业 clinging to old forms. 风险投资家似乎仍然想安装一个看起来合法的发言者作为CEO。但 increasingly公司的创始人是真正的权力，而风险投资家安装的灰头发人更像音乐团体的经理而不是将军。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-非正式&#34;&gt;5. 非正式&lt;/h2&gt;&#xA;&lt;p&gt;在纽约，泡沫产生了戏剧性的后果：西装过时了。它们使人显得老。所以在1998年，强大的纽约类型突然穿着开领衬衫、卡其裤和椭圆形金属丝眼镜，就像圣克拉拉的家伙。&lt;/p&gt;&#xA;&lt;p&gt;钟摆摆回了一点，部分是由于服装行业的恐慌反应。但我赌开领衬衫。这不像看起来那么 frivolous 一个问题。衣服很重要，所有极客都能感觉到，尽管他们可能没有意识地意识到。&lt;/p&gt;&#xA;&lt;p&gt;如果你是一个极客，你可以通过问自己如何感觉关于一个让你穿西装打领带去工作的公司来理解衣服有多重要。这个主意听起来很可怕，不是吗？事实上，可怕的程度远远超过穿这种衣服的 mere 不适。一个让程序员穿西装的公司会有一些 deeply 错误的地方。&lt;/p&gt;&#xA;&lt;p&gt;而错误的地方在于一个人的外表表现比一个人的想法质量更重要。这就是形式主义的问题。打扮本身并不那么坏。问题是它绑定的受体：打扮不可避免地成为好想法的替代品。技术上无能的商业类型被称为&amp;quot;西装&amp;quot;并非巧合。&lt;/p&gt;&#xA;&lt;p&gt;极客不只是碰巧穿着非正式。他们做得太一致了。有意识或无意识地，他们穿着非正式作为防止愚蠢的预防措施。&lt;/p&gt;&#xA;&lt;h2 id=&#34;6-极客&#34;&gt;6. 极客&lt;/h2&gt;&#xA;&lt;p&gt;服装只是反形式主义战争中最可见的战场。极客倾向于避免任何形式的 formality。他们对工作头衔，例如，或任何其他权威的附属物不感兴趣。&lt;/p&gt;&#xA;&lt;p&gt;事实上，这几乎就是极客的定义。我最近发现自己在和一个来自好莱坞的人交谈，他正在策划一个关于极客的节目。我认为如果我解释什么是极客会有用。我想出的是：一个不在营销自己上花费任何精力的人。&lt;/p&gt;&#xA;&lt;p&gt;换句话说，极客是专注于实质内容的人。那么极客和技术之间有什么联系？大致是你无法愚弄自然。在技术问题上，你必须得到正确的答案。如果你的软件错误计算了太空探测器的路径，你无法通过说你的代码是爱国的，或前卫的，或人们在非技术领域使用的任何其他遁词来摆脱困境。&lt;/p&gt;&#xA;&lt;p&gt;随着技术在经济中变得越来越重要，极客文化也随之兴起。极客已经比我小时候酷多了。当我在1980年代中期上大学时，&amp;ldquo;极客&amp;quot;仍然是一种侮辱。主修计算机科学的人通常试图隐瞒这一点。现在女性问我她们在哪里可以遇到极客。（脑海中浮现的答案是&amp;quot;Usenix&amp;rdquo;，但这就像从消防栓喝水一样。）&lt;/p&gt;&#xA;&lt;p&gt;我对为什么极客文化变得越来越被接受没有幻想。不是因为人们意识到实质比营销更重要。是因为极客变得富有。但这不会改变。&lt;/p&gt;&#xA;&lt;h2 id=&#34;7-期权&#34;&gt;7. 期权&lt;/h2&gt;&#xA;&lt;p&gt;使极客富有的通常是股票期权。现在有一些动向使公司更难授予期权。如果有一些真正的会计滥用正在进行，当然要纠正它。但不要杀死金鹅。股权是驱动技术创新的燃料。&lt;/p&gt;</description>
    </item>
    <item>
      <title>注意差距</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/gap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/gap/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/gap/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;注意差距&#34;&gt;注意差距&lt;/h1&gt;&#xA;&lt;p&gt;2004年5月&lt;/p&gt;&#xA;&lt;p&gt;当人们对某件事足够在意并努力把它做好时，做得最好的人往往会远远超过其他人。莱昂纳多和二流的同时代人如博尔戈尼奥之间存在巨大差距。你可以看到雷蒙德·钱德勒和普通侦探小说作家之间的同样差距。顶级职业棋手可以与普通俱乐部棋手下万局比赛而不输一局。&lt;/p&gt;&#xA;&lt;p&gt;像下棋、绘画或写小说一样，赚钱是一项非常专业的技能。但出于某种原因，我们以不同的方式对待这项技能。当少数人在下棋或写小说方面超越其他人时，没有人抱怨，但当少数人赚的钱比其他人多时，我们就会看到社论说这是错误的。&lt;/p&gt;&#xA;&lt;p&gt;为什么？这种变化模式似乎与其他任何技能没有什么不同。是什么导致人们在技能是赚钱时反应如此强烈？&lt;/p&gt;&#xA;&lt;p&gt;我认为我们将赚钱视为不同的原因有三个：我们童年时期学到的误导性财富模型；直到最近，大多数财富积累的方式不光彩；以及对收入巨大差异对社会有害的担忧。据我所知，第一个是错误的，第二个已经过时，第三个经证明是错误的。难道在现代社会中，收入差异实际上是健康的标志吗？&lt;/p&gt;&#xA;&lt;h2 id=&#34;财富的爸爸模型&#34;&gt;财富的爸爸模型&lt;/h2&gt;&#xA;&lt;p&gt;我五岁时认为电是由插座创造的。我没有意识到外面有发电站在发电。同样，大多数孩子没有意识到财富是必须创造的东西。它似乎是从父母那里流出来的东西。&lt;/p&gt;&#xA;&lt;p&gt;由于遇到财富的环境，孩子们往往会误解财富。他们把财富和金钱混淆。他们认为财富的数量是固定的。他们认为财富是由权威机构分配的（因此应该平均分配），而不是必须创造的东西（可能是不平等地创造）。&lt;/p&gt;&#xA;&lt;p&gt;事实上，财富不是金钱。金钱只是一种方便的交易方式，将一种形式的财富换成另一种。财富是潜在的东西——我们购买的商品和服务。当你旅行到一个富有或贫穷的国家时，你不必查看人们的银行账户来判断你在哪种国家。你可以看到财富——在建筑和街道中，在人们的衣服和健康中。&lt;/p&gt;&#xA;&lt;p&gt;财富从哪里来？人们创造它。当大多数人生活在农场时，这更容易理解，他们用自己的双手制造许多他们想要的东西。然后你可以在房屋、畜群和谷仓中看到每个家庭创造的财富。当时也很明显，世界的财富不是像派片一样必须分享的固定数量。如果你想要更多财富，你可以创造它。&lt;/p&gt;&#xA;&lt;p&gt;今天仍然如此，尽管很少有人直接为自己创造财富（除了一些残余的家务劳动）。我们大多为其他人创造财富以换取金钱，然后用这些金钱换取我们想要的财富形式。[1]&lt;/p&gt;&#xA;&lt;p&gt;因为孩子们无法创造财富，所以他们拥有的一切都必须被给予他们。当财富是被给予的东西时，当然它似乎应该被平均分配。[2] 在大多数家庭中确实如此。孩子们确保这一点。当一个兄弟姐妹得到比另一个多时，他们会哭喊&amp;quot;不公平&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;在现实世界中，你不能一直靠父母生活。如果你想要什么，你要么必须制造它，要么为别人做同等价值的事情，以便让他们给你足够的钱来购买它。在现实世界中，财富（除了像小偷和投机者这样的少数专家）是你必须创造的东西，而不是爸爸分配的东西。而且由于创造财富的能力和欲望因人而异，财富的创造并不平等。&lt;/p&gt;&#xA;&lt;p&gt;你通过做或制造人们想要的东西来获得报酬，那些赚更多钱的人通常只是更擅长做人们想要的事情。顶级演员比B级演员赚的钱多得多。B级演员可能几乎同样有魅力，但当人们去剧院查看上映的电影列表时，他们想要大牌明星拥有的那种额外的魅力。&lt;/p&gt;&#xA;&lt;p&gt;做人们想要的事情当然不是赚钱的唯一方法。你也可以抢劫银行，或索取贿赂，或建立垄断。这些伎俩造成了财富的一些变化，实际上也造成了一些最大的个人财富，但它们不是收入变化的根本原因。收入变化的根本原因，如奥卡姆剃刀所示，与所有其他人类技能变化的根本原因相同。&lt;/p&gt;&#xA;&lt;p&gt;在美国，大型上市公司的CEO的收入大约是普通人的100倍。[3] 篮球运动员的收入大约是128倍，棒球运动员是72倍。社论以惊恐的语气引用这种统计数据。但我毫不怀疑一个人可能比另一个人多100倍的生产力。在古罗马，奴隶的价格根据他们的技能相差50倍。[4] 这还没有考虑到动机，或者你可以从现代技术获得的额外生产力杠杆。&lt;/p&gt;&#xA;&lt;p&gt;关于运动员或CEO薪水的社论让我想起早期的基督教作家，他们从第一原则争论地球是否是圆的，而他们可以走出去查看。[5] 某人的工作价值多少不是一个政策问题。这是市场已经决定的东西。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;他们真的值我们100个人吗？&amp;ldquo;社论作者问。取决于你所说的价值是什么意思。如果你的意思是人们会为他们的技能付多少钱，答案显然是肯定的。&lt;/p&gt;&#xA;&lt;p&gt;一些CEO的收入反映了一些不当行为。但是不是还有其他人的收入真正反映了他们创造的财富？史蒂夫·乔布斯拯救了一个处于末期衰落的公司。而且不仅仅是转型专家那样通过削减成本；他必须决定苹果的下一个产品应该是什么。几乎没有人能够做到这一点。而且无论CEO的情况如何，很难看出任何人如何能够争辩说职业篮球运动员的薪水不反映供求关系。&lt;/p&gt;&#xA;&lt;p&gt;原则上，一个人真的可能比另一个人创造更多的财富，这似乎不太可能。这个谜团的关键是重新审视那个问题，他们真的值我们100个人吗？篮球队会用他们的一个球员换取100个随机的人吗？如果你用100个随机的人组成的委员会取代史蒂夫·乔布斯，苹果的下一个产品会是什么样子？[6] 这些事情不是线性扩展的。也许CEO或职业运动员只有普通人的十倍（无论这意味着什么）技能和决心。但它集中在一个个体身上，这就是全部区别。&lt;/p&gt;&#xA;&lt;p&gt;当说一种工作报酬过高而另一种报酬过低时，我们到底在说什么？在自由市场中，价格由买家想要什么决定。人们比诗歌更喜欢棒球，所以棒球运动员比诗人赚得多。因此，说某种工作报酬过低就等同于说人们想要错误的东西。&lt;/p&gt;&#xA;&lt;p&gt;当然，人们想要错误的东西。对此感到惊讶似乎很奇怪。说某种工作报酬过薄是不公正的，这似乎更奇怪。[7] 那么你就是在说人们想要错误的东西是不公正的。人们更喜欢真人秀和玉米狗而不是莎士比亚和蒸蔬菜，这是可悲的，但不公正吗？这似乎像说蓝色是重的，或者说向上是圆的。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;不公正&amp;quot;这个词在这里的出现是爸爸模型 unmistakable 光谱特征。否则这个想法为什么会出现在这个奇怪的语境中？而如果说话者仍然在爸爸模型下运作，将财富视为从共同来源流出并必须分享的东西，而不是通过做其他人想要的事情产生的东西，这正是在注意到一些人比其他人赚得多时你会得到的。&lt;/p&gt;&#xA;&lt;p&gt;当我们谈论&amp;quot;收入不平等分配&amp;quot;时，我们也应该问，这些收入来自哪里？[8] 谁创造了它所代表的财富？因为在收入仅仅根据人们创造多少财富而变化的程度上，分配可能是不平等的，但几乎不是不公正的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;偷窃它&#34;&gt;偷窃它&lt;/h2&gt;&#xA;&lt;p&gt;我们倾向于发现巨大财富差距令人担忧的第二个原因是，在人类历史的大部分时间里，积累财富的通常方式是偷窃它：在牧业社会中通过掠夺牲畜；在农业社会中通过在战争时期夺取他人的财产，在和平时期向他们征税。&lt;/p&gt;&#xA;&lt;p&gt;在冲突中，获胜一方会收到从失败一方没收的财产。在1060年代的英格兰，当征服者威廉将 defeated 盎格鲁-撒克逊贵族的财产分配给他的追随者时，冲突是军事的。到1530年代，当亨利八世将修道院的财产分配给他的追随者时，这主要是政治性的。[9] 但原则是相同的。确实，同样的原则现在在津巴布韦也在起作用。&lt;/p&gt;&#xA;&lt;p&gt;在更有组织的社会，如中国，统治者和他的官员使用征税而不是没收。但在这里我们也看到同样的原则：致富的方式不是创造财富，而是服务于一个足够强大可以占有财富的统治者。&lt;/p&gt;&#xA;&lt;p&gt;随着中产阶级的兴起，这开始在欧洲改变。现在我们认为中产阶级是既不富也不穷的人，但最初他们是一个独特的群体。在封建社会，只有两个阶级：战士贵族和为他们工作的农奴。中产阶级是一个新的第三群体，他们住在城镇，通过制造业和贸易维持生计。&lt;/p&gt;&#xA;&lt;p&gt;从十世纪和十一世纪开始，小贵族和前农奴在城镇中联合起来，这些城镇逐渐变得足够强大，可以无视当地的封建领主。[10] 像农奴一样，中产阶级主要通过创造财富谋生。（在热那亚和比萨这样的港口城市，他们也从事海盗活动。）但与农奴不同，他们有创造大量财富的动力。农奴创造的任何财富都属于他的主人。制造比你能够隐藏的更多的财富没有多大意义。而城镇居民的独立性使他们能够保留他们创造的任何财富。&lt;/p&gt;&#xA;&lt;p&gt;一旦通过创造财富致富成为可能，整个社会开始变得非常富裕。我们拥有的一切几乎都是由中产阶级创造的。确实，在工业社会中，其他两个阶级已经有效地消失，他们的名字被赋予了中产阶级的两端。（在词的原始意义上，比尔·盖茨是中产阶级。）&lt;/p&gt;&#xA;&lt;p&gt;但直到工业革命，财富创造才明确地取代腐败成为致富的最佳方式。至少在英格兰，只有当有其他、更快的致富方式开始出现时，腐败才变得不合时尚（并且实际上才开始被称为&amp;quot;腐败&amp;rdquo;）。&lt;/p&gt;&#xA;&lt;p&gt;十七世纪的英格兰很像今天的第三世界，政府职位是公认的致富途径。那个时期的巨大财富更多地来源于我们现在称之为腐败的东西，而不是商业。[11] 到十九世纪，这种情况发生了变化。贿赂仍然存在，就像到处都有一样，但政治那时已经留给了那些更多地由虚荣心而不是贪婪驱动的人。技术使得创造财富比偷窃财富更快。十九世纪富人的原型不是朝臣，而是工业家。&lt;/p&gt;&#xA;&lt;p&gt;随着中产阶级的兴起，财富不再是零和游戏。乔布斯和沃兹尼亚克不必让我们变穷来使自己变富。恰恰相反：他们创造了使我们的生活在物质上更丰富的东西。他们必须这样做，否则我们不会为他们付钱。&lt;/p&gt;&#xA;&lt;p&gt;但由于世界历史的大部分时间致富的主要途径是偷窃它，我们倾向于怀疑富人。理想主义的大学生发现他们无意识保存的童年财富模型得到了过去著名作家的证实。这是错误与过时的结合。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;每一笔巨大财富背后，都有一桩犯罪，&amp;ldquo;巴尔扎克写道。但他没有。他实际上说的是，没有明显原因的巨大财富可能是由于执行得足够好而被遗忘的犯罪。如果我们谈论的是1000年的欧洲，或者今天大部分第三世界，标准的错误引用就会完全正确。但巴尔扎克生活在十九世纪的法国，那里的工业革命已经进展顺利。他知道你可以在不偷窃的情况下致富。毕竟，他自己作为一个受欢迎的小说家就是这样做的。[12]&lt;/p&gt;&#xA;&lt;p&gt;只有少数国家（绝非巧合，也是那些最富有的国家）达到了这个阶段。在大多数国家，腐败仍然占上风。在大多数国家，致富的最快途径是偷窃它。因此当我们在一个富国看到收入差异增加时，有一种担忧它正在滑向成为另一个委内瑞拉的倾向。我认为相反的情况正在发生。我认为你看到的是一个领先委内瑞拉整整一步的国家。&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术的杠杆&#34;&gt;技术的杠杆&lt;/h2&gt;&#xA;&lt;p&gt;技术会增加贫富差距吗？它肯定会增加生产者和不生产者之间的差距。这就是技术的全部意义所在。有了拖拉机，一个精力充沛的农民一天可以耕种的土地是他用一组马可以耕种的六倍。但前提是他掌握了一种新的农业。&lt;/p&gt;&#xA;&lt;p&gt;我在自己的时代亲眼看到技术的杠杆作用明显增长。在高中时，我通过修剪草坪和在巴斯金-罗宾斯舀冰淇淋来赚钱。这是当时唯一可用的那种工作。现在高中生可以编写软件或设计网站。但只有一些人会；其他人仍然会舀冰淇淋。&lt;/p&gt;&#xA;&lt;p&gt;我非常清楚地记得1985年改进的技术使我有可能购买自己的电脑。几个月内，我使用它作为自由程序员来赚钱。几年前，我不能做到这一点。几年前，没有自由程序员这样的东西。但苹果创造了财富，以强大、廉价的计算机形式，程序员立即开始使用它来创造更多。&lt;/p&gt;&#xA;&lt;p&gt;正如这个例子所暗示的，技术提高我们生产能力的速度可能是指数级的，而不是线性的。所以我们应该预期随着时间推移，个人生产力的变化会不断增加。这会增加贫富差距吗？取决于你指的是哪个差距。&lt;/p&gt;&#xA;&lt;p&gt;技术应该增加收入差距，但它似乎会减少其他差距。一百年前，富人的生活与普通人不同。他们住在满是仆人的房子里，穿着精心制作的不舒服的衣服，乘坐由需要自己的房子和仆人的马队拉的马车旅行。现在，由于技术，富人的生活更像普通人。&lt;/p&gt;&#xA;&lt;p&gt;汽车就是为什么的一个好例子。有可能购买价值数十万美元的昂贵手工汽车。但没有多大意义。公司通过制造大量普通汽车比制造少量昂贵汽车赚更多钱。因此，制造大批量汽车的公司可以在其设计上花费更多。如果你购买定制汽车，总会有些东西在坏。现在购买定制汽车的唯一目的是广告你能买得起。&lt;/p&gt;&#xA;&lt;p&gt;或者考虑手表。五十年前，花很多钱买手表你可以获得更好的性能。当手表有机芯时，昂贵的手表走时更准。现在不再是这样了。自从石英机芯发明以来，普通的天美时表比价值数十万美元的百达翡丽更准确。[13] 确实，像昂贵的汽车一样，如果你决心花很多钱买手表，你必须忍受一些不便：除了走时不准，机械手表还必须上弦。&lt;/p&gt;&#xA;&lt;p&gt;技术唯一不能便宜化的是品牌。这正是为什么我们越来越多地听到它的原因。品牌是随着富人和穷人之间的实质性差异蒸发而留下的残留物。但你东西上的标签是什么比起拥有它和不拥有它来说是小得多的事情。在1900年，如果你保持一辆马车，没有人问它是哪一年或什么品牌。如果你有一辆，你就是富人。如果你不富有，你就坐公共汽车或步行。现在即使是最贫穷的美国人也开车汽车，只有因为我们被广告训练得如此好，我们甚至能够识别特别昂贵的。[14]&lt;/p&gt;&#xA;&lt;p&gt;同样的模式在一个又一个行业中上演。如果对某物有足够的需求，技术将使它足够便宜以大量销售，大批量生产的版本即使不是更好，至少更方便。[15] 富人最喜欢的没有比便利更的东西了。我认识的富人驾驶同样的汽车，穿同样的衣服，有同样类型的家具，吃与我其他朋友同样的食物。他们的房子在不同的社区，或者如果在同一社区，大小不同，但在里面生活是相似的。房子使用相同的建筑技术建造，包含几乎相同的物品。做昂贵和定制的事情不方便。&lt;/p&gt;&#xA;&lt;p&gt;富人也更像其他人一样度过他们的时间。伯特里·伍斯特似乎早已消失。现在，大多数足够富有不工作的人无论如何都工作。不仅仅是社会压力让他们这样做；无所事事是孤独和令人沮丧的。&lt;/p&gt;&#xA;&lt;p&gt;我们也没有一百年前的社会区别。那个时期的小说和礼仪手册现在读起来像描述一些奇怪的部落社会。&amp;ldquo;关于友谊的延续&amp;hellip;&amp;ldquo;比顿的《家庭管理手册》(1880)暗示，&amp;ldquo;在某些情况下，主妇在承担家庭责任时可能有必要放弃在她生活早期开始的许多友谊。&amp;ldquo;嫁给富人的女人被期望放弃没有的朋友。如果你今天那样做，你似乎是个野蛮人。你也会有一个非常无聊的生活。人们仍然倾向于某种程度的自我隔离，但更多地是基于教育而不是财富。[16]&lt;/p&gt;&#xA;&lt;p&gt;在物质和社会方面，技术似乎正在缩小富人和穷人之间的差距，而不是扩大它。如果列宁在雅虎、英特尔或思科这样的公司的办公室走动，他会认为共产主义已经获胜。每个人都穿着同样的衣服，有同样类型的办公室（或者更确切地说，隔间）和同样的家具，用名字而不是尊称称呼对方。一切似乎完全如他所预测的那样，直到他查看他们的银行账户。哎呀。&lt;/p&gt;&#xA;&lt;p&gt;如果技术增加那个差距是个问题吗？到目前为止似乎不是。虽然它增加了收入差距，但它似乎减少了大多数其他差距。&lt;/p&gt;</description>
    </item>
    <item>
      <title>猛烈的极客</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/fn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/fn/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/fn/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;猛烈的极客&#34;&gt;猛烈的极客&lt;/h1&gt;&#xA;&lt;p&gt;2021年5月&lt;/p&gt;&#xA;&lt;p&gt;大多数人认为极客是安静、谦逊的人。在普通的社交场合中他们确实如此——就像明星四分卫发现自己身处物理学研讨会中一样安静谦逊。原因也是一样的：他们是离水的鱼。但极客表面上的谦逊是一种错觉，这是因为当非极客观察他们时，通常是在普通的社交场合。事实上，一些极客相当猛烈。&lt;/p&gt;&#xA;&lt;p&gt;猛烈的极客是一个小而有趣的群体。他们通常极具竞争性——我想说，比极具竞争性的非极客还要更具竞争性。竞争对他们来说更个人化。部分原因可能是他们情感上不够成熟，无法与竞争保持距离，但也因为他们参与的竞争种类中随机性较少，因此他们更有理由将结果个人化。&lt;/p&gt;&#xA;&lt;p&gt;猛烈的极客也往往有些过于自信，尤其是在年轻时。看起来对自己的能力产生误判可能是个缺点，但经验表明并非如此。在一定程度上，自信是自我实现的预言。&lt;/p&gt;&#xA;&lt;p&gt;你在大多数猛烈极客身上发现的另一个品质是智慧。不是所有极客都聪明，但猛烈的极客至少都是中等聪明的。如果不是这样，他们就不会有成为猛烈极客的信心。[1]&lt;/p&gt;&#xA;&lt;p&gt;极客特质和独立思维之间也有天然的联系。如果不有些社交笨拙，就很难有独立思维，因为传统信念经常是错误的，或者至少是任意的。任何既有独立思维又有雄心的人都不会浪费精力去适应。而猛烈极客的独立思维显然是积极型而非消极型的：他们会被规则惹恼，而不是梦幻般地 unaware of them.&lt;/p&gt;&#xA;&lt;p&gt;我不太确定为什么猛烈极客缺乏耐心，但大多数人似乎都是。你首先在对话中注意到这一点，他们倾向于打断你。这只是令人讨厌的，但在更有前途的猛烈极客中，这与对解决问题更深层次的不耐心有关。也许猛烈极客的竞争性和不耐心不是分离的品质，而是单一内在驱动力的两种表现。&lt;/p&gt;&#xA;&lt;p&gt;当你以足够数量结合所有这些品质时，结果相当可怕。猛烈极客行动中最生动的例子可能是詹姆斯·沃森的《双螺旋》。书的第一句话是&amp;quot;我从未见过弗朗西斯·克里克保持谦虚的态度&amp;quot;，他接着描绘的克里克形象是典型的猛烈极客：聪明、社交笨拙、竞争性强、独立思维、过于自信。但他隐含地描绘的自己也是如此。事实上，他缺乏社交意识使两幅画像更加真实，因为他直言不讳地陈述了各种圆滑的人会隐藏的意见和动机。而且从故事中可以清楚地看出，克里克和沃森的猛烈极客特质对他们的成功至关重要。他们的独立思维使他们考虑大多数人忽略的方法，他们的过度自信让他们从事只理解一半的问题（他们实际上被一位著名的内部人士描述为&amp;quot;小丑&amp;quot;），而他们的不耐心和竞争性使他们比其他两个小组抢先找到了答案，否则那些小组会在下一年，如果不是下几个月的话找到答案。[2]&lt;/p&gt;&#xA;&lt;p&gt;可能存在猛烈极客这个想法对许多普通人来说是陌生的，甚至对一些年轻的极客也是如此。特别是在早期，极客在普通社交场合花费太多时间，而做真正工作的时间太少，以至于他们获得的关于自己笨拙的证据比关于自己力量的证据多得多。因此，有些人读到对猛烈极客的描述时会意识到&amp;quot;嗯，那是我&amp;quot;。而我现在要转向的就是你，年轻的猛烈极客。&lt;/p&gt;&#xA;&lt;p&gt;我有一些好消息，也有一些坏消息。好消息是，你的猛烈特质将在解决难题方面给你很大帮助。不仅仅是极客传统上解决的科学和技术问题。随着世界进步，通过获得正确答案而赢得胜利的事情数量增加了。最近变富成为了其中之一：美国最富有的8个人中有7个现在是猛烈的极客。&lt;/p&gt;&#xA;&lt;p&gt;事实上，在商业中成为猛烈极客可能比在极客传统学术领域更有帮助。在那里，猛烈似乎是可选的。例如，达尔文似乎并不特别猛烈。而在没有猛烈特质的情况下，不可能成为超过一定规模公司的CEO，所以既然极客可以在商业中获胜，猛烈的极客将越来越垄断真正的大成功。&lt;/p&gt;&#xA;&lt;p&gt;坏消息是，如果不加以运用，你的猛烈特质将变成苦涩，你将成为知识游乐场恶霸：暴躁的系统管理员、论坛喷子、黑粉、新思想的扼杀者。&lt;/p&gt;&#xA;&lt;p&gt;如何避免这种命运？从事雄心勃勃的项目。如果你成功，它会带来一种中和苦涩的满足感。但你不需要成功就能感受到这一点；仅仅从事困难的项目就给大多数猛烈极客某种满足感。而对那些没有感觉的人，至少让他们忙碌。[3]&lt;/p&gt;&#xA;&lt;p&gt;另一个解决方案可能是以某种方式关闭你的猛烈特质，通过致力于冥想或心理治疗之类的事情。也许这对某些人来说是正确的答案。我不知道。但这对我来说似乎不是最优解决方案。如果你得到一把锋利的刀，在我看来最好是使用它，而不是为了割伤自己而钝化它的边缘。&lt;/p&gt;&#xA;&lt;p&gt;如果你确实选择雄心勃勃的路线，你将有顺风推动你。从来没有比现在更好的成为极客的时机。在过去的一个世纪里，我们看到了权力从交易者到技术人员的持续转移——从有魅力到有能力的转移——我没有看到任何会结束这种转移的迹象。至少不会直到极客自己通过带来技术奇点而结束它。&lt;/p&gt;&#xA;&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;&#xA;&lt;p&gt;[1] 成为极客就是社交笨拙，有两种不同的方式：玩和每个人一样的游戏，但玩得很差，或者玩不同的游戏。聪明的极客是后一种类型。&lt;/p&gt;&#xA;&lt;p&gt;[2] 使猛烈极客如此有效的品质也可能使他们非常令人讨厌。猛烈的极客最好记住这一点，并且（a）尽量控制它，（b）寻找那些获得正确答案比保持社会和谐更重要的组织和工作类型。实际上这意味着在困难问题上工作的小组。幸运的是，这是最有趣的环境类型。&lt;/p&gt;&#xA;&lt;p&gt;[3] 如果成功中和了苦涩，为什么有些至少中等成功的人仍然相当苦涩？因为人们潜在的苦涩程度取决于他们性格中自然的苦涩程度和他们的雄心程度：天生非常苦涩的人在成功中和了其中一些后仍然剩下很多，而非常有雄心的人需要比例上更多的成功来满足那种雄心。&lt;/p&gt;&#xA;&lt;p&gt;所以最坏的情况是某人既天生苦涩又极具雄心，却只是中等成功。&lt;/p&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克威尔、史蒂夫·布兰克、帕特里克·克里森、杰西卡·利文斯顿、阿姆贾德·马萨德和罗伯特·莫里斯阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>现在人们如何变富</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/richnow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/richnow/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/richnow/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;现在人们如何变富&#34;&gt;现在人们如何变富&lt;/h1&gt;&#xA;&lt;p&gt;2021年4月&lt;/p&gt;&#xA;&lt;p&gt;从1982年开始，《福布斯》杂志每年都会发布美国最富有人士名单。如果我们将1982年的100位最富有人士与2020年的100位最富有人士进行比较，我们会注意到一些巨大差异。&lt;/p&gt;&#xA;&lt;p&gt;1982年，最常见的财富来源是继承。在最富有的100人中，有60人是从祖先那里继承的。光是杜邦家族的继承人就有10位。到2020年，继承人的数量已经减半，仅占最大100笔财富中的27笔。&lt;/p&gt;&#xA;&lt;p&gt;为什么继承人的比例会下降？不是因为继承税增加了。事实上，在这段时间内，继承税显著减少。继承人比例下降的原因不是继承大财富的人少了，而是靠自己创造财富的人多了。&lt;/p&gt;&#xA;&lt;p&gt;人们如何创造这些新财富？大约3/4是通过创办公司，1/4是通过投资。在2020年的73笔新财富中，56笔来自创始人或早期员工的股权（52位创始人，2位早期员工，和2位创始人妻子），17笔来自管理投资基金。&lt;/p&gt;&#xA;&lt;p&gt;1982年的100位最富有的美国人中没有基金经理。对冲基金和私募股权公司在1982年就存在，但它们的创始人都没有足够富裕进入前100名。有两件事发生了变化：基金经理发现了产生高回报的新方法，并且更多投资者愿意信任他们并把钱交给他们。[1]&lt;/p&gt;&#xA;&lt;p&gt;但现在新财富的主要来源是创办公司，当你看数据时，你会发现那里也有很大变化。人们现在通过创办公司比1982年时获得更多财富，因为这些公司做的事情不同。&lt;/p&gt;&#xA;&lt;p&gt;1982年，有两个主要的财富来源：石油和房地产。在1982年的40笔新财富中，至少24笔主要是由于石油或房地产。现在只有少数是：在2020年的73笔新财富中，4笔是由于房地产，只有2笔是由于石油。&lt;/p&gt;&#xA;&lt;p&gt;到2020年，最大的新财富来源是所谓的&amp;quot;科技&amp;quot;公司。在73笔新财富中，大约30笔来自这类公司。这些在最富有的人中特别常见：2020年前10名财富中有8笔是这类新财富。&lt;/p&gt;&#xA;&lt;p&gt;可以说，把科技作为一个类别有点误导。亚马逊真的不是零售商，特斯拉也不是汽车制造商吗？既是又不是。也许在50年后，当我们称之为科技的东西被认为是理所当然的，把这两家企业放在同一类别可能就不合适了。但至少在目前，它们确实有某种共同点使它们与众不同。哪个零售商会启动AWS？哪个汽车制造商是由同时拥有火箭公司的人经营的？&lt;/p&gt;&#xA;&lt;p&gt;前100名财富背后的科技公司也形成了一个差异化的群体，因为它们都是风险投资家愿意投资的公司，而其他大部分都不是。这样做是有原因的：这些大多是依靠更好的技术获胜的公司，而不仅仅是有一个真正有动力和擅长做交易的CEO。&lt;/p&gt;&#xA;&lt;p&gt;在某种程度上，科技公司的崛起代表了一种质的变化。1982年《福布斯》400富豪榜中的石油和房地产大亨们不是通过更好的技术获胜的。他们是通过真正有动力和擅长做交易而获胜的。[2] 事实上，这种致富方式如此古老，甚至早于工业革命。在16和17世纪，在欧洲王室（名义上）服务中致富的朝臣们通常也是真正有动力和擅长做交易的。&lt;/p&gt;&#xA;&lt;p&gt;那些只看基尼系数而不深入了解的人回顾1982年的世界，把它当作美好的旧时光，因为那时致富的人没有现在那么富有。但如果你深入了解他们是如何致富的，旧时光看起来就不那么好了。在1982年，最富有的100人中有84%是通过继承、开采自然资源或做房地产交易致富的。这真的比最富有的人通过创办科技公司致富的世界好吗？&lt;/p&gt;&#xA;&lt;p&gt;为什么人们创办的新公司比以前多得多，而且他们从中致富这么多？第一个问题的答案，奇怪的是，这个问题本身表述不当。我们不应该问人们为什么要创办公司，而是问为什么他们又开始创办公司了。[3]&lt;/p&gt;&#xA;&lt;p&gt;1892年，《纽约先驱论坛报》编制了美国所有百万富翁的名单。他们找到了4047位。那时有多少人是继承财富的？只有大约20%，比今天继承人的比例还少。当你调查新财富的来源时，1892年看起来更像今天。休·罗科夫发现&amp;quot;许多最富有的人&amp;hellip;&amp;hellip;从大规模生产的新技术中获得了最初的优势&amp;quot;。[4]&lt;/p&gt;&#xA;&lt;p&gt;所以这里的异常不是2020年，而是1982年。真正的问题是为什么1982年很少有人通过创办公司致富。答案是，即使在《先驱论坛报》名单编制时，一股整合浪潮正在席卷美国经济。在19世纪末和20世纪初，像J.P.摩根这样的金融家将数千家较小的公司合并成几家具有巨大规模经济优势的巨型公司。正如迈克尔·林德所写，到第二次世界大战结束时，&amp;ldquo;经济的主要部门要么被组织成政府支持的卡特尔，要么被少数寡头垄断企业主导。&amp;quot;[5]&lt;/p&gt;&#xA;&lt;p&gt;1960年，现在创办创业公司的大多数人会去这些公司工作。在1890年和2020年，你可以通过创办自己的公司致富，但在1960年，这真的不是一个可行的选择。你无法打破寡头垄断来接触市场。所以1960年的有声望的道路不是创办自己的公司，而是在现有公司的企业阶梯上向上爬。[6]&lt;/p&gt;&#xA;&lt;p&gt;让每个人都成为公司员工减少了经济不平等（以及每一种其他变化），但如果你把20世纪中期作为正常的模型，在这方面你会得到一个非常误导的模型。J.P.摩根的经济结果只是一个阶段，从1970年代开始，它开始解体。&lt;/p&gt;&#xA;&lt;p&gt;为什么会解体？部分原因是衰老。那些在1930年看起来是规模和效率典范的大公司，到1970年已经变得松散和臃肿。到1970年，经济的刚性结构充满了各种群体建造的舒适巢穴，以保护自己免受市场力量影响。在卡特政府期间，联邦政府意识到有些不对劲，并开始在一个称为&amp;quot;放松管制&amp;quot;的过程中，废除支持寡头垄断的政策。&lt;/p&gt;&#xA;&lt;p&gt;但是，解体J.P.摩根经济的不仅仅是内部衰退。还有来自外部的压力，以新技术的形式，特别是微电子学。设想所发生的事情的最好方式是想象一个顶部有一层冰的池塘。最初，从底部到表面的唯一途径是绕过边缘。但随着冰层变弱，你开始能够直接从中部突破。&lt;/p&gt;&#xA;&lt;p&gt;池塘的边缘是纯粹的科技：那些实际上自称从事电子或软件业务的公司。当你在1990年使用&amp;quot;创业公司&amp;quot;这个词时，你指的就是这个意思。但现在创业公司正在直接从冰层中部突破，取代像零售商、电视网络和汽车公司这样的现有企业。[7]&lt;/p&gt;&#xA;&lt;p&gt;但是，尽管J.P.摩根经济的解体在技术意义上创造了一个新世界，但在社会意义上，这是回归常态。如果你只追溯到20世纪中期，人们通过创办自己的公司致富似乎是一个近期现象。但如果你看得更远，你会意识到这实际上是默认情况。所以我们在未来应该期望的更多相同情况。事实上，我们应该期望创始人的数量和财富都会增长，因为每十年创办创业公司都变得更容易。&lt;/p&gt;&#xA;&lt;p&gt;创办创业公司变得更容易的部分原因是社会。社会正在（重新）接受这个概念。如果你现在创办一个，你的父母不会像一代前那样惊慌，关于如何做的知识也广泛得多。但现在创办创业公司更容易的主要原因是它更便宜。技术已经降低了构建产品和获取客户的成本。&lt;/p&gt;&#xA;&lt;p&gt;创办创业公司成本的降低反过来改变了创始人和投资者之间的力量平衡。过去，创办创业公司意味着建造工厂，你需要投资者的许可才能做。但现在投资者比创始人更需要创始人，加上可用风险资本数量的增加，这推高了估值。[8]&lt;/p&gt;&#xA;&lt;p&gt;因此，创办创业公司成本的降低通过两种方式增加了富人的数量：这意味着更多的人创办它们，而且那些能够以更好条件筹集资金的人。&lt;/p&gt;&#xA;&lt;p&gt;但还有第三个因素在起作用：公司本身更有价值，因为新成立的公司比过去增长得更快。技术不仅使构建和分销东西变得更便宜，而且也变得更快。&lt;/p&gt;&#xA;&lt;p&gt;这个趋势已经运行了很长时间。IBM，成立于1896年，用了45年才达到10亿美元（2020年价值）的收入。惠普，成立于1939年，用了25年。微软，成立于1975年，用了13年。现在快速增长公司的标准是7或8年。[9]&lt;/p&gt;&#xA;&lt;p&gt;快速增长对创始人股票的价值有双重影响。公司的价值是其收入和增长率的函数。所以如果公司增长更快，你不仅更早达到10亿美元收入，而且当达到那个点时，公司比如果增长较慢时更有价值。&lt;/p&gt;&#xA;&lt;p&gt;这就是为什么创始人现在有时如此年轻就如此富有。创办创业公司的低初始成本意味着创始人可以年轻开始，而今天公司的快速增长意味着如果他们成功，几年后他们可能会令人惊讶地富有。&lt;/p&gt;&#xA;&lt;p&gt;现在创办和发展公司比以往任何时候都更容易。这意味着更多的人创办它们，那些这样做的人从投资者那里获得更好的条件，由此产生的公司变得更有价值。一旦你理解了这些机制是如何运作的，以及创业公司在20世纪大部分时间被压制，你就不必求助于一些模糊的里根时期国家右转来解释为什么美国的基尼系数在增加。当然基尼系数在增加。有更多的人创办更有价值的公司，怎么可能不增加呢？&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 投资公司在1978年劳工部的一项监管变更允许养老基金投资于它们后迅速增长，但这种增长的影响在1982年的前100名财富中还没有显现出来。&lt;/p&gt;&#xA;&lt;p&gt;[2] 乔治·米切尔值得一提作为一个例外。尽管他确实有动力且擅长做交易，他还是第一个想出如何使用水力压裂从页岩中获取天然气的人。&lt;/p&gt;&#xA;&lt;p&gt;[3] 当我说人们创办更多公司时，我指的是那种旨在变得非常大的公司。实际上，在过去几十年中，新公司的总数有所下降。但绝大多数公司是小型零售和服务企业。所以关于新企业数量减少的统计数据意味着人们开办的鞋店和理发店减少了。&lt;/p&gt;&#xA;&lt;p&gt;当人们看到一个标记为&amp;quot;创业公司&amp;quot;的图表在下降时，他们有时会感到困惑，因为&amp;quot;创业公司&amp;quot;这个词有两种意思：（1）创立公司，（2）一种设计为快速增长的特殊类型公司。统计数据指的是第一种意思的创业公司，而不是第二种。&lt;/p&gt;&#xA;&lt;p&gt;[4] 罗科夫，休。&amp;ldquo;镀金时代的巨大财富。&amp;ldquo;NBER工作文件14555，2008年。&lt;/p&gt;&#xA;&lt;p&gt;[5] 林德，迈克尔。《应许之地》。哈珀柯林斯，2012年。&lt;/p&gt;&#xA;&lt;p&gt;20世纪中期的高税率也可能阻止了人们创办自己的公司。创办自己的公司是有风险的，当风险没有得到回报时，人们选择安全。&lt;/p&gt;&#xA;&lt;p&gt;但这不仅仅是因果关系。20世纪中期的寡头垄断和高税率是一体的。较低的税收不仅仅是企业家精神的原因，也是结果：20世纪中期通过房地产和石油勘探致富的人游说并获得巨大的税收漏洞，使他们的有效税率低得多，并且如果通过新技术发展大公司更常见，做这些事的人可能也会为自己的漏洞游说。&lt;/p&gt;&#xA;&lt;p&gt;[6] 这就是为什么20世纪中期确实致富的人经常从石油勘探或房地产致富的原因。那是经济中不易于整合的两个大领域。&lt;/p&gt;&#xA;&lt;p&gt;[7] 纯科技公司曾经被称为&amp;quot;高科技&amp;quot;创业公司。但现在创业公司可以从冰层中部突破，我们不需要为边缘起一个单独的名字，而&amp;quot;高科技&amp;quot;这个词具有明显的复古声音。&lt;/p&gt;&#xA;&lt;p&gt;[8] 较高的估值意味着你要么出售较少的股票来获得一定数量的钱，要么为一定数量的股票获得更多的钱。典型的创业公司两者都会做一些。显然，如果你保留更多股票，你会更富有，但如果你筹集更多钱，你也应该更富有，因为（a）它应该使公司更成功，（b）你应该能够在下一轮之前持续更长时间，或者甚至不需要一轮。注意所有这些&amp;quot;应该&amp;rdquo;。在实践中，很多钱从这些漏洞中溜走。&lt;/p&gt;&#xA;&lt;p&gt;似乎现在创业公司筹集的大额融资轮与创办它变得更便宜的说法相矛盾。但这里没有矛盾；筹集最多资金的创业公司是那些出于选择而这样做的人，目的是增长更快，而不是那些因为需要钱生存而这样做的人。没有什么比不需要钱更能让人们把钱给你了。&lt;/p&gt;&#xA;&lt;p&gt;你可能会想，在近两个世纪里一直站在劳动一方与资本斗争后，极左会对劳动最终胜利感到高兴。但他们似乎没有人感到高兴。你几乎可以听到他们说&amp;quot;不，不，不是那样。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;[9] IBM于1911年通过合并三家公司创建，其中最重要的是赫尔曼·霍尔瑞斯的制表机公司，成立于1896年。1941年其收入为6000万美元。&lt;/p&gt;&#xA;&lt;p&gt;惠普1964年的收入为1.25亿美元。&lt;/p&gt;&#xA;&lt;p&gt;微软1988年的收入为5.9亿美元。&lt;/p&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克威尔、杰西卡·利文斯顿、鲍勃·莱斯科、罗伯特·莫里斯、拉斯·罗伯茨和亚历克斯·塔巴罗克阅读本文草稿，以及乔恩·埃里希曼提供增长数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>经济不平等</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/ineq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/ineq/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/ineq/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;经济不平等&#34;&gt;经济不平等&lt;/h1&gt;&#xA;&lt;p&gt;2016年1月&lt;/p&gt;&#xA;&lt;p&gt;自1970年代以来，美国的经济不平等急剧增加。特别是，富人变得富裕得多。几乎所有写这个话题的人都说经济不平等应该减少。&lt;/p&gt;&#xA;&lt;p&gt;我对这个问题感兴趣是因为我是一个名为Y Combinator的公司的创始人之一，该公司帮助人们创办创业公司。几乎根据定义，如果一个创业公司成功，其创始人就会变得富有。这意味着通过帮助创业公司创始人，我一直在帮助增加经济不平等。如果经济不平等应该减少，我就不应该帮助创始人。没有人应该。&lt;/p&gt;&#xA;&lt;p&gt;但这听起来不对。这里发生了什么？这里发生的是，虽然经济不平等是一个单一指标（或者更确切地说，是两个：收入变化和财富变化），但它有多种原因。其中许多原因是坏的，比如税收漏洞和药物成瘾。但有些是好的，比如拉里·佩奇和谢尔盖·布林创办了你用来在网上找东西的公司。&lt;/p&gt;&#xA;&lt;p&gt;如果你想理解经济不平等——更重要的是，如果你真的想修复它的坏方面——你必须剖析其组成部分。然而，几乎所有关于这个主题的写作趋势都是相反的：将经济不平等的所有方面挤压在一起，好像它是一个单一现象。&lt;/p&gt;&#xA;&lt;p&gt;有时这样做是出于意识形态原因。有时是因为作者只有非常高层次的数据，因此从中得出结论，就像 proverbial drunk 在路灯下寻找钥匙，而不是在他丢钥匙的地方，因为那里的光线更好。有时是因为作者不理解不平等的关键方面，比如技术在财富创造中的作用。很多时候，也许大多数时候，关于经济不平等的写作结合了所有三个方面。&lt;/p&gt;&#xA;&lt;h2 id=&#34;饼的错误&#34;&gt;饼的错误&lt;/h2&gt;&#xA;&lt;p&gt;人们对经济不平等最常犯的错误是把它当作单一现象。其中最天真的版本是基于饼的错误：富人通过从穷人那里拿钱而变得富有。&lt;/p&gt;&#xA;&lt;p&gt;通常这是人们开始的假设，而不是通过检查证据得出的结论。有时饼的错误被明确表述：&amp;quot;&amp;hellip;&amp;hellip;顶层的人正在攫取国家收入中越来越大的份额——如此大的份额，以至于留给其他人的份额减少了&amp;hellip;&amp;hellip;&amp;quot;[1] 其他时候更无意识。但无意识的形式非常普遍。我认为这是因为我们在一个饼的错误实际上真实的世界中长大。对孩子来说，财富是一个固定的饼，被分享出去，如果一个人得到更多，那是以另一个人为代价的。需要有意识的努力来提醒自己现实世界不是那样运作的。&lt;/p&gt;&#xA;&lt;p&gt;在现实世界中，你既可以创造财富，也可以从他人那里夺取财富。木工创造财富。他做一把椅子，你愿意为此给他钱。高频交易者不会。他只有在交易的另一端有人亏损一美元时才赚一美元。&lt;/p&gt;&#xA;&lt;p&gt;如果一个社会中的富人通过从穷人那里夺取财富而变得富有，那么你就有了经济不平等的退化情况，其中贫困的原因与财富的原因相同。但不平等的实例不一定是退化情况的实例。如果一个木工做了5把椅子而另一个一个也没做，第二个木工会有更少的钱，但不是因为任何人从他那里拿走了任何东西。&lt;/p&gt;&#xA;&lt;p&gt;即使足够老练知道饼错误的人也被描述经济不平等为一个分位数收入或财富与另一个的比率的习惯引向它。很容易从谈论收入从一个分位数转移到另一个分位数，作为一种比喻，滑向相信这确实是正在发生的事情。&lt;/p&gt;&#xA;&lt;p&gt;除了在退化情况下，经济不平等不能用比率甚至曲线来描述。在一般情况下，它包括人们变穷的多种方式，以及人们变富的多种方式。这意味着要理解一个国家的经济不平等，你必须去寻找个别贫穷或富有的人，并找出原因。[2]&lt;/p&gt;&#xA;&lt;h2 id=&#34;理解变化&#34;&gt;理解变化&lt;/h2&gt;&#xA;&lt;p&gt;如果你想理解经济不平等的变化，你应该问那些人在情况不同时会做什么。这是我知道富人不是都通过某种将财富从其他人转移给他们的新系统而变得更富有的方法之一。当你对创业公司创始人使用&amp;quot;本会&amp;quot;方法时，你会发现大多数人在1960年经济不平等较低时会做什么，是加入大公司或成为教授。在马克·扎克伯格创办Facebook之前，他的默认期望是他最终会在微软工作。他和大多数其他创业公司创始人比20世纪中叶会更富有的原因不是因为国家在里根政府期间采取了某种右转，而是因为技术进步使得创办一个快速增长的新公司变得容易得多。&lt;/p&gt;&#xA;&lt;p&gt;传统经济学家似乎奇怪地不愿意研究个人人类。对他们来说似乎有一条规则，一切都必须从统计开始。所以他们给你关于财富和收入变化的非常精确的数字，然后接着是对根本原因的最天真推测。&lt;/p&gt;&#xA;&lt;p&gt;但是，虽然有许多人通过各种形式的寻租行为变富，有许多人通过玩零和游戏变富，但也有相当数量的人通过创造财富变富。而创造财富，作为经济不平等的来源，与夺取财富不同——不仅在道德上，而且在实践上也是如此，在它更难根除的意义上。一个原因是生产力变化正在加速。个人创造财富的速率取决于他们可用的技术，而技术呈指数级增长。创造财富是如此顽固的不平等来源的另一个原因是它可以扩展以容纳很多人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;不平等的不可避免性&#34;&gt;不平等的不可避免性&lt;/h2&gt;&#xA;&lt;p&gt;我完全支持关闭致富的歪门邪道。但这不会消除财富的巨大变化，因为只要你留开放通过创造财富致富的选择，想要致富的人就会这样做。&lt;/p&gt;&#xA;&lt;p&gt;大多数变富的人往往相当有驱动力。无论他们其他缺点如何，懒惰通常不是其中之一。假设新政策使在金融领域发财变得困难。那些目前进入金融领域发家致富的人会继续这样做，但对普通工资感到满足，这似乎合理吗？他们进入金融领域的原因不是因为他们热爱金融，而是因为他们想致富。如果剩下的致富唯一方式是创办创业公司，他们就会创办创业公司。他们在这方面也会做得很好，因为决心是创业公司成功的主要因素。[3] 虽然对于世界来说，如果想致富的人从玩零和游戏转向创造财富可能是一件好事，但这不仅不会消除财富的巨大变化，甚至可能加剧它们。在零和游戏中，上升至少有一个限制。此外，许多新的创业公司将创造进一步加速生产力变化的新技术。&lt;/p&gt;&#xA;&lt;p&gt;生产力变化远非经济不平等的唯一来源，但它是其不可减少的核心，在这个意义上，当你消除所有其他来源时，你会留下这个。如果你这样做，这个核心将会很大，因为它将扩展到包括所有难民的努力。此外，它周围将有一个巨大的鲍莫尔光晕：任何能够通过为自己创造财富而致富的人都必须得到足够的报酬以防止他们这样做。&lt;/p&gt;&#xA;&lt;p&gt;你不能在不阻止人们致富的情况下防止财富的巨大变化，而你不能在不阻止他们创办创业公司的情况下做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;所以让我们明确这一点。消除财富的巨大变化意味着消除创业公司。这似乎不是一个明智的举动。特别是因为它只意味着你在自己的国家消除了创业公司。有抱负的人已经已经移动到世界各地以推进他们的职业生涯，而且创业公司现在可以在任何地方运营。所以如果你使在你的国家通过创造财富致富变得不可能，想要这样做的人只会离开并到其他地方做。这肯定会给你一个更低的基尼系数，以及一个关于小心你要求什么的教训。[4]&lt;/p&gt;&#xA;&lt;p&gt;我认为上升的经济不平等是那些不选择更糟事情的国家的必然命运。我们在20世纪中期有40年的时间说服了一些人 otherwise。但正如我在《重新碎片化》中解释的，那是一个反常现象——一种独特的情况组合，不仅在经济上而且在文化上压缩了美国社会。[5]&lt;/p&gt;&#xA;&lt;p&gt;虽然从那时起我们看到的一些经济不平等增长是由于各种不良行为，但个人创造财富的能力同时有了巨大增长。创业公司几乎完全是这个时期的产物。即使在创业公司世界，过去10年也发生了质的变化。技术使创办创业公司的成本降低了很多，以至于创始人现在对投资者有上风。创始人被稀释得更少，现在他们保留董事会控制权也很常见。两者都进一步增加了经济不平等，前者是因为创始人拥有更多股票，后者是因为，正如投资者所了解的，创始人往往比投资者更擅长运营他们的公司。&lt;/p&gt;&#xA;&lt;p&gt;虽然表面表现发生变化，但潜在力量非常非常古老。我们在硅谷看到的生产力加速已经发生了数千年。如果你看石器工具的历史，技术在中石器时代已经在加速。加速度太慢，在一个生命周期内无法察觉。这就是指数曲线最左部分的特点。但这是相同的曲线。&lt;/p&gt;&#xA;&lt;p&gt;你不想以与这条曲线不兼容的方式设计你的社会。技术的进化是历史上最强大的力量之一。&lt;/p&gt;&#xA;&lt;p&gt;路易斯·布兰代斯说&amp;quot;我们可以有民主，或者我们可以有财富集中在少数人手中，但我们不能两者兼得。&amp;ldquo;这听起来合理。但如果我必须在忽略他和忽略一个已经运行了数千年的指数曲线之间选择，我会赌这条曲线。忽略任何已经运行了数千年的趋势是危险的。但指数增长，尤其是，往往会咬你。&lt;/p&gt;&#xA;&lt;h2 id=&#34;与不平等共存&#34;&gt;与不平等共存&lt;/h2&gt;&#xA;&lt;p&gt;如果加速的生产力变化总是会产生经济不平等的一些基线增长，那么花一些时间思考那个未来会是一个好主意。你能有一个财富差异很大的健康社会吗？它会是什么样子？&lt;/p&gt;&#xA;&lt;p&gt;注意思考那个想法感觉多么新颖。到目前为止的公共对话专门集中在减少经济不平等的必要性上。我们几乎没有考虑如何与它共存。&lt;/p&gt;&#xA;&lt;p&gt;我有希望我们能够做到。布兰代斯是镀金时代的产物，从那以后情况发生了变化。现在更难隐藏不当行为了。而且现在变富你不必像铁路或石油大亨那样购买政客。[6] 我在硅谷周围看到的巨大财富集中似乎并没有破坏民主。&lt;/p&gt;&#xA;&lt;p&gt;美国有很多问题以经济不平等为症状。我们应该修复那些问题。在这个过程中我们可能会减少经济不平等。但我们不能从症状开始，并希望修复根本原因。[7]&lt;/p&gt;&#xA;&lt;p&gt;最明显的是贫困。我确信大多数想要减少经济不平等的人这样做主要是为了帮助穷人，而不是为了伤害富人。[8] 确实，有相当数量的人只是在说减少经济不平等时马虎，而他们的意思是减少贫困。但这种情况最好是精确地说明我们想要什么。贫困和经济不平等不是同一的。当城市因为你无法支付账单而关掉你的水时，拉里·佩奇的净资产与你的相比没有任何区别。他可能只比你富有几倍，而你的水被关掉仍然是一个同样大的问题。&lt;/p&gt;&#xA;&lt;p&gt;与贫困密切相关的是缺乏社会流动性。我自己看到过：你不必长大富有或甚至中上层阶级才能作为创业公司创始人变富，但很少有成功的创始人长大极度贫困。但再次，这里的问题不简单地是经济不平等。拉里·佩奇长大的家庭和成功的创业公司创始人家庭之间有巨大的财富差异，但这并没有阻止他加入他们的行列。阻碍社会流动性的不是经济不平等本身，而是孩子在长得足够贫穷时出错的一些特定组合。&lt;/p&gt;&#xA;&lt;h2 id=&#34;关注真正的问题&#34;&gt;关注真正的问题&lt;/h2&gt;&#xA;&lt;p&gt;硅谷最重要的原则之一是&amp;quot;你衡量什么就得到什么。&amp;ldquo;这意味着如果你选择专注于某个数字，它往往会改善，但你必须选择正确的数字，因为只有你选择的那个会改善；另一个概念上看似相邻的可能不会。例如，如果你是一名大学校长，你决定专注于毕业率，那么你会提高毕业率。但只是毕业率，而不是学生学习多少。如果你为了提高毕业率而使课程更容易，学生可能会学得更少。&lt;/p&gt;&#xA;&lt;p&gt;经济不平等与以它为症状的各种问题相距足够远，以至于我们可能只会击中我们瞄准的两个中的哪一个。如果我们瞄准经济不平等，我们不会修复这些问题。所以我说让我们瞄准这些问题。&lt;/p&gt;&#xA;&lt;p&gt;例如，让我们攻击贫困，并在过程中必要时损害财富。这比攻击财富并希望你会因此修复贫困更有可能起作用。[9] 如果有人通过欺骗消费者或游说政府获得反竞争法规或税收漏洞而变富，那么让我们阻止他们。不是因为它造成经济不平等，而是因为这是偷窃。[10]&lt;/p&gt;&#xA;&lt;p&gt;如果你只有统计数据，似乎那就是你需要修复的东西。但在经济不平等这样广泛的统计措施背后，有些事情是好的，有些是坏的，有些是有巨大动量的历史趋势，其他是随机事故。如果我们想修复统计数据背后的世界，我们必须理解它，并将我们的努力集中在它们会做得最 good 的地方。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 斯蒂格利茨，约瑟夫。《不平等的代价》。诺顿，2012年。第32页。&lt;/p&gt;&#xA;&lt;p&gt;[2] 特别是因为经济不平等是异常值的问题，而异常值不成比例地可能通过经济学家通常不考虑的事情方式到达他们那里的位置，比如工资和生产力，而是通过，比如说，最终站在&amp;quot;毒品战争&amp;quot;的错误一边。&lt;/p&gt;&#xA;&lt;p&gt;[3] 决心是决定成功与失败的最重要因素，在创业公司中成功与失败往往明显分化。但要创造一个极其成功的创业公司需要更多的决心。虽然大多数创始人对致富的想法开始时感到兴奋，但纯粹唯利是图的创始人通常会接受大多数成功创业公司在上升过程中获得的大型收购提议。进入下一阶段的创始人往往是由使命感驱动的。他们对公司的依恋就像艺术家或作家对其作品的依恋。但很难在一开始预测哪些创始人会这样做。这不简单地是他们初始态度的函数。创办公司改变了人。&lt;/p&gt;&#xA;&lt;p&gt;[4] 在阅读本文的草稿后，理查德·佛罗里达告诉我他曾如何与一群欧洲人交谈&amp;quot;他们说他们想让欧洲更具创业精神，更像硅谷。我说根据定义，这会给你们更多不平等。他们认为我疯了——他们无法处理这个。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;[5] 经济不平等在全球范围内一直在减少。但这主要是由于以前统治所有较贫穷国家的盗贼统治的侵蚀。一旦政治上竞争环境更加公平，我们将看到经济不平等开始再次上升。美国是领头羊。我们在这里面临的情况，世界其他地方迟早也会面临。&lt;/p&gt;&#xA;&lt;p&gt;[6] 有些人仍然通过购买政客变富。我的观点是这不再是先决条件。&lt;/p&gt;&#xA;&lt;p&gt;[7] 除了以经济不平等为症状的问题外，还有那些以它为原因的问题。但在大多数如果不是所有情况下，经济不平等不是主要原因。通常有一些不公正允许经济不平等转化为其他形式的不平等，那种不公正是我们需要修复的。例如，美国的警察对待穷人比富人更差。但解决方案不是让人们更富有。是让警察更公平地对待人们。否则他们将继续虐待在其他方面软弱的人。&lt;/p&gt;</description>
    </item>
    <item>
      <title>编程语言修复了什么</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/fix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/fix/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/fix/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;编程语言修复了什么&#34;&gt;编程语言修复了什么&lt;/h1&gt;&#xA;&lt;p&gt;凯文·凯勒her建议了一种比较编程语言的有趣方式：用每种语言所要解决的问题来描述它。令人惊讶的是，有多少语言可以用这种方式很好地描述。&lt;/p&gt;&#xA;&lt;p&gt;Algol：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Pascal：Algol没有足够的数据类型。&lt;/p&gt;&#xA;&lt;p&gt;Modula：Pascal对于系统编程来说太弱了。&lt;/p&gt;&#xA;&lt;p&gt;Simula：Algol在模拟方面不够好。&lt;/p&gt;&#xA;&lt;p&gt;Smalltalk：Simula中的一切都不是对象。&lt;/p&gt;&#xA;&lt;p&gt;Fortran：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Cobol：Fortran太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;PL/1：Fortran没有足够的数据类型。&lt;/p&gt;&#xA;&lt;p&gt;Ada：每种现有语言都缺少某些东西。&lt;/p&gt;&#xA;&lt;p&gt;Basic：Fortran太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;APL：Fortran在操作数组方面不够好。&lt;/p&gt;&#xA;&lt;p&gt;J：APL需要自己的字符集。&lt;/p&gt;&#xA;&lt;p&gt;C：汇编语言太底层了。&lt;/p&gt;&#xA;&lt;p&gt;C++：C太底层了。&lt;/p&gt;&#xA;&lt;p&gt;Java：C++是一个混乱的东西。而且微软要打压我们。&lt;/p&gt;&#xA;&lt;p&gt;C#：Java被Sun控制着。&lt;/p&gt;&#xA;&lt;p&gt;Lisp：图灵机是描述计算的笨拙方式。&lt;/p&gt;&#xA;&lt;p&gt;Scheme：MacLisp是一个混乱的东西。&lt;/p&gt;&#xA;&lt;p&gt;T：Scheme没有库。&lt;/p&gt;&#xA;&lt;p&gt;Common Lisp：Lisp有太多方言。&lt;/p&gt;&#xA;&lt;p&gt;Dylan：Scheme没有库，而且Lisp语法太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;Perl：Shell脚本/awk/sed不够像编程语言。&lt;/p&gt;&#xA;&lt;p&gt;Python：Perl是一个混乱的东西。&lt;/p&gt;&#xA;&lt;p&gt;Ruby：Perl是一个混乱的东西，而且Lisp语法太吓人了。&lt;/p&gt;&#xA;&lt;p&gt;Prolog：编程不够像逻辑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络创业公司的未来</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/webstartups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/webstartups/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/webstartups/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;网络创业公司的未来&#34;&gt;网络创业公司的未来&lt;/h1&gt;&#xA;&lt;p&gt;2007年10月&lt;/p&gt;&#xA;&lt;p&gt;（本文源于2007年10月在FOWA的主题演讲。）&lt;/p&gt;&#xA;&lt;p&gt;现在有一些有趣的事情正在发生。创业公司正在经历与技术变得更便宜时相同的转变。&lt;/p&gt;&#xA;&lt;p&gt;我们在技术中一遍又一遍地看到这种模式。最初有一些非常昂贵且少量制造的设备。然后有人发现了如何廉价制造它们；更多的被制造出来；结果它们可以以新的方式使用。&lt;/p&gt;&#xA;&lt;p&gt;计算机是一个熟悉的例子。当我还是个孩子的时候，计算机是大型、昂贵的机器，一次制造一台。现在它们是商品。现在我们可以将计算机塞进所有东西里。&lt;/p&gt;&#xA;&lt;p&gt;这种模式非常古老。经济史上大多数转折点都是它的实例。它在1850年发生在钢铁上，在1780年发生在动力上。它在13世纪发生在布匹制造上，产生了后来带来文艺复兴的财富。农业本身也是这种模式的一个实例。&lt;/p&gt;&#xA;&lt;p&gt;现在创业公司不仅生产这种模式，这种模式也正在发生在创业公司身上。启动网络创业公司如此便宜，以至于更多的将被启动。如果这种模式成立，那应该会导致戏剧性的变化。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-大量创业公司&#34;&gt;1. 大量创业公司&lt;/h2&gt;&#xA;&lt;p&gt;所以我对网络创业公司未来的第一个预测相当简单：将会有很多。当启动创业公司很昂贵时，你必须得到投资者的许可才能这样做。现在唯一的门槛是勇气。&lt;/p&gt;&#xA;&lt;p&gt;甚至这个门槛也在降低，因为人们看着其他人冒险并生存下来。在我们资助的最近一批创业公司中，我们有几位创始人说他们之前想过申请，但不确定并找到了工作。只是在听到做过这件事的朋友的报告后，他们才决定自己尝试。&lt;/p&gt;&#xA;&lt;p&gt;启动创业公司很难，但朝九晚五的工作也很难，而且在某些方面是一种更糟糕的困难。在创业公司你有很多担忧，但你没有那种在大公司时生命正在飞逝的感觉。另外在创业公司你可以赚更多钱。&lt;/p&gt;&#xA;&lt;p&gt;随着创业公司有效的消息传播，这个数字可能会增长到现在看起来令人惊讶的地步。&lt;/p&gt;&#xA;&lt;p&gt;我们现在认为在公司工作很正常，但这只是最肤浅的历史表象。仅仅两三代人前，现在所谓的工业化国家的大多数人靠农业为生。所以虽然提议大量人改变他们的谋生方式可能看起来令人惊讶，但如果他们不这样做会更令人惊讶。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-标准化&#34;&gt;2. 标准化&lt;/h2&gt;&#xA;&lt;p&gt;当技术使某种东西 dramatically 变便宜时，标准化总是随之而来。当你大量制造东西时，你倾向于标准化一切不需要改变的东西。&lt;/p&gt;&#xA;&lt;p&gt;在Y Combinator我们仍然只有四个人，所以我们试图标准化一切。我们可以雇用员工，但我们想被迫弄清楚如何扩大投资规模。&lt;/p&gt;&#xA;&lt;p&gt;我们经常告诉创业公司快速发布一个最小版本，然后让用户的需求决定下一步做什么。本质上，让市场设计产品。我们自己也是这样做的。我们认为我们正在开发的处理大量创业公司的技术就像软件。有时它确实是软件，比如Hacker News和我们的申请系统。&lt;/p&gt;&#xA;&lt;p&gt;我们一直在标准化的最重要的东西之一是投资条款。到现在为止投资条款都是个别协商的。这对创始人来说是个问题，因为它使筹集资金需要更长的时间并在法律费用上花费更多。所以我们不仅对我们做的每笔交易使用相同的文书工作，我们还委托了通用的天使文书工作，我们资助的所有创业公司都可以在未来几轮中使用。&lt;/p&gt;&#xA;&lt;p&gt;一些投资者仍然想要炮制自己的交易条款。A轮融资，你筹集一百万美元或更多，在可预见的未来将是定制交易。但我认为天使轮将开始主要用标准化协议完成。一个想要在协议中插入一堆复杂条款的天使可能不是你想要的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-对收购的新态度&#34;&gt;3. 对收购的新态度&lt;/h2&gt;&#xA;&lt;p&gt;我看到开始标准化的另一件事是收购。随着创业公司数量的增加，大公司将开始开发标准化的程序，使收购几乎不比雇用某人更多工作。&lt;/p&gt;&#xA;&lt;p&gt;谷歌在这方面是领导者，就像在技术的许多领域一样。他们收购了很多创业公司——比大多数人意识到的多，因为他们只宣布其中的一小部分。作为谷歌，他们正在弄清楚如何高效地做这件事。&lt;/p&gt;&#xA;&lt;p&gt;他们解决的一个问题是如何思考收购。对于大多数公司来说，收购仍然带有某种不足的污名。公司这样做是因为他们不得不这样做，但通常有一种感觉他们不应该不得不这样做——他们自己的程序员应该能够构建他们需要的一切。&lt;/p&gt;&#xA;&lt;p&gt;谷歌的例子应该治愈世界其他地方的这个想法。谷歌拥有比任何公开技术公司都好得多的程序员。如果他们做收购没有问题，其他人应该更没有问题。无论谷歌做多少，微软应该做十倍。&lt;/p&gt;&#xA;&lt;p&gt;谷歌做收购没有问题的一个原因是他们亲身知道他们能通过这种方式获得的人才质量。Larry和Sergey只有在周游搜索引擎试图出售他们的想法但找不到接受者之后才创办了谷歌。他们曾是走进大公司的人，所以他们知道谁可能坐在会议桌对面。&lt;/p&gt;&#xA;&lt;h2 id=&#34;4-可能的风险策略&#34;&gt;4. 可能的风险策略&lt;/h2&gt;&#xA;&lt;p&gt;风险总是与回报成比例的。获得真正巨大回报的方法是做看起来疯狂的事情，比如在1998年创办一个新的搜索引擎，或者拒绝十亿美元的收购要约。&lt;/p&gt;&#xA;&lt;p&gt;这在风险投资中一直是个问题。创始人和投资者对风险有不同的态度。知道风险平均与回报成比例，投资者喜欢风险策略，而创始人，他们的样本量不够大，不在乎平均上什么是真的，往往更加保守。&lt;/p&gt;&#xA;&lt;p&gt;如果创业公司容易启动，这种冲突就消失了，因为创始人可以在更年轻的时候启动它们，那时承担更多风险是合理的，并且可以在他们的职业生涯中启动更多的创业公司。当创始人可以做很多创业公司时，他们可以开始像投资者一样以投资组合优化的方式看待世界。这意味着创造的财富总量可以更大，因为策略可以更有风险。&lt;/p&gt;&#xA;&lt;h2 id=&#34;5-更年轻更极客的创始人&#34;&gt;5. 更年轻、更极客的创始人&lt;/h2&gt;&#xA;&lt;p&gt;如果创业公司变成便宜的商品，更多的人将能够拥有它们，就像微处理器使计算机便宜后更多的人可以拥有计算机一样。特别是，比以前更年轻和技术更强的创始人将能够启动创业公司。&lt;/p&gt;&#xA;&lt;p&gt;在启动创业公司成本很高的时候，你必须说服投资者让你做。而且这需要与实际做创业公司非常不同的技能。如果投资者是完美的判断者，两者将需要完全相同的技能。但不幸的是，大多数投资者都是糟糕的判断者。我知道是因为我看到了幕后筹集资金需要多少工作，一个行业中所需的销售量总是与买家的判断成反比。&lt;/p&gt;&#xA;&lt;p&gt;幸运的是，如果创业公司变得更便宜启动，有另一种方式来说服投资者。不是带着商业计划去找风险投资家并试图说服他们资助它，你可以用我们或你叔叔的几万美元种子钱启动一个产品，然后带着一个工作的公司而不是一个计划去找他们。那时你不必显得圆滑和自信，你只需把他们指向Alexa。&lt;/p&gt;&#xA;&lt;p&gt;这种说服投资者的方式更适合黑客，他们进入技术部分是因为他们觉得其他领域需要的不真实程度让他们不舒服。&lt;/p&gt;&#xA;&lt;h2 id=&#34;6-创业中心将持续存在&#34;&gt;6. 创业中心将持续存在&lt;/h2&gt;&#xA;&lt;p&gt;如果启动创业公司变得便宜，似乎意味着像硅谷这样的创业中心的结束。如果你启动创业公司需要的只是房租钱，你应该能够在任何地方做。&lt;/p&gt;&#xA;&lt;p&gt;这在某种程度上是正确的，在某种程度上是错误的。你现在确实可以在任何地方启动创业公司。但你必须用创业公司做的不仅仅是启动它。你必须让它成功。而这在创业中心更可能发生。&lt;/p&gt;&#xA;&lt;p&gt;我对这个问题思考了很多，在我看来，网络创业公司越来越便宜将如果有的话会增加创业中心的重要性。创业中心的价值，像任何商业中心的中心一样，在于某种非常古老的东西：面对面会议。在不久的将来没有任何技术可以取代沿着大学大道行走并遇到一个朋友，他告诉你如何修复困扰你整个周末的错误，或者访问街对面朋友的创业公司并最终与他们的一个投资者交谈。&lt;/p&gt;&#xA;&lt;p&gt;是否在创业中心的问题就像是否接受外部投资的问题。问题不是你是否需要它，而是它是否带来任何优势。因为任何带来优势的东西，如果你的竞争对手做了而你没有，就会给他们带来比你更大的优势。所以如果你听到有人说&amp;quot;我们不需要在硅谷&amp;quot;，&amp;ldquo;需要&amp;quot;这个词的使用是他们甚至没有正确思考这个问题的标志。&lt;/p&gt;&#xA;&lt;p&gt;虽然创业中心像以往一样强大的磁铁，但启动创业公司越来越便宜意味着它们吸引的粒子变得越来越轻。现在的创业公司可以只是一对22岁的家伙。这样的公司可以比拥有10个人、其中一半有孩子的公司容易移动得多。&lt;/p&gt;&#xA;&lt;p&gt;我们知道因为我们让人们为Y Combinator搬家，这似乎不是问题。能够面对面工作三个月的优势超过了搬家的不便。问问任何做过这件事的人。&lt;/p&gt;&#xA;&lt;p&gt;种子阶段创业公司的流动性意味着种子投资是全国性的业务。我们收到的最常见的电子邮件之一是人们询问我们是否能帮助他们建立Y Combinator的本地克隆。但这根本行不通。种子投资不是区域性的，就像大型研究大学不是一样。&lt;/p&gt;&#xA;&lt;p&gt;种子投资不仅是全国性的，还是国际性的？有趣的问题。有迹象表明它可能是。我们有一连串来自美国以外的创始人，他们往往做得特别好，因为他们都是如此决心成功以至于愿意搬到另一个国家来实现它。&lt;/p&gt;&#xA;&lt;p&gt;创业公司越具有流动性，启动新的硅谷就越困难。如果创业公司是流动的，最好的本地人才会去真正的硅谷，他们在本地能得到的只会是那些没有精力搬家的人。&lt;/p&gt;&#xA;&lt;p&gt;顺便说一句，这不是一个民族主义的想法。是城市在竞争，不是国家。亚特兰大和慕尼黑一样完蛋。&lt;/p&gt;&#xA;&lt;h2 id=&#34;7-需要更好的判断&#34;&gt;7. 需要更好的判断&lt;/h2&gt;&#xA;&lt;p&gt;如果创业公司的数量急剧增加，那么那些工作就是判断它们的人将必须在这方面做得更好。我特别想到的是投资者和收购者。我们现在每年收到大约1000份申请。如果我们收到10，000份怎么办？&lt;/p&gt;&#xA;&lt;p&gt;这实际上是一个令人担忧的想法。但我们会想出某种答案。我们必须。这可能涉及编写一些软件，但幸运的是我们可以做到。&lt;/p&gt;&#xA;&lt;p&gt;收购者也必须更擅长挑选赢家。他们通常比投资者做得更好，因为他们挑选得更晚，当有更多表现可以衡量时。但即使在最先进的收购者那里，识别要收购的公司也极其临时，完成收购通常涉及大量不必要的摩擦。&lt;/p&gt;&#xA;&lt;p&gt;我认为收购者最终可能会有首席收购官，他们将识别好的收购并促成交易发生。目前这两个功能是分开的。有前途的新创业公司通常由开发人员发现。如果有足够强大的人想要购买它们，交易就移交给公司发展人员进行谈判。如果两者结合在一个由具有技术背景和一些他们想要完成的事情愿景的人领导的组中会更好。也许未来大公司将既有负责内部开发技术的工程副总裁，也有负责从外部引进技术的CAO。&lt;/p&gt;&#xA;&lt;p&gt;目前，大公司内部没有人会因为以2亿美元收购一家创业公司而惹上麻烦，而他们本可以早以2000万美元收购。应该开始有人为此惹上麻烦。&lt;/p&gt;&#xA;&lt;h2 id=&#34;8-大学将改变&#34;&gt;8. 大学将改变&lt;/h2&gt;&#xA;&lt;p&gt;如果最好的黑客在大学毕业后创办自己的公司而不是找工作，那将改变大学里发生的事情。这些变化大多会朝着更好的方向发展。我认为大学的体验被之后你将被潜在雇主评判的期望以一种不好的方式扭曲了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>让另外95%的优秀程序员进来</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/95/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/95/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;让另外95的优秀程序员进来&#34;&gt;让另外95%的优秀程序员进来&lt;/h1&gt;&#xA;&lt;p&gt;让另外95%的优秀程序员进来 2014年12月&lt;/p&gt;&#xA;&lt;p&gt;美国科技公司希望政府让移民更容易，因为它们说在美国找不到足够的程序员。反移民人士说，与其让外国人占据这些工作，我们应该培训更多的美国人成为程序员。谁是对的？&lt;/p&gt;&#xA;&lt;p&gt;科技公司是对的。反移民人士不理解的是，合格的程序员和杰出的程序员之间在能力上存在巨大差异，虽然你可以培训人们成为合格的程序员，但你无法培训他们成为杰出的程序员。杰出的程序员对编程有天生的才能和兴趣，这不仅仅是培训的产物。[1]&lt;/p&gt;&#xA;&lt;p&gt;美国占世界人口不到5%。这意味着如果使某人成为优秀程序员的特质是均匀分布的，那么95%的优秀程序员都出生在美国以外。&lt;/p&gt;&#xA;&lt;p&gt;反移民人士必须编造一些解释来说明科技公司为使移民更容易而付出的所有努力。所以他们声称这是因为它们想压低工资。但如果你与创业公司交谈，你会发现几乎所有达到一定规模的公司都经历了法律上的周折来让程序员进入美国，在那里他们支付给这些程序员的工资与支付给美国人的相同。为什么他们要为以相同价格获得程序员而额外费心？唯一的解释是他们在说实话：根本没有足够多的优秀程序员可供分配。[2]&lt;/p&gt;&#xA;&lt;p&gt;我问了一家拥有约70名程序员的创业公司的CEO，如果他能获得所有他想要的优秀程序员，他会再雇佣多少。他说&amp;quot;明天早上我们就会雇佣30名。&amp;ldquo;而这是一家总是在招聘战中获胜的热门创业公司。整个硅谷都是如此。创业公司在人才方面如此受限。&lt;/p&gt;&#xA;&lt;p&gt;如果更多的美国人接受编程培训那将是很好的，但没有任何培训能够改变95比5这样压倒性的比例。特别是由于其他国家也在培训程序员。除非发生灾难，否则大多数优秀程序员都出生在美国以外这一事实将永远成立。大多数在任何方面优秀的人都出生在美国以外这一事实也将永远成立。[3]&lt;/p&gt;&#xA;&lt;p&gt;卓越的表现意味着移民。一个只占世界人口百分之几的国家只有在某个领域有大量移民工作的情况下才能在该领域表现出色。&lt;/p&gt;&#xA;&lt;p&gt;但整个讨论都理所当然地认为：如果我们让更多的优秀程序员进入美国，他们会想要来。现在这是真的，我们没有意识到我们有多么幸运。如果我们想保持这个选择开放，最好的方法是利用它：世界上越多的优秀程序员在这里，其余的就会越想要来这里。&lt;/p&gt;&#xA;&lt;p&gt;如果我们不这样做，美国可能会彻底完蛋。我意识到这是强烈的措辞，但对此犹豫不决的人似乎没有意识到这里发挥作用的力量有多大。技术给最好的程序员带来了巨大的杠杆作用。程序员的世界市场似乎正在变得更加流动性。而且由于优秀的人喜欢优秀的同事，这意味着最好的程序员可能会聚集在少数几个中心。可能主要在一个中心。&lt;/p&gt;&#xA;&lt;p&gt;如果大多数优秀程序员聚集在一个中心，而那个中心不在这里怎么办？这个场景现在可能看起来不太可能，但如果未来50年的变化与过去50年一样大，它就不会不太可能了。&lt;/p&gt;&#xA;&lt;p&gt;我们有可能仅仅通过每年让几千名优秀程序员进入美国就确保美国保持技术超级大国的地位。让这个机会溜走将是一个多么巨大的错误。这很容易成为这一代美国政客后来出名的决定性错误。与该规模的其他潜在错误不同，修复它的成本为零。&lt;/p&gt;&#xA;&lt;p&gt;所以，请继续吧。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 优秀程序员比普通程序员好多少？好到你甚至无法直接衡量差异。优秀程序员不仅仅是更快地完成相同的工作。优秀程序员会发明普通程序员甚至想不到的东西。这并不意味着优秀程序员的价值无限大，因为任何发明都有有限的市场价值。但很容易想象在某些情况下，优秀程序员可能会发明价值达到普通程序员工资100倍甚至1000倍的东西。&lt;/p&gt;&#xA;&lt;p&gt;[2] 有少数咨询公司出租大量通过H1-B签证带入的外国程序员。一定要打击这些。应该很容易写立法来区分它们，因为它们与技术公司如此不同。但反移民人士声称像谷歌和脸书这样的公司是由相同的动机驱动是不诚实的。廉价但平庸的程序员涌入是他们最不想要的事情；那会毁掉他们。&lt;/p&gt;&#xA;&lt;p&gt;[3] 虽然这篇文章谈论的是程序员，但我们需要引进的群体更广泛，从设计师到程序员再到电气工程师。作为通用术语，最好的可能是&amp;quot;数字人才&amp;rdquo;。似乎让论证过于狭窄比用新词混淆每个人要好。&lt;/p&gt;&#xA;&lt;p&gt;感谢萨姆·奥特曼、约翰·科利森、帕特里克·科利森、杰西卡·利文斯顿、杰夫·拉尔斯顿、弗雷德·威尔逊和卡萨尔·尤尼斯阅读本文的草稿。&lt;/p&gt;&#xA;&lt;p&gt;西班牙语翻译&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>赛格威的麻烦</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/segway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/segway/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/segway/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;赛格威的麻烦&#34;&gt;赛格威的麻烦&lt;/h1&gt;&#xA;&lt;p&gt;2009年7月&lt;/p&gt;&#xA;&lt;p&gt;赛格威没有实现其最初的承诺，说得客气一点。有几个原因，但一个是人们不想被看到骑着它们。骑赛格威的人看起来像个呆子。&lt;/p&gt;&#xA;&lt;p&gt;我的朋友特雷弗·布莱克韦尔建造了自己的赛格威，我们称之为Segwell。他还建造了一个单轮版本，Eunicycle，在你意识到骑手没有踩踏板之前，它看起来就像普通的独轮车。他曾骑着它们去山景城市中心买咖啡。当他骑Eunicycle时，人们对他微笑。但当他骑Segwell时，他们会从车里喊出侮辱的话：&amp;ldquo;太懒了不走路，你他妈的同性恋？&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;为什么赛格威会引发这种反应？骑赛格威看起来像呆子的原因是你看起来很自鸣得意。你似乎没有足够努力地工作。&lt;/p&gt;&#xA;&lt;p&gt;骑摩托车的人也没有更努力工作。但因为他跨坐在上面，他似乎在努力。当你骑赛格威时，你只是站在那里。而一个被带着走而似乎没有做任何工作的人——比如坐在轿子里的人——不可避免地看起来自鸣得意。&lt;/p&gt;&#xA;&lt;p&gt;试试这个思维实验，就会变得清楚：想象一个像赛格威一样工作的东西，但你像滑板一样一只脚在前一只脚在后地骑。那看起来就不会那么不酷了。&lt;/p&gt;&#xA;&lt;p&gt;所以可能有一种方法可以吸引更多赛格威希望达到的市场：制造一个看起来对骑手来说不那么容易的版本。如果造型遵循滑板或自行车的传统而不是医疗设备的传统，也会有所帮助。&lt;/p&gt;&#xA;&lt;p&gt;奇怪的是，让赛格威陷入这个问题的是公司本身就是一种赛格威。对他们来说太容易了；他们太成功地筹集资金了。如果他们必须通过向真实用户销售的几个版本来逐步发展公司，他们会很快意识到人们骑着它们看起来很愚蠢。相反，他们有足够的资金在秘密中工作。我敢肯定，他们有很多焦点小组，但他们没有从车里喊出侮辱的人。所以他们从未意识到他们正自信地冲进一条死胡同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>超越平均水平</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/avg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/avg/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/avg/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;超越平均水平&#34;&gt;超越平均水平&lt;/h1&gt;&#xA;&lt;p&gt;2001年4月&lt;/p&gt;&#xA;&lt;p&gt;如果你想知道什么是编程的&amp;quot;秘密&amp;quot;，那么就是编程语言之间存在很大的差异。这不仅仅是理论问题。实际上，这会对创业公司产生很大影响。&lt;/p&gt;&#xA;&lt;p&gt;创业公司成功的可能性有多大？如果你考虑所有的创业公司，大多数都会失败。但如果你只考虑那些成功的创业公司，它们都有一个共同点：它们使用某种秘密武器。它们做了一些大公司无法做的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;语言的差异&#34;&gt;语言的差异&lt;/h2&gt;&#xA;&lt;p&gt;编程语言之间存在巨大差异。有些语言比其他语言强大得多。如果你使用一种强大的语言，你可以比使用较弱语言的程序员更快地完成工作。&lt;/p&gt;&#xA;&lt;p&gt;大多数程序员对编程语言之间的差异了解甚少。他们知道一些语言比其他语言更&amp;quot;高级&amp;quot;，但他们不理解这些差异有多大。他们不理解使用强大语言可以给你带来多大的优势。&lt;/p&gt;&#xA;&lt;p&gt;使用强大语言不仅仅是写代码更快的问题。它是关于你能做什么的问题。在较弱的语言中，有些事情根本做不了，或者做起来非常困难。在强大的语言中，这些事情很容易。&lt;/p&gt;&#xA;&lt;h2 id=&#34;lisp的优势&#34;&gt;Lisp的优势&lt;/h2&gt;&#xA;&lt;p&gt;Lisp是最强大的编程语言之一。它比大多数其他语言强大得多。使用Lisp的程序员比使用其他语言的程序员有巨大的优势。&lt;/p&gt;&#xA;&lt;p&gt;Lisp的优势不是微小的。它是巨大的。使用Lisp的团队可以比使用其他语言的团队小得多，但仍然完成更多的工作。&lt;/p&gt;&#xA;&lt;p&gt;Viaweb就是一个例子。Viaweb是第一个基于Web的应用程序。它让用户可以在线构建商店。我们三个人使用Lisp构建了Viaweb。我们的竞争对手使用其他语言，如C++和Perl。他们需要更多的人来完成同样的工作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么更多的人不使用lisp&#34;&gt;为什么更多的人不使用Lisp？&lt;/h2&gt;&#xA;&lt;p&gt;如果Lisp如此强大，为什么更多的人不使用它？&lt;/p&gt;&#xA;&lt;p&gt;一个原因是Lisp与其他语言非常不同。大多数程序员习惯使用类似C的语言。Lisp看起来很奇怪。&lt;/p&gt;&#xA;&lt;p&gt;另一个原因是Lisp并不适合所有事情。它不是最好的系统编程语言。如果你正在编写设备驱动程序，C可能更好。&lt;/p&gt;&#xA;&lt;p&gt;但Lisp非常适合编写Web应用程序。这就是我们选择它用于Viaweb的原因。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创业公司的优势&#34;&gt;创业公司的优势&lt;/h2&gt;&#xA;&lt;p&gt;创业公司可以利用大公司无法使用的强大语言。大公司有太多惯性。它们使用特定的语言，因为它们总是使用这些语言。它们不能轻易改变。&lt;/p&gt;&#xA;&lt;p&gt;创业公司可以灵活得多。它们可以选择最适合工作的工具。&lt;/p&gt;&#xA;&lt;p&gt;这不仅仅是技术问题。这关乎竞争。如果你使用比竞争对手更强大的语言，你可以更快地移动。你可以做他们做不到的事情。&lt;/p&gt;&#xA;&lt;h2 id=&#34;实际例子&#34;&gt;实际例子&lt;/h2&gt;&#xA;&lt;p&gt;在Viaweb，我们能够快速添加新功能。我们的竞争对手需要几周才能完成的事情，我们可以在几天内完成。&lt;/p&gt;&#xA;&lt;p&gt;我们能够添加我们的竞争对手无法添加的功能。Lisp让我们能够做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;例如，我们能够添加一个让用户编辑HTML的功能。我们的竞争对手无法做到这一点，因为他们的语言不够强大。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习曲线&#34;&gt;学习曲线&lt;/h2&gt;&#xA;&lt;p&gt;Lisp有一个陡峭的学习曲线。大多数程序员需要一段时间才能习惯它。&lt;/p&gt;&#xA;&lt;p&gt;但这是值得的。一旦你学会了Lisp，你就会比其他程序员更有生产力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;&#xA;&lt;p&gt;编程语言之间存在巨大差异。这些差异对创业公司来说很重要。&lt;/p&gt;&#xA;&lt;p&gt;如果你正在创办一家创业公司，你应该考虑使用像Lisp这样的强大语言。它可以给你带来竞争优势。&lt;/p&gt;&#xA;&lt;p&gt;不要担心别人会怎么说。做你认为正确的事情。&lt;/p&gt;&#xA;&lt;p&gt;记住，创业公司的目标是成功。如果使用强大的语言帮助你成功，那就去做吧。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;这篇文章基于Paul Graham在2001年4月发表的原创作品，讨论了编程语言之间的差异以及它们对创业公司的重要性。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>边缘的力量</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/marginal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/marginal/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/marginal/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;边缘的力量&#34;&gt;边缘的力量&lt;/h1&gt;&#xA;&lt;p&gt;2006年6月&lt;/p&gt;&#xA;&lt;p&gt;（本文源于在 Usenix 2006 和 Railsconf 2006 的演讲。）&lt;/p&gt;&#xA;&lt;p&gt;几年前，我的朋友 Trevor 和我一起去看了苹果的车库。当我们站在那里时，他说在萨斯喀彻温省长大的他曾经对乔布斯和沃兹尼亚克必须在车库里工作的奉献精神感到惊叹。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;那些人一定冻坏了！&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;这就是加州隐藏的优势之一：温和的气候意味着有很多边缘空间。在寒冷的地方，那些边缘被修剪掉了。内外之间有更清晰的界限，只有那些得到正式批准的项目——由组织、父母、妻子，或者至少由自己批准——才能获得适当的室内空间。这提高了新想法的激活能量。你不能只是修补。你必须证明其合理性。&lt;/p&gt;&#xA;&lt;p&gt;硅谷一些最著名的公司始于车库：惠普在1938年，苹果在1976年，谷歌在1998年。在苹果的情况下，车库故事有点像都市传说。沃兹说他们在那里所做的一切就是组装一些计算机，而他在自己的公寓或惠普的隔间里完成了Apple I和Apple II的实际设计。[1] 这显然太边缘了，即使是苹果的公关人员也无法接受。&lt;/p&gt;&#xA;&lt;p&gt;按照传统标准，乔布斯和沃兹尼亚克也是边缘人物。显然他们很聪明，但他们在纸上看起来不可能很好。当时他们是一对大学辍学生，之间只有大约三年的学业，而且还是嬉皮士。他们之前的商业经验包括制造&amp;quot;蓝盒子&amp;quot;来入侵电话系统，这是一个具有罕见区别的业务：既非法又不盈利。&lt;/p&gt;&#xA;&lt;h2 id=&#34;局外人&#34;&gt;局外人&lt;/h2&gt;&#xA;&lt;p&gt;现在，在硅谷的车库里运营的创业公司会感到自己是一个崇高传统的一部分，就像在阁楼里的诗人，或者负担不起加热工作室而不得不在室内戴贝雷帽的画家。但在1976年，这似乎并不那么酷。世界还没有意识到创办计算机公司与成为作家或画家属于同一类别。这种情况持续的时间不长。只有在过去几年中，硬件成本的急剧下降才允许局外人竞争。&lt;/p&gt;&#xA;&lt;p&gt;在1976年，每个人都看不起在车库里运营的公司，包括创始人。当他们得到一些钱时，乔布斯做的第一件事就是租用办公空间。他希望苹果看起来像一家真正的公司。&lt;/p&gt;&#xA;&lt;p&gt;他们已经拥有很少有真实公司拥有的东西：设计精良的产品。你会认为他们会有更多的信心。但我和很多创业公司创始人谈过，情况总是这样。他们建立了一些将要改变世界的东西，但他们担心的是没有像样的名片这样的小问题。&lt;/p&gt;&#xA;&lt;p&gt;这就是我想探讨的悖论：伟大的新事物往往来自边缘，然而发现它们的人被包括自己在内的所有人看不起。&lt;/p&gt;&#xA;&lt;p&gt;新事物来自边缘是一个老想法。我想检验它的内在结构。为什么伟大的想法来自边缘？什么样的想法？我们能做些什么来鼓励这个过程？&lt;/p&gt;&#xA;&lt;h2 id=&#34;内部人士&#34;&gt;内部人士&lt;/h2&gt;&#xA;&lt;p&gt;这么多好想法来自边缘的一个原因很简单：边缘太大了。如果内部人士意味着什么，那么局外人必须比内部人士多。如果局外人的数量巨大，即使人均很少，看起来也会有很多想法来自他们。但我认为还有更多的事情。成为内部人士有真正的缺点，在某些类型的工作中，这些缺点可能超过优点。&lt;/p&gt;&#xA;&lt;p&gt;想象一下，例如，如果政府决定委托某人写一部官方的《伟大的美国小说》。首先会有一场巨大的意识形态争论，争论选择谁。大多数最好的作家会因为冒犯了某一方而被排除。在剩下的人中，聪明的人会拒绝这样的工作，只剩下一些有错误野心的人。委员会会选择一个处于事业巅峰的人——也就是说，某人最好的工作已经过去——并移交项目，同时提供大量免费建议，说明这本书应该如何以积极的方式展示美国人民的力量和多样性等等。&lt;/p&gt;&#xA;&lt;p&gt;不幸的作家然后会坐下来工作，肩上承载着巨大的期望压力。不想搞砸这样一个公共委托，他会谨慎行事。这本书最好能赢得尊重，而确保这一点的方法是让它成为悲剧。观众必须被诱惑才能笑，但如果你杀人，他们会觉得必须认真对待你。众所周知，美国加上悲剧等于内战，所以那必须是关于什么的。十二年后最终完成时，这本书将是现有流行小说的900页拼贴——大致是《飘》加上《根》。但其体量和名人效应会使它成为几个月的畅销书，直到被脱口秀主持人的自传击败。这本书会被拍成电影然后被遗忘，除了那些更尖刻的评论家，在他们中间，它会成为虚假的代名词，就像米利·瓦尼利或《地球战场》。&lt;/p&gt;&#xA;&lt;p&gt;也许我有点被这个例子冲昏了头脑。然而，这难道不是这样的项目在每个点上都会展开的方式吗？政府比进入小说业务更了解情况，但在他们拥有自然垄断的其他领域，如核废料倾倒场、航空母舰和政权更迭，你会发现很多与这个项目同构的项目——实际上，还有很多不太成功的项目。&lt;/p&gt;&#xA;&lt;p&gt;这个小思想实验表明了内部人士项目的一些缺点：选择了错误类型的人，范围过大，无法承担风险，需要显得严肃，期望的重量，既得利益的力量，不具辨别力的观众，也许最危险的是，这种工作变成责任而不是娱乐的倾向。&lt;/p&gt;&#xA;&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;&#xA;&lt;p&gt;一个有局外人和内部人士的世界意味着某种测试来区分他们。大多数选择精英的测试的问题在于，有两种方式通过它们：在他们试图测量的方面做得好，或者在测试本身方面做得好。&lt;/p&gt;&#xA;&lt;p&gt;因此，关于一个领域的第一个问题是其测试有多诚实，因为这告诉你成为局外人意味着什么。这告诉你当你与权威人士意见不一致时，应该多大程度上相信你的直觉，是否值得通过通常的渠道成为他们自己，也许你是否想在这个领域工作。&lt;/p&gt;&#xA;&lt;p&gt;当有一致的质量标准，并且运行测试的人真正关心其完整性时，测试最难被破解。例如，硬科学博士课程的录取相当诚实。教授将得到他们录取的人作为自己的研究生，所以他们努力选择好的人，并且他们有相当多的数据可以参考。而本科录取似乎更容易被破解。&lt;/p&gt;&#xA;&lt;p&gt;判断一个领域是否有一致标准的一种方法是领先从业者与在大学教授该学科的人之间的重叠。在规模的一端，你有数学和物理等领域，几乎所有的老师都是最好的从业者。中间是医学、法律、历史、建筑和计算机科学，其中很多是。底部是商业、文学和视觉艺术，教师和领先从业者之间几乎没有重叠。正是这一端产生了&amp;quot;不能做的人教&amp;quot;这样的短语。&lt;/p&gt;&#xA;&lt;p&gt;顺便说一句，这个规模在决定大学学习什么时可能很有帮助。当我在大学时，规则似乎是你应该学习你最感兴趣的东西。但回想起来，你最好与一个擅长的人一起学习中等有趣的东西，而不是与一个不擅长的人一起学习非常有趣的东西。你经常听到人们说你不应该在大学主修商业，但这实际上是一个更一般规则的实例：不要从不擅长它们的老师那里学习东西。&lt;/p&gt;&#xA;&lt;p&gt;你应该多担心成为局外人取决于内部人士的质量。如果你是一个业余数学家，认为自己解决了一个著名的开放问题，最好回去检查一下。当我在研究生院时，数学系的一个朋友的工作是回复那些寄来费马最后定理等证明的人，看起来他并不认为这是有价值的信息来源——更像是值守心理健康热线。而如果你写的东西似乎与英语教授感兴趣的不同，那不一定是问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;反测试&#34;&gt;反测试&lt;/h2&gt;&#xA;&lt;p&gt;当选择精英的方法完全腐败时，大多数好人都会成为局外人。例如，在艺术中，贫穷、被误解的天才的形象不仅仅是一个可能的伟大艺术家形象：它是标准形象。顺便说一句，我并不是说这是正确的，但这个形象如此深入人心是很有启发性的。你不能让这样的说辞贴在数学或医学上。[2]&lt;/p&gt;&#xA;&lt;p&gt;如果足够腐败，测试就成为反测试，通过让人们做只有错误的人才会做的事情来过滤掉应该选择的人。高中受欢迎度似乎就是这样一个测试。在成人世界有很多类似的测试。例如，在普通大公司的等级制度中晋升需要关注政治，很少有深思熟虑的人能分心于此。[3] 像比尔·盖茨这样的人可以在他手下发展一家公司，但很难想象他有耐心在通用电气——或者实际上是微软——攀登公司阶梯。&lt;/p&gt;&#xA;&lt;p&gt;当你想到这一点时，这有点奇怪，因为苍蝇之王式的学校和官僚公司都是默认的。可能有很多人从一个到另一个，从未意识到整个世界并不是这样运作的。&lt;/p&gt;&#xA;&lt;p&gt;我认为这就是大公司经常被创业公司蒙蔽的一个原因。大公司的人没有意识到他们生活在一个环境中的程度，这个环境是一个大的、持续的测试，测试错误的品质。&lt;/p&gt;&#xA;&lt;p&gt;如果你是一个局外人，你击败内部人士的最佳机会显然是在腐败测试选择蹩脚精英的领域。但有一个陷阱：如果测试是腐败的，你的胜利将不会被认可，至少在你有生之年不会。你可能觉得你不需要那个，但历史表明，在腐败测试的领域工作是危险的。你可能击败了内部人士，但与在一个更诚实的领域相比，你所做的工作在绝对尺度上不会那么好。&lt;/p&gt;&#xA;&lt;p&gt;例如，艺术标准在十八世纪上半叶几乎与今天一样腐败。这是那些蓬松的理想化伯爵夫人与膝上狗肖像的时代。夏尔丹决定跳过所有这些，按照他看到的方式画普通事物。他现在被认为是那个时期最好的——但仍然不配与达芬奇、贝利尼或梅姆林相提并论，他们都拥有诚实标准的额外鼓励。&lt;/p&gt;&#xA;&lt;p&gt;然而，如果一个腐败的比赛之后是另一个不腐败的比赛，参与其中可能是值得的。例如，与一个能在营销上花费比你更多的公司竞争是值得的，只要你能在下一轮生存下来，届时客户会比较你的实际产品。同样，你不应该被相对腐败的大学入学测试所阻挠，因为它后面紧跟着不那么容易被破解的测试。[4]&lt;/p&gt;&#xA;&lt;h2 id=&#34;风险&#34;&gt;风险&lt;/h2&gt;&#xA;&lt;p&gt;即使在有诚实测试的领域，成为局外人仍然有优势。最明显的是局外人没有什么可失去的。他们可以做有风险的事情，如果失败了，那又怎样？几乎没有人会注意到。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，杰出人士被他们的杰出地位所拖累。杰出就像一套西装：它给错误的人留下印象，它限制了穿着者。&lt;/p&gt;&#xA;&lt;p&gt;局外人应该意识到他们在这里拥有的优势。能够承担风险是极其有价值的。每个人都太重视安全，无论是默默无闻的人还是杰出人士。没有人想看起来像傻瓜。但能够看起来像傻瓜是非常有用的。如果你的大多数想法不愚蠢，你可能太保守了。你没有充分界定问题。&lt;/p&gt;&#xA;&lt;p&gt;阿克顿勋爵说我们应该在最佳状态评判才能，在最坏状态评判品格。例如，如果你写一本伟大的书和十本糟糕的书，你仍然算是一个伟大的作家——或者至少，比写了十一本仅仅是好书的作家更好。而如果你大多数时候是一个安静、守法的公民，但偶尔把人切碎并埋在后院，你是个坏人。&lt;/p&gt;&#xA;&lt;p&gt;几乎每个人都犯了一个错误，把想法当作品格的指标而不是才能的指标——好像有一个愚蠢的想法让你变得愚蠢。有巨大的传统重量建议我们谨慎行事。&amp;ldquo;即使愚人保持沉默，也被认为是智慧的，&amp;ldquo;旧约说（箴言 17:28）。&lt;/p&gt;&#xA;&lt;p&gt;嗯，对于青铜时代巴勒斯坦的一群牧羊人来说，这可能是很好的建议。那时保守主义会是当天的秩序。但时代变了。在政治问题上坚持旧约可能仍然是合理的，但在物质上，世界现在有更多的国家。传统的指导作用较小，不仅因为事物变化更快，而且因为可能性的空间如此之大。世界变得越复杂，愿意看起来像傻瓜就越有价值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;委托&#34;&gt;委托&lt;/h2&gt;&#xA;&lt;p&gt;然而，人们越成功，如果他们搞砸了——甚至似乎搞砸了——他们受到的热度就越高。在这方面，以及许多其他方面，杰出人士是自己成功的囚犯。因此，理解成为局外人优势的最好方法可能是看看成为内部人士的缺点。&lt;/p&gt;&#xA;&lt;p&gt;如果你问杰出人士他们的生活有什么问题，他们会抱怨的第一件事是缺乏时间。我在谷歌的一个朋友在公司里相当高的位置，在谷歌上市很久之前就为他们工作了。换句话说，他现在足够富有，不必工作。我问他，既然他不必工作，他是否还能忍受拥有工作的烦恼。他说没有任何真正的烦恼，除了——当他说这话时，他带着渴望的表情——他收到了太多的电子邮件。&lt;/p&gt;&#xA;&lt;p&gt;杰出人士感觉就像每个人都想咬他们一口。这个问题如此普遍，以至于假装杰出的人通过假装过度劳累来做到这一点。&lt;/p&gt;&#xA;&lt;p&gt;杰出人士的生活变得有日程安排，这对思考不好。成为局外人的巨大优势之一是长的、不间断的时间块。这就是我对研究生院的记忆：似乎无穷无尽的时间供应，我花时间担心，但没有写，我的论文。默默无闻就像健康食品——可能不愉快，但对你有益。而名声往往像发酵产生的酒精。当达到一定浓度时，它会杀死产生它的酵母。&lt;/p&gt;&#xA;&lt;p&gt;杰出人士通常通过变成经理来应对时间短缺。他们没有时间工作。他们被周围应该帮助或监督的初级人员包围。明显的解决方案是让初级人员做工作。这样发生了一些好事，但有些问题不太适用：那种把所有事情都放在一个脑袋里有帮助的问题。&lt;/p&gt;&#xA;&lt;p&gt;例如，最近有人透露著名的玻璃艺术家戴尔·奇胡利已经27年没有真正吹制玻璃了。他有助手为他做工作。但视觉艺术中最有价值的想法来源之一是媒介的阻力。这就是为什么油画看起来与水彩如此不同。原则上你可以在任何媒介中做任何标记；实际上媒介引导你。如果你不再亲自做工作，你就停止从中学习。&lt;/p&gt;&#xA;&lt;p&gt;所以如果你想击败那些足够杰出以至于可以委托的人，一种方法是利用与媒介的直接接触。在艺术中，这很明显：吹你自己的玻璃，编辑你自己的电影，上演你自己的戏剧。在这个过程中密切注意事故和你即时产生的新想法。这种技术可以推广到任何类型的工作：如果你是一个局外人，不要被计划所统治。计划通常只是被迫于那些委托的人的弱点。&lt;/p&gt;&#xA;&lt;p&gt;有没有找到最好在一个脑袋中解决的问题的一般规则？嗯，你可以通过采取通常由多人完成的任何项目并尝试自己做来制造它们。沃兹尼亚克的工作是一个经典的例子：他自己做了一切，硬件和软件，结果是奇迹性的。他声称在Apple II中从未发现一个错误，无论是在硬件还是软件中。&lt;/p&gt;&#xA;&lt;p&gt;找到好问题在一个脑袋中解决的另一种方法是专注于巧克力棒中的凹槽——当任务在几个人之间分割时被分割的地方。如果你想击败委托，专注于垂直切片：例如，既是作家又是编辑，或者既是设计建筑又是建造它们。&lt;/p&gt;&#xA;&lt;p&gt;一个特别好的跨越凹槽是工具和用它们制造的东西之间的凹槽。例如，编程语言和应用程序通常由不同的人编写，这负责了编程语言中最严重的缺陷。我认为每种语言都应该同时用用它编写的大型应用程序来设计，就像C与Unix一样。&lt;/p&gt;&#xA;&lt;p&gt;与委托竞争的技术很好地转化为商业，因为委托在那里是地方性的。许多公司不把委托作为衰老的缺点来避免，而是把它作为成熟的标志来拥抱。在大公司中，软件通常由三种不同类型的人设计、实现和销售。在创业公司中，一个人可能必须做所有三件事。虽然这感觉压力很大，但这是创业公司获胜的原因之一。客户的需求和满足他们的手段都在一个脑袋中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>雅虎发生了什么</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/yahoo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/yahoo/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/yahoo/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;雅虎发生了什么&#34;&gt;雅虎发生了什么&lt;/h1&gt;&#xA;&lt;p&gt;2010年8月&lt;/p&gt;&#xA;&lt;p&gt;1998年雅虎收购了我的创业公司后，我去那里工作时，感觉那里就像世界的中心。它本应是下一个大事件。它本应成为谷歌最终成为的东西。&lt;/p&gt;&#xA;&lt;p&gt;出了什么问题？困扰雅虎的问题可以追溯到很久以前，几乎可以追溯到公司成立之初。1998年我到那里时，这些问题已经非常明显了。雅虎有两个谷歌没有的问题：容易赚到的钱，以及对作为技术公司的矛盾态度。&lt;/p&gt;&#xA;&lt;h2 id=&#34;金钱&#34;&gt;金钱&lt;/h2&gt;&#xA;&lt;p&gt;我第一次见到杨致远时，我们以为见面的原因不同。他认为我们见面是为了让他收购之前亲自考察我们。我认为我们见面是为了向他展示我们的新技术，Revenue Loop。这是一种对购物搜索结果进行排序的方式。商家竞标销售流量的百分比，但结果不是按出价排序，而是按出价乘以用户平均购买金额来排序。这就像谷歌现在用来对广告进行排序的算法，但这是在1998年春天，谷歌成立之前。&lt;/p&gt;&#xA;&lt;p&gt;Revenue Loop是购物搜索的最佳排序方式，从某种意义上说，它是按照雅虎从每个链接中赚取的金额多少来排序的。但它不仅仅是在这个意义上是最优的。根据用户行为对搜索结果进行排名也会使搜索变得更好。用户训练搜索：你可以开始时仅仅基于文本相似性找到匹配，随着用户购买更多东西，搜索结果会变得越来越好。&lt;/p&gt;&#xA;&lt;p&gt;杰瑞似乎并不关心。我很困惑。我在向他展示从搜索流量中提取最大价值的技术，而他不关心？我不知道是我解释得不好，还是他只是面无表情。&lt;/p&gt;&#xA;&lt;p&gt;直到后来，我在雅虎工作后才意识到答案。这两个猜测都不是。雅虎不关心提取流量全部价值的技术原因是广告商已经在过度支付了。如果雅虎仅仅提取实际价值，他们赚的钱会更少。&lt;/p&gt;&#xA;&lt;p&gt;尽管现在很难相信，但当时的大钱来自于横幅广告。广告商愿意为横幅广告支付荒谬的金额。因此，雅虎的销售团队已经发展利用这种收入来源。在一位身材高大、令人敬畏的人物Anil Singh的领导下，雅虎的销售人员会飞往宝洁公司，带回数百万美元的横幅广告展示订单。&lt;/p&gt;&#xA;&lt;p&gt;与印刷品相比，价格似乎很便宜，这是广告商在没有任何其他参考的情况下比较的对象。但与它们的实际价值相比，它们很昂贵。因此，这些大而愚蠢的公司是一个危险的收入来源。但还有一个更危险的来源：其他互联网创业公司。&lt;/p&gt;&#xA;&lt;p&gt;到1998年，雅虎成为事实上的庞氏骗局的受益者。投资者对互联网感到兴奋。他们兴奋的一个原因是雅虎的收入增长。因此，他们投资新的互联网创业公司。然后，创业公司利用这些钱在雅虎上购买广告以获取流量。这导致雅虎的收入进一步增长，并进一步说服投资者互联网值得投资。当有一天我在我的小隔间里意识到这一点时，我像阿基米德在他的浴缸里一样跳了起来，只是我不是喊&amp;quot;Eureka！&amp;quot;，而是喊&amp;quot;Sell！&amp;quot;（卖！）&lt;/p&gt;&#xA;&lt;p&gt;互联网创业公司和宝洁公司都在做品牌广告。他们不关心定向。他们只希望很多人看到他们的广告。因此，流量成为在雅虎获取的东西。什么类型都无所谓。[1]&lt;/p&gt;&#xA;&lt;p&gt;不仅仅是雅虎。所有的搜索引擎都在这样做。这就是为什么他们试图让人们开始称他们为&amp;quot;门户&amp;quot;而不是&amp;quot;搜索引擎&amp;quot;。尽管&amp;quot;门户&amp;quot;一词的实际含义，他们指的是用户会在网站本身找到想要的东西的网站，而不是像在搜索引擎那样只是在前往其他目的地的路上经过。&lt;/p&gt;&#xA;&lt;p&gt;我记得在1998年底或1999年初告诉大卫·费罗，雅虎应该收购谷歌，因为我和公司里的大多数其他程序员都在使用它而不是雅虎进行搜索。他告诉我，这不值得担心。搜索只占我们流量的6%，而我们每月以10%的速度增长。做得更好不值得。&lt;/p&gt;&#xA;&lt;p&gt;我没有说&amp;quot;但搜索流量比其他流量更有价值！&amp;ldquo;我说&amp;quot;哦，好的。&amp;ldquo;因为我也没意识到搜索流量有多值钱。我甚至不确定拉里和谢尔盖当时是否知道。如果他们知道，谷歌大概就不会在企业搜索上投入任何精力了。&lt;/p&gt;&#xA;&lt;p&gt;如果情况不同，经营雅虎的人可能已经意识到搜索的重要性。但他们和真相之间有世界上最不透明的障碍：金钱。只要客户为横幅广告开出大额支票，就很难认真对待搜索。谷歌没有这种干扰。&lt;/p&gt;&#xA;&lt;h2 id=&#34;黑客&#34;&gt;黑客&lt;/h2&gt;&#xA;&lt;p&gt;但雅虎也有另一个问题，使得难以改变方向。从一开始，他们对作为技术公司的矛盾态度就使他们失去了平衡。&lt;/p&gt;&#xA;&lt;p&gt;我在雅虎工作时最奇怪的事情之一是他们坚持称自己为&amp;quot;媒体公司&amp;rdquo;。如果你在他们的办公室里走动，看起来像一家软件公司。小隔间里充满了编写代码的程序员，思考功能列表和发货日期的产品经理，支持人员（是的，实际上有支持人员）告诉用户重新启动浏览器等等，就像一家软件公司。那么他们为什么称自己为媒体公司呢？&lt;/p&gt;&#xA;&lt;p&gt;一个原因是他们赚钱的方式：通过出售广告。1995年，很难想象一家技术公司会这样赚钱。技术公司通过向用户出售软件来赚钱。媒体公司出售广告。所以他们一定是一家媒体公司。&lt;/p&gt;&#xA;&lt;p&gt;另一个重要因素是对微软的恐惧。如果雅虎的任何人考虑过他们应该是一家技术公司的想法，下一个想法就是微软会粉碎他们。&lt;/p&gt;&#xA;&lt;p&gt;对于比我年轻得多的人来说，很难理解1995年微软仍然引起的恐惧。想象一家拥有谷歌现在几倍权力，但更恶劣的公司。害怕他们是完全合理的。雅虎看着他们粉碎了第一家热门互联网公司，网景。担心如果他们试图成为下一个网景，他们会遭受同样的命运是合理的。他们怎么知道网景会最终成为微软的最后一个受害者呢？&lt;/p&gt;&#xA;&lt;p&gt;假装成为一家媒体公司以迷惑微软会是一个聪明的举动。但不幸的是，雅虎实际上试图成为一家媒体公司，在某种程度上。例如，雅虎的项目经理被称为&amp;quot;制作人&amp;rdquo;，公司的不同部分被称为&amp;quot;资产&amp;quot;。但雅虎真正需要成为的是一家技术公司，通过试图成为其他东西，他们最终成为了不伦不类的东西。这就是为什么雅虎作为一家公司从来没有一个明确定义的身份。&lt;/p&gt;&#xA;&lt;p&gt;试图成为媒体公司的最严重后果是他们没有足够认真地对待编程。微软（当时）、谷歌和Facebook都有以黑客为中心的文化。但雅虎将编程视为一种商品。在雅虎，面向用户的软件由产品经理和设计师控制。程序员的工作只是将产品经理和设计师的工作翻译成代码的最后一步。&lt;/p&gt;&#xA;&lt;p&gt;这种做法的一个明显结果是，当雅虎构建东西时，它们通常不是很好。但这不是最糟糕的问题。最糟糕的问题是他们雇佣了糟糕的程序员。&lt;/p&gt;&#xA;&lt;p&gt;微软（当时）、谷歌和Facebook都一直痴迷于雇佣最好的程序员。雅虎不是。他们更喜欢好程序员而不是坏程序员，但他们没有那种专注的、几乎令人讨厌的精英主义专注于雇佣最聪明的人。而当你考虑到他们在泡沫时期雇佣程序员时有多少竞争时，他们的程序员质量参差不齐也就不足为奇了。&lt;/p&gt;&#xA;&lt;p&gt;在技术领域，一旦你有了糟糕的程序员，你就注定完蛋了。我想不出一家公司陷入技术平庸而恢复的例子。好程序员想与其他好程序员一起工作。因此，一旦你公司的程序员质量开始下降，你就进入了一个无法恢复的死亡螺旋。[2]&lt;/p&gt;&#xA;&lt;p&gt;在雅虎，这个死亡螺旋很早就开始了。如果雅虎曾经是谷歌式的人才磁铁，那么到1998年我到那里时就结束了。&lt;/p&gt;&#xA;&lt;p&gt;公司感觉过早地老化了。大多数技术公司最终都会被西装革履的人和中级经理接管。在雅虎，感觉他们有意加速了这个过程。他们不想成为一群黑客。他们想成为穿西装的人。媒体公司应该由穿西装的人经营。&lt;/p&gt;&#xA;&lt;p&gt;我第一次访问谷歌时，他们大约有500人，和我在雅虎工作时的人数相同。但情况看起来确实不同。它仍然是一个非常以黑客为中心的文化。我记得在自助餐厅和一些程序员讨论操纵搜索结果的问题（现在称为SEO），他们问&amp;quot;我们应该怎么做？&amp;ldquo;雅虎的程序员不会问这个问题。他们的任务不是问为什么；他们的任务是构建产品经理指定的东西。我记得离开谷歌时想&amp;quot;哇，它仍然是一家创业公司。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;从雅虎的第一个致命缺陷中学到的东西不多。希望任何公司都能避免依赖虚假收入来源而受到损害可能太过分了。但创业公司可以从第二个中学到重要的一课。在软件业务中，你不能没有以黑客为中心的文化。&lt;/p&gt;&#xA;&lt;p&gt;可能我听到的对拥有以黑客为中心的文化最令人印象深刻的承诺来自马克·扎克伯格，2007年他在创业学校演讲时说。他说，在早期，Facebook甚至为通常不涉及编程的工作雇佣程序员，比如人力资源和营销。&lt;/p&gt;&#xA;&lt;p&gt;那么哪些公司需要有以黑客为中心的文化？在这个意义上，哪些公司是&amp;quot;从事软件业务的&amp;quot;？正如雅虎发现的，这个规则涵盖的领域比大多数人意识到的要大。答案是：任何需要有良好软件的公司。&lt;/p&gt;&#xA;&lt;p&gt;为什么优秀的程序员想为一家没有以黑客为中心文化的公司工作，只要还有其他公司有这样的文化？我可以想象两个原因：如果他们得到巨额报酬，或者如果领域很有趣，而且其中没有一家公司是以黑客为中心的。否则，你无法吸引好程序员在以西装为中心的文化中工作。没有好的程序员，你不会得到好的软件，无论你在任务上投入多少人，或者你建立多少程序来确保&amp;quot;质量&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;黑客文化似乎有点不负责任。这就是为什么提议摧毁它的人使用&amp;quot;成人监督&amp;quot;这样的短语。这是他们在雅虎使用的短语。但还有比看似不负责任更糟糕的事情。例如，失败。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 我在那里时，最接近定向的是当我们创建了pets.yahoo.com，以引发3家宠物用品创业公司之间为顶级赞助商位置的竞价战。&lt;/p&gt;&#xA;&lt;p&gt;[2] 理论上，你可以通过购买好程序员而不是雇佣他们来击败死亡螺旋。你可以通过购买他们的创业公司获得永远不会作为员工来为你工作的程序员。但到目前为止，唯一足够聪明这样做的公司是那些足够聪明不需要这样做的公司。&lt;/p&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克威尔、杰西卡·利文斯顿和杰夫·拉尔斯通阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>风险资本挤压</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/vcsqueeze/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/vcsqueeze/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/vcsqueeze/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;风险资本挤压&#34;&gt;风险资本挤压&lt;/h1&gt;&#xA;&lt;p&gt;2005年11月&lt;/p&gt;&#xA;&lt;p&gt;未来几年，风险投资基金将发现自己从四个方向受到挤压。他们已经陷入卖方市场，因为他们在泡沫结束时筹集的巨额资金仍未投资。这本身并不是世界末日。事实上，这只是风险投资业务常态的更极端版本：太多资金追逐太少交易。&lt;/p&gt;&#xA;&lt;p&gt;不幸的是，这些少数交易现在想要的钱越来越少，因为创办初创公司变得如此便宜。四个原因：开源，使软件免费；摩尔定律，使硬件在几何上更接近免费；网络，如果你做得好，推广是免费的；更好的语言，使开发成本低得多。&lt;/p&gt;&#xA;&lt;p&gt;1995年我们创办初创公司时，前三个是我们最大的开支。我们不得不支付5000美元购买Netscape Commerce Server，这是当时唯一支持安全http连接的软件。我们支付3000美元购买一台配备90 MHz处理器和32兆内存的服务器。我们支付了一家公关公司约30000美元来推广我们的发布。&lt;/p&gt;&#xA;&lt;p&gt;现在你可以免费获得所有这三样。你可以免费获得软件；人们扔掉比我们第一台服务器更强大的计算机；如果你做出了好东西，你可以通过在线口碑产生比我们第一家公关公司通过印刷媒体获得的流量多十倍。&lt;/p&gt;&#xA;&lt;p&gt;当然，普通初创公司的另一个重大变化是编程语言已经改进了——或者说，中位数语言已经改进了。十年前的大多数初创公司，软件开发意味着十个程序员用C++编写代码。现在同样的工作可能由一两个使用Python或Ruby的人完成。&lt;/p&gt;&#xA;&lt;p&gt;在泡沫期间，许多人预测初创公司会将开发外包到印度。我认为未来的一个更好模式是David Heinemeier Hansson，他将开发外包给了一种更强大的语言。许多知名的应用程序现在，比如BaseCamp，只由一个程序员编写。而且一个人比十个人便宜10倍以上，因为（a）他不会在会议上浪费任何时间，（b）由于他可能是创始人，他可以不付给自己工资。&lt;/p&gt;&#xA;&lt;p&gt;因为创办初创公司如此便宜，风险投资家现在常常想给初创公司比初创公司想要接受的钱更多的钱。风险投资家喜欢一次投资数百万。但正如一位风险投资家在他资助的一家初创公司只愿意接受大约五十万美元后告诉我的，&amp;ldquo;我不知道我们要做什么。也许我们不得不把一些钱还回去。&amp;ldquo;意思是把一些资金还给提供资金的机构投资者，因为不可能全部投资。&lt;/p&gt;&#xA;&lt;p&gt;在这个已经很糟糕的情况下，出现了第三个问题：萨班斯-奥克斯利法案。萨班斯-奥克斯利法案是泡沫后通过的一项法律，大幅增加了上市公司的监管负担。除了合规成本，每年至少两百万美元外，该法律还给公司高管带来了可怕的法律风险。我认识的一位经验丰富的首席财务官直截了当地说：&amp;ldquo;我现在不想成为上市公司的首席财务官。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;你可能会认为负责任的公司治理是一个不能太过分的领域。但在任何法律中你都可能太过分，这句话让我相信萨班斯-奥克斯利法案肯定太过分了。这位首席财务官是我认识的最聪明、最正直的财务人员。如果萨班斯-奥克斯利法案阻止像他这样的人成为上市公司的首席财务官，这足以证明它已经坏了。&lt;/p&gt;&#xA;&lt;p&gt;很大程度上由于萨班斯-奥克斯利法案，现在很少有初创公司上市。实际上，成功现在等于被收购。这意味着风险投资家现在的业务是寻找有前途的小型2-3人初创公司，并将它们打造成需要1亿美元收购的公司。他们并不是故意从事这个业务的；这只是他们的业务演变成的样子。&lt;/p&gt;&#xA;&lt;p&gt;因此出现了第四个问题：收购者已经开始意识到他们可以批发购买。他们为什么要等风险投资家使他们想要的初创公司变得更昂贵？风险投资家增加的大部分东西，收购者无论如何都不想要。收购者已经有品牌知名度和人力资源部门。他们真正想要的是软件和开发人员，而这正是初创公司在早期阶段的本质：集中的软件和开发人员。&lt;/p&gt;&#xA;&lt;p&gt;谷歌，典型地，似乎是第一个意识到这一点的。&amp;ldquo;早点把你们的初创公司带给我们，&amp;ldquo;谷歌在初创学校的演讲者说。他们对此非常明确：他们喜欢在初创公司进行A轮融资的时候收购它们。（A轮融资是第一轮真正的风险投资资金；通常发生在第一年。）这是一个绝妙的策略，无疑其他大型技术公司会试图效仿。除非他们想要谷歌吃掉更多的午餐。&lt;/p&gt;&#xA;&lt;p&gt;当然，谷歌在收购初创公司方面有优势：那里的很多人都富有，或者期望在他们的期权归属时变得富有。普通员工很难推荐收购；看到一群二十岁的年轻人变得富有，而你还拿着工资工作，这太烦人了。即使这对你的公司来说是正确的做法。&lt;/p&gt;&#xA;&lt;p&gt;解决方案&lt;/p&gt;&#xA;&lt;p&gt;尽管现在情况看起来很糟糕，但风险投资家有一种自救的方法。他们需要做两件事，一件不会让他们惊讶，另一件会让他们觉得是禁忌。&lt;/p&gt;&#xA;&lt;p&gt;让我们从明显的一个开始：游说放松萨班斯-奥克斯利法案。这项法律的创建是为了防止未来的安然事件，而不是摧毁IPO市场。由于该法案通过时IPO市场几乎已经死亡，很少有人看到它会产生什么坏影响。但现在技术已经从上一次萧条中恢复，我们可以清楚地看到萨班斯-奥克斯利法案已经成为一个瓶颈。&lt;/p&gt;&#xA;&lt;p&gt;初创公司是脆弱的植物——实际上是幼苗。这些幼苗值得保护，因为它们长成经济的大树。经济增长的大部分是它们的增长。我认为大多数政治家都意识到这一点。但他们没有意识到初创公司有多么脆弱，以及它们多么容易成为旨在修复其他问题的法律的附带损害。&lt;/p&gt;&#xA;&lt;p&gt;更危险的是，当你摧毁初创公司时，它们几乎不会发出任何声音。如果你踩到煤炭行业的脚趾，你会听到它。但如果你无意中扼杀了初创公司行业，发生的只是下一批谷歌的创始人留在研究生院而不是创办公司。&lt;/p&gt;&#xA;&lt;p&gt;我的第二个建议会让风险投资家感到震惊：让创始人在A轮融资中部分套现。目前，当风险投资家投资初创公司时，他们获得的所有股票都是新发行的，所有资金都流向公司。他们也可以直接从创始人那里购买一些股票。&lt;/p&gt;&#xA;&lt;p&gt;大多数风险投资家几乎有宗教规则反对这样做。他们不希望创始人在公司出售或上市前得到一分钱。风险投资家痴迷于控制，他们担心如果创始人有钱，他们对创始人的影响力会减弱。&lt;/p&gt;&#xA;&lt;p&gt;这是一个愚蠢的计划。事实上，让创始人早期出售一点股票通常对公司更有好处，因为它会使创始人对风险的态度与风险投资家的一致。目前情况是，他们对风险的态度往往是截然相反的：创始人一无所有，宁愿100%的机会获得100万美元，而不是20%的机会获得1000万美元，而风险投资家能够&amp;quot;理性&amp;quot;并倾向于后者。&lt;/p&gt;&#xA;&lt;p&gt;无论他们说什么，创始人早期出售公司而不是进行A轮融资的原因是他们预先得到了报酬。第一个一百万比后续的一百万值钱得多。如果创始人能早期出售一点股票，他们会很乐意接受风险投资的钱，并把赌注押在更大的结果上。&lt;/p&gt;&#xA;&lt;p&gt;那么为什么不让创始人得到那一百万，或者至少五十万呢？风险投资家会得到相同数量的股票。那么如果一些钱流向创始人而不是公司又怎样呢？&lt;/p&gt;&#xA;&lt;p&gt;一些风险投资家会说这是不可想象的——他们希望所有的钱都用于发展公司。但事实是，当前风险投资投资的巨大规模是由风险投资基金的结构决定的，而不是初创公司的需求。这些大型投资往往经常被用来摧毁公司而不是发展公司。&lt;/p&gt;&#xA;&lt;p&gt;资助我们初创公司的天使投资人让创始人直接向他们出售了一些股票，这对每个人来说都是一笔好交易。天使投资人在那笔投资上获得了巨大回报，所以他们很高兴。对我们创始人来说，它减弱了初创公司令人恐惧的全有或全无性，其原始形式更多的是一种干扰而不是激励。&lt;/p&gt;&#xA;&lt;p&gt;如果风险投资家对让创始人部分套现的想法感到恐惧，让我告诉他们一些更可怕的事情：你们现在正在直接与谷歌竞争。感谢Trevor Blackwell、Sarah Harlin、Jessica Livingston和Robert Morris阅读本文的草稿。&lt;/p&gt;&#xA;&lt;p&gt;罗马尼亚翻译 希伯来翻译 日语翻译 如果你喜欢这个，你可能也喜欢《黑客与画家》。&lt;/p&gt;</description>
    </item>
    <item>
      <title>高分辨率社会</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/highres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/highres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/highres/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;高分辨率社会&#34;&gt;高分辨率社会&lt;/h1&gt;&#xA;&lt;p&gt;2008年12月&lt;/p&gt;&#xA;&lt;p&gt;在几乎整个历史中，一个社会的成功与其组建大型和有纪律的组织能力成正比。那些押注规模经济的人通常获胜，这意味着最大的组织是最成功的。&lt;/p&gt;&#xA;&lt;p&gt;事物已经发生了如此大的变化，以至于我们难以相信，但直到几十年前，最大的组织往往是最进步的。1960年，一个雄心勃勃的大学毕业生想在福特、通用电气或NASA巨大而光鲜的办公室工作。小意味着小打小闹。1960年的小并不意味着一个酷酷的小型创业公司。它意味着希德叔叔的鞋店。&lt;/p&gt;&#xA;&lt;p&gt;当我在1970年代长大时，&amp;ldquo;公司阶梯&amp;quot;的概念仍然非常活跃。标准计划是努力进入一所好大学，然后被征召到某个组织，然后逐渐上升到责任越来越大的职位。更有雄心的人只是希望更快地爬上同一个阶梯。[1]&lt;/p&gt;&#xA;&lt;p&gt;但在二十世纪晚期，某些事情发生了变化。事实证明，规模经济并不是唯一起作用的力量。特别是在技术领域，从小团体获得的更高速度开始超越规模的优势。&lt;/p&gt;&#xA;&lt;p&gt;未来被证明与我们1970年预期的不同。我们预期的圆顶城市和飞行汽车未能实现。但幸运的是，带有标明我们专业和等级徽章的连体服也未能实现。经济现在看起来不是由少数几个巨大的树形组织主导，而是一个由较小独立单位组成的流动网络。&lt;/p&gt;&#xA;&lt;p&gt;并不是说大组织停止了工作。没有证据表明像罗马军队或英国东印度公司这样著名成功的组织比今天同规模的组织少受繁文缛节和政治的困扰。但他们的对手是那些不能通过发现新技术来即时改变规则的人。现在事实证明，&amp;ldquo;大型和有纪律的组织获胜&amp;quot;这个规则需要附加一个限定条件：&amp;ldquo;在变化缓慢的游戏中&amp;rdquo;。在变化达到足够速度之前，没有人知道这一点。&lt;/p&gt;&#xA;&lt;p&gt;不过，大组织现在将开始做得更差，因为历史上第一次他们不再获得最优秀的人才。现在雄心勃勃的大学毕业生不想为大公司工作。他们想为正在迅速成长为大公司的热门创业公司工作。如果他们真的有雄心，他们想自己创业。[2]&lt;/p&gt;&#xA;&lt;p&gt;这并不意味着大公司会消失。说创业公司会成功意味着大公司将存在，因为成功的创业公司要么成为大公司，要么被它们收购。[3] 但大型组织可能永远不会再次扮演它们在二十世纪末以前所扮演的主导角色。&lt;/p&gt;&#xA;&lt;p&gt;一个持续如此之久的趋势竟然会耗尽，这有点令人惊讶。一个规则工作了数千年然后改变极性，这种情况多久发生一次？&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;越大越好&amp;quot;的千年运行给我们留下了许多现在已经过时但极其根深蒂固的传统。这意味着雄心勃勃的人现在可以对其进行套利。准确理解要保留哪些想法，哪些现在可以丢弃，将非常有价值。&lt;/p&gt;&#xA;&lt;p&gt;观察的地方是小规模传播开始的地方：创业公司的世界。&lt;/p&gt;&#xA;&lt;p&gt;一直有偶尔的案例，特别是在美国，雄心勃勃的人在自己下面成长阶梯而不是爬上去。但直到最近，这是一条异常的路线，往往只有局外人才会走。十九世纪伟大的实业家如此缺乏正规教育并非巧合。无论他们的公司最终变得多大，他们最初基本上都是机械师和店主。没有大学教育的人如果能避免的话，是不会走这一步的。直到技术创业公司，特别是互联网创业公司的兴起，受过教育的人自己创业是非常不寻常的。&lt;/p&gt;&#xA;&lt;p&gt;离开肖克利半导体创立仙童半导体的八个人，最初的硅谷创业公司，最初甚至没有试图创业。他们只是在寻找一家愿意雇佣他们作为团队的公司。然后他们中一个人的父母介绍他们给一家小型投资银行，后者提出为他们创业融资，所以他们就这样做了。但创业对他们来说是一个陌生的想法；他们是不小心走到这一步的。[4]&lt;/p&gt;&#xA;&lt;p&gt;现在我想，几乎所有会编程的斯坦福或伯克利本科生都至少考虑过创业的想法。东海岸的大学并不落后，英国大学只比他们落后一点点。这种模式表明，斯坦福和伯克利的态度不是异常，而是领先指标。这就是世界发展的方向。&lt;/p&gt;&#xA;&lt;p&gt;当然，互联网创业公司仍然只是世界经济的一小部分。基于它们的趋势能有那么强大吗？&lt;/p&gt;&#xA;&lt;p&gt;我认为是的。没有理由假设这个领域可以完成的工作量有任何限制。像科学一样，财富似乎以分形方式扩展。当瓦特开始研究蒸汽动力时，它只是英国经济的很小一部分。但他的工作导致了更多的工作，直到这一部分扩展到比最初所属的整个经济更大的东西。&lt;/p&gt;&#xA;&lt;p&gt;互联网也可能发生同样的事情。如果互联网创业公司为雄心勃勃的人提供了最好的机会，那么很多雄心勃勃的人会创办它们，这部分经济会以通常的分形方式膨胀。&lt;/p&gt;&#xA;&lt;p&gt;即使与互联网相关的应用程序只成为世界经济的十分之一，这个组成部分也会为其他部分定下基调。经济中最活跃的部分总是如此，从薪资到着装标准。不仅仅是因为它的声望，还因为经济中最活跃部分所依据的原则往往是行之有效的原则。&lt;/p&gt;&#xA;&lt;p&gt;对于未来，押注的趋势似乎是个体绩效衡量的、小型自治团体组成的网络。获胜的社会将是那些阻碍最小的社会。&lt;/p&gt;&#xA;&lt;p&gt;就像最初的工业革命一样，一些社会将比其他社会更擅长这个。在英国诞生的一代内，工业革命传播到欧洲大陆和北美。但它并没有传播到任何地方。这种新的做事方式只能在为此做好准备的地方扎根。它只能传播到已经有活力中产阶级的地方。&lt;/p&gt;&#xA;&lt;p&gt;1960年代在硅谷开始的变革有类似的社会组成部分。那里开发了两种新技术：建造集成电路的技术，以及建造一种通过创造新技术来快速成长的新型公司的技术。建造集成电路的技术迅速传播到其他国家。但建造创业公司的技术没有。五十年后，创业公司在硅谷无处不在，在美国其他少数几个城市也很常见，但在世界大部分地区仍然是异常现象。&lt;/p&gt;&#xA;&lt;p&gt;创业公司没有像工业革命那样广泛传播的部分原因——可能主要是社会破坏性。尽管工业革命带来了许多社会变化，但它并没有与&amp;quot;越大越好&amp;quot;的原则作斗争。恰恰相反：两者完美地契合。新的工业公司适应了像军队和公务员这样现有大组织的习俗，产生的混合体运作良好。&amp;ldquo;工业领袖&amp;quot;向&amp;quot;工人军队&amp;quot;发布命令，每个人都知道他们应该做什么。&lt;/p&gt;&#xA;&lt;p&gt;创业公司在社会上似乎更逆流而上。它们很难在重视等级制度和稳定性的社会中繁荣，就像工业化很难在被随意从商人阶级偷窃的人统治的社会中繁荣一样。但在工业革命发生时，已经有少数几个国家度过了那个阶段。这次似乎没有那么多准备好的国家。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 这个模式的一个奇怪后果是，通常赚更多钱的方法是成为经理。这是创业公司解决的问题之一。&lt;/p&gt;&#xA;&lt;p&gt;[2] 美国汽车公司一直比日本汽车公司做得差得多有很多原因，但至少其中一个是乐观的原因：美国毕业生有更多选择。&lt;/p&gt;&#xA;&lt;p&gt;[3] 公司有一天可能在收入上做大而在人员规模上不做大是有可能的，但我们在这个趋势上还没有走得很远。&lt;/p&gt;&#xA;&lt;p&gt;[4] Lecuyer, Christophe, 《制造硅谷》，MIT出版社，2006年。&lt;/p&gt;&#xA;&lt;p&gt;感谢特雷弗·布莱克韦尔、保罗·布赫海特、杰西卡·利文斯顿和罗伯特·莫里斯阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>黑客这个词</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/gba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/gba/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/gba/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;黑客这个词&#34;&gt;黑客这个词&lt;/h1&gt;&#xA;&lt;p&gt;2004年4月&lt;/p&gt;&#xA;&lt;p&gt;对大众媒体来说，&amp;ldquo;黑客&amp;quot;意味着闯入计算机的人。在程序员中，它意味着一个好的程序员。但这两种含义是相连的。对程序员来说，&amp;ldquo;黑客&amp;quot;在最字面的意义上意味着精通：能够让计算机做他想要的事情的人——不管计算机是否愿意。&lt;/p&gt;&#xA;&lt;p&gt;更令人困惑的是，名词&amp;quot;hack&amp;quot;也有两种含义。它可以是赞美，也可以是侮辱。当你用丑陋的方式做某事时，这被称为hack。但当你做某事如此聪明以至于你以某种方式击败了系统时，那也被称为hack。这个词在前一种含义中比后一种更常用，可能是因为丑陋的解决方案比 brilliant 的更常见。&lt;/p&gt;&#xA;&lt;p&gt;信不信由你，&amp;ldquo;hack&amp;quot;的两种含义也是相连的。丑陋和富有想象力的解决方案有共同之处：它们都打破了规则。在仅仅丑陋的违规（用胶带把东西 attach 到你的自行车上）和 brilliantly 富有想象力的违规（丢弃欧几里得空间）之间存在一个逐渐的连续谱。&lt;/p&gt;&#xA;&lt;p&gt;黑客文化比计算机更早。当理查德·费曼在曼哈顿计划工作时，他常常通过闯入包含秘密文件的保险箱来娱乐自己。这个传统今天仍在继续。当我们读研究生时，我的一位在MIT周围花了太多时间的黑客朋友有自己的开锁工具包。（他现在经营对冲基金，这不是一个无关的企业。）&lt;/p&gt;&#xA;&lt;p&gt;有时候很难向当局解释为什么有人会想做这种事情。我的另一个朋友曾经因为闯入计算机而与政府惹上麻烦。这最近才被宣布为犯罪，FBI发现他们通常的调查技术不起作用。警察调查显然是从动机开始的。通常的动机很少：毒品、金钱、性、复仇。智力好奇心不在FBI的动机清单上。确实，整个概念对他们来说似乎很陌生。&lt;/p&gt;&#xA;&lt;p&gt;当权者往往对黑客普遍的不服从态度感到恼火。但这种不服从是使他们成为优秀程序员的品质的副产品。当CEO用通用的企业新闻发言时，他们可能会嘲笑他，但他们也会嘲笑告诉他们某个问题无法解决的人。压制一个，你就压制了另一个。&lt;/p&gt;&#xA;&lt;p&gt;这种态度有时是装出来的。有时年轻的程序员注意到著名黑客的怪癖，并决定采用一些自己的怪癖，以便看起来更聪明。虚假版本不仅令人讨厌；这些伪装者的 prickly 态度实际上会减慢创新过程。&lt;/p&gt;&#xA;&lt;p&gt;但即使考虑到他们令人讨厌的怪癖，黑客的不服从态度也是一个净胜利。我希望它的优势能被更好地理解。&lt;/p&gt;&#xA;&lt;p&gt;例如，我怀疑好莱坞的人们对黑客对版权的态度感到困惑。它们是Slashdot上激烈讨论的 perennial 话题。但是，为什么编程的人们应该如此关心版权，在所有事情中？&lt;/p&gt;&#xA;&lt;p&gt;部分原因是有些公司使用机制来防止复制。向任何黑客展示一把锁，他的第一个念头是如何打开它。但黑客对版权和专利等措施感到警惕有更深层次的原因。他们将 increasingly 激进的措施保护&amp;quot;知识产权&amp;quot;视为对他们工作所需的 intellectual freedom 的威胁。他们是对的。&lt;/p&gt;&#xA;&lt;p&gt;正是通过在当前技术内部探查，黑客才获得了下一代的想法。不，谢谢，知识产权所有者可能会说，我们不需要任何外部帮助。但他们错了。下一代计算机技术经常——或许比不是更经常——是由外人开发的。&lt;/p&gt;&#xA;&lt;p&gt;1977年，毫无疑问IBM内部有一些团体正在开发他们期望成为下一代商业计算机的东西。他们错了。下一代商业计算机正在由两个名叫史蒂夫的长发男人在洛斯阿尔托斯的车库里以完全不同的线路开发。大约在同一时间，当权者正在合作开发官方的下一代操作系统Multics。但两个认为Multics过于复杂的家伙离开去写自己的系统。他们给它起了一个对Multics开玩笑的名字：Unix。&lt;/p&gt;&#xA;&lt;p&gt;最新的知识产权法律对导致新想法的那种探查施加了前所未有的限制。在过去，竞争对手可能使用专利来阻止你销售他们制造的东西的副本，但他们不能阻止你拆开一个来看它是如何工作的。最新的法律使这成为犯罪。如果我们不能研究当前技术来弄清楚如何改进它，我们如何开发新技术？&lt;/p&gt;&#xA;&lt;p&gt;具有讽刺意味的是，黑客自己招致了这一点。计算机是造成问题的原因。机器内的控制系统过去是物理的：齿轮、杠杆和凸轮。 increasingly，产品的大脑（从而价值）在软件中。我指的是一般意义上的软件：即数据。LP上的歌曲是物理压印在塑料中的。iPod磁盘上的歌曲只是存储在上面。&lt;/p&gt;&#xA;&lt;p&gt;数据根据定义很容易复制。互联网使副本容易分发。所以公司害怕不足为奇。但是，像经常发生的那样，恐惧模糊了他们的判断。政府用严酷的法律来保护知识产权。他们可能是好意的。但他们可能没有意识到这样的法律弊大于利。&lt;/p&gt;&#xA;&lt;p&gt;为什么程序员如此强烈地反对这些法律？如果我是一个立法者，我会对这个谜团感兴趣——出于同样的原因，如果我是一个农民，突然一天晚上听到很多咯咯声来自我的鸡舍，我会想要出去调查。黑客不笨，而这个世界上 unanimity 很罕见。所以如果他们都在咯咯叫，也许有什么不对劲。&lt;/p&gt;&#xA;&lt;p&gt;难道这样的法律，虽然意图保护美国，但实际上会伤害它吗？想想看。费曼在曼哈顿计划期间闯入保险箱有一些非常美国化的东西。很难想象当时的德国当局对这类事情有幽默感。也许这不是巧合。&lt;/p&gt;&#xA;&lt;p&gt;黑客是不守规矩的。这就是黑客的本质。这也是美国精神的本质。硅谷在美国，而不是法国、德国、英国或日本，这绝非偶然。在那些国家，人们在 lines 内着色。&lt;/p&gt;&#xA;&lt;p&gt;我在佛罗伦萨住了一段时间。但在那里呆了几个月后，我意识到我无意识希望在那里找到的东西 back 在我刚刚离开的地方。佛罗伦萨著名的原因是，在1450年，它是纽约。在1450年，它充满了你现在在美国发现的那种动荡和雄心勃勃的人。（所以我回到了美国。）&lt;/p&gt;&#xA;&lt;p&gt;美国的一个巨大优势是它为正确的那种不守规矩提供了宜人的氛围——它不仅是聪明人的家园，也是 smart-alecks 的家园。黑客 invariably 是 smart-alecks。如果我们有一个国定假日，那将是4月1日。我们对 brilliant 或可怕 cheesy 的解决方案使用同一个词，这充分说明了我们的工作。当我们炮制出一个时，我们不总是100%确定它是哪种。但只要它有正确的错误类型，那就是一个有希望的迹象。人们认为编程是精确和有条理的，这很奇怪。计算机是精确和有条理的。黑客是你在开怀大笑时做的事情。&lt;/p&gt;&#xA;&lt;p&gt;在我们的世界中，一些最具特征的解决方案与恶作剧相去不远。IBM无疑对DOS许可证协议的后果感到相当惊讶，就像假设的&amp;quot;对手&amp;quot;在迈克尔·拉宾通过将问题重新定义为更容易解决的问题来解决问题时必须感到的那样。&lt;/p&gt;&#xA;&lt;p&gt;Smart-alecks 必须 develop 对他们能逃脱多少的敏锐感觉。最近黑客已经感觉到气氛的变化。最近黑客精神似乎相当不被人看好。&lt;/p&gt;&#xA;&lt;p&gt;对黑客来说，最近公民自由的收缩似乎特别不祥。这也一定让外人感到困惑。为什么我们应该特别关心公民自由？为什么程序员比牙医、推销员或园林设计师更关心？&lt;/p&gt;&#xA;&lt;p&gt;让我用政府官员会欣赏的术语来说明这个 case。公民自由不仅仅是一种装饰，或一种古怪的 American 传统。公民自由使国家富裕。如果你绘制人均GNP与公民自由的图表，你会注意到一个明确的趋势。公民自由真的可能是一个原因，而不仅仅是一个结果？我认为是的。我认为一个人们可以做和说他们想做的事情的社会也倾向于一个最有效的解决方案获胜的社会，而不是那些最有影响力的人赞助的解决方案。威权国家变得腐败；腐败国家变得贫穷；贫穷国家是弱小的。在我看来，政府权力有一条拉弗曲线，就像税收收入一样。至少，这似乎足够可能，以至于尝试实验并发现会是愚蠢的。与高税率不同，如果证明是一个错误，你不能废除极权主义。&lt;/p&gt;&#xA;&lt;p&gt;这就是黑客担心的原因。政府监视人们并不会让程序员写更差的代码。它只是最终导致一个坏想法获胜的世界。因为这对黑客如此重要，他们对此特别敏感。他们能从远处感知极权主义的 approaching，就像动物能感知 approaching 雷暴一样。&lt;/p&gt;&#xA;&lt;p&gt;如果像黑客担心的那样，最近旨在保护国家安全和知识产权的措施被证明是一枚导弹，正好瞄准了使美国成功的东西，那将是讽刺的。但这不会是第一次在恐慌气氛中采取的措施产生了与预期相反的效果。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
