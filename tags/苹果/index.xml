<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>苹果 on Linguage</title>
    <link>https://linguage.github.io/tags/%E8%8B%B9%E6%9E%9C/</link>
    <description>Recent content in 苹果 on Linguage</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Sep 2025 17:18:00 +0800</lastBuildDate>
    <atom:link href="https://linguage.github.io/tags/%E8%8B%B9%E6%9E%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Liquid Glass 的设计挺讨我喜欢的</title>
      <link>https://linguage.github.io/post/updates-apple-tahoe/</link>
      <pubDate>Fri, 12 Sep 2025 17:18:00 +0800</pubDate>
      <guid>https://linguage.github.io/post/updates-apple-tahoe/</guid>
      <description>&lt;p&gt;更新了一下苹果的系统，先是手机，后是电脑，体验良好。&lt;/p&gt;&#xA;&lt;p&gt;不过接下来需要考虑的可能是更新一下设备，老旧的款式仿佛有点卡，只是别人不那么说，我也不太确信，也不希望如此。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;https://pbs.twimg.com/media/G0jqYqtaMAQHcSk?format=jpg&amp;amp;name=large&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;https://pbs.twimg.com/media/G0jqYqtaMAYnzm_?format=jpg&amp;amp;name=large&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;img src=&#34;https://pbs.twimg.com/media/G0jo86NaMAAn9X7?format=jpg&amp;amp;name=large&#34; alt=&#34;&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Mac的回归</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/mac/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/mac/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mac的回归&#34;&gt;Mac的回归&lt;/h1&gt;&#xA;&lt;p&gt;2005年3月&lt;/p&gt;&#xA;&lt;p&gt;我认识的所有最好的黑客都在逐渐转向Mac。我的朋友Robert说，他在MIT的整个研究小组最近都给自己买了Powerbook。这些人不是90年代中期苹果低谷时期购买Mac的图形设计师和祖母们。他们是你能找到的最核心的OS黑客。&lt;/p&gt;&#xA;&lt;p&gt;原因当然是OS X。Powerbook设计精美，运行FreeBSD。你还需要知道什么？&lt;/p&gt;&#xA;&lt;p&gt;我在去年年底买了一台Powerbook。当我的IBM Thinkpad的硬盘很快损坏后，它成了我唯一的笔记本电脑。当我的朋友Trevor最近出现在我家时，他拿着一台与我相同的Powerbook。&lt;/p&gt;&#xA;&lt;p&gt;对我们大多数人来说，这不是转向苹果，而是回归。尽管在90年代中期很难相信，但Mac在其时代是典型的黑客计算机。&lt;/p&gt;&#xA;&lt;p&gt;1983年秋天，我大学的一门CS课教授站起来，像先知一样宣布，很快将有一种计算机具有半MIPS的处理能力，可以放在飞机座位下，价格如此便宜，我们可以从暑假工作中节省足够的钱来买一台。整个房间都倒吸了一口气。当Mac出现时，它甚至比我们希望的还要好。它如承诺的那样小、强大和便宜。但它也是我们从未想过计算机能成为的东西：设计精美。&lt;/p&gt;&#xA;&lt;p&gt;我必须拥有一台。我不是一个人。在80年代中后期，我认识的所有黑客都在为Mac编写软件，或者想要这样做。剑桥的每个沙发床垫上似乎都躺着一本相同的胖白皮书。如果你把它翻过来，上面写着&amp;quot;Inside Macintosh&amp;quot;。&lt;/p&gt;&#xA;&lt;p&gt;然后是Linux和FreeBSD，黑客们跟随最强大的OS wherever it leads，发现自己转向了Intel盒子。如果你关心设计，你可以买一台Thinkpad，如果你能把Intel和Microsoft的标签从前面撕掉，它至少不会 actively 令人反感。[1]&lt;/p&gt;&#xA;&lt;p&gt;随着OS X的出现，黑客们回来了。当我走进剑桥的苹果商店时，就像回家一样。很多东西都变了，但空气中仍然有那种苹果的酷炫感，感觉表演是由真正关心的人运营的，而不是随机的公司交易者。&lt;/p&gt;&#xA;&lt;p&gt;那又怎样，商界可能会说。谁在乎黑客是否再次喜欢苹果？毕竟，黑客市场有多大？&lt;/p&gt;&#xA;&lt;p&gt;相当小，但相对于其规模来说很重要。当涉及计算机时，黑客现在正在做的事情，十年后每个人都会做。几乎所有的技术，从Unix到位图显示到Web，都是在CS部门和研究实验室中首先流行的，然后逐渐传播到世界其他地方。&lt;/p&gt;&#xA;&lt;p&gt;我记得1986年告诉我父亲，有一种叫做Sun的新型计算机，它是一台严肃的Unix机器，但如此小和便宜，你可以拥有一个自己坐在前面，而不是坐在连接到单个中央Vax的VT100前面。我建议，也许他应该买一些这家公司的股票。我想他真的希望他听了。&lt;/p&gt;&#xA;&lt;p&gt;1994年，我的朋友Koling想和他在台湾的女朋友交谈，为了节省长途账单，他写了一些软件，将声音转换为可以通过互联网发送的数据包。当时我们不确定这是否是互联网的适当用途，互联网当时仍然是一个准政府实体。他现在做的事情被称为VoIP，它是一个巨大且快速增长的业务。&lt;/p&gt;&#xA;&lt;p&gt;如果你想知道十年后普通人会用计算机做什么，只需在一个好大学的CS部门走一圈。无论他们在做什么，你都会做。&lt;/p&gt;&#xA;&lt;p&gt;在&amp;quot;平台&amp;quot;问题上，这种趋势更加明显，因为新颖的软件源自伟大的黑客，他们倾向于首先为他们个人使用的任何计算机编写它。软件销售硬件。Apple II的初始销售中，如果不是大多数的话，很多来自购买它来运行VisiCalc的人。为什么Bricklin和Frankston为Apple II编写VisiCalc？因为他们个人喜欢它。他们可以选择任何机器使其成为明星。&lt;/p&gt;&#xA;&lt;p&gt;如果你想吸引黑客编写销售你的硬件的软件，你必须使它成为他们自己使用的东西。仅仅使其&amp;quot;开放&amp;quot;是不够的。它必须开放且好。&lt;/p&gt;&#xA;&lt;p&gt;而开放且好正是Macs再次成为的。中间的几年创造了一种据我所知前所未有的情况：苹果在低端和高端都很受欢迎，但在中间不。我七十岁的母亲有一台Mac笔记本电脑。我拥有计算机科学博士学位的朋友都有Mac笔记本电脑。[2] 然而苹果的整体市场份额仍然很小。&lt;/p&gt;&#xA;&lt;p&gt;尽管前所未有，但我预测这种情况也是暂时的。&lt;/p&gt;&#xA;&lt;p&gt;所以爸爸，有家叫苹果的公司。他们制造一种新型计算机，设计得像Bang &amp;amp; Olufsen音响系统一样好，下面是你能买到的最好的Unix机器。是的，市盈率有点高，但我想很多人会想要这些。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 这些可怕的标签很像前Google搜索引擎上流行的侵入性广告。它们对客户说：你不重要。我们关心Intel和Microsoft，而不是你。&lt;/p&gt;&#xA;&lt;p&gt;[2] Y Combinator（我们希望）主要被黑客访问。操作系统的比例是：Windows 66.4%，Macintosh 18.8%，Linux 11.4%，FreeBSD 1.5%。Mac数字与五年前相比是一个很大的变化。&lt;/p&gt;&#xA;&lt;h2 id=&#34;意大利语翻译&#34;&gt;意大利语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;俄语翻译&#34;&gt;俄语翻译&lt;/h2&gt;&#xA;&lt;h2 id=&#34;中文翻译&#34;&gt;中文翻译&lt;/h2&gt;</description>
    </item>
    <item>
      <title>平板电脑</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/tablets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/tablets/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/tablets/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;平板电脑&#34;&gt;平板电脑&lt;/h1&gt;&#xA;&lt;p&gt;2010年12月&lt;/p&gt;&#xA;&lt;p&gt;我最近在想，没有一个通用术语来称呼iPhone、iPad和运行Android的相应东西是多么不便。最接近通用术语的似乎是&amp;quot;移动设备&amp;quot;，但这（a）适用于任何手机，（b）并没有真正捕捉到iPad的独特之处。&lt;/p&gt;&#xA;&lt;p&gt;几秒钟后我突然想到，我们最终会称这些东西为平板电脑。我们甚至考虑称它们为&amp;quot;移动设备&amp;quot;的唯一原因是iPhone先于iPad。如果iPad先出来，我们不会认为iPhone是手机；我们会认为它是小到可以举到耳边的平板电脑。&lt;/p&gt;&#xA;&lt;p&gt;iPhone与其说是手机，不如说是手机的替代品。这是一个重要的区别，因为它将成为一个常见模式的早期实例。我们周围的许多（如果不是大多数）专用物品将被运行在平板电脑上的应用程序替代。&lt;/p&gt;&#xA;&lt;p&gt;在GPS、音乐播放器和相机等情况中这已经很清楚了。但我认为会有多少东西被替代会让人们感到惊讶。我们资助了一家正在替代钥匙的创业公司。你可以轻松改变字体大小的事实意味着iPad有效地替代了阅读眼镜。如果我通过用加速度计玩一些聪明的技巧甚至能替代浴室秤，我不会感到惊讶。&lt;/p&gt;&#xA;&lt;p&gt;在单个设备上用软件做事的优势如此之大，以至于任何能变成软件的东西都会。所以在接下来几年里，创业公司的好方法将是环顾四周，寻找人们尚未意识到可以通过平板电脑应用变得不必要的东西。&lt;/p&gt;&#xA;&lt;p&gt;1938年，巴克敏斯特·富勒创造了ephemeralization这个词来描述物理机械越来越被我们现在称为软件所取代的趋势。平板电脑将接管世界的原因不是（仅仅）史蒂夫·乔布斯和公司是工业设计巫师，而是因为他们背后有这股力量。iPhone和iPad有效地钻了一个洞，将使ephemeralization流入许多新领域。任何研究过技术历史的人都不会想低估这股力量。&lt;/p&gt;&#xA;&lt;p&gt;我担心苹果背后有这股力量可能拥有的权力。我不想看到另一个像80年代和90年代微软那样的客户端单一文化时代。但如果ephemeralization是驱动平板电脑传播的主要力量之一，那表明了一种与苹果竞争的方法：成为它的更好平台。&lt;/p&gt;&#xA;&lt;p&gt;事实证明，苹果平板电脑中有加速度计是一件好事。开发人员以苹果从未想象过的方式使用加速度计。这就是平台的本质。工具越多功能，你就越无法预测人们如何使用它。所以平板电脑制造商应该思考：我们还能在里面放什么？不仅仅是硬件，还有软件。我们还能给开发人员访问什么？给黑客一英寸，他们会带你一英里。&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、Paul Buchheit、Jessica Livingston和Robert Morris阅读本文的草稿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微软已死</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/microsoft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/microsoft/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/microsoft/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;微软已死&#34;&gt;微软已死&lt;/h1&gt;&#xA;&lt;p&gt;2007年4月&lt;/p&gt;&#xA;&lt;p&gt;几天前我突然意识到微软已经死了。我正在和一个年轻的创业公司创始人谈论谷歌与雅虎的不同。我说雅虎从一开始就被对微软的恐惧所扭曲。这就是为什么他们将自己定位为&amp;quot;媒体公司&amp;quot;而不是&amp;quot;技术公司&amp;quot;。然后我看着他的脸，意识到他并不理解。这就像我告诉他80年代中期女孩们多么喜欢巴里·马尼洛一样。巴里谁？微软？他什么也没说，但我能看出他不相信有人会害怕他们。&lt;/p&gt;&#xA;&lt;p&gt;从80年代末开始，微软在软件界投下阴影将近20年。我能记得在他们之前是IBM。我大多忽略了这阴影。我从不使用微软软件，所以它只间接影响我——例如，我从僵尸网络收到的垃圾邮件。因为我没有注意，所以我没有注意到阴影何时消失。&lt;/p&gt;&#xA;&lt;p&gt;但现在它已经消失了。我能感觉到。再也没有人害怕微软了。他们仍然赚很多钱——IBM也是如此。但他们并不危险。&lt;/p&gt;&#xA;&lt;p&gt;微软什么时候死的，死于什么？我知道他们在2001年时似乎还很危险，因为我当时写了一篇论文，说他们没有看起来那么危险。我猜他们在2005年就死了。我知道当我们创办Y Combinator时，我们并不担心微软会与我们资助的创业公司竞争。事实上，我们甚至从未邀请他们参加我们为创业公司向投资者展示而组织的演示日。我们邀请雅虎、谷歌和其他一些互联网公司，但我们从未费心邀请微软。那里也从未有人给我们发过邮件。他们在不同的世界。&lt;/p&gt;&#xA;&lt;p&gt;是什么杀死了他们？我认为是四件事，都发生在2000年代中期。&lt;/p&gt;&#xA;&lt;p&gt;最明显的是谷歌。镇上只能有一个大佬，而他们显然就是。谷歌现在是迄今为止最危险的公司，无论从好的还是坏的意义上来说。微软最多只能 afterward 蹒跚而行。&lt;/p&gt;&#xA;&lt;p&gt;谷歌什么时候领先？人们会倾向于将其推回到2004年8月的IPO，但那时他们并没有设定辩论的条款。我认为他们在2005年领先。Gmail是让他们越过边缘的事情之一。Gmail表明他们能做的不仅仅是搜索。&lt;/p&gt;&#xA;&lt;p&gt;Gmail还展示了如果你利用后来被称为&amp;quot;Ajax&amp;quot;的技术，基于网络的软件能做多少事情。这是微软死亡的第二个原因：每个人都能看到桌面已经结束。现在应用程序似乎不可避免地会在网络上生存——不仅仅是电子邮件，而是一切，直到Photoshop。甚至微软现在也看到了这一点。&lt;/p&gt;&#xA;&lt;p&gt;具有讽刺意味的是，微软无意中帮助创造了Ajax。Ajax中的x来自XMLHttpRequest对象，它让浏览器在显示页面的同时在后台与服务器通信。（最初与服务器通信的唯一方式是请求新页面。）XMLHttpRequest是微软在90年代末创建的，因为他们需要它用于Outlook。他们没有意识到的是，它对很多其他人也有用——事实上，对任何想要让网络应用程序像桌面应用程序一样工作的人都有用。&lt;/p&gt;&#xA;&lt;p&gt;Ajax的另一个关键组件是Javascript，这种在浏览器中运行的编程语言。微软看到了Javascript的危险，并试图尽可能长时间地保持其损坏。[1] 但最终开源世界赢了，通过产生Javascript库，这些库就像树长在铁丝网上一样，覆盖了浏览器的缺陷。&lt;/p&gt;&#xA;&lt;p&gt;微软死亡的第三个原因是宽带互联网。现在任何关心的人都可以拥有快速的网络接入。连接到服务器的管道越大，你对桌面的需求就越少。&lt;/p&gt;&#xA;&lt;p&gt;棺材上的最后一颗钉子来自苹果。感谢OS X，苹果以在技术界极为罕见的方式死而复生。[2] 他们的胜利如此彻底，以至于当我遇到运行Windows的计算机时，我现在感到惊讶。我们在Y Combinator资助的几乎所有人都使用苹果笔记本电脑。在创业学校的观众中也是如此。现在所有计算机人员都使用Mac或Linux。Windows是给祖母用的，就像90年代的Mac一样。所以不仅桌面不再重要，关心计算机的人也没有人使用微软的了。&lt;/p&gt;&#xA;&lt;p&gt;当然，苹果在音乐方面也让微软节节败退，电视和手机也在路上。&lt;/p&gt;&#xA;&lt;p&gt;我很高兴微软死了。他们像尼禄或康茂德——邪恶得只有继承的权力才能让你如此。因为记住，微软的垄断不是从微软开始的。他们是从IBM那里得到的。软件业务从大约1950年代中期到大约2005年一直被垄断所笼罩。也就是说，几乎它的整个存在时间。&amp;ldquo;Web 2.0&amp;quot;之所以如此兴高采烈，原因之一就是这种感觉，无论是有意识还是无意识的，这个垄断时代可能终于结束了。&lt;/p&gt;&#xA;&lt;p&gt;当然，作为一个黑客，我禁不住思考如何修复一些损坏的东西。微软有什么方法可以东山再起吗？原则上，是的。要看看如何做到，想象两件事：（a）微软现在手头的现金量，以及（b）拉里和谢尔盖十年前在所有搜索引擎中奔波，试图以100万美元出售谷歌的想法，但被每个人拒绝。&lt;/p&gt;&#xA;&lt;p&gt;令人惊讶的事实是，按照像微软这样富有的公司的标准， brilliant hackers——危险地brilliant的hackers——可以非常便宜地得到。他们再也无法雇佣聪明的人了，但他们可以购买他们想要的数量，只需多一个数量级的钱。所以如果他们想再次成为竞争者，他们可以这样做：购买所有好的&amp;quot;Web 2.0&amp;quot;创业公司。他们可以用比必须为Facebook支付的少的钱获得几乎所有这些公司。把它们都放在硅谷的一栋楼里，用铅屏蔽包围它们，保护它们不受雷德蒙德的任何接触。我建议这个很安全，因为他们永远不会这样做。微软最大的弱点是他们仍然没有意识到他们有多么糟糕。他们仍然认为他们可以在内部编写软件。也许他们可以，按照桌面世界的标准。但那个世界几年前就结束了。&lt;/p&gt;&#xA;&lt;p&gt;我已经知道人们对这篇论文的反应会是什么。一半的读者会说微软仍然是一家利润极其丰厚的公司，我应该更小心，不要基于我们与世隔绝的&amp;quot;Web 2.0&amp;quot;小泡泡中少数人的想法得出结论。另一半，年轻的一半，会抱怨这是旧闻。&lt;/p&gt;&#xA;&lt;p&gt;另见：微软已死：Cliffs Notes&lt;/p&gt;&#xA;&lt;p&gt;注释&lt;/p&gt;&#xA;&lt;p&gt;[1] 制作不兼容的软件不需要有意识的努力。你所要做的就是不太努力地修复错误——如果你是一家大公司，你会产生大量的错误。这种情况类似于&amp;quot;文学理论家&amp;quot;的写作。大多数人不试图晦涩；他们只是不努力做到清晰。这不会带来回报。&lt;/p&gt;&#xA;&lt;p&gt;[2] 部分原因是史蒂夫·乔布斯被约翰·斯卡利推走，这在技术公司中是罕见的。如果苹果的董事会没有犯那个错误，他们就不必反弹。&lt;/p&gt;&#xA;&lt;p&gt;葡萄牙语翻译&lt;/p&gt;&#xA;&lt;p&gt;简体中文翻译&lt;/p&gt;&#xA;&lt;p&gt;韩语翻译&lt;/p&gt;</description>
    </item>
    <item>
      <title>苹果的错误</title>
      <link>https://linguage.github.io/paul_graham/essays_zh/apple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_zh/apple/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;https://linguage.github.io/paul_graham/essays_en/apple/&#34;&gt;English Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;苹果的错误&#34;&gt;苹果的错误&lt;/h1&gt;&#xA;&lt;p&gt;2009年11月&lt;/p&gt;&#xA;&lt;p&gt;我认为苹果没有意识到App Store审批流程有多糟糕。或者说，我认为他们没有意识到这有多重要。&lt;/p&gt;&#xA;&lt;p&gt;苹果运营App Store的方式损害了他们在程序员中的声誉，超过了他们做过的任何其他事情。他们在程序员中的声誉曾经很好。过去你听到的关于苹果最常见的抱怨是，他们的粉丝盲目崇拜他们。App Store改变了这一点。现在很多程序员开始把苹果视为邪恶。&lt;/p&gt;&#xA;&lt;p&gt;苹果曾经与程序员之间的良好意愿有多少因为App Store而丧失了？三分之一？一半？而这还只是到目前为止。App Store是一个持续的因果报应泄露。&lt;/p&gt;&#xA;&lt;h2 id=&#34;苹果是如何陷入这个混乱局面的&#34;&gt;苹果是如何陷入这个混乱局面的？&lt;/h2&gt;&#xA;&lt;p&gt;他们的根本问题是他们不理解软件。&lt;/p&gt;&#xA;&lt;p&gt;他们对待iPhone应用就像对待他们通过iTunes销售的音乐一样。苹果是渠道；他们拥有用户；如果你想接触用户，你就必须按照他们的条件来做。唱片公司勉强同意了。但这种模式不适用于软件。中介拥有用户是行不通的。软件业在1980年代初期就认识到这一点，当时像VisiCorp这样的公司表明，虽然&amp;quot;软件&amp;quot;和&amp;quot;出版商&amp;quot;这两个词很契合，但基本概念并不契合。软件不像音乐或书籍。对于第三方来说，作为开发者和用户之间的中介太复杂了。然而，这正是苹果通过App Store试图成为的：软件出版商。而且是一个特别越界的出版商，有着挑剔的品味和严格执行的内部风格。&lt;/p&gt;&#xA;&lt;p&gt;如果软件出版在1980年行不通，那么在软件开发从少数大型发布演变为持续的小型发布流的今天，它就更行不通了。但苹果也不理解这一点。他们的产品开发模式来自硬件。他们工作直到认为产品完成，然后发布。对于硬件你必须这样做，但因为软件很容易改变，其设计可以从进化中受益。现在开发应用程序的标准方式是快速发布和迭代。这意味着每次发布新版本时都有漫长而随机的延迟是灾难性的。&lt;/p&gt;&#xA;&lt;p&gt;显然，苹果的态度是开发者在向App Store提交新版本时应该更加小心。他们会这么说。但尽管他们很强大，却不足以扭转技术的演变。程序员使用快速发布和迭代不是出于懒惰。他们使用它是因为它能产生最好的结果。通过阻碍这个过程，苹果让他们做糟糕的工作，程序员讨厌这一点，就像苹果自己讨厌一样。&lt;/p&gt;&#xA;&lt;p&gt;如果苹果在发现OS X中的严重错误时，不能立即发布软件更新，而是必须将代码提交给一个中介，这个中介将代码搁置一个月，然后因为它包含一个他们不喜欢的图标而拒绝它，苹果会喜欢吗？&lt;/p&gt;&#xA;&lt;p&gt;通过破坏软件开发，苹果得到了与他们意图相反的结果：当前在App Store中可用的应用版本往往是旧的和有错误的。一个开发者告诉我：&amp;ldquo;由于他们的流程，App Store充满了半成品应用程序。我几乎每天都制作一个新版本发布给测试用户。App Store上的版本感觉老旧和糟糕。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;我相信很多开发者都有这种感觉：一种情绪是&amp;quot;我并不真正为App Store里的东西感到骄傲&amp;quot;，另一种情绪是&amp;quot;说真的，这是苹果的错。&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;另一个人写道：&amp;ldquo;我认为他们认为审批流程通过确保质量来帮助用户。实际上，像我们这样的错误总是能通过，然后需要4-8周才能让这个错误修复得到批准，让用户认为iPhone应用有时就是无法工作。对苹果来说更糟糕的是，这些应用在其他有即时审批流程的平台上工作得很好。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;实际上，我认为苹果有第三个误解：所有关于App Store审批的抱怨都不是一个严重的问题。他们肯定听到开发者在抱怨。但合作伙伴和供应商总是在抱怨。如果他们不抱怨反而是个坏迹象；这意味着你对他们太宽松了。同时，iPhone的销售情况比以往任何时候都好。那么他们为什么需要修复任何东西呢？&lt;/p&gt;&#xA;&lt;p&gt;他们在短期内能够虐待开发者，是因为他们制造了如此出色的硬件。几天前我刚买了一台新的27英寸iMac。它很棒。屏幕太亮了，磁盘出奇地响，但它如此美丽，让你无法让自己在意。&lt;/p&gt;&#xA;&lt;p&gt;所以我买了它，但这次是带着疑虑买的。我感觉就像购买一个人权记录不佳的国家制造的东西时的感觉。这是新的。过去我从苹果买东西时是一种纯粹的快乐。哦，天啊！他们制造了这么棒的东西。这次感觉像是浮士德式的交易。他们制造了这么棒的东西，但他们却是如此混蛋。我真的想支持这家公司吗？&lt;/p&gt;&#xA;&lt;h2 id=&#34;苹果应该关心像我这样的人的想法吗&#34;&gt;苹果应该关心像我这样的人的想法吗？&lt;/h2&gt;&#xA;&lt;p&gt;如果他们疏远了一小部分用户，这有什么区别？&lt;/p&gt;&#xA;&lt;p&gt;有几个原因他们应该关心。一个是这些用户是他们想要作为员工的人。如果你的公司看起来邪恶，最好的程序员不会为你工作。从90年代开始，这对微软伤害很大。程序员开始为在那里工作感到尴尬。感觉像是出卖自己。当微软的人和其他程序员交谈并提到他们工作的地方时，有很多关于&amp;quot;投靠黑暗面&amp;quot;的自嘲笑话。&lt;/p&gt;&#xA;&lt;p&gt;但对微软来说真正的问题不是他们雇用的人的尴尬。而是他们从未得到的人。你知道谁得到了他们吗？谷歌和苹果。如果微软是帝国，他们就是反抗军联盟。谷歌和苹果今天比微软做得好得多，很大程度上是因为他们得到了更多最好的人才。&lt;/p&gt;&#xA;&lt;p&gt;为什么程序员对雇主的道德如此挑剔？部分原因是他们有能力挑剔。最好的程序员可以在任何他们想的地方工作。他们不必为他们有疑虑的公司工作。&lt;/p&gt;&#xA;&lt;p&gt;但我认为程序员挑剔的另一个原因是邪恶滋生愚蠢。一个通过行使权力获胜的组织开始失去通过做更好的工作获胜的能力。对于一个聪明人来说，在一个最好的想法不是获胜的想法的地方工作并不有趣。我认为谷歌如此热衷于&amp;quot;不作恶&amp;quot;的原因，与其说是为了给外界留下印象，不如说是为了预防自己变得傲慢。&lt;/p&gt;&#xA;&lt;p&gt;迄今为止，这对谷歌有效。他们变得更加官僚化，但除此之外，他们似乎坚持了原来的原则。苹果似乎不太如此。当你现在看著名的1984年广告时，更容易想象苹果是屏幕上的独裁者，而不是拿着锤子的女人。事实上，如果你阅读独裁者的演讲，它听起来与App Store的预言惊人地相似：&amp;ldquo;我们已经战胜了无原则的事实传播。我们已经在历史上第一次创造了一个纯粹思想的花园，每个工人都可以在那里不受矛盾和混乱真理的害虫侵扰而安全地绽放。&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;苹果应该关心程序员对他们的看法的另一个原因是，当你销售一个平台时，开发者决定你的成败。如果说有谁应该知道这一点，那应该是苹果。VisiCalc成就了Apple II。&lt;/p&gt;&#xA;&lt;p&gt;程序员为他们使用的平台构建应用程序。大多数应用程序——大多数创业公司，可能——都源自个人项目。苹果本身就是这样。苹果制造微型计算机是因为史蒂夫·沃兹尼亚克自己想要一个。他买不起小型计算机。微软同样开始为微型计算机制作解释器，因为比尔·盖茨和保罗·艾伦有兴趣使用它们。不构建创始人使用的东西的创业公司是罕见的。&lt;/p&gt;&#xA;&lt;p&gt;有这么多iPhone应用的主要原因是这么多程序员有iPhone。他们可能从文章中知道黑莓有这样那样的市场份额。但实际上就好像RIM不存在一样。如果他们要构建什么东西，他们希望自己能够使用它，这意味着构建iPhone应用。&lt;/p&gt;&#xA;&lt;p&gt;所以程序员继续开发iPhone应用，尽管苹果继续虐待他们。他们就像陷入虐待关系中的人。他们被iPhone如此吸引，无法离开。但他们在寻找出路。一个人写道：&amp;ldquo;虽然我确实很享受为iPhone开发，但他们在App Store上施加的控制并没有给我开发应用程序的动力。事实上，除非绝对必要，否则我不打算再制作任何iPhone应用程序。&amp;rdquo;&lt;/p&gt;&#xA;&lt;h2 id=&#34;有什么能打破这个循环吗&#34;&gt;有什么能打破这个循环吗？&lt;/h2&gt;&#xA;&lt;p&gt;到目前为止我见过的设备都不能。Palm和RIM没有希望。唯一可信的竞争者是Android。但Android是个孤儿；谷歌并不真正关心它，不像苹果关心iPhone那样。苹果关心iPhone就像谷歌关心搜索一样。&lt;/p&gt;&#xA;&lt;h2 id=&#34;手持设备的未来是由苹果锁定的吗&#34;&gt;手持设备的未来是由苹果锁定的吗？&lt;/h2&gt;&#xA;&lt;p&gt;这是一个令人担忧的前景。会有另一个像我们在1990年代那样的沉闷单一文化是件令人沮丧的事。1995年，为终端用户编写软件实际上等同于编写Windows应用程序。我们对这种前景的恐惧是推动我们开始构建Web应用程序的最大单一因素。&lt;/p&gt;&#xA;&lt;p&gt;至少我们现在知道要打破苹果的锁定需要什么。你必须让iPhone离开程序员的手。如果程序员使用其他设备进行移动网络访问，他们会开始为该设备开发应用程序。&lt;/p&gt;&#xA;&lt;p&gt;你如何制造一个比iPhone更受程序员喜爱的设备？你不可能制造出设计更好的设备。苹果在这方面没有留下空间。所以这个替代设备可能无法通过普遍吸引力获胜。它必须凭借对程序员特有的某种吸引力获胜。&lt;/p&gt;&#xA;&lt;p&gt;吸引程序员的一种方式是通过软件。如果你能想出一个程序员必须有但在iPhone受限制世界中不可能的应用程序，你大概能让他们转换。&lt;/p&gt;&#xA;&lt;p&gt;如果程序员开始使用手持设备作为开发机器，这肯定会发生——如果手持设备像笔记本电脑取代台式电脑一样取代笔记本电脑。你对开发机器需要的控制比苹果会让你对iPhone的控制更多。&lt;/p&gt;&#xA;&lt;p&gt;有人能制造一个你可以像手机一样放在口袋里，但同时又能作为开发机器工作的设备吗？很难想象它会是什么样子。但我已经学到了永远不要对技术说永远。按现在的标准，一个能作为开发机器工作的手机大小的设备并不比按1995年的标准iPhone本身看起来更神奇。&lt;/p&gt;&#xA;&lt;p&gt;我现在的开发机器是一台MacBook Air，我在办公室里用它连接外接显示器和键盘，旅行时单独使用。如果有半个大小的版本我会更喜欢。那仍然不足以像手机一样随身携带到处带着，但我们还在4倍左右的差距内。当然这个差距是可以弥合的。&lt;/p&gt;&#xA;&lt;p&gt;事实上，让我们把它变成一个RFS（需求说明书）。寻人：拿锤子的女人。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;&#xA;&lt;p&gt;[1] 当谷歌采用&amp;quot;不作恶&amp;quot;时，他们还如此之小，以至于没有人会期望他们如此。&lt;/p&gt;&#xA;&lt;p&gt;[2] 顺便说一句，1984年广告中的独裁者不是微软；是IBM。IBM在那些日子里看起来可怕得多，但他们比现在的苹果对开发者更友好。&lt;/p&gt;&#xA;&lt;p&gt;[3] 他甚至买不起显示器。这就是为什么Apple I使用电视机作为显示器。&lt;/p&gt;&#xA;&lt;p&gt;[4] 我交谈的几个人提到他们多么喜欢iPhone SDK。问题不是苹果的产品，而是他们的政策。幸运的是政策是软件；如果他们愿意，苹果可以立即改变它们。很方便，不是吗？&lt;/p&gt;&#xA;&lt;p&gt;感谢Sam Altman、Trevor Blackwell、Ross Boucher、James Bracy、Gabor Cselle、Patrick Collison、Jason Freedman、John Gruber、Joe Hewitt、Jessica Livingston、Robert Morris、Teng Siong Ong、Nikhil Pandit、Savraj Singh和Jared Tame阅读本文草稿。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
