<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>英文版 on Linguage</title>
    <link>https://linguage.github.io/paul_graham/essays_en/</link>
    <description>Recent content in 英文版 on Linguage</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://linguage.github.io/paul_graham/essays_en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/pinch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/pinch/</guid>
      <description>&lt;h1 id=&#34;pinch&#34;&gt;Pinch&lt;/h1&gt;&#xA;&lt;p&gt;The Fatal Pinch December 2014Many startups go through a point a few months before they die where although they have a significant amount of money in the bank, they&amp;rsquo;re also losing a lot each month, and revenue growth is either nonexistent or mediocre. The company has, say, 6 months of runway. Or to put it more brutally, 6 months before they&amp;rsquo;re out of business. They expect to avoid that by raising more from investors. [1]That last sentence is the fatal one.There may be nothing founders are so prone to delude themselves about as how interested investors will be in giving them additional funding. It&amp;rsquo;s hard to convince investors the first time too, but founders expect that. What bites them the second time is a confluence of three forces: The company is spending more now than it did the first time it raised money. Investors have much higher standards for companies that have already raised money. The company is now starting to read as a failure. The first time it raised money, it was neither a success nor a failure; it was too early to ask. Now it&amp;rsquo;s possible to ask that question, and the default answer is failure, because at this point that is the default outcome. I&amp;rsquo;m going to call the situation I described in the first paragraph &amp;ldquo;the fatal pinch.&amp;rdquo; I try to resist coining phrases, but making up a name for this situation may snap founders into realizing when they&amp;rsquo;re in it.One of the things that makes the fatal pinch so dangerous is that it&amp;rsquo;s self-reinforcing. Founders overestimate their chances of raising more money, and so are slack about reaching profitability, which further decreases their chances of raising money.Now that you know about the fatal pinch, how do you avoid it? Y Combinator tells founders who raise money to act as if it&amp;rsquo;s the last they&amp;rsquo;ll ever get. Because the self-reinforcing nature of this situation works the other way too: the less you need further investment, the easier it is to get.What do you do if you&amp;rsquo;re already in the fatal pinch? The first step is to re-evaluate the probability of raising more money. I will now, by an amazing feat of clairvoyance, do this for you: the probability is zero. [2]Three options remain: you can shut down the company, you can increase how much you make, and you can decrease how much you spend.You should shut down the company if you&amp;rsquo;re certain it will fail no matter what you do. Then at least you can give back the money you have left, and save yourself however many months you would have spent riding it down.Companies rarely have to fail though. What I&amp;rsquo;m really doing here is giving you the option of admitting you&amp;rsquo;ve already given up.If you don&amp;rsquo;t want to shut down the company, that leaves increasing revenues and decreasing expenses. In most startups, expenses = people, and decreasing expenses = firing people. [3] Deciding to fire people is usually hard, but there&amp;rsquo;s one case in which it shouldn&amp;rsquo;t be: when there are people you already know you should fire but you&amp;rsquo;re in denial about it. If so, now&amp;rsquo;s the time.If that makes you profitable, or will enable you to make it to profitability on the money you have left, you&amp;rsquo;ve avoided the immediate danger.Otherwise you have three options: you either have to fire good people, get some or all of the employees to take less salary for a while, or increase revenues.Getting people to take less salary is a weak solution that will only work when the problem isn&amp;rsquo;t too bad. If your current trajectory won&amp;rsquo;t quite get you to profitability but you can get over the threshold by cutting salaries a little, you might be able to make the case to everyone for doing it. Otherwise you&amp;rsquo;re probably just postponing the problem, and that will be obvious to the people whose salaries you&amp;rsquo;re proposing to cut. [4]Which leaves two options, firing good people and making more money. While trying to balance them, keep in mind the eventual goal: to be a successful product company in the sense of having a single thing lots of people use.You should lean more toward firing people if the source of your trouble is overhiring. If you went out and hired 15 people before you even knew what you were building, you&amp;rsquo;ve created a broken company. You need to figure out what you&amp;rsquo;re building, and it will probably be easier to do that with a handful of people than 15. Plus those 15 people might not even be the ones you need for whatever you end up building. So the solution may be to shrink and then figure out what direction to grow in. After all, you&amp;rsquo;re not doing those 15 people any favors if you fly the company into ground with them aboard. They&amp;rsquo;ll all lose their jobs eventually, along with all the time they expended on this doomed company.Whereas if you only have a handful of people, it may be better to focus on trying to make more money. It may seem facile to suggest a startup make more money, as if that could be done for the asking. Usually a startup is already trying as hard as it can to sell whatever it sells. What I&amp;rsquo;m suggesting here is not so much to try harder to make money but to try to make money in a different way. For example, if you have only one person selling while the rest are writing code, consider having everyone work on selling. What good will more code do you when you&amp;rsquo;re out of business? If you have to write code to close a certain deal, go ahead; that follows from everyone working on selling. But only work on whatever will get you the most revenue the soonest.Another way to make money differently is to sell different things, and in particular to do more consultingish work. I say consultingish because there is a long slippery slope from making products to pure consulting, and you don&amp;rsquo;t have to go far down it before you start to offer something really attractive to customers. Although your product may not be very appealing yet, if you&amp;rsquo;re a startup your programmers will often be way better than the ones your customers have. Or you may have expertise in some new field they don&amp;rsquo;t understand. So if you change your sales conversations just a little from &amp;ldquo;do you want to buy our product?&amp;rdquo; to &amp;ldquo;what do you need that you&amp;rsquo;d pay a lot for?&amp;rdquo; you may find it&amp;rsquo;s suddenly a lot easier to extract money from customers.Be ruthlessly mercenary when you start doing this, though. You&amp;rsquo;re trying to save your company from death here, so make customers pay a lot, quickly. And to the extent you can, try to avoid the worst pitfalls of consulting. The ideal thing might be if you built a precisely defined derivative version of your product for the customer, and it was otherwise a straight product sale. You keep the IP and no billing by the hour.In the best case, this consultingish work may not be just something you do to survive, but may turn out to be the thing-that-doesn&amp;rsquo;t-scale that defines your company. Don&amp;rsquo;t expect it to be, but as you dive into individual users&amp;rsquo; needs, keep your eyes open for narrow openings that have wide vistas beyond.There is usually so much demand for custom work that unless you&amp;rsquo;re really incompetent there has to be some point down the slope of consulting at which you can survive. But I didn&amp;rsquo;t use the term slippery slope by accident; customers&amp;rsquo; insatiable demand for custom work will always be pushing you toward the bottom. So while you&amp;rsquo;ll probably survive, the problem now becomes to survive with the least damage and distraction.The good news is, plenty of successful startups have passed through near-death experiences and gone on to flourish. You just have to realize in time that you&amp;rsquo;re near death. And if you&amp;rsquo;re in the fatal pinch, you are. Notes[1] There are a handful of companies that can&amp;rsquo;t reasonably expect to make money for the first year or two, because what they&amp;rsquo;re building takes so long. For these companies substitute &amp;ldquo;progress&amp;rdquo; for &amp;ldquo;revenue growth.&amp;rdquo; You&amp;rsquo;re not one of these companies unless your initial investors agreed in advance that you were. And frankly even these companies wish they weren&amp;rsquo;t, because the illiquidity of &amp;ldquo;progress&amp;rdquo; puts them at the mercy of investors.[2] There&amp;rsquo;s a variant of the fatal pinch where your existing investors help you along by promising to invest more. Or rather, where you read them as promising to invest more, while they think they&amp;rsquo;re just mentioning the possibility. The way to solve this problem, if you have 8 months of runway or less, is to try to get the money right now. Then you&amp;rsquo;ll either get the money, in which case (immediate) problem solved, or at least prevent your investors from helping you to remain in denial about your fundraising prospects.[3] Obviously, if you have significant expenses other than salaries that you can eliminate, do it now.[4] Unless of course the source of the problem is that you&amp;rsquo;re paying yourselves high salaries. If by cutting the founders&amp;rsquo; salaries to the minimum you need, you can make it to profitability, you should. But it&amp;rsquo;s a bad sign if you needed to read this to realize that. Thanks to Sam Altman, Paul Buchheit, Jessica Livingston, and Geoff Ralston for reading drafts of this.Arabic Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/polls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/polls/</guid>
      <description>&lt;h1 id=&#34;polls&#34;&gt;Polls&lt;/h1&gt;&#xA;&lt;p&gt;Bradley&amp;rsquo;s Ghost November 2004 A lot of people are writing now about why Kerry lost. Here I want to examine a more specific question: why were the exit polls so wrong?In Ohio, which Kerry ultimately lost 49-51, exit polls gave him a 52-48 victory. And this wasn&amp;rsquo;t just random error. In every swing state they overestimated the Kerry vote. In Florida, which Bush ultimately won 52-47, exit polls predicted a dead heat.(These are not early numbers. They&amp;rsquo;re from about midnight eastern time, long after polls closed in Ohio and Florida. And yet by the next afternoon the exit poll numbers online corresponded to the returns. The only way I can imagine this happening is if those in charge of the exit polls cooked the books after seeing the actual returns. But that&amp;rsquo;s another issue.)What happened? The source of the problem may be a variant of the Bradley Effect. This term was invented after Tom Bradley, the black mayor of Los Angeles, lost an election for governor of California despite a comfortable lead in the polls. Apparently voters were afraid to say they planned to vote against him, lest their motives be (perhaps correctly) suspected.It seems likely that something similar happened in exit polls this year. In theory, exit polls ought to be very accurate. You&amp;rsquo;re not asking people what they would do. You&amp;rsquo;re asking what they just did.How can you get errors asking that? Because some people don&amp;rsquo;t respond. To get a truly random sample, pollsters ask, say, every 20th person leaving the polling place who they voted for. But not everyone wants to answer. And the pollsters can&amp;rsquo;t simply ignore those who won&amp;rsquo;t, or their sample isn&amp;rsquo;t random anymore. So what they do, apparently, is note down the age and race and sex of the person, and guess from that who they voted for.This works so long as there is no correlation between who people vote for and whether they&amp;rsquo;re willing to talk about it. But this year there may have been. It may be that a significant number of those who voted for Bush didn&amp;rsquo;t want to say so.Why not? Because people in the US are more conservative than they&amp;rsquo;re willing to admit. The values of the elite in this country, at least at the moment, are NPR values. The average person, as I think both Republicans and Democrats would agree, is more socially conservative. But while some openly flaunt the fact that they don&amp;rsquo;t share the opinions of the elite, others feel a little nervous about it, as if they had bad table manners.For example, according to current NPR values, you can&amp;rsquo;t say anything that might be perceived as disparaging towards homosexuals. To do so is &amp;ldquo;homophobic.&amp;rdquo; And yet a large number of Americans are deeply religious, and the Bible is quite explicit on the subject of homosexuality. What are they to do? I think what many do is keep their opinions, but keep them to themselves.They know what they believe, but they also know what they&amp;rsquo;re supposed to believe. And so when a stranger (for example, a pollster) asks them their opinion about something like gay marriage, they will not always say what they really think.When the values of the elite are liberal, polls will tend to underestimate the conservativeness of ordinary voters. This seems to me the leading theory to explain why the exit polls were so far off this year. NPR values said one ought to vote for Kerry. So all the people who voted for Kerry felt virtuous for doing so, and were eager to tell pollsters they had. No one who voted for Kerry did it as an act of quiet defiance.Support for a Woman PresidentJapanese Translation If you liked this, you may also like Hackers &amp;amp; Painters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/say/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/say/</guid>
      <description>&lt;h1 id=&#34;say&#34;&gt;Say&lt;/h1&gt;&#xA;&lt;p&gt;What You Can&amp;rsquo;t Say January 2004 Have you ever seen an old photo of yourself and been embarrassed at the way you looked? Did we actually dress like that? We did. And we had no idea how silly we looked. It&amp;rsquo;s the nature of fashion to be invisible, in the same way the movement of the earth is invisible to all of us riding on it.What scares me is that there are moral fashions too. They&amp;rsquo;re just as arbitrary, and just as invisible to most people. But they&amp;rsquo;re much more dangerous. Fashion is mistaken for good design; moral fashion is mistaken for good. Dressing oddly gets you laughed at. Violating moral fashions can get you fired, ostracized, imprisoned, or even killed.If you could travel back in a time machine, one thing would be true no matter where you went: you&amp;rsquo;d have to watch what you said. Opinions we consider harmless could have gotten you in big trouble. I&amp;rsquo;ve already said at least one thing that would have gotten me in big trouble in most of Europe in the seventeenth century, and did get Galileo in big trouble when he said it  that the earth moves. [1] It seems to be a constant throughout history: In every period, people believed things that were just ridiculous, and believed them so strongly that you would have gotten in terrible trouble for saying otherwise.Is our time any different? To anyone who has read any amount of history, the answer is almost certainly no. It would be a remarkable coincidence if ours were the first era to get everything just right.It&amp;rsquo;s tantalizing to think we believe things that people in the future will find ridiculous. What would someone coming back to visit us in a time machine have to be careful not to say? That&amp;rsquo;s what I want to study here. But I want to do more than just shock everyone with the heresy du jour. I want to find general recipes for discovering what you can&amp;rsquo;t say, in any era.The Conformist TestLet&amp;rsquo;s start with a test: Do you have any opinions that you would be reluctant to express in front of a group of your peers?If the answer is no, you might want to stop and think about that. If everything you believe is something you&amp;rsquo;re supposed to believe, could that possibly be a coincidence? Odds are it isn&amp;rsquo;t. Odds are you just think what you&amp;rsquo;re told.The other alternative would be that you independently considered every question and came up with the exact same answers that are now considered acceptable. That seems unlikely, because you&amp;rsquo;d also have to make the same mistakes. Mapmakers deliberately put slight mistakes in their maps so they can tell when someone copies them. If another map has the same mistake, that&amp;rsquo;s very convincing evidence.Like every other era in history, our moral map almost certainly contains a few mistakes. And anyone who makes the same mistakes probably didn&amp;rsquo;t do it by accident. It would be like someone claiming they had independently decided in 1972 that bell-bottom jeans were a good idea.If you believe everything you&amp;rsquo;re supposed to now, how can you be sure you wouldn&amp;rsquo;t also have believed everything you were supposed to if you had grown up among the plantation owners of the pre-Civil War South, or in Germany in the 1930s  or among the Mongols in 1200, for that matter? Odds are you would have.Back in the era of terms like &amp;ldquo;well-adjusted,&amp;rdquo; the idea seemed to be that there was something wrong with you if you thought things you didn&amp;rsquo;t dare say out loud. This seems backward. Almost certainly, there is something wrong with you if you don&amp;rsquo;t think things you don&amp;rsquo;t dare say out loud.TroubleWhat can&amp;rsquo;t we say? One way to find these ideas is simply to look at things people do say, and get in trouble for. [2]Of course, we&amp;rsquo;re not just looking for things we can&amp;rsquo;t say. We&amp;rsquo;re looking for things we can&amp;rsquo;t say that are true, or at least have enough chance of being true that the question should remain open. But many of the things people get in trouble for saying probably do make it over this second, lower threshold. No one gets in trouble for saying that 2 + 2 is 5, or that people in Pittsburgh are ten feet tall. Such obviously false statements might be treated as jokes, or at worst as evidence of insanity, but they are not likely to make anyone mad. The statements that make people mad are the ones they worry might be believed. I suspect the statements that make people maddest are those they worry might be true.If Galileo had said that people in Padua were ten feet tall, he would have been regarded as a harmless eccentric. Saying the earth orbited the sun was another matter. The church knew this would set people thinking.Certainly, as we look back on the past, this rule of thumb works well. A lot of the statements people got in trouble for seem harmless now. So it&amp;rsquo;s likely that visitors from the future would agree with at least some of the statements that get people in trouble today. Do we have no Galileos? Not likely.To find them, keep track of opinions that get people in trouble, and start asking, could this be true? Ok, it may be heretical (or whatever modern equivalent), but might it also be true?HeresyThis won&amp;rsquo;t get us all the answers, though. What if no one happens to have gotten in trouble for a particular idea yet? What if some idea would be so radioactively controversial that no one would dare express it in public? How can we find these too?Another approach is to follow that word, heresy. In every period of history, there seem to have been labels that got applied to statements to shoot them down before anyone had a chance to ask if they were true or not. &amp;ldquo;Blasphemy&amp;rdquo;, &amp;ldquo;sacrilege&amp;rdquo;, and &amp;ldquo;heresy&amp;rdquo; were such labels for a good part of western history, as in more recent times &amp;ldquo;indecent&amp;rdquo;, &amp;ldquo;improper&amp;rdquo;, and &amp;ldquo;unamerican&amp;rdquo; have been. By now these labels have lost their sting. They always do. By now they&amp;rsquo;re mostly used ironically. But in their time, they had real force.The word &amp;ldquo;defeatist&amp;rdquo;, for example, has no particular political connotations now. But in Germany in 1917 it was a weapon, used by Ludendorff in a purge of those who favored a negotiated peace. At the start of World War II it was used extensively by Churchill and his supporters to silence their opponents. In 1940, any argument against Churchill&amp;rsquo;s aggressive policy was &amp;ldquo;defeatist&amp;rdquo;. Was it right or wrong? Ideally, no one got far enough to ask that. We have such labels today, of course, quite a lot of them, from the all-purpose &amp;ldquo;inappropriate&amp;rdquo; to the dreaded &amp;ldquo;divisive.&amp;rdquo; In any period, it should be easy to figure out what such labels are, simply by looking at what people call ideas they disagree with besides untrue. When a politician says his opponent is mistaken, that&amp;rsquo;s a straightforward criticism, but when he attacks a statement as &amp;ldquo;divisive&amp;rdquo; or &amp;ldquo;racially insensitive&amp;rdquo; instead of arguing that it&amp;rsquo;s false, we should start paying attention.So another way to figure out which of our taboos future generations will laugh at is to start with the labels. Take a label  &amp;ldquo;sexist&amp;rdquo;, for example  and try to think of some ideas that would be called that. Then for each ask, might this be true?Just start listing ideas at random? Yes, because they won&amp;rsquo;t really be random. The ideas that come to mind first will be the most plausible ones. They&amp;rsquo;ll be things you&amp;rsquo;ve already noticed but didn&amp;rsquo;t let yourself think.In 1989 some clever researchers tracked the eye movements of radiologists as they scanned chest images for signs of lung cancer. [3] They found that even when the radiologists missed a cancerous lesion, their eyes had usually paused at the site of it. Part of their brain knew there was something there; it just didn&amp;rsquo;t percolate all the way up into conscious knowledge. I think many interesting heretical thoughts are already mostly formed in our minds. If we turn off our self-censorship temporarily, those will be the first to emerge.Time and SpaceIf we could look into the future it would be obvious which of our taboos they&amp;rsquo;d laugh at. We can&amp;rsquo;t do that, but we can do something almost as good: we can look into the past. Another way to figure out what we&amp;rsquo;re getting wrong is to look at what used to be acceptable and is now unthinkable.Changes between the past and the present sometimes do represent progress. In a field like physics, if we disagree with past generations it&amp;rsquo;s because we&amp;rsquo;re right and they&amp;rsquo;re wrong. But this becomes rapidly less true as you move away from the certainty of the hard sciences. By the time you get to social questions, many changes are just fashion. The age of consent fluctuates like hemlines.We may imagine that we are a great deal smarter and more virtuous than past generations, but the more history you read, the less likely this seems. People in past times were much like us. Not heroes, not barbarians. Whatever their ideas were, they were ideas reasonable people could believe.So here is another source of interesting heresies. Diff present ideas against those of various past cultures, and see what you get. [4] Some will be shocking by present standards. Ok, fine; but which might also be true?You don&amp;rsquo;t have to look into the past to find big differences. In our own time, different societies have wildly varying ideas of what&amp;rsquo;s ok and what isn&amp;rsquo;t. So you can try diffing other cultures&amp;rsquo; ideas against ours as well. (The best way to do that is to visit them.) Any idea that&amp;rsquo;s considered harmless in a significant percentage of times and places, and yet is taboo in ours, is a candidate for something we&amp;rsquo;re mistaken about.For example, at the high water mark of political correctness in the early 1990s, Harvard distributed to its faculty and staff a brochure saying, among other things, that it was inappropriate to compliment a colleague or student&amp;rsquo;s clothes. No more &amp;ldquo;nice shirt.&amp;rdquo; I think this principle is rare among the world&amp;rsquo;s cultures, past or present. There are probably more where it&amp;rsquo;s considered especially polite to compliment someone&amp;rsquo;s clothing than where it&amp;rsquo;s considered improper. Odds are this is, in a mild form, an example of one of the taboos a visitor from the future would have to be careful to avoid if he happened to set his time machine for Cambridge, Massachusetts, 1992. [5]PrigsOf course, if they have time machines in the future they&amp;rsquo;ll probably have a separate reference manual just for Cambridge. This has always been a fussy place, a town of i dotters and t crossers, where you&amp;rsquo;re liable to get both your grammar and your ideas corrected in the same conversation. And that suggests another way to find taboos. Look for prigs, and see what&amp;rsquo;s inside their heads.Kids&amp;rsquo; heads are repositories of all our taboos. It seems fitting to us that kids&amp;rsquo; ideas should be bright and clean. The picture we give them of the world is not merely simplified, to suit their developing minds, but sanitized as well, to suit our ideas of what kids ought to think. [6]You can see this on a small scale in the matter of dirty words. A lot of my friends are starting to have children now, and they&amp;rsquo;re all trying not to use words like &amp;ldquo;fuck&amp;rdquo; and &amp;ldquo;shit&amp;rdquo; within baby&amp;rsquo;s hearing, lest baby start using these words too. But these words are part of the language, and adults use them all the time. So parents are giving their kids an inaccurate idea of the language by not using them. Why do they do this? Because they don&amp;rsquo;t think it&amp;rsquo;s fitting that kids should use the whole language. We like children to seem innocent. [7]Most adults, likewise, deliberately give kids a misleading view of the world. One of the most obvious examples is Santa Claus. We think it&amp;rsquo;s cute for little kids to believe in Santa Claus. I myself think it&amp;rsquo;s cute for little kids to believe in Santa Claus. But one wonders, do we tell them this stuff for their sake, or for ours?I&amp;rsquo;m not arguing for or against this idea here. It is probably inevitable that parents should want to dress up their kids&amp;rsquo; minds in cute little baby outfits. I&amp;rsquo;ll probably do it myself. The important thing for our purposes is that, as a result, a well brought-up teenage kid&amp;rsquo;s brain is a more or less complete collection of all our taboos  and in mint condition, because they&amp;rsquo;re untainted by experience. Whatever we think that will later turn out to be ridiculous, it&amp;rsquo;s almost certainly inside that head.How do we get at these ideas? By the following thought experiment. Imagine a kind of latter-day Conrad character who has worked for a time as a mercenary in Africa, for a time as a doctor in Nepal, for a time as the manager of a nightclub in Miami. The specifics don&amp;rsquo;t matter  just someone who has seen a lot. Now imagine comparing what&amp;rsquo;s inside this guy&amp;rsquo;s head with what&amp;rsquo;s inside the head of a well-behaved sixteen year old girl from the suburbs. What does he think that would shock her? He knows the world; she knows, or at least embodies, present taboos. Subtract one from the other, and the result is what we can&amp;rsquo;t say. MechanismI can think of one more way to figure out what we can&amp;rsquo;t say: to look at how taboos are created. How do moral fashions arise, and why are they adopted? If we can understand this mechanism, we may be able to see it at work in our own time.Moral fashions don&amp;rsquo;t seem to be created the way ordinary fashions are. Ordinary fashions seem to arise by accident when everyone imitates the whim of some influential person. The fashion for broad-toed shoes in late fifteenth century Europe began because Charles VIII of France had six toes on one foot. The fashion for the name Gary began when the actor Frank Cooper adopted the name of a tough mill town in Indiana. Moral fashions more often seem to be created deliberately. When there&amp;rsquo;s something we can&amp;rsquo;t say, it&amp;rsquo;s often because some group doesn&amp;rsquo;t want us to.The prohibition will be strongest when the group is nervous. The irony of Galileo&amp;rsquo;s situation was that he got in trouble for repeating Copernicus&amp;rsquo;s ideas. Copernicus himself didn&amp;rsquo;t. In fact, Copernicus was a canon of a cathedral, and dedicated his book to the pope. But by Galileo&amp;rsquo;s time the church was in the throes of the Counter-Reformation and was much more worried about unorthodox ideas.To launch a taboo, a group has to be poised halfway between weakness and power. A confident group doesn&amp;rsquo;t need taboos to protect it. It&amp;rsquo;s not considered improper to make disparaging remarks about Americans, or the English. And yet a group has to be powerful enough to enforce a taboo. Coprophiles, as of this writing, don&amp;rsquo;t seem to be numerous or energetic enough to have had their interests promoted to a lifestyle.I suspect the biggest source of moral taboos will turn out to be power struggles in which one side only barely has the upper hand. That&amp;rsquo;s where you&amp;rsquo;ll find a group powerful enough to enforce taboos, but weak enough to need them.Most struggles, whatever they&amp;rsquo;re really about, will be cast as struggles between competing ideas. The English Reformation was at bottom a struggle for wealth and power, but it ended up being cast as a struggle to preserve the souls of Englishmen from the corrupting influence of Rome. It&amp;rsquo;s easier to get people to fight for an idea. And whichever side wins, their ideas will also be considered to have triumphed, as if God wanted to signal his agreement by selecting that side as the victor.We often like to think of World War II as a triumph of freedom over totalitarianism. We conveniently forget that the Soviet Union was also one of the winners.I&amp;rsquo;m not saying that struggles are never about ideas, just that they will always be made to seem to be about ideas, whether they are or not. And just as there is nothing so unfashionable as the last, discarded fashion, there is nothing so wrong as the principles of the most recently defeated opponent. Representational art is only now recovering from the approval of both Hitler and Stalin. [8]Although moral fashions tend to arise from different sources than fashions in clothing, the mechanism of their adoption seems much the same. The early adopters will be driven by ambition: self-consciously cool people who want to distinguish themselves from the common herd. As the fashion becomes established they&amp;rsquo;ll be joined by a second, much larger group, driven by fear. [9] This second group adopt the fashion not because they want to stand out but because they are afraid of standing out.So if you want to figure out what we can&amp;rsquo;t say, look at the machinery of fashion and try to predict what it would make unsayable. What groups are powerful but nervous, and what ideas would they like to suppress? What ideas were tarnished by association when they ended up on the losing side of a recent struggle? If a self-consciously cool person wanted to differentiate himself from preceding fashions (e.g. from his parents), which of their ideas would he tend to reject? What are conventional-minded people afraid of saying?This technique won&amp;rsquo;t find us all the things we can&amp;rsquo;t say. I can think of some that aren&amp;rsquo;t the result of any recent struggle. Many of our taboos are rooted deep in the past. But this approach, combined with the preceding four, will turn up a good number of unthinkable ideas.WhySome would ask, why would one want to do this? Why deliberately go poking around among nasty, disreputable ideas? Why look under rocks?I do it, first of all, for the same reason I did look under rocks as a kid: plain curiosity. And I&amp;rsquo;m especially curious about anything that&amp;rsquo;s forbidden. Let me see and decide for myself.Second, I do it because I don&amp;rsquo;t like the idea of being mistaken. If, like other eras, we believe things that will later seem ridiculous, I want to know what they are so that I, at least, can avoid believing them.Third, I do it because it&amp;rsquo;s good for the brain. To do good work you need a brain that can go anywhere. And you especially need a brain that&amp;rsquo;s in the habit of going where it&amp;rsquo;s not supposed to.Great work tends to grow out of ideas that others have overlooked, and no idea is so overlooked as one that&amp;rsquo;s unthinkable. Natural selection, for example. It&amp;rsquo;s so simple. Why didn&amp;rsquo;t anyone think of it before? Well, that is all too obvious. Darwin himself was careful to tiptoe around the implications of his theory. He wanted to spend his time thinking about biology, not arguing with people who accused him of being an atheist.In the sciences, especially, it&amp;rsquo;s a great advantage to be able to question assumptions. The m.o. of scientists, or at least of the good ones, is precisely that: look for places where conventional wisdom is broken, and then try to pry apart the cracks and see what&amp;rsquo;s underneath. That&amp;rsquo;s where new theories come from.A good scientist, in other words, does not merely ignore conventional wisdom, but makes a special effort to break it. Scientists go looking for trouble. This should be the m.o. of any scholar, but scientists seem much more willing to look under rocks. [10]Why? It could be that the scientists are simply smarter; most physicists could, if necessary, make it through a PhD program in French literature, but few professors of French literature could make it through a PhD program in physics. Or it could be because it&amp;rsquo;s clearer in the sciences whether theories are true or false, and this makes scientists bolder. (Or it could be that, because it&amp;rsquo;s clearer in the sciences whether theories are true or false, you have to be smart to get jobs as a scientist, rather than just a good politician.)Whatever the reason, there seems a clear correlation between intelligence and willingness to consider shocking ideas. This isn&amp;rsquo;t just because smart people actively work to find holes in conventional thinking. I think conventions also have less hold over them to start with. You can see that in the way they dress.It&amp;rsquo;s not only in the sciences that heresy pays off. In any competitive field, you can win big by seeing things that others daren&amp;rsquo;t. And in every field there are probably heresies few dare utter. Within the US car industry there is a lot of hand-wringing now about declining market share. Yet the cause is so obvious that any observant outsider could explain it in a second: they make bad cars. And they have for so long that by now the US car brands are antibrands  something you&amp;rsquo;d buy a car despite, not because of. Cadillac stopped being the Cadillac of cars in about 1970. And yet I suspect no one dares say this. [11] Otherwise these companies would have tried to fix the problem.Training yourself to think unthinkable thoughts has advantages beyond the thoughts themselves. It&amp;rsquo;s like stretching. When you stretch before running, you put your body into positions much more extreme than any it will assume during the run. If you can think things so outside the box that they&amp;rsquo;d make people&amp;rsquo;s hair stand on end, you&amp;rsquo;ll have no trouble with the small trips outside the box that people call innovative.Pensieri StrettiWhen you find something you can&amp;rsquo;t say, what do you do with it? My advice is, don&amp;rsquo;t say it. Or at least, pick your battles.Suppose in the future there is a movement to ban the color yellow. Proposals to paint anything yellow are denounced as &amp;ldquo;yellowist&amp;rdquo;, as is anyone suspected of liking the color. People who like orange are tolerated but viewed with suspicion. Suppose you realize there is nothing wrong with yellow. If you go around saying this, you&amp;rsquo;ll be denounced as a yellowist too, and you&amp;rsquo;ll find yourself having a lot of arguments with anti-yellowists. If your aim in life is to rehabilitate the color yellow, that may be what you want. But if you&amp;rsquo;re mostly interested in other questions, being labelled as a yellowist will just be a distraction. Argue with idiots, and you become an idiot.The most important thing is to be able to think what you want, not to say what you want. And if you feel you have to say everything you think, it may inhibit you from thinking improper thoughts. I think it&amp;rsquo;s better to follow the opposite policy. Draw a sharp line between your thoughts and your speech. Inside your head, anything is allowed. Within my head I make a point of encouraging the most outrageous thoughts I can imagine. But, as in a secret society, nothing that happens within the building should be told to outsiders. The first rule of Fight Club is, you do not talk about Fight Club.When Milton was going to visit Italy in the 1630s, Sir Henry Wootton, who had been ambassador to Venice, told him his motto should be &amp;ldquo;i pensieri stretti &amp;amp; il viso sciolto.&amp;rdquo; Closed thoughts and an open face. Smile at everyone, and don&amp;rsquo;t tell them what you&amp;rsquo;re thinking. This was wise advice. Milton was an argumentative fellow, and the Inquisition was a bit restive at that time. But I think the difference between Milton&amp;rsquo;s situation and ours is only a matter of degree. Every era has its heresies, and if you don&amp;rsquo;t get imprisoned for them you will at least get in enough trouble that it becomes a complete distraction.I admit it seems cowardly to keep quiet. When I read about the harassment to which the Scientologists subject their critics [12], or that pro-Israel groups are &amp;ldquo;compiling dossiers&amp;rdquo; on those who speak out against Israeli human rights abuses [13], or about people being sued for violating the DMCA [14], part of me wants to say, &amp;ldquo;All right, you bastards, bring it on.&amp;rdquo; The problem is, there are so many things you can&amp;rsquo;t say. If you said them all you&amp;rsquo;d have no time left for your real work. You&amp;rsquo;d have to turn into Noam Chomsky. [15]The trouble with keeping your thoughts secret, though, is that you lose the advantages of discussion. Talking about an idea leads to more ideas. So the optimal plan, if you can manage it, is to have a few trusted friends you can speak openly to. This is not just a way to develop ideas; it&amp;rsquo;s also a good rule of thumb for choosing friends. The people you can say heretical things to without getting jumped on are also the most interesting to know.Viso Sciolto?I don&amp;rsquo;t think we need the viso sciolto so much as the pensieri stretti. Perhaps the best policy is to make it plain that you don&amp;rsquo;t agree with whatever zealotry is current in your time, but not to be too specific about what you disagree with. Zealots will try to draw you out, but you don&amp;rsquo;t have to answer them. If they try to force you to treat a question on their terms by asking &amp;ldquo;are you with us or against us?&amp;rdquo; you can always just answer &amp;ldquo;neither&amp;rdquo;.Better still, answer &amp;ldquo;I haven&amp;rsquo;t decided.&amp;rdquo; That&amp;rsquo;s what Larry Summers did when a group tried to put him in this position. Explaining himself later, he said &amp;ldquo;I don&amp;rsquo;t do litmus tests.&amp;rdquo; [16] A lot of the questions people get hot about are actually quite complicated. There is no prize for getting the answer quickly.If the anti-yellowists seem to be getting out of hand and you want to fight back, there are ways to do it without getting yourself accused of being a yellowist. Like skirmishers in an ancient army, you want to avoid directly engaging the main body of the enemy&amp;rsquo;s troops. Better to harass them with arrows from a distance.One way to do this is to ratchet the debate up one level of abstraction. If you argue against censorship in general, you can avoid being accused of whatever heresy is contained in the book or film that someone is trying to censor. You can attack labels with meta-labels: labels that refer to the use of labels to prevent discussion. The spread of the term &amp;ldquo;political correctness&amp;rdquo; meant the beginning of the end of political correctness, because it enabled one to attack the phenomenon as a whole without being accused of any of the specific heresies it sought to suppress.Another way to counterattack is with metaphor. Arthur Miller undermined the House Un-American Activities Committee by writing a play, &amp;ldquo;The Crucible,&amp;rdquo; about the Salem witch trials. He never referred directly to the committee and so gave them no way to reply. What could HUAC do, defend the Salem witch trials? And yet Miller&amp;rsquo;s metaphor stuck so well that to this day the activities of the committee are often described as a &amp;ldquo;witch-hunt.&amp;ldquo;Best of all, probably, is humor. Zealots, whatever their cause, invariably lack a sense of humor. They can&amp;rsquo;t reply in kind to jokes. They&amp;rsquo;re as unhappy on the territory of humor as a mounted knight on a skating rink. Victorian prudishness, for example, seems to have been defeated mainly by treating it as a joke. Likewise its reincarnation as political correctness. &amp;ldquo;I am glad that I managed to write &amp;lsquo;The Crucible,&amp;rsquo;&amp;rdquo; Arthur Miller wrote, &amp;ldquo;but looking back I have often wished I&amp;rsquo;d had the temperament to do an absurd comedy, which is what the situation deserved.&amp;rdquo; [17]ABQA Dutch friend says I should use Holland as an example of a tolerant society. It&amp;rsquo;s true they have a long tradition of comparative open-mindedness. For centuries the low countries were the place to go to say things you couldn&amp;rsquo;t say anywhere else, and this helped to make the region a center of scholarship and industry (which have been closely tied for longer than most people realize). Descartes, though claimed by the French, did much of his thinking in Holland.And yet, I wonder. The Dutch seem to live their lives up to their necks in rules and regulations. There&amp;rsquo;s so much you can&amp;rsquo;t do there; is there really nothing you can&amp;rsquo;t say?Certainly the fact that they value open-mindedness is no guarantee. Who thinks they&amp;rsquo;re not open-minded? Our hypothetical prim miss from the suburbs thinks she&amp;rsquo;s open-minded. Hasn&amp;rsquo;t she been taught to be? Ask anyone, and they&amp;rsquo;ll say the same thing: they&amp;rsquo;re pretty open-minded, though they draw the line at things that are really wrong. (Some tribes may avoid &amp;ldquo;wrong&amp;rdquo; as judgemental, and may instead use a more neutral sounding euphemism like &amp;ldquo;negative&amp;rdquo; or &amp;ldquo;destructive&amp;rdquo;.)When people are bad at math, they know it, because they get the wrong answers on tests. But when people are bad at open-mindedness they don&amp;rsquo;t know it. In fact they tend to think the opposite. Remember, it&amp;rsquo;s the nature of fashion to be invisible. It wouldn&amp;rsquo;t work otherwise. Fashion doesn&amp;rsquo;t seem like fashion to someone in the grip of it. It just seems like the right thing to do. It&amp;rsquo;s only by looking from a distance that we see oscillations in people&amp;rsquo;s idea of the right thing to do, and can identify them as fashions.Time gives us such distance for free. Indeed, the arrival of new fashions makes old fashions easy to see, because they seem so ridiculous by contrast. From one end of a pendulum&amp;rsquo;s swing, the other end seems especially far away.To see fashion in your own time, though, requires a conscious effort. Without time to give you distance, you have to create distance yourself. Instead of being part of the mob, stand as far away from it as you can and watch what it&amp;rsquo;s doing. And pay especially close attention whenever an idea is being suppressed. Web filters for children and employees often ban sites containing pornography, violence, and hate speech. What counts as pornography and violence? And what, exactly, is &amp;ldquo;hate speech?&amp;rdquo; This sounds like a phrase out of 1984.Labels like that are probably the biggest external clue. If a statement is false, that&amp;rsquo;s the worst thing you can say about it. You don&amp;rsquo;t need to say that it&amp;rsquo;s heretical. And if it isn&amp;rsquo;t false, it shouldn&amp;rsquo;t be suppressed. So when you see statements being attacked as x-ist or y-ic (substitute your current values of x and y), whether in 1630 or 2030, that&amp;rsquo;s a sure sign that something is wrong. When you hear such labels being used, ask why.Especially if you hear yourself using them. It&amp;rsquo;s not just the mob you need to learn to watch from a distance. You need to be able to watch your own thoughts from a distance. That&amp;rsquo;s not a radical idea, by the way; it&amp;rsquo;s the main difference between children and adults. When a child gets angry because he&amp;rsquo;s tired, he doesn&amp;rsquo;t know what&amp;rsquo;s happening. An adult can distance himself enough from the situation to say &amp;ldquo;never mind, I&amp;rsquo;m just tired.&amp;rdquo; I don&amp;rsquo;t see why one couldn&amp;rsquo;t, by a similar process, learn to recognize and discount the effects of moral fashions.You have to take that extra step if you want to think clearly. But it&amp;rsquo;s harder, because now you&amp;rsquo;re working against social customs instead of with them. Everyone encourages you to grow up to the point where you can discount your own bad moods. Few encourage you to continue to the point where you can discount society&amp;rsquo;s bad moods.How can you see the wave, when you&amp;rsquo;re the water? Always be questioning. That&amp;rsquo;s the only defence. What can&amp;rsquo;t you say? And why?NotesThanks to Sarah Harlin, Trevor Blackwell, Jessica Livingston, Robert Morris, Eric Raymond and Bob van der Zwaan for reading drafts of this essay, and to Lisa Randall, Jackie McDonough, Ryan Stanley and Joel Rainey for conversations about heresy. Needless to say they bear no blame for opinions expressed in it, and especially for opinions not expressed in it.Re: What You Can&amp;rsquo;t SayLabelsJapanese TranslationFrench TranslationGerman TranslationDutch TranslationRomanian TranslationHebrew TranslationTurkish TranslationChinese TranslationButtonsA Civic Duty to AnnoyThe Perils of ObedienceAliens Cause Global WarmingHays CodeStratagem 32Conspiracy TheoriesMark Twain: Corn-pone OpinionsA Blacklist for &amp;ldquo;Excuse Makers&amp;quot;What You Can&amp;rsquo;t Say Will Hurt You&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/schlep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/schlep/</guid>
      <description>&lt;h1 id=&#34;schlep&#34;&gt;Schlep&lt;/h1&gt;&#xA;&lt;p&gt;Schlep Blindness Want to start a startup? Get funded by Y Combinator. January 2012There are great startup ideas lying around unexploited right under our noses. One reason we don&amp;rsquo;t see them is a phenomenon I call schlep blindness. Schlep was originally a Yiddish word but has passed into general use in the US. It means a tedious, unpleasant task.No one likes schleps, but hackers especially dislike them. Most hackers who start startups wish they could do it by just writing some clever software, putting it on a server somewhere, and watching the money roll in—without ever having to talk to users, or negotiate with other companies, or deal with other people&amp;rsquo;s broken code. Maybe that&amp;rsquo;s possible, but I haven&amp;rsquo;t seen it.One of the many things we do at Y Combinator is teach hackers about the inevitability of schleps. No, you can&amp;rsquo;t start a startup by just writing code. I remember going through this realization myself. There was a point in 1995 when I was still trying to convince myself I could start a company by just writing code. But I soon learned from experience that schleps are not merely inevitable, but pretty much what business consists of. A company is defined by the schleps it will undertake. And schleps should be dealt with the same way you&amp;rsquo;d deal with a cold swimming pool: just jump in. Which is not to say you should seek out unpleasant work per se, but that you should never shrink from it if it&amp;rsquo;s on the path to something great.The most dangerous thing about our dislike of schleps is that much of it is unconscious. Your unconscious won&amp;rsquo;t even let you see ideas that involve painful schleps. That&amp;rsquo;s schlep blindness.The phenomenon isn&amp;rsquo;t limited to startups. Most people don&amp;rsquo;t consciously decide not to be in as good physical shape as Olympic athletes, for example. Their unconscious mind decides for them, shrinking from the work involved.The most striking example I know of schlep blindness is Stripe, or rather Stripe&amp;rsquo;s idea. For over a decade, every hacker who&amp;rsquo;d ever had to process payments online knew how painful the experience was. Thousands of people must have known about this problem. And yet when they started startups, they decided to build recipe sites, or aggregators for local events. Why? Why work on problems few care much about and no one will pay for, when you could fix one of the most important components of the world&amp;rsquo;s infrastructure? Because schlep blindness prevented people from even considering the idea of fixing payments.Probably no one who applied to Y Combinator to work on a recipe site began by asking &amp;ldquo;should we fix payments, or build a recipe site?&amp;rdquo; and chose the recipe site. Though the idea of fixing payments was right there in plain sight, they never saw it, because their unconscious mind shrank from the complications involved. You&amp;rsquo;d have to make deals with banks. How do you do that? Plus you&amp;rsquo;re moving money, so you&amp;rsquo;re going to have to deal with fraud, and people trying to break into your servers. Plus there are probably all sorts of regulations to comply with. It&amp;rsquo;s a lot more intimidating to start a startup like this than a recipe site.That scariness makes ambitious ideas doubly valuable. In addition to their intrinsic value, they&amp;rsquo;re like undervalued stocks in the sense that there&amp;rsquo;s less demand for them among founders. If you pick an ambitious idea, you&amp;rsquo;ll have less competition, because everyone else will have been frightened off by the challenges involved. (This is also true of starting a startup generally.)How do you overcome schlep blindness? Frankly, the most valuable antidote to schlep blindness is probably ignorance. Most successful founders would probably say that if they&amp;rsquo;d known when they were starting their company about the obstacles they&amp;rsquo;d have to overcome, they might never have started it. Maybe that&amp;rsquo;s one reason the most successful startups of all so often have young founders.In practice the founders grow with the problems. But no one seems able to foresee that, not even older, more experienced founders. So the reason younger founders have an advantage is that they make two mistakes that cancel each other out. They don&amp;rsquo;t know how much they can grow, but they also don&amp;rsquo;t know how much they&amp;rsquo;ll need to. Older founders only make the first mistake.Ignorance can&amp;rsquo;t solve everything though. Some ideas so obviously entail alarming schleps that anyone can see them. How do you see ideas like that? The trick I recommend is to take yourself out of the picture. Instead of asking &amp;ldquo;what problem should I solve?&amp;rdquo; ask &amp;ldquo;what problem do I wish someone else would solve for me?&amp;rdquo; If someone who had to process payments before Stripe had tried asking that, Stripe would have been one of the first things they wished for.It&amp;rsquo;s too late now to be Stripe, but there&amp;rsquo;s plenty still broken in the world, if you know how to see it.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Aaron Iba, Jessica Livingston, Emmett Shear, and Harj Taggar for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/seesv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/seesv/</guid>
      <description>&lt;h1 id=&#34;seesv&#34;&gt;Seesv&lt;/h1&gt;&#xA;&lt;p&gt;Where to See Silicon Valley Want to start a startup? Get funded by Y Combinator. October 2010Silicon Valley proper is mostly suburban sprawl. At first glance it doesn&amp;rsquo;t seem there&amp;rsquo;s anything to see. It&amp;rsquo;s not the sort of place that has conspicuous monuments. But if you look, there are subtle signs you&amp;rsquo;re in a place that&amp;rsquo;s different from other places.1. Stanford UniversityStanford is a strange place. Structurally it is to an ordinary university what suburbia is to a city. It&amp;rsquo;s enormously spread out, and feels surprisingly empty much of the time. But notice the weather. It&amp;rsquo;s probably perfect. And notice the beautiful mountains to the west. And though you can&amp;rsquo;t see it, cosmopolitan San Francisco is 40 minutes to the north. That combination is much of the reason Silicon Valley grew up around this university and not some other one.2. University AveA surprising amount of the work of the Valley is done in the cafes on or just off University Ave in Palo Alto. If you visit on a weekday between 10 and 5, you&amp;rsquo;ll often see founders pitching investors. In case you can&amp;rsquo;t tell, the founders are the ones leaning forward eagerly, and the investors are the ones sitting back with slightly pained expressions.3. The Lucky OfficeThe office at 165 University Ave was Google&amp;rsquo;s first. Then it was Paypal&amp;rsquo;s. (Now it&amp;rsquo;s Wepay&amp;rsquo;s.) The interesting thing about it is the location. It&amp;rsquo;s a smart move to put a startup in a place with restaurants and people walking around instead of in an office park, because then the people who work there want to stay there, instead of fleeing as soon as conventional working hours end. They go out for dinner together, talk about ideas, and then come back and implement them.It&amp;rsquo;s important to realize that Google&amp;rsquo;s current location in an office park is not where they started; it&amp;rsquo;s just where they were forced to move when they needed more space. Facebook was till recently across the street, till they too had to move because they needed more space.4. Old Palo AltoPalo Alto was not originally a suburb. For the first 100 years or so of its existence, it was a college town out in the countryside. Then in the mid 1950s it was engulfed in a wave of suburbia that raced down the peninsula. But Palo Alto north of Oregon expressway still feels noticeably different from the area around it. It&amp;rsquo;s one of the nicest places in the Valley. The buildings are old (though increasingly they are being torn down and replaced with generic McMansions) and the trees are tall. But houses are very expensive—around $1000 per square foot. This is post-exit Silicon Valley. 5. Sand Hill RoadIt&amp;rsquo;s interesting to see the VCs&amp;rsquo; offices on the north side of Sand Hill Road precisely because they&amp;rsquo;re so boringly uniform. The buildings are all more or less the same, their exteriors express very little, and they are arranged in a confusing maze. (I&amp;rsquo;ve been visiting them for years and I still occasionally get lost.) It&amp;rsquo;s not a coincidence. These buildings are a pretty accurate reflection of the VC business.If you go on a weekday you may see groups of founders there to meet VCs. But mostly you won&amp;rsquo;t see anyone; bustling is the last word you&amp;rsquo;d use to describe the atmos. Visiting Sand Hill Road reminds you that the opposite of &amp;ldquo;down and dirty&amp;rdquo; would be &amp;ldquo;up and clean.&amp;ldquo;6. Castro StreetIt&amp;rsquo;s a tossup whether Castro Street or University Ave should be considered the heart of the Valley now. University Ave would have been 10 years ago. But Palo Alto is getting expensive. Increasingly startups are located in Mountain View, and Palo Alto is a place they come to meet investors. Palo Alto has a lot of different cafes, but there is one that clearly dominates in Mountain View: Red Rock.7. GoogleGoogle spread out from its first building in Mountain View to a lot of the surrounding ones. But because the buildings were built at different times by different people, the place doesn&amp;rsquo;t have the sterile, walled-off feel that a typical large company&amp;rsquo;s headquarters have. It definitely has a flavor of its own though. You sense there is something afoot. The general atmos is vaguely utopian; there are lots of Priuses, and people who look like they drive them.You can&amp;rsquo;t get into Google unless you know someone there. It&amp;rsquo;s very much worth seeing inside if you can, though. Ditto for Facebook, at the end of California Ave in Palo Alto, though there is nothing to see outside.8. Skyline DriveSkyline Drive runs along the crest of the Santa Cruz mountains. On one side is the Valley, and on the other is the sea—which because it&amp;rsquo;s cold and foggy and has few harbors, plays surprisingly little role in the lives of people in the Valley, considering how close it is. Along some parts of Skyline the dominant trees are huge redwoods, and in others they&amp;rsquo;re live oaks. Redwoods mean those are the parts where the fog off the coast comes in at night; redwoods condense rain out of fog. The MROSD manages a collection of great walking trails off Skyline.9. 280Silicon Valley has two highways running the length of it: 101, which is pretty ugly, and 280, which is one of the more beautiful highways in the world. I always take 280 when I have a choice. Notice the long narrow lake to the west? That&amp;rsquo;s the San Andreas Fault. It runs along the base of the hills, then heads uphill through Portola Valley. One of the MROSD trails runs right along the fault. A string of rich neighborhoods runs along the foothills to the west of 280: Woodside, Portola Valley, Los Altos Hills, Saratoga, Los Gatos.SLAC goes right under 280 a little bit south of Sand Hill Road. And a couple miles south of that is the Valley&amp;rsquo;s equivalent of the &amp;ldquo;Welcome to Las Vegas&amp;rdquo; sign: The Dish. NotesI skipped the Computer History Museum because this is a list of where to see the Valley itself, not where to see artifacts from it. I also skipped San Jose. San Jose calls itself the capital of Silicon Valley, but when people in the Valley use the phrase &amp;ldquo;the city,&amp;rdquo; they mean San Francisco. San Jose is a dotted line on a map.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, and Jessica Livingston for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/segway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/segway/</guid>
      <description>&lt;h1 id=&#34;segway&#34;&gt;Segway&lt;/h1&gt;&#xA;&lt;p&gt;The Trouble with the Segway July 2009The Segway hasn&amp;rsquo;t delivered on its initial promise, to put it mildly. There are several reasons why, but one is that people don&amp;rsquo;t want to be seen riding them. Someone riding a Segway looks like a dork.My friend Trevor Blackwell built his own Segway, which we called the Segwell. He also built a one-wheeled version, the Eunicycle, which looks exactly like a regular unicycle till you realize the rider isn&amp;rsquo;t pedaling. He has ridden them both to downtown Mountain View to get coffee. When he rides the Eunicycle, people smile at him. But when he rides the Segwell, they shout abuse from their cars: &amp;ldquo;Too lazy to walk, ya fuckin homo?&amp;ldquo;Why do Segways provoke this reaction? The reason you look like a dork riding a Segway is that you look smug. You don&amp;rsquo;t seem to be working hard enough.Someone riding a motorcycle isn&amp;rsquo;t working any harder. But because he&amp;rsquo;s sitting astride it, he seems to be making an effort. When you&amp;rsquo;re riding a Segway you&amp;rsquo;re just standing there. And someone who&amp;rsquo;s being whisked along while seeming to do no work — someone in a sedan chair, for example — can&amp;rsquo;t help but look smug.Try this thought experiment and it becomes clear: imagine something that worked like the Segway, but that you rode with one foot in front of the other, like a skateboard. That wouldn&amp;rsquo;t seem nearly as uncool.So there may be a way to capture more of the market Segway hoped to reach: make a version that doesn&amp;rsquo;t look so easy for the rider. It would also be helpful if the styling was in the tradition of skateboards or bicycles rather than medical devices.Curiously enough, what got Segway into this problem was that the company was itself a kind of Segway. It was too easy for them; they were too successful raising money. If they&amp;rsquo;d had to grow the company gradually, by iterating through several versions they sold to real users, they&amp;rsquo;d have learned pretty quickly that people looked stupid riding them. Instead they had enough to work in secret. They had focus groups aplenty, I&amp;rsquo;m sure, but they didn&amp;rsquo;t have the people yelling insults out of cars. So they never realized they were zooming confidently down a blind alley.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/selfindulgence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/selfindulgence/</guid>
      <description>&lt;h1 id=&#34;selfindulgence&#34;&gt;Selfindulgence&lt;/h1&gt;&#xA;&lt;p&gt;How to Lose Time and Money July 2010When we sold our startup in 1998 I suddenly got a lot of money. I now had to think about something I hadn&amp;rsquo;t had to think about before: how not to lose it. I knew it was possible to go from rich to poor, just as it was possible to go from poor to rich. But while I&amp;rsquo;d spent a lot of the past several years studying the paths from poor to rich, I knew practically nothing about the paths from rich to poor. Now, in order to avoid them, I had to learn where they were.So I started to pay attention to how fortunes are lost. If you&amp;rsquo;d asked me as a kid how rich people became poor, I&amp;rsquo;d have said by spending all their money. That&amp;rsquo;s how it happens in books and movies, because that&amp;rsquo;s the colorful way to do it. But in fact the way most fortunes are lost is not through excessive expenditure, but through bad investments.It&amp;rsquo;s hard to spend a fortune without noticing. Someone with ordinary tastes would find it hard to blow through more than a few tens of thousands of dollars without thinking &amp;ldquo;wow, I&amp;rsquo;m spending a lot of money.&amp;rdquo; Whereas if you start trading derivatives, you can lose a million dollars (as much as you want, really) in the blink of an eye.In most people&amp;rsquo;s minds, spending money on luxuries sets off alarms that making investments doesn&amp;rsquo;t. Luxuries seem self-indulgent. And unless you got the money by inheriting it or winning a lottery, you&amp;rsquo;ve already been thoroughly trained that self-indulgence leads to trouble. Investing bypasses those alarms. You&amp;rsquo;re not spending the money; you&amp;rsquo;re just moving it from one asset to another. Which is why people trying to sell you expensive things say &amp;ldquo;it&amp;rsquo;s an investment.&amp;ldquo;The solution is to develop new alarms. This can be a tricky business, because while the alarms that prevent you from overspending are so basic that they may even be in our DNA, the ones that prevent you from making bad investments have to be learned, and are sometimes fairly counterintuitive.A few days ago I realized something surprising: the situation with time is much the same as with money. The most dangerous way to lose time is not to spend it having fun, but to spend it doing fake work. When you spend time having fun, you know you&amp;rsquo;re being self-indulgent. Alarms start to go off fairly quickly. If I woke up one morning and sat down on the sofa and watched TV all day, I&amp;rsquo;d feel like something was terribly wrong. Just thinking about it makes me wince. I&amp;rsquo;d start to feel uncomfortable after sitting on a sofa watching TV for 2 hours, let alone a whole day.And yet I&amp;rsquo;ve definitely had days when I might as well have sat in front of a TV all day — days at the end of which, if I asked myself what I got done that day, the answer would have been: basically, nothing. I feel bad after these days too, but nothing like as bad as I&amp;rsquo;d feel if I spent the whole day on the sofa watching TV. If I spent a whole day watching TV I&amp;rsquo;d feel like I was descending into perdition. But the same alarms don&amp;rsquo;t go off on the days when I get nothing done, because I&amp;rsquo;m doing stuff that seems, superficially, like real work. Dealing with email, for example. You do it sitting at a desk. It&amp;rsquo;s not fun. So it must be work.With time, as with money, avoiding pleasure is no longer enough to protect you. It probably was enough to protect hunter-gatherers, and perhaps all pre-industrial societies. So nature and nurture combine to make us avoid self-indulgence. But the world has gotten more complicated: the most dangerous traps now are new behaviors that bypass our alarms about self-indulgence by mimicking more virtuous types. And the worst thing is, they&amp;rsquo;re not even fun. Thanks to Sam Altman, Trevor Blackwell, Patrick Collison, Jessica Livingston, and Robert Morris for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/sfp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/sfp/</guid>
      <description>&lt;h1 id=&#34;sfp&#34;&gt;Sfp&lt;/h1&gt;&#xA;&lt;p&gt;What I Did this Summer October 2005The first Summer Founders Program has just finished. We were surprised how well it went. Overall only about 10% of startups succeed, but if I had to guess now, I&amp;rsquo;d predict three or four of the eight startups we funded will make it.Of the startups that needed further funding, I believe all have either closed a round or are likely to soon. Two have already turned down (lowball) acquisition offers.We would have been happy if just one of the eight seemed promising by the end of the summer. What&amp;rsquo;s going on? Did some kind of anomaly make this summer&amp;rsquo;s applicants especially good? We worry about that, but we can&amp;rsquo;t think of one. We&amp;rsquo;ll find out this winter.The whole summer was full of surprises. The best was that the hypothesis we were testing seems to be correct. Young hackers can start viable companies. This is good news for two reasons: (a) it&amp;rsquo;s an encouraging thought, and (b) it means that Y Combinator, which is predicated on the idea, is not hosed.AgeMore precisely, the hypothesis was that success in a startup depends mainly on how smart and energetic you are, and much less on how old you are or how much business experience you have. The results so far bear this out. The 2005 summer founders ranged in age from 18 to 28 (average 23), and there is no correlation between their ages and how well they&amp;rsquo;re doing.This should not really be surprising. Bill Gates and Michael Dell were both 19 when they started the companies that made them famous. Young founders are not a new phenomenon: the trend began as soon as computers got cheap enough for college kids to afford them.Another of our hypotheses was that you can start a startup on less money than most people think. Other investors were surprised to hear the most we gave any group was $20,000. But we knew it was possible to start on that little because we started Viaweb on $10,000.And so it proved this summer. Three months&amp;rsquo; funding is enough to get into second gear. We had a demo day for potential investors ten weeks in, and seven of the eight groups had a prototype ready by that time. One, Reddit, had already launched, and were able to give a demo of their live site.A researcher who studied the SFP startups said the one thing they had in common was that they all worked ridiculously hard. People this age are commonly seen as lazy. I think in some cases it&amp;rsquo;s not so much that they lack the appetite for work, but that the work they&amp;rsquo;re offered is unappetizing.The experience of the SFP suggests that if you let motivated people do real work, they work hard, whatever their age. As one of the founders said &amp;ldquo;I&amp;rsquo;d read that starting a startup consumed your life, but I had no idea what that meant until I did it.&amp;ldquo;I&amp;rsquo;d feel guilty if I were a boss making people work this hard. But we&amp;rsquo;re not these people&amp;rsquo;s bosses. They&amp;rsquo;re working on their own projects. And what makes them work is not us but their competitors. Like good athletes, they don&amp;rsquo;t work hard because the coach yells at them, but because they want to win.We have less power than bosses, and yet the founders work harder than employees. It seems like a win for everyone. The only catch is that we get on average only about 5-7% of the upside, while an employer gets nearly all of it. (We&amp;rsquo;re counting on it being 5-7% of a much larger number.)As well as working hard, the groups all turned out to be extraordinarily responsible. I can&amp;rsquo;t think of a time when one failed to do something they&amp;rsquo;d promised to, even by being late for an appointment. This is another lesson the world has yet to learn. One of the founders discovered that the hardest part of arranging a meeting with executives at a big cell phone carrier was getting a rental company to rent him a car, because he was too young.I think the problem here is much the same as with the apparent laziness of people this age. They seem lazy because the work they&amp;rsquo;re given is pointless, and they act irresponsible because they&amp;rsquo;re not given any power. Some of them, anyway. We only have a sample size of about twenty, but it seems so far that if you let people in their early twenties be their own bosses, they rise to the occasion.MoraleThe summer founders were as a rule very idealistic. They also wanted very much to get rich. These qualities might seem incompatible, but they&amp;rsquo;re not. These guys want to get rich, but they want to do it by changing the world. They wouldn&amp;rsquo;t (well, seven of the eight groups wouldn&amp;rsquo;t) be interested in making money by speculating in stocks. They want to make something people use.I think this makes them more effective as founders. As hard as people will work for money, they&amp;rsquo;ll work harder for a cause. And since success in a startup depends so much on motivation, the paradoxical result is that the people likely to make the most money are those who aren&amp;rsquo;t in it just for the money.The founders of Kiko, for example, are working on an Ajax calendar. They want to get rich, but they pay more attention to design than they would if that were their only motivation. You can tell just by looking at it.I never considered it till this summer, but this might be another reason startups run by hackers tend to do better than those run by MBAs. Perhaps it&amp;rsquo;s not just that hackers understand technology better, but that they&amp;rsquo;re driven by more powerful motivations. Microsoft, as I&amp;rsquo;ve said before, is a dangerously misleading example. Their mean corporate culture only works for monopolies. Google is a better model.Considering that the summer founders are the sharks in this ocean, we were surprised how frightened most of them were of competitors. But now that I think of it, we were just as frightened when we started Viaweb. For the first year, our initial reaction to news of a competitor was always: we&amp;rsquo;re doomed. Just as a hypochondriac magnifies his symptoms till he&amp;rsquo;s convinced he has some terrible disease, when you&amp;rsquo;re not used to competitors you magnify them into monsters.Here&amp;rsquo;s a handy rule for startups: competitors are rarely as dangerous as they seem. Most will self-destruct before you can destroy them. And it certainly doesn&amp;rsquo;t matter how many of them there are, any more than it matters to the winner of a marathon how many runners are behind him.&amp;ldquo;It&amp;rsquo;s a crowded market,&amp;rdquo; I remember one founder saying worriedly.&amp;ldquo;Are you the current leader?&amp;rdquo; I asked.&amp;ldquo;Yes.&amp;ldquo;&amp;ldquo;Is anyone able to develop software faster than you?&amp;ldquo;&amp;ldquo;Probably not.&amp;ldquo;&amp;ldquo;Well, if you&amp;rsquo;re ahead now, and you&amp;rsquo;re the fastest, then you&amp;rsquo;ll stay ahead. What difference does it make how many others there are?&amp;ldquo;Another group was worried when they realized they had to rewrite their software from scratch. I told them it would be a bad sign if they didn&amp;rsquo;t. The main function of your initial version is to be rewritten.That&amp;rsquo;s why we advise groups to ignore issues like scalability, internationalization, and heavy-duty security at first. [1] I can imagine an advocate of &amp;ldquo;best practices&amp;rdquo; saying these ought to be considered from the start. And he&amp;rsquo;d be right, except that they interfere with the primary function of software in a startup: to be a vehicle for experimenting with its own design. Having to retrofit internationalization or scalability is a pain, certainly. The only bigger pain is not needing to, because your initial version was too big and rigid to evolve into something users wanted.I suspect this is another reason startups beat big companies. Startups can be irresponsible and release version 1s that are light enough to evolve. In big companies, all the pressure is in the direction of over-engineering.What Got LearnedOne thing we were curious about this summer was where these groups would need help. That turned out to vary a lot. Some we helped with technical advice&amp;ndash; for example, about how to set up an application to run on multiple servers. Most we helped with strategy questions, like what to patent, and what to charge for and what to give away. Nearly all wanted advice about dealing with future investors: how much money should they take and what kind of terms should they expect?However, all the groups quickly learned how to deal with stuff like patents and investors. These problems aren&amp;rsquo;t intrinsically difficult, just unfamiliar.It was surprising&amp;ndash; slightly frightening even&amp;ndash; how fast they learned. The weekend before the demo day for investors, we had a practice session where all the groups gave their presentations. They were all terrible. We tried to explain how to make them better, but we didn&amp;rsquo;t have much hope. So on demo day I told the assembled angels and VCs that these guys were hackers, not MBAs, and so while their software was good, we should not expect slick presentations from them.The groups then proceeded to give fabulously slick presentations. Gone were the mumbling recitations of lists of features. It was as if they&amp;rsquo;d spent the past week at acting school. I still don&amp;rsquo;t know how they did it.Perhaps watching each others&amp;rsquo; presentations helped them see what they&amp;rsquo;d been doing wrong. Just as happens in college, the summer founders learned a lot from one another&amp;ndash; maybe more than they learned from us. A lot of the problems they face are the same, from dealing with investors to hacking Javascript.I don&amp;rsquo;t want to give the impression there were no problems this summer. A lot went wrong, as usually happens with startups. One group got an &amp;ldquo;exploding term-sheet&amp;rdquo; from some VCs. Pretty much all the groups who had dealings with big companies found that big companies do everything infinitely slowly. (This is to be expected. If big companies weren&amp;rsquo;t incapable, there would be no room for startups to exist.) And of course there were the usual nightmares associated with servers. In short, the disasters this summer were just the usual childhood diseases. Some of this summer&amp;rsquo;s eight startups will probably die eventually; it would be extraordinary if all eight succeeded. But what kills them will not be dramatic, external threats, but a mundane, internal one: not getting enough done.So far, though, the news is all good. In fact, we were surprised how much fun the summer was for us. The main reason was how much we liked the founders. They&amp;rsquo;re so earnest and hard-working. They seem to like us too. And this illustrates another advantage of investing over hiring: our relationship with them is way better than it would be between a boss and an employee. Y Combinator ends up being more like an older brother than a parent.I was surprised how much time I spent making introductions. Fortunately I discovered that when a startup needed to talk to someone, I could usually get to the right person by at most one hop. I remember wondering, how did my friends get to be so eminent? and a second later realizing: shit, I&amp;rsquo;m forty.Another surprise was that the three-month batch format, which we were forced into by the constraints of the summer, turned out to be an advantage. When we started Y Combinator, we planned to invest the way other venture firms do: as proposals came in, we&amp;rsquo;d evaluate them and decide yes or no. The SFP was just an experiment to get things started. But it worked so well that we plan to do all our investing this way, one cycle in the summer and one in winter. It&amp;rsquo;s more efficient for us, and better for the startups too.Several groups said our weekly dinners saved them from a common problem afflicting startups: working so hard that one has no social life. (I remember that part all too well.) This way, they were guaranteed a social event at least once a week.IndependenceI&amp;rsquo;ve heard Y Combinator described as an &amp;ldquo;incubator.&amp;rdquo; Actually we&amp;rsquo;re the opposite: incubators exert more control than ordinary VCs, and we make a point of exerting less. Among other things, incubators usually make you work in their office&amp;ndash; that&amp;rsquo;s where the word &amp;ldquo;incubator&amp;rdquo; comes from. That seems the wrong model. If investors get too involved, they smother one of the most powerful forces in a startup: the feeling that it&amp;rsquo;s your own company.Incubators were conspicuous failures during the Bubble. There&amp;rsquo;s still debate about whether this was because of the Bubble, or because they&amp;rsquo;re a bad idea. My vote is they&amp;rsquo;re a bad idea. I think they fail because they select for the wrong people. When we were starting a startup, we would never have taken funding from an &amp;ldquo;incubator.&amp;rdquo; We can find office space, thanks; just give us the money. And people with that attitude are the ones likely to succeed in startups.Indeed, one quality all the founders shared this summer was a spirit of independence. I&amp;rsquo;ve been wondering about that. Are some people just a lot more independent than others, or would everyone be this way if they were allowed to?As with most nature/nurture questions, the answer is probably: some of each. But my main conclusion from the summer is that there&amp;rsquo;s more environment in the mix than most people realize. I could see that from how the founders&amp;rsquo; attitudes changed during the summer. Most were emerging from twenty or so years of being told what to do. They seemed a little surprised at having total freedom. But they grew into it really quickly; some of these guys now seem about four inches taller (metaphorically) than they did at the beginning of the summer.When we asked the summer founders what surprised them most about starting a company, one said &amp;ldquo;the most shocking thing is that it worked.&amp;ldquo;It will take more experience to know for sure, but my guess is that a lot of hackers could do this&amp;ndash; that if you put people in a position of independence, they develop the qualities they need. Throw them off a cliff, and most will find on the way down that they have wings.The reason this is news to anyone is that the same forces work in the other direction too. Most hackers are employees, and this molds you into someone to whom starting a startup seems impossible as surely as starting a startup molds you into someone who can handle it.If I&amp;rsquo;m right, &amp;ldquo;hacker&amp;rdquo; will mean something different in twenty years than it does now. Increasingly it will mean the people who run the company. Y Combinator is just accelerating a process that would have happened anyway. Power is shifting from the people who deal with money to the people who create technology, and if our experience this summer is any guide, this will be a good thing.Notes[1] By heavy-duty security I mean efforts to protect against truly determined attackers.The image shows us, the 2005 summer founders, and Smartleaf co-founders Mark Nitzberg and Olin Shivers at the 30-foot table Kate Courteau designed for us. Photo by Alex Lewin.Thanks to Sarah Harlin, Steve Huffman, Jessica Livingston, Zak Stone, and Aaron Swartz for reading drafts of this. Romanian TranslationJapanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/siliconvalley/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/siliconvalley/</guid>
      <description>&lt;h1 id=&#34;siliconvalley&#34;&gt;Siliconvalley&lt;/h1&gt;&#xA;&lt;p&gt;How to Be Silicon Valley May 2006(This essay is derived from a keynote at Xtech.)Could you reproduce Silicon Valley elsewhere, or is there something unique about it?It wouldn&amp;rsquo;t be surprising if it were hard to reproduce in other countries, because you couldn&amp;rsquo;t reproduce it in most of the US either. What does it take to make a silicon valley even here?What it takes is the right people. If you could get the right ten thousand people to move from Silicon Valley to Buffalo, Buffalo would become Silicon Valley. [1]That&amp;rsquo;s a striking departure from the past. Up till a couple decades ago, geography was destiny for cities. All great cities were located on waterways, because cities made money by trade, and water was the only economical way to ship.Now you could make a great city anywhere, if you could get the right people to move there. So the question of how to make a silicon valley becomes: who are the right people, and how do you get them to move?Two TypesI think you only need two kinds of people to create a technology hub: rich people and nerds. They&amp;rsquo;re the limiting reagents in the reaction that produces startups, because they&amp;rsquo;re the only ones present when startups get started. Everyone else will move.Observation bears this out: within the US, towns have become startup hubs if and only if they have both rich people and nerds. Few startups happen in Miami, for example, because although it&amp;rsquo;s full of rich people, it has few nerds. It&amp;rsquo;s not the kind of place nerds like.Whereas Pittsburgh has the opposite problem: plenty of nerds, but no rich people. The top US Computer Science departments are said to be MIT, Stanford, Berkeley, and Carnegie-Mellon. MIT yielded Route 128. Stanford and Berkeley yielded Silicon Valley. But Carnegie-Mellon? The record skips at that point. Lower down the list, the University of Washington yielded a high-tech community in Seattle, and the University of Texas at Austin yielded one in Austin. But what happened in Pittsburgh? And in Ithaca, home of Cornell, which is also high on the list?I grew up in Pittsburgh and went to college at Cornell, so I can answer for both. The weather is terrible, particularly in winter, and there&amp;rsquo;s no interesting old city to make up for it, as there is in Boston. Rich people don&amp;rsquo;t want to live in Pittsburgh or Ithaca. So while there are plenty of hackers who could start startups, there&amp;rsquo;s no one to invest in them.Not BureaucratsDo you really need the rich people? Wouldn&amp;rsquo;t it work to have the government invest in the nerds? No, it would not. Startup investors are a distinct type of rich people. They tend to have a lot of experience themselves in the technology business. This (a) helps them pick the right startups, and (b) means they can supply advice and connections as well as money. And the fact that they have a personal stake in the outcome makes them really pay attention.Bureaucrats by their nature are the exact opposite sort of people from startup investors. The idea of them making startup investments is comic. It would be like mathematicians running Vogue&amp;ndash; or perhaps more accurately, Vogue editors running a math journal. [2]Though indeed, most things bureaucrats do, they do badly. We just don&amp;rsquo;t notice usually, because they only have to compete against other bureaucrats. But as startup investors they&amp;rsquo;d have to compete against pros with a great deal more experience and motivation.Even corporations that have in-house VC groups generally forbid them to make their own investment decisions. Most are only allowed to invest in deals where some reputable private VC firm is willing to act as lead investor.Not BuildingsIf you go to see Silicon Valley, what you&amp;rsquo;ll see are buildings. But it&amp;rsquo;s the people that make it Silicon Valley, not the buildings. I read occasionally about attempts to set up &amp;ldquo;technology parks&amp;rdquo; in other places, as if the active ingredient of Silicon Valley were the office space. An article about Sophia Antipolis bragged that companies there included Cisco, Compaq, IBM, NCR, and Nortel. Don&amp;rsquo;t the French realize these aren&amp;rsquo;t startups?Building office buildings for technology companies won&amp;rsquo;t get you a silicon valley, because the key stage in the life of a startup happens before they want that kind of space. The key stage is when they&amp;rsquo;re three guys operating out of an apartment. Wherever the startup is when it gets funded, it will stay. The defining quality of Silicon Valley is not that Intel or Apple or Google have offices there, but that they were started there.So if you want to reproduce Silicon Valley, what you need to reproduce is those two or three founders sitting around a kitchen table deciding to start a company. And to reproduce that you need those people.UniversitiesThe exciting thing is, all you need are the people. If you could attract a critical mass of nerds and investors to live somewhere, you could reproduce Silicon Valley. And both groups are highly mobile. They&amp;rsquo;ll go where life is good. So what makes a place good to them?What nerds like is other nerds. Smart people will go wherever other smart people are. And in particular, to great universities. In theory there could be other ways to attract them, but so far universities seem to be indispensable. Within the US, there are no technology hubs without first-rate universities&amp;ndash; or at least, first-rate computer science departments.So if you want to make a silicon valley, you not only need a university, but one of the top handful in the world. It has to be good enough to act as a magnet, drawing the best people from thousands of miles away. And that means it has to stand up to existing magnets like MIT and Stanford.This sounds hard. Actually it might be easy. My professor friends, when they&amp;rsquo;re deciding where they&amp;rsquo;d like to work, consider one thing above all: the quality of the other faculty. What attracts professors is good colleagues. So if you managed to recruit, en masse, a significant number of the best young researchers, you could create a first-rate university from nothing overnight. And you could do that for surprisingly little. If you paid 200 people hiring bonuses of $3 million apiece, you could put together a faculty that would bear comparison with any in the world. And from that point the chain reaction would be self-sustaining. So whatever it costs to establish a mediocre university, for an additional half billion or so you could have a great one. [3]PersonalityHowever, merely creating a new university would not be enough to start a silicon valley. The university is just the seed. It has to be planted in the right soil, or it won&amp;rsquo;t germinate. Plant it in the wrong place, and you just create Carnegie-Mellon.To spawn startups, your university has to be in a town that has attractions other than the university. It has to be a place where investors want to live, and students want to stay after they graduate.The two like much the same things, because most startup investors are nerds themselves. So what do nerds look for in a town? Their tastes aren&amp;rsquo;t completely different from other people&amp;rsquo;s, because a lot of the towns they like most in the US are also big tourist destinations: San Francisco, Boston, Seattle. But their tastes can&amp;rsquo;t be quite mainstream either, because they dislike other big tourist destinations, like New York, Los Angeles, and Las Vegas.There has been a lot written lately about the &amp;ldquo;creative class.&amp;rdquo; The thesis seems to be that as wealth derives increasingly from ideas, cities will prosper only if they attract those who have them. That is certainly true; in fact it was the basis of Amsterdam&amp;rsquo;s prosperity 400 years ago.A lot of nerd tastes they share with the creative class in general. For example, they like well-preserved old neighborhoods instead of cookie-cutter suburbs, and locally-owned shops and restaurants instead of national chains. Like the rest of the creative class, they want to live somewhere with personality.What exactly is personality? I think it&amp;rsquo;s the feeling that each building is the work of a distinct group of people. A town with personality is one that doesn&amp;rsquo;t feel mass-produced. So if you want to make a startup hub&amp;ndash; or any town to attract the &amp;ldquo;creative class&amp;rdquo;&amp;ndash; you probably have to ban large development projects. When a large tract has been developed by a single organization, you can always tell. [4]Most towns with personality are old, but they don&amp;rsquo;t have to be. Old towns have two advantages: they&amp;rsquo;re denser, because they were laid out before cars, and they&amp;rsquo;re more varied, because they were built one building at a time. You could have both now. Just have building codes that ensure density, and ban large scale developments.A corollary is that you have to keep out the biggest developer of all: the government. A government that asks &amp;ldquo;How can we build a silicon valley?&amp;rdquo; has probably ensured failure by the way they framed the question. You don&amp;rsquo;t build a silicon valley; you let one grow.NerdsIf you want to attract nerds, you need more than a town with personality. You need a town with the right personality. Nerds are a distinct subset of the creative class, with different tastes from the rest. You can see this most clearly in New York, which attracts a lot of creative people, but few nerds. [5]What nerds like is the kind of town where people walk around smiling. This excludes LA, where no one walks at all, and also New York, where people walk, but not smiling. When I was in grad school in Boston, a friend came to visit from New York. On the subway back from the airport she asked &amp;ldquo;Why is everyone smiling?&amp;rdquo; I looked and they weren&amp;rsquo;t smiling. They just looked like they were compared to the facial expressions she was used to.If you&amp;rsquo;ve lived in New York, you know where these facial expressions come from. It&amp;rsquo;s the kind of place where your mind may be excited, but your body knows it&amp;rsquo;s having a bad time. People don&amp;rsquo;t so much enjoy living there as endure it for the sake of the excitement. And if you like certain kinds of excitement, New York is incomparable. It&amp;rsquo;s a hub of glamour, a magnet for all the shorter half-life isotopes of style and fame.Nerds don&amp;rsquo;t care about glamour, so to them the appeal of New York is a mystery. People who like New York will pay a fortune for a small, dark, noisy apartment in order to live in a town where the cool people are really cool. A nerd looks at that deal and sees only: pay a fortune for a small, dark, noisy apartment.Nerds will pay a premium to live in a town where the smart people are really smart, but you don&amp;rsquo;t have to pay as much for that. It&amp;rsquo;s supply and demand: glamour is popular, so you have to pay a lot for it.Most nerds like quieter pleasures. They like cafes instead of clubs; used bookshops instead of fashionable clothing shops; hiking instead of dancing; sunlight instead of tall buildings. A nerd&amp;rsquo;s idea of paradise is Berkeley or Boulder.YouthIt&amp;rsquo;s the young nerds who start startups, so it&amp;rsquo;s those specifically the city has to appeal to. The startup hubs in the US are all young-feeling towns. This doesn&amp;rsquo;t mean they have to be new. Cambridge has the oldest town plan in America, but it feels young because it&amp;rsquo;s full of students.What you can&amp;rsquo;t have, if you want to create a silicon valley, is a large, existing population of stodgy people. It would be a waste of time to try to reverse the fortunes of a declining industrial town like Detroit or Philadelphia by trying to encourage startups. Those places have too much momentum in the wrong direction. You&amp;rsquo;re better off starting with a blank slate in the form of a small town. Or better still, if there&amp;rsquo;s a town young people already flock to, that one.The Bay Area was a magnet for the young and optimistic for decades before it was associated with technology. It was a place people went in search of something new. And so it became synonymous with California nuttiness. There&amp;rsquo;s still a lot of that there. If you wanted to start a new fad&amp;ndash; a new way to focus one&amp;rsquo;s &amp;ldquo;energy,&amp;rdquo; for example, or a new category of things not to eat&amp;ndash; the Bay Area would be the place to do it. But a place that tolerates oddness in the search for the new is exactly what you want in a startup hub, because economically that&amp;rsquo;s what startups are. Most good startup ideas seem a little crazy; if they were obviously good ideas, someone would have done them already.(How many people are going to want computers in their houses? What, another search engine?)That&amp;rsquo;s the connection between technology and liberalism. Without exception the high-tech cities in the US are also the most liberal. But it&amp;rsquo;s not because liberals are smarter that this is so. It&amp;rsquo;s because liberal cities tolerate odd ideas, and smart people by definition have odd ideas.Conversely, a town that gets praised for being &amp;ldquo;solid&amp;rdquo; or representing &amp;ldquo;traditional values&amp;rdquo; may be a fine place to live, but it&amp;rsquo;s never going to succeed as a startup hub. The 2004 presidential election, though a disaster in other respects, conveniently supplied us with a county-by-county map of such places. [6]To attract the young, a town must have an intact center. In most American cities the center has been abandoned, and the growth, if any, is in the suburbs. Most American cities have been turned inside out. But none of the startup hubs has: not San Francisco, or Boston, or Seattle. They all have intact centers. [7] My guess is that no city with a dead center could be turned into a startup hub. Young people don&amp;rsquo;t want to live in the suburbs.Within the US, the two cities I think could most easily be turned into new silicon valleys are Boulder and Portland. Both have the kind of effervescent feel that attracts the young. They&amp;rsquo;re each only a great university short of becoming a silicon valley, if they wanted to.TimeA great university near an attractive town. Is that all it takes? That was all it took to make the original Silicon Valley. Silicon Valley traces its origins to William Shockley, one of the inventors of the transistor. He did the research that won him the Nobel Prize at Bell Labs, but when he started his own company in 1956 he moved to Palo Alto to do it. At the time that was an odd thing to do. Why did he? Because he had grown up there and remembered how nice it was. Now Palo Alto is suburbia, but then it was a charming college town&amp;ndash; a charming college town with perfect weather and San Francisco only an hour away.The companies that rule Silicon Valley now are all descended in various ways from Shockley Semiconductor. Shockley was a difficult man, and in 1957 his top people&amp;ndash; &amp;ldquo;the traitorous eight&amp;rdquo;&amp;ndash; left to start a new company, Fairchild Semiconductor. Among them were Gordon Moore and Robert Noyce, who went on to found Intel, and Eugene Kleiner, who founded the VC firm Kleiner Perkins. Forty-two years later, Kleiner Perkins funded Google, and the partner responsible for the deal was John Doerr, who came to Silicon Valley in 1974 to work for Intel.So although a lot of the newest companies in Silicon Valley don&amp;rsquo;t make anything out of silicon, there always seem to be multiple links back to Shockley. There&amp;rsquo;s a lesson here: startups beget startups. People who work for startups start their own. People who get rich from startups fund new ones. I suspect this kind of organic growth is the only way to produce a startup hub, because it&amp;rsquo;s the only way to grow the expertise you need.That has two important implications. The first is that you need time to grow a silicon valley. The university you could create in a couple years, but the startup community around it has to grow organically. The cycle time is limited by the time it takes a company to succeed, which probably averages about five years.The other implication of the organic growth hypothesis is that you can&amp;rsquo;t be somewhat of a startup hub. You either have a self-sustaining chain reaction, or not. Observation confirms this too: cities either have a startup scene, or they don&amp;rsquo;t. There is no middle ground. Chicago has the third largest metropolitan area in America. As a source of startups it&amp;rsquo;s negligible compared to Seattle, number 15.The good news is that the initial seed can be quite small. Shockley Semiconductor, though itself not very successful, was big enough. It brought a critical mass of experts in an important new technology together in a place they liked enough to stay.CompetingOf course, a would-be silicon valley faces an obstacle the original one didn&amp;rsquo;t: it has to compete with Silicon Valley. Can that be done? Probably.One of Silicon Valley&amp;rsquo;s biggest advantages is its venture capital firms. This was not a factor in Shockley&amp;rsquo;s day, because VC funds didn&amp;rsquo;t exist. In fact, Shockley Semiconductor and Fairchild Semiconductor were not startups at all in our sense. They were subsidiaries&amp;ndash; of Beckman Instruments and Fairchild Camera and Instrument respectively. Those companies were apparently willing to establish subsidiaries wherever the experts wanted to live.Venture investors, however, prefer to fund startups within an hour&amp;rsquo;s drive. For one, they&amp;rsquo;re more likely to notice startups nearby. But when they do notice startups in other towns they prefer them to move. They don&amp;rsquo;t want to have to travel to attend board meetings, and in any case the odds of succeeding are higher in a startup hub.The centralizing effect of venture firms is a double one: they cause startups to form around them, and those draw in more startups through acquisitions. And although the first may be weakening because it&amp;rsquo;s now so cheap to start some startups, the second seems as strong as ever. Three of the most admired &amp;ldquo;Web 2.0&amp;rdquo; companies were started outside the usual startup hubs, but two of them have already been reeled in through acquisitions.Such centralizing forces make it harder for new silicon valleys to get started. But by no means impossible. Ultimately power rests with the founders. A startup with the best people will beat one with funding from famous VCs, and a startup that was sufficiently successful would never have to move. So a town that could exert enough pull over the right people could resist and perhaps even surpass Silicon Valley.For all its power, Silicon Valley has a great weakness: the paradise Shockley found in 1956 is now one giant parking lot. San Francisco and Berkeley are great, but they&amp;rsquo;re forty miles away. Silicon Valley proper is soul-crushing suburban sprawl. It has fabulous weather, which makes it significantly better than the soul-crushing sprawl of most other American cities. But a competitor that managed to avoid sprawl would have real leverage. All a city needs is to be the kind of place the next traitorous eight look at and say &amp;ldquo;I want to stay here,&amp;rdquo; and that would be enough to get the chain reaction started.Notes[1] It&amp;rsquo;s interesting to consider how low this number could be made. I suspect five hundred would be enough, even if they could bring no assets with them. Probably just thirty, if I could pick them, would be enough to turn Buffalo into a significant startup hub.[2] Bureaucrats manage to allocate research funding moderately well, but only because (like an in-house VC fund) they outsource most of the work of selection. A professor at a famous university who is highly regarded by his peers will get funding, pretty much regardless of the proposal. That wouldn&amp;rsquo;t work for startups, whose founders aren&amp;rsquo;t sponsored by organizations, and are often unknowns.[3] You&amp;rsquo;d have to do it all at once, or at least a whole department at a time, because people would be more likely to come if they knew their friends were. And you should probably start from scratch, rather than trying to upgrade an existing university, or much energy would be lost in friction.[4] Hypothesis: Any plan in which multiple independent buildings are gutted or demolished to be &amp;ldquo;redeveloped&amp;rdquo; as a single project is a net loss of personality for the city, with the exception of the conversion of buildings not previously public, like warehouses.[5] A few startups get started in New York, but less than a tenth as many per capita as in Boston, and mostly in less nerdy fields like finance and media.[6] Some blue counties are false positives (reflecting the remaining power of Democractic party machines), but there are no false negatives. You can safely write off all the red counties.[7] Some &amp;ldquo;urban renewal&amp;rdquo; experts took a shot at destroying Boston&amp;rsquo;s in the 1960s, leaving the area around city hall a bleak wasteland, but most neighborhoods successfully resisted them.Thanks to Chris Anderson, Trevor Blackwell, Marc Hedlund, Jessica Livingston, Robert Morris, Greg Mcadoo, Fred Wilson, and Stephen Wolfram for reading drafts of this, and to Ed Dumbill for inviting me to speak.(The second part of this talk became Why Startups Condense in America.)VC Deals by RegionStartup Jobs by RegionThey Would Be GodsInterview: Richard HodgsonSanta Clara Valley, 1971Scattered AbroadRussian TranslationSpanish TranslationJapanese TranslationPortuguese TranslationArabic Translation If you liked this, you may also like Hackers &amp;amp; Painters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/simply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/simply/</guid>
      <description>&lt;h1 id=&#34;simply&#34;&gt;Simply&lt;/h1&gt;&#xA;&lt;p&gt;Write Simply March 2021I try to write using ordinary words and simple sentences.That kind of writing is easier to read, and the easier something is to read, the more deeply readers will engage with it. The less energy they expend on your prose, the more they&amp;rsquo;ll have left for your ideas.And the further they&amp;rsquo;ll read. Most readers&amp;rsquo; energy tends to flag part way through an article or essay. If the friction of reading is low enough, more keep going till the end.There&amp;rsquo;s an Italian dish called saltimbocca, which means &amp;ldquo;leap into the mouth.&amp;rdquo; My goal when writing might be called saltintesta: the ideas leap into your head and you barely notice the words that got them there.It&amp;rsquo;s too much to hope that writing could ever be pure ideas. You might not even want it to be. But for most writers, most of the time, that&amp;rsquo;s the goal to aim for. The gap between most writing and pure ideas is not filled with poetry.Plus it&amp;rsquo;s more considerate to write simply. When you write in a fancy way to impress people, you&amp;rsquo;re making them do extra work just so you can seem cool. It&amp;rsquo;s like trailing a long train behind you that readers have to carry.And remember, if you&amp;rsquo;re writing in English, that a lot of your readers won&amp;rsquo;t be native English speakers. Their understanding of ideas may be way ahead of their understanding of English. So you can&amp;rsquo;t assume that writing about a difficult topic means you can use difficult words.Of course, fancy writing doesn&amp;rsquo;t just conceal ideas. It can also conceal the lack of them. That&amp;rsquo;s why some people write that way, to conceal the fact that they have nothing to say. Whereas writing simply keeps you honest. If you say nothing simply, it will be obvious to everyone, including you.Simple writing also lasts better. People reading your stuff in the future will be in much the same position as people from other countries reading it today. The culture and the language will have changed. It&amp;rsquo;s not vain to care about that, any more than it&amp;rsquo;s vain for a woodworker to build a chair to last.Indeed, lasting is not merely an accidental quality of chairs, or writing. It&amp;rsquo;s a sign you did a good job.But although these are all real advantages of writing simply, none of them are why I do it. The main reason I write simply is that it offends me not to. When I write a sentence that seems too complicated, or that uses unnecessarily intellectual words, it doesn&amp;rsquo;t seem fancy to me. It seems clumsy.There are of course times when you want to use a complicated sentence or fancy word for effect. But you should never do it by accident.The other reason my writing ends up being simple is the way I do it. I write the first draft fast, then spend days editing it, trying to get everything just right. Much of this editing is cutting, and that makes simple writing even simpler.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/smart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/smart/</guid>
      <description>&lt;h1 id=&#34;smart&#34;&gt;Smart&lt;/h1&gt;&#xA;&lt;p&gt;Beyond Smart October 2021If you asked people what was special about Einstein, most would say that he was really smart. Even the ones who tried to give you a more sophisticated-sounding answer would probably think this first. Till a few years ago I would have given the same answer myself. But that wasn&amp;rsquo;t what was special about Einstein. What was special about him was that he had important new ideas. Being very smart was a necessary precondition for having those ideas, but the two are not identical.It may seem a hair-splitting distinction to point out that intelligence and its consequences are not identical, but it isn&amp;rsquo;t. There&amp;rsquo;s a big gap between them. Anyone who&amp;rsquo;s spent time around universities and research labs knows how big. There are a lot of genuinely smart people who don&amp;rsquo;t achieve very much.I grew up thinking that being smart was the thing most to be desired. Perhaps you did too. But I bet it&amp;rsquo;s not what you really want. Imagine you had a choice between being really smart but discovering nothing new, and being less smart but discovering lots of new ideas. Surely you&amp;rsquo;d take the latter. I would. The choice makes me uncomfortable, but when you see the two options laid out explicitly like that, it&amp;rsquo;s obvious which is better.The reason the choice makes me uncomfortable is that being smart still feels like the thing that matters, even though I know intellectually that it isn&amp;rsquo;t. I spent so many years thinking it was. The circumstances of childhood are a perfect storm for fostering this illusion. Intelligence is much easier to measure than the value of new ideas, and you&amp;rsquo;re constantly being judged by it. Whereas even the kids who will ultimately discover new things aren&amp;rsquo;t usually discovering them yet. For kids that way inclined, intelligence is the only game in town.There are more subtle reasons too, which persist long into adulthood. Intelligence wins in conversation, and thus becomes the basis of the dominance hierarchy. [1] Plus having new ideas is such a new thing historically, and even now done by so few people, that society hasn&amp;rsquo;t yet assimilated the fact that this is the actual destination, and intelligence merely a means to an end. [2]Why do so many smart people fail to discover anything new? Viewed from that direction, the question seems a rather depressing one. But there&amp;rsquo;s another way to look at it that&amp;rsquo;s not just more optimistic, but more interesting as well. Clearly intelligence is not the only ingredient in having new ideas. What are the other ingredients? Are they things we could cultivate?Because the trouble with intelligence, they say, is that it&amp;rsquo;s mostly inborn. The evidence for this seems fairly convincing, especially considering that most of us don&amp;rsquo;t want it to be true, and the evidence thus has to face a stiff headwind. But I&amp;rsquo;m not going to get into that question here, because it&amp;rsquo;s the other ingredients in new ideas that I care about, and it&amp;rsquo;s clear that many of them can be cultivated.That means the truth is excitingly different from the story I got as a kid. If intelligence is what matters, and also mostly inborn, the natural consequence is a sort of Brave New World fatalism. The best you can do is figure out what sort of work you have an &amp;ldquo;aptitude&amp;rdquo; for, so that whatever intelligence you were born with will at least be put to the best use, and then work as hard as you can at it. Whereas if intelligence isn&amp;rsquo;t what matters, but only one of several ingredients in what does, and many of those aren&amp;rsquo;t inborn, things get more interesting. You have a lot more control, but the problem of how to arrange your life becomes that much more complicated.So what are the other ingredients in having new ideas? The fact that I can even ask this question proves the point I raised earlier — that society hasn&amp;rsquo;t assimilated the fact that it&amp;rsquo;s this and not intelligence that matters. Otherwise we&amp;rsquo;d all know the answers to such a fundamental question. [3]I&amp;rsquo;m not going to try to provide a complete catalogue of the other ingredients here. This is the first time I&amp;rsquo;ve posed the question to myself this way, and I think it may take a while to answer. But I wrote recently about one of the most important: an obsessive interest in a particular topic. And this can definitely be cultivated.Another quality you need in order to discover new ideas is independent-mindedness. I wouldn&amp;rsquo;t want to claim that this is distinct from intelligence — I&amp;rsquo;d be reluctant to call someone smart who wasn&amp;rsquo;t independent-minded — but though largely inborn, this quality seems to be something that can be cultivated to some extent.There are general techniques for having new ideas — for example, for working on your own projects and for overcoming the obstacles you face with early work — and these can all be learned. Some of them can be learned by societies. And there are also collections of techniques for generating specific types of new ideas, like startup ideas and essay topics.And of course there are a lot of fairly mundane ingredients in discovering new ideas, like working hard, getting enough sleep, avoiding certain kinds of stress, having the right colleagues, and finding tricks for working on what you want even when it&amp;rsquo;s not what you&amp;rsquo;re supposed to be working on. Anything that prevents people from doing great work has an inverse that helps them to. And this class of ingredients is not as boring as it might seem at first. For example, having new ideas is generally associated with youth. But perhaps it&amp;rsquo;s not youth per se that yields new ideas, but specific things that come with youth, like good health and lack of responsibilities. Investigating this might lead to strategies that will help people of any age to have better ideas.One of the most surprising ingredients in having new ideas is writing ability. There&amp;rsquo;s a class of new ideas that are best discovered by writing essays and books. And that &amp;ldquo;by&amp;rdquo; is deliberate: you don&amp;rsquo;t think of the ideas first, and then merely write them down. There is a kind of thinking that one does by writing, and if you&amp;rsquo;re clumsy at writing, or don&amp;rsquo;t enjoy doing it, that will get in your way if you try to do this kind of thinking. [4]I predict the gap between intelligence and new ideas will turn out to be an interesting place. If we think of this gap merely as a measure of unrealized potential, it becomes a sort of wasteland that we try to hurry through with our eyes averted. But if we flip the question, and start inquiring into the other ingredients in new ideas that it implies must exist, we can mine this gap for discoveries about discovery. Notes[1] What wins in conversation depends on who with. It ranges from mere aggressiveness at the bottom, through quick-wittedness in the middle, to something closer to actual intelligence at the top, though probably always with some component of quick-wittedness.[2] Just as intelligence isn&amp;rsquo;t the only ingredient in having new ideas, having new ideas isn&amp;rsquo;t the only thing intelligence is useful for. It&amp;rsquo;s also useful, for example, in diagnosing problems and figuring out how to fix them. Both overlap with having new ideas, but both have an end that doesn&amp;rsquo;t.Those ways of using intelligence are much more common than having new ideas. And in such cases intelligence is even harder to distinguish from its consequences.[3] Some would attribute the difference between intelligence and having new ideas to &amp;ldquo;creativity,&amp;rdquo; but this doesn&amp;rsquo;t seem a very useful term. As well as being pretty vague, it&amp;rsquo;s shifted half a frame sideways from what we care about: it&amp;rsquo;s neither separable from intelligence, nor responsible for all the difference between intelligence and having new ideas.[4] Curiously enough, this essay is an example. It started out as an essay about writing ability. But when I came to the distinction between intelligence and having new ideas, that seemed so much more important that I turned the original essay inside out, making that the topic and my original topic one of the points in it. As in many other fields, that level of reworking is easier to contemplate once you&amp;rsquo;ve had a lot of practice. Thanks to Trevor Blackwell, Patrick Collison, Jessica Livingston, Robert Morris, Michael Nielsen, and Lisa Randall for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/softwarepatents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/softwarepatents/</guid>
      <description>&lt;h1 id=&#34;softwarepatents&#34;&gt;Softwarepatents&lt;/h1&gt;&#xA;&lt;p&gt;Are Software Patents Evil? March 2006(This essay is derived from a talk at Google.)A few weeks ago I found to my surprise that I&amp;rsquo;d been granted four patents. This was all the more surprising because I&amp;rsquo;d only applied for three. The patents aren&amp;rsquo;t mine, of course. They were assigned to Viaweb, and became Yahoo&amp;rsquo;s when they bought us. But the news set me thinking about the question of software patents generally.Patents are a hard problem. I&amp;rsquo;ve had to advise most of the startups we&amp;rsquo;ve funded about them, and despite years of experience I&amp;rsquo;m still not always sure I&amp;rsquo;m giving the right advice.One thing I do feel pretty certain of is that if you&amp;rsquo;re against software patents, you&amp;rsquo;re against patents in general. Gradually our machines consist more and more of software. Things that used to be done with levers and cams and gears are now done with loops and trees and closures. There&amp;rsquo;s nothing special about physical embodiments of control systems that should make them patentable, and the software equivalent not.Unfortunately, patent law is inconsistent on this point. Patent law in most countries says that algorithms aren&amp;rsquo;t patentable. This rule is left over from a time when &amp;ldquo;algorithm&amp;rdquo; meant something like the Sieve of Eratosthenes. In 1800, people could not see as readily as we can that a great many patents on mechanical objects were really patents on the algorithms they embodied.Patent lawyers still have to pretend that&amp;rsquo;s what they&amp;rsquo;re doing when they patent algorithms. You must not use the word &amp;ldquo;algorithm&amp;rdquo; in the title of a patent application, just as you must not use the word &amp;ldquo;essays&amp;rdquo; in the title of a book. If you want to patent an algorithm, you have to frame it as a computer system executing that algorithm. Then it&amp;rsquo;s mechanical; phew. The default euphemism for algorithm is &amp;ldquo;system and method.&amp;rdquo; Try a patent search for that phrase and see how many results you get.Since software patents are no different from hardware patents, people who say &amp;ldquo;software patents are evil&amp;rdquo; are saying simply &amp;ldquo;patents are evil.&amp;rdquo; So why do so many people complain about software patents specifically?I think the problem is more with the patent office than the concept of software patents. Whenever software meets government, bad things happen, because software changes fast and government changes slow. The patent office has been overwhelmed by both the volume and the novelty of applications for software patents, and as a result they&amp;rsquo;ve made a lot of mistakes.The most common is to grant patents that shouldn&amp;rsquo;t be granted. To be patentable, an invention has to be more than new. It also has to be non-obvious. And this, especially, is where the USPTO has been dropping the ball. Slashdot has an icon that expresses the problem vividly: a knife and fork with the words &amp;ldquo;patent pending&amp;rdquo; superimposed.The scary thing is, this is the only icon they have for patent stories. Slashdot readers now take it for granted that a story about a patent will be about a bogus patent. That&amp;rsquo;s how bad the problem has become.The problem with Amazon&amp;rsquo;s notorious one-click patent, for example, is not that it&amp;rsquo;s a software patent, but that it&amp;rsquo;s obvious. Any online store that kept people&amp;rsquo;s shipping addresses would have implemented this. The reason Amazon did it first was not that they were especially smart, but because they were one of the earliest sites with enough clout to force customers to log in before they could buy something. [1]We, as hackers, know the USPTO is letting people patent the knives and forks of our world. The problem is, the USPTO are not hackers. They&amp;rsquo;re probably good at judging new inventions for casting steel or grinding lenses, but they don&amp;rsquo;t understand software yet.At this point an optimist would be tempted to add &amp;ldquo;but they will eventually.&amp;rdquo; Unfortunately that might not be true. The problem with software patents is an instance of a more general one: the patent office takes a while to understand new technology. If so, this problem will only get worse, because the rate of technological change seems to be increasing. In thirty years, the patent office may understand the sort of things we now patent as software, but there will be other new types of inventions they understand even less.Applying for a patent is a negotiation. You generally apply for a broader patent than you think you&amp;rsquo;ll be granted, and the examiners reply by throwing out some of your claims and granting others. So I don&amp;rsquo;t really blame Amazon for applying for the one-click patent. The big mistake was the patent office&amp;rsquo;s, for not insisting on something narrower, with real technical content. By granting such an over-broad patent, the USPTO in effect slept with Amazon on the first date. Was Amazon supposed to say no?Where Amazon went over to the dark side was not in applying for the patent, but in enforcing it. A lot of companies (Microsoft, for example) have been granted large numbers of preposterously over-broad patents, but they keep them mainly for defensive purposes. Like nuclear weapons, the main role of big companies&amp;rsquo; patent portfolios is to threaten anyone who attacks them with a counter-suit. Amazon&amp;rsquo;s suit against Barnes &amp;amp; Noble was thus the equivalent of a nuclear first strike.That suit probably hurt Amazon more than it helped them. Barnes &amp;amp; Noble was a lame site; Amazon would have crushed them anyway. To attack a rival they could have ignored, Amazon put a lasting black mark on their own reputation. Even now I think if you asked hackers to free-associate about Amazon, the one-click patent would turn up in the first ten topics.Google clearly doesn&amp;rsquo;t feel that merely holding patents is evil. They&amp;rsquo;ve applied for a lot of them. Are they hypocrites? Are patents evil?There are really two variants of that question, and people answering it often aren&amp;rsquo;t clear in their own minds which they&amp;rsquo;re answering. There&amp;rsquo;s a narrow variant: is it bad, given the current legal system, to apply for patents? and also a broader one: is it bad that the current legal system allows patents?These are separate questions. For example, in preindustrial societies like medieval Europe, when someone attacked you, you didn&amp;rsquo;t call the police. There were no police. When attacked, you were supposed to fight back, and there were conventions about how to do it. Was this wrong? That&amp;rsquo;s two questions: was it wrong to take justice into your own hands, and was it wrong that you had to? We tend to say yes to the second, but no to the first. If no one else will defend you, you have to defend yourself. [2]The situation with patents is similar. Business is a kind of ritualized warfare. Indeed, it evolved from actual warfare: most early traders switched on the fly from merchants to pirates depending on how strong you seemed. In business there are certain rules describing how companies may and may not compete with one another, and someone deciding that they&amp;rsquo;re going to play by their own rules is missing the point. Saying &amp;ldquo;I&amp;rsquo;m not going to apply for patents just because everyone else does&amp;rdquo; is not like saying &amp;ldquo;I&amp;rsquo;m not going to lie just because everyone else does.&amp;rdquo; It&amp;rsquo;s more like saying &amp;ldquo;I&amp;rsquo;m not going to use TCP/IP just because everyone else does.&amp;rdquo; Oh yes you are.A closer comparison might be someone seeing a hockey game for the first time, realizing with shock that the players were deliberately bumping into one another, and deciding that one would on no account be so rude when playing hockey oneself.Hockey allows checking. It&amp;rsquo;s part of the game. If your team refuses to do it, you simply lose. So it is in business. Under the present rules, patents are part of the game.What does that mean in practice? We tell the startups we fund not to worry about infringing patents, because startups rarely get sued for patent infringement. There are only two reasons someone might sue you: for money, or to prevent you from competing with them. Startups are too poor to be worth suing for money. And in practice they don&amp;rsquo;t seem to get sued much by competitors, either. They don&amp;rsquo;t get sued by other startups because (a) patent suits are an expensive distraction, and (b) since the other startups are as young as they are, their patents probably haven&amp;rsquo;t issued yet. [3] Nor do startups, at least in the software business, seem to get sued much by established competitors. Despite all the patents Microsoft holds, I don&amp;rsquo;t know of an instance where they sued a startup for patent infringement. Companies like Microsoft and Oracle don&amp;rsquo;t win by winning lawsuits. That&amp;rsquo;s too uncertain. They win by locking competitors out of their sales channels. If you do manage to threaten them, they&amp;rsquo;re more likely to buy you than sue you.When you read of big companies filing patent suits against smaller ones, it&amp;rsquo;s usually a big company on the way down, grasping at straws. For example, Unisys&amp;rsquo;s attempts to enforce their patent on LZW compression. When you see a big company threatening patent suits, sell. When a company starts fighting over IP, it&amp;rsquo;s a sign they&amp;rsquo;ve lost the real battle, for users.A company that sues competitors for patent infringement is like a defender who has been beaten so thoroughly that he turns to plead with the referee. You don&amp;rsquo;t do that if you can still reach the ball, even if you genuinely believe you&amp;rsquo;ve been fouled. So a company threatening patent suits is a company in trouble.When we were working on Viaweb, a bigger company in the e-commerce business was granted a patent on online ordering, or something like that. I got a call from a VP there asking if we&amp;rsquo;d like to license it. I replied that I thought the patent was completely bogus, and would never hold up in court. &amp;ldquo;Ok,&amp;rdquo; he replied. &amp;ldquo;So, are you guys hiring?&amp;ldquo;If your startup grows big enough, however, you&amp;rsquo;ll start to get sued, no matter what you do. If you go public, for example, you&amp;rsquo;ll be sued by multiple patent trolls who hope you&amp;rsquo;ll pay them off to go away. More on them later.In other words, no one will sue you for patent infringement till you have money, and once you have money, people will sue you whether they have grounds to or not. So I advise fatalism. Don&amp;rsquo;t waste your time worrying about patent infringement. You&amp;rsquo;re probably violating a patent every time you tie your shoelaces. At the start, at least, just worry about making something great and getting lots of users. If you grow to the point where anyone considers you worth attacking, you&amp;rsquo;re doing well.We do advise the companies we fund to apply for patents, but not so they can sue competitors. Successful startups either get bought or grow into big companies. If a startup wants to grow into a big company, they should apply for patents to build up the patent portfolio they&amp;rsquo;ll need to maintain an armed truce with other big companies. If they want to get bought, they should apply for patents because patents are part of the mating dance with acquirers.Most startups that succeed do it by getting bought, and most acquirers care about patents. Startup acquisitions are usually a build-vs-buy decision for the acquirer. Should we buy this little startup or build our own? And two things, especially, make them decide not to build their own: if you already have a large and rapidly growing user base, and if you have a fairly solid patent application on critical parts of your software.There&amp;rsquo;s a third reason big companies should prefer buying to building: that if they built their own, they&amp;rsquo;d screw it up. But few big companies are smart enough yet to admit this to themselves. It&amp;rsquo;s usually the acquirer&amp;rsquo;s engineers who are asked how hard it would be for the company to build their own, and they overestimate their abilities. [4] A patent seems to change the balance. It gives the acquirer an excuse to admit they couldn&amp;rsquo;t copy what you&amp;rsquo;re doing. It may also help them to grasp what&amp;rsquo;s special about your technology.Frankly, it surprises me how small a role patents play in the software business. It&amp;rsquo;s kind of ironic, considering all the dire things experts say about software patents stifling innovation, but when one looks closely at the software business, the most striking thing is how little patents seem to matter.In other fields, companies regularly sue competitors for patent infringement. For example, the airport baggage scanning business was for many years a cozy duopoly shared between two companies, InVision and L-3. In 2002 a startup called Reveal appeared, with new technology that let them build scanners a third the size. They were sued for patent infringement before they&amp;rsquo;d even released a product.You rarely hear that kind of story in our world. The one example I&amp;rsquo;ve found is, embarrassingly enough, Yahoo, which filed a patent suit against a gaming startup called Xfire in 2005. Xfire doesn&amp;rsquo;t seem to be a very big deal, and it&amp;rsquo;s hard to say why Yahoo felt threatened. Xfire&amp;rsquo;s VP of engineering had worked at Yahoo on similar stuff&amp;ndash; in fact, he was listed as an inventor on the patent Yahoo sued over&amp;ndash; so perhaps there was something personal about it. My guess is that someone at Yahoo goofed. At any rate they didn&amp;rsquo;t pursue the suit very vigorously.Why do patents play so small a role in software? I can think of three possible reasons.One is that software is so complicated that patents by themselves are not worth very much. I may be maligning other fields here, but it seems that in most types of engineering you can hand the details of some new technique to a group of medium-high quality people and get the desired result. For example, if someone develops a new process for smelting ore that gets a better yield, and you assemble a team of qualified experts and tell them about it, they&amp;rsquo;ll be able to get the same yield. This doesn&amp;rsquo;t seem to work in software. Software is so subtle and unpredictable that &amp;ldquo;qualified experts&amp;rdquo; don&amp;rsquo;t get you very far.That&amp;rsquo;s why we rarely hear phrases like &amp;ldquo;qualified expert&amp;rdquo; in the software business. What that level of ability can get you is, say, to make your software compatible with some other piece of software&amp;ndash; in eight months, at enormous cost. To do anything harder you need individual brilliance. If you assemble a team of qualified experts and tell them to make a new web-based email program, they&amp;rsquo;ll get their asses kicked by a team of inspired nineteen year olds.Experts can implement, but they can&amp;rsquo;t design. Or rather, expertise in implementation is the only kind most people, including the experts themselves, can measure. [5]But design is a definite skill. It&amp;rsquo;s not just an airy intangible. Things always seem intangible when you don&amp;rsquo;t understand them. Electricity seemed an airy intangible to most people in 1800. Who knew there was so much to know about it? So it is with design. Some people are good at it and some people are bad at it, and there&amp;rsquo;s something very tangible they&amp;rsquo;re good or bad at.The reason design counts so much in software is probably that there are fewer constraints than on physical things. Building physical things is expensive and dangerous. The space of possible choices is smaller; you tend to have to work as part of a larger group; and you&amp;rsquo;re subject to a lot of regulations. You don&amp;rsquo;t have any of that if you and a couple friends decide to create a new web-based application.Because there&amp;rsquo;s so much scope for design in software, a successful application tends to be way more than the sum of its patents. What protects little companies from being copied by bigger competitors is not just their patents, but the thousand little things the big company will get wrong if they try.The second reason patents don&amp;rsquo;t count for much in our world is that startups rarely attack big companies head-on, the way Reveal did. In the software business, startups beat established companies by transcending them. Startups don&amp;rsquo;t build desktop word processing programs to compete with Microsoft Word. [6] They build Writely. If this paradigm is crowded, just wait for the next one; they run pretty frequently on this route.Fortunately for startups, big companies are extremely good at denial. If you take the trouble to attack them from an oblique angle, they&amp;rsquo;ll meet you half-way and maneuver to keep you in their blind spot. To sue a startup would mean admitting it was dangerous, and that often means seeing something the big company doesn&amp;rsquo;t want to see. IBM used to sue its mainframe competitors regularly, but they didn&amp;rsquo;t bother much about the microcomputer industry because they didn&amp;rsquo;t want to see the threat it posed. Companies building web based apps are similarly protected from Microsoft, which even now doesn&amp;rsquo;t want to imagine a world in which Windows is irrelevant.The third reason patents don&amp;rsquo;t seem to matter very much in software is public opinion&amp;ndash; or rather, hacker opinion. In a recent interview, Steve Ballmer coyly left open the possibility of attacking Linux on patent grounds. But I doubt Microsoft would ever be so stupid. They&amp;rsquo;d face the mother of all boycotts. And not just from the technical community in general; a lot of their own people would rebel.Good hackers care a lot about matters of principle, and they are highly mobile. If a company starts misbehaving, smart people won&amp;rsquo;t work there. For some reason this seems to be more true in software than other businesses. I don&amp;rsquo;t think it&amp;rsquo;s because hackers have intrinsically higher principles so much as that their skills are easily transferrable. Perhaps we can split the difference and say that mobility gives hackers the luxury of being principled.Google&amp;rsquo;s &amp;ldquo;don&amp;rsquo;t be evil&amp;rdquo; policy may for this reason be the most valuable thing they&amp;rsquo;ve discovered. It&amp;rsquo;s very constraining in some ways. If Google does do something evil, they get doubly whacked for it: once for whatever they did, and again for hypocrisy. But I think it&amp;rsquo;s worth it. It helps them to hire the best people, and it&amp;rsquo;s better, even from a purely selfish point of view, to be constrained by principles than by stupidity.(I wish someone would get this point across to the present administration.)I&amp;rsquo;m not sure what the proportions are of the preceding three ingredients, but the custom among the big companies seems to be not to sue the small ones, and the startups are mostly too busy and too poor to sue one another. So despite the huge number of software patents there&amp;rsquo;s not a lot of suing going on. With one exception: patent trolls.Patent trolls are companies consisting mainly of lawyers whose whole business is to accumulate patents and threaten to sue companies who actually make things. Patent trolls, it seems safe to say, are evil. I feel a bit stupid saying that, because when you&amp;rsquo;re saying something that Richard Stallman and Bill Gates would both agree with, you must be perilously close to tautologies.The CEO of Forgent, one of the most notorious patent trolls, says that what his company does is &amp;ldquo;the American way.&amp;rdquo; Actually that&amp;rsquo;s not true. The American way is to make money by creating wealth, not by suing people. [7] What companies like Forgent do is actually the proto-industrial way. In the period just before the industrial revolution, some of the greatest fortunes in countries like England and France were made by courtiers who extracted some lucrative right from the crown&amp;ndash; like the right to collect taxes on the import of silk&amp;ndash; and then used this to squeeze money from the merchants in that business. So when people compare patent trolls to the mafia, they&amp;rsquo;re more right than they know, because the mafia too are not merely bad, but bad specifically in the sense of being an obsolete business model.Patent trolls seem to have caught big companies by surprise. In the last couple years they&amp;rsquo;ve extracted hundreds of millions of dollars from them. Patent trolls are hard to fight precisely because they create nothing. Big companies are safe from being sued by other big companies because they can threaten a counter-suit. But because patent trolls don&amp;rsquo;t make anything, there&amp;rsquo;s nothing they can be sued for. I predict this loophole will get closed fairly quickly, at least by legal standards. It&amp;rsquo;s clearly an abuse of the system, and the victims are powerful. [8]But evil as patent trolls are, I don&amp;rsquo;t think they hamper innovation much. They don&amp;rsquo;t sue till a startup has made money, and by that point the innovation that generated it has already happened. I can&amp;rsquo;t think of a startup that avoided working on some problem because of patent trolls.So much for hockey as the game is played now. What about the more theoretical question of whether hockey would be a better game without checking? Do patents encourage or discourage innovation?This is a very hard question to answer in the general case. People write whole books on the topic. One of my main hobbies is the history of technology, and even though I&amp;rsquo;ve studied the subject for years, it would take me several weeks of research to be able to say whether patents have in general been a net win.One thing I can say is that 99.9% of the people who express opinions on the subject do it not based on such research, but out of a kind of religious conviction. At least, that&amp;rsquo;s the polite way of putting it; the colloquial version involves speech coming out of organs not designed for that purpose.Whether they encourage innovation or not, patents were at least intended to. You don&amp;rsquo;t get a patent for nothing. In return for the exclusive right to use an idea, you have to publish it, and it was largely to encourage such openness that patents were established.Before patents, people protected ideas by keeping them secret. With patents, central governments said, in effect, if you tell everyone your idea, we&amp;rsquo;ll protect it for you. There is a parallel here to the rise of civil order, which happened at roughly the same time. Before central governments were powerful enough to enforce order, rich people had private armies. As governments got more powerful, they gradually compelled magnates to cede most responsibility for protecting them. (Magnates still have bodyguards, but no longer to protect them from other magnates.)Patents, like police, are involved in many abuses. But in both cases the default is something worse. The choice is not &amp;ldquo;patents or freedom?&amp;rdquo; any more than it is &amp;ldquo;police or freedom?&amp;rdquo; The actual questions are respectively &amp;ldquo;patents or secrecy?&amp;rdquo; and &amp;ldquo;police or gangs?&amp;ldquo;As with gangs, we have some idea what secrecy would be like, because that&amp;rsquo;s how things used to be. The economy of medieval Europe was divided up into little tribes, each jealously guarding their privileges and secrets. In Shakespeare&amp;rsquo;s time, &amp;ldquo;mystery&amp;rdquo; was synonymous with &amp;ldquo;craft.&amp;rdquo; Even today we can see an echo of the secrecy of medieval guilds, in the now pointless secrecy of the Masons.The most memorable example of medieval industrial secrecy is probably Venice, which forbade glassblowers to leave the city, and sent assassins after those who tried. We might like to think we wouldn&amp;rsquo;t go so far, but the movie industry has already tried to pass laws prescribing three year prison terms just for putting movies on public networks. Want to try a frightening thought experiment? If the movie industry could have any law they wanted, where would they stop? Short of the death penalty, one assumes, but how close would they get?Even worse than the spectacular abuses might be the overall decrease in efficiency that would accompany increased secrecy. As anyone who has dealt with organizations that operate on a &amp;ldquo;need to know&amp;rdquo; basis can attest, dividing information up into little cells is terribly inefficient. The flaw in the &amp;ldquo;need to know&amp;rdquo; principle is that you don&amp;rsquo;t know who needs to know something. An idea from one area might spark a great discovery in another. But the discoverer doesn&amp;rsquo;t know he needs to know it.If secrecy were the only protection for ideas, companies wouldn&amp;rsquo;t just have to be secretive with other companies; they&amp;rsquo;d have to be secretive internally. This would encourage what is already the worst trait of big companies.I&amp;rsquo;m not saying secrecy would be worse than patents, just that we couldn&amp;rsquo;t discard patents for free. Businesses would become more secretive to compensate, and in some fields this might get ugly. Nor am I defending the current patent system. There is clearly a lot that&amp;rsquo;s broken about it. But the breakage seems to affect software less than most other fields.In the software business I know from experience whether patents encourage or discourage innovation, and the answer is the type that people who like to argue about public policy least like to hear: they don&amp;rsquo;t affect innovation much, one way or the other. Most innovation in the software business happens in startups, and startups should simply ignore other companies&amp;rsquo; patents. At least, that&amp;rsquo;s what we advise, and we bet money on that advice.The only real role of patents, for most startups, is as an element of the mating dance with acquirers. There patents do help a little. And so they do encourage innovation indirectly, in that they give more power to startups, which is where, pound for pound, the most innovation happens. But even in the mating dance, patents are of secondary importance. It matters more to make something great and get a lot of users.Notes[1] You have to be careful here, because a great discovery often seems obvious in retrospect. One-click ordering, however, is not such a discovery.[2] &amp;ldquo;Turn the other cheek&amp;rdquo; skirts the issue; the critical question is not how to deal with slaps, but sword thrusts.[3] Applying for a patent is now very slow, but it might actually be bad if that got fixed. At the moment the time it takes to get a patent is conveniently just longer than the time it takes a startup to succeed or fail.[4] Instead of the canonical &amp;ldquo;could you build this?&amp;rdquo; maybe the corp dev guys should be asking &amp;ldquo;will you build this?&amp;rdquo; or even &amp;ldquo;why haven&amp;rsquo;t you already built this?&amp;quot;[5] Design ability is so hard to measure that you can&amp;rsquo;t even trust the design world&amp;rsquo;s internal standards. You can&amp;rsquo;t assume that someone with a degree in design is any good at design, or that an eminent designer is any better than his peers. If that worked, any company could build products as good as Apple&amp;rsquo;s just by hiring sufficiently qualified designers.[6] If anyone wanted to try, we&amp;rsquo;d be interested to hear from them. I suspect it&amp;rsquo;s one of those things that&amp;rsquo;s not as hard as everyone assumes.[7] Patent trolls can&amp;rsquo;t even claim, like speculators, that they &amp;ldquo;create&amp;rdquo; liquidity.[8] If big companies don&amp;rsquo;t want to wait for the government to take action, there is a way to fight back themselves. For a long time I thought there wasn&amp;rsquo;t, because there was nothing to grab onto. But there is one resource patent trolls need: lawyers. Big technology companies between them generate a lot of legal business. If they agreed among themselves never to do business with any firm employing anyone who had worked for a patent troll, either as an employee or as outside counsel, they could probably starve the trolls of the lawyers they need.Thanks to Dan Bloomberg, Paul Buchheit, Sarah Harlin, Jessica Livingston, and Peter Norvig for reading drafts of this, to Joel Lehrer and Peter Eng for answering my questions about patents, and to Ankur Pansari for inviting me to speak.Japanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/spam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/spam/</guid>
      <description>&lt;h1 id=&#34;spam&#34;&gt;Spam&lt;/h1&gt;&#xA;&lt;p&gt;A Plan for Spam Like to build things? Try Hacker News. August 2002(This article describes the spam-filtering techniques used in the spamproof web-based mail reader we built to exercise Arc. An improved algorithm is described in Better Bayesian Filtering.)I think it&amp;rsquo;s possible to stop spam, and that content-based filters are the way to do it. The Achilles heel of the spammers is their message. They can circumvent any other barrier you set up. They have so far, at least. But they have to deliver their message, whatever it is. If we can write software that recognizes their messages, there is no way they can get around that._ _ &lt;em&gt;To the recipient, spam is easily recognizable. If you hired someone to read your mail and discard the spam, they would have little trouble doing it. How much do we have to do, short of AI, to automate this process?I think we will be able to solve the problem with fairly simple algorithms. In fact, I&amp;rsquo;ve found that you can filter present-day spam acceptably well using nothing more than a Bayesian combination of the spam probabilities of individual words. Using a slightly tweaked (as described below) Bayesian filter, we now miss less than 5 per 1000 spams, with 0 false positives.The statistical approach is not usually the first one people try when they write spam filters. Most hackers&amp;rsquo; first instinct is to try to write software that recognizes individual properties of spam. You look at spams and you think, the gall of these guys to try sending me mail that begins &amp;ldquo;Dear Friend&amp;rdquo; or has a subject line that&amp;rsquo;s all uppercase and ends in eight exclamation points. I can filter out that stuff with about one line of code.And so you do, and in the beginning it works. A few simple rules will take a big bite out of your incoming spam. Merely looking for the word &amp;ldquo;click&amp;rdquo; will catch 79.7% of the emails in my spam corpus, with only 1.2% false positives.I spent about six months writing software that looked for individual spam features before I tried the statistical approach. What I found was that recognizing that last few percent of spams got very hard, and that as I made the filters stricter I got more false positives.False positives are innocent emails that get mistakenly identified as spams. For most users, missing legitimate email is an order of magnitude worse than receiving spam, so a filter that yields false positives is like an acne cure that carries a risk of death to the patient.The more spam a user gets, the less likely he&amp;rsquo;ll be to notice one innocent mail sitting in his spam folder. And strangely enough, the better your spam filters get, the more dangerous false positives become, because when the filters are really good, users will be more likely to ignore everything they catch.I don&amp;rsquo;t know why I avoided trying the statistical approach for so long. I think it was because I got addicted to trying to identify spam features myself, as if I were playing some kind of competitive game with the spammers. (Nonhackers don&amp;rsquo;t often realize this, but most hackers are very competitive.) When I did try statistical analysis, I found immediately that it was much cleverer than I had been. It discovered, of course, that terms like &amp;ldquo;virtumundo&amp;rdquo; and &amp;ldquo;teens&amp;rdquo; were good indicators of spam. But it also discovered that &amp;ldquo;per&amp;rdquo; and &amp;ldquo;FL&amp;rdquo; and &amp;ldquo;ff0000&amp;rdquo; are good indicators of spam. In fact, &amp;ldquo;ff0000&amp;rdquo; (html for bright red) turns out to be as good an indicator of spam as any pornographic term.&lt;/em&gt; _ &lt;em&gt;Here&amp;rsquo;s a sketch of how I do statistical filtering. I start with one corpus of spam and one of nonspam mail. At the moment each one has about 4000 messages in it. I scan the entire text, including headers and embedded html and javascript, of each message in each corpus. I currently consider alphanumeric characters, dashes, apostrophes, and dollar signs to be part of tokens, and everything else to be a token separator. (There is probably room for improvement here.) I ignore tokens that are all digits, and I also ignore html comments, not even considering them as token separators.I count the number of times each token (ignoring case, currently) occurs in each corpus. At this stage I end up with two large hash tables, one for each corpus, mapping tokens to number of occurrences.Next I create a third hash table, this time mapping each token to the probability that an email containing it is a spam, which I calculate as follows [1]: (let ((g (* 2 (or (gethash word good) 0))) (b (or (gethash word bad) 0))) (unless (&amp;lt; (+ g b) 5) (max .01 (min .99 (float (/ (min 1 (/ b nbad)) (+ (min 1 (/ g ngood)) (min 1 (/ b nbad))))))))) where word is the token whose probability we&amp;rsquo;re calculating, good and bad are the hash tables I created in the first step, and ngood and nbad are the number of nonspam and spam messages respectively.I explained this as code to show a couple of important details. I want to bias the probabilities slightly to avoid false positives, and by trial and error I&amp;rsquo;ve found that a good way to do it is to double all the numbers in good. This helps to distinguish between words that occasionally do occur in legitimate email and words that almost never do. I only consider words that occur more than five times in total (actually, because of the doubling, occurring three times in nonspam mail would be enough). And then there is the question of what probability to assign to words that occur in one corpus but not the other. Again by trial and error I chose .01 and .99. There may be room for tuning here, but as the corpus grows such tuning will happen automatically anyway.The especially observant will notice that while I consider each corpus to be a single long stream of text for purposes of counting occurrences, I use the number of emails in each, rather than their combined length, as the divisor in calculating spam probabilities. This adds another slight bias to protect against false positives.When new mail arrives, it is scanned into tokens, and the most interesting fifteen tokens, where interesting is measured by how far their spam probability is from a neutral .5, are used to calculate the probability that the mail is spam. If probs is a list of the fifteen individual probabilities, you calculate the combined probability thus: (let ((prod (apply #&amp;rsquo;* probs))) (/ prod (+ prod (apply #&amp;rsquo;* (mapcar #&amp;rsquo;(lambda (x) (- 1 x)) probs))))) One question that arises in practice is what probability to assign to a word you&amp;rsquo;ve never seen, i.e. one that doesn&amp;rsquo;t occur in the hash table of word probabilities. I&amp;rsquo;ve found, again by trial and error, that .4 is a good number to use. If you&amp;rsquo;ve never seen a word before, it is probably fairly innocent; spam words tend to be all too familiar.There are examples of this algorithm being applied to actual emails in an appendix at the end.I treat mail as spam if the algorithm above gives it a probability of more than .9 of being spam. But in practice it would not matter much where I put this threshold, because few probabilities end up in the middle of the range.&lt;/em&gt; _ &lt;em&gt;One great advantage of the statistical approach is that you don&amp;rsquo;t have to read so many spams. Over the past six months, I&amp;rsquo;ve read literally thousands of spams, and it is really kind of demoralizing. Norbert Wiener said if you compete with slaves you become a slave, and there is something similarly degrading about competing with spammers. To recognize individual spam features you have to try to get into the mind of the spammer, and frankly I want to spend as little time inside the minds of spammers as possible.But the real advantage of the Bayesian approach, of course, is that you know what you&amp;rsquo;re measuring. Feature-recognizing filters like SpamAssassin assign a spam &amp;ldquo;score&amp;rdquo; to email. The Bayesian approach assigns an actual probability. The problem with a &amp;ldquo;score&amp;rdquo; is that no one knows what it means. The user doesn&amp;rsquo;t know what it means, but worse still, neither does the developer of the filter. How many points should an email get for having the word &amp;ldquo;sex&amp;rdquo; in it? A probability can of course be mistaken, but there is little ambiguity about what it means, or how evidence should be combined to calculate it. Based on my corpus, &amp;ldquo;sex&amp;rdquo; indicates a .97 probability of the containing email being a spam, whereas &amp;ldquo;sexy&amp;rdquo; indicates .99 probability. And Bayes&amp;rsquo; Rule, equally unambiguous, says that an email containing both words would, in the (unlikely) absence of any other evidence, have a 99.97% chance of being a spam.Because it is measuring probabilities, the Bayesian approach considers all the evidence in the email, both good and bad. Words that occur disproportionately rarely in spam (like &amp;ldquo;though&amp;rdquo; or &amp;ldquo;tonight&amp;rdquo; or &amp;ldquo;apparently&amp;rdquo;) contribute as much to decreasing the probability as bad words like &amp;ldquo;unsubscribe&amp;rdquo; and &amp;ldquo;opt-in&amp;rdquo; do to increasing it. So an otherwise innocent email that happens to include the word &amp;ldquo;sex&amp;rdquo; is not going to get tagged as spam.Ideally, of course, the probabilities should be calculated individually for each user. I get a lot of email containing the word &amp;ldquo;Lisp&amp;rdquo;, and (so far) no spam that does. So a word like that is effectively a kind of password for sending mail to me. In my earlier spam-filtering software, the user could set up a list of such words and mail containing them would automatically get past the filters. On my list I put words like &amp;ldquo;Lisp&amp;rdquo; and also my zipcode, so that (otherwise rather spammy-sounding) receipts from online orders would get through. I thought I was being very clever, but I found that the Bayesian filter did the same thing for me, and moreover discovered of a lot of words I hadn&amp;rsquo;t thought of.When I said at the start that our filters let through less than 5 spams per 1000 with 0 false positives, I&amp;rsquo;m talking about filtering my mail based on a corpus of my mail. But these numbers are not misleading, because that is the approach I&amp;rsquo;m advocating: filter each user&amp;rsquo;s mail based on the spam and nonspam mail he receives. Essentially, each user should have two delete buttons, ordinary delete and delete-as-spam. Anything deleted as spam goes into the spam corpus, and everything else goes into the nonspam corpus.You could start users with a seed filter, but ultimately each user should have his own per-word probabilities based on the actual mail he receives. This (a) makes the filters more effective, (b) lets each user decide their own precise definition of spam, and (c) perhaps best of all makes it hard for spammers to tune mails to get through the filters. If a lot of the brain of the filter is in the individual databases, then merely tuning spams to get through the seed filters won&amp;rsquo;t guarantee anything about how well they&amp;rsquo;ll get through individual users&amp;rsquo; varying and much more trained filters.Content-based spam filtering is often combined with a whitelist, a list of senders whose mail can be accepted with no filtering. One easy way to build such a whitelist is to keep a list of every address the user has ever sent mail to. If a mail reader has a delete-as-spam button then you could also add the from address of every email the user has deleted as ordinary trash.I&amp;rsquo;m an advocate of whitelists, but more as a way to save computation than as a way to improve filtering. I used to think that whitelists would make filtering easier, because you&amp;rsquo;d only have to filter email from people you&amp;rsquo;d never heard from, and someone sending you mail for the first time is constrained by convention in what they can say to you. Someone you already know might send you an email talking about sex, but someone sending you mail for the first time would not be likely to. The problem is, people can have more than one email address, so a new from-address doesn&amp;rsquo;t guarantee that the sender is writing to you for the first time. It is not unusual for an old friend (especially if he is a hacker) to suddenly send you an email with a new from-address, so you can&amp;rsquo;t risk false positives by filtering mail from unknown addresses especially stringently.In a sense, though, my filters do themselves embody a kind of whitelist (and blacklist) because they are based on entire messages, including the headers. So to that extent they &amp;ldquo;know&amp;rdquo; the email addresses of trusted senders and even the routes by which mail gets from them to me. And they know the same about spam, including the server names, mailer versions, and protocols.&lt;/em&gt; _ &lt;em&gt;If I thought that I could keep up current rates of spam filtering, I would consider this problem solved. But it doesn&amp;rsquo;t mean much to be able to filter out most present-day spam, because spam evolves. Indeed, most antispam techniques so far have been like pesticides that do nothing more than create a new, resistant strain of bugs.I&amp;rsquo;m more hopeful about Bayesian filters, because they evolve with the spam. So as spammers start using &amp;ldquo;c0ck&amp;rdquo; instead of &amp;ldquo;cock&amp;rdquo; to evade simple-minded spam filters based on individual words, Bayesian filters automatically notice. Indeed, &amp;ldquo;c0ck&amp;rdquo; is far more damning evidence than &amp;ldquo;cock&amp;rdquo;, and Bayesian filters know precisely how much more.Still, anyone who proposes a plan for spam filtering has to be able to answer the question: if the spammers knew exactly what you were doing, how well could they get past you? For example, I think that if checksum-based spam filtering becomes a serious obstacle, the spammers will just switch to mad-lib techniques for generating message bodies.To beat Bayesian filters, it would not be enough for spammers to make their emails unique or to stop using individual naughty words. They&amp;rsquo;d have to make their mails indistinguishable from your ordinary mail. And this I think would severely constrain them. Spam is mostly sales pitches, so unless your regular mail is all sales pitches, spams will inevitably have a different character. And the spammers would also, of course, have to change (and keep changing) their whole infrastructure, because otherwise the headers would look as bad to the Bayesian filters as ever, no matter what they did to the message body. I don&amp;rsquo;t know enough about the infrastructure that spammers use to know how hard it would be to make the headers look innocent, but my guess is that it would be even harder than making the message look innocent.Assuming they could solve the problem of the headers, the spam of the future will probably look something like this: Hey there. Thought you should check out the following: &lt;a href=&#34;http://www.27meg.com/foo&#34;&gt;http://www.27meg.com/foo&lt;/a&gt; because that is about as much sales pitch as content-based filtering will leave the spammer room to make. (Indeed, it will be hard even to get this past filters, because if everything else in the email is neutral, the spam probability will hinge on the url, and it will take some effort to make that look neutral.)Spammers range from businesses running so-called opt-in lists who don&amp;rsquo;t even try to conceal their identities, to guys who hijack mail servers to send out spams promoting porn sites. If we use filtering to whittle their options down to mails like the one above, that should pretty much put the spammers on the &amp;ldquo;legitimate&amp;rdquo; end of the spectrum out of business; they feel obliged by various state laws to include boilerplate about why their spam is not spam, and how to cancel your &amp;ldquo;subscription,&amp;rdquo; and that kind of text is easy to recognize.(I used to think it was naive to believe that stricter laws would decrease spam. Now I think that while stricter laws may not decrease the amount of spam that spammers send, they can certainly help filters to decrease the amount of spam that recipients actually see.)All along the spectrum, if you restrict the sales pitches spammers can make, you will inevitably tend to put them out of business. That word business is an important one to remember. The spammers are businessmen. They send spam because it works. It works because although the response rate is abominably low (at best 15 per million, vs 3000 per million for a catalog mailing), the cost, to them, is practically nothing. The cost is enormous for the recipients, about 5 man-weeks for each million recipients who spend a second to delete the spam, but the spammer doesn&amp;rsquo;t have to pay that.Sending spam does cost the spammer something, though. [2] So the lower we can get the response rate&amp;ndash; whether by filtering, or by using filters to force spammers to dilute their pitches&amp;ndash; the fewer businesses will find it worth their while to send spam.The reason the spammers use the kinds of sales pitches that they do is to increase response rates. This is possibly even more disgusting than getting inside the mind of a spammer, but let&amp;rsquo;s take a quick look inside the mind of someone who responds to a spam. This person is either astonishingly credulous or deeply in denial about their sexual interests. In either case, repulsive or idiotic as the spam seems to us, it is exciting to them. The spammers wouldn&amp;rsquo;t say these things if they didn&amp;rsquo;t sound exciting. And &amp;ldquo;thought you should check out the following&amp;rdquo; is just not going to have nearly the pull with the spam recipient as the kinds of things that spammers say now. Result: if it can&amp;rsquo;t contain exciting sales pitches, spam becomes less effective as a marketing vehicle, and fewer businesses want to use it.That is the big win in the end. I started writing spam filtering software because I didn&amp;rsquo;t want have to look at the stuff anymore. But if we get good enough at filtering out spam, it will stop working, and the spammers will actually stop sending it.&lt;/em&gt; _ _Of all the approaches to fighting spam, from software to laws, I believe Bayesian filtering will be the single most effective. But I also think that the more different kinds of antispam efforts we undertake, the better, because any measure that constrains spammers will tend to make filtering easier. And even within the world of content-based filtering, I think it will be a good thing if there are many different kinds of software being used simultaneously. The more different filters there are, the harder it will be for spammers to tune spams to get through them. Appendix: Examples of FilteringHere is an example of a spam that arrived while I was writing this article. The fifteen most interesting words in this spam are: qvp0045 indira mx-05 intimail $7500 freeyankeedom cdo bluefoxmedia jpg unsecured platinum 3d0 qves 7c5 7c266675 The words are a mix of stuff from the headers and from the message body, which is typical of spam. Also typical of spam is that every one of these words has a spam probability, in my database, of .99. In fact there are more than fifteen words with probabilities of .99, and these are just the first fifteen seen.Unfortunately that makes this email a boring example of the use of Bayes&amp;rsquo; Rule. To see an interesting variety of probabilities we have to look at this actually quite atypical spam.The fifteen most interesting words in this spam, with their probabilities, are: madam 0.99 promotion 0.99 republic 0.99 shortest 0.047225013 mandatory 0.047225013 standardization 0.07347802 sorry 0.08221981 supported 0.09019077 people&amp;rsquo;s 0.09019077 enter 0.9075001 quality 0.8921298 organization 0.12454646 investment 0.8568143 very 0.14758544 valuable 0.82347786 This time the evidence is a mix of good and bad. A word like &amp;ldquo;shortest&amp;rdquo; is almost as much evidence for innocence as a word like &amp;ldquo;madam&amp;rdquo; or &amp;ldquo;promotion&amp;rdquo; is for guilt. But still the case for guilt is stronger. If you combine these numbers according to Bayes&amp;rsquo; Rule, the resulting probability is .9027.&amp;ldquo;Madam&amp;rdquo; is obviously from spams beginning &amp;ldquo;Dear Sir or Madam.&amp;rdquo; They&amp;rsquo;re not very common, but the word &amp;ldquo;madam&amp;rdquo; never occurs in my legitimate email, and it&amp;rsquo;s all about the ratio.&amp;ldquo;Republic&amp;rdquo; scores high because it often shows up in Nigerian scam emails, and also occurs once or twice in spams referring to Korea and South Africa. You might say that it&amp;rsquo;s an accident that it thus helps identify this spam. But I&amp;rsquo;ve found when examining spam probabilities that there are a lot of these accidents, and they have an uncanny tendency to push things in the right direction rather than the wrong one. In this case, it is not entirely a coincidence that the word &amp;ldquo;Republic&amp;rdquo; occurs in Nigerian scam emails and this spam. There is a whole class of dubious business propositions involving less developed countries, and these in turn are more likely to have names that specify explicitly (because they aren&amp;rsquo;t) that they are republics.[3]On the other hand, &amp;ldquo;enter&amp;rdquo; is a genuine miss. It occurs mostly in unsubscribe instructions, but here is used in a completely innocent way. Fortunately the statistical approach is fairly robust, and can tolerate quite a lot of misses before the results start to be thrown off.For comparison, here is an example of that rare bird, a spam that gets through the filters. Why? Because by sheer chance it happens to be loaded with words that occur in my actual email: perl 0.01 python 0.01 tcl 0.01 scripting 0.01 morris 0.01 graham 0.01491078 guarantee 0.9762507 cgi 0.9734398 paul 0.027040077 quite 0.030676773 pop3 0.042199217 various 0.06080265 prices 0.9359873 managed 0.06451222 difficult 0.071706355 There are a couple pieces of good news here. First, this mail probably wouldn&amp;rsquo;t get through the filters of someone who didn&amp;rsquo;t happen to specialize in programming languages and have a good friend called Morris. For the average user, all the top five words here would be neutral and would not contribute to the spam probability.Second, I think filtering based on word pairs (see below) might well catch this one: &amp;ldquo;cost effective&amp;rdquo;, &amp;ldquo;setup fee&amp;rdquo;, &amp;ldquo;money back&amp;rdquo; &amp;ndash; pretty incriminating stuff. And of course if they continued to spam me (or a network I was part of), &amp;ldquo;Hostex&amp;rdquo; itself would be recognized as a spam term.Finally, here is an innocent email. Its fifteen most interesting words are as follows: continuation 0.01 describe 0.01 continuations 0.01 example 0.033600237 programming 0.05214485 i&amp;rsquo;m 0.055427782 examples 0.07972858 color 0.9189189 localhost 0.09883721 hi 0.116539136 california 0.84421706 same 0.15981844 spot 0.1654587 us-ascii 0.16804294 what 0.19212411 Most of the words here indicate the mail is an innocent one. There are two bad smelling words, &amp;ldquo;color&amp;rdquo; (spammers love colored fonts) and &amp;ldquo;California&amp;rdquo; (which occurs in testimonials and also in menus in forms), but they are not enough to outweigh obviously innocent words like &amp;ldquo;continuation&amp;rdquo; and &amp;ldquo;example&amp;rdquo;.It&amp;rsquo;s interesting that &amp;ldquo;describe&amp;rdquo; rates as so thoroughly innocent. It hasn&amp;rsquo;t occurred in a single one of my 4000 spams. The data turns out to be full of such surprises. One of the things you learn when you analyze spam texts is how narrow a subset of the language spammers operate in. It&amp;rsquo;s that fact, together with the equally characteristic vocabulary of any individual user&amp;rsquo;s mail, that makes Bayesian filtering a good bet.Appendix: More IdeasOne idea that I haven&amp;rsquo;t tried yet is to filter based on word pairs, or even triples, rather than individual words. This should yield a much sharper estimate of the probability. For example, in my current database, the word &amp;ldquo;offers&amp;rdquo; has a probability of .96. If you based the probabilities on word pairs, you&amp;rsquo;d end up with &amp;ldquo;special offers&amp;rdquo; and &amp;ldquo;valuable offers&amp;rdquo; having probabilities of .99 and, say, &amp;ldquo;approach offers&amp;rdquo; (as in &amp;ldquo;this approach offers&amp;rdquo;) having a probability of .1 or less.The reason I haven&amp;rsquo;t done this is that filtering based on individual words already works so well. But it does mean that there is room to tighten the filters if spam gets harder to detect. (Curiously, a filter based on word pairs would be in effect a Markov-chaining text generator running in reverse.)Specific spam features (e.g. not seeing the recipient&amp;rsquo;s address in the to: field) do of course have value in recognizing spam. They can be considered in this algorithm by treating them as virtual words. I&amp;rsquo;ll probably do this in future versions, at least for a handful of the most egregious spam indicators. Feature-recognizing spam filters are right in many details; what they lack is an overall discipline for combining evidence.Recognizing nonspam features may be more important than recognizing spam features. False positives are such a worry that they demand extraordinary measures. I will probably in future versions add a second level of testing designed specifically to avoid false positives. If a mail triggers this second level of filters it will be accepted even if its spam probability is above the threshold.I don&amp;rsquo;t expect this second level of filtering to be Bayesian. It will inevitably be not only ad hoc, but based on guesses, because the number of false positives will not tend to be large enough to notice patterns. (It is just as well, anyway, if a backup system doesn&amp;rsquo;t rely on the same technology as the primary system.)Another thing I may try in the future is to focus extra attention on specific parts of the email. For example, about 95% of current spam includes the url of a site they want you to visit. (The remaining 5% want you to call a phone number, reply by email or to a US mail address, or in a few cases to buy a certain stock.) The url is in such cases practically enough by itself to determine whether the email is spam.Domain names differ from the rest of the text in a (non-German) email in that they often consist of several words stuck together. Though computationally expensive in the general case, it might be worth trying to decompose them. If a filter has never seen the token &amp;ldquo;xxxporn&amp;rdquo; before it will have an individual spam probability of .4, whereas &amp;ldquo;xxx&amp;rdquo; and &amp;ldquo;porn&amp;rdquo; individually have probabilities (in my corpus) of .9889 and .99 respectively, and a combined probability of .9998.I expect decomposing domain names to become more important as spammers are gradually forced to stop using incriminating words in the text of their messages. (A url with an ip address is of course an extremely incriminating sign, except in the mail of a few sysadmins.)It might be a good idea to have a cooperatively maintained list of urls promoted by spammers. We&amp;rsquo;d need a trust metric of the type studied by Raph Levien to prevent malicious or incompetent submissions, but if we had such a thing it would provide a boost to any filtering software. It would also be a convenient basis for boycotts.Another way to test dubious urls would be to send out a crawler to look at the site before the user looked at the email mentioning it. You could use a Bayesian filter to rate the site just as you would an email, and whatever was found on the site could be included in calculating the probability of the email being a spam. A url that led to a redirect would of course be especially suspicious.One cooperative project that I think really would be a good idea would be to accumulate a giant corpus of spam. A large, clean corpus is the key to making Bayesian filtering work well. Bayesian filters could actually use the corpus as input. But such a corpus would be useful for other kinds of filters too, because it could be used to test them.Creating such a corpus poses some technical problems. We&amp;rsquo;d need trust metrics to prevent malicious or incompetent submissions, of course. We&amp;rsquo;d also need ways of erasing personal information (not just to-addresses and ccs, but also e.g. the arguments to unsubscribe urls, which often encode the to-address) from mails in the corpus. If anyone wants to take on this project, it would be a good thing for the world.Appendix: Defining SpamI think there is a rough consensus on what spam is, but it would be useful to have an explicit definition. We&amp;rsquo;ll need to do this if we want to establish a central corpus of spam, or even to compare spam filtering rates meaningfully.To start with, spam is not unsolicited commercial email. If someone in my neighborhood heard that I was looking for an old Raleigh three-speed in good condition, and sent me an email offering to sell me one, I&amp;rsquo;d be delighted, and yet this email would be both commercial and unsolicited. The defining feature of spam (in fact, its raison d&amp;rsquo;etre) is not that it is unsolicited, but that it is automated.It is merely incidental, too, that spam is usually commercial. If someone started sending mass email to support some political cause, for example, it would be just as much spam as email promoting a porn site.I propose we define spam as unsolicited automated email. This definition thus includes some email that many legal definitions of spam don&amp;rsquo;t. Legal definitions of spam, influenced presumably by lobbyists, tend to exclude mail sent by companies that have an &amp;ldquo;existing relationship&amp;rdquo; with the recipient. But buying something from a company, for example, does not imply that you have solicited ongoing email from them. If I order something from an online store, and they then send me a stream of spam, it&amp;rsquo;s still spam.Companies sending spam often give you a way to &amp;ldquo;unsubscribe,&amp;rdquo; or ask you to go to their site and change your &amp;ldquo;account preferences&amp;rdquo; if you want to stop getting spam. This is not enough to stop the mail from being spam. Not opting out is not the same as opting in. Unless the recipient explicitly checked a clearly labelled box (whose default was no) asking to receive the email, then it is spam.In some business relationships, you do implicitly solicit certain kinds of mail. When you order online, I think you implicitly solicit a receipt, and notification when the order ships. I don&amp;rsquo;t mind when Verisign sends me mail warning that a domain name is about to expire (at least, if they are the actual registrar for it). But when Verisign sends me email offering a FREE Guide to Building My E-Commerce Web Site, that&amp;rsquo;s spam. Notes:[1] The examples in this article are translated into Common Lisp for, believe it or not, greater accessibility. The application described here is one that we wrote in order to test a new Lisp dialect called Arc that is not yet released.[2] Currently the lowest rate seems to be about $200 to send a million spams. That&amp;rsquo;s very cheap, 1/50th of a cent per spam. But filtering out 95% of spam, for example, would increase the spammers&amp;rsquo; cost to reach a given audience by a factor of 20. Few can have margins big enough to absorb that.[3] As a rule of thumb, the more qualifiers there are before the name of a country, the more corrupt the rulers. A country called The Socialist People&amp;rsquo;s Democratic Republic of X is probably the last place in the world you&amp;rsquo;d want to live. Thanks to Sarah Harlin for reading drafts of this; Daniel Giffin (who is also writing the production Arc interpreter) for several good ideas about filtering and for creating our mail infrastructure; Robert Morris, Trevor Blackwell and Erann Gat for many discussions about spam; Raph Levien for advice about trust metrics; and Chip Coldwell and Sam Steingold for advice about statistics. You&amp;rsquo;ll find this essay and 14 others in Hackers &amp;amp; Painters. More Info:Plan for Spam FAQBetter Bayesian FilteringFilters that Fight BackWill Filters Kill Spam?Japanese TranslationSpanish TranslationChinese TranslationProbabilitySpam is DifferentFilters vs. BlacklistsTrust MetricsFiltering ResearchMicrosoft PatentSlashdot ArticleThe Wrong WayLWN: Filter ComparisonCRM114 gets 99.87%&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/speak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/speak/</guid>
      <description>&lt;h1 id=&#34;speak&#34;&gt;Speak&lt;/h1&gt;&#xA;&lt;p&gt;Writing and Speaking March 2012I&amp;rsquo;m not a very good speaker. I say &amp;ldquo;um&amp;rdquo; a lot. Sometimes I have to pause when I lose my train of thought. I wish I were a better speaker. But I don&amp;rsquo;t wish I were a better speaker like I wish I were a better writer. What I really want is to have good ideas, and that&amp;rsquo;s a much bigger part of being a good writer than being a good speaker.Having good ideas is most of writing well. If you know what you&amp;rsquo;re talking about, you can say it in the plainest words and you&amp;rsquo;ll be perceived as having a good style. With speaking it&amp;rsquo;s the opposite: having good ideas is an alarmingly small component of being a good speaker.I first noticed this at a conference several years ago. There was another speaker who was much better than me. He had all of us roaring with laughter. I seemed awkward and halting by comparison. Afterward I put my talk online like I usually do. As I was doing it I tried to imagine what a transcript of the other guy&amp;rsquo;s talk would be like, and it was only then I realized he hadn&amp;rsquo;t said very much.Maybe this would have been obvious to someone who knew more about speaking, but it was a revelation to me how much less ideas mattered in speaking than writing. [1]A few years later I heard a talk by someone who was not merely a better speaker than me, but a famous speaker. Boy was he good. So I decided I&amp;rsquo;d pay close attention to what he said, to learn how he did it. After about ten sentences I found myself thinking &amp;ldquo;I don&amp;rsquo;t want to be a good speaker.&amp;ldquo;Being a really good speaker is not merely orthogonal to having good ideas, but in many ways pushes you in the opposite direction. For example, when I give a talk, I usually write it out beforehand. I know that&amp;rsquo;s a mistake; I know delivering a prewritten talk makes it harder to engage with an audience. The way to get the attention of an audience is to give them your full attention, and when you&amp;rsquo;re delivering a prewritten talk, your attention is always divided between the audience and the talk — even if you&amp;rsquo;ve memorized it. If you want to engage an audience, it&amp;rsquo;s better to start with no more than an outline of what you want to say and ad lib the individual sentences. But if you do that, you might spend no more time thinking about each sentence than it takes to say it. [2] Occasionally the stimulation of talking to a live audience makes you think of new things, but in general this is not going to generate ideas as well as writing does, where you can spend as long on each sentence as you want.If you rehearse a prewritten speech enough, you can get asymptotically close to the sort of engagement you get when speaking ad lib. Actors do. But here again there&amp;rsquo;s a tradeoff between smoothness and ideas. All the time you spend practicing a talk, you could instead spend making it better. Actors don&amp;rsquo;t face that temptation, except in the rare cases where they&amp;rsquo;ve written the script, but any speaker does. Before I give a talk I can usually be found sitting in a corner somewhere with a copy printed out on paper, trying to rehearse it in my head. But I always end up spending most of the time rewriting it instead. Every talk I give ends up being given from a manuscript full of things crossed out and rewritten. Which of course makes me um even more, because I haven&amp;rsquo;t had any time to practice the new bits. [3]Depending on your audience, there are even worse tradeoffs than these. Audiences like to be flattered; they like jokes; they like to be swept off their feet by a vigorous stream of words. As you decrease the intelligence of the audience, being a good speaker is increasingly a matter of being a good bullshitter. That&amp;rsquo;s true in writing too of course, but the descent is steeper with talks. Any given person is dumber as a member of an audience than as a reader. Just as a speaker ad libbing can only spend as long thinking about each sentence as it takes to say it, a person hearing a talk can only spend as long thinking about each sentence as it takes to hear it. Plus people in an audience are always affected by the reactions of those around them, and the reactions that spread from person to person in an audience are disproportionately the more brutish sort, just as low notes travel through walls better than high ones. Every audience is an incipient mob, and a good speaker uses that. Part of the reason I laughed so much at the talk by the good speaker at that conference was that everyone else did. [4]So are talks useless? They&amp;rsquo;re certainly inferior to the written word as a source of ideas. But that&amp;rsquo;s not all talks are good for. When I go to a talk, it&amp;rsquo;s usually because I&amp;rsquo;m interested in the speaker. Listening to a talk is the closest most of us can get to having a conversation with someone like the president, who doesn&amp;rsquo;t have time to meet individually with all the people who want to meet him.Talks are also good at motivating me to do things. It&amp;rsquo;s probably no coincidence that so many famous speakers are described as motivational speakers. That may be what public speaking is really for. It&amp;rsquo;s probably what it was originally for. The emotional reactions you can elicit with a talk can be a powerful force. I wish I could say that this force was more often used for good than ill, but I&amp;rsquo;m not sure.Notes[1] I&amp;rsquo;m not talking here about academic talks, which are a different type of thing. While the audience at an academic talk might appreciate a joke, they will (or at least should) make a conscious effort to see what new ideas you&amp;rsquo;re presenting.[2] That&amp;rsquo;s the lower bound. In practice you can often do better, because talks are usually about things you&amp;rsquo;ve written or talked about before, and when you ad lib, you end up reproducing some of those sentences. Like early medieval architecture, impromptu talks are made of spolia. Which feels a bit dishonest, incidentally, because you have to deliver these sentences as if you&amp;rsquo;d just thought of them.[3] Robert Morris points out that there is a way in which practicing talks makes them better: reading a talk out loud can expose awkward parts. I agree and in fact I read most things I write out loud at least once for that reason.[4] For sufficiently small audiences, it may not be true that being part of an audience makes people dumber. The real decline seems to set in when the audience gets too big for the talk to feel like a conversation — maybe around 10 people. Thanks to Sam Altman and Robert Morris for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/start/</guid>
      <description>&lt;h1 id=&#34;start&#34;&gt;Start&lt;/h1&gt;&#xA;&lt;p&gt;How to Start a Startup Want to start a startup? Get funded by Y Combinator. March 2005(This essay is derived from a talk at the Harvard Computer Society.)You need three things to create a successful startup: to start with good people, to make something customers actually want, and to spend as little money as possible. Most startups that fail do it because they fail at one of these. A startup that does all three will probably succeed.And that&amp;rsquo;s kind of exciting, when you think about it, because all three are doable. Hard, but doable. And since a startup that succeeds ordinarily makes its founders rich, that implies getting rich is doable too. Hard, but doable.If there is one message I&amp;rsquo;d like to get across about startups, that&amp;rsquo;s it. There is no magically difficult step that requires brilliance to solve.The IdeaIn particular, you don&amp;rsquo;t need a brilliant idea to start a startup around. The way a startup makes money is to offer people better technology than they have now. But what people have now is often so bad that it doesn&amp;rsquo;t take brilliance to do better.Google&amp;rsquo;s plan, for example, was simply to create a search site that didn&amp;rsquo;t suck. They had three new ideas: index more of the Web, use links to rank search results, and have clean, simple web pages with unintrusive keyword-based ads. Above all, they were determined to make a site that was good to use. No doubt there are great technical tricks within Google, but the overall plan was straightforward. And while they probably have bigger ambitions now, this alone brings them a billion dollars a year. [1]There are plenty of other areas that are just as backward as search was before Google. I can think of several heuristics for generating ideas for startups, but most reduce to this: look at something people are trying to do, and figure out how to do it in a way that doesn&amp;rsquo;t suck.For example, dating sites currently suck far worse than search did before Google. They all use the same simple-minded model. They seem to have approached the problem by thinking about how to do database matches instead of how dating works in the real world. An undergrad could build something better as a class project. And yet there&amp;rsquo;s a lot of money at stake. Online dating is a valuable business now, and it might be worth a hundred times as much if it worked.An idea for a startup, however, is only a beginning. A lot of would-be startup founders think the key to the whole process is the initial idea, and from that point all you have to do is execute. Venture capitalists know better. If you go to VC firms with a brilliant idea that you&amp;rsquo;ll tell them about if they sign a nondisclosure agreement, most will tell you to get lost. That shows how much a mere idea is worth. The market price is less than the inconvenience of signing an NDA.Another sign of how little the initial idea is worth is the number of startups that change their plan en route. Microsoft&amp;rsquo;s original plan was to make money selling programming languages, of all things. Their current business model didn&amp;rsquo;t occur to them until IBM dropped it in their lap five years later.Ideas for startups are worth something, certainly, but the trouble is, they&amp;rsquo;re not transferrable. They&amp;rsquo;re not something you could hand to someone else to execute. Their value is mainly as starting points: as questions for the people who had them to continue thinking about.What matters is not ideas, but the people who have them. Good people can fix bad ideas, but good ideas can&amp;rsquo;t save bad people. PeopleWhat do I mean by good people? One of the best tricks I learned during our startup was a rule for deciding who to hire. Could you describe the person as an animal? It might be hard to translate that into another language, but I think everyone in the US knows what it means. It means someone who takes their work a little too seriously; someone who does what they do so well that they pass right through professional and cross over into obsessive.What it means specifically depends on the job: a salesperson who just won&amp;rsquo;t take no for an answer; a hacker who will stay up till 4:00 AM rather than go to bed leaving code with a bug in it; a PR person who will cold-call New York Times reporters on their cell phones; a graphic designer who feels physical pain when something is two millimeters out of place.Almost everyone who worked for us was an animal at what they did. The woman in charge of sales was so tenacious that I used to feel sorry for potential customers on the phone with her. You could sense them squirming on the hook, but you knew there would be no rest for them till they&amp;rsquo;d signed up.If you think about people you know, you&amp;rsquo;ll find the animal test is easy to apply. Call the person&amp;rsquo;s image to mind and imagine the sentence &amp;ldquo;so-and-so is an animal.&amp;rdquo; If you laugh, they&amp;rsquo;re not. You don&amp;rsquo;t need or perhaps even want this quality in big companies, but you need it in a startup.For programmers we had three additional tests. Was the person genuinely smart? If so, could they actually get things done? And finally, since a few good hackers have unbearable personalities, could we stand to have them around?That last test filters out surprisingly few people. We could bear any amount of nerdiness if someone was truly smart. What we couldn&amp;rsquo;t stand were people with a lot of attitude. But most of those weren&amp;rsquo;t truly smart, so our third test was largely a restatement of the first.When nerds are unbearable it&amp;rsquo;s usually because they&amp;rsquo;re trying too hard to seem smart. But the smarter they are, the less pressure they feel to act smart. So as a rule you can recognize genuinely smart people by their ability to say things like &amp;ldquo;I don&amp;rsquo;t know,&amp;rdquo; &amp;ldquo;Maybe you&amp;rsquo;re right,&amp;rdquo; and &amp;ldquo;I don&amp;rsquo;t understand x well enough.&amp;ldquo;This technique doesn&amp;rsquo;t always work, because people can be influenced by their environment. In the MIT CS department, there seems to be a tradition of acting like a brusque know-it-all. I&amp;rsquo;m told it derives ultimately from Marvin Minsky, in the same way the classic airline pilot manner is said to derive from Chuck Yeager. Even genuinely smart people start to act this way there, so you have to make allowances.It helped us to have Robert Morris, who is one of the readiest to say &amp;ldquo;I don&amp;rsquo;t know&amp;rdquo; of anyone I&amp;rsquo;ve met. (At least, he was before he became a professor at MIT.) No one dared put on attitude around Robert, because he was obviously smarter than they were and yet had zero attitude himself.Like most startups, ours began with a group of friends, and it was through personal contacts that we got most of the people we hired. This is a crucial difference between startups and big companies. Being friends with someone for even a couple days will tell you more than companies could ever learn in interviews. [2]It&amp;rsquo;s no coincidence that startups start around universities, because that&amp;rsquo;s where smart people meet. It&amp;rsquo;s not what people learn in classes at MIT and Stanford that has made technology companies spring up around them. They could sing campfire songs in the classes so long as admissions worked the same.If you start a startup, there&amp;rsquo;s a good chance it will be with people you know from college or grad school. So in theory you ought to try to make friends with as many smart people as you can in school, right? Well, no. Don&amp;rsquo;t make a conscious effort to schmooze; that doesn&amp;rsquo;t work well with hackers.What you should do in college is work on your own projects. Hackers should do this even if they don&amp;rsquo;t plan to start startups, because it&amp;rsquo;s the only real way to learn how to program. In some cases you may collaborate with other students, and this is the best way to get to know good hackers. The project may even grow into a startup. But once again, I wouldn&amp;rsquo;t aim too directly at either target. Don&amp;rsquo;t force things; just work on stuff you like with people you like.Ideally you want between two and four founders. It would be hard to start with just one. One person would find the moral weight of starting a company hard to bear. Even Bill Gates, who seems to be able to bear a good deal of moral weight, had to have a co-founder. But you don&amp;rsquo;t want so many founders that the company starts to look like a group photo. Partly because you don&amp;rsquo;t need a lot of people at first, but mainly because the more founders you have, the worse disagreements you&amp;rsquo;ll have. When there are just two or three founders, you know you have to resolve disputes immediately or perish. If there are seven or eight, disagreements can linger and harden into factions. You don&amp;rsquo;t want mere voting; you need unanimity.In a technology startup, which most startups are, the founders should include technical people. During the Internet Bubble there were a number of startups founded by business people who then went looking for hackers to create their product for them. This doesn&amp;rsquo;t work well. Business people are bad at deciding what to do with technology, because they don&amp;rsquo;t know what the options are, or which kinds of problems are hard and which are easy. And when business people try to hire hackers, they can&amp;rsquo;t tell which ones are good. Even other hackers have a hard time doing that. For business people it&amp;rsquo;s roulette.Do the founders of a startup have to include business people? That depends. We thought so when we started ours, and we asked several people who were said to know about this mysterious thing called &amp;ldquo;business&amp;rdquo; if they would be the president. But they all said no, so I had to do it myself. And what I discovered was that business was no great mystery. It&amp;rsquo;s not something like physics or medicine that requires extensive study. You just try to get people to pay you for stuff.I think the reason I made such a mystery of business was that I was disgusted by the idea of doing it. I wanted to work in the pure, intellectual world of software, not deal with customers&amp;rsquo; mundane problems. People who don&amp;rsquo;t want to get dragged into some kind of work often develop a protective incompetence at it. Paul Erdos was particularly good at this. By seeming unable even to cut a grapefruit in half (let alone go to the store and buy one), he forced other people to do such things for him, leaving all his time free for math. Erdos was an extreme case, but most husbands use the same trick to some degree.Once I was forced to discard my protective incompetence, I found that business was neither so hard nor so boring as I feared. There are esoteric areas of business that are quite hard, like tax law or the pricing of derivatives, but you don&amp;rsquo;t need to know about those in a startup. All you need to know about business to run a startup are commonsense things people knew before there were business schools, or even universities.If you work your way down the Forbes 400 making an x next to the name of each person with an MBA, you&amp;rsquo;ll learn something important about business school. After Warren Buffett, you don&amp;rsquo;t hit another MBA till number 22, Phil Knight, the CEO of Nike. There are only 5 MBAs in the top 50. What you notice in the Forbes 400 are a lot of people with technical backgrounds. Bill Gates, Steve Jobs, Larry Ellison, Michael Dell, Jeff Bezos, Gordon Moore. The rulers of the technology business tend to come from technology, not business. So if you want to invest two years in something that will help you succeed in business, the evidence suggests you&amp;rsquo;d do better to learn how to hack than get an MBA. [3]There is one reason you might want to include business people in a startup, though: because you have to have at least one person willing and able to focus on what customers want. Some believe only business people can do this&amp;ndash; that hackers can implement software, but not design it. That&amp;rsquo;s nonsense. There&amp;rsquo;s nothing about knowing how to program that prevents hackers from understanding users, or about not knowing how to program that magically enables business people to understand them.If you can&amp;rsquo;t understand users, however, you should either learn how or find a co-founder who can. That is the single most important issue for technology startups, and the rock that sinks more of them than anything else.What Customers WantIt&amp;rsquo;s not just startups that have to worry about this. I think most businesses that fail do it because they don&amp;rsquo;t give customers what they want. Look at restaurants. A large percentage fail, about a quarter in the first year. But can you think of one restaurant that had really good food and went out of business?Restaurants with great food seem to prosper no matter what. A restaurant with great food can be expensive, crowded, noisy, dingy, out of the way, and even have bad service, and people will keep coming. It&amp;rsquo;s true that a restaurant with mediocre food can sometimes attract customers through gimmicks. But that approach is very risky. It&amp;rsquo;s more straightforward just to make the food good.It&amp;rsquo;s the same with technology. You hear all kinds of reasons why startups fail. But can you think of one that had a massively popular product and still failed?In nearly every failed startup, the real problem was that customers didn&amp;rsquo;t want the product. For most, the cause of death is listed as &amp;ldquo;ran out of funding,&amp;rdquo; but that&amp;rsquo;s only the immediate cause. Why couldn&amp;rsquo;t they get more funding? Probably because the product was a dog, or never seemed likely to be done, or both.When I was trying to think of the things every startup needed to do, I almost included a fourth: get a version 1 out as soon as you can. But I decided not to, because that&amp;rsquo;s implicit in making something customers want. The only way to make something customers want is to get a prototype in front of them and refine it based on their reactions.The other approach is what I call the &amp;ldquo;Hail Mary&amp;rdquo; strategy. You make elaborate plans for a product, hire a team of engineers to develop it (people who do this tend to use the term &amp;ldquo;engineer&amp;rdquo; for hackers), and then find after a year that you&amp;rsquo;ve spent two million dollars to develop something no one wants. This was not uncommon during the Bubble, especially in companies run by business types, who thought of software development as something terrifying that therefore had to be carefully planned.We never even considered that approach. As a Lisp hacker, I come from the tradition of rapid prototyping. I would not claim (at least, not here) that this is the right way to write every program, but it&amp;rsquo;s certainly the right way to write software for a startup. In a startup, your initial plans are almost certain to be wrong in some way, and your first priority should be to figure out where. The only way to do that is to try implementing them.Like most startups, we changed our plan on the fly. At first we expected our customers to be Web consultants. But it turned out they didn&amp;rsquo;t like us, because our software was easy to use and we hosted the site. It would be too easy for clients to fire them. We also thought we&amp;rsquo;d be able to sign up a lot of catalog companies, because selling online was a natural extension of their existing business. But in 1996 that was a hard sell. The middle managers we talked to at catalog companies saw the Web not as an opportunity, but as something that meant more work for them.We did get a few of the more adventurous catalog companies. Among them was Frederick&amp;rsquo;s of Hollywood, which gave us valuable experience dealing with heavy loads on our servers. But most of our users were small, individual merchants who saw the Web as an opportunity to build a business. Some had retail stores, but many only existed online. And so we changed direction to focus on these users. Instead of concentrating on the features Web consultants and catalog companies would want, we worked to make the software easy to use.I learned something valuable from that. It&amp;rsquo;s worth trying very, very hard to make technology easy to use. Hackers are so used to computers that they have no idea how horrifying software seems to normal people. Stephen Hawking&amp;rsquo;s editor told him that every equation he included in his book would cut sales in half. When you work on making technology easier to use, you&amp;rsquo;re riding that curve up instead of down. A 10% improvement in ease of use doesn&amp;rsquo;t just increase your sales 10%. It&amp;rsquo;s more likely to double your sales.How do you figure out what customers want? Watch them. One of the best places to do this was at trade shows. Trade shows didn&amp;rsquo;t pay as a way of getting new customers, but they were worth it as market research. We didn&amp;rsquo;t just give canned presentations at trade shows. We used to show people how to build real, working stores. Which meant we got to watch as they used our software, and talk to them about what they needed.No matter what kind of startup you start, it will probably be a stretch for you, the founders, to understand what users want. The only kind of software you can build without studying users is the sort for which you are the typical user. But this is just the kind that tends to be open source: operating systems, programming languages, editors, and so on. So if you&amp;rsquo;re developing technology for money, you&amp;rsquo;re probably not going to be developing it for people like you. Indeed, you can use this as a way to generate ideas for startups: what do people who are not like you want from technology?When most people think of startups, they think of companies like Apple or Google. Everyone knows these, because they&amp;rsquo;re big consumer brands. But for every startup like that, there are twenty more that operate in niche markets or live quietly down in the infrastructure. So if you start a successful startup, odds are you&amp;rsquo;ll start one of those.Another way to say that is, if you try to start the kind of startup that has to be a big consumer brand, the odds against succeeding are steeper. The best odds are in niche markets. Since startups make money by offering people something better than they had before, the best opportunities are where things suck most. And it would be hard to find a place where things suck more than in corporate IT departments. You would not believe the amount of money companies spend on software, and the crap they get in return. This imbalance equals opportunity.If you want ideas for startups, one of the most valuable things you could do is find a middle-sized non-technology company and spend a couple weeks just watching what they do with computers. Most good hackers have no more idea of the horrors perpetrated in these places than rich Americans do of what goes on in Brazilian slums.Start by writing software for smaller companies, because it&amp;rsquo;s easier to sell to them. It&amp;rsquo;s worth so much to sell stuff to big companies that the people selling them the crap they currently use spend a lot of time and money to do it. And while you can outhack Oracle with one frontal lobe tied behind your back, you can&amp;rsquo;t outsell an Oracle salesman. So if you want to win through better technology, aim at smaller customers. [4]They&amp;rsquo;re the more strategically valuable part of the market anyway. In technology, the low end always eats the high end. It&amp;rsquo;s easier to make an inexpensive product more powerful than to make a powerful product cheaper. So the products that start as cheap, simple options tend to gradually grow more powerful till, like water rising in a room, they squash the &amp;ldquo;high-end&amp;rdquo; products against the ceiling. Sun did this to mainframes, and Intel is doing it to Sun. Microsoft Word did it to desktop publishing software like Interleaf and Framemaker. Mass-market digital cameras are doing it to the expensive models made for professionals. Avid did it to the manufacturers of specialized video editing systems, and now Apple is doing it to Avid. Henry Ford did it to the car makers that preceded him. If you build the simple, inexpensive option, you&amp;rsquo;ll not only find it easier to sell at first, but you&amp;rsquo;ll also be in the best position to conquer the rest of the market.It&amp;rsquo;s very dangerous to let anyone fly under you. If you have the cheapest, easiest product, you&amp;rsquo;ll own the low end. And if you don&amp;rsquo;t, you&amp;rsquo;re in the crosshairs of whoever does.Raising MoneyTo make all this happen, you&amp;rsquo;re going to need money. Some startups have been self-funding&amp;ndash; Microsoft for example&amp;ndash; but most aren&amp;rsquo;t. I think it&amp;rsquo;s wise to take money from investors. To be self-funding, you have to start as a consulting company, and it&amp;rsquo;s hard to switch from that to a product company.Financially, a startup is like a pass/fail course. The way to get rich from a startup is to maximize the company&amp;rsquo;s chances of succeeding, not to maximize the amount of stock you retain. So if you can trade stock for something that improves your odds, it&amp;rsquo;s probably a smart move.To most hackers, getting investors seems like a terrifying and mysterious process. Actually it&amp;rsquo;s merely tedious. I&amp;rsquo;ll try to give an outline of how it works.The first thing you&amp;rsquo;ll need is a few tens of thousands of dollars to pay your expenses while you develop a prototype. This is called seed capital. Because so little money is involved, raising seed capital is comparatively easy&amp;ndash; at least in the sense of getting a quick yes or no.Usually you get seed money from individual rich people called &amp;ldquo;angels.&amp;rdquo; Often they&amp;rsquo;re people who themselves got rich from technology. At the seed stage, investors don&amp;rsquo;t expect you to have an elaborate business plan. Most know that they&amp;rsquo;re supposed to decide quickly. It&amp;rsquo;s not unusual to get a check within a week based on a half-page agreement.We started Viaweb with $10,000 of seed money from our friend Julian. But he gave us a lot more than money. He&amp;rsquo;s a former CEO and also a corporate lawyer, so he gave us a lot of valuable advice about business, and also did all the legal work of getting us set up as a company. Plus he introduced us to one of the two angel investors who supplied our next round of funding.Some angels, especially those with technology backgrounds, may be satisfied with a demo and a verbal description of what you plan to do. But many will want a copy of your business plan, if only to remind themselves what they invested in.Our angels asked for one, and looking back, I&amp;rsquo;m amazed how much worry it caused me. &amp;ldquo;Business plan&amp;rdquo; has that word &amp;ldquo;business&amp;rdquo; in it, so I figured it had to be something I&amp;rsquo;d have to read a book about business plans to write. Well, it doesn&amp;rsquo;t. At this stage, all most investors expect is a brief description of what you plan to do and how you&amp;rsquo;re going to make money from it, and the resumes of the founders. If you just sit down and write out what you&amp;rsquo;ve been saying to one another, that should be fine. It shouldn&amp;rsquo;t take more than a couple hours, and you&amp;rsquo;ll probably find that writing it all down gives you more ideas about what to do.For the angel to have someone to make the check out to, you&amp;rsquo;re going to have to have some kind of company. Merely incorporating yourselves isn&amp;rsquo;t hard. The problem is, for the company to exist, you have to decide who the founders are, and how much stock they each have. If there are two founders with the same qualifications who are both equally committed to the business, that&amp;rsquo;s easy. But if you have a number of people who are expected to contribute in varying degrees, arranging the proportions of stock can be hard. And once you&amp;rsquo;ve done it, it tends to be set in stone.I have no tricks for dealing with this problem. All I can say is, try hard to do it right. I do have a rule of thumb for recognizing when you have, though. When everyone feels they&amp;rsquo;re getting a slightly bad deal, that they&amp;rsquo;re doing more than they should for the amount of stock they have, the stock is optimally apportioned.There is more to setting up a company than incorporating it, of course: insurance, business license, unemployment compensation, various things with the IRS. I&amp;rsquo;m not even sure what the list is, because we, ah, skipped all that. When we got real funding near the end of 1996, we hired a great CFO, who fixed everything retroactively. It turns out that no one comes and arrests you if you don&amp;rsquo;t do everything you&amp;rsquo;re supposed to when starting a company. And a good thing too, or a lot of startups would never get started. [5]It can be dangerous to delay turning yourself into a company, because one or more of the founders might decide to split off and start another company doing the same thing. This does happen. So when you set up the company, as well as as apportioning the stock, you should get all the founders to sign something agreeing that everyone&amp;rsquo;s ideas belong to this company, and that this company is going to be everyone&amp;rsquo;s only job.[If this were a movie, ominous music would begin here.]While you&amp;rsquo;re at it, you should ask what else they&amp;rsquo;ve signed. One of the worst things that can happen to a startup is to run into intellectual property problems. We did, and it came closer to killing us than any competitor ever did.As we were in the middle of getting bought, we discovered that one of our people had, early on, been bound by an agreement that said all his ideas belonged to the giant company that was paying for him to go to grad school. In theory, that could have meant someone else owned big chunks of our software. So the acquisition came to a screeching halt while we tried to sort this out. The problem was, since we&amp;rsquo;d been about to be acquired, we&amp;rsquo;d allowed ourselves to run low on cash. Now we needed to raise more to keep going. But it&amp;rsquo;s hard to raise money with an IP cloud over your head, because investors can&amp;rsquo;t judge how serious it is.Our existing investors, knowing that we needed money and had nowhere else to get it, at this point attempted certain gambits which I will not describe in detail, except to remind readers that the word &amp;ldquo;angel&amp;rdquo; is a metaphor. The founders thereupon proposed to walk away from the company, after giving the investors a brief tutorial on how to administer the servers themselves. And while this was happening, the acquirers used the delay as an excuse to welch on the deal.Miraculously it all turned out ok. The investors backed down; we did another round of funding at a reasonable valuation; the giant company finally gave us a piece of paper saying they didn&amp;rsquo;t own our software; and six months later we were bought by Yahoo for much more than the earlier acquirer had agreed to pay. So we were happy in the end, though the experience probably took several years off my life.Don&amp;rsquo;t do what we did. Before you consummate a startup, ask everyone about their previous IP history.Once you&amp;rsquo;ve got a company set up, it may seem presumptuous to go knocking on the doors of rich people and asking them to invest tens of thousands of dollars in something that is really just a bunch of guys with some ideas. But when you look at it from the rich people&amp;rsquo;s point of view, the picture is more encouraging. Most rich people are looking for good investments. If you really think you have a chance of succeeding, you&amp;rsquo;re doing them a favor by letting them invest. Mixed with any annoyance they might feel about being approached will be the thought: are these guys the next Google?Usually angels are financially equivalent to founders. They get the same kind of stock and get diluted the same amount in future rounds. How much stock should they get? That depends on how ambitious you feel. When you offer x percent of your company for y dollars, you&amp;rsquo;re implicitly claiming a certain value for the whole company. Venture investments are usually described in terms of that number. If you give an investor new shares equal to 5% of those already outstanding in return for $100,000, then you&amp;rsquo;ve done the deal at a pre-money valuation of $2 million.How do you decide what the value of the company should be? There is no rational way. At this stage the company is just a bet. I didn&amp;rsquo;t realize that when we were raising money. Julian thought we ought to value the company at several million dollars. I thought it was preposterous to claim that a couple thousand lines of code, which was all we had at the time, were worth several million dollars. Eventually we settled on one million, because Julian said no one would invest in a company with a valuation any lower. [6]What I didn&amp;rsquo;t grasp at the time was that the valuation wasn&amp;rsquo;t just the value of the code we&amp;rsquo;d written so far. It was also the value of our ideas, which turned out to be right, and of all the future work we&amp;rsquo;d do, which turned out to be a lot.The next round of funding is the one in which you might deal with actual venture capital firms. But don&amp;rsquo;t wait till you&amp;rsquo;ve burned through your last round of funding to start approaching them. VCs are slow to make up their minds. They can take months. You don&amp;rsquo;t want to be running out of money while you&amp;rsquo;re trying to negotiate with them.Getting money from an actual VC firm is a bigger deal than getting money from angels. The amounts of money involved are larger, millions usually. So the deals take longer, dilute you more, and impose more onerous conditions.Sometimes the VCs want to install a new CEO of their own choosing. Usually the claim is that you need someone mature and experienced, with a business background. Maybe in some cases this is true. And yet Bill Gates was young and inexperienced and had no business background, and he seems to have done ok. Steve Jobs got booted out of his own company by someone mature and experienced, with a business background, who then proceeded to ruin the company. So I think people who are mature and experienced, with a business background, may be overrated. We used to call these guys &amp;ldquo;newscasters,&amp;rdquo; because they had neat hair and spoke in deep, confident voices, and generally didn&amp;rsquo;t know much more than they read on the teleprompter.We talked to a number of VCs, but eventually we ended up financing our startup entirely with angel money. The main reason was that we feared a brand-name VC firm would stick us with a newscaster as part of the deal. That might have been ok if he was content to limit himself to talking to the press, but what if he wanted to have a say in running the company? That would have led to disaster, because our software was so complex. We were a company whose whole m.o. was to win through better technology. The strategic decisions were mostly decisions about technology, and we didn&amp;rsquo;t need any help with those.This was also one reason we didn&amp;rsquo;t go public. Back in 1998 our CFO tried to talk me into it. In those days you could go public as a dogfood portal, so as a company with a real product and real revenues, we might have done well. But I feared it would have meant taking on a newscaster&amp;ndash; someone who, as they say, &amp;ldquo;can talk Wall Street&amp;rsquo;s language.&amp;ldquo;I&amp;rsquo;m happy to see Google is bucking that trend. They didn&amp;rsquo;t talk Wall Street&amp;rsquo;s language when they did their IPO, and Wall Street didn&amp;rsquo;t buy. And now Wall Street is collectively kicking itself. They&amp;rsquo;ll pay attention next time. Wall Street learns new languages fast when money is involved.You have more leverage negotiating with VCs than you realize. The reason is other VCs. I know a number of VCs now, and when you talk to them you realize that it&amp;rsquo;s a seller&amp;rsquo;s market. Even now there is too much money chasing too few good deals.VCs form a pyramid. At the top are famous ones like Sequoia and Kleiner Perkins, but beneath those are a huge number you&amp;rsquo;ve never heard of. What they all have in common is that a dollar from them is worth one dollar. Most VCs will tell you that they don&amp;rsquo;t just provide money, but connections and advice. If you&amp;rsquo;re talking to Vinod Khosla or John Doerr or Mike Moritz, this is true. But such advice and connections can come very expensive. And as you go down the food chain the VCs get rapidly dumber. A few steps down from the top you&amp;rsquo;re basically talking to bankers who&amp;rsquo;ve picked up a few new vocabulary words from reading Wired. (Does your product use XML?) So I&amp;rsquo;d advise you to be skeptical about claims of experience and connections. Basically, a VC is a source of money. I&amp;rsquo;d be inclined to go with whoever offered the most money the soonest with the least strings attached.You may wonder how much to tell VCs. And you should, because some of them may one day be funding your competitors. I think the best plan is not to be overtly secretive, but not to tell them everything either. After all, as most VCs say, they&amp;rsquo;re more interested in the people than the ideas. The main reason they want to talk about your idea is to judge you, not the idea. So as long as you seem like you know what you&amp;rsquo;re doing, you can probably keep a few things back from them. [7]Talk to as many VCs as you can, even if you don&amp;rsquo;t want their money, because a) they may be on the board of someone who will buy you, and b) if you seem impressive, they&amp;rsquo;ll be discouraged from investing in your competitors. The most efficient way to reach VCs, especially if you only want them to know about you and don&amp;rsquo;t want their money, is at the conferences that are occasionally organized for startups to present to them.Not Spending ItWhen and if you get an infusion of real money from investors, what should you do with it? Not spend it, that&amp;rsquo;s what. In nearly every startup that fails, the proximate cause is running out of money. Usually there is something deeper wrong. But even a proximate cause of death is worth trying hard to avoid.During the Bubble many startups tried to &amp;ldquo;get big fast.&amp;rdquo; Ideally this meant getting a lot of customers fast. But it was easy for the meaning to slide over into hiring a lot of people fast.Of the two versions, the one where you get a lot of customers fast is of course preferable. But even that may be overrated. The idea is to get there first and get all the users, leaving none for competitors. But I think in most businesses the advantages of being first to market are not so overwhelmingly great. Google is again a case in point. When they appeared it seemed as if search was a mature market, dominated by big players who&amp;rsquo;d spent millions to build their brands: Yahoo, Lycos, Excite, Infoseek, Altavista, Inktomi. Surely 1998 was a little late to arrive at the party.But as the founders of Google knew, brand is worth next to nothing in the search business. You can come along at any point and make something better, and users will gradually seep over to you. As if to emphasize the point, Google never did any advertising. They&amp;rsquo;re like dealers; they sell the stuff, but they know better than to use it themselves.The competitors Google buried would have done better to spend those millions improving their software. Future startups should learn from that mistake. Unless you&amp;rsquo;re in a market where products are as undifferentiated as cigarettes or vodka or laundry detergent, spending a lot on brand advertising is a sign of breakage. And few if any Web businesses are so undifferentiated. The dating sites are running big ad campaigns right now, which is all the more evidence they&amp;rsquo;re ripe for the picking. (Fee, fie, fo, fum, I smell a company run by marketing guys.)We were compelled by circumstances to grow slowly, and in retrospect it was a good thing. The founders all learned to do every job in the company. As well as writing software, I had to do sales and customer support. At sales I was not very good. I was persistent, but I didn&amp;rsquo;t have the smoothness of a good salesman. My message to potential customers was: you&amp;rsquo;d be stupid not to sell online, and if you sell online you&amp;rsquo;d be stupid to use anyone else&amp;rsquo;s software. Both statements were true, but that&amp;rsquo;s not the way to convince people.I was great at customer support though. Imagine talking to a customer support person who not only knew everything about the product, but would apologize abjectly if there was a bug, and then fix it immediately, while you were on the phone with them. Customers loved us. And we loved them, because when you&amp;rsquo;re growing slow by word of mouth, your first batch of users are the ones who were smart enough to find you by themselves. There is nothing more valuable, in the early stages of a startup, than smart users. If you listen to them, they&amp;rsquo;ll tell you exactly how to make a winning product. And not only will they give you this advice for free, they&amp;rsquo;ll pay you.We officially launched in early 1996. By the end of that year we had about 70 users. Since this was the era of &amp;ldquo;get big fast,&amp;rdquo; I worried about how small and obscure we were. But in fact we were doing exactly the right thing. Once you get big (in users or employees) it gets hard to change your product. That year was effectively a laboratory for improving our software. By the end of it, we were so far ahead of our competitors that they never had a hope of catching up. And since all the hackers had spent many hours talking to users, we understood online commerce way better than anyone else.That&amp;rsquo;s the key to success as a startup. There is nothing more important than understanding your business. You might think that anyone in a business must, ex officio, understand it. Far from it. Google&amp;rsquo;s secret weapon was simply that they understood search. I was working for Yahoo when Google appeared, and Yahoo didn&amp;rsquo;t understand search. I know because I once tried to convince the powers that be that we had to make search better, and I got in reply what was then the party line about it: that Yahoo was no longer a mere &amp;ldquo;search engine.&amp;rdquo; Search was now only a small percentage of our page views, less than one month&amp;rsquo;s growth, and now that we were established as a &amp;ldquo;media company,&amp;rdquo; or &amp;ldquo;portal,&amp;rdquo; or whatever we were, search could safely be allowed to wither and drop off, like an umbilical cord.Well, a small fraction of page views they may be, but they are an important fraction, because they are the page views that Web sessions start with. I think Yahoo gets that now.Google understands a few other things most Web companies still don&amp;rsquo;t. The most important is that you should put users before advertisers, even though the advertisers are paying and users aren&amp;rsquo;t. One of my favorite bumper stickers reads &amp;ldquo;if the people lead, the leaders will follow.&amp;rdquo; Paraphrased for the Web, this becomes &amp;ldquo;get all the users, and the advertisers will follow.&amp;rdquo; More generally, design your product to please users first, and then think about how to make money from it. If you don&amp;rsquo;t put users first, you leave a gap for competitors who do.To make something users love, you have to understand them. And the bigger you are, the harder that is. So I say &amp;ldquo;get big slow.&amp;rdquo; The slower you burn through your funding, the more time you have to learn.The other reason to spend money slowly is to encourage a culture of cheapness. That&amp;rsquo;s something Yahoo did understand. David Filo&amp;rsquo;s title was &amp;ldquo;Chief Yahoo,&amp;rdquo; but he was proud that his unofficial title was &amp;ldquo;Cheap Yahoo.&amp;rdquo; Soon after we arrived at Yahoo, we got an email from Filo, who had been crawling around our directory hierarchy, asking if it was really necessary to store so much of our data on expensive RAID drives. I was impressed by that. Yahoo&amp;rsquo;s market cap then was already in the billions, and they were still worrying about wasting a few gigs of disk space.When you get a couple million dollars from a VC firm, you tend to feel rich. It&amp;rsquo;s important to realize you&amp;rsquo;re not. A rich company is one with large revenues. This money isn&amp;rsquo;t revenue. It&amp;rsquo;s money investors have given you in the hope you&amp;rsquo;ll be able to generate revenues. So despite those millions in the bank, you&amp;rsquo;re still poor.For most startups the model should be grad student, not law firm. Aim for cool and cheap, not expensive and impressive. For us the test of whether a startup understood this was whether they had Aeron chairs. The Aeron came out during the Bubble and was very popular with startups. Especially the type, all too common then, that was like a bunch of kids playing house with money supplied by VCs. We had office chairs so cheap that the arms all fell off. This was slightly embarrassing at the time, but in retrospect the grad-studenty atmosphere of our office was another of those things we did right without knowing it.Our offices were in a wooden triple-decker in Harvard Square. It had been an apartment until about the 1970s, and there was still a claw-footed bathtub in the bathroom. It must once have been inhabited by someone fairly eccentric, because a lot of the chinks in the walls were stuffed with aluminum foil, as if to protect against cosmic rays. When eminent visitors came to see us, we were a bit sheepish about the low production values. But in fact that place was the perfect space for a startup. We felt like our role was to be impudent underdogs instead of corporate stuffed shirts, and that is exactly the spirit you want.An apartment is also the right kind of place for developing software. Cube farms suck for that, as you&amp;rsquo;ve probably discovered if you&amp;rsquo;ve tried it. Ever notice how much easier it is to hack at home than at work? So why not make work more like home?When you&amp;rsquo;re looking for space for a startup, don&amp;rsquo;t feel that it has to look professional. Professional means doing good work, not elevators and glass walls. I&amp;rsquo;d advise most startups to avoid corporate space at first and just rent an apartment. You want to live at the office in a startup, so why not have a place designed to be lived in as your office?Besides being cheaper and better to work in, apartments tend to be in better locations than office buildings. And for a startup location is very important. The key to productivity is for people to come back to work after dinner. Those hours after the phone stops ringing are by far the best for getting work done. Great things happen when a group of employees go out to dinner together, talk over ideas, and then come back to their offices to implement them. So you want to be in a place where there are a lot of restaurants around, not some dreary office park that&amp;rsquo;s a wasteland after 6:00 PM. Once a company shifts over into the model where everyone drives home to the suburbs for dinner, however late, you&amp;rsquo;ve lost something extraordinarily valuable. God help you if you actually start in that mode.If I were going to start a startup today, there are only three places I&amp;rsquo;d consider doing it: on the Red Line near Central, Harvard, or Davis Squares (Kendall is too sterile); in Palo Alto on University or California Aves; and in Berkeley immediately north or south of campus. These are the only places I know that have the right kind of vibe.The most important way to not spend money is by not hiring people. I may be an extremist, but I think hiring people is the worst thing a company can do. To start with, people are a recurring expense, which is the worst kind. They also tend to cause you to grow out of your space, and perhaps even move to the sort of uncool office building that will make your software worse. But worst of all, they slow you down: instead of sticking your head in someone&amp;rsquo;s office and checking out an idea with them, eight people have to have a meeting about it. So the fewer people you can hire, the better.During the Bubble a lot of startups had the opposite policy. They wanted to get &amp;ldquo;staffed up&amp;rdquo; as soon as possible, as if you couldn&amp;rsquo;t get anything done unless there was someone with the corresponding job title. That&amp;rsquo;s big company thinking. Don&amp;rsquo;t hire people to fill the gaps in some a priori org chart. The only reason to hire someone is to do something you&amp;rsquo;d like to do but can&amp;rsquo;t.If hiring unnecessary people is expensive and slows you down, why do nearly all companies do it? I think the main reason is that people like the idea of having a lot of people working for them. This weakness often extends right up to the CEO. If you ever end up running a company, you&amp;rsquo;ll find the most common question people ask is how many employees you have. This is their way of weighing you. It&amp;rsquo;s not just random people who ask this; even reporters do. And they&amp;rsquo;re going to be a lot more impressed if the answer is a thousand than if it&amp;rsquo;s ten.This is ridiculous, really. If two companies have the same revenues, it&amp;rsquo;s the one with fewer employees that&amp;rsquo;s more impressive. When people used to ask me how many people our startup had, and I answered &amp;ldquo;twenty,&amp;rdquo; I could see them thinking that we didn&amp;rsquo;t count for much. I used to want to add &amp;ldquo;but our main competitor, whose ass we regularly kick, has a hundred and forty, so can we have credit for the larger of the two numbers?&amp;ldquo;As with office space, the number of your employees is a choice between seeming impressive, and being impressive. Any of you who were nerds in high school know about this choice. Keep doing it when you start a company.Should You?But should you start a company? Are you the right sort of person to do it? If you are, is it worth it?More people are the right sort of person to start a startup than realize it. That&amp;rsquo;s the main reason I wrote this. There could be ten times more startups than there are, and that would probably be a good thing.I was, I now realize, exactly the right sort of person to start a startup. But the idea terrified me at first. I was forced into it because I was a Lisp hacker. The company I&amp;rsquo;d been consulting for seemed to be running into trouble, and there were not a lot of other companies using Lisp. Since I couldn&amp;rsquo;t bear the thought of programming in another language (this was 1995, remember, when &amp;ldquo;another language&amp;rdquo; meant C++) the only option seemed to be to start a new company using Lisp.I realize this sounds far-fetched, but if you&amp;rsquo;re a Lisp hacker you&amp;rsquo;ll know what I mean. And if the idea of starting a startup frightened me so much that I only did it out of necessity, there must be a lot of people who would be good at it but who are too intimidated to try.So who should start a startup? Someone who is a good hacker, between about 23 and 38, and who wants to solve the money problem in one shot instead of getting paid gradually over a conventional working life.I can&amp;rsquo;t say precisely what a good hacker is. At a first rate university this might include the top half of computer science majors. Though of course you don&amp;rsquo;t have to be a CS major to be a hacker; I was a philosophy major in college.It&amp;rsquo;s hard to tell whether you&amp;rsquo;re a good hacker, especially when you&amp;rsquo;re young. Fortunately the process of starting startups tends to select them automatically. What drives people to start startups is (or should be) looking at existing technology and thinking, don&amp;rsquo;t these guys realize they should be doing x, y, and z? And that&amp;rsquo;s also a sign that one is a good hacker.I put the lower bound at 23 not because there&amp;rsquo;s something that doesn&amp;rsquo;t happen to your brain till then, but because you need to see what it&amp;rsquo;s like in an existing business before you try running your own. The business doesn&amp;rsquo;t have to be a startup. I spent a year working for a software company to pay off my college loans. It was the worst year of my adult life, but I learned, without realizing it at the time, a lot of valuable lessons about the software business. In this case they were mostly negative lessons: don&amp;rsquo;t have a lot of meetings; don&amp;rsquo;t have chunks of code that multiple people own; don&amp;rsquo;t have a sales guy running the company; don&amp;rsquo;t make a high-end product; don&amp;rsquo;t let your code get too big; don&amp;rsquo;t leave finding bugs to QA people; don&amp;rsquo;t go too long between releases; don&amp;rsquo;t isolate developers from users; don&amp;rsquo;t move from Cambridge to Route 128; and so on. [8] But negative lessons are just as valuable as positive ones. Perhaps even more valuable: it&amp;rsquo;s hard to repeat a brilliant performance, but it&amp;rsquo;s straightforward to avoid errors. [9]The other reason it&amp;rsquo;s hard to start a company before 23 is that people won&amp;rsquo;t take you seriously. VCs won&amp;rsquo;t trust you, and will try to reduce you to a mascot as a condition of funding. Customers will worry you&amp;rsquo;re going to flake out and leave them stranded. Even you yourself, unless you&amp;rsquo;re very unusual, will feel your age to some degree; you&amp;rsquo;ll find it awkward to be the boss of someone much older than you, and if you&amp;rsquo;re 21, hiring only people younger rather limits your options.Some people could probably start a company at 18 if they wanted to. Bill Gates was 19 when he and Paul Allen started Microsoft. (Paul Allen was 22, though, and that probably made a difference.) So if you&amp;rsquo;re thinking, I don&amp;rsquo;t care what he says, I&amp;rsquo;m going to start a company now, you may be the sort of person who could get away with it.The other cutoff, 38, has a lot more play in it. One reason I put it there is that I don&amp;rsquo;t think many people have the physical stamina much past that age. I used to work till 2:00 or 3:00 AM every night, seven days a week. I don&amp;rsquo;t know if I could do that now.Also, startups are a big risk financially. If you try something that blows up and leaves you broke at 26, big deal; a lot of 26 year olds are broke. By 38 you can&amp;rsquo;t take so many risks&amp;ndash; especially if you have kids.My final test may be the most restrictive. Do you actually want to start a startup? What it amounts to, economically, is compressing your working life into the smallest possible space. Instead of working at an ordinary rate for 40 years, you work like hell for four. And maybe end up with nothing&amp;ndash; though in that case it probably won&amp;rsquo;t take four years.During this time you&amp;rsquo;ll do little but work, because when you&amp;rsquo;re not working, your competitors will be. My only leisure activities were running, which I needed to do to keep working anyway, and about fifteen minutes of reading a night. I had a girlfriend for a total of two months during that three year period. Every couple weeks I would take a few hours off to visit a used bookshop or go to a friend&amp;rsquo;s house for dinner. I went to visit my family twice. Otherwise I just worked.Working was often fun, because the people I worked with were some of my best friends. Sometimes it was even technically interesting. But only about 10% of the time. The best I can say for the other 90% is that some of it is funnier in hindsight than it seemed then. Like the time the power went off in Cambridge for about six hours, and we made the mistake of trying to start a gasoline powered generator inside our offices. I won&amp;rsquo;t try that again.I don&amp;rsquo;t think the amount of bullshit you have to deal with in a startup is more than you&amp;rsquo;d endure in an ordinary working life. It&amp;rsquo;s probably less, in fact; it just seems like a lot because it&amp;rsquo;s compressed into a short period. So mainly what a startup buys you is time. That&amp;rsquo;s the way to think about it if you&amp;rsquo;re trying to decide whether to start one. If you&amp;rsquo;re the sort of person who would like to solve the money problem once and for all instead of working for a salary for 40 years, then a startup makes sense.For a lot of people the conflict is between startups and graduate school. Grad students are just the age, and just the sort of people, to start software startups. You may worry that if you do you&amp;rsquo;ll blow your chances of an academic career. But it&amp;rsquo;s possible to be part of a startup and stay in grad school, especially at first. Two of our three original hackers were in grad school the whole time, and both got their degrees. There are few sources of energy so powerful as a procrastinating grad student.If you do have to leave grad school, in the worst case it won&amp;rsquo;t be for too long. If a startup fails, it will probably fail quickly enough that you can return to academic life. And if it succeeds, you may find you no longer have such a burning desire to be an assistant professor.If you want to do it, do it. Starting a startup is not the great mystery it seems from outside. It&amp;rsquo;s not something you have to know about &amp;ldquo;business&amp;rdquo; to do. Build something users love, and spend less than you make. How hard is that?Notes[1] Google&amp;rsquo;s revenues are about two billion a year, but half comes from ads on other sites.[2] One advantage startups have over established companies is that there are no discrimination laws about starting businesses. For example, I would be reluctant to start a startup with a woman who had small children, or was likely to have them soon. But you&amp;rsquo;re not allowed to ask prospective employees if they plan to have kids soon. Believe it or not, under current US law, you&amp;rsquo;re not even allowed to discriminate on the basis of intelligence. Whereas when you&amp;rsquo;re starting a company, you can discriminate on any basis you want about who you start it with.[3] Learning to hack is a lot cheaper than business school, because you can do it mostly on your own. For the price of a Linux box, a copy of K&amp;amp;R, and a few hours of advice from your neighbor&amp;rsquo;s fifteen year old son, you&amp;rsquo;ll be well on your way.[4] Corollary: Avoid starting a startup to sell things to the biggest company of all, the government. Yes, there are lots of opportunities to sell them technology. But let someone else start those startups.[5] A friend who started a company in Germany told me they do care about the paperwork there, and that there&amp;rsquo;s more of it. Which helps explain why there are not more startups in Germany.[6] At the seed stage our valuation was in principle $100,000, because Julian got 10% of the company. But this is a very misleading number, because the money was the least important of the things Julian gave us.[7] The same goes for companies that seem to want to acquire you. There will be a few that are only pretending to in order to pick your brains. But you can never tell for sure which these are, so the best approach is to seem entirely open, but to fail to mention a few critical technical secrets.[8] I was as bad an employee as this place was a company. I apologize to anyone who had to work with me there.[9] You could probably write a book about how to succeed in business by doing everything in exactly the opposite way from the DMV.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this essay, and to Steve Melendez and Gregory Price for inviting me to speak.Domain Name SearchTurkish TranslationHebrew TranslationRussian TranslationChinese TranslationFrench TranslationJapanese TranslationArabic Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/startupfunding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/startupfunding/</guid>
      <description>&lt;h1 id=&#34;startupfunding&#34;&gt;Startupfunding&lt;/h1&gt;&#xA;&lt;p&gt;How to Fund a Startup Want to start a startup? Get funded by Y Combinator. November 2005 Venture funding works like gears. A typical startup goes through several rounds of funding, and at each round you want to take just enough money to reach the speed where you can shift into the next gear.Few startups get it quite right. Many are underfunded. A few are overfunded, which is like trying to start driving in third gear.I think it would help founders to understand funding better—not just the mechanics of it, but what investors are thinking. I was surprised recently when I realized that all the worst problems we faced in our startup were due not to competitors, but investors. Dealing with competitors was easy by comparison.I don&amp;rsquo;t mean to suggest that our investors were nothing but a drag on us. They were helpful in negotiating deals, for example. I mean more that conflicts with investors are particularly nasty. Competitors punch you in the jaw, but investors have you by the balls.Apparently our situation was not unusual. And if trouble with investors is one of the biggest threats to a startup, managing them is one of the most important skills founders need to learn.Let&amp;rsquo;s start by talking about the five sources of startup funding. Then we&amp;rsquo;ll trace the life of a hypothetical (very fortunate) startup as it shifts gears through successive rounds.Friends and FamilyA lot of startups get their first funding from friends and family. Excite did, for example: after the founders graduated from college, they borrowed $15,000 from their parents to start a company. With the help of some part-time jobs they made it last 18 months.If your friends or family happen to be rich, the line blurs between them and angel investors. At Viaweb we got our first $10,000 of seed money from our friend Julian, but he was sufficiently rich that it&amp;rsquo;s hard to say whether he should be classified as a friend or angel. He was also a lawyer, which was great, because it meant we didn&amp;rsquo;t have to pay legal bills out of that initial small sum.The advantage of raising money from friends and family is that they&amp;rsquo;re easy to find. You already know them. There are three main disadvantages: you mix together your business and personal life; they will probably not be as well connected as angels or venture firms; and they may not be accredited investors, which could complicate your life later.The SEC defines an &amp;ldquo;accredited investor&amp;rdquo; as someone with over a million dollars in liquid assets or an income of over $200,000 a year. The regulatory burden is much lower if a company&amp;rsquo;s shareholders are all accredited investors. Once you take money from the general public you&amp;rsquo;re more restricted in what you can do. [1]A startup&amp;rsquo;s life will be more complicated, legally, if any of the investors aren&amp;rsquo;t accredited. In an IPO, it might not merely add expense, but change the outcome. A lawyer I asked about it said: When the company goes public, the SEC will carefully study all prior issuances of stock by the company and demand that it take immediate action to cure any past violations of securities laws. Those remedial actions can delay, stall or even kill the IPO. Of course the odds of any given startup doing an IPO are small. But not as small as they might seem. A lot of startups that end up going public didn&amp;rsquo;t seem likely to at first. (Who could have guessed that the company Wozniak and Jobs started in their spare time selling plans for microcomputers would yield one of the biggest IPOs of the decade?) Much of the value of a startup consists of that tiny probability multiplied by the huge outcome.It wasn&amp;rsquo;t because they weren&amp;rsquo;t accredited investors that I didn&amp;rsquo;t ask my parents for seed money, though. When we were starting Viaweb, I didn&amp;rsquo;t know about the concept of an accredited investor, and didn&amp;rsquo;t stop to think about the value of investors&amp;rsquo; connections. The reason I didn&amp;rsquo;t take money from my parents was that I didn&amp;rsquo;t want them to lose it.ConsultingAnother way to fund a startup is to get a job. The best sort of job is a consulting project in which you can build whatever software you wanted to sell as a startup. Then you can gradually transform yourself from a consulting company into a product company, and have your clients pay your development expenses.This is a good plan for someone with kids, because it takes most of the risk out of starting a startup. There never has to be a time when you have no revenues. Risk and reward are usually proportionate, however: you should expect a plan that cuts the risk of starting a startup also to cut the average return. In this case, you trade decreased financial risk for increased risk that your company won&amp;rsquo;t succeed as a startup.But isn&amp;rsquo;t the consulting company itself a startup? No, not generally. A company has to be more than small and newly founded to be a startup. There are millions of small businesses in America, but only a few thousand are startups. To be a startup, a company has to be a product business, not a service business. By which I mean not that it has to make something physical, but that it has to have one thing it sells to many people, rather than doing custom work for individual clients. Custom work doesn&amp;rsquo;t scale. To be a startup you need to be the band that sells a million copies of a song, not the band that makes money by playing at individual weddings and bar mitzvahs.The trouble with consulting is that clients have an awkward habit of calling you on the phone. Most startups operate close to the margin of failure, and the distraction of having to deal with clients could be enough to put you over the edge. Especially if you have competitors who get to work full time on just being a startup.So you have to be very disciplined if you take the consulting route. You have to work actively to prevent your company growing into a &amp;ldquo;weed tree,&amp;rdquo; dependent on this source of easy but low-margin money. [2]Indeed, the biggest danger of consulting may be that it gives you an excuse for failure. In a startup, as in grad school, a lot of what ends up driving you are the expectations of your family and friends. Once you start a startup and tell everyone that&amp;rsquo;s what you&amp;rsquo;re doing, you&amp;rsquo;re now on a path labelled &amp;ldquo;get rich or bust.&amp;rdquo; You now have to get rich, or you&amp;rsquo;ve failed.Fear of failure is an extraordinarily powerful force. Usually it prevents people from starting things, but once you publish some definite ambition, it switches directions and starts working in your favor. I think it&amp;rsquo;s a pretty clever piece of jiujitsu to set this irresistible force against the slightly less immovable object of becoming rich. You won&amp;rsquo;t have it driving you if your stated ambition is merely to start a consulting company that you will one day morph into a startup.An advantage of consulting, as a way to develop a product, is that you know you&amp;rsquo;re making something at least one customer wants. But if you have what it takes to start a startup you should have sufficient vision not to need this crutch.Angel InvestorsAngels are individual rich people. The word was first used for backers of Broadway plays, but now applies to individual investors generally. Angels who&amp;rsquo;ve made money in technology are preferable, for two reasons: they understand your situation, and they&amp;rsquo;re a source of contacts and advice.The contacts and advice can be more important than the money. When del.icio.us took money from investors, they took money from, among others, Tim O&amp;rsquo;Reilly. The amount he put in was small compared to the VCs who led the round, but Tim is a smart and influential guy and it&amp;rsquo;s good to have him on your side.You can do whatever you want with money from consulting or friends and family. With angels we&amp;rsquo;re now talking about venture funding proper, so it&amp;rsquo;s time to introduce the concept of exit strategy. Younger would-be founders are often surprised that investors expect them either to sell the company or go public. The reason is that investors need to get their capital back. They&amp;rsquo;ll only consider companies that have an exit strategy—meaning companies that could get bought or go public.This is not as selfish as it sounds. There are few large, private technology companies. Those that don&amp;rsquo;t fail all seem to get bought or go public. The reason is that employees are investors too—of their time—and they want just as much to be able to cash out. If your competitors offer employees stock options that might make them rich, while you make it clear you plan to stay private, your competitors will get the best people. So the principle of an &amp;ldquo;exit&amp;rdquo; is not just something forced on startups by investors, but part of what it means to be a startup.Another concept we need to introduce now is valuation. When someone buys shares in a company, that implicitly establishes a value for it. If someone pays $20,000 for 10% of a company, the company is in theory worth $200,000. I say &amp;ldquo;in theory&amp;rdquo; because in early stage investing, valuations are voodoo. As a company gets more established, its valuation gets closer to an actual market value. But in a newly founded startup, the valuation number is just an artifact of the respective contributions of everyone involved.Startups often &amp;ldquo;pay&amp;rdquo; investors who will help the company in some way by letting them invest at low valuations. If I had a startup and Steve Jobs wanted to invest in it, I&amp;rsquo;d give him the stock for $10, just to be able to brag that he was an investor. Unfortunately, it&amp;rsquo;s impractical (if not illegal) to adjust the valuation of the company up and down for each investor. Startups&amp;rsquo; valuations are supposed to rise over time. So if you&amp;rsquo;re going to sell cheap stock to eminent angels, do it early, when it&amp;rsquo;s natural for the company to have a low valuation.Some angel investors join together in syndicates. Any city where people start startups will have one or more of them. In Boston the biggest is the Common Angels. In the Bay Area it&amp;rsquo;s the Band of Angels. You can find groups near you through the Angel Capital Association. [3] However, most angel investors don&amp;rsquo;t belong to these groups. In fact, the more prominent the angel, the less likely they are to belong to a group.Some angel groups charge you money to pitch your idea to them. Needless to say, you should never do this.One of the dangers of taking investment from individual angels, rather than through an angel group or investment firm, is that they have less reputation to protect. A big-name VC firm will not screw you too outrageously, because other founders would avoid them if word got out. With individual angels you don&amp;rsquo;t have this protection, as we found to our dismay in our own startup. In many startups&amp;rsquo; lives there comes a point when you&amp;rsquo;re at the investors&amp;rsquo; mercy—when you&amp;rsquo;re out of money and the only place to get more is your existing investors. When we got into such a scrape, our investors took advantage of it in a way that a name-brand VC probably wouldn&amp;rsquo;t have.Angels have a corresponding advantage, however: they&amp;rsquo;re also not bound by all the rules that VC firms are. And so they can, for example, allow founders to cash out partially in a funding round, by selling some of their stock directly to the investors. I think this will become more common; the average founder is eager to do it, and selling, say, half a million dollars worth of stock will not, as VCs fear, cause most founders to be any less committed to the business.The same angels who tried to screw us also let us do this, and so on balance I&amp;rsquo;m grateful rather than angry. (As in families, relations between founders and investors can be complicated.)The best way to find angel investors is through personal introductions. You could try to cold-call angel groups near you, but angels, like VCs, will pay more attention to deals recommended by someone they respect.Deal terms with angels vary a lot. There are no generally accepted standards. Sometimes angels&amp;rsquo; deal terms are as fearsome as VCs&amp;rsquo;. Other angels, particularly in the earliest stages, will invest based on a two-page agreement.Angels who only invest occasionally may not themselves know what terms they want. They just want to invest in this startup. What kind of anti-dilution protection do they want? Hell if they know. In these situations, the deal terms tend to be random: the angel asks his lawyer to create a vanilla agreement, and the terms end up being whatever the lawyer considers vanilla. Which in practice usually means, whatever existing agreement he finds lying around his firm. (Few legal documents are created from scratch.)These heaps o&amp;rsquo; boilerplate are a problem for small startups, because they tend to grow into the union of all preceding documents. I know of one startup that got from an angel investor what amounted to a five hundred pound handshake: after deciding to invest, the angel presented them with a 70-page agreement. The startup didn&amp;rsquo;t have enough money to pay a lawyer even to read it, let alone negotiate the terms, so the deal fell through.One solution to this problem would be to have the startup&amp;rsquo;s lawyer produce the agreement, instead of the angel&amp;rsquo;s. Some angels might balk at this, but others would probably welcome it.Inexperienced angels often get cold feet when the time comes to write that big check. In our startup, one of the two angels in the initial round took months to pay us, and only did after repeated nagging from our lawyer, who was also, fortunately, his lawyer.It&amp;rsquo;s obvious why investors delay. Investing in startups is risky! When a company is only two months old, every day you wait gives you 1.7% more data about their trajectory. But the investor is already being compensated for that risk in the low price of the stock, so it is unfair to delay.Fair or not, investors do it if you let them. Even VCs do it. And funding delays are a big distraction for founders, who ought to be working on their company, not worrying about investors. What&amp;rsquo;s a startup to do? With both investors and acquirers, the only leverage you have is competition. If an investor knows you have other investors lined up, he&amp;rsquo;ll be a lot more eager to close&amp;ndash; and not just because he&amp;rsquo;ll worry about losing the deal, but because if other investors are interested, you must be worth investing in. It&amp;rsquo;s the same with acquisitions. No one wants to buy you till someone else wants to buy you, and then everyone wants to buy you.The key to closing deals is never to stop pursuing alternatives. When an investor says he wants to invest in you, or an acquirer says they want to buy you, don&amp;rsquo;t believe it till you get the check. Your natural tendency when an investor says yes will be to relax and go back to writing code. Alas, you can&amp;rsquo;t; you have to keep looking for more investors, if only to get this one to act. [4]Seed Funding FirmsSeed firms are like angels in that they invest relatively small amounts at early stages, but like VCs in that they&amp;rsquo;re companies that do it as a business, rather than individuals making occasional investments on the side.Till now, nearly all seed firms have been so-called &amp;ldquo;incubators,&amp;rdquo; so Y Combinator gets called one too, though the only thing we have in common is that we invest in the earliest phase.According to the National Association of Business Incubators, there are about 800 incubators in the US. This is an astounding number, because I know the founders of a lot of startups, and I can&amp;rsquo;t think of one that began in an incubator.What is an incubator? I&amp;rsquo;m not sure myself. The defining quality seems to be that you work in their space. That&amp;rsquo;s where the name &amp;ldquo;incubator&amp;rdquo; comes from. They seem to vary a great deal in other respects. At one extreme is the sort of pork-barrel project where a town gets money from the state government to renovate a vacant building as a &amp;ldquo;high-tech incubator,&amp;rdquo; as if it were merely lack of the right sort of office space that had till now prevented the town from becoming a startup hub. At the other extreme are places like Idealab, which generates ideas for new startups internally and hires people to work for them.The classic Bubble incubators, most of which now seem to be dead, were like VC firms except that they took a much bigger role in the startups they funded. In addition to working in their space, you were supposed to use their office staff, lawyers, accountants, and so on.Whereas incubators tend (or tended) to exert more control than VCs, Y Combinator exerts less. And we think it&amp;rsquo;s better if startups operate out of their own premises, however crappy, than the offices of their investors. So it&amp;rsquo;s annoying that we keep getting called an &amp;ldquo;incubator,&amp;rdquo; but perhaps inevitable, because there&amp;rsquo;s only one of us so far and no word yet for what we are. If we have to be called something, the obvious name would be &amp;ldquo;excubator.&amp;rdquo; (The name is more excusable if one considers it as meaning that we enable people to escape cubicles.)Because seed firms are companies rather than individual people, reaching them is easier than reaching angels. Just go to their web site and send them an email. The importance of personal introductions varies, but is less than with angels or VCs.The fact that seed firms are companies also means the investment process is more standardized. (This is generally true with angel groups too.) Seed firms will probably have set deal terms they use for every startup they fund. The fact that the deal terms are standard doesn&amp;rsquo;t mean they&amp;rsquo;re favorable to you, but if other startups have signed the same agreements and things went well for them, it&amp;rsquo;s a sign the terms are reasonable.Seed firms differ from angels and VCs in that they invest exclusively in the earliest phases—often when the company is still just an idea. Angels and even VC firms occasionally do this, but they also invest at later stages.The problems are different in the early stages. For example, in the first couple months a startup may completely redefine their idea. So seed investors usually care less about the idea than the people. This is true of all venture funding, but especially so in the seed stage.Like VCs, one of the advantages of seed firms is the advice they offer. But because seed firms operate in an earlier phase, they need to offer different kinds of advice. For example, a seed firm should be able to give advice about how to approach VCs, which VCs obviously don&amp;rsquo;t need to do; whereas VCs should be able to give advice about how to hire an &amp;ldquo;executive team,&amp;rdquo; which is not an issue in the seed stage.In the earliest phases, a lot of the problems are technical, so seed firms should be able to help with technical as well as business problems.Seed firms and angel investors generally want to invest in the initial phases of a startup, then hand them off to VC firms for the next round. Occasionally startups go from seed funding direct to acquisition, however, and I expect this to become increasingly common.Google has been aggressively pursuing this route, and now Yahoo is too. Both now compete directly with VCs. And this is a smart move. Why wait for further funding rounds to jack up a startup&amp;rsquo;s price? When a startup reaches the point where VCs have enough information to invest in it, the acquirer should have enough information to buy it. More information, in fact; with their technical depth, the acquirers should be better at picking winners than VCs.Venture Capital FundsVC firms are like seed firms in that they&amp;rsquo;re actual companies, but they invest other people&amp;rsquo;s money, and much larger amounts of it. VC investments average several million dollars. So they tend to come later in the life of a startup, are harder to get, and come with tougher terms.The word &amp;ldquo;venture capitalist&amp;rdquo; is sometimes used loosely for any venture investor, but there is a sharp difference between VCs and other investors: VC firms are organized as funds, much like hedge funds or mutual funds. The fund managers, who are called &amp;ldquo;general partners,&amp;rdquo; get about 2% of the fund annually as a management fee, plus about 20% of the fund&amp;rsquo;s gains.There is a very sharp dropoff in performance among VC firms, because in the VC business both success and failure are self-perpetuating. When an investment scores spectacularly, as Google did for Kleiner and Sequoia, it generates a lot of good publicity for the VCs. And many founders prefer to take money from successful VC firms, because of the legitimacy it confers. Hence a vicious (for the losers) cycle: VC firms that have been doing badly will only get the deals the bigger fish have rejected, causing them to continue to do badly.As a result, of the thousand or so VC funds in the US now, only about 50 are likely to make money, and it is very hard for a new fund to break into this group.In a sense, the lower-tier VC firms are a bargain for founders. They may not be quite as smart or as well connected as the big-name firms, but they are much hungrier for deals. This means you should be able to get better terms from them.Better how? The most obvious is valuation: they&amp;rsquo;ll take less of your company. But as well as money, there&amp;rsquo;s power. I think founders will increasingly be able to stay on as CEO, and on terms that will make it fairly hard to fire them later.The most dramatic change, I predict, is that VCs will allow founders to cash out partially by selling some of their stock direct to the VC firm. VCs have traditionally resisted letting founders get anything before the ultimate &amp;ldquo;liquidity event.&amp;rdquo; But they&amp;rsquo;re also desperate for deals. And since I know from my own experience that the rule against buying stock from founders is a stupid one, this is a natural place for things to give as venture funding becomes more and more a seller&amp;rsquo;s market.The disadvantage of taking money from less known firms is that people will assume, correctly or not, that you were turned down by the more exalted ones. But, like where you went to college, the name of your VC stops mattering once you have some performance to measure. So the more confident you are, the less you need a brand-name VC. We funded Viaweb entirely with angel money; it never occurred to us that the backing of a well known VC firm would make us seem more impressive. [5]Another danger of less known firms is that, like angels, they have less reputation to protect. I suspect it&amp;rsquo;s the lower-tier firms that are responsible for most of the tricks that have given VCs such a bad reputation among hackers. They are doubly hosed: the general partners themselves are less able, and yet they have harder problems to solve, because the top VCs skim off all the best deals, leaving the lower-tier firms exactly the startups that are likely to blow up.For example, lower-tier firms are much more likely to pretend to want to do a deal with you just to lock you up while they decide if they really want to. One experienced CFO said: The better ones usually will not give a term sheet unless they really want to do a deal. The second or third tier firms have a much higher break rate—it could be as high as 50%. It&amp;rsquo;s obvious why: the lower-tier firms&amp;rsquo; biggest fear, when chance throws them a bone, is that one of the big dogs will notice and take it away. The big dogs don&amp;rsquo;t have to worry about that.Falling victim to this trick could really hurt you. As one VC told me: If you were talking to four VCs, told three of them that you accepted a term sheet, and then have to call them back to tell them you were just kidding, you are absolutely damaged goods. Here&amp;rsquo;s a partial solution: when a VC offers you a term sheet, ask how many of their last 10 term sheets turned into deals. This will at least force them to lie outright if they want to mislead you.Not all the people who work at VC firms are partners. Most firms also have a handful of junior employees called something like associates or analysts. If you get a call from a VC firm, go to their web site and check whether the person you talked to is a partner. Odds are it will be a junior person; they scour the web looking for startups their bosses could invest in. The junior people will tend to seem very positive about your company. They&amp;rsquo;re not pretending; they want to believe you&amp;rsquo;re a hot prospect, because it would be a huge coup for them if their firm invested in a company they discovered. Don&amp;rsquo;t be misled by this optimism. It&amp;rsquo;s the partners who decide, and they view things with a colder eye.Because VCs invest large amounts, the money comes with more restrictions. Most only come into effect if the company gets into trouble. For example, VCs generally write it into the deal that in any sale, they get their investment back first. So if the company gets sold at a low price, the founders could get nothing. Some VCs now require that in any sale they get 4x their investment back before the common stock holders (that is, you) get anything, but this is an abuse that should be resisted.Another difference with large investments is that the founders are usually required to accept &amp;ldquo;vesting&amp;rdquo;—to surrender their stock and earn it back over the next 4-5 years. VCs don&amp;rsquo;t want to invest millions in a company the founders could just walk away from. Financially, vesting has little effect, but in some situations it could mean founders will have less power. If VCs got de facto control of the company and fired one of the founders, he&amp;rsquo;d lose any unvested stock unless there was specific protection against this. So vesting would in that situation force founders to toe the line.The most noticeable change when a startup takes serious funding is that the founders will no longer have complete control. Ten years ago VCs used to insist that founders step down as CEO and hand the job over to a business guy they supplied. This is less the rule now, partly because the disasters of the Bubble showed that generic business guys don&amp;rsquo;t make such great CEOs.But while founders will increasingly be able to stay on as CEO, they&amp;rsquo;ll have to cede some power, because the board of directors will become more powerful. In the seed stage, the board is generally a formality; if you want to talk to the other board members, you just yell into the next room. This stops with VC-scale money. In a typical VC funding deal, the board of directors might be composed of two VCs, two founders, and one outside person acceptable to both. The board will have ultimate power, which means the founders now have to convince instead of commanding.This is not as bad as it sounds, however. Bill Gates is in the same position; he doesn&amp;rsquo;t have majority control of Microsoft; in principle he also has to convince instead of commanding. And yet he seems pretty commanding, doesn&amp;rsquo;t he? As long as things are going smoothly, boards don&amp;rsquo;t interfere much. The danger comes when there&amp;rsquo;s a bump in the road, as happened to Steve Jobs at Apple.Like angels, VCs prefer to invest in deals that come to them through people they know. So while nearly all VC funds have some address you can send your business plan to, VCs privately admit the chance of getting funding by this route is near zero. One recently told me that he did not know a single startup that got funded this way.I suspect VCs accept business plans &amp;ldquo;over the transom&amp;rdquo; more as a way to keep tabs on industry trends than as a source of deals. In fact, I would strongly advise against mailing your business plan randomly to VCs, because they treat this as evidence of laziness. Do the extra work of getting personal introductions. As one VC put it: I&amp;rsquo;m not hard to find. I know a lot of people. If you can&amp;rsquo;t find some way to reach me, how are you going to create a successful company? One of the most difficult problems for startup founders is deciding when to approach VCs. You really only get one chance, because they rely heavily on first impressions. And you can&amp;rsquo;t approach some and save others for later, because (a) they ask who else you&amp;rsquo;ve talked to and when and (b) they talk among themselves. If you&amp;rsquo;re talking to one VC and he finds out that you were rejected by another several months ago, you&amp;rsquo;ll definitely seem shopworn.So when do you approach VCs? When you can convince them. If the founders have impressive resumes and the idea isn&amp;rsquo;t hard to understand, you could approach VCs quite early. Whereas if the founders are unknown and the idea is very novel, you might have to launch the thing and show that users loved it before VCs would be convinced.If several VCs are interested in you, they will sometimes be willing to split the deal between them. They&amp;rsquo;re more likely to do this if they&amp;rsquo;re close in the VC pecking order. Such deals may be a net win for founders, because you get multiple VCs interested in your success, and you can ask each for advice about the other. One founder I know wrote: Two-firm deals are great. It costs you a little more equity, but being able to play the two firms off each other (as well as ask one if the other is being out of line) is invaluable. When you do negotiate with VCs, remember that they&amp;rsquo;ve done this a lot more than you have. They&amp;rsquo;ve invested in dozens of startups, whereas this is probably the first you&amp;rsquo;ve founded. But don&amp;rsquo;t let them or the situation intimidate you. The average founder is smarter than the average VC. So just do what you&amp;rsquo;d do in any complex, unfamiliar situation: proceed deliberately, and question anything that seems odd.It is, unfortunately, common for VCs to put terms in an agreement whose consequences surprise founders later, and also common for VCs to defend things they do by saying that they&amp;rsquo;re standard in the industry. Standard, schmandard; the whole industry is only a few decades old, and rapidly evolving. The concept of &amp;ldquo;standard&amp;rdquo; is a useful one when you&amp;rsquo;re operating on a small scale (Y Combinator uses identical terms for every deal because for tiny seed-stage investments it&amp;rsquo;s not worth the overhead of negotiating individual deals), but it doesn&amp;rsquo;t apply at the VC level. On that scale, every negotiation is unique.Most successful startups get money from more than one of the preceding five sources. [6] And, confusingly, the names of funding sources also tend to be used as the names of different rounds. The best way to explain how it all works is to follow the case of a hypothetical startup.Stage 1: Seed RoundOur startup begins when a group of three friends have an idea&amp;ndash; either an idea for something they might build, or simply the idea &amp;ldquo;let&amp;rsquo;s start a company.&amp;rdquo; Presumably they already have some source of food and shelter. But if you have food and shelter, you probably also have something you&amp;rsquo;re supposed to be working on: either classwork, or a job. So if you want to work full-time on a startup, your money situation will probably change too.A lot of startup founders say they started the company without any idea of what they planned to do. This is actually less common than it seems: many have to claim they thought of the idea after quitting because otherwise their former employer would own it.The three friends decide to take the leap. Since most startups are in competitive businesses, you not only want to work full-time on them, but more than full-time. So some or all of the friends quit their jobs or leave school. (Some of the founders in a startup can stay in grad school, but at least one has to make the company his full-time job.)They&amp;rsquo;re going to run the company out of one of their apartments at first, and since they don&amp;rsquo;t have any users they don&amp;rsquo;t have to pay much for infrastructure. Their main expenses are setting up the company, which costs a couple thousand dollars in legal work and registration fees, and the living expenses of the founders.The phrase &amp;ldquo;seed investment&amp;rdquo; covers a broad range. To some VC firms it means $500,000, but to most startups it means several months&amp;rsquo; living expenses. We&amp;rsquo;ll suppose our group of friends start with $15,000 from their friend&amp;rsquo;s rich uncle, who they give 5% of the company in return. There&amp;rsquo;s only common stock at this stage. They leave 20% as an options pool for later employees (but they set things up so that they can issue this stock to themselves if they get bought early and most is still unissued), and the three founders each get 25%.By living really cheaply they think they can make the remaining money last five months. When you have five months&amp;rsquo; runway left, how soon do you need to start looking for your next round? Answer: immediately. It takes time to find investors, and time (always more than you expect) for the deal to close even after they say yes. So if our group of founders know what they&amp;rsquo;re doing they&amp;rsquo;ll start sniffing around for angel investors right away. But of course their main job is to build version 1 of their software.The friends might have liked to have more money in this first phase, but being slightly underfunded teaches them an important lesson. For a startup, cheapness is power. The lower your costs, the more options you have—not just at this stage, but at every point till you&amp;rsquo;re profitable. When you have a high &amp;ldquo;burn rate,&amp;rdquo; you&amp;rsquo;re always under time pressure, which means (a) you don&amp;rsquo;t have time for your ideas to evolve, and (b) you&amp;rsquo;re often forced to take deals you don&amp;rsquo;t like.Every startup&amp;rsquo;s rule should be: spend little, and work fast.After ten weeks&amp;rsquo; work the three friends have built a prototype that gives one a taste of what their product will do. It&amp;rsquo;s not what they originally set out to do—in the process of writing it, they had some new ideas. And it only does a fraction of what the finished product will do, but that fraction includes stuff that no one else has done before.They&amp;rsquo;ve also written at least a skeleton business plan, addressing the five fundamental questions: what they&amp;rsquo;re going to do, why users need it, how large the market is, how they&amp;rsquo;ll make money, and who the competitors are and why this company is going to beat them. (That last has to be more specific than &amp;ldquo;they suck&amp;rdquo; or &amp;ldquo;we&amp;rsquo;ll work really hard.&amp;quot;)If you have to choose between spending time on the demo or the business plan, spend most on the demo. Software is not only more convincing, but a better way to explore ideas.Stage 2: Angel RoundWhile writing the prototype, the group has been traversing their network of friends in search of angel investors. They find some just as the prototype is demoable. When they demo it, one of the angels is willing to invest. Now the group is looking for more money: they want enough to last for a year, and maybe to hire a couple friends. So they&amp;rsquo;re going to raise $200,000.The angel agrees to invest at a pre-money valuation of $1 million. The company issues $200,000 worth of new shares to the angel; if there were 1000 shares before the deal, this means 200 additional shares. The angel now owns 200/1200 shares, or a sixth of the company, and all the previous shareholders&amp;rsquo; percentage ownership is diluted by a sixth. After the deal, the capitalization table looks like this: shareholder shares percent &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- angel 200 16.7 uncle 50 4.2 each founder 250 20.8 option pool 200 16.7 &amp;mdash;- &amp;mdash;&amp;ndash; total 1200 100 To keep things simple, I had the angel do a straight cash for stock deal. In reality the angel might be more likely to make the investment in the form of a convertible loan. A convertible loan is a loan that can be converted into stock later; it works out the same as a stock purchase in the end, but gives the angel more protection against being squashed by VCs in future rounds.Who pays the legal bills for this deal? The startup, remember, only has a couple thousand left. In practice this turns out to be a sticky problem that usually gets solved in some improvised way. Maybe the startup can find lawyers who will do it cheaply in the hope of future work if the startup succeeds. Maybe someone has a lawyer friend. Maybe the angel pays for his lawyer to represent both sides. (Make sure if you take the latter route that the lawyer is representing you rather than merely advising you, or his only duty is to the investor.)An angel investing $200k would probably expect a seat on the board of directors. He might also want preferred stock, meaning a special class of stock that has some additional rights over the common stock everyone else has. Typically these rights include vetoes over major strategic decisions, protection against being diluted in future rounds, and the right to get one&amp;rsquo;s investment back first if the company is sold.Some investors might expect the founders to accept vesting for a sum this size, and others wouldn&amp;rsquo;t. VCs are more likely to require vesting than angels. At Viaweb we managed to raise $2.5 million from angels without ever accepting vesting, largely because we were so inexperienced that we were appalled at the idea. In practice this turned out to be good, because it made us harder to push around.Our experience was unusual; vesting is the norm for amounts that size. Y Combinator doesn&amp;rsquo;t require vesting, because (a) we invest such small amounts, and (b) we think it&amp;rsquo;s unnecessary, and that the hope of getting rich is enough motivation to keep founders at work. But maybe if we were investing millions we would think differently.I should add that vesting is also a way for founders to protect themselves against one another. It solves the problem of what to do if one of the founders quits. So some founders impose it on themselves when they start the company.The angel deal takes two weeks to close, so we are now three months into the life of the company.The point after you get the first big chunk of angel money will usually be the happiest phase in a startup&amp;rsquo;s life. It&amp;rsquo;s a lot like being a postdoc: you have no immediate financial worries, and few responsibilities. You get to work on juicy kinds of work, like designing software. You don&amp;rsquo;t have to spend time on bureaucratic stuff, because you haven&amp;rsquo;t hired any bureaucrats yet. Enjoy it while it lasts, and get as much done as you can, because you will never again be so productive.With an apparently inexhaustible sum of money sitting safely in the bank, the founders happily set to work turning their prototype into something they can release. They hire one of their friends—at first just as a consultant, so they can try him out—and then a month later as employee #1. They pay him the smallest salary he can live on, plus 3% of the company in restricted stock, vesting over four years. (So after this the option pool is down to 13.7%). [7] They also spend a little money on a freelance graphic designer.How much stock do you give early employees? That varies so much that there&amp;rsquo;s no conventional number. If you get someone really good, really early, it might be wise to give him as much stock as the founders. The one universal rule is that the amount of stock an employee gets decreases polynomially with the age of the company. In other words, you get rich as a power of how early you were. So if some friends want you to come work for their startup, don&amp;rsquo;t wait several months before deciding.A month later, at the end of month four, our group of founders have something they can launch. Gradually through word of mouth they start to get users. Seeing the system in use by real users—people they don&amp;rsquo;t know—gives them lots of new ideas. Also they find they now worry obsessively about the status of their server. (How relaxing founders&amp;rsquo; lives must have been when startups wrote VisiCalc.)By the end of month six, the system is starting to have a solid core of features, and a small but devoted following. People start to write about it, and the founders are starting to feel like experts in their field.We&amp;rsquo;ll assume that their startup is one that could put millions more to use. Perhaps they need to spend a lot on marketing, or build some kind of expensive infrastructure, or hire highly paid salesmen. So they decide to start talking to VCs. They get introductions to VCs from various sources: their angel investor connects them with a couple; they meet a few at conferences; a couple VCs call them after reading about them.Step 3: Series A RoundArmed with their now somewhat fleshed-out business plan and able to demo a real, working system, the founders visit the VCs they have introductions to. They find the VCs intimidating and inscrutable. They all ask the same question: who else have you pitched to? (VCs are like high school girls: they&amp;rsquo;re acutely aware of their position in the VC pecking order, and their interest in a company is a function of the interest other VCs show in it.)One of the VC firms says they want to invest and offers the founders a term sheet. A term sheet is a summary of what the deal terms will be when and if they do a deal; lawyers will fill in the details later. By accepting the term sheet, the startup agrees to turn away other VCs for some set amount of time while this firm does the &amp;ldquo;due diligence&amp;rdquo; required for the deal. Due diligence is the corporate equivalent of a background check: the purpose is to uncover any hidden bombs that might sink the company later, like serious design flaws in the product, pending lawsuits against the company, intellectual property issues, and so on. VCs&amp;rsquo; legal and financial due diligence is pretty thorough, but the technical due diligence is generally a joke. [8]The due diligence discloses no ticking bombs, and six weeks later they go ahead with the deal. Here are the terms: a $2 million investment at a pre-money valuation of $4 million, meaning that after the deal closes the VCs will own a third of the company (2 / (4 + 2)). The VCs also insist that prior to the deal the option pool be enlarged by an additional hundred shares. So the total number of new shares issued is 750, and the cap table becomes: shareholder shares percent &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- VCs 650 33.3 angel 200 10.3 uncle 50 2.6 each founder 250 12.8 employee 36* 1.8 *unvested option pool 264 13.5 &amp;mdash;- &amp;mdash;&amp;ndash; total 1950 100 This picture is unrealistic in several respects. For example, while the percentages might end up looking like this, it&amp;rsquo;s unlikely that the VCs would keep the existing numbers of shares. In fact, every bit of the startup&amp;rsquo;s paperwork would probably be replaced, as if the company were being founded anew. Also, the money might come in several tranches, the later ones subject to various conditions—though this is apparently more common in deals with lower-tier VCs (whose lot in life is to fund more dubious startups) than with the top firms.And of course any VCs reading this are probably rolling on the floor laughing at how my hypothetical VCs let the angel keep his 10.3 of the company. I admit, this is the Bambi version; in simplifying the picture, I&amp;rsquo;ve also made everyone nicer. In the real world, VCs regard angels the way a jealous husband feels about his wife&amp;rsquo;s previous boyfriends. To them the company didn&amp;rsquo;t exist before they invested in it. [9]I don&amp;rsquo;t want to give the impression you have to do an angel round before going to VCs. In this example I stretched things out to show multiple sources of funding in action. Some startups could go directly from seed funding to a VC round; several of the companies we&amp;rsquo;ve funded have.The founders are required to vest their shares over four years, and the board is now reconstituted to consist of two VCs, two founders, and a fifth person acceptable to both. The angel investor cheerfully surrenders his board seat.At this point there is nothing new our startup can teach us about funding—or at least, nothing good. [10] The startup will almost certainly hire more people at this point; those millions must be put to work, after all. The company may do additional funding rounds, presumably at higher valuations. They may if they are extraordinarily fortunate do an IPO, which we should remember is also in principle a round of funding, regardless of its de facto purpose. But that, if not beyond the bounds of possibility, is beyond the scope of this article.Deals Fall ThroughAnyone who&amp;rsquo;s been through a startup will find the preceding portrait to be missing something: disasters. If there&amp;rsquo;s one thing all startups have in common, it&amp;rsquo;s that something is always going wrong. And nowhere more than in matters of funding.For example, our hypothetical startup never spent more than half of one round before securing the next. That&amp;rsquo;s more ideal than typical. Many startups—even successful ones—come close to running out of money at some point. Terrible things happen to startups when they run out of money, because they&amp;rsquo;re designed for growth, not adversity.But the most unrealistic thing about the series of deals I&amp;rsquo;ve described is that they all closed. In the startup world, closing is not what deals do. What deals do is fall through. If you&amp;rsquo;re starting a startup you would do well to remember that. Birds fly; fish swim; deals fall through.Why? Partly the reason deals seem to fall through so often is that you lie to yourself. You want the deal to close, so you start to believe it will. But even correcting for this, startup deals fall through alarmingly often—far more often than, say, deals to buy real estate. The reason is that it&amp;rsquo;s such a risky environment. People about to fund or acquire a startup are prone to wicked cases of buyer&amp;rsquo;s remorse. They don&amp;rsquo;t really grasp the risk they&amp;rsquo;re taking till the deal&amp;rsquo;s about to close. And then they panic. And not just inexperienced angel investors, but big companies too.So if you&amp;rsquo;re a startup founder wondering why some angel investor isn&amp;rsquo;t returning your phone calls, you can at least take comfort in the thought that the same thing is happening to other deals a hundred times the size.The example of a startup&amp;rsquo;s history that I&amp;rsquo;ve presented is like a skeleton—accurate so far as it goes, but needing to be fleshed out to be a complete picture. To get a complete picture, just add in every possible disaster.A frightening prospect? In a way. And yet also in a way encouraging. The very uncertainty of startups frightens away almost everyone. People overvalue stability—especially young people, who ironically need it least. And so in starting a startup, as in any really bold undertaking, merely deciding to do it gets you halfway there. On the day of the race, most of the other runners won&amp;rsquo;t show up. Notes[1] The aim of such regulations is to protect widows and orphans from crooked investment schemes; people with a million dollars in liquid assets are assumed to be able to protect themselves. The unintended consequence is that the investments that generate the highest returns, like hedge funds, are available only to the rich.[2] Consulting is where product companies go to die. IBM is the most famous example. So starting as a consulting company is like starting out in the grave and trying to work your way up into the world of the living.[3] If &amp;ldquo;near you&amp;rdquo; doesn&amp;rsquo;t mean the Bay Area, Boston, or Seattle, consider moving. It&amp;rsquo;s not a coincidence you haven&amp;rsquo;t heard of many startups from Philadelphia.[4] Investors are often compared to sheep. And they are like sheep, but that&amp;rsquo;s a rational response to their situation. Sheep act the way they do for a reason. If all the other sheep head for a certain field, it&amp;rsquo;s probably good grazing. And when a wolf appears, is he going to eat a sheep in the middle of the flock, or one near the edge?[5] This was partly confidence, and partly simple ignorance. We didn&amp;rsquo;t know ourselves which VC firms were the impressive ones. We thought software was all that mattered. But that turned out to be the right direction to be naive in: it&amp;rsquo;s much better to overestimate than underestimate the importance of making a good product.[6] I&amp;rsquo;ve omitted one source: government grants. I don&amp;rsquo;t think these are even worth thinking about for the average startup. Governments may mean well when they set up grant programs to encourage startups, but what they give with one hand they take away with the other: the process of applying is inevitably so arduous, and the restrictions on what you can do with the money so burdensome, that it would be easier to take a job to get the money. You should be especially suspicious of grants whose purpose is some kind of social engineering&amp;ndash; e.g. to encourage more startups to be started in Mississippi. Free money to start a startup in a place where few succeed is hardly free.Some government agencies run venture funding groups, which make investments rather than giving grants. For example, the CIA runs a venture fund called In-Q-Tel that is modelled on private sector funds and apparently generates good returns. They would probably be worth approaching—if you don&amp;rsquo;t mind taking money from the CIA.[7] Options have largely been replaced with restricted stock, which amounts to the same thing. Instead of earning the right to buy stock, the employee gets the stock up front, and earns the right not to have to give it back. The shares set aside for this purpose are still called the &amp;ldquo;option pool.&amp;quot;[8] First-rate technical people do not generally hire themselves out to do due diligence for VCs. So the most difficult part for startup founders is often responding politely to the inane questions of the &amp;ldquo;expert&amp;rdquo; they send to look you over.[9] VCs regularly wipe out angels by issuing arbitrary amounts of new stock. They seem to have a standard piece of casuistry for this situation: that the angels are no longer working to help the company, and so don&amp;rsquo;t deserve to keep their stock. This of course reflects a willful misunderstanding of what investment means; like any investor, the angel is being compensated for risks he took earlier. By a similar logic, one could argue that the VCs should be deprived of their shares when the company goes public.[10] One new thing the company might encounter is a down round, or a funding round at valuation lower than the previous round. Down rounds are bad news; it is generally the common stock holders who take the hit. Some of the most fearsome provisions in VC deal terms have to do with down rounds—like &amp;ldquo;full ratchet anti-dilution,&amp;rdquo; which is as frightening as it sounds.Founders are tempted to ignore these clauses, because they think the company will either be a big success or a complete bust. VCs know otherwise: it&amp;rsquo;s not uncommon for startups to have moments of adversity before they ultimately succeed. So it&amp;rsquo;s worth negotiating anti-dilution provisions, even though you don&amp;rsquo;t think you need to, and VCs will try to make you feel that you&amp;rsquo;re being gratuitously troublesome.Thanks to Sam Altman, Hutch Fishman, Steve Huffman, Jessica Livingston, Sesha Pratap, Stan Reiss, Andy Singleton, Zak Stone, and Aaron Swartz for reading drafts of this.Arabic Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/startuphubs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/startuphubs/</guid>
      <description>&lt;h1 id=&#34;startuphubs&#34;&gt;Startuphubs&lt;/h1&gt;&#xA;&lt;p&gt;Why to Move to a Startup Hub October 2007After the last talk I gave, one of the organizers got up on the stage to deliver an impromptu rebuttal. That never happened before. I only heard the first few sentences, but that was enough to tell what I said that upset him: that startups would do better if they moved to Silicon Valley.This conference was in London, and most of the audience seemed to be from the UK. So saying startups should move to Silicon Valley seemed like a nationalistic remark: an obnoxious American telling them that if they wanted to do things right they should all just move to America.Actually I&amp;rsquo;m less American than I seem. I didn&amp;rsquo;t say so, but I&amp;rsquo;m British by birth. And just as Jews are ex officio allowed to tell Jewish jokes, I don&amp;rsquo;t feel like I have to bother being diplomatic with a British audience.The idea that startups would do better to move to Silicon Valley is not even a nationalistic one. [1] It&amp;rsquo;s the same thing I say to startups in the US. Y Combinator alternates between coasts every 6 months. Every other funding cycle is in Boston. And even though Boston is the second biggest startup hub in the US (and the world), we tell the startups from those cycles that their best bet is to move to Silicon Valley. If that&amp;rsquo;s true of Boston, it&amp;rsquo;s even more true of every other city.This is about cities, not countries.And I think I can prove I&amp;rsquo;m right. You can easily reduce the opposing argument ad what most people would agree was absurdum. Few would be willing to claim that it doesn&amp;rsquo;t matter at all where a startup is—that a startup operating out of a small agricultural town wouldn&amp;rsquo;t benefit from moving to a startup hub. Most people could see how it might be helpful to be in a place where there was infrastructure for startups, accumulated knowledge about how to make them work, and other people trying to do it. And yet whatever argument you use to prove that startups don&amp;rsquo;t need to move from London to Silicon Valley could equally well be used to prove startups don&amp;rsquo;t need to move from smaller towns to London.The difference between cities is a matter of degree. And if, as nearly everyone who knows agrees, startups are better off in Silicon Valley than Boston, then they&amp;rsquo;re better off in Silicon Valley than everywhere else too.I realize I might seem to have a vested interest in this conclusion, because startups that move to the US might do it through Y Combinator. But the American startups we&amp;rsquo;ve funded will attest that I say the same thing to them.I&amp;rsquo;m not claiming of course that every startup has to go to Silicon Valley to succeed. Just that all other things being equal, the more of a startup hub a place is, the better startups will do there. But other considerations can outweigh the advantages of moving. I&amp;rsquo;m not saying founders with families should uproot them to move halfway around the world; that might be too much of a distraction.Immigration difficulties might be another reason to stay put. Dealing with immigration problems is like raising money: for some reason it seems to consume all your attention. A startup can&amp;rsquo;t afford much of that. One Canadian startup we funded spent about 6 months working on moving to the US. Eventually they just gave up, because they couldn&amp;rsquo;t afford to take so much time away from working on their software.(If another country wanted to establish a rival to Silicon Valley, the single best thing they could do might be to create a special visa for startup founders. US immigration policy is one of Silicon Valley&amp;rsquo;s biggest weaknesses.)If your startup is connected to a specific industry, you may be better off in one of its centers. A startup doing something related to entertainment might want to be in New York or LA.And finally, if a good investor has committed to fund you if you stay where you are, you should probably stay. Finding investors is hard. You generally shouldn&amp;rsquo;t pass up a definite funding offer to move. [2]In fact, the quality of the investors may be the main advantage of startup hubs. Silicon Valley investors are noticeably more aggressive than Boston ones. Over and over, I&amp;rsquo;ve seen startups we&amp;rsquo;ve funded snatched by west coast investors out from under the noses of Boston investors who saw them first but acted too slowly. At this year&amp;rsquo;s Boston Demo Day, I told the audience that this happened every year, so if they saw a startup they liked, they should make them an offer. And yet within a month it had happened again: an aggressive west coast VC who had met the founder of a YC-funded startup a week before beat out a Boston VC who had known him for years. By the time the Boston VC grasped what was happening, the deal was already gone.Boston investors will admit they&amp;rsquo;re more conservative. Some want to believe this comes from the city&amp;rsquo;s prudent Yankee character. But Occam&amp;rsquo;s razor suggests the truth is less flattering. Boston investors are probably more conservative than Silicon Valley investors for the same reason Chicago investors are more conservative than Boston ones. They don&amp;rsquo;t understand startups as well.West coast investors aren&amp;rsquo;t bolder because they&amp;rsquo;re irresponsible cowboys, or because the good weather makes them optimistic. They&amp;rsquo;re bolder because they know what they&amp;rsquo;re doing. They&amp;rsquo;re the skiers who ski on the diamond slopes. Boldness is the essence of venture investing. The way you get big returns is not by trying to avoid losses, but by trying to ensure you get some of the big hits. And the big hits often look risky at first.Like Facebook. Facebook was started in Boston. Boston VCs had the first shot at them. But they said no, so Facebook moved to Silicon Valley and raised money there. The partner who turned them down now says that &amp;ldquo;may turn out to have been a mistake.&amp;ldquo;Empirically, boldness wins. If the aggressive ways of west coast investors are going to come back to bite them, it has been a long time coming. Silicon Valley has been pulling ahead of Boston since the 1970s. If there was going to be a comeuppance for the west coast investors, the bursting of the Bubble would have been it. But since then the west coast has just pulled further ahead.West coast investors are confident enough of their judgement to act boldly; east coast investors, not so much; but anyone who thinks east coast investors act that way out of prudence should see the frantic reactions of an east coast VC in the process of losing a deal to a west coast one.In addition to the concentration that comes from specialization, startup hubs are also markets. And markets are usually centralized. Even now, when traders could be anywhere, they cluster in a few cities. It&amp;rsquo;s hard to say exactly what it is about face to face contact that makes deals happen, but whatever it is, it hasn&amp;rsquo;t yet been duplicated by technology.Walk down University Ave at the right time, and you might overhear five different people talking on the phone about deals. In fact, this is part of the reason Y Combinator is in Boston half the time: it&amp;rsquo;s hard to stand that year round. But though it can sometimes be annoying to be surrounded by people who only think about one thing, it&amp;rsquo;s the place to be if that one thing is what you&amp;rsquo;re trying to do.I was talking recently to someone who works on search at Google. He knew a lot of people at Yahoo, so he was in a good position to compare the two companies. I asked him why Google was better at search. He said it wasn&amp;rsquo;t anything specific Google did, but simply that they understood search so much better.And that&amp;rsquo;s why startups thrive in startup hubs like Silicon Valley. Startups are a very specialized business, as specialized as diamond cutting. And in startup hubs they understand it. Notes[1] The nationalistic idea is the converse: that startups should stay in a certain city because of the country it&amp;rsquo;s in. If you really have a &amp;ldquo;one world&amp;rdquo; viewpoint, deciding to move from London to Silicon Valley is no different from deciding to move from Chicago to Silicon Valley.[2] An investor who merely seems like he will fund you, however, you can ignore. Seeming like they will fund you one day is the way investors say No.Thanks to Sam Altman, Jessica Livingston, Harjeet Taggar, and Kulveer Taggar for reading drafts of this. Comment on this essay.Japanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/startupideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/startupideas/</guid>
      <description>&lt;h1 id=&#34;startupideas&#34;&gt;Startupideas&lt;/h1&gt;&#xA;&lt;p&gt;How to Get Startup Ideas Want to start a startup? Get funded by Y Combinator. November 2012The way to get startup ideas is not to try to think of startup ideas. It&amp;rsquo;s to look for problems, preferably problems you have yourself.The very best startup ideas tend to have three things in common: they&amp;rsquo;re something the founders themselves want, that they themselves can build, and that few others realize are worth doing. Microsoft, Apple, Yahoo, Google, and Facebook all began this way. ProblemsWhy is it so important to work on a problem you have? Among other things, it ensures the problem really exists. It sounds obvious to say you should only work on problems that exist. And yet by far the most common mistake startups make is to solve problems no one has.I made it myself. In 1995 I started a company to put art galleries online. But galleries didn&amp;rsquo;t want to be online. It&amp;rsquo;s not how the art business works. So why did I spend 6 months working on this stupid idea? Because I didn&amp;rsquo;t pay attention to users. I invented a model of the world that didn&amp;rsquo;t correspond to reality, and worked from that. I didn&amp;rsquo;t notice my model was wrong until I tried to convince users to pay for what we&amp;rsquo;d built. Even then I took embarrassingly long to catch on. I was attached to my model of the world, and I&amp;rsquo;d spent a lot of time on the software. They had to want it!Why do so many founders build things no one wants? Because they begin by trying to think of startup ideas. That m.o. is doubly dangerous: it doesn&amp;rsquo;t merely yield few good ideas; it yields bad ideas that sound plausible enough to fool you into working on them.At YC we call these &amp;ldquo;made-up&amp;rdquo; or &amp;ldquo;sitcom&amp;rdquo; startup ideas. Imagine one of the characters on a TV show was starting a startup. The writers would have to invent something for it to do. But coming up with good startup ideas is hard. It&amp;rsquo;s not something you can do for the asking. So (unless they got amazingly lucky) the writers would come up with an idea that sounded plausible, but was actually bad.For example, a social network for pet owners. It doesn&amp;rsquo;t sound obviously mistaken. Millions of people have pets. Often they care a lot about their pets and spend a lot of money on them. Surely many of these people would like a site where they could talk to other pet owners. Not all of them perhaps, but if just 2 or 3 percent were regular visitors, you could have millions of users. You could serve them targeted offers, and maybe charge for premium features. [1]The danger of an idea like this is that when you run it by your friends with pets, they don&amp;rsquo;t say &amp;ldquo;I would never use this.&amp;rdquo; They say &amp;ldquo;Yeah, maybe I could see using something like that.&amp;rdquo; Even when the startup launches, it will sound plausible to a lot of people. They don&amp;rsquo;t want to use it themselves, at least not right now, but they could imagine other people wanting it. Sum that reaction across the entire population, and you have zero users. [2] WellWhen a startup launches, there have to be at least some users who really need what they&amp;rsquo;re making — not just people who could see themselves using it one day, but who want it urgently. Usually this initial group of users is small, for the simple reason that if there were something that large numbers of people urgently needed and that could be built with the amount of effort a startup usually puts into a version one, it would probably already exist. Which means you have to compromise on one dimension: you can either build something a large number of people want a small amount, or something a small number of people want a large amount. Choose the latter. Not all ideas of that type are good startup ideas, but nearly all good startup ideas are of that type.Imagine a graph whose x axis represents all the people who might want what you&amp;rsquo;re making and whose y axis represents how much they want it. If you invert the scale on the y axis, you can envision companies as holes. Google is an immense crater: hundreds of millions of people use it, and they need it a lot. A startup just starting out can&amp;rsquo;t expect to excavate that much volume. So you have two choices about the shape of hole you start with. You can either dig a hole that&amp;rsquo;s broad but shallow, or one that&amp;rsquo;s narrow and deep, like a well.Made-up startup ideas are usually of the first type. Lots of people are mildly interested in a social network for pet owners.Nearly all good startup ideas are of the second type. Microsoft was a well when they made Altair Basic. There were only a couple thousand Altair owners, but without this software they were programming in machine language. Thirty years later Facebook had the same shape. Their first site was exclusively for Harvard students, of which there are only a few thousand, but those few thousand users wanted it a lot.When you have an idea for a startup, ask yourself: who wants this right now? Who wants this so much that they&amp;rsquo;ll use it even when it&amp;rsquo;s a crappy version one made by a two-person startup they&amp;rsquo;ve never heard of? If you can&amp;rsquo;t answer that, the idea is probably bad. [3]You don&amp;rsquo;t need the narrowness of the well per se. It&amp;rsquo;s depth you need; you get narrowness as a byproduct of optimizing for depth (and speed). But you almost always do get it. In practice the link between depth and narrowness is so strong that it&amp;rsquo;s a good sign when you know that an idea will appeal strongly to a specific group or type of user.But while demand shaped like a well is almost a necessary condition for a good startup idea, it&amp;rsquo;s not a sufficient one. If Mark Zuckerberg had built something that could only ever have appealed to Harvard students, it would not have been a good startup idea. Facebook was a good idea because it started with a small market there was a fast path out of. Colleges are similar enough that if you build a facebook that works at Harvard, it will work at any college. So you spread rapidly through all the colleges. Once you have all the college students, you get everyone else simply by letting them in.Similarly for Microsoft: Basic for the Altair; Basic for other machines; other languages besides Basic; operating systems; applications; IPO. SelfHow do you tell whether there&amp;rsquo;s a path out of an idea? How do you tell whether something is the germ of a giant company, or just a niche product? Often you can&amp;rsquo;t. The founders of Airbnb didn&amp;rsquo;t realize at first how big a market they were tapping. Initially they had a much narrower idea. They were going to let hosts rent out space on their floors during conventions. They didn&amp;rsquo;t foresee the expansion of this idea; it forced itself upon them gradually. All they knew at first is that they were onto something. That&amp;rsquo;s probably as much as Bill Gates or Mark Zuckerberg knew at first.Occasionally it&amp;rsquo;s obvious from the beginning when there&amp;rsquo;s a path out of the initial niche. And sometimes I can see a path that&amp;rsquo;s not immediately obvious; that&amp;rsquo;s one of our specialties at YC. But there are limits to how well this can be done, no matter how much experience you have. The most important thing to understand about paths out of the initial idea is the meta-fact that these are hard to see.So if you can&amp;rsquo;t predict whether there&amp;rsquo;s a path out of an idea, how do you choose between ideas? The truth is disappointing but interesting: if you&amp;rsquo;re the right sort of person, you have the right sort of hunches. If you&amp;rsquo;re at the leading edge of a field that&amp;rsquo;s changing fast, when you have a hunch that something is worth doing, you&amp;rsquo;re more likely to be right.In Zen and the Art of Motorcycle Maintenance, Robert Pirsig says: You want to know how to paint a perfect painting? It&amp;rsquo;s easy. Make yourself perfect and then just paint naturally. I&amp;rsquo;ve wondered about that passage since I read it in high school. I&amp;rsquo;m not sure how useful his advice is for painting specifically, but it fits this situation well. Empirically, the way to have good startup ideas is to become the sort of person who has them.Being at the leading edge of a field doesn&amp;rsquo;t mean you have to be one of the people pushing it forward. You can also be at the leading edge as a user. It was not so much because he was a programmer that Facebook seemed a good idea to Mark Zuckerberg as because he used computers so much. If you&amp;rsquo;d asked most 40 year olds in 2004 whether they&amp;rsquo;d like to publish their lives semi-publicly on the Internet, they&amp;rsquo;d have been horrified at the idea. But Mark already lived online; to him it seemed natural.Paul Buchheit says that people at the leading edge of a rapidly changing field &amp;ldquo;live in the future.&amp;rdquo; Combine that with Pirsig and you get: Live in the future, then build what&amp;rsquo;s missing. That describes the way many if not most of the biggest startups got started. Neither Apple nor Yahoo nor Google nor Facebook were even supposed to be companies at first. They grew out of things their founders built because there seemed a gap in the world.If you look at the way successful founders have had their ideas, it&amp;rsquo;s generally the result of some external stimulus hitting a prepared mind. Bill Gates and Paul Allen hear about the Altair and think &amp;ldquo;I bet we could write a Basic interpreter for it.&amp;rdquo; Drew Houston realizes he&amp;rsquo;s forgotten his USB stick and thinks &amp;ldquo;I really need to make my files live online.&amp;rdquo; Lots of people heard about the Altair. Lots forgot USB sticks. The reason those stimuli caused those founders to start companies was that their experiences had prepared them to notice the opportunities they represented.The verb you want to be using with respect to startup ideas is not &amp;ldquo;think up&amp;rdquo; but &amp;ldquo;notice.&amp;rdquo; At YC we call ideas that grow naturally out of the founders&amp;rsquo; own experiences &amp;ldquo;organic&amp;rdquo; startup ideas. The most successful startups almost all begin this way.That may not have been what you wanted to hear. You may have expected recipes for coming up with startup ideas, and instead I&amp;rsquo;m telling you that the key is to have a mind that&amp;rsquo;s prepared in the right way. But disappointing though it may be, this is the truth. And it is a recipe of a sort, just one that in the worst case takes a year rather than a weekend.If you&amp;rsquo;re not at the leading edge of some rapidly changing field, you can get to one. For example, anyone reasonably smart can probably get to an edge of programming (e.g. building mobile apps) in a year. Since a successful startup will consume at least 3-5 years of your life, a year&amp;rsquo;s preparation would be a reasonable investment. Especially if you&amp;rsquo;re also looking for a cofounder. [4]You don&amp;rsquo;t have to learn programming to be at the leading edge of a domain that&amp;rsquo;s changing fast. Other domains change fast. But while learning to hack is not necessary, it is for the forseeable future sufficient. As Marc Andreessen put it, software is eating the world, and this trend has decades left to run.Knowing how to hack also means that when you have ideas, you&amp;rsquo;ll be able to implement them. That&amp;rsquo;s not absolutely necessary (Jeff Bezos couldn&amp;rsquo;t) but it&amp;rsquo;s an advantage. It&amp;rsquo;s a big advantage, when you&amp;rsquo;re considering an idea like putting a college facebook online, if instead of merely thinking &amp;ldquo;That&amp;rsquo;s an interesting idea,&amp;rdquo; you can think instead &amp;ldquo;That&amp;rsquo;s an interesting idea. I&amp;rsquo;ll try building an initial version tonight.&amp;rdquo; It&amp;rsquo;s even better when you&amp;rsquo;re both a programmer and the target user, because then the cycle of generating new versions and testing them on users can happen inside one head. NoticingOnce you&amp;rsquo;re living in the future in some respect, the way to notice startup ideas is to look for things that seem to be missing. If you&amp;rsquo;re really at the leading edge of a rapidly changing field, there will be things that are obviously missing. What won&amp;rsquo;t be obvious is that they&amp;rsquo;re startup ideas. So if you want to find startup ideas, don&amp;rsquo;t merely turn on the filter &amp;ldquo;What&amp;rsquo;s missing?&amp;rdquo; Also turn off every other filter, particularly &amp;ldquo;Could this be a big company?&amp;rdquo; There&amp;rsquo;s plenty of time to apply that test later. But if you&amp;rsquo;re thinking about that initially, it may not only filter out lots of good ideas, but also cause you to focus on bad ones.Most things that are missing will take some time to see. You almost have to trick yourself into seeing the ideas around you.But you know the ideas are out there. This is not one of those problems where there might not be an answer. It&amp;rsquo;s impossibly unlikely that this is the exact moment when technological progress stops. You can be sure people are going to build things in the next few years that will make you think &amp;ldquo;What did I do before x?&amp;ldquo;And when these problems get solved, they will probably seem flamingly obvious in retrospect. What you need to do is turn off the filters that usually prevent you from seeing them. The most powerful is simply taking the current state of the world for granted. Even the most radically open-minded of us mostly do that. You couldn&amp;rsquo;t get from your bed to the front door if you stopped to question everything.But if you&amp;rsquo;re looking for startup ideas you can sacrifice some of the efficiency of taking the status quo for granted and start to question things. Why is your inbox overflowing? Because you get a lot of email, or because it&amp;rsquo;s hard to get email out of your inbox? Why do you get so much email? What problems are people trying to solve by sending you email? Are there better ways to solve them? And why is it hard to get emails out of your inbox? Why do you keep emails around after you&amp;rsquo;ve read them? Is an inbox the optimal tool for that?Pay particular attention to things that chafe you. The advantage of taking the status quo for granted is not just that it makes life (locally) more efficient, but also that it makes life more tolerable. If you knew about all the things we&amp;rsquo;ll get in the next 50 years but don&amp;rsquo;t have yet, you&amp;rsquo;d find present day life pretty constraining, just as someone from the present would if they were sent back 50 years in a time machine. When something annoys you, it could be because you&amp;rsquo;re living in the future.When you find the right sort of problem, you should probably be able to describe it as obvious, at least to you. When we started Viaweb, all the online stores were built by hand, by web designers making individual HTML pages. It was obvious to us as programmers that these sites would have to be generated by software. [5]Which means, strangely enough, that coming up with startup ideas is a question of seeing the obvious. That suggests how weird this process is: you&amp;rsquo;re trying to see things that are obvious, and yet that you hadn&amp;rsquo;t seen.Since what you need to do here is loosen up your own mind, it may be best not to make too much of a direct frontal attack on the problem — i.e. to sit down and try to think of ideas. The best plan may be just to keep a background process running, looking for things that seem to be missing. Work on hard problems, driven mainly by curiosity, but have a second self watching over your shoulder, taking note of gaps and anomalies. [6]Give yourself some time. You have a lot of control over the rate at which you turn yours into a prepared mind, but you have less control over the stimuli that spark ideas when they hit it. If Bill Gates and Paul Allen had constrained themselves to come up with a startup idea in one month, what if they&amp;rsquo;d chosen a month before the Altair appeared? They probably would have worked on a less promising idea. Drew Houston did work on a less promising idea before Dropbox: an SAT prep startup. But Dropbox was a much better idea, both in the absolute sense and also as a match for his skills. [7]A good way to trick yourself into noticing ideas is to work on projects that seem like they&amp;rsquo;d be cool. If you do that, you&amp;rsquo;ll naturally tend to build things that are missing. It wouldn&amp;rsquo;t seem as interesting to build something that already existed.Just as trying to think up startup ideas tends to produce bad ones, working on things that could be dismissed as &amp;ldquo;toys&amp;rdquo; often produces good ones. When something is described as a toy, that means it has everything an idea needs except being important. It&amp;rsquo;s cool; users love it; it just doesn&amp;rsquo;t matter. But if you&amp;rsquo;re living in the future and you build something cool that users love, it may matter more than outsiders think. Microcomputers seemed like toys when Apple and Microsoft started working on them. I&amp;rsquo;m old enough to remember that era; the usual term for people with their own microcomputers was &amp;ldquo;hobbyists.&amp;rdquo; BackRub seemed like an inconsequential science project. The Facebook was just a way for undergrads to stalk one another.At YC we&amp;rsquo;re excited when we meet startups working on things that we could imagine know-it-alls on forums dismissing as toys. To us that&amp;rsquo;s positive evidence an idea is good.If you can afford to take a long view (and arguably you can&amp;rsquo;t afford not to), you can turn &amp;ldquo;Live in the future and build what&amp;rsquo;s missing&amp;rdquo; into something even better: Live in the future and build what seems interesting. SchoolThat&amp;rsquo;s what I&amp;rsquo;d advise college students to do, rather than trying to learn about &amp;ldquo;entrepreneurship.&amp;rdquo; &amp;ldquo;Entrepreneurship&amp;rdquo; is something you learn best by doing it. The examples of the most successful founders make that clear. What you should be spending your time on in college is ratcheting yourself into the future. College is an incomparable opportunity to do that. What a waste to sacrifice an opportunity to solve the hard part of starting a startup — becoming the sort of person who can have organic startup ideas — by spending time learning about the easy part. Especially since you won&amp;rsquo;t even really learn about it, any more than you&amp;rsquo;d learn about sex in a class. All you&amp;rsquo;ll learn is the words for things.The clash of domains is a particularly fruitful source of ideas. If you know a lot about programming and you start learning about some other field, you&amp;rsquo;ll probably see problems that software could solve. In fact, you&amp;rsquo;re doubly likely to find good problems in another domain: (a) the inhabitants of that domain are not as likely as software people to have already solved their problems with software, and (b) since you come into the new domain totally ignorant, you don&amp;rsquo;t even know what the status quo is to take it for granted.So if you&amp;rsquo;re a CS major and you want to start a startup, instead of taking a class on entrepreneurship you&amp;rsquo;re better off taking a class on, say, genetics. Or better still, go work for a biotech company. CS majors normally get summer jobs at computer hardware or software companies. But if you want to find startup ideas, you might do better to get a summer job in some unrelated field. [8]Or don&amp;rsquo;t take any extra classes, and just build things. It&amp;rsquo;s no coincidence that Microsoft and Facebook both got started in January. At Harvard that is (or was) Reading Period, when students have no classes to attend because they&amp;rsquo;re supposed to be studying for finals. [9]But don&amp;rsquo;t feel like you have to build things that will become startups. That&amp;rsquo;s premature optimization. Just build things. Preferably with other students. It&amp;rsquo;s not just the classes that make a university such a good place to crank oneself into the future. You&amp;rsquo;re also surrounded by other people trying to do the same thing. If you work together with them on projects, you&amp;rsquo;ll end up producing not just organic ideas, but organic ideas with organic founding teams — and that, empirically, is the best combination.Beware of research. If an undergrad writes something all his friends start using, it&amp;rsquo;s quite likely to represent a good startup idea. Whereas a PhD dissertation is extremely unlikely to. For some reason, the more a project has to count as research, the less likely it is to be something that could be turned into a startup. [10] I think the reason is that the subset of ideas that count as research is so narrow that it&amp;rsquo;s unlikely that a project that satisfied that constraint would also satisfy the orthogonal constraint of solving users&amp;rsquo; problems. Whereas when students (or professors) build something as a side-project, they automatically gravitate toward solving users&amp;rsquo; problems — perhaps even with an additional energy that comes from being freed from the constraints of research. CompetitionBecause a good idea should seem obvious, when you have one you&amp;rsquo;ll tend to feel that you&amp;rsquo;re late. Don&amp;rsquo;t let that deter you. Worrying that you&amp;rsquo;re late is one of the signs of a good idea. Ten minutes of searching the web will usually settle the question. Even if you find someone else working on the same thing, you&amp;rsquo;re probably not too late. It&amp;rsquo;s exceptionally rare for startups to be killed by competitors — so rare that you can almost discount the possibility. So unless you discover a competitor with the sort of lock-in that would prevent users from choosing you, don&amp;rsquo;t discard the idea.If you&amp;rsquo;re uncertain, ask users. The question of whether you&amp;rsquo;re too late is subsumed by the question of whether anyone urgently needs what you plan to make. If you have something that no competitor does and that some subset of users urgently need, you have a beachhead. [11]The question then is whether that beachhead is big enough. Or more importantly, who&amp;rsquo;s in it: if the beachhead consists of people doing something lots more people will be doing in the future, then it&amp;rsquo;s probably big enough no matter how small it is. For example, if you&amp;rsquo;re building something differentiated from competitors by the fact that it works on phones, but it only works on the newest phones, that&amp;rsquo;s probably a big enough beachhead.Err on the side of doing things where you&amp;rsquo;ll face competitors. Inexperienced founders usually give competitors more credit than they deserve. Whether you succeed depends far more on you than on your competitors. So better a good idea with competitors than a bad one without.You don&amp;rsquo;t need to worry about entering a &amp;ldquo;crowded market&amp;rdquo; so long as you have a thesis about what everyone else in it is overlooking. In fact that&amp;rsquo;s a very promising starting point. Google was that type of idea. Your thesis has to be more precise than &amp;ldquo;we&amp;rsquo;re going to make an x that doesn&amp;rsquo;t suck&amp;rdquo; though. You have to be able to phrase it in terms of something the incumbents are overlooking. Best of all is when you can say that they didn&amp;rsquo;t have the courage of their convictions, and that your plan is what they&amp;rsquo;d have done if they&amp;rsquo;d followed through on their own insights. Google was that type of idea too. The search engines that preceded them shied away from the most radical implications of what they were doing — particularly that the better a job they did, the faster users would leave.A crowded market is actually a good sign, because it means both that there&amp;rsquo;s demand and that none of the existing solutions are good enough. A startup can&amp;rsquo;t hope to enter a market that&amp;rsquo;s obviously big and yet in which they have no competitors. So any startup that succeeds is either going to be entering a market with existing competitors, but armed with some secret weapon that will get them all the users (like Google), or entering a market that looks small but which will turn out to be big (like Microsoft). [12] FiltersThere are two more filters you&amp;rsquo;ll need to turn off if you want to notice startup ideas: the unsexy filter and the schlep filter.Most programmers wish they could start a startup by just writing some brilliant code, pushing it to a server, and having users pay them lots of money. They&amp;rsquo;d prefer not to deal with tedious problems or get involved in messy ways with the real world. Which is a reasonable preference, because such things slow you down. But this preference is so widespread that the space of convenient startup ideas has been stripped pretty clean. If you let your mind wander a few blocks down the street to the messy, tedious ideas, you&amp;rsquo;ll find valuable ones just sitting there waiting to be implemented.The schlep filter is so dangerous that I wrote a separate essay about the condition it induces, which I called schlep blindness. I gave Stripe as an example of a startup that benefited from turning off this filter, and a pretty striking example it is. Thousands of programmers were in a position to see this idea; thousands of programmers knew how painful it was to process payments before Stripe. But when they looked for startup ideas they didn&amp;rsquo;t see this one, because unconsciously they shrank from having to deal with payments. And dealing with payments is a schlep for Stripe, but not an intolerable one. In fact they might have had net less pain; because the fear of dealing with payments kept most people away from this idea, Stripe has had comparatively smooth sailing in other areas that are sometimes painful, like user acquisition. They didn&amp;rsquo;t have to try very hard to make themselves heard by users, because users were desperately waiting for what they were building.The unsexy filter is similar to the schlep filter, except it keeps you from working on problems you despise rather than ones you fear. We overcame this one to work on Viaweb. There were interesting things about the architecture of our software, but we weren&amp;rsquo;t interested in ecommerce per se. We could see the problem was one that needed to be solved though.Turning off the schlep filter is more important than turning off the unsexy filter, because the schlep filter is more likely to be an illusion. And even to the degree it isn&amp;rsquo;t, it&amp;rsquo;s a worse form of self-indulgence. Starting a successful startup is going to be fairly laborious no matter what. Even if the product doesn&amp;rsquo;t entail a lot of schleps, you&amp;rsquo;ll still have plenty dealing with investors, hiring and firing people, and so on. So if there&amp;rsquo;s some idea you think would be cool but you&amp;rsquo;re kept away from by fear of the schleps involved, don&amp;rsquo;t worry: any sufficiently good idea will have as many.The unsexy filter, while still a source of error, is not as entirely useless as the schlep filter. If you&amp;rsquo;re at the leading edge of a field that&amp;rsquo;s changing rapidly, your ideas about what&amp;rsquo;s sexy will be somewhat correlated with what&amp;rsquo;s valuable in practice. Particularly as you get older and more experienced. Plus if you find an idea sexy, you&amp;rsquo;ll work on it more enthusiastically. [13] RecipesWhile the best way to discover startup ideas is to become the sort of person who has them and then build whatever interests you, sometimes you don&amp;rsquo;t have that luxury. Sometimes you need an idea now. For example, if you&amp;rsquo;re working on a startup and your initial idea turns out to be bad.For the rest of this essay I&amp;rsquo;ll talk about tricks for coming up with startup ideas on demand. Although empirically you&amp;rsquo;re better off using the organic strategy, you could succeed this way. You just have to be more disciplined. When you use the organic method, you don&amp;rsquo;t even notice an idea unless it&amp;rsquo;s evidence that something is truly missing. But when you make a conscious effort to think of startup ideas, you have to replace this natural constraint with self-discipline. You&amp;rsquo;ll see a lot more ideas, most of them bad, so you need to be able to filter them.One of the biggest dangers of not using the organic method is the example of the organic method. Organic ideas feel like inspirations. There are a lot of stories about successful startups that began when the founders had what seemed a crazy idea but &amp;ldquo;just knew&amp;rdquo; it was promising. When you feel that about an idea you&amp;rsquo;ve had while trying to come up with startup ideas, you&amp;rsquo;re probably mistaken.When searching for ideas, look in areas where you have some expertise. If you&amp;rsquo;re a database expert, don&amp;rsquo;t build a chat app for teenagers (unless you&amp;rsquo;re also a teenager). Maybe it&amp;rsquo;s a good idea, but you can&amp;rsquo;t trust your judgment about that, so ignore it. There have to be other ideas that involve databases, and whose quality you can judge. Do you find it hard to come up with good ideas involving databases? That&amp;rsquo;s because your expertise raises your standards. Your ideas about chat apps are just as bad, but you&amp;rsquo;re giving yourself a Dunning-Kruger pass in that domain.The place to start looking for ideas is things you need. There must be things you need. [14]One good trick is to ask yourself whether in your previous job you ever found yourself saying &amp;ldquo;Why doesn&amp;rsquo;t someone make x? If someone made x we&amp;rsquo;d buy it in a second.&amp;rdquo; If you can think of any x people said that about, you probably have an idea. You know there&amp;rsquo;s demand, and people don&amp;rsquo;t say that about things that are impossible to build.More generally, try asking yourself whether there&amp;rsquo;s something unusual about you that makes your needs different from most other people&amp;rsquo;s. You&amp;rsquo;re probably not the only one. It&amp;rsquo;s especially good if you&amp;rsquo;re different in a way people will increasingly be.If you&amp;rsquo;re changing ideas, one unusual thing about you is the idea you&amp;rsquo;d previously been working on. Did you discover any needs while working on it? Several well-known startups began this way. Hotmail began as something its founders wrote to talk about their previous startup idea while they were working at their day jobs. [15]A particularly promising way to be unusual is to be young. Some of the most valuable new ideas take root first among people in their teens and early twenties. And while young founders are at a disadvantage in some respects, they&amp;rsquo;re the only ones who really understand their peers. It would have been very hard for someone who wasn&amp;rsquo;t a college student to start Facebook. So if you&amp;rsquo;re a young founder (under 23 say), are there things you and your friends would like to do that current technology won&amp;rsquo;t let you?The next best thing to an unmet need of your own is an unmet need of someone else. Try talking to everyone you can about the gaps they find in the world. What&amp;rsquo;s missing? What would they like to do that they can&amp;rsquo;t? What&amp;rsquo;s tedious or annoying, particularly in their work? Let the conversation get general; don&amp;rsquo;t be trying too hard to find startup ideas. You&amp;rsquo;re just looking for something to spark a thought. Maybe you&amp;rsquo;ll notice a problem they didn&amp;rsquo;t consciously realize they had, because you know how to solve it.When you find an unmet need that isn&amp;rsquo;t your own, it may be somewhat blurry at first. The person who needs something may not know exactly what they need. In that case I often recommend that founders act like consultants — that they do what they&amp;rsquo;d do if they&amp;rsquo;d been retained to solve the problems of this one user. People&amp;rsquo;s problems are similar enough that nearly all the code you write this way will be reusable, and whatever isn&amp;rsquo;t will be a small price to start out certain that you&amp;rsquo;ve reached the bottom of the well. [16]One way to ensure you do a good job solving other people&amp;rsquo;s problems is to make them your own. When Rajat Suri of E la Carte decided to write software for restaurants, he got a job as a waiter to learn how restaurants worked. That may seem like taking things to extremes, but startups are extreme. We love it when founders do such things.In fact, one strategy I recommend to people who need a new idea is not merely to turn off their schlep and unsexy filters, but to seek out ideas that are unsexy or involve schleps. Don&amp;rsquo;t try to start Twitter. Those ideas are so rare that you can&amp;rsquo;t find them by looking for them. Make something unsexy that people will pay you for.A good trick for bypassing the schlep and to some extent the unsexy filter is to ask what you wish someone else would build, so that you could use it. What would you pay for right now?Since startups often garbage-collect broken companies and industries, it can be a good trick to look for those that are dying, or deserve to, and try to imagine what kind of company would profit from their demise. For example, journalism is in free fall at the moment. But there may still be money to be made from something like journalism. What sort of company might cause people in the future to say &amp;ldquo;this replaced journalism&amp;rdquo; on some axis?But imagine asking that in the future, not now. When one company or industry replaces another, it usually comes in from the side. So don&amp;rsquo;t look for a replacement for x; look for something that people will later say turned out to be a replacement for x. And be imaginative about the axis along which the replacement occurs. Traditional journalism, for example, is a way for readers to get information and to kill time, a way for writers to make money and to get attention, and a vehicle for several different types of advertising. It could be replaced on any of these axes (it has already started to be on most).When startups consume incumbents, they usually start by serving some small but important market that the big players ignore. It&amp;rsquo;s particularly good if there&amp;rsquo;s an admixture of disdain in the big players&amp;rsquo; attitude, because that often misleads them. For example, after Steve Wozniak built the computer that became the Apple I, he felt obliged to give his then-employer Hewlett-Packard the option to produce it. Fortunately for him, they turned it down, and one of the reasons they did was that it used a TV for a monitor, which seemed intolerably déclassé to a high-end hardware company like HP was at the time. [17]Are there groups of scruffy but sophisticated users like the early microcomputer &amp;ldquo;hobbyists&amp;rdquo; that are currently being ignored by the big players? A startup with its sights set on bigger things can often capture a small market easily by expending an effort that wouldn&amp;rsquo;t be justified by that market alone.Similarly, since the most successful startups generally ride some wave bigger than themselves, it could be a good trick to look for waves and ask how one could benefit from them. The prices of gene sequencing and 3D printing are both experiencing Moore&amp;rsquo;s Law-like declines. What new things will we be able to do in the new world we&amp;rsquo;ll have in a few years? What are we unconsciously ruling out as impossible that will soon be possible? OrganicBut talking about looking explicitly for waves makes it clear that such recipes are plan B for getting startup ideas. Looking for waves is essentially a way to simulate the organic method. If you&amp;rsquo;re at the leading edge of some rapidly changing field, you don&amp;rsquo;t have to look for waves; you are the wave.Finding startup ideas is a subtle business, and that&amp;rsquo;s why most people who try fail so miserably. It doesn&amp;rsquo;t work well simply to try to think of startup ideas. If you do that, you get bad ones that sound dangerously plausible. The best approach is more indirect: if you have the right sort of background, good startup ideas will seem obvious to you. But even then, not immediately. It takes time to come across situations where you notice something missing. And often these gaps won&amp;rsquo;t seem to be ideas for companies, just things that would be interesting to build. Which is why it&amp;rsquo;s good to have the time and the inclination to build things just because they&amp;rsquo;re interesting.Live in the future and build what seems interesting. Strange as it sounds, that&amp;rsquo;s the real recipe. Notes[1] This form of bad idea has been around as long as the web. It was common in the 1990s, except then people who had it used to say they were going to create a portal for x instead of a social network for x. Structurally the idea is stone soup: you post a sign saying &amp;ldquo;this is the place for people interested in x,&amp;rdquo; and all those people show up and you make money from them. What lures founders into this sort of idea are statistics about the millions of people who might be interested in each type of x. What they forget is that any given person might have 20 affinities by this standard, and no one is going to visit 20 different communities regularly.[2] I&amp;rsquo;m not saying, incidentally, that I know for sure a social network for pet owners is a bad idea. I know it&amp;rsquo;s a bad idea the way I know randomly generated DNA would not produce a viable organism. The set of plausible sounding startup ideas is many times larger than the set of good ones, and many of the good ones don&amp;rsquo;t even sound that plausible. So if all you know about a startup idea is that it sounds plausible, you have to assume it&amp;rsquo;s bad.[3] More precisely, the users&amp;rsquo; need has to give them sufficient activation energy to start using whatever you make, which can vary a lot. For example, the activation energy for enterprise software sold through traditional channels is very high, so you&amp;rsquo;d have to be a lot better to get users to switch. Whereas the activation energy required to switch to a new search engine is low. Which in turn is why search engines are so much better than enterprise software.[4] This gets harder as you get older. While the space of ideas doesn&amp;rsquo;t have dangerous local maxima, the space of careers does. There are fairly high walls between most of the paths people take through life, and the older you get, the higher the walls become.[5] It was also obvious to us that the web was going to be a big deal. Few non-programmers grasped that in 1995, but the programmers had seen what GUIs had done for desktop computers.[6] Maybe it would work to have this second self keep a journal, and each night to make a brief entry listing the gaps and anomalies you&amp;rsquo;d noticed that day. Not startup ideas, just the raw gaps and anomalies.[7] Sam Altman points out that taking time to come up with an idea is not merely a better strategy in an absolute sense, but also like an undervalued stock in that so few founders do it.There&amp;rsquo;s comparatively little competition for the best ideas, because few founders are willing to put in the time required to notice them. Whereas there is a great deal of competition for mediocre ideas, because when people make up startup ideas, they tend to make up the same ones.[8] For the computer hardware and software companies, summer jobs are the first phase of the recruiting funnel. But if you&amp;rsquo;re good you can skip the first phase. If you&amp;rsquo;re good you&amp;rsquo;ll have no trouble getting hired by these companies when you graduate, regardless of how you spent your summers.[9] The empirical evidence suggests that if colleges want to help their students start startups, the best thing they can do is leave them alone in the right way.[10] I&amp;rsquo;m speaking here of IT startups; in biotech things are different.[11] This is an instance of a more general rule: focus on users, not competitors. The most important information about competitors is what you learn via users anyway.[12] In practice most successful startups have elements of both. And you can describe each strategy in terms of the other by adjusting the boundaries of what you call the market. But it&amp;rsquo;s useful to consider these two ideas separately.[13] I almost hesitate to raise that point though. Startups are businesses; the point of a business is to make money; and with that additional constraint, you can&amp;rsquo;t expect you&amp;rsquo;ll be able to spend all your time working on what interests you most.[14] The need has to be a strong one. You can retroactively describe any made-up idea as something you need. But do you really need that recipe site or local event aggregator as much as Drew Houston needed Dropbox, or Brian Chesky and Joe Gebbia needed Airbnb?Quite often at YC I find myself asking founders &amp;ldquo;Would you use this thing yourself, if you hadn&amp;rsquo;t written it?&amp;rdquo; and you&amp;rsquo;d be surprised how often the answer is no.[15] Paul Buchheit points out that trying to sell something bad can be a source of better ideas:&amp;ldquo;The best technique I&amp;rsquo;ve found for dealing with YC companies that have bad ideas is to tell them to go sell the product ASAP (before wasting time building it). Not only do they learn that nobody wants what they are building, they very often come back with a real idea that they discovered in the process of trying to sell the bad idea.&amp;quot;[16] Here&amp;rsquo;s a recipe that might produce the next Facebook, if you&amp;rsquo;re college students. If you have a connection to one of the more powerful sororities at your school, approach the queen bees thereof and offer to be their personal IT consultants, building anything they could imagine needing in their social lives that didn&amp;rsquo;t already exist. Anything that got built this way would be very promising, because such users are not just the most demanding but also the perfect point to spread from.I have no idea whether this would work.[17] And the reason it used a TV for a monitor is that Steve Wozniak started out by solving his own problems. He, like most of his peers, couldn&amp;rsquo;t afford a monitor.Thanks to Sam Altman, Mike Arrington, Paul Buchheit, John Collison, Patrick Collison, Garry Tan, and Harj Taggar for reading drafts of this, and Marc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan, Mike Moritz and Kevin Systrom for answering my questions about startup history.Japanese TranslationItalian TranslationSpanish Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/startuplessons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/startuplessons/</guid>
      <description>&lt;h1 id=&#34;startuplessons&#34;&gt;Startuplessons&lt;/h1&gt;&#xA;&lt;p&gt;The Hardest Lessons for Startups to Learn April 2006(This essay is derived from a talk at the 2006 Startup School.)The startups we&amp;rsquo;ve funded so far are pretty quick, but they seem quicker to learn some lessons than others. I think it&amp;rsquo;s because some things about startups are kind of counterintuitive.We&amp;rsquo;ve now invested in enough companies that I&amp;rsquo;ve learned a trick for determining which points are the counterintuitive ones: they&amp;rsquo;re the ones I have to keep repeating.So I&amp;rsquo;m going to number these points, and maybe with future startups I&amp;rsquo;ll be able to pull off a form of Huffman coding. I&amp;rsquo;ll make them all read this, and then instead of nagging them in detail, I&amp;rsquo;ll just be able to say: number four! 1. Release Early.The thing I probably repeat most is this recipe for a startup: get a version 1 out fast, then improve it based on users&amp;rsquo; reactions.By &amp;ldquo;release early&amp;rdquo; I don&amp;rsquo;t mean you should release something full of bugs, but that you should release something minimal. Users hate bugs, but they don&amp;rsquo;t seem to mind a minimal version 1, if there&amp;rsquo;s more coming soon.There are several reasons it pays to get version 1 done fast. One is that this is simply the right way to write software, whether for a startup or not. I&amp;rsquo;ve been repeating that since 1993, and I haven&amp;rsquo;t seen much since to contradict it. I&amp;rsquo;ve seen a lot of startups die because they were too slow to release stuff, and none because they were too quick. [1]One of the things that will surprise you if you build something popular is that you won&amp;rsquo;t know your users. Reddit now has almost half a million unique visitors a month. Who are all those people? They have no idea. No web startup does. And since you don&amp;rsquo;t know your users, it&amp;rsquo;s dangerous to guess what they&amp;rsquo;ll like. Better to release something and let them tell you.Wufoo took this to heart and released their form-builder before the underlying database. You can&amp;rsquo;t even drive the thing yet, but 83,000 people came to sit in the driver&amp;rsquo;s seat and hold the steering wheel. And Wufoo got valuable feedback from it: Linux users complained they used too much Flash, so they rewrote their software not to. If they&amp;rsquo;d waited to release everything at once, they wouldn&amp;rsquo;t have discovered this problem till it was more deeply wired in.Even if you had no users, it would still be important to release quickly, because for a startup the initial release acts as a shakedown cruise. If anything major is broken&amp;ndash; if the idea&amp;rsquo;s no good, for example, or the founders hate one another&amp;ndash; the stress of getting that first version out will expose it. And if you have such problems you want to find them early.Perhaps the most important reason to release early, though, is that it makes you work harder. When you&amp;rsquo;re working on something that isn&amp;rsquo;t released, problems are intriguing. In something that&amp;rsquo;s out there, problems are alarming. There is a lot more urgency once you release. And I think that&amp;rsquo;s precisely why people put it off. They know they&amp;rsquo;ll have to work a lot harder once they do. [2] 2. Keep Pumping Out Features.Of course, &amp;ldquo;release early&amp;rdquo; has a second component, without which it would be bad advice. If you&amp;rsquo;re going to start with something that doesn&amp;rsquo;t do much, you better improve it fast.What I find myself repeating is &amp;ldquo;pump out features.&amp;rdquo; And this rule isn&amp;rsquo;t just for the initial stages. This is something all startups should do for as long as they want to be considered startups.I don&amp;rsquo;t mean, of course, that you should make your application ever more complex. By &amp;ldquo;feature&amp;rdquo; I mean one unit of hacking&amp;ndash; one quantum of making users&amp;rsquo; lives better.As with exercise, improvements beget improvements. If you run every day, you&amp;rsquo;ll probably feel like running tomorrow. But if you skip running for a couple weeks, it will be an effort to drag yourself out. So it is with hacking: the more ideas you implement, the more ideas you&amp;rsquo;ll have. You should make your system better at least in some small way every day or two.This is not just a good way to get development done; it is also a form of marketing. Users love a site that&amp;rsquo;s constantly improving. In fact, users expect a site to improve. Imagine if you visited a site that seemed very good, and then returned two months later and not one thing had changed. Wouldn&amp;rsquo;t it start to seem lame? [3]They&amp;rsquo;ll like you even better when you improve in response to their comments, because customers are used to companies ignoring them. If you&amp;rsquo;re the rare exception&amp;ndash; a company that actually listens&amp;ndash; you&amp;rsquo;ll generate fanatical loyalty. You won&amp;rsquo;t need to advertise, because your users will do it for you.This seems obvious too, so why do I have to keep repeating it? I think the problem here is that people get used to how things are. Once a product gets past the stage where it has glaring flaws, you start to get used to it, and gradually whatever features it happens to have become its identity. For example, I doubt many people at Yahoo (or Google for that matter) realized how much better web mail could be till Paul Buchheit showed them.I think the solution is to assume that anything you&amp;rsquo;ve made is far short of what it could be. Force yourself, as a sort of intellectual exercise, to keep thinking of improvements. Ok, sure, what you have is perfect. But if you had to change something, what would it be?If your product seems finished, there are two possible explanations: (a) it is finished, or (b) you lack imagination. Experience suggests (b) is a thousand times more likely. 3. Make Users Happy.Improving constantly is an instance of a more general rule: make users happy. One thing all startups have in common is that they can&amp;rsquo;t force anyone to do anything. They can&amp;rsquo;t force anyone to use their software, and they can&amp;rsquo;t force anyone to do deals with them. A startup has to sing for its supper. That&amp;rsquo;s why the successful ones make great things. They have to, or die.When you&amp;rsquo;re running a startup you feel like a little bit of debris blown about by powerful winds. The most powerful wind is users. They can either catch you and loft you up into the sky, as they did with Google, or leave you flat on the pavement, as they do with most startups. Users are a fickle wind, but more powerful than any other. If they take you up, no competitor can keep you down.As a little piece of debris, the rational thing for you to do is not to lie flat, but to curl yourself into a shape the wind will catch.I like the wind metaphor because it reminds you how impersonal the stream of traffic is. The vast majority of people who visit your site will be casual visitors. It&amp;rsquo;s them you have to design your site for. The people who really care will find what they want by themselves.The median visitor will arrive with their finger poised on the Back button. Think about your own experience: most links you follow lead to something lame. Anyone who has used the web for more than a couple weeks has been trained to click on Back after following a link. So your site has to say &amp;ldquo;Wait! Don&amp;rsquo;t click on Back. This site isn&amp;rsquo;t lame. Look at this, for example.&amp;ldquo;There are two things you have to do to make people pause. The most important is to explain, as concisely as possible, what the hell your site is about. How often have you visited a site that seemed to assume you already knew what they did? For example, the corporate site that says the company makes enterprise content management solutions for business that enable organizations to unify people, content and processes to minimize business risk, accelerate time-to-value and sustain lower total cost of ownership. An established company may get away with such an opaque description, but no startup can. A startup should be able to explain in one or two sentences exactly what it does. [4] And not just to users. You need this for everyone: investors, acquirers, partners, reporters, potential employees, and even current employees. You probably shouldn&amp;rsquo;t even start a company to do something that can&amp;rsquo;t be described compellingly in one or two sentences.The other thing I repeat is to give people everything you&amp;rsquo;ve got, right away. If you have something impressive, try to put it on the front page, because that&amp;rsquo;s the only one most visitors will see. Though indeed there&amp;rsquo;s a paradox here: the more you push the good stuff toward the front, the more likely visitors are to explore further. [5]In the best case these two suggestions get combined: you tell visitors what your site is about by showing them. One of the standard pieces of advice in fiction writing is &amp;ldquo;show, don&amp;rsquo;t tell.&amp;rdquo; Don&amp;rsquo;t say that a character&amp;rsquo;s angry; have him grind his teeth, or break his pencil in half. Nothing will explain what your site does so well as using it.The industry term here is &amp;ldquo;conversion.&amp;rdquo; The job of your site is to convert casual visitors into users&amp;ndash; whatever your definition of a user is. You can measure this in your growth rate. Either your site is catching on, or it isn&amp;rsquo;t, and you must know which. If you have decent growth, you&amp;rsquo;ll win in the end, no matter how obscure you are now. And if you don&amp;rsquo;t, you need to fix something. 4. Fear the Right Things.Another thing I find myself saying a lot is &amp;ldquo;don&amp;rsquo;t worry.&amp;rdquo; Actually, it&amp;rsquo;s more often &amp;ldquo;don&amp;rsquo;t worry about this; worry about that instead.&amp;rdquo; Startups are right to be paranoid, but they sometimes fear the wrong things.Most visible disasters are not so alarming as they seem. Disasters are normal in a startup: a founder quits, you discover a patent that covers what you&amp;rsquo;re doing, your servers keep crashing, you run into an insoluble technical problem, you have to change your name, a deal falls through&amp;ndash; these are all par for the course. They won&amp;rsquo;t kill you unless you let them.Nor will most competitors. A lot of startups worry &amp;ldquo;what if Google builds something like us?&amp;rdquo; Actually big companies are not the ones you have to worry about&amp;ndash; not even Google. The people at Google are smart, but no smarter than you; they&amp;rsquo;re not as motivated, because Google is not going to go out of business if this one product fails; and even at Google they have a lot of bureaucracy to slow them down.What you should fear, as a startup, is not the established players, but other startups you don&amp;rsquo;t know exist yet. They&amp;rsquo;re way more dangerous than Google because, like you, they&amp;rsquo;re cornered animals.Looking just at existing competitors can give you a false sense of security. You should compete against what someone else could be doing, not just what you can see people doing. A corollary is that you shouldn&amp;rsquo;t relax just because you have no visible competitors yet. No matter what your idea, there&amp;rsquo;s someone else out there working on the same thing.That&amp;rsquo;s the downside of it being easier to start a startup: more people are doing it. But I disagree with Caterina Fake when she says that makes this a bad time to start a startup. More people are starting startups, but not as many more as could. Most college graduates still think they have to get a job. The average person can&amp;rsquo;t ignore something that&amp;rsquo;s been beaten into their head since they were three just because serving web pages recently got a lot cheaper.And in any case, competitors are not the biggest threat. Way more startups hose themselves than get crushed by competitors. There are a lot of ways to do it, but the three main ones are internal disputes, inertia, and ignoring users. Each is, by itself, enough to kill you. But if I had to pick the worst, it would be ignoring users. If you want a recipe for a startup that&amp;rsquo;s going to die, here it is: a couple of founders who have some great idea they know everyone is going to love, and that&amp;rsquo;s what they&amp;rsquo;re going to build, no matter what.Almost everyone&amp;rsquo;s initial plan is broken. If companies stuck to their initial plans, Microsoft would be selling programming languages, and Apple would be selling printed circuit boards. In both cases their customers told them what their business should be&amp;ndash; and they were smart enough to listen.As Richard Feynman said, the imagination of nature is greater than the imagination of man. You&amp;rsquo;ll find more interesting things by looking at the world than you could ever produce just by thinking. This principle is very powerful. It&amp;rsquo;s why the best abstract painting still falls short of Leonardo, for example. And it applies to startups too. No idea for a product could ever be so clever as the ones you can discover by smashing a beam of prototypes into a beam of users. 5. Commitment Is a Self-Fulfilling Prophecy.I now have enough experience with startups to be able to say what the most important quality is in a startup founder, and it&amp;rsquo;s not what you might think. The most important quality in a startup founder is determination. Not intelligence&amp;ndash; determination.This is a little depressing. I&amp;rsquo;d like to believe Viaweb succeeded because we were smart, not merely determined. A lot of people in the startup world want to believe that. Not just founders, but investors too. They like the idea of inhabiting a world ruled by intelligence. And you can tell they really believe this, because it affects their investment decisions.Time after time VCs invest in startups founded by eminent professors. This may work in biotech, where a lot of startups simply commercialize existing research, but in software you want to invest in students, not professors. Microsoft, Yahoo, and Google were all founded by people who dropped out of school to do it. What students lack in experience they more than make up in dedication.Of course, if you want to get rich, it&amp;rsquo;s not enough merely to be determined. You have to be smart too, right? I&amp;rsquo;d like to think so, but I&amp;rsquo;ve had an experience that convinced me otherwise: I spent several years living in New York.You can lose quite a lot in the brains department and it won&amp;rsquo;t kill you. But lose even a little bit in the commitment department, and that will kill you very rapidly.Running a startup is like walking on your hands: it&amp;rsquo;s possible, but it requires extraordinary effort. If an ordinary employee were asked to do the things a startup founder has to, he&amp;rsquo;d be very indignant. Imagine if you were hired at some big company, and in addition to writing software ten times faster than you&amp;rsquo;d ever had to before, they expected you to answer support calls, administer the servers, design the web site, cold-call customers, find the company office space, and go out and get everyone lunch.And to do all this not in the calm, womb-like atmosphere of a big company, but against a backdrop of constant disasters. That&amp;rsquo;s the part that really demands determination. In a startup, there&amp;rsquo;s always some disaster happening. So if you&amp;rsquo;re the least bit inclined to find an excuse to quit, there&amp;rsquo;s always one right there.But if you lack commitment, chances are it will have been hurting you long before you actually quit. Everyone who deals with startups knows how important commitment is, so if they sense you&amp;rsquo;re ambivalent, they won&amp;rsquo;t give you much attention. If you lack commitment, you&amp;rsquo;ll just find that for some mysterious reason good things happen to your competitors but not to you. If you lack commitment, it will seem to you that you&amp;rsquo;re unlucky.Whereas if you&amp;rsquo;re determined to stick around, people will pay attention to you, because odds are they&amp;rsquo;ll have to deal with you later. You&amp;rsquo;re a local, not just a tourist, so everyone has to come to terms with you.At Y Combinator we sometimes mistakenly fund teams who have the attitude that they&amp;rsquo;re going to give this startup thing a shot for three months, and if something great happens, they&amp;rsquo;ll stick with it&amp;ndash; &amp;ldquo;something great&amp;rdquo; meaning either that someone wants to buy them or invest millions of dollars in them. But if this is your attitude, &amp;ldquo;something great&amp;rdquo; is very unlikely to happen to you, because both acquirers and investors judge you by your level of commitment.If an acquirer thinks you&amp;rsquo;re going to stick around no matter what, they&amp;rsquo;ll be more likely to buy you, because if they don&amp;rsquo;t and you stick around, you&amp;rsquo;ll probably grow, your price will go up, and they&amp;rsquo;ll be left wishing they&amp;rsquo;d bought you earlier. Ditto for investors. What really motivates investors, even big VCs, is not the hope of good returns, but the fear of missing out. [6] So if you make it clear you&amp;rsquo;re going to succeed no matter what, and the only reason you need them is to make it happen a little faster, you&amp;rsquo;re much more likely to get money.You can&amp;rsquo;t fake this. The only way to convince everyone that you&amp;rsquo;re ready to fight to the death is actually to be ready to.You have to be the right kind of determined, though. I carefully chose the word determined rather than stubborn, because stubbornness is a disastrous quality in a startup. You have to be determined, but flexible, like a running back. A successful running back doesn&amp;rsquo;t just put his head down and try to run through people. He improvises: if someone appears in front of him, he runs around them; if someone tries to grab him, he spins out of their grip; he&amp;rsquo;ll even run in the wrong direction briefly if that will help. The one thing he&amp;rsquo;ll never do is stand still. [7] 6. There Is Always Room.I was talking recently to a startup founder about whether it might be good to add a social component to their software. He said he didn&amp;rsquo;t think so, because the whole social thing was tapped out. Really? So in a hundred years the only social networking sites will be the Facebook, MySpace, Flickr, and Del.icio.us? Not likely.There is always room for new stuff. At every point in history, even the darkest bits of the dark ages, people were discovering things that made everyone say &amp;ldquo;why didn&amp;rsquo;t anyone think of that before?&amp;rdquo; We know this continued to be true up till 2004, when the Facebook was founded&amp;ndash; though strictly speaking someone else did think of that.The reason we don&amp;rsquo;t see the opportunities all around us is that we adjust to however things are, and assume that&amp;rsquo;s how things have to be. For example, it would seem crazy to most people to try to make a better search engine than Google. Surely that field, at least, is tapped out. Really? In a hundred years&amp;ndash; or even twenty&amp;ndash; are people still going to search for information using something like the current Google? Even Google probably doesn&amp;rsquo;t think that.In particular, I don&amp;rsquo;t think there&amp;rsquo;s any limit to the number of startups. Sometimes you hear people saying &amp;ldquo;All these guys starting startups now are going to be disappointed. How many little startups are Google and Yahoo going to buy, after all?&amp;rdquo; That sounds cleverly skeptical, but I can prove it&amp;rsquo;s mistaken. No one proposes that there&amp;rsquo;s some limit to the number of people who can be employed in an economy consisting of big, slow-moving companies with a couple thousand people each. Why should there be any limit to the number who could be employed by small, fast-moving companies with ten each? It seems to me the only limit would be the number of people who want to work that hard.The limit on the number of startups is not the number that can get acquired by Google and Yahoo&amp;ndash; though it seems even that should be unlimited, if the startups were actually worth buying&amp;ndash; but the amount of wealth that can be created. And I don&amp;rsquo;t think there&amp;rsquo;s any limit on that, except cosmological ones.So for all practical purposes, there is no limit to the number of startups. Startups make wealth, which means they make things people want, and if there&amp;rsquo;s a limit on the number of things people want, we are nowhere near it. I still don&amp;rsquo;t even have a flying car. 7. Don&amp;rsquo;t Get Your Hopes Up.This is another one I&amp;rsquo;ve been repeating since long before Y Combinator. It was practically the corporate motto at Viaweb.Startup founders are naturally optimistic. They wouldn&amp;rsquo;t do it otherwise. But you should treat your optimism the way you&amp;rsquo;d treat the core of a nuclear reactor: as a source of power that&amp;rsquo;s also very dangerous. You have to build a shield around it, or it will fry you.The shielding of a reactor is not uniform; the reactor would be useless if it were. It&amp;rsquo;s pierced in a few places to let pipes in. An optimism shield has to be pierced too. I think the place to draw the line is between what you expect of yourself, and what you expect of other people. It&amp;rsquo;s ok to be optimistic about what you can do, but assume the worst about machines and other people.This is particularly necessary in a startup, because you tend to be pushing the limits of whatever you&amp;rsquo;re doing. So things don&amp;rsquo;t happen in the smooth, predictable way they do in the rest of the world. Things change suddenly, and usually for the worse.Shielding your optimism is nowhere more important than with deals. If your startup is doing a deal, just assume it&amp;rsquo;s not going to happen. The VCs who say they&amp;rsquo;re going to invest in you aren&amp;rsquo;t. The company that says they&amp;rsquo;re going to buy you isn&amp;rsquo;t. The big customer who wants to use your system in their whole company won&amp;rsquo;t. Then if things work out you can be pleasantly surprised.The reason I warn startups not to get their hopes up is not to save them from being disappointed when things fall through. It&amp;rsquo;s for a more practical reason: to prevent them from leaning their company against something that&amp;rsquo;s going to fall over, taking them with it.For example, if someone says they want to invest in you, there&amp;rsquo;s a natural tendency to stop looking for other investors. That&amp;rsquo;s why people proposing deals seem so positive: they want you to stop looking. And you want to stop too, because doing deals is a pain. Raising money, in particular, is a huge time sink. So you have to consciously force yourself to keep looking.Even if you ultimately do the first deal, it will be to your advantage to have kept looking, because you&amp;rsquo;ll get better terms. Deals are dynamic; unless you&amp;rsquo;re negotiating with someone unusually honest, there&amp;rsquo;s not a single point where you shake hands and the deal&amp;rsquo;s done. There are usually a lot of subsidiary questions to be cleared up after the handshake, and if the other side senses weakness&amp;ndash; if they sense you need this deal&amp;ndash; they will be very tempted to screw you in the details.VCs and corp dev guys are professional negotiators. They&amp;rsquo;re trained to take advantage of weakness. [8] So while they&amp;rsquo;re often nice guys, they just can&amp;rsquo;t help it. And as pros they do this more than you. So don&amp;rsquo;t even try to bluff them. The only way a startup can have any leverage in a deal is genuinely not to need it. And if you don&amp;rsquo;t believe in a deal, you&amp;rsquo;ll be less likely to depend on it.So I want to plant a hypnotic suggestion in your heads: when you hear someone say the words &amp;ldquo;we want to invest in you&amp;rdquo; or &amp;ldquo;we want to acquire you,&amp;rdquo; I want the following phrase to appear automatically in your head: don&amp;rsquo;t get your hopes up. Just continue running your company as if this deal didn&amp;rsquo;t exist. Nothing is more likely to make it close.The way to succeed in a startup is to focus on the goal of getting lots of users, and keep walking swiftly toward it while investors and acquirers scurry alongside trying to wave money in your face. Speed, not MoneyThe way I&amp;rsquo;ve described it, starting a startup sounds pretty stressful. It is. When I talk to the founders of the companies we&amp;rsquo;ve funded, they all say the same thing: I knew it would be hard, but I didn&amp;rsquo;t realize it would be this hard.So why do it? It would be worth enduring a lot of pain and stress to do something grand or heroic, but just to make money? Is making money really that important?No, not really. It seems ridiculous to me when people take business too seriously. I regard making money as a boring errand to be got out of the way as soon as possible. There is nothing grand or heroic about starting a startup per se.So why do I spend so much time thinking about startups? I&amp;rsquo;ll tell you why. Economically, a startup is best seen not as a way to get rich, but as a way to work faster. You have to make a living, and a startup is a way to get that done quickly, instead of letting it drag on through your whole life. [9]We take it for granted most of the time, but human life is fairly miraculous. It is also palpably short. You&amp;rsquo;re given this marvellous thing, and then poof, it&amp;rsquo;s taken away. You can see why people invent gods to explain it. But even to people who don&amp;rsquo;t believe in gods, life commands respect. There are times in most of our lives when the days go by in a blur, and almost everyone has a sense, when this happens, of wasting something precious. As Ben Franklin said, if you love life, don&amp;rsquo;t waste time, because time is what life is made of.So no, there&amp;rsquo;s nothing particularly grand about making money. That&amp;rsquo;s not what makes startups worth the trouble. What&amp;rsquo;s important about startups is the speed. By compressing the dull but necessary task of making a living into the smallest possible time, you show respect for life, and there is something grand about that.Notes[1] Startups can die from releasing something full of bugs, and not fixing them fast enough, but I don&amp;rsquo;t know of any that died from releasing something stable but minimal very early, then promptly improving it.[2] I know this is why I haven&amp;rsquo;t released Arc. The moment I do, I&amp;rsquo;ll have people nagging me for features.[3] A web site is different from a book or movie or desktop application in this respect. Users judge a site not as a single snapshot, but as an animation with multiple frames. Of the two, I&amp;rsquo;d say the rate of improvement is more important to users than where you currently are.[4] It should not always tell this to users, however. For example, MySpace is basically a replacement mall for mallrats. But it was wiser for them, initially, to pretend that the site was about bands.[5] Similarly, don&amp;rsquo;t make users register to try your site. Maybe what you have is so valuable that visitors should gladly register to get at it. But they&amp;rsquo;ve been trained to expect the opposite. Most of the things they&amp;rsquo;ve tried on the web have sucked&amp;ndash; and probably especially those that made them register.[6] VCs have rational reasons for behaving this way. They don&amp;rsquo;t make their money (if they make money) off their median investments. In a typical fund, half the companies fail, most of the rest generate mediocre returns, and one or two &amp;ldquo;make the fund&amp;rdquo; by succeeding spectacularly. So if they miss just a few of the most promising opportunities, it could hose the whole fund.[7] The attitude of a running back doesn&amp;rsquo;t translate to soccer. Though it looks great when a forward dribbles past multiple defenders, a player who persists in trying such things will do worse in the long term than one who passes.[8] The reason Y Combinator never negotiates valuations is that we&amp;rsquo;re not professional negotiators, and don&amp;rsquo;t want to turn into them.[9] There are two ways to do work you love: (a) to make money, then work on what you love, or (b) to get a job where you get paid to work on stuff you love. In practice the first phases of both consist mostly of unedifying schleps, and in (b) the second phase is less secure.Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica Livingston, and Robert Morris for reading drafts of this.Romanian TranslationRussian TranslationFrench TranslationJapanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/startupmistakes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/startupmistakes/</guid>
      <description>&lt;h1 id=&#34;startupmistakes&#34;&gt;Startupmistakes&lt;/h1&gt;&#xA;&lt;p&gt;The 18 Mistakes That Kill Startups Want to start a startup? Get funded by Y Combinator. October 2006In the Q &amp;amp; A period after a recent talk, someone asked what made startups fail. After standing there gaping for a few seconds I realized this was kind of a trick question. It&amp;rsquo;s equivalent to asking how to make a startup succeed — if you avoid every cause of failure, you succeed — and that&amp;rsquo;s too big a question to answer on the fly.Afterwards I realized it could be helpful to look at the problem from this direction. If you have a list of all the things you shouldn&amp;rsquo;t do, you can turn that into a recipe for succeeding just by negating. And this form of list may be more useful in practice. It&amp;rsquo;s easier to catch yourself doing something you shouldn&amp;rsquo;t than always to remember to do something you should. [1]In a sense there&amp;rsquo;s just one mistake that kills startups: not making something users want. If you make something users want, you&amp;rsquo;ll probably be fine, whatever else you do or don&amp;rsquo;t do. And if you don&amp;rsquo;t make something users want, then you&amp;rsquo;re dead, whatever else you do or don&amp;rsquo;t do. So really this is a list of 18 things that cause startups not to make something users want. Nearly all failure funnels through that.1. Single FounderHave you ever noticed how few successful startups were founded by just one person? Even companies you think of as having one founder, like Oracle, usually turn out to have more. It seems unlikely this is a coincidence.What&amp;rsquo;s wrong with having one founder? To start with, it&amp;rsquo;s a vote of no confidence. It probably means the founder couldn&amp;rsquo;t talk any of his friends into starting the company with him. That&amp;rsquo;s pretty alarming, because his friends are the ones who know him best.But even if the founder&amp;rsquo;s friends were all wrong and the company is a good bet, he&amp;rsquo;s still at a disadvantage. Starting a startup is too hard for one person. Even if you could do all the work yourself, you need colleagues to brainstorm with, to talk you out of stupid decisions, and to cheer you up when things go wrong.The last one might be the most important. The low points in a startup are so low that few could bear them alone. When you have multiple founders, esprit de corps binds them together in a way that seems to violate conservation laws. Each thinks &amp;ldquo;I can&amp;rsquo;t let my friends down.&amp;rdquo; This is one of the most powerful forces in human nature, and it&amp;rsquo;s missing when there&amp;rsquo;s just one founder.2. Bad LocationStartups prosper in some places and not others. Silicon Valley dominates, then Boston, then Seattle, Austin, Denver, and New York. After that there&amp;rsquo;s not much. Even in New York the number of startups per capita is probably a 20th of what it is in Silicon Valley. In towns like Houston and Chicago and Detroit it&amp;rsquo;s too small to measure.Why is the falloff so sharp? Probably for the same reason it is in other industries. What&amp;rsquo;s the sixth largest fashion center in the US? The sixth largest center for oil, or finance, or publishing? Whatever they are they&amp;rsquo;re probably so far from the top that it would be misleading even to call them centers.It&amp;rsquo;s an interesting question why cities become startup hubs, but the reason startups prosper in them is probably the same as it is for any industry: that&amp;rsquo;s where the experts are. Standards are higher; people are more sympathetic to what you&amp;rsquo;re doing; the kind of people you want to hire want to live there; supporting industries are there; the people you run into in chance meetings are in the same business. Who knows exactly how these factors combine to boost startups in Silicon Valley and squish them in Detroit, but it&amp;rsquo;s clear they do from the number of startups per capita in each.3. Marginal NicheMost of the groups that apply to Y Combinator suffer from a common problem: choosing a small, obscure niche in the hope of avoiding competition.If you watch little kids playing sports, you notice that below a certain age they&amp;rsquo;re afraid of the ball. When the ball comes near them their instinct is to avoid it. I didn&amp;rsquo;t make a lot of catches as an eight year old outfielder, because whenever a fly ball came my way, I used to close my eyes and hold my glove up more for protection than in the hope of catching it.Choosing a marginal project is the startup equivalent of my eight year old strategy for dealing with fly balls. If you make anything good, you&amp;rsquo;re going to have competitors, so you may as well face that. You can only avoid competition by avoiding good ideas.I think this shrinking from big problems is mostly unconscious. It&amp;rsquo;s not that people think of grand ideas but decide to pursue smaller ones because they seem safer. Your unconscious won&amp;rsquo;t even let you think of grand ideas. So the solution may be to think about ideas without involving yourself. What would be a great idea for someone else to do as a startup?4. Derivative IdeaMany of the applications we get are imitations of some existing company. That&amp;rsquo;s one source of ideas, but not the best. If you look at the origins of successful startups, few were started in imitation of some other startup. Where did they get their ideas? Usually from some specific, unsolved problem the founders identified.Our startup made software for making online stores. When we started it, there wasn&amp;rsquo;t any; the few sites you could order from were hand-made at great expense by web consultants. We knew that if online shopping ever took off, these sites would have to be generated by software, so we wrote some. Pretty straightforward.It seems like the best problems to solve are ones that affect you personally. Apple happened because Steve Wozniak wanted a computer, Google because Larry and Sergey couldn&amp;rsquo;t find stuff online, Hotmail because Sabeer Bhatia and Jack Smith couldn&amp;rsquo;t exchange email at work.So instead of copying the Facebook, with some variation that the Facebook rightly ignored, look for ideas from the other direction. Instead of starting from companies and working back to the problems they solved, look for problems and imagine the company that might solve them. [2] What do people complain about? What do you wish there was?5. ObstinacyIn some fields the way to succeed is to have a vision of what you want to achieve, and to hold true to it no matter what setbacks you encounter. Starting startups is not one of them. The stick-to-your-vision approach works for something like winning an Olympic gold medal, where the problem is well-defined. Startups are more like science, where you need to follow the trail wherever it leads.So don&amp;rsquo;t get too attached to your original plan, because it&amp;rsquo;s probably wrong. Most successful startups end up doing something different than they originally intended — often so different that it doesn&amp;rsquo;t even seem like the same company. You have to be prepared to see the better idea when it arrives. And the hardest part of that is often discarding your old idea.But openness to new ideas has to be tuned just right. Switching to a new idea every week will be equally fatal. Is there some kind of external test you can use? One is to ask whether the ideas represent some kind of progression. If in each new idea you&amp;rsquo;re able to re-use most of what you built for the previous ones, then you&amp;rsquo;re probably in a process that converges. Whereas if you keep restarting from scratch, that&amp;rsquo;s a bad sign.Fortunately there&amp;rsquo;s someone you can ask for advice: your users. If you&amp;rsquo;re thinking about turning in some new direction and your users seem excited about it, it&amp;rsquo;s probably a good bet.6. Hiring Bad ProgrammersI forgot to include this in the early versions of the list, because nearly all the founders I know are programmers. This is not a serious problem for them. They might accidentally hire someone bad, but it&amp;rsquo;s not going to kill the company. In a pinch they can do whatever&amp;rsquo;s required themselves.But when I think about what killed most of the startups in the e-commerce business back in the 90s, it was bad programmers. A lot of those companies were started by business guys who thought the way startups worked was that you had some clever idea and then hired programmers to implement it. That&amp;rsquo;s actually much harder than it sounds — almost impossibly hard in fact — because business guys can&amp;rsquo;t tell which are the good programmers. They don&amp;rsquo;t even get a shot at the best ones, because no one really good wants a job implementing the vision of a business guy.In practice what happens is that the business guys choose people they think are good programmers (it says here on his resume that he&amp;rsquo;s a Microsoft Certified Developer) but who aren&amp;rsquo;t. Then they&amp;rsquo;re mystified to find that their startup lumbers along like a World War II bomber while their competitors scream past like jet fighters. This kind of startup is in the same position as a big company, but without the advantages.So how do you pick good programmers if you&amp;rsquo;re not a programmer? I don&amp;rsquo;t think there&amp;rsquo;s an answer. I was about to say you&amp;rsquo;d have to find a good programmer to help you hire people. But if you can&amp;rsquo;t recognize good programmers, how would you even do that?7. Choosing the Wrong PlatformA related problem (since it tends to be done by bad programmers) is choosing the wrong platform. For example, I think a lot of startups during the Bubble killed themselves by deciding to build server-based applications on Windows. Hotmail was still running on FreeBSD for years after Microsoft bought it, presumably because Windows couldn&amp;rsquo;t handle the load. If Hotmail&amp;rsquo;s founders had chosen to use Windows, they would have been swamped.PayPal only just dodged this bullet. After they merged with X.com, the new CEO wanted to switch to Windows — even after PayPal cofounder Max Levchin showed that their software scaled only 1% as well on Windows as Unix. Fortunately for PayPal they switched CEOs instead.Platform is a vague word. It could mean an operating system, or a programming language, or a &amp;ldquo;framework&amp;rdquo; built on top of a programming language. It implies something that both supports and limits, like the foundation of a house.The scary thing about platforms is that there are always some that seem to outsiders to be fine, responsible choices and yet, like Windows in the 90s, will destroy you if you choose them. Java applets were probably the most spectacular example. This was supposed to be the new way of delivering applications. Presumably it killed just about 100% of the startups who believed that.How do you pick the right platforms? The usual way is to hire good programmers and let them choose. But there is a trick you could use if you&amp;rsquo;re not a programmer: visit a top computer science department and see what they use in research projects.8. Slowness in LaunchingCompanies of all sizes have a hard time getting software done. It&amp;rsquo;s intrinsic to the medium; software is always 85% done. It takes an effort of will to push through this and get something released to users. [3]Startups make all kinds of excuses for delaying their launch. Most are equivalent to the ones people use for procrastinating in everyday life. There&amp;rsquo;s something that needs to happen first. Maybe. But if the software were 100% finished and ready to launch at the push of a button, would they still be waiting?One reason to launch quickly is that it forces you to actually finish some quantum of work. Nothing is truly finished till it&amp;rsquo;s released; you can see that from the rush of work that&amp;rsquo;s always involved in releasing anything, no matter how finished you thought it was. The other reason you need to launch is that it&amp;rsquo;s only by bouncing your idea off users that you fully understand it.Several distinct problems manifest themselves as delays in launching: working too slowly; not truly understanding the problem; fear of having to deal with users; fear of being judged; working on too many different things; excessive perfectionism. Fortunately you can combat all of them by the simple expedient of forcing yourself to launch something fairly quickly.9. Launching Too EarlyLaunching too slowly has probably killed a hundred times more startups than launching too fast, but it is possible to launch too fast. The danger here is that you ruin your reputation. You launch something, the early adopters try it out, and if it&amp;rsquo;s no good they may never come back.So what&amp;rsquo;s the minimum you need to launch? We suggest startups think about what they plan to do, identify a core that&amp;rsquo;s both (a) useful on its own and (b) something that can be incrementally expanded into the whole project, and then get that done as soon as possible.This is the same approach I (and many other programmers) use for writing software. Think about the overall goal, then start by writing the smallest subset of it that does anything useful. If it&amp;rsquo;s a subset, you&amp;rsquo;ll have to write it anyway, so in the worst case you won&amp;rsquo;t be wasting your time. But more likely you&amp;rsquo;ll find that implementing a working subset is both good for morale and helps you see more clearly what the rest should do.The early adopters you need to impress are fairly tolerant. They don&amp;rsquo;t expect a newly launched product to do everything; it just has to do something.10. Having No Specific User in MindYou can&amp;rsquo;t build things users like without understanding them. I mentioned earlier that the most successful startups seem to have begun by trying to solve a problem their founders had. Perhaps there&amp;rsquo;s a rule here: perhaps you create wealth in proportion to how well you understand the problem you&amp;rsquo;re solving, and the problems you understand best are your own. [4]That&amp;rsquo;s just a theory. What&amp;rsquo;s not a theory is the converse: if you&amp;rsquo;re trying to solve problems you don&amp;rsquo;t understand, you&amp;rsquo;re hosed.And yet a surprising number of founders seem willing to assume that someone, they&amp;rsquo;re not sure exactly who, will want what they&amp;rsquo;re building. Do the founders want it? No, they&amp;rsquo;re not the target market. Who is? Teenagers. People interested in local events (that one is a perennial tarpit). Or &amp;ldquo;business&amp;rdquo; users. What business users? Gas stations? Movie studios? Defense contractors?You can of course build something for users other than yourself. We did. But you should realize you&amp;rsquo;re stepping into dangerous territory. You&amp;rsquo;re flying on instruments, in effect, so you should (a) consciously shift gears, instead of assuming you can rely on your intuitions as you ordinarily would, and (b) look at the instruments.In this case the instruments are the users. When designing for other people you have to be empirical. You can no longer guess what will work; you have to find users and measure their responses. So if you&amp;rsquo;re going to make something for teenagers or &amp;ldquo;business&amp;rdquo; users or some other group that doesn&amp;rsquo;t include you, you have to be able to talk some specific ones into using what you&amp;rsquo;re making. If you can&amp;rsquo;t, you&amp;rsquo;re on the wrong track.11. Raising Too Little MoneyMost successful startups take funding at some point. Like having more than one founder, it seems a good bet statistically. How much should you take, though?Startup funding is measured in time. Every startup that isn&amp;rsquo;t profitable (meaning nearly all of them, initially) has a certain amount of time left before the money runs out and they have to stop. This is sometimes referred to as runway, as in &amp;ldquo;How much runway do you have left?&amp;rdquo; It&amp;rsquo;s a good metaphor because it reminds you that when the money runs out you&amp;rsquo;re going to be airborne or dead.Too little money means not enough to get airborne. What airborne means depends on the situation. Usually you have to advance to a visibly higher level: if all you have is an idea, a working prototype; if you have a prototype, launching; if you&amp;rsquo;re launched, significant growth. It depends on investors, because until you&amp;rsquo;re profitable that&amp;rsquo;s who you have to convince.So if you take money from investors, you have to take enough to get to the next step, whatever that is. [5] Fortunately you have some control over both how much you spend and what the next step is. We advise startups to set both low, initially: spend practically nothing, and make your initial goal simply to build a solid prototype. This gives you maximum flexibility.12. Spending Too MuchIt&amp;rsquo;s hard to distinguish spending too much from raising too little. If you run out of money, you could say either was the cause. The only way to decide which to call it is by comparison with other startups. If you raised five million and ran out of money, you probably spent too much.Burning through too much money is not as common as it used to be. Founders seem to have learned that lesson. Plus it keeps getting cheaper to start a startup. So as of this writing few startups spend too much. None of the ones we&amp;rsquo;ve funded have. (And not just because we make small investments; many have gone on to raise further rounds.)The classic way to burn through cash is by hiring a lot of people. This bites you twice: in addition to increasing your costs, it slows you down—so money that&amp;rsquo;s getting consumed faster has to last longer. Most hackers understand why that happens; Fred Brooks explained it in The Mythical Man-Month.We have three general suggestions about hiring: (a) don&amp;rsquo;t do it if you can avoid it, (b) pay people with equity rather than salary, not just to save money, but because you want the kind of people who are committed enough to prefer that, and (c) only hire people who are either going to write code or go out and get users, because those are the only things you need at first.13. Raising Too Much MoneyIt&amp;rsquo;s obvious how too little money could kill you, but is there such a thing as having too much?Yes and no. The problem is not so much the money itself as what comes with it. As one VC who spoke at Y Combinator said, &amp;ldquo;Once you take several million dollars of my money, the clock is ticking.&amp;rdquo; If VCs fund you, they&amp;rsquo;re not going to let you just put the money in the bank and keep operating as two guys living on ramen. They want that money to go to work. [6] At the very least you&amp;rsquo;ll move into proper office space and hire more people. That will change the atmosphere, and not entirely for the better. Now most of your people will be employees rather than founders. They won&amp;rsquo;t be as committed; they&amp;rsquo;ll need to be told what to do; they&amp;rsquo;ll start to engage in office politics.When you raise a lot of money, your company moves to the suburbs and has kids.Perhaps more dangerously, once you take a lot of money it gets harder to change direction. Suppose your initial plan was to sell something to companies. After taking VC money you hire a sales force to do that. What happens now if you realize you should be making this for consumers instead of businesses? That&amp;rsquo;s a completely different kind of selling. What happens, in practice, is that you don&amp;rsquo;t realize that. The more people you have, the more you stay pointed in the same direction.Another drawback of large investments is the time they take. The time required to raise money grows with the amount. [7] When the amount rises into the millions, investors get very cautious. VCs never quite say yes or no; they just engage you in an apparently endless conversation. Raising VC scale investments is thus a huge time sink — more work, probably, than the startup itself. And you don&amp;rsquo;t want to be spending all your time talking to investors while your competitors are spending theirs building things.We advise founders who go on to seek VC money to take the first reasonable deal they get. If you get an offer from a reputable firm at a reasonable valuation with no unusually onerous terms, just take it and get on with building the company. [8] Who cares if you could get a 30% better deal elsewhere? Economically, startups are an all-or-nothing game. Bargain-hunting among investors is a waste of time.14. Poor Investor ManagementAs a founder, you have to manage your investors. You shouldn&amp;rsquo;t ignore them, because they may have useful insights. But neither should you let them run the company. That&amp;rsquo;s supposed to be your job. If investors had sufficient vision to run the companies they fund, why didn&amp;rsquo;t they start them?Pissing off investors by ignoring them is probably less dangerous than caving in to them. In our startup, we erred on the ignoring side. A lot of our energy got drained away in disputes with investors instead of going into the product. But this was less costly than giving in, which would probably have destroyed the company. If the founders know what they&amp;rsquo;re doing, it&amp;rsquo;s better to have half their attention focused on the product than the full attention of investors who don&amp;rsquo;t.How hard you have to work on managing investors usually depends on how much money you&amp;rsquo;ve taken. When you raise VC-scale money, the investors get a great deal of control. If they have a board majority, they&amp;rsquo;re literally your bosses. In the more common case, where founders and investors are equally represented and the deciding vote is cast by neutral outside directors, all the investors have to do is convince the outside directors and they control the company.If things go well, this shouldn&amp;rsquo;t matter. So long as you seem to be advancing rapidly, most investors will leave you alone. But things don&amp;rsquo;t always go smoothly in startups. Investors have made trouble even for the most successful companies. One of the most famous examples is Apple, whose board made a nearly fatal blunder in firing Steve Jobs. Apparently even Google got a lot of grief from their investors early on.15. Sacrificing Users to (Supposed) ProfitWhen I said at the beginning that if you make something users want, you&amp;rsquo;ll be fine, you may have noticed I didn&amp;rsquo;t mention anything about having the right business model. That&amp;rsquo;s not because making money is unimportant. I&amp;rsquo;m not suggesting that founders start companies with no chance of making money in the hope of unloading them before they tank. The reason we tell founders not to worry about the business model initially is that making something people want is so much harder.I don&amp;rsquo;t know why it&amp;rsquo;s so hard to make something people want. It seems like it should be straightforward. But you can tell it must be hard by how few startups do it.Because making something people want is so much harder than making money from it, you should leave business models for later, just as you&amp;rsquo;d leave some trivial but messy feature for version 2. In version 1, solve the core problem. And the core problem in a startup is how to create wealth (= how much people want something x the number who want it), not how to convert that wealth into money.The companies that win are the ones that put users first. Google, for example. They made search work, then worried about how to make money from it. And yet some startup founders still think it&amp;rsquo;s irresponsible not to focus on the business model from the beginning. They&amp;rsquo;re often encouraged in this by investors whose experience comes from less malleable industries.It is irresponsible not to think about business models. It&amp;rsquo;s just ten times more irresponsible not to think about the product.16. Not Wanting to Get Your Hands DirtyNearly all programmers would rather spend their time writing code and have someone else handle the messy business of extracting money from it. And not just the lazy ones. Larry and Sergey apparently felt this way too at first. After developing their new search algorithm, the first thing they tried was to get some other company to buy it.Start a company? Yech. Most hackers would rather just have ideas. But as Larry and Sergey found, there&amp;rsquo;s not much of a market for ideas. No one trusts an idea till you embody it in a product and use that to grow a user base. Then they&amp;rsquo;ll pay big time.Maybe this will change, but I doubt it will change much. There&amp;rsquo;s nothing like users for convincing acquirers. It&amp;rsquo;s not just that the risk is decreased. The acquirers are human, and they have a hard time paying a bunch of young guys millions of dollars just for being clever. When the idea is embodied in a company with a lot of users, they can tell themselves they&amp;rsquo;re buying the users rather than the cleverness, and this is easier for them to swallow. [9]If you&amp;rsquo;re going to attract users, you&amp;rsquo;ll probably have to get up from your computer and go find some. It&amp;rsquo;s unpleasant work, but if you can make yourself do it you have a much greater chance of succeeding. In the first batch of startups we funded, in the summer of 2005, most of the founders spent all their time building their applications. But there was one who was away half the time talking to executives at cell phone companies, trying to arrange deals. Can you imagine anything more painful for a hacker? [10] But it paid off, because this startup seems the most successful of that group by an order of magnitude.If you want to start a startup, you have to face the fact that you can&amp;rsquo;t just hack. At least one hacker will have to spend some of the time doing business stuff.17. Fights Between FoundersFights between founders are surprisingly common. About 20% of the startups we&amp;rsquo;ve funded have had a founder leave. It happens so often that we&amp;rsquo;ve reversed our attitude to vesting. We still don&amp;rsquo;t require it, but now we advise founders to vest so there will be an orderly way for people to quit.A founder leaving doesn&amp;rsquo;t necessarily kill a startup, though. Plenty of successful startups have had that happen. [11] Fortunately it&amp;rsquo;s usually the least committed founder who leaves. If there are three founders and one who was lukewarm leaves, big deal. If you have two and one leaves, or a guy with critical technical skills leaves, that&amp;rsquo;s more of a problem. But even that is survivable. Blogger got down to one person, and they bounced back.Most of the disputes I&amp;rsquo;ve seen between founders could have been avoided if they&amp;rsquo;d been more careful about who they started a company with. Most disputes are not due to the situation but the people. Which means they&amp;rsquo;re inevitable. And most founders who&amp;rsquo;ve been burned by such disputes probably had misgivings, which they suppressed, when they started the company. Don&amp;rsquo;t suppress misgivings. It&amp;rsquo;s much easier to fix problems before the company is started than after. So don&amp;rsquo;t include your housemate in your startup because he&amp;rsquo;d feel left out otherwise. Don&amp;rsquo;t start a company with someone you dislike because they have some skill you need and you worry you won&amp;rsquo;t find anyone else. The people are the most important ingredient in a startup, so don&amp;rsquo;t compromise there.18. A Half-Hearted EffortThe failed startups you hear most about are the spectacular flameouts. Those are actually the elite of failures. The most common type is not the one that makes spectacular mistakes, but the one that doesn&amp;rsquo;t do much of anything — the one we never even hear about, because it was some project a couple guys started on the side while working on their day jobs, but which never got anywhere and was gradually abandoned.Statistically, if you want to avoid failure, it would seem like the most important thing is to quit your day job. Most founders of failed startups don&amp;rsquo;t quit their day jobs, and most founders of successful ones do. If startup failure were a disease, the CDC would be issuing bulletins warning people to avoid day jobs.Does that mean you should quit your day job? Not necessarily. I&amp;rsquo;m guessing here, but I&amp;rsquo;d guess that many of these would-be founders may not have the kind of determination it takes to start a company, and that in the back of their minds, they know it. The reason they don&amp;rsquo;t invest more time in their startup is that they know it&amp;rsquo;s a bad investment. [12]I&amp;rsquo;d also guess there&amp;rsquo;s some band of people who could have succeeded if they&amp;rsquo;d taken the leap and done it full-time, but didn&amp;rsquo;t. I have no idea how wide this band is, but if the winner/borderline/hopeless progression has the sort of distribution you&amp;rsquo;d expect, the number of people who could have made it, if they&amp;rsquo;d quit their day job, is probably an order of magnitude larger than the number who do make it. [13]If that&amp;rsquo;s true, most startups that could succeed fail because the founders don&amp;rsquo;t devote their whole efforts to them. That certainly accords with what I see out in the world. Most startups fail because they don&amp;rsquo;t make something people want, and the reason most don&amp;rsquo;t is that they don&amp;rsquo;t try hard enough.In other words, starting startups is just like everything else. The biggest mistake you can make is not to try hard enough. To the extent there&amp;rsquo;s a secret to success, it&amp;rsquo;s not to be in denial about that. Notes[1] This is not a complete list of the causes of failure, just those you can control. There are also several you can&amp;rsquo;t, notably ineptitude and bad luck.[2] Ironically, one variant of the Facebook that might work is a facebook exclusively for college students.[3] Steve Jobs tried to motivate people by saying &amp;ldquo;Real artists ship.&amp;rdquo; This is a fine sentence, but unfortunately not true. Many famous works of art are unfinished. It&amp;rsquo;s true in fields that have hard deadlines, like architecture and filmmaking, but even there people tend to be tweaking stuff till it&amp;rsquo;s yanked out of their hands.[4] There&amp;rsquo;s probably also a second factor: startup founders tend to be at the leading edge of technology, so problems they face are probably especially valuable.[5] You should take more than you think you&amp;rsquo;ll need, maybe 50% to 100% more, because software takes longer to write and deals longer to close than you expect.[6] Since people sometimes call us VCs, I should add that we&amp;rsquo;re not. VCs invest large amounts of other people&amp;rsquo;s money. We invest small amounts of our own, like angel investors.[7] Not linearly of course, or it would take forever to raise five million dollars. In practice it just feels like it takes forever.Though if you include the cases where VCs don&amp;rsquo;t invest, it would literally take forever in the median case. And maybe we should, because the danger of chasing large investments is not just that they take a long time. That&amp;rsquo;s the best case. The real danger is that you&amp;rsquo;ll expend a lot of time and get nothing.[8] Some VCs will offer you an artificially low valuation to see if you have the balls to ask for more. It&amp;rsquo;s lame that VCs play such games, but some do. If you&amp;rsquo;re dealing with one of those you should push back on the valuation a bit.[9] Suppose YouTube&amp;rsquo;s founders had gone to Google in 2005 and told them &amp;ldquo;Google Video is badly designed. Give us $10 million and we&amp;rsquo;ll tell you all the mistakes you made.&amp;rdquo; They would have gotten the royal raspberry. Eighteen months later Google paid $1.6 billion for the same lesson, partly because they could then tell themselves that they were buying a phenomenon, or a community, or some vague thing like that.I don&amp;rsquo;t mean to be hard on Google. They did better than their competitors, who may have now missed the video boat entirely.[10] Yes, actually: dealing with the government. But phone companies are up there.[11] Many more than most people realize, because companies don&amp;rsquo;t advertise this. Did you know Apple originally had three founders?[12] I&amp;rsquo;m not dissing these people. I don&amp;rsquo;t have the determination myself. I&amp;rsquo;ve twice come close to starting startups since Viaweb, and both times I bailed because I realized that without the spur of poverty I just wasn&amp;rsquo;t willing to endure the stress of a startup.[13] So how do you know whether you&amp;rsquo;re in the category of people who should quit their day job, or the presumably larger one who shouldn&amp;rsquo;t? I got to the point of saying that this was hard to judge for yourself and that you should seek outside advice, before realizing that that&amp;rsquo;s what we do. We think of ourselves as investors, but viewed from the other direction Y Combinator is a service for advising people whether or not to quit their day job. We could be mistaken, and no doubt often are, but we do at least bet money on our conclusions.Thanks to Sam Altman, Jessica Livingston, Greg McAdoo, and Robert Morris for reading drafts of this. Japanese TranslationSpanish TranslationRomanian TranslationChinese TranslationArabic Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/stuff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/stuff/</guid>
      <description>&lt;h1 id=&#34;stuff&#34;&gt;Stuff&lt;/h1&gt;&#xA;&lt;p&gt;Stuff July 2007I have too much stuff. Most people in America do. In fact, the poorer people are, the more stuff they seem to have. Hardly anyone is so poor that they can&amp;rsquo;t afford a front yard full of old cars.It wasn&amp;rsquo;t always this way. Stuff used to be rare and valuable. You can still see evidence of that if you look for it. For example, in my house in Cambridge, which was built in 1876, the bedrooms don&amp;rsquo;t have closets. In those days people&amp;rsquo;s stuff fit in a chest of drawers. Even as recently as a few decades ago there was a lot less stuff. When I look back at photos from the 1970s, I&amp;rsquo;m surprised how empty houses look. As a kid I had what I thought was a huge fleet of toy cars, but they&amp;rsquo;d be dwarfed by the number of toys my nephews have. All together my Matchboxes and Corgis took up about a third of the surface of my bed. In my nephews&amp;rsquo; rooms the bed is the only clear space.Stuff has gotten a lot cheaper, but our attitudes toward it haven&amp;rsquo;t changed correspondingly. We overvalue stuff.That was a big problem for me when I had no money. I felt poor, and stuff seemed valuable, so almost instinctively I accumulated it. Friends would leave something behind when they moved, or I&amp;rsquo;d see something as I was walking down the street on trash night (beware of anything you find yourself describing as &amp;ldquo;perfectly good&amp;rdquo;), or I&amp;rsquo;d find something in almost new condition for a tenth its retail price at a garage sale. And pow, more stuff.In fact these free or nearly free things weren&amp;rsquo;t bargains, because they were worth even less than they cost. Most of the stuff I accumulated was worthless, because I didn&amp;rsquo;t need it.What I didn&amp;rsquo;t understand was that the value of some new acquisition wasn&amp;rsquo;t the difference between its retail price and what I paid for it. It was the value I derived from it. Stuff is an extremely illiquid asset. Unless you have some plan for selling that valuable thing you got so cheaply, what difference does it make what it&amp;rsquo;s &amp;ldquo;worth?&amp;rdquo; The only way you&amp;rsquo;re ever going to extract any value from it is to use it. And if you don&amp;rsquo;t have any immediate use for it, you probably never will.Companies that sell stuff have spent huge sums training us to think stuff is still valuable. But it would be closer to the truth to treat stuff as worthless.In fact, worse than worthless, because once you&amp;rsquo;ve accumulated a certain amount of stuff, it starts to own you rather than the other way around. I know of one couple who couldn&amp;rsquo;t retire to the town they preferred because they couldn&amp;rsquo;t afford a place there big enough for all their stuff. Their house isn&amp;rsquo;t theirs; it&amp;rsquo;s their stuff&amp;rsquo;s.And unless you&amp;rsquo;re extremely organized, a house full of stuff can be very depressing. A cluttered room saps one&amp;rsquo;s spirits. One reason, obviously, is that there&amp;rsquo;s less room for people in a room full of stuff. But there&amp;rsquo;s more going on than that. I think humans constantly scan their environment to build a mental model of what&amp;rsquo;s around them. And the harder a scene is to parse, the less energy you have left for conscious thoughts. A cluttered room is literally exhausting.(This could explain why clutter doesn&amp;rsquo;t seem to bother kids as much as adults. Kids are less perceptive. They build a coarser model of their surroundings, and this consumes less energy.)I first realized the worthlessness of stuff when I lived in Italy for a year. All I took with me was one large backpack of stuff. The rest of my stuff I left in my landlady&amp;rsquo;s attic back in the US. And you know what? All I missed were some of the books. By the end of the year I couldn&amp;rsquo;t even remember what else I had stored in that attic.And yet when I got back I didn&amp;rsquo;t discard so much as a box of it. Throw away a perfectly good rotary telephone? I might need that one day.The really painful thing to recall is not just that I accumulated all this useless stuff, but that I often spent money I desperately needed on stuff that I didn&amp;rsquo;t.Why would I do that? Because the people whose job is to sell you stuff are really, really good at it. The average 25 year old is no match for companies that have spent years figuring out how to get you to spend money on stuff. They make the experience of buying stuff so pleasant that &amp;ldquo;shopping&amp;rdquo; becomes a leisure activity.How do you protect yourself from these people? It can&amp;rsquo;t be easy. I&amp;rsquo;m a fairly skeptical person, and their tricks worked on me well into my thirties. But one thing that might work is to ask yourself, before buying something, &amp;ldquo;is this going to make my life noticeably better?&amp;ldquo;A friend of mine cured herself of a clothes buying habit by asking herself before she bought anything &amp;ldquo;Am I going to wear this all the time?&amp;rdquo; If she couldn&amp;rsquo;t convince herself that something she was thinking of buying would become one of those few things she wore all the time, she wouldn&amp;rsquo;t buy it. I think that would work for any kind of purchase. Before you buy anything, ask yourself: will this be something I use constantly? Or is it just something nice? Or worse still, a mere bargain?The worst stuff in this respect may be stuff you don&amp;rsquo;t use much because it&amp;rsquo;s too good. Nothing owns you like fragile stuff. For example, the &amp;ldquo;good china&amp;rdquo; so many households have, and whose defining quality is not so much that it&amp;rsquo;s fun to use, but that one must be especially careful not to break it.Another way to resist acquiring stuff is to think of the overall cost of owning it. The purchase price is just the beginning. You&amp;rsquo;re going to have to think about that thing for years—perhaps for the rest of your life. Every thing you own takes energy away from you. Some give more than they take. Those are the only things worth having.I&amp;rsquo;ve now stopped accumulating stuff. Except books—but books are different. Books are more like a fluid than individual objects. It&amp;rsquo;s not especially inconvenient to own several thousand books, whereas if you owned several thousand random possessions you&amp;rsquo;d be a local celebrity. But except for books, I now actively avoid stuff. If I want to spend money on some kind of treat, I&amp;rsquo;ll take services over goods any day.I&amp;rsquo;m not claiming this is because I&amp;rsquo;ve achieved some kind of zenlike detachment from material things. I&amp;rsquo;m talking about something more mundane. A historical change has taken place, and I&amp;rsquo;ve now realized it. Stuff used to be valuable, and now it&amp;rsquo;s not.In industrialized countries the same thing happened with food in the middle of the twentieth century. As food got cheaper (or we got richer; they&amp;rsquo;re indistinguishable), eating too much started to be a bigger danger than eating too little. We&amp;rsquo;ve now reached that point with stuff. For most people, rich or poor, stuff has become a burden.The good news is, if you&amp;rsquo;re carrying a burden without knowing it, your life could be better than you realize. Imagine walking around for years with five pound ankle weights, then suddenly having them removed. Spanish TranslationRussian TranslationItalian TranslationPolish TranslationTurkish TranslationFrench TranslationSlovak TranslationRomanian TranslationGerman Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/submarine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/submarine/</guid>
      <description>&lt;h1 id=&#34;submarine&#34;&gt;Submarine&lt;/h1&gt;&#xA;&lt;p&gt;The Submarine April 2005&amp;quot;Suits make a corporate comeback,&amp;quot; says the New York Times. Why does this sound familiar? Maybe because the suit was also back in February, September 2004, June 2004, March 2004, September 2003, November 2002, April 2002, and February 2002. Why do the media keep running stories saying suits are back? Because PR firms tell them to. One of the most surprising things I discovered during my brief business career was the existence of the PR industry, lurking like a huge, quiet submarine beneath the news. Of the stories you read in traditional media that aren&amp;rsquo;t about politics, crimes, or disasters, more than half probably come from PR firms.I know because I spent years hunting such &amp;ldquo;press hits.&amp;rdquo; Our startup spent its entire marketing budget on PR: at a time when we were assembling our own computers to save money, we were paying a PR firm $16,000 a month. And they were worth it. PR is the news equivalent of search engine optimization; instead of buying ads, which readers ignore, you get yourself inserted directly into the stories. [1]Our PR firm was one of the best in the business. In 18 months, they got press hits in over 60 different publications. And we weren&amp;rsquo;t the only ones they did great things for. In 1997 I got a call from another startup founder considering hiring them to promote his company. I told him they were PR gods, worth every penny of their outrageous fees. But I remember thinking his company&amp;rsquo;s name was odd. Why call an auction site &amp;ldquo;eBay&amp;rdquo;? SymbiosisPR is not dishonest. Not quite. In fact, the reason the best PR firms are so effective is precisely that they aren&amp;rsquo;t dishonest. They give reporters genuinely valuable information. A good PR firm won&amp;rsquo;t bug reporters just because the client tells them to; they&amp;rsquo;ve worked hard to build their credibility with reporters, and they don&amp;rsquo;t want to destroy it by feeding them mere propaganda.If anyone is dishonest, it&amp;rsquo;s the reporters. The main reason PR firms exist is that reporters are lazy. Or, to put it more nicely, overworked. Really they ought to be out there digging up stories for themselves. But it&amp;rsquo;s so tempting to sit in their offices and let PR firms bring the stories to them. After all, they know good PR firms won&amp;rsquo;t lie to them.A good flatterer doesn&amp;rsquo;t lie, but tells his victim selective truths (what a nice color your eyes are). Good PR firms use the same strategy: they give reporters stories that are true, but whose truth favors their clients.For example, our PR firm often pitched stories about how the Web let small merchants compete with big ones. This was perfectly true. But the reason reporters ended up writing stories about this particular truth, rather than some other one, was that small merchants were our target market, and we were paying the piper.Different publications vary greatly in their reliance on PR firms. At the bottom of the heap are the trade press, who make most of their money from advertising and would give the magazines away for free if advertisers would let them. [2] The average trade publication is a bunch of ads, glued together by just enough articles to make it look like a magazine. They&amp;rsquo;re so desperate for &amp;ldquo;content&amp;rdquo; that some will print your press releases almost verbatim, if you take the trouble to write them to read like articles.At the other extreme are publications like the New York Times and the Wall Street Journal. Their reporters do go out and find their own stories, at least some of the time. They&amp;rsquo;ll listen to PR firms, but briefly and skeptically. We managed to get press hits in almost every publication we wanted, but we never managed to crack the print edition of the Times. [3]The weak point of the top reporters is not laziness, but vanity. You don&amp;rsquo;t pitch stories to them. You have to approach them as if you were a specimen under their all-seeing microscope, and make it seem as if the story you want them to run is something they thought of themselves.Our greatest PR coup was a two-part one. We estimated, based on some fairly informal math, that there were about 5000 stores on the Web. We got one paper to print this number, which seemed neutral enough. But once this &amp;ldquo;fact&amp;rdquo; was out there in print, we could quote it to other publications, and claim that with 1000 users we had 20% of the online store market.This was roughly true. We really did have the biggest share of the online store market, and 5000 was our best guess at its size. But the way the story appeared in the press sounded a lot more definite.Reporters like definitive statements. For example, many of the stories about Jeremy Jaynes&amp;rsquo;s conviction say that he was one of the 10 worst spammers. This &amp;ldquo;fact&amp;rdquo; originated in Spamhaus&amp;rsquo;s ROKSO list, which I think even Spamhaus would admit is a rough guess at the top spammers. The first stories about Jaynes cited this source, but now it&amp;rsquo;s simply repeated as if it were part of the indictment. [4]All you can say with certainty about Jaynes is that he was a fairly big spammer. But reporters don&amp;rsquo;t want to print vague stuff like &amp;ldquo;fairly big.&amp;rdquo; They want statements with punch, like &amp;ldquo;top ten.&amp;rdquo; And PR firms give them what they want. Wearing suits, we&amp;rsquo;re told, will make us 3.6 percent more productive.BuzzWhere the work of PR firms really does get deliberately misleading is in the generation of &amp;ldquo;buzz.&amp;rdquo; They usually feed the same story to several different publications at once. And when readers see similar stories in multiple places, they think there is some important trend afoot. Which is exactly what they&amp;rsquo;re supposed to think.When Windows 95 was launched, people waited outside stores at midnight to buy the first copies. None of them would have been there without PR firms, who generated such a buzz in the news media that it became self-reinforcing, like a nuclear chain reaction.I doubt PR firms realize it yet, but the Web makes it possible to track them at work. If you search for the obvious phrases, you turn up several efforts over the years to place stories about the return of the suit. For example, the Reuters article that got picked up by USA Today in September 2004. &amp;ldquo;The suit is back,&amp;rdquo; it begins.Trend articles like this are almost always the work of PR firms. Once you know how to read them, it&amp;rsquo;s straightforward to figure out who the client is. With trend stories, PR firms usually line up one or more &amp;ldquo;experts&amp;rdquo; to talk about the industry generally. In this case we get three: the NPD Group, the creative director of GQ, and a research director at Smith Barney. [5] When you get to the end of the experts, look for the client. And bingo, there it is: The Men&amp;rsquo;s Wearhouse.Not surprising, considering The Men&amp;rsquo;s Wearhouse was at that moment running ads saying &amp;ldquo;The Suit is Back.&amp;rdquo; Talk about a successful press hit&amp;ndash; a wire service article whose first sentence is your own ad copy.The secret to finding other press hits from a given pitch is to realize that they all started from the same document back at the PR firm. Search for a few key phrases and the names of the clients and the experts, and you&amp;rsquo;ll turn up other variants of this story.Casual fridays are out and dress codes are in writes Diane E. Lewis in The Boston Globe. In a remarkable coincidence, Ms. Lewis&amp;rsquo;s industry contacts also include the creative director of GQ.Ripped jeans and T-shirts are out, writes Mary Kathleen Flynn in US News &amp;amp; World Report. And she too knows the creative director of GQ.Men&amp;rsquo;s suits are back writes Nicole Ford in Sexbuzz.Com (&amp;ldquo;the ultimate men&amp;rsquo;s entertainment magazine&amp;rdquo;).Dressing down loses appeal as men suit up at the office writes Tenisha Mercer of The Detroit News. Now that so many news articles are online, I suspect you could find a similar pattern for most trend stories placed by PR firms. I propose we call this new sport &amp;ldquo;PR diving,&amp;rdquo; and I&amp;rsquo;m sure there are far more striking examples out there than this clump of five stories.OnlineAfter spending years chasing them, it&amp;rsquo;s now second nature to me to recognize press hits for what they are. But before we hired a PR firm I had no idea where articles in the mainstream media came from. I could tell a lot of them were crap, but I didn&amp;rsquo;t realize why.Remember the exercises in critical reading you did in school, where you had to look at a piece of writing and step back and ask whether the author was telling the whole truth? If you really want to be a critical reader, it turns out you have to step back one step further, and ask not just whether the author is telling the truth, but why he&amp;rsquo;s writing about this subject at all.Online, the answer tends to be a lot simpler. Most people who publish online write what they write for the simple reason that they want to. You can&amp;rsquo;t see the fingerprints of PR firms all over the articles, as you can in so many print publications&amp;ndash; which is one of the reasons, though they may not consciously realize it, that readers trust bloggers more than Business Week.I was talking recently to a friend who works for a big newspaper. He thought the print media were in serious trouble, and that they were still mostly in denial about it. &amp;ldquo;They think the decline is cyclic,&amp;rdquo; he said. &amp;ldquo;Actually it&amp;rsquo;s structural.&amp;ldquo;In other words, the readers are leaving, and they&amp;rsquo;re not coming back. Why? I think the main reason is that the writing online is more honest. Imagine how incongruous the New York Times article about suits would sound if you read it in a blog: The urge to look corporate&amp;ndash; sleek, commanding, prudent, yet with just a touch of hubris on your well-cut sleeve&amp;ndash; is an unexpected development in a time of business disgrace. The problem with this article is not just that it originated in a PR firm. The whole tone is bogus. This is the tone of someone writing down to their audience.Whatever its flaws, the writing you find online is authentic. It&amp;rsquo;s not mystery meat cooked up out of scraps of pitch letters and press releases, and pressed into molds of zippy journalese. It&amp;rsquo;s people writing what they think.I didn&amp;rsquo;t realize, till there was an alternative, just how artificial most of the writing in the mainstream media was. I&amp;rsquo;m not saying I used to believe what I read in Time and Newsweek. Since high school, at least, I&amp;rsquo;ve thought of magazines like that more as guides to what ordinary people were being told to think than as sources of information. But I didn&amp;rsquo;t realize till the last few years that writing for publication didn&amp;rsquo;t have to mean writing that way. I didn&amp;rsquo;t realize you could write as candidly and informally as you would if you were writing to a friend.Readers aren&amp;rsquo;t the only ones who&amp;rsquo;ve noticed the change. The PR industry has too. A hilarious article on the site of the PR Society of America gets to the heart of the matter: Bloggers are sensitive about becoming mouthpieces for other organizations and companies, which is the reason they began blogging in the first place. PR people fear bloggers for the same reason readers like them. And that means there may be a struggle ahead. As this new kind of writing draws readers away from traditional media, we should be prepared for whatever PR mutates into to compensate. When I think how hard PR firms work to score press hits in the traditional media, I can&amp;rsquo;t imagine they&amp;rsquo;ll work any less hard to feed stories to bloggers, if they can figure out how. Notes[1] PR has at least one beneficial feature: it favors small companies. If PR didn&amp;rsquo;t work, the only alternative would be to advertise, and only big companies can afford that.[2] Advertisers pay less for ads in free publications, because they assume readers ignore something they get for free. This is why so many trade publications nominally have a cover price and yet give away free subscriptions with such abandon.[3] Different sections of the Times vary so much in their standards that they&amp;rsquo;re practically different papers. Whoever fed the style section reporter this story about suits coming back would have been sent packing by the regular news reporters.[4] The most striking example I know of this type is the &amp;ldquo;fact&amp;rdquo; that the Internet worm of 1988 infected 6000 computers. I was there when it was cooked up, and this was the recipe: someone guessed that there were about 60,000 computers attached to the Internet, and that the worm might have infected ten percent of them.Actually no one knows how many computers the worm infected, because the remedy was to reboot them, and this destroyed all traces. But people like numbers. And so this one is now replicated all over the Internet, like a little worm of its own.[5] Not all were necessarily supplied by the PR firm. Reporters sometimes call a few additional sources on their own, like someone adding a few fresh vegetables to a can of soup. Thanks to Ingrid Basset, Trevor Blackwell, Sarah Harlin, Jessica Livingston, Jackie McDonough, Robert Morris, and Aaron Swartz (who also found the PRSA article) for reading drafts of this.Correction: Earlier versions used a recent Business Week article mentioning del.icio.us as an example of a press hit, but Joshua Schachter tells me it was spontaneous.The Web is a Writing EnvironmentA Sell-Out&amp;rsquo;s TaleHow to Pitch BloggersBlogging for Milk7 Habits of Highly Effective Blog PRPR People Need To Learn To Deal With New GatekeepersMarqui Blogosphere ProgramPR WatchReal Men ExfoliateHow the News is MadeJanuary 2006: The suit is back yet againThe Decline of the TieJapanese Translation If you liked this, you may also like Hackers &amp;amp; Painters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/sun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/sun/</guid>
      <description>&lt;h1 id=&#34;sun&#34;&gt;Sun&lt;/h1&gt;&#xA;&lt;p&gt;General and Surprising September 2017The most valuable insights are both general and surprising. F = ma for example. But general and surprising is a hard combination to achieve. That territory tends to be picked clean, precisely because those insights are so valuable.Ordinarily, the best that people can do is one without the other: either surprising without being general (e.g. gossip), or general without being surprising (e.g. platitudes).Where things get interesting is the moderately valuable insights. You get those from small additions of whichever quality was missing. The more common case is a small addition of generality: a piece of gossip that&amp;rsquo;s more than just gossip, because it teaches something interesting about the world. But another less common approach is to focus on the most general ideas and see if you can find something new to say about them. Because these start out so general, you only need a small delta of novelty to produce a useful insight.A small delta of novelty is all you&amp;rsquo;ll be able to get most of the time. Which means if you take this route, your ideas will seem a lot like ones that already exist. Sometimes you&amp;rsquo;ll find you&amp;rsquo;ve merely rediscovered an idea that did already exist. But don&amp;rsquo;t be discouraged. Remember the huge multiplier that kicks in when you do manage to think of something even a little new.Corollary: the more general the ideas you&amp;rsquo;re talking about, the less you should worry about repeating yourself. If you write enough, it&amp;rsquo;s inevitable you will. Your brain is much the same from year to year and so are the stimuli that hit it. I feel slightly bad when I find I&amp;rsquo;ve said something close to what I&amp;rsquo;ve said before, as if I were plagiarizing myself. But rationally one shouldn&amp;rsquo;t. You won&amp;rsquo;t say something exactly the same way the second time, and that variation increases the chance you&amp;rsquo;ll get that tiny but critical delta of novelty.And of course, ideas beget ideas. (That sounds familiar.) An idea with a small amount of novelty could lead to one with more. But only if you keep going. So it&amp;rsquo;s doubly important not to let yourself be discouraged by people who say there&amp;rsquo;s not much new about something you&amp;rsquo;ve discovered. &amp;ldquo;Not much new&amp;rdquo; is a real achievement when you&amp;rsquo;re talking about the most general ideas. It&amp;rsquo;s not true that there&amp;rsquo;s nothing new under the sun. There are some domains where there&amp;rsquo;s almost nothing new. But there&amp;rsquo;s a big difference between nothing and almost nothing, when it&amp;rsquo;s multiplied by the area under the sun. Thanks to Sam Altman, Patrick Collison, and Jessica Livingston for reading drafts of this.Japanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/superangels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/superangels/</guid>
      <description>&lt;h1 id=&#34;superangels&#34;&gt;Superangels&lt;/h1&gt;&#xA;&lt;p&gt;The New Funding Landscape Want to start a startup? Get funded by Y Combinator. October 2010After barely changing at all for decades, the startup funding business is now in what could, at least by comparison, be called turmoil. At Y Combinator we&amp;rsquo;ve seen dramatic changes in the funding environment for startups. Fortunately one of them is much higher valuations.The trends we&amp;rsquo;ve been seeing are probably not YC-specific. I wish I could say they were, but the main cause is probably just that we see trends first—partly because the startups we fund are very plugged into the Valley and are quick to take advantage of anything new, and partly because we fund so many that we have enough data points to see patterns clearly.What we&amp;rsquo;re seeing now, everyone&amp;rsquo;s probably going to be seeing in the next couple years. So I&amp;rsquo;m going to explain what we&amp;rsquo;re seeing, and what that will mean for you if you try to raise money.Super-AngelsLet me start by describing what the world of startup funding used to look like. There used to be two sharply differentiated types of investors: angels and venture capitalists. Angels are individual rich people who invest small amounts of their own money, while VCs are employees of funds that invest large amounts of other people&amp;rsquo;s.For decades there were just those two types of investors, but now a third type has appeared halfway between them: the so-called super-angels. [1] And VCs have been provoked by their arrival into making a lot of angel-style investments themselves. So the previously sharp line between angels and VCs has become hopelessly blurred.There used to be a no man&amp;rsquo;s land between angels and VCs. Angels would invest $20k to $50k apiece, and VCs usually a million or more. So an angel round meant a collection of angel investments that combined to maybe $200k, and a VC round meant a series A round in which a single VC fund (or occasionally two) invested $1-5 million.The no man&amp;rsquo;s land between angels and VCs was a very inconvenient one for startups, because it coincided with the amount many wanted to raise. Most startups coming out of Demo Day wanted to raise around $400k. But it was a pain to stitch together that much out of angel investments, and most VCs weren&amp;rsquo;t interested in investments so small. That&amp;rsquo;s the fundamental reason the super-angels have appeared. They&amp;rsquo;re responding to the market.The arrival of a new type of investor is big news for startups, because there used to be only two and they rarely competed with one another. Super-angels compete with both angels and VCs. That&amp;rsquo;s going to change the rules about how to raise money. I don&amp;rsquo;t know yet what the new rules will be, but it looks like most of the changes will be for the better.A super-angel has some of the qualities of an angel, and some of the qualities of a VC. They&amp;rsquo;re usually individuals, like angels. In fact many of the current super-angels were initially angels of the classic type. But like VCs, they invest other people&amp;rsquo;s money. This allows them to invest larger amounts than angels: a typical super-angel investment is currently about $100k. They make investment decisions quickly, like angels. And they make a lot more investments per partner than VCs—up to 10 times as many.The fact that super-angels invest other people&amp;rsquo;s money makes them doubly alarming to VCs. They don&amp;rsquo;t just compete for startups; they also compete for investors. What super-angels really are is a new form of fast-moving, lightweight VC fund. And those of us in the technology world know what usually happens when something comes along that can be described in terms like that. Usually it&amp;rsquo;s the replacement.Will it be? As of now, few of the startups that take money from super-angels are ruling out taking VC money. They&amp;rsquo;re just postponing it. But that&amp;rsquo;s still a problem for VCs. Some of the startups that postpone raising VC money may do so well on the angel money they raise that they never bother to raise more. And those who do raise VC rounds will be able to get higher valuations when they do. If the best startups get 10x higher valuations when they raise series A rounds, that would cut VCs&amp;rsquo; returns from winners at least tenfold. [2]So I think VC funds are seriously threatened by the super-angels. But one thing that may save them to some extent is the uneven distribution of startup outcomes: practically all the returns are concentrated in a few big successes. The expected value of a startup is the percentage chance it&amp;rsquo;s Google. So to the extent that winning is a matter of absolute returns, the super-angels could win practically all the battles for individual startups and yet lose the war, if they merely failed to get those few big winners. And there&amp;rsquo;s a chance that could happen, because the top VC funds have better brands, and can also do more for their portfolio companies. [3]Because super-angels make more investments per partner, they have less partner per investment. They can&amp;rsquo;t pay as much attention to you as a VC on your board could. How much is that extra attention worth? It will vary enormously from one partner to another. There&amp;rsquo;s no consensus yet in the general case. So for now this is something startups are deciding individually.Till now, VCs&amp;rsquo; claims about how much value they added were sort of like the government&amp;rsquo;s. Maybe they made you feel better, but you had no choice in the matter, if you needed money on the scale only VCs could supply. Now that VCs have competitors, that&amp;rsquo;s going to put a market price on the help they offer. The interesting thing is, no one knows yet what it will be.Do startups that want to get really big need the sort of advice and connections only the top VCs can supply? Or would super-angel money do just as well? The VCs will say you need them, and the super-angels will say you don&amp;rsquo;t. But the truth is, no one knows yet, not even the VCs and super-angels themselves. All the super-angels know is that their new model seems promising enough to be worth trying, and all the VCs know is that it seems promising enough to worry about.RoundsWhatever the outcome, the conflict between VCs and super-angels is good news for founders. And not just for the obvious reason that more competition for deals means better terms. The whole shape of deals is changing.One of the biggest differences between angels and VCs is the amount of your company they want. VCs want a lot. In a series A round they want a third of your company, if they can get it. They don&amp;rsquo;t care much how much they pay for it, but they want a lot because the number of series A investments they can do is so small. In a traditional series A investment, at least one partner from the VC fund takes a seat on your board. [4] Since board seats last about 5 years and each partner can&amp;rsquo;t handle more than about 10 at once, that means a VC fund can only do about 2 series A deals per partner per year. And that means they need to get as much of the company as they can in each one. You&amp;rsquo;d have to be a very promising startup indeed to get a VC to use up one of his 10 board seats for only a few percent of you.Since angels generally don&amp;rsquo;t take board seats, they don&amp;rsquo;t have this constraint. They&amp;rsquo;re happy to buy only a few percent of you. And although the super-angels are in most respects mini VC funds, they&amp;rsquo;ve retained this critical property of angels. They don&amp;rsquo;t take board seats, so they don&amp;rsquo;t need a big percentage of your company.Though that means you&amp;rsquo;ll get correspondingly less attention from them, it&amp;rsquo;s good news in other respects. Founders never really liked giving up as much equity as VCs wanted. It was a lot of the company to give up in one shot. Most founders doing series A deals would prefer to take half as much money for half as much stock, and then see what valuation they could get for the second half of the stock after using the first half of the money to increase its value. But VCs never offered that option.Now startups have another alternative. Now it&amp;rsquo;s easy to raise angel rounds about half the size of series A rounds. Many of the startups we fund are taking this route, and I predict that will be true of startups in general.A typical big angel round might be $600k on a convertible note with a valuation cap of $4 million premoney. Meaning that when the note converts into stock (in a later round, or upon acquisition), the investors in that round will get .6 / 4.6, or 13% of the company. That&amp;rsquo;s a lot less than the 30 to 40% of the company you usually give up in a series A round if you do it so early. [5]But the advantage of these medium-sized rounds is not just that they cause less dilution. You also lose less control. After an angel round, the founders almost always still have control of the company, whereas after a series A round they often don&amp;rsquo;t. The traditional board structure after a series A round is two founders, two VCs, and a (supposedly) neutral fifth person. Plus series A terms usually give the investors a veto over various kinds of important decisions, including selling the company. Founders usually have a lot of de facto control after a series A, as long as things are going well. But that&amp;rsquo;s not the same as just being able to do what you want, like you could before.A third and quite significant advantage of angel rounds is that they&amp;rsquo;re less stressful to raise. Raising a traditional series A round has in the past taken weeks, if not months. When a VC firm can only do 2 deals per partner per year, they&amp;rsquo;re careful about which they do. To get a traditional series A round you have to go through a series of meetings, culminating in a full partner meeting where the firm as a whole says yes or no. That&amp;rsquo;s the really scary part for founders: not just that series A rounds take so long, but at the end of this long process the VCs might still say no. The chance of getting rejected after the full partner meeting averages about 25%. At some firms it&amp;rsquo;s over 50%.Fortunately for founders, VCs have been getting a lot faster. Nowadays Valley VCs are more likely to take 2 weeks than 2 months. But they&amp;rsquo;re still not as fast as angels and super-angels, the most decisive of whom sometimes decide in hours.Raising an angel round is not only quicker, but you get feedback as it progresses. An angel round is not an all or nothing thing like a series A. It&amp;rsquo;s composed of multiple investors with varying degrees of seriousness, ranging from the upstanding ones who commit unequivocally to the jerks who give you lines like &amp;ldquo;come back to me to fill out the round.&amp;rdquo; You usually start collecting money from the most committed investors and work your way out toward the ambivalent ones, whose interest increases as the round fills up.But at each point you know how you&amp;rsquo;re doing. If investors turn cold you may have to raise less, but when investors in an angel round turn cold the process at least degrades gracefully, instead of blowing up in your face and leaving you with nothing, as happens if you get rejected by a VC fund after a full partner meeting. Whereas if investors seem hot, you can not only close the round faster, but now that convertible notes are becoming the norm, actually raise the price to reflect demand.ValuationHowever, the VCs have a weapon they can use against the super-angels, and they have started to use it. VCs have started making angel-sized investments too. The term &amp;ldquo;angel round&amp;rdquo; doesn&amp;rsquo;t mean that all the investors in it are angels; it just describes the structure of the round. Increasingly the participants include VCs making investments of a hundred thousand or two. And when VCs invest in angel rounds they can do things that super-angels don&amp;rsquo;t like. VCs are quite valuation-insensitive in angel rounds—partly because they are in general, and partly because they don&amp;rsquo;t care that much about the returns on angel rounds, which they still view mostly as a way to recruit startups for series A rounds later. So VCs who invest in angel rounds can blow up the valuations for angels and super-angels who invest in them. [6]Some super-angels seem to care about valuations. Several turned down YC-funded startups after Demo Day because their valuations were too high. This was not a problem for the startups; by definition a high valuation means enough investors were willing to accept it. But it was mysterious to me that the super-angels would quibble about valuations. Did they not understand that the big returns come from a few big successes, and that it therefore mattered far more which startups you picked than how much you paid for them?After thinking about it for a while and observing certain other signs, I have a theory that explains why the super-angels may be smarter than they seem. It would make sense for super-angels to want low valuations if they&amp;rsquo;re hoping to invest in startups that get bought early. If you&amp;rsquo;re hoping to hit the next Google, you shouldn&amp;rsquo;t care if the valuation is 20 million. But if you&amp;rsquo;re looking for companies that are going to get bought for 30 million, you care. If you invest at 20 and the company gets bought for 30, you only get 1.5x. You might as well buy Apple.So if some of the super-angels were looking for companies that could get acquired quickly, that would explain why they&amp;rsquo;d care about valuations. But why would they be looking for those? Because depending on the meaning of &amp;ldquo;quickly,&amp;rdquo; it could actually be very profitable. A company that gets acquired for 30 million is a failure to a VC, but it could be a 10x return for an angel, and moreover, a quick 10x return. Rate of return is what matters in investing—not the multiple you get, but the multiple per year. If a super-angel gets 10x in one year, that&amp;rsquo;s a higher rate of return than a VC could ever hope to get from a company that took 6 years to go public. To get the same rate of return, the VC would have to get a multiple of 10^6—one million x. Even Google didn&amp;rsquo;t come close to that.So I think at least some super-angels are looking for companies that will get bought. That&amp;rsquo;s the only rational explanation for focusing on getting the right valuations, instead of the right companies. And if so they&amp;rsquo;ll be different to deal with than VCs. They&amp;rsquo;ll be tougher on valuations, but more accommodating if you want to sell early.PrognosisWho will win, the super-angels or the VCs? I think the answer to that is, some of each. They&amp;rsquo;ll each become more like one another. The super-angels will start to invest larger amounts, and the VCs will gradually figure out ways to make more, smaller investments faster. A decade from now the players will be hard to tell apart, and there will probably be survivors from each group.What does that mean for founders? One thing it means is that the high valuations startups are presently getting may not last forever. To the extent that valuations are being driven up by price-insensitive VCs, they&amp;rsquo;ll fall again if VCs become more like super-angels and start to become more miserly about valuations. Fortunately if this does happen it will take years.The short term forecast is more competition between investors, which is good news for you. The super-angels will try to undermine the VCs by acting faster, and the VCs will try to undermine the super-angels by driving up valuations. Which for founders will result in the perfect combination: funding rounds that close fast, with high valuations.But remember that to get that combination, your startup will have to appeal to both super-angels and VCs. If you don&amp;rsquo;t seem like you have the potential to go public, you won&amp;rsquo;t be able to use VCs to drive up the valuation of an angel round.There is a danger of having VCs in an angel round: the so-called signalling risk. If VCs are only doing it in the hope of investing more later, what happens if they don&amp;rsquo;t? That&amp;rsquo;s a signal to everyone else that they think you&amp;rsquo;re lame.How much should you worry about that? The seriousness of signalling risk depends on how far along you are. If by the next time you need to raise money, you have graphs showing rising revenue or traffic month after month, you don&amp;rsquo;t have to worry about any signals your existing investors are sending. Your results will speak for themselves. [7]Whereas if the next time you need to raise money you won&amp;rsquo;t yet have concrete results, you may need to think more about the message your investors might send if they don&amp;rsquo;t invest more. I&amp;rsquo;m not sure yet how much you have to worry, because this whole phenomenon of VCs doing angel investments is so new. But my instincts tell me you don&amp;rsquo;t have to worry much. Signalling risk smells like one of those things founders worry about that&amp;rsquo;s not a real problem. As a rule, the only thing that can kill a good startup is the startup itself. Startups hurt themselves way more often than competitors hurt them, for example. I suspect signalling risk is in this category too.One thing YC-funded startups have been doing to mitigate the risk of taking money from VCs in angel rounds is not to take too much from any one VC. Maybe that will help, if you have the luxury of turning down money.Fortunately, more and more startups will. After decades of competition that could best be described as intramural, the startup funding business is finally getting some real competition. That should last several years at least, and maybe a lot longer. Unless there&amp;rsquo;s some huge market crash, the next couple years are going to be a good time for startups to raise money. And that&amp;rsquo;s exciting because it means lots more startups will happen. Notes[1] I&amp;rsquo;ve also heard them called &amp;ldquo;Mini-VCs&amp;rdquo; and &amp;ldquo;Micro-VCs.&amp;rdquo; I don&amp;rsquo;t know which name will stick.There were a couple predecessors. Ron Conway had angel funds starting in the 1990s, and in some ways First Round Capital is closer to a super-angel than a VC fund.[2] It wouldn&amp;rsquo;t cut their overall returns tenfold, because investing later would probably (a) cause them to lose less on investments that failed, and (b) not allow them to get as large a percentage of startups as they do now. So it&amp;rsquo;s hard to predict precisely what would happen to their returns.[3] The brand of an investor derives mostly from the success of their portfolio companies. The top VCs thus have a big brand advantage over the super-angels. They could make it self-perpetuating if they used it to get all the best new startups. But I don&amp;rsquo;t think they&amp;rsquo;ll be able to. To get all the best startups, you have to do more than make them want you. You also have to want them; you have to recognize them when you see them, and that&amp;rsquo;s much harder. Super-angels will snap up stars that VCs miss. And that will cause the brand gap between the top VCs and the super-angels gradually to erode.[4] Though in a traditional series A round VCs put two partners on your board, there are signs now that VCs may begin to conserve board seats by switching to what used to be considered an angel-round board, consisting of two founders and one VC. Which is also to the founders&amp;rsquo; advantage if it means they still control the company.[5] In a series A round, you usually have to give up more than the actual amount of stock the VCs buy, because they insist you dilute yourselves to set aside an &amp;ldquo;option pool&amp;rdquo; as well. I predict this practice will gradually disappear though.[6] The best thing for founders, if they can get it, is a convertible note with no valuation cap at all. In that case the money invested in the angel round just converts into stock at the valuation of the next round, no matter how large. Angels and super-angels tend not to like uncapped notes. They have no idea how much of the company they&amp;rsquo;re buying. If the company does well and the valuation of the next round is high, they may end up with only a sliver of it. So by agreeing to uncapped notes, VCs who don&amp;rsquo;t care about valuations in angel rounds can make offers that super-angels hate to match.[7] Obviously signalling risk is also not a problem if you&amp;rsquo;ll never need to raise more money. But startups are often mistaken about that.Thanks to Sam Altman, John Bautista, Patrick Collison, James Lindenbaum, Reid Hoffman, Jessica Livingston and Harj Taggar for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/superlinear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/superlinear/</guid>
      <description>&lt;h1 id=&#34;superlinear&#34;&gt;Superlinear&lt;/h1&gt;&#xA;&lt;p&gt;Superlinear Returns October 2023One of the most important things I didn&amp;rsquo;t understand about the world when I was a child is the degree to which the returns for performance are superlinear.Teachers and coaches implicitly told us the returns were linear. &amp;ldquo;You get out,&amp;rdquo; I heard a thousand times, &amp;ldquo;what you put in.&amp;rdquo; They meant well, but this is rarely true. If your product is only half as good as your competitor&amp;rsquo;s, you don&amp;rsquo;t get half as many customers. You get no customers, and you go out of business.It&amp;rsquo;s obviously true that the returns for performance are superlinear in business. Some think this is a flaw of capitalism, and that if we changed the rules it would stop being true. But superlinear returns for performance are a feature of the world, not an artifact of rules we&amp;rsquo;ve invented. We see the same pattern in fame, power, military victories, knowledge, and even benefit to humanity. In all of these, the rich get richer. [1]You can&amp;rsquo;t understand the world without understanding the concept of superlinear returns. And if you&amp;rsquo;re ambitious you definitely should, because this will be the wave you surf on.It may seem as if there are a lot of different situations with superlinear returns, but as far as I can tell they reduce to two fundamental causes: exponential growth and thresholds.The most obvious case of superlinear returns is when you&amp;rsquo;re working on something that grows exponentially. For example, growing bacterial cultures. When they grow at all, they grow exponentially. But they&amp;rsquo;re tricky to grow. Which means the difference in outcome between someone who&amp;rsquo;s adept at it and someone who&amp;rsquo;s not is very great.Startups can also grow exponentially, and we see the same pattern there. Some manage to achieve high growth rates. Most don&amp;rsquo;t. And as a result you get qualitatively different outcomes: the companies with high growth rates tend to become immensely valuable, while the ones with lower growth rates may not even survive.Y Combinator encourages founders to focus on growth rate rather than absolute numbers. It prevents them from being discouraged early on, when the absolute numbers are still low. It also helps them decide what to focus on: you can use growth rate as a compass to tell you how to evolve the company. But the main advantage is that by focusing on growth rate you tend to get something that grows exponentially.YC doesn&amp;rsquo;t explicitly tell founders that with growth rate &amp;ldquo;you get out what you put in,&amp;rdquo; but it&amp;rsquo;s not far from the truth. And if growth rate were proportional to performance, then the reward for performance p over time t would be proportional to pt.Even after decades of thinking about this, I find that sentence startling.Whenever how well you do depends on how well you&amp;rsquo;ve done, you&amp;rsquo;ll get exponential growth. But neither our DNA nor our customs prepare us for it. No one finds exponential growth natural; every child is surprised, the first time they hear it, by the story of the man who asks the king for a single grain of rice the first day and double the amount each successive day.What we don&amp;rsquo;t understand naturally we develop customs to deal with, but we don&amp;rsquo;t have many customs about exponential growth either, because there have been so few instances of it in human history. In principle herding should have been one: the more animals you had, the more offspring they&amp;rsquo;d have. But in practice grazing land was the limiting factor, and there was no plan for growing that exponentially.Or more precisely, no generally applicable plan. There was a way to grow one&amp;rsquo;s territory exponentially: by conquest. The more territory you control, the more powerful your army becomes, and the easier it is to conquer new territory. This is why history is full of empires. But so few people created or ran empires that their experiences didn&amp;rsquo;t affect customs very much. The emperor was a remote and terrifying figure, not a source of lessons one could use in one&amp;rsquo;s own life.The most common case of exponential growth in preindustrial times was probably scholarship. The more you know, the easier it is to learn new things. The result, then as now, was that some people were startlingly more knowledgeable than the rest about certain topics. But this didn&amp;rsquo;t affect customs much either. Although empires of ideas can overlap and there can thus be far more emperors, in preindustrial times this type of empire had little practical effect. [2]That has changed in the last few centuries. Now the emperors of ideas can design bombs that defeat the emperors of territory. But this phenomenon is still so new that we haven&amp;rsquo;t fully assimilated it. Few even of the participants realize they&amp;rsquo;re benefitting from exponential growth or ask what they can learn from other instances of it.The other source of superlinear returns is embodied in the expression &amp;ldquo;winner take all.&amp;rdquo; In a sports match the relationship between performance and return is a step function: the winning team gets one win whether they do much better or just slightly better. [3]The source of the step function is not competition per se, however. It&amp;rsquo;s that there are thresholds in the outcome. You don&amp;rsquo;t need competition to get those. There can be thresholds in situations where you&amp;rsquo;re the only participant, like proving a theorem or hitting a target.It&amp;rsquo;s remarkable how often a situation with one source of superlinear returns also has the other. Crossing thresholds leads to exponential growth: the winning side in a battle usually suffers less damage, which makes them more likely to win in the future. And exponential growth helps you cross thresholds: in a market with network effects, a company that grows fast enough can shut out potential competitors.Fame is an interesting example of a phenomenon that combines both sources of superlinear returns. Fame grows exponentially because existing fans bring you new ones. But the fundamental reason it&amp;rsquo;s so concentrated is thresholds: there&amp;rsquo;s only so much room on the A-list in the average person&amp;rsquo;s head.The most important case combining both sources of superlinear returns may be learning. Knowledge grows exponentially, but there are also thresholds in it. Learning to ride a bicycle, for example. Some of these thresholds are akin to machine tools: once you learn to read, you&amp;rsquo;re able to learn anything else much faster. But the most important thresholds of all are those representing new discoveries. Knowledge seems to be fractal in the sense that if you push hard at the boundary of one area of knowledge, you sometimes discover a whole new field. And if you do, you get first crack at all the new discoveries to be made in it. Newton did this, and so did Durer and Darwin. Are there general rules for finding situations with superlinear returns? The most obvious one is to seek work that compounds.There are two ways work can compound. It can compound directly, in the sense that doing well in one cycle causes you to do better in the next. That happens for example when you&amp;rsquo;re building infrastructure, or growing an audience or brand. Or work can compound by teaching you, since learning compounds. This second case is an interesting one because you may feel you&amp;rsquo;re doing badly as it&amp;rsquo;s happening. You may be failing to achieve your immediate goal. But if you&amp;rsquo;re learning a lot, then you&amp;rsquo;re getting exponential growth nonetheless.This is one reason Silicon Valley is so tolerant of failure. People in Silicon Valley aren&amp;rsquo;t blindly tolerant of failure. They&amp;rsquo;ll only continue to bet on you if you&amp;rsquo;re learning from your failures. But if you are, you are in fact a good bet: maybe your company didn&amp;rsquo;t grow the way you wanted, but you yourself have, and that should yield results eventually.Indeed, the forms of exponential growth that don&amp;rsquo;t consist of learning are so often intermixed with it that we should probably treat this as the rule rather than the exception. Which yields another heuristic: always be learning. If you&amp;rsquo;re not learning, you&amp;rsquo;re probably not on a path that leads to superlinear returns.But don&amp;rsquo;t overoptimize what you&amp;rsquo;re learning. Don&amp;rsquo;t limit yourself to learning things that are already known to be valuable. You&amp;rsquo;re learning; you don&amp;rsquo;t know for sure yet what&amp;rsquo;s going to be valuable, and if you&amp;rsquo;re too strict you&amp;rsquo;ll lop off the outliers.What about step functions? Are there also useful heuristics of the form &amp;ldquo;seek thresholds&amp;rdquo; or &amp;ldquo;seek competition?&amp;rdquo; Here the situation is trickier. The existence of a threshold doesn&amp;rsquo;t guarantee the game will be worth playing. If you play a round of Russian roulette, you&amp;rsquo;ll be in a situation with a threshold, certainly, but in the best case you&amp;rsquo;re no better off. &amp;ldquo;Seek competition&amp;rdquo; is similarly useless; what if the prize isn&amp;rsquo;t worth competing for? Sufficiently fast exponential growth guarantees both the shape and magnitude of the return curve — because something that grows fast enough will grow big even if it&amp;rsquo;s trivially small at first — but thresholds only guarantee the shape. [4]A principle for taking advantage of thresholds has to include a test to ensure the game is worth playing. Here&amp;rsquo;s one that does: if you come across something that&amp;rsquo;s mediocre yet still popular, it could be a good idea to replace it. For example, if a company makes a product that people dislike yet still buy, then presumably they&amp;rsquo;d buy a better alternative if you made one. [5]It would be great if there were a way to find promising intellectual thresholds. Is there a way to tell which questions have whole new fields beyond them? I doubt we could ever predict this with certainty, but the prize is so valuable that it would be useful to have predictors that were even a little better than random, and there&amp;rsquo;s hope of finding those. We can to some degree predict when a research problem isn&amp;rsquo;t likely to lead to new discoveries: when it seems legit but boring. Whereas the kind that do lead to new discoveries tend to seem very mystifying, but perhaps unimportant. (If they were mystifying and obviously important, they&amp;rsquo;d be famous open questions with lots of people already working on them.) So one heuristic here is to be driven by curiosity rather than careerism — to give free rein to your curiosity instead of working on what you&amp;rsquo;re supposed to. The prospect of superlinear returns for performance is an exciting one for the ambitious. And there&amp;rsquo;s good news in this department: this territory is expanding in both directions. There are more types of work in which you can get superlinear returns, and the returns themselves are growing.There are two reasons for this, though they&amp;rsquo;re so closely intertwined that they&amp;rsquo;re more like one and a half: progress in technology, and the decreasing importance of organizations.Fifty years ago it used to be much more necessary to be part of an organization to work on ambitious projects. It was the only way to get the resources you needed, the only way to have colleagues, and the only way to get distribution. So in 1970 your prestige was in most cases the prestige of the organization you belonged to. And prestige was an accurate predictor, because if you weren&amp;rsquo;t part of an organization, you weren&amp;rsquo;t likely to achieve much. There were a handful of exceptions, most notably artists and writers, who worked alone using inexpensive tools and had their own brands. But even they were at the mercy of organizations for reaching audiences. [6]A world dominated by organizations damped variation in the returns for performance. But this world has eroded significantly just in my lifetime. Now a lot more people can have the freedom that artists and writers had in the 20th century. There are lots of ambitious projects that don&amp;rsquo;t require much initial funding, and lots of new ways to learn, make money, find colleagues, and reach audiences.There&amp;rsquo;s still plenty of the old world left, but the rate of change has been dramatic by historical standards. Especially considering what&amp;rsquo;s at stake. It&amp;rsquo;s hard to imagine a more fundamental change than one in the returns for performance.Without the damping effect of institutions, there will be more variation in outcomes. Which doesn&amp;rsquo;t imply everyone will be better off: people who do well will do even better, but those who do badly will do worse. That&amp;rsquo;s an important point to bear in mind. Exposing oneself to superlinear returns is not for everyone. Most people will be better off as part of the pool. So who should shoot for superlinear returns? Ambitious people of two types: those who know they&amp;rsquo;re so good that they&amp;rsquo;ll be net ahead in a world with higher variation, and those, particularly the young, who can afford to risk trying it to find out. [7]The switch away from institutions won&amp;rsquo;t simply be an exodus of their current inhabitants. Many of the new winners will be people they&amp;rsquo;d never have let in. So the resulting democratization of opportunity will be both greater and more authentic than any tame intramural version the institutions themselves might have cooked up. Not everyone is happy about this great unlocking of ambition. It threatens some vested interests and contradicts some ideologies. [8] But if you&amp;rsquo;re an ambitious individual it&amp;rsquo;s good news for you. How should you take advantage of it?The most obvious way to take advantage of superlinear returns for performance is by doing exceptionally good work. At the far end of the curve, incremental effort is a bargain. All the more so because there&amp;rsquo;s less competition at the far end — and not just for the obvious reason that it&amp;rsquo;s hard to do something exceptionally well, but also because people find the prospect so intimidating that few even try. Which means it&amp;rsquo;s not just a bargain to do exceptional work, but a bargain even to try to.There are many variables that affect how good your work is, and if you want to be an outlier you need to get nearly all of them right. For example, to do something exceptionally well, you have to be interested in it. Mere diligence is not enough. So in a world with superlinear returns, it&amp;rsquo;s even more valuable to know what you&amp;rsquo;re interested in, and to find ways to work on it. [9] It will also be important to choose work that suits your circumstances. For example, if there&amp;rsquo;s a kind of work that inherently requires a huge expenditure of time and energy, it will be increasingly valuable to do it when you&amp;rsquo;re young and don&amp;rsquo;t yet have children.There&amp;rsquo;s a surprising amount of technique to doing great work. It&amp;rsquo;s not just a matter of trying hard. I&amp;rsquo;m going to take a shot giving a recipe in one paragraph.Choose work you have a natural aptitude for and a deep interest in. Develop a habit of working on your own projects; it doesn&amp;rsquo;t matter what they are so long as you find them excitingly ambitious. Work as hard as you can without burning out, and this will eventually bring you to one of the frontiers of knowledge. These look smooth from a distance, but up close they&amp;rsquo;re full of gaps. Notice and explore such gaps, and if you&amp;rsquo;re lucky one will expand into a whole new field. Take as much risk as you can afford; if you&amp;rsquo;re not failing occasionally you&amp;rsquo;re probably being too conservative. Seek out the best colleagues. Develop good taste and learn from the best examples. Be honest, especially with yourself. Exercise and eat and sleep well and avoid the more dangerous drugs. When in doubt, follow your curiosity. It never lies, and it knows more than you do about what&amp;rsquo;s worth paying attention to. [10]And there is of course one other thing you need: to be lucky. Luck is always a factor, but it&amp;rsquo;s even more of a factor when you&amp;rsquo;re working on your own rather than as part of an organization. And though there are some valid aphorisms about luck being where preparedness meets opportunity and so on, there&amp;rsquo;s also a component of true chance that you can&amp;rsquo;t do anything about. The solution is to take multiple shots. Which is another reason to start taking risks early. The best example of a field with superlinear returns is probably science. It has exponential growth, in the form of learning, combined with thresholds at the extreme edge of performance — literally at the limits of knowledge.The result has been a level of inequality in scientific discovery that makes the wealth inequality of even the most stratified societies seem mild by comparison. Newton&amp;rsquo;s discoveries were arguably greater than all his contemporaries&amp;rsquo; combined. [11]This point may seem obvious, but it might be just as well to spell it out. Superlinear returns imply inequality. The steeper the return curve, the greater the variation in outcomes.In fact, the correlation between superlinear returns and inequality is so strong that it yields another heuristic for finding work of this type: look for fields where a few big winners outperform everyone else. A kind of work where everyone does about the same is unlikely to be one with superlinear returns.What are fields where a few big winners outperform everyone else? Here are some obvious ones: sports, politics, art, music, acting, directing, writing, math, science, starting companies, and investing. In sports the phenomenon is due to externally imposed thresholds; you only need to be a few percent faster to win every race. In politics, power grows much as it did in the days of emperors. And in some of the other fields (including politics) success is driven largely by fame, which has its own source of superlinear growth. But when we exclude sports and politics and the effects of fame, a remarkable pattern emerges: the remaining list is exactly the same as the list of fields where you have to be independent-minded to succeed — where your ideas have to be not just correct, but novel as well. [12]This is obviously the case in science. You can&amp;rsquo;t publish papers saying things that other people have already said. But it&amp;rsquo;s just as true in investing, for example. It&amp;rsquo;s only useful to believe that a company will do well if most other investors don&amp;rsquo;t; if everyone else thinks the company will do well, then its stock price will already reflect that, and there&amp;rsquo;s no room to make money.What else can we learn from these fields? In all of them you have to put in the initial effort. Superlinear returns seem small at first. At this rate, you find yourself thinking, I&amp;rsquo;ll never get anywhere. But because the reward curve rises so steeply at the far end, it&amp;rsquo;s worth taking extraordinary measures to get there.In the startup world, the name for this principle is &amp;ldquo;do things that don&amp;rsquo;t scale.&amp;rdquo; If you pay a ridiculous amount of attention to your tiny initial set of customers, ideally you&amp;rsquo;ll kick off exponential growth by word of mouth. But this same principle applies to anything that grows exponentially. Learning, for example. When you first start learning something, you feel lost. But it&amp;rsquo;s worth making the initial effort to get a toehold, because the more you learn, the easier it will get.There&amp;rsquo;s another more subtle lesson in the list of fields with superlinear returns: not to equate work with a job. For most of the 20th century the two were identical for nearly everyone, and as a result we&amp;rsquo;ve inherited a custom that equates productivity with having a job. Even now to most people the phrase &amp;ldquo;your work&amp;rdquo; means their job. But to a writer or artist or scientist it means whatever they&amp;rsquo;re currently studying or creating. For someone like that, their work is something they carry with them from job to job, if they have jobs at all. It may be done for an employer, but it&amp;rsquo;s part of their portfolio. It&amp;rsquo;s an intimidating prospect to enter a field where a few big winners outperform everyone else. Some people do this deliberately, but you don&amp;rsquo;t need to. If you have sufficient natural ability and you follow your curiosity sufficiently far, you&amp;rsquo;ll end up in one. Your curiosity won&amp;rsquo;t let you be interested in boring questions, and interesting questions tend to create fields with superlinear returns if they&amp;rsquo;re not already part of one.The territory of superlinear returns is by no means static. Indeed, the most extreme returns come from expanding it. So while both ambition and curiosity can get you into this territory, curiosity may be the more powerful of the two. Ambition tends to make you climb existing peaks, but if you stick close enough to an interesting enough question, it may grow into a mountain beneath you.NotesThere&amp;rsquo;s a limit to how sharply you can distinguish between effort, performance, and return, because they&amp;rsquo;re not sharply distinguished in fact. What counts as return to one person might be performance to another. But though the borders of these concepts are blurry, they&amp;rsquo;re not meaningless. I&amp;rsquo;ve tried to write about them as precisely as I could without crossing into error.[1] Evolution itself is probably the most pervasive example of superlinear returns for performance. But this is hard for us to empathize with because we&amp;rsquo;re not the recipients; we&amp;rsquo;re the returns.[2] Knowledge did of course have a practical effect before the Industrial Revolution. The development of agriculture changed human life completely. But this kind of change was the result of broad, gradual improvements in technique, not the discoveries of a few exceptionally learned people.[3] It&amp;rsquo;s not mathematically correct to describe a step function as superlinear, but a step function starting from zero works like a superlinear function when it describes the reward curve for effort by a rational actor. If it starts at zero then the part before the step is below any linearly increasing return, and the part after the step must be above the necessary return at that point or no one would bother.[4] Seeking competition could be a good heuristic in the sense that some people find it motivating. It&amp;rsquo;s also somewhat of a guide to promising problems, because it&amp;rsquo;s a sign that other people find them promising. But it&amp;rsquo;s a very imperfect sign: often there&amp;rsquo;s a clamoring crowd chasing some problem, and they all end up being trumped by someone quietly working on another one.[5] Not always, though. You have to be careful with this rule. When something is popular despite being mediocre, there&amp;rsquo;s often a hidden reason why. Perhaps monopoly or regulation make it hard to compete. Perhaps customers have bad taste or have broken procedures for deciding what to buy. There are huge swathes of mediocre things that exist for such reasons.[6] In my twenties I wanted to be an artist and even went to art school to study painting. Mostly because I liked art, but a nontrivial part of my motivation came from the fact that artists seemed least at the mercy of organizations.[7] In principle everyone is getting superlinear returns. Learning compounds, and everyone learns in the course of their life. But in practice few push this kind of everyday learning to the point where the return curve gets really steep.[8] It&amp;rsquo;s unclear exactly what advocates of &amp;ldquo;equity&amp;rdquo; mean by it. They seem to disagree among themselves. But whatever they mean is probably at odds with a world in which institutions have less power to control outcomes, and a handful of outliers do much better than everyone else.It may seem like bad luck for this concept that it arose at just the moment when the world was shifting in the opposite direction, but I don&amp;rsquo;t think this was a coincidence. I think one reason it arose now is because its adherents feel threatened by rapidly increasing variation in performance.[9] Corollary: Parents who pressure their kids to work on something prestigious, like medicine, even though they have no interest in it, will be hosing them even more than they have in the past.[10] The original version of this paragraph was the first draft of &amp;ldquo;How to Do Great Work.&amp;rdquo; As soon as I wrote it I realized it was a more important topic than superlinear returns, so I paused the present essay to expand this paragraph into its own. Practically nothing remains of the original version, because after I finished &amp;ldquo;How to Do Great Work&amp;rdquo; I rewrote it based on that.[11] Before the Industrial Revolution, people who got rich usually did it like emperors: capturing some resource made them more powerful and enabled them to capture more. Now it can be done like a scientist, by discovering or building something uniquely valuable. Most people who get rich use a mix of the old and the new ways, but in the most advanced economies the ratio has shifted dramatically toward discovery just in the last half century.[12] It&amp;rsquo;s not surprising that conventional-minded people would dislike inequality if independent-mindedness is one of the biggest drivers of it. But it&amp;rsquo;s not simply that they don&amp;rsquo;t want anyone to have what they can&amp;rsquo;t. The conventional-minded literally can&amp;rsquo;t imagine what it&amp;rsquo;s like to have novel ideas. So the whole phenomenon of great variation in performance seems unnatural to them, and when they encounter it they assume it must be due to cheating or to some malign external influence.Thanks to Trevor Blackwell, Patrick Collison, Tyler Cowen, Jessica Livingston, Harj Taggar, and Garry Tan for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/swan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/swan/</guid>
      <description>&lt;h1 id=&#34;swan&#34;&gt;Swan&lt;/h1&gt;&#xA;&lt;p&gt;Black Swan Farming Want to start a startup? Get funded by Y Combinator. September 2012I&amp;rsquo;ve done several types of work over the years but I don&amp;rsquo;t know another as counterintuitive as startup investing.The two most important things to understand about startup investing, as a business, are (1) that effectively all the returns are concentrated in a few big winners, and (2) that the best ideas look initially like bad ideas.The first rule I knew intellectually, but didn&amp;rsquo;t really grasp till it happened to us. The total value of the companies we&amp;rsquo;ve funded is around 10 billion, give or take a few. But just two companies, Dropbox and Airbnb, account for about three quarters of it.In startups, the big winners are big to a degree that violates our expectations about variation. I don&amp;rsquo;t know whether these expectations are innate or learned, but whatever the cause, we are just not prepared for the 1000x variation in outcomes that one finds in startup investing.That yields all sorts of strange consequences. For example, in purely financial terms, there is probably at most one company in each YC batch that will have a significant effect on our returns, and the rest are just a cost of doing business. [1] I haven&amp;rsquo;t really assimilated that fact, partly because it&amp;rsquo;s so counterintuitive, and partly because we&amp;rsquo;re not doing this just for financial reasons; YC would be a pretty lonely place if we only had one company per batch. And yet it&amp;rsquo;s true.To succeed in a domain that violates your intuitions, you need to be able to turn them off the way a pilot does when flying through clouds. [2] You need to do what you know intellectually to be right, even though it feels wrong.It&amp;rsquo;s a constant battle for us. It&amp;rsquo;s hard to make ourselves take enough risks. When you interview a startup and think &amp;ldquo;they seem likely to succeed,&amp;rdquo; it&amp;rsquo;s hard not to fund them. And yet, financially at least, there is only one kind of success: they&amp;rsquo;re either going to be one of the really big winners or not, and if not it doesn&amp;rsquo;t matter whether you fund them, because even if they succeed the effect on your returns will be insignificant. In the same day of interviews you might meet some smart 19 year olds who aren&amp;rsquo;t even sure what they want to work on. Their chances of succeeding seem small. But again, it&amp;rsquo;s not their chances of succeeding that matter but their chances of succeeding really big. The probability that any group will succeed really big is microscopically small, but the probability that those 19 year olds will might be higher than that of the other, safer group.The probability that a startup will make it big is not simply a constant fraction of the probability that they will succeed at all. If it were, you could fund everyone who seemed likely to succeed at all, and you&amp;rsquo;d get that fraction of big hits. Unfortunately picking winners is harder than that. You have to ignore the elephant in front of you, the likelihood they&amp;rsquo;ll succeed, and focus instead on the separate and almost invisibly intangible question of whether they&amp;rsquo;ll succeed really big.HarderThat&amp;rsquo;s made harder by the fact that the best startup ideas seem at first like bad ideas. I&amp;rsquo;ve written about this before: if a good idea were obviously good, someone else would already have done it. So the most successful founders tend to work on ideas that few beside them realize are good. Which is not that far from a description of insanity, till you reach the point where you see results.The first time Peter Thiel spoke at YC he drew a Venn diagram that illustrates the situation perfectly. He drew two intersecting circles, one labelled &amp;ldquo;seems like a bad idea&amp;rdquo; and the other &amp;ldquo;is a good idea.&amp;rdquo; The intersection is the sweet spot for startups.This concept is a simple one and yet seeing it as a Venn diagram is illuminating. It reminds you that there is an intersection—that there are good ideas that seem bad. It also reminds you that the vast majority of ideas that seem bad are bad.The fact that the best ideas seem like bad ideas makes it even harder to recognize the big winners. It means the probability of a startup making it really big is not merely not a constant fraction of the probability that it will succeed, but that the startups with a high probability of the former will seem to have a disproportionately low probability of the latter.History tends to get rewritten by big successes, so that in retrospect it seems obvious they were going to make it big. For that reason one of my most valuable memories is how lame Facebook sounded to me when I first heard about it. A site for college students to waste time? It seemed the perfect bad idea: a site (1) for a niche market (2) with no money (3) to do something that didn&amp;rsquo;t matter.One could have described Microsoft and Apple in exactly the same terms. [3]Harder StillWait, it gets worse. You not only have to solve this hard problem, but you have to do it with no indication of whether you&amp;rsquo;re succeeding. When you pick a big winner, you won&amp;rsquo;t know it for two years.Meanwhile, the one thing you can measure is dangerously misleading. The one thing we can track precisely is how well the startups in each batch do at fundraising after Demo Day. But we know that&amp;rsquo;s the wrong metric. There&amp;rsquo;s no correlation between the percentage of startups that raise money and the metric that does matter financially, whether that batch of startups contains a big winner or not.Except an inverse one. That&amp;rsquo;s the scary thing: fundraising is not merely a useless metric, but positively misleading. We&amp;rsquo;re in a business where we need to pick unpromising-looking outliers, and the huge scale of the successes means we can afford to spread our net very widely. The big winners could generate 10,000x returns. That means for each big winner we could pick a thousand companies that returned nothing and still end up 10x ahead.If we ever got to the point where 100% of the startups we funded were able to raise money after Demo Day, it would almost certainly mean we were being too conservative. [4]It takes a conscious effort not to do that too. After 15 cycles of preparing startups for investors and then watching how they do, I can now look at a group we&amp;rsquo;re interviewing through Demo Day investors&amp;rsquo; eyes. But those are the wrong eyes to look through!We can afford to take at least 10x as much risk as Demo Day investors. And since risk is usually proportionate to reward, if you can afford to take more risk you should. What would it mean to take 10x more risk than Demo Day investors? We&amp;rsquo;d have to be willing to fund 10x more startups than they would. Which means that even if we&amp;rsquo;re generous to ourselves and assume that YC can on average triple a startup&amp;rsquo;s expected value, we&amp;rsquo;d be taking the right amount of risk if only 30% of the startups were able to raise significant funding after Demo Day.I don&amp;rsquo;t know what fraction of them currently raise more after Demo Day. I deliberately avoid calculating that number, because if you start measuring something you start optimizing it, and I know it&amp;rsquo;s the wrong thing to optimize. [5] But the percentage is certainly way over 30%. And frankly the thought of a 30% success rate at fundraising makes my stomach clench. A Demo Day where only 30% of the startups were fundable would be a shambles. Everyone would agree that YC had jumped the shark. We ourselves would feel that YC had jumped the shark. And yet we&amp;rsquo;d all be wrong.For better or worse that&amp;rsquo;s never going to be more than a thought experiment. We could never stand it. How about that for counterintuitive? I can lay out what I know to be the right thing to do, and still not do it. I can make up all sorts of plausible justifications. It would hurt YC&amp;rsquo;s brand (at least among the innumerate) if we invested in huge numbers of risky startups that flamed out. It might dilute the value of the alumni network. Perhaps most convincingly, it would be demoralizing for us to be up to our chins in failure all the time. But I know the real reason we&amp;rsquo;re so conservative is that we just haven&amp;rsquo;t assimilated the fact of 1000x variation in returns.We&amp;rsquo;ll probably never be able to bring ourselves to take risks proportionate to the returns in this business. The best we can hope for is that when we interview a group and find ourselves thinking &amp;ldquo;they seem like good founders, but what are investors going to think of this crazy idea?&amp;rdquo; we&amp;rsquo;ll continue to be able to say &amp;ldquo;who cares what investors think?&amp;rdquo; That&amp;rsquo;s what we thought about Airbnb, and if we want to fund more Airbnbs we have to stay good at thinking it.Notes[1] I&amp;rsquo;m not saying that the big winners are all that matters, just that they&amp;rsquo;re all that matters financially for investors. Since we&amp;rsquo;re not doing YC mainly for financial reasons, the big winners aren&amp;rsquo;t all that matters to us. We&amp;rsquo;re delighted to have funded Reddit, for example. Even though we made comparatively little from it, Reddit has had a big effect on the world, and it introduced us to Steve Huffman and Alexis Ohanian, both of whom have become good friends.Nor do we push founders to try to become one of the big winners if they don&amp;rsquo;t want to. We didn&amp;rsquo;t &amp;ldquo;swing for the fences&amp;rdquo; in our own startup (Viaweb, which was acquired for $50 million), and it would feel pretty bogus to press founders to do something we didn&amp;rsquo;t do. Our rule is that it&amp;rsquo;s up to the founders. Some want to take over the world, and some just want that first few million. But we invest in so many companies that we don&amp;rsquo;t have to sweat any one outcome. In fact, we don&amp;rsquo;t have to sweat whether startups have exits at all. The biggest exits are the only ones that matter financially, and those are guaranteed in the sense that if a company becomes big enough, a market for its shares will inevitably arise. Since the remaining outcomes don&amp;rsquo;t have a significant effect on returns, it&amp;rsquo;s cool with us if the founders want to sell early for a small amount, or grow slowly and never sell (i.e. become a so-called lifestyle business), or even shut the company down. We&amp;rsquo;re sometimes disappointed when a startup we had high hopes for doesn&amp;rsquo;t do well, but this disappointment is mostly the ordinary variety that anyone feels when that happens.[2] Without visual cues (e.g. the horizon) you can&amp;rsquo;t distinguish between gravity and acceleration. Which means if you&amp;rsquo;re flying through clouds you can&amp;rsquo;t tell what the attitude of the aircraft is. You could feel like you&amp;rsquo;re flying straight and level while in fact you&amp;rsquo;re descending in a spiral. The solution is to ignore what your body is telling you and listen only to your instruments. But it turns out to be very hard to ignore what your body is telling you. Every pilot knows about this problem and yet it is still a leading cause of accidents.[3] Not all big hits follow this pattern though. The reason Google seemed a bad idea was that there were already lots of search engines and there didn&amp;rsquo;t seem to be room for another.[4] A startup&amp;rsquo;s success at fundraising is a function of two things: what they&amp;rsquo;re selling and how good they are at selling it. And while we can teach startups a lot about how to appeal to investors, even the most convincing pitch can&amp;rsquo;t sell an idea that investors don&amp;rsquo;t like. I was genuinely worried that Airbnb, for example, would not be able to raise money after Demo Day. I couldn&amp;rsquo;t convince Fred Wilson to fund them. They might not have raised money at all but for the coincidence that Greg McAdoo, our contact at Sequoia, was one of a handful of VCs who understood the vacation rental business, having spent much of the previous two years investigating it.[5] I calculated it once for the last batch before a consortium of investors started offering investment automatically to every startup we funded, summer 2010. At the time it was 94% (33 of 35 companies that tried to raise money succeeded, and one didn&amp;rsquo;t try because they were already profitable). Presumably it&amp;rsquo;s lower now because of that investment; in the old days it was raise after Demo Day or die.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Jessica Livingston, Geoff Ralston, and Harj Taggar for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/tablets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/tablets/</guid>
      <description>&lt;h1 id=&#34;tablets&#34;&gt;Tablets&lt;/h1&gt;&#xA;&lt;p&gt;Tablets December 2010I was thinking recently how inconvenient it was not to have a general term for iPhones, iPads, and the corresponding things running Android. The closest to a general term seems to be &amp;ldquo;mobile devices,&amp;rdquo; but that (a) applies to any mobile phone, and (b) doesn&amp;rsquo;t really capture what&amp;rsquo;s distinctive about the iPad.After a few seconds it struck me that what we&amp;rsquo;ll end up calling these things is tablets. The only reason we even consider calling them &amp;ldquo;mobile devices&amp;rdquo; is that the iPhone preceded the iPad. If the iPad had come first, we wouldn&amp;rsquo;t think of the iPhone as a phone; we&amp;rsquo;d think of it as a tablet small enough to hold up to your ear.The iPhone isn&amp;rsquo;t so much a phone as a replacement for a phone. That&amp;rsquo;s an important distinction, because it&amp;rsquo;s an early instance of what will become a common pattern. Many if not most of the special-purpose objects around us are going to be replaced by apps running on tablets.This is already clear in cases like GPSes, music players, and cameras. But I think it will surprise people how many things are going to get replaced. We funded one startup that&amp;rsquo;s replacing keys. The fact that you can change font sizes easily means the iPad effectively replaces reading glasses. I wouldn&amp;rsquo;t be surprised if by playing some clever tricks with the accelerometer you could even replace the bathroom scale.The advantages of doing things in software on a single device are so great that everything that can get turned into software will. So for the next couple years, a good recipe for startups will be to look around you for things that people haven&amp;rsquo;t realized yet can be made unnecessary by a tablet app.In 1938 Buckminster Fuller coined the term ephemeralization to describe the increasing tendency of physical machinery to be replaced by what we would now call software. The reason tablets are going to take over the world is not (just) that Steve Jobs and Co are industrial design wizards, but because they have this force behind them. The iPhone and the iPad have effectively drilled a hole that will allow ephemeralization to flow into a lot of new areas. No one who has studied the history of technology would want to underestimate the power of that force.I worry about the power Apple could have with this force behind them. I don&amp;rsquo;t want to see another era of client monoculture like the Microsoft one in the 80s and 90s. But if ephemeralization is one of the main forces driving the spread of tablets, that suggests a way to compete with Apple: be a better platform for it.It has turned out to be a great thing that Apple tablets have accelerometers in them. Developers have used the accelerometer in ways Apple could never have imagined. That&amp;rsquo;s the nature of platforms. The more versatile the tool, the less you can predict how people will use it. So tablet makers should be thinking: what else can we put in there? Not merely hardware, but software too. What else can we give developers access to? Give hackers an inch and they&amp;rsquo;ll take you a mile. Thanks to Sam Altman, Paul Buchheit, Jessica Livingston, and Robert Morris for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/talk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/talk/</guid>
      <description>&lt;h1 id=&#34;talk&#34;&gt;Talk&lt;/h1&gt;&#xA;&lt;p&gt;Write Like You Talk October 2015Here&amp;rsquo;s a simple trick for getting more people to read what you write: write in spoken language.Something comes over most people when they start writing. They write in a different language than they&amp;rsquo;d use if they were talking to a friend. The sentence structure and even the words are different. No one uses &amp;ldquo;pen&amp;rdquo; as a verb in spoken English. You&amp;rsquo;d feel like an idiot using &amp;ldquo;pen&amp;rdquo; instead of &amp;ldquo;write&amp;rdquo; in a conversation with a friend.The last straw for me was a sentence I read a couple days ago: The mercurial Spaniard himself declared: &amp;ldquo;After Altamira, all is decadence.&amp;rdquo; It&amp;rsquo;s from Neil Oliver&amp;rsquo;s A History of Ancient Britain. I feel bad making an example of this book, because it&amp;rsquo;s no worse than lots of others. But just imagine calling Picasso &amp;ldquo;the mercurial Spaniard&amp;rdquo; when talking to a friend. Even one sentence of this would raise eyebrows in conversation. And yet people write whole books of it.Ok, so written and spoken language are different. Does that make written language worse?If you want people to read and understand what you write, yes. Written language is more complex, which makes it more work to read. It&amp;rsquo;s also more formal and distant, which gives the reader&amp;rsquo;s attention permission to drift. But perhaps worst of all, the complex sentences and fancy words give you, the writer, the false impression that you&amp;rsquo;re saying more than you actually are.You don&amp;rsquo;t need complex sentences to express complex ideas. When specialists in some abstruse topic talk to one another about ideas in their field, they don&amp;rsquo;t use sentences any more complex than they do when talking about what to have for lunch. They use different words, certainly. But even those they use no more than necessary. And in my experience, the harder the subject, the more informally experts speak. Partly, I think, because they have less to prove, and partly because the harder the ideas you&amp;rsquo;re talking about, the less you can afford to let language get in the way.Informal language is the athletic clothing of ideas.I&amp;rsquo;m not saying spoken language always works best. Poetry is as much music as text, so you can say things you wouldn&amp;rsquo;t say in conversation. And there are a handful of writers who can get away with using fancy language in prose. And then of course there are cases where writers don&amp;rsquo;t want to make it easy to understand what they&amp;rsquo;re saying—in corporate announcements of bad news, for example, or at the more bogus end of the humanities. But for nearly everyone else, spoken language is better.It seems to be hard for most people to write in spoken language. So perhaps the best solution is to write your first draft the way you usually would, then afterward look at each sentence and ask &amp;ldquo;Is this the way I&amp;rsquo;d say this if I were talking to a friend?&amp;rdquo; If it isn&amp;rsquo;t, imagine what you would say, and use that instead. After a while this filter will start to operate as you write. When you write something you wouldn&amp;rsquo;t say, you&amp;rsquo;ll hear the clank as it hits the page.Before I publish a new essay, I read it out loud and fix everything that doesn&amp;rsquo;t sound like conversation. I even fix bits that are phonetically awkward; I don&amp;rsquo;t know if that&amp;rsquo;s necessary, but it doesn&amp;rsquo;t cost much.This trick may not always be enough. I&amp;rsquo;ve seen writing so far removed from spoken language that it couldn&amp;rsquo;t be fixed sentence by sentence. For cases like that there&amp;rsquo;s a more drastic solution. After writing the first draft, try explaining to a friend what you just wrote. Then replace the draft with what you said to your friend.People often tell me how much my essays sound like me talking. The fact that this seems worthy of comment shows how rarely people manage to write in spoken language. Otherwise everyone&amp;rsquo;s writing would sound like them talking.If you simply manage to write in spoken language, you&amp;rsquo;ll be ahead of 95% of writers. And it&amp;rsquo;s so easy to do: just don&amp;rsquo;t let a sentence through unless it&amp;rsquo;s the way you&amp;rsquo;d say it to a friend.Thanks to Patrick Collison and Jessica Livingston for reading drafts of this.Japanese TranslationArabic Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/taste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/taste/</guid>
      <description>&lt;h1 id=&#34;taste&#34;&gt;Taste&lt;/h1&gt;&#xA;&lt;p&gt;Taste for Makers February 2002 &amp;ldquo;&amp;hellip;Copernicus&amp;rsquo; aesthetic objections to [equants] provided one essential motive for his rejection of the Ptolemaic system&amp;hellip;.&amp;rdquo;- Thomas Kuhn, The Copernican Revolution&amp;quot;All of us had been trained by Kelly Johnson and believed fanatically in his insistence that an airplane that looked beautiful would fly the same way.&amp;quot;- Ben Rich, Skunk Works&amp;quot;Beauty is the first test: there is no permanent place in this world for ugly mathematics.&amp;quot;- G. H. Hardy, A Mathematician&amp;rsquo;s Apology I was talking recently to a friend who teaches at MIT. His field is hot now and every year he is inundated by applications from would-be graduate students. &amp;ldquo;A lot of them seem smart,&amp;rdquo; he said. &amp;ldquo;What I can&amp;rsquo;t tell is whether they have any kind of taste.&amp;ldquo;Taste. You don&amp;rsquo;t hear that word much now. And yet we still need the underlying concept, whatever we call it. What my friend meant was that he wanted students who were not just good technicians, but who could use their technical knowledge to design beautiful things.Mathematicians call good work &amp;ldquo;beautiful,&amp;rdquo; and so, either now or in the past, have scientists, engineers, musicians, architects, designers, writers, and painters. Is it just a coincidence that they used the same word, or is there some overlap in what they meant? If there is an overlap, can we use one field&amp;rsquo;s discoveries about beauty to help us in another?For those of us who design things, these are not just theoretical questions. If there is such a thing as beauty, we need to be able to recognize it. We need good taste to make good things. Instead of treating beauty as an airy abstraction, to be either blathered about or avoided depending on how one feels about airy abstractions, let&amp;rsquo;s try considering it as a practical question: how do you make good stuff?If you mention taste nowadays, a lot of people will tell you that &amp;ldquo;taste is subjective.&amp;rdquo; They believe this because it really feels that way to them. When they like something, they have no idea why. It could be because it&amp;rsquo;s beautiful, or because their mother had one, or because they saw a movie star with one in a magazine, or because they know it&amp;rsquo;s expensive. Their thoughts are a tangle of unexamined impulses.Most of us are encouraged, as children, to leave this tangle unexamined. If you make fun of your little brother for coloring people green in his coloring book, your mother is likely to tell you something like &amp;ldquo;you like to do it your way and he likes to do it his way.&amp;ldquo;Your mother at this point is not trying to teach you important truths about aesthetics. She&amp;rsquo;s trying to get the two of you to stop bickering.Like many of the half-truths adults tell us, this one contradicts other things they tell us. After dinning into you that taste is merely a matter of personal preference, they take you to the museum and tell you that you should pay attention because Leonardo is a great artist.What goes through the kid&amp;rsquo;s head at this point? What does he think &amp;ldquo;great artist&amp;rdquo; means? After having been told for years that everyone just likes to do things their own way, he is unlikely to head straight for the conclusion that a great artist is someone whose work is better than the others&amp;rsquo;. A far more likely theory, in his Ptolemaic model of the universe, is that a great artist is something that&amp;rsquo;s good for you, like broccoli, because someone said so in a book.Saying that taste is just personal preference is a good way to prevent disputes. The trouble is, it&amp;rsquo;s not true. You feel this when you start to design things.Whatever job people do, they naturally want to do better. Football players like to win games. CEOs like to increase earnings. It&amp;rsquo;s a matter of pride, and a real pleasure, to get better at your job. But if your job is to design things, and there is no such thing as beauty, then there is no way to get better at your job. If taste is just personal preference, then everyone&amp;rsquo;s is already perfect: you like whatever you like, and that&amp;rsquo;s it.As in any job, as you continue to design things, you&amp;rsquo;ll get better at it. Your tastes will change. And, like anyone who gets better at their job, you&amp;rsquo;ll know you&amp;rsquo;re getting better. If so, your old tastes were not merely different, but worse. Poof goes the axiom that taste can&amp;rsquo;t be wrong.Relativism is fashionable at the moment, and that may hamper you from thinking about taste, even as yours grows. But if you come out of the closet and admit, at least to yourself, that there is such a thing as good and bad design, then you can start to study good design in detail. How has your taste changed? When you made mistakes, what caused you to make them? What have other people learned about design?Once you start to examine the question, it&amp;rsquo;s surprising how much different fields&amp;rsquo; ideas of beauty have in common. The same principles of good design crop up again and again.Good design is simple. You hear this from math to painting. In math it means that a shorter proof tends to be a better one. Where axioms are concerned, especially, less is more. It means much the same thing in programming. For architects and designers it means that beauty should depend on a few carefully chosen structural elements rather than a profusion of superficial ornament. (Ornament is not in itself bad, only when it&amp;rsquo;s camouflage on insipid form.) Similarly, in painting, a still life of a few carefully observed and solidly modelled objects will tend to be more interesting than a stretch of flashy but mindlessly repetitive painting of, say, a lace collar. In writing it means: say what you mean and say it briefly.It seems strange to have to emphasize simplicity. You&amp;rsquo;d think simple would be the default. Ornate is more work. But something seems to come over people when they try to be creative. Beginning writers adopt a pompous tone that doesn&amp;rsquo;t sound anything like the way they speak. Designers trying to be artistic resort to swooshes and curlicues. Painters discover that they&amp;rsquo;re expressionists. It&amp;rsquo;s all evasion. Underneath the long words or the &amp;ldquo;expressive&amp;rdquo; brush strokes, there is not much going on, and that&amp;rsquo;s frightening.When you&amp;rsquo;re forced to be simple, you&amp;rsquo;re forced to face the real problem. When you can&amp;rsquo;t deliver ornament, you have to deliver substance.Good design is timeless. In math, every proof is timeless unless it contains a mistake. So what does Hardy mean when he says there is no permanent place for ugly mathematics? He means the same thing Kelly Johnson did: if something is ugly, it can&amp;rsquo;t be the best solution. There must be a better one, and eventually someone will discover it.Aiming at timelessness is a way to make yourself find the best answer: if you can imagine someone surpassing you, you should do it yourself. Some of the greatest masters did this so well that they left little room for those who came after. Every engraver since Durer has had to live in his shadow.Aiming at timelessness is also a way to evade the grip of fashion. Fashions almost by definition change with time, so if you can make something that will still look good far into the future, then its appeal must derive more from merit and less from fashion.Strangely enough, if you want to make something that will appeal to future generations, one way to do it is to try to appeal to past generations. It&amp;rsquo;s hard to guess what the future will be like, but we can be sure it will be like the past in caring nothing for present fashions. So if you can make something that appeals to people today and would also have appealed to people in 1500, there is a good chance it will appeal to people in 2500.Good design solves the right problem. The typical stove has four burners arranged in a square, and a dial to control each. How do you arrange the dials? The simplest answer is to put them in a row. But this is a simple answer to the wrong question. The dials are for humans to use, and if you put them in a row, the unlucky human will have to stop and think each time about which dial matches which burner. Better to arrange the dials in a square like the burners.A lot of bad design is industrious, but misguided. In the mid twentieth century there was a vogue for setting text in sans-serif fonts. These fonts are closer to the pure, underlying letterforms. But in text that&amp;rsquo;s not the problem you&amp;rsquo;re trying to solve. For legibility it&amp;rsquo;s more important that letters be easy to tell apart. It may look Victorian, but a Times Roman lowercase g is easy to tell from a lowercase y.Problems can be improved as well as solutions. In software, an intractable problem can usually be replaced by an equivalent one that&amp;rsquo;s easy to solve. Physics progressed faster as the problem became predicting observable behavior, instead of reconciling it with scripture.Good design is suggestive. Jane Austen&amp;rsquo;s novels contain almost no description; instead of telling you how everything looks, she tells her story so well that you envision the scene for yourself. Likewise, a painting that suggests is usually more engaging than one that tells. Everyone makes up their own story about the Mona Lisa.In architecture and design, this principle means that a building or object should let you use it how you want: a good building, for example, will serve as a backdrop for whatever life people want to lead in it, instead of making them live as if they were executing a program written by the architect.In software, it means you should give users a few basic elements that they can combine as they wish, like Lego. In math it means a proof that becomes the basis for a lot of new work is preferable to a proof that was difficult, but doesn&amp;rsquo;t lead to future discoveries; in the sciences generally, citation is considered a rough indicator of merit.Good design is often slightly funny. This one may not always be true. But Durer&amp;rsquo;s engravings and Saarinen&amp;rsquo;s womb chair and the Pantheon and the original Porsche 911 all seem to me slightly funny. Godel&amp;rsquo;s incompleteness theorem seems like a practical joke.I think it&amp;rsquo;s because humor is related to strength. To have a sense of humor is to be strong: to keep one&amp;rsquo;s sense of humor is to shrug off misfortunes, and to lose one&amp;rsquo;s sense of humor is to be wounded by them. And so the mark&amp;ndash; or at least the prerogative&amp;ndash; of strength is not to take oneself too seriously. The confident will often, like swallows, seem to be making fun of the whole process slightly, as Hitchcock does in his films or Bruegel in his paintings&amp;ndash; or Shakespeare, for that matter.Good design may not have to be funny, but it&amp;rsquo;s hard to imagine something that could be called humorless also being good design.Good design is hard. If you look at the people who&amp;rsquo;ve done great work, one thing they all seem to have in common is that they worked very hard. If you&amp;rsquo;re not working hard, you&amp;rsquo;re probably wasting your time.Hard problems call for great efforts. In math, difficult proofs require ingenious solutions, and those tend to be interesting. Ditto in engineering.When you have to climb a mountain you toss everything unnecessary out of your pack. And so an architect who has to build on a difficult site, or a small budget, will find that he is forced to produce an elegant design. Fashions and flourishes get knocked aside by the difficult business of solving the problem at all.Not every kind of hard is good. There is good pain and bad pain. You want the kind of pain you get from going running, not the kind you get from stepping on a nail. A difficult problem could be good for a designer, but a fickle client or unreliable materials would not be.In art, the highest place has traditionally been given to paintings of people. There is something to this tradition, and not just because pictures of faces get to press buttons in our brains that other pictures don&amp;rsquo;t. We are so good at looking at faces that we force anyone who draws them to work hard to satisfy us. If you draw a tree and you change the angle of a branch five degrees, no one will know. When you change the angle of someone&amp;rsquo;s eye five degrees, people notice.When Bauhaus designers adopted Sullivan&amp;rsquo;s &amp;ldquo;form follows function,&amp;rdquo; what they meant was, form should follow function. And if function is hard enough, form is forced to follow it, because there is no effort to spare for error. Wild animals are beautiful because they have hard lives.Good design looks easy. Like great athletes, great designers make it look easy. Mostly this is an illusion. The easy, conversational tone of good writing comes only on the eighth rewrite.In science and engineering, some of the greatest discoveries seem so simple that you say to yourself, I could have thought of that. The discoverer is entitled to reply, why didn&amp;rsquo;t you?Some Leonardo heads are just a few lines. You look at them and you think, all you have to do is get eight or ten lines in the right place and you&amp;rsquo;ve made this beautiful portrait. Well, yes, but you have to get them in exactly the right place. The slightest error will make the whole thing collapse.Line drawings are in fact the most difficult visual medium, because they demand near perfection. In math terms, they are a closed-form solution; lesser artists literally solve the same problems by successive approximation. One of the reasons kids give up drawing at ten or so is that they decide to start drawing like grownups, and one of the first things they try is a line drawing of a face. Smack!In most fields the appearance of ease seems to come with practice. Perhaps what practice does is train your unconscious mind to handle tasks that used to require conscious thought. In some cases you literally train your body. An expert pianist can play notes faster than the brain can send signals to his hand. Likewise an artist, after a while, can make visual perception flow in through his eye and out through his hand as automatically as someone tapping his foot to a beat.When people talk about being in &amp;ldquo;the zone,&amp;rdquo; I think what they mean is that the spinal cord has the situation under control. Your spinal cord is less hesitant, and it frees conscious thought for the hard problems. Good design uses symmetry. I think symmetry may just be one way to achieve simplicity, but it&amp;rsquo;s important enough to be mentioned on its own. Nature uses it a lot, which is a good sign.There are two kinds of symmetry, repetition and recursion. Recursion means repetition in subelements, like the pattern of veins in a leaf.Symmetry is unfashionable in some fields now, in reaction to excesses in the past. Architects started consciously making buildings asymmetric in Victorian times and by the 1920s asymmetry was an explicit premise of modernist architecture. Even these buildings only tended to be asymmetric about major axes, though; there were hundreds of minor symmetries.In writing you find symmetry at every level, from the phrases in a sentence to the plot of a novel. You find the same in music and art. Mosaics (and some Cezannes) get extra visual punch by making the whole picture out of the same atoms. Compositional symmetry yields some of the most memorable paintings, especially when two halves react to one another, as in the Creation of Adam or American Gothic.In math and engineering, recursion, especially, is a big win. Inductive proofs are wonderfully short. In software, a problem that can be solved by recursion is nearly always best solved that way. The Eiffel Tower looks striking partly because it is a recursive solution, a tower on a tower.The danger of symmetry, and repetition especially, is that it can be used as a substitute for thought.Good design resembles nature. It&amp;rsquo;s not so much that resembling nature is intrinsically good as that nature has had a long time to work on the problem. It&amp;rsquo;s a good sign when your answer resembles nature&amp;rsquo;s.It&amp;rsquo;s not cheating to copy. Few would deny that a story should be like life. Working from life is a valuable tool in painting too, though its role has often been misunderstood. The aim is not simply to make a record. The point of painting from life is that it gives your mind something to chew on: when your eyes are looking at something, your hand will do more interesting work.Imitating nature also works in engineering. Boats have long had spines and ribs like an animal&amp;rsquo;s ribcage. In some cases we may have to wait for better technology: early aircraft designers were mistaken to design aircraft that looked like birds, because they didn&amp;rsquo;t have materials or power sources light enough (the Wrights&amp;rsquo; engine weighed 152 lbs. and generated only 12 hp.) or control systems sophisticated enough for machines that flew like birds, but I could imagine little unmanned reconnaissance planes flying like birds in fifty years.Now that we have enough computer power, we can imitate nature&amp;rsquo;s method as well as its results. Genetic algorithms may let us create things too complex to design in the ordinary sense.Good design is redesign. It&amp;rsquo;s rare to get things right the first time. Experts expect to throw away some early work. They plan for plans to change.It takes confidence to throw work away. You have to be able to think, there&amp;rsquo;s more where that came from. When people first start drawing, for example, they&amp;rsquo;re often reluctant to redo parts that aren&amp;rsquo;t right; they feel they&amp;rsquo;ve been lucky to get that far, and if they try to redo something, it will turn out worse. Instead they convince themselves that the drawing is not that bad, really&amp;ndash; in fact, maybe they meant it to look that way.Dangerous territory, that; if anything you should cultivate dissatisfaction. In Leonardo&amp;rsquo;s drawings there are often five or six attempts to get a line right. The distinctive back of the Porsche 911 only appeared in the redesign of an awkward prototype. In Wright&amp;rsquo;s early plans for the Guggenheim, the right half was a ziggurat; he inverted it to get the present shape.Mistakes are natural. Instead of treating them as disasters, make them easy to acknowledge and easy to fix. Leonardo more or less invented the sketch, as a way to make drawing bear a greater weight of exploration. Open-source software has fewer bugs because it admits the possibility of bugs.It helps to have a medium that makes change easy. When oil paint replaced tempera in the fifteenth century, it helped painters to deal with difficult subjects like the human figure because, unlike tempera, oil can be blended and overpainted. Good design can copy. Attitudes to copying often make a round trip. A novice imitates without knowing it; next he tries consciously to be original; finally, he decides it&amp;rsquo;s more important to be right than original.Unknowing imitation is almost a recipe for bad design. If you don&amp;rsquo;t know where your ideas are coming from, you&amp;rsquo;re probably imitating an imitator. Raphael so pervaded mid-nineteenth century taste that almost anyone who tried to draw was imitating him, often at several removes. It was this, more than Raphael&amp;rsquo;s own work, that bothered the Pre-Raphaelites.The ambitious are not content to imitate. The second phase in the growth of taste is a conscious attempt at originality.I think the greatest masters go on to achieve a kind of selflessness. They just want to get the right answer, and if part of the right answer has already been discovered by someone else, that&amp;rsquo;s no reason not to use it. They&amp;rsquo;re confident enough to take from anyone without feeling that their own vision will be lost in the process. Good design is often strange. Some of the very best work has an uncanny quality: Euler&amp;rsquo;s Formula, Bruegel&amp;rsquo;s Hunters in the Snow, the SR-71, Lisp. They&amp;rsquo;re not just beautiful, but strangely beautiful.I&amp;rsquo;m not sure why. It may just be my own stupidity. A can-opener must seem miraculous to a dog. Maybe if I were smart enough it would seem the most natural thing in the world that ei*pi = -1. It is after all necessarily true.Most of the qualities I&amp;rsquo;ve mentioned are things that can be cultivated, but I don&amp;rsquo;t think it works to cultivate strangeness. The best you can do is not squash it if it starts to appear. Einstein didn&amp;rsquo;t try to make relativity strange. He tried to make it true, and the truth turned out to be strange.At an art school where I once studied, the students wanted most of all to develop a personal style. But if you just try to make good things, you&amp;rsquo;ll inevitably do it in a distinctive way, just as each person walks in a distinctive way. Michelangelo was not trying to paint like Michelangelo. He was just trying to paint well; he couldn&amp;rsquo;t help painting like Michelangelo.The only style worth having is the one you can&amp;rsquo;t help. And this is especially true for strangeness. There is no shortcut to it. The Northwest Passage that the Mannerists, the Romantics, and two generations of American high school students have searched for does not seem to exist. The only way to get there is to go through good and come out the other side. Good design happens in chunks. The inhabitants of fifteenth century Florence included Brunelleschi, Ghiberti, Donatello, Masaccio, Filippo Lippi, Fra Angelico, Verrocchio, Botticelli, Leonardo, and Michelangelo. Milan at the time was as big as Florence. How many fifteenth century Milanese artists can you name?Something was happening in Florence in the fifteenth century. And it can&amp;rsquo;t have been heredity, because it isn&amp;rsquo;t happening now. You have to assume that whatever inborn ability Leonardo and Michelangelo had, there were people born in Milan with just as much. What happened to the Milanese Leonardo?There are roughly a thousand times as many people alive in the US right now as lived in Florence during the fifteenth century. A thousand Leonardos and a thousand Michelangelos walk among us. If DNA ruled, we should be greeted daily by artistic marvels. We aren&amp;rsquo;t, and the reason is that to make Leonardo you need more than his innate ability. You also need Florence in 1450.Nothing is more powerful than a community of talented people working on related problems. Genes count for little by comparison: being a genetic Leonardo was not enough to compensate for having been born near Milan instead of Florence. Today we move around more, but great work still comes disproportionately from a few hotspots: the Bauhaus, the Manhattan Project, the New Yorker, Lockheed&amp;rsquo;s Skunk Works, Xerox Parc.At any given time there are a few hot topics and a few groups doing great work on them, and it&amp;rsquo;s nearly impossible to do good work yourself if you&amp;rsquo;re too far removed from one of these centers. You can push or pull these trends to some extent, but you can&amp;rsquo;t break away from them. (Maybe you can, but the Milanese Leonardo couldn&amp;rsquo;t.) Good design is often daring. At every period of history, people have believed things that were just ridiculous, and believed them so strongly that you risked ostracism or even violence by saying otherwise.If our own time were any different, that would be remarkable. As far as I can tell it isn&amp;rsquo;t.This problem afflicts not just every era, but in some degree every field. Much Renaissance art was in its time considered shockingly secular: according to Vasari, Botticelli repented and gave up painting, and Fra Bartolommeo and Lorenzo di Credi actually burned some of their work. Einstein&amp;rsquo;s theory of relativity offended many contemporary physicists, and was not fully accepted for decades&amp;ndash; in France, not until the 1950s.Today&amp;rsquo;s experimental error is tomorrow&amp;rsquo;s new theory. If you want to discover great new things, then instead of turning a blind eye to the places where conventional wisdom and truth don&amp;rsquo;t quite meet, you should pay particular attention to them.As a practical matter, I think it&amp;rsquo;s easier to see ugliness than to imagine beauty. Most of the people who&amp;rsquo;ve made beautiful things seem to have done it by fixing something that they thought ugly. Great work usually seems to happen because someone sees something and thinks, I could do better than that. Giotto saw traditional Byzantine madonnas painted according to a formula that had satisfied everyone for centuries, and to him they looked wooden and unnatural. Copernicus was so troubled by a hack that all his contemporaries could tolerate that he felt there must be a better solution.Intolerance for ugliness is not in itself enough. You have to understand a field well before you develop a good nose for what needs fixing. You have to do your homework. But as you become expert in a field, you&amp;rsquo;ll start to hear little voices saying, What a hack! There must be a better way. Don&amp;rsquo;t ignore those voices. Cultivate them. The recipe for great work is: very exacting taste, plus the ability to gratify it.NotesSullivan actually said &amp;ldquo;form ever follows function,&amp;rdquo; but I think the usual misquotation is closer to what modernist architects meant. Stephen G. Brush, &amp;ldquo;Why was Relativity Accepted?&amp;rdquo; Phys. Perspect. 1 (1999) 184-214.Japanese TranslationChinese TranslationSlovenian TranslationGerman TranslationInterview: Milton GlaserRussian Translation You&amp;rsquo;ll find this essay and 14 others in Hackers &amp;amp; Painters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/think/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/think/</guid>
      <description>&lt;h1 id=&#34;think&#34;&gt;Think&lt;/h1&gt;&#xA;&lt;p&gt;How to Think for Yourself November 2020There are some kinds of work that you can&amp;rsquo;t do well without thinking differently from your peers. To be a successful scientist, for example, it&amp;rsquo;s not enough just to be correct. Your ideas have to be both correct and novel. You can&amp;rsquo;t publish papers saying things other people already know. You need to say things no one else has realized yet.The same is true for investors. It&amp;rsquo;s not enough for a public market investor to predict correctly how a company will do. If a lot of other people make the same prediction, the stock price will already reflect it, and there&amp;rsquo;s no room to make money. The only valuable insights are the ones most other investors don&amp;rsquo;t share.You see this pattern with startup founders too. You don&amp;rsquo;t want to start a startup to do something that everyone agrees is a good idea, or there will already be other companies doing it. You have to do something that sounds to most other people like a bad idea, but that you know isn&amp;rsquo;t  like writing software for a tiny computer used by a few thousand hobbyists, or starting a site to let people rent airbeds on strangers&amp;rsquo; floors.Ditto for essayists. An essay that told people things they already knew would be boring. You have to tell them something new.But this pattern isn&amp;rsquo;t universal. In fact, it doesn&amp;rsquo;t hold for most kinds of work. In most kinds of work  to be an administrator, for example  all you need is the first half. All you need is to be right. It&amp;rsquo;s not essential that everyone else be wrong.There&amp;rsquo;s room for a little novelty in most kinds of work, but in practice there&amp;rsquo;s a fairly sharp distinction between the kinds of work where it&amp;rsquo;s essential to be independent-minded, and the kinds where it&amp;rsquo;s not.I wish someone had told me about this distinction when I was a kid, because it&amp;rsquo;s one of the most important things to think about when you&amp;rsquo;re deciding what kind of work you want to do. Do you want to do the kind of work where you can only win by thinking differently from everyone else? I suspect most people&amp;rsquo;s unconscious mind will answer that question before their conscious mind has a chance to. I know mine does.Independent-mindedness seems to be more a matter of nature than nurture. Which means if you pick the wrong type of work, you&amp;rsquo;re going to be unhappy. If you&amp;rsquo;re naturally independent-minded, you&amp;rsquo;re going to find it frustrating to be a middle manager. And if you&amp;rsquo;re naturally conventional-minded, you&amp;rsquo;re going to be sailing into a headwind if you try to do original research.One difficulty here, though, is that people are often mistaken about where they fall on the spectrum from conventional- to independent-minded. Conventional-minded people don&amp;rsquo;t like to think of themselves as conventional-minded. And in any case, it genuinely feels to them as if they make up their own minds about everything. It&amp;rsquo;s just a coincidence that their beliefs are identical to their peers&amp;rsquo;. And the independent-minded, meanwhile, are often unaware how different their ideas are from conventional ones, at least till they state them publicly. [1]By the time they reach adulthood, most people know roughly how smart they are (in the narrow sense of ability to solve pre-set problems), because they&amp;rsquo;re constantly being tested and ranked according to it. But schools generally ignore independent-mindedness, except to the extent they try to suppress it. So we don&amp;rsquo;t get anything like the same kind of feedback about how independent-minded we are.There may even be a phenomenon like Dunning-Kruger at work, where the most conventional-minded people are confident that they&amp;rsquo;re independent-minded, while the genuinely independent-minded worry they might not be independent-minded enough. ___________ Can you make yourself more independent-minded? I think so. This quality may be largely inborn, but there seem to be ways to magnify it, or at least not to suppress it.One of the most effective techniques is one practiced unintentionally by most nerds: simply to be less aware what conventional beliefs are. It&amp;rsquo;s hard to be a conformist if you don&amp;rsquo;t know what you&amp;rsquo;re supposed to conform to. Though again, it may be that such people already are independent-minded. A conventional-minded person would probably feel anxious not knowing what other people thought, and make more effort to find out.It matters a lot who you surround yourself with. If you&amp;rsquo;re surrounded by conventional-minded people, it will constrain which ideas you can express, and that in turn will constrain which ideas you have. But if you surround yourself with independent-minded people, you&amp;rsquo;ll have the opposite experience: hearing other people say surprising things will encourage you to, and to think of more.Because the independent-minded find it uncomfortable to be surrounded by conventional-minded people, they tend to self-segregate once they have a chance to. The problem with high school is that they haven&amp;rsquo;t yet had a chance to. Plus high school tends to be an inward-looking little world whose inhabitants lack confidence, both of which magnify the forces of conformism. So high school is often a bad time for the independent-minded. But there is some advantage even here: it teaches you what to avoid. If you later find yourself in a situation that makes you think &amp;ldquo;this is like high school,&amp;rdquo; you know you should get out. [2]Another place where the independent- and conventional-minded are thrown together is in successful startups. The founders and early employees are almost always independent-minded; otherwise the startup wouldn&amp;rsquo;t be successful. But conventional-minded people greatly outnumber independent-minded ones, so as the company grows, the original spirit of independent-mindedness is inevitably diluted. This causes all kinds of problems besides the obvious one that the company starts to suck. One of the strangest is that the founders find themselves able to speak more freely with founders of other companies than with their own employees. [3]Fortunately you don&amp;rsquo;t have to spend all your time with independent-minded people. It&amp;rsquo;s enough to have one or two you can talk to regularly. And once you find them, they&amp;rsquo;re usually as eager to talk as you are; they need you too. Although universities no longer have the kind of monopoly they used to have on education, good universities are still an excellent way to meet independent-minded people. Most students will still be conventional-minded, but you&amp;rsquo;ll at least find clumps of independent-minded ones, rather than the near zero you may have found in high school.It also works to go in the other direction: as well as cultivating a small collection of independent-minded friends, to try to meet as many different types of people as you can. It will decrease the influence of your immediate peers if you have several other groups of peers. Plus if you&amp;rsquo;re part of several different worlds, you can often import ideas from one to another.But by different types of people, I don&amp;rsquo;t mean demographically different. For this technique to work, they have to think differently. So while it&amp;rsquo;s an excellent idea to go and visit other countries, you can probably find people who think differently right around the corner. When I meet someone who knows a lot about something unusual (which includes practically everyone, if you dig deep enough), I try to learn what they know that other people don&amp;rsquo;t. There are almost always surprises here. It&amp;rsquo;s a good way to make conversation when you meet strangers, but I don&amp;rsquo;t do it to make conversation. I really want to know.You can expand the source of influences in time as well as space, by reading history. When I read history I do it not just to learn what happened, but to try to get inside the heads of people who lived in the past. How did things look to them? This is hard to do, but worth the effort for the same reason it&amp;rsquo;s worth travelling far to triangulate a point.You can also take more explicit measures to prevent yourself from automatically adopting conventional opinions. The most general is to cultivate an attitude of skepticism. When you hear someone say something, stop and ask yourself &amp;ldquo;Is that true?&amp;rdquo; Don&amp;rsquo;t say it out loud. I&amp;rsquo;m not suggesting that you impose on everyone who talks to you the burden of proving what they say, but rather that you take upon yourself the burden of evaluating what they say.Treat it as a puzzle. You know that some accepted ideas will later turn out to be wrong. See if you can guess which. The end goal is not to find flaws in the things you&amp;rsquo;re told, but to find the new ideas that had been concealed by the broken ones. So this game should be an exciting quest for novelty, not a boring protocol for intellectual hygiene. And you&amp;rsquo;ll be surprised, when you start asking &amp;ldquo;Is this true?&amp;rdquo;, how often the answer is not an immediate yes. If you have any imagination, you&amp;rsquo;re more likely to have too many leads to follow than too few.More generally your goal should be not to let anything into your head unexamined, and things don&amp;rsquo;t always enter your head in the form of statements. Some of the most powerful influences are implicit. How do you even notice these? By standing back and watching how other people get their ideas.When you stand back at a sufficient distance, you can see ideas spreading through groups of people like waves. The most obvious are in fashion: you notice a few people wearing a certain kind of shirt, and then more and more, until half the people around you are wearing the same shirt. You may not care much what you wear, but there are intellectual fashions too, and you definitely don&amp;rsquo;t want to participate in those. Not just because you want sovereignty over your own thoughts, but because unfashionable ideas are disproportionately likely to lead somewhere interesting. The best place to find undiscovered ideas is where no one else is looking. [4] ___________ To go beyond this general advice, we need to look at the internal structure of independent-mindedness  at the individual muscles we need to exercise, as it were. It seems to me that it has three components: fastidiousness about truth, resistance to being told what to think, and curiosity.Fastidiousness about truth means more than just not believing things that are false. It means being careful about degree of belief. For most people, degree of belief rushes unexamined toward the extremes: the unlikely becomes impossible, and the probable becomes certain. [5] To the independent-minded, this seems unpardonably sloppy. They&amp;rsquo;re willing to have anything in their heads, from highly speculative hypotheses to (apparent) tautologies, but on subjects they care about, everything has to be labelled with a carefully considered degree of belief. [6]The independent-minded thus have a horror of ideologies, which require one to accept a whole collection of beliefs at once, and to treat them as articles of faith. To an independent-minded person that would seem revolting, just as it would seem to someone fastidious about food to take a bite of a submarine sandwich filled with a large variety of ingredients of indeterminate age and provenance.Without this fastidiousness about truth, you can&amp;rsquo;t be truly independent-minded. It&amp;rsquo;s not enough just to have resistance to being told what to think. Those kind of people reject conventional ideas only to replace them with the most random conspiracy theories. And since these conspiracy theories have often been manufactured to capture them, they end up being less independent-minded than ordinary people, because they&amp;rsquo;re subject to a much more exacting master than mere convention. [7]Can you increase your fastidiousness about truth? I would think so. In my experience, merely thinking about something you&amp;rsquo;re fastidious about causes that fastidiousness to grow. If so, this is one of those rare virtues we can have more of merely by wanting it. And if it&amp;rsquo;s like other forms of fastidiousness, it should also be possible to encourage in children. I certainly got a strong dose of it from my father. [8]The second component of independent-mindedness, resistance to being told what to think, is the most visible of the three. But even this is often misunderstood. The big mistake people make about it is to think of it as a merely negative quality. The language we use reinforces that idea. You&amp;rsquo;re unconventional. You don&amp;rsquo;t care what other people think. But it&amp;rsquo;s not just a kind of immunity. In the most independent-minded people, the desire not to be told what to think is a positive force. It&amp;rsquo;s not mere skepticism, but an active delight in ideas that subvert the conventional wisdom, the more counterintuitive the better.Some of the most novel ideas seemed at the time almost like practical jokes. Think how often your reaction to a novel idea is to laugh. I don&amp;rsquo;t think it&amp;rsquo;s because novel ideas are funny per se, but because novelty and humor share a certain kind of surprisingness. But while not identical, the two are close enough that there is a definite correlation between having a sense of humor and being independent-minded  just as there is between being humorless and being conventional-minded. [9]I don&amp;rsquo;t think we can significantly increase our resistance to being told what to think. It seems the most innate of the three components of independent-mindedness; people who have this quality as adults usually showed all too visible signs of it as children. But if we can&amp;rsquo;t increase our resistance to being told what to think, we can at least shore it up, by surrounding ourselves with other independent-minded people.The third component of independent-mindedness, curiosity, may be the most interesting. To the extent that we can give a brief answer to the question of where novel ideas come from, it&amp;rsquo;s curiosity. That&amp;rsquo;s what people are usually feeling before having them.In my experience, independent-mindedness and curiosity predict one another perfectly. Everyone I know who&amp;rsquo;s independent-minded is deeply curious, and everyone I know who&amp;rsquo;s conventional-minded isn&amp;rsquo;t. Except, curiously, children. All small children are curious. Perhaps the reason is that even the conventional-minded have to be curious in the beginning, in order to learn what the conventions are. Whereas the independent-minded are the gluttons of curiosity, who keep eating even after they&amp;rsquo;re full. [10]The three components of independent-mindedness work in concert: fastidiousness about truth and resistance to being told what to think leave space in your brain, and curiosity finds new ideas to fill it.Interestingly, the three components can substitute for one another in much the same way muscles can. If you&amp;rsquo;re sufficiently fastidious about truth, you don&amp;rsquo;t need to be as resistant to being told what to think, because fastidiousness alone will create sufficient gaps in your knowledge. And either one can compensate for curiosity, because if you create enough space in your brain, your discomfort at the resulting vacuum will add force to your curiosity. Or curiosity can compensate for them: if you&amp;rsquo;re sufficiently curious, you don&amp;rsquo;t need to clear space in your brain, because the new ideas you discover will push out the conventional ones you acquired by default.Because the components of independent-mindedness are so interchangeable, you can have them to varying degrees and still get the same result. So there is not just a single model of independent-mindedness. Some independent-minded people are openly subversive, and others are quietly curious. They all know the secret handshake though.Is there a way to cultivate curiosity? To start with, you want to avoid situations that suppress it. How much does the work you&amp;rsquo;re currently doing engage your curiosity? If the answer is &amp;ldquo;not much,&amp;rdquo; maybe you should change something.The most important active step you can take to cultivate your curiosity is probably to seek out the topics that engage it. Few adults are equally curious about everything, and it doesn&amp;rsquo;t seem as if you can choose which topics interest you. So it&amp;rsquo;s up to you to find them. Or invent them, if necessary.Another way to increase your curiosity is to indulge it, by investigating things you&amp;rsquo;re interested in. Curiosity is unlike most other appetites in this respect: indulging it tends to increase rather than to sate it. Questions lead to more questions.Curiosity seems to be more individual than fastidiousness about truth or resistance to being told what to think. To the degree people have the latter two, they&amp;rsquo;re usually pretty general, whereas different people can be curious about very different things. So perhaps curiosity is the compass here. Perhaps, if your goal is to discover novel ideas, your motto should not be &amp;ldquo;do what you love&amp;rdquo; so much as &amp;ldquo;do what you&amp;rsquo;re curious about.&amp;ldquo;Notes[1] One convenient consequence of the fact that no one identifies as conventional-minded is that you can say what you like about conventional-minded people without getting in too much trouble. When I wrote &amp;ldquo;The Four Quadrants of Conformism&amp;rdquo; I expected a firestorm of rage from the aggressively conventional-minded, but in fact it was quite muted. They sensed that there was something about the essay that they disliked intensely, but they had a hard time finding a specific passage to pin it on.[2] When I ask myself what in my life is like high school, the answer is Twitter. It&amp;rsquo;s not just full of conventional-minded people, as anything its size will inevitably be, but subject to violent storms of conventional-mindedness that remind me of descriptions of Jupiter. But while it probably is a net loss to spend time there, it has at least made me think more about the distinction between independent- and conventional-mindedness, which I probably wouldn&amp;rsquo;t have done otherwise.[3] The decrease in independent-mindedness in growing startups is still an open problem, but there may be solutions.Founders can delay the problem by making a conscious effort only to hire independent-minded people. Which of course also has the ancillary benefit that they have better ideas.Another possible solution is to create policies that somehow disrupt the force of conformism, much as control rods slow chain reactions, so that the conventional-minded aren&amp;rsquo;t as dangerous. The physical separation of Lockheed&amp;rsquo;s Skunk Works may have had this as a side benefit. Recent examples suggest employee forums like Slack may not be an unmitigated good.The most radical solution would be to grow revenues without growing the company. You think hiring that junior PR person will be cheap, compared to a programmer, but what will be the effect on the average level of independent-mindedness in your company? (The growth in staff relative to faculty seems to have had a similar effect on universities.) Perhaps the rule about outsourcing work that&amp;rsquo;s not your &amp;ldquo;core competency&amp;rdquo; should be augmented by one about outsourcing work done by people who&amp;rsquo;d ruin your culture as employees.Some investment firms already seem to be able to grow revenues without growing the number of employees. Automation plus the ever increasing articulation of the &amp;ldquo;tech stack&amp;rdquo; suggest this may one day be possible for product companies.[4] There are intellectual fashions in every field, but their influence varies. One of the reasons politics, for example, tends to be boring is that it&amp;rsquo;s so extremely subject to them. The threshold for having opinions about politics is much lower than the one for having opinions about set theory. So while there are some ideas in politics, in practice they tend to be swamped by waves of intellectual fashion.[5] The conventional-minded are often fooled by the strength of their opinions into believing that they&amp;rsquo;re independent-minded. But strong convictions are not a sign of independent-mindedness. Rather the opposite.[6] Fastidiousness about truth doesn&amp;rsquo;t imply that an independent-minded person won&amp;rsquo;t be dishonest, but that he won&amp;rsquo;t be deluded. It&amp;rsquo;s sort of like the definition of a gentleman as someone who is never unintentionally rude.[7] You see this especially among political extremists. They think themselves nonconformists, but actually they&amp;rsquo;re niche conformists. Their opinions may be different from the average person&amp;rsquo;s, but they are often more influenced by their peers&amp;rsquo; opinions than the average person&amp;rsquo;s are.[8] If we broaden the concept of fastidiousness about truth so that it excludes pandering, bogusness, and pomposity as well as falsehood in the strict sense, our model of independent-mindedness can expand further into the arts.[9] This correlation is far from perfect, though. Gödel and Dirac don&amp;rsquo;t seem to have been very strong in the humor department. But someone who is both &amp;ldquo;neurotypical&amp;rdquo; and humorless is very likely to be conventional-minded.[10] Exception: gossip. Almost everyone is curious about gossip. Thanks to Trevor Blackwell, Paul Buchheit, Patrick Collison, Jessica Livingston, Robert Morris, Harj Taggar, and Peter Thiel for reading drafts of this.Italian Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/todo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/todo/</guid>
      <description>&lt;h1 id=&#34;todo&#34;&gt;Todo&lt;/h1&gt;&#xA;&lt;p&gt;The Top of My Todo List April 2012A palliative care nurse called Bronnie Ware made a list of the biggest regrets of the dying. Her list seems plausible. I could see myself — can see myself — making at least 4 of these 5 mistakes.If you had to compress them into a single piece of advice, it might be: don&amp;rsquo;t be a cog. The 5 regrets paint a portrait of post-industrial man, who shrinks himself into a shape that fits his circumstances, then turns dutifully till he stops.The alarming thing is, the mistakes that produce these regrets are all errors of omission. You forget your dreams, ignore your family, suppress your feelings, neglect your friends, and forget to be happy. Errors of omission are a particularly dangerous type of mistake, because you make them by default.I would like to avoid making these mistakes. But how do you avoid mistakes you make by default? Ideally you transform your life so it has other defaults. But it may not be possible to do that completely. As long as these mistakes happen by default, you probably have to be reminded not to make them. So I inverted the 5 regrets, yielding a list of 5 commands Don&amp;rsquo;t ignore your dreams; don&amp;rsquo;t work too much; say what you think; cultivate friendships; be happy. which I then put at the top of the file I use as a todo list.Japanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/top/</guid>
      <description>&lt;h1 id=&#34;top&#34;&gt;Top&lt;/h1&gt;&#xA;&lt;p&gt;The Top Idea in Your Mind Want to start a startup? Get funded by Y Combinator. July 2010I realized recently that what one thinks about in the shower in the morning is more important than I&amp;rsquo;d thought. I knew it was a good time to have ideas. Now I&amp;rsquo;d go further: now I&amp;rsquo;d say it&amp;rsquo;s hard to do a really good job on anything you don&amp;rsquo;t think about in the shower.Everyone who&amp;rsquo;s worked on difficult problems is probably familiar with the phenomenon of working hard to figure something out, failing, and then suddenly seeing the answer a bit later while doing something else. There&amp;rsquo;s a kind of thinking you do without trying to. I&amp;rsquo;m increasingly convinced this type of thinking is not merely helpful in solving hard problems, but necessary. The tricky part is, you can only control it indirectly. [1]I think most people have one top idea in their mind at any given time. That&amp;rsquo;s the idea their thoughts will drift toward when they&amp;rsquo;re allowed to drift freely. And this idea will thus tend to get all the benefit of that type of thinking, while others are starved of it. Which means it&amp;rsquo;s a disaster to let the wrong idea become the top one in your mind.What made this clear to me was having an idea I didn&amp;rsquo;t want as the top one in my mind for two long stretches.I&amp;rsquo;d noticed startups got way less done when they started raising money, but it was not till we ourselves raised money that I understood why. The problem is not the actual time it takes to meet with investors. The problem is that once you start raising money, raising money becomes the top idea in your mind. That becomes what you think about when you take a shower in the morning. And that means other questions aren&amp;rsquo;t.I&amp;rsquo;d hated raising money when I was running Viaweb, but I&amp;rsquo;d forgotten why I hated it so much. When we raised money for Y Combinator, I remembered. Money matters are particularly likely to become the top idea in your mind. The reason is that they have to be. It&amp;rsquo;s hard to get money. It&amp;rsquo;s not the sort of thing that happens by default. It&amp;rsquo;s not going to happen unless you let it become the thing you think about in the shower. And then you&amp;rsquo;ll make little progress on anything else you&amp;rsquo;d rather be working on. [2](I hear similar complaints from friends who are professors. Professors nowadays seem to have become professional fundraisers who do a little research on the side. It may be time to fix that.)The reason this struck me so forcibly is that for most of the preceding 10 years I&amp;rsquo;d been able to think about what I wanted. So the contrast when I couldn&amp;rsquo;t was sharp. But I don&amp;rsquo;t think this problem is unique to me, because just about every startup I&amp;rsquo;ve seen grinds to a halt when they start raising money  or talking to acquirers.You can&amp;rsquo;t directly control where your thoughts drift. If you&amp;rsquo;re controlling them, they&amp;rsquo;re not drifting. But you can control them indirectly, by controlling what situations you let yourself get into. That has been the lesson for me: be careful what you let become critical to you. Try to get yourself into situations where the most urgent problems are ones you want to think about.You don&amp;rsquo;t have complete control, of course. An emergency could push other thoughts out of your head. But barring emergencies you have a good deal of indirect control over what becomes the top idea in your mind.I&amp;rsquo;ve found there are two types of thoughts especially worth avoiding  thoughts like the Nile Perch in the way they push out more interesting ideas. One I&amp;rsquo;ve already mentioned: thoughts about money. Getting money is almost by definition an attention sink. The other is disputes. These too are engaging in the wrong way: they have the same velcro-like shape as genuinely interesting ideas, but without the substance. So avoid disputes if you want to get real work done. [3]Even Newton fell into this trap. After publishing his theory of colors in 1672 he found himself distracted by disputes for years, finally concluding that the only solution was to stop publishing: I see I have made myself a slave to Philosophy, but if I get free of Mr Linus&amp;rsquo;s business I will resolutely bid adew to it eternally, excepting what I do for my privat satisfaction or leave to come out after me. For I see a man must either resolve to put out nothing new or become a slave to defend it. [4] Linus and his students at Liege were among the more tenacious critics. Newton&amp;rsquo;s biographer Westfall seems to feel he was overreacting: Recall that at the time he wrote, Newton&amp;rsquo;s &amp;ldquo;slavery&amp;rdquo; consisted of five replies to Liege, totalling fourteen printed pages, over the course of a year. I&amp;rsquo;m more sympathetic to Newton. The problem was not the 14 pages, but the pain of having this stupid controversy constantly reintroduced as the top idea in a mind that wanted so eagerly to think about other things.Turning the other cheek turns out to have selfish advantages. Someone who does you an injury hurts you twice: first by the injury itself, and second by taking up your time afterward thinking about it. If you learn to ignore injuries you can at least avoid the second half. I&amp;rsquo;ve found I can to some extent avoid thinking about nasty things people have done to me by telling myself: this doesn&amp;rsquo;t deserve space in my head. I&amp;rsquo;m always delighted to find I&amp;rsquo;ve forgotten the details of disputes, because that means I hadn&amp;rsquo;t been thinking about them. My wife thinks I&amp;rsquo;m more forgiving than she is, but my motives are purely selfish.I suspect a lot of people aren&amp;rsquo;t sure what&amp;rsquo;s the top idea in their mind at any given time. I&amp;rsquo;m often mistaken about it. I tend to think it&amp;rsquo;s the idea I&amp;rsquo;d want to be the top one, rather than the one that is. But it&amp;rsquo;s easy to figure this out: just take a shower. What topic do your thoughts keep returning to? If it&amp;rsquo;s not what you want to be thinking about, you may want to change something.Notes[1] No doubt there are already names for this type of thinking, but I call it &amp;ldquo;ambient thought.&amp;quot;[2] This was made particularly clear in our case, because neither of the funds we raised was difficult, and yet in both cases the process dragged on for months. Moving large amounts of money around is never something people treat casually. The attention required increases with the amount—maybe not linearly, but definitely monotonically.[3] Corollary: Avoid becoming an administrator, or your job will consist of dealing with money and disputes.[4] Letter to Oldenburg, quoted in Westfall, Richard, Life of Isaac Newton, p. 107.Thanks to Sam Altman, Patrick Collison, Jessica Livingston, and Robert Morris for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/trolls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/trolls/</guid>
      <description>&lt;h1 id=&#34;trolls&#34;&gt;Trolls&lt;/h1&gt;&#xA;&lt;p&gt;Trolls February 2008A user on Hacker News recently posted a comment that set me thinking: Something about hacker culture that never really set well with me was this  the nastiness. &amp;hellip; I just don&amp;rsquo;t understand why people troll like they do. I&amp;rsquo;ve thought a lot over the last couple years about the problem of trolls. It&amp;rsquo;s an old one, as old as forums, but we&amp;rsquo;re still just learning what the causes are and how to address them.There are two senses of the word &amp;ldquo;troll.&amp;rdquo; In the original sense it meant someone, usually an outsider, who deliberately stirred up fights in a forum by saying controversial things. [1] For example, someone who didn&amp;rsquo;t use a certain programming language might go to a forum for users of that language and make disparaging remarks about it, then sit back and watch as people rose to the bait. This sort of trolling was in the nature of a practical joke, like letting a bat loose in a room full of people.The definition then spread to people who behaved like assholes in forums, whether intentionally or not. Now when people talk about trolls they usually mean this broader sense of the word. Though in a sense this is historically inaccurate, it is in other ways more accurate, because when someone is being an asshole it&amp;rsquo;s usually uncertain even in their own mind how much is deliberate. That is arguably one of the defining qualities of an asshole.I think trolling in the broader sense has four causes. The most important is distance. People will say things in anonymous forums that they&amp;rsquo;d never dare say to someone&amp;rsquo;s face, just as they&amp;rsquo;ll do things in cars that they&amp;rsquo;d never do as pedestrians  like tailgate people, or honk at them, or cut them off.Trolling tends to be particularly bad in forums related to computers, and I think that&amp;rsquo;s due to the kind of people you find there. Most of them (myself included) are more comfortable dealing with abstract ideas than with people. Hackers can be abrupt even in person. Put them on an anonymous forum, and the problem gets worse.The third cause of trolling is incompetence. If you disagree with something, it&amp;rsquo;s easier to say &amp;ldquo;you suck&amp;rdquo; than to figure out and explain exactly what you disagree with. You&amp;rsquo;re also safe that way from refutation. In this respect trolling is a lot like graffiti. Graffiti happens at the intersection of ambition and incompetence: people want to make their mark on the world, but have no other way to do it than literally making a mark on the world. [2]The final contributing factor is the culture of the forum. Trolls are like children (many are children) in that they&amp;rsquo;re capable of a wide range of behavior depending on what they think will be tolerated. In a place where rudeness isn&amp;rsquo;t tolerated, most can be polite. But vice versa as well.There&amp;rsquo;s a sort of Gresham&amp;rsquo;s Law of trolls: trolls are willing to use a forum with a lot of thoughtful people in it, but thoughtful people aren&amp;rsquo;t willing to use a forum with a lot of trolls in it. Which means that once trolling takes hold, it tends to become the dominant culture. That had already happened to Slashdot and Digg by the time I paid attention to comment threads there, but I watched it happen to Reddit.News.YC is, among other things, an experiment to see if this fate can be avoided. The sites&amp;rsquo;s guidelines explicitly ask people not to say things they wouldn&amp;rsquo;t say face to face. If someone starts being rude, other users will step in and tell them to stop. And when people seem to be deliberately trolling, we ban them ruthlessly.Technical tweaks may also help. On Reddit, votes on your comments don&amp;rsquo;t affect your karma score, but they do on News.YC. And it does seem to influence people when they can see their reputation in the eyes of their peers drain away after making an asshole remark. Often users have second thoughts and delete such comments.One might worry this would prevent people from expressing controversial ideas, but empirically that doesn&amp;rsquo;t seem to be what happens. When people say something substantial that gets modded down, they stubbornly leave it up. What people delete are wisecracks, because they have less invested in them.So far the experiment seems to be working. The level of conversation on News.YC is as high as on any forum I&amp;rsquo;ve seen. But we still only have about 8,000 uniques a day. The conversations on Reddit were good when it was that small. The challenge is whether we can keep things this way.I&amp;rsquo;m optimistic we will. We&amp;rsquo;re not depending just on technical tricks. The core users of News.YC are mostly refugees from other sites that were overrun by trolls. They feel about trolls roughly the way refugees from Cuba or Eastern Europe feel about dictatorships. So there are a lot of people working to keep this from happening again. Notes[1] I mean forum in the general sense of a place to exchange views. The original Internet forums were not web sites but Usenet newsgroups.[2] I&amp;rsquo;m talking here about everyday tagging. Some graffiti is quite impressive (anything becomes art if you do it well enough) but the median tag is just visual spam.Russian Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/twitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/twitter/</guid>
      <description>&lt;h1 id=&#34;twitter&#34;&gt;Twitter&lt;/h1&gt;&#xA;&lt;p&gt;Why Twitter is a Big Deal April 2009Om Malik is the most recent of many people to ask why Twitter is such a big deal.The reason is that it&amp;rsquo;s a new messaging protocol, where you don&amp;rsquo;t specify the recipients. New protocols are rare. Or more precisely, new protocols that take off are. There are only a handful of commonly used ones: TCP/IP (the Internet), SMTP (email), HTTP (the web), and so on. So any new protocol is a big deal. But Twitter is a protocol owned by a private company. That&amp;rsquo;s even rarer.Curiously, the fact that the founders of Twitter have been slow to monetize it may in the long run prove to be an advantage. Because they haven&amp;rsquo;t tried to control it too much, Twitter feels to everyone like previous protocols. One forgets it&amp;rsquo;s owned by a private company. That must have made it easier for Twitter to spread.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/unions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/unions/</guid>
      <description>&lt;h1 id=&#34;unions&#34;&gt;Unions&lt;/h1&gt;&#xA;&lt;p&gt;An Alternative Theory of Unions May 2007People who worry about the increasing gap between rich and poor generally look back on the mid twentieth century as a golden age. In those days we had a large number of high-paying union manufacturing jobs that boosted the median income. I wouldn&amp;rsquo;t quite call the high-paying union job a myth, but I think people who dwell on it are reading too much into it.Oddly enough, it was working with startups that made me realize where the high-paying union job came from. In a rapidly growing market, you don&amp;rsquo;t worry too much about efficiency. It&amp;rsquo;s more important to grow fast. If there&amp;rsquo;s some mundane problem getting in your way, and there&amp;rsquo;s a simple solution that&amp;rsquo;s somewhat expensive, just take it and get on with more important things. EBay didn&amp;rsquo;t win by paying less for servers than their competitors.Difficult though it may be to imagine now, manufacturing was a growth industry in the mid twentieth century. This was an era when small firms making everything from cars to candy were getting consolidated into a new kind of corporation with national reach and huge economies of scale. You had to grow fast or die. Workers were for these companies what servers are for an Internet startup. A reliable supply was more important than low cost.If you looked in the head of a 1950s auto executive, the attitude must have been: sure, give &amp;rsquo;em whatever they ask for, so long as the new model isn&amp;rsquo;t delayed.In other words, those workers were not paid what their work was worth. Circumstances being what they were, companies would have been stupid to insist on paying them so little.If you want a less controversial example of this phenomenon, ask anyone who worked as a consultant building web sites during the Internet Bubble. In the late nineties you could get paid huge sums of money for building the most trivial things. And yet does anyone who was there have any expectation those days will ever return? I doubt it. Surely everyone realizes that was just a temporary aberration.The era of labor unions seems to have been the same kind of aberration, just spread over a longer period, and mixed together with a lot of ideology that prevents people from viewing it with as cold an eye as they would something like consulting during the Bubble.Basically, unions were just Razorfish.People who think the labor movement was the creation of heroic union organizers have a problem to explain: why are unions shrinking now? The best they can do is fall back on the default explanation of people living in fallen civilizations. Our ancestors were giants. The workers of the early twentieth century must have had a moral courage that&amp;rsquo;s lacking today.In fact there&amp;rsquo;s a simpler explanation. The early twentieth century was just a fast-growing startup overpaying for infrastructure. And we in the present are not a fallen people, who have abandoned whatever mysterious high-minded principles produced the high-paying union job. We simply live in a time when the fast-growing companies overspend on different things.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/usa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/usa/</guid>
      <description>&lt;h1 id=&#34;usa&#34;&gt;Usa&lt;/h1&gt;&#xA;&lt;p&gt;Made in USA November 2004(This is a new essay for the Japanese edition of Hackers &amp;amp; Painters. It tries to explain why Americans make some things well and others badly.)A few years ago an Italian friend of mine travelled by train from Boston to Providence. She had only been in America for a couple weeks and hadn&amp;rsquo;t seen much of the country yet. She arrived looking astonished. &amp;ldquo;It&amp;rsquo;s so ugly!&amp;ldquo;People from other rich countries can scarcely imagine the squalor of the man-made bits of America. In travel books they show you mostly natural environments: the Grand Canyon, whitewater rafting, horses in a field. If you see pictures with man-made things in them, it will be either a view of the New York skyline shot from a discreet distance, or a carefully cropped image of a seacoast town in Maine.How can it be, visitors must wonder. How can the richest country in the world look like this?Oddly enough, it may not be a coincidence. Americans are good at some things and bad at others. We&amp;rsquo;re good at making movies and software, and bad at making cars and cities. And I think we may be good at what we&amp;rsquo;re good at for the same reason we&amp;rsquo;re bad at what we&amp;rsquo;re bad at. We&amp;rsquo;re impatient. In America, if you want to do something, you don&amp;rsquo;t worry that it might come out badly, or upset delicate social balances, or that people might think you&amp;rsquo;re getting above yourself. If you want to do something, as Nike says, just do it.This works well in some fields and badly in others. I suspect it works in movies and software because they&amp;rsquo;re both messy processes. &amp;ldquo;Systematic&amp;rdquo; is the last word I&amp;rsquo;d use to describe the way good programmers write software. Code is not something they assemble painstakingly after careful planning, like the pyramids. It&amp;rsquo;s something they plunge into, working fast and constantly changing their minds, like a charcoal sketch.In software, paradoxical as it sounds, good craftsmanship means working fast. If you work slowly and meticulously, you merely end up with a very fine implementation of your initial, mistaken idea. Working slowly and meticulously is premature optimization. Better to get a prototype done fast, and see what new ideas it gives you.It sounds like making movies works a lot like making software. Every movie is a Frankenstein, full of imperfections and usually quite different from what was originally envisioned. But interesting, and finished fairly quickly. I think we get away with this in movies and software because they&amp;rsquo;re both malleable mediums. Boldness pays. And if at the last minute two parts don&amp;rsquo;t quite fit, you can figure out some hack that will at least conceal the problem.Not so with cars, or cities. They are all too physical. If the car business worked like software or movies, you&amp;rsquo;d surpass your competitors by making a car that weighed only fifty pounds, or folded up to the size of a motorcycle when you wanted to park it. But with physical products there are more constraints. You don&amp;rsquo;t win by dramatic innovations so much as by good taste and attention to detail.The trouble is, the very word &amp;ldquo;taste&amp;rdquo; sounds slightly ridiculous to American ears. It seems pretentious, or frivolous, or even effeminate. Blue staters think it&amp;rsquo;s &amp;ldquo;subjective,&amp;rdquo; and red staters think it&amp;rsquo;s for sissies. So anyone in America who really cares about design will be sailing upwind.Twenty years ago we used to hear that the problem with the US car industry was the workers. We don&amp;rsquo;t hear that any more now that Japanese companies are building cars in the US. The problem with American cars is bad design. You can see that just by looking at them.All that extra sheet metal on the AMC Matador wasn&amp;rsquo;t added by the workers. The problem with this car, as with American cars today, is that it was designed by marketing people instead of designers.Why do the Japanese make better cars than us? Some say it&amp;rsquo;s because their culture encourages cooperation. That may come into it. But in this case it seems more to the point that their culture prizes design and craftsmanship.For centuries the Japanese have made finer things than we have in the West. When you look at swords they made in 1200, you just can&amp;rsquo;t believe the date on the label is right. Presumably their cars fit together more precisely than ours for the same reason their joinery always has. They&amp;rsquo;re obsessed with making things well.Not us. When we make something in America, our aim is just to get the job done. Once we reach that point, we take one of two routes. We can stop there, and have something crude but serviceable, like a Vise-grip. Or we can improve it, which usually means encrusting it with gratuitous ornament. When we want to make a car &amp;ldquo;better,&amp;rdquo; we stick tail fins on it, or make it longer, or make the windows smaller, depending on the current fashion.Ditto for houses. In America you can have either a flimsy box banged together out of two by fours and drywall, or a McMansion&amp;ndash; a flimsy box banged together out of two by fours and drywall, but larger, more dramatic-looking, and full of expensive fittings. Rich people don&amp;rsquo;t get better design or craftsmanship; they just get a larger, more conspicuous version of the standard house.We don&amp;rsquo;t especially prize design or craftsmanship here. What we like is speed, and we&amp;rsquo;re willing to do something in an ugly way to get it done fast. In some fields, like software or movies, this is a net win. But it&amp;rsquo;s not just that software and movies are malleable mediums. In those businesses, the designers (though they&amp;rsquo;re not generally called that) have more power. Software companies, at least successful ones, tend to be run by programmers. And in the film industry, though producers may second-guess directors, the director controls most of what appears on the screen. And so American software and movies, and Japanese cars, all have this in common: the people in charge care about design&amp;ndash; the former because the designers are in charge, and the latter because the whole culture cares about design.I think most Japanese executives would be horrified at the idea of making a bad car. Whereas American executives, in their hearts, still believe the most important thing about a car is the image it projects. Make a good car? What&amp;rsquo;s &amp;ldquo;good?&amp;rdquo; It&amp;rsquo;s so subjective. If you want to know how to design a car, ask a focus group.Instead of relying on their own internal design compass (like Henry Ford did), American car companies try to make what marketing people think consumers want. But it isn&amp;rsquo;t working. American cars continue to lose market share. And the reason is that the customer doesn&amp;rsquo;t want what he thinks he wants.Letting focus groups design your cars for you only wins in the short term. In the long term, it pays to bet on good design. The focus group may say they want the meretricious feature du jour, but what they want even more is to imitate sophisticated buyers, and they, though a small minority, really do care about good design. Eventually the pimps and drug dealers notice that the doctors and lawyers have switched from Cadillac to Lexus, and do the same.Apple is an interesting counterexample to the general American trend. If you want to buy a nice CD player, you&amp;rsquo;ll probably buy a Japanese one. But if you want to buy an MP3 player, you&amp;rsquo;ll probably buy an iPod. What happened? Why doesn&amp;rsquo;t Sony dominate MP3 players? Because Apple is in the consumer electronics business now, and unlike other American companies, they&amp;rsquo;re obsessed with good design. Or more precisely, their CEO is.I just got an iPod, and it&amp;rsquo;s not just nice. It&amp;rsquo;s surprisingly nice. For it to surprise me, it must be satisfying expectations I didn&amp;rsquo;t know I had. No focus group is going to discover those. Only a great designer can.Cars aren&amp;rsquo;t the worst thing we make in America. Where the just-do-it model fails most dramatically is in our cities&amp;ndash; or rather, exurbs. If real estate developers operated on a large enough scale, if they built whole towns, market forces would compel them to build towns that didn&amp;rsquo;t suck. But they only build a couple office buildings or suburban streets at a time, and the result is so depressing that the inhabitants consider it a great treat to fly to Europe and spend a couple weeks living what is, for people there, just everyday life. [1]But the just-do-it model does have advantages. It seems the clear winner for generating wealth and technical innovations (which are practically the same thing). I think speed is the reason. It&amp;rsquo;s hard to create wealth by making a commodity. The real value is in things that are new, and if you want to be the first to make something, it helps to work fast. For better or worse, the just-do-it model is fast, whether you&amp;rsquo;re Dan Bricklin writing the prototype of VisiCalc in a weekend, or a real estate developer building a block of shoddy condos in a month.If I had to choose between the just-do-it model and the careful model, I&amp;rsquo;d probably choose just-do-it. But do we have to choose? Could we have it both ways? Could Americans have nice places to live without undermining the impatient, individualistic spirit that makes us good at software? Could other countries introduce more individualism into their technology companies and research labs without having it metastasize as strip malls? I&amp;rsquo;m optimistic. It&amp;rsquo;s harder to say about other countries, but in the US, at least, I think we can have both.Apple is an encouraging example. They&amp;rsquo;ve managed to preserve enough of the impatient, hackerly spirit you need to write software. And yet when you pick up a new Apple laptop, well, it doesn&amp;rsquo;t seem American. It&amp;rsquo;s too perfect. It seems as if it must have been made by a Swedish or a Japanese company.In many technologies, version 2 has higher resolution. Why not in design generally? I think we&amp;rsquo;ll gradually see national characters superseded by occupational characters: hackers in Japan will be allowed to behave with a willfulness that would now seem unJapanese, and products in America will be designed with an insistence on taste that would now seem unAmerican. Perhaps the most successful countries, in the future, will be those most willing to ignore what are now considered national characters, and do each kind of work in the way that works best. Race you.Notes[1] Japanese cities are ugly too, but for different reasons. Japan is prone to earthquakes, so buildings are traditionally seen as temporary; there is no grand tradition of city planning like the one Europeans inherited from Rome. The other cause is the notoriously corrupt relationship between the government and construction companies.Thanks to Trevor Blackwell, Barry Eisler, Sarah Harlin, Shiro Kawai, Jessica Livingston, Jackie McDonough, Robert Morris, and Eric Raymond for reading drafts of this.American GothicThe John Rain Books&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/useful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/useful/</guid>
      <description>&lt;h1 id=&#34;useful&#34;&gt;Useful&lt;/h1&gt;&#xA;&lt;p&gt;How to Write Usefully February 2020What should an essay be? Many people would say persuasive. That&amp;rsquo;s what a lot of us were taught essays should be. But I think we can aim for something more ambitious: that an essay should be useful.To start with, that means it should be correct. But it&amp;rsquo;s not enough merely to be correct. It&amp;rsquo;s easy to make a statement correct by making it vague. That&amp;rsquo;s a common flaw in academic writing, for example. If you know nothing at all about an issue, you can&amp;rsquo;t go wrong by saying that the issue is a complex one, that there are many factors to be considered, that it&amp;rsquo;s a mistake to take too simplistic a view of it, and so on.Though no doubt correct, such statements tell the reader nothing. Useful writing makes claims that are as strong as they can be made without becoming false.For example, it&amp;rsquo;s more useful to say that Pike&amp;rsquo;s Peak is near the middle of Colorado than merely somewhere in Colorado. But if I say it&amp;rsquo;s in the exact middle of Colorado, I&amp;rsquo;ve now gone too far, because it&amp;rsquo;s a bit east of the middle.Precision and correctness are like opposing forces. It&amp;rsquo;s easy to satisfy one if you ignore the other. The converse of vaporous academic writing is the bold, but false, rhetoric of demagogues. Useful writing is bold, but true.It&amp;rsquo;s also two other things: it tells people something important, and that at least some of them didn&amp;rsquo;t already know.Telling people something they didn&amp;rsquo;t know doesn&amp;rsquo;t always mean surprising them. Sometimes it means telling them something they knew unconsciously but had never put into words. In fact those may be the more valuable insights, because they tend to be more fundamental.Let&amp;rsquo;s put them all together. Useful writing tells people something true and important that they didn&amp;rsquo;t already know, and tells them as unequivocally as possible.Notice these are all a matter of degree. For example, you can&amp;rsquo;t expect an idea to be novel to everyone. Any insight that you have will probably have already been had by at least one of the world&amp;rsquo;s 7 billion people. But it&amp;rsquo;s sufficient if an idea is novel to a lot of readers.Ditto for correctness, importance, and strength. In effect the four components are like numbers you can multiply together to get a score for usefulness. Which I realize is almost awkwardly reductive, but nonetheless true._____ How can you ensure that the things you say are true and novel and important? Believe it or not, there is a trick for doing this. I learned it from my friend Robert Morris, who has a horror of saying anything dumb. His trick is not to say anything unless he&amp;rsquo;s sure it&amp;rsquo;s worth hearing. This makes it hard to get opinions out of him, but when you do, they&amp;rsquo;re usually right.Translated into essay writing, what this means is that if you write a bad sentence, you don&amp;rsquo;t publish it. You delete it and try again. Often you abandon whole branches of four or five paragraphs. Sometimes a whole essay.You can&amp;rsquo;t ensure that every idea you have is good, but you can ensure that every one you publish is, by simply not publishing the ones that aren&amp;rsquo;t.In the sciences, this is called publication bias, and is considered bad. When some hypothesis you&amp;rsquo;re exploring gets inconclusive results, you&amp;rsquo;re supposed to tell people about that too. But with essay writing, publication bias is the way to go.My strategy is loose, then tight. I write the first draft of an essay fast, trying out all kinds of ideas. Then I spend days rewriting it very carefully.I&amp;rsquo;ve never tried to count how many times I proofread essays, but I&amp;rsquo;m sure there are sentences I&amp;rsquo;ve read 100 times before publishing them. When I proofread an essay, there are usually passages that stick out in an annoying way, sometimes because they&amp;rsquo;re clumsily written, and sometimes because I&amp;rsquo;m not sure they&amp;rsquo;re true. The annoyance starts out unconscious, but after the tenth reading or so I&amp;rsquo;m saying &amp;ldquo;Ugh, that part&amp;rdquo; each time I hit it. They become like briars that catch your sleeve as you walk past. Usually I won&amp;rsquo;t publish an essay till they&amp;rsquo;re all gone  till I can read through the whole thing without the feeling of anything catching.I&amp;rsquo;ll sometimes let through a sentence that seems clumsy, if I can&amp;rsquo;t think of a way to rephrase it, but I will never knowingly let through one that doesn&amp;rsquo;t seem correct. You never have to. If a sentence doesn&amp;rsquo;t seem right, all you have to do is ask why it doesn&amp;rsquo;t, and you&amp;rsquo;ve usually got the replacement right there in your head.This is where essayists have an advantage over journalists. You don&amp;rsquo;t have a deadline. You can work for as long on an essay as you need to get it right. You don&amp;rsquo;t have to publish the essay at all, if you can&amp;rsquo;t get it right. Mistakes seem to lose courage in the face of an enemy with unlimited resources. Or that&amp;rsquo;s what it feels like. What&amp;rsquo;s really going on is that you have different expectations for yourself. You&amp;rsquo;re like a parent saying to a child &amp;ldquo;we can sit here all night till you eat your vegetables.&amp;rdquo; Except you&amp;rsquo;re the child too.I&amp;rsquo;m not saying no mistake gets through. For example, I added condition (c) in &amp;ldquo;A Way to Detect Bias&amp;rdquo; after readers pointed out that I&amp;rsquo;d omitted it. But in practice you can catch nearly all of them.There&amp;rsquo;s a trick for getting importance too. It&amp;rsquo;s like the trick I suggest to young founders for getting startup ideas: to make something you yourself want. You can use yourself as a proxy for the reader. The reader is not completely unlike you, so if you write about topics that seem important to you, they&amp;rsquo;ll probably seem important to a significant number of readers as well.Importance has two factors. It&amp;rsquo;s the number of people something matters to, times how much it matters to them. Which means of course that it&amp;rsquo;s not a rectangle, but a sort of ragged comb, like a Riemann sum.The way to get novelty is to write about topics you&amp;rsquo;ve thought about a lot. Then you can use yourself as a proxy for the reader in this department too. Anything you notice that surprises you, who&amp;rsquo;ve thought about the topic a lot, will probably also surprise a significant number of readers. And here, as with correctness and importance, you can use the Morris technique to ensure that you will. If you don&amp;rsquo;t learn anything from writing an essay, don&amp;rsquo;t publish it.You need humility to measure novelty, because acknowledging the novelty of an idea means acknowledging your previous ignorance of it. Confidence and humility are often seen as opposites, but in this case, as in many others, confidence helps you to be humble. If you know you&amp;rsquo;re an expert on some topic, you can freely admit when you learn something you didn&amp;rsquo;t know, because you can be confident that most other people wouldn&amp;rsquo;t know it either.The fourth component of useful writing, strength, comes from two things: thinking well, and the skillful use of qualification. These two counterbalance each other, like the accelerator and clutch in a car with a manual transmission. As you try to refine the expression of an idea, you adjust the qualification accordingly. Something you&amp;rsquo;re sure of, you can state baldly with no qualification at all, as I did the four components of useful writing. Whereas points that seem dubious have to be held at arm&amp;rsquo;s length with perhapses.As you refine an idea, you&amp;rsquo;re pushing in the direction of less qualification. But you can rarely get it down to zero. Sometimes you don&amp;rsquo;t even want to, if it&amp;rsquo;s a side point and a fully refined version would be too long.Some say that qualifications weaken writing. For example, that you should never begin a sentence in an essay with &amp;ldquo;I think,&amp;rdquo; because if you&amp;rsquo;re saying it, then of course you think it. And it&amp;rsquo;s true that &amp;ldquo;I think x&amp;rdquo; is a weaker statement than simply &amp;ldquo;x.&amp;rdquo; Which is exactly why you need &amp;ldquo;I think.&amp;rdquo; You need it to express your degree of certainty.But qualifications are not scalars. They&amp;rsquo;re not just experimental error. There must be 50 things they can express: how broadly something applies, how you know it, how happy you are it&amp;rsquo;s so, even how it could be falsified. I&amp;rsquo;m not going to try to explore the structure of qualification here. It&amp;rsquo;s probably more complex than the whole topic of writing usefully. Instead I&amp;rsquo;ll just give you a practical tip: Don&amp;rsquo;t underestimate qualification. It&amp;rsquo;s an important skill in its own right, not just a sort of tax you have to pay in order to avoid saying things that are false. So learn and use its full range. It may not be fully half of having good ideas, but it&amp;rsquo;s part of having them.There&amp;rsquo;s one other quality I aim for in essays: to say things as simply as possible. But I don&amp;rsquo;t think this is a component of usefulness. It&amp;rsquo;s more a matter of consideration for the reader. And it&amp;rsquo;s a practical aid in getting things right; a mistake is more obvious when expressed in simple language. But I&amp;rsquo;ll admit that the main reason I write simply is not for the reader&amp;rsquo;s sake or because it helps get things right, but because it bothers me to use more or fancier words than I need to. It seems inelegant, like a program that&amp;rsquo;s too long.I realize florid writing works for some people. But unless you&amp;rsquo;re sure you&amp;rsquo;re one of them, the best advice is to write as simply as you can._____ I believe the formula I&amp;rsquo;ve given you, importance + novelty + correctness + strength, is the recipe for a good essay. But I should warn you that it&amp;rsquo;s also a recipe for making people mad.The root of the problem is novelty. When you tell people something they didn&amp;rsquo;t know, they don&amp;rsquo;t always thank you for it. Sometimes the reason people don&amp;rsquo;t know something is because they don&amp;rsquo;t want to know it. Usually because it contradicts some cherished belief. And indeed, if you&amp;rsquo;re looking for novel ideas, popular but mistaken beliefs are a good place to find them. Every popular mistaken belief creates a dead zone of ideas around it that are relatively unexplored because they contradict it.The strength component just makes things worse. If there&amp;rsquo;s anything that annoys people more than having their cherished assumptions contradicted, it&amp;rsquo;s having them flatly contradicted.Plus if you&amp;rsquo;ve used the Morris technique, your writing will seem quite confident. Perhaps offensively confident, to people who disagree with you. The reason you&amp;rsquo;ll seem confident is that you are confident: you&amp;rsquo;ve cheated, by only publishing the things you&amp;rsquo;re sure of. It will seem to people who try to disagree with you that you never admit you&amp;rsquo;re wrong. In fact you constantly admit you&amp;rsquo;re wrong. You just do it before publishing instead of after.And if your writing is as simple as possible, that just makes things worse. Brevity is the diction of command. If you watch someone delivering unwelcome news from a position of inferiority, you&amp;rsquo;ll notice they tend to use lots of words, to soften the blow. Whereas to be short with someone is more or less to be rude to them.It can sometimes work to deliberately phrase statements more weakly than you mean. To put &amp;ldquo;perhaps&amp;rdquo; in front of something you&amp;rsquo;re actually quite sure of. But you&amp;rsquo;ll notice that when writers do this, they usually do it with a wink.I don&amp;rsquo;t like to do this too much. It&amp;rsquo;s cheesy to adopt an ironic tone for a whole essay. I think we just have to face the fact that elegance and curtness are two names for the same thing.You might think that if you work sufficiently hard to ensure that an essay is correct, it will be invulnerable to attack. That&amp;rsquo;s sort of true. It will be invulnerable to valid attacks. But in practice that&amp;rsquo;s little consolation.In fact, the strength component of useful writing will make you particularly vulnerable to misrepresentation. If you&amp;rsquo;ve stated an idea as strongly as you could without making it false, all anyone has to do is to exaggerate slightly what you said, and now it is false.Much of the time they&amp;rsquo;re not even doing it deliberately. One of the most surprising things you&amp;rsquo;ll discover, if you start writing essays, is that people who disagree with you rarely disagree with what you&amp;rsquo;ve actually written. Instead they make up something you said and disagree with that.For what it&amp;rsquo;s worth, the countermove is to ask someone who does this to quote a specific sentence or passage you wrote that they believe is false, and explain why. I say &amp;ldquo;for what it&amp;rsquo;s worth&amp;rdquo; because they never do. So although it might seem that this could get a broken discussion back on track, the truth is that it was never on track in the first place.Should you explicitly forestall likely misinterpretations? Yes, if they&amp;rsquo;re misinterpretations a reasonably smart and well-intentioned person might make. In fact it&amp;rsquo;s sometimes better to say something slightly misleading and then add the correction than to try to get an idea right in one shot. That can be more efficient, and can also model the way such an idea would be discovered.But I don&amp;rsquo;t think you should explicitly forestall intentional misinterpretations in the body of an essay. An essay is a place to meet honest readers. You don&amp;rsquo;t want to spoil your house by putting bars on the windows to protect against dishonest ones. The place to protect against intentional misinterpretations is in end-notes. But don&amp;rsquo;t think you can predict them all. People are as ingenious at misrepresenting you when you say something they don&amp;rsquo;t want to hear as they are at coming up with rationalizations for things they want to do but know they shouldn&amp;rsquo;t. I suspect it&amp;rsquo;s the same skill._____ As with most other things, the way to get better at writing essays is to practice. But how do you start? Now that we&amp;rsquo;ve examined the structure of useful writing, we can rephrase that question more precisely. Which constraint do you relax initially? The answer is, the first component of importance: the number of people who care about what you write.If you narrow the topic sufficiently, you can probably find something you&amp;rsquo;re an expert on. Write about that to start with. If you only have ten readers who care, that&amp;rsquo;s fine. You&amp;rsquo;re helping them, and you&amp;rsquo;re writing. Later you can expand the breadth of topics you write about.The other constraint you can relax is a little surprising: publication. Writing essays doesn&amp;rsquo;t have to mean publishing them. That may seem strange now that the trend is to publish every random thought, but it worked for me. I wrote what amounted to essays in notebooks for about 15 years. I never published any of them and never expected to. I wrote them as a way of figuring things out. But when the web came along I&amp;rsquo;d had a lot of practice.Incidentally, Steve Wozniak did the same thing. In high school he designed computers on paper for fun. He couldn&amp;rsquo;t build them because he couldn&amp;rsquo;t afford the components. But when Intel launched 4K DRAMs in 1975, he was ready._____ How many essays are there left to write though? The answer to that question is probably the most exciting thing I&amp;rsquo;ve learned about essay writing. Nearly all of them are left to write.Although the essay is an old form, it hasn&amp;rsquo;t been assiduously cultivated. In the print era, publication was expensive, and there wasn&amp;rsquo;t enough demand for essays to publish that many. You could publish essays if you were already well known for writing something else, like novels. Or you could write book reviews that you took over to express your own ideas. But there was not really a direct path to becoming an essayist. Which meant few essays got written, and those that did tended to be about a narrow range of subjects.Now, thanks to the internet, there&amp;rsquo;s a path. Anyone can publish essays online. You start in obscurity, perhaps, but at least you can start. You don&amp;rsquo;t need anyone&amp;rsquo;s permission.It sometimes happens that an area of knowledge sits quietly for years, till some change makes it explode. Cryptography did this to number theory. The internet is doing it to the essay.The exciting thing is not that there&amp;rsquo;s a lot left to write, but that there&amp;rsquo;s a lot left to discover. There&amp;rsquo;s a certain kind of idea that&amp;rsquo;s best discovered by writing essays. If most essays are still unwritten, most such ideas are still undiscovered.Notes[1] Put railings on the balconies, but don&amp;rsquo;t put bars on the windows.[2] Even now I sometimes write essays that are not meant for publication. I wrote several to figure out what Y Combinator should do, and they were really helpful.Thanks to Trevor Blackwell, Daniel Gackle, Jessica Livingston, and Robert Morris for reading drafts of this.Spanish TranslationJapanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/users/</guid>
      <description>&lt;h1 id=&#34;users&#34;&gt;Users&lt;/h1&gt;&#xA;&lt;p&gt;What I&amp;rsquo;ve Learned from Users September 2022I recently told applicants to Y Combinator that the best advice I could give for getting in, per word, was Explain what you&amp;rsquo;ve learned from users. That tests a lot of things: whether you&amp;rsquo;re paying attention to users, how well you understand them, and even how much they need what you&amp;rsquo;re making.Afterward I asked myself the same question. What have I learned from YC&amp;rsquo;s users, the startups we&amp;rsquo;ve funded?The first thing that came to mind was that most startups have the same problems. No two have exactly the same problems, but it&amp;rsquo;s surprising how much the problems remain the same, regardless of what they&amp;rsquo;re making. Once you&amp;rsquo;ve advised 100 startups all doing different things, you rarely encounter problems you haven&amp;rsquo;t seen before.This fact is one of the things that makes YC work. But I didn&amp;rsquo;t know it when we started YC. I only had a few data points: our own startup, and those started by friends. It was a surprise to me how often the same problems recur in different forms. Many later stage investors might never realize this, because later stage investors might not advise 100 startups in their whole career, but a YC partner will get this much experience in the first year or two.That&amp;rsquo;s one advantage of funding large numbers of early stage companies rather than smaller numbers of later-stage ones. You get a lot of data. Not just because you&amp;rsquo;re looking at more companies, but also because more goes wrong.But knowing (nearly) all the problems startups can encounter doesn&amp;rsquo;t mean that advising them can be automated, or reduced to a formula. There&amp;rsquo;s no substitute for individual office hours with a YC partner. Each startup is unique, which means they have to be advised by specific partners who know them well. [1]We learned that the hard way, in the notorious &amp;ldquo;batch that broke YC&amp;rdquo; in the summer of 2012. Up till that point we treated the partners as a pool. When a startup requested office hours, they got the next available slot posted by any partner. That meant every partner had to know every startup. This worked fine up to 60 startups, but when the batch grew to 80, everything broke. The founders probably didn&amp;rsquo;t realize anything was wrong, but the partners were confused and unhappy because halfway through the batch they still didn&amp;rsquo;t know all the companies yet. [2]At first I was puzzled. How could things be fine at 60 startups and broken at 80? It was only a third more. Then I realized what had happened. We were using an O(n2) algorithm. So of course it blew up.The solution we adopted was the classic one in these situations. We sharded the batch into smaller groups of startups, each overseen by a dedicated group of partners. That fixed the problem, and has worked fine ever since. But the batch that broke YC was a powerful demonstration of how individualized the process of advising startups has to be.Another related surprise is how bad founders can be at realizing what their problems are. Founders will sometimes come in to talk about some problem, and we&amp;rsquo;ll discover another much bigger one in the course of the conversation. For example (and this case is all too common), founders will come in to talk about the difficulties they&amp;rsquo;re having raising money, and after digging into their situation, it turns out the reason is that the company is doing badly, and investors can tell. Or founders will come in worried that they still haven&amp;rsquo;t cracked the problem of user acquisition, and the reason turns out to be that their product isn&amp;rsquo;t good enough. There have been times when I&amp;rsquo;ve asked &amp;ldquo;Would you use this yourself, if you hadn&amp;rsquo;t built it?&amp;rdquo; and the founders, on thinking about it, said &amp;ldquo;No.&amp;rdquo; Well, there&amp;rsquo;s the reason you&amp;rsquo;re having trouble getting users.Often founders know what their problems are, but not their relative importance. [3] They&amp;rsquo;ll come in to talk about three problems they&amp;rsquo;re worrying about. One is of moderate importance, one doesn&amp;rsquo;t matter at all, and one will kill the company if it isn&amp;rsquo;t addressed immediately. It&amp;rsquo;s like watching one of those horror movies where the heroine is deeply upset that her boyfriend cheated on her, and only mildly curious about the door that&amp;rsquo;s mysteriously ajar. You want to say: never mind about your boyfriend, think about that door! Fortunately in office hours you can. So while startups still die with some regularity, it&amp;rsquo;s rarely because they wandered into a room containing a murderer. The YC partners can warn them where the murderers are.Not that founders listen. That was another big surprise: how often founders don&amp;rsquo;t listen to us. A couple weeks ago I talked to a partner who had been working for YC for a couple batches and was starting to see the pattern. &amp;ldquo;They come back a year later,&amp;rdquo; she said, &amp;ldquo;and say &amp;lsquo;We wish we&amp;rsquo;d listened to you.&amp;rsquo;&amp;ldquo;It took me a long time to figure out why founders don&amp;rsquo;t listen. At first I thought it was mere stubbornness. That&amp;rsquo;s part of the reason, but another and probably more important reason is that so much about startups is counterintuitive. And when you tell someone something counterintuitive, what it sounds to them is wrong. So the reason founders don&amp;rsquo;t listen to us is that they don&amp;rsquo;t believe us. At least not till experience teaches them otherwise. [4]The reason startups are so counterintuitive is that they&amp;rsquo;re so different from most people&amp;rsquo;s other experiences. No one knows what it&amp;rsquo;s like except those who&amp;rsquo;ve done it. Which is why YC partners should usually have been founders themselves. But strangely enough, the counterintuitiveness of startups turns out to be another of the things that make YC work. If it weren&amp;rsquo;t counterintuitive, founders wouldn&amp;rsquo;t need our advice about how to do it.Focus is doubly important for early stage startups, because not only do they have a hundred different problems, they don&amp;rsquo;t have anyone to work on them except the founders. If the founders focus on things that don&amp;rsquo;t matter, there&amp;rsquo;s no one focusing on the things that do. So the essence of what happens at YC is to figure out which problems matter most, then cook up ideas for solving them — ideally at a resolution of a week or less — and then try those ideas and measure how well they worked. The focus is on action, with measurable, near-term results.This doesn&amp;rsquo;t imply that founders should rush forward regardless of the consequences. If you correct course at a high enough frequency, you can be simultaneously decisive at a micro scale and tentative at a macro scale. The result is a somewhat winding path, but executed very rapidly, like the path a running back takes downfield. And in practice there&amp;rsquo;s less backtracking than you might expect. Founders usually guess right about which direction to run in, especially if they have someone experienced like a YC partner to bounce their hypotheses off. And when they guess wrong, they notice fast, because they&amp;rsquo;ll talk about the results at office hours the next week. [5]A small improvement in navigational ability can make you a lot faster, because it has a double effect: the path is shorter, and you can travel faster along it when you&amp;rsquo;re more certain it&amp;rsquo;s the right one. That&amp;rsquo;s where a lot of YC&amp;rsquo;s value lies, in helping founders get an extra increment of focus that lets them move faster. And since moving fast is the essence of a startup, YC in effect makes startups more startup-like.Speed defines startups. Focus enables speed. YC improves focus.Why are founders uncertain about what to do? Partly because startups almost by definition are doing something new, which means no one knows how to do it yet, or in most cases even what &amp;ldquo;it&amp;rdquo; is. Partly because startups are so counterintuitive generally. And partly because many founders, especially young and ambitious ones, have been trained to win the wrong way. That took me years to figure out. The educational system in most countries trains you to win by hacking the test instead of actually doing whatever it&amp;rsquo;s supposed to measure. But that stops working when you start a startup. So part of what YC does is to retrain founders to stop trying to hack the test. (It takes a surprisingly long time. A year in, you still see them reverting to their old habits.)YC is not simply more experienced founders passing on their knowledge. It&amp;rsquo;s more like specialization than apprenticeship. The knowledge of the YC partners and the founders have different shapes: It wouldn&amp;rsquo;t be worthwhile for a founder to acquire the encyclopedic knowledge of startup problems that a YC partner has, just as it wouldn&amp;rsquo;t be worthwhile for a YC partner to acquire the depth of domain knowledge that a founder has. That&amp;rsquo;s why it can still be valuable for an experienced founder to do YC, just as it can still be valuable for an experienced athlete to have a coach.The other big thing YC gives founders is colleagues, and this may be even more important than the advice of partners. If you look at history, great work clusters around certain places and institutions: Florence in the late 15th century, the University of Göttingen in the late 19th, The New Yorker under Ross, Bell Labs, Xerox PARC. However good you are, good colleagues make you better. Indeed, very ambitious people probably need colleagues more than anyone else, because they&amp;rsquo;re so starved for them in everyday life.Whether or not YC manages one day to be listed alongside those famous clusters, it won&amp;rsquo;t be for lack of trying. We were very aware of this historical phenomenon and deliberately designed YC to be one. By this point it&amp;rsquo;s not bragging to say that it&amp;rsquo;s the biggest cluster of great startup founders. Even people trying to attack YC concede that.Colleagues and startup founders are two of the most powerful forces in the world, so you&amp;rsquo;d expect it to have a big effect to combine them. Before YC, to the extent people thought about the question at all, most assumed they couldn&amp;rsquo;t be combined — that loneliness was the price of independence. That was how it felt to us when we started our own startup in Boston in the 1990s. We had a handful of older people we could go to for advice (of varying quality), but no peers. There was no one we could commiserate with about the misbehavior of investors, or speculate with about the future of technology. I often tell founders to make something they themselves want, and YC is certainly that: it was designed to be exactly what we wanted when we were starting a startup.One thing we wanted was to be able to get seed funding without having to make the rounds of random rich people. That has become a commodity now, at least in the US. But great colleagues can never become a commodity, because the fact that they cluster in some places means they&amp;rsquo;re proportionally absent from the rest.Something magical happens where they do cluster though. The energy in the room at a YC dinner is like nothing else I&amp;rsquo;ve experienced. We would have been happy just to have one or two other startups to talk to. When you have a whole roomful it&amp;rsquo;s another thing entirely.YC founders aren&amp;rsquo;t just inspired by one another. They also help one another. That&amp;rsquo;s the happiest thing I&amp;rsquo;ve learned about startup founders: how generous they can be in helping one another. We noticed this in the first batch and consciously designed YC to magnify it. The result is something far more intense than, say, a university. Between the partners, the alumni, and their batchmates, founders are surrounded by people who want to help them, and can.Notes[1] This is why I&amp;rsquo;ve never liked it when people refer to YC as a &amp;ldquo;bootcamp.&amp;rdquo; It&amp;rsquo;s intense like a bootcamp, but the opposite in structure. Instead of everyone doing the same thing, they&amp;rsquo;re each talking to YC partners to figure out what their specific startup needs.[2] When I say the summer 2012 batch was broken, I mean it felt to the partners that something was wrong. Things weren&amp;rsquo;t yet so broken that the startups had a worse experience. In fact that batch did unusually well.[3] This situation reminds me of the research showing that people are much better at answering questions than they are at judging how accurate their answers are. The two phenomena feel very similar.[4] The Airbnbs were particularly good at listening — partly because they were flexible and disciplined, but also because they&amp;rsquo;d had such a rough time during the preceding year. They were ready to listen.[5] The optimal unit of decisiveness depends on how long it takes to get results, and that depends on the type of problem you&amp;rsquo;re solving. When you&amp;rsquo;re negotiating with investors, it could be a couple days, whereas if you&amp;rsquo;re building hardware it could be months. Thanks to Trevor Blackwell, Jessica Livingston, Harj Taggar, and Garry Tan for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/vb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/vb/</guid>
      <description>&lt;h1 id=&#34;vb&#34;&gt;Vb&lt;/h1&gt;&#xA;&lt;p&gt;Life is Short January 2016Life is short, as everyone knows. When I was a kid I used to wonder about this. Is life actually short, or are we really complaining about its finiteness? Would we be just as likely to feel life was short if we lived 10 times as long?Since there didn&amp;rsquo;t seem any way to answer this question, I stopped wondering about it. Then I had kids. That gave me a way to answer the question, and the answer is that life actually is short.Having kids showed me how to convert a continuous quantity, time, into discrete quantities. You only get 52 weekends with your 2 year old. If Christmas-as-magic lasts from say ages 3 to 10, you only get to watch your child experience it 8 times. And while it&amp;rsquo;s impossible to say what is a lot or a little of a continuous quantity like time, 8 is not a lot of something. If you had a handful of 8 peanuts, or a shelf of 8 books to choose from, the quantity would definitely seem limited, no matter what your lifespan was.Ok, so life actually is short. Does it make any difference to know that?It has for me. It means arguments of the form &amp;ldquo;Life is too short for x&amp;rdquo; have great force. It&amp;rsquo;s not just a figure of speech to say that life is too short for something. It&amp;rsquo;s not just a synonym for annoying. If you find yourself thinking that life is too short for something, you should try to eliminate it if you can.When I ask myself what I&amp;rsquo;ve found life is too short for, the word that pops into my head is &amp;ldquo;bullshit.&amp;rdquo; I realize that answer is somewhat tautological. It&amp;rsquo;s almost the definition of bullshit that it&amp;rsquo;s the stuff that life is too short for. And yet bullshit does have a distinctive character. There&amp;rsquo;s something fake about it. It&amp;rsquo;s the junk food of experience. [1]If you ask yourself what you spend your time on that&amp;rsquo;s bullshit, you probably already know the answer. Unnecessary meetings, pointless disputes, bureaucracy, posturing, dealing with other people&amp;rsquo;s mistakes, traffic jams, addictive but unrewarding pastimes.There are two ways this kind of thing gets into your life: it&amp;rsquo;s either forced on you, or it tricks you. To some extent you have to put up with the bullshit forced on you by circumstances. You need to make money, and making money consists mostly of errands. Indeed, the law of supply and demand ensures that: the more rewarding some kind of work is, the cheaper people will do it. It may be that less bullshit is forced on you than you think, though. There has always been a stream of people who opt out of the default grind and go live somewhere where opportunities are fewer in the conventional sense, but life feels more authentic. This could become more common.You can do it on a smaller scale without moving. The amount of time you have to spend on bullshit varies between employers. Most large organizations (and many small ones) are steeped in it. But if you consciously prioritize bullshit avoidance over other factors like money and prestige, you can probably find employers that will waste less of your time.If you&amp;rsquo;re a freelancer or a small company, you can do this at the level of individual customers. If you fire or avoid toxic customers, you can decrease the amount of bullshit in your life by more than you decrease your income.But while some amount of bullshit is inevitably forced on you, the bullshit that sneaks into your life by tricking you is no one&amp;rsquo;s fault but your own. And yet the bullshit you choose may be harder to eliminate than the bullshit that&amp;rsquo;s forced on you. Things that lure you into wasting your time have to be really good at tricking you. An example that will be familiar to a lot of people is arguing online. When someone contradicts you, they&amp;rsquo;re in a sense attacking you. Sometimes pretty overtly. Your instinct when attacked is to defend yourself. But like a lot of instincts, this one wasn&amp;rsquo;t designed for the world we now live in. Counterintuitive as it feels, it&amp;rsquo;s better most of the time not to defend yourself. Otherwise these people are literally taking your life. [2]Arguing online is only incidentally addictive. There are more dangerous things than that. As I&amp;rsquo;ve written before, one byproduct of technical progress is that things we like tend to become more addictive. Which means we will increasingly have to make a conscious effort to avoid addictions  to stand outside ourselves and ask &amp;ldquo;is this how I want to be spending my time?&amp;ldquo;As well as avoiding bullshit, one should actively seek out things that matter. But different things matter to different people, and most have to learn what matters to them. A few are lucky and realize early on that they love math or taking care of animals or writing, and then figure out a way to spend a lot of time doing it. But most people start out with a life that&amp;rsquo;s a mix of things that matter and things that don&amp;rsquo;t, and only gradually learn to distinguish between them.For the young especially, much of this confusion is induced by the artificial situations they find themselves in. In middle school and high school, what the other kids think of you seems the most important thing in the world. But when you ask adults what they got wrong at that age, nearly all say they cared too much what other kids thought of them.One heuristic for distinguishing stuff that matters is to ask yourself whether you&amp;rsquo;ll care about it in the future. Fake stuff that matters usually has a sharp peak of seeming to matter. That&amp;rsquo;s how it tricks you. The area under the curve is small, but its shape jabs into your consciousness like a pin.The things that matter aren&amp;rsquo;t necessarily the ones people would call &amp;ldquo;important.&amp;rdquo; Having coffee with a friend matters. You won&amp;rsquo;t feel later like that was a waste of time.One great thing about having small children is that they make you spend time on things that matter: them. They grab your sleeve as you&amp;rsquo;re staring at your phone and say &amp;ldquo;will you play with me?&amp;rdquo; And odds are that is in fact the bullshit-minimizing option.If life is short, we should expect its shortness to take us by surprise. And that is just what tends to happen. You take things for granted, and then they&amp;rsquo;re gone. You think you can always write that book, or climb that mountain, or whatever, and then you realize the window has closed. The saddest windows close when other people die. Their lives are short too. After my mother died, I wished I&amp;rsquo;d spent more time with her. I lived as if she&amp;rsquo;d always be there. And in her typical quiet way she encouraged that illusion. But an illusion it was. I think a lot of people make the same mistake I did.The usual way to avoid being taken by surprise by something is to be consciously aware of it. Back when life was more precarious, people used to be aware of death to a degree that would now seem a bit morbid. I&amp;rsquo;m not sure why, but it doesn&amp;rsquo;t seem the right answer to be constantly reminding oneself of the grim reaper hovering at everyone&amp;rsquo;s shoulder. Perhaps a better solution is to look at the problem from the other end. Cultivate a habit of impatience about the things you most want to do. Don&amp;rsquo;t wait before climbing that mountain or writing that book or visiting your mother. You don&amp;rsquo;t need to be constantly reminding yourself why you shouldn&amp;rsquo;t wait. Just don&amp;rsquo;t wait.I can think of two more things one does when one doesn&amp;rsquo;t have much of something: try to get more of it, and savor what one has. Both make sense here.How you live affects how long you live. Most people could do better. Me among them.But you can probably get even more effect by paying closer attention to the time you have. It&amp;rsquo;s easy to let the days rush by. The &amp;ldquo;flow&amp;rdquo; that imaginative people love so much has a darker cousin that prevents you from pausing to savor life amid the daily slurry of errands and alarms. One of the most striking things I&amp;rsquo;ve read was not in a book, but the title of one: James Salter&amp;rsquo;s Burning the Days.It is possible to slow time somewhat. I&amp;rsquo;ve gotten better at it. Kids help. When you have small children, there are a lot of moments so perfect that you can&amp;rsquo;t help noticing.It does help too to feel that you&amp;rsquo;ve squeezed everything out of some experience. The reason I&amp;rsquo;m sad about my mother is not just that I miss her but that I think of all the things we could have done that we didn&amp;rsquo;t. My oldest son will be 7 soon. And while I miss the 3 year old version of him, I at least don&amp;rsquo;t have any regrets over what might have been. We had the best time a daddy and a 3 year old ever had.Relentlessly prune bullshit, don&amp;rsquo;t wait to do things that matter, and savor the time you have. That&amp;rsquo;s what you do when life is short.Notes[1] At first I didn&amp;rsquo;t like it that the word that came to mind was one that had other meanings. But then I realized the other meanings are fairly closely related. Bullshit in the sense of things you waste your time on is a lot like intellectual bullshit.[2] I chose this example deliberately as a note to self. I get attacked a lot online. People tell the craziest lies about me. And I have so far done a pretty mediocre job of suppressing the natural human inclination to say &amp;ldquo;Hey, that&amp;rsquo;s not true!&amp;ldquo;Thanks to Jessica Livingston and Geoff Ralston for reading drafts of this.Korean TranslationJapanese TranslationChinese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/vcsqueeze/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/vcsqueeze/</guid>
      <description>&lt;h1 id=&#34;vcsqueeze&#34;&gt;Vcsqueeze&lt;/h1&gt;&#xA;&lt;p&gt;The Venture Capital Squeeze November 2005In the next few years, venture capital funds will find themselves squeezed from four directions. They&amp;rsquo;re already stuck with a seller&amp;rsquo;s market, because of the huge amounts they raised at the end of the Bubble and still haven&amp;rsquo;t invested. This by itself is not the end of the world. In fact, it&amp;rsquo;s just a more extreme version of the norm in the VC business: too much money chasing too few deals.Unfortunately, those few deals now want less and less money, because it&amp;rsquo;s getting so cheap to start a startup. The four causes: open source, which makes software free; Moore&amp;rsquo;s law, which makes hardware geometrically closer to free; the Web, which makes promotion free if you&amp;rsquo;re good; and better languages, which make development a lot cheaper.When we started our startup in 1995, the first three were our biggest expenses. We had to pay $5000 for the Netscape Commerce Server, the only software that then supported secure http connections. We paid $3000 for a server with a 90 MHz processor and 32 meg of memory. And we paid a PR firm about $30,000 to promote our launch.Now you could get all three for nothing. You can get the software for free; people throw away computers more powerful than our first server; and if you make something good you can generate ten times as much traffic by word of mouth online than our first PR firm got through the print media.And of course another big change for the average startup is that programming languages have improved&amp;ndash; or rather, the median language has. At most startups ten years ago, software development meant ten programmers writing code in C++. Now the same work might be done by one or two using Python or Ruby.During the Bubble, a lot of people predicted that startups would outsource their development to India. I think a better model for the future is David Heinemeier Hansson, who outsourced his development to a more powerful language instead. A lot of well-known applications are now, like BaseCamp, written by just one programmer. And one guy is more than 10x cheaper than ten, because (a) he won&amp;rsquo;t waste any time in meetings, and (b) since he&amp;rsquo;s probably a founder, he can pay himself nothing.Because starting a startup is so cheap, venture capitalists now often want to give startups more money than the startups want to take. VCs like to invest several million at a time. But as one VC told me after a startup he funded would only take about half a million, &amp;ldquo;I don&amp;rsquo;t know what we&amp;rsquo;re going to do. Maybe we&amp;rsquo;ll just have to give some of it back.&amp;rdquo; Meaning give some of the fund back to the institutional investors who supplied it, because it wasn&amp;rsquo;t going to be possible to invest it all.Into this already bad situation comes the third problem: Sarbanes-Oxley. Sarbanes-Oxley is a law, passed after the Bubble, that drastically increases the regulatory burden on public companies. And in addition to the cost of compliance, which is at least two million dollars a year, the law introduces frightening legal exposure for corporate officers. An experienced CFO I know said flatly: &amp;ldquo;I would not want to be CFO of a public company now.&amp;ldquo;You might think that responsible corporate governance is an area where you can&amp;rsquo;t go too far. But you can go too far in any law, and this remark convinced me that Sarbanes-Oxley must have. This CFO is both the smartest and the most upstanding money guy I know. If Sarbanes-Oxley deters people like him from being CFOs of public companies, that&amp;rsquo;s proof enough that it&amp;rsquo;s broken.Largely because of Sarbanes-Oxley, few startups go public now. For all practical purposes, succeeding now equals getting bought. Which means VCs are now in the business of finding promising little 2-3 man startups and pumping them up into companies that cost $100 million to acquire. They didn&amp;rsquo;t mean to be in this business; it&amp;rsquo;s just what their business has evolved into.Hence the fourth problem: the acquirers have begun to realize they can buy wholesale. Why should they wait for VCs to make the startups they want more expensive? Most of what the VCs add, acquirers don&amp;rsquo;t want anyway. The acquirers already have brand recognition and HR departments. What they really want is the software and the developers, and that&amp;rsquo;s what the startup is in the early phase: concentrated software and developers.Google, typically, seems to have been the first to figure this out. &amp;ldquo;Bring us your startups early,&amp;rdquo; said Google&amp;rsquo;s speaker at the Startup School. They&amp;rsquo;re quite explicit about it: they like to acquire startups at just the point where they would do a Series A round. (The Series A round is the first round of real VC funding; it usually happens in the first year.) It is a brilliant strategy, and one that other big technology companies will no doubt try to duplicate. Unless they want to have still more of their lunch eaten by Google.Of course, Google has an advantage in buying startups: a lot of the people there are rich, or expect to be when their options vest. Ordinary employees find it very hard to recommend an acquisition; it&amp;rsquo;s just too annoying to see a bunch of twenty year olds get rich when you&amp;rsquo;re still working for salary. Even if it&amp;rsquo;s the right thing for your company to do.The Solution(s)Bad as things look now, there is a way for VCs to save themselves. They need to do two things, one of which won&amp;rsquo;t surprise them, and another that will seem an anathema.Let&amp;rsquo;s start with the obvious one: lobby to get Sarbanes-Oxley loosened. This law was created to prevent future Enrons, not to destroy the IPO market. Since the IPO market was practically dead when it passed, few saw what bad effects it would have. But now that technology has recovered from the last bust, we can see clearly what a bottleneck Sarbanes-Oxley has become.Startups are fragile plants—seedlings, in fact. These seedlings are worth protecting, because they grow into the trees of the economy. Much of the economy&amp;rsquo;s growth is their growth. I think most politicians realize that. But they don&amp;rsquo;t realize just how fragile startups are, and how easily they can become collateral damage of laws meant to fix some other problem.Still more dangerously, when you destroy startups, they make very little noise. If you step on the toes of the coal industry, you&amp;rsquo;ll hear about it. But if you inadvertantly squash the startup industry, all that happens is that the founders of the next Google stay in grad school instead of starting a company.My second suggestion will seem shocking to VCs: let founders cash out partially in the Series A round. At the moment, when VCs invest in a startup, all the stock they get is newly issued and all the money goes to the company. They could buy some stock directly from the founders as well.Most VCs have an almost religious rule against doing this. They don&amp;rsquo;t want founders to get a penny till the company is sold or goes public. VCs are obsessed with control, and they worry that they&amp;rsquo;ll have less leverage over the founders if the founders have any money.This is a dumb plan. In fact, letting the founders sell a little stock early would generally be better for the company, because it would cause the founders&amp;rsquo; attitudes toward risk to be aligned with the VCs&amp;rsquo;. As things currently work, their attitudes toward risk tend to be diametrically opposed: the founders, who have nothing, would prefer a 100% chance of $1 million to a 20% chance of $10 million, while the VCs can afford to be &amp;ldquo;rational&amp;rdquo; and prefer the latter.Whatever they say, the reason founders are selling their companies early instead of doing Series A rounds is that they get paid up front. That first million is just worth so much more than the subsequent ones. If founders could sell a little stock early, they&amp;rsquo;d be happy to take VC money and bet the rest on a bigger outcome.So why not let the founders have that first million, or at least half million? The VCs would get same number of shares for the money. So what if some of the money would go to the founders instead of the company?Some VCs will say this is unthinkable—that they want all their money to be put to work growing the company. But the fact is, the huge size of current VC investments is dictated by the structure of VC funds, not the needs of startups. Often as not these large investments go to work destroying the company rather than growing it.The angel investors who funded our startup let the founders sell some stock directly to them, and it was a good deal for everyone. The angels made a huge return on that investment, so they&amp;rsquo;re happy. And for us founders it blunted the terrifying all-or-nothingness of a startup, which in its raw form is more a distraction than a motivator.If VCs are frightened at the idea of letting founders partially cash out, let me tell them something still more frightening: you are now competing directly with Google. Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this.Romanian TranslationHebrew TranslationJapanese Translation If you liked this, you may also like Hackers &amp;amp; Painters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/venturecapital/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/venturecapital/</guid>
      <description>&lt;h1 id=&#34;venturecapital&#34;&gt;Venturecapital&lt;/h1&gt;&#xA;&lt;p&gt;A Unified Theory of VC Suckage March 2005A couple months ago I got an email from a recruiter asking if I was interested in being a &amp;ldquo;technologist in residence&amp;rdquo; at a new venture capital fund. I think the idea was to play Karl Rove to the VCs&amp;rsquo; George Bush.I considered it for about four seconds. Work for a VC fund? Ick.One of my most vivid memories from our startup is going to visit Greylock, the famous Boston VCs. They were the most arrogant people I&amp;rsquo;ve met in my life. And I&amp;rsquo;ve met a lot of arrogant people. [1]I&amp;rsquo;m not alone in feeling this way, of course. Even a VC friend of mine dislikes VCs. &amp;ldquo;Assholes,&amp;rdquo; he says.But lately I&amp;rsquo;ve been learning more about how the VC world works, and a few days ago it hit me that there&amp;rsquo;s a reason VCs are the way they are. It&amp;rsquo;s not so much that the business attracts jerks, or even that the power they wield corrupts them. The real problem is the way they&amp;rsquo;re paid.The problem with VC funds is that they&amp;rsquo;re funds. Like the managers of mutual funds or hedge funds, VCs get paid a percentage of the money they manage: about 2% a year in management fees, plus a percentage of the gains. So they want the fund to be huge&amp;ndash; hundreds of millions of dollars, if possible. But that means each partner ends up being responsible for investing a lot of money. And since one person can only manage so many deals, each deal has to be for multiple millions of dollars.This turns out to explain nearly all the characteristics of VCs that founders hate.It explains why VCs take so agonizingly long to make up their minds, and why their due diligence feels like a body cavity search. [2] With so much at stake, they have to be paranoid.It explains why they steal your ideas. Every founder knows that VCs will tell your secrets to your competitors if they end up investing in them. It&amp;rsquo;s not unheard of for VCs to meet you when they have no intention of funding you, just to pick your brain for a competitor. This prospect makes naive founders clumsily secretive. Experienced founders treat it as a cost of doing business. Either way it sucks. But again, the only reason VCs are so sneaky is the giant deals they do. With so much at stake, they have to be devious.It explains why VCs tend to interfere in the companies they invest in. They want to be on your board not just so that they can advise you, but so that they can watch you. Often they even install a new CEO. Yes, he may have extensive business experience. But he&amp;rsquo;s also their man: these newly installed CEOs always play something of the role of a political commissar in a Red Army unit. With so much at stake, VCs can&amp;rsquo;t resist micromanaging you.The huge investments themselves are something founders would dislike, if they realized how damaging they can be. VCs don&amp;rsquo;t invest $x million because that&amp;rsquo;s the amount you need, but because that&amp;rsquo;s the amount the structure of their business requires them to invest. Like steroids, these sudden huge investments can do more harm than good. Google survived enormous VC funding because it could legitimately absorb large amounts of money. They had to buy a lot of servers and a lot of bandwidth to crawl the whole Web. Less fortunate startups just end up hiring armies of people to sit around having meetings.In principle you could take a huge VC investment, put it in treasury bills, and continue to operate frugally. You just try it.And of course giant investments mean giant valuations. They have to, or there&amp;rsquo;s not enough stock left to keep the founders interested. You might think a high valuation is a great thing. Many founders do. But you can&amp;rsquo;t eat paper. You can&amp;rsquo;t benefit from a high valuation unless you can somehow achieve what those in the business call a &amp;ldquo;liquidity event,&amp;rdquo; and the higher your valuation, the narrower your options for doing that. Many a founder would be happy to sell his company for $15 million, but VCs who&amp;rsquo;ve just invested at a pre-money valuation of $8 million won&amp;rsquo;t hear of that. You&amp;rsquo;re rolling the dice again, whether you like it or not.Back in 1997, one of our competitors raised $20 million in a single round of VC funding. This was at the time more than the valuation of our entire company. Was I worried? Not at all: I was delighted. It was like watching a car you&amp;rsquo;re chasing turn down a street that you know has no outlet.Their smartest move at that point would have been to take every penny of the $20 million and use it to buy us. We would have sold. Their investors would have been furious of course. But I think the main reason they never considered this was that they never imagined we could be had so cheap. They probably assumed we were on the same VC gravy train they were.In fact we only spent about $2 million in our entire existence. And that gave us flexibility. We could sell ourselves to Yahoo for $50 million, and everyone was delighted. If our competitor had done that, the last round of investors would presumably have lost money. I assume they could have vetoed such a deal. But no one those days was paying a lot more than Yahoo. So unless their founders could pull off an IPO (which would be difficult with Yahoo as a competitor), they had no choice but to ride the thing down.The puffed-up companies that went public during the Bubble didn&amp;rsquo;t do it just because they were pulled into it by unscrupulous investment bankers. Most were pushed just as hard from the other side by VCs who&amp;rsquo;d invested at high valuations, leaving an IPO as the only way out. The only people dumber were retail investors. So it was literally IPO or bust. Or rather, IPO then bust, or just bust.Add up all the evidence of VCs&amp;rsquo; behavior, and the resulting personality is not attractive. In fact, it&amp;rsquo;s the classic villain: alternately cowardly, greedy, sneaky, and overbearing.I used to take it for granted that VCs were like this. Complaining that VCs were jerks used to seem as naive to me as complaining that users didn&amp;rsquo;t read the reference manual. Of course VCs were jerks. How could it be otherwise?But I realize now that they&amp;rsquo;re not intrinsically jerks. VCs are like car salesmen or bureaucrats: the nature of their work turns them into jerks.I&amp;rsquo;ve met a few VCs I like. Mike Moritz seems a good guy. He even has a sense of humor, which is almost unheard of among VCs. From what I&amp;rsquo;ve read about John Doerr, he sounds like a good guy too, almost a hacker. But they work for the very best VC funds. And my theory explains why they&amp;rsquo;d tend to be different: just as the very most popular kids don&amp;rsquo;t have to persecute nerds, the very best VCs don&amp;rsquo;t have to act like VCs. They get the pick of all the best deals. So they don&amp;rsquo;t have to be so paranoid and sneaky, and they can choose those rare companies, like Google, that will actually benefit from the giant sums they&amp;rsquo;re compelled to invest.VCs often complain that in their business there&amp;rsquo;s too much money chasing too few deals. Few realize that this also describes a flaw in the way funding works at the level of individual firms.Perhaps this was the sort of strategic insight I was supposed to come up with as a &amp;ldquo;technologist in residence.&amp;rdquo; If so, the good news is that they&amp;rsquo;re getting it for free. The bad news is it means that if you&amp;rsquo;re not one of the very top funds, you&amp;rsquo;re condemned to be the bad guys.Notes[1] After Greylock booted founder Philip Greenspun out of ArsDigita, he wrote a hilarious but also very informative essay about it. [2] Since most VCs aren&amp;rsquo;t tech guys, the technology side of their due diligence tends to be like a body cavity search by someone with a faulty knowledge of human anatomy. After a while we were quite sore from VCs attempting to probe our nonexistent database orifice.No, we don&amp;rsquo;t use Oracle. We just store the data in files. Our secret is to use an OS that doesn&amp;rsquo;t lose our data. Which OS? FreeBSD. Why do you use that instead of Windows NT? Because it&amp;rsquo;s better and it doesn&amp;rsquo;t cost anything. What, you&amp;rsquo;re using a freeware OS?How many times that conversation was repeated. Then when we got to Yahoo, we found they used FreeBSD and stored their data in files too.Chinese TranslationJapanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/vw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/vw/</guid>
      <description>&lt;h1 id=&#34;vw&#34;&gt;Vw&lt;/h1&gt;&#xA;&lt;p&gt;Snapshot: Viaweb, June 1998 January 2012A few hours before the Yahoo acquisition was announced in June 1998 I took a snapshot of Viaweb&amp;rsquo;s site. I thought it might be interesting to look at one day.The first thing one notices is is how tiny the pages are. Screens were a lot smaller in 1998. If I remember correctly, our frontpage used to just fit in the size window people typically used then.Browsers then (IE 6 was still 3 years in the future) had few fonts and they weren&amp;rsquo;t antialiased. If you wanted to make pages that looked good, you had to render display text as images.You may notice a certain similarity between the Viaweb and Y Combinator logos. We did that as an inside joke when we started YC. Considering how basic a red circle is, it seemed surprising to me when we started Viaweb how few other companies used one as their logo. A bit later I realized why.On the Company page you&amp;rsquo;ll notice a mysterious individual called John McArtyem. Robert Morris (aka Rtm) was so publicity averse after the Worm that he didn&amp;rsquo;t want his name on the site. I managed to get him to agree to a compromise: we could use his bio but not his name. He has since relaxed a bit on that point.Trevor graduated at about the same time the acquisition closed, so in the course of 4 days he went from impecunious grad student to millionaire PhD. The culmination of my career as a writer of press releases was one celebrating his graduation, illustrated with a drawing I did of him during a meeting.(Trevor also appears as Trevino Bagwell in our directory of web designers merchants could hire to build stores for them. We inserted him as a ringer in case some competitor tried to spam our web designers. We assumed his logo would deter any actual customers, but it did not.)Back in the 90s, to get users you had to get mentioned in magazines and newspapers. There were not the same ways to get found online that there are today. So we used to pay a PR firm $16,000 a month to get us mentioned in the press. Fortunately reporters liked us.In our advice about getting traffic from search engines (I don&amp;rsquo;t think the term SEO had been coined yet), we say there are only 7 that matter: Yahoo, AltaVista, Excite, WebCrawler, InfoSeek, Lycos, and HotBot. Notice anything missing? Google was incorporated that September.We supported online transactions via a company called Cybercash, since if we lacked that feature we&amp;rsquo;d have gotten beaten up in product comparisons. But Cybercash was so bad and most stores&amp;rsquo; order volumes were so low that it was better if merchants processed orders like phone orders. We had a page in our site trying to talk merchants out of doing real time authorizations.The whole site was organized like a funnel, directing people to the test drive. It was a novel thing to be able to try out software online. We put cgi-bin in our dynamic urls to fool competitors about how our software worked.We had some well known users. Needless to say, Frederick&amp;rsquo;s of Hollywood got the most traffic. We charged a flat fee of $300/month for big stores, so it was a little alarming to have users who got lots of traffic. I once calculated how much Frederick&amp;rsquo;s was costing us in bandwidth, and it was about $300/month.Since we hosted all the stores, which together were getting just over 10 million page views per month in June 1998, we consumed what at the time seemed a lot of bandwidth. We had 2 T1s (3 Mb/sec) coming into our offices. In those days there was no AWS. Even colocating servers seemed too risky, considering how often things went wrong with them. So we had our servers in our offices. Or more precisely, in Trevor&amp;rsquo;s office. In return for the unique privilege of sharing his office with no other humans, he had to share it with 6 shrieking tower servers. His office was nicknamed the Hot Tub on account of the heat they generated. Most days his stack of window air conditioners could keep up.For describing pages, we had a template language called RTML, which supposedly stood for something, but which in fact I named after Rtm. RTML was Common Lisp augmented by some macros and libraries, and concealed under a structure editor that made it look like it had syntax.Since we did continuous releases, our software didn&amp;rsquo;t actually have versions. But in those days the trade press expected versions, so we made them up. If we wanted to get lots of attention, we made the version number an integer. That &amp;ldquo;version 4.0&amp;rdquo; icon was generated by our own button generator, incidentally. The whole Viaweb site was made with our software, even though it wasn&amp;rsquo;t an online store, because we wanted to experience what our users did.At the end of 1997, we released a general purpose shopping search engine called Shopfind. It was pretty advanced for the time. It had a programmable crawler that could crawl most of the different stores online and pick out the products.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/want/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/want/</guid>
      <description>&lt;h1 id=&#34;want&#34;&gt;Want&lt;/h1&gt;&#xA;&lt;p&gt;What You (Want to)* Want November 2022Since I was about 9 I&amp;rsquo;ve been puzzled by the apparent contradiction between being made of matter that behaves in a predictable way, and the feeling that I could choose to do whatever I wanted. At the time I had a self-interested motive for exploring the question. At that age (like most succeeding ages) I was always in trouble with the authorities, and it seemed to me that there might possibly be some way to get out of trouble by arguing that I wasn&amp;rsquo;t responsible for my actions. I gradually lost hope of that, but the puzzle remained: How do you reconcile being a machine made of matter with the feeling that you&amp;rsquo;re free to choose what you do? [1]The best way to explain the answer may be to start with a slightly wrong version, and then fix it. The wrong version is: You can do what you want, but you can&amp;rsquo;t want what you want. Yes, you can control what you do, but you&amp;rsquo;ll do what you want, and you can&amp;rsquo;t control that.The reason this is mistaken is that people do sometimes change what they want. People who don&amp;rsquo;t want to want something — drug addicts, for example — can sometimes make themselves stop wanting it. And people who want to want something — who want to like classical music, or broccoli — sometimes succeed.So we modify our initial statement: You can do what you want, but you can&amp;rsquo;t want to want what you want.That&amp;rsquo;s still not quite true. It&amp;rsquo;s possible to change what you want to want. I can imagine someone saying &amp;ldquo;I decided to stop wanting to like classical music.&amp;rdquo; But we&amp;rsquo;re getting closer to the truth. It&amp;rsquo;s rare for people to change what they want to want, and the more &amp;ldquo;want to&amp;quot;s we add, the rarer it gets.We can get arbitrarily close to a true statement by adding more &amp;ldquo;want to&amp;quot;s in much the same way we can get arbitrarily close to 1 by adding more 9s to a string of 9s following a decimal point. In practice three or four &amp;ldquo;want to&amp;quot;s must surely be enough. It&amp;rsquo;s hard even to envision what it would mean to change what you want to want to want to want, let alone actually do it.So one way to express the correct answer is to use a regular expression. You can do what you want, but there&amp;rsquo;s some statement of the form &amp;ldquo;you can&amp;rsquo;t (want to)* want what you want&amp;rdquo; that&amp;rsquo;s true. Ultimately you get back to a want that you don&amp;rsquo;t control. [2] Notes[1] I didn&amp;rsquo;t know when I was 9 that matter might behave randomly, but I don&amp;rsquo;t think it affects the problem much. Randomness destroys the ghost in the machine as effectively as determinism.[2] If you don&amp;rsquo;t like using an expression, you can make the same point using higher-order desires: There is some n such that you don&amp;rsquo;t control your nth-order desires. Thanks to Trevor Blackwell, Jessica Livingston, Robert Morris, and Michael Nielsen for reading drafts of this.Irish Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/wealth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/wealth/</guid>
      <description>&lt;h1 id=&#34;wealth&#34;&gt;Wealth&lt;/h1&gt;&#xA;&lt;p&gt;How to Make Wealth Want to start a startup? Get funded by Y Combinator. May 2004 (This essay was originally published in Hackers &amp;amp; Painters.) If you wanted to get rich, how would you do it? I think your best bet would be to start or join a startup. That&amp;rsquo;s been a reliable way to get rich for hundreds of years. The word &amp;ldquo;startup&amp;rdquo; dates from the 1960s, but what happens in one is very similar to the venture-backed trading voyages of the Middle Ages.Startups usually involve technology, so much so that the phrase &amp;ldquo;high-tech startup&amp;rdquo; is almost redundant. A startup is a small company that takes on a hard technical problem.Lots of people get rich knowing nothing more than that. You don&amp;rsquo;t have to know physics to be a good pitcher. But I think it could give you an edge to understand the underlying principles. Why do startups have to be small? Will a startup inevitably stop being a startup as it grows larger? And why do they so often work on developing new technology? Why are there so many startups selling new drugs or computer software, and none selling corn oil or laundry detergent?The PropositionEconomically, you can think of a startup as a way to compress your whole working life into a few years. Instead of working at a low intensity for forty years, you work as hard as you possibly can for four. This pays especially well in technology, where you earn a premium for working fast.Here is a brief sketch of the economic proposition. If you&amp;rsquo;re a good hacker in your mid twenties, you can get a job paying about $80,000 per year. So on average such a hacker must be able to do at least $80,000 worth of work per year for the company just to break even. You could probably work twice as many hours as a corporate employee, and if you focus you can probably get three times as much done in an hour. [1] You should get another multiple of two, at least, by eliminating the drag of the pointy-haired middle manager who would be your boss in a big company. Then there is one more multiple: how much smarter are you than your job description expects you to be? Suppose another multiple of three. Combine all these multipliers, and I&amp;rsquo;m claiming you could be 36 times more productive than you&amp;rsquo;re expected to be in a random corporate job. [2] If a fairly good hacker is worth $80,000 a year at a big company, then a smart hacker working very hard without any corporate bullshit to slow him down should be able to do work worth about $3 million a year.Like all back-of-the-envelope calculations, this one has a lot of wiggle room. I wouldn&amp;rsquo;t try to defend the actual numbers. But I stand by the structure of the calculation. I&amp;rsquo;m not claiming the multiplier is precisely 36, but it is certainly more than 10, and probably rarely as high as 100.If $3 million a year seems high, remember that we&amp;rsquo;re talking about the limit case: the case where you not only have zero leisure time but indeed work so hard that you endanger your health.Startups are not magic. They don&amp;rsquo;t change the laws of wealth creation. They just represent a point at the far end of the curve. There is a conservation law at work here: if you want to make a million dollars, you have to endure a million dollars&amp;rsquo; worth of pain. For example, one way to make a million dollars would be to work for the Post Office your whole life, and save every penny of your salary. Imagine the stress of working for the Post Office for fifty years. In a startup you compress all this stress into three or four years. You do tend to get a certain bulk discount if you buy the economy-size pain, but you can&amp;rsquo;t evade the fundamental conservation law. If starting a startup were easy, everyone would do it.Millions, not BillionsIf $3 million a year seems high to some people, it will seem low to others. Three million? How do I get to be a billionaire, like Bill Gates?So let&amp;rsquo;s get Bill Gates out of the way right now. It&amp;rsquo;s not a good idea to use famous rich people as examples, because the press only write about the very richest, and these tend to be outliers. Bill Gates is a smart, determined, and hardworking man, but you need more than that to make as much money as he has. You also need to be very lucky.There is a large random factor in the success of any company. So the guys you end up reading about in the papers are the ones who are very smart, totally dedicated, and win the lottery. Certainly Bill is smart and dedicated, but Microsoft also happens to have been the beneficiary of one of the most spectacular blunders in the history of business: the licensing deal for DOS. No doubt Bill did everything he could to steer IBM into making that blunder, and he has done an excellent job of exploiting it, but if there had been one person with a brain on IBM&amp;rsquo;s side, Microsoft&amp;rsquo;s future would have been very different. Microsoft at that stage had little leverage over IBM. They were effectively a component supplier. If IBM had required an exclusive license, as they should have, Microsoft would still have signed the deal. It would still have meant a lot of money for them, and IBM could easily have gotten an operating system elsewhere.Instead IBM ended up using all its power in the market to give Microsoft control of the PC standard. From that point, all Microsoft had to do was execute. They never had to bet the company on a bold decision. All they had to do was play hardball with licensees and copy more innovative products reasonably promptly.If IBM hadn&amp;rsquo;t made this mistake, Microsoft would still have been a successful company, but it could not have grown so big so fast. Bill Gates would be rich, but he&amp;rsquo;d be somewhere near the bottom of the Forbes 400 with the other guys his age.There are a lot of ways to get rich, and this essay is about only one of them. This essay is about how to make money by creating wealth and getting paid for it. There are plenty of other ways to get money, including chance, speculation, marriage, inheritance, theft, extortion, fraud, monopoly, graft, lobbying, counterfeiting, and prospecting. Most of the greatest fortunes have probably involved several of these.The advantage of creating wealth, as a way to get rich, is not just that it&amp;rsquo;s more legitimate (many of the other methods are now illegal) but that it&amp;rsquo;s more straightforward. You just have to do something people want.Money Is Not WealthIf you want to create wealth, it will help to understand what it is. Wealth is not the same thing as money. [3] Wealth is as old as human history. Far older, in fact; ants have wealth. Money is a comparatively recent invention.Wealth is the fundamental thing. Wealth is stuff we want: food, clothes, houses, cars, gadgets, travel to interesting places, and so on. You can have wealth without having money. If you had a magic machine that could on command make you a car or cook you dinner or do your laundry, or do anything else you wanted, you wouldn&amp;rsquo;t need money. Whereas if you were in the middle of Antarctica, where there is nothing to buy, it wouldn&amp;rsquo;t matter how much money you had.Wealth is what you want, not money. But if wealth is the important thing, why does everyone talk about making money? It is a kind of shorthand: money is a way of moving wealth, and in practice they are usually interchangeable. But they are not the same thing, and unless you plan to get rich by counterfeiting, talking about making money can make it harder to understand how to make money.Money is a side effect of specialization. In a specialized society, most of the things you need, you can&amp;rsquo;t make for yourself. If you want a potato or a pencil or a place to live, you have to get it from someone else.How do you get the person who grows the potatoes to give you some? By giving him something he wants in return. But you can&amp;rsquo;t get very far by trading things directly with the people who need them. If you make violins, and none of the local farmers wants one, how will you eat?The solution societies find, as they get more specialized, is to make the trade into a two-step process. Instead of trading violins directly for potatoes, you trade violins for, say, silver, which you can then trade again for anything else you need. The intermediate stuff&amp;ndash; the medium of exchange&amp;ndash; can be anything that&amp;rsquo;s rare and portable. Historically metals have been the most common, but recently we&amp;rsquo;ve been using a medium of exchange, called the dollar, that doesn&amp;rsquo;t physically exist. It works as a medium of exchange, however, because its rarity is guaranteed by the U.S. Government.The advantage of a medium of exchange is that it makes trade work. The disadvantage is that it tends to obscure what trade really means. People think that what a business does is make money. But money is just the intermediate stage&amp;ndash; just a shorthand&amp;ndash; for whatever people want. What most businesses really do is make wealth. They do something people want. [4]The Pie FallacyA surprising number of people retain from childhood the idea that there is a fixed amount of wealth in the world. There is, in any normal family, a fixed amount of money at any moment. But that&amp;rsquo;s not the same thing.When wealth is talked about in this context, it is often described as a pie. &amp;ldquo;You can&amp;rsquo;t make the pie larger,&amp;rdquo; say politicians. When you&amp;rsquo;re talking about the amount of money in one family&amp;rsquo;s bank account, or the amount available to a government from one year&amp;rsquo;s tax revenue, this is true. If one person gets more, someone else has to get less.I can remember believing, as a child, that if a few rich people had all the money, it left less for everyone else. Many people seem to continue to believe something like this well into adulthood. This fallacy is usually there in the background when you hear someone talking about how x percent of the population have y percent of the wealth. If you plan to start a startup, then whether you realize it or not, you&amp;rsquo;re planning to disprove the Pie Fallacy.What leads people astray here is the abstraction of money. Money is not wealth. It&amp;rsquo;s just something we use to move wealth around. So although there may be, in certain specific moments (like your family, this month) a fixed amount of money available to trade with other people for things you want, there is not a fixed amount of wealth in the world. You can make more wealth. Wealth has been getting created and destroyed (but on balance, created) for all of human history.Suppose you own a beat-up old car. Instead of sitting on your butt next summer, you could spend the time restoring your car to pristine condition. In doing so you create wealth. The world is&amp;ndash; and you specifically are&amp;ndash; one pristine old car the richer. And not just in some metaphorical way. If you sell your car, you&amp;rsquo;ll get more for it.In restoring your old car you have made yourself richer. You haven&amp;rsquo;t made anyone else poorer. So there is obviously not a fixed pie. And in fact, when you look at it this way, you wonder why anyone would think there was. [5]Kids know, without knowing they know, that they can create wealth. If you need to give someone a present and don&amp;rsquo;t have any money, you make one. But kids are so bad at making things that they consider home-made presents to be a distinct, inferior, sort of thing to store-bought ones&amp;ndash; a mere expression of the proverbial thought that counts. And indeed, the lumpy ashtrays we made for our parents did not have much of a resale market.CraftsmenThe people most likely to grasp that wealth can be created are the ones who are good at making things, the craftsmen. Their hand-made objects become store-bought ones. But with the rise of industrialization there are fewer and fewer craftsmen. One of the biggest remaining groups is computer programmers.A programmer can sit down in front of a computer and create wealth. A good piece of software is, in itself, a valuable thing. There is no manufacturing to confuse the issue. Those characters you type are a complete, finished product. If someone sat down and wrote a web browser that didn&amp;rsquo;t suck (a fine idea, by the way), the world would be that much richer. [5b]Everyone in a company works together to create wealth, in the sense of making more things people want. Many of the employees (e.g. the people in the mailroom or the personnel department) work at one remove from the actual making of stuff. Not the programmers. They literally think the product, one line at a time. And so it&amp;rsquo;s clearer to programmers that wealth is something that&amp;rsquo;s made, rather than being distributed, like slices of a pie, by some imaginary Daddy.It&amp;rsquo;s also obvious to programmers that there are huge variations in the rate at which wealth is created. At Viaweb we had one programmer who was a sort of monster of productivity. I remember watching what he did one long day and estimating that he had added several hundred thousand dollars to the market value of the company. A great programmer, on a roll, could create a million dollars worth of wealth in a couple weeks. A mediocre programmer over the same period will generate zero or even negative wealth (e.g. by introducing bugs).This is why so many of the best programmers are libertarians. In our world, you sink or swim, and there are no excuses. When those far removed from the creation of wealth&amp;ndash; undergraduates, reporters, politicians&amp;ndash; hear that the richest 5% of the people have half the total wealth, they tend to think injustice! An experienced programmer would be more likely to think is that all? The top 5% of programmers probably write 99% of the good software.Wealth can be created without being sold. Scientists, till recently at least, effectively donated the wealth they created. We are all richer for knowing about penicillin, because we&amp;rsquo;re less likely to die from infections. Wealth is whatever people want, and not dying is certainly something we want. Hackers often donate their work by writing open source software that anyone can use for free. I am much the richer for the operating system FreeBSD, which I&amp;rsquo;m running on the computer I&amp;rsquo;m using now, and so is Yahoo, which runs it on all their servers.What a Job IsIn industrialized countries, people belong to one institution or another at least until their twenties. After all those years you get used to the idea of belonging to a group of people who all get up in the morning, go to some set of buildings, and do things that they do not, ordinarily, enjoy doing. Belonging to such a group becomes part of your identity: name, age, role, institution. If you have to introduce yourself, or someone else describes you, it will be as something like, John Smith, age 10, a student at such and such elementary school, or John Smith, age 20, a student at such and such college.When John Smith finishes school he is expected to get a job. And what getting a job seems to mean is joining another institution. Superficially it&amp;rsquo;s a lot like college. You pick the companies you want to work for and apply to join them. If one likes you, you become a member of this new group. You get up in the morning and go to a new set of buildings, and do things that you do not, ordinarily, enjoy doing. There are a few differences: life is not as much fun, and you get paid, instead of paying, as you did in college. But the similarities feel greater than the differences. John Smith is now John Smith, 22, a software developer at such and such corporation.In fact John Smith&amp;rsquo;s life has changed more than he realizes. Socially, a company looks much like college, but the deeper you go into the underlying reality, the more different it gets.What a company does, and has to do if it wants to continue to exist, is earn money. And the way most companies make money is by creating wealth. Companies can be so specialized that this similarity is concealed, but it is not only manufacturing companies that create wealth. A big component of wealth is location. Remember that magic machine that could make you cars and cook you dinner and so on? It would not be so useful if it delivered your dinner to a random location in central Asia. If wealth means what people want, companies that move things also create wealth. Ditto for many other kinds of companies that don&amp;rsquo;t make anything physical. Nearly all companies exist to do something people want.And that&amp;rsquo;s what you do, as well, when you go to work for a company. But here there is another layer that tends to obscure the underlying reality. In a company, the work you do is averaged together with a lot of other people&amp;rsquo;s. You may not even be aware you&amp;rsquo;re doing something people want. Your contribution may be indirect. But the company as a whole must be giving people something they want, or they won&amp;rsquo;t make any money. And if they are paying you x dollars a year, then on average you must be contributing at least x dollars a year worth of work, or the company will be spending more than it makes, and will go out of business.Someone graduating from college thinks, and is told, that he needs to get a job, as if the important thing were becoming a member of an institution. A more direct way to put it would be: you need to start doing something people want. You don&amp;rsquo;t need to join a company to do that. All a company is is a group of people working together to do something people want. It&amp;rsquo;s doing something people want that matters, not joining the group. [6]For most people the best plan probably is to go to work for some existing company. But it is a good idea to understand what&amp;rsquo;s happening when you do this. A job means doing something people want, averaged together with everyone else in that company.Working HarderThat averaging gets to be a problem. I think the single biggest problem afflicting large companies is the difficulty of assigning a value to each person&amp;rsquo;s work. For the most part they punt. In a big company you get paid a fairly predictable salary for working fairly hard. You&amp;rsquo;re expected not to be obviously incompetent or lazy, but you&amp;rsquo;re not expected to devote your whole life to your work.It turns out, though, that there are economies of scale in how much of your life you devote to your work. In the right kind of business, someone who really devoted himself to work could generate ten or even a hundred times as much wealth as an average employee. A programmer, for example, instead of chugging along maintaining and updating an existing piece of software, could write a whole new piece of software, and with it create a new source of revenue.Companies are not set up to reward people who want to do this. You can&amp;rsquo;t go to your boss and say, I&amp;rsquo;d like to start working ten times as hard, so will you please pay me ten times as much? For one thing, the official fiction is that you are already working as hard as you can. But a more serious problem is that the company has no way of measuring the value of your work.Salesmen are an exception. It&amp;rsquo;s easy to measure how much revenue they generate, and they&amp;rsquo;re usually paid a percentage of it. If a salesman wants to work harder, he can just start doing it, and he will automatically get paid proportionally more.There is one other job besides sales where big companies can hire first-rate people: in the top management jobs. And for the same reason: their performance can be measured. The top managers are held responsible for the performance of the entire company. Because an ordinary employee&amp;rsquo;s performance can&amp;rsquo;t usually be measured, he is not expected to do more than put in a solid effort. Whereas top management, like salespeople, have to actually come up with the numbers. The CEO of a company that tanks cannot plead that he put in a solid effort. If the company does badly, he&amp;rsquo;s done badly.A company that could pay all its employees so straightforwardly would be enormously successful. Many employees would work harder if they could get paid for it. More importantly, such a company would attract people who wanted to work especially hard. It would crush its competitors.Unfortunately, companies can&amp;rsquo;t pay everyone like salesmen. Salesmen work alone. Most employees&amp;rsquo; work is tangled together. Suppose a company makes some kind of consumer gadget. The engineers build a reliable gadget with all kinds of new features; the industrial designers design a beautiful case for it; and then the marketing people convince everyone that it&amp;rsquo;s something they&amp;rsquo;ve got to have. How do you know how much of the gadget&amp;rsquo;s sales are due to each group&amp;rsquo;s efforts? Or, for that matter, how much is due to the creators of past gadgets that gave the company a reputation for quality? There&amp;rsquo;s no way to untangle all their contributions. Even if you could read the minds of the consumers, you&amp;rsquo;d find these factors were all blurred together.If you want to go faster, it&amp;rsquo;s a problem to have your work tangled together with a large number of other people&amp;rsquo;s. In a large group, your performance is not separately measurable&amp;ndash; and the rest of the group slows you down.Measurement and LeverageTo get rich you need to get yourself in a situation with two things, measurement and leverage. You need to be in a position where your performance can be measured, or there is no way to get paid more by doing more. And you have to have leverage, in the sense that the decisions you make have a big effect.Measurement alone is not enough. An example of a job with measurement but not leverage is doing piecework in a sweatshop. Your performance is measured and you get paid accordingly, but you have no scope for decisions. The only decision you get to make is how fast you work, and that can probably only increase your earnings by a factor of two or three.An example of a job with both measurement and leverage would be lead actor in a movie. Your performance can be measured in the gross of the movie. And you have leverage in the sense that your performance can make or break it.CEOs also have both measurement and leverage. They&amp;rsquo;re measured, in that the performance of the company is their performance. And they have leverage in that their decisions set the whole company moving in one direction or another.I think everyone who gets rich by their own efforts will be found to be in a situation with measurement and leverage. Everyone I can think of does: CEOs, movie stars, hedge fund managers, professional athletes. A good hint to the presence of leverage is the possibility of failure. Upside must be balanced by downside, so if there is big potential for gain there must also be a terrifying possibility of loss. CEOs, stars, fund managers, and athletes all live with the sword hanging over their heads; the moment they start to suck, they&amp;rsquo;re out. If you&amp;rsquo;re in a job that feels safe, you are not going to get rich, because if there is no danger there is almost certainly no leverage.But you don&amp;rsquo;t have to become a CEO or a movie star to be in a situation with measurement and leverage. All you need to do is be part of a small group working on a hard problem.Smallness = MeasurementIf you can&amp;rsquo;t measure the value of the work done by individual employees, you can get close. You can measure the value of the work done by small groups.One level at which you can accurately measure the revenue generated by employees is at the level of the whole company. When the company is small, you are thereby fairly close to measuring the contributions of individual employees. A viable startup might only have ten employees, which puts you within a factor of ten of measuring individual effort.Starting or joining a startup is thus as close as most people can get to saying to one&amp;rsquo;s boss, I want to work ten times as hard, so please pay me ten times as much. There are two differences: you&amp;rsquo;re not saying it to your boss, but directly to the customers (for whom your boss is only a proxy after all), and you&amp;rsquo;re not doing it individually, but along with a small group of other ambitious people.It will, ordinarily, be a group. Except in a few unusual kinds of work, like acting or writing books, you can&amp;rsquo;t be a company of one person. And the people you work with had better be good, because it&amp;rsquo;s their work that yours is going to be averaged with.A big company is like a giant galley driven by a thousand rowers. Two things keep the speed of the galley down. One is that individual rowers don&amp;rsquo;t see any result from working harder. The other is that, in a group of a thousand people, the average rower is likely to be pretty average.If you took ten people at random out of the big galley and put them in a boat by themselves, they could probably go faster. They would have both carrot and stick to motivate them. An energetic rower would be encouraged by the thought that he could have a visible effect on the speed of the boat. And if someone was lazy, the others would be more likely to notice and complain.But the real advantage of the ten-man boat shows when you take the ten best rowers out of the big galley and put them in a boat together. They will have all the extra motivation that comes from being in a small group. But more importantly, by selecting that small a group you can get the best rowers. Each one will be in the top 1%. It&amp;rsquo;s a much better deal for them to average their work together with a small group of their peers than to average it with everyone.That&amp;rsquo;s the real point of startups. Ideally, you are getting together with a group of other people who also want to work a lot harder, and get paid a lot more, than they would in a big company. And because startups tend to get founded by self-selecting groups of ambitious people who already know one another (at least by reputation), the level of measurement is more precise than you get from smallness alone. A startup is not merely ten people, but ten people like you.Steve Jobs once said that the success or failure of a startup depends on the first ten employees. I agree. If anything, it&amp;rsquo;s more like the first five. Being small is not, in itself, what makes startups kick butt, but rather that small groups can be select. You don&amp;rsquo;t want small in the sense of a village, but small in the sense of an all-star team.The larger a group, the closer its average member will be to the average for the population as a whole. So all other things being equal, a very able person in a big company is probably getting a bad deal, because his performance is dragged down by the overall lower performance of the others. Of course, all other things often are not equal: the able person may not care about money, or may prefer the stability of a large company. But a very able person who does care about money will ordinarily do better to go off and work with a small group of peers.Technology = LeverageStartups offer anyone a way to be in a situation with measurement and leverage. They allow measurement because they&amp;rsquo;re small, and they offer leverage because they make money by inventing new technology.What is technology? It&amp;rsquo;s technique. It&amp;rsquo;s the way we all do things. And when you discover a new way to do things, its value is multiplied by all the people who use it. It is the proverbial fishing rod, rather than the fish. That&amp;rsquo;s the difference between a startup and a restaurant or a barber shop. You fry eggs or cut hair one customer at a time. Whereas if you solve a technical problem that a lot of people care about, you help everyone who uses your solution. That&amp;rsquo;s leverage.If you look at history, it seems that most people who got rich by creating wealth did it by developing new technology. You just can&amp;rsquo;t fry eggs or cut hair fast enough. What made the Florentines rich in 1200 was the discovery of new techniques for making the high-tech product of the time, fine woven cloth. What made the Dutch rich in 1600 was the discovery of shipbuilding and navigation techniques that enabled them to dominate the seas of the Far East.Fortunately there is a natural fit between smallness and solving hard problems. The leading edge of technology moves fast. Technology that&amp;rsquo;s valuable today could be worthless in a couple years. Small companies are more at home in this world, because they don&amp;rsquo;t have layers of bureaucracy to slow them down. Also, technical advances tend to come from unorthodox approaches, and small companies are less constrained by convention.Big companies can develop technology. They just can&amp;rsquo;t do it quickly. Their size makes them slow and prevents them from rewarding employees for the extraordinary effort required. So in practice big companies only get to develop technology in fields where large capital requirements prevent startups from competing with them, like microprocessors, power plants, or passenger aircraft. And even in those fields they depend heavily on startups for components and ideas.It&amp;rsquo;s obvious that biotech or software startups exist to solve hard technical problems, but I think it will also be found to be true in businesses that don&amp;rsquo;t seem to be about technology. McDonald&amp;rsquo;s, for example, grew big by designing a system, the McDonald&amp;rsquo;s franchise, that could then be reproduced at will all over the face of the earth. A McDonald&amp;rsquo;s franchise is controlled by rules so precise that it is practically a piece of software. Write once, run everywhere. Ditto for Wal-Mart. Sam Walton got rich not by being a retailer, but by designing a new kind of store.Use difficulty as a guide not just in selecting the overall aim of your company, but also at decision points along the way. At Viaweb one of our rules of thumb was run upstairs. Suppose you are a little, nimble guy being chased by a big, fat, bully. You open a door and find yourself in a staircase. Do you go up or down? I say up. The bully can probably run downstairs as fast as you can. Going upstairs his bulk will be more of a disadvantage. Running upstairs is hard for you but even harder for him.What this meant in practice was that we deliberately sought hard problems. If there were two features we could add to our software, both equally valuable in proportion to their difficulty, we&amp;rsquo;d always take the harder one. Not just because it was more valuable, but because it was harder. We delighted in forcing bigger, slower competitors to follow us over difficult ground. Like guerillas, startups prefer the difficult terrain of the mountains, where the troops of the central government can&amp;rsquo;t follow. I can remember times when we were just exhausted after wrestling all day with some horrible technical problem. And I&amp;rsquo;d be delighted, because something that was hard for us would be impossible for our competitors.This is not just a good way to run a startup. It&amp;rsquo;s what a startup is. Venture capitalists know about this and have a phrase for it: barriers to entry. If you go to a VC with a new idea and ask him to invest in it, one of the first things he&amp;rsquo;ll ask is, how hard would this be for someone else to develop? That is, how much difficult ground have you put between yourself and potential pursuers? [7] And you had better have a convincing explanation of why your technology would be hard to duplicate. Otherwise as soon as some big company becomes aware of it, they&amp;rsquo;ll make their own, and with their brand name, capital, and distribution clout, they&amp;rsquo;ll take away your market overnight. You&amp;rsquo;d be like guerillas caught in the open field by regular army forces.One way to put up barriers to entry is through patents. But patents may not provide much protection. Competitors commonly find ways to work around a patent. And if they can&amp;rsquo;t, they may simply violate it and invite you to sue them. A big company is not afraid to be sued; it&amp;rsquo;s an everyday thing for them. They&amp;rsquo;ll make sure that suing them is expensive and takes a long time. Ever heard of Philo Farnsworth? He invented television. The reason you&amp;rsquo;ve never heard of him is that his company was not the one to make money from it. [8] The company that did was RCA, and Farnsworth&amp;rsquo;s reward for his efforts was a decade of patent litigation.Here, as so often, the best defense is a good offense. If you can develop technology that&amp;rsquo;s simply too hard for competitors to duplicate, you don&amp;rsquo;t need to rely on other defenses. Start by picking a hard problem, and then at every decision point, take the harder choice. [9]The Catch(es)If it were simply a matter of working harder than an ordinary employee and getting paid proportionately, it would obviously be a good deal to start a startup. Up to a point it would be more fun. I don&amp;rsquo;t think many people like the slow pace of big companies, the interminable meetings, the water-cooler conversations, the clueless middle managers, and so on.Unfortunately there are a couple catches. One is that you can&amp;rsquo;t choose the point on the curve that you want to inhabit. You can&amp;rsquo;t decide, for example, that you&amp;rsquo;d like to work just two or three times as hard, and get paid that much more. When you&amp;rsquo;re running a startup, your competitors decide how hard you work. And they pretty much all make the same decision: as hard as you possibly can.The other catch is that the payoff is only on average proportionate to your productivity. There is, as I said before, a large random multiplier in the success of any company. So in practice the deal is not that you&amp;rsquo;re 30 times as productive and get paid 30 times as much. It is that you&amp;rsquo;re 30 times as productive, and get paid between zero and a thousand times as much. If the mean is 30x, the median is probably zero. Most startups tank, and not just the dogfood portals we all heard about during the Internet Bubble. It&amp;rsquo;s common for a startup to be developing a genuinely good product, take slightly too long to do it, run out of money, and have to shut down.A startup is like a mosquito. A bear can absorb a hit and a crab is armored against one, but a mosquito is designed for one thing: to score. No energy is wasted on defense. The defense of mosquitos, as a species, is that there are a lot of them, but this is little consolation to the individual mosquito.Startups, like mosquitos, tend to be an all-or-nothing proposition. And you don&amp;rsquo;t generally know which of the two you&amp;rsquo;re going to get till the last minute. Viaweb came close to tanking several times. Our trajectory was like a sine wave. Fortunately we got bought at the top of the cycle, but it was damned close. While we were visiting Yahoo in California to talk about selling the company to them, we had to borrow a conference room to reassure an investor who was about to back out of a new round of funding that we needed to stay alive.The all-or-nothing aspect of startups was not something we wanted. Viaweb&amp;rsquo;s hackers were all extremely risk-averse. If there had been some way just to work super hard and get paid for it, without having a lottery mixed in, we would have been delighted. We would have much preferred a 100% chance of $1 million to a 20% chance of $10 million, even though theoretically the second is worth twice as much. Unfortunately, there is not currently any space in the business world where you can get the first deal.The closest you can get is by selling your startup in the early stages, giving up upside (and risk) for a smaller but guaranteed payoff. We had a chance to do this, and stupidly, as we then thought, let it slip by. After that we became comically eager to sell. For the next year or so, if anyone expressed the slightest curiosity about Viaweb we would try to sell them the company. But there were no takers, so we had to keep going.It would have been a bargain to buy us at an early stage, but companies doing acquisitions are not looking for bargains. A company big enough to acquire startups will be big enough to be fairly conservative, and within the company the people in charge of acquisitions will be among the more conservative, because they are likely to be business school types who joined the company late. They would rather overpay for a safe choice. So it is easier to sell an established startup, even at a large premium, than an early-stage one.Get UsersI think it&amp;rsquo;s a good idea to get bought, if you can. Running a business is different from growing one. It is just as well to let a big company take over once you reach cruising altitude. It&amp;rsquo;s also financially wiser, because selling allows you to diversify. What would you think of a financial advisor who put all his client&amp;rsquo;s assets into one volatile stock?How do you get bought? Mostly by doing the same things you&amp;rsquo;d do if you didn&amp;rsquo;t intend to sell the company. Being profitable, for example. But getting bought is also an art in its own right, and one that we spent a lot of time trying to master.Potential buyers will always delay if they can. The hard part about getting bought is getting them to act. For most people, the most powerful motivator is not the hope of gain, but the fear of loss. For potential acquirers, the most powerful motivator is the prospect that one of their competitors will buy you. This, as we found, causes CEOs to take red-eyes. The second biggest is the worry that, if they don&amp;rsquo;t buy you now, you&amp;rsquo;ll continue to grow rapidly and will cost more to acquire later, or even become a competitor.In both cases, what it all comes down to is users. You&amp;rsquo;d think that a company about to buy you would do a lot of research and decide for themselves how valuable your technology was. Not at all. What they go by is the number of users you have.In effect, acquirers assume the customers know who has the best technology. And this is not as stupid as it sounds. Users are the only real proof that you&amp;rsquo;ve created wealth. Wealth is what people want, and if people aren&amp;rsquo;t using your software, maybe it&amp;rsquo;s not just because you&amp;rsquo;re bad at marketing. Maybe it&amp;rsquo;s because you haven&amp;rsquo;t made what they want.Venture capitalists have a list of danger signs to watch out for. Near the top is the company run by techno-weenies who are obsessed with solving interesting technical problems, instead of making users happy. In a startup, you&amp;rsquo;re not just trying to solve problems. You&amp;rsquo;re trying to solve problems that users care about.So I think you should make users the test, just as acquirers do. Treat a startup as an optimization problem in which performance is measured by number of users. As anyone who has tried to optimize software knows, the key is measurement. When you try to guess where your program is slow, and what would make it faster, you almost always guess wrong.Number of users may not be the perfect test, but it will be very close. It&amp;rsquo;s what acquirers care about. It&amp;rsquo;s what revenues depend on. It&amp;rsquo;s what makes competitors unhappy. It&amp;rsquo;s what impresses reporters, and potential new users. Certainly it&amp;rsquo;s a better test than your a priori notions of what problems are important to solve, no matter how technically adept you are.Among other things, treating a startup as an optimization problem will help you avoid another pitfall that VCs worry about, and rightly&amp;ndash; taking a long time to develop a product. Now we can recognize this as something hackers already know to avoid: premature optimization. Get a version 1.0 out there as soon as you can. Until you have some users to measure, you&amp;rsquo;re optimizing based on guesses.The ball you need to keep your eye on here is the underlying principle that wealth is what people want. If you plan to get rich by creating wealth, you have to know what people want. So few businesses really pay attention to making customers happy. How often do you walk into a store, or call a company on the phone, with a feeling of dread in the back of your mind? When you hear &amp;ldquo;your call is important to us, please stay on the line,&amp;rdquo; do you think, oh good, now everything will be all right?A restaurant can afford to serve the occasional burnt dinner. But in technology, you cook one thing and that&amp;rsquo;s what everyone eats. So any difference between what people want and what you deliver is multiplied. You please or annoy customers wholesale. The closer you can get to what they want, the more wealth you generate.Wealth and PowerMaking wealth is not the only way to get rich. For most of human history it has not even been the most common. Until a few centuries ago, the main sources of wealth were mines, slaves and serfs, land, and cattle, and the only ways to acquire these rapidly were by inheritance, marriage, conquest, or confiscation. Naturally wealth had a bad reputation.Two things changed. The first was the rule of law. For most of the world&amp;rsquo;s history, if you did somehow accumulate a fortune, the ruler or his henchmen would find a way to steal it. But in medieval Europe something new happened. A new class of merchants and manufacturers began to collect in towns. [10] Together they were able to withstand the local feudal lord. So for the first time in our history, the bullies stopped stealing the nerds&amp;rsquo; lunch money. This was naturally a great incentive, and possibly indeed the main cause of the second big change, industrialization.A great deal has been written about the causes of the Industrial Revolution. But surely a necessary, if not sufficient, condition was that people who made fortunes be able to enjoy them in peace. [11] One piece of evidence is what happened to countries that tried to return to the old model, like the Soviet Union, and to a lesser extent Britain under the labor governments of the 1960s and early 1970s. Take away the incentive of wealth, and technical innovation grinds to a halt.Remember what a startup is, economically: a way of saying, I want to work faster. Instead of accumulating money slowly by being paid a regular wage for fifty years, I want to get it over with as soon as possible. So governments that forbid you to accumulate wealth are in effect decreeing that you work slowly. They&amp;rsquo;re willing to let you earn $3 million over fifty years, but they&amp;rsquo;re not willing to let you work so hard that you can do it in two. They are like the corporate boss that you can&amp;rsquo;t go to and say, I want to work ten times as hard, so please pay me ten times a much. Except this is not a boss you can escape by starting your own company.The problem with working slowly is not just that technical innovation happens slowly. It&amp;rsquo;s that it tends not to happen at all. It&amp;rsquo;s only when you&amp;rsquo;re deliberately looking for hard problems, as a way to use speed to the greatest advantage, that you take on this kind of project. Developing new technology is a pain in the ass. It is, as Edison said, one percent inspiration and ninety-nine percent perspiration. Without the incentive of wealth, no one wants to do it. Engineers will work on sexy projects like fighter planes and moon rockets for ordinary salaries, but more mundane technologies like light bulbs or semiconductors have to be developed by entrepreneurs.Startups are not just something that happened in Silicon Valley in the last couple decades. Since it became possible to get rich by creating wealth, everyone who has done it has used essentially the same recipe: measurement and leverage, where measurement comes from working with a small group, and leverage from developing new techniques. The recipe was the same in Florence in 1200 as it is in Santa Clara today.Understanding this may help to answer an important question: why Europe grew so powerful. Was it something about the geography of Europe? Was it that Europeans are somehow racially superior? Was it their religion? The answer (or at least the proximate cause) may be that the Europeans rode on the crest of a powerful new idea: allowing those who made a lot of money to keep it.Once you&amp;rsquo;re allowed to do that, people who want to get rich can do it by generating wealth instead of stealing it. The resulting technological growth translates not only into wealth but into military power. The theory that led to the stealth plane was developed by a Soviet mathematician. But because the Soviet Union didn&amp;rsquo;t have a computer industry, it remained for them a theory; they didn&amp;rsquo;t have hardware capable of executing the calculations fast enough to design an actual airplane.In that respect the Cold War teaches the same lesson as World War II and, for that matter, most wars in recent history. Don&amp;rsquo;t let a ruling class of warriors and politicians squash the entrepreneurs. The same recipe that makes individuals rich makes countries powerful. Let the nerds keep their lunch money, and you rule the world.Notes[1] One valuable thing you tend to get only in startups is uninterruptability. Different kinds of work have different time quanta. Someone proofreading a manuscript could probably be interrupted every fifteen minutes with little loss of productivity. But the time quantum for hacking is very long: it might take an hour just to load a problem into your head. So the cost of having someone from personnel call you about a form you forgot to fill out can be huge.This is why hackers give you such a baleful stare as they turn from their screen to answer your question. Inside their heads a giant house of cards is tottering.The mere possibility of being interrupted deters hackers from starting hard projects. This is why they tend to work late at night, and why it&amp;rsquo;s next to impossible to write great software in a cubicle (except late at night).One great advantage of startups is that they don&amp;rsquo;t yet have any of the people who interrupt you. There is no personnel department, and thus no form nor anyone to call you about it.[2] Faced with the idea that people working for startups might be 20 or 30 times as productive as those working for large companies, executives at large companies will naturally wonder, how could I get the people working for me to do that? The answer is simple: pay them to.Internally most companies are run like Communist states. If you believe in free markets, why not turn your company into one?Hypothesis: A company will be maximally profitable when each employee is paid in proportion to the wealth they generate.[3] Until recently even governments sometimes didn&amp;rsquo;t grasp the distinction between money and wealth. Adam Smith (Wealth of Nations, v:i) mentions several that tried to preserve their &amp;ldquo;wealth&amp;rdquo; by forbidding the export of gold or silver. But having more of the medium of exchange would not make a country richer; if you have more money chasing the same amount of material wealth, the only result is higher prices.[4] There are many senses of the word &amp;ldquo;wealth,&amp;rdquo; not all of them material. I&amp;rsquo;m not trying to make a deep philosophical point here about which is the true kind. I&amp;rsquo;m writing about one specific, rather technical sense of the word &amp;ldquo;wealth.&amp;rdquo; What people will give you money for. This is an interesting sort of wealth to study, because it is the kind that prevents you from starving. And what people will give you money for depends on them, not you.When you&amp;rsquo;re starting a business, it&amp;rsquo;s easy to slide into thinking that customers want what you do. During the Internet Bubble I talked to a woman who, because she liked the outdoors, was starting an &amp;ldquo;outdoor portal.&amp;rdquo; You know what kind of business you should start if you like the outdoors? One to recover data from crashed hard disks.What&amp;rsquo;s the connection? None at all. Which is precisely my point. If you want to create wealth (in the narrow technical sense of not starving) then you should be especially skeptical about any plan that centers on things you like doing. That is where your idea of what&amp;rsquo;s valuable is least likely to coincide with other people&amp;rsquo;s.[5] In the average car restoration you probably do make everyone else microscopically poorer, by doing a small amount of damage to the environment. While environmental costs should be taken into account, they don&amp;rsquo;t make wealth a zero-sum game. For example, if you repair a machine that&amp;rsquo;s broken because a part has come unscrewed, you create wealth with no environmental cost.[5b] This essay was written before Firefox.[6] Many people feel confused and depressed in their early twenties. Life seemed so much more fun in college. Well, of course it was. Don&amp;rsquo;t be fooled by the surface similarities. You&amp;rsquo;ve gone from guest to servant. It&amp;rsquo;s possible to have fun in this new world. Among other things, you now get to go behind the doors that say &amp;ldquo;authorized personnel only.&amp;rdquo; But the change is a shock at first, and all the worse if you&amp;rsquo;re not consciously aware of it.[7] When VCs asked us how long it would take another startup to duplicate our software, we used to reply that they probably wouldn&amp;rsquo;t be able to at all. I think this made us seem naive, or liars.[8] Few technologies have one clear inventor. So as a rule, if you know the &amp;ldquo;inventor&amp;rdquo; of something (the telephone, the assembly line, the airplane, the light bulb, the transistor) it is because their company made money from it, and the company&amp;rsquo;s PR people worked hard to spread the story. If you don&amp;rsquo;t know who invented something (the automobile, the television, the computer, the jet engine, the laser), it&amp;rsquo;s because other companies made all the money.[9] This is a good plan for life in general. If you have two choices, choose the harder. If you&amp;rsquo;re trying to decide whether to go out running or sit home and watch TV, go running. Probably the reason this trick works so well is that when you have two choices and one is harder, the only reason you&amp;rsquo;re even considering the other is laziness. You know in the back of your mind what&amp;rsquo;s the right thing to do, and this trick merely forces you to acknowledge it.[10] It is probably no accident that the middle class first appeared in northern Italy and the low countries, where there were no strong central governments. These two regions were the richest of their time and became the twin centers from which Renaissance civilization radiated. If they no longer play that role, it is because other places, like the United States, have been truer to the principles they discovered.[11] It may indeed be a sufficient condition. But if so, why didn&amp;rsquo;t the Industrial Revolution happen earlier? Two possible (and not incompatible) answers: (a) It did. The Industrial Revolution was one in a series. (b) Because in medieval towns, monopolies and guild regulations initially slowed the development of new means of production. Comment on this essay.Russian TranslationArabic TranslationSpanish Translation You&amp;rsquo;ll find this essay and 14 others in Hackers &amp;amp; Painters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/web20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/web20/</guid>
      <description>&lt;h1 id=&#34;web20&#34;&gt;Web20&lt;/h1&gt;&#xA;&lt;p&gt;Web 2.0 Want to start a startup? Get funded by Y Combinator. November 2005Does &amp;ldquo;Web 2.0&amp;rdquo; mean anything? Till recently I thought it didn&amp;rsquo;t, but the truth turns out to be more complicated. Originally, yes, it was meaningless. Now it seems to have acquired a meaning. And yet those who dislike the term are probably right, because if it means what I think it does, we don&amp;rsquo;t need it.I first heard the phrase &amp;ldquo;Web 2.0&amp;rdquo; in the name of the Web 2.0 conference in 2004. At the time it was supposed to mean using &amp;ldquo;the web as a platform,&amp;rdquo; which I took to refer to web-based applications. [1]So I was surprised at a conference this summer when Tim O&amp;rsquo;Reilly led a session intended to figure out a definition of &amp;ldquo;Web 2.0.&amp;rdquo; Didn&amp;rsquo;t it already mean using the web as a platform? And if it didn&amp;rsquo;t already mean something, why did we need the phrase at all?OriginsTim says the phrase &amp;ldquo;Web 2.0&amp;rdquo; first arose in &amp;ldquo;a brainstorming session between O&amp;rsquo;Reilly and Medialive International.&amp;rdquo; What is Medialive International? &amp;ldquo;Producers of technology tradeshows and conferences,&amp;rdquo; according to their site. So presumably that&amp;rsquo;s what this brainstorming session was about. O&amp;rsquo;Reilly wanted to organize a conference about the web, and they were wondering what to call it.I don&amp;rsquo;t think there was any deliberate plan to suggest there was a new version of the web. They just wanted to make the point that the web mattered again. It was a kind of semantic deficit spending: they knew new things were coming, and the &amp;ldquo;2.0&amp;rdquo; referred to whatever those might turn out to be.And they were right. New things were coming. But the new version number led to some awkwardness in the short term. In the process of developing the pitch for the first conference, someone must have decided they&amp;rsquo;d better take a stab at explaining what that &amp;ldquo;2.0&amp;rdquo; referred to. Whatever it meant, &amp;ldquo;the web as a platform&amp;rdquo; was at least not too constricting.The story about &amp;ldquo;Web 2.0&amp;rdquo; meaning the web as a platform didn&amp;rsquo;t live much past the first conference. By the second conference, what &amp;ldquo;Web 2.0&amp;rdquo; seemed to mean was something about democracy. At least, it did when people wrote about it online. The conference itself didn&amp;rsquo;t seem very grassroots. It cost $2800, so the only people who could afford to go were VCs and people from big companies.And yet, oddly enough, Ryan Singel&amp;rsquo;s article about the conference in Wired News spoke of &amp;ldquo;throngs of geeks.&amp;rdquo; When a friend of mine asked Ryan about this, it was news to him. He said he&amp;rsquo;d originally written something like &amp;ldquo;throngs of VCs and biz dev guys&amp;rdquo; but had later shortened it just to &amp;ldquo;throngs,&amp;rdquo; and that this must have in turn been expanded by the editors into &amp;ldquo;throngs of geeks.&amp;rdquo; After all, a Web 2.0 conference would presumably be full of geeks, right?Well, no. There were about 7. Even Tim O&amp;rsquo;Reilly was wearing a suit, a sight so alien I couldn&amp;rsquo;t parse it at first. I saw him walk by and said to one of the O&amp;rsquo;Reilly people &amp;ldquo;that guy looks just like Tim.&amp;ldquo;&amp;ldquo;Oh, that&amp;rsquo;s Tim. He bought a suit.&amp;rdquo; I ran after him, and sure enough, it was. He explained that he&amp;rsquo;d just bought it in Thailand.The 2005 Web 2.0 conference reminded me of Internet trade shows during the Bubble, full of prowling VCs looking for the next hot startup. There was that same odd atmosphere created by a large number of people determined not to miss out. Miss out on what? They didn&amp;rsquo;t know. Whatever was going to happen—whatever Web 2.0 turned out to be.I wouldn&amp;rsquo;t quite call it &amp;ldquo;Bubble 2.0&amp;rdquo; just because VCs are eager to invest again. The Internet is a genuinely big deal. The bust was as much an overreaction as the boom. It&amp;rsquo;s to be expected that once we started to pull out of the bust, there would be a lot of growth in this area, just as there was in the industries that spiked the sharpest before the Depression.The reason this won&amp;rsquo;t turn into a second Bubble is that the IPO market is gone. Venture investors are driven by exit strategies. The reason they were funding all those laughable startups during the late 90s was that they hoped to sell them to gullible retail investors; they hoped to be laughing all the way to the bank. Now that route is closed. Now the default exit strategy is to get bought, and acquirers are less prone to irrational exuberance than IPO investors. The closest you&amp;rsquo;ll get to Bubble valuations is Rupert Murdoch paying $580 million for Myspace. That&amp;rsquo;s only off by a factor of 10 or so.1. AjaxDoes &amp;ldquo;Web 2.0&amp;rdquo; mean anything more than the name of a conference yet? I don&amp;rsquo;t like to admit it, but it&amp;rsquo;s starting to. When people say &amp;ldquo;Web 2.0&amp;rdquo; now, I have some idea what they mean. And the fact that I both despise the phrase and understand it is the surest proof that it has started to mean something.One ingredient of its meaning is certainly Ajax, which I can still only just bear to use without scare quotes. Basically, what &amp;ldquo;Ajax&amp;rdquo; means is &amp;ldquo;Javascript now works.&amp;rdquo; And that in turn means that web-based applications can now be made to work much more like desktop ones.As you read this, a whole new generation of software is being written to take advantage of Ajax. There hasn&amp;rsquo;t been such a wave of new applications since microcomputers first appeared. Even Microsoft sees it, but it&amp;rsquo;s too late for them to do anything more than leak &amp;ldquo;internal&amp;rdquo; documents designed to give the impression they&amp;rsquo;re on top of this new trend.In fact the new generation of software is being written way too fast for Microsoft even to channel it, let alone write their own in house. Their only hope now is to buy all the best Ajax startups before Google does. And even that&amp;rsquo;s going to be hard, because Google has as big a head start in buying microstartups as it did in search a few years ago. After all, Google Maps, the canonical Ajax application, was the result of a startup they bought.So ironically the original description of the Web 2.0 conference turned out to be partially right: web-based applications are a big component of Web 2.0. But I&amp;rsquo;m convinced they got this right by accident. The Ajax boom didn&amp;rsquo;t start till early 2005, when Google Maps appeared and the term &amp;ldquo;Ajax&amp;rdquo; was coined.2. DemocracyThe second big element of Web 2.0 is democracy. We now have several examples to prove that amateurs can surpass professionals, when they have the right kind of system to channel their efforts. Wikipedia may be the most famous. Experts have given Wikipedia middling reviews, but they miss the critical point: it&amp;rsquo;s good enough. And it&amp;rsquo;s free, which means people actually read it. On the web, articles you have to pay for might as well not exist. Even if you were willing to pay to read them yourself, you can&amp;rsquo;t link to them. They&amp;rsquo;re not part of the conversation.Another place democracy seems to win is in deciding what counts as news. I never look at any news site now except Reddit. [2] I know if something major happens, or someone writes a particularly interesting article, it will show up there. Why bother checking the front page of any specific paper or magazine? Reddit&amp;rsquo;s like an RSS feed for the whole web, with a filter for quality. Similar sites include Digg, a technology news site that&amp;rsquo;s rapidly approaching Slashdot in popularity, and del.icio.us, the collaborative bookmarking network that set off the &amp;ldquo;tagging&amp;rdquo; movement. And whereas Wikipedia&amp;rsquo;s main appeal is that it&amp;rsquo;s good enough and free, these sites suggest that voters do a significantly better job than human editors.The most dramatic example of Web 2.0 democracy is not in the selection of ideas, but their production. I&amp;rsquo;ve noticed for a while that the stuff I read on individual people&amp;rsquo;s sites is as good as or better than the stuff I read in newspapers and magazines. And now I have independent evidence: the top links on Reddit are generally links to individual people&amp;rsquo;s sites rather than to magazine articles or news stories.My experience of writing for magazines suggests an explanation. Editors. They control the topics you can write about, and they can generally rewrite whatever you produce. The result is to damp extremes. Editing yields 95th percentile writing—95% of articles are improved by it, but 5% are dragged down. 5% of the time you get &amp;ldquo;throngs of geeks.&amp;ldquo;On the web, people can publish whatever they want. Nearly all of it falls short of the editor-damped writing in print publications. But the pool of writers is very, very large. If it&amp;rsquo;s large enough, the lack of damping means the best writing online should surpass the best in print. [3] And now that the web has evolved mechanisms for selecting good stuff, the web wins net. Selection beats damping, for the same reason market economies beat centrally planned ones.Even the startups are different this time around. They are to the startups of the Bubble what bloggers are to the print media. During the Bubble, a startup meant a company headed by an MBA that was blowing through several million dollars of VC money to &amp;ldquo;get big fast&amp;rdquo; in the most literal sense. Now it means a smaller, younger, more technical group that just decided to make something great. They&amp;rsquo;ll decide later if they want to raise VC-scale funding, and if they take it, they&amp;rsquo;ll take it on their terms.3. Don&amp;rsquo;t Maltreat UsersI think everyone would agree that democracy and Ajax are elements of &amp;ldquo;Web 2.0.&amp;rdquo; I also see a third: not to maltreat users. During the Bubble a lot of popular sites were quite high-handed with users. And not just in obvious ways, like making them register, or subjecting them to annoying ads. The very design of the average site in the late 90s was an abuse. Many of the most popular sites were loaded with obtrusive branding that made them slow to load and sent the user the message: this is our site, not yours. (There&amp;rsquo;s a physical analog in the Intel and Microsoft stickers that come on some laptops.)I think the root of the problem was that sites felt they were giving something away for free, and till recently a company giving anything away for free could be pretty high-handed about it. Sometimes it reached the point of economic sadism: site owners assumed that the more pain they caused the user, the more benefit it must be to them. The most dramatic remnant of this model may be at salon.com, where you can read the beginning of a story, but to get the rest you have sit through a movie.At Y Combinator we advise all the startups we fund never to lord it over users. Never make users register, unless you need to in order to store something for them. If you do make users register, never make them wait for a confirmation link in an email; in fact, don&amp;rsquo;t even ask for their email address unless you need it for some reason. Don&amp;rsquo;t ask them any unnecessary questions. Never send them email unless they explicitly ask for it. Never frame pages you link to, or open them in new windows. If you have a free version and a pay version, don&amp;rsquo;t make the free version too restricted. And if you find yourself asking &amp;ldquo;should we allow users to do x?&amp;rdquo; just answer &amp;ldquo;yes&amp;rdquo; whenever you&amp;rsquo;re unsure. Err on the side of generosity.In How to Start a Startup I advised startups never to let anyone fly under them, meaning never to let any other company offer a cheaper, easier solution. Another way to fly low is to give users more power. Let users do what they want. If you don&amp;rsquo;t and a competitor does, you&amp;rsquo;re in trouble.iTunes is Web 2.0ish in this sense. Finally you can buy individual songs instead of having to buy whole albums. The recording industry hated the idea and resisted it as long as possible. But it was obvious what users wanted, so Apple flew under the labels. [4] Though really it might be better to describe iTunes as Web 1.5. Web 2.0 applied to music would probably mean individual bands giving away DRMless songs for free.The ultimate way to be nice to users is to give them something for free that competitors charge for. During the 90s a lot of people probably thought we&amp;rsquo;d have some working system for micropayments by now. In fact things have gone in the other direction. The most successful sites are the ones that figure out new ways to give stuff away for free. Craigslist has largely destroyed the classified ad sites of the 90s, and OkCupid looks likely to do the same to the previous generation of dating sites.Serving web pages is very, very cheap. If you can make even a fraction of a cent per page view, you can make a profit. And technology for targeting ads continues to improve. I wouldn&amp;rsquo;t be surprised if ten years from now eBay had been supplanted by an ad-supported freeBay (or, more likely, gBay).Odd as it might sound, we tell startups that they should try to make as little money as possible. If you can figure out a way to turn a billion dollar industry into a fifty million dollar industry, so much the better, if all fifty million go to you. Though indeed, making things cheaper often turns out to generate more money in the end, just as automating things often turns out to generate more jobs.The ultimate target is Microsoft. What a bang that balloon is going to make when someone pops it by offering a free web-based alternative to MS Office. [5] Who will? Google? They seem to be taking their time. I suspect the pin will be wielded by a couple of 20 year old hackers who are too naive to be intimidated by the idea. (How hard can it be?)The Common ThreadAjax, democracy, and not dissing users. What do they all have in common? I didn&amp;rsquo;t realize they had anything in common till recently, which is one of the reasons I disliked the term &amp;ldquo;Web 2.0&amp;rdquo; so much. It seemed that it was being used as a label for whatever happened to be new—that it didn&amp;rsquo;t predict anything.But there is a common thread. Web 2.0 means using the web the way it&amp;rsquo;s meant to be used. The &amp;ldquo;trends&amp;rdquo; we&amp;rsquo;re seeing now are simply the inherent nature of the web emerging from under the broken models that got imposed on it during the Bubble.I realized this when I read an interview with Joe Kraus, the co-founder of Excite. [6] Excite really never got the business model right at all. We fell into the classic problem of how when a new medium comes out it adopts the practices, the content, the business models of the old medium—which fails, and then the more appropriate models get figured out. It may have seemed as if not much was happening during the years after the Bubble burst. But in retrospect, something was happening: the web was finding its natural angle of repose. The democracy component, for example—that&amp;rsquo;s not an innovation, in the sense of something someone made happen. That&amp;rsquo;s what the web naturally tends to produce.Ditto for the idea of delivering desktop-like applications over the web. That idea is almost as old as the web. But the first time around it was co-opted by Sun, and we got Java applets. Java has since been remade into a generic replacement for C++, but in 1996 the story about Java was that it represented a new model of software. Instead of desktop applications, you&amp;rsquo;d run Java &amp;ldquo;applets&amp;rdquo; delivered from a server.This plan collapsed under its own weight. Microsoft helped kill it, but it would have died anyway. There was no uptake among hackers. When you find PR firms promoting something as the next development platform, you can be sure it&amp;rsquo;s not. If it were, you wouldn&amp;rsquo;t need PR firms to tell you, because hackers would already be writing stuff on top of it, the way sites like Busmonster used Google Maps as a platform before Google even meant it to be one.The proof that Ajax is the next hot platform is that thousands of hackers have spontaneously started building things on top of it. Mikey likes it.There&amp;rsquo;s another thing all three components of Web 2.0 have in common. Here&amp;rsquo;s a clue. Suppose you approached investors with the following idea for a Web 2.0 startup: Sites like del.icio.us and flickr allow users to &amp;ldquo;tag&amp;rdquo; content with descriptive tokens. But there is also huge source of implicit tags that they ignore: the text within web links. Moreover, these links represent a social network connecting the individuals and organizations who created the pages, and by using graph theory we can compute from this network an estimate of the reputation of each member. We plan to mine the web for these implicit tags, and use them together with the reputation hierarchy they embody to enhance web searches. How long do you think it would take them on average to realize that it was a description of Google?Google was a pioneer in all three components of Web 2.0: their core business sounds crushingly hip when described in Web 2.0 terms, &amp;ldquo;Don&amp;rsquo;t maltreat users&amp;rdquo; is a subset of &amp;ldquo;Don&amp;rsquo;t be evil,&amp;rdquo; and of course Google set off the whole Ajax boom with Google Maps.Web 2.0 means using the web as it was meant to be used, and Google does. That&amp;rsquo;s their secret. They&amp;rsquo;re sailing with the wind, instead of sitting becalmed praying for a business model, like the print media, or trying to tack upwind by suing their customers, like Microsoft and the record labels. [7]Google doesn&amp;rsquo;t try to force things to happen their way. They try to figure out what&amp;rsquo;s going to happen, and arrange to be standing there when it does. That&amp;rsquo;s the way to approach technology—and as business includes an ever larger technological component, the right way to do business.The fact that Google is a &amp;ldquo;Web 2.0&amp;rdquo; company shows that, while meaningful, the term is also rather bogus. It&amp;rsquo;s like the word &amp;ldquo;allopathic.&amp;rdquo; It just means doing things right, and it&amp;rsquo;s a bad sign when you have a special word for that. Notes[1] From the conference site, June 2004: &amp;ldquo;While the first wave of the Web was closely tied to the browser, the second wave extends applications across the web and enables a new generation of services and business opportunities.&amp;rdquo; To the extent this means anything, it seems to be about web-based applications.[2] Disclosure: Reddit was funded by Y Combinator. But although I started using it out of loyalty to the home team, I&amp;rsquo;ve become a genuine addict. While we&amp;rsquo;re at it, I&amp;rsquo;m also an investor in !MSFT, having sold all my shares earlier this year.[3] I&amp;rsquo;m not against editing. I spend more time editing than writing, and I have a group of picky friends who proofread almost everything I write. What I dislike is editing done after the fact by someone else.[4] Obvious is an understatement. Users had been climbing in through the window for years before Apple finally moved the door.[5] Hint: the way to create a web-based alternative to Office may not be to write every component yourself, but to establish a protocol for web-based apps to share a virtual home directory spread across multiple servers. Or it may be to write it all yourself.[6] In Jessica Livingston&amp;rsquo;s Founders at Work.[7] Microsoft didn&amp;rsquo;t sue their customers directly, but they seem to have done all they could to help SCO sue them.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Peter Norvig, Aaron Swartz, and Jeff Weiner for reading drafts of this, and to the guys at O&amp;rsquo;Reilly and Adaptive Path for answering my questions.Interview About Web 2.0Spanish TranslationGerman TranslationRussian TranslationJapanese Translation If you liked this, you may also like Hackers &amp;amp; Painters.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/webstartups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/webstartups/</guid>
      <description>&lt;h1 id=&#34;webstartups&#34;&gt;Webstartups&lt;/h1&gt;&#xA;&lt;p&gt;The Future of Web Startups Want to start a startup? Get funded by Y Combinator. October 2007(This essay is derived from a keynote at FOWA in October 2007.)There&amp;rsquo;s something interesting happening right now. Startups are undergoing the same transformation that technology does when it becomes cheaper.It&amp;rsquo;s a pattern we see over and over in technology. Initially there&amp;rsquo;s some device that&amp;rsquo;s very expensive and made in small quantities. Then someone discovers how to make them cheaply; many more get built; and as a result they can be used in new ways.Computers are a familiar example. When I was a kid, computers were big, expensive machines built one at a time. Now they&amp;rsquo;re a commodity. Now we can stick computers in everything.This pattern is very old. Most of the turning points in economic history are instances of it. It happened to steel in the 1850s, and to power in the 1780s. It happened to cloth manufacture in the thirteenth century, generating the wealth that later brought about the Renaissance. Agriculture itself was an instance of this pattern.Now as well as being produced by startups, this pattern is happening to startups. It&amp;rsquo;s so cheap to start web startups that orders of magnitudes more will be started. If the pattern holds true, that should cause dramatic changes.1. Lots of StartupsSo my first prediction about the future of web startups is pretty straightforward: there will be a lot of them. When starting a startup was expensive, you had to get the permission of investors to do it. Now the only threshold is courage.Even that threshold is getting lower, as people watch others take the plunge and survive. In the last batch of startups we funded, we had several founders who said they&amp;rsquo;d thought of applying before, but weren&amp;rsquo;t sure and got jobs instead. It was only after hearing reports of friends who&amp;rsquo;d done it that they decided to try it themselves.Starting a startup is hard, but having a 9 to 5 job is hard too, and in some ways a worse kind of hard. In a startup you have lots of worries, but you don&amp;rsquo;t have that feeling that your life is flying by like you do in a big company. Plus in a startup you could make much more money.As word spreads that startups work, the number may grow to a point that would now seem surprising.We now think of it as normal to have a job at a company, but this is the thinnest of historical veneers. Just two or three lifetimes ago, most people in what are now called industrialized countries lived by farming. So while it may seem surprising to propose that large numbers of people will change the way they make a living, it would be more surprising if they didn&amp;rsquo;t.2. StandardizationWhen technology makes something dramatically cheaper, standardization always follows. When you make things in large volumes you tend to standardize everything that doesn&amp;rsquo;t need to change.At Y Combinator we still only have four people, so we try to standardize everything. We could hire employees, but we want to be forced to figure out how to scale investing.We often tell startups to release a minimal version one quickly, then let the needs of the users determine what to do next. In essense, let the market design the product. We&amp;rsquo;ve done the same thing ourselves. We think of the techniques we&amp;rsquo;re developing for dealing with large numbers of startups as like software. Sometimes it literally is software, like Hacker News and our application system.One of the most important things we&amp;rsquo;ve been working on standardizing are investment terms. Till now investment terms have been individually negotiated. This is a problem for founders, because it makes raising money take longer and cost more in legal fees. So as well as using the same paperwork for every deal we do, we&amp;rsquo;ve commissioned generic angel paperwork that all the startups we fund can use for future rounds.Some investors will still want to cook up their own deal terms. Series A rounds, where you raise a million dollars or more, will be custom deals for the forseeable future. But I think angel rounds will start to be done mostly with standardized agreements. An angel who wants to insert a bunch of complicated terms into the agreement is probably not one you want anyway.3. New Attitude to AcquisitionAnother thing I see starting to get standardized is acquisitions. As the volume of startups increases, big companies will start to develop standardized procedures that make acquisitions little more work than hiring someone.Google is the leader here, as in so many areas of technology. They buy a lot of startups— more than most people realize, because they only announce a fraction of them. And being Google, they&amp;rsquo;re figuring out how to do it efficiently.One problem they&amp;rsquo;ve solved is how to think about acquisitions. For most companies, acquisitions still carry some stigma of inadequacy. Companies do them because they have to, but there&amp;rsquo;s usually some feeling they shouldn&amp;rsquo;t have to—that their own programmers should be able to build everything they need.Google&amp;rsquo;s example should cure the rest of the world of this idea. Google has by far the best programmers of any public technology company. If they don&amp;rsquo;t have a problem doing acquisitions, the others should have even less problem. However many Google does, Microsoft should do ten times as many.One reason Google doesn&amp;rsquo;t have a problem with acquisitions is that they know first-hand the quality of the people they can get that way. Larry and Sergey only started Google after making the rounds of the search engines trying to sell their idea and finding no takers. They&amp;rsquo;ve been the guys coming in to visit the big company, so they know who might be sitting across that conference table from them.4. Riskier Strategies are PossibleRisk is always proportionate to reward. The way to get really big returns is to do things that seem crazy, like starting a new search engine in 1998, or turning down a billion dollar acquisition offer.This has traditionally been a problem in venture funding. Founders and investors have different attitudes to risk. Knowing that risk is on average proportionate to reward, investors like risky strategies, while founders, who don&amp;rsquo;t have a big enough sample size to care what&amp;rsquo;s true on average, tend to be more conservative.If startups are easy to start, this conflict goes away, because founders can start them younger, when it&amp;rsquo;s rational to take more risk, and can start more startups total in their careers. When founders can do lots of startups, they can start to look at the world in the same portfolio-optimizing way as investors. And that means the overall amount of wealth created can be greater, because strategies can be riskier.5. Younger, Nerdier FoundersIf startups become a cheap commodity, more people will be able to have them, just as more people could have computers once microprocessors made them cheap. And in particular, younger and more technical founders will be able to start startups than could before.Back when it cost a lot to start a startup, you had to convince investors to let you do it. And that required very different skills from actually doing the startup. If investors were perfect judges, the two would require exactly the same skills. But unfortunately most investors are terrible judges. I know because I see behind the scenes what an enormous amount of work it takes to raise money, and the amount of selling required in an industry is always inversely proportional to the judgement of the buyers.Fortunately, if startups get cheaper to start, there&amp;rsquo;s another way to convince investors. Instead of going to venture capitalists with a business plan and trying to convince them to fund it, you can get a product launched on a few tens of thousands of dollars of seed money from us or your uncle, and approach them with a working company instead of a plan for one. Then instead of having to seem smooth and confident, you can just point them to Alexa.This way of convincing investors is better suited to hackers, who often went into technology in part because they felt uncomfortable with the amount of fakeness required in other fields.6. Startup Hubs Will PersistIt might seem that if startups get cheap to start, it will mean the end of startup hubs like Silicon Valley. If all you need to start a startup is rent money, you should be able to do it anywhere.This is kind of true and kind of false. It&amp;rsquo;s true that you can now start a startup anywhere. But you have to do more with a startup than just start it. You have to make it succeed. And that is more likely to happen in a startup hub.I&amp;rsquo;ve thought a lot about this question, and it seems to me the increasing cheapness of web startups will if anything increase the importance of startup hubs. The value of startup hubs, like centers for any kind of business, lies in something very old-fashioned: face to face meetings. No technology in the immediate future will replace walking down University Ave and running into a friend who tells you how to fix a bug that&amp;rsquo;s been bothering you all weekend, or visiting a friend&amp;rsquo;s startup down the street and ending up in a conversation with one of their investors.The question of whether to be in a startup hub is like the question of whether to take outside investment. The question is not whether you need it, but whether it brings any advantage at all. Because anything that brings an advantage will give your competitors an advantage over you if they do it and you don&amp;rsquo;t. So if you hear someone saying &amp;ldquo;we don&amp;rsquo;t need to be in Silicon Valley,&amp;rdquo; that use of the word &amp;ldquo;need&amp;rdquo; is a sign they&amp;rsquo;re not even thinking about the question right.And while startup hubs are as powerful magnets as ever, the increasing cheapness of starting a startup means the particles they&amp;rsquo;re attracting are getting lighter. A startup now can be just a pair of 22 year old guys. A company like that can move much more easily than one with 10 people, half of whom have kids.We know because we make people move for Y Combinator, and it doesn&amp;rsquo;t seem to be a problem. The advantage of being able to work together face to face for three months outweighs the inconvenience of moving. Ask anyone who&amp;rsquo;s done it.The mobility of seed-stage startups means that seed funding is a national business. One of the most common emails we get is from people asking if we can help them set up a local clone of Y Combinator. But this just wouldn&amp;rsquo;t work. Seed funding isn&amp;rsquo;t regional, just as big research universities aren&amp;rsquo;t.Is seed funding not merely national, but international? Interesting question. There are signs it may be. We&amp;rsquo;ve had an ongoing stream of founders from outside the US, and they tend to do particularly well, because they&amp;rsquo;re all people who were so determined to succeed that they were willing to move to another country to do it.The more mobile startups get, the harder it would be to start new silicon valleys. If startups are mobile, the best local talent will go to the real Silicon Valley, and all they&amp;rsquo;ll get at the local one will be the people who didn&amp;rsquo;t have the energy to move.This is not a nationalistic idea, incidentally. It&amp;rsquo;s cities that compete, not countries. Atlanta is just as hosed as Munich.7. Better Judgement NeededIf the number of startups increases dramatically, then the people whose job is to judge them are going to have to get better at it. I&amp;rsquo;m thinking particularly of investors and acquirers. We now get on the order of 1000 applications a year. What are we going to do if we get 10,000?That&amp;rsquo;s actually an alarming idea. But we&amp;rsquo;ll figure out some kind of answer. We&amp;rsquo;ll have to. It will probably involve writing some software, but fortunately we can do that.Acquirers will also have to get better at picking winners. They generally do better than investors, because they pick later, when there&amp;rsquo;s more performance to measure. But even at the most advanced acquirers, identifying companies to buy is extremely ad hoc, and completing the acquisition often involves a great deal of unneccessary friction.I think acquirers may eventually have chief acquisition officers who will both identify good acquisitions and make the deals happen. At the moment those two functions are separate. Promising new startups are often discovered by developers. If someone powerful enough wants to buy them, the deal is handed over to corp dev guys to negotiate. It would be better if both were combined in one group, headed by someone with a technical background and some vision of what they wanted to accomplish. Maybe in the future big companies will have both a VP of Engineering responsible for technology developed in-house, and a CAO responsible for bringing technology in from outside.At the moment, there is no one within big companies who gets in trouble when they buy a startup for $200 million that they could have bought earlier for $20 million. There should start to be someone who gets in trouble for that.8. College Will ChangeIf the best hackers start their own companies after college instead of getting jobs, that will change what happens in college. Most of these changes will be for the better. I think the experience of college is warped in a bad way by the expectation that afterward you&amp;rsquo;ll be judged by potential employers.One change will be in the meaning of &amp;ldquo;after college,&amp;rdquo; which will switch from when one graduates from college to when one leaves it. If you&amp;rsquo;re starting your own company, why do you need a degree? We don&amp;rsquo;t encourage people to start startups during college, but the best founders are certainly capable of it. Some of the most successful companies we&amp;rsquo;ve funded were started by undergrads.I grew up in a time where college degrees seemed really important, so I&amp;rsquo;m alarmed to be saying things like this, but there&amp;rsquo;s nothing magical about a degree. There&amp;rsquo;s nothing that magically changes after you take that last exam. The importance of degrees is due solely to the administrative needs of large organizations. These can certainly affect your life—it&amp;rsquo;s hard to get into grad school, or to get a work visa in the US, without an undergraduate degree—but tests like this will matter less and less.As well as mattering less whether students get degrees, it will also start to matter less where they go to college. In a startup you&amp;rsquo;re judged by users, and they don&amp;rsquo;t care where you went to college. So in a world of startups, elite universities will play less of a role as gatekeepers. In the US it&amp;rsquo;s a national scandal how easily children of rich parents game college admissions. But the way this problem ultimately gets solved may not be by reforming the universities but by going around them. We in the technology world are used to that sort of solution: you don&amp;rsquo;t beat the incumbents; you redefine the problem to make them irrelevant.The greatest value of universities is not the brand name or perhaps even the classes so much as the people you meet. If it becomes common to start a startup after college, students may start trying to maximize this. Instead of focusing on getting internships at companies they want to work for, they may start to focus on working with other students they want as cofounders.What students do in their classes will change too. Instead of trying to get good grades to impress future employers, students will try to learn things. We&amp;rsquo;re talking about some pretty dramatic changes here.9. Lots of CompetitorsIf it gets easier to start a startup, it&amp;rsquo;s easier for competitors too. That doesn&amp;rsquo;t erase the advantage of increased cheapness, however. You&amp;rsquo;re not all playing a zero-sum game. There&amp;rsquo;s not some fixed number of startups that can succeed, regardless of how many are started.In fact, I don&amp;rsquo;t think there&amp;rsquo;s any limit to the number of startups that could succeed. Startups succeed by creating wealth, which is the satisfaction of people&amp;rsquo;s desires. And people&amp;rsquo;s desires seem to be effectively infinite, at least in the short term.What the increasing number of startups does mean is that you won&amp;rsquo;t be able to sit on a good idea. Other people have your idea, and they&amp;rsquo;ll be increasingly likely to do something about it.10. Faster AdvancesThere&amp;rsquo;s a good side to that, at least for consumers of technology. If people get right to work implementing ideas instead of sitting on them, technology will evolve faster.Some kinds of innovations happen a company at a time, like the punctuated equilibrium model of evolution. There are some kinds of ideas that are so threatening that it&amp;rsquo;s hard for big companies even to think of them. Look at what a hard time Microsoft is having discovering web apps. They&amp;rsquo;re like a character in a movie that everyone in the audience can see something bad is about to happen to, but who can&amp;rsquo;t see it himself. The big innovations that happen a company at a time will obviously happen faster if the rate of new companies increases.But in fact there will be a double speed increase. People won&amp;rsquo;t wait as long to act on new ideas, but also those ideas will increasingly be developed within startups rather than big companies. Which means technology will evolve faster per company as well.Big companies are just not a good place to make things happen fast. I talked recently to a founder whose startup had been acquired by a big company. He was a precise sort of guy, so he&amp;rsquo;d measured their productivity before and after. He counted lines of code, which can be a dubious measure, but in this case was meaningful because it was the same group of programmers. He found they were one thirteenth as productive after the acquisition.The company that bought them was not a particularly stupid one. I think what he was measuring was mostly the cost of bigness. I experienced this myself, and his number sounds about right. There&amp;rsquo;s something about big companies that just sucks the energy out of you.Imagine what all that energy could do if it were put to use. There is an enormous latent capacity in the world&amp;rsquo;s hackers that most people don&amp;rsquo;t even realize is there. That&amp;rsquo;s the main reason we do Y Combinator: to let loose all this energy by making it easy for hackers to start their own startups.A Series of TubesThe process of starting startups is currently like the plumbing in an old house. The pipes are narrow and twisty, and there are leaks in every joint. In the future this mess will gradually be replaced by a single, huge pipe. The water will still have to get from A to B, but it will get there faster and without the risk of spraying out through some random leak.This will change a lot of things for the better. In a big, straight pipe like that, the force of being measured by one&amp;rsquo;s performance will propagate back through the whole system. Performance is always the ultimate test, but there are so many kinks in the plumbing now that most people are insulated from it most of the time. So you end up with a world in which high school students think they need to get good grades to get into elite colleges, and college students think they need to get good grades to impress employers, within which the employees waste most of their time in political battles, and from which consumers have to buy anyway because there are so few choices. Imagine if that sequence became a big, straight pipe. Then the effects of being measured by performance would propagate all the way back to high school, flushing out all the arbitrary stuff people are measured by now. That is the future of web startups.Thanks to Brian Oberkirch and Simon Willison for inviting me to speak, and the crew at Carson Systems for making everything run smoothly.Japanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/weird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/weird/</guid>
      <description>&lt;h1 id=&#34;weird&#34;&gt;Weird&lt;/h1&gt;&#xA;&lt;p&gt;Weird Languages August 2021When people say that in their experience all programming languages are basically equivalent, they&amp;rsquo;re making a statement not about languages but about the kind of programming they&amp;rsquo;ve done.99.5% of programming consists of gluing together calls to library functions. All popular languages are equally good at this. So one can easily spend one&amp;rsquo;s whole career operating in the intersection of popular programming languages.But the other .5% of programming is disproportionately interesting. If you want to learn what it consists of, the weirdness of weird languages is a good clue to follow.Weird languages aren&amp;rsquo;t weird by accident. Not the good ones, at least. The weirdness of the good ones usually implies the existence of some form of programming that&amp;rsquo;s not just the usual gluing together of library calls.A concrete example: Lisp macros. Lisp macros seem weird even to many Lisp programmers. They&amp;rsquo;re not only not in the intersection of popular languages, but by their nature would be hard to implement properly in a language without turning it into a dialect of Lisp. And macros are definitely evidence of techniques that go beyond glue programming. For example, solving problems by first writing a language for problems of that type, and then writing your specific application in it. Nor is this all you can do with macros; it&amp;rsquo;s just one region in a space of program-manipulating techniques that even now is far from fully explored.So if you want to expand your concept of what programming can be, one way to do it is by learning weird languages. Pick a language that most programmers consider weird but whose median user is smart, and then focus on the differences between this language and the intersection of popular languages. What can you say in this language that would be impossibly inconvenient to say in others? In the process of learning how to say things you couldn&amp;rsquo;t previously say, you&amp;rsquo;ll probably be learning how to think things you couldn&amp;rsquo;t previously think. Thanks to Trevor Blackwell, Patrick Collison, Daniel Gackle, Amjad Masad, and Robert Morris for reading drafts of this. Japanese Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/when/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/when/</guid>
      <description>&lt;h1 id=&#34;when&#34;&gt;When&lt;/h1&gt;&#xA;&lt;p&gt;When To Do What You Love September 2024There&amp;rsquo;s some debate about whether it&amp;rsquo;s a good idea to &amp;ldquo;follow your passion.&amp;rdquo; In fact the question is impossible to answer with a simple yes or no. Sometimes you should and sometimes you shouldn&amp;rsquo;t, but the border between should and shouldn&amp;rsquo;t is very complicated. The only way to give a general answer is to trace it.When people talk about this question, there&amp;rsquo;s always an implicit &amp;ldquo;instead of.&amp;rdquo; All other things being equal, why wouldn&amp;rsquo;t you work on what interests you the most? So even raising the question implies that all other things aren&amp;rsquo;t equal, and that you have to choose between working on what interests you the most and something else, like what pays the best.And indeed if your main goal is to make money, you can&amp;rsquo;t usually afford to work on what interests you the most. People pay you for doing what they want, not what you want. But there&amp;rsquo;s an obvious exception: when you both want the same thing. For example, if you love football, and you&amp;rsquo;re good enough at it, you can get paid a lot to play it.Of course the odds are against you in a case like football, because so many other people like playing it too. This is not to say you shouldn&amp;rsquo;t try though. It depends how much ability you have and how hard you&amp;rsquo;re willing to work.The odds are better when you have strange tastes: when you like something that pays well and that few other people like. For example, it&amp;rsquo;s clear that Bill Gates truly loved running a software company. He didn&amp;rsquo;t just love programming, which a lot of people do. He loved writing software for customers. That is a very strange taste indeed, but if you have it, you can make a lot by indulging it.There are even some people who have a genuine intellectual interest in making money. This is distinct from mere greed. They just can&amp;rsquo;t help noticing when something is mispriced, and can&amp;rsquo;t help doing something about it. It&amp;rsquo;s like a puzzle for them. [1]In fact there&amp;rsquo;s an edge case here so spectacular that it turns all the preceding advice on its head. If you want to make a really huge amount of money — hundreds of millions or even billions of dollars — it turns out to be very useful to work on what interests you the most. The reason is not the extra motivation you get from doing this, but that the way to make a really large amount of money is to start a startup, and working on what interests you is an excellent way to discover startup ideas.Many if not most of the biggest startups began as projects the founders were doing for fun. Apple, Google, and Facebook all began that way. Why is this pattern so common? Because the best ideas tend to be such outliers that you&amp;rsquo;d overlook them if you were consciously looking for ways to make money. Whereas if you&amp;rsquo;re young and good at technology, your unconscious instincts about what would be interesting to work on are very well aligned with what needs to be built.So there&amp;rsquo;s something like a midwit peak for making money. If you don&amp;rsquo;t need to make much, you can work on whatever you&amp;rsquo;re most interested in; if you want to become moderately rich, you can&amp;rsquo;t usually afford to; but if you want to become super rich, and you&amp;rsquo;re young and good at technology, working on what you&amp;rsquo;re most interested in becomes a good idea again.What if you&amp;rsquo;re not sure what you want? What if you&amp;rsquo;re attracted to the idea of making money and more attracted to some kinds of work than others, but neither attraction predominates? How do you break ties?The key here is to understand that such ties are only apparent. When you have trouble choosing between following your interests and making money, it&amp;rsquo;s never because you have complete knowledge of yourself and of the types of work you&amp;rsquo;re choosing between, and the options are perfectly balanced. When you can&amp;rsquo;t decide which path to take, it&amp;rsquo;s almost always due to ignorance. In fact you&amp;rsquo;re usually suffering from three kinds of ignorance simultaneously: you don&amp;rsquo;t know what makes you happy, what the various kinds of work are really like, or how well you could do them. [2]In a way this ignorance is excusable. It&amp;rsquo;s often hard to predict these things, and no one even tells you that you need to. If you&amp;rsquo;re ambitious you&amp;rsquo;re told you should go to college, and this is good advice so far as it goes, but that&amp;rsquo;s where it usually ends. No one tells you how to figure out what to work on, or how hard this can be.What do you do in the face of uncertainty? Get more certainty. And probably the best way to do that is to try working on things you&amp;rsquo;re interested in. That will get you more information about how interested you are in them, how good you are at them, and how much scope they offer for ambition.Don&amp;rsquo;t wait. Don&amp;rsquo;t wait till the end of college to figure out what to work on. Don&amp;rsquo;t even wait for internships during college. You don&amp;rsquo;t necessarily need a job doing x in order to work on x; often you can just start doing it in some form yourself. And since figuring out what to work on is a problem that could take years to solve, the sooner you start, the better.One useful trick for judging different kinds of work is to look at who your colleagues will be. You&amp;rsquo;ll become like whoever you work with. Do you want to become like these people?Indeed, the difference in character between different kinds of work is magnified by the fact that everyone else is facing the same decisions as you. If you choose a kind of work mainly for how well it pays, you&amp;rsquo;ll be surrounded by other people who chose it for the same reason, and that will make it even more soul-sucking than it seems from the outside. Whereas if you choose work you&amp;rsquo;re genuinely interested in, you&amp;rsquo;ll be surrounded mostly by other people who are genuinely interested in it, and that will make it extra inspiring. [3]The other thing you do in the face of uncertainty is to make choices that are uncertainty-proof. The less sure you are about what to do, the more important it is to choose options that give you more options in the future. I call this &amp;ldquo;staying upwind.&amp;rdquo; If you&amp;rsquo;re unsure whether to major in math or economics, for example, choose math; math is upwind of economics in the sense that it will be easier to switch later from math to economics than from economics to math.There&amp;rsquo;s one case, though, where it&amp;rsquo;s easy to say whether you should work on what interests you the most: if you want to do great work. This is not a sufficient condition for doing great work, but it is a necessary one.There&amp;rsquo;s a lot of selection bias in advice about whether to &amp;ldquo;follow your passion,&amp;rdquo; and this is the reason. Most such advice comes from people who are famously successful, and if you ask someone who&amp;rsquo;s famously successful how to do what they did, most will tell you that you have to work on what you&amp;rsquo;re most interested in. And this is in fact true.That doesn&amp;rsquo;t mean it&amp;rsquo;s the right advice for everyone. Not everyone can do great work, or wants to. But if you do want to, the complicated question of whether or not to work on what interests you the most becomes simple. The answer is yes. The root of great work is a sort of ambitious curiosity, and you can&amp;rsquo;t manufacture that.Notes[1] These examples show why it&amp;rsquo;s a mistake to assume that economic inequality must be evidence of some kind of brokenness or unfairness. It&amp;rsquo;s obvious that different people have different interests, and that some interests yield far more money than others, so how can it not be obvious that some people will end up much richer than others? In a world where some people like to write enterprise software and others like to make studio pottery, economic inequality is the natural outcome.[2] Difficulty choosing between interests is a different matter. That&amp;rsquo;s not always due to ignorance. It&amp;rsquo;s often intrinsically difficult. I still have trouble doing it.[3] You can&amp;rsquo;t always take people at their word on this. Since it&amp;rsquo;s more prestigious to work on things you&amp;rsquo;re interested in than to be driven by money, people who are driven mainly by money will often claim to be more interested in their work than they actually are. One way to test such claims is by doing the following thought experiment: if their work didn&amp;rsquo;t pay well, would they take day jobs doing something else in order to do it in their spare time? Lots of mathematicians and scientists and engineers would. Historically lots have. But I don&amp;rsquo;t think as many investment bankers would.This thought experiment is also useful for distinguishing between university departments.Thanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston, Robert Morris, Harj Taggar, and Garry Tan for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/whyyc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/whyyc/</guid>
      <description>&lt;h1 id=&#34;whyyc&#34;&gt;Whyyc&lt;/h1&gt;&#xA;&lt;p&gt;Why YC March 2006, rev August 2009Yesterday one of the founders we funded asked me why we started Y Combinator. Or more precisely, he asked if we&amp;rsquo;d started YC mainly for fun.Kind of, but not quite. It is enormously fun to be able to work with Rtm and Trevor again. I missed that after we sold Viaweb, and for all the years after I always had a background process running, looking for something we could do together. There is definitely an aspect of a band reunion to Y Combinator. Every couple days I slip and call it &amp;ldquo;Viaweb.&amp;ldquo;Viaweb we started very explicitly to make money. I was sick of living from one freelance project to the next, and decided to just work as hard as I could till I&amp;rsquo;d made enough to solve the problem once and for all. Viaweb was sometimes fun, but it wasn&amp;rsquo;t designed for fun, and mostly it wasn&amp;rsquo;t. I&amp;rsquo;d be surprised if any startup is. All startups are mostly schleps.The real reason we started Y Combinator is neither selfish nor virtuous. We didn&amp;rsquo;t start it mainly to make money; we have no idea what our average returns might be, and won&amp;rsquo;t know for years. Nor did we start YC mainly to help out young would-be founders, though we do like the idea, and comfort ourselves occasionally with the thought that if all our investments tank, we will thus have been doing something unselfish. (It&amp;rsquo;s oddly nondeterministic.)The real reason we started Y Combinator is one probably only a hacker would understand. We did it because it seems such a great hack. There are thousands of smart people who could start companies and don&amp;rsquo;t, and with a relatively small amount of force applied at just the right place, we can spring on the world a stream of new startups that might otherwise not have existed.In a way this is virtuous, because I think startups are a good thing. But really what motivates us is the completely amoral desire that would motivate any hacker who looked at some complex device and realized that with a tiny tweak he could make it run more efficiently. In this case, the device is the world&amp;rsquo;s economy, which fortunately happens to be open source.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/wisdom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/wisdom/</guid>
      <description>&lt;h1 id=&#34;wisdom&#34;&gt;Wisdom&lt;/h1&gt;&#xA;&lt;p&gt;Is It Worth Being Wise? February 2007A few days ago I finally figured out something I&amp;rsquo;ve wondered about for 25 years: the relationship between wisdom and intelligence. Anyone can see they&amp;rsquo;re not the same by the number of people who are smart, but not very wise. And yet intelligence and wisdom do seem related. How?What is wisdom? I&amp;rsquo;d say it&amp;rsquo;s knowing what to do in a lot of situations. I&amp;rsquo;m not trying to make a deep point here about the true nature of wisdom, just to figure out how we use the word. A wise person is someone who usually knows the right thing to do.And yet isn&amp;rsquo;t being smart also knowing what to do in certain situations? For example, knowing what to do when the teacher tells your elementary school class to add all the numbers from 1 to 100? [1]Some say wisdom and intelligence apply to different types of problems—wisdom to human problems and intelligence to abstract ones. But that isn&amp;rsquo;t true. Some wisdom has nothing to do with people: for example, the wisdom of the engineer who knows certain structures are less prone to failure than others. And certainly smart people can find clever solutions to human problems as well as abstract ones. [2]Another popular explanation is that wisdom comes from experience while intelligence is innate. But people are not simply wise in proportion to how much experience they have. Other things must contribute to wisdom besides experience, and some may be innate: a reflective disposition, for example.Neither of the conventional explanations of the difference between wisdom and intelligence stands up to scrutiny. So what is the difference? If we look at how people use the words &amp;ldquo;wise&amp;rdquo; and &amp;ldquo;smart,&amp;rdquo; what they seem to mean is different shapes of performance.Curve&amp;quot;Wise&amp;quot; and &amp;ldquo;smart&amp;rdquo; are both ways of saying someone knows what to do. The difference is that &amp;ldquo;wise&amp;rdquo; means one has a high average outcome across all situations, and &amp;ldquo;smart&amp;rdquo; means one does spectacularly well in a few. That is, if you had a graph in which the x axis represented situations and the y axis the outcome, the graph of the wise person would be high overall, and the graph of the smart person would have high peaks.The distinction is similar to the rule that one should judge talent at its best and character at its worst. Except you judge intelligence at its best, and wisdom by its average. That&amp;rsquo;s how the two are related: they&amp;rsquo;re the two different senses in which the same curve can be high.So a wise person knows what to do in most situations, while a smart person knows what to do in situations where few others could. We need to add one more qualification: we should ignore cases where someone knows what to do because they have inside information. [3] But aside from that, I don&amp;rsquo;t think we can get much more specific without starting to be mistaken.Nor do we need to. Simple as it is, this explanation predicts, or at least accords with, both of the conventional stories about the distinction between wisdom and intelligence. Human problems are the most common type, so being good at solving those is key in achieving a high average outcome. And it seems natural that a high average outcome depends mostly on experience, but that dramatic peaks can only be achieved by people with certain rare, innate qualities; nearly anyone can learn to be a good swimmer, but to be an Olympic swimmer you need a certain body type.This explanation also suggests why wisdom is such an elusive concept: there&amp;rsquo;s no such thing. &amp;ldquo;Wise&amp;rdquo; means something—that one is on average good at making the right choice. But giving the name &amp;ldquo;wisdom&amp;rdquo; to the supposed quality that enables one to do that doesn&amp;rsquo;t mean such a thing exists. To the extent &amp;ldquo;wisdom&amp;rdquo; means anything, it refers to a grab-bag of qualities as various as self-discipline, experience, and empathy. [4]Likewise, though &amp;ldquo;intelligent&amp;rdquo; means something, we&amp;rsquo;re asking for trouble if we insist on looking for a single thing called &amp;ldquo;intelligence.&amp;rdquo; And whatever its components, they&amp;rsquo;re not all innate. We use the word &amp;ldquo;intelligent&amp;rdquo; as an indication of ability: a smart person can grasp things few others could. It does seem likely there&amp;rsquo;s some inborn predisposition to intelligence (and wisdom too), but this predisposition is not itself intelligence.One reason we tend to think of intelligence as inborn is that people trying to measure it have concentrated on the aspects of it that are most measurable. A quality that&amp;rsquo;s inborn will obviously be more convenient to work with than one that&amp;rsquo;s influenced by experience, and thus might vary in the course of a study. The problem comes when we drag the word &amp;ldquo;intelligence&amp;rdquo; over onto what they&amp;rsquo;re measuring. If they&amp;rsquo;re measuring something inborn, they can&amp;rsquo;t be measuring intelligence. Three year olds aren&amp;rsquo;t smart. When we describe one as smart, it&amp;rsquo;s shorthand for &amp;ldquo;smarter than other three year olds.&amp;ldquo;SplitPerhaps it&amp;rsquo;s a technicality to point out that a predisposition to intelligence is not the same as intelligence. But it&amp;rsquo;s an important technicality, because it reminds us that we can become smarter, just as we can become wiser.The alarming thing is that we may have to choose between the two.If wisdom and intelligence are the average and peaks of the same curve, then they converge as the number of points on the curve decreases. If there&amp;rsquo;s just one point, they&amp;rsquo;re identical: the average and maximum are the same. But as the number of points increases, wisdom and intelligence diverge. And historically the number of points on the curve seems to have been increasing: our ability is tested in an ever wider range of situations.In the time of Confucius and Socrates, people seem to have regarded wisdom, learning, and intelligence as more closely related than we do. Distinguishing between &amp;ldquo;wise&amp;rdquo; and &amp;ldquo;smart&amp;rdquo; is a modern habit. [5] And the reason we do is that they&amp;rsquo;ve been diverging. As knowledge gets more specialized, there are more points on the curve, and the distinction between the spikes and the average becomes sharper, like a digital image rendered with more pixels.One consequence is that some old recipes may have become obsolete. At the very least we have to go back and figure out if they were really recipes for wisdom or intelligence. But the really striking change, as intelligence and wisdom drift apart, is that we may have to decide which we prefer. We may not be able to optimize for both simultaneously.Society seems to have voted for intelligence. We no longer admire the sage—not the way people did two thousand years ago. Now we admire the genius. Because in fact the distinction we began with has a rather brutal converse: just as you can be smart without being very wise, you can be wise without being very smart. That doesn&amp;rsquo;t sound especially admirable. That gets you James Bond, who knows what to do in a lot of situations, but has to rely on Q for the ones involving math.Intelligence and wisdom are obviously not mutually exclusive. In fact, a high average may help support high peaks. But there are reasons to believe that at some point you have to choose between them. One is the example of very smart people, who are so often unwise that in popular culture this now seems to be regarded as the rule rather than the exception. Perhaps the absent-minded professor is wise in his way, or wiser than he seems, but he&amp;rsquo;s not wise in the way Confucius or Socrates wanted people to be. [6]NewFor both Confucius and Socrates, wisdom, virtue, and happiness were necessarily related. The wise man was someone who knew what the right choice was and always made it; to be the right choice, it had to be morally right; he was therefore always happy, knowing he&amp;rsquo;d done the best he could. I can&amp;rsquo;t think of many ancient philosophers who would have disagreed with that, so far as it goes.&amp;ldquo;The superior man is always happy; the small man sad,&amp;rdquo; said Confucius. [7]Whereas a few years ago I read an interview with a mathematician who said that most nights he went to bed discontented, feeling he hadn&amp;rsquo;t made enough progress. [8] The Chinese and Greek words we translate as &amp;ldquo;happy&amp;rdquo; didn&amp;rsquo;t mean exactly what we do by it, but there&amp;rsquo;s enough overlap that this remark contradicts them.Is the mathematician a small man because he&amp;rsquo;s discontented? No; he&amp;rsquo;s just doing a kind of work that wasn&amp;rsquo;t very common in Confucius&amp;rsquo;s day.Human knowledge seems to grow fractally. Time after time, something that seemed a small and uninteresting area—experimental error, even—turns out, when examined up close, to have as much in it as all knowledge up to that point. Several of the fractal buds that have exploded since ancient times involve inventing and discovering new things. Math, for example, used to be something a handful of people did part-time. Now it&amp;rsquo;s the career of thousands. And in work that involves making new things, some old rules don&amp;rsquo;t apply.Recently I&amp;rsquo;ve spent some time advising people, and there I find the ancient rule still works: try to understand the situation as well as you can, give the best advice you can based on your experience, and then don&amp;rsquo;t worry about it, knowing you did all you could. But I don&amp;rsquo;t have anything like this serenity when I&amp;rsquo;m writing an essay. Then I&amp;rsquo;m worried. What if I run out of ideas? And when I&amp;rsquo;m writing, four nights out of five I go to bed discontented, feeling I didn&amp;rsquo;t get enough done.Advising people and writing are fundamentally different types of work. When people come to you with a problem and you have to figure out the right thing to do, you don&amp;rsquo;t (usually) have to invent anything. You just weigh the alternatives and try to judge which is the prudent choice. But prudence can&amp;rsquo;t tell me what sentence to write next. The search space is too big.Someone like a judge or a military officer can in much of his work be guided by duty, but duty is no guide in making things. Makers depend on something more precarious: inspiration. And like most people who lead a precarious existence, they tend to be worried, not contented. In that respect they&amp;rsquo;re more like the small man of Confucius&amp;rsquo;s day, always one bad harvest (or ruler) away from starvation. Except instead of being at the mercy of weather and officials, they&amp;rsquo;re at the mercy of their own imagination.LimitsTo me it was a relief just to realize it might be ok to be discontented. The idea that a successful person should be happy has thousands of years of momentum behind it. If I was any good, why didn&amp;rsquo;t I have the easy confidence winners are supposed to have? But that, I now believe, is like a runner asking &amp;ldquo;If I&amp;rsquo;m such a good athlete, why do I feel so tired?&amp;rdquo; Good runners still get tired; they just get tired at higher speeds.People whose work is to invent or discover things are in the same position as the runner. There&amp;rsquo;s no way for them to do the best they can, because there&amp;rsquo;s no limit to what they could do. The closest you can come is to compare yourself to other people. But the better you do, the less this matters. An undergrad who gets something published feels like a star. But for someone at the top of the field, what&amp;rsquo;s the test of doing well? Runners can at least compare themselves to others doing exactly the same thing; if you win an Olympic gold medal, you can be fairly content, even if you think you could have run a bit faster. But what is a novelist to do?Whereas if you&amp;rsquo;re doing the kind of work in which problems are presented to you and you have to choose between several alternatives, there&amp;rsquo;s an upper bound on your performance: choosing the best every time. In ancient societies, nearly all work seems to have been of this type. The peasant had to decide whether a garment was worth mending, and the king whether or not to invade his neighbor, but neither was expected to invent anything. In principle they could have; the king could have invented firearms, then invaded his neighbor. But in practice innovations were so rare that they weren&amp;rsquo;t expected of you, any more than goalkeepers are expected to score goals. [9] In practice, it seemed as if there was a correct decision in every situation, and if you made it you&amp;rsquo;d done your job perfectly, just as a goalkeeper who prevents the other team from scoring is considered to have played a perfect game.In this world, wisdom seemed paramount. [10] Even now, most people do work in which problems are put before them and they have to choose the best alternative. But as knowledge has grown more specialized, there are more and more types of work in which people have to make up new things, and in which performance is therefore unbounded. Intelligence has become increasingly important relative to wisdom because there is more room for spikes.RecipesAnother sign we may have to choose between intelligence and wisdom is how different their recipes are. Wisdom seems to come largely from curing childish qualities, and intelligence largely from cultivating them.Recipes for wisdom, particularly ancient ones, tend to have a remedial character. To achieve wisdom one must cut away all the debris that fills one&amp;rsquo;s head on emergence from childhood, leaving only the important stuff. Both self-control and experience have this effect: to eliminate the random biases that come from your own nature and from the circumstances of your upbringing respectively. That&amp;rsquo;s not all wisdom is, but it&amp;rsquo;s a large part of it. Much of what&amp;rsquo;s in the sage&amp;rsquo;s head is also in the head of every twelve year old. The difference is that in the head of the twelve year old it&amp;rsquo;s mixed together with a lot of random junk.The path to intelligence seems to be through working on hard problems. You develop intelligence as you might develop muscles, through exercise. But there can&amp;rsquo;t be too much compulsion here. No amount of discipline can replace genuine curiosity. So cultivating intelligence seems to be a matter of identifying some bias in one&amp;rsquo;s character—some tendency to be interested in certain types of things—and nurturing it. Instead of obliterating your idiosyncrasies in an effort to make yourself a neutral vessel for the truth, you select one and try to grow it from a seedling into a tree.The wise are all much alike in their wisdom, but very smart people tend to be smart in distinctive ways.Most of our educational traditions aim at wisdom. So perhaps one reason schools work badly is that they&amp;rsquo;re trying to make intelligence using recipes for wisdom. Most recipes for wisdom have an element of subjection. At the very least, you&amp;rsquo;re supposed to do what the teacher says. The more extreme recipes aim to break down your individuality the way basic training does. But that&amp;rsquo;s not the route to intelligence. Whereas wisdom comes through humility, it may actually help, in cultivating intelligence, to have a mistakenly high opinion of your abilities, because that encourages you to keep working. Ideally till you realize how mistaken you were.(The reason it&amp;rsquo;s hard to learn new skills late in life is not just that one&amp;rsquo;s brain is less malleable. Another probably even worse obstacle is that one has higher standards.)I realize we&amp;rsquo;re on dangerous ground here. I&amp;rsquo;m not proposing the primary goal of education should be to increase students&amp;rsquo; &amp;ldquo;self-esteem.&amp;rdquo; That just breeds laziness. And in any case, it doesn&amp;rsquo;t really fool the kids, not the smart ones. They can tell at a young age that a contest where everyone wins is a fraud.A teacher has to walk a narrow path: you want to encourage kids to come up with things on their own, but you can&amp;rsquo;t simply applaud everything they produce. You have to be a good audience: appreciative, but not too easily impressed. And that&amp;rsquo;s a lot of work. You have to have a good enough grasp of kids&amp;rsquo; capacities at different ages to know when to be surprised.That&amp;rsquo;s the opposite of traditional recipes for education. Traditionally the student is the audience, not the teacher; the student&amp;rsquo;s job is not to invent, but to absorb some prescribed body of material. (The use of the term &amp;ldquo;recitation&amp;rdquo; for sections in some colleges is a fossil of this.) The problem with these old traditions is that they&amp;rsquo;re too much influenced by recipes for wisdom.DifferentI deliberately gave this essay a provocative title; of course it&amp;rsquo;s worth being wise. But I think it&amp;rsquo;s important to understand the relationship between intelligence and wisdom, and particularly what seems to be the growing gap between them. That way we can avoid applying rules and standards to intelligence that are really meant for wisdom. These two senses of &amp;ldquo;knowing what to do&amp;rdquo; are more different than most people realize. The path to wisdom is through discipline, and the path to intelligence through carefully selected self-indulgence. Wisdom is universal, and intelligence idiosyncratic. And while wisdom yields calmness, intelligence much of the time leads to discontentment.That&amp;rsquo;s particularly worth remembering. A physicist friend recently told me half his department was on Prozac. Perhaps if we acknowledge that some amount of frustration is inevitable in certain kinds of work, we can mitigate its effects. Perhaps we can box it up and put it away some of the time, instead of letting it flow together with everyday sadness to produce what seems an alarmingly large pool. At the very least, we can avoid being discontented about being discontented.If you feel exhausted, it&amp;rsquo;s not necessarily because there&amp;rsquo;s something wrong with you. Maybe you&amp;rsquo;re just running fast.Notes[1] Gauss was supposedly asked this when he was 10. Instead of laboriously adding together the numbers like the other students, he saw that they consisted of 50 pairs that each summed to 101 (100 + 1, 99 + 2, etc), and that he could just multiply 101 by 50 to get the answer, 5050.[2] A variant is that intelligence is the ability to solve problems, and wisdom the judgement to know how to use those solutions. But while this is certainly an important relationship between wisdom and intelligence, it&amp;rsquo;s not the distinction between them. Wisdom is useful in solving problems too, and intelligence can help in deciding what to do with the solutions.[3] In judging both intelligence and wisdom we have to factor out some knowledge. People who know the combination of a safe will be better at opening it than people who don&amp;rsquo;t, but no one would say that was a test of intelligence or wisdom.But knowledge overlaps with wisdom and probably also intelligence. A knowledge of human nature is certainly part of wisdom. So where do we draw the line?Perhaps the solution is to discount knowledge that at some point has a sharp drop in utility. For example, understanding French will help you in a large number of situations, but its value drops sharply as soon as no one else involved knows French. Whereas the value of understanding vanity would decline more gradually.The knowledge whose utility drops sharply is the kind that has little relation to other knowledge. This includes mere conventions, like languages and safe combinations, and also what we&amp;rsquo;d call &amp;ldquo;random&amp;rdquo; facts, like movie stars&amp;rsquo; birthdays, or how to distinguish 1956 from 1957 Studebakers.[4] People seeking some single thing called &amp;ldquo;wisdom&amp;rdquo; have been fooled by grammar. Wisdom is just knowing the right thing to do, and there are a hundred and one different qualities that help in that. Some, like selflessness, might come from meditating in an empty room, and others, like a knowledge of human nature, might come from going to drunken parties.Perhaps realizing this will help dispel the cloud of semi-sacred mystery that surrounds wisdom in so many people&amp;rsquo;s eyes. The mystery comes mostly from looking for something that doesn&amp;rsquo;t exist. And the reason there have historically been so many different schools of thought about how to achieve wisdom is that they&amp;rsquo;ve focused on different components of it.When I use the word &amp;ldquo;wisdom&amp;rdquo; in this essay, I mean no more than whatever collection of qualities helps people make the right choice in a wide variety of situations.[5] Even in English, our sense of the word &amp;ldquo;intelligence&amp;rdquo; is surprisingly recent. Predecessors like &amp;ldquo;understanding&amp;rdquo; seem to have had a broader meaning.[6] There is of course some uncertainty about how closely the remarks attributed to Confucius and Socrates resemble their actual opinions. I&amp;rsquo;m using these names as we use the name &amp;ldquo;Homer,&amp;rdquo; to mean the hypothetical people who said the things attributed to them.[7] Analects VII:36, Fung trans.Some translators use &amp;ldquo;calm&amp;rdquo; instead of &amp;ldquo;happy.&amp;rdquo; One source of difficulty here is that present-day English speakers have a different idea of happiness from many older societies. Every language probably has a word meaning &amp;ldquo;how one feels when things are going well,&amp;rdquo; but different cultures react differently when things go well. We react like children, with smiles and laughter. But in a more reserved society, or in one where life was tougher, the reaction might be a quiet contentment.[8] It may have been Andrew Wiles, but I&amp;rsquo;m not sure. If anyone remembers such an interview, I&amp;rsquo;d appreciate hearing from you.[9] Confucius claimed proudly that he had never invented anything—that he had simply passed on an accurate account of ancient traditions. [Analects VII:1] It&amp;rsquo;s hard for us now to appreciate how important a duty it must have been in preliterate societies to remember and pass on the group&amp;rsquo;s accumulated knowledge. Even in Confucius&amp;rsquo;s time it still seems to have been the first duty of the scholar.[10] The bias toward wisdom in ancient philosophy may be exaggerated by the fact that, in both Greece and China, many of the first philosophers (including Confucius and Plato) saw themselves as teachers of administrators, and so thought disproportionately about such matters. The few people who did invent things, like storytellers, must have seemed an outlying data point that could be ignored.Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this.Polish TranslationFrench TranslationRussian TranslationRussian Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/woke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/woke/</guid>
      <description>&lt;h1 id=&#34;woke&#34;&gt;Woke&lt;/h1&gt;&#xA;&lt;p&gt;The Origins of Wokeness January 2025The word &amp;ldquo;prig&amp;rdquo; isn&amp;rsquo;t very common now, but if you look up the definition, it will sound familiar. Google&amp;rsquo;s isn&amp;rsquo;t bad: A self-righteously moralistic person who behaves as if superior to others. This sense of the word originated in the 18th century, and its age is an important clue: it shows that although wokeness is a comparatively recent phenomenon, it&amp;rsquo;s an instance of a much older one.There&amp;rsquo;s a certain kind of person who&amp;rsquo;s attracted to a shallow, exacting kind of moral purity, and who demonstrates his purity by attacking anyone who breaks the rules. Every society has these people. All that changes is the rules they enforce. In Victorian England it was Christian virtue. In Stalin&amp;rsquo;s Russia it was orthodox Marxism-Leninism. For the woke, it&amp;rsquo;s social justice.So if you want to understand wokeness, the question to ask is not why people behave this way. Every society has prigs. The question to ask is why our prigs are priggish about these ideas, at this moment. And to answer that we have to ask when and where wokeness began.The answer to the first question is the 1980s. Wokeness is a second, more aggressive wave of political correctness, which started in the late 1980s, died down in the late 1990s, and then returned with a vengeance in the early 2010s, finally peaking after the riots of 2020.What was political correctness, exactly? I&amp;rsquo;m often asked to define both this term and wokeness by people who think they&amp;rsquo;re meaningless labels, so I will. They both have the same definition: An aggressively performative focus on social justice. In other words, it&amp;rsquo;s people being prigs about social justice. And that&amp;rsquo;s the real problem — the performativeness, not the social justice. [0]Racism, for example, is a genuine problem. Not a problem on the scale that the woke believe it to be, but a genuine one. I don&amp;rsquo;t think any reasonable person would deny that. The problem with political correctness was not that it focused on marginalized groups, but the shallow, aggressive way in which it did so. Instead of going out into the world and quietly helping members of marginalized groups, the politically correct focused on getting people in trouble for using the wrong words to talk about them.As for where political correctness began, if you think about it, you probably already know the answer. Did it begin outside universities and spread to them from this external source? Obviously not; it has always been most extreme in universities. So where in universities did it begin? Did it begin in math, or the hard sciences, or engineering, and spread from there to the humanities and social sciences? Those are amusing images, but no, obviously it began in the humanities and social sciences.Why there? And why then? What happened in the humanities and social sciences in the 1980s?A successful theory of the origin of political correctness has to be able to explain why it didn&amp;rsquo;t happen earlier. Why didn&amp;rsquo;t it happen during the protest movements of the 1960s, for example? They were concerned with much the same issues. [1]The reason the student protests of the 1960s didn&amp;rsquo;t lead to political correctness was precisely that — they were student movements. They didn&amp;rsquo;t have any real power. The students may have been talking a lot about women&amp;rsquo;s liberation and black power, but it was not what they were being taught in their classes. Not yet.But in the early 1970s the student protestors of the 1960s began to finish their dissertations and get hired as professors. At first they were neither powerful nor numerous. But as more of their peers joined them and the previous generation of professors started to retire, they gradually became both.The reason political correctness began in the humanities and social sciences was that these fields offered more scope for the injection of politics. A 1960s radical who got a job as a physics professor could still attend protests, but his political beliefs wouldn&amp;rsquo;t affect his work. Whereas research in sociology and modern literature can be made as political as you like. [2]I saw political correctness arise. When I started college in 1982 it was not yet a thing. Female students might object if someone said something they considered sexist, but no one was getting reported for it. It was still not a thing when I started grad school in 1986. It was definitely a thing in 1988 though, and by the early 1990s it seemed to pervade campus life.What happened? How did protest become punishment? Why were the late 1980s the point at which protests against male chauvinism (as it used to be called) morphed into formal complaints to university authorities about sexism? Basically, the 1960s radicals got tenure. They became the Establishment they&amp;rsquo;d protested against two decades before. Now they were in a position not just to speak out about their ideas, but to enforce them.A new set of moral rules to enforce was exciting news to a certain kind of student. What made it particularly exciting was that they were allowed to attack professors. I remember noticing that aspect of political correctness at the time. It wasn&amp;rsquo;t simply a grass-roots student movement. It was faculty members encouraging students to attack other faculty members. In that respect it was like the Cultural Revolution. That wasn&amp;rsquo;t a grass-roots movement either; that was Mao unleashing the younger generation on his political opponents. And in fact when Roderick MacFarquhar started teaching a class on the Cultural Revolution at Harvard in the late 1980s, many saw it as a comment on current events. I don&amp;rsquo;t know if it actually was, but people thought it was, and that means the similarities were obvious. [3]College students larp. It&amp;rsquo;s their nature. It&amp;rsquo;s usually harmless. But larping morality turned out to be a poisonous combination. The result was a kind of moral etiquette, superficial but very complicated. Imagine having to explain to a well-meaning visitor from another planet why using the phrase &amp;ldquo;people of color&amp;rdquo; is considered particularly enlightened, but saying &amp;ldquo;colored people&amp;rdquo; gets you fired. And why exactly one isn&amp;rsquo;t supposed to use the word &amp;ldquo;negro&amp;rdquo; now, even though Martin Luther King used it constantly in his speeches. There are no underlying principles. You&amp;rsquo;d just have to give him a long list of rules to memorize. [4] The danger of these rules was not just that they created land mines for the unwary, but that their elaborateness made them an effective substitute for virtue. Whenever a society has a concept of heresy and orthodoxy, orthodoxy becomes a substitute for virtue. You can be the worst person in the world, but as long as you&amp;rsquo;re orthodox you&amp;rsquo;re better than everyone who isn&amp;rsquo;t. This makes orthodoxy very attractive to bad people.But for it to work as a substitute for virtue, orthodoxy must be difficult. If all you have to do to be orthodox is wear some garment or avoid saying some word, everyone knows to do it, and the only way to seem more virtuous than other people is to actually be virtuous. The shallow, complicated, and frequently changing rules of political correctness made it the perfect substitute for actual virtue. And the result was a world in which good people who weren&amp;rsquo;t up to date on current moral fashions were brought down by people whose characters would make you recoil in horror if you could see them.One big contributing factor in the rise of political correctness was the lack of other things to be morally pure about. Previous generations of prigs had been prigs mostly about religion and sex. But among the cultural elite these were the deadest of dead letters by the 1980s; if you were religious, or a virgin, this was something you tended to conceal rather than advertise. So the sort of people who enjoy being moral enforcers had become starved of things to enforce. A new set of rules was just what they&amp;rsquo;d been waiting for.Curiously enough, the tolerant side of the 1960s left helped create the conditions in which the intolerant side prevailed. The relaxed social rules advocated by the old, easy-going hippy left became the dominant ones, at least among the elite, and this left nothing for the naturally intolerant to be intolerant about.Another possibly contributing factor was the fall of the Soviet empire. Marxism had been a popular focus of moral purity on the left before political correctness emerged as a competitor, but the pro-democracy movements in Eastern Bloc countries took most of the shine off it. Especially the fall of the Berlin Wall in 1989. You couldn&amp;rsquo;t be on the side of the Stasi. I remember looking at the moribund Soviet Studies section of a used bookshop in Cambridge in the late 1980s and thinking &amp;ldquo;what will those people go on about now?&amp;rdquo; As it turned out the answer was right under my nose.One thing I noticed at the time about the first phase of political correctness was that it was more popular with women than men. As many writers (perhaps most eloquently George Orwell) have observed, women seem more attracted than men to the idea of being moral enforcers. But there was another more specific reason women tended to be the enforcers of political correctness. There was at this time a great backlash against sexual harassment; the mid 1980s were the point when the definition of sexual harassment was expanded from explicit sexual advances to creating a &amp;ldquo;hostile environment.&amp;rdquo; Within universities the classic form of accusation was for a (female) student to say that a professor made her &amp;ldquo;feel uncomfortable.&amp;rdquo; But the vagueness of this accusation allowed the radius of forbidden behavior to expand to include talking about heterodox ideas. Those make people uncomfortable too. [5]Was it sexist to propose that Darwin&amp;rsquo;s greater male variability hypothesis might explain some variation in human performance? Sexist enough to get Larry Summers pushed out as president of Harvard, apparently. One woman who heard the talk in which he mentioned this idea said it made her feel &amp;ldquo;physically ill&amp;rdquo; and that she had to leave halfway through. If the test of a hostile environment is how it makes people feel, this certainly sounds like one. And yet it does seem plausible that greater male variability explains some of the variation in human performance. So which should prevail, comfort or truth? Surely if truth should prevail anywhere, it should be in universities; that&amp;rsquo;s supposed to be their specialty; but for decades starting in the late 1980s the politically correct tried to pretend this conflict didn&amp;rsquo;t exist. [6]Political correctness seemed to burn out in the second half of the 1990s. One reason, perhaps the main reason, was that it literally became a joke. It offered rich material for comedians, who performed their usual disinfectant action upon it. Humor is one of the most powerful weapons against priggishness of any sort, because prigs, being humorless, can&amp;rsquo;t respond in kind. Humor was what defeated Victorian prudishness, and by 2000 it seemed to have done the same thing to political correctness.Unfortunately this was an illusion. Within universities the embers of political correctness were still glowing brightly. After all, the forces that created it were still there. The professors who started it were now becoming deans and department heads. And in addition to their departments there were now a bunch of new ones explicitly focused on social justice. Students were still hungry for things to be morally pure about. And there had been an explosion in the number of university administrators, many of whose jobs involved enforcing various forms of political correctness.In the early 2010s the embers of political correctness burst into flame anew. There were several differences between this new phase and the original one. It was more virulent. It spread further into the real world, although it still burned hottest within universities. And it was concerned with a wider variety of sins. In the first phase of political correctness there were really only three things people got accused of: sexism, racism, and homophobia (which at the time was a neologism invented for the purpose). But between then and 2010 a lot of people had spent a lot of time trying to invent new kinds of -isms and -phobias and seeing which could be made to stick.The second phase was, in multiple senses, political correctness metastasized. Why did it happen when it did? My guess is that it was due to the rise of social media, particularly Tumblr and Twitter, because one of the most distinctive features of the second wave of political correctness was the cancel mob: a mob of angry people uniting on social media to get someone ostracized or fired. Indeed this second wave of political correctness was originally called &amp;ldquo;cancel culture&amp;rdquo;; it didn&amp;rsquo;t start to be called &amp;ldquo;wokeness&amp;rdquo; till the 2020s.One aspect of social media that surprised almost everyone at first was the popularity of outrage. Users seemed to like being outraged. We&amp;rsquo;re so used to this idea now that we take it for granted, but really it&amp;rsquo;s pretty strange. Being outraged is not a pleasant feeling. You wouldn&amp;rsquo;t expect people to seek it out. But they do. And above all, they want to share it. I happened to be running a forum from 2007 to 2014, so I can actually quantify how much they want to share it: our users were about three times more likely to upvote something if it outraged them.This tilt toward outrage wasn&amp;rsquo;t due to wokeness. It&amp;rsquo;s an inherent feature of social media, or at least this generation of it. But it did make social media the perfect mechanism for fanning the flames of wokeness. [7]It wasn&amp;rsquo;t just public social networks that drove the rise of wokeness though. Group chat apps were also critical, especially in the final step, cancellation. Imagine if a group of employees trying to get someone fired had to do it using only email. It would be hard to organize a mob. But once you have group chat, mobs form naturally.Another contributing factor in this second wave of political correctness was the dramatic increase in the polarization of the press. In the print era, newspapers were constrained to be, or at least seem, politically neutral. The department stores that ran ads in the New York Times wanted to reach everyone in the region, both liberal and conservative, so the Times had to serve both. But the Times didn&amp;rsquo;t regard this neutrality as something forced upon them. They embraced it as their duty as a paper of record — as one of the big newspapers that aimed to be chronicles of their times, reporting every sufficiently important story from a neutral point of view.When I grew up the papers of record seemed timeless, almost sacred institutions. Papers like the New York Times and Washington Post had immense prestige, partly because other sources of news were limited, but also because they did make some effort to be neutral.Unfortunately it turned out that the paper of record was mostly an artifact of the constraints imposed by print. [8] When your market was determined by geography, you had to be neutral. But publishing online enabled — in fact probably forced — newspapers to switch to serving markets defined by ideology instead of geography. Most that remained in business fell in the direction they&amp;rsquo;d already been leaning: left. On October 11, 2020 the New York Times announced that &amp;ldquo;The paper is in the midst of an evolution from the stodgy paper of record into a juicy collection of great narratives.&amp;rdquo; [9] Meanwhile journalists, of a sort, had arisen to serve the right as well. And so journalism, which in the previous era had been one of the great centralizing forces, now became one of the great polarizing ones.The rise of social media and the increasing polarization of journalism reinforced one another. In fact there arose a new variety of journalism involving a loop through social media. Someone would say something controversial on social media. Within hours it would become a news story. Outraged readers would then post links to the story on social media, driving further arguments online. It was the cheapest source of clicks imaginable. You didn&amp;rsquo;t have to maintain overseas news bureaus or pay for month-long investigations. All you had to do was watch Twitter for controversial remarks and repost them on your site, with some additional comments to inflame readers further.For the press there was money in wokeness. But they weren&amp;rsquo;t the only ones. That was one of the biggest differences between the two waves of political correctness: the first was driven almost entirely by amateurs, but the second was often driven by professionals. For some it was their whole job. By 2010 a new class of administrators had arisen whose job was basically to enforce wokeness. They played a role similar to that of the political commissars who got attached to military and industrial organizations in the USSR: they weren&amp;rsquo;t directly in the flow of the organization&amp;rsquo;s work, but watched from the side to ensure that nothing improper happened in the doing of it. These new administrators could often be recognized by the word &amp;ldquo;inclusion&amp;rdquo; in their titles. Within institutions this was the preferred euphemism for wokeness; a new list of banned words, for example, would usually be called an &amp;ldquo;inclusive language guide.&amp;rdquo; [10]This new class of bureaucrats pursued a woke agenda as if their jobs depended on it, because they did. If you hire people to keep watch for a particular type of problem, they&amp;rsquo;re going to find it, because otherwise there&amp;rsquo;s no justification for their existence. [11] But these bureaucrats also represented a second and possibly even greater danger. Many were involved in hiring, and when possible they tried to ensure their employers hired only people who shared their political beliefs. The most egregious cases were the new &amp;ldquo;DEI statements&amp;rdquo; that some universities started to require from faculty candidates, proving their commitment to wokeness. Some universities used these statements as the initial filter and only even considered candidates who scored high enough on them. You&amp;rsquo;re not hiring Einstein that way; imagine what you get instead.Another factor in the rise of wokeness was the Black Lives Matter movement, which started in 2013 when a white man was acquitted after killing a black teenager in Florida. But this didn&amp;rsquo;t launch wokeness; it was well underway by 2013.Similarly for the Me Too Movement, which took off in 2017 after the first news stories about Harvey Weinstein&amp;rsquo;s history of raping women. It accelerated wokeness, but didn&amp;rsquo;t play the same role in launching it that the 80s version did in launching political correctness.The election of Donald Trump in 2016 also accelerated wokeness, particularly in the press, where outrage now meant traffic. Trump made the New York Times a lot of money: headlines during his first administration mentioned his name at about four times the rate of previous presidents.In 2020 we saw the biggest accelerant of all, after a white police officer asphyxiated a black suspect on video. At this point the metaphorical fire became a literal one, as violent protests broke out across America. But in retrospect this turned out to be peak woke, or close to it. By every measure I&amp;rsquo;ve seen, wokeness peaked in 2020 or 2021.Wokeness is sometimes described as a mind-virus. What makes it viral is that it defines new types of impropriety. Most people are afraid of impropriety; they&amp;rsquo;re never exactly sure what the social rules are or which ones they might be breaking. Especially if the rules change rapidly. And since most people already worry that they might be breaking rules they don&amp;rsquo;t know about, if you tell them they&amp;rsquo;re breaking a rule, their default reaction is to believe you. Especially if multiple people tell them. Which in turn is a recipe for exponential growth. Zealots invent some new impropriety to avoid. The first people to adopt it are fellow zealots, eager for new ways to signal their virtue. If there are enough of these, the initial group of zealots is followed by a much larger group, motivated by fear. They&amp;rsquo;re not trying to signal virtue; they&amp;rsquo;re just trying to avoid getting in trouble. At this point the new impropriety is now firmly established. Plus its success has increased the rate of change in social rules, which, remember, is one of the reasons people are nervous about which rules they might be breaking. So the cycle accelerates. [12]What&amp;rsquo;s true of individuals is even more true of organizations. Especially organizations without a powerful leader. Such organizations do everything based on &amp;ldquo;best practices.&amp;rdquo; There&amp;rsquo;s no higher authority; if some new &amp;ldquo;best practice&amp;rdquo; achieves critical mass, they must adopt it. And in this case the organization can&amp;rsquo;t do what it usually does when it&amp;rsquo;s uncertain: delay. It might be committing improprieties right now! So it&amp;rsquo;s surprisingly easy for a small group of zealots to capture this type of organization by describing new improprieties it might be guilty of. [13]How does this kind of cycle ever end? Eventually it leads to disaster, and people start to say enough is enough. The excesses of 2020 made a lot of people say that.Since then wokeness has been in gradual but continual retreat. Corporate CEOs, starting with Brian Armstrong, have openly rejected it. Universities, led by the University of Chicago and MIT, have explicitly confirmed their commitment to free speech. Twitter, which was arguably the hub of wokeness, was bought by Elon Musk in order to neutralize it, and he seems to have succeeded — and not, incidentally, by censoring left-wing users the way Twitter used to censor right-wing ones, but without censoring either. [14] Consumers have emphatically rejected brands that ventured too far into wokeness. The Bud Light brand may have been permanently damaged by it. I&amp;rsquo;m not going to claim Trump&amp;rsquo;s second victory in 2024 was a referendum on wokeness; I think he won, as presidential candidates always do, because he was more charismatic; but voters&amp;rsquo; disgust with wokeness must have helped.So what do we do now? Wokeness is already in retreat. Obviously we should help it along. What&amp;rsquo;s the best way to do that? And more importantly, how do we avoid a third outbreak? After all, it seemed to be dead once, but came back worse than ever.In fact there&amp;rsquo;s an even more ambitious goal: is there a way to prevent any similar outbreak of aggressively performative moralism in the future — not just a third outbreak of political correctness, but the next thing like it? Because there will be a next thing. Prigs are prigs by nature. They need rules to obey and enforce, and now that Darwin has cut off their traditional supply of rules, they&amp;rsquo;re constantly hungry for new ones. All they need is someone to meet them halfway by defining a new way to be morally pure, and we&amp;rsquo;ll see the same phenomenon again.Let&amp;rsquo;s start with the easier problem. Is there a simple, principled way to deal with wokeness? I think there is: to use the customs we already have for dealing with religion. Wokeness is effectively a religion, just with God replaced by protected classes. It&amp;rsquo;s not even the first religion of this kind; Marxism had a similar form, with God replaced by the masses. [15] And we already have well-established customs for dealing with religion within organizations. You can express your own religious identity and explain your beliefs, but you can&amp;rsquo;t call your coworkers infidels if they disagree, or try to ban them from saying things that contradict its doctrines, or insist that the organization adopt yours as its official religion.If we&amp;rsquo;re not sure what to do about any particular manifestation of wokeness, imagine we were dealing with some other religion, like Christianity. Should we have people within organizations whose jobs are to enforce woke orthodoxy? No, because we wouldn&amp;rsquo;t have people whose jobs were to enforce Christian orthodoxy. Should we censor writers or scientists whose work contradicts woke doctrines? No, because we wouldn&amp;rsquo;t do this to people whose work contradicted Christian teachings. Should job candidates be required to write DEI statements? Of course not; imagine an employer requiring proof of one&amp;rsquo;s religious beliefs. Should students and employees have to participate in woke indoctrination sessions in which they&amp;rsquo;re required to answer questions about their beliefs to ensure compliance? No, because we wouldn&amp;rsquo;t dream of catechizing people in this way about their religion. [16]One shouldn&amp;rsquo;t feel bad about not wanting to watch woke movies any more than one would feel bad about not wanting to listen to Christian rock. In my twenties I drove across America several times, listening to local radio stations. Occasionally I&amp;rsquo;d turn the dial and hear some new song. But the moment anyone mentioned Jesus I&amp;rsquo;d turn the dial again. Even the tiniest bit of being preached to was enough to make me lose interest.But by the same token we should not automatically reject everything the woke believe. I&amp;rsquo;m not a Christian, but I can see that many Christian principles are good ones. It would be a mistake to discard them all just because one didn&amp;rsquo;t share the religion that espoused them. It would be the sort of thing a religious zealot would do.If we have genuine pluralism, I think we&amp;rsquo;ll be safe from future outbreaks of woke intolerance. Wokeness itself won&amp;rsquo;t go away. There will for the foreseeable future continue to be pockets of woke zealots inventing new moral fashions. The key is not to let them treat their fashions as normative. They can change what their coreligionists are allowed to say every few months if they like, but they mustn&amp;rsquo;t be allowed to change what we&amp;rsquo;re allowed to say. [17]The more general problem — how to prevent similar outbreaks of aggressively performative moralism — is of course harder. Here we&amp;rsquo;re up against human nature. There will always be prigs. And in particular there will always be the enforcers among them, the aggressively conventional-minded. These people are born that way. Every society has them. So the best we can do is to keep them bottled up.The aggressively conventional-minded aren&amp;rsquo;t always on the rampage. Usually they just enforce whatever random rules are nearest to hand. They only become dangerous when some new ideology gets a lot of them pointed in the same direction at once. That&amp;rsquo;s what happened during the Cultural Revolution, and to a lesser extent (thank God) in the two waves of political correctness we&amp;rsquo;ve experienced.We can&amp;rsquo;t get rid of the aggressively conventional-minded. [18] And we couldn&amp;rsquo;t prevent people from creating new ideologies that appealed to them even if we wanted to. So if we want to keep them bottled up, we have to do it one step downstream. Fortunately when the aggressively conventional-minded go on the rampage they always do one thing that gives them away: they define new heresies to punish people for. So the best way to protect ourselves from future outbreaks of things like wokeness is to have powerful antibodies against the concept of heresy.We should have a conscious bias against defining new forms of heresy. Whenever anyone tries to ban saying something that we&amp;rsquo;d previously been able to say, our initial assumption should be that they&amp;rsquo;re wrong. Only our initial assumption of course. If they can prove we should stop saying it, then we should. But the burden of proof is on them. In liberal democracies, people trying to prevent something from being said will usually claim they&amp;rsquo;re not merely engaging in censorship, but trying to prevent some form of &amp;ldquo;harm&amp;rdquo;. And maybe they&amp;rsquo;re right. But once again, the burden of proof is on them. It&amp;rsquo;s not enough to claim harm; they have to prove it.As long as the aggressively conventional-minded continue to give themselves away by banning heresies, we&amp;rsquo;ll always be able to notice when they become aligned behind some new ideology. And if we always fight back at that point, with any luck we can stop them in their tracks.The number of true things we can&amp;rsquo;t say should not increase. If it does, something is wrong.Notes[0] This was not the original meaning of &amp;ldquo;woke,&amp;rdquo; but it&amp;rsquo;s rarely used in the original sense now. Now the pejorative sense is the dominant one.[1] Why did 1960s radicals focus on the causes they did? One of the people who reviewed drafts of this essay explained this so well that I asked if I could quote him: The middle-class student protestors of the New Left rejected the socialist/Marxist left as unhip. They were interested in sexier forms of oppression uncovered by cultural analysis (Marcuse) and abstruse &amp;ldquo;Theory&amp;rdquo;. Labor politics became stodgy and old-fashioned. This took a couple generations to work through. The woke ideology&amp;rsquo;s conspicuous lack of interest in the working class is the tell-tale sign. Such fragments as are, er, left of the old left are anti-woke, and meanwhile the actual working class shifted to the populist right and gave us Trump. Trump and wokeness are cousins.The middle-class origins of wokeness smoothed its way through the institutions because it had no interest in &amp;ldquo;seizing the means of production&amp;rdquo; (how quaint such phrases seem now), which would quickly have run up against hard state and corporate power. The fact that wokeness only expressed interest in other kinds of class (race, sex, etc) signalled compromise with existing power: give us power within your system and we&amp;rsquo;ll bestow the resource we control — moral rectitude — upon you. As an ideological stalking horse for gaining control over discourse and institutions, this succeeded where a more ambitious revolutionary program would not have. [2] It helped that the humanities and social sciences also included some of the biggest and easiest undergrad majors. If a political movement had to start with physics students, it could never get off the ground; there would be too few of them, and they wouldn&amp;rsquo;t have the time to spare.At the top universities these majors are not as big as they used to be, though. A 2022 survey found that only 7% of Harvard undergrads plan to major in the humanities, vs nearly 30% during the 1970s. I expect wokeness is at least part of the reason; when undergrads consider majoring in English, it&amp;rsquo;s presumably because they love the written word and not because they want to listen to lectures about racism.[3] The puppet-master-and-puppet character of political correctness became clearly visible when a bakery near Oberlin College was falsely accused of race discrimination in 2016. In the subsequent civil trial, lawyers for the bakery produced a text message from Oberlin Dean of Students Meredith Raimondo that read &amp;ldquo;I&amp;rsquo;d say unleash the students if I wasn&amp;rsquo;t convinced this needs to be put behind us.&amp;quot;[4] The woke sometimes claim that wokeness is simply treating people with respect. But if it were, that would be the only rule you&amp;rsquo;d have to remember, and this is comically far from being the case. My younger son likes to imitate voices, and at one point when he was about seven I had to explain which accents it was currently safe to imitate publicly and which not. It took about ten minutes, and I still hadn&amp;rsquo;t covered all the cases.[5] In 1986 the Supreme Court ruled that creating a hostile work environment could constitute sex discrimination, which in turn affected universities via Title IX. The court specified that the test of a hostile environment was whether it would bother a reasonable person, but since for a professor merely being the subject of a sexual harassment complaint would be a disaster whether the complainant was reasonable or not, in practice any joke or remark remotely connected with sex was now effectively forbidden. Which meant we&amp;rsquo;d now come full circle to Victorian codes of behavior, when there was a large class of things that might not be said &amp;ldquo;with ladies present.&amp;quot;[6] Much as they tried to pretend there was no conflict between diversity and quality. But you can&amp;rsquo;t simultaneously optimize for two things that aren&amp;rsquo;t identical. What diversity actually means, judging from the way the term is used, is proportional representation, and unless you&amp;rsquo;re selecting a group whose purpose is to be representative, like poll respondents, optimizing for proportional representation has to come at the expense of quality. This is not because of anything about representation; it&amp;rsquo;s the nature of optimization; optimizing for x has to come at the expense of y unless x and y are identical.[7] Maybe societies will eventually develop antibodies to viral outrage. Maybe we were just the first to be exposed to it, so it tore through us like an epidemic through a previously isolated population. I&amp;rsquo;m fairly confident that it would be possible to create new social media apps that were less driven by outrage, and an app of this type would have a good chance of stealing users from existing ones, because the smartest people would tend to migrate to it.[8] I say &amp;ldquo;mostly&amp;rdquo; because I have hopes that journalistic neutrality will return in some form. There is some market for unbiased news, and while it may be small, it&amp;rsquo;s valuable. The rich and powerful want to know what&amp;rsquo;s really going on; that&amp;rsquo;s how they became rich and powerful.[9] The Times made this momentous announcement very informally, in passing in the middle of an article about a Times reporter who&amp;rsquo;d been criticized for inaccuracy. It&amp;rsquo;s quite possible no senior editor even approved it. But it&amp;rsquo;s somehow appropriate that this particular universe ended with a whimper rather than a bang.[10] As the acronym DEI goes out of fashion, many of these bureaucrats will try to go underground by changing their titles. It looks like &amp;ldquo;belonging&amp;rdquo; will be a popular option.[11] If you&amp;rsquo;ve ever wondered why our legal system includes protections like the separation of prosecutor, judge, and jury, the right to examine evidence and cross-examine witnesses, and the right to be represented by legal counsel, the de facto parallel legal system established by Title IX makes that all too clear.[12] The invention of new improprieties is most visible in the rapid evolution of woke nomenclature. This is particularly annoying to me as a writer, because the new names are always worse. Any religious observance has to be inconvenient and slightly absurd; otherwise gentiles would do it too. So &amp;ldquo;slaves&amp;rdquo; becomes &amp;ldquo;enslaved individuals.&amp;rdquo; But web search can show us the leading edge of moral growth in real time: if you search for &amp;ldquo;individuals experiencing slavery&amp;rdquo; you will as of this writing find five legit attempts to use the phrase, and you&amp;rsquo;ll even find two for &amp;ldquo;individuals experiencing enslavement.&amp;quot;[13] Organizations that do dubious things are particularly concerned with propriety, which is how you end up with absurdities like tobacco and oil companies having higher ESG ratings than Tesla.[14] Elon did something else that tilted Twitter rightward though: he gave more visibility to paying users. Paying users lean right on average, because people on the far left dislike Elon and don&amp;rsquo;t want to give him money. Elon presumably knew this would happen. On the other hand, the people on the far left have only themselves to blame; they could tilt Twitter back to the left tomorrow if they wanted to.[15] It even, as James Lindsay and Peter Boghossian pointed out, has a concept of original sin: privilege. Which means unlike Christianity&amp;rsquo;s egalitarian version, people have varying degrees of it. An able-bodied straight white American male is born with such a load of sin that only by the most abject repentance can he be saved.Wokeness also shares something rather funny with many actual versions of Christianity: like God, the people for whose sake wokeness purports to act are often revolted by the things done in their name.[16] There is one exception to most of these rules: actual religious organizations. It&amp;rsquo;s reasonable for them to insist on orthodoxy. But they in turn should declare that they&amp;rsquo;re religious organizations. It&amp;rsquo;s rightly considered shady when something that appears to be an ordinary business or publication turns out to be a religious organization.[17] I don&amp;rsquo;t want to give the impression that it will be simple to roll back wokeness. There will be places where the fight inevitably gets messy — particularly within universities, which everyone has to share, yet which are currently the most pervaded by wokeness of any institutions.[18] You can however get rid of aggressively conventional-minded people within an organization, and in many if not most organizations this would be an excellent idea. Even a handful of them can do a lot of damage. I bet you&amp;rsquo;d feel a noticeable improvement going from a handful to none.Thanks to Sam Altman, Ben Miller, Daniel Gackle, Robin Hanson, Jessica Livingston, Greg Lukianoff, Harj Taggar, Garry Tan, and Tim Urban for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/word/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/word/</guid>
      <description>&lt;h1 id=&#34;word&#34;&gt;Word&lt;/h1&gt;&#xA;&lt;p&gt;A Word to the Resourceful Want to start a startup? Get funded by Y Combinator. January 2012A year ago I noticed a pattern in the least successful startups we&amp;rsquo;d funded: they all seemed hard to talk to. It felt as if there was some kind of wall between us. I could never quite tell if they understood what I was saying.This caught my attention because earlier we&amp;rsquo;d noticed a pattern among the most successful startups, and it seemed to hinge on a different quality. We found the startups that did best were the ones with the sort of founders about whom we&amp;rsquo;d say &amp;ldquo;they can take care of themselves.&amp;rdquo; The startups that do best are fire-and-forget in the sense that all you have to do is give them a lead, and they&amp;rsquo;ll close it, whatever type of lead it is. When they&amp;rsquo;re raising money, for example, you can do the initial intros knowing that if you wanted to you could stop thinking about it at that point. You won&amp;rsquo;t have to babysit the round to make sure it happens. That type of founder is going to come back with the money; the only question is how much on what terms.It seemed odd that the outliers at the two ends of the spectrum could be detected by what appeared to be unrelated tests. You&amp;rsquo;d expect that if the founders at one end were distinguished by the presence of quality x, at the other end they&amp;rsquo;d be distinguished by lack of x. Was there some kind of inverse relation between resourcefulness and being hard to talk to?It turns out there is, and the key to the mystery is the old adage &amp;ldquo;a word to the wise is sufficient.&amp;rdquo; Because this phrase is not only overused, but overused in an indirect way (by prepending the subject to some advice), most people who&amp;rsquo;ve heard it don&amp;rsquo;t know what it means. What it means is that if someone is wise, all you have to do is say one word to them, and they&amp;rsquo;ll understand immediately. You don&amp;rsquo;t have to explain in detail; they&amp;rsquo;ll chase down all the implications.In much the same way that all you have to do is give the right sort of founder a one line intro to a VC, and he&amp;rsquo;ll chase down the money. That&amp;rsquo;s the connection. Understanding all the implications — even the inconvenient implications — of what someone tells you is a subset of resourcefulness. It&amp;rsquo;s conversational resourcefulness.Like real world resourcefulness, conversational resourcefulness often means doing things you don&amp;rsquo;t want to. Chasing down all the implications of what&amp;rsquo;s said to you can sometimes lead to uncomfortable conclusions. The best word to describe the failure to do so is probably &amp;ldquo;denial,&amp;rdquo; though that seems a bit too narrow. A better way to describe the situation would be to say that the unsuccessful founders had the sort of conservatism that comes from weakness. They traversed idea space as gingerly as a very old person traverses the physical world. [1]The unsuccessful founders weren&amp;rsquo;t stupid. Intellectually they were as capable as the successful founders of following all the implications of what one said to them. They just weren&amp;rsquo;t eager to.So being hard to talk to was not what was killing the unsuccessful startups. It was a sign of an underlying lack of resourcefulness. That&amp;rsquo;s what was killing them. As well as failing to chase down the implications of what was said to them, the unsuccessful founders would also fail to chase down funding, and users, and sources of new ideas. But the most immediate evidence I had that something was amiss was that I couldn&amp;rsquo;t talk to them.Notes[1] A YC partner wrote:My feeling with the bad groups is that coming into office hours, they&amp;rsquo;ve already decided what they&amp;rsquo;re going to do and everything I say is being put through an internal process in their heads, which either desperately tries to munge what I&amp;rsquo;ve said into something that conforms with their decision or just outright dismisses it and creates a rationalization for doing so. They may not even be conscious of this process but that&amp;rsquo;s what I think is happening when you say something to bad groups and they have that glazed over look. I don&amp;rsquo;t think it&amp;rsquo;s confusion or lack of understanding per se, it&amp;rsquo;s this internal process at work.With the good groups, you can tell that everything you say is being looked at with fresh eyes and even if it&amp;rsquo;s dismissed, it&amp;rsquo;s because of some logical reason e.g. &amp;ldquo;we already tried that&amp;rdquo; or &amp;ldquo;from speaking to our users that isn&amp;rsquo;t what they&amp;rsquo;d like,&amp;rdquo; etc. Those groups never have that glazed over look.Thanks to Sam Altman, Patrick Collison, Aaron Iba, Jessica Livingston, Robert Morris, Harj Taggar, and Garry Tan for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/words/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/words/</guid>
      <description>&lt;h1 id=&#34;words&#34;&gt;Words&lt;/h1&gt;&#xA;&lt;p&gt;Putting Ideas into Words February 2022Writing about something, even something you know well, usually shows you that you didn&amp;rsquo;t know it as well as you thought. Putting ideas into words is a severe test. The first words you choose are usually wrong; you have to rewrite sentences over and over to get them exactly right. And your ideas won&amp;rsquo;t just be imprecise, but incomplete too. Half the ideas that end up in an essay will be ones you thought of while you were writing it. Indeed, that&amp;rsquo;s why I write them.Once you publish something, the convention is that whatever you wrote was what you thought before you wrote it. These were your ideas, and now you&amp;rsquo;ve expressed them. But you know this isn&amp;rsquo;t true. You know that putting your ideas into words changed them. And not just the ideas you published. Presumably there were others that turned out to be too broken to fix, and those you discarded instead.It&amp;rsquo;s not just having to commit your ideas to specific words that makes writing so exacting. The real test is reading what you&amp;rsquo;ve written. You have to pretend to be a neutral reader who knows nothing of what&amp;rsquo;s in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger. But the stranger is rational, so you always can, if you ask him what he needs. If he&amp;rsquo;s not satisfied because you failed to mention x or didn&amp;rsquo;t qualify some sentence sufficiently, then you mention x or add more qualifications. Happy now? It may cost you some nice sentences, but you have to resign yourself to that. You just have to make them as good as you can and still satisfy the stranger.This much, I assume, won&amp;rsquo;t be that controversial. I think it will accord with the experience of anyone who has tried to write about anything nontrivial. There may exist people whose thoughts are so perfectly formed that they just flow straight into words. But I&amp;rsquo;ve never known anyone who could do this, and if I met someone who said they could, it would seem evidence of their limitations rather than their ability. Indeed, this is a trope in movies: the guy who claims to have a plan for doing some difficult thing, and who when questioned further, taps his head and says &amp;ldquo;It&amp;rsquo;s all up here.&amp;rdquo; Everyone watching the movie knows what that means. At best the plan is vague and incomplete. Very likely there&amp;rsquo;s some undiscovered flaw that invalidates it completely. At best it&amp;rsquo;s a plan for a plan.In precisely defined domains it&amp;rsquo;s possible to form complete ideas in your head. People can play chess in their heads, for example. And mathematicians can do some amount of math in their heads, though they don&amp;rsquo;t seem to feel sure of a proof over a certain length till they write it down. But this only seems possible with ideas you can express in a formal language. [1] Arguably what such people are doing is putting ideas into words in their heads. I can to some extent write essays in my head. I&amp;rsquo;ll sometimes think of a paragraph while walking or lying in bed that survives nearly unchanged in the final version. But really I&amp;rsquo;m writing when I do this. I&amp;rsquo;m doing the mental part of writing; my fingers just aren&amp;rsquo;t moving as I do it. [2]You can know a great deal about something without writing about it. Can you ever know so much that you wouldn&amp;rsquo;t learn more from trying to explain what you know? I don&amp;rsquo;t think so. I&amp;rsquo;ve written about at least two subjects I know well — Lisp hacking and startups — and in both cases I learned a lot from writing about them. In both cases there were things I didn&amp;rsquo;t consciously realize till I had to explain them. And I don&amp;rsquo;t think my experience was anomalous. A great deal of knowledge is unconscious, and experts have if anything a higher proportion of unconscious knowledge than beginners.I&amp;rsquo;m not saying that writing is the best way to explore all ideas. If you have ideas about architecture, presumably the best way to explore them is to build actual buildings. What I&amp;rsquo;m saying is that however much you learn from exploring ideas in other ways, you&amp;rsquo;ll still learn new things from writing about them.Putting ideas into words doesn&amp;rsquo;t have to mean writing, of course. You can also do it the old way, by talking. But in my experience, writing is the stricter test. You have to commit to a single, optimal sequence of words. Less can go unsaid when you don&amp;rsquo;t have tone of voice to carry meaning. And you can focus in a way that would seem excessive in conversation. I&amp;rsquo;ll often spend 2 weeks on an essay and reread drafts 50 times. If you did that in conversation it would seem evidence of some kind of mental disorder. If you&amp;rsquo;re lazy, of course, writing and talking are equally useless. But if you want to push yourself to get things right, writing is the steeper hill. [3]The reason I&amp;rsquo;ve spent so long establishing this rather obvious point is that it leads to another that many people will find shocking. If writing down your ideas always makes them more precise and more complete, then no one who hasn&amp;rsquo;t written about a topic has fully formed ideas about it. And someone who never writes has no fully formed ideas about anything nontrivial.It feels to them as if they do, especially if they&amp;rsquo;re not in the habit of critically examining their own thinking. Ideas can feel complete. It&amp;rsquo;s only when you try to put them into words that you discover they&amp;rsquo;re not. So if you never subject your ideas to that test, you&amp;rsquo;ll not only never have fully formed ideas, but also never realize it.Putting ideas into words is certainly no guarantee that they&amp;rsquo;ll be right. Far from it. But though it&amp;rsquo;s not a sufficient condition, it is a necessary one.Notes[1] Machinery and circuits are formal languages.[2] I thought of this sentence as I was walking down the street in Palo Alto.[3] There are two senses of talking to someone: a strict sense in which the conversation is verbal, and a more general sense in which it can take any form, including writing. In the limit case (e.g. Seneca&amp;rsquo;s letters), conversation in the latter sense becomes essay writing.It can be very useful to talk (in either sense) with other people as you&amp;rsquo;re writing something. But a verbal conversation will never be more exacting than when you&amp;rsquo;re talking about something you&amp;rsquo;re writing. Thanks to Trevor Blackwell, Patrick Collison, and Robert Morris for reading drafts of this. French Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/work/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/work/</guid>
      <description>&lt;h1 id=&#34;work&#34;&gt;Work&lt;/h1&gt;&#xA;&lt;p&gt;What Doesn&amp;rsquo;t Seem Like Work? January 2015My father is a mathematician. For most of my childhood he worked for Westinghouse, modelling nuclear reactors.He was one of those lucky people who know early on what they want to do. When you talk to him about his childhood, there&amp;rsquo;s a clear watershed at about age 12, when he &amp;ldquo;got interested in maths.&amp;ldquo;He grew up in the small Welsh seacoast town of Pwllheli. As we retraced his walk to school on Google Street View, he said that it had been nice growing up in the country.&amp;ldquo;Didn&amp;rsquo;t it get boring when you got to be about 15?&amp;rdquo; I asked.&amp;ldquo;No,&amp;rdquo; he said, &amp;ldquo;by then I was interested in maths.&amp;ldquo;In another conversation he told me that what he really liked was solving problems. To me the exercises at the end of each chapter in a math textbook represent work, or at best a way to reinforce what you learned in that chapter. To him the problems were the reward. The text of each chapter was just some advice about solving them. He said that as soon as he got a new textbook he&amp;rsquo;d immediately work out all the problems — to the slight annoyance of his teacher, since the class was supposed to work through the book gradually.Few people know so early or so certainly what they want to work on. But talking to my father reminded me of a heuristic the rest of us can use. If something that seems like work to other people doesn&amp;rsquo;t seem like work to you, that&amp;rsquo;s something you&amp;rsquo;re well suited for. For example, a lot of programmers I know, including me, actually like debugging. It&amp;rsquo;s not something people tend to volunteer; one likes it the way one likes popping zits. But you may have to like debugging to like programming, considering the degree to which programming consists of it.The stranger your tastes seem to other people, the stronger evidence they probably are of what you should do. When I was in college I used to write papers for my friends. It was quite interesting to write a paper for a class I wasn&amp;rsquo;t taking. Plus they were always so relieved.It seemed curious that the same task could be painful to one person and pleasant to another, but I didn&amp;rsquo;t realize at the time what this imbalance implied, because I wasn&amp;rsquo;t looking for it. I didn&amp;rsquo;t realize how hard it can be to decide what you should work on, and that you sometimes have to figure it out from subtle clues, like a detective solving a case in a mystery novel. So I bet it would help a lot of people to ask themselves about this explicitly. What seems like work to other people that doesn&amp;rsquo;t seem like work to you? Thanks to Sam Altman, Trevor Blackwell, Jessica Livingston, Robert Morris, and my father for reading drafts of this.Robert Morris: All About ProgrammingFrench Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/worked/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/worked/</guid>
      <description>&lt;h1 id=&#34;worked&#34;&gt;Worked&lt;/h1&gt;&#xA;&lt;p&gt;What I Worked On February 2021Before college the two main things I worked on, outside of school, were writing and programming. I didn&amp;rsquo;t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.The first programs I tried writing were on the IBM 1401 that our school district used for what was then called &amp;ldquo;data processing.&amp;rdquo; This was in 9th grade, so I was 13 or 14. The school district&amp;rsquo;s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain&amp;rsquo;s lair down there, with all these alien-looking machines  CPU, disk drives, printer, card reader  sitting up on a raised floor under bright fluorescent lights.The language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.I was puzzled by the 1401. I couldn&amp;rsquo;t figure out what to do with it. And in retrospect there&amp;rsquo;s not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn&amp;rsquo;t have any data stored on punched cards. The only other option was to do things that didn&amp;rsquo;t rely on any input, like calculate approximations of pi, but I didn&amp;rsquo;t know enough math to do anything interesting of that type. So I&amp;rsquo;m not surprised I can&amp;rsquo;t remember any programs I wrote, because they can&amp;rsquo;t have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn&amp;rsquo;t. On a machine without time-sharing, this was a social as well as a technical error, as the data center manager&amp;rsquo;s expression made clear.With microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]The first of my friends to get a microcomputer built it himself. It was sold as a kit by Heathkit. I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.Computers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980. The gold standard then was the Apple II, but a TRS-80 was good enough. This was when I really started programming. I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book. There was only room in memory for about 2 pages of text, so he&amp;rsquo;d write 2 pages at a time and then print them out, but it was a lot better than a typewriter.Though I liked programming, I didn&amp;rsquo;t plan to study it in college. In college I was going to study philosophy, which sounded much more powerful. It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge. What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn&amp;rsquo;t much left for these supposed ultimate truths. All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.I couldn&amp;rsquo;t have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.AI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven&amp;rsquo;t tried rereading The Moon is a Harsh Mistress, so I don&amp;rsquo;t know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we&amp;rsquo;d have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most. All you had to do was teach SHRDLU more words.There weren&amp;rsquo;t any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself. Which meant learning Lisp, since in those days Lisp was regarded as the language of AI. The commonly used programming languages then were pretty primitive, and programmers&amp;rsquo; ideas correspondingly so. The default language at Cornell was a Pascal-like language called PL/I, and the situation was similar elsewhere. Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were. This was more like it; this was what I had expected college to do. It wasn&amp;rsquo;t happening in a class, like it was supposed to, but that was ok. For the next couple years I was on a roll. I knew what I was going to do.For my undergraduate thesis, I reverse-engineered SHRDLU. My God did I love working on that program. It was a pleasing bit of code, but what made it even more exciting was my belief  hard to imagine now, but not unique in 1985  that it was already climbing the lower slopes of intelligence.I had gotten into a program at Cornell that didn&amp;rsquo;t make you choose a major. You could take whatever classes you liked, and choose whatever you liked to put on your degree. I of course chose &amp;ldquo;Artificial Intelligence.&amp;rdquo; When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes. At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.I applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I&amp;rsquo;d visited because Rich Draves went there, and was also home to Bill Woods, who&amp;rsquo;d invented the type of parser I used in my SHRDLU clone. Only Harvard accepted me, so that was where I went.I don&amp;rsquo;t remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax. By which I mean the sort of AI in which a program that&amp;rsquo;s told &amp;ldquo;the dog is sitting on the chair&amp;rdquo; translates this into some formal representation and adds it to the list of things it knows.What these programs really showed was that there&amp;rsquo;s a subset of natural language that&amp;rsquo;s a formal language. But a very proper subset. It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language. It was not, in fact, simply a matter of teaching SHRDLU more words. That whole way of doing AI, with explicit data structures representing concepts, was not going to work. Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.So I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It&amp;rsquo;s scary to think how little I knew about Lisp hacking when I started writing that book. But there&amp;rsquo;s nothing like writing a book about something to help you learn it. The book, On Lisp, wasn&amp;rsquo;t published till 1993, but I wrote much of it in grad school.Computer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things. I had plenty of respect for theory  indeed, a sneaking suspicion that it was the more admirable of the two halves  but building things seemed so much more exciting.The problem with systems work, though, was that it didn&amp;rsquo;t last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work. Only people with a sense of the history of the field would even realize that, in its time, it had been good.There were some surplus Xerox Dandelions floating around the computer lab at one point. Anyone who wanted one to play around with could have one. I was briefly tempted, but they were so slow by present standards; what was the point? No one else wanted one either, so off they went. That was what happened to systems work.I wanted not just to build things, but to build things that would last.In this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school. One day I went to visit the Carnegie Institute, where I&amp;rsquo;d spent a lot of time as a kid. While looking at a painting there I realized something that might seem obvious, but was a big surprise to me. There, right on the wall, was something you could make that would last. Paintings didn&amp;rsquo;t become obsolete. Some of the best ones were hundreds of years old.And moreover this was something you could make a living doing. Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive. And as an artist you could be truly independent. You wouldn&amp;rsquo;t have a boss, or even need to get research funding.I had always liked looking at paintings. Could I make them? I had no idea. I&amp;rsquo;d never imagined it was even possible. I knew intellectually that people made art  that it didn&amp;rsquo;t just appear spontaneously  but it was as if the people who made it were a different species. They either lived long ago or were mysterious geniuses doing strange things in profiles in Life magazine. The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.That fall I started taking art classes at Harvard. Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going. If he even knew about the strange classes I was taking, he never said anything.So now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at On Lisp. In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.I didn&amp;rsquo;t see a way out of this situation. I didn&amp;rsquo;t want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he&amp;rsquo;d found such a spectacular way to get out of grad school.Then one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn&amp;rsquo;t have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay &amp;ldquo;Yes, I think so. I&amp;rsquo;ll give you something to read in a few days.&amp;ldquo;I picked applications of continuations as the topic. In retrospect I should have written about macros and embedded languages. There&amp;rsquo;s a whole world there that&amp;rsquo;s barely been explored. But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.Meanwhile I was applying to art schools. I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good. RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.I&amp;rsquo;d applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer. The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.Toward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they&amp;rsquo;d sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall. This was now only weeks away. My nice landlady let me leave my stuff in her attic. I had some money saved from consulting work I&amp;rsquo;d done in grad school; there was probably enough to last a year if I lived cheaply. Now all I had to do was learn Italian.Only stranieri (foreigners) had to take this entrance exam. In retrospect it may well have been a way of excluding them, because there were so many stranieri attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered. I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don&amp;rsquo;t know how I managed to pass the written exam. I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary. [2]I&amp;rsquo;m only up to age 25 and already there are such conspicuous patterns. Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed. The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn&amp;rsquo;t require the faculty to teach anything, and in return the faculty wouldn&amp;rsquo;t require the students to learn anything. And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier. We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they&amp;rsquo;d seen in American art magazines.Our model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She&amp;rsquo;d copy an obscure old painting out of a book, and then he&amp;rsquo;d take the copy and maltreat it to make it look old. [3]While I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time. Painting still lives is different from painting people, because the subject, as its name suggests, can&amp;rsquo;t move. People can&amp;rsquo;t sit for more than about 15 minutes at a time, and when they do they don&amp;rsquo;t sit very still. So the traditional m.o. for painting people is to know how to paint a generic person, which you then modify to match the specific person you&amp;rsquo;re painting. Whereas a still life you can, if you want, copy pixel by pixel from what you&amp;rsquo;re seeing. You don&amp;rsquo;t want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it&amp;rsquo;s been through a head. You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it&amp;rsquo;s the edge of an object. By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense. [4]I liked painting still lives because I was curious about what I was seeing. In everyday life, we aren&amp;rsquo;t consciously aware of much we&amp;rsquo;re seeing. Most visual perception is handled by low-level processes that merely tell your brain &amp;ldquo;that&amp;rsquo;s a water droplet&amp;rdquo; without telling you details like where the lightest and darkest points are, or &amp;ldquo;that&amp;rsquo;s a bush&amp;rdquo; without telling you the shape and position of every leaf. This is a feature of brains, not a bug. In everyday life it would be distracting to notice every leaf on every bush. But when you have to paint something, you have to look more closely, and when you do there&amp;rsquo;s a lot to see. You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can after days of trying to write an essay about something people usually take for granted.This is not the only way to paint. I&amp;rsquo;m not 100% sure it&amp;rsquo;s even a good way to paint. But it seemed a good enough bet to be worth trying.Our teacher, professor Ulivi, was a nice guy. He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had. But the Accademia wasn&amp;rsquo;t teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.I wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall. I got one at a company called Interleaf, which made software for creating documents. You mean like Microsoft Word? Exactly. That was how I learned that low end software tends to eat high end software. But Interleaf still had a few years to live yet. [5]Interleaf had done something pretty bold. Inspired by Emacs, they&amp;rsquo;d added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I&amp;rsquo;ve had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn&amp;rsquo;t know C and didn&amp;rsquo;t want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction. Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.The good part was that I got paid huge amounts of money, especially by art student standards. In Florence, after paying my part of the rent, my budget for everything else had been $7 a day. Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting. By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.I learned some useful things at Interleaf, though they were mostly about what not to do. I learned that it&amp;rsquo;s better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it&amp;rsquo;s depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there&amp;rsquo;s not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.But the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it&amp;rsquo;s good to be the &amp;ldquo;entry level&amp;rdquo; option, even though that will be less prestigious, because if you&amp;rsquo;re not, someone else will be, and will squash you against the ceiling. Which in turn means that prestige is a danger sign.When I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years. When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML. Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.In the fall of 1992 I moved back to Providence to continue at RISD. The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke. Now I was going to see what real art school was like. But alas it was more like the Accademia than not. Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine. At least not the painting department. The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous. No doubt illustration and architecture were too. But painting was post-rigorous. Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.A signature style is the visual equivalent of what in show business is known as a &amp;ldquo;schtick&amp;rdquo;: something that immediately identifies the work as yours and no one else&amp;rsquo;s. For example, when you see a painting that looks like a certain kind of cartoon, you know it&amp;rsquo;s by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That&amp;rsquo;s not always why artists have a signature style, but it&amp;rsquo;s usually why buyers pay a lot for such work. [6]There were plenty of earnest students too: kids who &amp;ldquo;could draw&amp;rdquo; in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better. They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did. I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.I learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free. So in 1993 I dropped out. I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor. A rent-controlled apartment in a building her mother owned in New York was becoming vacant. Did I want it? It wasn&amp;rsquo;t much more than my current place, and New York was supposed to be where the artists were. So yes, I wanted it! [7]Asterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans. You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there&amp;rsquo;s a tiny corner that&amp;rsquo;s not rich, or at least wasn&amp;rsquo;t in 1993. It&amp;rsquo;s called Yorkville, and that was my new home. Now I was a New York artist  in the strictly technical sense of making paintings and living in New York.I was nervous about money, because I could sense that Interleaf was on the way down. Freelance Lisp hacking work was very rare, and I didn&amp;rsquo;t want to have to program in another language, which in those days would have meant C++ if I was lucky. So with my unerring nose for financial opportunity, I decided to write another book on Lisp. This would be a popular book, the sort of book that could be used as a textbook. I imagined myself living frugally off the royalties and spending all my time painting. (The painting on the cover of this book, ANSI Common Lisp, is one that I painted around this time.)The best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I&amp;rsquo;d taken her painting class at Harvard. I&amp;rsquo;ve never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.She liked to paint on big, square canvases, 4 to 5 feet on a side. One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager. He wasn&amp;rsquo;t that much older than me, and was super rich. The thought suddenly occurred to me: why don&amp;rsquo;t I become rich? Then I&amp;rsquo;ll be able to work on whatever I want.Meanwhile I&amp;rsquo;d been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I&amp;rsquo;d seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.If I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can&amp;rsquo;t honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn&amp;rsquo;t want to be online, and still don&amp;rsquo;t, not the fancy ones. That&amp;rsquo;s not how they sell. I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages. Then we tried to sign up galleries. To call this a difficult sale would be an understatement. It was difficult to give away. A few galleries let us make sites for them for free, but none paid us.Then some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we&amp;rsquo;d been generating for galleries. This impressive-sounding thing called an &amp;ldquo;internet storefront&amp;rdquo; was something we already knew how to build.So in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores. At first this was going to be normal desktop software, which in those days meant Windows software. That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn. We lived in the Unix world. But we decided we&amp;rsquo;d at least try writing a prototype store builder on Unix. Robert wrote a shopping cart, and I wrote a new site generator for stores  in Lisp, of course.We were working out of Robert&amp;rsquo;s apartment in Cambridge. His roommate was away for big chunks of time, during which I got to sleep in his room. For some reason there was no bed frame or sheets, just a mattress on the floor. One morning as I was lying on this mattress I had an idea that made me sit up like a capital L. What if we ran the software on the server, and let users control it by clicking on links? Then we&amp;rsquo;d never have to write anything to run on users&amp;rsquo; computers. We could generate the sites on the same server we&amp;rsquo;d serve them from. Users wouldn&amp;rsquo;t need anything more than a browser.This kind of software, known as a web app, is common now, but at the time it wasn&amp;rsquo;t clear that it was even possible. To find out, we decided to try making a version of our store builder that you could control through the browser. A couple days later, on August 12, we had one that worked. The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.Now we felt like we were really onto something. I had visions of a whole new generation of software working this way. You wouldn&amp;rsquo;t need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.We started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle&amp;rsquo;s husband Julian. In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator&amp;rsquo;s. We knew founders needed something like this, because we&amp;rsquo;d needed it ourselves.At this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I&amp;rsquo;d made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.We originally hoped to launch in September, but we got more ambitious about the software as we worked on it. Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.It helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values. If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.(If you&amp;rsquo;re curious why my site looks so old-fashioned, it&amp;rsquo;s because it&amp;rsquo;s still made with this software. It may look clunky today, but in 1996 it was the last word in slick.)In September, Robert rebelled. &amp;ldquo;We&amp;rsquo;ve been working on this for a month,&amp;rdquo; he said, &amp;ldquo;and it&amp;rsquo;s still not done.&amp;rdquo; This is funny in retrospect, because he would still be working on it almost 3 years later. But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good. He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him. But Rtm was right, as usual. Trevor turned out to be a frighteningly effective hacker.It was a lot of fun working with Robert and Trevor. They&amp;rsquo;re the two most independent-minded people I know, and in completely different ways. If you could see inside Rtm&amp;rsquo;s brain it would look like a colonial New England church, and if you could see inside Trevor&amp;rsquo;s it would look like the worst excesses of Austrian Rococo.We opened for business, with 6 stores, in January 1996. It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early. There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores. [8]There were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote. In its time, the editor was one of the best general-purpose site builders. I kept the code tight and didn&amp;rsquo;t have to integrate with any other software except Robert&amp;rsquo;s and Trevor&amp;rsquo;s, so it was quite fun to work on. If all I&amp;rsquo;d had to do was work on this software, the next 3 years would have been the easiest of my life. Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.There were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn&amp;rsquo;t because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.We did a lot of things right by accident like that. For example, we did what&amp;rsquo;s now called &amp;ldquo;doing things that don&amp;rsquo;t scale,&amp;rdquo; although at the time we would have described it as &amp;ldquo;being so lame that we&amp;rsquo;re driven to the most desperate measures to get users.&amp;rdquo; The most common of which was building stores for them. This seemed particularly humiliating, since the whole raison d&amp;rsquo;etre of our software was that people could use it to make their own stores. But anything to get users.We learned a lot more about retail than we wanted to know. For example, that if you could only have a small image of a man&amp;rsquo;s shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt. The reason I remember learning this was that it meant I had to rescan about 30 images of men&amp;rsquo;s shirts. My first set of scans were so beautiful too.Though this felt wrong, it was exactly the right thing to be doing. Building stores for users taught us about retail, and about how it felt to use our software. I was initially both mystified and repelled by &amp;ldquo;business&amp;rdquo; and thought we needed a &amp;ldquo;business person&amp;rdquo; to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids. Whatever users wanted, I was all theirs. Maybe one day we&amp;rsquo;d have so many users that I couldn&amp;rsquo;t scan their images for them, but in the meantime there was nothing more important to do.Another thing I didn&amp;rsquo;t get at the time is that growth rate is the ultimate test of a startup. Our growth rate was fine. We had about 70 stores at the end of 1996 and about 500 at the end of 1997. I mistakenly thought the thing that mattered was the absolute number of users. And that is the thing that matters in the sense that that&amp;rsquo;s how much money you&amp;rsquo;re making, and if you&amp;rsquo;re not making enough, you might go out of business. But in the long term the growth rate takes care of the absolute number. If we&amp;rsquo;d been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you&amp;rsquo;re doing fine. You&amp;rsquo;re growing 7x a year. Just don&amp;rsquo;t hire too many more people and you&amp;rsquo;ll soon be profitable, and then you&amp;rsquo;ll control your own destiny.Alas I hired lots more people, partly because our investors wanted me to, and partly because that&amp;rsquo;s what startups did during the Internet Bubble. A company with just a handful of employees would have seemed amateurish. So we didn&amp;rsquo;t reach breakeven until about when Yahoo bought us in the summer of 1998. Which in turn meant we were at the mercy of investors for the entire life of the company. And since both we and our investors were noobs at startups, the result was a mess even by startup standards.It was a huge relief when Yahoo bought us. In principle our Viaweb stock was valuable. It was a share in a business that was profitable and growing rapidly. But it didn&amp;rsquo;t feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months. Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.The next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn&amp;rsquo;t realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo&amp;rsquo;s prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down. After a few months it felt disconcertingly like working at Interleaf.Yahoo had given us a lot of options when they bought us. At the time I thought Yahoo was so overvalued that they&amp;rsquo;d never be worth anything, but to my astonishment the stock went up 5x in the next year. I hung on till the first chunk of options vested, then in the summer of 1999 I left. It had been so long since I&amp;rsquo;d painted anything that I&amp;rsquo;d half forgotten why I was doing this. My brain had been entirely full of software and men&amp;rsquo;s shirts for 4 years. But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.When I said I was leaving, my boss at Yahoo had a long conversation with me about my plans. I told him all about the kinds of pictures I wanted to paint. At the time I was touched that he took such an interest in me. Now I realize it was because he thought I was lying. My options at that point were worth about $2 million a month. If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me. This was the height of the Internet Bubble, and Yahoo was ground zero of it. My boss was at that moment a billionaire. Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.But I really was quitting to paint, and I started immediately. There was no time to lose. I&amp;rsquo;d already burned 4 years getting rich. Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation. That&amp;rsquo;s what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.So I tried to paint, but I just didn&amp;rsquo;t seem to have any energy or ambition. Part of the problem was that I didn&amp;rsquo;t know many people in California. I&amp;rsquo;d compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere. I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you&amp;rsquo;ll be surprised to hear I still had my apartment, sealed up like a tomb of my old life. Idelle was in New York at least, and there were other people trying to paint there, even though I didn&amp;rsquo;t know any of them.When I got back to New York I resumed my old life, except now I was rich. It was as weird as it sounds. I resumed all my old patterns, except now there were doors where there hadn&amp;rsquo;t been. Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up. Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I&amp;rsquo;d paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn&amp;rsquo;t rotted yet).Meanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn&amp;rsquo;t one. Huh.Around this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps? Why not let people edit code on our server through the browser, and then host the resulting applications for them? [9] You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.I got so excited about this idea that I couldn&amp;rsquo;t think about anything else. It seemed obvious that this was the future. I didn&amp;rsquo;t particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it. I hoped to lure Robert into working on it with me, but there I ran into a hitch. Robert was now a postdoc at MIT, and though he&amp;rsquo;d made a lot of money the last time I&amp;rsquo;d lured him into working on one of my schemes, it had also been a huge time sink. So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.Hmph. Well, I&amp;rsquo;d do it myself then. I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it&amp;rsquo;s now clear is about twenty companies and several open source projects worth of software. The language for defining applications would of course be a dialect of Lisp. But I wasn&amp;rsquo;t so naive as to assume I could spring an overt Lisp on a general audience; we&amp;rsquo;d hide the parentheses, like Dylan did.By then there was a name for the kind of company Viaweb was, an &amp;ldquo;application service provider,&amp;rdquo; or ASP. This name didn&amp;rsquo;t last long before it was replaced by &amp;ldquo;software as a service,&amp;rdquo; but it was current for long enough that I named this new company after it: it was going to be called Aspra.I started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls). But about halfway through the summer I realized I really didn&amp;rsquo;t want to run a company  especially not a big one, which it was looking like this would have to be. I&amp;rsquo;d only started Viaweb because I needed the money. Now that I didn&amp;rsquo;t need money anymore, why was I doing this? If this vision had to be realized as a company, then screw the vision. I&amp;rsquo;d build a subset that could be done as an open source project.Much to my surprise, the time I spent working on this stuff was not wasted after all. After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.The subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn&amp;rsquo;t even have to hide. A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.The following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we&amp;rsquo;d used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I&amp;rsquo;d created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. [10]Wow, I thought, there&amp;rsquo;s an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors. The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine. Now anyone could publish anything.This had been possible in principle since 1993, but not many people had realized it yet. I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it. Even then it took me several years to understand the implications. It meant there would be a whole new generation of essays. [11]In the print era, the channel for publishing essays had been vanishingly small. Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties. There were so many essays that had never been written, because there had been no way to publish them. Now they could be, and I was going to write them. [12]I&amp;rsquo;ve worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online. From then on I knew that whatever else I did, I&amp;rsquo;d always write essays too.I knew that online essays would be a marginal medium at first. Socially they&amp;rsquo;d seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker. But by this point I knew enough to find that encouraging instead of discouraging.One of the most conspicuous patterns I&amp;rsquo;ve noticed in my life is how well it has worked, for me at least, to work on things that weren&amp;rsquo;t prestigious. Still life has always been the least prestigious form of painting. Viaweb and Y Combinator both seemed lame when we started them. I still get the glassy eye from strangers when they ask what I&amp;rsquo;m writing, and I explain that it&amp;rsquo;s an essay I&amp;rsquo;m going to publish on my web site. Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.It&amp;rsquo;s not that unprestigious types of work are good per se. But when you find yourself drawn to some kind of work despite its current lack of prestige, it&amp;rsquo;s a sign both that there&amp;rsquo;s something real to be discovered there, and that you have the right kind of motives. Impure motives are a big danger for the ambitious. If anything is going to lead you astray, it will be the desire to impress people. So while working on things that aren&amp;rsquo;t prestigious doesn&amp;rsquo;t guarantee you&amp;rsquo;re on the right track, it at least guarantees you&amp;rsquo;re not on the most common type of wrong one.Over the next several years I wrote lots of essays about all kinds of different topics. O&amp;rsquo;Reilly reprinted a collection of them as a book, called Hackers &amp;amp; Painters after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.One night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party. So for every guest, two thirds of the other guests would be people they didn&amp;rsquo;t know but would probably like. One of the guests was someone I didn&amp;rsquo;t know but would turn out to like a lot: a woman called Jessica Livingston. A couple days later I asked her out.Jessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of interviews with startup founders.When the bank had financial problems and she had to fire half her staff, she started looking for a new job. In early 2005 she interviewed for a marketing job at a Boston VC firm. It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital. They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.One of my tricks for writing essays had always been to give talks. The prospect of having to stand up in front of a group of people and tell them something that won&amp;rsquo;t waste their time is a great spur to the imagination. When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup. Maybe they&amp;rsquo;d be able to avoid the worst of the mistakes we&amp;rsquo;d made.So I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they&amp;rsquo;d be sources of advice too. Whereupon it seemed they were all looking expectantly at me. Horrified at the prospect of having my inbox flooded by business plans (if I&amp;rsquo;d only known), I blurted out &amp;ldquo;But not me!&amp;rdquo; and went on with the talk. But afterward it occurred to me that I should really stop procrastinating about angel investing. I&amp;rsquo;d been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn&amp;rsquo;t done one angel investment.Meanwhile I had been scheming with Robert and Trevor about projects we could work on together. I missed working with them, and it seemed like there had to be something we could collaborate on.As Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged. Screw the VCs who were taking so long to make up their minds. We&amp;rsquo;d start our own investment firm and actually implement the ideas we&amp;rsquo;d been talking about. I&amp;rsquo;d fund it, and Jessica could quit her job and work for it, and we&amp;rsquo;d get Robert and Trevor as partners too. [13]Once again, ignorance worked in our favor. We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from. So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.There are multiple components to Y Combinator, and we didn&amp;rsquo;t figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn&amp;rsquo;t go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we&amp;rsquo;d been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company. We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that? Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.YC was not organized as a fund. It was cheap enough to run that we funded it with our own money. That went right by 99% of readers, but professional investors are thinking &amp;ldquo;Wow, that means they got all the returns.&amp;rdquo; But once again, this was not due to any particular insight on our part. We didn&amp;rsquo;t know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn&amp;rsquo;t have known where to start. [14]The most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them. That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing. We needed to get experience as investors. What better way, we thought, than to fund a whole bunch of startups at once? We knew undergrads got temporary jobs at tech companies during the summer. Why not organize a summer program where they&amp;rsquo;d start startups instead? We wouldn&amp;rsquo;t feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders. So while we probably wouldn&amp;rsquo;t make much money out of it, we&amp;rsquo;d at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.We&amp;rsquo;d use the building I owned in Cambridge as our headquarters. We&amp;rsquo;d all have dinner there once a week  on tuesdays, since I was already cooking for the thursday diners on thursdays  and after dinner we&amp;rsquo;d bring in experts on startups to give talks.We knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply. I had never imagined that writing essays would be a way to get &amp;ldquo;deal flow,&amp;rdquo; as investors call it, but it turned out to be the perfect source. [15] We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who&amp;rsquo;d already graduated, or were about to that spring. Already this SFP thing was starting to feel more serious than we&amp;rsquo;d intended.We invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund. They were an impressive group. That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC. I don&amp;rsquo;t think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.The deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. [16]Fairly quickly I realized that we had stumbled upon the way to scale startup funding. Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too. It solved one of the biggest problems faced by founders: the isolation. Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.As YC grew, we started to notice other advantages of scale. The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in. We also noticed that the startups were becoming one another&amp;rsquo;s customers. We used to refer jokingly to the &amp;ldquo;YC GDP,&amp;rdquo; but as YC grows this becomes less and less of a joke. Now lots of startups get their initial set of customers almost entirely from among their batchmates.I had not originally intended YC to be a full-time job. I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.In the summer of 2006, Robert and I started working on a new version of Arc. This one was reasonably fast, because it was compiled into Scheme. To test this new Arc, I wrote Hacker News in it. It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups. Plus it wasn&amp;rsquo;t startup founders we wanted to reach. It was future startup founders. So I changed the name to Hacker News and the topic to whatever engaged one&amp;rsquo;s intellectual curiosity.HN was no doubt good for YC, but it was also by far the biggest source of stress for me. If all I&amp;rsquo;d had to do was select and help founders, life would have been so easy. And that implies that HN was a mistake. Surely the biggest source of stress in one&amp;rsquo;s work should at least be something close to the core of the work. Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe. When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined. [17]As well as HN, I wrote all of YC&amp;rsquo;s internal software in Arc. But while I continued to work a good deal in Arc, I gradually stopped working on Arc, partly because I didn&amp;rsquo;t have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it. So now my three projects were reduced to two: writing essays and working on YC.YC was different from other kinds of work I&amp;rsquo;ve done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn&amp;rsquo;t have picked a better way to do it.There were parts of the job I didn&amp;rsquo;t like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn&amp;rsquo;t like. I was haunted by something Kevin Hale once said about companies: &amp;ldquo;No one works harder than the boss.&amp;rdquo; He meant it both descriptively and prescriptively, and it was the second part that scared me. I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I&amp;rsquo;d better work very hard.One day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice. I can only remember him doing that once before. One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital. That was what it took for Rtm to offer unsolicited advice. So I remember his exact words very clearly. &amp;ldquo;You know,&amp;rdquo; he said, &amp;ldquo;you should make sure Y Combinator isn&amp;rsquo;t the last cool thing you do.&amp;ldquo;At the time I didn&amp;rsquo;t understand what he meant, but gradually it dawned on me that he was saying I should quit. This seemed strange advice, because YC was doing great. But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong. So this set me thinking. It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention. It had already eaten Arc, and was in the process of eating essays too. Either YC was my life&amp;rsquo;s work or I&amp;rsquo;d have to leave eventually. And it wasn&amp;rsquo;t, so I would.In the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer. The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it. I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights. On one of them I realized I was ready to hand YC over to someone else.I asked Jessica if she wanted to be president, but she didn&amp;rsquo;t, so we decided we&amp;rsquo;d try to recruit Sam Altman. We talked to Robert and Trevor and we agreed to make it a complete changing of the guard. Up till that point YC had been controlled by the original LLC we four had started. But we wanted YC to last for a long time, and to do that it couldn&amp;rsquo;t be controlled by the founders. So if Sam said yes, we&amp;rsquo;d let him reorganize YC. Robert and I would retire, and Jessica and Trevor would become ordinary partners.When we asked Sam if he wanted to be president of YC, initially he said no. He wanted to start a startup to make nuclear reactors. But I kept at it, and in October 2013 he finally agreed. We decided he&amp;rsquo;d take over starting with the winter 2014 batch. For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.She died on January 15, 2014. We knew this was coming, but it was still hard when it did.I kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I&amp;rsquo;m interested in, but that only takes a few hours a week.)What should I do next? Rtm&amp;rsquo;s advice hadn&amp;rsquo;t included anything about that. I wanted to do something completely different, so I decided I&amp;rsquo;d paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting. I was rusty and it took a while to get back into shape, but it was at least completely engaging. [18]I spent most of the rest of 2014 painting. I&amp;rsquo;d never been able to work so uninterruptedly before, and I got to be better than I had been. Not good enough, but better. Then in November, right in the middle of a painting, I ran out of steam. Up till that point I&amp;rsquo;d always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore. So I stopped working on it and cleaned my brushes and haven&amp;rsquo;t painted since. So far anyway.I realize that sounds rather wimpy. But attention is a zero sum game. If you can choose what to work on, and you choose a project that&amp;rsquo;s not the best one (or at least a good one) for you, then it&amp;rsquo;s getting in the way of another project that is. And at 50 there was some opportunity cost to screwing around.I started writing essays again, and wrote a bunch of new ones over the next few months. I even wrote a couple that weren&amp;rsquo;t about startups. Then in March 2015 I started working on Lisp again.The distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself. It wasn&amp;rsquo;t originally intended as a programming language in the ordinary sense. It was meant to be a formal model of computation, an alternative to the Turing machine. If you want to write an interpreter for a language in itself, what&amp;rsquo;s the minimum set of predefined operators you need? The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. [19]McCarthy didn&amp;rsquo;t realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy&amp;rsquo;s interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn&amp;rsquo;t match. It was this that attracted me in college, though I didn&amp;rsquo;t understand why at the time.McCarthy&amp;rsquo;s 1960 Lisp did nothing more than interpret Lisp expressions. It was missing a lot of things you&amp;rsquo;d want in a programming language. So these had to be added, and when they were, they weren&amp;rsquo;t defined using McCarthy&amp;rsquo;s original axiomatic approach. That wouldn&amp;rsquo;t have been feasible at the time. McCarthy tested his interpreter by hand-simulating the execution of programs. But it was already getting close to the limit of interpreters you could test that way  indeed, there was a bug in it that McCarthy had overlooked. To test a more complicated interpreter, you&amp;rsquo;d have had to run it, and computers then weren&amp;rsquo;t powerful enough.Now they are, though. Now you could continue using McCarthy&amp;rsquo;s axiomatic approach till you&amp;rsquo;d defined a complete programming language. And as long as every change you made to McCarthy&amp;rsquo;s Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.I wrote this new Lisp, called Bel, in itself in Arc. That may sound like a contradiction, but it&amp;rsquo;s an indication of the sort of trickery I had to engage in to make this work. By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run. Not fast, but fast enough to test.I had to ban myself from writing essays during most of this time, or I&amp;rsquo;d never have finished. In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code. Not so much because it was badly written as because the problem is so convoluted. When you&amp;rsquo;re working on an interpreter written in itself, it&amp;rsquo;s hard to keep track of what&amp;rsquo;s happening at what level, and errors can be practically encrypted by the time you get them.So I said no more essays till Bel was done. But I told few people about Bel while I was working on it. So for years it must have seemed that I was doing nothing, when in fact I was working harder than I&amp;rsquo;d ever worked on anything. Occasionally after wrestling for hours with some gruesome bug I&amp;rsquo;d check Twitter or HN and see someone asking &amp;ldquo;Does Paul Graham still code?&amp;ldquo;Working on Bel was hard but satisfying. I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there. I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools. It felt like I was doing life right. I remember that because I was slightly dismayed at how novel it felt. The good news is that I had more moments like this over the next few years.In the summer of 2016 we moved to England. We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice. We only meant to stay for a year, but we liked it so much that we still live there. So most of Bel was written in England.In the fall of 2019, Bel was finally finished. Like McCarthy&amp;rsquo;s original Lisp, it&amp;rsquo;s a spec rather than an implementation, although like McCarthy&amp;rsquo;s Lisp it&amp;rsquo;s a spec expressed as code.Now that I could write essays again, I wrote a bunch about topics I&amp;rsquo;d had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past? I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be. If this surprised me, who&amp;rsquo;d lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives. So I wrote a more detailed version for others to read, and this is the last sentence of it. Notes[1] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.[2] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like polluzione). It&amp;rsquo;s the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.[3] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco. I saw Florence at street level in every possible condition, from empty dark winter evenings to sweltering summer days when the streets were packed with tourists.[4] You can of course paint people like still lives if you want to, and they&amp;rsquo;re willing. That sort of portrait is arguably the apex of still life painting, though the long sitting does tend to produce pained expressions in the sitters.[5] Interleaf was one of many companies that had smart people and built impressive technology, and yet got crushed by Moore&amp;rsquo;s Law. In the 1990s the exponential growth in the power of commodity (i.e. Intel) processors rolled up high-end, special-purpose hardware and software companies like a bulldozer.[6] The signature style seekers at RISD weren&amp;rsquo;t specifically mercenary. In the art world, money and coolness are tightly coupled. Anything expensive comes to be seen as cool, and anything seen as cool will soon become equally expensive.[7] Technically the apartment wasn&amp;rsquo;t rent-controlled but rent-stabilized, but this is a refinement only New Yorkers would know or care about. The point is that it was really cheap, less than half market price.[8] Most software you can launch as soon as it&amp;rsquo;s done. But when the software is an online store builder and you&amp;rsquo;re hosting the stores, if you don&amp;rsquo;t have any users yet, that fact will be painfully obvious. So before we could launch publicly we had to launch privately, in the sense of recruiting an initial set of users and making sure they had decent-looking stores.[9] We&amp;rsquo;d had a code editor in Viaweb for users to define their own page styles. They didn&amp;rsquo;t know it, but they were editing Lisp expressions underneath. But this wasn&amp;rsquo;t an app editor, because the code ran when the merchants&amp;rsquo; sites were generated, not when shoppers visited them.[10] This was the first instance of what is now a familiar experience, and so was what happened next, when I read the comments and found they were full of angry people. How could I claim that Lisp was better than other languages? Weren&amp;rsquo;t they all Turing complete? People who see the responses to essays I write sometimes tell me how sorry they feel for me, but I&amp;rsquo;m not exaggerating when I reply that it has always been like this, since the very beginning. It comes with the territory. An essay must tell readers things they don&amp;rsquo;t already know, and some people dislike being told such things.[11] People put plenty of stuff on the internet in the 90s of course, but putting something online is not the same as publishing it online. Publishing online means you treat the online version as the (or at least a) primary version.[12] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints. Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs&amp;rsquo; customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.Which in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).Here&amp;rsquo;s an interesting point, though: you can&amp;rsquo;t always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?[13] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn&amp;rsquo;t want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.I picked orange as our color partly because it&amp;rsquo;s the warmest, and partly because no VC used it. In 2005 all the VCs used staid colors like maroon, navy blue, and forest green, because they were trying to appeal to LPs, not founders. The YC logo itself is an inside joke: the Viaweb logo had been a white V on a red circle, so I made the YC logo a white Y on an orange square.[14] YC did become a fund for a couple years starting in 2009, because it was getting so big I could no longer afford to fund it personally. But after Heroku got bought we had enough money to go back to being self-funded.[15] I&amp;rsquo;ve never liked the term &amp;ldquo;deal flow,&amp;rdquo; because it implies that the number of new startups at any given time is fixed. This is not only false, but it&amp;rsquo;s the purpose of YC to falsify it, by causing startups to be founded that would not otherwise have existed.[16] She reports that they were all different shapes and sizes, because there was a run on air conditioners and she had to get whatever she could, but that they were all heavier than she could carry now.[17] Another problem with HN was a bizarre edge case that occurs when you both write essays and run a forum. When you run a forum, you&amp;rsquo;re assumed to see if not every conversation, at least every conversation involving you. And when you write essays, people post highly imaginative misinterpretations of them on forums. Individually these two phenomena are tedious but bearable, but the combination is disastrous. You actually have to respond to the misinterpretations, because the assumption that you&amp;rsquo;re present in the conversation means that not responding to any sufficiently upvoted misinterpretation reads as a tacit admission that it&amp;rsquo;s correct. But that in turn encourages more; anyone who wants to pick a fight with you senses that now is their chance.[18] The worst thing about leaving YC was not working with Jessica anymore. We&amp;rsquo;d been working on YC almost the whole time we&amp;rsquo;d known each other, and we&amp;rsquo;d neither tried nor wanted to separate it from our personal lives, so leaving was like pulling up a deeply rooted tree.[19] One way to get more precise about the concept of invented vs discovered is to talk about space aliens. Any sufficiently advanced alien civilization would certainly know about the Pythagorean theorem, for example. I believe, though with less certainty, that they would also know about the Lisp in McCarthy&amp;rsquo;s 1960 paper.But if so there&amp;rsquo;s no reason to suppose that this is the limit of the language that might be known to them. Presumably aliens need numbers and errors and I/O too. So it seems likely there exists at least one path out of McCarthy&amp;rsquo;s Lisp along which discoveredness is preserved.Thanks to Trevor Blackwell, John Collison, Patrick Collison, Daniel Gackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj Taggar for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/writes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/writes/</guid>
      <description>&lt;h1 id=&#34;writes&#34;&gt;Writes&lt;/h1&gt;&#xA;&lt;p&gt;Writes and Write-Nots October 2024I&amp;rsquo;m usually reluctant to make predictions about technology, but I feel fairly confident about this one: in a couple decades there won&amp;rsquo;t be many people who can write.One of the strangest things you learn if you&amp;rsquo;re a writer is how many people have trouble writing. Doctors know how many people have a mole they&amp;rsquo;re worried about; people who are good at setting up computers know how many people aren&amp;rsquo;t; writers know how many people need help writing.The reason so many people have trouble writing is that it&amp;rsquo;s fundamentally difficult. To write well you have to think clearly, and thinking clearly is hard.And yet writing pervades many jobs, and the more prestigious the job, the more writing it tends to require.These two powerful opposing forces, the pervasive expectation of writing and the irreducible difficulty of doing it, create enormous pressure. This is why eminent professors often turn out to have resorted to plagiarism. The most striking thing to me about these cases is the pettiness of the thefts. The stuff they steal is usually the most mundane boilerplate — the sort of thing that anyone who was even halfway decent at writing could turn out with no effort at all. Which means they&amp;rsquo;re not even halfway decent at writing.Till recently there was no convenient escape valve for the pressure created by these opposing forces. You could pay someone to write for you, like JFK, or plagiarize, like MLK, but if you couldn&amp;rsquo;t buy or steal words, you had to write them yourself. And as a result nearly everyone who was expected to write had to learn how.Not anymore. AI has blown this world open. Almost all pressure to write has dissipated. You can have AI do it for you, both in school and at work.The result will be a world divided into writes and write-nots. There will still be some people who can write. Some of us like it. But the middle ground between those who are good at writing and those who can&amp;rsquo;t write at all will disappear. Instead of good writers, ok writers, and people who can&amp;rsquo;t write, there will just be good writers and people who can&amp;rsquo;t write.Is that so bad? Isn&amp;rsquo;t it common for skills to disappear when technology makes them obsolete? There aren&amp;rsquo;t many blacksmiths left, and it doesn&amp;rsquo;t seem to be a problem.Yes, it&amp;rsquo;s bad. The reason is something I mentioned earlier: writing is thinking. In fact there&amp;rsquo;s a kind of thinking that can only be done by writing. You can&amp;rsquo;t make this point better than Leslie Lamport did: If you&amp;rsquo;re thinking without writing, you only think you&amp;rsquo;re thinking. So a world divided into writes and write-nots is more dangerous than it sounds. It will be a world of thinks and think-nots. I know which half I want to be in, and I bet you do too.This situation is not unprecedented. In preindustrial times most people&amp;rsquo;s jobs made them strong. Now if you want to be strong, you work out. So there are still strong people, but only those who choose to be.It will be the same with writing. There will still be smart people, but only those who choose to be.Thanks to Jessica Livingston, Ben Miller, and Robert Morris for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/writing44/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/writing44/</guid>
      <description>&lt;h1 id=&#34;writing44&#34;&gt;Writing44&lt;/h1&gt;&#xA;&lt;p&gt;Writing, Briefly March 2005 (In the process of answering an email, I accidentally wrote a tiny essay about writing. I usually spend weeks on an essay. This one took 67 minutes—23 of writing, and 44 of rewriting.)I think it&amp;rsquo;s far more important to write well than most people realize. Writing doesn&amp;rsquo;t just communicate ideas; it generates them. If you&amp;rsquo;re bad at writing and don&amp;rsquo;t like to do it, you&amp;rsquo;ll miss out on most of the ideas writing would have generated.As for how to write well, here&amp;rsquo;s the short version: Write a bad version 1 as fast as you can; rewrite it over and over; cut out everything unnecessary; write in a conversational tone; develop a nose for bad writing, so you can see and fix it in yours; imitate writers you like; if you can&amp;rsquo;t get started, tell someone what you plan to write about, then write down what you said; expect 80% of the ideas in an essay to happen after you start writing it, and 50% of those you start with to be wrong; be confident enough to cut; have friends you trust read your stuff and tell you which bits are confusing or drag; don&amp;rsquo;t (always) make detailed outlines; mull ideas over for a few days before writing; carry a small notebook or scrap paper with you; start writing when you think of the first sentence; if a deadline forces you to start before that, just say the most important sentence first; write about stuff you like; don&amp;rsquo;t try to sound impressive; don&amp;rsquo;t hesitate to change the topic on the fly; use footnotes to contain digressions; use anaphora to knit sentences together; read your essays out loud to see (a) where you stumble over awkward phrases and (b) which bits are boring (the paragraphs you dread reading); try to tell the reader something new and useful; work in fairly big quanta of time; when you restart, begin by rereading what you have so far; when you finish, leave yourself something easy to start with; accumulate notes for topics you plan to cover at the bottom of the file; don&amp;rsquo;t feel obliged to cover any of them; write for a reader who won&amp;rsquo;t read the essay as carefully as you do, just as pop songs are designed to sound ok on crappy car radios; if you say anything mistaken, fix it immediately; ask friends which sentence you&amp;rsquo;ll regret most; go back and tone down harsh remarks; publish stuff online, because an audience makes you write more, and thus generate more ideas; print out drafts instead of just looking at them on the screen; use simple, germanic words; learn to distinguish surprises from digressions; learn to recognize the approach of an ending, and when one appears, grab it.Russian TranslationJapanese TranslationRomanian TranslationSpanish TranslationGerman TranslationChinese TranslationHungarian TranslationCatalan TranslationDanish TranslationArabic Translation&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/wtax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/wtax/</guid>
      <description>&lt;h1 id=&#34;wtax&#34;&gt;Wtax&lt;/h1&gt;&#xA;&lt;p&gt;Modeling a Wealth Tax August 2020Some politicians are proposing to introduce wealth taxes in addition to income and capital gains taxes. Let&amp;rsquo;s try modeling the effects of various levels of wealth tax to see what they would mean in practice for a startup founder.Suppose you start a successful startup in your twenties, and then live for another 60 years. How much of your stock will a wealth tax consume?If the wealth tax applies to all your assets, it&amp;rsquo;s easy to calculate its effect. A wealth tax of 1% means you get to keep 99% of your stock each year. After 60 years the proportion of stock you&amp;rsquo;ll have left will be .99^60, or .547. So a straight 1% wealth tax means the government will over the course of your life take 45% of your stock.(Losing shares does not, obviously, mean becoming net poorer unless the value per share is increasing by less than the wealth tax rate.)Here&amp;rsquo;s how much stock the government would take over 60 years at various levels of wealth tax: wealth taxgovernment takes 0.1%6%0.5%26% 1.0%45% 2.0%70% 3.0%84% 4.0%91%5.0%95% A wealth tax will usually have a threshold at which it starts. How much difference would a high threshold make? To model that, we need to make some assumptions about the initial value of your stock and the growth rate.Suppose your stock is initially worth $2 million, and the company&amp;rsquo;s trajectory is as follows: the value of your stock grows 3x for 2 years, then 2x for 2 years, then 50% for 2 years, after which you just get a typical public company growth rate, which we&amp;rsquo;ll call 8%. [1] Suppose the wealth tax threshold is $50 million. How much stock does the government take now? wealth taxgovernment takes 0.1%5%0.5%23% 1.0%41% 2.0%65% 3.0%79% 4.0%88%5.0%93% It may at first seem surprising that such apparently small tax rates produce such dramatic effects. A 2% wealth tax with a $50 million threshold takes about two thirds of a successful founder&amp;rsquo;s stock.The reason wealth taxes have such dramatic effects is that they&amp;rsquo;re applied over and over to the same money. Income tax happens every year, but only to that year&amp;rsquo;s income. Whereas if you live for 60 years after acquiring some asset, a wealth tax will tax that same asset 60 times. A wealth tax compounds.Note[1] In practice, eventually some of this 8% would come in the form of dividends, which are taxed as income at issue, so this model actually represents the most optimistic case for the founder.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/yahoo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/yahoo/</guid>
      <description>&lt;h1 id=&#34;yahoo&#34;&gt;Yahoo&lt;/h1&gt;&#xA;&lt;p&gt;What Happened to Yahoo Want to start a startup? Get funded by Y Combinator. August 2010When I went to work for Yahoo after they bought our startup in 1998, it felt like the center of the world. It was supposed to be the next big thing. It was supposed to be what Google turned out to be.What went wrong? The problems that hosed Yahoo go back a long time, practically to the beginning of the company. They were already very visible when I got there in 1998. Yahoo had two problems Google didn&amp;rsquo;t: easy money, and ambivalence about being a technology company.MoneyThe first time I met Jerry Yang, we thought we were meeting for different reasons. He thought we were meeting so he could check us out in person before buying us. I thought we were meeting so we could show him our new technology, Revenue Loop. It was a way of sorting shopping search results. Merchants bid a percentage of sales for traffic, but the results were sorted not by the bid but by the bid times the average amount a user would buy. It was like the algorithm Google uses now to sort ads, but this was in the spring of 1998, before Google was founded.Revenue Loop was the optimal sort for shopping search, in the sense that it sorted in order of how much money Yahoo would make from each link. But it wasn&amp;rsquo;t just optimal in that sense. Ranking search results by user behavior also makes search better. Users train the search: you can start out finding matches based on mere textual similarity, and as users buy more stuff the search results get better and better.Jerry didn&amp;rsquo;t seem to care. I was confused. I was showing him technology that extracted the maximum value from search traffic, and he didn&amp;rsquo;t care? I couldn&amp;rsquo;t tell whether I was explaining it badly, or he was just very poker faced.I didn&amp;rsquo;t realize the answer till later, after I went to work at Yahoo. It was neither of my guesses. The reason Yahoo didn&amp;rsquo;t care about a technique that extracted the full value of traffic was that advertisers were already overpaying for it. If Yahoo merely extracted the actual value, they&amp;rsquo;d have made less.Hard as it is to believe now, the big money then was in banner ads. Advertisers were willing to pay ridiculous amounts for banner ads. So Yahoo&amp;rsquo;s sales force had evolved to exploit this source of revenue. Led by a large and terrifyingly formidable man called Anil Singh, Yahoo&amp;rsquo;s sales guys would fly out to Procter &amp;amp; Gamble and come back with million dollar orders for banner ad impressions.The prices seemed cheap compared to print, which was what advertisers, for lack of any other reference, compared them to. But they were expensive compared to what they were worth. So these big, dumb companies were a dangerous source of revenue to depend on. But there was another source even more dangerous: other Internet startups.By 1998, Yahoo was the beneficiary of a de facto Ponzi scheme. Investors were excited about the Internet. One reason they were excited was Yahoo&amp;rsquo;s revenue growth. So they invested in new Internet startups. The startups then used the money to buy ads on Yahoo to get traffic. Which caused yet more revenue growth for Yahoo, and further convinced investors the Internet was worth investing in. When I realized this one day, sitting in my cubicle, I jumped up like Archimedes in his bathtub, except instead of &amp;ldquo;Eureka!&amp;rdquo; I was shouting &amp;ldquo;Sell!&amp;ldquo;Both the Internet startups and the Procter &amp;amp; Gambles were doing brand advertising. They didn&amp;rsquo;t care about targeting. They just wanted lots of people to see their ads. So traffic became the thing to get at Yahoo. It didn&amp;rsquo;t matter what type. [1]It wasn&amp;rsquo;t just Yahoo. All the search engines were doing it. This was why they were trying to get people to start calling them &amp;ldquo;portals&amp;rdquo; instead of &amp;ldquo;search engines.&amp;rdquo; Despite the actual meaning of the word portal, what they meant by it was a site where users would find what they wanted on the site itself, instead of just passing through on their way to other destinations, as they did at a search engine.I remember telling David Filo in late 1998 or early 1999 that Yahoo should buy Google, because I and most of the other programmers in the company were using it instead of Yahoo for search. He told me that it wasn&amp;rsquo;t worth worrying about. Search was only 6% of our traffic, and we were growing at 10% a month. It wasn&amp;rsquo;t worth doing better.I didn&amp;rsquo;t say &amp;ldquo;But search traffic is worth more than other traffic!&amp;rdquo; I said &amp;ldquo;Oh, ok.&amp;rdquo; Because I didn&amp;rsquo;t realize either how much search traffic was worth. I&amp;rsquo;m not sure even Larry and Sergey did then. If they had, Google presumably wouldn&amp;rsquo;t have expended any effort on enterprise search.If circumstances had been different, the people running Yahoo might have realized sooner how important search was. But they had the most opaque obstacle in the world between them and the truth: money. As long as customers were writing big checks for banner ads, it was hard to take search seriously. Google didn&amp;rsquo;t have that to distract them.HackersBut Yahoo also had another problem that made it hard to change directions. They&amp;rsquo;d been thrown off balance from the start by their ambivalence about being a technology company.One of the weirdest things about Yahoo when I went to work there was the way they insisted on calling themselves a &amp;ldquo;media company.&amp;rdquo; If you walked around their offices, it seemed like a software company. The cubicles were full of programmers writing code, product managers thinking about feature lists and ship dates, support people (yes, there were actually support people) telling users to restart their browsers, and so on, just like a software company. So why did they call themselves a media company?One reason was the way they made money: by selling ads. In 1995 it was hard to imagine a technology company making money that way. Technology companies made money by selling their software to users. Media companies sold ads. So they must be a media company.Another big factor was the fear of Microsoft. If anyone at Yahoo considered the idea that they should be a technology company, the next thought would have been that Microsoft would crush them.It&amp;rsquo;s hard for anyone much younger than me to understand the fear Microsoft still inspired in 1995. Imagine a company with several times the power Google has now, but way meaner. It was perfectly reasonable to be afraid of them. Yahoo watched them crush the first hot Internet company, Netscape. It was reasonable to worry that if they tried to be the next Netscape, they&amp;rsquo;d suffer the same fate. How were they to know that Netscape would turn out to be Microsoft&amp;rsquo;s last victim?It would have been a clever move to pretend to be a media company to throw Microsoft off their scent. But unfortunately Yahoo actually tried to be one, sort of. Project managers at Yahoo were called &amp;ldquo;producers,&amp;rdquo; for example, and the different parts of the company were called &amp;ldquo;properties.&amp;rdquo; But what Yahoo really needed to be was a technology company, and by trying to be something else, they ended up being something that was neither here nor there. That&amp;rsquo;s why Yahoo as a company has never had a sharply defined identity.The worst consequence of trying to be a media company was that they didn&amp;rsquo;t take programming seriously enough. Microsoft (back in the day), Google, and Facebook have all had hacker-centric cultures. But Yahoo treated programming as a commodity. At Yahoo, user-facing software was controlled by product managers and designers. The job of programmers was just to take the work of the product managers and designers the final step, by translating it into code.One obvious result of this practice was that when Yahoo built things, they often weren&amp;rsquo;t very good. But that wasn&amp;rsquo;t the worst problem. The worst problem was that they hired bad programmers.Microsoft (back in the day), Google, and Facebook have all been obsessed with hiring the best programmers. Yahoo wasn&amp;rsquo;t. They preferred good programmers to bad ones, but they didn&amp;rsquo;t have the kind of single-minded, almost obnoxiously elitist focus on hiring the smartest people that the big winners have had. And when you consider how much competition there was for programmers when they were hiring, during the Bubble, it&amp;rsquo;s not surprising that the quality of their programmers was uneven.In technology, once you have bad programmers, you&amp;rsquo;re doomed. I can&amp;rsquo;t think of an instance where a company has sunk into technical mediocrity and recovered. Good programmers want to work with other good programmers. So once the quality of programmers at your company starts to drop, you enter a death spiral from which there is no recovery. [2]At Yahoo this death spiral started early. If there was ever a time when Yahoo was a Google-style talent magnet, it was over by the time I got there in 1998.The company felt prematurely old. Most technology companies eventually get taken over by suits and middle managers. At Yahoo it felt as if they&amp;rsquo;d deliberately accelerated this process. They didn&amp;rsquo;t want to be a bunch of hackers. They wanted to be suits. A media company should be run by suits.The first time I visited Google, they had about 500 people, the same number Yahoo had when I went to work there. But boy did things seem different. It was still very much a hacker-centric culture. I remember talking to some programmers in the cafeteria about the problem of gaming search results (now known as SEO), and they asked &amp;ldquo;what should we do?&amp;rdquo; Programmers at Yahoo wouldn&amp;rsquo;t have asked that. Theirs was not to reason why; theirs was to build what product managers spec&amp;rsquo;d. I remember coming away from Google thinking &amp;ldquo;Wow, it&amp;rsquo;s still a startup.&amp;ldquo;There&amp;rsquo;s not much we can learn from Yahoo&amp;rsquo;s first fatal flaw. It&amp;rsquo;s probably too much to hope any company could avoid being damaged by depending on a bogus source of revenue. But startups can learn an important lesson from the second one. In the software business, you can&amp;rsquo;t afford not to have a hacker-centric culture.Probably the most impressive commitment I&amp;rsquo;ve heard to having a hacker-centric culture came from Mark Zuckerberg, when he spoke at Startup School in 2007. He said that in the early days Facebook made a point of hiring programmers even for jobs that would not ordinarily consist of programming, like HR and marketing.So which companies need to have a hacker-centric culture? Which companies are &amp;ldquo;in the software business&amp;rdquo; in this respect? As Yahoo discovered, the area covered by this rule is bigger than most people realize. The answer is: any company that needs to have good software.Why would great programmers want to work for a company that didn&amp;rsquo;t have a hacker-centric culture, as long as there were others that did? I can imagine two reasons: if they were paid a huge amount, or if the domain was interesting and none of the companies in it were hacker-centric. Otherwise you can&amp;rsquo;t attract good programmers to work in a suit-centric culture. And without good programmers you won&amp;rsquo;t get good software, no matter how many people you put on a task, or how many procedures you establish to ensure &amp;ldquo;quality.&amp;ldquo;Hacker culture often seems kind of irresponsible. That&amp;rsquo;s why people proposing to destroy it use phrases like &amp;ldquo;adult supervision.&amp;rdquo; That was the phrase they used at Yahoo. But there are worse things than seeming irresponsible. Losing, for example. Notes[1] The closest we got to targeting when I was there was when we created pets.yahoo.com in order to provoke a bidding war between 3 pet supply startups for the spot as top sponsor.[2] In theory you could beat the death spiral by buying good programmers instead of hiring them. You can get programmers who would never have come to you as employees by buying their startups. But so far the only companies smart enough to do this are companies smart enough not to need to.Thanks to Trevor Blackwell, Jessica Livingston, and Geoff Ralston for reading drafts of this.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/ycombinator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ycombinator/</guid>
      <description>&lt;h1 id=&#34;ycombinator&#34;&gt;Ycombinator&lt;/h1&gt;&#xA;&lt;p&gt;A New Venture Animal March 2008, rev May 2013(This essay grew out of something I wrote for myself to figure out what we do. Even though Y Combinator is now 3 years old, we&amp;rsquo;re still trying to understand its implications.) I was annoyed recently to read a description of Y Combinator that said &amp;ldquo;Y Combinator does seed funding for startups.&amp;rdquo; What was especially annoying about it was that I wrote it. This doesn&amp;rsquo;t really convey what we do. And the reason it&amp;rsquo;s inaccurate is that, paradoxically, funding very early stage startups is not mainly about funding.Saying YC does seed funding for startups is a description in terms of earlier models. It&amp;rsquo;s like calling a car a horseless carriage.When you scale animals you can&amp;rsquo;t just keep everything in proportion. For example, volume grows as the cube of linear dimension, but surface area only as the square. So as animals get bigger they have trouble radiating heat. That&amp;rsquo;s why mice and rabbits are furry and elephants and hippos aren&amp;rsquo;t. You can&amp;rsquo;t make a mouse by scaling down an elephant.YC represents a new, smaller kind of animal—so much smaller that all the rules are different.Before us, most companies in the startup funding business were venture capital funds. VCs generally fund later stage companies than we do. And they supply so much money that, even though the other things they do may be very valuable, it&amp;rsquo;s not that inaccurate to regard VCs as sources of money. Good VCs are &amp;ldquo;smart money,&amp;rdquo; but they&amp;rsquo;re still money.All good investors supply a combination of money and help. But these scale differently, just as volume and surface area do. Late stage investors supply huge amounts of money and comparatively little help: when a company about to go public gets a mezzanine round of $50 million, the deal tends to be almost entirely about money. As you move earlier in the venture funding process, the ratio of help to money increases, because earlier stage companies have different needs. Early stage companies need less money because they&amp;rsquo;re smaller and cheaper to run, but they need more help because life is so precarious for them. So when VCs do a series A round for, say, $2 million, they generally expect to offer a significant amount of help along with the money.Y Combinator occupies the earliest end of the spectrum. We&amp;rsquo;re at least one and generally two steps before VC funding. (Though some startups go straight from YC to VC, the most common trajectory is to do an angel round first.) And what happens at Y Combinator is as different from what happens in a series A round as a series A round is from a mezzanine financing.At our end, money is almost a negligible factor. The startup usually consists of just the founders. Their living expenses are the company&amp;rsquo;s main expense, and since most founders are under 30, their living expenses are low. But at this early stage companies need a lot of help. Practically every question is still unanswered. Some companies we&amp;rsquo;ve funded have been working on their software for a year or more, but others haven&amp;rsquo;t decided what to work on, or even who the founders should be.When PR people and journalists recount the histories of startups after they&amp;rsquo;ve become big, they always underestimate how uncertain things were at first. They&amp;rsquo;re not being deliberately misleading. When you look at a company like Google, it&amp;rsquo;s hard to imagine they could once have been small and helpless. Sure, at one point they were a just a couple guys in a garage—but even then their greatness was assured, and all they had to do was roll forward along the railroad tracks of destiny.Far from it. A lot of startups with just as promising beginnings end up failing. Google has such momentum now that it would be hard for anyone to stop them. But all it would have taken in the beginning would have been for two Google employees to focus on the wrong things for six months, and the company could have died.We know, because we&amp;rsquo;ve been there, just how vulnerable startups are in the earliest phases. Curiously enough, that&amp;rsquo;s why founders tend to get so rich from them. Reward is always proportionate to risk, and very early stage startups are insanely risky.What we really do at Y Combinator is get startups launched straight. One of many metaphors you could use for YC is a steam catapult on an aircraft carrier. We get startups airborne. Barely airborne, but enough that they can accelerate fast.When you&amp;rsquo;re launching planes they have to be set up properly or you&amp;rsquo;re just launching projectiles. They have to be pointed straight down the deck; the wings have to be trimmed properly; the engines have to be at full power; the pilot has to be ready. These are the kind of problems we deal with. After we fund startups we work closely with them for three months—so closely in fact that we insist they move to where we are. And what we do in those three months is make sure everything is set up for launch. If there are tensions between cofounders we help sort them out. We get all the paperwork set up properly so there are no nasty surprises later. If the founders aren&amp;rsquo;t sure what to focus on first, we try to figure that out. If there is some obstacle right in front of them, we either try to remove it, or shift the startup sideways. The goal is to get every distraction out of the way so the founders can use that time to build (or finish building) something impressive. And then near the end of the three months we push the button on the steam catapult in the form of Demo Day, where the current group of startups present to pretty much every investor in Silicon Valley.Launching companies isn&amp;rsquo;t identical with launching products. Though we do spend a lot of time on launch strategies for products, there are some things that take too long to build for a startup to launch them before raising their next round of funding. Several of the most promising startups we&amp;rsquo;ve funded haven&amp;rsquo;t launched their products yet, but are definitely launched as companies.In the earliest stage, startups not only have more questions to answer, but they tend to be different kinds of questions. In later stage startups the questions are about deals, or hiring, or organization. In the earliest phase they tend to be about technology and design. What do you make? That&amp;rsquo;s the first problem to solve. That&amp;rsquo;s why our motto is &amp;ldquo;Make something people want.&amp;rdquo; This is always a good thing for companies to do, but it&amp;rsquo;s even more important early on, because it sets the bounds for every other question. Who you hire, how much money you raise, how you market yourself—they all depend on what you&amp;rsquo;re making.Because the early problems are so much about technology and design, you probably need to be hackers to do what we do. While some VCs have technical backgrounds, I don&amp;rsquo;t know any who still write code. Their expertise is mostly in business—as it should be, because that&amp;rsquo;s the kind of expertise you need in the phase between series A and (if you&amp;rsquo;re lucky) IPO.We&amp;rsquo;re so different from VCs that we&amp;rsquo;re really a different kind of animal. Can we claim founders are better off as a result of this new type of venture firm? I&amp;rsquo;m pretty sure the answer is yes, because YC is an improved version of what happened to our startup, and our case was not atypical. We started Viaweb with $10,000 in seed money from our friend Julian. He was a lawyer and arranged all our paperwork, so we could just code. We spent three months building a version 1, which we then presented to investors to raise more money. Sounds familiar, doesn&amp;rsquo;t it? But YC improves on that significantly. Julian knew a lot about law and business, but his advice ended there; he was not a startup guy. So we made some basic mistakes early on. And when we presented to investors, we presented to only 2, because that was all we knew. If we&amp;rsquo;d had our later selves to encourage and advise us, and Demo Day to present at, we would have been in much better shape. We probably could have raised money at 3 to 5 times the valuation we did.If we take 7% of a company we fund, the founders only have to do 7.5% better in their next round of funding to end up net ahead. We certainly manage that.So who is our 7% coming out of? If the founders end up net ahead it&amp;rsquo;s not coming out of them. So is it coming out of later stage investors? Well, they do end up paying more. But I think they pay more because the company is actually more valuable. And later stage investors have no problem with that. The returns of a VC fund depend on the quality of the companies they invest in, not how cheaply they can buy stock in them.If what we do is useful, why wasn&amp;rsquo;t anyone doing it before? There are two answers to that. One is that people were doing it before, just haphazardly on a smaller scale. Before us, seed funding came primarily from individual angel investors. Larry and Sergey, for example, got their seed funding from Andy Bechtolsheim, one of the founders of Sun. And because he was a startup guy he probably gave them useful advice. But raising money from angel investors is a hit or miss thing. It&amp;rsquo;s a sideline for most of them, so they only do a handful of deals a year and they don&amp;rsquo;t spend a lot of time on the startups they invest in. And they&amp;rsquo;re hard to reach, because they don&amp;rsquo;t want random startups pestering them with business plans. The Google guys were lucky because they knew someone who knew Bechtolsheim. It generally takes a personal introduction with angels.The other reason no one was doing quite what we do is that till recently it was a lot more expensive to start a startup. You&amp;rsquo;ll notice we haven&amp;rsquo;t funded any biotech startups. That&amp;rsquo;s still expensive. But advancing technology has made web startups so cheap that you really can get a company airborne for $15,000. If you understand how to operate a steam catapult, at least.So in effect what&amp;rsquo;s happened is that a new ecological niche has opened up, and Y Combinator is the new kind of animal that has moved into it. We&amp;rsquo;re not a replacement for venture capital funds. We occupy a new, adjacent niche. And conditions in our niche are really quite different. It&amp;rsquo;s not just that the problems we face are different; the whole structure of the business is different. VCs are playing a zero-sum game. They&amp;rsquo;re all competing for a slice of a fixed amount of &amp;ldquo;deal flow,&amp;rdquo; and that explains a lot of their behavior. Whereas our m.o. is to create new deal flow, by encouraging hackers who would have gotten jobs to start their own startups instead. We compete more with employers than VCs.It&amp;rsquo;s not surprising something like this would happen. Most fields become more specialized—more articulated—as they develop, and startups are certainly an area in which there has been a lot of development over the past couple decades. The venture business in its present form is only about forty years old. It stands to reason it would evolve.And it&amp;rsquo;s natural that the new niche would at first be described, even by its inhabitants, in terms of the old one. But really Y Combinator is not in the startup funding business. Really we&amp;rsquo;re more of a small, furry steam catapult.Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris for reading drafts of this. Comment on this essay.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://linguage.github.io/paul_graham/essays_en/ycstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ycstart/</guid>
      <description>&lt;h1 id=&#34;ycstart&#34;&gt;Ycstart&lt;/h1&gt;&#xA;&lt;p&gt;How Y Combinator Started March 2012Y Combinator&amp;rsquo;s 7th birthday was March 11. As usual we were so busy we didn&amp;rsquo;t notice till a few days after. I don&amp;rsquo;t think we&amp;rsquo;ve ever managed to remember our birthday on our birthday. On March 11 2005, Jessica and I were walking home from dinner in Harvard Square. Jessica was working at an investment bank at the time, but she didn&amp;rsquo;t like it much, so she had interviewed for a job as director of marketing at a Boston VC fund. The VC fund was doing what now seems a comically familiar thing for a VC fund to do: taking a long time to make up their mind. Meanwhile I had been telling Jessica all the things they should change about the VC business  essentially the ideas now underlying Y Combinator: investors should be making more, smaller investments, they should be funding hackers instead of suits, they should be willing to fund younger founders, etc. At the time I had been thinking about doing some angel investing. I had just given a talk to the undergraduate computer club at Harvard about how to start a startup, and it hit me afterward that although I had always meant to do angel investing, 7 years had now passed since I got enough money to do it, and I still hadn&amp;rsquo;t started. I had also been thinking about ways to work with Robert Morris and Trevor Blackwell again. A few hours before I had sent them an email trying to figure out what we could do together. Between Harvard Square and my house the idea gelled. We&amp;rsquo;d start our own investment firm and Jessica could work for that instead. As we turned onto Walker Street we decided to do it. I agreed to put $100k into the new fund and Jessica agreed to quit her job to work for it. Over the next couple days I recruited Robert and Trevor, who put in another $50k each. So YC started with $200k. Jessica was so happy to be able to quit her job and start her own company that I took her picture when we got home. The company wasn&amp;rsquo;t called Y Combinator yet. At first we called it Cambridge Seed. But that name never saw the light of day, because by the time we announced it a few days later, we&amp;rsquo;d changed the name to Y Combinator. We realized early on that what we were doing could be national in scope and we didn&amp;rsquo;t want a name that tied us to one place. Initially we only had part of the idea. We were going to do seed funding with standardized terms. Before YC, seed funding was very haphazard. You&amp;rsquo;d get that first $10k from your friend&amp;rsquo;s rich uncle. The deal terms were often a disaster; often neither the investor nor the founders nor the lawyer knew what the documents should look like. Facebook&amp;rsquo;s early history as a Florida LLC shows how random things could be in those days. We were going to be something there had not been before: a standard source of seed funding. We modelled YC on the seed funding we ourselves had taken when we started Viaweb. We started Viaweb with $10k we got from our friend Julian Weber, the husband of Idelle Weber, whose painting class I took as a grad student at Harvard. Julian knew about business, but you would not describe him as a suit. Among other things he&amp;rsquo;d been president of the National Lampoon. He was also a lawyer, and got all our paperwork set up properly. In return for $10k, getting us set up as a company, teaching us what business was about, and remaining calm in times of crisis, Julian got 10% of Viaweb. I remember thinking once what a good deal Julian got. And then a second later I realized that without Julian, Viaweb would never have made it. So even though it was a good deal for him, it was a good deal for us too. That&amp;rsquo;s why I knew there was room for something like Y Combinator. Initially we didn&amp;rsquo;t have what turned out to be the most important idea: funding startups synchronously, instead of asynchronously as it had always been done before. Or rather we had the idea, but we didn&amp;rsquo;t realize its significance. We decided very early that the first thing we&amp;rsquo;d do would be to fund a bunch of startups over the coming summer. But we didn&amp;rsquo;t realize initially that this would be the way we&amp;rsquo;d do all our investing. The reason we began by funding a bunch of startups at once was not that we thought it would be a better way to fund startups, but simply because we wanted to learn how to be angel investors, and a summer program for undergrads seemed the fastest way to do it. No one takes summer jobs that seriously. The opportunity cost for a bunch of undergrads to spend a summer working on startups was low enough that we wouldn&amp;rsquo;t feel guilty encouraging them to do it. We knew students would already be making plans for the summer, so we did what we&amp;rsquo;re always telling startups to do: we launched fast. Here are the initial announcement and description of what was at the time called the Summer Founders Program. We got lucky in that the length and structure of a summer program turns out to be perfect for what we do. The structure of the YC cycle is still almost identical to what it was that first summer. We also got lucky in who the first batch of founders were. We never expected to make any money from that first batch. We thought of the money we were investing as a combination of an educational expense and a charitable donation. But the founders in the first batch turned out to be surprisingly good. And great people too. We&amp;rsquo;re still friends with a lot of them today. It&amp;rsquo;s hard for people to realize now how inconsequential YC seemed at the time. I can&amp;rsquo;t blame people who didn&amp;rsquo;t take us seriously, because we ourselves didn&amp;rsquo;t take that first summer program seriously in the very beginning. But as the summer progressed we were increasingly impressed by how well the startups were doing. Other people started to be impressed too. Jessica and I invented a term, &amp;ldquo;the Y Combinator effect,&amp;rdquo; to describe the moment when the realization hit someone that YC was not totally lame. When people came to YC to speak at the dinners that first summer, they came in the spirit of someone coming to address a Boy Scout troop. By the time they left the building they were all saying some variant of &amp;ldquo;Wow, these companies might actually succeed.&amp;rdquo; Now YC is well enough known that people are no longer surprised when the companies we fund are legit, but it took a while for reputation to catch up with reality. That&amp;rsquo;s one of the reasons we especially like funding ideas that might be dismissed as &amp;ldquo;toys&amp;rdquo;  because YC itself was dismissed as one initially. When we saw how well it worked to fund companies synchronously, we decided we&amp;rsquo;d keep doing that. We&amp;rsquo;d fund two batches of startups a year. We funded the second batch in Silicon Valley. That was a last minute decision. In retrospect I think what pushed me over the edge was going to Foo Camp that fall. The density of startup people in the Bay Area was so much greater than in Boston, and the weather was so nice. I remembered that from living there in the 90s. Plus I didn&amp;rsquo;t want someone else to copy us and describe it as the Y Combinator of Silicon Valley. I wanted YC to be the Y Combinator of Silicon Valley. So doing the winter batch in California seemed like one of those rare cases where the self-indulgent choice and the ambitious one were the same. If we&amp;rsquo;d had enough time to do what we wanted, Y Combinator would have been in Berkeley. That was our favorite part of the Bay Area. But we didn&amp;rsquo;t have time to get a building in Berkeley. We didn&amp;rsquo;t have time to get our own building anywhere. The only way to get enough space in time was to convince Trevor to let us take over part of his (as it then seemed) giant building in Mountain View. Yet again we lucked out, because Mountain View turned out to be the ideal place to put something like YC. But even then we barely made it. The first dinner in California, we had to warn all the founders not to touch the walls, because the paint was still wet.&lt;/p&gt;</description>
    </item>
    <item>
      <title>6,631,372</title>
      <link>https://linguage.github.io/paul_graham/essays_en/6631327/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/6631327/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/6631327.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;6631372&#34;&gt;6,631,372&lt;/h1&gt;&#xA;&lt;p&gt;6,631,372 March 2006, rev August 2009&lt;/p&gt;&#xA;&lt;p&gt;A couple days ago I found to my surprise that I&amp;rsquo;d been granted a patent. It issued in 2003, but no one told me. I wouldn&amp;rsquo;t know about it now except that a few months ago, while visiting Yahoo, I happened to run into a Big Cheese I knew from working there in the late nineties. He brought up something called Revenue Loop, which Viaweb had been working on when they bought us.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Fundraising Survival Guide</title>
      <link>https://linguage.github.io/paul_graham/essays_en/fundraising/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/fundraising/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/fundraising.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;a-fundraising-survival-guide&#34;&gt;A Fundraising Survival Guide&lt;/h1&gt;&#xA;&lt;p&gt;August 2008&lt;/p&gt;&#xA;&lt;p&gt;Raising money is the second hardest part of starting a startup. The hardest part is making something people want: most startups that die, die because they didn&amp;rsquo;t do that. But the second biggest cause of death is probably the difficulty of raising money. Fundraising is brutal.&lt;/p&gt;&#xA;&lt;p&gt;One reason it&amp;rsquo;s so brutal is simply the brutality of markets. People who&amp;rsquo;ve spent most of their lives in schools or big companies may not have been exposed to that. Professors and bosses usually feel some sense of responsibility toward you; if you make a valiant effort and fail, they&amp;rsquo;ll cut you a break. Markets are less forgiving. Customers don&amp;rsquo;t care how hard you worked, only whether you solved their problems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Local Revolution?</title>
      <link>https://linguage.github.io/paul_graham/essays_en/revolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/revolution/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/revolution.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;a-local-revolution&#34;&gt;A Local Revolution?&lt;/h1&gt;&#xA;&lt;p&gt;April 2009&lt;/p&gt;&#xA;&lt;p&gt;Recently I realized I&amp;rsquo;d been holding two ideas in my head that would explode if combined.&lt;/p&gt;&#xA;&lt;p&gt;The first is that startups may represent a new economic phase, on the scale of the Industrial Revolution. I&amp;rsquo;m not sure of this, but there seems a decent chance it&amp;rsquo;s true. People are dramatically more productive as founders or early employees of startups—imagine how much less Larry and Sergey would have achieved if they&amp;rsquo;d gone to work for a big company—and that scale of improvement can change social customs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Project of One&#39;s Own</title>
      <link>https://linguage.github.io/paul_graham/essays_en/own/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/own/</guid>
      <description>&lt;h1 id=&#34;a-project-of-ones-own&#34;&gt;A Project of One&amp;rsquo;s Own&lt;/h1&gt;&#xA;&lt;p&gt;June 2021&lt;/p&gt;&#xA;&lt;p&gt;A few days ago, on the way home from school, my nine year old son told me he couldn&amp;rsquo;t wait to get home to write more of the story he was working on. This made me as happy as anything I&amp;rsquo;ve heard him say — not just because he was excited about his story, but because he&amp;rsquo;d discovered this way of working. Working on a project of your own is as different from ordinary work as skating is from walking. It&amp;rsquo;s more fun, but also much more productive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Student&#39;s Guide to Startups</title>
      <link>https://linguage.github.io/paul_graham/essays_en/mit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/mit/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/mit.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;a-students-guide-to-startups&#34;&gt;A Student&amp;rsquo;s Guide to Startups&lt;/h1&gt;&#xA;&lt;p&gt;October 2006&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at MIT.)&lt;/p&gt;&#xA;&lt;p&gt;Till recently graduating seniors had two choices: get a job or go to grad school. I think there will increasingly be a third option: to start your own startup. But how common will that be?&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m sure the default will always be to get a job, but starting a startup could well become as popular as grad school. In the late 90s my professor friends used to complain that they couldn&amp;rsquo;t get grad students, because all the undergrads were going to work for startups. I wouldn&amp;rsquo;t be surprised if that situation returns, but with one difference: this time they&amp;rsquo;ll be starting their own instead of going to work for other people&amp;rsquo;s.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ace</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ace/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ace.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ace&#34;&gt;Ace&lt;/h1&gt;&#xA;&lt;p&gt;Ace December 2020&lt;/p&gt;&#xA;&lt;p&gt;As I was deciding what to write about next, I was surprised to find that two separate essays I&amp;rsquo;d been planning to write were actually the same.&lt;/p&gt;&#xA;&lt;p&gt;The first is about how to ace your Y Combinator interview. There has been so much nonsense written about this topic that I&amp;rsquo;ve been meaning for years to write something telling founders the truth.&lt;/p&gt;&#xA;&lt;p&gt;The second is about something politicians sometimes say — that the only way to become a billionaire is by exploiting people — and why this is mistaken.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Addiction</title>
      <link>https://linguage.github.io/paul_graham/essays_en/addiction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/addiction/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/addiction.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;addiction&#34;&gt;Addiction&lt;/h1&gt;&#xA;&lt;p&gt;The Acceleration of Addictiveness July 2010&lt;/p&gt;&#xA;&lt;p&gt;What hard liquor, cigarettes, heroin, and crack have in common is that they&amp;rsquo;re all more concentrated forms of less addictive predecessors. Most if not all the things we describe as addictive are. And the scary thing is, the process that created them is accelerating.&lt;/p&gt;&#xA;&lt;p&gt;We wouldn&amp;rsquo;t want to stop it. It&amp;rsquo;s the same process that cures diseases: technological progress. Technological progress means making things do more of what we want. When the thing we want is something we want to want, we consider technological progress good. If some new technique makes solar cells x% more efficient, that seems strictly better. When progress concentrates something we don&amp;rsquo;t want to want — when it transforms opium into heroin — it seems bad. But it&amp;rsquo;s the same process at work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>After the Ladder</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ladder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ladder/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ladder.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;after-the-ladder&#34;&gt;After the Ladder&lt;/h1&gt;&#xA;&lt;p&gt;August 2005&lt;/p&gt;&#xA;&lt;p&gt;Thirty years ago, one was supposed to work one&amp;rsquo;s way up the corporate ladder. That&amp;rsquo;s less the rule now. Our generation wants to get paid up front. Instead of developing a product for some big company in the expectation of getting job security in return, we develop the product ourselves, in a startup, and sell it to the big company. At the very least we want options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Airbnb</title>
      <link>https://linguage.github.io/paul_graham/essays_en/airbnb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/airbnb/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/airbnb.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;airbnb&#34;&gt;Airbnb&lt;/h1&gt;&#xA;&lt;p&gt;主题：Airbnb 2011年3月&lt;/p&gt;&#xA;&lt;p&gt;昨天Fred Wilson发表了一篇关于错过Airbnb的引人注目的文章。风险投资家错过好的初创公司是很常见的事，但一个人在事后很长时间之前公开谈论这件事是极其罕见的。所以那篇文章进一步证明了Fred是多么难得的人物。他可能是我认识的最友好的风险投资家。&lt;/p&gt;&#xA;&lt;p&gt;阅读Fred的文章让我回顾了当时我与他的邮件交流，试图说服他投资Airbnb。阅读起来相当有趣。你可以看到Fred的思路在他围绕这笔交易盘旋时的工作方式。&lt;/p&gt;&#xA;&lt;p&gt;Fred和Airbnb创始人们慷慨地同意让我发布这封邮件交流（关于对Airbnb具有战略重要性且不是对话重要部分的一句话被编辑删除）。这是一个很少除了参与者能看到的企业生态系统中一个元素的有趣说明：投资者试图说服彼此投资他们的投资组合公司。现在正在发生数百甚至数千次这种类型的对话，但如果曾经有被发布过，我还没有看到。Airbnb团队当时甚至没有看到这些邮件。&lt;/p&gt;&#xA;&lt;p&gt;我们在YC做了很多幕后工作，因为我们投资了如此大量的公司，而且我们投资得如此之早，以至于投资者有时需要大量的说服才能看到它们的价值。我并不总是像这样努力尝试。Fred肯定觉得我很烦人。&lt;/p&gt;&#xA;&lt;p&gt;发件人：Paul Graham&#xA;收件人：Fred Wilson, AirBedAndBreakfast Founders&#xA;日期：2009年1月23日星期五上午11:42&#xA;主题：认识airbed团队&lt;/p&gt;&#xA;&lt;p&gt;刚刚开始的一批初创公司中的一家，AirbedAndBreakfast，现在在纽约与他们的用户会面。（纽约是他们最大的市场。）如果你的日程安排允许，我建议见见他们。&lt;/p&gt;&#xA;&lt;p&gt;我一直在想，虽然这些人会做得很好，但我应该把他们介绍给天使投资人，因为风险投资家绝不会对它感兴趣。但后来我想也许我应该给你更多的信任。你肯定会喜欢见他们的。一定要问问他们是如何用早餐麦片为自己融资的。&lt;/p&gt;&#xA;&lt;p&gt;没有理由说这不能像Ebay那样大。而这个团队是做这件事的合适人选。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ndash;pg&lt;/p&gt;&#xA;&lt;p&gt;发件人：Brian Chesky&#xA;收件人：Paul Graham&#xA;抄送：Nathan Blecharczyk, Joe Gebbia&#xA;日期：2009年1月23日星期五上午11:40&#xA;主题：Re：认识airbed团队&lt;/p&gt;&#xA;&lt;p&gt;PG，&lt;/p&gt;&#xA;&lt;p&gt;谢谢介绍！&lt;/p&gt;&#xA;&lt;p&gt;Brian&lt;/p&gt;&#xA;&lt;p&gt;发件人：Paul Graham&#xA;收件人：Brian Chesky&#xA;抄送：Nathan Blecharczyk, Joe Gebbia&#xA;日期：2009年1月23日星期五下午12:38&#xA;主题：Re：认识airbed团队&lt;/p&gt;&#xA;&lt;p&gt;在这个阶段，这是一个长线投资，但如果有一个风险投资家会理解你们，那就是Fred。他是我认识的最不喜欢郊区打高尔夫的风险投资家。&lt;/p&gt;&#xA;&lt;p&gt;他喜欢在行动之前观察初创公司一段时间，所以如果他显得犹豫不决，不要感到沮丧。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ndash;pg&lt;/p&gt;&#xA;&lt;p&gt;发件人：Fred Wilson&#xA;收件人：Paul Graham&#xA;日期：2009年1月25日星期日下午5:28&#xA;主题：Re：认识airbed团队&lt;/p&gt;&#xA;&lt;p&gt;谢谢Paul&lt;/p&gt;&#xA;&lt;p&gt;我们团队内部正在就airbed概念进行一些辩论。我们将在明天的周会中完成这场辩论，并向你反馈我们的想法&lt;/p&gt;&#xA;&lt;p&gt;谢谢&lt;/p&gt;&#xA;&lt;p&gt;Fred&lt;/p&gt;&#xA;&lt;p&gt;发件人：Paul Graham&#xA;收件人：Fred Wilson&#xA;日期：2009年1月25日星期日晚上10:48&#xA;主题：Re：认识airbed团队&lt;/p&gt;&#xA;&lt;p&gt;我建议在见他们之后而不是之前进行辩论。我们对这个想法有很大的疑虑，但在见到这些人后疑虑消失了。&lt;/p&gt;&#xA;&lt;p&gt;发件人：Fred Wilson&#xA;收件人：Paul Graham&#xA;日期：2009年1月26日星期一上午11:08&#xA;主题：RE：认识airbed团队&lt;/p&gt;</description>
    </item>
    <item>
      <title>Alien Truth</title>
      <link>https://linguage.github.io/paul_graham/essays_en/alien/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/alien/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/alien.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;alien-truth&#34;&gt;Alien Truth&lt;/h1&gt;&#xA;&lt;p&gt;October 2022&lt;/p&gt;&#xA;&lt;p&gt;If there were intelligent beings elsewhere in the universe, they&amp;rsquo;d share certain truths in common with us. The truths of mathematics would be the same, because they&amp;rsquo;re true by definition. Ditto for the truths of physics; the mass of a carbon atom would be the same on their planet. But I think we&amp;rsquo;d share other truths with aliens besides the truths of math and physics, and that it would be worthwhile to think about what these might be.&lt;/p&gt;</description>
    </item>
    <item>
      <title>America</title>
      <link>https://linguage.github.io/paul_graham/essays_en/america/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/america/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/america.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;america&#34;&gt;America&lt;/h1&gt;&#xA;&lt;h2 id=&#34;why-startups-condense-in-america&#34;&gt;Why Startups Condense in America&lt;/h2&gt;&#xA;&lt;p&gt;May 2006&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a keynote at Xtech.)&lt;/p&gt;&#xA;&lt;p&gt;Startups happen in clusters. There are a lot of them in Silicon Valley and Boston, and few in Chicago or Miami. A country that wants startups will probably also have to reproduce whatever makes these clusters form.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve claimed that the recipe is a great university near a town smart people like. If you set up those conditions within the US, startups will form as inevitably as water droplets condense on a cold piece of metal. But when I consider what it would take to reproduce Silicon Valley in another country, it&amp;rsquo;s clear the US is a particularly humid environment. Startups condense more easily here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>An NFT That Saves Lives</title>
      <link>https://linguage.github.io/paul_graham/essays_en/nft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/nft/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/nft.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;an-nft-that-saves-lives&#34;&gt;An NFT That Saves Lives&lt;/h1&gt;&#xA;&lt;p&gt;May 2021&lt;/p&gt;&#xA;&lt;p&gt;Noora Health, a nonprofit I&amp;rsquo;ve supported for years, just launched a new NFT. It has a dramatic name, Save Thousands of Lives, because that&amp;rsquo;s what the proceeds will do.&lt;/p&gt;&#xA;&lt;p&gt;Noora has been saving lives for 7 years. They run programs in hospitals in South Asia to teach new mothers how to take care of their babies once they get home. They&amp;rsquo;re in 165 hospitals now. And because they know the numbers before and after they start at a new hospital, they can measure the impact they have. It is massive. For every 1000 live births, they save 9 babies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apple&#39;s Mistake</title>
      <link>https://linguage.github.io/paul_graham/essays_en/apple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/apple/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/apple.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;apples-mistake&#34;&gt;Apple&amp;rsquo;s Mistake&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator. November 2009&lt;/p&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t think Apple realizes how badly the App Store approval process is broken. Or rather, I don&amp;rsquo;t think they realize how much it matters that it&amp;rsquo;s broken.&lt;/p&gt;&#xA;&lt;p&gt;The way Apple runs the App Store has harmed their reputation with programmers more than anything else they&amp;rsquo;ve ever done. Their reputation with programmers used to be great. It used to be the most common complaint you heard about Apple was that their fans admired them too uncritically. The App Store has changed that. Now a lot of programmers have started to see Apple as evil.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Be Good</title>
      <link>https://linguage.github.io/paul_graham/essays_en/good/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/good/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/good.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;be-good&#34;&gt;Be Good&lt;/h1&gt;&#xA;&lt;p&gt;April 2008&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at the 2008 Startup School.)&lt;/p&gt;&#xA;&lt;p&gt;About a month after we started Y Combinator we came up with the phrase that became our motto: Make something people want. We&amp;rsquo;ve learned a lot since then, but if I were choosing now that&amp;rsquo;s still the one I&amp;rsquo;d pick.&lt;/p&gt;&#xA;&lt;p&gt;Another thing we tell founders is not to worry too much about the business model, at least at first. Not because making money is unimportant, but because it&amp;rsquo;s so much easier than building something great.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beating the Averages</title>
      <link>https://linguage.github.io/paul_graham/essays_en/avg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/avg/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/avg.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;beating-the-averages&#34;&gt;Beating the Averages&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator. April 2001, rev. April 2003&lt;/p&gt;&#xA;&lt;p&gt;(This article is derived from a talk given at the 2001 Franz Developer Symposium.)&lt;/p&gt;&#xA;&lt;p&gt;In the summer of 1995, my friend Robert Morris and I started a startup called Viaweb. Our plan was to write software that would let end users build online stores. What was novel about this software, at the time, was that it ran on our server, using ordinary Web pages as the interface.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Before the Startup</title>
      <link>https://linguage.github.io/paul_graham/essays_en/before/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/before/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/before.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;before-the-startup&#34;&gt;Before the Startup&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;October 2014&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a guest lecture in Sam Altman&amp;rsquo;s startup class at Stanford. It&amp;rsquo;s intended for college students, but much of it is applicable to potential founders at other ages.)&lt;/p&gt;&#xA;&lt;p&gt;One of the advantages of having kids is that when you have to give advice, you can ask yourself &amp;ldquo;what would I tell my own kids?&amp;rdquo; My kids are little, but I can imagine what I&amp;rsquo;d tell them about startups if they were in college, and that&amp;rsquo;s what I&amp;rsquo;m going to tell you.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Being a Noob</title>
      <link>https://linguage.github.io/paul_graham/essays_en/noob/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/noob/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/noob.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;being-a-noob&#34;&gt;Being a Noob&lt;/h1&gt;&#xA;&lt;p&gt;January 2020&lt;/p&gt;&#xA;&lt;p&gt;When I was young, I thought old people had everything figured out. Now that I&amp;rsquo;m old, I know this isn&amp;rsquo;t true.&lt;/p&gt;&#xA;&lt;p&gt;I constantly feel like a noob. It seems like I&amp;rsquo;m always talking to some startup working in a new field I know nothing about, or reading a book about a topic I don&amp;rsquo;t understand well enough, or visiting some new country where I don&amp;rsquo;t know how things work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Being Popular</title>
      <link>https://linguage.github.io/paul_graham/essays_en/popular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/popular/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/popular.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;being-popular&#34;&gt;Being Popular&lt;/h1&gt;&#xA;&lt;p&gt;May 2001&lt;/p&gt;&#xA;&lt;p&gt;(This article was written as a kind of business plan for a new language. So it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.)&lt;/p&gt;&#xA;&lt;p&gt;A friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time, that programming languages don&amp;rsquo;t become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. At least, that was what had happened to the language he had designed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Better</title>
      <link>https://linguage.github.io/paul_graham/essays_en/better/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/better/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/better.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;better&#34;&gt;Better&lt;/h1&gt;&#xA;&lt;p&gt;Better Bayesian Filtering&lt;/p&gt;&#xA;&lt;p&gt;January 2003&lt;/p&gt;&#xA;&lt;p&gt;(This article was given as a talk at the 2003 Spam Conference. It describes the work I&amp;rsquo;ve done to improve the performance of the algorithm described in A Plan for Spam, and what I plan to do in the future.)&lt;/p&gt;&#xA;&lt;p&gt;The first discovery I&amp;rsquo;d like to present here is an algorithm for lazy evaluation of research papers. Just write whatever you want and don&amp;rsquo;t cite any previous work, and indignant readers will send you references to all the papers you should have cited. I discovered this algorithm after &amp;ldquo;A Plan for Spam&amp;rdquo; [1] was on Slashdot.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bias</title>
      <link>https://linguage.github.io/paul_graham/essays_en/bias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/bias/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/bias.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;bias&#34;&gt;Bias&lt;/h1&gt;&#xA;&lt;p&gt;A Way to Detect Bias&lt;/p&gt;&#xA;&lt;p&gt;October 2015&lt;/p&gt;&#xA;&lt;p&gt;This will come as a surprise to a lot of people, but in some cases it&amp;rsquo;s possible to detect bias in a selection process without knowing anything about the applicant pool. Which is exciting because among other things it means third parties can use this technique to detect bias whether those doing the selecting want them to or not.&lt;/p&gt;&#xA;&lt;p&gt;You can use this technique whenever (a) you have at least a random sample of the applicants that were selected, (b) their subsequent performance is measured, and (c) the groups of applicants you&amp;rsquo;re comparing have roughly equal distribution of ability.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boss</title>
      <link>https://linguage.github.io/paul_graham/essays_en/boss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/boss/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/boss.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;boss&#34;&gt;Boss&lt;/h1&gt;&#xA;&lt;p&gt;You Weren&amp;rsquo;t Meant to Have a Boss&lt;/p&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;March 2008, rev. June 2008&lt;/p&gt;&#xA;&lt;p&gt;Technology tends to separate normal from natural. Our bodies weren&amp;rsquo;t designed to eat the foods that people in rich countries eat, or to get so little exercise. There may be a similar problem with the way we work: a normal job may be as bad for us intellectually as white flour or sugar is for us physically.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bronze</title>
      <link>https://linguage.github.io/paul_graham/essays_en/bronze/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/bronze/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/bronze.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;bronze&#34;&gt;Bronze&lt;/h1&gt;&#xA;&lt;p&gt;Why Smart People Have Bad Ideas&lt;/p&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;April 2005&lt;/p&gt;&#xA;&lt;p&gt;This summer, as an experiment, some friends and I are giving seed funding to a bunch of new startups. It&amp;rsquo;s an experiment because we&amp;rsquo;re prepared to fund younger founders than most investors would. That&amp;rsquo;s why we&amp;rsquo;re doing it during the summer—so even college students can participate.&lt;/p&gt;&#xA;&lt;p&gt;We know from Google and Yahoo that grad students can start successful startups. And we know from experience that some undergrads are as capable as most grad students. The accepted age for startup founders has been creeping downward. We&amp;rsquo;re trying to find the lower bound.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bubble</title>
      <link>https://linguage.github.io/paul_graham/essays_en/bubble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/bubble/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/bubble.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;bubble&#34;&gt;Bubble&lt;/h1&gt;&#xA;&lt;p&gt;What the Bubble Got Right&lt;/p&gt;&#xA;&lt;p&gt;September 2004&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from an invited talk at ICFP 2004.)&lt;/p&gt;&#xA;&lt;p&gt;I had a front row seat for the Internet Bubble, because I worked at Yahoo during 1998 and 1999. One day, when the stock was trading around $200, I sat down and calculated what I thought the price should be. The answer I got was $12. I went to the next cubicle and told my friend Trevor. &amp;ldquo;Twelve!&amp;rdquo; he said. He tried to sound indignant, but he didn&amp;rsquo;t quite manage it. He knew as well as I did that our valuation was crazy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Change Your Name</title>
      <link>https://linguage.github.io/paul_graham/essays_en/name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/name/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/name.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;change-your-name&#34;&gt;Change Your Name&lt;/h1&gt;&#xA;&lt;p&gt;August 2015&lt;/p&gt;&#xA;&lt;p&gt;If you have a US startup called X and you don&amp;rsquo;t have x.com, you should probably change your name.&lt;/p&gt;&#xA;&lt;p&gt;The reason is not just that people can&amp;rsquo;t find you. For companies with mobile apps, especially, having the right domain name is not as critical as it used to be for getting users. The problem with not having the .com of your name is that it signals weakness. Unless you&amp;rsquo;re so big that your reputation precedes you, a marginal domain suggests you&amp;rsquo;re a marginal company. Whereas (as Stripe shows) having x.com signals strength even if it has no relation to what you do.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Charisma</title>
      <link>https://linguage.github.io/paul_graham/essays_en/charisma/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/charisma/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/charisma.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;charisma&#34;&gt;Charisma&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s Charisma, Stupid&lt;/p&gt;&#xA;&lt;p&gt;November 2004, corrected June 2006&lt;/p&gt;&#xA;&lt;p&gt;Occam&amp;rsquo;s razor says we should prefer the simpler of two explanations. I begin by reminding readers of this principle because I&amp;rsquo;m about to propose a theory that will offend both liberals and conservatives. But Occam&amp;rsquo;s razor means, in effect, that if you want to disagree with it, you have a hell of a coincidence to explain.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Theory: In US presidential elections, the more charismatic candidate wins.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cities</title>
      <link>https://linguage.github.io/paul_graham/essays_en/cities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/cities/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/cities.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;cities&#34;&gt;Cities&lt;/h1&gt;&#xA;&lt;p&gt;Cities and Ambition&lt;/p&gt;&#xA;&lt;p&gt;May 2008&lt;/p&gt;&#xA;&lt;p&gt;Great cities attract ambitious people. You can sense it when you walk around one. In a hundred subtle ways, the city sends you a message: you could do more; you should try harder.&lt;/p&gt;&#xA;&lt;p&gt;The surprising thing is how different these messages can be. New York tells you, above all: you should make more money. There are other messages too, of course. You should be hipper. You should be better looking. But the clearest message is that you should be richer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>College</title>
      <link>https://linguage.github.io/paul_graham/essays_en/college/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/college/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/college.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;college&#34;&gt;College&lt;/h1&gt;&#xA;&lt;h2 id=&#34;undergraduation&#34;&gt;Undergraduation&lt;/h2&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator. March 2005&lt;/p&gt;&#xA;&lt;p&gt;(Parts of this essay began as replies to students who wrote to me with questions.)&lt;/p&gt;&#xA;&lt;p&gt;Recently I&amp;rsquo;ve had several emails from computer science undergrads asking what to do in college. I might not be the best source of advice, because I was a philosophy major in college. But I took so many CS classes that most CS majors thought I was one. I was certainly a hacker, at least.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Colleges</title>
      <link>https://linguage.github.io/paul_graham/essays_en/colleges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/colleges/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/colleges.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;colleges&#34;&gt;Colleges&lt;/h1&gt;&#xA;&lt;h2 id=&#34;news-from-the-front&#34;&gt;News from the Front&lt;/h2&gt;&#xA;&lt;p&gt;September 2007&lt;/p&gt;&#xA;&lt;p&gt;A few weeks ago I had a thought so heretical that it really surprised me. It may not matter all that much where you go to college.&lt;/p&gt;&#xA;&lt;p&gt;For me, as for a lot of middle class kids, getting into a good college was more or less the meaning of life when I was growing up. What was I? A student. To do that well meant to get good grades. Why did one have to get good grades? To get into a good college. And why did one want to do that? There seemed to be several reasons: you&amp;rsquo;d learn more, get better jobs, make more money. But it didn&amp;rsquo;t matter exactly what the benefits would be. College was a bottleneck through which all your future prospects passed; everything would be better if you went to a better college.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conformism</title>
      <link>https://linguage.github.io/paul_graham/essays_en/conformism/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/conformism/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/conformism.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;conformism&#34;&gt;Conformism&lt;/h1&gt;&#xA;&lt;h2 id=&#34;the-four-quadrants-of-conformism&#34;&gt;The Four Quadrants of Conformism&lt;/h2&gt;&#xA;&lt;p&gt;July 2020&lt;/p&gt;&#xA;&lt;p&gt;One of the most revealing ways to classify people is by the degree and aggressiveness of their conformism. Imagine a Cartesian coordinate system whose horizontal axis runs from conventional-minded on the left to independent-minded on the right, and whose vertical axis runs from passive at the bottom to aggressive at the top. The resulting four quadrants define four types of people. Starting in the upper left and going counter-clockwise: aggressively conventional-minded, passively conventional-minded, passively independent-minded, and aggressively independent-minded.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Control</title>
      <link>https://linguage.github.io/paul_graham/essays_en/control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/control/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/control.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;control&#34;&gt;Control&lt;/h1&gt;&#xA;&lt;h2 id=&#34;founder-control&#34;&gt;Founder Control&lt;/h2&gt;&#xA;&lt;p&gt;December 2010&lt;/p&gt;&#xA;&lt;p&gt;Someone we funded is talking to VCs now, and asked me how common it was for a startup&amp;rsquo;s founders to retain control of the board after a series A round. He said VCs told him this almost never happened.&lt;/p&gt;&#xA;&lt;p&gt;Ten years ago that was true. In the past, founders rarely kept control of the board through a series A. The traditional series A board consisted of two founders, two VCs, and one independent member. More recently the recipe is often one founder, one VC, and one independent. In either case the founders lose their majority.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convergence</title>
      <link>https://linguage.github.io/paul_graham/essays_en/convergence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/convergence/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/convergence.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;convergence&#34;&gt;Convergence&lt;/h1&gt;&#xA;&lt;h2 id=&#34;why-tv-lost&#34;&gt;Why TV Lost&lt;/h2&gt;&#xA;&lt;p&gt;March 2009&lt;/p&gt;&#xA;&lt;p&gt;About twenty years ago people noticed computers and TV were on a collision course and started to speculate about what they&amp;rsquo;d produce when they converged. We now know the answer: computers. It&amp;rsquo;s clear now that even by using the word &amp;ldquo;convergence&amp;rdquo; we were giving TV too much credit. This won&amp;rsquo;t be convergence so much as replacement. People may still watch things they call &amp;ldquo;TV shows,&amp;rdquo; but they&amp;rsquo;ll watch them mostly on computers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convince</title>
      <link>https://linguage.github.io/paul_graham/essays_en/convince/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/convince/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/convince.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;convince&#34;&gt;Convince&lt;/h1&gt;&#xA;&lt;h2 id=&#34;how-to-convince-investors&#34;&gt;How to Convince Investors&lt;/h2&gt;&#xA;&lt;p&gt;August 2013&lt;/p&gt;&#xA;&lt;p&gt;When people hurt themselves lifting heavy things, it&amp;rsquo;s usually because they try to lift with their back. The right way to lift heavy things is to let your legs do the work. Inexperienced founders make the same mistake when trying to convince investors. They try to convince with their pitch. Most would be better off if they let their startup do the work—if they started by understanding why their startup is worth investing in, then simply explained this well to investors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Copy</title>
      <link>https://linguage.github.io/paul_graham/essays_en/copy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/copy/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/copy.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;copy&#34;&gt;Copy&lt;/h1&gt;&#xA;&lt;h2 id=&#34;copy-what-you-like&#34;&gt;Copy What You Like&lt;/h2&gt;&#xA;&lt;p&gt;July 2006&lt;/p&gt;&#xA;&lt;p&gt;When I was in high school I spent a lot of time imitating bad writers. What we studied in English classes was mostly fiction, so I assumed that was the highest form of writing. Mistake number one.&lt;/p&gt;&#xA;&lt;p&gt;The stories that seemed to be most admired were ones in which people suffered in complicated ways. Anything funny or gripping was ipso facto suspect, unless it was old enough to be hard to understand, like Shakespeare or Chaucer. Mistake number two.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Corpdev</title>
      <link>https://linguage.github.io/paul_graham/essays_en/corpdev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/corpdev/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/corpdev.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;corpdev&#34;&gt;Corpdev&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dont-talk-to-corp-dev&#34;&gt;Don&amp;rsquo;t Talk to Corp Dev&lt;/h2&gt;&#xA;&lt;p&gt;January 2015&lt;/p&gt;&#xA;&lt;p&gt;Corporate Development, aka corp dev, is the group within companies that buys other companies. If you&amp;rsquo;re talking to someone from corp dev, that&amp;rsquo;s why, whether you realize it yet or not.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s usually a mistake to talk to corp dev unless (a) you want to sell your company right now and (b) you&amp;rsquo;re sufficiently likely to get an offer at an acceptable price. In practice that means startups should only talk to corp dev when they&amp;rsquo;re either doing really well or really badly. If you&amp;rsquo;re doing really badly, meaning the company is about to die, you may as well talk to them, because you have nothing to lose. And if you&amp;rsquo;re doing really well, you can safely talk to them, because you both know the price will have to be high, and if they show the slightest sign of wasting your time, you&amp;rsquo;ll be confident enough to tell them to get lost.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Crazy New Ideas</title>
      <link>https://linguage.github.io/paul_graham/essays_en/newideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/newideas/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/newideas.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;crazy-new-ideas&#34;&gt;Crazy New Ideas&lt;/h1&gt;&#xA;&lt;p&gt;May 2021&lt;/p&gt;&#xA;&lt;p&gt;There&amp;rsquo;s one kind of opinion I&amp;rsquo;d be very afraid to express publicly. If someone I knew to be both a domain expert and a reasonable person proposed an idea that sounded preposterous, I&amp;rsquo;d be very reluctant to say &amp;ldquo;That will never work.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;Anyone who has studied the history of ideas, and especially the history of science, knows that&amp;rsquo;s how big things start. Someone proposes an idea that sounds crazy, most people dismiss it, then it gradually takes over the world.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cred</title>
      <link>https://linguage.github.io/paul_graham/essays_en/cred/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/cred/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/cred.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;cred&#34;&gt;Cred&lt;/h1&gt;&#xA;&lt;h2 id=&#34;coronavirus-and-credibility&#34;&gt;Coronavirus and Credibility&lt;/h2&gt;&#xA;&lt;p&gt;April 2020&lt;/p&gt;&#xA;&lt;p&gt;I recently saw a video of TV journalists and politicians confidently saying that the coronavirus would be no worse than the flu. What struck me about it was not just how mistaken they seemed, but how daring. How could they feel safe saying such things?&lt;/p&gt;&#xA;&lt;p&gt;The answer, I realized, is that they didn&amp;rsquo;t think they could get caught. They didn&amp;rsquo;t realize there was any danger in making false predictions. These people constantly make false predictions, and get away with it, because the things they make predictions about either have mushy enough outcomes that they can bluster their way out of trouble, or happen so far in the future that few remember what they said.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Credentials</title>
      <link>https://linguage.github.io/paul_graham/essays_en/credentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/credentials/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/credentials.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;credentials&#34;&gt;Credentials&lt;/h1&gt;&#xA;&lt;h2 id=&#34;after-credentials&#34;&gt;After Credentials&lt;/h2&gt;&#xA;&lt;p&gt;December 2008&lt;/p&gt;&#xA;&lt;p&gt;A few months ago I read a New York Times article on South Korean cram schools that said Admission to the right university can make or break an ambitious young South Korean. A parent added: &amp;ldquo;In our country, college entrance exams determine 70 to 80 percent of a person&amp;rsquo;s future.&amp;rdquo; It was striking how old fashioned this sounded. And yet when I was in high school it wouldn&amp;rsquo;t have seemed too far off as a description of the US. Which means things must have been changing here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Default Alive or Default Dead?</title>
      <link>https://linguage.github.io/paul_graham/essays_en/aord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/aord/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/aord.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;default-alive-or-default-dead&#34;&gt;Default Alive or Default Dead?&lt;/h1&gt;&#xA;&lt;p&gt;October 2015&lt;/p&gt;&#xA;&lt;p&gt;When I talk to a startup that&amp;rsquo;s been operating for more than 8 or 9 months, the first thing I want to know is almost always the same. Assuming their expenses remain constant and their revenue growth is what it has been over the last several months, do they make it to profitability on the money they have left? Or to put it more dramatically, by default do they live or die?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design and Research</title>
      <link>https://linguage.github.io/paul_graham/essays_en/desres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/desres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/desres.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;design-and-research&#34;&gt;Design and Research&lt;/h1&gt;&#xA;&lt;p&gt;January 2003&lt;/p&gt;&#xA;&lt;p&gt;(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)&lt;/p&gt;&#xA;&lt;p&gt;Visitors to this country are often surprised to find that Americans like to begin a conversation by asking &amp;ldquo;what do you do?&amp;rdquo; I&amp;rsquo;ve never liked this question. I&amp;rsquo;ve rarely had a neat answer to it. But I think I have finally solved the problem. Now, when someone asks me what I do, I look them straight in the eye and say &amp;ldquo;I&amp;rsquo;m designing a new dialect of Lisp.&amp;rdquo; I recommend this answer to anyone who doesn&amp;rsquo;t like being asked what they do. The conversation will turn immediately to other topics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Determination</title>
      <link>https://linguage.github.io/paul_graham/essays_en/determination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/determination/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/determination.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;determination&#34;&gt;Determination&lt;/h1&gt;&#xA;&lt;h2 id=&#34;the-anatomy-of-determination&#34;&gt;The Anatomy of Determination&lt;/h2&gt;&#xA;&lt;p&gt;September 2009&lt;/p&gt;&#xA;&lt;p&gt;Like all investors, we spend a lot of time trying to learn how to predict which startups will succeed. We probably spend more time thinking about it than most, because we invest the earliest. Prediction is usually all we have to rely on.&lt;/p&gt;&#xA;&lt;p&gt;We learned quickly that the most important predictor of success is determination. At first we thought it might be intelligence. Everyone likes to believe that&amp;rsquo;s what makes startups succeed. It makes a better story that a company won because its founders were so smart. The PR people and reporters who spread such stories probably believe them themselves. But while it certainly helps to be smart, it&amp;rsquo;s not the deciding factor. There are plenty of people as smart as Bill Gates who achieve nothing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distraction</title>
      <link>https://linguage.github.io/paul_graham/essays_en/distraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/distraction/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/distraction.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;distraction&#34;&gt;Distraction&lt;/h1&gt;&#xA;&lt;p&gt;May 2008&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Disconnecting Distraction Note: The strategy described at the end of this essay didn&amp;rsquo;t work. It would work for a while, and then I&amp;rsquo;d gradually find myself using the Internet on my work computer. I&amp;rsquo;m trying other strategies now, but I think this time I&amp;rsquo;ll wait till I&amp;rsquo;m sure they work before writing about them.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Procrastination feeds on distractions. Most people find it uncomfortable just to sit and do nothing; you avoid work by doing something else.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Divergence</title>
      <link>https://linguage.github.io/paul_graham/essays_en/divergence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/divergence/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/divergence.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;divergence&#34;&gt;Divergence&lt;/h1&gt;&#xA;&lt;h2 id=&#34;could-vc-be-a-casualty-of-the-recession&#34;&gt;Could VC be a Casualty of the Recession?&lt;/h2&gt;&#xA;&lt;p&gt;December 2008&lt;/p&gt;&#xA;&lt;p&gt;(I originally wrote this at the request of a company producing a report about entrepreneurship. Unfortunately after reading it they decided it was too controversial to include.)&lt;/p&gt;&#xA;&lt;p&gt;VC funding will probably dry up somewhat during the present recession, like it usually does in bad times. But this time the result may be different. This time the number of new startups may not decrease. And that could be dangerous for VCs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Do</title>
      <link>https://linguage.github.io/paul_graham/essays_en/do/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/do/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/do.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;do&#34;&gt;Do&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-to-do&#34;&gt;What to Do&lt;/h2&gt;&#xA;&lt;p&gt;March 2025&lt;/p&gt;&#xA;&lt;p&gt;What should one do? That may seem a strange question, but it&amp;rsquo;s not meaningless or unanswerable. It&amp;rsquo;s the sort of question kids ask before they learn not to ask big questions. I only came across it myself in the process of investigating something else. But once I did, I thought I should at least try to answer it.&lt;/p&gt;&#xA;&lt;p&gt;So what should one do? One should help people, and take care of the world. Those two are obvious. But is there anything else? When I ask that, the answer that pops up is Make good new things.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Do Things that Don&#39;t Scale</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ds/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ds.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;do-things-that-dont-scale&#34;&gt;Do Things that Don&amp;rsquo;t Scale&lt;/h1&gt;&#xA;&lt;h2 id=&#34;do-things-that-dont-scale-1&#34;&gt;Do Things that Don&amp;rsquo;t Scale&lt;/h2&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;July 2013&lt;/p&gt;&#xA;&lt;p&gt;One of the most common types of advice we give at Y Combinator is to do things that don&amp;rsquo;t scale. A lot of would-be founders believe that startups either take off or don&amp;rsquo;t. You build something, make it available, and if you&amp;rsquo;ve made a better mousetrap, people beat a path to your door as promised. Or they don&amp;rsquo;t, in which case the market must not exist. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Donate</title>
      <link>https://linguage.github.io/paul_graham/essays_en/donate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/donate/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/donate.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;donate&#34;&gt;Donate&lt;/h1&gt;&#xA;&lt;h2 id=&#34;donate-unrestricted&#34;&gt;Donate Unrestricted&lt;/h2&gt;&#xA;&lt;p&gt;March 2021&lt;/p&gt;&#xA;&lt;p&gt;The secret curse of the nonprofit world is restricted donations. If you haven&amp;rsquo;t been involved with nonprofits, you may never have heard this phrase before. But if you have been, it probably made you wince.&lt;/p&gt;&#xA;&lt;p&gt;Restricted donations mean donations where the donor limits what can be done with the money. This is common with big donations, perhaps the default. And yet it&amp;rsquo;s usually a bad idea. Usually the way the donor wants the money spent is not the way the nonprofit would have chosen. Otherwise there would have been no need to restrict the donation. But who has a better understanding of where money needs to be spent, the nonprofit or the donor?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Early</title>
      <link>https://linguage.github.io/paul_graham/essays_en/early/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/early/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/early.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;early&#34;&gt;Early&lt;/h1&gt;&#xA;&lt;p&gt;October 2020&lt;/p&gt;&#xA;&lt;p&gt;One of the biggest things holding people back from doing great work is the fear of making something lame. And this fear is not an irrational one. Many great projects go through a stage early on where they don&amp;rsquo;t seem very impressive, even to their creators. You have to push through this stage to reach the great work that lies beyond. But many people don&amp;rsquo;t. Most people don&amp;rsquo;t even reach the stage of making something they&amp;rsquo;re embarrassed by, let alone continue past it. They&amp;rsquo;re too frightened even to start.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Earnest</title>
      <link>https://linguage.github.io/paul_graham/essays_en/earnest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/earnest/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/earnest.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;earnest&#34;&gt;Earnest&lt;/h1&gt;&#xA;&lt;p&gt;December 2020&lt;/p&gt;&#xA;&lt;p&gt;Jessica and I have certain words that have special significance when we&amp;rsquo;re talking about startups. The highest compliment we can pay to founders is to describe them as &amp;ldquo;earnest.&amp;rdquo; This is not by itself a guarantee of success. You could be earnest but incapable. But when founders are both formidable (another of our words) and earnest, they&amp;rsquo;re as close to unstoppable as you get.&lt;/p&gt;&#xA;&lt;p&gt;Earnestness sounds like a boring, even Victorian virtue. It seems a bit of an anachronism that people in Silicon Valley would care about it. Why does this matter so much?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Economic Inequality</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ineq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ineq/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ineq.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;economic-inequality&#34;&gt;Economic Inequality&lt;/h1&gt;&#xA;&lt;p&gt;January 2016&lt;/p&gt;&#xA;&lt;p&gt;Since the 1970s, economic inequality in the US has increased dramatically. And in particular, the rich have gotten a lot richer. Nearly everyone who writes about the topic says that economic inequality should be decreased.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m interested in this question because I was one of the founders of a company called Y Combinator that helps people start startups. Almost by definition, if a startup succeeds, its founders become rich. Which means by helping startup founders I&amp;rsquo;ve been helping to increase economic inequality. If economic inequality should be decreased, I shouldn&amp;rsquo;t be helping founders. No one should be.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fashionable Problems</title>
      <link>https://linguage.github.io/paul_graham/essays_en/fp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/fp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/fp.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;fashionable-problems&#34;&gt;Fashionable Problems&lt;/h1&gt;&#xA;&lt;p&gt;December 2019&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve seen the same pattern in many different fields: even though lots of people have worked hard in the field, only a small fraction of the space of possibilities has been explored, because they&amp;rsquo;ve all worked on similar things.&lt;/p&gt;&#xA;&lt;p&gt;Even the smartest, most imaginative people are surprisingly conservative when deciding what to work on. People who would never dream of being fashionable in any other way get sucked into working on fashionable problems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fierce Nerds</title>
      <link>https://linguage.github.io/paul_graham/essays_en/fn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/fn/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/fn.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;fierce-nerds&#34;&gt;Fierce Nerds&lt;/h1&gt;&#xA;&lt;p&gt;May 2021&lt;/p&gt;&#xA;&lt;p&gt;Most people think of nerds as quiet, diffident people. In ordinary social situations they are — as quiet and diffident as the star quarterback would be if he found himself in the middle of a physics symposium. And for the same reason: they are fish out of water. But the apparent diffidence of nerds is an illusion due to the fact that when non-nerds observe them, it&amp;rsquo;s usually in ordinary social situations. In fact some nerds are quite fierce.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Filters that Fight Back</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ffb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ffb/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ffb.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;filters-that-fight-back&#34;&gt;Filters that Fight Back&lt;/h1&gt;&#xA;&lt;p&gt;August 2003&lt;/p&gt;&#xA;&lt;p&gt;We may be able to improve the accuracy of Bayesian spam filters by having them follow links to see what&amp;rsquo;s waiting at the other end. Richard Jowsey of death2spam now does this in borderline cases, and reports that it works well.&lt;/p&gt;&#xA;&lt;p&gt;Why only do it in borderline cases? And why only do it once?&lt;/p&gt;&#xA;&lt;p&gt;As I mentioned in Will Filters Kill Spam?, following all the urls in a spam would have an amusing side-effect. If popular email clients did this in order to filter spam, the spammer&amp;rsquo;s servers would take a serious pounding. The more I think about this, the better an idea it seems. This isn&amp;rsquo;t just amusing; it would be hard to imagine a more perfectly targeted counterattack on spammers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Five Founders</title>
      <link>https://linguage.github.io/paul_graham/essays_en/5founders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/5founders/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/5founders.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;five-founders&#34;&gt;Five Founders&lt;/h1&gt;&#xA;&lt;p&gt;Five Founders April 2009&lt;/p&gt;&#xA;&lt;p&gt;Inc recently asked me who I thought were the 5 most interesting startup founders of the last 30 years. How do you decide who&amp;rsquo;s the most interesting? The best test seemed to be influence: who are the 5 who&amp;rsquo;ve influenced me most? Who do I use as examples when I&amp;rsquo;m talking to companies we fund? Who do I find myself quoting?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Steve Jobs&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;I&amp;rsquo;d guess Steve is the most influential founder not just for me but for most people you could ask. A lot of startup culture is Apple culture. He was the original young founder. And while the concept of &amp;ldquo;insanely great&amp;rdquo; already existed in the arts, it was a novel idea to introduce into a company in the 1980s.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Five Questions about Language Design</title>
      <link>https://linguage.github.io/paul_graham/essays_en/langdes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/langdes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/langdes.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;five-questions-about-language-design&#34;&gt;Five Questions about Language Design&lt;/h1&gt;&#xA;&lt;p&gt;May 2001&lt;/p&gt;&#xA;&lt;p&gt;(These are some notes I made for a panel discussion on programming language design at MIT on May 10, 2001.)&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-programming-languages-are-for-people&#34;&gt;1. Programming Languages Are for People.&lt;/h2&gt;&#xA;&lt;p&gt;Programming languages are how people talk to computers. The computer would be just as happy speaking any language that was unambiguous. The reason we have high level languages is because people can&amp;rsquo;t deal with machine language. The point of programming languages is to prevent our poor frail human brains from being overwhelmed by a mass of detail.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Founder Mode</title>
      <link>https://linguage.github.io/paul_graham/essays_en/foundermode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/foundermode/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/foundermode.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;founder-mode&#34;&gt;Founder Mode&lt;/h1&gt;&#xA;&lt;p&gt;September 2024&lt;/p&gt;&#xA;&lt;p&gt;At a YC event last week Brian Chesky gave a talk that everyone who was there will remember. Most founders I talked to afterward said it was the best they&amp;rsquo;d ever heard. Ron Conway, for the first time in his life, forgot to take notes. I&amp;rsquo;m not going to try to reproduce it here. Instead I want to talk about a question it raised.&lt;/p&gt;&#xA;&lt;p&gt;The theme of Brian&amp;rsquo;s talk was that the conventional wisdom about how to run larger companies is mistaken. As Airbnb grew, well-meaning people advised him that he had to run the company in a certain way for it to scale. Their advice could be optimistically summarized as &amp;ldquo;hire good people and give them room to do their jobs.&amp;rdquo; He followed this advice and the results were disastrous. So he had to figure out a better way on his own, which he did partly by studying how Steve Jobs ran Apple. So far it seems to be working. Airbnb&amp;rsquo;s free cash flow margin is now among the best in Silicon Valley.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frighteningly Ambitious Startup Ideas</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ambitious/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ambitious/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ambitious.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;frighteningly-ambitious-startup-ideas&#34;&gt;Frighteningly Ambitious Startup Ideas&lt;/h1&gt;&#xA;&lt;p&gt;March 2012&lt;/p&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;One of the more surprising things I&amp;rsquo;ve noticed while working on Y Combinator is how frightening the most ambitious startup ideas are. In this essay I&amp;rsquo;m going to demonstrate this phenomenon by describing some. Any one of them could make you a billionaire. That might sound like an attractive prospect, and yet when I describe these ideas you may notice you find yourself shrinking away from them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Good and Bad Procrastination</title>
      <link>https://linguage.github.io/paul_graham/essays_en/procrastination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/procrastination/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/procrastination.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;good-and-bad-procrastination&#34;&gt;Good and Bad Procrastination&lt;/h1&gt;&#xA;&lt;p&gt;December 2005&lt;/p&gt;&#xA;&lt;p&gt;The most impressive people I know are all terrible procrastinators. So could it be that procrastination isn&amp;rsquo;t always bad?&lt;/p&gt;&#xA;&lt;p&gt;Most people who write about procrastination write about how to cure it. But this is, strictly speaking, impossible. There are an infinite number of things you could be doing. No matter what you work on, you&amp;rsquo;re not working on everything else. So the question is not how to avoid procrastination, but how to procrastinate well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Good Writing</title>
      <link>https://linguage.github.io/paul_graham/essays_en/goodwriting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/goodwriting/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/goodwriting.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;good-writing&#34;&gt;Good Writing&lt;/h1&gt;&#xA;&lt;p&gt;May 2025&lt;/p&gt;&#xA;&lt;p&gt;There are two senses in which writing can be good: it can sound good, and the ideas can be right. It can have nice, flowing sentences, and it can draw correct conclusions about important things. It might seem as if these two kinds of good would be unrelated, like the speed of a car and the color it&amp;rsquo;s painted. And yet I don&amp;rsquo;t think they are. I think writing that sounds good is more likely to be right.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Great Hackers</title>
      <link>https://linguage.github.io/paul_graham/essays_en/gh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/gh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/gh.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;great-hackers&#34;&gt;Great Hackers&lt;/h1&gt;&#xA;&lt;p&gt;July 2004&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at Oscon 2004.)&lt;/p&gt;&#xA;&lt;p&gt;A few months ago I finished a new book, and in reviews I keep noticing words like &amp;ldquo;provocative&amp;rsquo;&amp;rsquo; and &amp;ldquo;controversial.&amp;rsquo;&amp;rsquo; To say nothing of &amp;ldquo;idiotic.&#39;&#39;&lt;/p&gt;&#xA;&lt;p&gt;I didn&amp;rsquo;t mean to make the book controversial. I was trying to make it efficient. I didn&amp;rsquo;t want to waste people&amp;rsquo;s time telling them things they already knew. It&amp;rsquo;s more efficient just to give them the diffs. But I suppose that&amp;rsquo;s bound to yield an alarming book.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Growth</title>
      <link>https://linguage.github.io/paul_graham/essays_en/growth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/growth/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/growth.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;growth&#34;&gt;Growth&lt;/h1&gt;&#xA;&lt;p&gt;Startup = Growth&lt;/p&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;September 2012&lt;/p&gt;&#xA;&lt;p&gt;A startup is a company designed to grow fast. Being newly founded does not in itself make a company a startup. Nor is it necessary for a startup to work on technology, or take venture funding, or have some sort of &amp;ldquo;exit.&amp;rdquo; The only essential thing is growth. Everything else we associate with startups follows from growth.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hackers and Painters</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hp.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;hackers-and-painters&#34;&gt;Hackers and Painters&lt;/h1&gt;&#xA;&lt;p&gt;May 2003&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a guest lecture at Harvard, which incorporated an earlier talk at Northeastern.)&lt;/p&gt;&#xA;&lt;p&gt;When I finished grad school in computer science I went to art school to study painting. A lot of people seemed surprised that someone interested in computers would also be interested in painting. They seemed to think that hacking and painting were very different kinds of work&amp;ndash; that hacking was cold, precise, and methodical, and that painting was the frenzied expression of some primal urge.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Haters</title>
      <link>https://linguage.github.io/paul_graham/essays_en/fh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/fh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/fh.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;haters&#34;&gt;Haters&lt;/h1&gt;&#xA;&lt;p&gt;January 2020&lt;/p&gt;&#xA;&lt;p&gt;(I originally intended this for startup founders, who are often surprised by the attention they get as their companies grow, but it applies equally to anyone who becomes famous.)&lt;/p&gt;&#xA;&lt;p&gt;If you become sufficiently famous, you&amp;rsquo;ll acquire some fans who like you too much. These people are sometimes called &amp;ldquo;fanboys,&amp;rdquo; and though I dislike that term, I&amp;rsquo;m going to have to use it here. We need some word for them, because this is a distinct phenomenon from someone simply liking your work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Having Kids</title>
      <link>https://linguage.github.io/paul_graham/essays_en/kids/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/kids/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/kids.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;having-kids&#34;&gt;Having Kids&lt;/h1&gt;&#xA;&lt;p&gt;December 2019&lt;/p&gt;&#xA;&lt;p&gt;Before I had kids, I was afraid of having kids. Up to that point I felt about kids the way the young Augustine felt about living virtuously. I&amp;rsquo;d have been sad to think I&amp;rsquo;d never have children. But did I want them now? No.&lt;/p&gt;&#xA;&lt;p&gt;If I had kids, I&amp;rsquo;d become a parent, and parents, as I&amp;rsquo;d known since I was a kid, were uncool. They were dull and responsible and had no fun. And while it&amp;rsquo;s not surprising that kids would believe that, to be honest I hadn&amp;rsquo;t seen much as an adult to change my mind. Whenever I&amp;rsquo;d noticed parents with kids, the kids seemed to be terrors, and the parents pathetic harried creatures, even when they prevailed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Heresy</title>
      <link>https://linguage.github.io/paul_graham/essays_en/heresy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/heresy/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/heresy.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;heresy&#34;&gt;Heresy&lt;/h1&gt;&#xA;&lt;p&gt;April 2022&lt;/p&gt;&#xA;&lt;p&gt;One of the most surprising things I&amp;rsquo;ve witnessed in my lifetime is the rebirth of the concept of heresy.&lt;/p&gt;&#xA;&lt;p&gt;In his excellent biography of Newton, Richard Westfall writes about the moment when he was elected a fellow of Trinity College: &amp;ldquo;Supported comfortably, Newton was free to devote himself wholly to whatever he chose. To remain on, he had only to avoid the three unforgivable sins: crime, heresy, and marriage.&amp;rdquo; [1] The first time I read that, in the 1990s, it sounded amusingly medieval. How strange, to have to avoid committing heresy. But when I reread it 20 years later it sounded like a description of contemporary employment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>High Resolution Fundraising</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hiresfund/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hiresfund/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hiresfund.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;high-resolution-fundraising&#34;&gt;High Resolution Fundraising&lt;/h1&gt;&#xA;&lt;p&gt;September 2010&lt;/p&gt;&#xA;&lt;p&gt;The reason startups have been using more convertible notes in angel rounds is that they make deals close faster. By making it easier for startups to give different prices to different investors, they help them break the sort of deadlock that happens when investors all wait to see who else is going to invest.&lt;/p&gt;&#xA;&lt;p&gt;By far the biggest influence on investors&amp;rsquo; opinions of a startup is the opinion of other investors. There are very, very few who simply decide for themselves. Any startup founder can tell you the most common question they hear from investors is not about the founders or the product, but &amp;ldquo;who else is investing?&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hiring is Obsolete</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hiring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hiring/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hiring.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;hiring-is-obsolete&#34;&gt;Hiring is Obsolete&lt;/h1&gt;&#xA;&lt;p&gt;May 2005&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at the Berkeley CSUA.)&lt;/p&gt;&#xA;&lt;p&gt;The three big powers on the Internet now are Yahoo, Google, and Microsoft. Average age of their founders: 24. So it is pretty well established now that grad students can start successful companies. And if grad students can do it, why not undergrads?&lt;/p&gt;&#xA;&lt;p&gt;Like everything else in technology, the cost of starting a startup has decreased dramatically. Now it&amp;rsquo;s so low that it has disappeared into the noise. The main cost of starting a Web-based startup is food and rent. Which means it doesn&amp;rsquo;t cost much more to start a company than to be a total slacker. You can probably start a startup on ten thousand dollars of seed funding, if you&amp;rsquo;re prepared to live on ramen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Holding a Program in One&#39;s Head</title>
      <link>https://linguage.github.io/paul_graham/essays_en/head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/head/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/head.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;holding-a-program-in-ones-head&#34;&gt;Holding a Program in One&amp;rsquo;s Head&lt;/h1&gt;&#xA;&lt;p&gt;August 2007&lt;/p&gt;&#xA;&lt;p&gt;A good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he&amp;rsquo;s working on. Mathematicians don&amp;rsquo;t answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head, and you can manipulate it at will.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Art Can Be Good</title>
      <link>https://linguage.github.io/paul_graham/essays_en/goodart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/goodart/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/goodart.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-art-can-be-good&#34;&gt;How Art Can Be Good&lt;/h1&gt;&#xA;&lt;p&gt;December 2006&lt;/p&gt;&#xA;&lt;p&gt;I grew up believing that taste is just a matter of personal preference. Each person has things they like, but no one&amp;rsquo;s preferences are any better than anyone else&amp;rsquo;s. There is no such thing as good taste.&lt;/p&gt;&#xA;&lt;p&gt;Like a lot of things I grew up believing, this turns out to be false, and I&amp;rsquo;m going to try to explain why.&lt;/p&gt;&#xA;&lt;p&gt;One problem with saying there&amp;rsquo;s no such thing as good taste is that it also means there&amp;rsquo;s no such thing as good art. If there were good art, then people who liked it would have better taste than people who didn&amp;rsquo;t. So if you discard taste, you also have to discard the idea of art being good, and artists being good at making it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Not to Die</title>
      <link>https://linguage.github.io/paul_graham/essays_en/die/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/die/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/die.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-not-to-die&#34;&gt;How Not to Die&lt;/h1&gt;&#xA;&lt;p&gt;August 2007&lt;/p&gt;&#xA;&lt;p&gt;(This is a talk I gave at the last Y Combinator dinner of the summer. Usually we don&amp;rsquo;t have a speaker at the last dinner; it&amp;rsquo;s more of a party. But it seemed worth spoiling the atmosphere if I could save some of the startups from preventable deaths. So at the last minute I cooked up this rather grim talk. I didn&amp;rsquo;t mean this as an essay; I wrote it down because I only had two hours before dinner and think fastest while writing.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>How People Get Rich Now</title>
      <link>https://linguage.github.io/paul_graham/essays_en/richnow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/richnow/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/richnow.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-people-get-rich-now&#34;&gt;How People Get Rich Now&lt;/h1&gt;&#xA;&lt;p&gt;April 2021&lt;/p&gt;&#xA;&lt;p&gt;Every year since 1982, Forbes magazine has published a list of the richest Americans. If we compare the 100 richest people in 1982 to the 100 richest in 2020, we notice some big differences.&lt;/p&gt;&#xA;&lt;p&gt;In 1982 the most common source of wealth was inheritance. Of the 100 richest people, 60 inherited from an ancestor. There were 10 du Pont heirs alone. By 2020 the number of heirs had been cut in half, accounting for only 27 of the biggest 100 fortunes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Be an Angel Investor</title>
      <link>https://linguage.github.io/paul_graham/essays_en/angelinvesting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/angelinvesting/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/angelinvesting.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-be-an-angel-investor&#34;&gt;How to Be an Angel Investor&lt;/h1&gt;&#xA;&lt;p&gt;March 2009&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at AngelConf.)&lt;/p&gt;&#xA;&lt;p&gt;When we sold our startup in 1998 I thought one day I&amp;rsquo;d do some angel investing. Seven years later I still hadn&amp;rsquo;t started. I put it off because it seemed mysterious and complicated. It turns out to be easier than I expected, and also more interesting.&lt;/p&gt;&#xA;&lt;p&gt;The part I thought was hard, the mechanics of investing, really isn&amp;rsquo;t. You give a startup money and they give you stock. You&amp;rsquo;ll probably get either preferred stock, which means stock with extra rights like getting your money back first in a sale, or convertible debt, which means (on paper) you&amp;rsquo;re lending the company money, and the debt converts to stock at the next sufficiently big funding round. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Be an Expert in a Changing World</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ecw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ecw/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ecw.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-be-an-expert-in-a-changing-world&#34;&gt;How to Be an Expert in a Changing World&lt;/h1&gt;&#xA;&lt;p&gt;December 2014&lt;/p&gt;&#xA;&lt;p&gt;If the world were static, we could have monotonically increasing confidence in our beliefs. The more (and more varied) experience a belief survived, the less likely it would be false. Most people implicitly believe something like this about their opinions. And they&amp;rsquo;re justified in doing so with opinions about things that don&amp;rsquo;t change much, like human nature. But you can&amp;rsquo;t trust your opinions in the same way about things that change, which could include practically everything else.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Disagree</title>
      <link>https://linguage.github.io/paul_graham/essays_en/disagree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/disagree/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/disagree.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-disagree&#34;&gt;How to Disagree&lt;/h1&gt;&#xA;&lt;p&gt;March 2008&lt;/p&gt;&#xA;&lt;p&gt;The web is turning writing into a conversation. Twenty years ago, writers wrote and readers read. The web lets readers respond, and increasingly they do—in comment threads, on forums, and in their own blog posts.&lt;/p&gt;&#xA;&lt;p&gt;Many who respond to something disagree with it. That&amp;rsquo;s to be expected. Agreeing tends to motivate people less than disagreeing. And when you agree there&amp;rsquo;s less to say. You could expand on something the author said, but he has probably already explored the most interesting implications. When you disagree you&amp;rsquo;re entering territory he may not have explored.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Do Great Work</title>
      <link>https://linguage.github.io/paul_graham/essays_en/greatwork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/greatwork/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/greatwork.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-do-great-work&#34;&gt;How to Do Great Work&lt;/h1&gt;&#xA;&lt;p&gt;July 2023&lt;/p&gt;&#xA;&lt;p&gt;If you collected lists of techniques for doing great work in a lot of different fields, what would the intersection look like? I decided to find out by making it.&lt;/p&gt;&#xA;&lt;p&gt;Partly my goal was to create a guide that could be used by someone working in any field. But I was also curious about the shape of the intersection. And one thing this exercise shows is that it does have a definite shape; it&amp;rsquo;s not just a point labelled &amp;ldquo;work hard.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Do Philosophy</title>
      <link>https://linguage.github.io/paul_graham/essays_en/philosophy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/philosophy/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/philosophy.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-do-philosophy&#34;&gt;How to Do Philosophy&lt;/h1&gt;&#xA;&lt;p&gt;September 2007&lt;/p&gt;&#xA;&lt;p&gt;In high school I decided I was going to study philosophy in college. I had several motives, some more honorable than others. One of the less honorable was to shock people. College was regarded as job training where I grew up, so studying philosophy seemed an impressively impractical thing to do. Sort of like slashing holes in your clothes or putting a safety pin through your ear, which were other forms of impressive impracticality then just coming into fashion.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Do What You Love</title>
      <link>https://linguage.github.io/paul_graham/essays_en/love/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/love/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/love.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-do-what-you-love&#34;&gt;How to Do What You Love&lt;/h1&gt;&#xA;&lt;p&gt;January 2006&lt;/p&gt;&#xA;&lt;p&gt;To do something well you have to like it. That idea is not exactly novel. We&amp;rsquo;ve got it down to four words: &amp;ldquo;Do what you love.&amp;rdquo; But it&amp;rsquo;s not enough just to tell people that. Doing what you love is complicated.&lt;/p&gt;&#xA;&lt;p&gt;The very idea is foreign to what most of us learn as kids. When I was a kid, it seemed as if work and fun were opposites by definition. Life had two states: some of the time adults were making you do things, and that was called work; the rest of the time you could do what you wanted, and that was called playing. Occasionally the things adults made you do were fun, just as, occasionally, playing wasn&amp;rsquo;t — for example, if you fell and hurt yourself. But except for these few anomalous cases, work was pretty much defined as not-fun.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Get New Ideas</title>
      <link>https://linguage.github.io/paul_graham/essays_en/getideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/getideas/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/getideas.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-get-new-ideas&#34;&gt;How to Get New Ideas&lt;/h1&gt;&#xA;&lt;p&gt;January 2023&lt;/p&gt;&#xA;&lt;p&gt;(Someone fed my essays into GPT to make something that could answer questions based on them, then asked it where good ideas come from. The answer was ok, but not what I would have said. This is what I would have said.)&lt;/p&gt;&#xA;&lt;p&gt;The way to get new ideas is to notice anomalies: what seems strange, or missing, or broken? You can see anomalies in everyday life (much of standup comedy is based on this), but the best place to look for them is at the frontiers of knowledge.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Make Pittsburgh a Startup Hub</title>
      <link>https://linguage.github.io/paul_graham/essays_en/pgh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/pgh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/pgh.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-make-pittsburgh-a-startup-hub&#34;&gt;How to Make Pittsburgh a Startup Hub&lt;/h1&gt;&#xA;&lt;p&gt;April 2016&lt;/p&gt;&#xA;&lt;p&gt;(This is a talk I gave at an event called Opt412 in Pittsburgh. Much of it will apply to other towns. But not all, because as I say in the talk, Pittsburgh has some important advantages over most would-be startup hubs.)&lt;/p&gt;&#xA;&lt;p&gt;What would it take to make Pittsburgh into a startup hub, like Silicon Valley? I understand Pittsburgh pretty well, because I grew up here, in Monroeville. And I understand Silicon Valley pretty well because that&amp;rsquo;s where I live now. Could you get that kind of startup ecosystem going here?&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Present to Investors</title>
      <link>https://linguage.github.io/paul_graham/essays_en/investors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/investors/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/investors.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-present-to-investors&#34;&gt;How to Present to Investors&lt;/h1&gt;&#xA;&lt;p&gt;August 2006&lt;/p&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;In a few days it will be Demo Day, when the startups we funded this summer present to investors. Y Combinator funds startups twice a year, in January and June. Ten weeks later we invite all the investors we know to hear them present what they&amp;rsquo;ve built so far.&lt;/p&gt;&#xA;&lt;p&gt;Ten weeks is not much time. The average startup probably doesn&amp;rsquo;t have much to show for itself after ten weeks. But the average startup fails. When you look at the ones that went on to do great things, you find a lot that began with someone pounding out a prototype in a week or two of nonstop work. Startups are a counterexample to the rule that haste makes waste.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Raise Money</title>
      <link>https://linguage.github.io/paul_graham/essays_en/fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/fr/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/fr.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-raise-money&#34;&gt;How to Raise Money&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;September 2013&lt;/p&gt;&#xA;&lt;p&gt;Most startups that raise money do it more than once. A typical trajectory might be (1) to get started with a few tens of thousands from something like Y Combinator or individual angels, then (2) raise a few hundred thousand to a few million to build the company, and then (3) once the company is clearly succeeding, raise one or more later rounds to accelerate growth.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Start Google</title>
      <link>https://linguage.github.io/paul_graham/essays_en/google/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/google/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/google.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-start-google&#34;&gt;How to Start Google&lt;/h1&gt;&#xA;&lt;p&gt;March 2024&lt;/p&gt;&#xA;&lt;p&gt;(This is a talk I gave to 14 and 15 year olds about what to do now if they might want to start a startup later. Lots of schools think they should tell students something about startups. This is what I think they should tell them.)&lt;/p&gt;&#xA;&lt;p&gt;Most of you probably think that when you&amp;rsquo;re released into the so-called real world you&amp;rsquo;ll eventually have to get some kind of job. That&amp;rsquo;s not true, and today I&amp;rsquo;m going to talk about a trick you can use to avoid ever having to get a job.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Work Hard</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hwh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hwh/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hwh.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-to-work-hard&#34;&gt;How to Work Hard&lt;/h1&gt;&#xA;&lt;p&gt;June 2021&lt;/p&gt;&#xA;&lt;p&gt;It might not seem there&amp;rsquo;s much to learn about how to work hard. Anyone who&amp;rsquo;s been to school knows what it entails, even if they chose not to do it. There are 12 year olds who work amazingly hard. And yet when I ask if I know more about working hard now than when I was in school, the answer is definitely yes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How You Know</title>
      <link>https://linguage.github.io/paul_graham/essays_en/know/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/know/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/know.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-you-know&#34;&gt;How You Know&lt;/h1&gt;&#xA;&lt;p&gt;December 2014&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve read Villehardouin&amp;rsquo;s chronicle of the Fourth Crusade at least two times, maybe three. And yet if I had to write down everything I remember from it, I doubt it would amount to much more than a page. Multiply this times several hundred, and I get an uneasy feeling when I look at my bookshelves. What use is it to read all these books if I remember so little from them?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ideas for Startups</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ideas/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ideas.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ideas-for-startups&#34;&gt;Ideas for Startups&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;October 2005&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at the 2005 Startup School.)&lt;/p&gt;&#xA;&lt;p&gt;How do you get good ideas for startups? That&amp;rsquo;s probably the number one question people ask me.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;d like to reply with another question: why do people think it&amp;rsquo;s hard to come up with ideas for startups?&lt;/p&gt;&#xA;&lt;p&gt;That might seem a stupid thing to ask. Why do they think it&amp;rsquo;s hard? If people can&amp;rsquo;t do it, then it is hard, at least for them. Right?&lt;/p&gt;</description>
    </item>
    <item>
      <title>If Lisp is So Great</title>
      <link>https://linguage.github.io/paul_graham/essays_en/iflisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/iflisp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/iflisp.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;if-lisp-is-so-great&#34;&gt;If Lisp is So Great&lt;/h1&gt;&#xA;&lt;p&gt;May 2003&lt;/p&gt;&#xA;&lt;p&gt;If Lisp is so great, why don&amp;rsquo;t more people use it? I was asked this question by a student in the audience at a talk I gave recently. Not for the first time, either.&lt;/p&gt;&#xA;&lt;p&gt;In languages, as in so many things, there&amp;rsquo;s not much correlation between popularity and quality. Why does John Grisham (King of Torts sales rank, 44) outsell Jane Austen (Pride and Prejudice sales rank, 6191)? Would even Grisham claim that it&amp;rsquo;s because he&amp;rsquo;s a better writer?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inequality</title>
      <link>https://linguage.github.io/paul_graham/essays_en/inequality/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/inequality/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/inequality.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;inequality&#34;&gt;Inequality&lt;/h1&gt;&#xA;&lt;p&gt;August 2005&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at Defcon 2005.)&lt;/p&gt;&#xA;&lt;p&gt;Suppose you wanted to get rid of economic inequality. There are two ways to do it: give money to the poor, or take it away from the rich. But they amount to the same thing, because if you want to give money to the poor, you have to get it from somewhere. You can&amp;rsquo;t get it from the poor, or they just end up where they started. You have to get it from the rich.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to ANSI Common Lisp</title>
      <link>https://linguage.github.io/paul_graham/essays_en/acl1txtt1748944359/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/acl1txtt1748944359/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/acl1txtt1748944359.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introduction-to-ansi-common-lisp&#34;&gt;Introduction to ANSI Common Lisp&lt;/h1&gt;&#xA;&lt;p&gt;Introduction to ANSI Common Lisp&lt;/p&gt;&#xA;&lt;p&gt;(This is the first chapter of ANSI Common Lisp, by Paul Graham. Copyright 1995, Prentice-Hall.)&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;John McCarthy and his students began work on the first Lisp implementation in 1958. After Fortran, Lisp is the oldest language still in use. [1] What&amp;rsquo;s more remarkable is that it is still in the forefront of programming language technology. Programmers who know Lisp will tell you, there is something about this language that sets it apart.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Investor Herd Dynamics</title>
      <link>https://linguage.github.io/paul_graham/essays_en/herd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/herd/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/herd.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;investor-herd-dynamics&#34;&gt;Investor Herd Dynamics&lt;/h1&gt;&#xA;&lt;p&gt;August 2013&lt;/p&gt;&#xA;&lt;p&gt;The biggest component in most investors&amp;rsquo; opinion of you is the opinion of other investors. Which is of course a recipe for exponential growth. When one investor wants to invest in you, that makes other investors want to, which makes others want to, and so on.&lt;/p&gt;&#xA;&lt;p&gt;Sometimes inexperienced founders mistakenly conclude that manipulating these forces is the essence of fundraising. They hear stories about stampedes to invest in successful startups, and think it&amp;rsquo;s therefore the mark of a successful startup to have this happen. But actually the two are not that highly correlated. Lots of startups that cause stampedes end up flaming out (in extreme cases, partly as a result of the stampede), and lots of very successful startups were only moderately popular with investors the first time they raised money.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Is There Such a Thing as Good Taste?</title>
      <link>https://linguage.github.io/paul_graham/essays_en/goodtaste/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/goodtaste/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/goodtaste.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;is-there-such-a-thing-as-good-taste&#34;&gt;Is There Such a Thing as Good Taste?&lt;/h1&gt;&#xA;&lt;p&gt;November 2021&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at the Cambridge Union.)&lt;/p&gt;&#xA;&lt;p&gt;When I was a kid, I&amp;rsquo;d have said there wasn&amp;rsquo;t. My father told me so. Some people like some things, and other people like other things, and who&amp;rsquo;s to say who&amp;rsquo;s right?&lt;/p&gt;&#xA;&lt;p&gt;It seemed so obvious that there was no such thing as good taste that it was only through indirect evidence that I realized my father was wrong. And that&amp;rsquo;s what I&amp;rsquo;m going to give you here: a proof by reductio ad absurdum. If we start from the premise that there&amp;rsquo;s no such thing as good taste, we end up with conclusions that are obviously false, and therefore the premise must be wrong.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java&#39;s Cover</title>
      <link>https://linguage.github.io/paul_graham/essays_en/javacover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/javacover/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/javacover.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;javas-cover&#34;&gt;Java&amp;rsquo;s Cover&lt;/h1&gt;&#xA;&lt;p&gt;April 2001&lt;/p&gt;&#xA;&lt;p&gt;This essay developed out of conversations I&amp;rsquo;ve had with several other programmers about why Java smelled suspicious. It&amp;rsquo;s not a critique of Java! It is a case study of hacker&amp;rsquo;s radar.&lt;/p&gt;&#xA;&lt;p&gt;Over time, hackers develop a nose for good (and bad) technology. I thought it might be interesting to try and write down what made Java seem suspect to me.&lt;/p&gt;&#xA;&lt;p&gt;Some people who&amp;rsquo;ve read this think it&amp;rsquo;s an interesting attempt to write about something that hasn&amp;rsquo;t been written about before. Others say I will get in trouble for appearing to be writing about things I don&amp;rsquo;t understand. So, just in case it does any good, let me clarify that I&amp;rsquo;m not writing here about Java (which I have never used) but about hacker&amp;rsquo;s radar (which I have thought about a lot).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jessica Livingston</title>
      <link>https://linguage.github.io/paul_graham/essays_en/jessica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/jessica/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/jessica.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;jessica-livingston&#34;&gt;Jessica Livingston&lt;/h1&gt;&#xA;&lt;p&gt;November 2015&lt;/p&gt;&#xA;&lt;p&gt;A few months ago an article about Y Combinator said that early on it had been a &amp;ldquo;one-man show.&amp;rdquo; It&amp;rsquo;s sadly common to read that sort of thing. But the problem with that description is not just that it&amp;rsquo;s unfair. It&amp;rsquo;s also misleading. Much of what&amp;rsquo;s most novel about YC is due to Jessica Livingston. If you don&amp;rsquo;t understand her, you don&amp;rsquo;t understand YC. So let me tell you a little about Jessica.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Keep Your Identity Small</title>
      <link>https://linguage.github.io/paul_graham/essays_en/identity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/identity/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/identity.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;keep-your-identity-small&#34;&gt;Keep Your Identity Small&lt;/h1&gt;&#xA;&lt;p&gt;February 2009&lt;/p&gt;&#xA;&lt;p&gt;I finally realized today why politics and religion yield such uniquely useless discussions.&lt;/p&gt;&#xA;&lt;p&gt;As a rule, any mention of religion on an online forum degenerates into a religious argument. Why? Why does this happen with religion and not with Javascript or baking or other topics people talk about on forums?&lt;/p&gt;&#xA;&lt;p&gt;What&amp;rsquo;s different about religion is that people don&amp;rsquo;t feel they need to have any particular expertise to have opinions about it. All they need is strongly held beliefs, and anyone can have those. No thread about Javascript will grow as fast as one about religion, because people feel they have to be over some threshold of expertise to post comments about that. But on religion everyone&amp;rsquo;s an expert.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Laundry</title>
      <link>https://linguage.github.io/paul_graham/essays_en/laundry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/laundry/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/laundry.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;laundry&#34;&gt;Laundry&lt;/h1&gt;&#xA;&lt;p&gt;A Version 1.0&lt;/p&gt;&#xA;&lt;p&gt;October 2004&lt;/p&gt;&#xA;&lt;p&gt;As E. B. White said, &amp;ldquo;good writing is rewriting.&amp;rdquo; I didn&amp;rsquo;t realize this when I was in school. In writing, as in math and science, they only show you the finished product. You don&amp;rsquo;t see all the false starts. This gives students a misleading view of how things get made.&lt;/p&gt;&#xA;&lt;p&gt;Part of the reason it happens is that writers don&amp;rsquo;t want people to see their mistakes. But I&amp;rsquo;m willing to let people see an early draft if it will show how much you have to rewrite to beat an essay into shape.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning from Founders</title>
      <link>https://linguage.github.io/paul_graham/essays_en/foundersatwork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/foundersatwork/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/foundersatwork.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;learning-from-founders&#34;&gt;Learning from Founders&lt;/h1&gt;&#xA;&lt;p&gt;January 2007&lt;/p&gt;&#xA;&lt;p&gt;(Foreword to Jessica Livingston&amp;rsquo;s Founders at Work.)&lt;/p&gt;&#xA;&lt;p&gt;Apparently sprinters reach their highest speed right out of the blocks, and spend the rest of the race slowing down. The winners slow down the least. It&amp;rsquo;s that way with most startups too. The earliest phase is usually the most productive. That&amp;rsquo;s when they have the really big ideas. Imagine what Apple was like when 100% of its employees were either Steve Jobs or Steve Wozniak.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lesson</title>
      <link>https://linguage.github.io/paul_graham/essays_en/lesson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/lesson/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/lesson.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;lesson&#34;&gt;Lesson&lt;/h1&gt;&#xA;&lt;h2 id=&#34;the-lesson-to-unlearn&#34;&gt;The Lesson to Unlearn&lt;/h2&gt;&#xA;&lt;p&gt;December 2019&lt;/p&gt;&#xA;&lt;p&gt;The most damaging thing you learned in school wasn&amp;rsquo;t something you learned in any specific class. It was learning to get good grades.&lt;/p&gt;&#xA;&lt;p&gt;When I was in college, a particularly earnest philosophy grad student once told me that he never cared what grade he got in a class, only what he learned in it. This stuck in my mind because it was the only time I ever heard anyone say such a thing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let the Other 95% of Great Programmers In</title>
      <link>https://linguage.github.io/paul_graham/essays_en/95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/95/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/95.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;let-the-other-95-of-great-programmers-in&#34;&gt;Let the Other 95% of Great Programmers In&lt;/h1&gt;&#xA;&lt;p&gt;Let the Other 95% of Great Programmers In December 2014&lt;/p&gt;&#xA;&lt;p&gt;American technology companies want the government to make immigration easier because they say they can&amp;rsquo;t find enough programmers in the US. Anti-immigration people say that instead of letting foreigners take these jobs, we should train more Americans to be programmers. Who&amp;rsquo;s right?&lt;/p&gt;&#xA;&lt;p&gt;The technology companies are right. What the anti-immigration people don&amp;rsquo;t understand is that there is a huge variation in ability between competent programmers and exceptional ones, and while you can train people to be competent, you can&amp;rsquo;t train them to be exceptional. Exceptional programmers have an aptitude for and interest in programming that is not merely the product of training. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lies We Tell Kids</title>
      <link>https://linguage.github.io/paul_graham/essays_en/lies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/lies/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/lies.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;lies-we-tell-kids&#34;&gt;Lies We Tell Kids&lt;/h1&gt;&#xA;&lt;p&gt;May 2008&lt;/p&gt;&#xA;&lt;p&gt;Adults lie constantly to kids. I&amp;rsquo;m not saying we should stop, but I think we should at least examine which lies we tell and why.&lt;/p&gt;&#xA;&lt;p&gt;There may also be a benefit to us. We were all lied to as kids, and some of the lies we were told still affect us. So by studying the ways adults lie to kids, we may be able to clear our heads of lies we were told.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lisp for Web-Based Applications</title>
      <link>https://linguage.github.io/paul_graham/essays_en/lwba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/lwba/</guid>
      <description>&lt;h1 id=&#34;lisp-for-web-based-applications&#34;&gt;Lisp for Web-Based Applications&lt;/h1&gt;&#xA;&lt;p&gt;After a link to Beating the Averages was posted on slashdot, some readers wanted to hear in more detail about the specific technical advantages we got from using Lisp in Viaweb. For those who are interested, here are some excerpts from a talk I gave in April 2001 at BBN Labs in Cambridge, MA.&lt;/p&gt;&#xA;&lt;p&gt;BBN Talk Excerpts (ASCII)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maker&#39;s Schedule, Manager&#39;s Schedule</title>
      <link>https://linguage.github.io/paul_graham/essays_en/makersschedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/makersschedule/</guid>
      <description>&lt;h1 id=&#34;makers-schedule-managers-schedule&#34;&gt;Maker&amp;rsquo;s Schedule, Manager&amp;rsquo;s Schedule&lt;/h1&gt;&#xA;&lt;p&gt;July 2009&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;&amp;hellip;the mere consciousness of an engagement will sometimes worry a whole day.&amp;rdquo;&#xA;– Charles Dickens&lt;/p&gt;&#xA;&lt;p&gt;One reason programmers dislike meetings so much is that they&amp;rsquo;re on a different type of schedule from other people. Meetings cost them more.&lt;/p&gt;&#xA;&lt;p&gt;There are two types of schedule, which I&amp;rsquo;ll call the manager&amp;rsquo;s schedule and the maker&amp;rsquo;s schedule. The manager&amp;rsquo;s schedule is for bosses. It&amp;rsquo;s embodied in the traditional appointment book, with each day cut into one hour intervals. You can block off several hours for a single task if you need to, but by default you change what you&amp;rsquo;re doing every hour.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maybe</title>
      <link>https://linguage.github.io/paul_graham/essays_en/maybe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/maybe/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/maybe.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;maybe&#34;&gt;Maybe&lt;/h1&gt;&#xA;&lt;p&gt;February 2009&lt;/p&gt;&#xA;&lt;p&gt;A lot of cities look at Silicon Valley and ask &amp;ldquo;How could we make something like that happen here?&amp;rdquo; The organic way to do it is to establish a first-rate university in a place where rich people want to live. That&amp;rsquo;s how Silicon Valley happened. But could you shortcut the process by funding startups?&lt;/p&gt;&#xA;&lt;p&gt;Possibly. Let&amp;rsquo;s consider what it would take.&lt;/p&gt;&#xA;&lt;p&gt;The first thing to understand is that encouraging startups is a different problem from encouraging startups in a particular city. The latter is much more expensive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mean</title>
      <link>https://linguage.github.io/paul_graham/essays_en/mean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/mean/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/mean.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mean&#34;&gt;Mean&lt;/h1&gt;&#xA;&lt;p&gt;November 2014&lt;/p&gt;&#xA;&lt;p&gt;It struck me recently how few of the most successful people I know are mean. There are exceptions, but remarkably few.&lt;/p&gt;&#xA;&lt;p&gt;Meanness isn&amp;rsquo;t rare. In fact, one of the things the internet has shown us is how mean people can be. A few decades ago, only famous people and professional writers got to publish their opinions. Now everyone can, and we can all see the long tail of meanness that had previously been hidden.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microsoft is Dead</title>
      <link>https://linguage.github.io/paul_graham/essays_en/microsoft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/microsoft/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/microsoft.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;microsoft-is-dead&#34;&gt;Microsoft is Dead&lt;/h1&gt;&#xA;&lt;p&gt;April 2007&lt;/p&gt;&#xA;&lt;p&gt;A few days ago I suddenly realized Microsoft was dead. I was talking to a young startup founder about how Google was different from Yahoo. I said that Yahoo had been warped from the start by their fear of Microsoft. That was why they&amp;rsquo;d positioned themselves as a &amp;ldquo;media company&amp;rdquo; instead of a technology company. Then I looked at his face and realized he didn&amp;rsquo;t understand. It was as if I&amp;rsquo;d told him how much girls liked Barry Manilow in the mid 80s. Barry who? Microsoft? He didn&amp;rsquo;t say anything, but I could tell he didn&amp;rsquo;t quite believe anyone would be frightened of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mind the Gap</title>
      <link>https://linguage.github.io/paul_graham/essays_en/gap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/gap/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/gap.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;mind-the-gap&#34;&gt;Mind the Gap&lt;/h1&gt;&#xA;&lt;p&gt;May 2004&lt;/p&gt;&#xA;&lt;p&gt;When people care enough about something to do it well, those who do it best tend to be far better than everyone else. There&amp;rsquo;s a huge gap between Leonardo and second-rate contemporaries like Borgognone. You see the same gap between Raymond Chandler and the average writer of detective novels. A top-ranked professional chess player could play ten thousand games against an ordinary club player without losing once.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mod</title>
      <link>https://linguage.github.io/paul_graham/essays_en/mod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/mod/</guid>
      <description>&lt;h1 id=&#34;mod&#34;&gt;Mod&lt;/h1&gt;&#xA;&lt;h2 id=&#34;the-two-kinds-of-moderate&#34;&gt;The Two Kinds of Moderate&lt;/h2&gt;&#xA;&lt;p&gt;December 2019&lt;/p&gt;&#xA;&lt;p&gt;There are two distinct ways to be politically moderate: on purpose and by accident. Intentional moderates are trimmers, deliberately choosing a position mid-way between the extremes of right and left. Accidental moderates end up in the middle, on average, because they make up their own minds about each question, and the far right and far left are roughly equally wrong.&lt;/p&gt;&#xA;&lt;p&gt;You can distinguish intentional from accidental moderates by the distribution of their opinions. If the far left opinion on some matter is 0 and the far right opinion 100, an intentional moderate&amp;rsquo;s opinion on every question will be near 50. Whereas an accidental moderate&amp;rsquo;s opinions will be scattered over a broad range, but will, like those of the intentional moderate, average to about 50.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Not Not</title>
      <link>https://linguage.github.io/paul_graham/essays_en/notnot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/notnot/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/notnot.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;not-not&#34;&gt;Not Not&lt;/h1&gt;&#xA;&lt;p&gt;March 2007&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from talks at the 2007 Startup School and the Berkeley CSUA.)&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ve now been doing Y Combinator long enough to have some data about success rates. Our first batch, in the summer of 2005, had eight startups in it. Of those eight, it now looks as if at least four succeeded. Three have been acquired: Reddit was a merger of two, Reddit and Infogami, and a third was acquired that we can&amp;rsquo;t talk about yet. Another from that batch was Loopt, which is doing so well they could probably be acquired in about ten minutes if they wanted to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Novelty and Heresy</title>
      <link>https://linguage.github.io/paul_graham/essays_en/nov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/nov/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/nov.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;novelty-and-heresy&#34;&gt;Novelty and Heresy&lt;/h1&gt;&#xA;&lt;p&gt;November 2019&lt;/p&gt;&#xA;&lt;p&gt;If you discover something new, there&amp;rsquo;s a significant chance you&amp;rsquo;ll be accused of some form of heresy.&lt;/p&gt;&#xA;&lt;p&gt;To discover new things, you have to work on ideas that are good but non-obvious; if an idea is obviously good, other people are probably already working on it. One common way for a good idea to be non-obvious is for it to be hidden in the shadow of some mistaken assumption that people are very attached to. But anything you discover from working on such an idea will tend to contradict the mistaken assumption that was concealing it. And you will thus get a lot of heat from people attached to the mistaken assumption. Galileo and Darwin are famous examples of this phenomenon, but it&amp;rsquo;s probably always an ingredient in the resistance to new ideas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Organic Startup Ideas</title>
      <link>https://linguage.github.io/paul_graham/essays_en/organic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/organic/</guid>
      <description>&lt;h1 id=&#34;organic-startup-ideas&#34;&gt;Organic Startup Ideas&lt;/h1&gt;&#xA;&lt;p&gt;April 2010&lt;/p&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;The best way to come up with startup ideas is to ask yourself the question: what do you wish someone would make for you?&lt;/p&gt;&#xA;&lt;p&gt;There are two types of startup ideas: those that grow organically out of your own life, and those that you decide, from afar, are going to be necessary to some class of users other than you. Apple was the first type. Apple happened because Steve Wozniak wanted a computer. Unlike most people who wanted computers, he could design one, so he did. And since lots of other people wanted the same thing, Apple was able to sell enough of them to get the company rolling. They still rely on this principle today, incidentally. The iPhone is the phone Steve Jobs wants. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Orthodox Privilege</title>
      <link>https://linguage.github.io/paul_graham/essays_en/orth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/orth/</guid>
      <description>&lt;h1 id=&#34;orthodox-privilege&#34;&gt;Orthodox Privilege&lt;/h1&gt;&#xA;&lt;p&gt;July 2020&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;Few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. Most people are even incapable of forming such opinions.&amp;quot;— Einstein&lt;/p&gt;&#xA;&lt;p&gt;There has been a lot of talk about privilege lately. Although the concept is overused, there is something to it, and in particular to the idea that privilege makes you blind — that you can&amp;rsquo;t see things that are visible to someone whose life is very different from yours.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Persuade xor Discover</title>
      <link>https://linguage.github.io/paul_graham/essays_en/discover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/discover/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/discover.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;persuade-xor-discover&#34;&gt;Persuade xor Discover&lt;/h1&gt;&#xA;&lt;p&gt;September 2009&lt;/p&gt;&#xA;&lt;p&gt;When meeting people you don&amp;rsquo;t know very well, the convention is to seem extra friendly. You smile and say &amp;ldquo;pleased to meet you,&amp;rdquo; whether you are or not. There&amp;rsquo;s nothing dishonest about this. Everyone knows that these little social lies aren&amp;rsquo;t meant to be taken literally, just as everyone knows that &amp;ldquo;Can you pass the salt?&amp;rdquo; is only grammatically a question.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m perfectly willing to smile and say &amp;ldquo;pleased to meet you&amp;rdquo; when meeting new people. But there is another set of customs for being ingratiating in print that are not so harmless.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pow</title>
      <link>https://linguage.github.io/paul_graham/essays_en/pow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/pow/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/pow.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;pow&#34;&gt;Pow&lt;/h1&gt;&#xA;&lt;p&gt;January 2017&lt;/p&gt;&#xA;&lt;p&gt;People who are powerful but uncharismatic will tend to be disliked. Their power makes them a target for criticism that they don&amp;rsquo;t have the charisma to disarm. That was Hillary Clinton&amp;rsquo;s problem. It also tends to be a problem for any CEO who is more of a builder than a schmoozer. And yet the builder-type CEO is (like Hillary) probably the best person for the job.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Progbot</title>
      <link>https://linguage.github.io/paul_graham/essays_en/progbot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/progbot/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/progbot.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;progbot&#34;&gt;Progbot&lt;/h1&gt;&#xA;&lt;p&gt;January 1993 (This essay is from the introduction to On Lisp.)&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a long-standing principle of programming style that the functional elements of a program should not be too large. If some component of a program grows beyond the stage where it&amp;rsquo;s readily comprehensible, it becomes a mass of complexity which conceals errors as easily as a big city conceals fugitives. Such software will be hard to read, hard to test, and hard to debug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prop62</title>
      <link>https://linguage.github.io/paul_graham/essays_en/prop62/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/prop62/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/prop62.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;prop62&#34;&gt;Prop62&lt;/h1&gt;&#xA;&lt;p&gt;November 2016&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re a California voter, there is an important proposition on your ballot this year: Proposition 62, which bans the death penalty.&lt;/p&gt;&#xA;&lt;p&gt;When I was younger I used to think the debate about the death penalty was about when it&amp;rsquo;s ok to take a human life. Is it ok to kill a killer?&lt;/p&gt;&#xA;&lt;p&gt;But that is not the issue here.&lt;/p&gt;&#xA;&lt;p&gt;The real world does not work like the version I was shown on TV growing up. The police often arrest the wrong person. Defendants&amp;rsquo; lawyers are often incompetent. And prosecutors are often motivated more by publicity than justice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Property</title>
      <link>https://linguage.github.io/paul_graham/essays_en/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/property/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/property.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;property&#34;&gt;Property&lt;/h1&gt;&#xA;&lt;p&gt;March 2012&lt;/p&gt;&#xA;&lt;p&gt;As a child I read a book of stories about a famous judge in eighteenth century Japan called Ooka Tadasuke. One of the cases he decided was brought by the owner of a food shop. A poor student who could afford only rice was eating his rice while enjoying the delicious cooking smells coming from the food shop. The owner wanted the student to pay for the smells he was enjoying.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Publishing</title>
      <link>https://linguage.github.io/paul_graham/essays_en/publishing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/publishing/</guid>
      <description>&lt;h1 id=&#34;publishing&#34;&gt;Publishing&lt;/h1&gt;&#xA;&lt;p&gt;Post-Medium Publishing&lt;/p&gt;&#xA;&lt;p&gt;September 2009&lt;/p&gt;&#xA;&lt;p&gt;Publishers of all types, from news to music, are unhappy that consumers won&amp;rsquo;t pay for content anymore. At least, that&amp;rsquo;s how they see it.&lt;/p&gt;&#xA;&lt;p&gt;In fact consumers never really were paying for content, and publishers weren&amp;rsquo;t really selling it either. If the content was what they were selling, why has the price of books or music or movies always depended mostly on the format? Why didn&amp;rsquo;t better content cost more? [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ramen Profitable</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ramenprofitable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ramenprofitable/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ramenprofitable.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ramen-profitable&#34;&gt;Ramen Profitable&lt;/h1&gt;&#xA;&lt;p&gt;July 2009&lt;/p&gt;&#xA;&lt;p&gt;Now that the term &amp;ldquo;ramen profitable&amp;rdquo; has become widespread, I ought to explain precisely what the idea entails.&lt;/p&gt;&#xA;&lt;p&gt;Ramen profitable means a startup makes just enough to pay the founders&amp;rsquo; living expenses. This is a different form of profitability than startups have traditionally aimed for. Traditional profitability means a big bet is finally paying off, whereas the main importance of ramen profitability is that it buys you time. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Relentlessly Resourceful</title>
      <link>https://linguage.github.io/paul_graham/essays_en/relres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/relres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/relres.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;relentlessly-resourceful&#34;&gt;Relentlessly Resourceful&lt;/h1&gt;&#xA;&lt;p&gt;March 2009&lt;/p&gt;&#xA;&lt;p&gt;A couple days ago I finally got being a good startup founder down to two words: relentlessly resourceful.&lt;/p&gt;&#xA;&lt;p&gt;Till then the best I&amp;rsquo;d managed was to get the opposite quality down to one: hapless. Most dictionaries say hapless means unlucky. But the dictionaries are not doing a very good job. A team that outplays its opponents but loses because of a bad decision by the referee could be called unlucky, but not hapless. Hapless implies passivity. To be hapless is to be battered by circumstances — to let the world have its way with you, instead of having your way with the world. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Return of the Mac</title>
      <link>https://linguage.github.io/paul_graham/essays_en/mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/mac/</guid>
      <description>&lt;h1 id=&#34;return-of-the-mac&#34;&gt;Return of the Mac&lt;/h1&gt;&#xA;&lt;p&gt;March 2005&lt;/p&gt;&#xA;&lt;p&gt;All the best hackers I know are gradually switching to Macs. My friend Robert said his whole research group at MIT recently bought themselves Powerbooks. These guys are not the graphic designers and grandmas who were buying Macs at Apple&amp;rsquo;s low point in the mid 1990s. They&amp;rsquo;re about as hardcore OS hackers as you can get.&lt;/p&gt;&#xA;&lt;p&gt;The reason, of course, is OS X. Powerbooks are beautifully designed and run FreeBSD. What more do you need to know?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Revenge of the Nerds</title>
      <link>https://linguage.github.io/paul_graham/essays_en/icad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/icad/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/icad.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;revenge-of-the-nerds&#34;&gt;Revenge of the Nerds&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;May 2002&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;We were after the C++ programmers. We managed to drag a lot of them about halfway to Lisp.&amp;rdquo;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Guy Steele, co-author of the Java spec&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. Everyone knows who the pointy-haired boss is, right? I think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RSS</title>
      <link>https://linguage.github.io/paul_graham/essays_en/rss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/rss/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/rss.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;rss&#34;&gt;RSS&lt;/h1&gt;&#xA;&lt;p&gt;Aaron Swartz created a scraped feed of the essays page.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;Note: This appears to be a very brief note about RSS feed creation for Paul Graham&amp;rsquo;s essays page, created by Aaron Swartz.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>See Randomness</title>
      <link>https://linguage.github.io/paul_graham/essays_en/randomness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/randomness/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/randomness.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;see-randomness&#34;&gt;See Randomness&lt;/h1&gt;&#xA;&lt;p&gt;April 2006, rev August 2009&lt;/p&gt;&#xA;&lt;p&gt;Plato quotes Socrates as saying &amp;ldquo;the unexamined life is not worth living.&amp;rdquo; Part of what he meant was that the proper role of humans is to think, just as the proper role of anteaters is to poke their noses into anthills.&lt;/p&gt;&#xA;&lt;p&gt;A lot of ancient philosophy had the quality — and I don&amp;rsquo;t mean this in an insulting way — of the kind of conversations freshmen have late at night in common rooms: What is our purpose? Well, we humans are as conspicuously different from other animals as the anteater. In our case the distinguishing feature is the ability to reason. So obviously that is what we should be doing, and a human who doesn&amp;rsquo;t is doing a bad job of being human — is no better than an animal. Now we&amp;rsquo;d give a different answer. At least, someone Socrates&amp;rsquo;s age would. We&amp;rsquo;d ask why we even suppose we have a &amp;ldquo;purpose&amp;rdquo; in life. We may be better adapted for some things than others; we may be happier doing things we&amp;rsquo;re adapted for; but why assume purpose?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Six Principles for Making New Things</title>
      <link>https://linguage.github.io/paul_graham/essays_en/newthings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/newthings/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/newthings.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;six-principles-for-making-new-things&#34;&gt;Six Principles for Making New Things&lt;/h1&gt;&#xA;&lt;p&gt;February 2008&lt;/p&gt;&#xA;&lt;p&gt;The fiery reaction to the release of Arc had an unexpected consequence: it made me realize I had a design philosophy. The main complaint of the more articulate critics was that Arc seemed so flimsy. After years of working on it, all I had to show for myself were a few thousand lines of macros? Why hadn&amp;rsquo;t I worked on more substantial problems?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some Heroes</title>
      <link>https://linguage.github.io/paul_graham/essays_en/heroes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/heroes/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/heroes.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;some-heroes&#34;&gt;Some Heroes&lt;/h1&gt;&#xA;&lt;p&gt;April 2008&lt;/p&gt;&#xA;&lt;p&gt;There are some topics I save up because they&amp;rsquo;ll be so much fun to write about. This is one of them: a list of my heroes.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m not claiming this is a list of the n most admirable people. Who could make such a list, even if they wanted to? Einstein isn&amp;rsquo;t on the list, for example, even though he probably deserves to be on any shortlist of admirable people. I once asked a physicist friend if Einstein was really as smart as his fame implies, and she said that yes, he was. So why isn&amp;rsquo;t he on the list? Because I had to ask. This is a list of people who&amp;rsquo;ve influenced me, not people who would have if I understood their work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Startup Investing Trends</title>
      <link>https://linguage.github.io/paul_graham/essays_en/invtrend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/invtrend/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/invtrend.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;startup-investing-trends&#34;&gt;Startup Investing Trends&lt;/h1&gt;&#xA;&lt;p&gt;June 2013&lt;/p&gt;&#xA;&lt;p&gt;(This talk was written for an audience of investors.)&lt;/p&gt;&#xA;&lt;p&gt;Y Combinator has now funded 564 startups including the current batch, which has 53. The total valuation of the 287 that have valuations (either by raising an equity round, getting acquired, or dying) is about $11.7 billion, and the 511 prior to the current batch have collectively raised about $1.7 billion. [1]&lt;/p&gt;&#xA;&lt;p&gt;As usual those numbers are dominated by a few big winners. The top 10 startups account for 8.6 of that 11.7 billion. But there is a peloton of younger startups behind them. There are about 40 more that have a shot at being really big.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Startups in 13 Sentences</title>
      <link>https://linguage.github.io/paul_graham/essays_en/13sentences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/13sentences/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/13sentences.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;startups-in-13-sentences&#34;&gt;Startups in 13 Sentences&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator. Watch how this essay was written. February 2009&lt;/p&gt;&#xA;&lt;p&gt;One of the things I always tell startups is a principle I learned from Paul Buchheit: it&amp;rsquo;s better to make a few people really happy than to make a lot of people semi-happy. I was saying recently to a reporter that if I could only tell startups 10 things, this would be one of them. Then I thought: what would the other 9 be?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Succinctness is Power</title>
      <link>https://linguage.github.io/paul_graham/essays_en/power/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/power/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/power.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;succinctness-is-power&#34;&gt;Succinctness is Power&lt;/h1&gt;&#xA;&lt;p&gt;May 2002&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;The quantity of meaning compressed into a small space by algebraic signs, is another circumstance that facilitates the reasonings we are accustomed to carry on by their aid.&amp;rdquo; - Charles Babbage, quoted in Iverson&amp;rsquo;s Turing Award Lecture&lt;/p&gt;&#xA;&lt;p&gt;In the discussion about issues raised by Revenge of the Nerds on the LL1 mailing list, Paul Prescod wrote something that stuck in my mind. Python&amp;rsquo;s goal is regularity and readability, not succinctness. On the face of it, this seems a rather damning thing to claim about a programming language. As far as I can tell, succinctness = power. If so, then substituting, we get Python&amp;rsquo;s goal is regularity and readability, not power. and this doesn&amp;rsquo;t seem a tradeoff (if it is a tradeoff) that you&amp;rsquo;d want to make. It&amp;rsquo;s not far from saying that Python&amp;rsquo;s goal is not to be effective as a programming language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Age of the Essay</title>
      <link>https://linguage.github.io/paul_graham/essays_en/essay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/essay/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/essay.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-age-of-the-essay&#34;&gt;The Age of the Essay&lt;/h1&gt;&#xA;&lt;p&gt;September 2004&lt;/p&gt;&#xA;&lt;p&gt;Remember the essays you had to write in high school? Topic sentence, introductory paragraph, supporting paragraphs, conclusion. The conclusion being, say, that Ahab in Moby Dick was a Christ-like figure.&lt;/p&gt;&#xA;&lt;p&gt;Oy. So I&amp;rsquo;m going to try to give the other side of the story: what an essay really is, and how you write one. Or at least, how I write one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Airbnbs</title>
      <link>https://linguage.github.io/paul_graham/essays_en/airbnbs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/airbnbs/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/airbnbs.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-airbnbs&#34;&gt;The Airbnbs&lt;/h1&gt;&#xA;&lt;p&gt;December 2020&lt;/p&gt;&#xA;&lt;p&gt;To celebrate Airbnb&amp;rsquo;s IPO and to help future founders, I thought it might be useful to explain what was special about Airbnb.&lt;/p&gt;&#xA;&lt;p&gt;What was special about the Airbnbs was how earnest they were. They did nothing half-way, and we could sense this even in the interview. Sometimes after we interviewed a startup we&amp;rsquo;d be uncertain what to do, and have to talk it over. Other times we&amp;rsquo;d just look at one another and smile. The Airbnbs&amp;rsquo; interview was that kind. We didn&amp;rsquo;t even like the idea that much. Nor did users, at that stage; they had no growth. But the founders seemed so full of energy that it was impossible not to like them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Best Essay</title>
      <link>https://linguage.github.io/paul_graham/essays_en/best/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/best/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/best.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-best-essay&#34;&gt;The Best Essay&lt;/h1&gt;&#xA;&lt;p&gt;March 2024&lt;/p&gt;&#xA;&lt;p&gt;Despite its title this isn&amp;rsquo;t meant to be the best essay. My goal here is to figure out what the best essay would be like.&lt;/p&gt;&#xA;&lt;p&gt;It would be well-written, but you can write well about any topic. What made it special would be what it was about.&lt;/p&gt;&#xA;&lt;p&gt;Obviously some topics would be better than others. It probably wouldn&amp;rsquo;t be about this year&amp;rsquo;s lipstick colors. But it wouldn&amp;rsquo;t be vaporous talk about elevated themes either. A good essay has to be surprising. It has to tell people something they don&amp;rsquo;t already know.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Bus Ticket Theory of Genius</title>
      <link>https://linguage.github.io/paul_graham/essays_en/genius/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/genius/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/genius.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-bus-ticket-theory-of-genius&#34;&gt;The Bus Ticket Theory of Genius&lt;/h1&gt;&#xA;&lt;p&gt;November 2019&lt;/p&gt;&#xA;&lt;p&gt;Everyone knows that to do great work you need both natural ability and determination. But there&amp;rsquo;s a third ingredient that&amp;rsquo;s not as well understood: an obsessive interest in a particular topic.&lt;/p&gt;&#xA;&lt;p&gt;To explain this point I need to burn my reputation with some group of people, and I&amp;rsquo;m going to choose bus ticket collectors. There are people who collect old bus tickets. Like many collectors, they have an obsessive interest in the minutiae of what they collect. They can keep track of distinctions between different types of bus tickets that would be hard for the rest of us to remember. Because we don&amp;rsquo;t care enough. What&amp;rsquo;s the point of spending so much time thinking about old bus tickets?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Equity Equation</title>
      <link>https://linguage.github.io/paul_graham/essays_en/equity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/equity/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/equity.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-equity-equation&#34;&gt;The Equity Equation&lt;/h1&gt;&#xA;&lt;p&gt;July 2007&lt;/p&gt;&#xA;&lt;p&gt;An investor wants to give you money for a certain percentage of your startup. Should you take it? You&amp;rsquo;re about to hire your first employee. How much stock should you give him?&lt;/p&gt;&#xA;&lt;p&gt;These are some of the hardest questions founders face. And yet both have the same answer:&lt;/p&gt;&#xA;&lt;p&gt;1/(1 - n)&lt;/p&gt;&#xA;&lt;p&gt;Whenever you&amp;rsquo;re trading stock in your company for anything, whether it&amp;rsquo;s money or an employee or a deal with another company, the test for whether to do it is the same. You should give up n% of your company if what you trade it for improves your average outcome enough that the (100 - n)% you have left is worth more than the whole company was before.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Founder Visa</title>
      <link>https://linguage.github.io/paul_graham/essays_en/foundervisa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/foundervisa/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/foundervisa.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-founder-visa&#34;&gt;The Founder Visa&lt;/h1&gt;&#xA;&lt;p&gt;April 2009&lt;/p&gt;&#xA;&lt;p&gt;I usually avoid politics, but since we now seem to have an administration that&amp;rsquo;s open to suggestions, I&amp;rsquo;m going to risk making one. The single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders.&lt;/p&gt;&#xA;&lt;p&gt;The biggest constraint on the number of new startups that get created in the US is not tax policy or employment law or even Sarbanes-Oxley. It&amp;rsquo;s that we won&amp;rsquo;t let the people who want to start them into the country.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Future of Startup Funding</title>
      <link>https://linguage.github.io/paul_graham/essays_en/future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/future/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/future.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-future-of-startup-funding&#34;&gt;The Future of Startup Funding&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;August 2010&lt;/p&gt;&#xA;&lt;p&gt;Two years ago I wrote about what I called &amp;ldquo;a huge, unexploited opportunity in startup funding:&amp;rdquo; the growing disconnect between VCs, whose current business model requires them to invest large amounts, and a large class of startups that need less than they used to. Increasingly, startups want a couple hundred thousand dollars, not a couple million. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Hacker&#39;s Guide to Investors</title>
      <link>https://linguage.github.io/paul_graham/essays_en/guidetoinvestors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/guidetoinvestors/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/guidetoinvestors.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-hackers-guide-to-investors&#34;&gt;The Hacker&amp;rsquo;s Guide to Investors&lt;/h1&gt;&#xA;&lt;p&gt;April 2007&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a keynote talk at the 2007 ASES Summit at Stanford.)&lt;/p&gt;&#xA;&lt;p&gt;The world of investors is a foreign one to most hackers—partly because investors are so unlike hackers, and partly because they tend to operate in secret. I&amp;rsquo;ve been dealing with this world for many years, both as a founder and an investor, and I still don&amp;rsquo;t fully understand it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Hardware Renaissance</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hw/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hw.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-hardware-renaissance&#34;&gt;The Hardware Renaissance&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;October 2012&lt;/p&gt;&#xA;&lt;p&gt;One advantage of Y Combinator&amp;rsquo;s early, broad focus is that we see trends before most other people. And one of the most conspicuous trends in the last batch was the large number of hardware startups. Out of 84 companies, 7 were making hardware. On the whole they&amp;rsquo;ve done better than the companies that weren&amp;rsquo;t.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The High-Res Society</title>
      <link>https://linguage.github.io/paul_graham/essays_en/highres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/highres/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/highres.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-high-res-society&#34;&gt;The High-Res Society&lt;/h1&gt;&#xA;&lt;p&gt;December 2008&lt;/p&gt;&#xA;&lt;p&gt;For nearly all of history the success of a society was proportionate to its ability to assemble large and disciplined organizations. Those who bet on economies of scale generally won, which meant the largest organizations were the most successful ones.&lt;/p&gt;&#xA;&lt;p&gt;Things have already changed so much that this is hard for us to believe, but till just a few decades ago the largest organizations tended to be the most progressive. An ambitious kid graduating from college in 1960 wanted to work in the huge, gleaming offices of Ford, or General Electric, or NASA. Small meant small-time. Small in 1960 didn&amp;rsquo;t mean a cool little startup. It meant uncle Sid&amp;rsquo;s shoe store.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Hundred-Year Language</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hundred/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hundred/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hundred.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-hundred-year-language&#34;&gt;The Hundred-Year Language&lt;/h1&gt;&#xA;&lt;p&gt;April 2003&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a keynote talk at PyCon 2003.)&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s hard to predict what life will be like in a hundred years. There are only a few things we can say with certainty. We know that everyone will drive flying cars, that zoning laws will be relaxed to allow buildings hundreds of stories tall, that it will be dark most of the time, and that women will all be trained in the martial arts. Here I want to zoom in on one detail of this picture. What kind of programming language will they use to write the software controlling those flying cars?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Island Test</title>
      <link>https://linguage.github.io/paul_graham/essays_en/island/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/island/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/island.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-island-test&#34;&gt;The Island Test&lt;/h1&gt;&#xA;&lt;p&gt;July 2006&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve discovered a handy test for figuring out what you&amp;rsquo;re addicted to. Imagine you were going to spend the weekend at a friend&amp;rsquo;s house on a little island off the coast of Maine. There are no shops on the island and you won&amp;rsquo;t be able to leave while you&amp;rsquo;re there. Also, you&amp;rsquo;ve never been to this house before, so you can&amp;rsquo;t assume it will have more than any house might.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The List of N Things</title>
      <link>https://linguage.github.io/paul_graham/essays_en/nthings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/nthings/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/nthings.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-list-of-n-things&#34;&gt;The List of N Things&lt;/h1&gt;&#xA;&lt;p&gt;September 2009&lt;/p&gt;&#xA;&lt;p&gt;I bet you the current issue of Cosmopolitan has an article whose title begins with a number. &amp;ldquo;7 Things He Won&amp;rsquo;t Tell You about Sex,&amp;rdquo; or something like that. Some popular magazines feature articles of this type on the cover of every issue. That can&amp;rsquo;t be happening by accident. Editors must know they attract readers.&lt;/p&gt;&#xA;&lt;p&gt;Why do readers like the list of n things so much? Mainly because it&amp;rsquo;s easier to read than a regular article. [1] Structurally, the list of n things is a degenerate case of essay. An essay can go anywhere the writer wants. In a list of n things the writer agrees to constrain himself to a collection of points of roughly equal importance, and he tells the reader explicitly what they are.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Need to Read</title>
      <link>https://linguage.github.io/paul_graham/essays_en/read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/read/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/read.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-need-to-read&#34;&gt;The Need to Read&lt;/h1&gt;&#xA;&lt;p&gt;November 2022&lt;/p&gt;&#xA;&lt;p&gt;In the science fiction books I read as a kid, reading had often been replaced by some more efficient way of acquiring knowledge. Mysterious &amp;ldquo;tapes&amp;rdquo; would load it into one&amp;rsquo;s brain like a program being loaded into a computer.&lt;/p&gt;&#xA;&lt;p&gt;That sort of thing is unlikely to happen anytime soon. Not just because it would be hard to build a replacement for reading, but because even if one existed, it would be insufficient. Reading about x doesn&amp;rsquo;t just teach you about x; it also teaches you how to write. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Other Half of &#39;Artists Ship&#39;</title>
      <link>https://linguage.github.io/paul_graham/essays_en/artistsship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/artistsship/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/artistsship.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-other-half-of-artists-ship&#34;&gt;The Other Half of &amp;ldquo;Artists Ship&amp;rdquo;&lt;/h1&gt;&#xA;&lt;p&gt;November 2008&lt;/p&gt;&#xA;&lt;p&gt;One of the differences between big companies and startups is that big companies tend to have developed procedures to protect themselves against mistakes. A startup walks like a toddler, bashing into things and falling over all the time. A big company is more deliberate.&lt;/p&gt;&#xA;&lt;p&gt;The gradual accumulation of checks in an organization is a kind of learning, based on disasters that have happened to it or others like it. After giving a contract to a supplier who goes bankrupt and fails to deliver, for example, a company might require all suppliers to prove they&amp;rsquo;re solvent before submitting bids.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Other Road Ahead</title>
      <link>https://linguage.github.io/paul_graham/essays_en/road/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/road/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/road.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-other-road-ahead&#34;&gt;The Other Road Ahead&lt;/h1&gt;&#xA;&lt;p&gt;September 2001&lt;/p&gt;&#xA;&lt;p&gt;(This article explains why much of the next generation of software may be server-based, what that will mean for programmers, and why this new kind of software is a great opportunity for startups. It&amp;rsquo;s derived from a talk at BBN Labs.)&lt;/p&gt;&#xA;&lt;p&gt;In the summer of 1995, my friend Robert Morris and I decided to start a startup. The PR campaign leading up to Netscape&amp;rsquo;s IPO was running full blast then, and there was a lot of talk in the press about online commerce. At the time there might have been thirty actual stores on the Web, all made by hand. If there were going to be a lot of online stores, there would need to be software for making them, so we decided to write some.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Patent Pledge</title>
      <link>https://linguage.github.io/paul_graham/essays_en/patentpledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/patentpledge/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/patentpledge.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-patent-pledge&#34;&gt;The Patent Pledge&lt;/h1&gt;&#xA;&lt;p&gt;August 2011&lt;/p&gt;&#xA;&lt;p&gt;I realized recently that we may be able to solve part of the patent problem without waiting for the government.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve never been 100% sure whether patents help or hinder technological progress. When I was a kid I thought they helped. I thought they protected inventors from having their ideas stolen by big companies. Maybe that was truer in the past, when more things were physical. But regardless of whether patents are in general a good thing, there do seem to be bad ways of using them. And since bad uses of patents seem to be increasing, there is an increasing call for patent reform.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Pooled-Risk Company Management Company</title>
      <link>https://linguage.github.io/paul_graham/essays_en/prcmc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/prcmc/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/prcmc.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-pooled-risk-company-management-company&#34;&gt;The Pooled-Risk Company Management Company&lt;/h1&gt;&#xA;&lt;p&gt;July 2008&lt;/p&gt;&#xA;&lt;p&gt;At this year&amp;rsquo;s startup school, David Heinemeier Hansson gave a talk in which he suggested that startup founders should do things the old fashioned way. Instead of hoping to get rich by building a valuable company and then selling stock in a &amp;ldquo;liquidity event,&amp;rdquo; founders should start companies that make money and live off the revenues.&lt;/p&gt;&#xA;&lt;p&gt;Sounds like a good plan. Let&amp;rsquo;s think about the optimal way to do this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Power of the Marginal</title>
      <link>https://linguage.github.io/paul_graham/essays_en/marginal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/marginal/</guid>
      <description>&lt;h1 id=&#34;the-power-of-the-marginal&#34;&gt;The Power of the Marginal&lt;/h1&gt;&#xA;&lt;p&gt;June 2006&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from talks at Usenix 2006 and Railsconf 2006.)&lt;/p&gt;&#xA;&lt;p&gt;A couple years ago my friend Trevor and I went to look at the Apple garage. As we stood there, he said that as a kid growing up in Saskatchewan he&amp;rsquo;d been amazed at the dedication Jobs and Wozniak must have had to work in a garage.&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;Those guys must have been freezing!&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Paradox</title>
      <link>https://linguage.github.io/paul_graham/essays_en/pypar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/pypar/</guid>
      <description>&lt;h1 id=&#34;the-python-paradox&#34;&gt;The Python Paradox&lt;/h1&gt;&#xA;&lt;p&gt;August 2004&lt;/p&gt;&#xA;&lt;p&gt;In a recent talk I said something that upset a lot of people: that you could get smarter programmers to work on a Python project than you could to work on a Java project.&lt;/p&gt;&#xA;&lt;p&gt;I didn&amp;rsquo;t mean by this that Java programmers are dumb. I meant that Python programmers are smart. It&amp;rsquo;s a lot of work to learn a new programming language. And people don&amp;rsquo;t learn Python because it will get them a job; they learn it because they genuinely like to program and aren&amp;rsquo;t satisfied with the languages they already know.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Real Reason to End the Death Penalty</title>
      <link>https://linguage.github.io/paul_graham/essays_en/real/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/real/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/real.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-real-reason-to-end-the-death-penalty&#34;&gt;The Real Reason to End the Death Penalty&lt;/h1&gt;&#xA;&lt;p&gt;April 2021&lt;/p&gt;&#xA;&lt;p&gt;When intellectuals talk about the death penalty, they talk about things like whether it&amp;rsquo;s permissible for the state to take someone&amp;rsquo;s life, whether the death penalty acts as a deterrent, and whether more death sentences are given to some groups than others. But in practice the debate about the death penalty is not about whether it&amp;rsquo;s ok to kill murderers. It&amp;rsquo;s about whether it&amp;rsquo;s ok to kill innocent people, because at least 4% of people on death row are innocent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Reddits</title>
      <link>https://linguage.github.io/paul_graham/essays_en/reddits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/reddits/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/reddits.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-reddits&#34;&gt;The Reddits&lt;/h1&gt;&#xA;&lt;p&gt;March 2024&lt;/p&gt;&#xA;&lt;p&gt;I met the Reddits before we even started Y Combinator. In fact they were one of the reasons we started it.&lt;/p&gt;&#xA;&lt;p&gt;YC grew out of a talk I gave to the Harvard Computer Society (the undergrad computer club) about how to start a startup. Everyone else in the audience was probably local, but Steve and Alexis came up on the train from the University of Virginia, where they were seniors. Since they&amp;rsquo;d come so far I agreed to meet them for coffee. They told me about the startup idea we&amp;rsquo;d later fund them to drop: a way to order fast food on your cellphone.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Refragmentation</title>
      <link>https://linguage.github.io/paul_graham/essays_en/re/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/re/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/re.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-refragmentation&#34;&gt;The Refragmentation&lt;/h1&gt;&#xA;&lt;p&gt;January 2016&lt;/p&gt;&#xA;&lt;p&gt;One advantage of being old is that you can see change happen in your lifetime. A lot of the change I&amp;rsquo;ve seen is fragmentation. US politics is much more polarized than it used to be. Culturally we have ever less common ground. The creative class flocks to a handful of happy cities, abandoning the rest. And increasing economic inequality means the spread between rich and poor is growing too. I&amp;rsquo;d like to propose a hypothesis: that all these trends are instances of the same phenomenon. And moreover, that the cause is not some force that&amp;rsquo;s pulling us apart, but rather the erosion of forces that had been pushing us together.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Right Kind of Stubborn</title>
      <link>https://linguage.github.io/paul_graham/essays_en/persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/persistence/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/persistence.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-right-kind-of-stubborn&#34;&gt;The Right Kind of Stubborn&lt;/h1&gt;&#xA;&lt;p&gt;July 2024&lt;/p&gt;&#xA;&lt;p&gt;Successful people tend to be persistent. New ideas often don&amp;rsquo;t work at first, but they&amp;rsquo;re not deterred. They keep trying and eventually find something that does.&lt;/p&gt;&#xA;&lt;p&gt;Mere obstinacy, on the other hand, is a recipe for failure. Obstinate people are so annoying. They won&amp;rsquo;t listen. They beat their heads against a wall and get nowhere.&lt;/p&gt;&#xA;&lt;p&gt;But is there any real difference between these two cases? Are persistent and obstinate people actually behaving differently? Or are they doing the same thing, and we just label them later as persistent or obstinate depending on whether they turned out to be right or not?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Risk of Discovery</title>
      <link>https://linguage.github.io/paul_graham/essays_en/disc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/disc/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/disc.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-risk-of-discovery&#34;&gt;The Risk of Discovery&lt;/h1&gt;&#xA;&lt;p&gt;January 2017&lt;/p&gt;&#xA;&lt;p&gt;Because biographies of famous scientists tend to edit out their mistakes, we underestimate the degree of risk they were willing to take. And because anything a famous scientist did that wasn&amp;rsquo;t a mistake has probably now become the conventional wisdom, those choices don&amp;rsquo;t seem risky either.&lt;/p&gt;&#xA;&lt;p&gt;Biographies of Newton, for example, understandably focus more on physics than alchemy or theology. The impression we get is that his unerring judgment led him straight to truths no one else had noticed. How to explain all the time he spent on alchemy and theology? Well, smart people are often kind of crazy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Ronco Principle</title>
      <link>https://linguage.github.io/paul_graham/essays_en/ronco/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/ronco/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/ronco.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-ronco-principle&#34;&gt;The Ronco Principle&lt;/h1&gt;&#xA;&lt;p&gt;January 2015&lt;/p&gt;&#xA;&lt;p&gt;No one, VC or angel, has invested in more of the top startups than Ron Conway. He knows what happened in every deal in the Valley, half the time because he arranged it.&lt;/p&gt;&#xA;&lt;p&gt;And yet he&amp;rsquo;s a super nice guy. In fact, nice is not the word. Ronco is good. I know of zero instances in which he has behaved badly. It&amp;rsquo;s hard even to imagine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Roots of Lisp</title>
      <link>https://linguage.github.io/paul_graham/essays_en/rootsoflisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/rootsoflisp/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/rootsoflisp.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-roots-of-lisp&#34;&gt;The Roots of Lisp&lt;/h1&gt;&#xA;&lt;p&gt;May 2001&lt;/p&gt;&#xA;&lt;p&gt;(I wrote this article to help myself understand exactly what McCarthy discovered. You don&amp;rsquo;t need to know this stuff to program in Lisp, but it should be helpful to anyone who wants to understand the essence of Lisp — both in the sense of its origins and its semantic core. The fact that it has such a core is one of Lisp&amp;rsquo;s distinguishing features, and the reason why, unlike other languages, Lisp has dialects.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Shape of the Essay Field</title>
      <link>https://linguage.github.io/paul_graham/essays_en/field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/field/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/field.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-shape-of-the-essay-field&#34;&gt;The Shape of the Essay Field&lt;/h1&gt;&#xA;&lt;p&gt;June 2025&lt;/p&gt;&#xA;&lt;p&gt;An essay has to tell people something they don&amp;rsquo;t already know. But there are three different reasons people might not know something, and they yield three very different kinds of essays.&lt;/p&gt;&#xA;&lt;p&gt;One reason people won&amp;rsquo;t know something is if it&amp;rsquo;s not important to know. That doesn&amp;rsquo;t mean it will make a bad essay. For example, you might write a good essay about a particular model of car. Readers would learn something from it. It would add to their picture of the world. For a handful of readers it might even spur some kind of epiphany. But unless this is a very unusual car it&amp;rsquo;s not critical for everyone to know about it. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Word &#39;Hacker&#39;</title>
      <link>https://linguage.github.io/paul_graham/essays_en/gba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/gba/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/gba.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-word-hacker&#34;&gt;The Word &amp;ldquo;Hacker&amp;rdquo;&lt;/h1&gt;&#xA;&lt;p&gt;April 2004&lt;/p&gt;&#xA;&lt;p&gt;To the popular press, &amp;ldquo;hacker&amp;rdquo; means someone who breaks into computers. Among programmers it means a good programmer. But the two meanings are connected. To programmers, &amp;ldquo;hacker&amp;rdquo; connotes mastery in the most literal sense: someone who can make a computer do what he wants—whether the computer wants to or not.&lt;/p&gt;&#xA;&lt;p&gt;To add to the confusion, the noun &amp;ldquo;hack&amp;rdquo; also has two senses. It can be either a compliment or an insult. It&amp;rsquo;s called a hack when you do something in an ugly way. But when you do something so clever that you somehow beat the system, that&amp;rsquo;s also called a hack. The word is used more often in the former than the latter sense, probably because ugly solutions are more common than brilliant ones.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Two Kinds of Judgement</title>
      <link>https://linguage.github.io/paul_graham/essays_en/judgement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/judgement/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/judgement.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;two-kinds-of-judgement&#34;&gt;Two Kinds of Judgement&lt;/h1&gt;&#xA;&lt;p&gt;April 2007&lt;/p&gt;&#xA;&lt;p&gt;There are two different ways people judge you. Sometimes judging you correctly is the end goal. But there&amp;rsquo;s a second much more common type of judgement where it isn&amp;rsquo;t. We tend to regard all judgements of us as the first type. We&amp;rsquo;d probably be happier if we realized which are and which aren&amp;rsquo;t.&lt;/p&gt;&#xA;&lt;p&gt;The first type of judgement, the type where judging you is the end goal, include court cases, grades in classes, and most competitions. Such judgements can of course be mistaken, but because the goal is to judge you correctly, there&amp;rsquo;s usually some kind of appeals process. If you feel you&amp;rsquo;ve been misjudged, you can protest that you&amp;rsquo;ve been treated unfairly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Welcome to Lisp</title>
      <link>https://linguage.github.io/paul_graham/essays_en/acl2txtt1748944359/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/acl2txtt1748944359/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/acl2txtt1748944359.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;welcome-to-lisp&#34;&gt;Welcome to Lisp&lt;/h1&gt;&#xA;&lt;p&gt;This chapter aims to get you programming as soon as possible. By the end of it you will know enough Common Lisp to begin writing programs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-form&#34;&gt;2.1 Form&lt;/h2&gt;&#xA;&lt;p&gt;It is particularly true of Lisp that you learn it by using it, because Lisp is an interactive language. Any Lisp system will include an interactive front-end called the toplevel. You type Lisp expressions into the toplevel, and the system displays their values. Lisp usually displays a prompt to tell you that it&amp;rsquo;s waiting for you to type something. Many implementations of Common Lisp use &amp;gt; as the toplevel prompt. That&amp;rsquo;s what we&amp;rsquo;ll use here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Business Can Learn from Open Source</title>
      <link>https://linguage.github.io/paul_graham/essays_en/opensource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/opensource/</guid>
      <description>&lt;h1 id=&#34;what-business-can-learn-from-open-source&#34;&gt;What Business Can Learn from Open Source&lt;/h1&gt;&#xA;&lt;p&gt;August 2005&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at Oscon 2005.)&lt;/p&gt;&#xA;&lt;p&gt;Lately companies have been paying more attention to open source. Ten years ago there seemed a real danger Microsoft would extend its monopoly to servers. It seems safe to say now that open source has prevented that. A recent survey found 52% of companies are replacing Windows servers with Linux servers. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>What I&#39;ve Learned from Hacker News</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hackernews/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hackernews/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hackernews.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-ive-learned-from-hacker-news&#34;&gt;What I&amp;rsquo;ve Learned from Hacker News&lt;/h1&gt;&#xA;&lt;p&gt;February 2009&lt;/p&gt;&#xA;&lt;p&gt;Hacker News was two years old last week. Initially it was supposed to be a side project—an application to sharpen Arc on, and a place for current and future Y Combinator founders to exchange news. It&amp;rsquo;s grown bigger and taken up more time than I expected, but I don&amp;rsquo;t regret that because I&amp;rsquo;ve learned so much from working on it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;growth&#34;&gt;Growth&lt;/h2&gt;&#xA;&lt;p&gt;When we launched in February 2007, weekday traffic was around 1600 daily uniques. It&amp;rsquo;s since grown to around 22,000. This growth rate is a bit higher than I&amp;rsquo;d like. I&amp;rsquo;d like the site to grow, since a site that isn&amp;rsquo;t growing at least slowly is probably dead. But I wouldn&amp;rsquo;t want it to grow as large as Digg or Reddit—mainly because that would dilute the character of the site, but also because I don&amp;rsquo;t want to spend all my time dealing with scaling.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Kate Saw in Silicon Valley</title>
      <link>https://linguage.github.io/paul_graham/essays_en/kate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/kate/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/kate.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-kate-saw-in-silicon-valley&#34;&gt;What Kate Saw in Silicon Valley&lt;/h1&gt;&#xA;&lt;p&gt;August 2009&lt;/p&gt;&#xA;&lt;p&gt;Kate Courteau is the architect who designed Y Combinator&amp;rsquo;s office. Recently we managed to recruit her to help us run YC when she&amp;rsquo;s not busy with architectural projects. Though she&amp;rsquo;d heard a lot about YC since the beginning, the last 9 months have been a total immersion.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been around the startup world for so long that it seems normal to me, so I was curious to hear what had surprised her most about it. This was her list:&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Languages Fix</title>
      <link>https://linguage.github.io/paul_graham/essays_en/fix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/fix/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/fix.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-languages-fix&#34;&gt;What Languages Fix&lt;/h1&gt;&#xA;&lt;p&gt;Kevin Kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. The surprising thing is how many, and how well, languages can be described this way.&lt;/p&gt;&#xA;&lt;p&gt;Algol: Assembly language is too low-level.&lt;/p&gt;&#xA;&lt;p&gt;Pascal: Algol doesn&amp;rsquo;t have enough data types.&lt;/p&gt;&#xA;&lt;p&gt;Modula: Pascal is too wimpy for systems programming.&lt;/p&gt;&#xA;&lt;p&gt;Simula: Algol isn&amp;rsquo;t good enough at simulations.&lt;/p&gt;&#xA;&lt;p&gt;Smalltalk: Not everything in Simula is an object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Made Lisp Different</title>
      <link>https://linguage.github.io/paul_graham/essays_en/diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/diff/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/diff.md&#34;&gt;Chinese Version&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-made-lisp-different&#34;&gt;What Made Lisp Different&lt;/h1&gt;&#xA;&lt;p&gt;December 2001 (rev. May 2002)&lt;/p&gt;&#xA;&lt;p&gt;(This article came about in response to some questions on the LL1 mailing list. It is now incorporated in Revenge of the Nerds.)&lt;/p&gt;&#xA;&lt;p&gt;When McCarthy designed Lisp in the late 1950s, it was a radical departure from existing languages, the most important of which was Fortran.&lt;/p&gt;&#xA;&lt;p&gt;Lisp embodied nine new ideas:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Conditionals.&lt;/strong&gt; A conditional is an if-then-else construct. We take these for granted now. They were invented by McCarthy in the course of developing Lisp. (Fortran at that time only had a conditional goto, closely based on the branch instruction in the underlying hardware.) McCarthy, who was on the Algol committee, got conditionals into Algol, whence they spread to most other languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Microsoft Is this the Altair Basic of?</title>
      <link>https://linguage.github.io/paul_graham/essays_en/altair/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/altair/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/altair.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-microsoft-is-this-the-altair-basic-of&#34;&gt;What Microsoft Is this the Altair Basic of?&lt;/h1&gt;&#xA;&lt;p&gt;February 2015&lt;/p&gt;&#xA;&lt;p&gt;One of the most valuable exercises you can try if you want to understand startups is to look at the most successful companies and explain why they were not as lame as they seemed when they first launched. Because they practically all seemed lame at first. Not just small, lame. Not just the first step up a big mountain. More like the first step into a swamp.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Startups Are Really Like</title>
      <link>https://linguage.github.io/paul_graham/essays_en/really/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/really/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/really.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-startups-are-really-like&#34;&gt;What Startups Are Really Like&lt;/h1&gt;&#xA;&lt;p&gt;October 2009&lt;/p&gt;&#xA;&lt;p&gt;(This essay is derived from a talk at the 2009 Startup School.)&lt;/p&gt;&#xA;&lt;p&gt;I wasn&amp;rsquo;t sure what to talk about at Startup School, so I decided to ask the founders of the startups we&amp;rsquo;d funded. What hadn&amp;rsquo;t I written about yet?&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m in the unusual position of being able to test the essays I write about startups. I hope the ones on other topics are right, but I have no way to test them. The ones on startups get tested by about 70 people every 6 months.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What We Look for in Founders</title>
      <link>https://linguage.github.io/paul_graham/essays_en/founders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/founders/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/founders.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-we-look-for-in-founders&#34;&gt;What We Look for in Founders&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;October 2010&lt;/p&gt;&#xA;&lt;p&gt;(I wrote this for Forbes, who asked me to write something about the qualities we look for in founders. In print they had to cut the last item because they didn&amp;rsquo;t have room.)&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-determination&#34;&gt;1. Determination&lt;/h3&gt;&#xA;&lt;p&gt;This has turned out to be the most important quality in startup founders. We thought when we started Y Combinator that the most important quality would be intelligence. That&amp;rsquo;s the myth in the Valley. And certainly you don&amp;rsquo;t want founders to be stupid. But as long as you&amp;rsquo;re over a certain threshold of intelligence, what matters most is determination. You&amp;rsquo;re going to hit a lot of obstacles. You can&amp;rsquo;t be the sort of person who gets demoralized easily.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What You&#39;ll Wish You&#39;d Known</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hs/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hs.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-youll-wish-youd-known&#34;&gt;What You&amp;rsquo;ll Wish You&amp;rsquo;d Known&lt;/h1&gt;&#xA;&lt;p&gt;January 2005&lt;/p&gt;&#xA;&lt;p&gt;(I wrote this talk for a high school. I never actually gave it, because the school authorities vetoed the plan to invite me.)&lt;/p&gt;&#xA;&lt;p&gt;When I said I was speaking at a high school, my friends were curious. What will you say to high school students? So I asked them, what do you wish someone had told you in high school? Their answers were remarkably similar. So I&amp;rsquo;m going to tell you what we all wish someone had told us.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Arc Isn&#39;t Especially Object-Oriented</title>
      <link>https://linguage.github.io/paul_graham/essays_en/noop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/noop/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/noop.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-arc-isnt-especially-object-oriented&#34;&gt;Why Arc Isn&amp;rsquo;t Especially Object-Oriented&lt;/h1&gt;&#xA;&lt;p&gt;There is a kind of mania for object-oriented programming at the moment, but some of the smartest programmers I know are some of the least excited about it.&lt;/p&gt;&#xA;&lt;p&gt;My own feeling is that object-oriented programming is a useful technique in some cases, but it isn&amp;rsquo;t something that has to pervade every program you write. You should be able to define new types, but you shouldn&amp;rsquo;t have to express every program as the definition of new types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why It&#39;s Safe for Founders to Be Nice</title>
      <link>https://linguage.github.io/paul_graham/essays_en/safe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/safe/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/safe.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-its-safe-for-founders-to-be-nice&#34;&gt;Why It&amp;rsquo;s Safe for Founders to Be Nice&lt;/h1&gt;&#xA;&lt;p&gt;August 2015&lt;/p&gt;&#xA;&lt;p&gt;I recently got an email from a founder that helped me understand something important: why it&amp;rsquo;s safe for startup founders to be nice people.&lt;/p&gt;&#xA;&lt;p&gt;I grew up with a cartoon idea of a very successful businessman (in the cartoon it was always a man): a rapacious, cigar-smoking, table-thumping guy in his fifties who wins by exercising power, and isn&amp;rsquo;t too fussy about how. As I&amp;rsquo;ve written before, one of the things that has surprised me most about startups is how few of the most successful founders are like that. Maybe successful people in other industries are; I don&amp;rsquo;t know; but not startup founders. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Nerds are Unpopular</title>
      <link>https://linguage.github.io/paul_graham/essays_en/nerds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/nerds/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/nerds.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-nerds-are-unpopular&#34;&gt;Why Nerds are Unpopular&lt;/h1&gt;&#xA;&lt;p&gt;February 2003&lt;/p&gt;&#xA;&lt;p&gt;When we were in junior high school, my friend Rich and I made a map of the school lunch tables according to popularity. This was easy to do, because kids only ate lunch with others of about the same popularity. We graded them from A to E. A tables were full of football players and cheerleaders and so on. E tables contained the kids with mild cases of Down&amp;rsquo;s Syndrome, what in the language of the time we called &amp;ldquo;retards.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Startup Hubs Work</title>
      <link>https://linguage.github.io/paul_graham/essays_en/hubs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/hubs/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/hubs.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-startup-hubs-work&#34;&gt;Why Startup Hubs Work&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;October 2011&lt;/p&gt;&#xA;&lt;p&gt;If you look at a list of US cities sorted by population, the number of successful startups per capita varies by orders of magnitude. Somehow it&amp;rsquo;s as if most places were sprayed with startupicide.&lt;/p&gt;&#xA;&lt;p&gt;I wondered about this for years. I could see the average town was like a roach motel for startup ambitions: smart, ambitious people went in, but no startups came out. But I was never able to figure out exactly what happened inside the motel—exactly what was killing all the potential startups. [1]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why There Aren&#39;t More Googles</title>
      <link>https://linguage.github.io/paul_graham/essays_en/googles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/googles/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/googles.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-there-arent-more-googles&#34;&gt;Why There Aren&amp;rsquo;t More Googles&lt;/h1&gt;&#xA;&lt;p&gt;April 2008&lt;/p&gt;&#xA;&lt;p&gt;Umair Haque wrote recently that the reason there aren&amp;rsquo;t more Googles is that most startups get bought before they can change the world. Google, despite serious interest from Microsoft and Yahoo—what must have seemed like lucrative interest at the time—didn&amp;rsquo;t sell out. Google might simply have been nothing but Yahoo&amp;rsquo;s or MSN&amp;rsquo;s search box.&lt;/p&gt;&#xA;&lt;p&gt;Why isn&amp;rsquo;t it? Because Google had a deeply felt sense of purpose: a conviction to change the world for the better. This has a nice sound to it, but it isn&amp;rsquo;t true. Google&amp;rsquo;s founders were willing to sell early on. They just wanted more than acquirers were willing to pay.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why to Start a Startup in a Bad Economy</title>
      <link>https://linguage.github.io/paul_graham/essays_en/badeconomy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://linguage.github.io/paul_graham/essays_en/badeconomy/</guid>
      <description>&lt;p&gt;→ &lt;a href=&#34;../essays_zh/badeconomy.md&#34;&gt;中文版本&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-to-start-a-startup-in-a-bad-economy&#34;&gt;Why to Start a Startup in a Bad Economy&lt;/h1&gt;&#xA;&lt;p&gt;Want to start a startup? Get funded by Y Combinator.&lt;/p&gt;&#xA;&lt;p&gt;October 2008&lt;/p&gt;&#xA;&lt;p&gt;The economic situation is apparently so grim that some experts fear we may be in for a stretch as bad as the mid seventies. When Microsoft and Apple were founded.&lt;/p&gt;&#xA;&lt;p&gt;As those examples suggest, a recession may not be such a bad time to start a startup. I&amp;rsquo;m not claiming it&amp;rsquo;s a particularly good time either. The truth is more boring: the state of the economy doesn&amp;rsquo;t matter much either way.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
