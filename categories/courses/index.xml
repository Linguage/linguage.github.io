<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Courses on Linguista</title>
    <link>https://linguage.github.io/categories/courses/</link>
    <description>Recent content in Courses on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Oct 2025 13:01:13 +0800</lastBuildDate>
    <atom:link href="https://linguage.github.io/categories/courses/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Scripts」Module 1: Introduction to Agentic Workflows</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-01/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-01/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;andrew-ng-agentic-ai&#34;&gt;Andrew Ng: Agentic AI&lt;/h1&gt;&#xA;&lt;h1 id=&#34;module-1-introduction-to-agentic-workflows&#34;&gt;Module 1: Introduction to Agentic Workflows&lt;/h1&gt;&#xA;&lt;h2 id=&#34;10-introduction&#34;&gt;1.0 Introduction&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Welcome to this course on Agentic AI. When I coined the term agentic to describe what I saw&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as an important and rapidly growing trend in how people were building on-base applications,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what I did not realize was that a bunch of marketers would get hold of this term&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and use it as a sticker and put this on almost everything in sight. And that has caused hype&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on Agentic AI to skyrocket. The good news though is that ignoring the hype, the number of truly&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;valuable and useful applications built using Agentic AI has also grown very rapidly, even if&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:33&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;not quite as rapidly as the hype. And in this course, what I&amp;#39;d like to do is show you best&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:38&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;practices for building Agentic AI applications. And this will open up a lot of new opportunities&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to you in terms of what you can now build. Today, agentic workflows are being used to build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:49&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;applications like customer support agents, or to do deep research to help write deeply insightful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:55&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;research reports, or to process tricky legal documents, or to look at patient input and render&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;or to suggest possible medical diagnoses. On many of my teams, a lot of the projects we built just&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;would be impossible without agentic workflows. And so knowing how to build applications with them&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is one of the most important and valuable skills in AI today. It turns out that one of the biggest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;differences I&amp;#39;ve seen between people that really know how to build agentic workflows compared to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:24&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;people that are less effective at it is the ability to drive a disciplined development process,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;specifically one focused on evals and error analysis. And in this course, I&amp;#39;ll tell you what&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:35&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that means and show you what allows you to be really good at building these agentic workflows.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:41&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Being able to do this is one of the most important skills in AI today and will open up a lot more&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:46&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opportunities, be it job opportunities or opportunities to just build amazing software&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:51&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yourself. With that, let&amp;#39;s go on to the next video to dive more into what are agentic workflows.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;11-what-is-an-agentic-ai&#34;&gt;1.1 What is an agentic AI&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So what is Agentic AI &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; why are Agentic AI workflows so powerful&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The way that many of us use large language models &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; LLMs today is by prompting it to say,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write an essay &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; us on a certain topic X&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I think of that as akin to going to a human,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, going to an AI &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; asking it to please type out an essay &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; me by writing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;from the first word to the last word all &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; one go &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; without ever using backspace&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It turns out that we as people, we don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t do our best writing like that by being forced to write&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this completely linear order &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; nor &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; AI models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But despite the difficulty of being&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constrained to write &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this way, our LLMs &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; surprisingly well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In contrast, with an agentic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflow, this is what the process might look like&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You may ask it to first write an essay&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outline on a certain topic, then ask &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it needs to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; any web research&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And after doing some web&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;research &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe downloading some web pages, then to write the first draft &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then to read&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the first draft &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; see what parts need revision &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; more research &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then revise the draft &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this type of workflow is more akin to doing some thinking &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; some research &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doing some revision &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then doing some more thinking &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And with this iterative&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;process, it turns out that an agentic workflow can take longer, but it delivers a much better&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work product&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So an agentic AI workflow is a process where an LLM based app executes multiple&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;steps to complete a task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this example, you might use an LLM to write the first essay outline&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then you might use an LLM to decide what search terms to type into a web search engine &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;really what search terms to call a web search API with &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to get back relevant web pages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Based on that, you can feed the downloaded web pages into an LLM to have it write the first draft&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then maybe use another LLM to reflect &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; decide what needs more revision&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then depending&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on how you design this workflow, perhaps you may even add a human &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the loop step where the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;has the option to request human review, maybe of some key facts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And based on that, it may then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;revise the draft &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this process results &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a much better work output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One of the key skills&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you learn &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this course is how to take a complex task like writing an essay &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; breaking it down&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;into smaller steps &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; agentic workflows to execute one step at a time to then get the work output&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that you want&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And knowing how to decompose the task into steps &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how to build the components&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to execute the individual steps well turns out to be a tricky but important skill that will&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;determine your ability to build agentic workflows &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a huge range of exciting applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;course, a running example that we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll use and something that you build alongside me is a research&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s an example of what it will look like. You can enter a research topic like how do I&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;build a new rocket company to compete with SpaceX&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t personally want to compete with SpaceX,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you want to, you can try asking a research agent to help your background research&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So this agent starts with planning out what research to use, including calling a web search&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;engine to download some web pages, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then to synthesize &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; rank findings, draft an outline,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have an editor&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent review &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coherence, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then finally generate a comprehensive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;markdown report, which it has done here, building a new rocket company to compete with SpaceX&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with an intro, background, findings, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I think it points out appropriately that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this is going to be a tough startup to build, so I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m not personally planning to do this, but if&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you want to tackle something like this, maybe a research agent like this could help you with some&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initial research&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And by finding &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; downloading multiple sources &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; deeply thinking about it,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this actually ends up with a much more thoughtful report than just prompting an LLM to write an essay&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you would&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One of the reasons I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m excited about this is because in my work, I&amp;#39;&lt;/span&gt;ve ended up&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;building quite a few specialized research agents, be it &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; legal documents &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; conflict legal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compliance, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; some healthcare sectors, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; some business product research areas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so I hope&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that working through this example, you &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; only learn how to build agentic workflows &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;other applications, but that some of the ideas &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; building research agents will be directly useful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to you &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ever need to build a custom research agent yourself&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now, one of the often discussed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;areas of AI agents is how autonomous are they&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; What you just saw here was a relatively complex,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;highly autonomous Agentic AI workflow, but there are also other simpler workflows that are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incredibly valuable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go on to the next video to talk about the degree to which agentic&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflows can be autonomous, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; does it give you a framework to think about how&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might go about building different applications &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how easy &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; difficult they might be&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See you &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the next video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12-degrees-of-autonomy&#34;&gt;1.2 Degrees of autonomy&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Agents can be autonomous to different degrees&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; A few years ago, I noticed within the AI community&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that there was a growing controversial debate about what is an agent, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; some people are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;writing a paper saying I built an agent, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; others will say, no, that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s not really a true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I felt this debate was unnecessary, which is why I started using the term agentic,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;because I thought &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; we use it as an adjective rather than a binary, it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s either an agent or not,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re going to have to acknowledge that systems can be agentic to different degrees.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s just call it all agentic and move on with the real work of building these systems&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rather than debating, you know, is this sufficiently autonomous to be an agent &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I remember when I prepared a talk on agentic reasoning, one of my team members actually&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;came to me &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; said, hey, Andrew, we don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need yet another word. You know, we have agent,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;why are you making up another word, agentic&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; But I decided to use it anyway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then later on,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wrote an article &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a given newsletter, The Batch, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then also posted on social media,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;saying that instead of arguing over which word to include &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; exclude as being a true agent,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s acknowledge that different degrees to which systems can be agentic. And I think this helped&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;move past the debate on what is a true agent &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; let us just focus on actually building them&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Some agents can be less autonomous&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So take the example of writing an essay about black holes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can have a relatively simple agent to come up with a few web search terms &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; web search queries&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then you can hard code &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; that you call a web search engine, fetch some web pages,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then use that to write an essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this is an example of a less autonomous agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with a fully deterministic sequence of steps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this will work okay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In terms of notational convention, throughout this course, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll use the red color,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as you see here on the left, to denote the user input, such as a user query &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; later examples, maybe the input document into an agentic workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The gray boxes denote calls to an LLM, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the green boxes, like the web search &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the web&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fetch boxes that you see here, indicate steps where other software is being used to carry out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an action, such as a web search API call &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; executing code to fetch the contents of a website&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then an agent can be more autonomous, where, given a request to write an essay about black holes,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perhaps you let the LLM decide, does it want to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a web search, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; does it want to search&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recent news sources, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; does it want to search &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; recent research papers on the website archive&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Based on that, maybe &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example, the LLM, &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; the human engineer, but the LLM chooses,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, to call a web search engine, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then after that, you may let the LLM decide&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how many web pages does it want to fetch, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it fetches the PDF, does it need to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;call a function, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; also call a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, to convert the PDF to text&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, maybe it fetches its top few web pages, then it can write an essay,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;decide whether to reflect &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; improve, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe even go back to fetch more web pages,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then to finally produce an output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so even &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; this example of a research agent, we can see that some agents can be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;less autonomous, with a linear sequence of steps to be executed, determined by a programmer,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; some can be more autonomous, where you trust the LLM to make more decisions,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the exact sequence of steps that happens may be even determined by the LLM, rather than&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advance by the programmer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; less autonomous systems, you will usually have all the steps predetermined &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advance,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; any functions it calls, like web search, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll call that tool use, as you learn&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the third module &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this course, might be hard&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;coded by the human engineer, by you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; me, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; most of the autonomy is &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; what text the LLM generates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;At the end of the spectrum would be highly autonomous agents, where the agent makes many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;decisions autonomously, including, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, deciding what is the sequence of steps it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;will carry out &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to write the essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s some highly autonomous agents that can even write new functions, or sometimes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create new tools that it can then execute&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And somewhere &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; between are semi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;autonomous agents, where it can make some decisions,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;choose tools, but the tools are usually more predefined&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;As you look at different examples &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this course, you learn how to build applications&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;anywhere on this spectrum of less to more highly autonomous, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you find that there&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;are tons of applications &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the less autonomous end of the spectrum that are very valuable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;being built &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; tons of businesses today, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; at the same time, there are also applications&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;being worked on at the more highly autonomous end of the spectrum, but those are usually&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;less easily controllable, a little bit more unpredictable, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; also a lot of active research&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as well to figure out how to build these more highly autonomous agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And with that, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go on to the next video to dive deeper into this and to hear about&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;some of the benefits of using agents &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; why they allow us to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; things that just were&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; possible with earlier generations of base applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;13-benefits-of-agentic-workflows&#34;&gt;1.3 Benefits of agentic workflows&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I think the one biggest benefit of agentic workflows is that it allows you to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tasks effectively that just previously were &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; possible&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But there are other benefits as well,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;including parallelism that lets you &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; certain things quite fast, as well as modularity that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lets you combine the best of three components from many different places to build an effective&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look. My team collected some data on a coding benchmark that tests the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ability of different LLMs to write code to carry out certain tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The benchmark used &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is called Human Eval, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it turns out that GPT &lt;span style=&#34;color:#ae81ff&#34;&gt;3.5&lt;/span&gt;, this is a model that the first publicly&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;available version of Chat GPT was based on, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; asked to write the code directly, to just type&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out the computer program, gets &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; right on this benchmark&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is a positive k&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;metric&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; GPT &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a much better model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Its performance leaps to &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; with this also non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agentic workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But it turns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out that as large as the improvement was from GPT &lt;span style=&#34;color:#ae81ff&#34;&gt;3.5&lt;/span&gt; to GPT &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, that improvement is dwarfed by what&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can achieve by wrapping GPT &lt;span style=&#34;color:#ae81ff&#34;&gt;3.5&lt;/span&gt; within an agentic workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Using different agentic techniques,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll learn about later in this course, you can prompt GPT 3.5 to write code and then maybe&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reflect on the code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; figure out &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you can improve it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And using techniques like that, you can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;actually get GPT &lt;span style=&#34;color:#ae81ff&#34;&gt;3.5&lt;/span&gt; to get much higher levels of performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And similarly, GPT &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; used &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context of an agentic workflow also does much better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So even with today&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s best LLMs, an agentic&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflow lets you get much better performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; fact, what we saw &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example was the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;improvement from one generation of model to another, which is huge, is still &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; as big a difference&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as implementing an agentic workflow on the previous generation of model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Another benefit of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;using agentic workflows is that they can parallelize some tasks &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; thus &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; certain things much faster&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;than a human&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ask an agentic workflow to write an essay about black holes, you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;might be able to have three LLMs run &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parallel to generate ideas &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; web search terms to type&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;into the search engine&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Based on the first web search, it may identify, say, three top results to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fetch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And based on the second web search, it may identify a second set of web pages to fetch &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it turns out that whereas a human doing this research would have to read these nine web&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pages sequentially &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; one at a time, when you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re using an agentic workflow, you can actually&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parallelize all nine web page downloads &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then finally feed all these things into an LLM to write&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So even though agentic workflows &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; take longer than truly non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agentic workflows &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; by&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;direct generation by just prompting a single time, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you were to compare this type of agentic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflow to how a human would have to go about the task, the ability to parallelize downloading lots&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of web pages can actually let it &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; certain tasks much faster than the non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;parallel sequential way&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that a single human might process this data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; To build on this example, it turns out one of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;things I often &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; when building agentic workflows is look at the individual components like the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; swap out components&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, maybe I look at the web search engine I use up&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;here &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I might decide that I want to soften a new web search engine&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When building agentic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflows, there are actually multiple web search engines including Google, which you can access&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;by a server, as well as others like Bing, DuckDuckGo, Tavily, u&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There are actually quite a lot of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; web search engines designed &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; LLMs to use&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or maybe instead of just doing three web&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;searches, maybe on this step we can swap &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a new news search engine so we can find out what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;latest news on recent breakthroughs on black hole science&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And lastly, instead of using the same LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; all of the different steps, I will often try out different large language models &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe try&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out different LLM providers to see which one gives the best result &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; different steps of this system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So to summarize, the main reason I use agentic workflows is it just gives much better performance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on many different applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; addition, it can also paralyze some tasks that humans would&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;otherwise have to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; sequentially&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And the modular design of many agentic workflows also lets us&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; update tools &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sometimes swap out models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; We&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve talked a lot about the key components of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;building agentic workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s now take a look at a range of Agentic AI applications to give you&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a sense of the sorts of things people are already building &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the sorts of things&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll build yourself. Let&amp;#39;&lt;/span&gt;s go on to the next video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;14-agentic-ai-applications&#34;&gt;1.4 Agentic AI applications&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at some examples of Agentic AI applications.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One task that many businesses carry out is invoice processing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So given an invoice like this, you might want to write software to extract the most important&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fields, which &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; this application, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say is the biller, that would be tech flow solutions,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the biller address, the amount due, which is &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;000&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the due date, which looks like it is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;August &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;th, &lt;span style=&#34;color:#ae81ff&#34;&gt;2025.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; many finance departments, maybe a human would look at invoices &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; identify&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the most important fields, who &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; we need to pay by when, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; record these &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a database to make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sure that payment is issued &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If you were to implement this with an agentic workflow,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; so like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You write input an invoice, then call a PDF to text conversion API&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to turn the PDF into maybe formatted text, such as markdown text &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM to ingest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;will look at the PDF &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; figure out, is this actually an invoice &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; is this some other type&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of document that they should just ignore&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it is an invoice, then it will pull up the required&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fields as well as use an API &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; use a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; to update the database &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to save the most&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;important fields &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the database records&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So one aspect of this agentic workflow is that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;there is a clear process to follow, is identify the required fields &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; record &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the database&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Tasks like these with a clear process you want followed tend to be maybe easier &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; agentic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflows to carry out because it leads to a relatively step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step way to reliably carry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out this task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s another example, maybe just a little bit harder. So if you want to build an&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent to respond to basic customer order inquiries, then the steps might be to extract the key&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;information, so figure out what exactly did the customer order, what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the customer&amp;#39;&lt;/span&gt;s name, then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;look up the relevant customer records, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then finally draft a response &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; human to review before&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the email response is sent to the customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So again, there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a clear process here and we&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;will implement this step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step, where we take the email, feed it to an LLM to verify &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to extract&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the order details, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; assuming the customer email is about an order, the LLM might then choose to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;call an order&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s database to then pull up that information. That information then goes to the LLM&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to then draft an email response, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the LLM might choose to use a request review &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; that, say, puts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this draft email from the LLM into queue &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; humans to review, so they can then be sent out after a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;human has reviewed &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; approved it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So customer order inquiry agents like these are being built&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; deployed &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; many businesses today&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; To look at a more challenging example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you want to build a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customer service agent to respond &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; just to questions about an order they place, but to respond&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to a more general set of questions, anything a customer may ask, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe the customer will ask,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you have any black jeans &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; blue jeans&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; And to answer this question, you need to maybe make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multiple API calls to your database to first check the inventory &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; black jeans, then check inventory&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; blue jeans, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then respond to the customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this is an example of a more challenging query,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where given a user input, you actually have to plan out what is the sequence of database queries&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to check &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; inventory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a user asks, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to return the beach towel I bought, then to answer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this, maybe we need to verify that the customer actually bought a beach towel, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then double&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;check the &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; policy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Maybe our set returns only &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; days within the date of purchase, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; only the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;towel was unused&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; is allowed, then have the agent issue a &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; packing slip, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;also set the database record to &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pending&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the required steps to process&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the customer requests are &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; known ahead of time, then it results &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a more challenging process,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where the LLM base application has to decide &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; itself that these are the three steps needed &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;order to respond appropriately to this task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But you learn about some of the latest work on how to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;approach this type of problem too&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And to give one last example of maybe an especially difficult&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type of agent to build, there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a lot of work on computer use by agents, in which agents will&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attempt to use a web browser &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; read a web page to figure out how to carry out a complex task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this example, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve asked an agent to check whether seats are available on two specific United&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Airlines flights from San Francisco to Washington DC, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the DCA airport&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The agent has access to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a web browser they can use to carry out this task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the video here, you can see it navigating&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the United website independently, clicking on page elements &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; filling &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the text fields on the page&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to carry out the search that I requested&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; As it works, the agent reasons over the content of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;page to figure out the actions it needs to take to complete the task, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; what it should &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s some trouble checking flights on the United site, and instead decides to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;navigate to the Google Flights website to search &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; available flights&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; On the Google Flight, you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;see here it finds several flight options that match the user&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s query, and the agent then picks one and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is taken back to the United website, where it looks like it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s now on the correct web page, and so is&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;able to determine that yes, there are seats available on the flights that I asked about&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So computer use&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is an exciting cutting&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;edge area of research right now, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; many companies are trying to get computer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;use agents to work&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; While the agent you saw here did eventually figure out the answer, I often see&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agents having trouble using web browsers well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a web page is slow to load, an agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;may fail to understand what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s going on, and many web pages are still beyond agents&amp;#39;&lt;/span&gt; abilities to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pause &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to read accurately&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But I think computer use agents, even though &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; yet reliable enough&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to use mission&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;critical applications today, are an exciting &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; important area of future development&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So when I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m considering building Agentic AI workflows, the tasks that are easier will tend to be ones&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where there is a clear step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step process, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a business already has a standard procedure, a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;standard offering procedure to follow, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then it can be quite a lot of work to take that procedure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; codify it up &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; an AI agent, but that tends to lead to easier implementations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One thing that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;makes it easier is &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you are using text&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only assets, because LLM&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;language models have&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grown up really processing text, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you need to process other input modalities, it may well be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doable, but it maybe gets a little bit harder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And on the harder end of the spectrum, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the steps are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; known ahead of time of what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s needed to carry out a task, like you saw for the more advanced&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customer service agent, then the agent may need to plan &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; solve as you go, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this tends to be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;harder &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more unpredictable &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; less reliable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then as mentioned, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it needs to accept rich&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;modal inputs such as sound, vision, audio, that also tends to be less reliable than the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;only header process text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I hope that gives you a sense of the types of applications you might build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with agentic workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When implementing one of these things yourself, one of the most important&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;skills is to look at a complex workflow &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; figure out what are the individual steps so you can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;implement an agentic workflow to execute those steps one at a time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the next video, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll talk&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;about task decomposition, that is, given a complex thing you want to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;, like write a research report&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; have a customer agent get back to customers, how &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; that down into discrete steps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to try to implement an agentic workflow&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go see that in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;15-task-decomposition-identifying-the-steps-in-a-workflow&#34;&gt;1.5 Task decomposition: Identifying the steps in a workflow&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;People &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; businesses &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a lot of stuff&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; How &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you take this useful stuff that we &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; it down into discrete steps &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the agentic workflow to follow&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Take the example of building a research agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If you want an AI system to write an essay on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a topic X, one thing you could &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is prompt an LLM to have it generate an output directly&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you were to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; topics that you want deeply researched,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you may find that the LLM output covers only the surface level points, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; maybe covers only the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obvious facts, but doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t go as deep into the subject as you want it to. In this case, you&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;might then reflect on how you as a human would write an essay on a certain topic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Would you just&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sit down &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; start writing, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; would you take multiple steps, such as first write an essay&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outline, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then search the rep, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then based on the input from the web search, write the essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;As I take a task &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; decompose it into steps, one question I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m always asking myself is,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I look at these steps one, two, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; three, can each of them be done either by an LLM, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;by a short piece of code, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; by a function call, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; by a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, I think an LLM can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe write a decent outline on many topics that I would want it to help me think through&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;say probably okay on the first step, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then I know how to use an LLM to generate search terms&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to search the web&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So, I would say the second step is also doable, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then based on web search,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I think an LLM could input the web search results &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; write an essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so, this would be a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reasonable first attempt at an agentic workflow &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; writing an essay that goes deeper than just&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;direct generation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I were to then implement this agentic workflow &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; look at the results,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe you find that the results still aren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t good enough. It&amp;#39;&lt;/span&gt;s still &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; yet as deeply thoughtful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Maybe the essays feel a little bit disjointed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This has actually happened to me&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I once built&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a research agent using this workflow, but when I read the output, it felt a bit disjointed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You know, the start of the article didn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t feel completely consistent with the middle,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;didn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t feel completely consistent with the end. In this case, what you might do is then reflect&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on how you would change the workflow &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you as a human found that the essay is a little bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;disjointed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One thing you could &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is take the third step &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; further decompose, write the essay&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;into additional steps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So, instead of writing the essay on one go, you might instead have it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write the first draft, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then consider what parts need revision, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then revise the draft&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this would be how I as a human might go about it, to &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; just write the final essay at my first&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attempt, but write the first draft &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then read over it, which is another step that the LLM is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pretty decent at&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then based on my own critique of my own essay, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll revise the draft.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So to recap, I started off with direct generation, just one step, decided it wasn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t good enough,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so broke that down into three steps, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then maybe decided that still isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t good enough,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; took one of the steps &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; further broken it down &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; decomposed it into three more steps,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;resulting &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this more complex, richer process &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; generating an essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And depending on how&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;satisfied you are with the results of this process, you may choose to even modify this essay&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generation process further&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s look at the second example of how to decompose complex tasks&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;into smaller steps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Take the example of responding to basic customer order inquiries&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The first step&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that a human customer specialization might carry out might be to first extract the key information,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;such as who is this email from, what did they order, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; what is the order number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And these&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;are things that an LLM could &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I could just say, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s have an LLM do that. The second step&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;would be to then find the relevant customer records&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So to write &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; generate the relevant&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;database queries to pull up the order of what the customer had ordered &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; when I shipped &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I think an LLM with the ability to call a function to query the orders database should be able to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And lastly, having pulled up the customer record &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the customer order record, I might then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; send a response back to the customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I think with the information we pulled up,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this third step is also doable with an LLM &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I give the option to call an API to send an email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So this would be another example of taking a task of responding to customer email &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; breaking it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;down into three individual steps where I can look at each of these steps &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; say, yep, I think an LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; one LLM with the ability to call a function to query a database &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; send an email should be able&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Just one last example &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the invoice processing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; After a PDF invoice has been converted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to text, the first step is to pull out the required information, the name of the biller, the address,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the due date, the amount due, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And now I should be able to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I want to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;check that the information was extracted &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; save it &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a new database entry, then I think an LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;should be able to help me call a function to update the database record&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so to implement this,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we implement an agentic workflow to carry out basically these two steps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When building agentic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflows, I think of myself as having a number of building blocks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One important building block&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;would be large language models &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; maybe large multimodal models &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I want to try to process&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;images &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; audio as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And LLMs are good at generating text, deciding what to call,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe extracting information&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For some highly specialized tasks, I might also use some other&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AI models, such as an AI model &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; converting a PDF to text &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;speech &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; image&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;analysis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In addition to AI models, I also have access to a number of software tools, including&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different APIs that I can call to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; voice search, to get maybe real&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;time weather data,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to send emails, check calendar, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I might also have tools to retrieve information,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to pull up data from a database, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to invent RAG &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; retrieval augmented generation,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where I can look up a large text database &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; find the most relevant text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or I might also&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have tools to execute code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this is a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; that lets an LLM write code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then run the code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on your computer to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a huge range of things&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; some of these tools seem a bit foreign to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you, don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t worry about it. We&amp;#39;&lt;/span&gt;ll go through the most important tools &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; much greater detail &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a later module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But I think of a lot of my work when I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m building an agent workflow as looking at&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the work that the person &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; business is doing &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then trying to figure out with these building&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;blocks, how can I sequence these building blocks together &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to carry out the tasks that I&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;want my system to carry out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this is why having a good understanding of what building&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;blocks are available, which I hope you have a better sense of by the end of this course as well,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;will allow you to better envision what agentic workflows you can build by combining these&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;building blocks together&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So to summarize, one of the key skills &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; building agentic workflows is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to look at a bunch of stuff that maybe someone does &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; to identify the discrete steps that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it could be implemented with&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And when I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m looking at the individual discrete steps,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one question I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m always asking myself is, can this step be implemented with either an&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LLM &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; with one of the tools such as an API &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a function call that I have access to&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the answer is no, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll then often ask myself, how would I as a human do this step? And is it&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;possible to decompose this further &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; this down into even smaller steps that then maybe is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more amenable to implementation with an LLM &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; with one of the software tools that I have&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So I hope this gives you a rough sense of how to think about task decomposition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; you feel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t fully have it yet, don&amp;#39;&lt;/span&gt;t worry about it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; We&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll go through many more examples&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this course &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you have a much better understanding of this by the end of this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;course&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But it turns out that as you build agentic workflows, you find that often you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;build an initial task decomposition, initial agentic workflow, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then you want to keep&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on iterating &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; improving on it quite a few times until it delivers the level of performance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that you want&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And to drive this improvement process, which I found important &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;projects, one of the key skills is to know how to evaluate your agentic workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the next&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;video, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll talk about evaluations or evals and discrete key components, how you can build,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then also keep on improving your workflows to get the performance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that you want&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s talk about evals in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;16-evaluations-agentic-evals&#34;&gt;1.6 Evaluations agentic (evals)&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:04&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I&amp;#39;ve worked with many different teams on building agentic workflows, and I&amp;#39;ve found that one&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of the biggest predictors for whether someone is able to do it really well versus be less&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;efficient at it is whether or not they&amp;#39;re able to drive a really disciplined evaluation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;process.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:17&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So, your ability to drive evals for your agentic workflow makes a huge difference in your ability&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:23&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to build them effectively.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this video, we&amp;#39;ll take a quick overview of how to build evals, and this is a subject&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that we&amp;#39;ll actually go into much deeper in a later module in this course.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:35&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So, let&amp;#39;s take a look.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:37&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;After building an agentic workflow like this one for responding to customer order inquiries,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:43&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it turns out that it&amp;#39;s very difficult to know in advance what are the things that could&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:47&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go wrong.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:48&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so, rather than trying to build evaluations in advance, what I recommend is you just look&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;for the outputs and manually look for things that you wish it was doing better.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For example, maybe you read a lot of outputs and find that it is unexpectedly mentioning&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your competitors more than it should.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Many businesses don&amp;#39;t want their agents to mention competitors because it just creates&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:12&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an awkward situation.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And if you read some of these outputs, maybe you find that it sometimes says, I&amp;#39;m glad&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:17&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you shopped with us.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We&amp;#39;re much better than our competitor, ComproCo.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:21&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or maybe sometimes they say, sure, it should be fun.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:23&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unlike RivalCo, we make returns easy.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:25&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And you may look at this and go, gee, I really don&amp;#39;t want this to mention competitors.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is an example of a problem that is really hard to anticipate in advance of building&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:36&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this agentic workflow.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:37&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So, the best practice is really to build it first and then examine it to figure out where&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:42&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it is not yet satisfactory, and then to find ways to evaluate as well as improve the system&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:47&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to eliminate the ways that it is still not yet satisfactory.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:51&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assuming your business considers it an error or a mistake to mention competitors&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:57&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;in this way, then as you work on eliminating these competitor mentions, one way to track&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;progress is to add an evaluation or an eval to track how often this error occurs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So, if you have a named list of competitors like ComproCo, RivalCo, the other co, then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can actually write code to just search in your own output for how often it mentions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;these competitors by name and count up as a number, as a fraction of the overall responses,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how frequently it mistakenly mentions competitors.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:29&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One nice thing about the problem of competitor mentions is it&amp;#39;s an objective metric, meaning&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:35&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;either the competitor was mentioned or not.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:38&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And for objective criteria, you can write code to check for how often this specific&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error occurs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:46&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But because LLMs output free text, there are also going to be criteria by which you want&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:51&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to evaluate this output that may be more subjective and where it&amp;#39;s harder to just write code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:57&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to output a black and white score.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:59&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this case, using a LLM as a judge is a common technique to evaluate the output.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So, for example, if you&amp;#39;re building a research agent to do research on different topics,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then you can use another LLM and prompt it to maybe, say, assign the following essay&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a quality score between 1 and 5, where 1 is the worst and 5 is the best essay.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:21&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here, I&amp;#39;m using a Python expression to mean copy-paste the generated essay into this.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So, you can prompt the LLM to read the essay and assign it a quality score.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then I&amp;#39;m going to ask the research agent to write a number of different research reports,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:37&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;for example, on recent developments in black hole science or using robots to harvest fruit.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:43&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then in this example, maybe the judge LLM assigns the essay on black holes a score&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:48&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of 3, the essay on robot harvesting a score of 4, and as you work on improving your research&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:54&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent, hopefully you see these scores go up over time.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:58&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It turns out, by the way, that LLMs are actually not that good at these 1 to 5 scale ratings.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:03&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can give it a shot, but I personally tend not to use this technique that much myself.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But in a later module, you&amp;#39;ll learn some better techniques to have an LLM output more accurate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scores than asking it to output scores on a 1 to 5 scale, although some people will&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:17&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;do this, maybe an initial cut as an LLM as judge type of eval.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:22&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Just to give a preview of some of the Agentic AI evals you&amp;#39;ll learn about later in this course,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:28&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you&amp;#39;ve already heard me talk about how you can write codes to evaluate objective criteria,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:33&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;such as did it mention a competitor or not, or use an LLM as a judge for more subjective&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:37&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;criteria such as what&amp;#39;s the quality of this essay.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:39&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But later, you learn about two major types of evals.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:42&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One is end-to-end, where you measure the output quality of the entire agent, as well as component&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:48&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;level evals, where you might measure the quality of the output of a single step in the agentic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflow.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:54&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It turns out that these are useful for driving different parts of your development process.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:58&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One thing I do a lot as well is just examine the intermediate outputs, or sometimes we&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:03&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;call these the traces of the LLM, in order to understand where it is falling short of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:09&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my expectations.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And we call this error analysis, where we just read through the intermediate outputs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of every single step to try to spot opportunities for improvement.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:17&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And it turns out being able to do evals and error analysis is a really key skill.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:22&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So we have much more to say about this in the fourth module in this course.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We&amp;#39;re nearly to the end of this first module.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:29&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Before moving on, I just want to share with you what I think are the most important design&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:33&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patterns for building agentic workflows.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:35&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&amp;#39;s go take a look at that in the next video.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;17-agentic-design-patterns&#34;&gt;1.7 Agentic design patterns&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We build agentic workflows by taking building blocks &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; putting them together to sequence&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out these complex workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this video, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to share with you a few of the key design&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patterns, which are patterns &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; how you can think about combining these building blocks into more&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look. I think four key design patterns for building agentic&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflows are reflection, two&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;use, planning, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent collaboration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let me briefly go over&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what they mean, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll actually go through most of these in-depth latent discourse as well.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The first of the major design patterns is reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I might go to an LLM agent &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ask it to write code, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it turns out that an LLM might then generate code like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It defines&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;here a Python function to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a certain task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I could then construct a prompt that looks like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I can say, here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s code intended for a certain task, and then copy-paste whatever the LLM had&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;just output back into this prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then I ask it to check the code carefully &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; correctness,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;style, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; efficiency, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; give constructive criticism&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it turns out that the same LLM model&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompted this way may be able to point out some problems with the code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I then take this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;critique &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; feed it back to the model to say, looks like this is a bug, could you change the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code to fix it&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Then it may actually come with a better version of the code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; To give a preview of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re able to run the code and see where the code fails, then feeding that back to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the LLM can also cause it to be able to iterate &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; generate a much better, say, v3 version &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So reflection is a common design pattern where you can ask the LLM to examine its own outputs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; maybe bring &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; some external sources of information, such as run the code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generates any error messages, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; use that as feedback to iterate again &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; come up with a better&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version of its output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this design pattern isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t magic. It does not result in everything&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;working &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; of the time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But sometimes it can be a nice bump &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the performance of your system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve drawn this as if it was a single LLM that I&amp;#39;&lt;/span&gt;m prompting, but to foreshadow multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflows, you can also imagine instead of having the same model critique itself, you can imagine&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;having a critique agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And all that is, is an LLM that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s been prompted with instructions like,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your role is to critique code, here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s code intended for a task, check the code carefully, and so on.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And the second critique agent, maybe point out errors &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; run unit tests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And by having two&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;simulated agents where each agent is just an LLM prompted to take on a certain persona,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can have them go back &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; forth to iterate to get a better output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In addition to reflection&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pattern, the second important design pattern is &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Where today, LLMs can be given tools,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;meaning functions that they can call &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to get work done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ask an LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the best coffee maker according to reviewers, and you give it a web search tool,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then it can actually search the internet to find much better answers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or a code execution &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you ask a math question like, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I invest &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; compound interest, what &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; I have at the end&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It can then write code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; execute code to compute an answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Today, different developers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have given LLMs many different tools &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; everything from math &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; data analysis to gather information&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;by fetching things from the web &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; various databases, to interface with productivity apps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like email, calendar, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on, as well as to process images &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; much more&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And the ability&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of an LLM to decide what tools to use, meaning what functions to call, that lets the model get a lot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The third of the four design patterns is planning&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is an example from a paper&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;called Hugging GPT, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; which &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ask a system to please generate an image where a girl is reading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a book &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a pose is the same as a boy &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the image, then please describe the new image &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your voice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then a model can automatically decide that to carry out this task, it first needs to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find a pose determination model to figure out the pose of the boy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then to pose the image,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to generate a picture of a girl &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; image the text, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then finally text the speech&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; planning, an LLM decides what is the sequence of actions it needs to take&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, it is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a sequence of API calls so that it can then carry out the right sequence of steps &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the right order&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to carry out the task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So rather than the developer hard coding the sequence of steps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advance, this actually lets the LLM decide what are the steps to take&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Agents that plan today are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;harder to control &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; somewhat more experimental, but sometimes they can give really delightful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then finally, multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Just as a human manager might hire a number of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;others to work together on a complex project, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; some cases it might make sense &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you to hire&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a set of multiple agents, maybe each of which specializes &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a different role, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have them&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work together to accomplish a complex task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The picture you see here on the left is taken from a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;project called ChatDev, which is a software framework created by Chen Qian &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; collaborators&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In ChatDev, multiple agents with different roles, like chief executive officer, programmer, tester,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;designer, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on, collaborate together as &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; they were a virtual software company &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;collaboratively complete a range of software development tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s consider another example.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you want to write a marketing brochure, maybe you think of hiring a team of three people, such&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as a researcher to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; online research, a marketer to write the marketing text, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then finally an&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;editor to edit &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; polish the text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a similar way, you might consider building a multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflow &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; which you have a simulated research agent, a simulated marketer agent, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a simulated&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;editor agent that then come together to carry out this task &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent workflows are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more difficult to control since you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t always know ahead of time what the agents will do, but&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;research has shown that they can result &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; better outcomes &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; many complex tasks, including things&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like writing biographies &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; deciding on chess moves to make &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the game&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You learn more about&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent workflows later &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this course as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so with that, I hope you have a sense of what&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agentic workflows can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;, as well as of what are the key challenges of finding building blocks &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;putting them together, maybe via these design patterns, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to implement an agentic workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And of course, also developing eval so you can see how well your system is doing &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; keep on improving&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the next module, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to share with you a deep dive into the first of these design&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patterns, that is reflection, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you find that it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a maybe surprisingly simple to implement&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;technique that can give the performance of your system sometimes a very nice bump&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go on&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to the next module to learn about the reflection design pattern&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>「Scripts」Module 2: Reflection Design Pattern</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-02/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-02/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;module-2-reflection-design-pattern&#34;&gt;Module 2: Reflection Design Pattern&lt;/h1&gt;&#xA;&lt;h2 id=&#34;21-reflection-to-improve-outputs-of-a-task&#34;&gt;2.1 Reflection to improve outputs of a task&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:03&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The reflection design pattern is something I&amp;#39;ve used in many applications, and it&amp;#39;s surprisingly easy to implement.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:07&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&amp;#39;s take a look.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Just as humans will sometimes reflect their own output and find a way to improve it, so can LLMs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For example, I might write an email like this, and if I&amp;#39;m typing quickly, I might end up with a first draft that&amp;#39;s not great.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:21&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And if I read over it, I might say,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:24&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;huh, next month isn&amp;#39;t that clear for what dates Tommy might be free for dinner, and there&amp;#39;s such a typo that I had, and also forgot to sign my name.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:33&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this would let me revise the draft to be more specific in saying, hey, Tommy, are you free for dinner on the 5th to the 7th?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A similar process lets LLMs also improve their outputs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can prompt an LLM to write the first draft in email, and given email version 1, email v1, you can pass it to maybe the same model,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the same large language model, but with a different prompt, and tell it to reflect and write an improved second draft to then get you the final output, email v2.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here, I have just hard-coded this workflow of prompting the LLMa once, and then prompting them again to reflect and improve, and that gives email v2.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:12&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It turns out that a similar process can be used to improve other types of outputs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For example, if you are having an LLM write code, you might prompt an LLM to write code to do a certain task, and it may give you v1 of the code,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:28&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and then pass it to the same LLM or maybe a different LLM to ask it to check for bugs and write an improved second draft of the code.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:36&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Different LLMs have different strengths, and so sometimes I would choose different models for writing the first draft and for reflecting and trying to improve it.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:46&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For example, it turns out reasoning models, sometimes also called thinking models, are pretty good at finding bugs,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and so I&amp;#39;ll sometimes write the first draft of the code by direct generation, but then use a reasoning model to check for bugs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, rather than just having an LLM reflect on the code, it turns out that if you can get external feedback, meaning new information from outside the LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reflection becomes much more powerful.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In the case of code, one thing you can do is just execute the code to see what the code does,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and by examining the output, including any error messages of the code, this is incredibly useful information for the LLM to reflect and to find a way to improve his code.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So in this example, the LLM generated the first draft of the code, but when I run it, it generates a syntax error.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:36&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When you pass this code output and error logs back into the LLM and ask it to reflect on the feedback and write a new draft,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this gives it a lot of very useful information to come up with a much better version 2 of the code.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:50&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So the reflection design pattern isn&amp;#39;t magic.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It does not make an LLM always get everything right 100% of the time, but it can often give it maybe a modest bump in performance.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:01&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But one design consideration to keep in mind is reflection is much more powerful when there is new additional external information that you can ingest into the reflection process.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So in this example, if you can run the code and have that code output or error messages as an additional input to the reflection step,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that really lets the LLM reflect much more deeply and figure out what may be going wrong, if anything,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and results in a much better second version of the code than if there wasn&amp;#39;t this external information that you can ingest.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So one thing to keep in mind, whenever reflection has an opportunity to get additional information, that makes it much more powerful.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:41&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now with that, let&amp;#39;s go on to the next video where I want to share with you a more systematic comparison of using reflection versus direct generation or something we sometimes call zero shot prompting.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:54&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&amp;#39;s go on to the next video.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-why-not-just-direct-generation&#34;&gt;2.2 why not just direct generation?&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at why we might prefer to use a reflection workflow rather than just&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompting an LLM once &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; having it directly generate the answer &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; be done with it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;With direct generation, you just prompt the LLM with an instruction &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; let it generate an answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So you can ask an LLM to write an essay about black holes &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have it just generate the text,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; have it write the Python functions to calculate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compound interest &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have it just write the code directly&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The prompt examples you see here are also called zero&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let me explain what zero&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot means&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In contrast to zero&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a related approach is to include one &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; more examples of what you want the output to look like&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this is known as one&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the prompt you include&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one example of a desired input&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;output pair, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; two&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; few&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;depending on how many such examples you include &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so zero&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting refers to &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you include zero examples &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t include&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;any examples of the desired outputs that you want&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t worry if you aren&amp;#39;&lt;/span&gt;t yet familiar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with these terms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The important thing is that &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the examples you see here, you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re just prompting&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the LLM to directly generate an answer &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; one go, which I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m also calling zero-shot prompting&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;because we include zero examples&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out that multiple studies have&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shown that reflection improves on the performance of direct generation on a variety of tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This diagram is adapted from the research paper by Madaan &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; others, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this shows a range of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different tasks being implemented with different models &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; with &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; without reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The way to read this diagram is to look at these pairs of adjacent light followed by&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dark&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;colored bars, where the light bar shows zero&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the dark bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shows the same model but with reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And the colors blue, green, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; red show&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;experiments run with different models, such as GPT&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; GPT&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt; And what you see is,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; many different applications, the dark bar that is with reflection is quite a bit higher&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;than the light bar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But of course, your knowledge may vary depending on your specific application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here are some more examples where reflection might be helpful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you are generating structured data, such as an HTML table, sometimes it may have incorrect&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;formatting of the output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So a reflection prompt to validate the HTML code could be helpful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s basic HTML, this may not help that much, since LLMs are pretty good at basic HTML. But&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;especially &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have more complex structured outputs, like maybe a JSON data structure with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a lot of nesting, then reflection may be more likely to spot bugs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ask an LLM to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generate a sequence of steps that comprise a set of instructions to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; something, such as how to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew a perfect cup of tea, sometimes the LLM may miss steps &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a reflection prompt to ask to check&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;instructions &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coherence &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; completeness might help spot errors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or something that I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve actually&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;worked on was using an LLM to generate domain names, but sometimes the names it generates has&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an unintended meaning &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; may be really hard to pronounce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve used reflection prompts&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to double check &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the domain name has any problematic connotations &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; problematic meanings,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the name is hard to pronounce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And we actually used this at one of my team&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s AI fund&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to help brainstorm domain names &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; startups that we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re working on. I want to show you a couple of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples of reflection prompts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For brainstorming domain names, you might ask it to review the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;domain names you suggested, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then ask it to check &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; each name is easy to pronounce&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Check&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; each name might mean something negative &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; English &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; other languages, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then output a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;short list of only the names that satisfy these criteria&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or to improve an email, you can write a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reflection prompt to tell it to review the email first draft, check the tone, verify all fact states&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; promises are accurate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This would make sense &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the context of the LLM having been fed a number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of facts &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dates &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to write the email drafts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; All this would be provided as part&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of the LLM context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then based on any problems it may find, write the next draft of the email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So some tips &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; writing reflection prompts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It helps to clearly indicate that you want it to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;review &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to reflect on the first draft of the output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you can specify a clear set of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;criteria, such as whether the domain name is easy to pronounce &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; whether it may have negative&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connotations &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; email, check the tone &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; verify the facts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then that guides the LLM better&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; reflecting &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; critiquing on the criteria that you care the most about&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I found that one of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ways I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve learned to write better prompts is to read a lot of other prompts that other people&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have written&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Sometimes I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll actually download open source software and go and find the prompts&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a piece of software that I think is especially well done to just go &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; read the prompts that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the authors have written&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So that I hope you have a sense of how to write a basic reflection prompt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that maybe you even try it out &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your own work to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it helps give you better performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In the next video, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to share with you a fun example where we&amp;#39;&lt;/span&gt;ll start to look at&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;modal inputs &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; We&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll have an algorithm reflect&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on an image being generated &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a chart being generated&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go take a look.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;23-chart-generation-workflow&#34;&gt;2.3 chart generation workflow&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In the coding lab that you see &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this module, you play with a chart generation workflow where&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you use an agent to generate nice&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;looking diagrams&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out reflection can significantly improve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the quality of this output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look. In this example, I have data from a coffee machine&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showing when different drinks, such as a latte coffee &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; hot chocolate &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a cappuccino coffee&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on, were sold &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; what price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And we want to have an agent create a plot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;comparing Q1 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; first quarter coffee sales &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2024&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2025.&lt;/span&gt; So one way to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; it would be to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write a prompt that asks an LLM to create a plot comparing Q1 coffee sales &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2024&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2025&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;using the data stored &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a spreadsheet as a CSV file &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; comma&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;separated values as a spreadsheet&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And an LLM might write Python code like this to generate the plot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And with this v1 of the code,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you execute it, it may generate a plot like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When I ran the code to the LLM output,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it actually generated this the first time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this is a stacked bar plot, which is &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; a very&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;easy way to visualize things &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it just doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t look a very good plot. But what you can do is then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;give it v1 of the code as well as the plot that this code generated &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; feed it into a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multimodal model that is an LLM that can also accept image inputs &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ask it to examine the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;image that was generated by this code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then to critique the image, find a way to come up with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;better visualization, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; update the code to just generate a clearer, better plot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Multimodal LLMs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;can use visual reasoning, so it can actually look visually at this figure to find ways to improve it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And when I did this, it actually generated a bar graph that isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t this stacked bar graph,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but a more regular bar graph that separates out the &lt;span style=&#34;color:#ae81ff&#34;&gt;2034&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2035&lt;/span&gt; coffee sales &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; what I thought&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;was a more pleasing &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; clearer way&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When you get to the coding lab, please feel free to mess around&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with the problems &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you can get maybe even better looking graphs &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; these&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Because&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different LLMs have different strengths &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; weaknesses, sometimes I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll use different LLMs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the initial generation &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, you may use one LLM to generate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the initial code, maybe open it as GPT&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;o &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; GPT&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; some model like that, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; just prompt it like a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompt like this to write Python code to generate visualization &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then the reflection&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompts might be something like this, where you tell the LLM to play the role of an expert data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;analyst that provides constructive feedback &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then give it the version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; of the code,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the part that was generated, maybe also the computational history from how the code was&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generated, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ask it to critique it &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; specific criteria&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Remember, when you give it specific&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;criteria like readability, clarity, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; completeness, it helps the LLM better figure out what to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then ask it to write new code to implement your improvements&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One thing you may find is that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sometimes using a reasoning model &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; reflection may work better than a non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reasoning model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;when you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re trying out different models for the initial generation and the reflection, these are&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different configurations that you might toggle &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; try different combinations of&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So when you get to the coding lab, I hope you have fun visualizing coffee sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now, when you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;building an application, one thing you may be wondering is, does reflection actually improve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;performance on your specific application&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; From various studies, reflection improves performance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;by a little bit on some, by a lot on some others, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe barely any at all on some other&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll be useful to understand its impact on your application and also give you&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;guidance on how to tune either the initial generation &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the reflection prompt to try to get&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;better performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the next video, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at evals or evaluations&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; reflection workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go on to the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;24-evaluating-the-impact-of-reflection&#34;&gt;2.4 Evaluating the impact of reflection&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reflection often improves the performance of the system, but before I commit to keeping it,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I would usually want to double check how much it actually improves the performance, because&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it does slow down the system a little bit by needing to take an extra step&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at evals for reflection workflows.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s look at an example of using reflection to improve the database query that an LLM writes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to fetch data to answer questions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say you run a retail store,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you may get questions like, which color product has the highest total sales&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To answer a question like this, you might have an LLM generate a database query&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve heard of database languages like SQL, SQL, it may generate a query in that type of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;language&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re not familiar with SQL, don&amp;#39;&lt;/span&gt;t worry about it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But after writing a database query, instead of using that directly to fetch information from&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the database, you may have an LLM, the same &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; different LLM, reflect on the version one database&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;query &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; update it to maybe an improved one, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then execute that database query against the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;database to fetch information to finally have an LLM answer the question&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So the question is, does using a second LLM to reflect &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; improve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on the database &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; SQL query actually improve the final output&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In order to evaluate this, I might collect a set of questions &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; set of prompts together with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ground truth answers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So maybe one would be, how many items are sold &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; May &lt;span style=&#34;color:#ae81ff&#34;&gt;2025&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;What&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the most expensive item in the inventory? How many styles are carried in my store?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And I write down &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; maybe &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; prompts, the ground truth answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then you can run this workflow without reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So without reflection would mean to take the SQL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;query generated by the first LLM &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; to just see what answer it gives&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And with reflection would&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mean to take the database query generated after the second LLM has reflected on it to see what&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer that fetches from the database&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then we can measure the percentage of correct answers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;from no reflection &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; with reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this example, no reflection gets the answers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;right &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; of the time, with reflection gets it right &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; of the time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this would suggest that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reflection is meaningfully improving the quality of the database queries I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m able to get to pull&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out the correct answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One thing that developers often end up doing as well is rewrite the reflection&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you want to add to reflection prompt an instruction to make the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;database query run faster &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; make it clearer&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Or you may just have different ideas &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; how to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rewrite either the initial generation prompt &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the reflection prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Once you put &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; place&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;evals like this, you can quickly try out different ideas &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; these prompts &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; measure the percentage&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;correct your system has as you change the prompts &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to get a sense of which prompts work&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;best &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re trying out a lot of prompts, building evals is important.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It really helps you have a systematic way to choose between the different prompts you might&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;be considering&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But this example is one of when you can use objective evals because there is a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;right answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The number of items sold was &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the answer is either right &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; wrong&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; How about&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;applications where you need more subjective rather than objective evaluations&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; In the plotting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example that we saw &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the last video, without reflection we had the stack bar graph, with reflection&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we had this graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But how &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; we know which plot is actually better&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; I know I like the latter one&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;better, but with different graphs varying on different dimensions, how &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; we figure out which&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one is better&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; And measuring which of these plots is better is more of a subjective criteria rather&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;than a purely black &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; white objective criteria&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; these more subjective criteria, one thing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is use an LLM as a judge&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And maybe a basic approach to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this might be to feed both&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plots into an LLM, a multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;modal LLM that can accept two images as input, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; just ask it which image&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out this doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t work that well. I&amp;#39;&lt;/span&gt;ll share an even better idea &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a second&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But one&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thing you could &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; might be to also give it some criteria by which to evaluate the two plots, such&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as clarity, how nice looking they are, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But it turns out that there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s some known issues of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;using LLMs to compare two inputs to tell you which one is better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; First, it turns out the answers are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;often &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; very good&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It could be sensitive to the exact wording of the prompt of the LLM as a judge,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sometimes the rank ordering doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t correspond that well to human expert judgment. And one&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manifestation of this is many LLMs will have a position bias&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Many LLMs, it turns out, will often&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pick the first option more often than the second option&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; fact, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve worked a lot of LLMs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where given two choices, whichever choice I present first, it will say the first choice is better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And maybe some LLMs prefer the second option, but I think most LLMs prefer the first option&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Instead of asking an LLMs to compare a pair of inputs, grading with a rubric can give more&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;consistent results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, you might prompt an LLM to tell it, given a single image,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;assess the attached image against the quality rubric, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the rubric &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; grading criteria may&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have clear criteria like does the plot have a clear title, are the access labels present,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is it an appropriate chart type, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on, with a handful of criteria like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it turns out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that instead of asking the LLM to grade something on a scale of &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; to &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, which it tends &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; to be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;well calibrated on, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you instead give it, say, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; binary criteria, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; criteria, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have it give&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; binary scores, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you add up those scores to get the number from &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; to &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; to &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; binary criteria, that tends to give more consistent results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re to gather a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;handful, say &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; user queries &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; different visualizations that the user may want to have&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of the coffee machine sales, then you can have it generate images without reflection &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; generate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;images with reflection, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; use a rubric like this to score each of the images to then check&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the degree to which &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; whether &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; the images generated with reflection are really better than&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the ones without reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then once you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve built up a set of evals like this, if ever you&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;want to change the initial generation prompt &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; you want to change the reflection prompt, you can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;also rerun this eval to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;, say, updating one of your prompts allows the system to generate images&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that scores more points according to this rubric&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so this too gives you a way to keep on tuning&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your prompts to get better &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; better performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; What you may find when building evaluations &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reflection &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; other agentic workflows is that when there is an objective criteria, code&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;based&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;evaluation is usually easier to manage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the example that we saw with the database query, we&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built up a database of ground truth examples &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ground truth outputs &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; just wrote code to see&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how often the system generated the right answer &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a really objective evaluation metric&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In contrast,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; small subjective tasks, you might use an element as a judge but it usually takes a little&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bit more tuning, such as having to think through what rubric you may want to use to get the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as a judge to be well calibrated &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to output reliable evals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I hope that gives you a sense&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of how to build evals to evaluate reflections &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; more generally even to evaluate different&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agentic workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Knowing how to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; evals well is really important &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; how you build agentic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflows effectively &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you hear me say more about this &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; later videos as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But now that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you have a sense of how to use reflection, what I hope to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the next video is a deep dive into&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one aspect of it, which is when you can get additional information from outside &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;turns out to make reflection work much better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the final video of this module, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;look at that technique &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; making your reflection workflows work much better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll see you in the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;25-using-external-feedback&#34;&gt;2.5 Using external feedback&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reflection with external feedback, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you can get it, is much more powerful than reflection&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;using the LLM as the only source of feedback&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m building an application, and if I&amp;#39;&lt;/span&gt;m just prompt engineering &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; direct generation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of a zero&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting, this is what performance might look like over time,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where initially, as I tune the prompt, the performance improves &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but then after a &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;, it sort of plateaus &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; flattens out, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; despite further engineering&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the prompt, it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s just hard to get that much better level of performance.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So instead of wasting all this time on tuning the prompt, sometimes it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d be better if only&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;earlier on &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the process, I had started adding reflection, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sometimes that gives a bump &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Sometimes it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s smaller, sometimes a bigger bump, but that adds complexity.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I had started adding &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; reflection, maybe at this point &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the process,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then started tuning the reflection prompt, then maybe I end up with a performance that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;looks like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But it turns out that &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m able to get external feedback,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;so that the only source of new information isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t just an LLM reflecting on the same&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;information as it had before, but some new external information, then sometimes,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as I &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; to tune the prompts &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; tune the external feedback, you end up with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an even much higher level of performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So something to consider &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you are working&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on prompt engineering, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you feel that your efforts are seeing diminishing returns,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re tuning a lot of prompts, but it&amp;#39;&lt;/span&gt;s just &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; getting that much better,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then maybe consider &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s reflection, or even better, if there&amp;#39;&lt;/span&gt;s some external feedback&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can interject to bump the performance curve off this fattening out red line to maybe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;some higher trajectory of performance improvement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Just as a reminder, we saw earlier,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one source of feedback &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re writing code would be if you were to just execute the code&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; see what output it generates, output &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; error messages, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; feed that output back to the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to let it have that new information to reflect, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then use that information to write a new&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version of the code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Here are a few more examples of when software codes &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; tools can create new&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;information to help the reflection process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re using LLM to write emails, and it&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sometimes mentions competitors&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; names, then if you write codes or build a software tool&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to just carry out pattern matching, maybe via regular expression pattern matching to search&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; competitors&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; names in the output, then whenever you find a competitor&amp;#39;&lt;/span&gt;s name, you just feed that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;back to the LLM as a criticism &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; as input&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; That&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s very useful information to tell it to just rewrite&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the text without mentioning those competitors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or as another example, you might use web search&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; look at other trusted sources &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to fact&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;check an essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re a research&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent that says the Taj Mahal was built &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1648&lt;/span&gt;, technically the Taj Mahal was actually commissioned&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1631&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it was finished &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1648.&lt;/span&gt; So maybe this isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t exactly incorrect, but it doesn&amp;#39;&lt;/span&gt;t&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;capture the accurate history either&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In order to more accurately represent when this beautiful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;building was built, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a web search to cuddle the snippet explaining exactly the period&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that the Taj Mahal was built &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; give that as additional input to your reflection agent, then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it may be able to use that to write a better version of the text on the history of the Taj Mahal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One last example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re using an LLM to write copy, maybe for a blog post or for a research&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;paper abstract, but what it writes is sometimes over the word limit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; LLMs are still &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; very good&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at following exact word limits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you implement a word count &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, just write code to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count the exact number of words, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it exceeds the word limit, then feed that word count back to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the LLM &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ask it to try again&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then this helps it to more accurately hit the desired length of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the output you wanted to generate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; each of these three examples, you can write a piece of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code to help find additional facts about the initial output to then give those facts, be it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that you found the competitor&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s name or information web search or the exact word count, to feed into&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the reflection LLM &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to help it &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a better job thinking about how to improve the output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Reflections are powerful too, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I hope you find it useful &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a lot of your own work&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the next&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;module, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll build on this to talk about tool use, where in addition to the handful of tool examples&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you saw, you learn how to systematically get your LLM to call different functions, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this will make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your agenting applications much more powerful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I hope you enjoyed learning about reflection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m going to now reflect on what you just learned. I hope to see you in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>「Scripts」Module 3: Tool Use</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-03/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-03/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;module-3-tool-use&#34;&gt;Module 3: Tool Use&lt;/h1&gt;&#xA;&lt;h2 id=&#34;31-what-are-tools&#34;&gt;3.1 What are tools?&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this module, you learn about &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use by LLMs, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that means letting your LLM decide when it might want to request to have a function called to take some action, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; gather some information, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; something &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Just as we as humans can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a lot more with tools than we can with just our bare hands, LLMs too can also &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a lot more with access to tools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But rather than using hammers &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; spanners &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; pliers, when we give tools, that is, functions, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; an LLM to request a call, that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s what lets it do a lot more.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you were to ask an LLM that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s been trained maybe many months ago, what time is it right now?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Well, that trained model does &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; know exactly what time it is, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so hopefully it responds, sorry, I &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; have access to the current time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you were to write a function &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; give the LLM access to this function, then that lets it respond with a more useful answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When we let LLMs call functions, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; more precisely, let an LLM request to call functions, that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s what we mean by tool use, and the tools are just functions that we provide to the LLM that it can request to call.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In detail, this is how &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use works&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this example, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m going to give the getCurrentTime function that I showed on the previous slide to the LLM.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When you then prompt it, what time is it, the LLM can decide to call the getCurrentTime function&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;That will &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; the current time, which is then fed back to the LLM &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the conversational history, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; finally the LLM can output is, say, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.20&lt;/span&gt;pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So the sequence of steps is, there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the input prompt.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The LLM, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, looks at the set of tools, which is just one &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example, but looks at the set of tools available, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it will decide &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example to call the &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; is a function that then returns a value, that value is fed back to the LLM, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then finally the LLM generates its output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, one important aspect of &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use is, we can leave it up to the LLM to decide whether &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; to use any of the tools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the same setup, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I was asking it, how much caffeine is &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; green tea, the LLM doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need to know the current time to answer this, and so it can generate an answer directly,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;green tea typically has this much caffeine, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it does so without invoking the getCurrentTime function&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In my slides, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m going to use this notation with this dashed box on top of the LLM to indicate that we&amp;#39;&lt;/span&gt;re providing a set of tools to the LLM &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM to choose to use when it deems appropriate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is as opposed to some examples you saw &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; earlier videos, where I, as a developer, had hard&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;coded &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, that I will always &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a web search at this point &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the research agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In contrast, the getCurrentTime function call is &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; hard&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;coded &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;, it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s up to the LLM to decide whether or not it wants to request a call to the getCurrentTime function.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And again, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re going to use this dashed box notation to indicate when we&amp;#39;&lt;/span&gt;re giving one &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; more tools to the LLM &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM to decide what tools, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; any, it wants to call&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here are some more examples of when &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use may help an LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;based app generate better answers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you were to ask it, can you find some Italian restaurants near Mountain View, California&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If it has a web search &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, then an LLM might elect to call a web search engine &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a query, restaurants near Mountain View, California, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; use the results that fetches to generate the output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you are running a retail store &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you want to be able to answer questions like, show me customers who bought white sunglasses, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; your LLM is given access to a query database &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, then it might look up the table of sales &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; what entries had a pair of white sunglasses sold &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then use that to then generate the output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Finally, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you wanted to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; an interest rate calculation, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I were to deposit &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; after &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; years, an interest rate of &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;, what would I have&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you happen to have an interest calculation &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, then it could invoke the interest calculation function to calculate that&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or it turns out, one thing you see later is letting an LLM write code, like just write a mathematical expression like this, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then to evaluate it, that would be another way to let an LLM calculate the right answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So as a developer, it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll be up to you to think through what are the sorts of things you want an application to really do, and then to create the functions or the tools that are needed to make them available to the LLM to let it use the appropriate tools to complete the sorts of tasks that maybe a restaurant recommender or a retail question answer or a finance assistant may want to do.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So depending on your application, you may have to implement &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; make different tools available to your LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So far, most of the examples we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve gone through made only one tool or one function available to the LLM.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But there are many use cases where you want to make multiple tools &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; multiple functions available &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; it to choose which of any to call&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re building a calendar assistant agent, you might then want it to be able to fulfill requests like, please find a free slot on Thursday in my calendar and make an appointment with Alice.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example, we might make available to the LLM a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a function to make an appointment, that is, to send a calendar invite, to check the calendar to see when I might be free, as well as to delete the appointment &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it ever wants to cancel an existing calendar entry&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so given the set of instructions, the LLM would first decide that of the different tools available, probably the first one it should use is check calendar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So call a check calendar function that will &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; when I am free on Thursday&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Based on that information, which is fed back to the LLM, it can then decide that the next step is to pick a slot, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say 3 p.m., and then to call the make appointment function to send a calendar invite to Alice, as well as to add it to my calendar.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The output of that, which hopefully is a confirmation that the calendar entry was sent out successfully, is fed back to the LLM, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then lastly, the LLM might tell me your appointment is set up with Alice at &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Thursday&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Being able to give your LLM access to tools is a pretty big deal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It will make your applications much more powerful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In the next video, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll take a look at how to write functions, how to create tools to then make them available to your LLM. Let&amp;#39;&lt;/span&gt;s go on to the next video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;32-creating-a-tool&#34;&gt;3.2 Creating a tool&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The process of how an LLM decides to call a function maybe seems a little bit mysterious&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initially because an LLM is just trained to generate output text &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; output text tokens&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So how does that work&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; In this video, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to walk through with you step-by-step&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what the process of getting an LLM to be able to get a function called really looks like&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So tools are just codes &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; functions that an LLM can request to be executed,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like this getCurrentTime function that we saw from the previous video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, today&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s leading LLMs are all trained directly to use tools,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but I want to walk through with you what it would look like &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you had to write prompts yourself&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to tell it when to use tools, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this is what we had to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; an earlier era&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;before LLMs were trained directly to use tools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And even though we don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t do it exactly this way anymore,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this will hopefully give you a better understanding of the process,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll walk through the more modern syntax in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve implemented this function to getCurrentTime,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to give this &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; to the LLM, you might write a prompt like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You may tell it, LLM, you have access to a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; called getCurrentTime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To use it, I want you to print out the following text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Print out all caps function &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then print out getCurrentTime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I ever see this text, all caps function &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then getCurrentTime,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s when I know you want me to call the getCurrentTime function for you.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When a user asks, what time is it&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The LLM will then realize it needs to call &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; request to get called the getCurrentTime function&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so the LLM will then output what it was told&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll output all caps function: getCurrentTime.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, I then have to have written code to look at the output of the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; there is this all caps function&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; so, then I need to pull out the argument of this getCurrentTime&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to figure out what function the LLM wants to call&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then I need to write code to actually call the getCurrentTime function&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then pull out the output, which is, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say, 8 a.m.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then it is the developer written code, my code,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that has to take &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; feed that time, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;back into the LLM as part of this conversational history&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And the conversational history, of course, includes the initial user prompt,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the fact that the request is a function call, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And lastly, the LLM, knowing what had happened earlier,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that the user asks a question, requests a function call,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then also that I call the function &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Finally, the LLM can look at all this &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; generate the final response,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which is, it is &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So to be clear, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to call a function,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the LLM doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t call the function directly.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It instead outputs something &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a specific format like this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that tells me that I need to call the function &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then tell the LLM what was the output of the function I requested&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this example, we had given the LLM only a single function,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but you can imagine &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; we gave it three &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; four functions,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we could tell it to output functions &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; all caps,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then the name of the function it wants called,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe even some arguments of these functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In fact, now let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at a slightly more complex example&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where the getCurrentTime function accepts an argument &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the time zone&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at which you want the current time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For this second example, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve written a function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that gets the current time &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a specified time zone,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where here the time zone is the input argument&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to the getCurrentTime function&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So to let the LLM use this &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; to answer questions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like maybe, what time is it &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; New Zealand&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Because my answer is there, so before I call her up,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; look up what time it is &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; New Zealand&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To let the LLM use this &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, you might modify the system prompt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to say you can use the getCurrentTime &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a specific time zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To use it, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll put the following, getCurrentTime,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then, you know, include the time zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this is an abbreviated prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In practice, you might put more details than this into the prompt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to tell it what is the function, how to use it, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this example, the LLM will then realize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it needs to fetch the time &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; New Zealand,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so it will generate output like this,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;function: getCurrentTime Pacific&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Auckland&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is the New Zealand time zone&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;because Auckland is a major city &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; New Zealand&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then I have to write code to search &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; whether &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this function all caps appeared &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the LLM output,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; so, then I need to pull out the function to call&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lastly, I will then call getCurrentTime&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with the specified arguments, which is generated by the LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which is Pacific&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Auckland, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe returns is &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then as usual, I feed this to the LLM &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the LLM outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It is &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; New Zealand&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To summarize, here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the process for getting LLM to use tools.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;First, you have to provide the &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; to the LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;implement the function, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then tell the LLM that it is available&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When the LLM decides to call a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it then generates a specific output that lets you know&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that you need to call the function &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then you call the function, get its output,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;take the output of the function you just called,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; give that output back to the LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the LLM then uses that to go on to whatever it decides to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; next,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; our examples &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this video was to just generate the final output,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but sometimes it may even decide that the next step&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is to go call yet another &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the process continues&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, it turns out that this all&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;caps function syntax is a little bit clunky&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is what we used to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; before LLMs were trained natively&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to know by themselves how to request that tools be called&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;With modern LLMs, you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need to tell it to output all-caps function,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then search &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; all&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;caps function, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Instead, LLMs are trained to use a specific syntax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to request very clearly when it wants a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; called&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In the next video, I want to share with you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what the modern syntax actually looks like&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; letting LLMs request to have tools be called&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go on to the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;33-tool-syntax&#34;&gt;3.3 Tool syntax&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at how to write code to have your LLM get tools called.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s our old getCurrentTime function without the time zone argument.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let me show you how to use the AI Suite open source library &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to have your LLM call&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; By the way, technically, as you saw from the last video, the LLM doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t call the tool.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The LLM just requests that you call the &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But among developers building agentic workflows,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;many of us will occasionally just say the LLM calls the &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, even though it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s not technically&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what happens, but because it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s just a shorter way to say it.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This syntax here is very similar to the OpenAI syntax &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; calling these LLMs, except that here,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m using the AI Suite library, which is an open source package that some friends and I had worked&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on that makes it easy to call multiple LLM providers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So the code syntax, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;looks like a lot to you, don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t worry about it. You&amp;#39;&lt;/span&gt;ll see more of this &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the code labs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But very briefly, this is very similar to the OpenAI syntax, where you say response equals&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client check, completions create, then select the model, which &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll use the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenAI model GPT&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;o, messages equals messages, assuming you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve put into an array here the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;messages you want to &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt; the LLM, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it will say tools equals, then a list of the tools you want&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the LLM to have access to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s just one tool, which is get current time,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t worry too much about the max turns parameter. This is included because&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;after a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; call returns, the LLM might decide to call another &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; after that &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; call&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;returns, the LLM might decide to call yet another &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So max turns is just a ceiling on how many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;times you want the LLM to request one &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; after another before you stop to just &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; out of a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;possible infinite loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In practice, you almost never hit this limit unless your code is doing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;something unusually ambitious&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I wouldn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t worry about the max turns parameter. I usually just set it to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;five, but &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; practice, it doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t matter that much. And it turns out that with AISuite, the function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get current time is automatically described to the LLM &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; an appropriate way to enable the LLM to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;know when to call it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So rather than you needing to manually write a long prompt to tell the LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;once get current time, this syntax &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; AISuite does that automatically&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And to make it seem &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;too mysterious, the way it does that, it actually looks at the dot string associated with get current&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time with this comments &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; get current time &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to figure out how to describe this function&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to the LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So to illustrate how this works, here&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the function again, and here&amp;#39;&lt;/span&gt;s the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;snippet of code using AISuite to call the LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Behind the scenes, what this will &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is create a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;JSON schema that describes the function &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; detail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this over here on the right is what is actually&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;passed to the LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And specifically, it will pull the name of the function, which is get current time,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then also a description of the function, which is pulled out from the doc string to tell the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what this function does, which lets it decide when to call it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s some APIs which require that&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you manually construct this JSON schema &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt; this JSON schema to the LLM, but the AISuite&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package does this automatically &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; To go through a slightly more complex example, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have this more complex get current time &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; that also has an input time zone parameter, then AISuite&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;will create this more complex JSON schema where, as before, it pulls out the name of the function,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which is get current time, pulls out the description from the doc string, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then also identifies&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what are the parameters &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; describes them to the LLM based on the documentation here shown on the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;left, so that when it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s generating the function arguments to call the tool, it knows that it&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;should be something like America&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;New York &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; Pacific&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Auckland &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; some other time zone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you execute this code snippet here on the lower left, it will use the OpenAI&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GPT&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;o model, see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the LLM wants the function called, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; so, it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll call the function,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get the output from the function, feed that back to the LLM, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that up to a maximum of five&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;turns &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; the response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Note that &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the LLM requests to call the get current time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;function, AISuite &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; this client, it will call the get current time &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you, so you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to explicitly &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; it yourself&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; All that is done &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this single function call that you have to write&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Just note that there are some other implementations of LLM interfaces where you have to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that step&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manually, but with this particular package, this is all wrapped into this client chat completions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create function call&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So you now know how to get an LLM to call functions, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I hope that you enjoy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;playing with this &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the labs, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s actually really amazing when you provide a few functions&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to LLM &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; LLM decides to go &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; take action &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the world, go &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; get more information&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to fulfill your requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If you haven&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t played with this before, I think you&amp;#39;&lt;/span&gt;ll find this to be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;really cool&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out that of all the tools you can give an LLM, there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s one that&amp;#39;&lt;/span&gt;s a bit special,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which is a code execution &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out to be really powerful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If you can tell an LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can write code, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I will have a &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; to execute that code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you, because code can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a lot of things, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we give an LLM the flexibility to write code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have code executed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; That turns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out to be an incredibly powerful &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; to give to LLMs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So code execution is special&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on to the next video to talk about the code execution &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; LLMs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;34-code-execution&#34;&gt;3.4 Code execution&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In a few agentic applications I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve worked on, I gave the LLM the option to write code to then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;carry out the task I wanted it to&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve been a few times now, I&amp;#39;&lt;/span&gt;ve been really surprised &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delighted by the cleverness of the code solutions it generated &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to solve various tasks &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;me&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you haven&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t used code execution much, I think you might be surprised and delighted at&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what this will let your LLM applications &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look. Let&amp;#39;&lt;/span&gt;s take an example of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;building an application that can input math word problems &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; solve them &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So you might&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create tools that add numbers, subtract numbers, multiply numbers, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; divide numbers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;someone says, please add &lt;span style=&#34;color:#ae81ff&#34;&gt;13.2&lt;/span&gt; plus &lt;span style=&#34;color:#ae81ff&#34;&gt;18.9&lt;/span&gt;, then it triggers the add &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then it gets you the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;right answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But what &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; someone now types &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;, what is the square root of two&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Well, one thing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you could &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is write a new &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a square root, but then maybe some new thing is needed to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;carry out exponentiation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; fact, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you look at the number of buttons on your modern&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scientific calculator, are you going to create a separate &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; every one of these buttons &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the many more things that we would want to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; math calculation&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; So instead of trying to implement&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; after another, a different approach is to let it write &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; execute code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; To tell the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to write code, you might write a prompt like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Write code to solve the user&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s query. Return your&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer as Python code delimited with execute Python &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; closing execute Python tags&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So given a query&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like what is the square root of two, the LLM might generate outputs like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You can then use&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pattern matching, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, a regular expression to look &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the start &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; end execute Python tags&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; extract the code &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; between&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So here you get these two lines of code shown &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the green box,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you can then execute this code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; get the output, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lastly, this numerical answer is then passed back to the LLM &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it can write a nicely formatted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer to the original question&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There are a few different ways you can carry out the code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;execution step &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One is to use Python&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s exec function. This is a built-in Python function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which will execute whatever code you &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this is very powerful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your LLM to really&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; get you to execute that code, although there are some security implications&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll see later in this video. And then there are also some tools that will let you run the code&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a safer sandbox environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And of course, square root of two is a relatively simple example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;An LLM can also accurately write code to, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; interest calculations &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; solve much harder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;math calculations than this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One refinement to this idea, which you sort of saw &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; our section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on reflection, is that &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; code execution fails, so &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; some reason the LLM had generated code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that wasn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t quite correct, then passing that error message back to the LLM to let it reflect and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe revise this code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; try another one &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; two times&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; That can sometimes also allow it to get a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more accurate answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now, running arbitrary code that an LLM generates does have a small chance of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;causing something bad to happen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Recently, one of my team members was using a highly agentic coder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it actually chose to remove star&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py within a project directory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this is actually a real&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And eventually that agentic coder did apologize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It said, yes, that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s actually right,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that was an incredibly stupid mistake&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I guess I was glad that this agentic coder was really sorry,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but I already deleted a bunch of Python files&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Unfortunately, the team member had it backed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;up on GitHub repo, so there was no real harm done, but it would have been &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; great &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arbitrary code, which made the mistake of deleting a bunch of files, had been executed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;without the backup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So the best practice &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; code execution is to run it inside a sandbox&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In practice, the risk &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; any single line of code is &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; that high&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m being&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;candid, many developers will execute code from the LLM without too much checking&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you want to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;be a bit safer, then the best practice is to create a sandbox so that &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; an LLM generates bad&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code, there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a lower risk of data loss or leakage of sensitive data and so on. So sandbox&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;environments like Docker &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; E2B as a lightweight sandbox environment can reduce the risk of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arbitrary codes being executed &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a way that damages your system &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; your environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It turns out that code execution is so important that a lot of trainers of LLMs actually &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; special&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work to make sure that code execution works well on their applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But I hope that as you add&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this as one more &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you to potentially offer to LLMs &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; let you make your applications&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;much more powerful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So far &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; what we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve discussed, you have to create tools and make them&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;available one at a time to your LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out that many different teams are building similar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tools &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; having to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; all this work of building functions &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; making them available to the OMs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But there is recently a new standard called MCP, Model Context Protocol, that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s making it much&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;easier &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; developers to get access to a huge set of tools &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; LLMs to use&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is an important&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;protocol that more &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more teams are using to develop LLM based applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go learn&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;about MCP &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the next video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;35-mcp&#34;&gt;3.5 MCP&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MCP, the Model Context Protocol, was a standard proposed by Anthropic but now adopted by many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;other companies &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; by many developers as a way to give an LLM access to more context &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more tools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There are a lot of developers developing around the MCP ecosystem &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;learning about this will give you a lot more access to resources &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look. This is the pain points that MCP attempts to solve. If one developer is writing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an application that wants to integrate with data from Slack &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; Google Drive &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; GitHub &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; access&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data from a Postgres database, then they might have to write code to wrap around Slack APIs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to have functions to provide to the application, write code to wrap around Google Drive APIs to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parse the application, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; similarly &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; these other tools &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; data sources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then what has been&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;happening &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the developer community is &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a different team is building a different application,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then they too will integrate by themselves with Slack &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; Google Drive &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; GitHub &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So many developers were all building custom wrappers around these types of data sources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; there are M applications being developed &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; there are N tools out there,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the total amount of work done by the community was M times N&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; What MCP did was propose a standard&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; applications to get access to tools &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; data sources so that the total work that needs to be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;done by the community is now M plus N rather than M times N&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The initial design of MCP focused a lot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on how to give more context to an LLM &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; how to fetch data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So a lot of the initial tools were&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ones that would just fetch data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you read the MCP documentation, that refers to these as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But MCP gives access to both data as well as the more general functions that an&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;application may want to call&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it turns out that there are many MCP clients&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; These are the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;applications that want access to tools &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to data as well as service, which are often the software&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wrappers that then give access to data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; Slack &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; GitHub &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; Google Drive &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; allows you to take&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;actions at these different types of resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So today there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a rapidly growing list of MCP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clients that consume the tools &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the resources as well as MCP service that provide the tools &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I hope that you find it useful to build your own MCP client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Your application&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe one day will be an MCP client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you want to provide resources to other developers,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe you can build your own MCP server someday&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let me show you a quick example of using an MCP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is a cloud desktop app &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it has been connected to a GitHub MCP server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So when&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I enter this query, summarize the readme&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md from the GitHub repo at this URL, this is actually&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an AI suite repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then this application, which is an MCP client, uses the GitHub MCP server with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the request, please get the file readme&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md from the repo AI suite from this repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gets this response, which is pretty long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; All this is then fed back to the LLMs context &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then generates the summary of the markdown file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now let me enter another request, which is let me&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enter what are the latest pull requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; turn causes the LLMs to use the MCP server to make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a different request, to list the pull request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is another &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; provided by GitHub&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s MCP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so it makes this request with repo AI suite, sort, going to update it, list &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then it gives this response, which is fed back to the LLM &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the LLM then writes this nice&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text summary of the latest pull request &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; this repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; MCP is an important standard&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If you want to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;learn more about it, DeepLearning&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ai also has a short course that goes much deeper into just the MCP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;protocol that you can check out after finishing the course, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re interested. I hope this&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;video gives you a brief overview of why it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s useful and also why many developers are now building to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this standard&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This brings us to the last video on &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I hope that by giving your own access&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to tools, you build &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; build agentic applications that are much more powerful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the next module,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll talk about evaluations and error analysis. It turns out that one of the things I&amp;#39;&lt;/span&gt;ve seen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that distinguishes people that can execute agentic workflows really well versus teams that are &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as efficient at it is your ability to drive a disciplined evaluation process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the next&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set of videos, which I think is maybe the most important module of this entire course,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I hope to share with you some of the best practices of how to use evals to drive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;development of agentic workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Look forward to seeing you &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the next module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>「Scripts」Module 4: Practical Tips for Building Agentic AI</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-04/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-04/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;module-4-practical-tips-for-building-agentic-ai&#34;&gt;Module 4: Practical Tips for Building Agentic AI&lt;/h1&gt;&#xA;&lt;h2 id=&#34;41-evaluationsevals&#34;&gt;4.1 Evaluations(evals)&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this module, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to share with you practical tips for building agentic AI workflows.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I hope that these tips will enable you to be much more effective than the typical developer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at building these types of systems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I find that when developing an agentic AI system,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s difficult to know in advance where it will work and where it won&amp;#39;&lt;/span&gt;t work so well,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; thus where you should focus your effort&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So very common advice is to try to build even a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quick &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dirty system to start, so you can then try it out &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; look at it to see where it may &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yet be working as well as you wish, to then have much more focused efforts to develop it even&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;further&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In contrast, I find that it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s sometimes less useful to sit around for too many weeks&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;theorizing &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; hypothesizing how to build it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s often better to just build a quick system in a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;safe, reasonable way that doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t leak data, kind of do it in a responsible way, but just build&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;something quickly so you can look at it &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then use that initial prototype to prioritize &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; try&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;further development&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s start with an example of what might happen after you&amp;#39;&lt;/span&gt;ve built a prototype&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I want to use as our first example the invoice processing workflow that you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve seen previously,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with the task to extract four required fields &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then to save it to a database record&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; After having&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;built such a system, one thing you might &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is find a handful of invoices, maybe &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; invoices,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; go through them &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; just take a look at their output &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; see what went well &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; there were&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;any mistakes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say you look through 20 invoices, you find that invoice 1 is fine, the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output looks correct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For invoice &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, maybe it confused the date of the invoice, that is when&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;was the invoice issued, with the due date of the invoice, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this task we want to extract the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;due date so we can issue payments on time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So then I might note down &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a document &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spreadsheet that &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; invoice &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, the dates were mixed up&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Maybe invoice &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; was fine, invoice &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; was&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fine, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But as I go through this example, I find that there are quite a lot of examples where I had&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mixed up the dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So it is based on going through a number of examples like this, that &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might conclude that one common error mode is that it is struggling with the dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In that &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one thing you might consider would be to of course figure out how to improve your system to make it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extract due dates better, but also maybe write an eval to measure the accuracy with which it is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracting due dates&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In comparison, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you had found that it was extracting the biller address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incorrectly, who knows, maybe you have billers with unusual sounding names &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so maybe it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;struggles with billers, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; especially &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have international billers whose names may &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; even all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;be English letters, then you might instead focus on building an eval &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the biller address&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So one&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of the reasons why building a quick &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dirty system &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; looking at the output is so helpful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is it even helps you decide what &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you want to put the most effort into evaluating&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;decided that you want to modify your system to improve the accuracy with which it is extracting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the due date of the invoice, then to track progress it might be a good idea to create an&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;evaluation &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; an eval to measure the accuracy of date extraction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There are probably multiple ways&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one might go about this, but let me share with you how I might go about this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; To create a test set &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an evaluation set, I might find &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; to &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; invoices &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; manually write down what is the due date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe one invoice has a due date of August &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;th, &lt;span style=&#34;color:#ae81ff&#34;&gt;2025&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I write it down as a standard year, month,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date format&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then to make it easy to evaluate &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; code later, I would probably write the prompt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to the LLM to tell it to always format the due date &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this year, month, date format&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And with that,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I can then write code to extract out the one date that the LLM has output, which is the due date,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;because that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the one day we care about. So this is a regular expression, pattern matching, you know,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;four numbers of the year, two &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the month, two &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the date, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; extract that out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then I can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;just write code to test &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the extract date is equal to the actual date, that is the ground&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;truth annotation I had written down&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So with an eval set of, say, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; so invoices, I build &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make changes to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the percentage of time that it gets the extracted date correct is hopefully&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;going up as I tweak my prompts &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; tweak other parts of my system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So just to summarize what&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve seen so far, we build a system, then look at outputs to discover where it may be behaving in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an unsatisfactory way, such as due dates are wrong&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then to drive improvements to this important&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output, put &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; place a small eval with, say, just &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; examples to help us track progress&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this lets me go back to two prompts, try different algorithms, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;move up this metric of due date accuracy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this is what improving an Agentic AI workflow will often&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;feel like&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Look at the output, see what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s wrong, then if you know how to fix it, just fix it. But&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you need a longer process of improving it, then put &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; place an eval &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; use that to drive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;further development&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One other thing to consider is &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; after working &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you think&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;those &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; examples you had initially aren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t good enough, maybe they don&amp;#39;&lt;/span&gt;t cover all the cases you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;want, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; maybe &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; examples is just too few, then you can always add to the eval set over time to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make sure it better reflects your personal judgments on whether &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; the system&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s performance is&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sufficiently satisfactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is just one example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For the second example, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s look at&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;building a marketing copy assistant &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; writing captions &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Instagram, where to keep things&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;succinct, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say our marketing team tells us that they want captions that are at most 10 words&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So we would have an image of a product, say a pair of sunglasses that we want to market,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then have a user query, like please write a caption to sell these sunglasses, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then have a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LLM, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; large multimodal model, analyze the image &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the query &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; generate a description of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sunglasses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And there are lots of different ways that a marketing copy assistance may go wrong,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say that you look at the output and you find that the copy or the text generated mostly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sounds okay, but maybe it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s just sometimes too long. So for the sunglasses input, generate 17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;words, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have a coffee machine, it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s okay, stylish is okay, blue shirt, 14 words, blender,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; words&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So it looks like &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example, the LLM is having a hard time adhering to the length&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;guideline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So again, there are lots of things that could have gone wrong with a marketing copy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;assistant&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you find that it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s struggling with the length of the output, they might build&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an eval to track this so that you can make improvements &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; make sure it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s getting better&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at adhering to the length guideline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So to create an eval, to measure the text length, what you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;might &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is create a set of test stars, so mark a pair of sunglasses, a coffee machine, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe create &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; to &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; examples&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then you would run each of them through your system &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; write&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code to measure the word count of the output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this is Python code to measure the word count of a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;piece of text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then lastly, you would compare the length of the generated text to the &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; word target&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;limit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; word count is equal to &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, now I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m correct, plus equals one. One difference between&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the previous invoice processing example is that there is no per example ground truth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The target is just &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, same &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; every single example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Whereas &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; contrast, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the invoice&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;processing example, we had to generate a custom target label that is the correct due date of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoice, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re testing the outputs against that per example ground truth. I know I used a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;very simple workflow &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; generating these captions, but these types of evals can be applied to much&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more complex generation workflows as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let me touch on one final example &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; which we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll revisit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the research agents we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve been looking at. If you look at the output of the research agents on&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different input prompts, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say that when you ask it to write an article on recent breakthroughs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; black hole science, you find that it missed some high profile result &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a loss of news coverage&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So this is an unsatisfactory result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you asked it to research renting versus buying a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;home &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; Seattle, well, it seems to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a good job&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or robotics &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; harvesting fruits&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Well,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it didn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t mention a leading equipment company. So based on this evaluation, it looks like&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sometimes it misses a really important point that a human expert writer would have captured&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I would create an eval to measure how often it captures the most important points&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For example,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might come up with a number of example prompts on black holes, robotic harvesting,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each one, come up with, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say, three to five gold standard discussion points&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each of these topics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Notice that here we &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; have a per example annotation because the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gold standard talking points, that is the most important talking points, they are different &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;each of these examples&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; With these ground truth annotations, you might then use an LLMs judge to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count how many of the gold standard talking points were mentioned&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so an example prompt might be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to say, determine how many of the five gold standard talking points are present &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;provided essay&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You have the optional prompts, the essay text, gold standard points, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have it &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a JSON object with two Gs that scores how many of the points, zero to five,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to the score, as well as an explanation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this allows you to get a score &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each prompt &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;evaluation set&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this example, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m using LLM-as-a-judge to count how many of the talking points&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;were mentioned because there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s so many different ways to talk about these talking points, and so a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;regular expression &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a code &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; simple pattern matching might &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; work that well, which is why&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might use an LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;as&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;judge &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; treat this as a slightly more subjective evaluation &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; whether&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;, say, event horizons were adequately mentioned&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this is your third example of how&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might build evals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In order to think about how to build evals &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your application, the evals&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you build will often have to reflect whatever you see &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re worried about going wrong in your&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it turns out that broadly, there are two axes of evaluation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; On the top axis is the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;way you evaluate the output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In some cases, you evaluate it by writing code with objective evals,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sometimes you use an LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;as&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;judge &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more subjective evals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; On the other axis is whether&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you have a per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;example ground truth &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; checking invoice date extraction, we were writing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code to evaluate &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; we got the actual date, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that had a per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;example ground truth because each&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoice has a different actual date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the example where we checked marketing copy length,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;every example had a length limit of &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so there was no per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;example ground truth &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;problem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In contrast, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; counting gold standard talking points, there was a per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;example ground&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;truth because each article had different important talking points&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But we used an LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;as&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;judge to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;read the essay to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; those topics were adequately mentioned because there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s so many&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different ways to mention the talking points&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And the last of the four quadrants would be LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;as&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;judge&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with no per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;example ground truth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And one place where we saw that was &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you are grading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;charts with a rubric&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is when we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re looking at visualizing the coffee machine sales, and if&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you ask it to create a chart according to a rubric, such as whether it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s clear access labels and so on,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;there is the same rubric &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; every chart, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that would be using an LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;as&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;judge but without a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;per&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;example ground truth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I find this two&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;two grid as maybe a useful way to think about the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different types of evals you might construct &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And by the way, these are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sometimes also called end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end evals because one end is the input end, which is the user query&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompt, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the other end is the final output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so all of these are evals &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the entire end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s performance. So just to wrap up this video, I&amp;#39;&lt;/span&gt;d like to share a few final tips &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;designing end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end evals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; First, quick &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dirty evals is fine to get started&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I feel like I see&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quite a lot of teams that are almost paralyzed because they think building evals is this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;massive multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;week effort, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so they take longer than would be ideal to get started&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But I think&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;just as you iterate on an agentic workflow &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; make it better over time, you should plan to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iterate on your evals as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you put &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; place &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; examples as your first cut at&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;evals &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; write some code &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; try prompting an LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;as&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;judge, just &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; something to start to get some&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;metrics that can complement the human eye at looking at the output, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a blend&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of the two that can drive your decision making&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And as the evals become more sophisticated over&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time, you can then shift more &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more of your trust to the metric&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;based evals rather than&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;needing to read over hundreds of outputs every time you tweak a prompt somewhere&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And as you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go through this process, you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll likely find ways to keep on improving your evals as well. So if you&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;had &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; examples to start, you may then run into places where your evals fail to capture your&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;judgment about what system is better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So maybe you update the system &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you look at it &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you feel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like this has got to work much better, but your eval fails to show the new system achieving a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;higher score&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the case, that&amp;#39;&lt;/span&gt;s often an opportunity to go maybe collect a larger eval set&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; change the way you evaluate the output to make it correspond better to your judgment as to what&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system is actually working better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so your evals will get better over time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And lastly,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; terms of using evals to gain inspiration as to what to work on next, a lot of agentic workflows&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;are being used to automate tasks that, say, humans can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so I find &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; such applications,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll look for places where the performance is worse than that of an expert human, and that&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;often gives me inspiration &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; where to focus my efforts &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; what are the types of examples that I&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe get my agentic workflow to work better than it is currently&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I hope that after you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve built&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that quick &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dirty system, you think about when it would make sense to start putting &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; some evals&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to track the potentially problematic aspects of the system, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that that will then help you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drive improvements &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In addition to helping you drive improvements, it turns out that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a method of evals that helps you hone in of your entire agentic system. What are the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;components most worth focusing your attention on&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Because agentic systems often have many pieces&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So which piece is going to be most productive &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you to spend time working to improve&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; It turns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out being able to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this well is a really important skill &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; driving efficient development&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of agentic workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the next video, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to deep dive into this topic. So let&amp;#39;&lt;/span&gt;s go on to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the next video&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;42-error-analysis-and-prioritizing-next-steps&#34;&gt;4.2 Error analysis and prioritizing next steps&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say you&amp;#39;&lt;/span&gt;ve built an agentic workflow &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s not yet working as well as you wish,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this happens to me all the time by the way, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often build a quick and dirty system and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t do as well as I wish it would, the question is where do you focus your efforts&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to make it better&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Turns out agentic workflows have many different components &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; working on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;some of the components could be much more fruitful than working on some other components&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So your&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;skill at choosing where to focus your efforts makes a huge difference &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the speed with which&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can make improvements to your system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I found that one of the biggest predictors &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; how&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;efficient &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how good a team is, is whether &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; they&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re able to drive a disciplined error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;analysis process to tell you where to focus your efforts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this is an important skill&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a look at how to carry out error analysis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In the research agent example, we had carried out an error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;analysis &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the previous video &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we saw that it was often missing key points &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a human expert&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;would have made &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; writing essays on certain topics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So now you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve spotted this problem that&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is sometimes missing key points, how &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you know what to work on&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; It turns out that of the many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different steps &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this workflow, almost any of them could have contributed to this problem of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;missing key points&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For example, maybe the first LLM was generating search terms that weren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t great, so&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it was just searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the wrong things &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; did &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; discover the right articles&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or maybe use a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;web search engine that just wasn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t very good. There are multiple web search engines out there, in fact&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;actually quite a few that I tend to use &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; my own base applications &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; some are better than others&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or maybe web search was just fine but when we gave the list of web search results &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; LLM, maybe it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;didn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t do a good job choosing the best handful to download. Maybe web fetch has fewer problems in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, assuming you can fetch web pages accurately&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But after dumping the web pages &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe the LLM is ignoring some of the points &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the documents we had fetched&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So it turns out that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;there are teams that sometimes look at this &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; go by gut to pick one of these components to work on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sometimes that works &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sometimes that leads to many months of work with very little progress&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the overall performance of the system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So rather than going by gut to decide which of these&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;many components to work on, I think it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s much better to carry out an error analysis to better&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;understand each step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; particular, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often examine the traces and that&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;means the intermediate output after each step &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to understand which component&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s performance&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is subpar, meaning say much worse than what a human expert would &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;, because that points to where&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;there may be room &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; security improvement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s look at an example. If we ask the research agent&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to write an essay about recent news &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; black hole science, maybe the output search terms like these,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;search &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; black hole theories Einstein, Event Horizon Telescope Radio, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I would&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then have a human expert look at these &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; see are these reasonable web search terms &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; writing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;about recent discoveries &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; black hole science&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And maybe &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; an expert says these web&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;searches look okay, they&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re pretty similar to what I would do as a human. Then I look at the outputs of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the web search &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; look at the URLs returned&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So web search would &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; many different web pages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe one web page returns is that an elementary school student claims to track a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;year&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;old black hole mystery from Astro Kid News&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t look like the most rigorous&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;peer&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reviewed article&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And maybe examining all of the articles that web search returns causes you to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conclude that it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s returning too many blog or popular press types of articles and not enough&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scientific articles to write a research report of the quality that you are looking &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d be good&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to just look through the outputs of the other steps as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Maybe the LLM finds the best five&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sources you can, you end up with Astro Kid News, SpaceBot &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;, Space Fun News &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;by looking at these intermediate outputs that you can then try to get a sense of the quality of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output of each of these steps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; To introduce some terminology, the overall set of outputs of all of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the intermediate steps is often called the trace of a run of this agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then some terminology&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you see &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other sources as well is the output of a single step is sometimes called a span&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is terminology from the computer observability literature where people try to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;figure out what computers are doing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this course, I use the word trace quite a bit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll use&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the word span a little bit less, but you may see both of these terms on the internet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So by reading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the traces, you start to get an informal sense of where might be the most problematic components&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In order to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a more systematic way, it turns out to be useful to focus your attention&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on the cases that the system is doing poorly on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Maybe you write some essays just fine &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output is completely satisfactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I would put those aside &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; try to come up with a set of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples where &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; whatever reason, the final output of your research agent is &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; quite&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;satisfactory &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; just focus on those examples&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this is one of the reasons we call error analysis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;because we want to focus on the cases where the system made an error &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we want to go through&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to figure out which components were most responsible &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the error &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the research agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In order to make this more rigorous, rather than reading &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; getting an informal sense,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you might actually build up a spreadsheet to more explicitly count up where the errors are&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And by&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error, I mean when a step outputs something that performs significantly worse than maybe what a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;human expert would have given a similar input as that component&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often do this myself in a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;spreadsheet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I might build a spreadsheet like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the first query, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll look at&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recent developments &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; black hole science&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I see that the search results has too many blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;posts, popular press articles, &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; enough scientific papers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then based on this,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it is true that the five best sources aren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t great. But here I won&amp;#39;&lt;/span&gt;t say that the five best sources&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;did a bad job because &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the inputs to LLM &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; selecting the five best sources were all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rigorous articles, then I can&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t blame this picking the five best sources for not picking&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;better articles because it did the best it could have &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; as what did nearly as well as any human&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;might have given the same selection to choose from&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then you might go through this &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different prompts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Renting versus buying &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; Seattle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Maybe it missed a well&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;known blog&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Robotics &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; harvesting fruit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Maybe &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, we look at it &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; say,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oh, the search terms are too generic &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the search results also weren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t good and so on.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then based on this, I would count up &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; my spreadsheet how often I observe errors &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different components&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m dissatisfied with the search terms 5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;% o&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;f the time,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m dissatisfied with the search results 45&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;% o&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;f the time. And if I actually see this,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I might just take a careful look at the search terms to make sure that the search terms really&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;were okay &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that poor choice of search terms were &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; what led to poor search results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I really think the search terms are fine, but the search results are &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt;, then I would take a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;careful look at the web search engine I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m using and if there are any parameters I can tune to make&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it bring back more relevant &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; higher quality results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s this type of analysis that&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tells me &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example that maybe I really should focus my attention on fixing the search&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; on the other components of this agentic workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So to wrap up this video,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I find that it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s useful to develop a habit of looking at traces. After you build an agentic&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workflow, go ahead &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; look at the intermediate outputs to get a feel &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; what it is actually&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doing at every step so that you can better understand &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; different steps are performing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;better &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; worse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And a more systematic error analysis, maybe done with a spreadsheet,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;can let you gather statistics &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; count up which component performs poorly most frequently&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;so by looking at what components are doing poorly, as well as where I have ideas &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;efficiently improving different components, then that will let you prioritize what component to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So maybe a component is problematic, but I don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t have any ideas for improving it,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;so that would suggest maybe &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; prioritizing that as high&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; there is a component that is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generating a lot of errors, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I have ideas how to improve that, then that would be a good&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reason to prioritize working on that component&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I just want to emphasize that error analysis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is a very helpful output &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you to decide where to focus your efforts, because &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; any complex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system, there are just so many things you could work on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s too easy to pick something to work&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; work on it &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; weeks &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; even months, only to discover later that that did &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;improved performance &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your overall system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so using error analysis to decide where to focus&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your effort turns out to be incredibly useful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; improving your efficiency&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this video,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we went over error analysis with the research agent example, but I think error analysis is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;such an important topic, I want to go over some additional examples with you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go on to the next video, where we&amp;#39;&lt;/span&gt;ll look at more examples of error analysis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;43-more-error-analysis-examples&#34;&gt;4.3 More error analysis examples&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I found that for many developers, it&amp;#39;s only by seeing multiple examples that you can then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get practice and hone your intuitions about how to carry out error analysis.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:09&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So let&amp;#39;s take a look at two more examples, and we&amp;#39;ll look at invoice processing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and responding to customer emails.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here&amp;#39;s the workflow that we had for invoice processing, where we had a clear process to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:21&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;follow an agentic workflow of identifying the four required fields and then recording&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;them in a database.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:28&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In the example from the first video of this module, we said that the system was often&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;making a mistake in the due date of the invoice.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:36&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So we can carry out error analysis to try to figure out which of the components it may&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have been due to.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:41&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So for example, did the PDF to text make a mistake, or did the LLM extract the wrong date&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:47&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out of whatever was output from the PDF to text component?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:51&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To carry out an error analysis, I would try to find a number of examples where the data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:56&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extracted is incorrect.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:58&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So same as the last video, it&amp;#39;s useful to focus on the examples where the performance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is subpar to try to figure out what went wrong with those examples.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So ignore the examples that got the date right, but try to find somewhere between 10 and 100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoices where it got the date wrong.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:12&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then I would look through to try to figure out was the cause of the problem that PDF&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to text got the date wrong, or was it that the LLM, given the PDF to text output, pulled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:24&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out the wrong date.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:25&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so you might build up a little spreadsheet like this and go through 20 invoices and just&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:30&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count up how often did PDF to text extract the dates or the text incorrectly so that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:35&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;even a human couldn&amp;#39;t tell what is the due date versus the PDF to text look good enough,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but the LLM, when asked to pull the dates, somehow pulled out the wrong date, like maybe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;identifying the invoice date rather than the due date of the invoice.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:48&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So in this example, it looks like the LLM data extraction was responsible for a lot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:52&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more errors.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So this tells me that maybe I should focus my efforts on the LLM data extraction component&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:57&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rather than on PDF to text.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:59&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this is important because if not for this error analysis, I can imagine some teams spending&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;weeks or months trying to tune the PDF to text only to discover after that time that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it did not make much of an impact to the final system&amp;#39;s performance.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Oh, and by the way, these percentages here at the bottom can add up not to 100% because&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;these errors are not mutually exclusive.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:22&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To look at one last example, let&amp;#39;s go back to the agentic workflow for responding to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customer emails, where the LLM, given a customer email like this, asking for an order, would&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:34&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pull up the order details, fetch the information from the database, then draft a response for&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:39&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a human to review.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So again, I would find a number of examples where, for whatever reason, the final output&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:46&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is unsatisfactory and then try to figure out what had gone wrong.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:50&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so some things that could go wrong.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:52&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Maybe the LLM had written an incorrect database query.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:56&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So when the query was sent to the database, it just did not successfully pull up the customer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:01&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;info.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or maybe the database has corrupted data.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So even though the LLM wrote a completely appropriate database query, maybe in SQL or some other&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;query language, the database did not have the correct information.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or maybe given the correct information about the customer order, the LLM wrote an email&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:17&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that was somehow not quite right.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So again, I would look through a handful of emails where the final output was unsatisfactory&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:25&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and try to figure out what had gone wrong.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So maybe in email one, we find that the LLM had asked for the wrong table in the query,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:31&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;just asked for the wrong data in the way it created the database.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:34&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In email two, maybe I find that the database actually has an error.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:38&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And maybe given that input, the LLM somehow wrote a subalternate email as well, and so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And in this example, after going through many emails, maybe I find that the most common&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:50&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error is in the way the LLM is writing a database query, say a SQL query, in order to fetch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:57&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the relevant information.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:58&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Whereas the database is mostly correct, although there&amp;#39;s a little bit of data errors there.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And the way the LLM writes the email also has some errors.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Maybe it doesn&amp;#39;t quite where they write 30% of the time.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this tells me that it&amp;#39;d be most worthwhile maybe for me to improve the way the LLM is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;writing queries.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:14&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Second most important would be maybe improve the prompting for how I write the final email.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;That an analysis like this can tell you that 75% of the errors, maybe the system gets lots&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:25&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of things right, but of all the things it gets not quite right, 75% of the problems&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:29&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is from the database query.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:31&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is incredibly helpful information to tell you where to focus your efforts.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:36&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When I&amp;#39;m developing Agentic AI workflows, I&amp;#39;ll often use this type of error analysis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to tell me where to focus my attention in terms of what to work on next.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:45&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When you&amp;#39;ve made that determination, it turns out that to complement the end-to-end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:49&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;evals that we spoke about earlier in this module, it&amp;#39;s often useful to evaluate not&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:54&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;just the entire end-to-end system, but also individual components, because that can make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:59&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you more efficient in how you improve the one component that, say, error analysis has&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;caused you to decide to focus your attention on.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5:08&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So let&amp;#39;s go on to the next video to learn about component-level evals.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;44-component-level-evaluations&#34;&gt;4.4 Component-level evaluations&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at how to build and use component-level evals.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In our example of a research agent, we said that the research agent was sometimes missing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;key points&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the problem was web search, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; every time we change the web search engine,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we need to rerun the entire workflow, that can give us a good metric &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; performance,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but that type of eval is expensive&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Moreover, this is a pretty complicated workflow,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;so even &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; web search made things a little bit better, maybe noise introduced by the randomness&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of other components would make it harder to see little improvements to the web search quality&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So as an alternative to only using end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end evals, what I would &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is consider building an&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval just to measure the quality of the web search component&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For example, to measure the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quality of the web search results, you might create a list of gold standard web resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a handful of queries, have an expert say, these are the most authoritative sources that &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;someone was searching the internet, they really should find these web pages &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; any of these web&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pages would be good&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then you can write code to capture how many of the web search outputs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;correspond to the gold standard web resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The standard metrics from information retrieval,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the F1 score, don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t worry about the details if you don&amp;#39;&lt;/span&gt;t know what that means, but there are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;standard metrics that allow you to measure of a list of web pages returned by web search,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how much does that overlap with what an expert determined are the gold standard web resources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;With this, you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re now armed with a way to evaluate just the quality of the web search component.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so as you vary the parameters &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; hyperparameters of how you care about web search,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;such as &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you swap &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; out different web search engines, so maybe try Google &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; Bing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; Dr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Go &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; Tivoli &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; U&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; others, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; as you vary the number of results &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; as you vary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the date range that you ask the web search engines to search over, this can very quickly let you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;judge &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; the quality of the web search component is going up &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; does make more incremental&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;improvements&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then of course, before you call the job done, it would be good to run an&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end eval to make sure that after tuning your web search system &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; that you are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;improving the overall system performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But during that process of tuning these hyperparameters&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one at a time, you could &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; so much more efficiently by evaluating just one component&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rather than needing to rerun end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end evals every single time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So component level evals can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;provide a clearer &lt;span style=&#34;color:#66d9ef&#34;&gt;signal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; specific errors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It actually lets you know &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re improving&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the web search component &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; whatever component you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re working on and avoid the noise in the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complexity of the overall end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re working on a project where you have&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different teams focused on different components, it can also be more efficient &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; one team to just&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have his own very clear metric to optimize without needing to worry about all of the other components&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so this lets the team work on a smaller, more targeted problem faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So when you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve decided to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work on improving a component, consider &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s worth putting in place a component-wise eval and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; that will let you go faster on improving the performance of that component&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now the one thing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you may be wondering is, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you decided to improve a component, how &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you actually go about making&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that one component work better&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at some examples of that in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;45-how-to-address-problems-you-identify&#34;&gt;4.5 How to address problems you identify&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;An agentic workflow may comprise many different types of components, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so your tools &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;improving different components will be pretty different&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to share with you some&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;general patterns I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve seen. Some components in your agentic workflow will be non-LLM-based,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;so it may be something like a web search engine &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a text retrieval component,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s part of your RAG or Retrieval Augmented Generating System, something for code execution,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; maybe with a separately trained machine learning model, maybe &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; speech recognition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; detecting people &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pictures, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So sometimes these non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;based components will&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have parameters &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; hyperparameters that you can tune&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; web search, you can tune things like&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the number of results &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; maybe the date range that you ask the web search engine to consider&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For a RAG text retrieval component, you might change the similarity threshold that determines&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what pieces of text it considers similar, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the chunk size&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Often RAG systems will take text &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chop it up into smaller chunks &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; matching, so the main hyperparameters you could use&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;people detection, you might change the detection threshold, so how sensitive it is &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how likely&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it is to declare this found a person, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this will trade off the false positives &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;negatives&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If they follow all the details of the hyperparameters I just discussed, don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t worry&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;about it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The details aren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t that important, but often the components were parameters that&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can tune&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then of course, you can also try to replace the component&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this a lot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; my agentic workflows, where I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll swap in different RAG search engines or swap in different&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RAG providers &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on, just to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; some other provider might work better&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Because of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diversity of non&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;based components, I think the techniques &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; how to improve it will be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more diverse &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dependent on exactly what that component is doing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For an LLM&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;based component,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;here are some options you might consider&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One would be to try to improve your prompts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So maybe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;try to add more explicit instructions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you know what few&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot prompting is, that refers to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adding one &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; more concrete examples of an example of an input &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; a desired output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so few&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;shot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompting, which you can learn about from some deep learning short courses as well, is a technique&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that can give your LLM some examples to hopefully help it get better performing outputs written&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you can also try a different LLM&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So with AI Suite &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; other tools, it could be pretty easy to try&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multiple LLMs &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then you can use evals to pick the best model &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Sometimes,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a single step is too complex &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; one LLM to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;, you can consider &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you want to decompose&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the task into smaller steps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or maybe decompose it into a generation step &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then a reflection&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;step&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But more generally, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have instructions that are very complex all within one step, maybe a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;single LLM has a hard time following all those instructions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And you can &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; the task down&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to smaller steps that may be easier &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;, say, two &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; three calls &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a row to carry out accurately&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And lastly, something to try when the other methods aren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t working well enough is to consider&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tuning a model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This tends to be quite a bit more complex than the other options, so it can be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quite a bit more expensive as well &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; terms of developer time to implement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have some&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data that you can use to fine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tune an LLM on, that could give you much better performance than&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompting alone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I tend &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; to fine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tune a model until I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve really exhausted the other&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options, because fine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tuning tends to be quite complex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; applications where after trying&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;everything &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m still at, say, 90% performance or 95% performance, and I really&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;need to eke out those last few percentage points of improvement, then sometimes fine&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tuning my own&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;custom model is a great technique to use&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I tend to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this only on the more mature applications&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;because of how costly it is&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out that when you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re trying to choose an LLM to use,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one thing that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s very hopeful for you as a developer is if you have good intuitions about&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how intelligent &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; how capable different large language models are&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One thing you can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is just&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;try a lot of models &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; see what works best&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But I find that as I work with different models,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I start to hone intuitions about which models work best &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; what types of tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And when you hone&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;those intuitions, you can be more efficient as well &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; writing good prompts &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the model as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;well as choosing good models &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to share with you some thoughts on how to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hone your intuition on what models will work well &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; your application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s illustrate this with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an example of using an LLM to follow instructions to remove &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to redact PII &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; personally&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;identifiable information&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re now to remove private sensitive information. For example,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you are using an LLM to summarize customer calls, then maybe one summary is on July &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;th,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;, Jessica Alvarez with a social security number, a certain address, a business support&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ticket, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this piece of text has a lot of sensitive, personally identifiable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;information&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say we want to remove all PII from such summaries because we want to use the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; downstream statistical analysis of what customers are calling about&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And to protect customer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;information, we want to strip out that PII before we &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; that downstream statistical analysis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So you&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;might prompt an LLM with instructions to identify all cases of PII &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the text below &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the redacted text with redacted colon &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out that the larger frontier models tend&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to be much better at following instructions, whereas the smaller models tend to be pretty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;good at answering simple factual questions, but are just &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; as good at following instructions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you run this prompt on the smaller model, the OpenWay Llama &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1&lt;/span&gt; model with &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; billion parameters,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then it may generate an output like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It says the identified PII is social security number &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;address, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then it redacts it as follows &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it actually makes a few errors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It didn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;follow the instructions properly&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It showed the list, then redacted the text, then returned another&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list, which it wasn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t supposed to. And in this list of PII, it missed the name. And then I think&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it also didn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t redact partly the address. So details aren&amp;#39;&lt;/span&gt;t important, but it didn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t follow these instructions&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perfectly, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; maybe it missed a little bit of PII&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In contrast, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you use a more intelligent model,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s better at following instructions, you may get a better result like this, where it&amp;#39;&lt;/span&gt;s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;actually correctly listed all the PII &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; correctly redacted all of the PII&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so I find that as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different LLM providers specialize on different tasks, different models really are better &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Some are better at coding, some are better at following instructions, some are better&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at certain niche types of facts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you can hold your intuition &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; what models are more &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;less intelligent, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; what type of instructions they&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re more or less able to follow, then you&amp;#39;&lt;/span&gt;ll&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;be able to make better decisions as to what models to use&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So to share a couple tips on how to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I encourage you to play with different models often&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So whenever I &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a new model release,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often go try it out and try out different queries on it, both closed-weight proprietary&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;models as well as open&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;weight models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I find that sometimes having a personal set of evals might&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;also be helpful, where there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a set of things you ask a lot of different models that might help you&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calibrate how well they &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; on different types of tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One other thing that I &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a lot that I hope&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;will be useful to you is I spend a lot of time reading other people&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s prompts. So sometimes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;people will publish their prompts on the internet, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often go and read them to understand&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what best practices &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; prompting look like&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often chat to my friends at various companies,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;including some of the frontier model companies, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; share my prompts with them, take a look at&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how they prompt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And sometimes I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll also go to open-source packages written by people I really&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;respect &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; download the open&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;source package &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dig through that open&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;source package to find the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompts the authors have written &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to read it, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to hold my intuition about how to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write good prompts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This is one technique that I encourage you to consider, is by reading lots of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;other people&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s prompts that will help you get better at writing prompts yourself. And I certainly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this a lot, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I encourage you to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; so too&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this will hone your intuition about what types&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of instructions models are good at following, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; when to say certain things to different models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In addition to playing with models &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; reading other people&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s prompts, if you try out lots of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different models &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your agentic workflows, that also lets you hone your intuition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So you see&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which models work best &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; which types of tasks, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; either looking at traces to get an informal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sense, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; looking at either component&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;wise &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end evals can help you assess how well&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different models are working &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; different parts of your workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then you start to hone&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;intuitions about &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; just performance, but maybe also price &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; speed trade&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;offs &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the use of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And one of the reasons I tend to develop my agentic workflows with AI Suite is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;because it then makes it easy to quickly swap out &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; try out different models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this makes me&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more efficient &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; terms of trying out &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; assessing which models work best &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; my workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;talked a lot about how to improve the performance of different components to hopefully improve the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;overall performance of your end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In addition to improving the quality of the output,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one other thing you might want to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your workflows is to optimize the latency as well as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cost&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I find that &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a lot of teams, when you start developing, usually the number one thing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to worry about is just are the outputs sufficiently high quality&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But then when the system is working&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;well &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you put &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the production, then there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s often value to make it run faster as well as run&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at lower cost as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the next video, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at some ideas for improving&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cost &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; latency &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; agentic workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;46-latency-cost-optimization&#34;&gt;4.6 Latency, cost optimization&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When building agentic workflows, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often advise teams to focus on getting high-quality outputs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; to optimize cost &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; latency only later&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s not that cost and latency don&amp;#39;&lt;/span&gt;t matter,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but I think getting the performance &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; the output quality to be high is usually the hardest part,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then only when it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s really working, then maybe focus on the other things.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One thing that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s happened to me a few times was my team built an agentic workflow,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we shipped it to users, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then we were fortunate enough to have so many users use it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that the cost actually became a problem, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then we had to, you know, stramble to bring the cost&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;back down&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a good problem to have, so I tend to worry about cost, usually less.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Not that I ignore it completely, but it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s just lower down my list of things to worry about,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so we have so many users that we really need to bring the cost down per user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then latency, I tend to worry a bit about it, but again, &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; as much as just making sure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the output quality is high&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But when you &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; get there, it will be useful to have tools to optimize&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;latency &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; cost&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at some ideas on how to do that.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you want to optimize the latency of an agentic workflow, one thing I will often &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;benchmark &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; time the workflow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this research agent, it takes a number of steps,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I were to time each of the steps, maybe LLM takes &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; seconds to generate the search terms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Web search takes &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; seconds, this takes &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; seconds, this takes &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; seconds,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then writing the final essay takes &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; seconds on average&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And it is then by looking at this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;overall timeline that I can get a sense of which components have the most room &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; making faster&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this example, there may be multiple things you could try&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If you haven&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t already taken&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;advantage of parallelism &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; some steps, like maybe web fetch, maybe it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s worth considering&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doing some of these operations &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parallel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Or &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you find that some of the LLMs sets are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;taking too long, so &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; this first step takes &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; seconds, this last LLMs set takes &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; seconds,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I might also consider trying a smaller, maybe slightly less intelligent model to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; it&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;still works well enough &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; that, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; I can find a faster LLM provider&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There are lots of APIs online&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; different LLMs interfaces, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; some companies have specialized hardware to allow them to serve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;certain LLMs much faster, so sometimes it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s worth trying different LLMs providers to see which ones&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;can &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tokens the fastest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But at least doing this type of timing analysis can give you a sense&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of which components to focus on &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; terms of reducing latency&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In terms of optimizing costs,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a similar calculation where you calculate the cost of each step would also let you benchmark&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; decide which steps to focus on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Many LLMs providers charge per token based on the input&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; output length&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Many API providers charge per API call, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the computational steps may have&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different costs based on how you pay &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; server capacity &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how much the service costs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a process like this, you might decide &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this example that the tokens &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; this LLMs step on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;average cost &lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; cents, each web search API maybe costs &lt;span style=&#34;color:#ae81ff&#34;&gt;1.6&lt;/span&gt; cents, tokens cost this much,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;API call costs this much, PDF to text costs this much, tokens &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the final SA generation cost this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;much, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this would maybe again give you a sense of are there cheaper components you could use &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cheaper LLMs you could use to see where the biggest opportunity is &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; optimizing costs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I found&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that these benchmarking exercises can be very clarifying, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sometimes they&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll clearly tell&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;me that certain components are just &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; worth worrying about because they&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re not that material&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; contributor to either cost &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; to latency&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So I find that when either cost &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; latency becomes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an issue, by simply measuring the cost &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; latency of each step, that often gives you a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;basis with which to decide which components to focus on optimizing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re nearly at the end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of this module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I know we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve covered a lot, but thank you for sticking with me. Let&amp;#39;&lt;/span&gt;s go on to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the final video of this module to wrap up&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;47-development-process-summary&#34;&gt;4.7 Development process summary&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve gone through a lot of tips for driving a disciplined, efficient process for building&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Agentic AI systems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d like to wrap up by sharing with you what it feels like to be going through&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m building these workflows, I feel like there are two major activities I&amp;#39;&lt;/span&gt;m&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;often spending time on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One is building, so writing software, trying to write code to improve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And the second, which sometimes doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t feel like progress, but I think is equally&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;important, is analysis to help me decide where to focus my build efforts next&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I often go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;back &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; forth between building &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; analyzing, including things like error analysis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example, when building a new agentic workflow, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll often start by quickly building an end-to-end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system, maybe even a quick &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; dirty implementation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this lets me then start to examine the final&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outputs of the end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end system, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; also read through traces to get a sense of where it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s doing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;well, where it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s doing poorly. Based on even just looking at traces, sometimes this will give me a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gut sense of which individual components I might want to improve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so I might go tune some&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;individual components &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; keep tuning the overall end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; As my system starts to mature&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a little bit more, then beyond just manually examining a few outputs &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; reading through&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;traces, I might start to build evals &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have a small data set, maybe just &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; examples,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to compute metrics, at least on end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end performance&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this then further helps me&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;have a more refined perspective on how to improve the end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end system &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; how to improve individual&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;components&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; As it matures even further, my analysis then becomes maybe even more disciplined, where I&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; error analysis &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; look through the components &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; try to count up how frequently&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;individual components led to subpar outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And this more rigorous analysis then lets me be even&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more focused &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; deciding what components to work on next &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; inspire ideas &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; improving the overall&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then eventually, when it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s even more mature to drive more efficient improvements&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at the component level, that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s when I might also build component-level evals. And so the workflow&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of building an agentic system often goes back &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; forth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s not a linear process. We sometimes&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tune the end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;to&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;end system, then &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; some error analysis, then improve a component &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a bit,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then tune the component&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;level evals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And I tend to bounce back &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; forth between these two types&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of techniques&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And what I see less experienced teams often &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; is spend a lot of time building&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; probably much less time analyzing with error analysis, building evals, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; That would be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ideal because this is analysis that helps you really focus where to spend your time building&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And just one more tip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There are actually quite a few tools out there to help with monitoring traces,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logging runtime, computing costs, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And those tools can be helpful&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I sometimes use a few&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of them, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; quite a few of DeepLearning&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ai short course partners offer those tools, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; they &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;work well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I find that &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; agentic workflows I end up working on, most agentic workflows are pretty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;custom&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so I end up building pretty custom evals myself because I want to capture the things&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that work incorrectly with my system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So even though I &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; use some of those tools, I also end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;up building a lot of custom evals that are well fit to my specific application &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the issues I&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;see with it&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So thanks &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sticking with me this far to the end of the fourth of five modules&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re able to implement even a fraction of the ideas from this module, I think you&amp;#39;&lt;/span&gt;ll be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;well ahead of the vast majority of developers &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; terms of your sophistication at implementing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agentic workflows&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Hope you found these materials useful, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I look forward to seeing you &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;final module&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; We&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll talk about some more advanced design patterns for building&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;highly autonomous agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll see you in the last module of this course.```&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>「Scripts」Module 5: Patterns for Highly Autonomous Agents</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-05/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecture/lec-05/</guid>
      <description>&lt;h1 id=&#34;module-5-patterns-for-highly-autonomous-agents&#34;&gt;Module 5: Patterns for Highly Autonomous Agents&lt;/h1&gt;&#xA;&lt;h2 id=&#34;51-planning-workflows&#34;&gt;5.1 Planning workflows&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Welcome to this final module where you learn about design patterns that lets you build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;highly autonomous agents, where you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need to hard code in advance the sequence of steps to take,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but it can be more flexible &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; decide &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; itself what steps it wants to take to accomplish a task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll talk about the planning design pattern and then later in this module,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;how to build multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent systems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s dive in.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Suppose you run a sunglasses retail store &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have information on what sunglasses are &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; your&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inventory stored &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a database&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You might want a customer service agent to be able to answer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;questions like, &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you have any round sunglasses &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stock&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; They&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re under $100. This is a fairly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex query because you have to look through the product descriptions to see what sunglasses&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;are round, then look at what is &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stock, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then finally see what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s under $100 in order to tell the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customer, yes, we have classic sunglasses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; How &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; you build an agent to answer a broad range of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customer queries like this &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; many others&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; In order to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; so, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re going to give LLM&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a set of tools to let it get item descriptions, such as look up &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; different glasses are round,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;check inventory, maybe process item returns, which is &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; needed &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; this query,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;but we need it &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; other queries, get item price, check past transactions, process item sale,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In order to let an LLM figure out what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the right sequence of tools to use to respond to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the customer request, you might then write a prompt like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You have access to the following tools&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; give it a description of each of the, say, six tools &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; even more tools that the LLM has,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; to then tell it to &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step plan to carry out the user&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s request. In this case,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to answer this particular query, a reasonable plan that an LLM might output might be to first&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;use get item descriptions to check the different descriptions to find the round sunglasses,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then use check inventory to see &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; they&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re in stock, and use get item price to see if the&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;stock results are less than &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100.&lt;/span&gt; After an LLM outputs this plan with three steps, what we can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is then take the step one text, that is this text written here &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; red, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt; that to an LLM,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe with additional context about what are the tools with your user query, with additional&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;background context, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt; an LLM to carry out step one&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, hopefully the LLM will&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;choose to call the get item descriptions to get the appropriate descriptions of items,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the output of that first step can let it select which are the round sunglasses,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that output of step one is then passed together with the step two instructions, that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;would be these instructions that I have here &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; blue, to an LLM to then execute the second step&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of the plan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Hopefully it will then take the two pairs of round sunglasses we found on the previous&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;slide &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; check the inventory, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the output of that second step is then used to another LLM call,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;where you have the output of the second step as well as the instructions of what to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; step&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;three&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Pass the LLM to have it get the item price, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; finally this output is fed back to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the LLM one last time to generate the final answer &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; In this slide, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve simplified a lot&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of details a little bit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The actual plan typically written by the LLM is more detailed than these&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;simple one&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;line instructions, but the basic workflow is to have an LLM write out multiple&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;steps of a plan, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then task it to execute each step of the plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; turn with some appropriate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;surrounding context about what is the task, what are the tools available, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exciting thing about using an LLM to plan this way is that we did &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; have to decide &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what is the sequence &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; which to call tools &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to answer a fairly complex customer request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If a customer were to make a different request, such as I would like to &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; the gold frame&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;glasses that I had purchased but &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; the metal frame ones, then you can imagine an LLM similarly&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;being able to come up with a different plan to figure out based on what they had purchased previously,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which glasses they had bought based on get item descriptions, where the gold frame ones they want&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then maybe call process item &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So with an agent that can plan like this, it can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;carry out a much wider range of tasks that can require calling many different tools &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different orders&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One more example of planning, let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at an email assistant. If you&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;want to be to tell your assistant, so please reply to that email invitation from Bob &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; New York,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tell him to attend &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; archive his email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then an email assistant may be given tools like this to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;search email, move an email, delete an email, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; send an email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And you might write an assistant&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompt saying you have access to the following tools, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; again please &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; the step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step plan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, maybe the LLM will say the steps &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; this are to use search email to find the email from&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bob that mentioned dinner &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; New York, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then generate &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; send an email to confirm attendance,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then lastly move that email to the archive folder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Given this plan, which looks a reasonable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one, you would then again task an LLM step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step to carry out this plan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So the text from the first&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;step, shown here &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; red, will be fed to the LLM with additional background context, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; hopefully&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll trigger search email. Then the output of that can be given to an LLM again with the step&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;two instructions to send an appropriate response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then finally, assuming the email was sent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;successfully, you can take that output &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have the LLM execute the third step of moving the email&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;from Bob into the archive folder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The planning design pattern is already used successfully&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; many highly agentic coding systems, where &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ask it to write a piece of software to build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;some fairly complex application, it might actually come up with a plan to build this component, build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this component, to almost form a checklist, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; those steps one at a time to build a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;decently complex piece of software&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For many other applications, the use of planning is still&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe more experimental&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s not in very widespread use. And one of the challenges of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;planning is it makes the system sometimes a little bit hard to control, because you as a developer,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t really know at runtime what plan it will come up with. And so I think outside highly&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agentic coding systems, where it actually works really well, adoption of planning is still growing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other sectors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But this is exciting technology, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I think it will keep getting better &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;see it &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; more &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The cool thing about building agents that can plan &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;themselves is you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need to hard code in advance the exact sequence of steps an LLM may&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;take to carry out a complex task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now, I know that &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this video, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve gone over the planning process&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;at a fairly high level, with it all putting a list of steps &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then tasking an LLM to carry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out the steps of the plan one step at a time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But how does this actually work&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; In the next video,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll take a deeper dive to look further into the guts of what these plans actually look like,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how the strings together to have an LLM plan &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; execute the plan &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at that in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;52-creating-and-executing-llm-plans&#34;&gt;5.2 Creating and executing LLM plans&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this video, we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll look in detail at how to prompt an LLM to generate a plan,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how to read, interpret, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; execute that plan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s dive in.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is a plan that you saw &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the previous video &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the customer service agents,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I have presented this plan at a high level using simple text descriptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at how you can get an LLM to write very clear plans that go a little bit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;beyond these simple high&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;level text descriptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out that many developers will ask an LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to format the plan it once executed &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; JSON format, because this allows downstream code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to parse what exactly are the steps of the plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; relatively clear &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; unambiguous ways,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; all of the leading LLMs are pretty good at generating JSON outputs at this point&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So the system prompt might say something like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You have access to the following tools,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then create a step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; JSON format, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you might describe the JSON format&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enough detail with the goal of getting it to output a plan like that shown here on the right&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this JSON output, it creates a list where the first list item has clear keys &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; values&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that say step one of the plan has the following description, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; it should use the following &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;with the following arguments parsed to that &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Then after that, step two of the plan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is to carry out this task, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then use this &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this JSON format, as opposed to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;writing the plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; English, allows downstream code to more clearly parse out exactly what are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the steps of the plan so that it can be reliably executed one step at a time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Instead of JSON,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I also see some developers use XML, where you can use XML delimiters&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You use XML tags&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to clearly specify what are the steps of the plan &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; what step number it is&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Some developers, I feel like fewer developers, will use markdown, which is just sometimes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;slightly more ambiguous &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; terms of how we parse it, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I think plain text is maybe the least&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reliable of these options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But I think either JSON, which I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m showing here, or XML would be&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;good options &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; how to ask the LLM to format a plan unambiguously&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s it. By opening&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plans &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; JSON, you can then parse it &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; have downstream workflows execute different steps of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the plan more systematically&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; terms of getting LLMs to plan, it turns out there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s one&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;other really neat idea that lets an LLM output very complex plans &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; get them executed reliably,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s to let them write code and to have code express the plan.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at this in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;53-planning-with-code-execution&#34;&gt;5.3 Planning with code execution&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Planning with code execution is the idea that, instead of asking an LLM to output a plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;say, JSON format to execute one step at a time, why &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; have the LLM just try to write code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that code can capture multiple steps of the plan, like call this function, then call this function,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then call this function, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; by executing code generated by the LLM, we can actually carry out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fairly complex plans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at when you might want to use this technique.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s say you want to build a system to answer questions about coffee machine sales based on&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a spreadsheet with data like this of previous sales&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; You might have an LLM with a set of tools&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;like these to get column max, to look at a certain column &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; get the maximum value,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;so there&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a whole answer, what&amp;#39;&lt;/span&gt;s the most expensive coffee, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; get column mean, filter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rows, get column min, get column median, sum rows, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So these are examples of a range of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tools you might give an LLM to process this spreadsheet &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; these rows &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; columns of data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; different ways&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Now, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a user were to ask which month had the highest sales of hot chocolate,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it turns out that you can answer this query using these tools, but it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s pretty complicated.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d have to use filter rows to extract transactions in January for hot chocolate,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; stats on that, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then repeat &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; February, figure out stats on that,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then repeat &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; March, repeat &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; April, repeat &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; May, all the way through December,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then take the max, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so you can actually string it together with a pretty complicated&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;process using these tools, but it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s not such a great solution. But worse, whether someone to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ask how many unique transactions were there last week, well, these tools are insufficient to get&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that answer, so you may end up creating a new &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt;, get unique entries, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; you may run into&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;another query, what were the amounts of last five transactions, then you have to create yet another&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; to get the data to answer that query&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; practice, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve seen teams, when they run across&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;more &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more queries, end up creating more &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; more tools to try to give the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;other enough tools to cover all the range of things someone may ask about a dataset like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So this approach is brittle, inefficient, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve seen teams continuously dealing with edge cases&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; trying to create more tools, but it turns out there is a better way, which is &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you were&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to prompt LLM to say, please write code to solve the user&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s query and return your answer as Python&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code, maybe delimited with these beginning &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ending execute Python XML tags, then LLM can just&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;write code to load the spreadsheet into a data processing library, here it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s using the pandas&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;library, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then here it actually is coming up with a plan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The plan is, after loading the CSV,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;first it has to ensure the date column is parsed a certain way, then sort by the date, select the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last five transactions, show just the price column, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But these are the steps one, two, three,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; four, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; five, say, of the plan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Because a programming language like Python, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;example, also with the pandas data processing library imported, because this has many built&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;functions, hundreds &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; even thousands of functions, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; moreover, these are functions that the LLM has&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seen a lot of data on how to call when&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; By letting your LLM write code, it can choose from&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;these hundreds &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; thousands of relevant functions that it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s already seen a lot of data on when to&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;use, so this lets it string together different choices of functions to call from this very large&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;library &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to come up with a plan &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; answering a fairly complex query like this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Just one more example&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; If someone were to ask, how many unique transactions last week&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Well, you can come up with a plan to read the CSV file, parse the date column, define the time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;window, filter rows, drop duplicate rows, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; The details of this aren&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t important, but hopefully&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;what you can see is, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you read the comments here, the LLM is roughly coming up with a four&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step plan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; is expressing each of the steps &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; code that you can then just execute, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this will get the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user their answer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; applications where the task can plausibly be done by writing code, letting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an LLM express its plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; software code that you can just execute &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the LLM can be a very powerful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;way to let it write rich plans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And of course, the caveat that I mentioned &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the module on &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to consider &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you need to find a safe execution environment like a sandbox to run the code, that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;also applies&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Although I know that even though it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s probably not the best practice, I also know a lot of&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;developers that don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t use a sandbox. Lastly, it turns out that planning with code works well.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From this diagram adapted from a research paper by Xinyao Wang &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; others, you can see that &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; many&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;different models &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the tasks that they examined, code as action &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; which the LLM is invited to write&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; take actions through code, that is superior to having it write JSON &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then translate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;JSON into action &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And you also see a trend that writing code outperforms having the LLM write&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; JSON, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; writing a plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; JSON is also a bit better than writing a plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; just plain text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, of course, there are applications where you might want to give your custom tools to an LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to use, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; so writing code isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t for every single application. But when it does apply, it can be a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;very powerful way &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; an LLM to express a plan&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So that wraps up the section on planning&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Today, one of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the most powerful uses of Agentic AI that plans is highly agentic software coders&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It turns out that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you ask one of the highly agentic software coding assistance tools to write a complex piece&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of software &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you, it may come up with a detailed plan to build this component of software first,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then build a second component, build a third, maybe even plan to test out the components as&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;going along&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then it forms a checklist that then goes through to execute one step at a time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so it actually works really well &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; building increasingly complex pieces of software&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; For other&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;applications, I think the use of planning is still growing &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; developing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; One of the disadvantages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of planning is that because the developer doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t tell the system what exactly to do, it&amp;#39;&lt;/span&gt;s a little&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bit harder to control it, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t really know in advance what will happen at runtime. But giving&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;up some of this control, it does significantly increase the range of things that the model may&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;decide to try out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So this important technology is kind of cutting edge, doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t feel completely&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mature outside of maybe agentic coding where it works well, although I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m sure there&amp;#39;&lt;/span&gt;s still a lot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of room to grow&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; But hopefully you enjoy using it &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; some of your applications someday&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;That wraps up planning&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; There&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s one last design pattern I hope to share with you in this module,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which is how to build multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent systems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; We have &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; just one agent, but many of them&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;working &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; collaboration to complete the task &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at that in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;54-multi-agent-workflows&#34;&gt;5.4 Multi-agent workflows&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve talked a lot about how to build a single agent to complete tasks for you.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In a multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agentic workflow, we instead have a collection of multiple agents&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;09&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;collaborate to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; things &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When some people hear &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the first time about multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent systems, they wonder, why &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; I&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;need multiple agents&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s just the same LLM that I&amp;#39;&lt;/span&gt;m prompting over &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; over, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; just one computer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Why &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; I need multiple agents&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I find that one useful analogy is, even though I may &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; things on a single computer, we &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;decompose work &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a single computer into maybe multiple processes &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; multiple threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And as a developer, thinking, even though it&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s one CPU on a computer, say, thinking&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;about how to take work &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; decompose it into multiple processes &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;computer programs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to run, that makes it easier &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; me as a developer to write code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a similar way too, &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have a complex task to carry out, sometimes, instead of thinking&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;about how to hire one person to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; it &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you, you might think about hiring a team of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a few people to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; different pieces of the task &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; practice, I found that &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; many developers of agentic systems, having this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mental framework of &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; asking, what&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s the one person I might hire to do something, but&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;instead, would it make sense to hire people with three &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; four different roles to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;overall task &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; me, that helps give another way to take a complex thing &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; decompose&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it into sub&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tasks &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; to build &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; those individual sub&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tasks one at a time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s take a look at some examples of how this works.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Take the task of creating marketing assets, say you want to market sunglasses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Can you come up with a marketing brochure &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; that&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You might need a researcher on your team to look at trends on sunglasses &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; what competitors&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;are offering&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You might also have a graphic designer on your team to render charts &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; nice&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;looking&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graphics of your sunglasses&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And then also a writer to take the research, take the graphic assets &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; put it all together&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;into a nice&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;looking brochure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or to write a research article, you might want a researcher to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; online research, a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;statistician to calculate statistics, a lead writer, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then an editor to come up with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a polished report&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or to prepare a legal &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, real law firms will often have associates, paralegals, maybe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;an investigator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And we naturally, because of the way human teams &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; work, can think of different ways&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that complex tasks can be broken down into different individuals with different roles&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So these are examples of when a complex task were already naturally decomposed into sub&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tasks&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that different people with different skills can carry out&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Take the example of creating marketing assets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Look into detail into what a researcher, graphic designer, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; writer might &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A researcher might have the task of analyzing market trends &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; researching competitors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And when designing the research agents, one question to keep &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mind is what are the tools&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that the researcher may need &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; order to come up with a research report on market trends&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; what competitors are doing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So one natural &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; that an agentic researcher might need to use would be web search&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Because as a human researcher, asked to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; these tasks might need to search online &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;order to come up with their report&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a graphic designer agent, they might be tasked with creating visualizations &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;artwork&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And so what are the tools that an agentic software graphic designer might need&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Well, they may need image generation &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; manipulation APIs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Or maybe, similar to what you saw with the coffee machine example, maybe it needs code&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;execution to generate charts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And lastly, the writer has transformed the research into report text &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; marketing copy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, they don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need any tools other than what an LLM can already do to generate&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the next video, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m going to use these purple boxes to denote an agent.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And the way you build individual agents is by prompting an LLM to play the role of a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;researcher &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a graphic designer &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a writer, depending on which agent it is part of&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the research agents, you might prompt it to say, you are a research&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agent, expert at analyzing market trends &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; competitors, carry out online research to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;analyze market trends &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the sunglasses product &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; give a summary as well of what competitors&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;are doing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So that would allow you to build a researcher agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And similarly, by prompting an LLM to act as a graphic designer with the appropriate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tools &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; to act as a writer, that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s how you can build a graphic designer as well as&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a writer agent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Having built these three agents, one way to have them work together to generate your final&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reports would be to use a simple linear audit workflow &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a linear plan &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you want to create a summer marketing campaign &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sunglasses, you might give that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompt to the research agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The research agent then writes a report that says, here are the current sunglasses trends&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; competitive offerings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This research report can then be fed to the graphic designer that looks at the data the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;research has found &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; creates a few data visualizations &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; artwork options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;All these assets can then be passed to the writer that then takes the research &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graphic output &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; writes the final marketing brochure&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The advantage of building a multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent workflow &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; is when designing a researcher&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; graphic designer &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; writer, you can focus on one thing at a time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So I can spend some time building maybe the best graphic designer agents I can, &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe my collaborators are building research agents &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; writer agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the end, we string it all together to come up with this multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; some cases, I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m seeing developers start to reuse some agents as well.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So having built a graphic designer &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; marketing brochures, maybe I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll think about if I can&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;build a more general graphic designer that can help me write marketing brochures as well&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;05&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;as social media posts, as well as help me illustrate online webpages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So by coming up with what are the agents you might hire to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a task, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; this will sometimes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;correspond to who are the types of human employees you might hire to &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; a task&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can come up with a workflow like this with maybe even building agents that you could&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;choose to reuse &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; other applications as well&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Now, what you see here is a linear plan where one agent, the researcher does his work, then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the graphic designer, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then the writer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;With agents, you can also, as an alternative to a linear plan, you can also have agents&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;interact with each other &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; more complex ways&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let me illustrate with an example of planning using multiple agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So previously, you saw how we may give an LLM a set of tools that we can call to carry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out different tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In what I want to show you, we will instead give an LLM the option to call on different&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agents to ask the different agents to help complete different tasks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; detail, you might write a prompt like you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re a marketing manager, have the following&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;team of agents to work with, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then give a description of the agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this is very much similar to what we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re doing with planning and using tools, except&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the tools, the green boxes, are replaced with agents, these purple boxes that the LLM can&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;call on&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can also ask it to &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a step&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;by&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;step plan to carry out the user&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s request.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;, the LLM may ask the researcher to research current sunglasses trends &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then report back&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Then it will ask the graphic designer to create the images &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then report back, then ask&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the writer to create a report, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then maybe the LLM will choose to review &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; reflect on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; improve the report one final time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In executing this plan, you would then take the step one text of the researcher, carry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;out research, then &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt; that to the graphic designer, &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt; it to the writer, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;maybe &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; one final reflection step, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d be done.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One interesting view of this workflow is as &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; you have these three agents up here, but&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this LLM on the left is actually like a fourth agent that&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s a marketing manager, that is&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a manager of a marketing team, that is setting direction &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then delegating tasks to the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;researcher, the graphic designer, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the writer agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So this becomes actually a collection of four agents &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a marketing manager agent coordinating&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the work of the researcher, the graphic designer, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; the writer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In this video, you saw two communication patterns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One was a linear one where your agents took actions one at a time until you got to the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And the second had a marketing manager coordinating the activity of a few other agents&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It turns out that one of the key design decisions you may end up having to make when building&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agentic systems is what is the communication pattern between your different agents&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is an area of hard research &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; there are multiple patterns emerging, but &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next video, I want to show you what are some of the most common communication patterns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; getting your agents to work with each other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Let&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s go see that in the next video.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;55-communication-patterns-for-multi-agent-systems&#34;&gt;5.5 Communication patterns for multi-agent systems&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:01&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;When you have a team of people working together, the patterns by which they communicate can be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:06&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quite complex. And in fact, designing an organizational chart is actually pretty&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;complex to try to figure out what&amp;#39;s the best way for people to communicate, to collaborate.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It turns out, designing communication patterns for multi-agent systems is also quite complex.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:22&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But let me show you some of the most common design patterns I see used by different teams today.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In a marketing team with a linear plan, where first a researcher worked, then a graphic designer,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:31&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then a writer, the communication pattern was linear. The researcher would communicate with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:36&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the graphic designer, and in both the research and the graphic designer, maybe pass the outputs to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the writer. And so there&amp;#39;s a very linear communication pattern. This is one of the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:46&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;two most common communication plans that I see being used today. The second of the two most&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:51&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;common communication plans would be similar to what you saw in this example, with planning using&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0:58&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multiple agents, where there is a manager that communicates with a number of team members and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:05&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;coordinates their work. So in this example, the marketing manager decides to call on the researcher&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to do some work. Then if you think of the marketing manager as getting the report back, and then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:15&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sending it to the graphic designer, getting a report back, and then sending it to the writer, this would be a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hierarchical communication pattern. If you&amp;#39;re actually implementing a hierarchical communication&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:25&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pattern, it&amp;#39;ll probably be simpler to have the researcher pass the report back to the marketing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:29&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manager, rather than the researcher pass the results directly to the graphic designer and to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:34&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the writer. But so this type of hierarchy is also a pretty common way to plan the communication&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:40&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patterns, where you have one manager coordinating the work of a number of other agents. And just to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:45&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;share with you some more advanced and less frequently used, but nonetheless sometimes used in&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:50&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;practice communication patterns, one would be a deeper hierarchy, where same as before, if you have&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1:56&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a marketing manager send tasks to the researcher, graphic designer, writer, but maybe the researcher has&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:01&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;themselves two other agents that they call on, such as a web researcher and a fact checker. Maybe the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:07&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graphic designer just works by themselves, whereas the writer has an initial style writer and a citation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;checker. So this would be a hierarchical organization of agents, in which some agents&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:19&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;might themselves call other sub-agents. And I also see this used in some applications, but this is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:25&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;much more complex than a one-level hierarchy, so used less often today. And then one final pattern&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:31&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that is quite challenging to execute, but I see a few experimental projects use it, is the all-to-all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:38&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;communication pattern. So in this pattern, anyone is allowed to talk to anyone else at any time. And&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:44&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the way you implement this is you prompt all four of your agents, in this case, to tell them that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:50&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;there are three other agents they could decide to call on. And whenever one of your agents decides&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2:55&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to send a message to another agent, that message gets added to the receiver agent&amp;#39;s contacts. And&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:02&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;then a receiver agent can think for a while and decide when to get back to that first agent. And&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:07&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;so if you can all collaborate in a crowd and talk to each other for a while until, say, each of them&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;declares that it is done with this task, and then it starts talking. And maybe when everyone thinks&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it&amp;#39;s done, or maybe when the writer concludes it&amp;#39;s good enough, that&amp;#39;s when you generate the final&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:22&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output. In practice, I find the results of all-to-all communication patterns a bit hard to predict.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:27&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So some applications don&amp;#39;t need high control. You can run it and see what you get. If the marketing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brochure isn&amp;#39;t good, maybe that&amp;#39;s okay. You just run it again and see if you get a different result.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:37&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;But I think for applications where you&amp;#39;re willing to tolerate a little bit of chaos and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:41&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unpredictability, I do see some developers using this communication pattern. So that, I hope,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:47&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conveys some of the richness of multi-agent systems. Today, there are quite a lot of software&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3:54&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frameworks as well that support easily building multi-agent systems. And they also make implementing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;some of these communication patterns relatively easy. So maybe if you use your own multi-agent system,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:06&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;you&amp;#39;ll find some of these frameworks hopeful for exploring these different&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:09&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;communication patterns as well. And so that now brings us to the final video&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4:17&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of this module and of this course. Let&amp;#39;s go on to the final video to wrap up.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;56-conclusion&#34;&gt;5.6 Conclusion&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Welcome to the final video of this course&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; It feels like we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve been through a lot together,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;just you &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; me, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; we&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ve gone through a lot of topics in Agentic AI. Let&amp;#39;&lt;/span&gt;s take a look&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In the first module, we talked about what are the applications you can build with Agentic AI&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;that just were &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; possible before&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And we started then to look at key design patterns,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;including the reflection design pattern, which is a simple way to sometimes give your application a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nice performance boost, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; then &lt;span style=&#34;color:#66d9ef&#34;&gt;tool&lt;/span&gt; use &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; function calling, which expands what your LLM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;application can &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;, with code execution being one important &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; of that&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then we spent a lot of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time talking about evaluations, as well as error analysis, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; how to drive a disciplined process&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of building, as well as analyzing, to be efficient &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; how you keep on improving the performance of&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your agentic AI system&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; This fourth module is some of the material that I think you will find&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;most useful as you keep building Agentic AI systems, I hope, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a long time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And then &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;this module, we talk about planning &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; multi&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;agent systems that can let you build much more powerful,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;although sometimes harder to control, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; harder to predict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; advanced types of systems&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; So with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the skills you learn from this course, I think you now know how to build a lot of cool, exciting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Agentic AI applications&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; When my team, &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; I see other teams as well, interview people &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; jobs,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I find interviews often try to assess whether &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; candidates have pretty much the skills you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;learning about &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; this course&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; And so I hope that this course will also open up new professional&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opportunities &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; you, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; you just will &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; more&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Whether you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re doing these things for fun, or for&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;professional practical settings, I think you&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ll enjoy this new set of things you can now build.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;So, just to wrap up, I want to thank you again &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; spending all this time with me,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; I hope you will take these skills, use them responsibly, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; just go build cool stuff&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>「吴恩达 Agentic AI 课程实录」模块1：Agentic AI简介</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-01/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-01/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;模块1agentic-ai简介andrew-ngagentic-ai&#34;&gt;模块1：Agentic AI简介「Andrew Ng：Agentic AI」&lt;/h1&gt;&#xA;&lt;h2 id=&#34;10-简介&#34;&gt;1.0 简介&lt;/h2&gt;&#xA;&lt;p&gt;欢迎来到这门关于 Agentic AI 的课程。当我创造 “agentic” 这个词来描述我所看到的一种重要且快速增长的、人们构建基础应用的方式时，我没有意识到的是，一群营销人员会抓住这个词，把它当成一个标签，贴在几乎所有能看到的东西上。这导致了对 Agentic AI 的炒作急剧升温。不过，好消息是，抛开炒作不谈，使用 Agentic AI 构建的真正有价值和有用的应用数量也增长得非常迅速，即使没有炒作那么快。在本课程中，我想向您展示构建 Agentic AI 应用的最佳实践。这将在您现在可以构建什么方面，为您开启许多新的机会。&lt;/p&gt;&#xA;&lt;p&gt;如今，agentic 工作流正被用于构建客户支持代理等应用，或进行深度研究以帮助撰写富有洞察力的研究报告，或处理棘手的法律文件，或查看患者输入信息并提出可能的医学诊断。在我带的许多团队中，我们构建的很多项目如果没有 agentic 工作流是根本不可能完成的。因此，知道如何用它们来构建应用是当今 AI 领域最重要和最有价值的技能之一。&lt;/p&gt;&#xA;&lt;p&gt;我发现，真正懂得如何构建 agentic 工作流的人与那些效率较低的人之间，最大的区别之一是能否推动一个规范的开发流程，特别是专注于评估和错误分析的流程。在本课程中，我将告诉您这意味着什么，并向您展示如何才能真正擅长构建这些 agentic 工作流。能够做到这一点是当今 AI 领域最重要的技能之一，它将为您开启更多的机会，无论是工作机会，还是亲手打造出色软件的机会。&lt;/p&gt;&#xA;&lt;p&gt;那么，让我们进入下一个视频，更深入地探讨什么是 agentic 工作流。&lt;/p&gt;&#xA;&lt;h2 id=&#34;11-什么是-agentic-ai&#34;&gt;1.1 什么是 Agentic AI&lt;/h2&gt;&#xA;&lt;p&gt;那么，什么是 Agentic AI？为什么 Agentic AI 工作流如此强大？让我们来看一看。&lt;/p&gt;&#xA;&lt;p&gt;如今，我们许多人使用大型语言模型（LLM）的方式是提示它，比如说，为我们写一篇关于某个主题 X 的文章。我认为这类似于去找一个人，或者在这种情况下，去找一个 AI，请它为我打出一篇文章，要求它从第一个词写到最后一个词，一气呵成，并且永远不能使用退格键。事实证明，我们人类并不能通过这种被迫以完全线性顺序写作的方式来完成我们最好的作品，AI 模型也是如此。但尽管受到这种写作方式的限制，我们的大语言模型表现得出奇地好。&lt;/p&gt;&#xA;&lt;p&gt;相比之下，使用 agentic 工作流，过程可能是这样的：你可能会让它首先写一个关于某个主题的文章大纲，然后问它是否需要进行任何网络研究。在进行了一些网络研究并可能下载了一些网页之后，再让它撰写初稿，然后阅读初稿，看看哪些部分需要修改或做更多研究，接着修改草稿，如此循环。这种工作流更类似于先进行一些思考和研究，然后进行一些修改，再进行更多的思考，等等。通过这种迭代过程，事实证明，agentic 工作流可能需要更长的时间，但它能交付出质量好得多的工作成果。&lt;/p&gt;&#xA;&lt;p&gt;所以，一个 Agentic AI 工作流是一个基于 LLM 的应用执行多个步骤来完成一项任务的过程。在这个例子中，你可能会使用一个 LLM 来撰写文章大纲，然后你可能会使用一个 LLM 来决定在网络搜索引擎中输入什么搜索词，或者说，用什么搜索词来调用网络搜索 API，以获取相关的网页。基于此，你可以将下载的网页输入到一个 LLM 中，让它撰写初稿，然后可能使用另一个 LLM 进行反思，并决定哪些地方需要更多修改。根据你设计这个工作流的方式，也许你甚至可以加入一个“人类在环”的步骤，让 LLM 可以选择请求人类审查某些关键事实。在此基础上，它可能会修改草稿，这个过程会产生一个好得多的工作输出。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达 Agentic AI 课程实录」模块2：反思设计模式</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-02/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-02/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;模块2反思设计模式andrew-ngagentic-ai&#34;&gt;模块2：反思设计模式「Andrew Ng：Agentic AI」&lt;/h1&gt;&#xA;&lt;h2 id=&#34;21-通过反思改进任务输出&#34;&gt;2.1 通过反思改进任务输出&lt;/h2&gt;&#xA;&lt;p&gt;反思设计模式是我在许多应用中使用过的一种方法，而且它的实现惊人地简单。让我们来看一看。&lt;/p&gt;&#xA;&lt;p&gt;正如人类有时会反思自己的成果并找到改进的方法一样，大型语言模型（LLM）也可以。例如，我可能会写这样一封电子邮件，如果我打字很快，我可能会写出一份不太好的初稿。如果我通读一遍，我可能会说：“嗯，‘下个月’这个说法对于 Tommy 什么时候有空吃晚饭来说不够清楚”，而且我还有一个拼写错误，也忘了署名。这会让我修改草稿，说得更具体一些：“嘿，Tommy，你 5 号到 7 号有空吃晚饭吗？”&lt;/p&gt;&#xA;&lt;p&gt;类似的过程也能让 LLM 改进它们的输出。你可以提示一个 LLM 写出邮件的初稿，得到邮件版本1（email v1）后，你可以把它传递给也许是同一个模型，同一个大型语言模型，但使用不同的提示，告诉它进行反思并写一个改进的第二稿，从而得到最终的输出，即邮件版本2（email v2）。在这里，我只是硬编码了这个工作流：提示 LLM 一次，然后再次提示它进行反思和改进，从而得到邮件 v2。&lt;/p&gt;&#xA;&lt;p&gt;事实证明，类似的过程可以用来改进其他类型的输出。例如，如果你让一个 LLM 编写代码，你可能会提示它为某个任务编写代码，它可能会给你代码的 v1 版本。然后，你可以将它传递给同一个或另一个 LLM，要求它检查错误并编写一个改进的代码第二稿。不同的 LLM 有不同的优势，所以我有时会为撰写初稿和进行反思改进选择不同的模型。例如，事实证明，推理模型（有时也称为思考模型）非常擅长发现错误，所以我有时会通过直接生成来编写代码的初稿，但随后使用一个推理模型来检查错误。&lt;/p&gt;&#xA;&lt;p&gt;现在，事实证明，如果你能获得外部反馈，即来自 LLM 外部的新信息，而不仅仅是让 LLM 反思代码，那么反思会变得更加强大。在代码的例子中，你可以做的一件事就是直接执行代码，看看代码做了什么。通过检查输出，包括代码的任何错误信息，这对于 LLM 反思并找到改进其代码的方法来说，是极其有用的信息。&lt;/p&gt;&#xA;&lt;p&gt;所以在这个例子中，LLM 生成了代码的初稿，但当我运行它时，它产生了一个语法错误。当你将这个代码输出和错误日志传回给 LLM，并要求它根据反馈进行反思并撰写新稿时，这给了它大量非常有用的信息，从而能够得出一个好得多的代码版本2。&lt;/p&gt;&#xA;&lt;p&gt;所以，反思设计模式并非魔术。它不会让 LLM 每次都百分之百地做对所有事情，但它通常能给性能带来适度的提升。但需要记住的一个设计考虑是，当有新的、额外的外部信息可以被纳入反思过程时，反思会变得更加强大。所以在那个例子中，如果你能运行代码，并将代码输出或错误信息作为反思步骤的额外输入，那确实能让 LLM 更深入地反思，并找出可能出了什么问题（如果有的话），从而产生一个比没有这些可供吸收的外部信息时好得多的代码第二版。所以要记住一点，每当反思有机会获得额外信息时，它都会变得更加强大。&lt;/p&gt;&#xA;&lt;p&gt;现在，让我们进入下一个视频，我想与你分享一个更系统的比较，关于使用反思与直接生成（我们有时称之为零样本提示）的对比。让我们进入下一个视频。&lt;/p&gt;&#xA;&lt;h2 id=&#34;22-为什么不直接生成&#34;&gt;2.2 为什么不直接生成？&lt;/h2&gt;&#xA;&lt;p&gt;让我们来看一看，为什么我们可能更倾向于使用反思工作流，而不是仅仅提示一次 LLM，让它直接生成答案然后就此结束。&lt;/p&gt;&#xA;&lt;p&gt;使用直接生成时，你只需用一条指令来提示 LLM，然后让它生成一个答案。所以你可以要求一个 LLM 写一篇关于黑洞的文章，然后让它直接生成文本；或者让它编写计算复利的 Python 函数，然后让它直接写出代码。你在这里看到的提示示例也被称为零样本提示（zero-shot prompting）。&lt;/p&gt;&#xA;&lt;p&gt;让我解释一下“零样本”是什么意思。与零样本提示相对的一种相关方法是，在你的提示中包含一个或多个你希望输出看起来像的例子。这被称为单样本提示（one-shot prompting），如果你在提示中包含了一个期望的输入输出对的例子；或者双样本或少样本提示（two-shot or few-shot prompting），取决于你在提示中包含了多少这样的例子。因此，零样本提示指的是如果你包含了零个例子，也就是不包含任何你想要的期望输出的例子。但如果你还不熟悉这些术语，也别担心。重要的是，在你看到的这些例子中，你只是提示 LLM 一次性直接生成答案，我也称之为零样本提示，因为我们包含了零个例子。&lt;/p&gt;&#xA;&lt;p&gt;事实证明，多项研究表明，在各种任务上，反思都能提升直接生成的性能。这张图改编自 Madaan 等人的研究论文，它展示了一系列不同的任务，在有和没有反思的情况下，使用不同模型实现的结果。解读这张图的方法是看这些相邻的浅色条和深色条对，其中浅色条显示的是零样本提示，深色条显示的是同一模型但带有反思。蓝色、绿色和红色的颜色显示了使用不同模型（如 GPT-3.5 和 GPT-4）进行的实验。你所看到的是，对于许多不同的应用，深色条（即带有反思）比浅色条要高出不少。但当然，具体到你的应用，你的情况可能会有所不同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达 Agentic AI 课程实录」模块3：工具使用</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-03/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-03/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;模块3工具使用andrew-ngagentic-ai&#34;&gt;模块3：工具使用「Andrew Ng：Agentic AI」&lt;/h1&gt;&#xA;&lt;h2 id=&#34;31-什么是工具&#34;&gt;3.1 什么是工具？&lt;/h2&gt;&#xA;&lt;p&gt;在本模块中，你将学习大型语言模型（LLM）的工具使用，这意味着让你的 LLM 决定何时可能需要请求调用一个函数来执行某些操作、收集一些信息或做其他事情。就像我们人类使用工具能比徒手做更多的事情一样，LLM 在获得工具后也能做更多的事情。不过，我们给 LLM 的工具不是锤子、扳手和钳子，而是函数，让它能够请求调用，从而完成更多任务。让我们来看一看。&lt;/p&gt;&#xA;&lt;p&gt;如果你问一个可能在数月前训练好的 LLM：“现在几点了？” 那个训练好的模型并不知道确切的时间，所以它很可能会回答：“抱歉，我无法获取当前时间。” 但是，如果你编写一个函数并让 LLM 能够访问这个函数，那么它就能给出一个更有用的答案。&lt;/p&gt;&#xA;&lt;p&gt;当我们让 LLM 调用函数，或者更准确地说，让 LLM 请求调用函数时，这就是我们所说的“工具使用”，而工具就是我们提供给 LLM、可供其请求调用的函数。&lt;/p&gt;&#xA;&lt;p&gt;具体来说，工具使用是这样工作的。在这个例子中，我将把上一张幻灯片中展示的 &lt;code&gt;getCurrentTime&lt;/code&gt; 函数提供给 LLM。当你接着提示它“现在几点了？”时，LLM 可以决定调用 &lt;code&gt;getCurrentTime&lt;/code&gt; 函数。该函数将返回当前时间，这个时间随后会作为对话历史的一部分反馈给 LLM，最后 LLM 就可以输出，比如说，“现在是下午3点20分”。&lt;/p&gt;&#xA;&lt;p&gt;所以，步骤顺序是：首先有输入提示。在这种情况下，LLM 查看可用的工具集（本例中只有一个工具），并决定调用该工具。这个工具是一个函数，它会返回一个值，该值被反馈给 LLM，然后 LLM 最终生成它的输出。&lt;/p&gt;&#xA;&lt;p&gt;现在，工具使用的一个重要方面是，我们可以让 LLM 自行决定是否使用任何工具。所以在同样的设置下，如果我问它：“绿茶里有多少咖啡因？” LLM 不需要知道当前时间来回答这个问题，所以它可以直接生成答案：“绿茶通常含有这么多咖啡因”，并且它在这样做的时候没有调用 &lt;code&gt;getCurrentTime&lt;/code&gt; 函数。&lt;/p&gt;&#xA;&lt;p&gt;在我的幻灯片中，我将使用 LLM 上方带有虚线框的这个标记，来表示我们正在向 LLM 提供一组工具，供其在认为合适时选择使用。这与你在之前视频中看到的一些例子相反，在那些例子中，我作为开发者硬编码了，例如，在研究代理的某个特定点上总是进行网络搜索。相比之下，&lt;code&gt;getCurrentTime&lt;/code&gt; 函数的调用并不是硬编码的，而是由 LLM 自行决定是否要请求调用 &lt;code&gt;getCurrentTime&lt;/code&gt; 函数。再次强调，我们将使用这个虚线框标记来表示我们何时向 LLM 提供一个或多个工具，由 LLM 来决定它想调用哪些工具（如果有的话）。&lt;/p&gt;&#xA;&lt;p&gt;这里还有一些工具使用可能帮助基于 LLM 的应用生成更好答案的例子：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;网络搜索&lt;/strong&gt;：如果你问它：“你能找一些在加州山景城附近的意大利餐厅吗？” 如果它有一个网络搜索工具，那么 LLM 可能会选择调用一个网络搜索引擎来查询“加州山景城附近的餐厅”，并使用获取到的结果来生成输出。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据库查询&lt;/strong&gt;：如果你经营一家零售店，并且希望能够回答像“给我看看购买了白色太阳镜的顾客”这样的问题，如果你的 LLM 被赋予了访问查询数据库工具的权限，那么它可能会在销售表中查找哪些条目是销售了一副白色太阳镜的，然后用这个信息来生成输出。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;计算&lt;/strong&gt;：最后，如果你想进行利率计算：“如果我存入500美元，利率为5%，10年后我会得到多少钱？” 如果你恰好有一个利率计算工具，那么它就可以调用利率计算函数来计算出结果。或者，事实证明，你稍后会看到的一种方法是，让 LLM 编写代码，比如写一个这样的数学表达式，然后对它求值，这将是另一种让 LLM 计算出正确答案的方式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;因此，作为开发者，你需要思考你希望应用真正做什么样的事情，然后创建所需的函数或工具，并将它们提供给 LLM，让它能够使用适当的工具来完成任务，比如餐厅推荐器、零售问答系统或金融助手可能需要做的事情。所以，根据你的应用，你可能需要实现并向你的 LLM 提供不同的工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达 Agentic AI 课程实录」模块4：构建 Agentic AI 的实用技巧</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-04/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-04/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;模块4构建-agentic-ai-的实用技巧andrew-ngagentic-ai&#34;&gt;模块4：构建 Agentic AI 的实用技巧「Andrew Ng：Agentic AI」&lt;/h1&gt;&#xA;&lt;h2 id=&#34;41-评估evals&#34;&gt;4.1 评估（Evals）&lt;/h2&gt;&#xA;&lt;p&gt;在本模块中，我想与你分享一些构建 Agentic AI 工作流的实用技巧。我希望这些技巧能让你在构建这类系统时，比普通开发者效率高得多。&lt;/p&gt;&#xA;&lt;p&gt;我发现，在开发一个 Agentic AI 系统时，很难预先知道它在哪里能行得通，又在哪里效果不佳，因此也很难知道应该将精力集中在哪里。所以一个非常普遍的建议是，先尝试构建一个哪怕是粗糙的系统，这样你就可以试用它，观察它，看看在哪些地方它可能还没有达到你期望的效果，从而能够更有针对性地进行进一步的开发。相比之下，我发现花好几周时间坐着理论化和假设如何构建它，有时效果反而不佳。通常更好的做法是，以一种安全、合理、不泄露数据的方式，负责任地快速构建一些东西，这样你就可以观察它，然后利用这个初始原型来确定优先级并尝试进一步的开发。&lt;/p&gt;&#xA;&lt;p&gt;让我们从一个例子开始，看看在你构建了一个原型之后可能会发生什么。&lt;/p&gt;&#xA;&lt;h4 id=&#34;示例一发票处理&#34;&gt;示例一：发票处理&lt;/h4&gt;&#xA;&lt;p&gt;我想用我们之前见过的发票处理工作流作为第一个例子，其任务是提取四个必需的字段，然后将它们保存到数据库记录中。在构建了这样一个系统之后，你可能会做的一件事是，找几张发票，也许是10或20张，然后过一遍，看看它们的输出，看看哪些处理得好，是否有任何错误。&lt;/p&gt;&#xA;&lt;p&gt;假设你检查了20张发票，你发现第一张发票没问题，输出看起来是正确的。对于第二张发票，它可能混淆了发票日期（即发票开具的日期）和发票的到期日。在这个任务中，我们想要提取的是到期日，这样我们才能按时付款。于是，我可能会在一个文档或电子表格中记下，对于第二张发票，日期搞混了。也许第三、第四张发票都没问题，依此类推。但当我过完这些例子后，我发现有很多例子都混淆了日期。&lt;/p&gt;&#xA;&lt;p&gt;正是基于对这样一些例子的检查，在这种情况下，你可能会得出结论：一个常见的错误模式是，它在处理日期方面有困难。那样的话，你可能会考虑的一件事，当然是找出如何改进你的系统，让它能更好地提取到期日，但同时，也许也可以编写一个评估（eval）来衡量它提取到期日的准确性。相比之下，如果你发现它错误地提取了开票方地址——谁知道呢，也许你的开票方有不寻常的名字，所以它可能在处理开票方上遇到困难，特别是如果你有国际开票方，他们的名字甚至可能不全是英文字母——那么你可能会转而专注于为开票方地址构建一个评估。&lt;/p&gt;&#xA;&lt;p&gt;所以，为什么构建一个粗糙的系统并查看其输出如此有帮助，原因之一是，它甚至能帮助你决定，你最想投入精力去评估的是什么。&lt;/p&gt;&#xA;&lt;p&gt;现在，如果你已经决定要修改你的系统，以提高它提取发票到期日的准确性，那么为了跟踪进展，创建一个评估来衡量日期提取的准确性可能是个好主意。实现这一点可能有多种方法，但我来分享一下我可能会怎么做。&lt;/p&gt;&#xA;&lt;p&gt;为了创建一个测试集或评估集，我可能会找10到20张发票，并手动写下它们的到期日。所以，也许一张发票的到期日是2025年8月20日，我把它写成标准的“年-月-日”格式。然后，为了便于稍后在代码中进行评估，我可能会在给 LLM 的提示中告诉它，总是将到期日格式化为这种“年-月-日”的格式。这样，我就可以编写代码来提取 LLM 输出的那个日期，也就是到期日，因为那是我们关心的唯一日期。这是一个正则表达式，用于模式匹配，你知道的，四位数的年份，两位数的月份，两位数的日期，然后把它提取出来。接着我就可以直接编写代码来测试提取出的日期是否等于实际日期，也就是我写下的标准答案。&lt;/p&gt;&#xA;&lt;p&gt;所以，有了一个包含大约20张发票的评估集，我就可以进行构建和修改，看看随着我调整提示或系统的其他部分，它正确提取日期的百分比是否在希望中上升。&lt;/p&gt;&#xA;&lt;p&gt;总结一下我们到目前为止看到的内容：我们构建一个系统，然后查看输出以发现它可能表现不佳的地方，比如到期日错误。然后，为了推动对这个重要输出的改进，我们建立一个小型的评估，比如说只有20个例子，来帮助我们跟踪进展。这让我可以回头去调整提示，尝试不同的算法等等，看看我是否能提升“到期日准确性”这个指标。这就是改进一个 Agentic AI 工作流通常的感觉：查看输出，看哪里错了，如果你知道怎么修复，就直接修复它。但如果你需要一个更长的改进过程，那就建立一个评估，并用它来推动进一步的开发。&lt;/p&gt;&#xA;&lt;p&gt;另外需要考虑的一件事是，如果工作了一段时间后，你认为最初的那20个例子不够好，也许它们没有覆盖你想要的所有情况，或者20个例子实在太少，那么你可以随时向评估集中添加更多的例子，以确保它能更好地反映你个人对于系统性能是否足够满意的判断。&lt;/p&gt;&#xA;&lt;h4 id=&#34;示例二营销文案助手&#34;&gt;示例二：营销文案助手&lt;/h4&gt;&#xA;&lt;p&gt;这只是一个例子。对于第二个例子，让我们来看构建一个用于为 Instagram 撰写标题的营销文案助手。为了保持简洁，假设我们的营销团队告诉我们，他们希望标题最多不超过10个单词。所以我们会有一张产品图片，比如说一副我们想推广的太阳镜，然后有一个用户查询，比如“请写一个标题来销售这副太阳镜”，接着让一个 LLM 或大型多模态模型来分析图片和查询，并生成对太阳镜的描述。&lt;/p&gt;&#xA;&lt;p&gt;一个营销文案助手可能会出错的方式有很多种，但假设你看了输出后发现，生成的文案或文本大体上听起来还行，但有时就是太长了。对于太阳镜的输入，它生成了17个词；对于咖啡机，没问题；对于时尚夹克，没问题；对于蓝衬衫，14个词；对于搅拌机，11个词。所以看起来在这个例子中，LLM 在遵守长度准则方面有困难。&lt;/p&gt;&#xA;&lt;p&gt;再次强调，一个营销文案助手可能会出错的地方有很多。但如果你发现它在输出的长度上挣扎，那么你可能会构建一个评估来跟踪这个问题，以便你能做出改进，并确保它在遵守长度准则方面做得越来越好。&lt;/p&gt;&#xA;&lt;p&gt;所以，为了创建一个评估来衡量文本长度，你可能会创建一个测试任务集，比如推广一副太阳镜、一台咖啡机等等，也许创建10到20个例子。然后，你会让你的系统处理每一个任务，并编写代码来测量输出的单词数。这是测量一段文本单词数的 Python 代码。最后，你会将生成文本的长度与10个单词的目标限制进行比较。所以，如果单词数小于等于10，那么正确数就加一。&lt;/p&gt;&#xA;&lt;p&gt;这个例子与之前的发票处理例子的一个区别是，这里没有每个样本的标准答案。目标就是10，对每个例子都一样。相比之下，对于发票处理的例子，我们必须为每个样本生成一个自定义的目标标签，即发票的正确到期日，然后我们用这个每个样本的标准答案来测试输出。&lt;/p&gt;&#xA;&lt;p&gt;我知道我用了一个非常简单的工作流来生成这些标题，但这类评估也可以应用于更复杂的生成工作流。&lt;/p&gt;&#xA;&lt;h4 id=&#34;示例三研究代理&#34;&gt;示例三：研究代理&lt;/h4&gt;&#xA;&lt;p&gt;让我谈谈最后一个例子，我们将重温我们一直在研究的研究代理。如果你查看研究代理在不同输入提示下的输出，假设当你要求它写一篇关于黑洞科学最新突破的文章时，你发现它遗漏了一些备受瞩目且新闻报道很多的研究成果。这是一个不理想的结果。或者当你要求它研究在西雅图租房与买房的对比时，它似乎做得很好。或者关于用机器人收割水果，嗯，它没有提到一家领先的设备公司。&lt;/p&gt;&#xA;&lt;p&gt;基于这个评估，看起来它有时会遗漏一些人类专家作者会捕捉到的非常重要的观点。于是，我会创建一个评估来衡量它捕捉到最重要观点的频率。&lt;/p&gt;&#xA;&lt;p&gt;例如，你可能会想出一些关于黑洞、机器人收割等主题的示例提示。对于每一个主题，都想出，比如说，三到五个“黄金标准”的讨论要点。请注意，这里我们确实有每个样本的标注，因为“黄金标准”的谈话要点，也就是最重要的谈话要点，对于每个例子都是不同的。&lt;/p&gt;&#xA;&lt;p&gt;有了这些标准答案的标注，你接下来可能会使用一个“LLM作为评判者”（LLM-as-a-judge）来计算提到了多少个“黄金标准”的谈话要点。一个示例提示可能是：“请确定所提供的文章中出现了五个‘黄金标准’谈话要点中的多少个。” 你会提供提示、文章文本、黄金标准要点等等，然后让它返回一个 JSON 对象，其中包含一个从0到5的分数，以及一个解释。这让你能为你评估集中的每个提示得到一个分数。&lt;/p&gt;&#xA;&lt;p&gt;在这个例子中，我使用 LLM 作为评判者来计算提到了多少个谈话要点，因为谈论这些要点的方式多种多样，所以使用正则表达式或简单的模式匹配代码可能效果不佳。这就是为什么你可能会使用 LLM 作为评判者，并将其视为一个稍微主观一些的评估，用来判断比如说，事件视界是否被充分提及。&lt;/p&gt;&#xA;&lt;p&gt;这是你如何构建评估的第三个例子。&lt;/p&gt;&#xA;&lt;h4 id=&#34;评估的两个维度&#34;&gt;评估的两个维度&lt;/h4&gt;&#xA;&lt;p&gt;为了思考如何为你的应用构建评估，你构建的评估通常必须反映你在应用中看到或担心的任何可能出错的地方。事实证明，广义上讲，评估有两个维度。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;评估方法&lt;/strong&gt;：在上面的轴上，是你评估输出的方式。在某些情况下，你通过编写代码进行客观评估；有时你使用 LLM 作为评判者进行更主观的评估。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;标准答案&lt;/strong&gt;：在另一个轴上，是看你是否有每个样本的标准答案。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于检查发票日期提取，我们编写代码来评估是否得到了实际日期，这有每个样本的标准答案，因为每张发票的实际日期都不同。&lt;/li&gt;&#xA;&lt;li&gt;但在我们检查营销文案长度的例子中，每个例子的长度限制都是10，所以那个问题没有每个样本的标准答案。&lt;/li&gt;&#xA;&lt;li&gt;相比之下，对于计算“黄金标准”谈话要点，则有每个样本的标准答案，因为每篇文章都有不同的重要谈话要点。但我们使用 LLM 作为评判者来阅读文章，看那些主题是否被充分提及，因为提及这些谈话要点的方式太多了。&lt;/li&gt;&#xA;&lt;li&gt;最后一个象限是“LLM作为评判者”且“没有每个样本的标准答案”。我们在用评分标准给图表打分时看到了这一点。这是当我们看咖啡机销售数据可视化时，如果你要求它根据一个评分标准（比如是否有清晰的坐标轴标签等）来创建图表，那么每个图表都使用相同的评分标准，那将是使用 LLM 作为评判者但没有每个样本的标准答案。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;我发现这个二乘二的网格，可能是思考你可能为你的应用构建的不同类型评估的一种有用方式。顺便说一下，这些有时也被称为端到端评估，因为一端是输入端，即用户查询提示，另一端是最终输出。所以所有这些都是对整个端到端系统性能的评估。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达 Agentic AI 课程实录」模块5：高度自主代理的设计模式</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-05/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/lecnotes-zh/lec-05/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;模块5高度自主代理的设计模式andrew-ngagentic-ai&#34;&gt;模块5：高度自主代理的设计模式「Andrew Ng：Agentic AI」&lt;/h1&gt;&#xA;&lt;h2 id=&#34;51-规划工作流&#34;&gt;5.1 规划工作流&lt;/h2&gt;&#xA;&lt;p&gt;欢迎来到最后一个模块，在这里你将学习一些设计模式，让你能够构建高度自主的代理。在使用这些模式时，你无需预先硬编码要采取的步骤顺序，代理可以更灵活地自行决定要采取哪些步骤来完成任务。我们将讨论规划设计模式，以及在本模块后面部分，如何构建多代理系统。让我们开始吧。&lt;/p&gt;&#xA;&lt;h4 id=&#34;示例一零售客户服务&#34;&gt;示例一：零售客户服务&lt;/h4&gt;&#xA;&lt;p&gt;假设你经营一家太阳镜零售店，并且你的库存中有哪些太阳镜的信息都存储在数据库中。你可能希望有一个客户服务代理能够回答像“你们有库存的圆形太阳镜吗？价格在100美元以下”这样的问题。这是一个相当复杂的查询，因为你必须查看产品描述，看哪些太阳镜是圆形的，然后查看哪些有库存，最后再看哪些价格低于100美元，才能告诉顾客：“是的，我们有经典款太阳镜。” 你如何构建一个能回答像这样以及许多其他各种客户查询的代理呢？&lt;/p&gt;&#xA;&lt;p&gt;为了做到这一点，我们将给 LLM 一套工具，让它能够：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;获取商品描述（比如查找不同的眼镜是否是圆形的）&lt;/li&gt;&#xA;&lt;li&gt;检查库存&lt;/li&gt;&#xA;&lt;li&gt;处理商品退货（这个查询不需要，但其他查询可能需要）&lt;/li&gt;&#xA;&lt;li&gt;获取商品价格&lt;/li&gt;&#xA;&lt;li&gt;检查过去的交易记录&lt;/li&gt;&#xA;&lt;li&gt;处理商品销售等等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;为了让 LLM 弄清楚响应客户请求应该使用什么正确的工具顺序，你可能会写一个这样的提示：“你可以使用以下工具&amp;hellip;”，然后给它每个工具（比如说六个或更多工具）的描述，接着告诉它“返回一个执行用户请求的逐步计划”。&lt;/p&gt;&#xA;&lt;p&gt;在这种情况下，为了回答这个特定的查询，一个 LLM 可能输出的合理计划可能是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首先，使用 &lt;code&gt;get_item_descriptions&lt;/code&gt; 检查不同的描述以找到圆形太阳镜。&lt;/li&gt;&#xA;&lt;li&gt;然后，使用 &lt;code&gt;check_inventory&lt;/code&gt; 查看它们是否有库存。&lt;/li&gt;&#xA;&lt;li&gt;再使用 &lt;code&gt;get_item_price&lt;/code&gt; 查看有库存的结果是否低于100美元。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在 LLM 输出了这个包含三个步骤的计划之后，我们可以将第一步的文本（即这里用红色写的文本）传递给一个 LLM，可能还会附加上下文，比如有哪些工具、你的用户查询是什么、以及其他背景信息，然后让 LLM 执行第一步。在这种情况下，希望 LLM 会选择调用 &lt;code&gt;get_item_descriptions&lt;/code&gt; 来获取相应的商品描述，该步骤的输出能让它选出哪些是圆形太阳镜。&lt;/p&gt;&#xA;&lt;p&gt;然后，第一步的输出会连同第二步的指令（即我这里用蓝色标出的指令）一起传递给一个 LLM，以执行计划的第二步。希望它会接着处理我们在上一张幻灯片中找到的两副圆形太阳镜并检查库存。&lt;/p&gt;&#xA;&lt;p&gt;第二步的输出随后会用于另一次 LLM 调用，其中包含了第二步的输出以及第三步要做什么的指令。将这些传递给 LLM，让它获取商品价格，最后这个输出会最后一次反馈给 LLM，以生成给用户的最终答案。&lt;/p&gt;&#xA;&lt;p&gt;在这张幻灯片中，我稍微简化了很多细节。LLM 实际编写的计划通常比这些简单的一行指令更详细，但基本的工作流程是，让一个 LLM 写出一个包含多个步骤的计划，然后让它在适当的上下文（比如任务是什么、有哪些可用工具等）中，依次执行计划的每一步。&lt;/p&gt;&#xA;&lt;p&gt;使用 LLM 以这种方式进行规划的激动人心之处在于，我们不必预先决定调用工具的顺序，就能回答一个相当复杂的客户请求。如果客户提出一个不同的请求，比如“我想退回我购买的金色镜框眼镜，而不是金属镜框的”，那么你可以想象一个 LLM 同样能够想出一个不同的计划，根据他们之前购买的记录，通过 &lt;code&gt;get_item_descriptions&lt;/code&gt; 找出他们买了哪些眼镜，哪些是他们想退回的金色镜框眼镜，然后可能调用 &lt;code&gt;process_item_return&lt;/code&gt;。所以，有了一个能像这样进行规划的代理，它就能执行更广泛的任务，这些任务可能需要以许多不同的顺序调用许多不同的工具。&lt;/p&gt;&#xA;&lt;h4 id=&#34;示例二邮件助手&#34;&gt;示例二：邮件助手&lt;/h4&gt;&#xA;&lt;p&gt;再看一个规划的例子，让我们来看一个邮件助手。如果你想告诉你的助手：“请回复纽约的 Bob 发来的那封邮件邀请，告诉他我会参加，并把他的邮件归档。” 那么，一个邮件助手可能会被赋予像这样的工具：搜索邮件、移动邮件、删除邮件和发送邮件。你可能会写一个助手提示，说：“你可以使用以下工具，&amp;hellip;请返回逐步的计划。” 在这种情况下，LLM 可能会说，完成这个任务的步骤是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块1」4个颠覆性观点</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-01/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-01/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;吴恩达在他的新课《Agentic AI》中指出，应当让AI模仿人类的思考和工作流程：先构思，再研究，然后起草，最后反复修改。这就是“Agentic工作流”的核心思想，它正在开启一个全新的AI应用时代。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块1」智能体AI工作流学习指南</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-01/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-01/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai-模块1智能体ai工作流学习指南&#34;&gt;「吴恩达Agentic AI 模块1」：智能体AI工作流学习指南&lt;/h1&gt;&#xA;&lt;p&gt;本指南旨在评估和深化对吴恩达（Andrew Ng）关于智能体AI工作流课程核心概念的理解。它包括一个测验、一份答案解析、一组论文问题和一个关键术语词汇表，所有内容均基于提供的课程材料。&lt;/p&gt;&#xA;&lt;h2 id=&#34;测验&#34;&gt;测验：&lt;/h2&gt;&#xA;&lt;h3 id=&#34;简答题&#34;&gt;简答题&lt;/h3&gt;&#xA;&lt;p&gt;请用2-3句话回答以下每个问题，以检验您对核心概念的理解。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;什么是智能体AI工作流（Agentic AI Workflow）？它与传统的单次提示方法有何不同？&lt;/li&gt;&#xA;&lt;li&gt;吴恩达为什么创造并推广“agentic”（智能体的）这个词，而不是简单地使用“agent”（智能体）？&lt;/li&gt;&#xA;&lt;li&gt;智能体系统中的“自主性”（autonomy）谱系是如何划分的？请描述其两端。&lt;/li&gt;&#xA;&lt;li&gt;根据课程内容，使用智能体工作流相比非智能体方法，在性能提升方面有何显著优势？请引用编码基准测试的例子。&lt;/li&gt;&#xA;&lt;li&gt;除了提升性能，智能体工作流还提供了哪两个主要好处？&lt;/li&gt;&#xA;&lt;li&gt;什么是“任务分解”（Task Decomposition）？为什么它在构建智能体工作流中至关重要？&lt;/li&gt;&#xA;&lt;li&gt;在构建智能体工作流时，开发人员可以使用哪些核心“构建模块”（building blocks）？&lt;/li&gt;&#xA;&lt;li&gt;请简要解释“反思”（Reflection）这一智能体设计模式及其工作原理。&lt;/li&gt;&#xA;&lt;li&gt;什么是“工具使用”（Tool Use）设计模式？请举例说明。&lt;/li&gt;&#xA;&lt;li&gt;评估（evals）在开发智能体工作流中扮演什么角色？请描述两种主要的评估方法。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;答案解析&#34;&gt;答案解析&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是智能体AI工作流（Agentic AI Workflow）？它与传统的单次提示方法有何不同？&lt;/strong&gt; 智能体AI工作流是一个基于LLM（大语言模型）的应用程序执行多个步骤来完成任务的过程。与传统的单次提示（直接生成最终结果）不同，智能体工作流是一个迭代过程，可能包括规划、研究、草拟和修订，从而产生更高质量的成果。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;吴恩达为什么创造并推广“agentic”（智能体的）这个词，而不是简单地使用“agent”（智能体）？&lt;/strong&gt; 吴恩达创造“agentic”这个形容词是为了避免关于什么是“真正的智能体”的二元论争议。他认为系统可以在不同程度上表现出智能体特性，使用“agentic”可以承认这种程度上的差异，让社区专注于构建系统，而不是争论定义。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;智能体系统中的“自主性”（autonomy）谱系是如何划分的？请描述其两端。&lt;/strong&gt; 智能体系统的自主性谱系从“低自主性”到“高自主性”不等。低自主性系统通常遵循由程序员预先确定的、确定性的步骤序列；而高自主性系统则能自主做出许多决策，包括决定执行任务的步骤顺序，甚至可能创建新工具。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;根据课程内容，使用智能体工作流相比非智能体方法，在性能提升方面有何显著优势？请引用编码基准测试的例子。&lt;/strong&gt; 智能体工作流能够显著提升性能，其提升幅度甚至可能超过模型本身的代际升级。在Human Eval编码基准测试中，将GPT-3.5与智能体工作流结合使用，其性能提升幅度超过了从GPT-3.5升级到GPT-4所带来的性能提升。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;除了提升性能，智能体工作流还提供了哪两个主要好处？&lt;/strong&gt; 除了性能提升，智能体工作流还提供了另外两个好处：并行化（parallelism）和模块化（modularity）。并行化允许系统同时执行多个任务（如并行下载多个网页），从而比人类更快地完成某些工作；模块化则允许开发者轻松地添加、更新或替换工作流中的组件（如更换搜索引擎或LLM模型）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是“任务分解”（Task Decomposition）？为什么它在构建智能体工作流中至关重要？&lt;/strong&gt; 任务分解是将一个复杂的任务或流程分解成一系列离散、更小的步骤的过程。这在构建智能体工作流中至关重要，因为它能将一个宏大目标转化为可由LLM或软件工具执行的具体、可管理的操作序列，从而实现整个工作流。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在构建智能体工作流时，开发人员可以使用哪些核心“构建模块”（building blocks）？&lt;/strong&gt; 开发人员可以使用的核心构建模块包括AI模型（如大语言模型或多模态模型）和软件工具。软件工具涵盖了多种功能，例如用于信息检索的API（如网络搜索、数据库查询）、用于执行任务的代码执行工具，以及与其他生产力应用（如邮件、日历）交互的接口。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;请简要解释“反思”（Reflection）这一智能体设计模式及其工作原理。&lt;/strong&gt; “反思”是一种设计模式，即让LLM检查其自身的输出，并根据反馈进行迭代改进。例如，一个LLM生成代码后，可以提示它（或另一个“批评家”LLM）检查代码的正确性并提出批评，然后根据这些批评生成一个修正后的、更好的版本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是“工具使用”（Tool Use）设计模式？请举例说明。&lt;/strong&gt; “工具使用”是一种设计模式，即赋予LLM调用外部函数或API（即“工具”）的能力来完成任务。例如，当被问及一个需要实时信息的问题时，LLM可以调用一个网络搜索工具来查找最新数据；当需要精确计算时，它可以调用一个代码执行工具来编写并运行代码得出答案。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;评估（evals）在开发智能体工作流中扮演什么角色？请描述两种主要的评估方法。&lt;/strong&gt; 评估在开发智能体工作流中扮演着至关重要的角色，它用于衡量系统性能、发现问题并推动迭代改进。两种主要的评估方法是：针对客观标准的评估，可以通过编写代码来检查（如检查输出中是否提及竞争对手）；以及针对主观标准的评估，通常使用“LLM作为裁判”（LLM as a judge）的方法，让另一个LLM为输出质量打分。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;论文问题&#34;&gt;论文问题&lt;/h2&gt;&#xA;&lt;p&gt;请针对以下问题进行深入思考和阐述，无需提供答案。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;详细论述智能体AI工作流的自主性谱系。结合课程中提到的应用案例（如发票处理和通用客户服务），分析在不同自主性程度上，系统的可靠性、可控性与任务复杂性之间的权衡关系。&lt;/li&gt;&#xA;&lt;li&gt;解释“任务分解”在设计高效智能体工作流中的核心作用。请以设计一个“自动化法律文件合规审查代理”为例，构思并描述您会如何将其分解为一系列可执行的步骤，并说明每个步骤选择的构建模块（LLM或工具）。&lt;/li&gt;&#xA;&lt;li&gt;分析吴恩达所提出的四种关键设计模式：反思、工具使用、规划和多智能体协作。请选择其中两种模式，深入比较它们的应用场景、实现复杂性以及它们如何共同作用以解决比单一模式更复杂的任务。&lt;/li&gt;&#xA;&lt;li&gt;“一个 disciplined evaluation process（严谨的评估流程）是成功构建智能体工作流的最重要预测指标之一。” 请阐述您对这句话的理解。讨论端到端评估（end-to-end evals）与组件级评估（component level evals）各自的优缺点，并说明错误分析（error analysis）如何驱动工作流的迭代优化。&lt;/li&gt;&#xA;&lt;li&gt;展望未来，课程中提到的“计算机使用代理”（computer use agents）代表了智能体AI的一个前沿研究领域。请讨论实现可靠的计算机使用代理所面临的主要挑战（如网页加载慢、界面解析困难），并探讨解决这些挑战可能的技术路径。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;词汇表&#34;&gt;词汇表&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;术语&lt;/th&gt;&#xA;          &lt;th&gt;定义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;智能体AI (Agentic AI)&lt;/td&gt;&#xA;          &lt;td&gt;一种重要的、快速增长的人工智能应用构建趋势，其核心是使用智能体工作流来完成复杂任务。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;智能体AI工作流 (Agentic AI Workflow)&lt;/td&gt;&#xA;          &lt;td&gt;一种基于大语言模型的应用执行多个步骤来完成任务的过程。它通常是迭代的，包括思考、研究、修订等环节，以产生更高质量的输出。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;自主性 (Autonomy)&lt;/td&gt;&#xA;          &lt;td&gt;智能体系统在没有人类预先硬编码的情况下自主做出决策和决定行动顺序的程度。这个概念存在一个从低到高的谱系。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;任务分解 (Task Decomposition)&lt;/td&gt;&#xA;          &lt;td&gt;将一个复杂的、宏观的任务分解成一系列更小、离散且可由LLM或软件工具执行的步骤的过程。这是构建智能体工作流的关键技能。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;评估 (Evaluations / evals)&lt;/td&gt;&#xA;          &lt;td&gt;用于衡量智能体工作流性能、发现错误和不足之处的流程。它是推动系统迭代改进的关键，包括客观指标和主观判断。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;LLM作为裁判 (LLM as a Judge)&lt;/td&gt;&#xA;          &lt;td&gt;一种主观评估技术，即使用一个LLM来评估另一个LLM生成的输出的质量，通常是通过提示其对输出内容进行评分。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;反思 (Reflection)&lt;/td&gt;&#xA;          &lt;td&gt;一种智能体设计模式。它让LLM检查并批判自己的输出，然后利用这些反馈或外部信息（如代码错误信息）来迭代生成一个更好的版本。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;工具使用 (Tool Use)&lt;/td&gt;&#xA;          &lt;td&gt;一种智能体设计模式。它赋予LLM调用外部函数或API（即“工具”）的能力，如网络搜索、代码执行或数据库查询，以完成超越纯文本生成的任务。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;规划 (Planning)&lt;/td&gt;&#xA;          &lt;td&gt;一种智能体设计模式。它让LLM自主决定为完成一项复杂任务所需采取的行动序列，而不是由开发者预先硬编码步骤。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;多智能体协作 (Multi-Agent Collaboration)&lt;/td&gt;&#xA;          &lt;td&gt;一种智能体设计模式。它通过模拟多个拥有不同角色（如CEO、程序员、测试员）的智能体，让它们协同工作以完成复杂的项目。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;构建模块 (Building Blocks)&lt;/td&gt;&#xA;          &lt;td&gt;构建智能体工作流的基本组件，主要包括AI模型（如LLM）和各种软件工具（如API调用、代码执行器、信息检索器）。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块1简报」Agentic AI工作流</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-01/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-01/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai-模块1简报agentic-ai工作流&#34;&gt;「吴恩达Agentic AI 模块1简报」Agentic AI工作流&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;本文档综合分析了吴恩达关于“代理式AI工作流”（Agentic AI Workflows）的核心理念与实践方法。代理式AI是一种强大的应用程序构建范式，它将复杂的任务分解为多个步骤，通过迭代、反思和工具使用来执行，从而获得远超传统单次提示方法的性能和成果。&lt;/p&gt;&#xA;&lt;h3 id=&#34;核心要点&#34;&gt;核心要点&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;代理式工作流的定义： 与一次性生成结果的模式不同，代理式工作流是一个多步骤过程，AI系统通过规划、执行动作、反思和修正来完成任务。这类似于人类处理复杂问题的方式，例如先写大纲、再做研究、然后起草、最后修改。&lt;/li&gt;&#xA;&lt;li&gt;性能的巨大飞跃： 采用代理式工作流带来的性能提升，可能超过模型本身的代际升级。数据显示，为GPT-3.5模型应用代理式工作流后，其在编程基准测试中的表现甚至可以超越未使用该工作流的更强大的GPT-4模型。&lt;/li&gt;&#xA;&lt;li&gt;自主性光谱： 代理式系统存在一个从“低自主性”到“高自主性”的光谱。低自主性系统（步骤由工程师预先设定）更易于控制、更可靠，已在商业中广泛应用。高自主性系统（由LLM自行决定步骤）则更具实验性，也更难预测。&lt;/li&gt;&#xA;&lt;li&gt;成功的关键技能： 构建高效代理式工作流的两大核心技能是任务分解（将复杂任务拆解为LLM或工具可执行的小步骤）和严格的评估（“Evals”），通过系统化的错误分析和性能追踪来驱动迭代改进。&lt;/li&gt;&#xA;&lt;li&gt;四大设计模式： 构建代理式工作流主要依赖四种关键的设计模式：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;反思 (Reflection): 让LLM检查并批判自身的输出，从而进行迭代改进。&lt;/li&gt;&#xA;&lt;li&gt;工具使用 (Tool Use): 赋予LLM调用外部函数（如网络搜索、代码执行、数据库查询）的能力。&lt;/li&gt;&#xA;&lt;li&gt;规划 (Planning): LLM自主决定完成任务所需的步骤顺序。&lt;/li&gt;&#xA;&lt;li&gt;多代理协作 (Multi-Agent Collaboration): 模拟一个团队，让多个具有不同角色的AI代理协同工作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;广泛的应用价值： 代理式工作流已成功应用于多种场景，包括深度研究报告撰写、客户支持、发票处理和复杂的法律文件分析。对于许多项目而言，没有代理式工作流，其实现将“不可能”。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-代理式ai工作流定义与理念&#34;&gt;1. 代理式AI工作流：定义与理念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-核心概念超越单次生成&#34;&gt;1.1 核心概念：超越单次生成&lt;/h3&gt;&#xA;&lt;p&gt;传统的与大型语言模型（LLM）交互的方式是“直接生成”，即用户提供一个提示，LLM一次性地从头到尾生成完整的文本，这如同要求一个人“不使用退格键一次性写完一篇文章”。&lt;/p&gt;&#xA;&lt;p&gt;代理式AI工作流则截然不同。它将一个复杂的任务分解为一系列的子任务，并以迭代的方式完成。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;典型流程（以撰写研究报告为例）：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;生成大纲： 首先，让LLM为主题撰写一个初步大纲。&lt;/li&gt;&#xA;&lt;li&gt;研究与信息收集： 接着，让LLM决定需要进行哪些网络搜索，并调用搜索API来获取相关网页内容。&lt;/li&gt;&#xA;&lt;li&gt;起草初稿： 基于收集到的信息，LLM撰写第一版草稿。&lt;/li&gt;&#xA;&lt;li&gt;反思与修订： LLM（或另一个AI代理）阅读初稿，识别需要修改或补充研究的部分。&lt;/li&gt;&#xA;&lt;li&gt;人类介入（可选）： 在关键环节（如事实核查），可以设计让AI请求人类审核的步骤。&lt;/li&gt;&#xA;&lt;li&gt;最终修订： 综合所有反馈，完成最终报告。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;吴恩达指出，这种迭代过程虽然耗时更长，但最终产出的工作成果质量“要好得多”。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-代理式-agentic术语的由来&#34;&gt;1.2 “代理式 (Agentic)”术语的由来&lt;/h3&gt;&#xA;&lt;p&gt;吴恩达创造并推广“代理式 (agentic)”这个形容词，是为了避免AI社区中关于“什么是真正的代理 (agent)”的无谓争论。他认为，与其将系统划分为“是代理”或“不是代理”的二元对立，不如承认系统可以在不同程度上表现出“代理行为”。这一术语的引入，旨在将焦点从定义辩论转移到构建有价值的系统上。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-自主性光谱从预定步骤到动态决策&#34;&gt;2. 自主性光谱：从预定步骤到动态决策&lt;/h2&gt;&#xA;&lt;p&gt;代理式AI系统并非只有一种形态，而是存在于一个从低到高的自主性光谱上。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;自主性程度&lt;/th&gt;&#xA;          &lt;th&gt;特征&lt;/th&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;          &lt;th&gt;应用场景&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;低自主性&lt;/td&gt;&#xA;          &lt;td&gt;1. 步骤顺序由工程师预先硬编码。&lt;br&gt;2. 工具调用是确定性的。&lt;br&gt;3. LLM的主要作用是生成文本内容。&lt;/td&gt;&#xA;          &lt;td&gt;可控性强、结果可预测、可靠性高&lt;/td&gt;&#xA;          &lt;td&gt;灵活性差、无法处理未知流程&lt;/td&gt;&#xA;          &lt;td&gt;大多数当前商业应用，如发票处理、标准客户问询。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;半自主性&lt;/td&gt;&#xA;          &lt;td&gt;1. LLM可以在一定范围内做出决策。&lt;br&gt;2. 可以从预定义的工具集中选择并调用工具。&lt;/td&gt;&#xA;          &lt;td&gt;兼具一定的灵活性和可控性。&lt;/td&gt;&#xA;          &lt;td&gt;复杂性增加、灵活性差、无法处理未知流程&lt;/td&gt;&#xA;          &lt;td&gt;灵活性差、无法处理未知流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;高自主性&lt;/td&gt;&#xA;          &lt;td&gt;1. LLM自主决定完成任务的完整步骤顺序。&lt;br&gt;2. 甚至可以自主编写新的函数或创建新工具。&lt;br&gt;3. 流程是动态且不确定的。&lt;/td&gt;&#xA;          &lt;td&gt;极高的灵活性、能处理未知和复杂的任务&lt;/td&gt;&#xA;          &lt;td&gt;可控性差、结果难以预测、可靠性较低，更具实验性&lt;/td&gt;&#xA;          &lt;td&gt;自动网页浏览、复杂问题解决等前沿研究领域&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;吴恩达强调，位于“低自主性”一端的应用同样非常有价值，并且是当今许多企业正在构建和部署的系统。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块2」反思设计模式, 让AI自我修正</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-02/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-02/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;吴恩达提出“反思”（Reflection）设计模式，它能让 AI 像人类一样审视并修正自己的工作，从而大幅提升输出质量。这是一种你在许多高级 AI 应用中都能看到的强大工作流。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块2」反思设计模式学习指南</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-02/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-02/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai-模块2反思设计模式学习指南&#34;&gt;「吴恩达Agentic AI 模块2」反思设计模式学习指南&lt;/h1&gt;&#xA;&lt;h2 id=&#34;测验&#34;&gt;测验&lt;/h2&gt;&#xA;&lt;h3 id=&#34;简答题&#34;&gt;简答题&lt;/h3&gt;&#xA;&lt;p&gt;说明： 请根据提供的学习材料，用2-3句话简要回答以下问题。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;什么是反思设计模式（Reflection Design Pattern）？&lt;/li&gt;&#xA;&lt;li&gt;与直接生成相比，反思设计模式的主要优势是什么？&lt;/li&gt;&#xA;&lt;li&gt;在反思过程中，为什么“外部反馈”（External Feedback）如此重要？&lt;/li&gt;&#xA;&lt;li&gt;什么是“零样本提示”（Zero-Shot Prompting），它与“直接生成”有何关系？&lt;/li&gt;&#xA;&lt;li&gt;在为反思设计模式编写提示（prompt）时，有哪些关键技巧可以提高其有效性？&lt;/li&gt;&#xA;&lt;li&gt;多模态模型（Multimodal Model）如何在图表生成工作流程中应用反思模式？&lt;/li&gt;&#xA;&lt;li&gt;什么是“客观评估”（Objective Evals），请以数据库查询为例说明其应用。&lt;/li&gt;&#xA;&lt;li&gt;在进行主观评估时，为什么使用“评分标准”（Rubric）通常比直接让大型语言模型（LLM）作为裁判进行比较更好？&lt;/li&gt;&#xA;&lt;li&gt;请列举一个使用软件工具为反思过程提供外部反馈的具体例子。&lt;/li&gt;&#xA;&lt;li&gt;何时应该考虑在工作流程中加入反思，特别是当提示工程（prompt engineering）遇到瓶颈时？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;答案解析&#34;&gt;答案解析&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是反思设计模式（Reflection Design Pattern）？&lt;/strong&gt; 反思设计模式是一种工作流程，它模仿人类反思和改进自己工作的方式。在这个模式中，一个大型语言模型（LLM）首先生成一个初步的输出（如草稿代码或邮件），然后由同一个或另一个LLM对该草稿进行审视、批判和改进，从而生成一个更高质量的最终版本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;与直接生成相比，反思设计模式的主要优势是什么？&lt;/strong&gt; 研究表明，在多种任务上，反思设计模式能够显著提升系统性能。与直接生成的一次性输出相比，反思通过增加一个审视和修正的步骤，可以发现并修复初稿中的错误、遗漏或不清晰之处，从而得到更准确、更完善的结果。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在反思过程中，为什么“外部反馈”（External Feedback）如此重要？&lt;/strong&gt; 外部反馈为LLM提供了来自模型外部的新信息，这使得反思过程更加强大和深入。例如，执行代码后得到的错误信息或通过网络搜索核查的事实，都为LLM提供了具体的、客观的修正依据，使其能够更有效地发现并解决问题，而不是仅仅基于已有的信息进行推断。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是“零样本提示”（Zero-Shot Prompting），它与“直接生成”有何关系？&lt;/strong&gt; 零样本提示是指在不向LLM提供任何输入-输出示例的情况下，仅通过指令来让其生成答案。这种方式通常被视为“直接生成”，因为它要求模型一步到位地直接产出最终结果，而没有像一样本（one-shot）或少样本（few-shot）提示那样提供参考范例。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在为反思设计模式编写提示（prompt）时，有哪些关键技巧可以提高其有效性？&lt;/strong&gt; 为了编写有效的反思提示，首先应明确指示模型需要“审阅”或“反思”初稿。其次，提供一套清晰的评估标准（criteria），例如检查域名是否易于发音、邮件语气是否恰当或代码是否清晰完整，这样可以更好地引导LLM关注你最关心的方面。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;多模态模型（Multimodal Model）如何在图表生成工作流程中应用反思模式？&lt;/strong&gt; 在图表生成中，一个LLM首先根据数据生成初始代码（v1）和图表。然后，一个能够处理图像输入的多模态模型会同时接收这段代码和生成的图表图像，通过视觉推理（visual reasoning）来评判图表的清晰度和美观度，并提出改进建议，最终生成更新后的代码（v2）以绘制出更好的图表。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是“客观评估”（Objective Evals），请以数据库查询为例说明其应用。&lt;/strong&gt; 客观评估是指当任务存在明确的正确答案时，用来衡量系统性能的方法。在数据库查询的例子中，开发者会创建一个包含多个问题和其“标准答案”（ground truth answers）的评估集。通过比较系统在有反思和无反思两种情况下给出正确答案的百分比（例如95% vs 87%），就可以客观地判断反思步骤是否有效提升了查询的准确性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在进行主观评估时，为什么使用“评分标准”（Rubric）通常比直接让大型语言模型（LLM）作为裁判进行比较更好？&lt;/strong&gt; 直接让LLM比较两个主观输出（如两张图表）的效果不佳，因为它可能存在位置偏见（position bias），即倾向于选择第一个选项，并且其判断标准不稳定。而使用评分标准，通过让LLM根据一系列明确的、二元的标准（如有无标题、坐标轴标签是否清晰等）对单个输出进行打分，可以得到更一致、更可靠的评估结果。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;请列举一个使用软件工具为反思过程提供外部反馈的具体例子。&lt;/strong&gt; 一个例子是使用单词计数工具来辅助文案写作。如果LLM生成的博客文章草稿超过了字数限制，一个简单的代码工具可以精确计算出单词数量，并将这个“超出限制”的信息作为外部反馈提供给LLM，指导它在下一稿中缩减篇幅以满足要求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;何时应该考虑在工作流程中加入反思，特别是当提示工程（prompt engineering）遇到瓶颈时？&lt;/strong&gt; 当你通过不断调整和优化提示（即提示工程）发现性能提升逐渐趋于平缓，投入更多努力也难以获得显著改善时，就应该考虑加入反思。引入反思，特别是带有外部反馈的反思，可以将性能曲线从停滞的平台期提升到一个新的、更高的改进轨道上。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;论述题&#34;&gt;论述题&lt;/h3&gt;&#xA;&lt;p&gt;说明： 请思考以下问题，并准备以论文形式进行深入探讨。这些问题没有提供标准答案。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;详细论述反思设计模式在代码生成任务中的完整应用流程。请结合“外部反馈”的概念，解释从生成第一版代码到产出优化后代码的每一步，并分析为何执行代码并获取错误日志是提升反思效果的关键。&lt;/li&gt;&#xA;&lt;li&gt;对比并分析“直接生成”（零样本提示）与“反思工作流程”的异同。请根据学习材料中的信息，探讨在哪些应用场景下反思模式的优势最为明显，以及在哪些情况下可能不需要使用这种更复杂的模式。&lt;/li&gt;&#xA;&lt;li&gt;深入探讨评估（Evals）在构建Agentic工作流程中的重要性。请分别以“数据库查询”（客观评估）和“图表生成”（主观评估）为例，阐述两种评估方法的具体实施步骤、挑战以及如何通过有效的评估来指导和优化提示的设计。&lt;/li&gt;&#xA;&lt;li&gt;“外部反馈使反思变得更加强大。”请围绕这一核心论点，从材料中找出并详细阐述三个不同类型的外部反馈示例（例如，工具执行结果、网络搜索、模式匹配），并分析它们各自是如何为LLM提供新信息以驱动更深层次的改进。&lt;/li&gt;&#xA;&lt;li&gt;假设你需要构建一个AI代理来为初创公司构思域名。请基于本模块学习的原则，设计一个完整的工作流程。你的设计应包括：初始生成提示、包含明确标准的反思提示、以及一种评估最终域名质量的方法（可以是主观或客观的）。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;关键术语词汇表&#34;&gt;关键术语词汇表&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;术语 (中文)&lt;/th&gt;&#xA;          &lt;th&gt;术语 (英文)&lt;/th&gt;&#xA;          &lt;th&gt;定义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;反思设计模式&lt;/td&gt;&#xA;          &lt;td&gt;Reflection Design Pattern&lt;/td&gt;&#xA;          &lt;td&gt;一种工作流程，其中LLM生成一个初步输出，然后对其进行审视和改进，以产生一个更高质量的最终版本。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;直接生成&lt;/td&gt;&#xA;          &lt;td&gt;Direct Generation&lt;/td&gt;&#xA;          &lt;td&gt;一种工作流程，即通过单个提示让LLM一次性生成最终答案，不经过审阅或修改步骤。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;零样本提示&lt;/td&gt;&#xA;          &lt;td&gt;Zero-Shot Prompting&lt;/td&gt;&#xA;          &lt;td&gt;在提示中不包含任何输入-输出示例，仅给出指令让LLM完成任务。这通常等同于直接生成。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;一样本/少样本提示&lt;/td&gt;&#xA;          &lt;td&gt;One-shot / Few-shot Prompting&lt;/td&gt;&#xA;          &lt;td&gt;在提示中包含一个或多个期望的输入-输出示例，以引导LLM生成符合格式或风格的答案。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;外部反馈&lt;/td&gt;&#xA;          &lt;td&gt;External Feedback&lt;/td&gt;&#xA;          &lt;td&gt;来自LLM外部的新信息，例如执行代码后的错误消息、网络搜索结果或工具的输出，用于增强反思过程。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;推理模型/思考模型&lt;/td&gt;&#xA;          &lt;td&gt;Reasoning Models / Thinking Models&lt;/td&gt;&#xA;          &lt;td&gt;擅长发现错误的特定类型LLM，在反思步骤中用于检查和修正初稿时可能表现更佳。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;多模态模型&lt;/td&gt;&#xA;          &lt;td&gt;Multimodal Model&lt;/td&gt;&#xA;          &lt;td&gt;能够处理多种类型输入（如文本和图像）的LLM。在反思中，它可以审视生成的图像并提出改进建议。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;评估&lt;/td&gt;&#xA;          &lt;td&gt;Evals / Evaluations&lt;/td&gt;&#xA;          &lt;td&gt;用于衡量系统性能的系统化方法，对于判断反思等工作流程是否有效以及如何优化提示至关重要。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;客观评估&lt;/td&gt;&#xA;          &lt;td&gt;Objective Evals&lt;/td&gt;&#xA;          &lt;td&gt;当任务存在明确的正确或错误答案时使用的评估方法，例如通过对照标准答案来计算准确率。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;主观评估&lt;/td&gt;&#xA;          &lt;td&gt;Subjective Evals&lt;/td&gt;&#xA;          &lt;td&gt;当任务没有唯一的正确答案，需要评估质量、美观度等主观标准时使用的方法。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;LLM作为裁判&lt;/td&gt;&#xA;          &lt;td&gt;LLM as a Judge&lt;/td&gt;&#xA;          &lt;td&gt;一种评估方法，即让LLM直接比较两个输出并判断哪个更好。这种方法存在偏见，效果通常不佳。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;位置偏见&lt;/td&gt;&#xA;          &lt;td&gt;Position Bias&lt;/td&gt;&#xA;          &lt;td&gt;LLM作为裁判时表现出的一种倾向，即更频繁地选择它看到的第一个选项，无论其质量如何。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;评分标准&lt;/td&gt;&#xA;          &lt;td&gt;Rubric&lt;/td&gt;&#xA;          &lt;td&gt;一套用于评估的明确标准或准则。在主观评估中，让LLM依据评分标准对单个输出打分，比直接比较更可靠。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块3」代理式人工智能工具使用与MCP学习指南</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-03/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-03/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai-模块3代理式人工智能工具使用与mcp学习指南&#34;&gt;「吴恩达Agentic AI 模块3」代理式人工智能工具使用与MCP学习指南&lt;/h1&gt;&#xA;&lt;h2 id=&#34;测验&#34;&gt;测验&lt;/h2&gt;&#xA;&lt;h3 id=&#34;简答题&#34;&gt;简答题&lt;/h3&gt;&#xA;&lt;p&gt;请用2-3句话回答以下每个问题，以检验您对核心概念的理解。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在大型语言模型（LLM）的背景下，“工具使用”指的是什么？为什么它很重要？&lt;/li&gt;&#xA;&lt;li&gt;当一个工具可用时，LLM是否总会选择使用它？请解释其决策过程。&lt;/li&gt;&#xA;&lt;li&gt;根据“早期时代”的方法，描述LLM使用工具的完整流程。&lt;/li&gt;&#xA;&lt;li&gt;在手动的工具创建方法中，LLM是直接调用函数吗？请解释其背后的机制。&lt;/li&gt;&#xA;&lt;li&gt;像AISuite这样的现代库与旧的手动提示方法相比，是如何简化为LLM提供工具的过程的？&lt;/li&gt;&#xA;&lt;li&gt;在现代工具使用语法中，JSON模式（JSON schema）扮演什么角色？它通常包含哪些信息？&lt;/li&gt;&#xA;&lt;li&gt;为什么说代码执行是LLM一个特别强大的工具？&lt;/li&gt;&#xA;&lt;li&gt;与LLM代码执行相关的主要风险是什么？缓解这种风险的最佳实践是什么？&lt;/li&gt;&#xA;&lt;li&gt;模型上下文协议（MCP）旨在解决开发者社区面临的什么核心问题？&lt;/li&gt;&#xA;&lt;li&gt;什么是MCP客户端和MCP服务器？请举例说明它们如何交互。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;测验答案&#34;&gt;测验答案&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;在大型语言模型（LLM）的背景下，“工具使用”指的是什么？为什么它很重要？&lt;/strong&gt; “工具使用”是指让LLM自行决定何时请求调用一个函数来执行特定动作、收集信息或完成其他任务。这非常重要，因为就像人类使用工具能完成更多事情一样，为LLM提供工具（即函数）能极大地扩展其能力，使其能够完成仅凭自身训练数据无法完成的任务，例如获取当前时间或查询数据库。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;当一个工具可用时，LLM是否总会选择使用它？请解释其决策过程。&lt;/strong&gt; 不，LLM并不会总是使用可用的工具。开发者可以将决策权留给LLM，让它根据具体的用户提示来判断是否需要调用工具。例如，如果向一个拥有“获取当前时间”工具的LLM询问绿茶中的咖啡因含量，它会直接生成答案，而不会调用该工具，因为它判断该工具与问题无关。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;根据“早期时代”的方法，描述LLM使用工具的完整流程。&lt;/strong&gt; 该流程包括几个步骤：首先，开发者通过提示告知LLM可用工具及其调用格式。当LLM决定使用工具时，它会生成一个特定格式的文本（如FUNCTION: getCurrentTime）作为请求。然后，开发者编写的代码会捕获并解析这个输出，实际执行相应的函数，并将函数返回的结果反馈给LLM，最后LLM利用这个新信息生成最终的答复。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在手动的工具创建方法中，LLM是直接调用函数吗？请解释其背后的机制。&lt;/strong&gt; 不，LLM不直接调用函数。其机制是，LLM通过生成一种特定格式的文本输出来“请求”调用函数。开发者需要编写代码来监视LLM的输出，当检测到这个预定义的格式时，由开发者的代码来负责解析请求、执行相应的函数，并将结果返回给LLM。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;像AISuite这样的现代库与旧的手动提示方法相比，是如何简化为LLM提供工具的过程的？&lt;/strong&gt; 现代库（如AISuite）能自动处理将函数描述给LLM的复杂过程。开发者无需手动编写冗长的提示来解释每个工具的用法，库会自动检查函数的文档字符串（docstring），并生成一个结构化的JSON模式。这个模式清晰地告诉LLM函数的名称、功能和参数，从而实现了工具的无缝集成。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在现代工具使用语法中，JSON模式（JSON schema）扮演什么角色？它通常包含哪些信息？&lt;/strong&gt; JSON模式扮演着向LLM详细描述可用工具的角色。它是一个结构化的数据格式，通常包含函数的名称（name）、功能的详细描述（description，通常从代码的文档字符串中提取）以及函数的参数列表（parameters），包括每个参数的类型和用途。这使得LLM能够准确理解何时以及如何调用该工具。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;为什么说代码执行是LLM一个特别强大的工具？&lt;/strong&gt; 代码执行之所以强大，是因为它赋予了LLM极大的灵活性和解决复杂问题的能力。相比于为每个数学运算（加、减、平方根等）创建单独的工具，允许LLM编写并执行代码能让它处理几乎无限种类的计算和逻辑任务。这种通用性使得LLM能够用创新的代码解决方案来应对各种复杂的用户请求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;与LLM代码执行相关的主要风险是什么？缓解这种风险的最佳实践是什么？&lt;/strong&gt; 主要风险在于安全性，LLM可能生成任意甚至有害的代码，例如错误地删除文件（如remove star.py）。缓解此风险的最佳实践是在一个安全的沙盒环境（如Docker或E2B）中运行代码。沙盒环境可以隔离代码的执行，从而降低数据丢失、敏感数据泄露或对系统造成损害的风险。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;模型上下文协议（MCP）旨在解决开发者社区面临的什么核心问题？&lt;/strong&gt; MCP旨在解决开发者在将各种工具和数据源（如Slack、GitHub、数据库）集成到其LLM应用中时普遍存在的重复劳动问题。在MCP出现之前，每个应用开发者都需要为同一个数据源编写自定义的封装代码，导致社区总工作量呈 M（应用数）乘以 N（工具数）的规模。MCP通过提供一个标准化的集成协议，将工作量减少到 M 加 N 的规模。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是MCP客户端和MCP服务器？请举例说明它们如何交互。&lt;/strong&gt; MCP客户端是需要访问工具或数据的应用程序，而MCP服务器是提供这些工具或数据访问的服务封装层。例如，一个云桌面应用（MCP客户端）在需要获取GitHub仓库信息时，会向GitHub MCP服务器发送请求。服务器接收请求（如“列出最新的拉取请求”），执行相应的操作，并将结果返回给客户端，客户端再将这些信息提供给LLM以生成最终的摘要。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;论文题目建议&#34;&gt;论文题目建议&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;比较并对比“早期时代”手动启用工具使用的方法与使用AISuite等现代库的自动化方法。深入探讨开发者工作流程的演变、底层机制的差异以及对应用开发效率的影响。&lt;/li&gt;&#xA;&lt;li&gt;结合工具使用的概念，讨论大型语言模型中的“代理式”（Agentic）行为。模型能够决定何时使用哪个工具（包括决定不使用任何工具）的能力，是如何促成其代理特质的？&lt;/li&gt;&#xA;&lt;li&gt;深入分析将“代码执行”作为LLM工具的独特优势和重大风险。开发者应如何平衡这一工具的强大功能与保障系统安全性和可靠性的需求？请从技术和实践角度进行论述。&lt;/li&gt;&#xA;&lt;li&gt;阐述模型上下文协议（MCP）的原理及其在构建复杂、多工具LLM应用生态系统中的重要性。该协议如何改变应用开发者（客户端）和服务提供商（服务器）之间的互动模式和开发范式？&lt;/li&gt;&#xA;&lt;li&gt;设想你正在构建一个课程资料中描述的“日历助手代理”。请详细规划你的开发步骤，从定义必要的工具（如检查日历、创建约会），到实现与LLM的交互循环。在你的规划中，请引用全部五个相关模块（工具定义、创建、语法、代码执行、MCP）中的概念。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;关键术语词汇表&#34;&gt;关键术语词汇表&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;术语&lt;/th&gt;&#xA;          &lt;th&gt;定义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;工具使用 (Tool Use)&lt;/td&gt;&#xA;          &lt;td&gt;允许大型语言模型（LLM）自行决定何时请求调用一个函数，以执行特定动作、收集信息或完成其他任务的过程。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;工具 (Tool)&lt;/td&gt;&#xA;          &lt;td&gt;提供给LLM的函数或代码，LLM可以请求调用这些函数来扩展其能力。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;代理工作流 (Agentic Workflow)&lt;/td&gt;&#xA;          &lt;td&gt;LLM作为一个代理，自主地规划步骤、决策并使用工具来完成复杂任务的一系列流程。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;代码执行 (Code Execution)&lt;/td&gt;&#xA;          &lt;td&gt;一种特殊的工具，允许LLM编写代码并请求执行，用于解决数学计算、数据处理等复杂问题，具有高度的灵活性。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;沙盒环境 (Sandbox Environment)&lt;/td&gt;&#xA;          &lt;td&gt;一个安全的、隔离的执行环境（如Docker），用于运行由LLM生成的代码，以防止潜在的有害操作对系统造成损害。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;JSON模式 (JSON Schema)&lt;/td&gt;&#xA;          &lt;td&gt;一种基于JSON的结构化数据格式，用于向LLM详细描述一个工具（函数），包括其名称、功能描述和参数。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;AISuite&lt;/td&gt;&#xA;          &lt;td&gt;一个开源库，它简化了向LLM提供工具的过程，能够自动从函数的文档字符串生成JSON模式，与OpenAI的语法非常相似。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;模型上下文协议 (MCP)&lt;/td&gt;&#xA;          &lt;td&gt;由Anthropic提出并被广泛采用的一个标准协议，旨在简化应用程序（客户端）对外部工具和数据源（服务器）的访问，减少开发者的重复集成工作。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MCP客户端 (MCP Client)&lt;/td&gt;&#xA;          &lt;td&gt;遵循MCP标准的应用程序，它消费（使用）由MCP服务器提供的工具或数据资源。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MCP服务器 (MCP Server)&lt;/td&gt;&#xA;          &lt;td&gt;遵循MCP标准的服务，它将对数据源（如GitHub, Slack）的访问封装起来，向MCP客户端提供工具或数据资源。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块3」关于AI如何使用“工具”：五个真相</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-03/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-03/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;我们通常认为大型语言模型（LLM）是强大的文本生成器，擅长对话和写作。但如果它们能做的远不止于此呢？如果它们能够采取行动、查询数据、完成任务呢？“工具使用”（Tool Use）正是解锁这一能力的关键&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块4」5个反直觉的开发原则</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-04/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-04/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;吴恩达分享的一套强大且反直觉的开发“操作系统”。这套理念的核心是：用严谨的分析来驱动迭代，而非凭直觉盲目构建。采纳这套方法论，是精英AI团队的战略优势，能帮你避免在无法提升性能的功能上浪费数月时间，从而大幅提升开发流程的效率与成功率。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块4」Agentic AI 工作流开发与优化学习指南</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-04/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-04/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai-模块4agentic-ai-工作流开发与优化学习指南&#34;&gt;「吴恩达Agentic AI 模块4」Agentic AI 工作流开发与优化学习指南&lt;/h1&gt;&#xA;&lt;p&gt;本指南旨在帮助您复习和巩固“Agentic AI 工作流的开发与优化”课程第四模块的核心概念。内容包括简答题测验、答案解析、开放式论述题以及关键术语词汇表，全部基于提供的源材料编写。&lt;/p&gt;&#xA;&lt;h2 id=&#34;测验&#34;&gt;测验&lt;/h2&gt;&#xA;&lt;h3 id=&#34;简答题&#34;&gt;简答题&lt;/h3&gt;&#xA;&lt;p&gt;请用2-3句话回答以下每个问题，以检验您对核心概念的理解。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;为什么在开发 Agentic AI 系统时，建议首先构建一个“快速而粗糙”的原型？&lt;/li&gt;&#xA;&lt;li&gt;课程中提到的评估（eval）流程是怎样的？请以发票处理工作流为例进行说明。&lt;/li&gt;&#xA;&lt;li&gt;什么是“LLM作为评判者”（LLM-as-a-judge）？在什么情况下使用它比编写代码进行评估更合适？&lt;/li&gt;&#xA;&lt;li&gt;请解释评估的两个维度轴，并为每个象限提供一个源材料中提到的例子。&lt;/li&gt;&#xA;&lt;li&gt;什么是错误分析（Error Analysis）？它在优化 Agentic AI 工作流中扮演什么关键角色？&lt;/li&gt;&#xA;&lt;li&gt;在进行错误分析时，“追踪”（Trace）和“跨度”（Span）分别指什么？&lt;/li&gt;&#xA;&lt;li&gt;与端到端评估相比，组件级评估（Component-level Evals）有哪些优势？&lt;/li&gt;&#xA;&lt;li&gt;当一个基于LLM的组件性能不佳时，可以采取哪些方法来解决问题？&lt;/li&gt;&#xA;&lt;li&gt;开发者应如何培养对不同大型语言模型（LLM）能力和适用场景的直觉？&lt;/li&gt;&#xA;&lt;li&gt;在优化 Agentic 工作流的成本和延迟时，首要步骤是什么？这如何帮助确定优化的重点？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;答案解析&#34;&gt;答案解析&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;为什么在开发 Agentic AI 系统时，建议首先构建一个“快速而粗糙”的原型？&lt;/strong&gt; 构建一个快速原型有助于开发者快速了解系统在实际应用中的表现，识别出其有效和无效的方面。通过观察初始原型的输出，可以更有针对性地集中精力解决实际存在的问题，而不是花费数周时间进行理论化和假设，从而大大提高开发效率。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;课程中提到的评估（eval）流程是怎样的？请以发票处理工作流为例进行说明。&lt;/strong&gt; 评估流程首先是构建系统并观察输出，以发现问题，例如发票的“到期日”被错误提取。接着，创建一个小规模的评估集（如10-20张发票），并为每个样本手动标注正确答案（即“基准真相”）。最后，编写代码或提示来衡量系统输出与基准真相的一致性，从而量化改进效果。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是“LLM作为评判者”（LLM-as-a-judge）？在什么情况下使用它比编写代码进行评估更合适？&lt;/strong&gt; “LLM作为评判者”是利用一个LLM来评估另一个AI系统输出质量的方法，通常用于更主观的评估。当评估标准难以通过简单的代码（如正则表达式）来客观衡量时，它尤其有用。例如，在评估研究报告是否充分涵盖了“金标准讨论要点”时，由于表达方式多样，使用LLM来判断会比模式匹配更有效。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;请解释评估的两个维度轴，并为每个象限提供一个源材料中提到的例子。&lt;/strong&gt; 评估的两个维度轴分别是评估方法（客观代码评估 vs. 主观LLM评判）和是否有“逐例基准真相”。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;代码评估 &amp;amp; 有逐例基准真相: 检查发票到期日提取是否正确，因为每张发票有不同的正确日期。&lt;/li&gt;&#xA;&lt;li&gt;代码评估 &amp;amp; 无逐例基准真相: 检查营销文案长度是否符合10个词的限制，因为所有例子的目标都相同。&lt;/li&gt;&#xA;&lt;li&gt;LLM评判 &amp;amp; 有逐例基准真相: 统计研究论文中提及“金标准讨论要点”的数量，因为每个主题的要点都不同。&lt;/li&gt;&#xA;&lt;li&gt;LLM评判 &amp;amp; 无逐例基准真相: 根据通用评分标准（如坐标轴标签是否清晰）来给图表打分。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是错误分析（Error Analysis）？它在优化 Agentic AI 工作流中扮演什么关键角色？&lt;/strong&gt; 错误分析是一个系统性的过程，通过检查系统出错的案例，找出导致最终输出不满意的根本原因在于工作流中的哪个组件。它的关键作用是帮助开发团队将精力集中在最能有效提升系统整体性能的薄弱环节上，避免在收效甚微的组件上浪费时间和资源。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在进行错误分析时，“追踪”（Trace）和“跨度”（Span）分别指什么？&lt;/strong&gt; “追踪”（Trace）指的是一次 Agent 运行过程中所有中间步骤输出的集合，它完整记录了从输入到最终输出的全过程。而“跨度”（Span）特指单个步骤的输出。通过检查追踪记录，开发者可以了解每个组件的具体表现。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;与端到端评估相比，组件级评估（Component-level Evals）有哪些优势？&lt;/strong&gt; 组件级评估能为特定组件的性能提供更清晰、更直接的信号，避免了整个端到端系统中其他组件随机性带来的噪声干扰。这使得开发者可以更高效地对某个特定组件（如网络搜索功能）进行调优和迭代，同时也便于分工协作，让不同团队专注于优化各自负责的模块。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;当一个基于LLM的组件性能不佳时，可以采取哪些方法来解决问题？&lt;/strong&gt; 可以采取多种方法改进。首先是改进提示（Prompts），如增加更明确的指令或使用少样本提示（few-shot prompting）。其次是尝试不同的LLM模型，选择更适合当前任务的模型。此外，还可以将复杂的任务分解为多个更简单的步骤，或者在穷尽其他方法后，考虑对模型进行微调（fine-tuning）以获得更高性能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;开发者应如何培养对不同大型语言模型（LLM）能力和适用场景的直觉？&lt;/strong&gt; 开发者可以通过多种方式培养直觉。首先是经常试用不同的模型，包括闭源和开源模型，了解它们的特性。其次是大量阅读他人编写的优秀提示，甚至深入开源软件包研究其提示设计。最后，在自己的工作流中尝试替换和评估不同的模型，结合追踪记录和评估指标，积累关于模型性能、成本和速度权衡的实践经验。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在优化 Agentic 工作流的成本和延迟时，首要步骤是什么？这如何帮助确定优化的重点？&lt;/strong&gt; 首要步骤是对工作流的每个步骤进行基准测试（benchmarking），即测量每个组件的执行时间（延迟）和花费（成本）。通过这种量化分析，可以清晰地识别出哪些步骤是主要的耗时或成本来源。这使得优化工作可以集中在影响最大的组件上，避免在对整体性能影响不大的地方浪费精力。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;开放式论述题&#34;&gt;开放式论述题&lt;/h3&gt;&#xA;&lt;p&gt;请思考并详细阐述以下问题，这些问题没有标准答案，旨在激发更深入的思考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块5」4个自主AI智能体构建模式:从指令执行者到战略家</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-05/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/blog/lec-05/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文将从吴恩达（Andrew Ng）的课程中提炼出四个最具影响力的设计模式，帮助你理解如何构建这些高度自主的智能体。这些模式将彻底改变我们对AI能力的认知，并为开发者开辟了全新的可能性。&lt;/p&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI 模块5」高度自主智能体AI模式学习指南</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-05/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/guides/lec-05/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai-模块5高度自主智能体ai模式学习指南&#34;&gt;「吴恩达Agentic AI 模块5」高度自主智能体AI模式学习指南&lt;/h1&gt;&#xA;&lt;p&gt;本学习指南旨在帮助您深入理解并掌握构建高度自主智能体AI的核心设计模式。内容涵盖了规划工作流、多智能体系统以及它们在实际应用中的实现方式。&lt;/p&gt;&#xA;&lt;h2 id=&#34;测验&#34;&gt;测验&lt;/h2&gt;&#xA;&lt;h3 id=&#34;简答题&#34;&gt;简答题&lt;/h3&gt;&#xA;&lt;p&gt;请使用2-3句话回答以下问题，以检验您对核心概念的理解。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在智能体AI中，“规划”设计模式的核心思想是什么？&lt;/li&gt;&#xA;&lt;li&gt;为什么让大型语言模型（LLM）以JSON或XML等结构化格式输出其计划是有益的？&lt;/li&gt;&#xA;&lt;li&gt;什么是“通过代码执行进行规划”？在什么情况下它特别有效？&lt;/li&gt;&#xA;&lt;li&gt;根据源材料，使用规划模式的一个主要挑战或缺点是什么？&lt;/li&gt;&#xA;&lt;li&gt;什么是多智能体工作流，其背后的核心理念是什么？&lt;/li&gt;&#xA;&lt;li&gt;在多智能体系统中，单个智能体通常是如何被创建的？&lt;/li&gt;&#xA;&lt;li&gt;请描述多智能体系统中的“线性”沟通模式。&lt;/li&gt;&#xA;&lt;li&gt;请描述多智能体系统中的“层级式”沟通模式。&lt;/li&gt;&#xA;&lt;li&gt;根据所提供的研究，将代码作为行动（规划）与使用JSON或纯文本相比，效果如何？&lt;/li&gt;&#xA;&lt;li&gt;材料中用什么类比来解释多智能体系统（即使在单台计算机上运行）的价值？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;答案解析&#34;&gt;答案解析&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;在智能体AI中，“规划”设计模式的核心思想是什么？&lt;/strong&gt; “规划”设计模式允许智能体AI灵活地自行决定完成任务所需的步骤顺序，而无需开发者预先硬编码步骤。智能体会首先生成一个多步骤的计划，然后逐一执行计划中的每个步骤，以响应复杂的用户请求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;为什么让大型语言模型（LLM）以JSON或XML等结构化格式输出其计划是有益的？&lt;/strong&gt; 使用JSON或XML等结构化格式，可以使下游代码以清晰、无歧义的方式解析计划的具体步骤。这确保了计划的每个部分（如步骤描述、使用的工具和参数）都能被系统可靠地、系统化地逐一执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是“通过代码执行进行规划”？在什么情况下它特别有效？&lt;/strong&gt; “通过代码执行进行规划”是指让LLM直接编写代码来表达和执行一个复杂的计划，而不是输出JSON等格式的步骤列表。当任务可以通过编程逻辑完成时，这种方法尤其强大，因为它允许LLM利用编程语言和库中成百上千个现有函数，从而能处理比预定义工具集更广泛、更复杂的查询。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;根据源材料，使用规划模式的一个主要挑战或缺点是什么？&lt;/strong&gt; 使用规划模式的主要挑战是系统有时会变得难以控制。由于开发者无法预先知道智能体在运行时会生成什么样的计划，因此系统的行为会变得更难预测，这给控制带来了困难。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;什么是多智能体工作流，其背后的核心理念是什么？&lt;/strong&gt; 多智能体工作流是指让多个智能体协作完成一项任务，而不是依赖单个智能体。其核心理念是将一个复杂的任务分解为多个子任务，并为每个子任务指派一个具有特定角色和技能的智能体，就像组建一个人类团队来分工合作一样。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;在多智能体系统中，单个智能体通常是如何被创建的？&lt;/strong&gt; 单个智能体通常是通过向大型语言模型（LLM）提供特定的提示（prompting）来创建的。提示会指示LLM扮演一个特定的角色（如研究员、图形设计师或作者），并赋予其完成该角色任务所需的工具和背景信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;请描述多智能体系统中的“线性”沟通模式。&lt;/strong&gt; 线性沟通模式是一种工作流，其中智能体按顺序逐一完成其工作。第一个智能体完成任务后，将其输出传递给第二个智能体，第二个智能体再将其输出传递给第三个，以此类推，直到最终任务完成。例如，研究员先工作，然后是图形设计师，最后是作者。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;请描述多智能体系统中的“层级式”沟通模式。&lt;/strong&gt; 层级式沟通模式涉及一个“管理者”智能体，它负责协调和委派任务给其他多个“团队成员”智能体。管理者智能体制定计划，将具体任务分配给下属智能体，并接收它们的工作成果，然后决定下一步行动，形成一种自上而下的协调结构。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;根据所提供的研究，将代码作为行动（规划）与使用JSON或纯文本相比，效果如何？&lt;/strong&gt; 研究表明，让LLM通过编写代码来表达计划和执行动作，其效果优于让它编写JSON或纯文本格式的计划。总体趋势是，代码规划优于JSON规划，而JSON规划又稍好于纯文本规划。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;材料中用什么类比来解释多智能体系统（即使在单台计算机上运行）的价值？&lt;/strong&gt; 材料中使用的类比是计算机中的多进程或多线程。尽管计算机只有一个CPU，但开发者将工作分解为多个进程或线程，可以更容易地编写和管理复杂的程序。同样，将智能体任务分解为多个智能体，为开发者提供了一个有用的心智框架，可以更轻松地将复杂任务分解为可管理的子任务。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;论述题&#34;&gt;论述题&lt;/h3&gt;&#xA;&lt;p&gt;请思考并详细阐述以下问题，以深化您对相关概念的综合理解。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;论述智能体AI中“规划”模式的演变过程，从简单的文本文本计划，到JSON/XML格式，再到最终的通过代码执行进行规划。分析每个阶段的优势和局限性。&lt;/li&gt;&#xA;&lt;li&gt;比较并对比“规划”设计模式与“多智能体工作流”。这两种模式如何能像市场营销经理的例子那样结合起来使用？&lt;/li&gt;&#xA;&lt;li&gt;分析智能体系统中“控制”与“自主性”之间的权衡关系，并具体参考规划模式和“全体对全体”（all-to-all）沟通模式中提到的挑战。&lt;/li&gt;&#xA;&lt;li&gt;假设您被要求构建一个智能体系统，以自动化撰写一篇复杂研究论文的过程。请利用源材料中的概念，设计一个多智能体系统来完成此任务。定义智能体的角色、它们必需的工具，以及您将实施的沟通模式，并解释您的选择理由。&lt;/li&gt;&#xA;&lt;li&gt;源材料提到，规划在“高度智能化的编码系统”中尤其成功。根据所提供的背景信息，解释为什么通过代码执行进行规划对于软件开发任务如此有效，并讨论其潜在风险以及必要的预防措施（如使用沙盒）。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;关键术语词汇表&#34;&gt;关键术语词汇表&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;术语 (Term)&lt;/th&gt;&#xA;          &lt;th&gt;定义 (Definition)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;智能体AI (Agentic AI)&lt;/td&gt;&#xA;          &lt;td&gt;一类能够自主规划并执行一系列动作以完成复杂任务的人工智能系统。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;规划 (Planning)&lt;/td&gt;&#xA;          &lt;td&gt;一种设计模式，其中智能体首先生成一个多步骤的行动计划来响应用户请求，然后按顺序执行该计划，而不是依赖预先硬编码的指令。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;工具 (Tools)&lt;/td&gt;&#xA;          &lt;td&gt;提供给智能体的特定功能或API，使其能够执行超出LLM原生能力的任务，例如查询数据库、发送电子邮件或进行网络搜索。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;JSON格式 (JSON Format)&lt;/td&gt;&#xA;          &lt;td&gt;一种轻量级的数据交换格式，用于让LLM以结构化、机器可读的方式输出其计划，以便下游代码能够清晰、无歧义地解析和执行。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;通过代码执行进行规划 (Planning with code execution)&lt;/td&gt;&#xA;          &lt;td&gt;一种高级规划技术，让LLM直接生成可执行的代码（如Python代码）来表达其计划。这使得智能体能够利用编程语言的强大功能和庞大的函数库来完成复杂任务。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;多智能体工作流 (Multi-agent workflow)&lt;/td&gt;&#xA;          &lt;td&gt;一种系统设计，其中多个具有不同角色和技能的智能体协同工作以完成一个共同的复杂任务，类似于一个人类团队的分工协作。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;线性沟通模式 (Linear communication pattern)&lt;/td&gt;&#xA;          &lt;td&gt;一种多智能体协作模式，其中信息和任务按顺序从一个智能体传递到下一个，形成一条直线式的工作流。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;层级式沟通模式 (Hierarchical communication pattern)&lt;/td&gt;&#xA;          &lt;td&gt;一种多智能体协作模式，其中一个“管理者”智能体负责协调其他多个下属智能体的工作，进行任务分配和结果汇总，形成一种类似组织架构的沟通结构。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;全体对全体沟通模式 (All-to-all communication pattern)&lt;/td&gt;&#xA;          &lt;td&gt;一种复杂的、非结构化的沟通模式，其中系统中的任何智能体都可以在任何时候与其他任何智能体进行通信。这种模式灵活性高，但结果难以预测和控制。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;沙盒 (Sandbox)&lt;/td&gt;&#xA;          &lt;td&gt;一种安全执行环境，用于运行由LLM生成的代码。它将代码的执行与主系统隔离开来，以防止潜在的恶意或不安全操作对系统造成损害。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI模块2简报」反思设计模式</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-02/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-02/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai模块2简报反思设计模式&#34;&gt;「吴恩达Agentic AI模块2简报」反思设计模式&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;本文档对“反思设计模式”（Reflection Design Pattern）进行了深入分析，该模式是提升大型语言模型（LLM）输出质量的关键技术。核心观点认为，通过一个两步流程——首先生成初步草稿，然后提示模型对该草稿进行批判性审视和改进——可以显著增强最终结果的准确性、完整性和质量。&lt;/p&gt;&#xA;&lt;h3 id=&#34;关键洞察&#34;&gt;关键洞察&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;性能优势： 多项研究和实践表明，与一次性直接生成（或称“零样本提示”）相比，反思模式在各种任务中都能带来显著的性能提升，包括代码编写、结构化数据生成和创意写作。&lt;/li&gt;&#xA;&lt;li&gt;外部反馈的力量： 反思模式最强大的应用形式是整合外部反馈。当模型不仅依赖自身知识，还能接收来自外部工具（如代码执行器、网络搜索或简单的验证脚本）的新信息时，其改进能力会得到指数级增强。这种方法能有效克服单纯提示工程所面临的性能瓶颈。&lt;/li&gt;&#xA;&lt;li&gt;系统的评估至关重要： 由于反思会增加系统的复杂性和延迟，因此必须通过严格的评估来验证其有效性。对于有明确对错标准的任务，应采用基于“基准真相”数据的客观评估。对于主观任务（如评估图表美观度），基于评分细则（Rubric）的评估比直接让模型比较优劣更为可靠和一致，有效避免了位置偏见等问题。&lt;/li&gt;&#xA;&lt;li&gt;提示词工程： 高效的反思依赖于精心设计的提示词。反思提示词应明确指示模型进行“审阅”或“反思”，并提供清晰、具体的评估标准（例如，“检查语气”、“验证事实”、“是否易于发音”），以引导模型进行有针对性的改进。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;总之，反思设计模式不仅仅是一种简单的技巧，更是一种系统化的工作流，它将批判性思维和外部验证融入到人工智能生成过程中，从而实现更高水平的性能和可靠性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一反思设计模式的核心概念&#34;&gt;一、反思设计模式的核心概念&lt;/h2&gt;&#xA;&lt;p&gt;反思设计模式模仿了人类通过审阅和修改来改进工作的过程。它将一个任务分解为两个主要步骤，让大型语言模型（LLM）能够批判性地评估并优化其自身的输出。&lt;/p&gt;&#xA;&lt;p&gt;核心工作流程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;初始生成（版本1）： 首先，向LLM提供一个提示，要求其生成任务的初步草案。这可以是任何类型的输出，例如一封电子邮件、一段代码或一篇短文。&lt;/li&gt;&#xA;&lt;li&gt;反思与改进（版本2）： 接着，将生成的版本1草稿作为输入，连同一个新的“反思提示词”，再次提交给同一个或另一个LLM。这个新的提示词会引导模型扮演一个批判者的角色，根据特定标准检查草稿，并生成一个经过改进的版本2。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;应用实例：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;电子邮件撰写：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;版本1： 快速生成的邮件草稿可能包含拼写错误、模糊的日期（如“下个月”）且忘记署名。&lt;/li&gt;&#xA;&lt;li&gt;反思： 提示模型检查邮件的清晰度、准确性和完整性。&lt;/li&gt;&#xA;&lt;li&gt;版本2： 改进后的邮件将日期具体化（如“5号到7号”），修正错误并添加署名。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;代码生成：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;版本1： LLM生成的初始代码可能存在逻辑错误或语法问题。&lt;/li&gt;&#xA;&lt;li&gt;反思： 提示模型检查代码是否存在缺陷（bugs）。&lt;/li&gt;&#xA;&lt;li&gt;版本2： 修正了错误，功能更完善的代码。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;模型选择策略： 在实现这一模式时，开发者可以选择不同的模型组合。例如，可以使用一个模型进行初始生成，而使用另一个具有强大推理能力的“思考模型”（Reasoning Model）来进行反思和纠错，因为后者在发现代码缺陷等任务上通常表现更佳。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二反思与直接生成的性能对比&#34;&gt;二、反思与直接生成的性能对比&lt;/h2&gt;&#xA;&lt;p&gt;直接生成（Direct Generation），也称为“零样本提示”（Zero-shot Prompting），是指在不提供任何示例的情况下，仅通过一条指令让LLM一次性完成任务。虽然这种方法简单快捷，但研究表明，反思模式在多种应用场景下都能提供更优越的性能。&lt;/p&gt;&#xA;&lt;p&gt;根据Madaan等人的研究论文，在涵盖GPT-3.5和GPT-4等多种模型的实验中，使用反思模式（深色条）的性能普遍显著高于仅使用零样本提示（浅色条）的性能。&lt;/p&gt;&#xA;&lt;p&gt;反思模式的典型应用场景：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;应用领域&lt;/th&gt;&#xA;          &lt;th&gt;问题描述&lt;/th&gt;&#xA;          &lt;th&gt;反思任务&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;结构化数据生成&lt;/td&gt;&#xA;          &lt;td&gt;生成的HTML表格或复杂的嵌套JSON可能存在格式错误。&lt;/td&gt;&#xA;          &lt;td&gt;验证输出格式的正确性，并进行修正。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;指令序列生成&lt;/td&gt;&#xA;          &lt;td&gt;生成的操作指南（如泡茶步骤）可能遗漏关键步骤。&lt;/td&gt;&#xA;          &lt;td&gt;检查指令的连贯性和完整性，补充缺失环节。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;创意命名&lt;/td&gt;&#xA;          &lt;td&gt;头脑风暴出的域名可能存在意外的负面含义或难以发音。&lt;/td&gt;&#xA;          &lt;td&gt;检查名称是否有不当联想、负面含义，以及是否易于发音。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;商业邮件&lt;/td&gt;&#xA;          &lt;td&gt;邮件草稿的语气可能不当，或事实、日期存在错误。&lt;/td&gt;&#xA;          &lt;td&gt;检查邮件的语气，并核实验中提到的所有事实、日期和承诺。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;编写反思提示词的最佳实践：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;明确意图： 在提示词中清晰地使用“审阅”、“反思”或“批判”等词语，明确指示模型进入评估模式。&lt;/li&gt;&#xA;&lt;li&gt;提供具体标准： 给出清晰的评估准则。例如，要求模型检查“清晰度、可读性和完整性”或“音调和事实准确性”，这能更好地引导模型的反思过程。&lt;/li&gt;&#xA;&lt;li&gt;借鉴优秀实践： 通过阅读高质量开源软件中的提示词，可以学习到更有效的提示词编写技巧。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;三关键增强器整合外部反馈&#34;&gt;三、关键增强器：整合外部反馈&lt;/h2&gt;&#xA;&lt;p&gt;虽然LLM的自我反思已经能提升性能，但当反思过程能够整合外部反馈（即来自LLM之外的新信息）时，其效果会得到质的飞跃。这是该设计模式中最强大的方面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI模块3简报」工具使用与模型上下文协议（MCP）</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-03/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-03/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai模块3简报工具使用与模型上下文协议mcp&#34;&gt;「吴恩达Agentic AI模块3简报」工具使用与模型上下文协议（MCP）&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;本简报综合分析了大型语言模型（LLM）通过“工具使用”实现代理式（Agentic）能力的核心概念、实现机制和未来趋势。关键洞察如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;工具是LLM能力的延伸&lt;/strong&gt;：工具是开发者提供给LLM调用的外部函数，使其能够超越预训练知识的限制。这使得LLM能够执行获取实时信息、查询数据库、进行网络搜索和执行复杂计算等任务，从而极大地增强了应用的实用性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;代理式决策是核心&lt;/strong&gt;：工具使用的关键在于LLM能够自主决定是否、何时以及调用哪个工具来完成任务。这种非硬编码的决策过程是实现代理式工作流的基础，其标准流程为：LLM接收提示 -&amp;gt; 决定调用工具 -&amp;gt; 外部代码执行工具并返回结果 -&amp;gt; 结果反馈给LLM -&amp;gt; LLM生成最终输出。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;实现方式的演进&lt;/strong&gt;：工具调用的实现已从早期依赖特定提示词（如输出“FUNCTION: function_name”）的繁琐方法，演变为现代LLM原生的、基于特定语法的调用方式。诸如AISuite之类的库通过自动从函数文档字符串生成JSON Schema来描述工具，进一步简化了开发流程，使开发者能更便捷地集成工具。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;代码执行是最强大的工具之一&lt;/strong&gt;：为LLM提供一个通用的代码执行工具，比创建无数个特定功能的工具更具灵活性和扩展性。LLM能够通过编写和执行代码来解决复杂的数学、逻辑和数据处理问题。然而，这也带来了严峻的安全风险。最佳实践是在沙盒环境（如Docker）中执行代码，以防止潜在的数据丢失或系统损坏。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;模型上下文协议（MCP）推动生态标准化&lt;/strong&gt;：MCP是由Anthropic提出并被广泛采用的一项新标准，旨在解决开发者在集成各类API（如Slack、GitHub）时重复造轮子的问题。它通过定义统一的客户端（应用）与服务端（工具提供者）交互协议，将社区开发工作量从M×N（应用×工具）的复杂性降低到M+N，极大地促进了一个可共享、可复用的工具生态系统的形成。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;工具使用的核心概念与价值&#34;&gt;工具使用的核心概念与价值&lt;/h2&gt;&#xA;&lt;p&gt;工具使用是赋予LLM代理能力、使其能够与外部世界交互并执行具体行动的关键机制。它将LLM从一个单纯的文本生成器转变为一个能够主动解决问题的智能体。&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-什么是工具&#34;&gt;1.1 什么是工具？&lt;/h3&gt;&#xA;&lt;p&gt;在LLM的语境下，“工具”是指开发者编写并提供给模型使用的外部代码函数。当LLM认为需要执行某个操作或获取特定信息时，它不会直接执行代码，而是会请求调用这些预先定义的函数。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;功能示例：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;信息获取&lt;/strong&gt;：&lt;code&gt;getCurrentTime()&lt;/code&gt; 获取当前时间，网络搜索工具获取最新资讯。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据操作&lt;/strong&gt;：&lt;code&gt;queryDatabase()&lt;/code&gt; 从销售数据库中查询特定客户信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;计算任务&lt;/strong&gt;：&lt;code&gt;calculateInterest()&lt;/code&gt; 执行精确的金融计算。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;系统交互&lt;/strong&gt;：&lt;code&gt;makeAppointment()&lt;/code&gt; 在日历中创建会议邀请。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;12-工具使用的代理式决策过程&#34;&gt;1.2 工具使用的代理式决策过程&lt;/h3&gt;&#xA;&lt;p&gt;工具使用的核心特征在于其**代理式（Agentic）**本质，即LLM根据上下文自主决策，而非由开发者硬编码指定何时调用函数。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;决策自主性&lt;/strong&gt;：当面对一个问题时，LLM会评估其可用的工具集。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果问题（如“绿茶中有多少咖啡因？”）能直接用其内部知识回答，它将不会调用任何工具。&lt;/li&gt;&#xA;&lt;li&gt;如果问题（如“现在几点了？”）需要外部信息，它会决定调用最合适的工具（如getCurrentTime()）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;标准工作流程&lt;/strong&gt;：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;输入提示&lt;/strong&gt;：用户向LLM提出请求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;LLM决策与请求&lt;/strong&gt;：LLM分析请求，并从可用工具集中选择一个或多个进行调用。它生成一个符合特定格式的请求。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;工具执行与结果返回&lt;/strong&gt;：开发者编写的外部代码捕获LLM的请求，执行相应的函数，并将函数的返回值（如具体时间“下午3:20”）获取。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;结果反馈与最终生成&lt;/strong&gt;：函数返回值被送回LLM，作为其对话历史的一部分。LLM基于这个新信息，生成最终的、对用户更有帮助的回答。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这一流程可以连续进行，LLM在一个任务中可能会按顺序调用多个工具，例如先通过checkCalendar查找空闲时间，再通过makeAppointment创建日程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-实现工具调用的机制&#34;&gt;2. 实现工具调用的机制&lt;/h2&gt;&#xA;&lt;p&gt;工具调用的技术实现经历了从手动、繁琐到自动化、标准化的演进。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-早期实现方式基于提示词的指令&#34;&gt;2.1 早期实现方式：基于提示词的指令&lt;/h3&gt;&#xA;&lt;p&gt;在LLM原生支持工具调用之前，开发者需要通过详细的系统提示（System Prompt）来“教”会模型如何请求工具。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;机制&lt;/strong&gt;：开发者在提示词中明确规定一种特殊格式，例如：“如果你需要调用getCurrentTime工具，请输出文本‘FUNCTION: getCurrentTime’。”&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;开发者工作&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编写代码来解析LLM的输出文本。&lt;/li&gt;&#xA;&lt;li&gt;使用正则表达式等方式检测是否存在关键词“FUNCTION:”。&lt;/li&gt;&#xA;&lt;li&gt;如果检测到，则提取函数名和参数。&lt;/li&gt;&#xA;&lt;li&gt;手动执行该函数，并将结果拼接回LLM的输入中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：这种方法非常“笨拙”（clunky），且高度依赖于提示词的稳定性和LLM的遵循能力，缺乏鲁棒性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-现代实现方式原生语法与自动化&#34;&gt;2.2 现代实现方式：原生语法与自动化&lt;/h3&gt;&#xA;&lt;p&gt;现代主流的LLM（如GPT-4o）经过专门训练，能够理解并使用一种标准化的工具调用语法。开发者不再需要手动设计提示词格式。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;机制&lt;/strong&gt;：开发者通过API将工具列表直接提供给LLM。这些工具通常通过一个结构化的JSON Schema来描述。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSON Schema的角色&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;它向LLM清晰地描述了每个工具的功能、名称和所需参数。&lt;/li&gt;&#xA;&lt;li&gt;name：函数名，如 getCurrentTime。&lt;/li&gt;&#xA;&lt;li&gt;description：功能的详细描述，如“获取指定时区的当前时间”。LLM依靠此描述来判断何时使用该工具。&lt;/li&gt;&#xA;&lt;li&gt;parameters：函数所需的输入参数及其类型和描述。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;自动化库（如AISuite）&lt;/strong&gt;：像AISuite这样的开源库极大地简化了这一过程。开发者只需提供Python函数，库会自动检查函数的文档字符串（docstring）和类型注解，并为其生成符合规范的JSON Schema。一个API调用（如client.chat.completions.create）就能完成从LLM决策、工具调用到结果反馈的整个循环。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-代码执行一种特殊的超级工具&#34;&gt;3. 代码执行：一种特殊的超级工具&lt;/h2&gt;&#xA;&lt;p&gt;在所有可用的工具中，允许LLM编写并执行代码的工具尤为强大和灵活，它将LLM的计算和逻辑推理能力提升到了新的高度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI模块4简报」工作流开发与优化</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-04/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-04/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai模块4简报工作流开发与优化&#34;&gt;「吴恩达Agentic AI模块4简报」工作流开发与优化&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;本简报深入剖析了构建和优化 Agentic AI 工作流的系统化、迭代化流程。核心理念是避免长时间的理论构思，而是通过快速构建一个“粗糙但可用”的初始系统来启动开发周期。该流程强调在“构建”和“分析”之间进行持续循环，通过严谨的评估与错误分析来指导开发方向，从而实现高效、有针对性的系统改进。&lt;/p&gt;&#xA;&lt;h3 id=&#34;关键要点&#34;&gt;关键要点&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;迭代式开发循环：&lt;/strong&gt; 成功的 Agentic AI 系统开发并非线性过程，而是一个在构建、评估、分析和改进之间不断循环的迭代过程。首先构建一个基本原型，然后通过分析其输出来发现问题，从而为下一步的构建工作指明方向。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;评估（Evals）是核心驱动力：&lt;/strong&gt; 建立评估体系是衡量进展和驱动改进的关键。评估应从简单的“端到端评估”开始，针对系统在特定方面的不足（如日期提取不准、文本长度超标）创建小规模的测试集（例如 10-20 个样本），以量化改进效果。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;系统的错误分析：&lt;/strong&gt; 为了确定应优先处理哪个系统组件，必须进行系统的错误分析。开发者应专注于系统出错的案例，审查每个步骤的“迹线”（traces），即中间输出，并使用电子表格等工具统计每个组件导致错误的频率。这能以数据驱动的方式揭示真正的瓶颈，避免凭直觉做出耗时且无效的决策。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;组件级评估的重要性：&lt;/strong&gt; 当错误分析指向特定组件时，建立“组件级评估”能极大提升优化效率。它能为该组件提供一个清晰、无干扰的性能信号，使得开发者可以快速迭代调整（如更换API、调整超参数），而无需每次都运行完整且昂贵的端到端评估。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;优化策略的多样性：&lt;/strong&gt; 针对不同组件的问题，需要采用不同的解决策略。对于非 LLM 组件，可以通过调整参数或更换工具来改进；对于基于 LLM 的组件，方法包括优化提示词、更换模型、分解任务，乃至在必要时进行模型微调。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;成本与延迟的后期优化：&lt;/strong&gt; 在系统输出质量达标之前，成本和延迟应是次要考虑因素。一旦系统性能稳定，可通过对工作流各环节进行基准测试，精确找出成本和时间开销最大的部分，然后有针对性地进行优化。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;总之，高效的 Agentic AI 工作流开发依赖于一套严谨的分析方法论，它能将开发者的精力引导至最能提升系统整体性能的地方。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-核心开发理念从快速原型到迭代优化&#34;&gt;1. 核心开发理念：从快速原型到迭代优化&lt;/h2&gt;&#xA;&lt;p&gt;构建 Agentic AI 系统的首要原则是快速行动。与其花费数周时间进行理论探讨和假设，不如尽快构建一个“粗糙但可用”（quick and dirty）的初始系统。这个原型不必完美，但它提供了一个可供观察和分析的实体。&lt;/p&gt;&#xA;&lt;h3 id=&#34;关键步骤&#34;&gt;关键步骤：&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;快速构建原型：以安全、负责任的方式（如避免数据泄露）快速搭建一个端到端的系统。&lt;/li&gt;&#xA;&lt;li&gt;手动审查输出：运行原型并审查一小批（如 10-20 个）样本的最终输出。&lt;/li&gt;&#xA;&lt;li&gt;识别错误模式：通过审查，识别系统常见的失败模式。例如，在发票处理工作流中，可能会发现系统经常混淆“发票开具日期”和“付款截止日期”。&lt;/li&gt;&#xA;&lt;li&gt;确定优化焦点：这种初步分析能够揭示系统的主要弱点，从而帮助开发者决定应将精力集中在哪个方面进行评估和改进。例如，如果日期混淆是主要问题，那么就应该优先建立一个衡量日期提取准确率的评估体系。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;“我发现，在开发一个 Agentic AI 系统时，很难预先知道它在哪里会运行良好，在哪里会表现不佳，因此也很难知道应该将精力集中在哪里。所以，一个非常普遍的建议是，先尝试构建一个哪怕是粗糙的系统，这样你就可以试用并观察它，看看哪些地方可能还没有达到你期望的效果，从而更有针对性地进行进一步开发。”&#xA;Andrew Ng&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;2-评估evals衡量和驱动系统改进&#34;&gt;2. 评估（Evals）：衡量和驱动系统改进&lt;/h2&gt;&#xA;&lt;p&gt;一旦确定了系统的关键弱点，下一步就是建立评估（Evals）体系来量化问题并跟踪改进进度。评估是推动系统性能提升的基石。&lt;/p&gt;&#xA;&lt;h3 id=&#34;端到端评估的构建&#34;&gt;端到端评估的构建&lt;/h3&gt;&#xA;&lt;p&gt;端到端评估衡量的是从用户输入到最终输出的整个系统的性能。构建方法取决于具体应用场景和发现的错误模式。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;案例 1：发票处理（提取截止日期）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;问题：系统经常混淆日期。&lt;/li&gt;&#xA;&lt;li&gt;评估构建：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;创建测试集：选取 10-20 张发票，手动记录下每张发票正确的“付款截止日期”，形成“真实标签”（ground truth）。&lt;/li&gt;&#xA;&lt;li&gt;标准化输出：在提示词中要求 LLM 始终以标准格式（如 YYYY-MM-DD）输出日期。&lt;/li&gt;&#xA;&lt;li&gt;编写评估代码：使用代码（如正则表达式）从 LLM 的输出中提取日期，并将其与真实标签进行比对。&lt;/li&gt;&#xA;&lt;li&gt;计算准确率：通过计算匹配正确的百分比来衡量系统性能，并以此为指标来迭代优化提示词或系统其他部分。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;案例 2：营销文案助手（控制文本长度）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;问题：生成的文案经常超过 10 个词的长度限制。&lt;/li&gt;&#xA;&lt;li&gt;评估构建：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;创建测试集：准备 10-20 个需要生成文案的产品图片和查询。&lt;/li&gt;&#xA;&lt;li&gt;编写评估代码：运行系统，然后编写代码计算每个输出文案的单词数量。&lt;/li&gt;&#xA;&lt;li&gt;衡量合规率：将单词数与 10 个词的目标进行比较，统计符合要求的比例。这个案例的特点是没有逐例的真实标签，所有样本共享同一个目标（长度小于等于10）。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;案例 3：研究助手（确保内容完整性）&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;问题：生成的文章有时会遗漏该领域专家认为至关重要的关键信息点。&lt;/li&gt;&#xA;&lt;li&gt;评估构建：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;创建测试集：设计多个研究主题（如“黑洞科学的最新突破”），并为每个主题手动编写 3-5 个“黄金标准讨论点”（gold standard discussion points）。&lt;/li&gt;&#xA;&lt;li&gt;使用 LLM-as-a-judge：由于关键点的表述方式多种多样，简单的代码匹配难以胜任。因此，可以利用另一个 LLM 作为“裁判”，让它判断系统生成的文章覆盖了多少个黄金标准讨论点。&lt;/li&gt;&#xA;&lt;li&gt;量化得分：提示词可以要求 LLM 裁判返回一个 JSON 对象，其中包含一个 0-5 的分数和解释，从而为每个样本生成一个量化评估结果。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;评估方法的分类框架&#34;&gt;评估方法的分类框架&lt;/h3&gt;&#xA;&lt;p&gt;评估方法可以根据两个维度进行分类，形成一个 2x2 的框架，这有助于系统性地思考如何为特定应用设计评估。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「吴恩达Agentic AI模块5简报」高度自主的智能体AI模式</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-05/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/insights/lec-05/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达agentic-ai模块5简报高度自主的智能体ai模式&#34;&gt;「吴恩达Agentic AI模块5简报」高度自主的智能体AI模式&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;本文档综合分析了构建高度自主的AI智能体的核心设计模式，重点阐述了&lt;strong&gt;规划（Planning）和多智能体系统（Multi-Agent Systems）&lt;/strong&gt; 这两种前沿方法。这些模式旨在让AI超越预设的指令序列，能够灵活地自主决策以完成复杂任务。&lt;/p&gt;&#xA;&lt;h3 id=&#34;核心洞察包括&#34;&gt;核心洞察包括&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;规划模式&lt;/strong&gt;：此模式赋予大语言模型（LLM）根据用户请求和可用工具集，自主生成多步骤行动计划的能力。这种方法极大地增强了AI的灵活性和处理复杂任务的范围，但同时也降低了开发者对系统运行时行为的直接控制和可预测性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;规划的实现方式&lt;/strong&gt;：为确保计划能被可靠执行，应采用结构化格式。其中，通过代码执行进行规划是最为强大的方法，它允许LLM利用其在编程语言（如Python）和大型代码库（如Pandas）上的丰富训练数据来构建复杂计划。相比之下，JSON和XML也是可靠的结构化格式，优于易产生歧义的Markdown或纯文本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;多智能体系统&lt;/strong&gt;：此模式借鉴了人类团队协作的理念，将一个复杂的宏观任务分解为多个子任务，并分配给具有特定角色和工具的专业化智能体。这种方法不仅简化了复杂系统的开发过程，还促进了智能体模块的复用性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;智能体通信模式&lt;/strong&gt;：多智能体系统的协作效率取决于其通信模式。目前最常见的两种模式是线性模式（按顺序依次执行）和层级模式（由一个“管理者”智能体协调多个“工作者”智能体）。此外，还存在更复杂但使用较少的深度层级模式和高度不可预测的“全体对全体”实验性模式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;核心设计模式规划&#34;&gt;核心设计模式：规划&lt;/h2&gt;&#xA;&lt;p&gt;规划是实现高度自主智能体的关键设计模式，它使智能体能够摆脱硬编码的步骤束缚，根据具体情境动态制定行动方案。&lt;/p&gt;&#xA;&lt;h3 id=&#34;概念与工作流程&#34;&gt;概念与工作流程&lt;/h3&gt;&#xA;&lt;p&gt;规划模式的核心思想是让LLM扮演决策者的角色，而非仅仅是指令的执行者。其工作流程通常如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;接收输入：向LLM提供用户的原始请求以及一个包含可用工具及其功能的列表。&lt;/li&gt;&#xA;&lt;li&gt;生成计划：提示LLM根据用户目标，返回一个分步执行的计划。&lt;/li&gt;&#xA;&lt;li&gt;顺序执行：系统逐一执行计划中的每个步骤。每一步的输出结果都会作为上下文信息，被传递给下一步，以确保任务的连贯性。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这种模式的显著优势在于，开发者无需预先预测并编码所有可能的工具调用序列，从而使智能体能够应对更加多样化和复杂的请求。&lt;/p&gt;&#xA;&lt;p&gt;应用案例&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;电商客服智能体：假设一个太阳镜零售店的客服智能体被问到：“你们有100美元以下的圆形太阳镜库存吗？” 该智能体可以规划出如下步骤：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用get_item_descriptions工具筛选出所有描述为“圆形”的太阳镜。&lt;/li&gt;&#xA;&lt;li&gt;将筛选结果传入check_inventory工具，确认哪些有库存。&lt;/li&gt;&#xA;&lt;li&gt;最后使用get_item_price工具，检查有库存的圆形太阳镜价格是否低于100美元，并最终回答用户。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;邮件助手：对于指令“请回复纽约Bob的邮件，告诉他我会参加，然后把他的邮件归档”，智能体可以生成计划：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用search_email工具找到来自Bob的、提及“纽约”和“晚餐”的邮件。&lt;/li&gt;&#xA;&lt;li&gt;生成并发送一封确认参加的回复邮件。&lt;/li&gt;&#xA;&lt;li&gt;使用move_email工具将原邮件移动到归档文件夹。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;现状与挑战&#34;&gt;现状与挑战&lt;/h3&gt;&#xA;&lt;p&gt;规划模式在某些领域已取得显著成功，但在其他领域的应用仍在发展中。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;成功应用：在高度智能化的软件编码系统中，该模式表现出色。这些系统可以为复杂的软件开发任务制定详细的构建计划（如先构建组件A，再构建组件B，并进行测试），然后像执行清单一样逐步完成。&lt;/li&gt;&#xA;&lt;li&gt;挑战与实验性：在其他行业，规划模式的应用尚不普及。主要挑战在于可控性和可预测性的降低。由于开发者不直接规定执行路径，系统的运行时行为变得难以预料，这给系统的稳定性和可靠性带来了挑战。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;规划的实现与优化&#34;&gt;规划的实现与优化&lt;/h3&gt;&#xA;&lt;p&gt;为了让LLM生成的计划能够被下游代码清晰、无歧义地解析和执行，选择合适的输出格式至关重要。&lt;/p&gt;&#xA;&lt;h4 id=&#34;结构化规划格式&#34;&gt;结构化规划格式&lt;/h4&gt;&#xA;&lt;p&gt;要求LLM以机器可读的格式输出计划，是确保其可靠执行的前提。不同格式的可靠性存在差异。&lt;/p&gt;&#xA;&lt;p&gt;格式 (Format)&#x9;可靠性 (Reliability)&#x9;备注 (Notes)&#xA;代码 (Code)&#x9;非常高 (Very High)&#x9;最强大的方法，直接生成可执行代码作为计划，利用现有编程语言和库的强大功能。&#xA;JSON&#x9;高 (High)&#x9;常见且可靠，通过键值对（如step, tool, arguments）清晰定义步骤。&#xA;XML&#x9;良好 (Good)&#x9;另一种可靠的结构化选项，使用标签明确定义计划结构。&#xA;Markdown&#x9;中等 (Medium)&#x9;解析时可能存在轻微歧义，不如JSON或XML严谨。&#xA;纯文本 (Plain Text)&#x9;低 (Low)&#x9;最不可靠的选项，解析困难且容易出错。&lt;/p&gt;</description>
    </item>
    <item>
      <title>吴恩达 Agentic AI 课程实录（完整版）</title>
      <link>https://linguage.github.io/courses/andrew-ng-agentic-ai/agenticai/</link>
      <pubDate>Fri, 17 Oct 2025 13:01:13 +0800</pubDate>
      <guid>https://linguage.github.io/courses/andrew-ng-agentic-ai/agenticai/</guid>
      <description>&lt;div class=&#34;link-card&#34; data-url=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;&#xA;  &lt;a class=&#34;link-card__fallback&#34; href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&#xA;    https://learn.deeplearning.ai/courses/agentic-ai/&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;吴恩达课程agentic-ai&#34;&gt;吴恩达课程：Agentic AI&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;作者：吴恩达（Andrew Ng）&lt;/li&gt;&#xA;&lt;li&gt;课程链接：&lt;a href=&#34;https://learn.deeplearning.ai/courses/agentic-ai/&#34;&gt;DeepLearning.ai - Agentic AI&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;模块一agentic-ai简介&#34;&gt;模块一：Agentic AI简介&lt;/h1&gt;&#xA;&lt;h2 id=&#34;10-简介&#34;&gt;1.0 简介&lt;/h2&gt;&#xA;&lt;p&gt;欢迎来到这门关于 Agentic AI 的课程。当我创造 “agentic” 这个词来描述我所看到的一种重要且快速增长的、人们构建基础应用的方式时，我没有意识到的是，一群营销人员会抓住这个词，把它当成一个标签，贴在几乎所有能看到的东西上。这导致了对 Agentic AI 的炒作急剧升温。不过，好消息是，抛开炒作不谈，使用 Agentic AI 构建的真正有价值和有用的应用数量也增长得非常迅速，即使没有炒作那么快。在本课程中，我想向您展示构建 Agentic AI 应用的最佳实践。这将在您现在可以构建什么方面，为您开启许多新的机会。&lt;/p&gt;&#xA;&lt;p&gt;如今，agentic 工作流正被用于构建客户支持代理等应用，或进行深度研究以帮助撰写富有洞察力的研究报告，或处理棘手的法律文件，或查看患者输入信息并提出可能的医学诊断。在我带的许多团队中，我们构建的很多项目如果没有 agentic 工作流是根本不可能完成的。因此，知道如何用它们来构建应用是当今 AI 领域最重要和最有价值的技能之一。&lt;/p&gt;&#xA;&lt;p&gt;我发现，真正懂得如何构建 agentic 工作流的人与那些效率较低的人之间，最大的区别之一是能否推动一个规范的开发流程，特别是专注于评估和错误分析的流程。在本课程中，我将告诉您这意味着什么，并向您展示如何才能真正擅长构建这些 agentic 工作流。能够做到这一点是当今 AI 领域最重要的技能之一，它将为您开启更多的机会，无论是工作机会，还是亲手打造出色软件的机会。&lt;/p&gt;&#xA;&lt;p&gt;那么，让我们进入下一个视频，更深入地探讨什么是 agentic 工作流。&lt;/p&gt;&#xA;&lt;h2 id=&#34;11-什么是-agentic-ai&#34;&gt;1.1 什么是 Agentic AI&lt;/h2&gt;&#xA;&lt;p&gt;那么，什么是 Agentic AI？为什么 Agentic AI 工作流如此强大？让我们来看一看。&lt;/p&gt;&#xA;&lt;p&gt;如今，我们许多人使用大型语言模型（LLM）的方式是提示它，比如说，为我们写一篇关于某个主题 X 的文章。我认为这类似于去找一个人，或者在这种情况下，去找一个 AI，请它为我打出一篇文章，要求它从第一个词写到最后一个词，一气呵成，并且永远不能使用退格键。事实证明，我们人类并不能通过这种被迫以完全线性顺序写作的方式来完成我们最好的作品，AI 模型也是如此。但尽管受到这种写作方式的限制，我们的大语言模型表现得出奇地好。&lt;/p&gt;&#xA;&lt;p&gt;相比之下，使用 agentic 工作流，过程可能是这样的：你可能会让它首先写一个关于某个主题的文章大纲，然后问它是否需要进行任何网络研究。在进行了一些网络研究并可能下载了一些网页之后，再让它撰写初稿，然后阅读初稿，看看哪些部分需要修改或做更多研究，接着修改草稿，如此循环。这种工作流更类似于先进行一些思考和研究，然后进行一些修改，再进行更多的思考，等等。通过这种迭代过程，事实证明，agentic 工作流可能需要更长的时间，但它能交付出质量好得多的工作成果。&lt;/p&gt;&#xA;&lt;p&gt;所以，一个 Agentic AI 工作流是一个基于 LLM 的应用执行多个步骤来完成一项任务的过程。在这个例子中，你可能会使用一个 LLM 来撰写文章大纲，然后你可能会使用一个 LLM 来决定在网络搜索引擎中输入什么搜索词，或者说，用什么搜索词来调用网络搜索 API，以获取相关的网页。基于此，你可以将下载的网页输入到一个 LLM 中，让它撰写初稿，然后可能使用另一个 LLM 进行反思，并决定哪些地方需要更多修改。根据你设计这个工作流的方式，也许你甚至可以加入一个“人类在环”的步骤，让 LLM 可以选择请求人类审查某些关键事实。在此基础上，它可能会修改草稿，这个过程会产生一个好得多的工作输出。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
