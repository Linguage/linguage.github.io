<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>研究方法 on Linguista</title>
    <link>https://linguage.github.io/categories/%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95/</link>
    <description>Recent content in 研究方法 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Feb 2019 22:39:59 +0000</lastBuildDate>
    <atom:link href="https://linguage.github.io/categories/%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数学阅读中的&#34;编译错误&#34;及其解决方法</title>
      <link>https://linguage.github.io/terencetao/writing-guide/zh/on-compilation-errors-in-mathematical-reading-and-how-to-resolve-them.zh/</link>
      <pubDate>Fri, 15 Feb 2019 22:39:59 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/writing-guide/zh/on-compilation-errors-in-mathematical-reading-and-how-to-resolve-them.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/writing-guide/en/on-compilation-errors-in-mathematical-reading-and-how-to-resolve-them/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/advice-on-writing-papers/on-compilation-errors-in-mathematical-reading-and-how-to-resolve-them/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;数学阅读中的编译错误及其解决方法&#34;&gt;数学阅读中的&amp;quot;编译错误&amp;quot;及其解决方法&lt;/h1&gt;&#xA;&lt;p&gt;计算机以过于字面化地解释语言而闻名；在原本完美的软件代码中，一个放错位置的括号就可能导致计算机在代码编译过程中因完全无法理解而停止。&lt;/p&gt;&#xA;&lt;p&gt;人类在阅读自然语言时往往在这方面要稳健得多；一旦某人熟练掌握，比如英语，通常能够处理文本中合理数量的拼写或语法错误，特别是当写作风格清晰有条理，且文本主题对读者来说很熟悉时。&lt;/p&gt;&#xA;&lt;p&gt;然而，当研究生第一次遇到阅读技术性数学论文的任务时，往往会失去大部分高级阅读技能，转而采用更正式且乏味的逐行解读方式。因此，论文中的一个排版错误或未定义术语可能导致对论文的理解完全停滞，就像计算机一样。在许多情况下，这种&amp;quot;编译错误&amp;quot;可以通过继续阅读论文来解决。&lt;/p&gt;&#xA;&lt;p&gt;在某些情况下，只需阅读接下来的一两行就能对刚引入的神秘术语或逻辑中未解释的步骤提供很多启示。在其他情况下，需要阅读更远的内容；例如，如果引理15的结论难以理解，可以继续阅读该引理证明的结尾（其中大概会得出该结论），或者搜索到，比如命题23，其中引用了引理15，以获得关于引理15试图表达什么的更多线索。（在这方面，PDF阅读器等工具中的搜索功能特别有用。）&lt;/p&gt;&#xA;&lt;p&gt;同样要记住，没有作者是绝对正确的，在某些情况下，无法理解的最简单解释是文本中存在排版错误。例如，假设一篇论文声称&amp;quot;由于A为真，B为真&amp;quot;，但当某人仔细推敲时，无法从A推导出B，而只能得出一个稍有不同的结论B&amp;rsquo;。稍后在文本中，论文声称&amp;quot;由于B为真，则C为真&amp;quot;，但某人再次难以从B推导出C。这里，最可能的诊断是作者实际上想在这两处都写B&amp;rsquo;而不是B。&lt;/p&gt;&#xA;&lt;p&gt;类似地，如果论文包含一个你不太理解但选择忽略以便继续阅读的隐晦评论，然后两行后你发现了一个结论的推导，但你看不出这是先前陈述的结果，那么你应该回到那个隐晦评论并非常仔细地解析它，因为它很可能是达到所述结论所需的缺失假设或技术的描述。&lt;/p&gt;&#xA;&lt;p&gt;有时需要寻找关键词的缺失，而不是它们的存在。例如，假设论文中先断言了陈述A，紧接着是陈述B。你理解A是如何推导出来的，但你看不出如何使用A来推导B。但是否有诸如&amp;quot;因此&amp;quot;、&amp;ldquo;所以&amp;quot;或&amp;quot;结果&amp;quot;之类的关键词实际上表明A被用来推导B？如果没有，那么这里可能发生的情况是B是从A以外的其他来源推导出来的，带着这种想法重新阅读A和B附近或紧接在前的文本可能会揭示B是如何建立的。&lt;/p&gt;&#xA;&lt;p&gt;另一个有用的技巧是通过将注意力限制在更简单的特殊情况，或采用某种启发式方法使论文的某些技术部分变得平凡（或至少使论文的某些步骤对读者来说足够合理，以至于愿意跳过这些步骤的证明细节），来将论文&amp;quot;投影&amp;quot;为更简单、更短的论文。例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果论文处理的是通用维度中的结果，可以首先将论文特化到一维（即使这意味着主要结果不再是新的，而是先前文献的推论）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;或者：如果论文需要分析表达式中的主项和误差项，可以采用所有误差项都可忽略的启发式方法，只关注主项（或者对偶地，可以接受主项总是会计算出正确答案，只关注控制误差项）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果某人知道主要结果的一个近似反例，将论文特化到该近似反例（或试图成为真正反例的该近似反例的假设扰动）通常非常有启发性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;理想情况下，应该投影掉论文中大约一半的困难，留下一个简单两倍的论文，因此大概更容易理解；一旦完成这一点，可以撤销投影，回到原始论文，现在原始论文已经被理解了一半，并且比理解投影论文之前要容易理解得多。（阅读论文的难度通常随着论文复杂度的增加而超线性增长，因此将论文分解为两个子论文，每个具有一半的复杂度，通常是一种高效的方法。）&lt;/p&gt;&#xA;&lt;p&gt;最后，也许最重要的是，当某人能够以某种方式&amp;quot;进入作者的头脑&amp;rdquo;，并感受到作者试图通过论文中的每个陈述或引理做什么，而不是仅仅关注文本中的字面陈述时，阅读会变得容易得多。一个好的作者会在数学文本中穿插旨在做到这一点的评论，但即使没有这种明确的线索，通过将其与其他论文中的类似组成部分进行比较，或通过查看这样的组成部分在论文其余部分的使用方式，通常可以感受到论文每个组成部分的目的。在极端情况下，可能不得不去一个大黑板前，绘制论文的所有逻辑依赖关系图（例如，如果引理6和引理8被用来证明定理10，可以相应地绘制带有这些名称的方框之间的箭头），以获得对论文中关键步骤的一些理解。&lt;/p&gt;&#xA;&lt;p&gt;关于如何证明论文中一个看起来特别可怕的步骤的进一步原则，请参阅[我在MathOverflow上的这个回答](this MathOverflow answer of mine)。&lt;/p&gt;&#xA;&lt;p&gt;关于在写作论文的对偶问题中的类似技巧，请参阅[这个页面](this page)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>先写一个快速原型</title>
      <link>https://linguage.github.io/terencetao/writing-guide/zh/write-a-rapid-prototype-first.zh/</link>
      <pubDate>Mon, 14 May 2007 09:03:58 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/writing-guide/zh/write-a-rapid-prototype-first.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/writing-guide/en/write-a-rapid-prototype-first/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/advice-on-writing-papers/write-a-rapid-prototype-first/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;先写一个快速原型&#34;&gt;先写一个快速原型&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;最好的性能改进是从不工作状态到工作状态的转变。&#xA;——约翰·奥斯特豪特&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;发现数学问题的解决方案只是战斗的一半。实际上把你发现的论证正式写下来也可能是一项艰巨的任务，特别是当论证很长且没有文献中现有模型可借鉴时。虽然论证的每个细节对作者来说可能都很清楚，但论证的整体结构可能不会立即显而易见。特别是，通常很难在论文的大部分内容已经写完之前就做出关于以下内容的重要决定：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;论证的组织结构&lt;/strong&gt;，以及&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;良好符号的选择&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;到那时，组织或符号的任何更改通常都变得难以实施。（过去很多时候，我在没有充分考虑整体结构的情况下开始写论文，花了很多时间建立一些我认为重要的引理，结果后来意识到实际上并不需要这个引理，从而浪费了大量时间。）&lt;/p&gt;&#xA;&lt;p&gt;我发现软件工程中的&lt;strong&gt;快速原型&lt;/strong&gt;技术有助于缓解这些困难。根据这种技术，人们不按线性顺序写论文，也克制住先写最简单或最直接部分的诱惑。相反，人们按照以下顺序写论文。&lt;/p&gt;&#xA;&lt;h2 id=&#34;快速原型过程&#34;&gt;快速原型过程&lt;/h2&gt;&#xA;&lt;h3 id=&#34;第一阶段骨架&#34;&gt;第一阶段：骨架&lt;/h3&gt;&#xA;&lt;p&gt;首先，尽可能快地写出一个精简的&amp;quot;骨架&amp;quot;或&amp;quot;原型&amp;quot;；这个原型包含所有关键引理、命题和定理的（近似）陈述，以及所有关键定义，但所有证明都被省略，或者用非常不正式的&amp;quot;给自己看的笔记&amp;quot;来勾勒。在写作过程的主要阶段，优先考虑的是把&amp;quot;大局&amp;quot;弄对——论文的逻辑组织，以及每个重要命题或符号的一些半精确描述。这些描述的模糊性将允许人们轻松地移动论证的部分内容来改进这个大局。&lt;/p&gt;&#xA;&lt;h3 id=&#34;第二阶段精确陈述&#34;&gt;第二阶段：精确陈述&lt;/h3&gt;&#xA;&lt;p&gt;在组织达到满意程度后，第二个目标是写下足够的证明，以便能够使所有引理、命题、定理和定义的陈述变得精确。&lt;/p&gt;&#xA;&lt;h3 id=&#34;第三阶段关键论证&#34;&gt;第三阶段：关键论证&lt;/h3&gt;&#xA;&lt;p&gt;一旦完成这一点，第三个目标是仔细写出论证的关键部分，例如从两个先前的关键引理推导出一个关键命题，以确保结构确实按预期工作。&lt;/p&gt;&#xA;&lt;h3 id=&#34;第四阶段常规填充&#34;&gt;第四阶段：常规填充&lt;/h3&gt;&#xA;&lt;p&gt;最后，填充论文的所有&amp;quot;常规&amp;quot;方面，例如标准引理的证明，或主要定理的快速应用。通常，到这个阶段，论文中剩余的空白是如此不连贯，以至于基本上可以按任何顺序填充。这也是&lt;strong&gt;写引言&lt;/strong&gt;和类似&lt;strong&gt;动机部分&lt;/strong&gt;的好时机。&lt;/p&gt;&#xA;&lt;h2 id=&#34;实际实施技巧&#34;&gt;实际实施技巧&lt;/h2&gt;&#xA;&lt;p&gt;任何不影响大局的决定都应该推迟到这个过程的后期。例如，如果你有一个小量，可能等于&lt;code&gt;x&lt;/code&gt;或者可能是&lt;code&gt;y&lt;/code&gt;，但还不知道确切是哪一个，你可以暂时写&amp;quot;令&lt;code&gt;???&lt;/code&gt;&amp;quot;，并在证明中使用&lt;code&gt;???&lt;/code&gt;作为这个量的占位符，直到你到达证明中确切弄清楚&lt;code&gt;???&lt;/code&gt;应该是什么的点，那时你可以编辑单行来完成证明。（与此相对的是在证明中的两打地方写&lt;code&gt;x&lt;/code&gt;，然后在写作过程的后期发现必须回去把这两打地方中的&lt;code&gt;x&lt;/code&gt;改为&lt;code&gt;y&lt;/code&gt;（以及&lt;code&gt;x^2&lt;/code&gt;改为&lt;code&gt;y^2&lt;/code&gt;等）。即使有现代的搜索替换工具，这也可能是一项令人恼火的耗时任务。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;协作好处&#34;&gt;协作好处&lt;/h2&gt;&#xA;&lt;p&gt;这种方法的一个好处是它可以与合著者分工。例如，一位作者可以写出证明的非正式草图，省略许多细节，然后另一位合著者可以调整组织和符号，然后填充细节，然后第一位作者可以审阅论文并添加一些评论和写引言。许多其他排列也是可能的；这在很大程度上取决于协作的性质。使用版本控制软件（例如 Subversion）可以极大地促进这个过程，我建议投入一些时间学习如何使用这类软件（例如从[这个链接](this link)开始）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;写作过程中的想法管理&#34;&gt;写作过程中的想法管理&lt;/h2&gt;&#xA;&lt;p&gt;当你在写论文的某一部分时，经常会得到关于如何处理论文另一部分的好想法；例如，在写下引理时，可能会有一个例子或评论的想法来阐明该引理。当这种情况发生时，我不建议忽略那个想法，也不建议放下当前正在做的事情来完全充实那个想法；相反，花一分钟时间在论文的相关位置为那个想法写一个&amp;quot;存根&amp;quot;（只需足够在回到那个位置时唤起记忆），然后回到之前正在做的事情，以免打断你的注意力或动力。然后可以暂时安全地忘记那个想法，在写作过程更合适的阶段，在闲暇时重新审视它。&lt;/p&gt;&#xA;&lt;h2 id=&#34;注意事项和替代方案&#34;&gt;注意事项和替代方案&lt;/h2&gt;&#xA;&lt;p&gt;快速原型策略通常很难完美遵守，我必须承认有时（特别是对于较短的论文）我采取非常不同的方法，先写论文&amp;quot;容易&amp;quot;和&amp;quot;有趣&amp;quot;的部分（例如引言，或一些简单的引理），并试图利用产生的动力来快速写出论文的其余部分。如果你&lt;strong&gt;非常&lt;/strong&gt;确信论文的大规模结构将如何安排，这种方法往往效果很好，但当我在写作过程中发现完全不同的组织方式会好得多时，我后悔使用了这种更仓促的方法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;相关阅读&#34;&gt;相关阅读&lt;/h2&gt;&#xA;&lt;p&gt;关于应用于&lt;strong&gt;阅读&lt;/strong&gt;论文这一对偶问题的类似技术，请参见[此页面](this page)。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
