<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>智能代理开发 on Linguista</title>
    <link>https://linguage.github.io/categories/%E6%99%BA%E8%83%BD%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 智能代理开发 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 30 Sep 2025 11:37:09 +0800</lastBuildDate>
    <atom:link href="https://linguage.github.io/categories/%E6%99%BA%E8%83%BD%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为 Claude Sonnet 4.5 重构 Devin：经验与挑战</title>
      <link>https://linguage.github.io/labs/cognition_report_claude-4-5/</link>
      <pubDate>Tue, 30 Sep 2025 11:37:09 +0800</pubDate>
      <guid>https://linguage.github.io/labs/cognition_report_claude-4-5/</guid>
      <description>&lt;p&gt;原文见：&lt;a href=&#34;https://cognition.ai/blog/devin-sonnet-4-5-lessons-and-challenges#the-model-is-aware-of-its-context-window&#34;&gt;Rebuilding Devin for Claude Sonnet 4.5: Lessons and Challenges&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们为 Claude Sonnet 4.5 重构了 Devin。新版本在我们的初级开发人员评估 (Junior Developer Evals) 中速度提升了 2 倍，表现提高了 12%，现已在“智能代理预览”(Agent Preview) 中提供。对于喜欢旧版 Devin 的用户，该版本仍然可用。&lt;/p&gt;&#xA;&lt;p&gt;2025年9月29日 Cognition 团队&lt;/p&gt;&#xA;&lt;!----more---&gt;&#xA;&lt;p&gt;&lt;strong&gt;我们为 Claude Sonnet 4.5 重构了 Devin。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;新版本在我们的初级开发人员评估中速度提升了 2 倍，表现提高了 12%，现已在“智能代理预览”中提供。对于喜欢旧版 Devin 的用户，该版本仍然可用。&lt;/p&gt;&#xA;&lt;p&gt;为什么选择重构，而不是简单地替换成新的 Sonnet 模型就草草了事？因为这个模型的运作方式&lt;em&gt;与众不同&lt;/em&gt;——它打破了我们对智能代理应如何构建的固有设想。以下是我们的心得：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cdn.sanity.io/images/2mc9cv2v/production/307b567295a50c82cb3fea942dd578f576beb5f0-2926x2074.png&#34;&gt;&lt;img src=&#34;https://cdn.sanity.io/images/2mc9cv2v/production/307b567295a50c82cb3fea942dd578f576beb5f0-2926x2074.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;因为 Devin 是一个会规划、执行和迭代的智能代理，而不仅仅是自动补全代码（或充当一个“副驾驶”），所以我们得以用一个独特的窗口来观察模型的能力。每一次改进都会在我们的反馈循环中产生复合效应，让我们了解到真正发生了哪些变化。在 Sonnet 4.5 上，我们看到了自 Sonnet 3.6（Devin 正式版所使用的模型）以来最大的飞跃：规划性能提升了 18%，端到端评估得分提高了 12%，长达数小时的任务会话也变得更快、更可靠。&lt;/p&gt;&#xA;&lt;p&gt;为了实现这些改进，我们不仅需要围绕模型的一些新功能重构 Devin，还必须针对一些我们在前几代模型中从未注意到的新行为进行调整。我们将在下面分享一些我们的观察：&lt;/p&gt;&#xA;&lt;h2 id=&#34;模型能意识到自己的上下文窗口&#34;&gt;模型能意识到自己的上下文窗口&lt;/h2&gt;&#xA;&lt;p&gt;Sonnet 4.5 是我们见过的第一个能意识到自身上下文窗口的模型，这一点塑造了它的行为方式。我们观察到，当接近上下文限制时，它会主动总结自己的进展，并更果断地实施修复以完成任务。&lt;/p&gt;&#xA;&lt;p&gt;这种“上下文焦虑”实际上可能会损害性能：我们发现，当模型认为自己接近窗口末尾时，即使还有足够的空间，它也会选择走捷径或将任务半途而废。&lt;/p&gt;&#xA;&lt;p&gt;为了克服这种行为，我们最终采用了相当激进的提示 (prompting) 方式。即便如此，我们发现仅在对话开始时给出提示是不够的——我们必须在提示的开头和结尾都加上提醒，以防止它过早地结束工作。&lt;/p&gt;&#xA;&lt;p&gt;在研究解决这个问题的方法时，我们发现了一个意想不到的技巧，效果很好：&lt;strong&gt;启用 100 万 token 的测试版，但将使用量上限设为 20 万&lt;/strong&gt;。这让模型认为自己还有充足的余地，从而表现正常，避免了由焦虑驱动的捷径行为或性能下降。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
