<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数学符号 on Linguista</title>
    <link>https://linguage.github.io/categories/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/</link>
    <description>Recent content in 数学符号 on Linguista</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 29 Jul 2014 08:12:51 +0000</lastBuildDate>
    <atom:link href="https://linguage.github.io/categories/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>隐含的符号约定</title>
      <link>https://linguage.github.io/terencetao/writing-guide/zh/implicit-notational-conventions.zh/</link>
      <pubDate>Tue, 29 Jul 2014 08:12:51 +0000</pubDate>
      <guid>https://linguage.github.io/terencetao/writing-guide/zh/implicit-notational-conventions.zh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linguage.github.io/terencetao/writing-guide/en/implicit-notational-conventions/&#34;&gt;原文(English)&lt;/a&gt;&#xA;&lt;a href=&#34;https://terrytao.wordpress.com/advice-on-writing-papers/implicit-notational-conventions/&#34;&gt;原博客链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;隐含的符号约定&#34;&gt;隐含的符号约定&lt;/h1&gt;&#xA;&lt;p&gt;[转载自 2010 年 3 月 20 日的一篇 Google Buzz 文章。]&lt;/p&gt;&#xA;&lt;p&gt;与任何其他人类语言一样，数学符号有许多隐含的约定，这些约定通常不会在语言的正式描述中明确说明。这些约定通过传达数学句子形式逻辑内容之外的额外上下文数据，起到了有益的作用。&lt;/p&gt;&#xA;&lt;p&gt;一个很好的例子是变量的命名约定。虽然原则上任何符号都可以用于一种变量类型，但实际上单个符号具有预先存在的内涵，使得将它们分配给特定的变量类型更加自然。例如，人们通常表示：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 表示实数&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;z&lt;/code&gt; 表示复数&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 表示自然数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;一个涉及复数 &lt;code&gt;x&lt;/code&gt;、自然数 &lt;code&gt;z&lt;/code&gt; 和实数 &lt;code&gt;n&lt;/code&gt; 的数学论证读起来会非常奇怪。这方面最著名的例子可能是在分析中使用符号 &lt;code&gt;ε&lt;/code&gt;；一个涉及非常大或负的 &lt;code&gt;ε&lt;/code&gt; 量的分析论证会引起大量不必要的认知失调。相比之下，通过坚持每个符号所扮演的传统角色，论证的符号结构得到加强，更容易记忆；暂时忘记了论证中 &lt;code&gt;z&lt;/code&gt; 定义的读者至少可以猜测它应该是一个复数，这有助于回忆起实际的定义是什么。&lt;/p&gt;&#xA;&lt;p&gt;作为分析中的另一个例子，当陈述不等式如 &lt;code&gt;f(x) ≤ C&lt;/code&gt; 或 &lt;code&gt;|S| ≤ N&lt;/code&gt; 时，习惯上左侧代表希望控制的&amp;quot;未知&amp;quot;量，右侧代表更能控制的&amp;quot;已知&amp;quot;量；因此，例如 &lt;code&gt;f(x) ≤ C&lt;/code&gt; 优于 &lt;code&gt;C ≥ f(x&lt;/code&gt;)，尽管这两个陈述在逻辑上是等价的。这就是为什么分析学家对&amp;quot;上界&amp;quot;和&amp;quot;下界&amp;quot;做出重要区分的原因；两者并不对称，因为在两种情况下，都是用已知量来界定未知量。（分析中另一个相关的约定是，最好界定非负量而不是非正量，因此例如 &lt;code&gt;f(x) ≥ 0&lt;/code&gt; 优于 &lt;code&gt;-f(x) ≤ 0&lt;/code&gt;。）&lt;/p&gt;&#xA;&lt;p&gt;继续上面的例子，如果已知界 &lt;code&gt;C&lt;/code&gt; 本身是几个项的和，例如 &lt;code&gt;C = A + B&lt;/code&gt;，那么习惯上将&amp;quot;主&amp;quot;项放在前面，&amp;ldquo;误差&amp;quot;项放在后面；因此例如 &lt;code&gt;f(x) ≤ A + B&lt;/code&gt; 优于 &lt;code&gt;f(x) ≤ B + A&lt;/code&gt;。通过遵守这个标准约定，可以传达哪些项被视为主项、哪些项被视为误差项的有用信息。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
